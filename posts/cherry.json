[{"id":921,"date":"2020-05-20T06:30:29","date_gmt":"2020-05-20T06:30:29","guid":{"rendered":"http://python3.foobrdigital.com/?p=921"},"modified":"2020-12-15T08:10:37","modified_gmt":"2020-12-15T08:10:37","slug":"introduction-3","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-3/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>CherryPy is a web framework of Python which provides a friendly interface to the HTTP protocol for Python developers. It is also called a web application library.</p>\n\n\n\n<p>CherryPy uses Python’s strengths as a dynamic language to model and bind HTTP protocol into an API. It is one of the oldest web frameworks for Python, which provides clean interface and reliable platform.</p>\n\n\n\n<h2>History of CherryPy</h2>\n\n\n\n<p>Remi Delon released the first version of CherryPy in late June 2002. This was the starting point of a successful Python web library. Remi is a French hacker who has trusted Python for being one of the greatest alternatives for web application development.</p>\n\n\n\n<p>The project developed by Remi attracted a number of developers who were interested in the approach. The approach included the following features −</p>\n\n\n\n<ul><li>CherryPy was close to the model-view-controller pattern.</li><li>A CherryPy class has to be processed and compiled by the CherryPy engine to produce a self-contained Python module embedding the complete application and also its own built-in web server.</li><li>CherryPy can map a URL and its query string into a Python method call, for example −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>http://somehost.net/echo?message=hello would map to echo(message='hello')</code></pre>\n\n\n\n<p>During the two years of development in CherryPy project, it was supported by the community and Remi released several improved versions.</p>\n\n\n\n<p>In June 2004, a discussion started about the future of the project and whether it should continue with the same architecture. Brainstorming and discussion by several project regulars then led to the concept of object-publishing engine and filters, which soon became a core part of CherryPy2.Later, in October 2004, the first version of CherryPy 2 alpha was released as a proof of concept of these core ideas. CherryPy 2.0 was a real success; however, it was recognized that its design could still be improved, and needed refactoring.</p>\n\n\n\n<p>After discussions based on feedbacks, CherryPy&#8217;s API was further modified to improve its elegance, leading to the release of CherryPy 2.1.0 in October 2005. After various changes, the team released CherryPy 2.2.0 in April 2006.</p>\n\n\n\n<h2>Strengths of CherryPy</h2>\n\n\n\n<p>The following features of CherryPy are considered as its strengths −</p>\n\n\n\n<h3>Simplicity</h3>\n\n\n\n<p>Developing a project in CherryPy is a simple task with few lines of code developed as per the conventions and indentations of Python.</p>\n\n\n\n<p>CherryPy is also very modular. The primary components are well managed with correct logic concept and parent classes are expandable to child classes.</p>\n\n\n\n<h3>Power</h3>\n\n\n\n<p>CherryPy leverages all the power of Python. It also provides tools and plugins, which are powerful extension points needed to develop world-class applications.</p>\n\n\n\n<h3>Open-source</h3>\n\n\n\n<p>CherryPy is an open-source Python Web Framework (licensed under the open-source BSD license), which means this framework can be used commercially at ZERO cost.</p>\n\n\n\n<h3>Community Help</h3>\n\n\n\n<p>It has a devoted community which provides complete support with various types of questions and answers. The community tries to give complete assistance to the developers starting from the beginner level to the advanced level.</p>\n\n\n\n<h3>Deployment</h3>\n\n\n\n<p>There are cost effective ways to deploy the application. CherryPy includes its own production-ready HTTP server to host your application. CherryPy can also be deployed on any WSGI-compliant gateway.</p>\n","protected":false},"excerpt":{"rendered":"<p>CherryPy is a web framework of Python which provides a friendly interface to the HTTP protocol for Python developers. It is also called a web application library. CherryPy uses Python’s strengths as a dynamic language to model and bind HTTP protocol into an API. It is one of the oldest web frameworks for Python, which [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1790,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/921"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=921"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/921/revisions"}],"predecessor-version":[{"id":922,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/921/revisions/922"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1790"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=921"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=921"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=921"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":923,"date":"2020-05-20T06:42:28","date_gmt":"2020-05-20T06:42:28","guid":{"rendered":"http://python3.foobrdigital.com/?p=923"},"modified":"2020-12-15T08:10:36","modified_gmt":"2020-12-15T08:10:36","slug":"environment-setup","status":"publish","type":"post","link":"https://python3.foobrdigital.com/environment-setup/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>CherryPy comes in packages like most open-source projects, which can be downloaded and installed in various ways which are mentioned as follows −</p>\n\n\n\n<ul><li>Using a Tarball</li><li>Using easy_install</li><li>Using Subversion</li></ul>\n\n\n\n<h2>Requirements</h2>\n\n\n\n<p>The basic requirements for installation of CherryPy framework include −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Python with version 2.4 or above\nCherryPy 3.0</code></pre>\n\n\n\n<p>Installing a Python module is considered an easy process. The installation includes the use of the following commands.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python setup.py build\npython setup.py install</code></pre>\n\n\n\n<p>The packages of Python are stored in the following default directories −</p>\n\n\n\n<ul><li>On UNIX or Linux,</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>/usr/local/lib/python2.4/site-packages\nor\n/usr/lib/python2.4/site-packages</code></pre>\n\n\n\n<ul><li>On Microsoft Windows,</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Python or C:\\Python2x</code></pre>\n\n\n\n<ul><li>On Mac OS,</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Python:Lib:site-package</code></pre>\n\n\n\n<h2>Installation using Tarball</h2>\n\n\n\n<p>A Tarball is a compressed archive of files or a directory. The CherryPy framework provides a Tarball for each of its releases (alpha, beta, and stable).</p>\n\n\n\n<p>It contains complete source code of the library. The name comes from the utility used in UNIX and other operating systems.</p>\n\n\n\n<p>Here are the steps to be followed for the installation of CherryPy using tar ball −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Download the version as per user requirements from&nbsp;http://download.cherrypy.org/</p>\n\n\n\n<p><strong>Step 2</strong>− Search for the directory where Tarball has been downloaded and uncompress it. For Linux operating system, type the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tar zxvf cherrypy-x.y.z.tgz</code></pre>\n\n\n\n<p>For Microsoft Windows, the user can use a utility such as 7-Zip or Winzip to uncompress the archive via a graphical interface.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Move to the newly created directory and use the following command to build CherryPy −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python setup.py build</code></pre>\n\n\n\n<p>For the global installation, the following command should be used −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python setup.py install</code></pre>\n\n\n\n<h2>Installation using easy_install</h2>\n\n\n\n<p>Python Enterprise Application Kit (PEAK) provides a python module named Easy Install. This facilitates deployment of the Python packages. This module simplifies the procedure of downloading, building and deploying Python application and products.</p>\n\n\n\n<p>Easy Install needs to be installed in the system before installing CherryPy.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Download the ez_setup.py module from&nbsp;http://peak.telecommunity.com&nbsp;and run it using the administrative rights on the computer: python ez_setup.py.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− The following command is used to install Easy Install.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>easy_install product_name</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− easy_install will search the Python Package Index (PyPI) to find the given product. PyPI is a centralized repository of information for all Python products.</p>\n\n\n\n<p>Use the following command to deploy the latest available version of CherryPy −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>easy_install cherrypy</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− easy_install will then download CherryPy, build, and install it globally to your Python environment.</p>\n\n\n\n<h2>Installation using Subversion</h2>\n\n\n\n<p>Installation of CherryPy using Subversion is recommended in the following situations −</p>\n\n\n\n<ul><li>A feature exists or a bug has been fixed and is only available in code under development.</li><li>When the developer works on CherryPy itself.</li><li>When the user needs a branch from the main branch in the versioning control repository.</li><li>For bug fixing of the previous release.</li></ul>\n\n\n\n<p>The basic principle of subversioning is to register a repository and keep a track of each of the versions, which include a series of changes in them.</p>\n\n\n\n<p>Follow these steps to understand the installation of CherryPy using Subversion−</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− To use the most recent version of the project, it is necessary to check out the trunk folder found on the Subversion repository.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Enter the following command from a shell−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>svn co http://svn.cherrypy.org/trunk cherrypy</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Now, create a CherryPy directory and download the complete source code into it.</p>\n\n\n\n<h2>Testing the Installation</h2>\n\n\n\n<p>It needs to be verified whether the application has properly been installed in the system or not in the same way as we do for applications like Java.</p>\n\n\n\n<p>You may choose any one of the three methods mentioned in the previous chapter to install and deploy CherryPy in your environment. CherryPy must be able to import from the Python shell as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import cherrypy\n\ncherrypy.__version__\n'3.0.0'</code></pre>\n\n\n\n<p>If CherryPy is not installed globally to the local system’s Python environment, then you need to set the PYTHONPATH environment variable, else it will display an error in the following way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import cherrypy\n\nTraceback (most recent call last):\nFile \"&lt;stdin>\", line 1, in ?\nImportError: No module named cherrypy</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>CherryPy comes in packages like most open-source projects, which can be downloaded and installed in various ways which are mentioned as follows − Using a Tarball Using easy_install Using Subversion Requirements The basic requirements for installation of CherryPy framework include − Installing a Python module is considered an easy process. The installation includes the use [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1791,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/923"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=923"}],"version-history":[{"count":3,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/923/revisions"}],"predecessor-version":[{"id":2365,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/923/revisions/2365"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1791"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=923"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=923"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=923"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":925,"date":"2020-05-20T06:44:00","date_gmt":"2020-05-20T06:44:00","guid":{"rendered":"http://python3.foobrdigital.com/?p=925"},"modified":"2020-12-15T08:10:36","modified_gmt":"2020-12-15T08:10:36","slug":"vocabulary","status":"publish","type":"post","link":"https://python3.foobrdigital.com/vocabulary/","title":{"rendered":"Vocabulary"},"content":{"rendered":"\n<p>There are a few important keywords which need to be defined in order to understand the working of CherryPy. The keywords and the definitions are as follows −</p>\n\n\n\n<table><tbody><tr><th>S.No</th><th>Keyword &amp; Definition</th></tr><tr><td>1.</td><td><strong>Web Server</strong>It is an interface dealing with the HTTP protocol. Its goal is to transform the HTTP requests to the application server so that they get the responses.</td></tr><tr><td>2.</td><td><strong>Application</strong>It is a piece of software which gathers information.</td></tr><tr><td>3.</td><td><strong>Application server</strong>It is the component holding one or more applications</td></tr><tr><td>4.</td><td><strong>Web application server</strong>It is the combination of web server and application server.</td></tr></tbody></table>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following example shows a sample code of CherryPy −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import cherrypy\n\nclass demoExample:\n   def index(self):\n   return \"Hello World!!!\"\n   index.exposed = True\ncherrypy.quickstart(demoExample())</code></pre>\n\n\n\n<p>Let us now understand how the code works −</p>\n\n\n\n<ul><li>The package named&nbsp;<strong>CherryPy</strong>&nbsp;is always imported in the specified class to ensure proper functioning.</li><li>In the above example, the function named&nbsp;<strong>index</strong>&nbsp;returns the parameter “Hello World!!!”.</li><li>The last line starts the web server and calls the specified class (here, demoExample) and returns the value mentioned in default function index.</li></ul>\n\n\n\n<p>The example code returns the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"379\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-1.jpg\" alt=\"\" class=\"wp-image-1297\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-1.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-1-300x190.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>There are a few important keywords which need to be defined in order to understand the working of CherryPy. The keywords and the definitions are as follows − S.No Keyword &amp; Definition 1. Web ServerIt is an interface dealing with the HTTP protocol. Its goal is to transform the HTTP requests to the application server [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1792,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/925"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=925"}],"version-history":[{"count":4,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/925/revisions"}],"predecessor-version":[{"id":2456,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/925/revisions/2456"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1792"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=925"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=925"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=925"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":927,"date":"2020-05-20T06:48:14","date_gmt":"2020-05-20T06:48:14","guid":{"rendered":"http://python3.foobrdigital.com/?p=927"},"modified":"2020-12-15T08:10:36","modified_gmt":"2020-12-15T08:10:36","slug":"built-in-http-server-internal-engine","status":"publish","type":"post","link":"https://python3.foobrdigital.com/built-in-http-server-internal-engine/","title":{"rendered":"Built-in Http Server &#038; Internal Engine"},"content":{"rendered":"\n<p>CherryPy comes with its own web (HTTP) server. That is why CherryPy is self-contained and allows users to run a CherryPy application within minutes of getting the library.</p>\n\n\n\n<p>The&nbsp;<strong>web server</strong>&nbsp;acts as the gateway to the application with the help of which all the requests and responses are kept in track.</p>\n\n\n\n<p>To start the web server, a user must make the following call −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cherryPy.server.quickstart()</code></pre>\n\n\n\n<p>The&nbsp;<strong>internal engine of CherryPy</strong>&nbsp;is responsible for the following activities −</p>\n\n\n\n<ul><li>Creation and management of request and response objects.</li><li>Controlling and managing the CherryPy process.</li></ul>\n\n\n\n<h2>CherryPy – Configuration</h2>\n\n\n\n<p>The framework comes with its own configuration system allowing you to parameterize the HTTP server. The settings for the configuration can be stored either in a text file with syntax close to the INI format or as a complete Python dictionary.</p>\n\n\n\n<p>To configure the CherryPy server instance, the developer needs to use the global section of the settings.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>global_conf = {\n   'global': {\n      'server.socket_host': 'localhost',\n      'server.socket_port': 8080,\n   },\n}\n\napplication_conf = {\n   '/style.css': {\n      'tools.staticfile.on': True,\n      'tools.staticfile.filename': os.path.join(_curdir, 'style.css'),\n   }\n}\n\nThis could be represented in a file like this:\n&#91;global]\nserver.socket_host = \"localhost\"\nserver.socket_port = 8080\n&#91;/style.css]\ntools.staticfile.on = True\ntools.staticfile.filename = \"/full/path/to.style.css\"</code></pre>\n\n\n\n<h2>HTTP Compliance</h2>\n\n\n\n<p>CherryPy has been evolving slowly but it includes the compilation of HTTP specifications with the support of HTTP/1.0 later transferring with the support of HTTP/1.1.</p>\n\n\n\n<p>CherryPy is said to be conditionally compliant with HTTP/1.1 as it implements all the must and required levels but not all the should levels of the specification. Therefore, CherryPy supports the following features of HTTP/1.1 −</p>\n\n\n\n<ul><li>If a client claims to support HTTP/1.1, it must send a header field in any request made with the specified protocol version. If it is not done, CherryPy will immediately stop the processing of the request.</li><li>CherryPy generates a Date header field which is used in all configurations.</li><li>CherryPy can handle response status code (100) with the support of clients.</li><li>CherryPy&#8217;s built-in HTTP server supports persistent connections that are the default in HTTP/1.1, through the use of the Connection: Keep-Alive header.</li><li>CherryPy handles correctly chunked requests and responses.</li><li>CherryPy supports requests in two distinct ways − If-Modified-Since and If-Unmodified-Since headers and sends responses as per the requests accordingly.</li><li>CherryPy allows any HTTP method.</li><li>CherryPy handles the combinations of HTTP versions between the client and the setting set for the server.</li></ul>\n\n\n\n<h2>Multithreaded Application Server</h2>\n\n\n\n<p>CherryPy is designed based on the multithreading concept. Every time a developer gets or sets a value into the CherryPy namespace, it is done in the multi-threaded environment.</p>\n\n\n\n<p>Both cherrypy.request and cherrypy.response are thread-data containers, which imply that your application calls them independently by knowing which request is proxied through them at runtime.</p>\n\n\n\n<p>Application servers using the threaded pattern are not highly regarded because the use of threads is seen as increasing the likelihood of problems due to synchronization requirements.</p>\n\n\n\n<p>The other alternatives include −</p>\n\n\n\n<h3>Multi-process Pattern</h3>\n\n\n\n<p>Each request is handled by its own Python process. Here, performance and stability of the server can be considered as better.</p>\n\n\n\n<h3>Asynchronous Pattern</h3>\n\n\n\n<p>Here, accepting new connections and sending the data back to the client is done asynchronously from the request process. This technique is known for its efficiency.</p>\n\n\n\n<h3>URL Dispatching</h3>\n\n\n\n<p>The CherryPy community wants to be more flexible and that other solutions for dispatchers would be appreciated. CherryPy 3 provides other built-in dispatchers and offers a simple way to write and use your own dispatchers.</p>\n\n\n\n<ul><li>Applications used to develop HTTP methods. (GET, POST, PUT, etc.)</li><li>The one which defines the routes in the URL – Routes Dispatcher</li></ul>\n\n\n\n<h3>HTTP Method Dispatcher</h3>\n\n\n\n<p>In some applications, URIs are independent of the action, which is to be performed by the server on the resource.</p>\n\n\n\n<p>For example,<strong>http://xyz.com/album/delete/10</strong></p>\n\n\n\n<p>The URI contains the operation the client wishes to carry out.</p>\n\n\n\n<p>By default, CherryPy dispatcher would map in the following way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>album.delete(12)</code></pre>\n\n\n\n<p>The above mentioned dispatcher is mentioned correctly, but can be made independent in the following way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;xyz.com/album/10</code></pre>\n\n\n\n<p>The user may wonder how the server dispatches the exact page. This information is carried by the HTTP request itself. When there is request from client to server, CherryPy looks the best suiting handler, the handler is representation of the resource targeted by the URI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>DELETE /album/12 HTTP/1.1</code></pre>\n\n\n\n<h3>Routes Dispatcher</h3>\n\n\n\n<p>Here is a list of the parameters for the method required in dispatching −</p>\n\n\n\n<ul><li>The name parameter is the unique name for the route to connect.</li><li>The route is the pattern to match URIs.</li><li>The controller is the instance containing page handlers.</li><li>Using the Routes dispatcher connects a pattern that matches URIs and associates a specific page handler.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us take an example to understand how it works −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import random\nimport string\nimport cherrypy\n\nclass StringMaker(object):\n   @cherrypy.expose\n   def index(self):\n      return \"Hello! How are you?\"\n   \n   @cherrypy.expose\n   def generate(self, length=9):\n      return ''.join(random.sample(string.hexdigits, int(length)))\n\t\t\nif __name__ == '__main__':\n   cherrypy.quickstart(StringMaker ())</code></pre>\n\n\n\n<p>Follow the steps given below to get the output of the above code −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Save the above mentioned file as&nbsp;<strong>tutRoutes.py</strong>.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Visit the following URL −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8080/generate?length=10</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− You will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"338\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-2.jpg\" alt=\"\" class=\"wp-image-1299\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-2.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-2-300x169.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>CherryPy comes with its own web (HTTP) server. That is why CherryPy is self-contained and allows users to run a CherryPy application within minutes of getting the library. The&nbsp;web server&nbsp;acts as the gateway to the application with the help of which all the requests and responses are kept in track. To start the web server, [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1793,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/927"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=927"}],"version-history":[{"count":3,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/927/revisions"}],"predecessor-version":[{"id":1803,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/927/revisions/1803"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1793"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=927"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=927"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=927"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":929,"date":"2020-05-20T06:52:51","date_gmt":"2020-05-20T06:52:51","guid":{"rendered":"http://python3.foobrdigital.com/?p=929"},"modified":"2020-12-15T08:10:36","modified_gmt":"2020-12-15T08:10:36","slug":"toolbox","status":"publish","type":"post","link":"https://python3.foobrdigital.com/toolbox/","title":{"rendered":"ToolBox"},"content":{"rendered":"\n<p>Within CherryPy, built-in tools offer a single interface to call the CherryPy library. The tools defined in CherryPy can be implemented in the following ways −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>From the configuration settings\nAs a Python decorator or via the special _cp_config attribute of a page handler\nAs a Python callable that can be applied from within any function</code></pre>\n\n\n\n<h2>Basic Authentication Tool</h2>\n\n\n\n<p>The purpose of this tool is to provide basic authentication to the application designed in the application.</p>\n\n\n\n<h3>Arguments</h3>\n\n\n\n<p>This tool uses the following arguments −</p>\n\n\n\n<table><tbody><tr><th>Name</th><th>Default</th><th>Description</th></tr><tr><td>realm</td><td>N/A</td><td>String defining the realm value.</td></tr><tr><td>users</td><td>N/A</td><td>Dictionary of the form − username:password or a Python callable function returning such a dictionary.</td></tr><tr><td>encrypt</td><td>None</td><td>Python callable used to encrypt the password returned by the client and compare it with the encrypted password provided in the users dictionary.</td></tr></tbody></table>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us take an example to understand how it works −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sha\nimport cherrypy\n\nclass Root:\n@cherrypy.expose\ndef index(self):\n\nreturn \"\"\"\n&lt;html>\n   &lt;head>&lt;/head>\n   &lt;body>\n      &lt;a href = \"admin\">Admin &lt;/a>\n   &lt;/body>\n&lt;/html>\n\"\"\" \n\nclass Admin:\n\n@cherrypy.expose\ndef index(self):\nreturn \"This is a private area\"\n\nif __name__ == '__main__':\ndef get_users():\n# 'test': 'test'\nreturn {'test': 'b110ba61c4c0873d3101e10871082fbbfd3'}\ndef encrypt_pwd(token):\n\nreturn sha.new(token).hexdigest()\n   conf = {'/admin': {'tools.basic_auth.on': True,\n      tools.basic_auth.realm': 'Website name',\n      'tools.basic_auth.users': get_users,\n      'tools.basic_auth.encrypt': encrypt_pwd}}\n   root = Root()\nroot.admin = Admin()\ncherrypy.quickstart(root, '/', config=conf)</code></pre>\n\n\n\n<p>The&nbsp;<strong>get_users</strong>&nbsp;function returns a hard-coded dictionary but also fetches the values from a database or anywhere else. The class admin includes this function which makes use of an authentication built-in tool of CherryPy. The authentication encrypts the password and the user Id.</p>\n\n\n\n<p>The basic authentication tool is not really secure, as the password can be encoded and decoded by an intruder.</p>\n\n\n\n<h2>Caching Tool</h2>\n\n\n\n<p>The purpose of this tool is to provide memory caching of CherryPy generated content.</p>\n\n\n\n<h3>Arguments</h3>\n\n\n\n<p>This tool uses the following arguments −</p>\n\n\n\n<table><tbody><tr><th>Name</th><th>Default</th><th>Description</th></tr><tr><td>invalid_methods</td><td>(&#8220;POST&#8221;, &#8220;PUT&#8221;, &#8220;DELETE&#8221;)</td><td>Tuples of strings of HTTP methods not to be cached. These methods will also invalidate (delete) any cached copy of the resource.</td></tr><tr><td>cache_Class</td><td>MemoryCache</td><td>Class object to be used for caching</td></tr></tbody></table>\n\n\n\n<h2>Decoding Tool</h2>\n\n\n\n<p>The purpose of this tool is to decode the incoming request parameters.</p>\n\n\n\n<h3>Arguments</h3>\n\n\n\n<p>This tool uses the following arguments −</p>\n\n\n\n<table><tbody><tr><th>Name</th><th>Default</th><th>Description</th></tr><tr><td>encoding</td><td>None</td><td>It looks for the content-type header</td></tr><tr><td>Default_encoding</td><td>&#8220;UTF-8&#8221;</td><td>Default encoding to be used when none is provided or found.</td></tr></tbody></table>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us take an example to understand how it works −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import cherrypy\nfrom cherrypy import tools\n\nclass Root:\n@cherrypy.expose\ndef index(self):\n\nreturn \"\"\" \n&lt;html>\n   &lt;head>&lt;/head>\n   &lt;body>\n      &lt;form action = \"hello.html\" method = \"post\">\n         &lt;input type = \"text\" name = \"name\" value = \"\" />\n         &lt;input type = ”submit” name = \"submit\"/>\n      &lt;/form>\n   &lt;/body>\n&lt;/html>\n\"\"\"\n\n@cherrypy.expose\n@tools.decode(encoding='ISO-88510-1')\ndef hello(self, name):\nreturn \"Hello %s\" % (name, )\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')</code></pre>\n\n\n\n<p>The above code takes a string from the user and it will redirect the user to &#8220;hello.html&#8221; page where it will be displayed as “Hello” with the given name.</p>\n\n\n\n<p>The output of the above code is as follows −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"531\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-3.jpg\" alt=\"\" class=\"wp-image-1301\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-3.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-3-300x266.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>hello.html</code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"174\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave.png\" alt=\"\" class=\"wp-image-1305\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave.png 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-300x87.png 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>Within CherryPy, built-in tools offer a single interface to call the CherryPy library. The tools defined in CherryPy can be implemented in the following ways − Basic Authentication Tool The purpose of this tool is to provide basic authentication to the application designed in the application. Arguments This tool uses the following arguments − Name [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1794,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/929"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=929"}],"version-history":[{"count":6,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/929/revisions"}],"predecessor-version":[{"id":2455,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/929/revisions/2455"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1794"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=929"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=929"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=929"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":931,"date":"2020-05-20T06:57:52","date_gmt":"2020-05-20T06:57:52","guid":{"rendered":"http://python3.foobrdigital.com/?p=931"},"modified":"2020-12-15T08:10:36","modified_gmt":"2020-12-15T08:10:36","slug":"a-working-application","status":"publish","type":"post","link":"https://python3.foobrdigital.com/a-working-application/","title":{"rendered":"A Working Application"},"content":{"rendered":"\n<p>Full stack applications provide a facility to create a new application via some command or execution of the file.</p>\n\n\n\n<p>Consider the Python applications like web2py framework; the entire project/application is created in terms of MVC framework. Likewise, CherryPy allows the user to set up and configure the layout of the code as per their requirements.</p>\n\n\n\n<p>In this chapter, we will learn in detail how to create CherryPy application and execute it.</p>\n\n\n\n<h2>File System</h2>\n\n\n\n<p>The file system of the application is shown in the following screenshot −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"413\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-4.jpg\" alt=\"\" class=\"wp-image-1311\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-4.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-4-300x207.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>Here is a brief description of the various files that we have in the file system −</p>\n\n\n\n<ul><li><strong>config.py</strong>&nbsp;− Every application needs a configuration file and a way to load it. This functionality can be defined in config.py.</li><li><strong>controllers.py</strong>&nbsp;− MVC is a popular design pattern followed by the users. The controllers.py is where all the objects are implemented that will be mounted on the&nbsp;<em>cherrypy.tree</em>.</li><li><strong>models.py</strong>&nbsp;− This file interacts with the database directly for some services or for storing persistent data.</li><li><strong>server.py</strong>&nbsp;− This file interacts with production ready web server that works properly with load balancing proxy.</li><li><strong>Static</strong>&nbsp;− It includes all the CSS and image files.</li><li><strong>Views</strong>&nbsp;− It includes all the template files for a given application.</li></ul>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let us learn in detail the steps to create a CherryPy application.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create an application that should contain the application.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Inside the directory, create a python package corresponding to the project. Create gedit directory and include _init_.py file within the same.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Inside the package, include controllers.py file with the following content −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env python\n\nimport cherrypy\n\nclass Root(object):\n\n   def __init__(self, data):\n      self.data = data\n\n   @cherrypy.expose\n   def index(self):\n      return 'Hi! Welcome to your application'\n\ndef main(filename):\n   data = {} # will be replaced with proper functionality later\n\n   # configuration file\n   cherrypy.config.update({\n      'tools.encode.on': True, 'tools.encode.encoding': 'utf-8',\n      'tools.decode.on': True,\n      'tools.trailing_slash.on': True,\n      'tools.staticdir.root': os.path.abspath(os.path.dirname(__file__)),\n   })\n\n   cherrypy.quickstart(Root(data), '/', {\n      '/media': {\n         'tools.staticdir.on': True,\n         'tools.staticdir.dir': 'static'\n      }\n   })\n\t\nif __name__ == '__main__':\nmain(sys.argv&#91;1])</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Consider an application where the user inputs the value through a form. Let’s include two forms — index.html and submit.html in the application.</p>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− In the above code for controllers, we have&nbsp;<strong>index()</strong>, which is a default function and loads first if a particular controller is called.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− The implementation of the&nbsp;<strong>index()</strong>&nbsp;method can be changed in the following way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@cherrypy.expose\n   def index(self):\n      tmpl = loader.load('index.html')\n\t \n      return tmpl.generate(title='Sample').render('html', doctype='html')</code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− This will load index.html on starting the given application and direct it to the given output stream. The index.html file is as follows −</p>\n\n\n\n<h3>index.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html >\n&lt;html>\n   &lt;head>\n      &lt;title>Sample&lt;/title>\n   &lt;/head>\n\t\n   &lt;body class = \"index\">\n      &lt;div id = \"header\">\n         &lt;h1>Sample Application&lt;/h1>\n      &lt;/div>\n\t\t\n      &lt;p>Welcome!&lt;/p>\n\t\t\n      &lt;div id = \"footer\">\n         &lt;hr>\n      &lt;/div>\n\t\t\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− It is important to add a method to the Root class in&nbsp;<strong>controller.py</strong>&nbsp;if you want to create a form which accepts values such as names and titles.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@cherrypy.expose\n   def submit(self, cancel = False, **value):\n\t\n      if cherrypy.request.method == 'POST':\n         if cancel:\n            raise cherrypy.HTTPRedirect('/') # to cancel the action\n         link = Link(**value)\n         self.data&#91;link.id] = link\n         raise cherrypy.HTTPRedirect('/')\n      tmp = loader.load('submit.html')\n      streamValue = tmp.generate()\n\t\t\n      return streamValue.render('html', doctype='html')</code></pre>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− The code to be included in submit.html is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n   &lt;head>\n      &lt;title>Input the new link&lt;/title>\n   &lt;/head>\n\t\n   &lt;body class = \"submit\">\n      &lt;div id = \" header\">\n         &lt;h1>Submit new link&lt;/h1>\n      &lt;/div>\n\t\t\n      &lt;form action = \"\" method = \"post\">\n         &lt;table summary = \"\">\n            &lt;tr>\n               &lt;th>&lt;label for = \" username\">Your name:&lt;/label>&lt;/th>\n               &lt;td>&lt;input type = \" text\" id = \" username\" name = \" username\" />&lt;/td>\n            &lt;/tr>\n\t\t\t\t\n            &lt;tr>\n               &lt;th>&lt;label for = \" url\">Link URL:&lt;/label>&lt;/th>\n               &lt;td>&lt;input type = \" text\" id=\" url\" name= \" url\" />&lt;/td>\n            &lt;/tr>\n\t\t\t\t\n            &lt;tr>\n               &lt;th>&lt;label for = \" title\">Title:&lt;/label>&lt;/th>\n               &lt;td>&lt;input type = \" text\" name = \" title\" />&lt;/td>\n            &lt;/tr>\n\t\t\t\t\n            &lt;tr>\n               &lt;td>&lt;/td>\n               &lt;td>\n                  &lt;input type = \" submit\" value = \" Submit\" />\n                  &lt;input type = \" submit\" name = \" cancel\" value = \"Cancel\" />\n               &lt;/td>\n            &lt;/tr>\n\t\t\t\t\n         &lt;/table>\n\t\t\t\n      &lt;/form>\n      &lt;div id = \"footer\">\n      &lt;/div>\n\t\t\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− You will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"312\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-5.jpg\" alt=\"\" class=\"wp-image-1313\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-5.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-5-300x156.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>Here, the method name is defined as “POST”. It is always important to cross verify the method specified in the file. If the method includes “POST” method, the values should be rechecked in the database in appropriate fields.</p>\n\n\n\n<p>If the method includes “GET” method, the values to be saved will be visible in the URL.</p>\n","protected":false},"excerpt":{"rendered":"<p>Full stack applications provide a facility to create a new application via some command or execution of the file. Consider the Python applications like web2py framework; the entire project/application is created in terms of MVC framework. Likewise, CherryPy allows the user to set up and configure the layout of the code as per their requirements. [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1795,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/931"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=931"}],"version-history":[{"count":4,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/931/revisions"}],"predecessor-version":[{"id":2453,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/931/revisions/2453"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1795"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=931"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=931"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=931"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":933,"date":"2020-05-20T18:30:18","date_gmt":"2020-05-20T18:30:18","guid":{"rendered":"http://python3.foobrdigital.com/?p=933"},"modified":"2020-12-15T08:10:35","modified_gmt":"2020-12-15T08:10:35","slug":"web-services","status":"publish","type":"post","link":"https://python3.foobrdigital.com/web-services/","title":{"rendered":"Web Services"},"content":{"rendered":"\n<p>A web service is a set of web-based components that helps in the exchange of data between the application or systems which also includes open protocols and standards. It can be published, used and found on the web.</p>\n\n\n\n<p>Web services are of various types like RWS (RESTfUL Web Service), WSDL, SOAP and many more.</p>\n\n\n\n<h2>REST — Representational State Transfer</h2>\n\n\n\n<p>A type of remote access protocol, which, transfers state from client to server which can be used to manipulate state instead of calling remote procedures.</p>\n\n\n\n<ul><li>Does not define any specific encoding or structure and ways of returning useful error messages.</li><li>Uses HTTP &#8220;verbs&#8221; to perform state transfer operations.</li><li>The resources are uniquely identified using URL.</li><li>It is not an API but instead an API transport layer.</li></ul>\n\n\n\n<p>REST maintains the nomenclature of resources on a network and provides unified mechanism to perform operations on these resources. Each resource is identified by at least one identifier. If the REST infrastructure is implemented with the base of HTTP, then these identifiers are termed as&nbsp;<strong>Uniform Resource Identifiers (URIs)</strong>.</p>\n\n\n\n<p>The following are the two common subsets of the URI set −</p>\n\n\n\n<table><tbody><tr><th>Subset</th><th>Full form</th><th>Example</th></tr><tr><td>URL</td><td>Uniform Resource Locator</td><td>http://www.gmail.com/</td></tr><tr><td>URN</td><td>Uniform Resource Name</td><td>urn:isbn:0-201-71088-9 urn:uuid:13e8cf26-2a25-11db-8693-000ae4ea7d46</td></tr></tbody></table>\n\n\n\n<p>Before understanding the implementation of CherryPy architecture, let’s focus on the architecture of CherryPy.</p>\n\n\n\n<p>CherryPy includes the following three components −</p>\n\n\n\n<ul><li><strong>cherrypy.engine</strong>&nbsp;− It controls process startup/teardown and event handling.</li><li><strong>cherrypy.server</strong>&nbsp;− It configures and controls the WSGI or HTTP server.</li><li><strong>cherrypy.tools</strong>&nbsp;− A toolbox of utilities that are orthogonal to processing an HTTP request.</li></ul>\n\n\n\n<h2>REST Interface through CherryPy</h2>\n\n\n\n<p>RESTful web service implements each section of CherryPy architecture with the help of the following −</p>\n\n\n\n<ul><li>Authentication</li><li>Authorization</li><li>Structure</li><li>Encapsulation</li><li>Error Handling</li></ul>\n\n\n\n<h3>Authentication</h3>\n\n\n\n<p>Authentication helps in validating the users with whom we are interacting. CherryPy includes tools to handle each authentication method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def authenticate():\n   if not hasattr(cherrypy.request, 'user') or cherrypy.request.user is None:\n      # &lt; Do stuff to look up your users >\n\t\t\n      cherrypy.request.authorized = False # This only authenticates. \n         Authz must be handled separately.\n\t\t\n      cherrypy.request.unauthorized_reasons = &#91;]\n      cherrypy.request.authorization_queries = &#91;]\n\t\t\ncherrypy.tools.authenticate = \\\n   cherrypy.Tool('before_handler', authenticate, priority=10)</code></pre>\n\n\n\n<p>The above function authenticate() will help to validate the existence of the clients or users. The built-in tools help to complete the process in a systematic way.</p>\n\n\n\n<h3>Authorization</h3>\n\n\n\n<p>Authorization helps in maintaining the sanity of the process via URI. The process also helps in morphing objects by user token leads.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def authorize_all():\n   cherrypy.request.authorized = 'authorize_all'\n\t\ncherrypy.tools.authorize_all = cherrypy.Tool('before_handler', authorize_all, priority=11)\n\ndef is_authorized():\n   if not cherrypy.request.authorized:\n      raise cherrypy.HTTPError(\"403 Forbidden\",\n         ','.join(cherrypy.request.unauthorized_reasons))\n\t\t\t\ncherrypy.tools.is_authorized = cherrypy.Tool('before_handler', is_authorized, \npriority = 49)\n\ncherrypy.config.update({\n   'tools.is_authorized.on': True,\n   'tools.authorize_all.on': True\n})</code></pre>\n\n\n\n<p>The built-in tools of authorization help in handling the routines in a systematic way, as mentioned in the previous example.</p>\n\n\n\n<h3>Structure</h3>\n\n\n\n<p>Maintaining a structure of API helps in reducing the work load of mapping the URI of application. It is always necessary to keep API discoverable and clean. The basic structure of API for CherryPy framework should have the following −</p>\n\n\n\n<ul><li>Accounts and User</li><li>Autoresponder</li><li>Contact</li><li>File</li><li>Folder</li><li>List and field</li><li>Message and Batch</li></ul>\n\n\n\n<h3>Encapsulation</h3>\n\n\n\n<p>Encapsulation helps in creating API which is lightweight, human readable and accessible to various clients. The list of items along with Creation, Retrieval, Update and Deletion requires encapsulation of API.</p>\n\n\n\n<h3>Error Handling</h3>\n\n\n\n<p>This process manages errors, if any, if API fails to execute at the particular instinct. For example, 400 is for Bad Request and 403 is for unauthorized request.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Consider the following as an example for database, validation, or application errors.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import cherrypy\nimport json\n\ndef error_page_default(status, message, traceback, version):\n   ret = {\n      'status': status,\n      'version': version,\n      'message': &#91;message],\n      'traceback': traceback\n   }\n\t\n   return json.dumps(ret)\n\t\nclass Root:\n   _cp_config = {'error_page.default': error_page_default}\n\t\n@cherrypy.expose\n   def index(self):\n      raise cherrypy.HTTPError(500, \"Internal Sever Error\")\ncherrypy.quickstart(Root())</code></pre>\n\n\n\n<p>The above code will produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"268\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-6.jpg\" alt=\"\" class=\"wp-image-1315\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-6.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-6-300x134.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>Management of API (Application Programming Interface) is easy through CherryPy because of the built-in access tools.</p>\n\n\n\n<h2>HTTP Methods</h2>\n\n\n\n<p>The list of HTTP methods which operate on the resources are as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>HTTP Method &amp; Operation</th></tr><tr><td>1.</td><td><strong>HEAD</strong> Retrieves the resource metadata.</td></tr><tr><td>2.</td><td><strong>GET</strong> Retrieves the resource metadata and content.</td></tr><tr><td>3.</td><td><strong>POST</strong> Requests the server to create a new resource using the data enclosed in the request body.</td></tr><tr><td>4.</td><td><strong>PUT</strong> Requests the server to replace an existing resource with the one enclosed in the request body.</td></tr><tr><td>5.</td><td><strong>DELETE</strong> Requests the server to remove the resource identified by that URI.</td></tr><tr><td>6.</td><td><strong>OPTIONS</strong> Requests the server to return details about capabilities either globally or specifically towards a resource.</td></tr></tbody></table></figure>\n\n\n\n<h2>Atom Publishing Protocol (APP)</h2>\n\n\n\n<p>APP has arisen from the Atom community as an application-level protocol on top of HTTP to allow the publishing and editing of web resources. The unit of messages between an APP server and a client is based on the Atom XML-document format.</p>\n\n\n\n<p>The Atom Publishing Protocol defines a set of operations between an APP service and a user-agent using HTTP and its mechanisms and the Atom XML-document format as the unit of messages.</p>\n\n\n\n<p>APP first defines a service document, which provides the user agent with the URI of the different collections served by the APP service.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us take an example to demonstrate how APP works −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;service xmlns = \"http://purl.org/atom/app#\" xmlns:atom = \"http://www.w3.org/2005/Atom\">\n   \n   &lt;workspace>\n      &lt;collection href = \"http://host/service/atompub/album/\">\n         &lt;atom:title> Albums&lt;/atom:title>\n         &lt;categories fixed = \"yes\">\n            &lt;atom:category term = \"friends\" />\n         &lt;/categories>\n      &lt;/collection>\n      \n      &lt;collection href = \"http://host/service/atompub/film/\">\n         &lt;atom:title>Films&lt;/atom:title>\n         &lt;accept>image/png,image/jpeg&lt;/accept>\n      &lt;/collection>\n   &lt;/workspace>\n\t\n&lt;/service></code></pre>\n\n\n\n<p>APP specifies how to perform the basic CRUD operations against a member of a collection or the collection itself by using HTTP methods as described in the following table −</p>\n\n\n\n<table><tbody><tr><th>Operation</th><th>HTTP Method</th><th>Status Code</th><th>Content</th></tr><tr><td>Retrieve</td><td>GET</td><td>200</td><td>An Atom entry representing the resource</td></tr><tr><td>Create</td><td>POST</td><td>201</td><td>The URI of the newly created resource via the Location and Content-Location headers</td></tr><tr><td>Update</td><td>PUT</td><td>200</td><td>An Atom entry representing the resource</td></tr><tr><td>Delete</td><td>DELETE</td><td>200</td><td>None</td></tr></tbody></table>\n","protected":false},"excerpt":{"rendered":"<p>A web service is a set of web-based components that helps in the exchange of data between the application or systems which also includes open protocols and standards. It can be published, used and found on the web. Web services are of various types like RWS (RESTfUL Web Service), WSDL, SOAP and many more. REST [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1805,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/933"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=933"}],"version-history":[{"count":6,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/933/revisions"}],"predecessor-version":[{"id":2452,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/933/revisions/2452"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1805"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=933"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=933"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=933"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":935,"date":"2020-05-20T18:35:21","date_gmt":"2020-05-20T18:35:21","guid":{"rendered":"http://python3.foobrdigital.com/?p=935"},"modified":"2020-12-15T08:10:35","modified_gmt":"2020-12-15T08:10:35","slug":"presentation-layer","status":"publish","type":"post","link":"https://python3.foobrdigital.com/presentation-layer/","title":{"rendered":"Presentation Layer"},"content":{"rendered":"\n<p>The Presentation Layer ensures that the communication passing through it targets the intended recipients. CherryPy maintains the working of presentation layer by various template engines.</p>\n\n\n\n<p>A template engine takes the input of the page with the help of business logic and then processes it to the final page which targets only the intended audience.</p>\n\n\n\n<h2>Kid — The Template Engine</h2>\n\n\n\n<p><strong>Kid</strong>&nbsp;is a simple template engine which includes the name of the template to be processed (which is mandatory) and input of the data to be passed when the template is rendered.</p>\n\n\n\n<p>On creation of the template for the first time, Kid creates a Python module which can be served as a cached version of the template.</p>\n\n\n\n<p>The&nbsp;<strong>kid.Template</strong>&nbsp;function returns an instance of the template class which can be used to render the output content.</p>\n\n\n\n<p>The template class provides the following set of commands −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Command &amp; Description</th></tr><tr><td>1.</td><td><strong>serialize</strong>It returns the output content as a string.</td></tr><tr><td>2.</td><td><strong>generate</strong>It returns the output content as an iterator.</td></tr><tr><td>3.</td><td><strong>write</strong>It dumps the output content into a file object.</td></tr></tbody></table></figure>\n\n\n\n<p>The parameters used by these commands are as follows −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Command &amp; Description</th></tr><tr><td>1.</td><td><strong>encoding</strong>It informs how to encode the output content</td></tr><tr><td>2.</td><td><strong>fragment</strong>It is a Boolean value which tells to XML prolog or Doctype</td></tr><tr><td>3.</td><td><strong>output</strong>This type of serialization is used to render the content</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let us take an example to understand how&nbsp;<strong>kid</strong>&nbsp;works −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n&lt;html xmlns:py = \"http://purl.org/kid/ns#\">\n   &lt;head>\n      &lt;title>${title}&lt;/title>\n      &lt;link rel = \"stylesheet\" href = \"style.css\" />\n   &lt;/head>\n\t\n   &lt;body> \n      &lt;p>${message}&lt;/p>\n   &lt;/body>\n&lt;/html>\n\nThe next step after saving the file is to process the template via the Kid engine.\n\nimport kid\n\nparams = {'title': 'Hello world!!', 'message': 'CherryPy.'}\nt = kid.Template('helloworld.kid', **params)\nprint t.serialize(output='html')</code></pre>\n\n\n\n<h2>Kid&#8217;s Attributes</h2>\n\n\n\n<p>The following are the attributes of Kid −</p>\n\n\n\n<h3>XML-Based Templating Language</h3>\n\n\n\n<p>It is an XML-based language. A Kid template must be a well-formed XML document with proper naming conventions.</p>\n\n\n\n<p>Kid implements attributes within the XML elements to update the underlying engine on the action to be followed for reaching the element. To avoid overlapping with other existing attributes within the XML document, Kid has introduced its own namespace.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p py:if = \"...\">...&lt;/p></code></pre>\n\n\n\n<h3>Variable Substitution</h3>\n\n\n\n<p>Kid comes with a variable substitution scheme and a simple approach — ${variable-name}.</p>\n\n\n\n<p>The variables can either be used in attributes of elements or as the text content of an element. Kid will evaluate the variable each and every time the execution takes place.</p>\n\n\n\n<p>If the user needs the output of a literal string as ${something}, it can be escaped using the variable substitution by doubling the dollar sign.</p>\n\n\n\n<h3>Conditional Statement</h3>\n\n\n\n<p>For toggling different cases in the template, the following syntax is used −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tag py:if = \"expression\">...&lt;/tag></code></pre>\n\n\n\n<p>Here, tag is the name of the element, for instance DIV or SPAN.</p>\n\n\n\n<p>The expression is a Python expression. If as a Boolean it evaluates to True, the element will be included in the output content or else it will not be a part of the output content.</p>\n\n\n\n<h3>Looping Mechanism</h3>\n\n\n\n<p>For looping an element in Kid, the following syntax is used −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tag py:for = \"expression\">...&lt;/tag></code></pre>\n\n\n\n<p>Here, tag is the name of the element. The expression is a Python expression, for example for value in [&#8230;].</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code shows how the looping mechanism works −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n&lt;html>\n   &lt;head>\n      &lt;title>${title}&lt;/title>\n      &lt;link rel = \"stylesheet\" href = \"style.css\" />\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;table>\n         &lt;caption>A few songs&lt;/caption>\n         &lt;tr>\n            &lt;th>Artist&lt;/th>\n            &lt;th>Album&lt;/th>\n            &lt;th>Title&lt;/th>\n         &lt;/tr>\n\t\t\t\n         &lt;tr py:for = \"info in infos\">\n            &lt;td>${info&#91;'artist']}&lt;/td>\n            &lt;td>${info&#91;'album']}&lt;/td>\n            &lt;td>${info&#91;'song']}&lt;/td>\n         &lt;/tr>\n      &lt;/table>\n   &lt;/body>\n&lt;/html>\n\nimport kid\n\nparams = discography.retrieve_songs()\nt = kid.Template('songs.kid', **params)\nprint t.serialize(output='html')</code></pre>\n\n\n\n<p>The&nbsp;<strong>output</strong>&nbsp;for the above code with the looping mechanism is as follows −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"174\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-7.jpg\" alt=\"\" class=\"wp-image-1317\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-7.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-7-300x87.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Presentation Layer ensures that the communication passing through it targets the intended recipients. CherryPy maintains the working of presentation layer by various template engines. A template engine takes the input of the page with the help of business logic and then processes it to the final page which targets only the intended audience. Kid [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1806,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/935"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=935"}],"version-history":[{"count":3,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/935/revisions"}],"predecessor-version":[{"id":1807,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/935/revisions/1807"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1806"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=935"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=935"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=935"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":937,"date":"2020-05-20T18:38:23","date_gmt":"2020-05-20T18:38:23","guid":{"rendered":"http://python3.foobrdigital.com/?p=937"},"modified":"2020-12-15T08:10:35","modified_gmt":"2020-12-15T08:10:35","slug":"use-of-ajax","status":"publish","type":"post","link":"https://python3.foobrdigital.com/use-of-ajax/","title":{"rendered":"Use Of Ajax"},"content":{"rendered":"\n<p>Till the year 2005, the pattern followed in all web applications was to manage one HTTP request per page. The navigation of one page to another page required loading the complete page. This would reduce the performance at a greater level.</p>\n\n\n\n<p>Thus, there was a rise in&nbsp;<strong>rich client applications</strong>&nbsp;which used to embed AJAX, XML, and JSON with them.</p>\n\n\n\n<h2>AJAX</h2>\n\n\n\n<p>Asynchronous JavaScript and XML (AJAX) is a technique to create fast and dynamic web pages. AJAX allows web pages to be updated asynchronously by exchanging small amounts of data behind the scenes with the server. This means that it is possible to update parts of a web page, without reloading the whole page.</p>\n\n\n\n<p>Google Maps, Gmail, YouTube, and Facebook are a few examples of AJAX applications.</p>\n\n\n\n<p>Ajax is based on the idea of sending HTTP requests using JavaScript; more specifically AJAX relies on the XMLHttpRequest object and its API to perform those operations.</p>\n\n\n\n<h2>JSON</h2>\n\n\n\n<p>JSON is a way to carry serialized JavaScript objects in such a way that JavaScript application can evaluate them and transform them into JavaScript objects which can be manipulated later.</p>\n\n\n\n<p>For instance, when the user requests the server for an album object formatted with the JSON format, the server would return the output as following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{'description': 'This is a simple demo album for you to test', 'author': ‘xyz’}</code></pre>\n\n\n\n<p>Now the data is a JavaScript associative array and the description field can be accessed via −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>data &#91;'description'];</code></pre>\n\n\n\n<h2>Applying AJAX to the Application</h2>\n\n\n\n<p>Consider the application which includes a folder named “media” with index.html and Jquery plugin, and a file with AJAX implementation. Let us consider the name of the file as “ajax_app.py”</p>\n\n\n\n<h3>ajax_app.py</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import cherrypy\nimport webbrowser\nimport os\nimport simplejson\nimport sys\n\nMEDIA_DIR = os.path.join(os.path.abspath(\".\"), u\"media\")\n\nclass AjaxApp(object):\n   @cherrypy.expose\n   def index(self):\n      return open(os.path.join(MEDIA_DIR, u'index.html'))\n\n   @cherrypy.expose\n   def submit(self, name):\n      cherrypy.response.headers&#91;'Content-Type'] = 'application/json'\n      return simplejson.dumps(dict(title=\"Hello, %s\" % name))\n\t\t\nconfig = {'/media':\n   {'tools.staticdir.on': True,\n   'tools.staticdir.dir': MEDIA_DIR,}\n}\n\t\t\t\ndef open_page():\nwebbrowser.open(\"http://127.0.0.1:8080/\")\ncherrypy.engine.subscribe('start', open_page)\ncherrypy.tree.mount(AjaxApp(), '/', config=config)\ncherrypy.engine.start()</code></pre>\n\n\n\n<p>The class “AjaxApp” redirects to the web page of “index.html”, which is included in the media folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \n   \" http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n\t\n&lt;html xmlns = \"http://www.w3.org/1999/xhtml\" lang = \"en\" xml:lang = \"en\">\n   &lt;head>\n      &lt;title>AJAX with jQuery and cherrypy&lt;/title>\n      &lt;meta http-equiv = \" Content-Type\" content = \" text/html; charset = utf-8\" />\n      &lt;script type = \" text/javascript\" src = \" /media/jquery-1.4.2.min.js\">&lt;/script>\n\t\t\n      &lt;script type = \" text/javascript\">\n         $(function() {\n         \n            // When the testform is submitted...\n            $(\"#formtest\").submit(function() {\n         \n               // post the form values via AJAX...\n               $.post('/submit', {name: $(\"#name\").val()}, function(data) {\n         \n                  // and set the title with the result\n                  $(\"#title\").html(data&#91;'title']) ;\n               });\n               return false ;\n            });\n         });\n      &lt;/script>\n\t\t\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;h1 id = \"title\">What's your name?&lt;/h1>\n      &lt;form id = \" formtest\" action = \" #\" method = \" post\">\n         &lt;p>\n            &lt;label for = \" name\">Name:&lt;/label>\n            &lt;input type = \" text\" id = \"name\" /> &lt;br />\n            &lt;input type = \" submit\" value = \" Set\" />\n         &lt;/p>\n      &lt;/form>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>The function for AJAX is included within &lt;script&gt; tags.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The above code will produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"353\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-8.jpg\" alt=\"\" class=\"wp-image-1320\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-8.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-8-300x177.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>Once the value is submitted by the user, AJAX functionality is implemented and the screen is redirected to the form as shown below −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"351\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-9.jpg\" alt=\"\" class=\"wp-image-1321\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-9.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-9-300x176.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n","protected":false},"excerpt":{"rendered":"<p>Till the year 2005, the pattern followed in all web applications was to manage one HTTP request per page. The navigation of one page to another page required loading the complete page. This would reduce the performance at a greater level. Thus, there was a rise in&nbsp;rich client applications&nbsp;which used to embed AJAX, XML, and [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1798,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/937"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=937"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/937/revisions"}],"predecessor-version":[{"id":1322,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/937/revisions/1322"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1798"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=937"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=937"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=937"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":939,"date":"2020-05-20T18:39:51","date_gmt":"2020-05-20T18:39:51","guid":{"rendered":"http://python3.foobrdigital.com/?p=939"},"modified":"2020-12-15T08:10:35","modified_gmt":"2020-12-15T08:10:35","slug":"demo-application","status":"publish","type":"post","link":"https://python3.foobrdigital.com/demo-application/","title":{"rendered":"Demo Application"},"content":{"rendered":"\n<p>In this chapter, we will focus on how an application is created in CherryPy framework.</p>\n\n\n\n<p>Consider&nbsp;<strong>Photoblog</strong>&nbsp;application for the demo application of CherryPy. A Photoblog application is a normal blog but the principal text will be photos in place of text. The main catch of Photoblog application is that the developer can focus more on design and implementation.</p>\n\n\n\n<h2>Basic Structure – Design of Entities</h2>\n\n\n\n<p>The entities design the basic structure of an application. The following are the entities for the Photoblog application −</p>\n\n\n\n<ul><li>Film</li><li>Photo</li><li>Album</li></ul>\n\n\n\n<p>The following is a basic class diagram for the entity relationship −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"325\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-10.jpg\" alt=\"\" class=\"wp-image-1323\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-10.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-10-300x163.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<h2>Design Structure</h2>\n\n\n\n<p>As discussed in the previous chapter, the design structure of the project would be as shown in the following screenshot −</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img loading=\"lazy\" width=\"600\" height=\"321\" src=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-11.jpg\" alt=\"\" class=\"wp-image-1324\" srcset=\"https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-11.jpg 600w, https://python3.foobrdigital.com/wp-content/uploads/2020/05/sine_wave-11-300x161.jpg 300w\" sizes=\"(max-width: 600px) 100vw, 600px\" /></figure>\n\n\n\n<p>Consider the given application, which has sub-directories for Photoblog application. The sub-directories are Photo, Album, and Film which would include controllers.py, models.py and server.py.</p>\n\n\n\n<p>Functionally, the Photoblog application will provide APIs to manipulate those entities via the traditional CRUD interface — Create, Retrieve, Update, and Delete.</p>\n\n\n\n<h2>Connection to the Database</h2>\n\n\n\n<p>A storage module includes a set of operations; connection with the database being one of the operations.</p>\n\n\n\n<p>As it is a complete application, the connection with database is mandatory for API and to maintain the functionality of Create, Retrieve, Update and Delete.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import dejavu\n\narena = dejavu.Arena()\nfrom model import Album, Film, Photo\ndef connect():\n\nconf = {'Connect': \"host=localhost dbname=Photoblog user=test password=test\"}\narena.add_store(\"main\", \"postgres\", conf)\narena.register_all(globals())</code></pre>\n\n\n\n<p>The arena in the above code will be our interface between the underlying storage manager and the business logic layer.</p>\n\n\n\n<p>The connect function adds a storage manager to the arena object for a PostgreSQL RDBMS.</p>\n\n\n\n<p>Once, the connection is obtained, we can create forms as per business requirements and complete the working of application.</p>\n\n\n\n<p>The most important thing before creation of any application is&nbsp;<strong>entity mapping</strong>&nbsp;and designing the structure of the application.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will focus on how an application is created in CherryPy framework. Consider&nbsp;Photoblog&nbsp;application for the demo application of CherryPy. A Photoblog application is a normal blog but the principal text will be photos in place of text. The main catch of Photoblog application is that the developer can focus more on design [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1799,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/939"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=939"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/939/revisions"}],"predecessor-version":[{"id":1325,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/939/revisions/1325"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1799"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=939"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=939"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=939"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":941,"date":"2020-05-20T18:46:02","date_gmt":"2020-05-20T18:46:02","guid":{"rendered":"http://python3.foobrdigital.com/?p=941"},"modified":"2020-12-15T08:10:34","modified_gmt":"2020-12-15T08:10:34","slug":"testing","status":"publish","type":"post","link":"https://python3.foobrdigital.com/testing/","title":{"rendered":"Testing"},"content":{"rendered":"\n<p>Testing is a process during which the application is conducted from different perspectives in order to −</p>\n\n\n\n<ul><li>Find the list of issues</li><li>Find differences between the expected and actual result, output, states, etc.</li><li>Understand the implementation phase.</li><li>Find the application useful for realistic purposes.</li></ul>\n\n\n\n<p>The goal of testing is not to put the developer at fault but to provide tools and improve the quality to estimate the health of the application at a given time.</p>\n\n\n\n<p>Testing needs to be planned in advance. This calls for defining the purpose of testing, understanding the scope of test cases, making the list of business requirements and being aware of the risks involved in the different phases of the project.</p>\n\n\n\n<p>Testing is defined as a range of aspects to be validated on a system or application. Following is a list of the&nbsp;<strong>common test approaches</strong>&nbsp;−</p>\n\n\n\n<ul><li><strong>Unit testing</strong>&nbsp;− This is usually carried out by the developers themselves. This aims at checking whether a unit of code works as expected or not.</li><li><strong>Usability testing</strong>&nbsp;− Developers may usually forget that they are writing an application for the end users who do not have knowledge of the system. Usability testing verifies the pros and cons of the product.</li><li><strong>Functional/Acceptance testing</strong>&nbsp;− While usability testing checks whether an application or system is usable, functional testing ensures that every specified functionality is implemented.</li><li><strong>Load and performance testing</strong>&nbsp;− This is carried out to understand whether the system can adjust to the load and performance tests to be conducted. This can lead to changes in hardware, optimizing SQL queries, etc.</li><li><strong>Regression testing</strong>&nbsp;− It verifies that successive releases of a product do not break any of the previous functionalities.</li><li><strong>Reliability and resilience testing</strong>&nbsp;− Reliability testing helps in validating the system application with the breakdown of one or several components.</li></ul>\n\n\n\n<h2>Unit Testing</h2>\n\n\n\n<p>Photoblog applications constantly use unit tests to check the following −</p>\n\n\n\n<ul><li>New functionalities work correctly and as expected.</li><li>Existing functionalities are not broken by new code release.</li><li>Defects are fixed and remain fixed.</li></ul>\n\n\n\n<p>Python comes in with a standard unit test module offering a different approach to unit testing.</p>\n\n\n\n<h3>Unittest</h3>\n\n\n\n<p>unittest is rooted in JUnit, a Java unit test package developed by Kent Beck and Erich Gamma. Unit tests simply return defined data. Mock objects can be defined. These objects allows testing against an interface of our design without having to rely on the overall application. They also provide a way to run tests in isolation mode with other tests included.</p>\n\n\n\n<p>Let’s define a dummy class in the following way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import unittest\n\nclass DummyTest(unittest.TestCase):\ndef test_01_forward(self):\ndummy = Dummy(right_boundary=3)\n   self.assertEqual(dummy.forward(), 1)\n   self.assertEqual(dummy.forward(), 2)\n   self.assertEqual(dummy.forward(), 3)\n   self.assertRaises(ValueError, dummy.forward)\n\ndef test_02_backward(self):\ndummy = Dummy(left_boundary=-3, allow_negative=True)\n   self.assertEqual(dummy.backward(), -1)\n   self.assertEqual(dummy.backward(), -2)\n   self.assertEqual(dummy.backward(), -3)\n   self.assertRaises(ValueError, dummy.backward)\n\ndef test_03_boundaries(self):\ndummy = Dummy(right_boundary=3, left_boundary=-3,allow_negative=True)\n   self.assertEqual(dummy.backward(), -1)\n   self.assertEqual(dummy.backward(), -2)\n   self.assertEqual(dummy.forward(), -1)\n   self.assertEqual(dummy.backward(), -2)\n   self.assertEqual(dummy.backward(), -3)</code></pre>\n\n\n\n<p>The explanation for the code is as follows −</p>\n\n\n\n<ul><li>unittest module should be imported to provide unit test capabilities for the given class.</li><li>A class should be created by subclassing unittest.</li><li>Every method in the above code starts with a word test. All these methods are called by unittest handler.</li><li>The assert/fail methods are called by the test case to manage the exceptions.</li></ul>\n\n\n\n<p>Consider this as an example for running a test case −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if __name__ == '__main__':\nunittest.main()</code></pre>\n\n\n\n<p>The result (output) for running the test case will be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>----------------------------------------------------------------------\nRan 3 tests in 0.000s\nOK</code></pre>\n\n\n\n<h2>Functional Testing</h2>\n\n\n\n<p>Once the application functionalities start taking shape as per the requirements, a set of functional testing can validate the application&#8217;s correctness regarding the specification. However, the test should be automated for better performance which would require the use of third-party products such as Selenium.</p>\n\n\n\n<p>CherryPy provides helper class like built-in functions to ease the writing of functional tests.</p>\n\n\n\n<h2>Load Testing</h2>\n\n\n\n<p>Depending on the application you are writing and your expectations in terms of volume, you may need to run load and performance testing in order to detect potential bottlenecks in the application that are preventing it from reaching a certain level of performance.</p>\n\n\n\n<p>This section will not detail how to conduct a performance or load test as it is out of its the FunkLoad package.</p>\n\n\n\n<p>The very basic example of FunkLoad is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from funkload.FunkLoadTestCase \nimport FunkLoadTestCase\n\nclass LoadHomePage(FunkLoadTestCase):\ndef test_homepage(self):\n\nserver_url = self.conf_get('main', 'url')\nnb_time = self.conf_getInt('test_homepage', 'nb_time')\nhome_page = \"%s/\" % server_url\n\nfor i in range(nb_time):\nself.logd('Try %i' % i)\nself.get(home_page, description='Get gome page')\nif __name__ in ('main', '__main__'):\n\nimport unittest\n\nunittest.main()</code></pre>\n\n\n\n<p>Here is a detailed explanation of the above code −</p>\n\n\n\n<ul><li>The test case must inherit from the FunkLoadTestCase class so that the FunkLoad can do its internal job of tracking what happens during the test.</li><li>The class name is important as FunkLoad will look for a file based on the class name.</li><li>The test cases designed have direct access to the configuration files. Get() and post() methods are simply called against the server to get the response.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Testing is a process during which the application is conducted from different perspectives in order to − Find the list of issues Find differences between the expected and actual result, output, states, etc. Understand the implementation phase. Find the application useful for realistic purposes. The goal of testing is not to put the developer at [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1800,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/941"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=941"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/941/revisions"}],"predecessor-version":[{"id":2308,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/941/revisions/2308"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1800"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=941"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=941"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=941"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":943,"date":"2020-05-20T18:50:36","date_gmt":"2020-05-20T18:50:36","guid":{"rendered":"http://python3.foobrdigital.com/?p=943"},"modified":"2020-12-15T08:10:33","modified_gmt":"2020-12-15T08:10:33","slug":"deployment-of-application","status":"publish","type":"post","link":"https://python3.foobrdigital.com/deployment-of-application/","title":{"rendered":"Deployment Of Application"},"content":{"rendered":"\n<p>This chapter will focus more on CherryPy-based application SSL enabled through the built-in CherryPy HTTP server.</p>\n\n\n\n<h2>Configuration</h2>\n\n\n\n<p>There are different levels of configuration settings required in a web application −</p>\n\n\n\n<ul><li><strong>Web server</strong>&nbsp;− Settings linked to the HTTP server</li><li><strong>Engine</strong>&nbsp;− Settings associated with the hosting of engine</li><li><strong>Application</strong>&nbsp;− Application which is used by the user</li></ul>\n\n\n\n<h2>Deployment</h2>\n\n\n\n<p>Deployment of CherryPy application is considered to be quite an easy method where all the required packages are available from the Python system path. In shared web-hosted environment, web server will reside in the front end which allows the host provider to perform the filtering actions. The front-end server can be Apache or&nbsp;<strong>lighttpd</strong>.</p>\n\n\n\n<p>This section will present a few solutions to run a CherryPy application behind the Apache and lighttpd web servers.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cherrypy\ndef setup_app():\n\nclass Root:\n@cherrypy.expose\ndef index(self):\n   # Return the hostname used by CherryPy and the remote\n   # caller IP address\n\t\nreturn \"Hello there %s from IP: %s \" %\n(cherrypy.request.base, cherrypy.request.remote.ip)\ncherrypy.config.update({'server.socket_port': 9091,\n   'environment': 'production',\n   'log.screen': False,\n   'show_tracebacks': False})\n\t\ncherrypy.tree.mount(Root())\nif __name__ == '__main__':\n\nsetup_app()\ncherrypy.server.quickstart()\ncherrypy.engine.start()</code></pre>\n\n\n\n<h2>SSL</h2>\n\n\n\n<p><strong>SSL (Secure Sockets Layer)</strong>&nbsp;can be supported in CherryPy-based applications. To enable SSL support, the following requirements must be met −</p>\n\n\n\n<ul><li>Have the PyOpenSSL package installed in user’s environment</li><li>Have an SSL certificate and private key on the server</li></ul>\n\n\n\n<h2>Creating a Certificate and a Private Key</h2>\n\n\n\n<p>Let&#8217;s deal with the requirements of certificate and the private key −</p>\n\n\n\n<ul><li>First the user needs a private key −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>openssl genrsa -out server.key 2048</code></pre>\n\n\n\n<ul><li>This key is not protected by a password and therefore has a weak protection.</li><li>The following command will be issued −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>openssl genrsa -des3 -out server.key 2048</code></pre>\n\n\n\n<ul><li>The program will require a passphrase. If your version of OpenSSL allows you to provide an empty string, do so. Otherwise, enter a default passphrase and then remove it from the generated key as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>openssl rsa -in server.key -out server.key</code></pre>\n\n\n\n<ul><li>Creation of the certificate is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>openssl req -new -key server.key -out server.csr</code></pre>\n\n\n\n<ul><li>This process will request you to input some details. To do so, the following command must be issued −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>openssl x509 -req -days 60 -in server.csr -signkey\nserver.key -out server.crt</code></pre>\n\n\n\n<ul><li>The newly signed certificate will be valid for 60 days.</li></ul>\n\n\n\n<p>The following code shows its implementation −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import cherrypy\nimport os, os.path\n\nlocalDir = os.path.abspath(os.path.dirname(__file__))\nCA = os.path.join(localDir, 'server.crt')\nKEY = os.path.join(localDir, 'server.key')\ndef setup_server():\n\nclass Root:\n@cherrypy.expose\ndef index(self):\n   return \"Hello there!\"\n\t\ncherrypy.tree.mount(Root())\nif __name__ == '__main__':\n\nsetup_server()\ncherrypy.config.update({'server.socket_port': 8443,\n   'environment': 'production',\n   'log.screen': True,\n   'server.ssl_certificate': CA,\n   'server.ssl_private_key': KEY})\n\t\ncherrypy.server.quickstart()\ncherrypy.engine.start()</code></pre>\n\n\n\n<p>The next step is to start the server; if you are successful, you would see the following message on your screen −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>HTTP Serving HTTPS on https://localhost:8443/</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will focus more on CherryPy-based application SSL enabled through the built-in CherryPy HTTP server. Configuration There are different levels of configuration settings required in a web application − Web server&nbsp;− Settings linked to the HTTP server Engine&nbsp;− Settings associated with the hosting of engine Application&nbsp;− Application which is used by the user Deployment [&hellip;]</p>\n","protected":false},"author":4,"featured_media":1801,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,50,125],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/943"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/4"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=943"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/943/revisions"}],"predecessor-version":[{"id":944,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/943/revisions/944"}],"wp:featuredmedia":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media/1801"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=943"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=943"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=943"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]