[{"id":4613,"date":"2020-07-29T17:29:57","date_gmt":"2020-07-29T17:29:57","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=210"},"modified":"2020-07-29T17:29:57","modified_gmt":"2020-07-29T17:29:57","slug":"overview-5","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/overview-5/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p>According to Meteor official documentation −</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Meteor is a full-stack JavaScript platform for developing modern web and mobile applications. Meteor includes a key set of technologies for building connected-client reactive applications, a build tool, and a curated set of packages from the Node.js and general JavaScript community.</p></blockquote>\n\n\n\n<h2>Features</h2>\n\n\n\n<ul><li><strong>Web and Mobile</strong>&nbsp;− Meteor offers a platform for developing Web, Android and IOS apps.</li><li><strong>Universal Apps</strong>&nbsp;− The same code for web browsers and mobile devices.</li><li><strong>Packages</strong>&nbsp;− Huge number of packages that are easy to install and use.</li><li><strong>Meteor Galaxy</strong>&nbsp;− Cloud service for Meteor app deployment.</li></ul>\n\n\n\n<h2>Advantages</h2>\n\n\n\n<ul><li>Developers only need JavaScript for server and client side development.</li><li>Coding is very simple and beginner friendly.</li><li>Meteor apps are real time by default.</li><li>Official and community packages are huge time saver.</li></ul>\n\n\n\n<h2>Limitations</h2>\n\n\n\n<ul><li>Meteor isn&#8217;t very suitable for large and complex applications.</li><li>There is a lot of magic going on when working with Meteor, so developers might find themselves limited in some way.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>According to Meteor official documentation − Meteor is a full-stack JavaScript platform for developing modern web and mobile applications. Meteor includes a key set of technologies for building connected-client reactive applications, a build tool, and a curated set of packages from the Node.js and general JavaScript community. Features Web and Mobile&nbsp;− Meteor offers a platform [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4613"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4613"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4613/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4613"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4613"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4613"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4612,"date":"2020-07-29T17:30:32","date_gmt":"2020-07-29T17:30:32","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=209"},"modified":"2020-07-29T17:30:32","modified_gmt":"2020-07-29T17:30:32","slug":"environment-setup-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/environment-setup-3/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>In this chapter, we will learn how to install Meteor on Windows operating system. Before we start working with Meteor, we will need&nbsp;<strong>NodeJS</strong>. If you don&#8217;t have it installed, you can check the links provided below.</p>\n\n\n\n<h2>Prerequisite</h2>\n\n\n\n<p>NodeJS is the platform needed for Meteor development. If you do not have NodeJS environment setup ready, then you can check out our <strong>NodeJS Environment Setup</strong>.</p>\n\n\n\n<h2>Install Meteor</h2>\n\n\n\n<p>Download the official meteor installer from this page</p>\n\n\n\n<p>If any error occurs during the installation, try running the installer as an administrator. Once the installation is complete, you will be asked to create a Meteor account.</p>\n\n\n\n<p>When you finish installing Meteor installer, you can test if everything is installed correctly by running the following code in the command prompt window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username>meteor\n</code></pre>\n\n\n\n<p>Following will be the output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-installation-test.jpg\" alt=\"Meteor Installation Test\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to install Meteor on Windows operating system. Before we start working with Meteor, we will need&nbsp;NodeJS. If you don&#8217;t have it installed, you can check the links provided below. Prerequisite NodeJS is the platform needed for Meteor development. If you do not have NodeJS environment setup ready, then [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4612"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4612"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4612/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4612"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4612"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4612"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4615,"date":"2020-07-29T17:31:21","date_gmt":"2020-07-29T17:31:21","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=207"},"modified":"2020-07-29T17:31:21","modified_gmt":"2020-07-29T17:31:21","slug":"first-application","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/first-application/","title":{"rendered":"First Application"},"content":{"rendered":"\n<p>In this chapter, we will learn how to create your first Meteor application.</p>\n\n\n\n<h2>Step 1 &#8211; Create the App</h2>\n\n\n\n<p>To create the app, we will run the <strong>meteor create</strong> command from the command prompt window. The apps name will be <strong>meteorApp</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\Meteor>meteor create meteorApp\n</code></pre>\n\n\n\n<h2>Step 2 &#8211; Run the App</h2>\n\n\n\n<p>We can run the app by typing the <strong>meteor</strong> command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor\n</code></pre>\n\n\n\n<p>This command will start several processes, which can be seen in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-first-application-run.jpg\" alt=\"Meteor First App Run\"/></figure>\n\n\n\n<h2>Step 3 &#8211; Verify the Result</h2>\n\n\n\n<p>Now, we can open the&nbsp;<strong>http://localhost:3000/</strong>&nbsp;address to see how our first Meteor App looks like.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-first-application-output.jpg\" alt=\"Meteor First App Output\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to create your first Meteor application. Step 1 &#8211; Create the App To create the app, we will run the meteor create command from the command prompt window. The apps name will be meteorApp. Step 2 &#8211; Run the App We can run the app by typing the meteor command. This command will [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4615"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4615"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4615/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4615"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4615"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4615"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4611,"date":"2020-07-29T17:32:30","date_gmt":"2020-07-29T17:32:30","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=206"},"modified":"2020-07-29T17:32:30","modified_gmt":"2020-07-29T17:32:30","slug":"templates-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/templates-3/","title":{"rendered":"Templates"},"content":{"rendered":"\n<p>Meteor templates are using three top level tags. The first two are&nbsp;<strong>head</strong>&nbsp;and&nbsp;<strong>body</strong>. These tags perform the same functions as in regular HTML. The third tag is&nbsp;<strong>template</strong>. This is the place, where we connect HTML to JavaScript.</p>\n\n\n\n<h2>Simple Template</h2>\n\n\n\n<p>Following example shows how this works. We are creating a template with&nbsp;<strong>name = &#8220;myParagraph&#8221;</strong>&nbsp;attribute. Our&nbsp;<strong>template</strong>&nbsp;tag is created below the&nbsp;<strong>body</strong>&nbsp;element, however, we need to include it before it is rendered on the screen. We can do it by using&nbsp;<strong>{{&gt; myParagraph}}</strong>&nbsp;syntax. In our template, we are using double curly braces&nbsp;<strong>({{text}})</strong>. This is meteor template language called&nbsp;<strong>Spacebars</strong>.</p>\n\n\n\n<p>In our JavaScript file, we are setting&nbsp;<strong>Template.myParagraph.helpers({})</strong>&nbsp;method that will be our connection to our template. We are only using&nbsp;<strong>text</strong>&nbsp;helper in this example.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;h1>Header&lt;/h1>\n   {{> myParagraph}}\n&lt;/body>\n \n&lt;template name = \"myParagraph\">\n   &lt;p>{{text}}&lt;/p>\n&lt;/template></code></pre>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n   \n   // This code only runs on the client\n   Template.myParagraph.helpers({\n      text: 'This is paragraph...'\n   });\n}</code></pre>\n\n\n\n<p>After we save the changes, following will be the output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-templates-output.jpg\" alt=\"Meteor Templates Output\"/></figure>\n\n\n\n<h2>Block Template</h2>\n\n\n\n<p>In the following example, we are using&nbsp;<strong>{{#each paragraphs}}</strong>&nbsp;to iterate over the&nbsp;<strong>paragraphs</strong>&nbsp;array and return template&nbsp;<strong>name = &#8220;paragraph&#8221;</strong>&nbsp;for each value.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{#each paragraphs}}\n         {{> paragraph}}\n      {{/each}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"paragraph\">\n   &lt;p>{{text}}&lt;/p>\n&lt;/template></code></pre>\n\n\n\n<p>We need to create&nbsp;<strong>paragraphs</strong>&nbsp;helper. This will be an array with five text values.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n   \n   // This code only runs on the client\n   Template.body.helpers({\n      paragraphs: &#91;\n         { text: \"This is paragraph 1...\" },\n         { text: \"This is paragraph 2...\" },\n         { text: \"This is paragraph 3...\" },\n         { text: \"This is paragraph 4...\" },\n         { text: \"This is paragraph 5...\" }\n      ]\n   });\n}</code></pre>\n\n\n\n<p>Now, we can see five paragraphs on the screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-templates-output-2.jpg\" alt=\"Meteor Templates Output 2\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Meteor templates are using three top level tags. The first two are&nbsp;head&nbsp;and&nbsp;body. These tags perform the same functions as in regular HTML. The third tag is&nbsp;template. This is the place, where we connect HTML to JavaScript. Simple Template Following example shows how this works. We are creating a template with&nbsp;name = &#8220;myParagraph&#8221;&nbsp;attribute. Our&nbsp;template&nbsp;tag is created [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4611"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4611"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4611/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4611"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4611"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4611"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4616,"date":"2020-07-29T17:34:22","date_gmt":"2020-07-29T17:34:22","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=208"},"modified":"2020-07-29T17:34:22","modified_gmt":"2020-07-29T17:34:22","slug":"collections-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/collections-2/","title":{"rendered":"Collections"},"content":{"rendered":"\n<p>In this chapter, we will learn how to use&nbsp;<strong>MongoDB</strong>&nbsp;collections.</p>\n\n\n\n<h2>Create a Collection</h2>\n\n\n\n<p>We can create a new collection with the following code −</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>MyCollection = new Mongo.Collection('myCollection');</code></pre>\n\n\n\n<h2>Add Data</h2>\n\n\n\n<p>Once the collection is created, we can add data by using the&nbsp;<strong>insert</strong>&nbsp;method.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>MyCollection = new Mongo.Collection('myCollection');\n\nvar myData = {\n   key1: \"value 1...\",\n   key2: \"value 2...\",\n   key3: \"value 3...\",\n   key4: \"value 4...\",\n   key5: \"value 5...\"\n}\n\nMyCollection.insert(myData);</code></pre>\n\n\n\n<h2>Find Data</h2>\n\n\n\n<p>We can use the&nbsp;<strong>find</strong>&nbsp;method to search for data in the collection.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>MyCollection = new Mongo.Collection('myCollection');\n\nvar myData = {\n   key1: \"value 1...\",\n   key2: \"value 2...\",\n   key3: \"value 3...\",\n   key4: \"value 4...\",\n   key5: \"value 5...\"\n}\n\nMyCollection.insert(myData);\n\nvar findCollection = MyCollection.find().fetch();\nconsole.log(findCollection);</code></pre>\n\n\n\n<p>The console will show the data we inserted previously.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-collections-find.jpg\" alt=\"Meteor Collection Find\"/></figure>\n\n\n\n<p>We can get the same result by adding the search parameters.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>MyCollection = new Mongo.Collection('myCollection');\n\nvar myData = {\n   key1: \"value 1...\",\n   key2: \"value 2...\",\n   key3: \"value 3...\",\n   key4: \"value 4...\",\n   key5: \"value 5...\"\n}\n\nMyCollection.insert(myData);\n\nvar findCollection = MyCollection.find({key1: \"value 1...\"}).fetch();\nconsole.log(findCollection);</code></pre>\n\n\n\n<h2>Update Data</h2>\n\n\n\n<p>The next step is to update our data. After we have created a collection and inserted new data, we can use the&nbsp;<strong>update</strong>&nbsp;method.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>MyCollection = new Mongo.Collection('myCollection');\n\nvar myData = {\n   key1: \"value 1...\",\n   key2: \"value 2...\",\n   key3: \"value 3...\",\n   key4: \"value 4...\",\n   key5: \"value 5...\"\n}\n\nMyCollection.insert(myData);\n\nvar findCollection = MyCollection.find().fetch();\nvar myId = findCollection&#91;0]._id;\n\nvar updatedData = {\n   key1: \"updated value 1...\",\n   key2: \"updated value 2...\",\n   key3: \"updated value 3...\",\n   key4: \"updated value 4...\",\n   key5: \"updated value 5...\"\n}\n\nMyCollection.update(myId, updatedData);\n\nvar findUpdatedCollection = MyCollection.find().fetch();\nconsole.log(findUpdatedCollection);</code></pre>\n\n\n\n<p>The console will show that our collection is updated.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-collections-update.jpg\" alt=\"Meteor Collections Update\"/></figure>\n\n\n\n<h2>Delete Data</h2>\n\n\n\n<p>Data can be deleted from the collection using the&nbsp;<strong>remove</strong>&nbsp;method. We are setting&nbsp;<strong>id</strong>&nbsp;in this example as a parameter to delete specific data.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>MyCollection = new Mongo.Collection('myCollection');\n\nvar myData = {\n   key1: \"value 1...\",\n   key2: \"value 2...\",\n   key3: \"value 3...\",\n   key4: \"value 4...\",\n   key5: \"value 5...\"\n}\n\nMyCollection.insert(myData);\n\nvar findCollection = MyCollection.find().fetch();\nvar myId = findCollection&#91;0]._id;\n\nMyCollection.remove(myId);\n\nvar findDeletedCollection = MyCollection.find().fetch();\nconsole.log(findDeletedCollection);</code></pre>\n\n\n\n<p>The console will show an empty array.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-collections-remove.jpg\" alt=\"Meteor Collections Remove\"/></figure>\n\n\n\n<p>If we want to delete everything from the collection, we can use the same method, however, instead of&nbsp;<strong>id</strong>&nbsp;we will use an empty object&nbsp;<strong>{}</strong>. We need to do this on the server for security reasons.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isServer) {\n\n   MyCollection = new Mongo.Collection('myCollection');\n\n   var myData = {\n      key1: \"value 1...\",\n      key2: \"value 2...\",\n      key3: \"value 3...\",\n      key4: \"value 4...\",\n      key5: \"value 5...\"\n   }\n\n   MyCollection.insert(myData);\n   MyCollection.remove({});\n\t\n   var findDeletedCollection = MyCollection.find().fetch();\n   console.log(findDeletedCollection);\n}</code></pre>\n\n\n\n<p>We can also delete data using other parameters. As in the previous example, Meteor will force us to do this from the server.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isServer) {\n\n   MyCollection = new Mongo.Collection('myCollection');\n\n   var myData = {\n      key1: \"value 1...\",\n      key2: \"value 2...\",\n      key3: \"value 3...\",\n      key4: \"value 4...\",\n      key5: \"value 5...\"\n   }\n\n   MyCollection.insert(myData);\n   MyCollection.remove({key1: \"value 1...\"});\n\t\n   var findDeletedCollection = MyCollection.find().fetch();\n   console.log(findDeletedCollection);\n}</code></pre>\n\n\n\n<p>It can be seen that the data is deleted from the command window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-collections-remove-server.jpg\" alt=\"Meteor Collections Remove Server\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to use&nbsp;MongoDB&nbsp;collections. Create a Collection We can create a new collection with the following code − meteorApp.js Add Data Once the collection is created, we can add data by using the&nbsp;insert&nbsp;method. meteorApp.js Find Data We can use the&nbsp;find&nbsp;method to search for data in the collection. meteorApp.js The console [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4616"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4616"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4616/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4616"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4616"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4616"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4610,"date":"2020-07-29T17:36:16","date_gmt":"2020-07-29T17:36:16","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=205"},"modified":"2020-07-29T17:36:16","modified_gmt":"2020-07-29T17:36:16","slug":"forms-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/forms-3/","title":{"rendered":"Forms"},"content":{"rendered":"\n<p>In this chapter, we will learn how to work with Meteor forms.</p>\n\n\n\n<h2>Text Input</h2>\n\n\n\n<p>First, we will create a&nbsp;<strong>form</strong>&nbsp;element with text input field and a submit button.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{> myTemplate}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"myTemplate\">\n   &lt;form>\n      &lt;input type = \"text\" name = \"myForm\">\n      &lt;input type = \"submit\" value = \"SUBMIT\">\n   &lt;/form>\n&lt;/template></code></pre>\n\n\n\n<p>In a JavaScript file, we will create the&nbsp;<strong>submit</strong>&nbsp;event. We need to prevent default event behavior to stop the browser from refreshing. Next, we are going to take the content of the input field and assign it to&nbsp;<strong>textValue</strong>&nbsp;variable.</p>\n\n\n\n<p>In the following example, we will only log that content to developers console. And the last thing we need is to clear the input field.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n\n   Template.myTemplate.events({\n\n      'submit form': function(event) {\n         event.preventDefault();\n         var textValue = event.target.myForm.value;\n         console.log(textValue);\n         event.target.myForm.value = \"\";\n      }\n   });\n}</code></pre>\n\n\n\n<p>When we type &#8220;Some text&#8230;&#8221; in our input field and submit it, the console will log the text we entered.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-forms-text.jpg\" alt=\"Meteor Forms Text\"/></figure>\n\n\n\n<h2>Radio Buttons</h2>\n\n\n\n<p>A similar concept can be used for radio buttons.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{> myTemplate}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"myTemplate\">\n   &lt;form>\n      &lt;input type = \"radio\" name = \"myForm\" value = \"form-1\">FORM 1\n      &lt;input type = \"radio\" name = \"myForm\" value = \"form-2\">FORM 2\n      &lt;input type = \"submit\" value = \"SUBMIT\">\n   &lt;/form>\n&lt;/template></code></pre>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n\n   Template.myTemplate.events({\n\n      'submit form': function(event) {\n         event.preventDefault();\n         var radioValue = event.target.myForm.value;\n         console.log(radioValue);\n      }\n   });\n}</code></pre>\n\n\n\n<p>When we submit the first button, the console will show the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-forms-radio.jpg\" alt=\"Meteor Forms Radio\"/></figure>\n\n\n\n<h2>Checkbox</h2>\n\n\n\n<p>Following example shows how to use checkboxes. You can see that we are just repeating the same process.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{> myTemplate}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"myTemplate\">\n   &lt;form>\n      &lt;input type = \"checkbox\" name = \"myForm\" value = \"form-1\">FORM 1\n      &lt;input type = \"checkbox\" name = \"myForm\" value = \"form-2\">FORM 2\n      &lt;input type = \"submit\" value = \"SUBMIT\">\n   &lt;/form>\n&lt;/template></code></pre>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n\n   Template.myTemplate.events({\n   \n      'submit form': function(event) {\n         event.preventDefault();\n         var checkboxValue1 = event.target.myForm&#91;0].checked;\n         var checkboxValue2 = event.target.myForm&#91;1].checked;\n         console.log(checkboxValue1);\n         console.log(checkboxValue2);\n      }\n   });\n}</code></pre>\n\n\n\n<p>Once the form is submitted, the checked input will be logged as&nbsp;<strong>true</strong>, while the unchecked one will be logged as&nbsp;<strong>false</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-forms-checkbox.jpg\" alt=\"Meteor Forms Checkbox\"/></figure>\n\n\n\n<h2>Select Dropdown</h2>\n\n\n\n<p>In the following example, we will learn how to use the&nbsp;<strong>select</strong>&nbsp;element. We will use the&nbsp;<strong>change</strong>&nbsp;event to update data every time the option changes.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{> myTemplate}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"myTemplate\">\n   &lt;select>\n      &lt;option name = \"myOption\" value = \"option-1\">OPTION 1&lt;/option>\n      &lt;option name = \"myOption\" value = \"option-2\">OPTION 2&lt;/option>\n      &lt;option name = \"myOption\" value = \"option-3\">OPTION 3&lt;/option>\n      &lt;option name = \"myOption\" value = \"option-4\">OPTION 4&lt;/option>\n   &lt;/select>\n&lt;/template></code></pre>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n\n   Template.myTemplate.events({\n\n      'change select': function(event) {\n         event.preventDefault();\n         var selectValue = event.target.value;\n         console.log(selectValue);\n      }\n   });\n}</code></pre>\n\n\n\n<p>If we choose the third option, the console will log the option value.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-forms-select.jpg\" alt=\"Meteor Forms Select\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to work with Meteor forms. Text Input First, we will create a&nbsp;form&nbsp;element with text input field and a submit button. meteorApp.html In a JavaScript file, we will create the&nbsp;submit&nbsp;event. We need to prevent default event behavior to stop the browser from refreshing. Next, we are going to take [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4610"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4610"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4610/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4610"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4610"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4610"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4608,"date":"2020-07-29T17:36:57","date_gmt":"2020-07-29T17:36:57","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=203"},"modified":"2020-07-29T17:36:57","modified_gmt":"2020-07-29T17:36:57","slug":"events-2-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/events-2-2/","title":{"rendered":"Events"},"content":{"rendered":"\n<p>In this chapter, we will learn how to use&nbsp;<strong>tag, class</strong>&nbsp;and&nbsp;<strong>id</strong>&nbsp;as an event selector. Working with events is pretty straightforward.</p>\n\n\n\n<p>Let&#8217;s create three elements in the HTML template. The first one is&nbsp;<strong>p</strong>, the second one is&nbsp;<strong>myClass</strong>&nbsp;class and the last one is&nbsp;<strong>myId</strong>&nbsp;id.</p>\n\n\n\n<h2>meteorApp.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{> myTemplate}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"myTemplate\">\n   &lt;p>PARAGRAPH...&lt;/p>\n   &lt;button class = \"myClass\">CLASS&lt;/button>\n   &lt;button id = \"myId\">ID&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<p>In our JavaScript file, we are setting three events for three elements that we created above. You can see that we are just adding&nbsp;<strong>p, .myClass</strong>&nbsp;and&nbsp;<strong>#myId</strong>&nbsp;after the&nbsp;<strong>click</strong>&nbsp;event. These are the&nbsp;<strong>selectors</strong>&nbsp;we mentioned above.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n\n   Template.myTemplate.events({\n\n      'click p': function() {\n         console.log(\"The PARAGRAPH is clicked...\");\n      },\n\n      'click .myClass': function() {\n         console.log(\"The CLASS is clicked...\");\n      },\n\n      'click #myId': function() {\n         console.log(\"The ID is clicked...\");\n      },\n   });\n}</code></pre>\n\n\n\n<p>To test this, we can first click on&nbsp;<strong>PARAGRAPH</strong>, then the&nbsp;<strong>CLASS</strong>&nbsp;button and finally the&nbsp;<strong>ID</strong>button. We will get the following console log.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-events-example.jpg\" alt=\"Meteor Events Log\"/></figure>\n\n\n\n<p>We can use all the other JavaScript events &#8211; click, dbclick, contextmenu, mousedown, mouseup, mouseover, mouseout, mousemove &#8211; following the example above.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to use&nbsp;tag, class&nbsp;and&nbsp;id&nbsp;as an event selector. Working with events is pretty straightforward. Let&#8217;s create three elements in the HTML template. The first one is&nbsp;p, the second one is&nbsp;myClass&nbsp;class and the last one is&nbsp;myId&nbsp;id. meteorApp.html In our JavaScript file, we are setting three events for three elements that we [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4608"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4608"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4608/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4608"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4608"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4608"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4609,"date":"2020-07-29T17:37:44","date_gmt":"2020-07-29T17:37:44","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=204"},"modified":"2020-07-29T17:37:44","modified_gmt":"2020-07-29T17:37:44","slug":"session-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/session-3/","title":{"rendered":"Session"},"content":{"rendered":"\n<p>Sessions are used for saving data while the users are using the app. This data will be deleted when the user leaves the app.</p>\n\n\n\n<p>In this chapter, we will learn how to set a session object, store some data, and return that data. We will use the basic HTML setup.</p>\n\n\n\n<h2>meteorApp.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{> myTemplate}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"myTemplate\">\n&lt;/template></code></pre>\n\n\n\n<p>Now, we will store&nbsp;<strong>myData</strong>&nbsp;locally using&nbsp;<strong>Session.set()</strong>&nbsp;method. Once the method is set, we can return it using&nbsp;<strong>Session.get()</strong>&nbsp;method.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n  \n   var myData = {\n      key1: \"value1\",\n      key2: \"value2\"\n   }\n\n   Session.set('mySession', myData);\n\n   var sessionDataToLog = Session.get('mySession');\n   console.log(sessionDataToLog);\n}</code></pre>\n\n\n\n<p>If we check the console, we will see that the stored data is logged.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-session-log.jpg\" alt=\"Meteor Session Log\"/></figure>\n\n\n\n<p>In the next chapter, we will learn how to auto-update templates using the Session variable.</p>\n","protected":false},"excerpt":{"rendered":"<p>Sessions are used for saving data while the users are using the app. This data will be deleted when the user leaves the app. In this chapter, we will learn how to set a session object, store some data, and return that data. We will use the basic HTML setup. meteorApp.html Now, we will store&nbsp;myData&nbsp;locally [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4609"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4609"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4609/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4609"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4609"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4609"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4607,"date":"2020-07-29T17:38:25","date_gmt":"2020-07-29T17:38:25","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=202"},"modified":"2020-07-29T17:38:25","modified_gmt":"2020-07-29T17:38:25","slug":"tracker","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/tracker/","title":{"rendered":"Tracker"},"content":{"rendered":"\n<p>Tracker is a small library used for auto updating templates once the Session variable has changed. In this chapter, we will learn how the tracker works.</p>\n\n\n\n<p>First, we will create a&nbsp;<strong>button</strong>&nbsp;that will be used for updating the session.</p>\n\n\n\n<h2>meteorApp.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{> myTemplate}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"myTemplate\">\n   &lt;button id = \"myButton\">CLICK ME&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<p>Next, we will set the starting session value&nbsp;<strong>myData</strong>&nbsp;and create a&nbsp;<strong>mySession</strong>&nbsp;object.&nbsp;<strong>Tracker.autorun</strong>&nbsp;method is used for keeping an eye on&nbsp;<strong>mySession</strong>. Whenever this object changes, the template will auto-update. To test it, we will set a click event for updating.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n  \n   var myData = 0\n   Session.set('mySession', myData);\n\n   Tracker.autorun(function () {\n      var sessionData = Session.get('mySession');\n      console.log(sessionData)\n   });\n\n   Template.myTemplate.events({\n\n      'click #myButton': function() {\n         Session.set('mySession', myData ++);\n      }\n   });\n}</code></pre>\n\n\n\n<p>If we click the&nbsp;<strong>CLICK ME</strong>&nbsp;button five times, we will see that the tracker is logging new values every time the session updates.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-tracker-log.jpg\" alt=\"Meteor Tracker Log\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Tracker is a small library used for auto updating templates once the Session variable has changed. In this chapter, we will learn how the tracker works. First, we will create a&nbsp;button&nbsp;that will be used for updating the session. meteorApp.html Next, we will set the starting session value&nbsp;myData&nbsp;and create a&nbsp;mySession&nbsp;object.&nbsp;Tracker.autorun&nbsp;method is used for keeping an eye [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4607"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4607"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4607/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4607"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4607"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4607"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4606,"date":"2020-07-29T17:39:34","date_gmt":"2020-07-29T17:39:34","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=201"},"modified":"2020-07-29T17:39:34","modified_gmt":"2020-07-29T17:39:34","slug":"packages-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/packages-2/","title":{"rendered":"Packages"},"content":{"rendered":"\n<p>Meteor offers thousands of community packages that you can use while developing your app.</p>\n\n\n\n<h2>Adding Packages</h2>\n\n\n\n<p>You can check the official Meteor package server here. Just search for the package you need and add it in the command prompt window. If, for example, you want to add <strong>http</strong>package to your app, you can do it by running the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add http\n</code></pre>\n\n\n\n<h2>Removing Packages</h2>\n\n\n\n<p>A similar principle can be used to remove packages −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor remove http\n</code></pre>\n\n\n\n<h2>Updating Packages</h2>\n\n\n\n<p>You can update the package running the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor update http\n</code></pre>\n\n\n\n<h2>Checking Current Packages</h2>\n\n\n\n<p>You can also check what packages your current application is using.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor list\n</code></pre>\n\n\n\n<h2>Package Maintenance</h2>\n\n\n\n<p>If a package has&nbsp;<strong>:</strong>&nbsp;in the name, it means that it is a community package, while the ones without the prefix are maintained by the Meteor Development group.</p>\n\n\n\n<h3>Adding Meteor Development Group Package</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add http\n</code></pre>\n\n\n\n<h3>Adding Community Package</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add cfs:http-methods</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Meteor offers thousands of community packages that you can use while developing your app. Adding Packages You can check the official Meteor package server here. Just search for the package you need and add it in the command prompt window. If, for example, you want to add httppackage to your app, you can do it by running [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4606"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4606"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4606/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4606"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4606"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4606"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4605,"date":"2020-07-29T17:40:23","date_gmt":"2020-07-29T17:40:23","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=200"},"modified":"2020-07-29T17:40:23","modified_gmt":"2020-07-29T17:40:23","slug":"core-api","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/core-api/","title":{"rendered":"Core Api"},"content":{"rendered":"\n<p>If you want to limit the code to run only on the server or the client side, you can use the following code −</p>\n\n\n\n<h2>meteorApp.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n   // Code running on client...\n}\n\nif (Meteor.isServer) {\n   // Code running on server...\n}</code></pre>\n\n\n\n<p>You can limit the code to run only when the app is using Cordova bundling.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isCordova) {\n   // Code running on Cordova...\n}</code></pre>\n\n\n\n<p>Some plugins need to wait until the server and DOM are ready. You can use the following code to wait until everything begins.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Meteor.startup(function () {\n   // Code running after platform is ready...\n});</code></pre>\n\n\n\n<p>Following table lists some other core API methods.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Details</th></tr><tr><td>1</td><td><strong>Meteor.wrapAsync(function)</strong>Used for wrapping asynchronous code and convert it into synchronous.</td></tr><tr><td>2</td><td><strong>Meteor.absoluteUrl([path], [options])</strong>Used for generating absolute URL pointing to the app.</td></tr><tr><td>3</td><td><strong>Meteor.settings</strong>Used for setting deployment configuration.</td></tr><tr><td>4</td><td><strong>Meteor.publish(name, function)</strong>Used for publishing records to the client.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>If you want to limit the code to run only on the server or the client side, you can use the following code − meteorApp.js You can limit the code to run only when the app is using Cordova bundling. Some plugins need to wait until the server and DOM are ready. You can use [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4605"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4605"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4605/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4605"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4605"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4605"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4604,"date":"2020-07-29T17:41:33","date_gmt":"2020-07-29T17:41:33","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=199"},"modified":"2020-07-29T17:41:33","modified_gmt":"2020-07-29T17:41:33","slug":"check","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/check/","title":{"rendered":"Check"},"content":{"rendered":"\n<p>The check method is used for find out if the argument or types are matching the pattern.</p>\n\n\n\n<h2>Installing Check Package</h2>\n\n\n\n<p>Open the command prompt window and install the package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add check\n</code></pre>\n\n\n\n<h2>Using Check</h2>\n\n\n\n<p>In the following example, we want to check if&nbsp;<strong>myValue</strong>&nbsp;is a string. Since it is true, the app will proceed without any errors.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var myValue = 'My Value...';\ncheck(myValue, String);</code></pre>\n\n\n\n<p>In this example,&nbsp;<strong>myValue</strong>&nbsp;is not a string but a number, hence the console will log an error.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var myValue = 1;\ncheck(myValue, String);</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-check-log-error.jpg\" alt=\"Meteor Check Log Error\"/></figure>\n\n\n\n<h2>Match Test</h2>\n\n\n\n<p>The&nbsp;<strong>Match.test</strong>&nbsp;is similar to check, the difference being when the test fails instead of a console error, we will get a&nbsp;<strong>value</strong>&nbsp;without breaking the server. The following example shows how to test an object with multiple keys.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var myObject = {\n   key1 : \"Value 1...\",\n   key2 : \"Value 2...\"\n}\n\nvar myTest = Match.test(myObject, {\n   key1: String,\n   key2: String\n});\n\nif ( myTest ) {\n   console.log(\"Test is TRUE...\");\n} else {\n   console.log(\"Test is FALSE...\");\n}</code></pre>\n\n\n\n<p>Since the both keys are strings, the test is&nbsp;<strong>true</strong>. The console will log the first option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-match-test-true.jpg\" alt=\"Meteor Match Test True\"/></figure>\n\n\n\n<p>If we change the&nbsp;<strong>key2</strong>&nbsp;to number, the test will fail and the console will log the second option.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var myObject = {\n   key1 : \"Value 1...\",\n   key2 : 1\n}\n\nvar myValue = 1;\n\nvar myTest = Match.test(myObject, {\n   key1: String,\n   key2: String\n});\n\nif ( myTest ) {\n   console.log(\"Test is TRUE...\");\n} else {\n   console.log(\"Test is FALSE...\");\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-match-test-false.jpg\" alt=\"Meteor Match Test False\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The check method is used for find out if the argument or types are matching the pattern. Installing Check Package Open the command prompt window and install the package. Using Check In the following example, we want to check if&nbsp;myValue&nbsp;is a string. Since it is true, the app will proceed without any errors. meteorApp.js In [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4604"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4604"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4604/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4604"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4604"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4604"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4603,"date":"2020-07-29T17:43:17","date_gmt":"2020-07-29T17:43:17","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=198"},"modified":"2020-07-29T17:43:17","modified_gmt":"2020-07-29T17:43:17","slug":"blaze","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/blaze/","title":{"rendered":"Blaze"},"content":{"rendered":"\n<p>Blaze is a Meteor package for building live reactive templates.</p>\n\n\n\n<h2>Render Method</h2>\n\n\n\n<p>This method is used for rendering templates into the DOM. First, we will create&nbsp;<strong>myNewTemplate</strong>&nbsp;that will be rendered. We will also add&nbsp;<strong>myContainer</strong>, which will be used as a parent element, so the&nbsp;<strong>render</strong>&nbsp;method knows where to render our template.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div id = \"myContainer\">\n   &lt;/div>\n&lt;/body>\n\n&lt;template name = \"myNewTemplate\">\n   &lt;p>Text from my new template...&lt;/p>\n&lt;/template></code></pre>\n\n\n\n<p>Next, we will create a render function that will take two arguments. The first one is a template that will be rendered and the second one is a parent element that we mentioned above.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Meteor.startup(function () {\n\n   if(Meteor.isClient) {\n      var myNewTemplate = Template.myNewTemplate;\n      var myContainer = document.getElementById('myContainer');\n      Blaze.render(myNewTemplate, myContainer);\n   }\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-blaze-render.jpg\" alt=\"Meteor Blaze Render\"/></figure>\n\n\n\n<h2>Render with Data</h2>\n\n\n\n<p>If you need to pass some data reactively, you can use&nbsp;<strong>renderWithData</strong>&nbsp;method. The HTML will be exactly the same as in the previous example.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div id = \"myContainer\">\n   &lt;/div>\n&lt;/body>\n\n&lt;template name = \"myNewTemplate\">\n   &lt;p>Text from my new template...&lt;/p>\n&lt;/template></code></pre>\n\n\n\n<p>We can add our data as a second argument in&nbsp;<strong>Meteor.renderWithData</strong>&nbsp;method. The other two arguments are the same as in the previous example. In this example, our data is a function that will log some text.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Meteor.startup(function () {\n\n   if(Meteor.isClient) {\n      var myNewTemplate = Template.myNewTemplate;\n\t\t\n      var myData = function() {\n         console.log('Log from the data object...')\n      }\n\n      var myContainer = document.getElementById('myContainer');\n      Blaze.renderWithData(myNewTemplate, myData, myContainer);\n   }\n});</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-blaze-render-with-data.jpg\" alt=\"Meteor Blaze Render With Data\"/></figure>\n\n\n\n<h2>Remove Method</h2>\n\n\n\n<p>We can add&nbsp;<strong>remove</strong>&nbsp;method.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div id = \"myContainer\">\n   &lt;/div>\n&lt;/body>\n\n&lt;template name = \"myNewTemplate\">\n   &lt;p>Text from my new template...&lt;/p>\n&lt;/template></code></pre>\n\n\n\n<p>In this example, we are rendering the template that will be removed after three seconds. Notice the&nbsp;<strong>Blaze.Remove</strong>&nbsp;method that we are using to remove the template.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Meteor.startup(function () {\n\n   if(Meteor.isClient) {\n      var myNewTemplate = Template.myNewTemplate;\n      var myContainer = document.getElementById('myContainer');\n      var myRenderedTemplate = Blaze.render(myNewTemplate, myContainer);\n\n      Meteor.setTimeout(function() {\n         Blaze.remove(myRenderedTemplate);\n      }, 3000);\n   }\n});</code></pre>\n\n\n\n<p>The following table shows the other methods that can be used.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Details</th></tr><tr><td>1</td><td><strong>Blaze.getData([elementOrView])</strong>Used for retrieving data from the rendering element.</td></tr><tr><td>2</td><td><strong>Blaze.toHTML(templateOrView)</strong>Used for rendering templates or views to the string.</td></tr><tr><td>3</td><td><strong>Blaze.toHTMLWithData(templateOrView, data)</strong>Used for rendering templates or views to the string with additional data.</td></tr><tr><td>4</td><td><strong>new Blaze.View([name], renderFunction)</strong>Used for creating a new Blaze reactive part of the DOM.</td></tr><tr><td>5</td><td><strong>Blaze.currentView</strong>Used for getting the current view.</td></tr><tr><td>6</td><td><strong>Blaze.getView([element])</strong>Used for getting the current view.</td></tr><tr><td>7</td><td><strong>Blaze.With(data, contentFunc)</strong>Used for constructing a view that renders some content with context.</td></tr><tr><td>8</td><td><strong>Blaze.If(conditionFunc, contentFunc, [elseFunc])</strong>Used for constructing a view that renders some conditional content.</td></tr><tr><td>9</td><td><strong>Blaze.Unless(conditionFunc, contentFunc, [elseFunc])</strong>Used for constructing a view that renders some conditional content (inverted&nbsp;<strong>Blaze.if</strong>).</td></tr><tr><td>10</td><td><strong>Blaze.Each(argFunc, contentFunc, [elseFunc])</strong>Used for constructing a view that renders&nbsp;<strong>contentFunct</strong>&nbsp;for every item.</td></tr><tr><td>11</td><td><strong>new Blaze.Template([viewName], renderFunction)</strong>Used for constructing a new Blaze view with name and content.</td></tr><tr><td>12</td><td><strong>Blaze.isTemplate(value)</strong>Used for returning true, if the value is a template object.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Blaze is a Meteor package for building live reactive templates. Render Method This method is used for rendering templates into the DOM. First, we will create&nbsp;myNewTemplate&nbsp;that will be rendered. We will also add&nbsp;myContainer, which will be used as a parent element, so the&nbsp;render&nbsp;method knows where to render our template. meteorApp.html Next, we will create a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4603"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4603"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4603/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4603"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4603"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4603"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4602,"date":"2020-07-29T17:48:06","date_gmt":"2020-07-29T17:48:06","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=197"},"modified":"2020-07-29T17:48:06","modified_gmt":"2020-07-29T17:48:06","slug":"timers","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/timers/","title":{"rendered":"Timers"},"content":{"rendered":"\n<p>Meteor offers its own&nbsp;<strong>setTimeout</strong>&nbsp;and&nbsp;<strong>setInterval</strong>&nbsp;methods. These methods are used to make sure that all global variables have correct values. They work like regular JavaScript&nbsp;<strong>setTimout</strong>&nbsp;and&nbsp;<strong>setInterval</strong>.</p>\n\n\n\n<h2>Timeout</h2>\n\n\n\n<p>This is <strong>Meteor.setTimeout</strong> example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Meteor.setTimeout(function() {\n   console.log(\"Timeout called after three seconds...\");\n}, 3000);</code></pre>\n\n\n\n<p>We can see in the console that the timeout function is called once the app has started.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-timeout.jpg\" alt=\"Meteor Timeout\"/></figure>\n\n\n\n<h2>Interval</h2>\n\n\n\n<p>Following example shows how to set and clear an interval.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   &lt;div>\n      {{> myTemplate}}\n   &lt;/div>\n&lt;/body>\n \n&lt;template name = \"myTemplate\">\n   &lt;button>CLEAR&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<p>We will set the initial&nbsp;<strong>counter</strong>&nbsp;variable that will be updated after every interval call.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n\n   var counter = 0;\n\n   var myInterval = Meteor.setInterval(function() {\n      counter ++\n      console.log(\"Interval called \" + counter + \" times...\");\n   }, 3000);\n\n   Template.myTemplate.events({\n\n      'click button': function() {\n         Meteor.clearInterval(myInterval);\n         console.log('Interval cleared...')\n      }\n   });\n}</code></pre>\n\n\n\n<p>The console will log the updated&nbsp;<strong>counter</strong>&nbsp;variable every three seconds. We can stop this by clicking the&nbsp;<strong>CLEAR</strong>&nbsp;button. This will call the&nbsp;<strong>clearInterval</strong>&nbsp;method.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-interval.jpg\" alt=\"Meteor Interval\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Meteor offers its own&nbsp;setTimeout&nbsp;and&nbsp;setInterval&nbsp;methods. These methods are used to make sure that all global variables have correct values. They work like regular JavaScript&nbsp;setTimout&nbsp;and&nbsp;setInterval. Timeout This is Meteor.setTimeout example. We can see in the console that the timeout function is called once the app has started. Interval Following example shows how to set and clear an interval. meteorApp.html [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4602"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4602"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4602/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4602"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4602"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4602"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4601,"date":"2020-07-29T17:49:14","date_gmt":"2020-07-29T17:49:14","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=196"},"modified":"2020-07-29T17:49:14","modified_gmt":"2020-07-29T17:49:14","slug":"ejson","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ejson/","title":{"rendered":"EJSON"},"content":{"rendered":"\n<p>EJSON is an extension of JSON syntax that supports&nbsp;<strong>Date</strong>&nbsp;and&nbsp;<strong>Binary</strong>&nbsp;types.</p>\n\n\n\n<h2>Install EJSON</h2>\n\n\n\n<p>To install EJSON package, we need to add it from the command prompt window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add ejson\n</code></pre>\n\n\n\n<h2>Date Example</h2>\n\n\n\n<p>We can deserialize the <strong>date</strong> using the <strong>parse</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n   var myEjsonDate = '{\"$date\": 1455029631493}';\n   var myDate = EJSON.parse(myEjsonDate);\n   console.log(myDate);\n}</code></pre>\n\n\n\n<p>The console will log the correct date value.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-ejson-date.jpg\" alt=\"Meteor EJSON Date\"/></figure>\n\n\n\n<h2>Binary Example</h2>\n\n\n\n<p>The same can be applied to binary types.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n   var myEjsonBinary = '{\"$binary\": \"c3VyZS4=\"}';\n   var myBinary = EJSON.parse(myEjsonBinary);\n   console.log(myBinary);\n}</code></pre>\n\n\n\n<p>You can see that the console is logging new deserialized value.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-ejson-binary.jpg\" alt=\"Meteor EJSON Binary\"/></figure>\n\n\n\n<h2>Stringify</h2>\n\n\n\n<p>We can serialize an object using the <strong>stringify</strong> method. This is the reversed process from the example above.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n\n   var myObject = {\n      myDate : new Date(),\n      myBinary : new Uint8Array(&#91;115, 117, 114, 101, 46])\n   }\n\n   var myEjosnData = EJSON.stringify(myObject);\n   console.log(myEjosnData);\n}</code></pre>\n\n\n\n<p>We can see our new values in the console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-ejson-stringify.jpg\" alt=\"Meteor EJSON Stringify\"/></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Details</th></tr><tr><td>1</td><td><strong>EJSON.parse(string)</strong>Used for parsing a string into EJSON value.</td></tr><tr><td>2</td><td><strong>EJSON.stringify(value)</strong>Used for serializing a value to the string.</td></tr><tr><td>3</td><td><strong>EJSON.fromJSONValue(value)</strong>Used for deserializing an EJSON value from JSON.</td></tr><tr><td>4</td><td><strong>EJSON.toJSONValue(value)</strong>Used for serializing an EJSON value into JSON.</td></tr><tr><td>5</td><td><strong>EJSON.equals(value1, value2)</strong>Used for comparing if two values are equal.</td></tr><tr><td>6</td><td><strong>EJSON.clone(value)</strong>Used for returning a deep copy of the value.</td></tr><tr><td>7</td><td><strong>EJSON.newBinary</strong>Used for assigning a binary data that EJSON can serialize.</td></tr><tr><td>8</td><td><strong>EJSON.isBinary(x)</strong>Used for checking if the value is a binary data.</td></tr><tr><td>9</td><td><strong>EJSON.addType(name, factory)</strong>Used for creating a custom EJSON type.</td></tr><tr><td>10</td><td><strong>customType.typeName()</strong>Used for returning a name of the custom type.</td></tr><tr><td>11</td><td><strong>customType.toJSONValue()</strong>Used for serializing custom types.</td></tr><tr><td>12</td><td><strong>customType.clone()</strong>Used for returning a deep copy of the custom type.</td></tr><tr><td>13</td><td><strong>customType.equals(otherValue)</strong>Used for comparison between the custom type value and other value.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>EJSON is an extension of JSON syntax that supports&nbsp;Date&nbsp;and&nbsp;Binary&nbsp;types. Install EJSON To install EJSON package, we need to add it from the command prompt window. Date Example We can deserialize the date using the parse method. The console will log the correct date value. Binary Example The same can be applied to binary types. You can see that the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4601"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4601"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4601/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4601"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4601"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4601"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4600,"date":"2020-07-29T17:56:25","date_gmt":"2020-07-29T17:56:25","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=195"},"modified":"2020-07-29T17:56:25","modified_gmt":"2020-07-29T17:56:25","slug":"http","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/http/","title":{"rendered":"HTTP"},"content":{"rendered":"\n<p>This package provides HTTP request API with&nbsp;<strong>get, post, put</strong>&nbsp;and&nbsp;<strong>delete</strong>&nbsp;methods.</p>\n\n\n\n<h2>Install Package</h2>\n\n\n\n<p>We will install this package by running the following code in the command prompt window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add http\n</code></pre>\n\n\n\n<h2>CALL Method</h2>\n\n\n\n<p>This is universal method that can use <strong>GET</strong>, <strong>POST</strong>, <strong>PUT</strong> and <strong>DELETE</strong> arguments. The following example demonstrates how to use <strong>GET</strong> argument. The examples in this chapter will use fake REST API from this website.</p>\n\n\n\n<p>You can see that this method is using four arguments. We already mentioned the first argument <strong>GET</strong>. The second one is API URL. The third argument is an empty object, where we can set some optional parameters. The last method is an asynchronous callback, where we can handle errors and work with a response.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>HTTP.call( 'GET', 'http://jsonplaceholder.typicode.com/posts/1', {},\n   function( error, response ) {\n\n   if (error) {\n      console.log(error);\n   } else {\n      console.log(response);\n   }\n});</code></pre>\n\n\n\n<h2>GET Method</h2>\n\n\n\n<p>The same request can be sent using <strong>GET</strong> instead of <strong>CALL</strong> method. You can see that the first argument now is API URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>HTTP.get('http://jsonplaceholder.typicode.com/posts/1', {}, function( error, response ) {\n\n   if ( error ) {\n      console.log( error );\n   } else {\n      console.log( response );\n   }\n});</code></pre>\n\n\n\n<p>Both of the previous examples will log the same output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-http-call.jpg\" alt=\"Meteor HTTP Call\"/></figure>\n\n\n\n<h2>POST Method</h2>\n\n\n\n<p>In this method, we are setting data that needs to be sent to the server (<strong>postData</strong>) as the second argument. Everything else is the same as in our <strong>GET</strong> request.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var postData = {\n\n   data: {\n      \"name1\": \"Value1\",\n      \"name2\": \"Value2\",\n   }\n}\n\nHTTP.post( 'http://jsonplaceholder.typicode.com/posts', postData, \n   function( error, response ) {\n\n   if ( error ) {\n      console.log( error );\n   } else {\n      console.log( response);\n   }\n});</code></pre>\n\n\n\n<p>The console will log our&nbsp;<strong>postData</strong>&nbsp;object.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-http-post.jpg\" alt=\"Meteor HTTP Post\"/></figure>\n\n\n\n<h2>PUT Method</h2>\n\n\n\n<p>We can update our data using the <strong>PUT</strong> method. The concept is the same as in our last example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var updateData = {\n\n   data: {\n      \"updatedName1\": \"updatedValue1\",\n      \"UpdatedName2\": \"updatedValue2\",\n   }\n}\n\nHTTP.put( 'http://jsonplaceholder.typicode.com/posts/1', updateData, \n   function( error, response ) {\n\t\n   if ( error ) {\n      console.log( error );\n   } else {\n      console.log( response );\n   }\n});</code></pre>\n\n\n\n<p>Now, we can see our updated object in the console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-http-put.jpg\" alt=\"Meteor HTTP Put\"/></figure>\n\n\n\n<h2>DEL Method</h2>\n\n\n\n<p>We can send a delete request to the server using the <strong>DEL</strong> method. We will delete everything inside the <strong>data</strong> object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var deleteData = {\n   data: {}\n}\n\nHTTP.del( 'http://jsonplaceholder.typicode.com/posts/1', deleteData, \n   function( error, response ) {\n\t\n   if ( error ) {\n      console.log( error );\n   } else {\n      console.log( response );\n   }\n});</code></pre>\n\n\n\n<p>The console will show that the deleting process is successful.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-http-del.jpg\" alt=\"Meteor HTTP Del\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>This package provides HTTP request API with&nbsp;get, post, put&nbsp;and&nbsp;delete&nbsp;methods. Install Package We will install this package by running the following code in the command prompt window. CALL Method This is universal method that can use GET, POST, PUT and DELETE arguments. The following example demonstrates how to use GET argument. The examples in this chapter will use fake REST API from this website. You [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4600"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4600"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4600/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4600"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4600"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4600"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4599,"date":"2020-07-29T17:57:16","date_gmt":"2020-07-29T17:57:16","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=194"},"modified":"2020-07-29T17:57:16","modified_gmt":"2020-07-29T17:57:16","slug":"email","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/email/","title":{"rendered":"Email"},"content":{"rendered":"\n<p>This package is used when you need to send an email from Meteor App.</p>\n\n\n\n<h2>Step 1 &#8211; Add Package</h2>\n\n\n\n<p>Open the command prompt window and run the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add email\n</code></pre>\n\n\n\n<h2>Step 2 &#8211; Mailgun Account</h2>\n\n\n\n<p>We need to create an account here. This is the default email provider for Meteor apps.</p>\n\n\n\n<p>After you are logged in, open the&nbsp;<strong>Domains</strong>&nbsp;tab and click the&nbsp;<strong>sandbox URL</strong>&nbsp;below the&nbsp;<strong>Domain Name</strong>. It will open a new page where we can find&nbsp;<strong>Default SMTP Login</strong>&nbsp;and&nbsp;<strong>Default Password</strong>. We will need these two for creating the&nbsp;<strong>MAIL_URL</strong>&nbsp;environment variable.</p>\n\n\n\n<h3>Send Email</h3>\n\n\n\n<p>To create a valid <strong>MAIL_URL</strong> just insert your Mailgun credentials in place of <strong>YOUR_DEFAULT_SMTP_LOGIN</strong> and <strong>YOUR_DEFAULT_PASSWORD</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isServer) {\n\n   Meteor.startup( function() {\n      process.env.MAIL_URL = \n         \"smtp://YOUR_DEFAULT_SMTP_LOGIN:YOUR_DEFAULT_PASSWORD@smtp.mailgun.org:587\";\n\n      Email.send({\n         to: \"toemailadress@email.com\",\n         from: \"fromemailadress@email.com\",\n         subject: \"Meteor Email\",\n         text: \"The email content...\"\n      });\n   });\n}</code></pre>\n\n\n\n<p>When you run the app, the email will be sent to your address.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-email-received.jpg\" alt=\"Meteor Email Received\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>This package is used when you need to send an email from Meteor App. Step 1 &#8211; Add Package Open the command prompt window and run the following command − Step 2 &#8211; Mailgun Account We need to create an account here. This is the default email provider for Meteor apps. After you are logged in, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4599"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4599"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4599/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4599"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4599"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4599"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4598,"date":"2020-07-29T17:58:24","date_gmt":"2020-07-29T17:58:24","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=193"},"modified":"2020-07-29T17:58:24","modified_gmt":"2020-07-29T17:58:24","slug":"assets","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/assets/","title":{"rendered":"Assets"},"content":{"rendered":"\n<p>Static server assets are located in a&nbsp;<strong>private</strong>&nbsp;subfolder inside the app. In the following example, we will learn how to use data from a simple JSON file.</p>\n\n\n\n<h2>Step 1 &#8211; Create Files and Folders</h2>\n\n\n\n<p>Let&#8217;s create a <strong>private</strong> folder and <strong>my-json.json</strong> file inside that folder. We will do this using the following command in the <strong>command prompt</strong> window, however, you can also create it manually.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>mkdir private\n\nC:\\Users\\username\\Desktop\\meteorApp\\private>touch my-json.json</code></pre>\n\n\n\n<h2>Step 2 &#8211; Get Text</h2>\n\n\n\n<p>To be able to read data from our file, we will use <strong>Asssets.getText</strong> method. Note, this can only be done from the server side. Since we are using JSON, we need to parse it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isServer) {\n   var myFile = JSON.parse(Assets.getText('my-json.json'));\n   console.log(myFile.data.text)\n}</code></pre>\n\n\n\n<p>Following will be the output in the command prompt window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-assets-get-text.jpg\" alt=\"Meteor Assets Get Text\"/></figure>\n\n\n\n<h2>Step 3 &#8211; Create EJSON File</h2>\n\n\n\n<p>We will create this file inside the <strong>private</strong> folder. This file will contain binary data <strong>&#8220;myBinary&#8221;: {&#8220;$binary&#8221;: &#8220;c3VyZS4=&#8221;}</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp\\private>touch my-ejson.ejson\n</code></pre>\n\n\n\n<h2>Step 4 &#8211; Get Binary</h2>\n\n\n\n<p>To read EJSON files, we can use the <strong>Assets.getBinary</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isServer) {\n   var myFile = Assets.getBinary('my-ejson.ejson');\n   console.log(EJSON.stringify(myFile));\n}</code></pre>\n\n\n\n<p>The command prompt will log EJSON value.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-assets-get-binary.jpg\" alt=\"Meteor Assets Get Binary\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Static server assets are located in a&nbsp;private&nbsp;subfolder inside the app. In the following example, we will learn how to use data from a simple JSON file. Step 1 &#8211; Create Files and Folders Let&#8217;s create a private folder and my-json.json file inside that folder. We will do this using the following command in the command prompt window, however, you can also [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4598"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4598"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4598/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4598"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4598"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4598"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4597,"date":"2020-07-29T17:59:07","date_gmt":"2020-07-29T17:59:07","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=192"},"modified":"2020-07-29T17:59:07","modified_gmt":"2020-07-29T17:59:07","slug":"security-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/security-3/","title":{"rendered":"Security"},"content":{"rendered":"\n<p>In this chapter, we will learn how to secure our app and what should be taken into consideration while developing an app.</p>\n\n\n\n<h2>Autopublish and Autosecure</h2>\n\n\n\n<p><strong>Autopublish</strong> is a package that automatically publishes all data from the database to the client. This is a convenience that should be disabled when in production. It can be disabled from the command prompt.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor remove autopublish\n</code></pre>\n\n\n\n<p>You can publish some data to the client by using&nbsp;<strong>Meteor.publish()</strong>&nbsp;and&nbsp;<strong>Meteor.subscribe()</strong>methods that we will cover in the Publish and Subscribe chapter.</p>\n\n\n\n<p><strong>Insecure</strong> is a package that allows MongoDB commands to be written in developer’s console, so that every user of the app is able to access the database. The package can be removed by running the following command in the command prompt.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor remove insecure\n</code></pre>\n\n\n\n<p>Good practice is to remove both of the packages as soon as you start developing your app, so you don&#8217;t have to change and update your code later.</p>\n\n\n\n<h2>Use Server Side Methods</h2>\n\n\n\n<p>You should always create your methods on the server. You can do it by using the&nbsp;<strong>Meteor.methods()</strong>&nbsp;on the server and&nbsp;<strong>Meteor.call()</strong>&nbsp;on the client. We will learn more about this in the Methods chapter.</p>\n\n\n\n<h2>Additional Security</h2>\n\n\n\n<p>If you want to add additional layers of security to your app, you should consider using some other Meteor packages such as −</p>\n\n\n\n<ul><li>Browser Policy can be used to control the external resources that should be loaded to your app.</li><li>Check package can be used to check the user input types before they are processed.</li><li>Audit Arguments Check is a package that will ensure all parameters are correctly checked before processed. If you missed some parameters, this package will inform you.</li><li>Mylar packages can add some additional layers of security. You can check them out if you need that kind of protection.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to secure our app and what should be taken into consideration while developing an app. Autopublish and Autosecure Autopublish is a package that automatically publishes all data from the database to the client. This is a convenience that should be disabled when in production. It can be disabled from [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4597"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4597"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4597/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4597"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4597"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4597"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4614,"date":"2020-07-29T18:00:38","date_gmt":"2020-07-29T18:00:38","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=238"},"modified":"2020-07-29T18:00:38","modified_gmt":"2020-07-29T18:00:38","slug":"sorting","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/sorting/","title":{"rendered":"Sorting"},"content":{"rendered":"\n<p>We can sort the data once we get it from the database. In the following example, we will create <strong>Users</strong> collection. We will use a <strong>sort</strong> argument (<strong>{sort: {name: 1}}</strong>) for sorting the collection data by name. The number <strong>1</strong> is used to set the ascending order. If we want to use the descending order, we would use <strong>-1</strong> instead.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Users = new Mongo.Collection('users');\n\nUsers.insert({\n   name: 'James',\n   email: 'eee@example.com',\n   joined: new Date(2016, 2, 23)\n});\n\nUsers.insert({\n   name: 'John',\n   email: 'iii@example.com',\n   joined: new Date(2016, 2, 19)\n});\n\nUsers.insert({\n   name: 'Jennifer',\n   email: 'aaa@example.com',\n   joined: new Date(2016, 6, 24)\n});\n\nvar sortByName = Users.find({}, {sort: {name: 1}}).fetch();\n\nvar sortByEmail = Users.find({}, {sort: {email: 1}}).fetch();\n\nvar sortByJoined = Users.find({}, {sort: {joined: 1}}).fetch();\n\nconsole.log(sortByName);\nconsole.log(sortByEmail);\nconsole.log(sortByJoined);</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-sorting-name.jpg\" alt=\"Meteor Sorting Name\"/></figure>\n\n\n\n<p>We can sort the data by email the same way.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Users = new Mongo.Collection('users');\n\nUsers.insert({\n   name: 'James',\n   email: 'eee@example.com',\n   joined: new Date(2016, 2, 23)\n});\n\nUsers.insert({\n   name: 'John',\n   email: 'iii@example.com',\n   joined: new Date(2016, 2, 19)\n});\n\nUsers.insert({\n   name: 'Jennifer',\n   email: 'aaa@example.com',\n   joined: new Date(2016, 6, 24)\n});\n\nvar sortByEmail = Users.find({}, {sort: {email: 1}}).fetch();\n\nconsole.log(sortByEmail);</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-sorting-email.jpg\" alt=\"Meteor Sorting Email\"/></figure>\n\n\n\n<p>Finally, we can sort it by the joining date.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Users = new Mongo.Collection('users');\n\nUsers.insert({\n   name: 'James',\n   email: 'eee@example.com',\n   joined: new Date(2016, 2, 23)\n});\n\nUsers.insert({\n   name: 'John',\n   email: 'iii@example.com',\n   joined: new Date(2016, 2, 19)\n});\n\nUsers.insert({\n   name: 'Jennifer',\n   email: 'aaa@example.com',\n   joined: new Date(2016, 6, 24)\n});\n\nvar sortByJoined = Users.find({}, {sort: {joined: 1}}).fetch();\n\nconsole.log(sortByJoined);</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-sorting-joined.jpg\" alt=\"Meteor Sorting Joined\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>We can sort the data once we get it from the database. In the following example, we will create Users collection. We will use a sort argument ({sort: {name: 1}}) for sorting the collection data by name. The number 1 is used to set the ascending order. If we want to use the descending order, we would use -1 instead. We can sort [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4614"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4614"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4614/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4614"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4614"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4614"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2755,"date":"2020-07-29T18:02:04","date_gmt":"2020-07-29T18:02:04","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=237"},"modified":"2020-07-29T18:02:04","modified_gmt":"2020-07-29T18:02:04","slug":"accounts","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/accounts/","title":{"rendered":"Accounts"},"content":{"rendered":"\n<p>This package allows complete user authentication functionality. You can add it by running the following code in the command prompt window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add accounts-password\n</code></pre>\n\n\n\n<h2>Authentication Example</h2>\n\n\n\n<p>This example will show basic authentication. We will create&nbsp;<strong>register, login</strong>, and&nbsp;<strong>home</strong>templates. If there is a&nbsp;<strong>currentUser</strong>&nbsp;(if the user is successfully registered or logged in), the&nbsp;<strong>home</strong>&nbsp;template will be shown. If there is no&nbsp;<strong>currentUser</strong>, the&nbsp;<strong>register</strong>&nbsp;and&nbsp;<strong>login</strong>&nbsp;templates will be visible.</p>\n\n\n\n<h3>meteorApp.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n   &lt;title>meteorApp&lt;/title>\n&lt;/head>\n \n&lt;body>\n   {{#if currentUser}}\n      {{> home}}\n      {{else}}\n      {{> register}}\n      {{> login}}\n   {{/if}}\n&lt;/body>\n\n&lt;template name = \"register\">\n   &lt;h2>REGISTER:&lt;/h2>\n   &lt;form>\n      &lt;input type = \"email\" name = \"registerEmail\">&lt;br>\n      &lt;input type = \"password\" name = \"registerPassword\">&lt;br>\n      &lt;input type = \"submit\" value = \"Register\">&lt;br>\n   &lt;/form>\n&lt;/template>\n\n&lt;template name = \"login\">\n   &lt;h2>LOGIN:&lt;/h2>\n   &lt;form>\n      &lt;input type = \"email\" name = \"loginEmail\">&lt;br>\n      &lt;input type = \"password\" name=\"loginPassword\">&lt;br>\n      &lt;input type = \"submit\" value = \"Login\">&lt;br>\n   &lt;/form>\n&lt;/template>\n\n&lt;template name = \"home\">\n   &lt;p>You're logged in.&lt;/p>\n   &lt;button class = \"logout\">Logout&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<p>First, we need to create a&nbsp;<strong>register</strong>&nbsp;event. This function will read register inputs, create a new user, and store it to the database.</p>\n\n\n\n<p>The second event is&nbsp;<strong>login</strong>. This time the function will read inputs from the&nbsp;<strong>login</strong>&nbsp;template, log in the user if the email and password are valid or return an error if they aren&#8217;t.</p>\n\n\n\n<p>And finally the&nbsp;<strong>logout</strong>&nbsp;event will be used for logging out the user, once the button is clicked.</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Meteor.isClient) {\n\n   Template.register.events({\n      'submit form': function(event) {\n         event.preventDefault();\n\n         var registerData = {\n            email: event.target.registerEmail.value,\n            password: event.target.registerPassword.value\n         }\n\n         Accounts.createUser(registerData, function(error) {\n         \n            if (Meteor.user()) {\n               console.log(Meteor.userId());\n            } else {\n               console.log(\"ERROR: \" + error.reason);\n            }\n         });\n      }\n   });\n\n   Template.login.events({\n   \n      'submit form': function(event) {\n         event.preventDefault();\n         var myEmail = event.target.loginEmail.value;\n         var myPassword = event.target.loginPassword.value;\n\t\t\t\n         Meteor.loginWithPassword(myEmail, myPassword, function(error) {\n\n            if (Meteor.user()) {\n               console.log(Meteor.userId());\n            } else {\n               console.log(\"ERROR: \" + error.reason);\n            }\n         });\n      }\n   });\n\n   Template.home.events({\n\n      'click .logout': function(event) {\n         event.preventDefault();\n\t\t\t\n         Meteor.logout(function(error) {\n\n            if(error) {\n               console.log(\"ERROR: \" + error.reason);\n            }\n         });\n      }\n   });\n}</code></pre>\n\n\n\n<p>Once the app starts, we will get the following page.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-accounts-start.jpg\" alt=\"Meteor Accounts Start\"/></figure>\n\n\n\n<p>On entering the email and password in the&nbsp;<strong>register</strong>&nbsp;form, we can register and login the new user. We will see that the console logs the users&nbsp;<strong>id</strong>&nbsp;and the&nbsp;<strong>home</strong>&nbsp;template is rendered.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-accounts-register.jpg\" alt=\"Meteor Accounts Register\"/></figure>\n\n\n\n<p>The&nbsp;<strong>login</strong>&nbsp;event will check the database and log in the user, if the email and password are correct. If not, the console will log an error.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-accounts-login-error.jpg\" alt=\"Meteor Accounts Login Error\"/></figure>\n\n\n\n<p>If the user clicks the&nbsp;<strong>LOGOUT</strong>&nbsp;button, the app will log the user out and show the&nbsp;<strong>register</strong>and&nbsp;<strong>login</strong>&nbsp;templates.</p>\n","protected":false},"excerpt":{"rendered":"<p>This package allows complete user authentication functionality. You can add it by running the following code in the command prompt window. Authentication Example This example will show basic authentication. We will create&nbsp;register, login, and&nbsp;hometemplates. If there is a&nbsp;currentUser&nbsp;(if the user is successfully registered or logged in), the&nbsp;home&nbsp;template will be shown. If there is no&nbsp;currentUser, the&nbsp;register&nbsp;and&nbsp;login&nbsp;templates [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2755"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2755"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2755/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2755"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2755"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2755"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4620,"date":"2020-07-29T18:02:50","date_gmt":"2020-07-29T18:02:50","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=236"},"modified":"2020-07-29T18:02:50","modified_gmt":"2020-07-29T18:02:50","slug":"methods-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/methods-2/","title":{"rendered":"Methods"},"content":{"rendered":"\n<p>Meteor methods are functions that are written on the server side, but can be called from the client side.</p>\n\n\n\n<p>On the server side, we will create two simple methods. The first one will add 5 to our argument, while the second one will add&nbsp;<strong>10</strong>.</p>\n\n\n\n<h2>Using Methods</h2>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if(Meteor.isServer) {\n\n   Meteor.methods({\n\n      method1: function (arg) {\n         var result = arg + 5;\n         return result;\n      },\n\n      method2: function (arg) {\n         var result = arg + 10;\n         return result;\n      }\n   });\n}\n\nif(Meteor.isClient) {\n   var aaa = 'aaa'\n   Meteor.call('method1', aaa, function (error, result) {\n\t\n      if (error) {\n         console.log(error);\n         else {\n            console.log('Method 1 result is: ' + result);\n         }\n      }\n   );\n\n   Meteor.call('method2', 5, function (error, result) {\n\n      if (error) {\n         console.log(error);\n      } else {\n         console.log('Method 2 result is: ' + result);\n      }\n   });\n}</code></pre>\n\n\n\n<p>Once we start the app, we will see the calculated values in console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-methods-log.jpg\" alt=\"Meteor Methods Log\"/></figure>\n\n\n\n<h2>Handling Errors</h2>\n\n\n\n<p>For handling errors, you can use the <strong>Meteor.Error</strong> method. The following example shows how to handle error for users that aren&#8217;t logged in.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(Meteor.isServer) {\n\n   Meteor.methods({\n\n      method1: function (param) {\n\n         if (! this.userId) {\n            throw new Meteor.Error(\"logged-out\",\n               \"The user must be logged in to post a comment.\");\n         }\n         return result;\n      }\n   });\n}\n\nif(Meteor.isClient) {  Meteor.call('method1', 1, function (error, result) {\n\n   if (error &amp;&amp; error.error === \"logged-out\") {\n      console.log(\"errorMessage:\", \"Please log in to post a comment.\");\n   } else {\n      console.log('Method 1 result is: ' + result);\n   }});\n\n}</code></pre>\n\n\n\n<p>The console will show our customized error message.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-methods-error.jpg\" alt=\"Meteor Methods Error\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Meteor methods are functions that are written on the server side, but can be called from the client side. On the server side, we will create two simple methods. The first one will add 5 to our argument, while the second one will add&nbsp;10. Using Methods meteorApp.js Once we start the app, we will see [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4620"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4620"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4620/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4620"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4620"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4620"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2754,"date":"2020-07-29T18:04:39","date_gmt":"2020-07-29T18:04:39","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=235"},"modified":"2020-07-29T18:04:39","modified_gmt":"2020-07-29T18:04:39","slug":"package-js","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/package-js/","title":{"rendered":"Package.js"},"content":{"rendered":"\n<p>In this chapter, we will learn how to create our own meteor package.</p>\n\n\n\n<h2>Creating a Package</h2>\n\n\n\n<p>Let&#8217;s add a new folder on the desktop, where the package will be created. We will use the command prompt window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp> mkdir packages\n</code></pre>\n\n\n\n<p>Now, we can create the package in the folder we have created above. Run the following command from the command prompt. <strong>Username</strong> is the Meteor Developer username and <strong>package-name</strong> is the name of the package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp\\packages>meteor create --package username:package-name</code></pre>\n\n\n\n<h2>Adding a Package</h2>\n\n\n\n<p>To be able to add a local package to our app, we need to set the&nbsp;<strong>ENVIRONMENT VARIABLE</strong>&nbsp;that will tell Meteor to load the package from the local folder. Right-click the computer icon and choose&nbsp;<strong>properties/Advanced system settings/Environment Variables/NEW</strong>.</p>\n\n\n\n<p><strong>Variable Name</strong>&nbsp;should be&nbsp;<strong>PACKAGE_DIRS. Variable Value</strong>&nbsp;should be the path to the folder we created. In our case,&nbsp;<strong>C:\\Users\\username\\Desktop\\meteorApp\\packages</strong>.</p>\n\n\n\n<p>Don&#8217;t forget to restart the&nbsp;<strong>command prompt</strong>&nbsp;after adding a new Environment Variable.</p>\n\n\n\n<p>We can now add the package to our app by running the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add username:package-name\n</code></pre>\n\n\n\n<h2>Package Files</h2>\n\n\n\n<p>Following four files will be found in the package we created.</p>\n\n\n\n<ul><li>package-name-test.js</li><li>package-name.js</li><li>package.js</li><li>README.md</li></ul>\n\n\n\n<h2>Testing Package (package-name-test.js)</h2>\n\n\n\n<p>Meteor offers <strong>tinytest</strong> package for testing. Let&#8217;s install it first using the following command in the command prompt window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add tinytest\n</code></pre>\n\n\n\n<p>If we open&nbsp;<strong>package-name-test.js</strong>, we will see the default test example. We will use this example to test the app. Note: It is always better to write our own tests when developing meteor packages.</p>\n\n\n\n<p>To test the package, let us run this code in the command prompt.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop>meteor test-packages packages/package-name\n</code></pre>\n\n\n\n<p>We will get the following result.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-package-js-test.jpg\" alt=\"Meteor Package Test\"/></figure>\n\n\n\n<h2>package.js File</h2>\n\n\n\n<p>This is the file where we can write the code. Let&#8217;s create some simple functionality for our package. Our package will log some text in the console.</p>\n\n\n\n<h3>packages/package.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>myPackageFunction = function() {\n   console.log('This is simple package...');\n}</code></pre>\n\n\n\n<h2>package-name.js File</h2>\n\n\n\n<p>This is the file where we can set some package configuration. We will get back to it later, but for now we need to export&nbsp;<strong>myPackageFunction</strong>&nbsp;so we can use it in our app. We need to add this inside&nbsp;<strong>Package.onUse</strong>&nbsp;function. The file will look something like this.</p>\n\n\n\n<h3>packages/package-name.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Package.describe({\n   name: 'username:package-name',\n   version: '0.0.1',\n   \n   // Brief, one-line summary of the package.\n   summary: '',\n   \n   // URL to the Git repository containing the source code for this package.\n   git: '',\n   \n   // By default, Meteor will default to using README.md for documentation.\n   \n   // To avoid submitting documentation, set this field to null.\n   documentation: 'README.md'\n});\n\nPackage.onUse(function(api) {\n   api.versionsFrom('1.2.1');\n   api.use('ecmascript');\n   api.addFiles('mypackage.js');\n   api.export('myPackageFunction'); // We are exporting the function we created above...\n});\n\nPackage.onTest(function(api) {\n   api.use('ecmascript');\n   api.use('tinytest');\n   api.use('username:package-name');\n   api.addFiles('package-name-tests.js');\n});</code></pre>\n\n\n\n<h2>Using a Package</h2>\n\n\n\n<p>Now we can finally call the&nbsp;<strong>myPackageFunction()</strong>&nbsp;from our&nbsp;<strong>meteorApp.js</strong>&nbsp;file.</p>\n\n\n\n<h3>packages/package.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if(Meteor.isClient) {\n   myPackageFunction();\n}</code></pre>\n\n\n\n<p>The console will log the text from our package.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-package-js-log.jpg\" alt=\"Meteor Package Log\"/></figure>\n\n\n\n<p>To better understand how the&nbsp;<strong>package.js</strong>&nbsp;file can be configured, we will use the example from Meteor official documentation.</p>\n\n\n\n<h3>This is an example file&#8230;</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>/* Information about this package */\nPackage.describe({\n   \n   // Short two-sentence summary.\n   summary: \"What this does\",\n\n   // Version number.\n   version: \"1.0.0\",\n\n   // Optional.  Default is package directory name.\n   name: \"username:package-name\",\n\n   // Optional github URL to your source repository.\n   git: \"https://github.com/something/something.git\",\n});\n\n/* This defines your actual package */\nPackage.onUse(function (api) {\n\n   // If no version is specified for an 'api.use' dependency, use the\n   // one defined in Meteor 0.9.0.\n   api.versionsFrom('0.9.0');\n\n   // Use Underscore package, but only on the server.\n   // Version not specified, so it will be as of Meteor 0.9.0.\n   api.use('underscore', 'server');\n\n   // Use iron:router package, version 1.0.0 or newer.\n   api.use('iron:router@1.0.0');\n\n   // Give users of this package access to the Templating package.\n   api.imply('templating')\n\n   // Export the object 'Email' to packages or apps that use this package.\n   api.export('Email', 'server');\n\n   // Specify the source code for the package.\n   api.addFiles('email.js', 'server');\n});\n\n/* This defines the tests for the package */\nPackage.onTest(function (api) {\n\n   // Sets up a dependency on this package\n   api.use('username:package-name');\n\n   // Allows you to use the 'tinytest' framework\n   api.use('tinytest@1.0.0');\n\n   // Specify the source code for the package tests\n   api.addFiles('email_tests.js', 'server');\n});\n\n/* This lets you use npm packages in your package*/\nNpm.depends({\n   simplesmtp: \"0.3.10\",\n   \"stream-buffers\": \"0.2.5\"\n});</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to create our own meteor package. Creating a Package Let&#8217;s add a new folder on the desktop, where the package will be created. We will use the command prompt window. Now, we can create the package in the folder we have created above. Run the following command from [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2754"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2754"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2754/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2754"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2754"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2754"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4619,"date":"2020-07-29T18:05:51","date_gmt":"2020-07-29T18:05:51","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=234"},"modified":"2020-07-29T18:05:51","modified_gmt":"2020-07-29T18:05:51","slug":"publish-and-subscribe","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/publish-and-subscribe/","title":{"rendered":"Publish and Subscribe"},"content":{"rendered":"\n<p>As already discussed in the Collections chapter, all of our data is available on the client side. This is a security issue that can be handled with publish and subscribe methods.</p>\n\n\n\n<h2>Removing Autopublish</h2>\n\n\n\n<p>In this example, we will use <strong>PlayersCollection</strong> collection with the following data. We prepared this collection before to be able to concentrate on the chapter itself. If you are unsure how to create MongoDB collections in meteor app, check our collections chapter.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-publish-and-subscribe-database-data.jpg\" alt=\"Meteor Publish and Subscribe Database Data\"/></figure>\n\n\n\n<p>To secure our data, we need to remove <strong>autopublish</strong> package that was allowing us to use the data on the client side.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor remove autopublish\n</code></pre>\n\n\n\n<p>After this step, we will not be able to get the database data from the client side. We will only be able to see it from the server side in the command prompt window. Checkout the following code −</p>\n\n\n\n<h3>meteorApp.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var PlayersCollection = new Mongo.Collection('playersCollection');\nvar myLog = PlayersCollection.find().fetch();\nconsole.log(myLog);</code></pre>\n\n\n\n<p>The&nbsp;<strong>command prompt</strong>&nbsp;window will show the entire collection with four objects, while the&nbsp;<strong>developers console</strong>&nbsp;will show an empty array. Now our app is more secure.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-publish-and-subscribe-autopublish-removed.jpg\" alt=\"Meteor Publish and Subscribe Autopublish Removed\"/></figure>\n\n\n\n<h2>Using Publish and Subscribe</h2>\n\n\n\n<p>Let&#8217;s say we want to allow the clients to use our data. For this, we need to create&nbsp;<strong>Meteor.publish()</strong>&nbsp;method on the server. This method will send the data to the client.</p>\n\n\n\n<p>To be able to receive and use that data on the client side, we will create <strong>Meteor.subscribe()</strong>method. At the end of the example, we are searching the database. This code is running on both the client and the server side.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var PlayersCollection = new Mongo.Collection('playersCollection');\n\nif(Meteor.isServer) {\n\n   Meteor.publish('allowedData', function() {\n      return PlayersCollection.find();\n   })\n}\n\nif (Meteor.isClient) {\n   Meteor.subscribe('allowedData');\n};\n\nMeteor.setTimeout(function() {\n   var myLog = PlayersCollection.find().fetch();\n   console.log(myLog);\n}, 1000);</code></pre>\n\n\n\n<p>We can see that our data is logged in both the&nbsp;<strong>developers console</strong>&nbsp;and the&nbsp;<strong>command prompt</strong>&nbsp;window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-publish-and-subscribe-allowed-all.jpg\" alt=\"Meteor Publish and Subscribe Allowed All\"/></figure>\n\n\n\n<h2>Filtering Client Data</h2>\n\n\n\n<p>We can also publish part of the data. In this example, we are publishing data with <strong>name = &#8220;John&#8221;</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var PlayersCollection = new Mongo.Collection('playersCollection');\n\nif(Meteor.isServer) {\n\n   Meteor.publish('allowedData', function() {\n      return PlayersCollection.find({name: \"John\"});\n   })\n}\n\nif (Meteor.isClient) {\n   Meteor.subscribe('allowedData');\n};\n\nMeteor.setTimeout(function() {\n   myLog = PlayersCollection.find().fetch();\n   console.log(myLog);\n}, 1000);</code></pre>\n\n\n\n<p>Once we run this code, the&nbsp;<strong>command prompt</strong>&nbsp;will log all of the data, while the client side&nbsp;<strong>console</strong>&nbsp;will just log two objects with the name&nbsp;<strong>John</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-publish-and-subscribe-allowed-john.jpg\" alt=\"Meteor Publish and Subscribe Allowed All\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>As already discussed in the Collections chapter, all of our data is available on the client side. This is a security issue that can be handled with publish and subscribe methods. Removing Autopublish In this example, we will use PlayersCollection collection with the following data. We prepared this collection before to be able to concentrate on the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4619"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4619"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4619/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4619"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4619"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4619"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2753,"date":"2020-07-29T18:06:51","date_gmt":"2020-07-29T18:06:51","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=233"},"modified":"2020-07-29T18:06:51","modified_gmt":"2020-07-29T18:06:51","slug":"structure","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/structure/","title":{"rendered":"Structure"},"content":{"rendered":"\n<p>Meteor offers some special folders that can help the developers’ in structuring their apps.</p>\n\n\n\n<h2>client</h2>\n\n\n\n<p>If you create a&nbsp;<strong>client</strong>&nbsp;folder, everything inside this folder will be run on the client side. This is the folder where you can place your&nbsp;<strong>HTML, CSS</strong>, and client side&nbsp;<strong>JavaScript</strong>. You should place&nbsp;<strong>Meteor.subscribe</strong>&nbsp;functions,&nbsp;<strong>templates, helpers</strong>, and&nbsp;<strong>events</strong>&nbsp;inside this folder. Note, you don&#8217;t need to run the&nbsp;<strong>Meteor.isClient</strong>&nbsp;function in the files that are placed inside the&nbsp;<strong>client</strong>&nbsp;folder.</p>\n\n\n\n<h2>server</h2>\n\n\n\n<p>Files from this folder will only be run on the&nbsp;<strong>server side</strong>. This is the place where&nbsp;<strong>methods, Meteor.Publish()</strong>&nbsp;functions, and other sensitive data should be held. All of the authentication data should be held here. You don&#8217;t need to use&nbsp;<strong>Meteor.isServer()</strong>&nbsp;for the files inside this folder.</p>\n\n\n\n<h2>public</h2>\n\n\n\n<p>This is the place where you should place your images, favicons, and all the other data that is served to the client.</p>\n\n\n\n<h2>private</h2>\n\n\n\n<p>Files from this folder can be accessed only from the server. They will be hidden from the client. You can put&nbsp;<strong>JSON</strong>&nbsp;or&nbsp;<strong>EJSON</strong>&nbsp;files that only the server will use inside this folder.</p>\n\n\n\n<h2>client/compatibility</h2>\n\n\n\n<p>Some JavaScript libraries export variables as globals. Use this folder for files that need to be executed without being wrapped in a new variable scope.</p>\n\n\n\n<h2>The rest</h2>\n\n\n\n<p>The rest of the folders can be structured the way you want. The code that is placed outside of the folders mentioned above will be executed on the&nbsp;<strong>client</strong>&nbsp;and the&nbsp;<strong>server</strong>&nbsp;side. This is a good place where you can define your models.</p>\n\n\n\n<h2>Load Order</h2>\n\n\n\n<p>It is always good to know load order of the files. The following list is taken from the Meteor Official Documentation.</p>\n\n\n\n<ul><li>HTML template files are always loaded before everything else</li><li>Files beginning with&nbsp;<strong>main.</strong>&nbsp;are loaded last</li><li>Files inside any&nbsp;<strong>lib/</strong>&nbsp;directory are loaded next</li><li>Files with deeper paths are loaded next</li><li>Files are then loaded in an alphabetical order of the entire path</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Meteor offers some special folders that can help the developers’ in structuring their apps. client If you create a&nbsp;client&nbsp;folder, everything inside this folder will be run on the client side. This is the folder where you can place your&nbsp;HTML, CSS, and client side&nbsp;JavaScript. You should place&nbsp;Meteor.subscribe&nbsp;functions,&nbsp;templates, helpers, and&nbsp;events&nbsp;inside this folder. Note, you don&#8217;t need to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2753"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2753"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2753/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2753"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2753"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2753"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4618,"date":"2020-07-29T18:07:31","date_gmt":"2020-07-29T18:07:31","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=232"},"modified":"2020-07-29T18:07:31","modified_gmt":"2020-07-29T18:07:31","slug":"deployment","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/deployment/","title":{"rendered":"Deployment"},"content":{"rendered":"\n<p>One of the great things about Meteor is how easy is to deploy the app. Once your app is completed, there is an easy way to share it with the world. All you have to do is run the following code in the command prompt window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor deploy my-first-app-ever.meteor.com</code></pre>\n\n\n\n<p>You will be asked to enter Meteor developers account&nbsp;<strong>username</strong>&nbsp;and&nbsp;<strong>password</strong>.</p>\n\n\n\n<p>Now, you will be able to access the app from the browser on the following link having the name of your app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;my-first-app-ever.meteor.com/\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-deploy.jpg\" alt=\"Meteor Deploy\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>One of the great things about Meteor is how easy is to deploy the app. Once your app is completed, there is an easy way to share it with the world. All you have to do is run the following code in the command prompt window. You will be asked to enter Meteor developers account&nbsp;username&nbsp;and&nbsp;password. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4618"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4618"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4618/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4618"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4618"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4618"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2752,"date":"2020-07-29T18:08:25","date_gmt":"2020-07-29T18:08:25","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=231"},"modified":"2020-07-29T18:08:25","modified_gmt":"2020-07-29T18:08:25","slug":"running-on-mobile","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/running-on-mobile/","title":{"rendered":"Running on Mobile"},"content":{"rendered":"\n<p>In this chapter, we will learn how to run the app on an android device. Meteor just recently added this functionality for windows operating system, so we will need to update our meteor app to 1.3 beta version.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− By the time of writing this tutorial, the 1.3 version of Meteor is in Beta. We will update this once the production version is released.</p>\n\n\n\n<p>Since we want to use the newest Meteor version, we can update it by running the following code in the command prompt window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor update --release 1.3-beta.11</code></pre>\n\n\n\n<h2>Step 1 &#8211; Install Android SDK</h2>\n\n\n\n<p>Use the link in the following table to install Android SDK.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Software &amp; Description</th></tr><tr><td>1</td><td><strong>Java Development Kit &amp; Android SDK</strong>You will need Android SDK to be able to run Meteor apps on mobile environment. If you don&#8217;t have it installed, you can checkout our Android Environment Setup tutorial.</td></tr></tbody></table></figure>\n\n\n\n<h2>Step 2 &#8211; Add an Android Platform</h2>\n\n\n\n<p>Now, we need to add an Android platform to our project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor add-platform android\n</code></pre>\n\n\n\n<h2>Step 3 &#8211; Run the App on an Android Emulator</h2>\n\n\n\n<p>To run the app on an Android emulator, we will use the <strong>–verbose</strong> command at the end of the line to be able to identify the possible errors during the startup process.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor run android --verbose\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/meteor/images/meteor-mobile.jpg\" alt=\"Meteor Mobile\"/></figure>\n\n\n\n<h2>Run the App on an Android Device</h2>\n\n\n\n<p>Since Android emulators are slow, it is always a better option to run your app directly on your device. You can do it by connecting the device to your computer, enabling the developers’ mode and USB debugging.</p>\n\n\n\n<p>This process is different for specific devices. You need to find&nbsp;<strong>Build Number</strong>&nbsp;in&nbsp;<strong>settings/About</strong>&nbsp;and tap seven times. You will get a notification that you are the developer and the&nbsp;<strong>Developer Options</strong>&nbsp;will be unlocked.</p>\n\n\n\n<p>Search through your&nbsp;<strong>settings</strong>&nbsp;again and enable&nbsp;<strong>USB debugging</strong>.</p>\n\n\n\n<p>You can run Meteor app on your mobile device using the following command in the command prompt.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\meteorApp>meteor run android-device</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to run the app on an android device. Meteor just recently added this functionality for windows operating system, so we will need to update our meteor app to 1.3 beta version. Note&nbsp;− By the time of writing this tutorial, the 1.3 version of Meteor is in Beta. We [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2752"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2752"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2752/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2752"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2752"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2752"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4617,"date":"2020-07-29T18:09:11","date_gmt":"2020-07-29T18:09:11","guid":{"rendered":"http://nodejs.foobrdigital.com/?p=230"},"modified":"2020-07-29T18:09:11","modified_gmt":"2020-07-29T18:09:11","slug":"best-practices","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/best-practices/","title":{"rendered":"Best Practices"},"content":{"rendered":"\n<p>We already covered some of the best practices of Meteor development in the previous chapters. Following are some of the best practices to be kept in mind while using Meteor.</p>\n\n\n\n<h2>Directory Structure</h2>\n\n\n\n<p>There are no strict rules about the directory structure in Meteor apps. For more info on guidelines, check out Meteor &#8211; Structure chapter.</p>\n\n\n\n<h2>Use Methods</h2>\n\n\n\n<p>You should always use Meteor &#8211; Methodswhen working with sensitive data instead of calling <strong>insert, update</strong>, and <strong>remove</strong> directly from the client.</p>\n\n\n\n<h2>Data Management</h2>\n\n\n\n<p>Protect your data using Publish and Subscribe methods. If you want your data to be available to all clients, you can use <strong>null</strong> as the publication name instead. Publishing small chunks of data will also improve the performance of the app.</p>\n\n\n\n<h2>Validate Data</h2>\n\n\n\n<p>You should validate all data that will be stored inside collection. One of the best options is collection2 package. This package makes it easy to set the server and client side validation.</p>\n\n\n\n<h2>Minimize Session</h2>\n\n\n\n<p>The&nbsp;<strong>session</strong>&nbsp;variables are global variables and using globals is against the JavaScript best practices.</p>\n\n\n\n<h2>Router</h2>\n\n\n\n<p>There are two most popular options for Meteor routing. For smaller apps, there is Iron Router. It is automatically rerun once the data changes. For larger apps, there is Flow Router. This router gives you more freedom to optimize re-rendering of the templates at the cost of a little more boilerplate code.</p>\n\n\n\n<h2>Packages</h2>\n\n\n\n<p>Always check if the package is updated regularly before you choose to use it inside your app.</p>\n","protected":false},"excerpt":{"rendered":"<p>We already covered some of the best practices of Meteor development in the previous chapters. Following are some of the best practices to be kept in mind while using Meteor. Directory Structure There are no strict rules about the directory structure in Meteor apps. For more info on guidelines, check out Meteor &#8211; Structure chapter. Use Methods [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[74],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4617"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4617"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4617/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4617"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4617"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4617"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]