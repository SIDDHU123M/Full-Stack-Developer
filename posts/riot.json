[{"id":4192,"date":"2021-02-16T07:40:23","date_gmt":"2021-02-16T07:40:23","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4192"},"modified":"2021-02-16T07:40:23","modified_gmt":"2021-02-16T07:40:23","slug":"overview-9","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/overview-9/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p>RIOT.js is a very small size/lightweight Web Component based UI library to develop web-applications. It combines the benefits of React.JS and Polymer with very concise implementation and simple constructs to learn and use. It minified version is nearly of 10KB size.</p>\n\n\n\n<p>Following are the key features of RIOT.js</p>\n\n\n\n<h2>Expression Bindings</h2>\n\n\n\n<ul><li>Very small payload during DOM updates and reflows.</li><li>Changes propagates downwards from parent tags to children tags/controls.</li><li>Uses pre-compiled expressions and cache them for high performance.</li><li>Provides good constrol over lifecycle events.</li></ul>\n\n\n\n<h2>Follows Standards</h2>\n\n\n\n<ul><li>No proprietary event system</li><li>No dependency on any polyfill libraries.</li><li>No extra attributes added to existing HTML.</li><li>Integrates well with jQuery.</li></ul>\n\n\n\n<h2>Core values</h2>\n\n\n\n<p>RIOT.js is developed considering the following values.</p>\n\n\n\n<ul><li>Simple and minimalistic.</li><li>Easy to learn and implement.</li><li>Provide Reactive Views to build user interfaces.</li><li>Provide Event Library to build APIs with independent modules.</li><li>To take care of application behaviour with browser back button.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>RIOT.js is a very small size/lightweight Web Component based UI library to develop web-applications. It combines the benefits of React.JS and Polymer with very concise implementation and simple constructs to learn and use. It minified version is nearly of 10KB size. Following are the key features of RIOT.js Expression Bindings Very small payload during DOM [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4192"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4192"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4192/revisions"}],"predecessor-version":[{"id":4194,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4192/revisions/4194"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4192"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4192"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4192"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4195,"date":"2021-02-16T07:41:59","date_gmt":"2021-02-16T07:41:59","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4195"},"modified":"2021-02-16T07:41:59","modified_gmt":"2021-02-16T07:41:59","slug":"environment-setup-9","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/environment-setup-9/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>There are two ways to use RIOT js.</p>\n\n\n\n<ul><li><strong>Local Installation</strong>&nbsp;− You can download RIOT library on your local machine and include it in your HTML code.</li><li><strong>CDN Based Version</strong>&nbsp;− You can include RIOT library into your HTML code directly from Content Delivery Network (CDN).</li></ul>\n\n\n\n<h2>Local Installation</h2>\n\n\n\n<ul><li>Go to the&nbsp;<a rel=\"noreferrer noopener\" target=\"_blank\" href=\"https://riot.js.org/download/\">https://riot.js.org/download/</a>&nbsp;to download the latest version available.</li><li>Now put downloaded&nbsp;<strong>riot.min.js</strong>&nbsp;file in a directory of your website, e.g. /riotjs.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now you can include&nbsp;<em>riotjs</em>&nbsp;library in your HTML file as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"/riotjs/riot.min.js\">&lt;/script>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;messageTag>&lt;/messageTag>\r\n      &lt;script>\r\n         var tagHtml = \"&lt;h1>Hello World!&lt;/h1>\";\r\n         riot.tag(\"messageTag\", tagHtml);\r\n         riot.mount(\"messageTag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/hello-world.htm</p>\n\n\n\n<h2>CDN Based Version</h2>\n\n\n\n<p>You can include RIOT js library into your HTML code directly from Content Delivery Network (CDN). Google and Microsoft provides content deliver for the latest version.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− We are using CDNJS version of the library throughout this tutorial.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us rewrite above example using jQuery library from CDNJS.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;messageTag>&lt;/messageTag>\r\n      &lt;script>\r\n         var tagHtml = \"&lt;h1>Hello World!&lt;/h1>\";\r\n         riot.tag(\"messageTag\", tagHtml);\r\n         riot.mount(\"messageTag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/hello-world.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>There are two ways to use RIOT js. Local Installation&nbsp;− You can download RIOT library on your local machine and include it in your HTML code. CDN Based Version&nbsp;− You can include RIOT library into your HTML code directly from Content Delivery Network (CDN). Local Installation Go to the&nbsp;https://riot.js.org/download/&nbsp;to download the latest version available. Now [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4195"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4195"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4195/revisions"}],"predecessor-version":[{"id":4197,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4195/revisions/4197"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4195"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4195"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4195"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4198,"date":"2021-02-16T07:42:59","date_gmt":"2021-02-16T07:42:59","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4198"},"modified":"2021-02-16T07:42:59","modified_gmt":"2021-02-16T07:42:59","slug":"first-application-2","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/first-application-2/","title":{"rendered":"First Application"},"content":{"rendered":"\n<p>RIOT works by building custom, reusable html tags. These tags are similar to Web components and are reusable across pages and web apps.</p>\n\n\n\n<h2>Steps to use RIOT</h2>\n\n\n\n<ul><li>Import riot.js in the html page.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\r\n   &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n&lt;/head></code></pre>\n\n\n\n<ul><li>Start a script section and define tag content as html. Script can also be included which we&#8217;ll see later in the tutorial.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">var tagHtml = \"&lt;h1&gt;Hello World!&lt;/h1&gt;\";</pre>\n\n\n\n<ul><li>Define a tag using riot.tag() method. Pass it the name of the tag, messageTag and variable containing tag content.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">riot.tag(\"messageTag\", tagHtml);</pre>\n\n\n\n<ul><li>Mount the tag using riot.mount() method. Pass it the name of the tag, messageTag. Mounting process mounts the messageTag in all its occurrences in the html page. MessageTag tag should be defined using riot.js prior to mounting.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">riot.mount(\"messageTag\");\n&lt;/script&gt;</pre>\n\n\n\n<p>Following is the complete example.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;messageTag>&lt;/messageTag>\r\n      &lt;script>\r\n         var tagHtml = \"&lt;h1>Hello World!&lt;/h1>\";\r\n         riot.tag(\"messageTag\", tagHtml);\r\n         riot.mount(\"messageTag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/hello-world.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>RIOT works by building custom, reusable html tags. These tags are similar to Web components and are reusable across pages and web apps. Steps to use RIOT Import riot.js in the html page. Start a script section and define tag content as html. Script can also be included which we&#8217;ll see later in the tutorial. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4198"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4198"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4198/revisions"}],"predecessor-version":[{"id":4199,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4198/revisions/4199"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4198"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4198"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4198"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4200,"date":"2021-02-16T07:44:09","date_gmt":"2021-02-16T07:44:09","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4200"},"modified":"2021-02-16T07:44:09","modified_gmt":"2021-02-16T07:44:09","slug":"tags","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/tags/","title":{"rendered":"Tags"},"content":{"rendered":"\n<p>RIOT works by building custom, reusable html tags. These tags are similar to Web components and are reusable across pages and web apps. When you include the RIOT framework in your HTML page, the imported js creates a riot variable pointing to a riot object. This object contains the functions which is required to interact with the RIOT.js like creating and mounting tags.</p>\n\n\n\n<p>We can create and use tags in two ways.</p>\n\n\n\n<ul><li><strong>Inline HTML</strong>&nbsp;− By calling riot.tag() function. This function takes the tag name and tag definition to create a tag. Tag definition can contain HTML, JavaScript and CSS etc.</li><li><strong>Seperate Tag file</strong>&nbsp;− By storing the tag definition in tag file. This tag file contains tag definition to create a tag . This file needs to be imported inplace of riot.tag() call.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;script src = \"/riotjs/src/messageTag.tag\" type = \"riot/tag\"&gt;&lt;/script&lt;</pre>\n\n\n\n<p>Following is the example of inline tag.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;messageTag>&lt;/messageTag>\r\n      &lt;script>\r\n         var tagHtml = \"&lt;h1>Hello World!&lt;/h1>\";\r\n         riot.tag(\"messageTag\", tagHtml);\r\n         riot.mount(\"messageTag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/hello-world.htm</p>\n\n\n\n<p>Following is the example of external file tag.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<h3>messageTag.tag</h3>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;messageTag&gt;\n   &lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;/messageTag&gt;</pre>\n\n\n\n<h3>index.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;messageTag>&lt;/messageTag>\r\n      &lt;script src = \"messageTag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mount(\"messageTag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/hello-world-2.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>RIOT works by building custom, reusable html tags. These tags are similar to Web components and are reusable across pages and web apps. When you include the RIOT framework in your HTML page, the imported js creates a riot variable pointing to a riot object. This object contains the functions which is required to interact [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4200"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4200"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4200/revisions"}],"predecessor-version":[{"id":4202,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4200/revisions/4202"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4200"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4200"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4200"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4203,"date":"2021-02-16T07:45:55","date_gmt":"2021-02-16T07:45:55","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4203"},"modified":"2021-02-16T07:45:55","modified_gmt":"2021-02-16T07:45:55","slug":"expressions","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/expressions/","title":{"rendered":"Expressions"},"content":{"rendered":"\n<p>RIOT js uses {} to define expressions. RIOT js allows following types of expressions.</p>\n\n\n\n<ul><li><strong>Simple Expression</strong>&nbsp;− Define a variable and use within a tag.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;customTag>\r\n   &lt;h1>{title}&lt;/h1>\r\n   &lt;script>\r\n      this.title = \"Welcome to codemeals.COM\";\r\n   &lt;/script>\r\n&lt;/customTag></code></pre>\n\n\n\n<ul><li><strong>Evaluate Expression</strong>&nbsp;− Evaluate a variable when use in an operation.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;customTag>\r\n   &lt;h2>{val * 5}&lt;/h2>\r\n   &lt;script>\r\n      this.val = 4;\r\n   &lt;/script>\r\n&lt;/customTag></code></pre>\n\n\n\n<ul><li><strong>Get value from Options object</strong>&nbsp;− To get the value passed to tag via attributes.</li></ul>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following is the complete example of above concepts.</p>\n\n\n\n<h3>customTag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;customTag>\r\n   &lt;h1>{title}&lt;/h1>\r\n   &lt;h2>{val * 5}&lt;/h2>\r\n   &lt;h2>{opts.color}&lt;/h2>\r\n   &lt;script>\r\n      this.title = \"Welcome to codemeals.COM\";\r\n      this.val = 4;\r\n   &lt;/script>\r\n&lt;/customTag></code></pre>\n\n\n\n<h3>index.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;customTag color=\"red\">&lt;/customTag>\r\n      &lt;script src = \"customTag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mount(\"customTag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/riotjs_expressions.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>RIOT js uses {} to define expressions. RIOT js allows following types of expressions. Simple Expression&nbsp;− Define a variable and use within a tag. Evaluate Expression&nbsp;− Evaluate a variable when use in an operation. Get value from Options object&nbsp;− To get the value passed to tag via attributes. Example Following is the complete example of [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4203"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4203"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4203/revisions"}],"predecessor-version":[{"id":4204,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4203/revisions/4204"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4203"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4203"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4203"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4205,"date":"2021-02-16T07:46:58","date_gmt":"2021-02-16T07:46:58","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4205"},"modified":"2021-02-16T07:46:58","modified_gmt":"2021-02-16T07:46:58","slug":"styling-2","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/styling-2/","title":{"rendered":"Styling"},"content":{"rendered":"\n<p>RIOT js tags can have their own style and we can define styles within tags which will affect only the content within the tag. We can also set a style class using scripts as well within a tag. Following is the syntax how to achieve styling of RIOT tags.</p>\n\n\n\n<h3>custom1Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom1Tag>\r\n   &lt;h1>{title}&lt;/h1>\r\n   &lt;h2 class = \"subTitleClass\">{subTitle}&lt;/h2>\r\n   &lt;style>\r\n   h1 {\r\n      color: red;\r\n   }\r\n   .subHeader {\r\n      color: green;\r\n   }\r\n   &lt;/style>\r\n   &lt;script>\r\n      this.title = \"Welcome to codemeals.COM\";\r\n      this.subTitle = \"Learning RIOT JS\";\r\n      this.subTitleClass = \"subHeader\";\r\n   &lt;/script>\r\n&lt;/custom1Tag></code></pre>\n\n\n\n<h3>index.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;h1>Non RIOT Heading&lt;/h1>\r\n      &lt;custom1Tag>&lt;/custom1Tag>\r\n      &lt;script src = \"custom1Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mount(\"custom1Tag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/riotjs_styles.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>RIOT js tags can have their own style and we can define styles within tags which will affect only the content within the tag. We can also set a style class using scripts as well within a tag. Following is the syntax how to achieve styling of RIOT tags. custom1Tag.tag index.htm This will produce following [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4205"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4205"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4205/revisions"}],"predecessor-version":[{"id":4206,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4205/revisions/4206"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4205"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4205"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4205"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4207,"date":"2021-02-16T07:48:23","date_gmt":"2021-02-16T07:48:23","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4207"},"modified":"2021-02-16T07:48:23","modified_gmt":"2021-02-16T07:48:23","slug":"conditional","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/conditional/","title":{"rendered":"Conditional"},"content":{"rendered":"\n<p>Conditionals are constructs which are used to show/hide elements of RIOT tags. Following are the three conditionals RIOT supports −</p>\n\n\n\n<ul><li><strong>if</strong>&nbsp;− add/remove element based on value passed.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom2Tag>\r\n   &lt;h2 if = {showMessage}>Using if!&lt;/h2>\r\n   &lt;script>\r\n      this.showMessage = true;      \r\n   &lt;/script>\r\n&lt;/custom2Tag></code></pre>\n\n\n\n<ul><li><strong>show</strong>&nbsp;− shows an element using style = &#8220;<strong><em>display:&#8217; &#8216;</em></strong>&nbsp;&#8221; if passed true.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom2Tag>\r\n   &lt;h2 show = {showMessage}>Using show!&lt;/h2>\r\n   &lt;script>\r\n      this.showMessage = true;      \r\n   &lt;/script>\r\n&lt;/custom2Tag></code></pre>\n\n\n\n<ul><li><strong>hide</strong>&nbsp;− hides an element using style = &#8220;<strong><em>display:&#8217;none&#8217;&nbsp;</em></strong>&#8221; if passed true.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom2Tag>\r\n   &lt;h2 show = {showMessage}>Using show!&lt;/h2>\r\n   &lt;script>\r\n      this.showMessage = true;      \r\n   &lt;/script>\r\n&lt;/custom2Tag></code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following is the complete example.</p>\n\n\n\n<h3>custom2Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom2Tag>\r\n   &lt;h2 if = {showMessage}>Using if!&lt;/h2>\r\n   &lt;h2 if = {show}>Welcome!&lt;/h1>\r\n   &lt;h2 show = {showMessage}>Using show!&lt;/h2>\r\n   &lt;h2 hide = {show}>Using hide!&lt;/h2>\r\n   &lt;script>\r\n      this.showMessage = true;\r\n      this.show = false; \r\n   &lt;/script>\r\n&lt;/custom2Tag></code></pre>\n\n\n\n<h3>custom2.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\r\n&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;custom2Tag>&lt;/custom2Tag>\r\n      &lt;script src = \"custom2Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mount(\"custom2Tag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/custom2.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>Conditionals are constructs which are used to show/hide elements of RIOT tags. Following are the three conditionals RIOT supports − if&nbsp;− add/remove element based on value passed. show&nbsp;− shows an element using style = &#8220;display:&#8217; &#8216;&nbsp;&#8221; if passed true. hide&nbsp;− hides an element using style = &#8220;display:&#8217;none&#8217;&nbsp;&#8221; if passed true. Example Following is the complete [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4207"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4207"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4207/revisions"}],"predecessor-version":[{"id":4208,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4207/revisions/4208"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4207"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4207"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4207"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4209,"date":"2021-02-16T07:49:56","date_gmt":"2021-02-16T07:49:56","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4209"},"modified":"2021-02-16T07:49:56","modified_gmt":"2021-02-16T07:49:56","slug":"yield-2","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/yield-2/","title":{"rendered":"Yield"},"content":{"rendered":"\n<p>Yield is a mechanism to put external html content into a RIOT tag. There are multiple ways to do an yield.</p>\n\n\n\n<ul><li><strong>Simple Yield</strong>&nbsp;− If we want to replace a single placeholder in tag. Then use this mechanism.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;custom3Tag&gt;\n   Hello &lt;yield/&gt;\n&lt;/custom3Tag&gt;</pre>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;custom3Tag&gt;&lt;b&gt;User&lt;/b&gt;&lt;/custom3Tag&gt;</pre>\n\n\n\n<ul><li><strong>Multiple Yield</strong>&nbsp;− If we want to replace multiple placeholders in tag. Then use this mechanism.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom4Tag>\r\n   &lt;br/>&lt;br/>\r\n   Hello\r\n   &lt;yield from = \"first\"/>\r\n   &lt;br/>&lt;br/>\r\n   Hello \r\n   &lt;yield from = \"second\"/>\r\n&lt;/custom4Tag></code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom4Tag>\r\n   &lt;yield to = \"first\">User 1&lt;/yield>\r\n   &lt;yield to = \"second\">User 2&lt;/yield>\r\n&lt;/custom4Tag> </code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following is the complete example.</p>\n\n\n\n<h3>custom3Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom3Tag>\r\n   Hello &lt;yield/>\r\n&lt;/custom3Tag></code></pre>\n\n\n\n<h3>custom4Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom4Tag>\r\n   &lt;br/>&lt;br/>\r\n   Hello\r\n   &lt;yield from = \"first\"/>\r\n   &lt;br/>&lt;br/>\r\n   Hello \r\n   &lt;yield from = \"second\"/>\r\n&lt;/custom4Tag></code></pre>\n\n\n\n<h3>custom3.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;custom3Tag>&lt;b>User&lt;/b>&lt;/custom3Tag>\r\n      &lt;custom4Tag>\r\n         &lt;yield to = \"first\">User 1&lt;/yield>\r\n         &lt;yield to = \"second\">User 2&lt;/yield>\r\n      &lt;/custom4Tag>   \r\n      &lt;script src = \"custom3Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script src = \"custom4Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mount(\"custom3Tag\");\r\n         riot.mount(\"custom4Tag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/custom3.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>Yield is a mechanism to put external html content into a RIOT tag. There are multiple ways to do an yield. Simple Yield&nbsp;− If we want to replace a single placeholder in tag. Then use this mechanism. &lt;custom3Tag&gt; Hello &lt;yield/&gt; &lt;/custom3Tag&gt; &lt;custom3Tag&gt;&lt;b&gt;User&lt;/b&gt;&lt;/custom3Tag&gt; Multiple Yield&nbsp;− If we want to replace multiple placeholders in tag. Then use [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4209"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4209"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4209/revisions"}],"predecessor-version":[{"id":4210,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4209/revisions/4210"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4209"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4209"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4209"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4211,"date":"2021-02-16T07:50:48","date_gmt":"2021-02-16T07:50:48","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4211"},"modified":"2021-02-16T07:50:48","modified_gmt":"2021-02-16T07:50:48","slug":"event-handling-2","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/event-handling-2/","title":{"rendered":"Event Handling"},"content":{"rendered":"\n<p>We can attach event to HTML elements in the similar way how we access HTML elements using refs object. As a first step we add a ref attribute to a DOM element and access it using this.ref in the script block of the tag.</p>\n\n\n\n<ul><li><strong>Attach ref</strong>&nbsp;− Add ref attribute to a DOM element.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;button ref = \"clickButton\"&gt;Click Me!&lt;/button&gt;</pre>\n\n\n\n<ul><li><strong>Use the refs object</strong>&nbsp;− Now use the refs object in mount event. This event is fired when RIOT mounts the custom tag and it populates the refs object.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">this.on(\"mount\", function() {\n   console.log(\"Mounting\");\n   console.log(this.refs.username.value);\n})</pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following is the complete example.</p>\n\n\n\n<h3>custom5Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom5Tag>\r\n   &lt;form>\r\n      &lt;input ref = \"username\" type = \"text\" value = \"Mahesh\"/>\r\n      &lt;input type = \"submit\" value = \"Click Me!\" />\r\n   &lt;/form>\r\n   &lt;script>\r\n      this.on(\"mount\", function() {\r\n         console.log(\"Mounting\");\r\n         console.log(this.refs.username.value); \r\n      })\r\n   &lt;/script>\r\n&lt;/custom5Tag></code></pre>\n\n\n\n<h3>custom5.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;custom5Tag>&lt;/custom5Tag>\r\n      &lt;script src = \"custom5Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mount(\"custom5Tag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/custom5.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>We can attach event to HTML elements in the similar way how we access HTML elements using refs object. As a first step we add a ref attribute to a DOM element and access it using this.ref in the script block of the tag. Attach ref&nbsp;− Add ref attribute to a DOM element. &lt;button ref [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4211"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4211"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4211/revisions"}],"predecessor-version":[{"id":4212,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4211/revisions/4212"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4211"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4211"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4211"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4213,"date":"2021-02-16T07:51:38","date_gmt":"2021-02-16T07:51:38","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4213"},"modified":"2021-02-16T07:51:38","modified_gmt":"2021-02-16T07:51:38","slug":"accessing-dom","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/accessing-dom/","title":{"rendered":"Accessing DOM"},"content":{"rendered":"\n<p>We can access HTML elements using refs object. As a first step we add a ref attribute to a DOM element and access it using this.ref in the script block of the tag.</p>\n\n\n\n<ul><li><strong>Attach ref</strong>&nbsp;− Add ref attribute to a DOM element.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;button ref = \"clickButton\"&gt;Click Me!&lt;/button&gt;</pre>\n\n\n\n<ul><li><strong>Use the refs object</strong>&nbsp;− Now use the refs object in mount event. This event is fired when RIOT mounts the custom tag and it populates the refs object.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">this.on(\"mount\", function() {\n   this.refs.clickButton.onclick = function(e) {\n      console.log(\"clickButton clicked\");\n      return false;\n   };\n})</pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following is the complete example.</p>\n\n\n\n<h3>custom6Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom6Tag>\r\n   &lt;form ref = \"customForm\">\r\n      &lt;input ref = \"username\" type = \"text\" value = \"Mahesh\"/>\r\n      &lt;button ref = \"clickButton\">Click Me!&lt;/button>\r\n      &lt;input type = \"submit\" value = \"Submit\" />\r\n   &lt;/form>\r\n   &lt;script>\r\n      this.on(\"mount\", function() {\r\n         this.refs.clickButton.onclick = function(e) {\r\n            console.log(\"clickButton clicked\");\r\n            return false;\r\n         };\r\n         this.refs.customForm.onsubmit = function(e) {\r\n            console.log(\"Form submitted\");\r\n            return false;\r\n         };\r\n      }) \r\n   &lt;/script>\r\n&lt;/custom6Tag></code></pre>\n\n\n\n<h3>custom6.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;custom6Tag>&lt;/custom6Tag>\r\n      &lt;script src = \"custom6Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mount(\"custom6Tag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/custom6.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>We can access HTML elements using refs object. As a first step we add a ref attribute to a DOM element and access it using this.ref in the script block of the tag. Attach ref&nbsp;− Add ref attribute to a DOM element. &lt;button ref = &#8220;clickButton&#8221;&gt;Click Me!&lt;/button&gt; Use the refs object&nbsp;− Now use the refs [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4213"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4213"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4213/revisions"}],"predecessor-version":[{"id":4214,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4213/revisions/4214"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4213"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4213"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4213"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4215,"date":"2021-02-16T07:52:34","date_gmt":"2021-02-16T07:52:34","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4215"},"modified":"2021-02-16T07:52:34","modified_gmt":"2021-02-16T07:52:34","slug":"loops","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/loops/","title":{"rendered":"Loops"},"content":{"rendered":"\n<p>We can iterate through RIOT array of primitives or of Objects and create/update the html elements on the go. Using &#8220;each&#8221; construct we can achieve it.</p>\n\n\n\n<ul><li><strong>Create array</strong>&nbsp;− Create an array of object.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">this.cities = [\n   { city : \"Shanghai\" , country:\"China\" , done: true },\n   { city : \"Seoul\"    , country:\"South Korea\" },\n   { city : \"Moscow\"   , country:\"Russia\"      }\n];</pre>\n\n\n\n<ul><li><strong>Add each attribute</strong>&nbsp;− Now use the &#8220;each&#8221; attribute.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;ul&gt;\n   &lt;li each = { cities } &gt;&lt;/li&gt;\n&lt;/ul&gt; </pre>\n\n\n\n<ul><li><strong>Iterate array of objects</strong>&nbsp;− Iterate the array using object properties.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;input type = \"checkbox\" checked = { done }&gt; { city } - { country }</pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following is the complete example.</p>\n\n\n\n<h3>custom7Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom7Tag>\r\n   &lt;style>\r\n      ul {\r\n         list-style-type: none;\r\n      }\r\n   &lt;/style>\r\n   &lt;ul>\r\n      &lt;li each = { cities } >\r\n         &lt;input type = \"checkbox\" checked = { done }> { city } - { country }\r\n      &lt;/li>\r\n   &lt;/ul>\r\n   &lt;script>\r\n      this.cities = &#91;\r\n         { city : \"Shanghai\" , country:\"China\" , done: true },\r\n         { city : \"Seoul\"    , country:\"South Korea\" },\r\n         { city : \"Moscow\"   , country:\"Russia\"      }\r\n      ]; \r\n   &lt;/script>\r\n&lt;/custom7Tag></code></pre>\n\n\n\n<h3>custom7.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;custom7Tag>&lt;/custom6Tag>\r\n      &lt;script src = \"custom7Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mount(\"custom7Tag\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/custom7.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>We can iterate through RIOT array of primitives or of Objects and create/update the html elements on the go. Using &#8220;each&#8221; construct we can achieve it. Create array&nbsp;− Create an array of object. this.cities = [ { city : &#8220;Shanghai&#8221; , country:&#8221;China&#8221; , done: true }, { city : &#8220;Seoul&#8221; , country:&#8221;South Korea&#8221; }, { [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4215"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4215"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4215/revisions"}],"predecessor-version":[{"id":4216,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4215/revisions/4216"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4215"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4215"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4215"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4218,"date":"2021-02-16T07:57:15","date_gmt":"2021-02-16T07:57:15","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4218"},"modified":"2021-02-16T07:57:15","modified_gmt":"2021-02-16T07:57:15","slug":"mixin","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/mixin/","title":{"rendered":"Mixin"},"content":{"rendered":"\n<p>Through Mixin, we can share common functionality among tags. Mixin can be a function, class or object. Consider a case of Authentication Service which each tag should be using.</p>\n\n\n\n<ul><li><strong>Define Mixin</strong>&nbsp;− Define mixin using riot.mixin() method before calling mount().</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>riot.mixin('authService', {\r\n   init: function() {\r\n      console.log('AuthService Created!')\r\n   },\r\n\r\n   login: function(user, password) {\r\n      if(user == \"admin\" &amp;&amp; password == \"admin\"){\r\n         return 'User is authentic!'\r\n      }else{\r\n         return 'Authentication failed!'\r\n      }   \r\n   }\r\n});</code></pre>\n\n\n\n<ul><li><strong>Initialize mixin</strong>&nbsp;− Initialize mixin in each tag.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">this.mixin('authService') </pre>\n\n\n\n<ul><li><strong>Use mixin</strong>&nbsp;− After initializing, mixin can be used within tag.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">this.message = this.login(\"admin\",\"admin\"); </pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following is the complete example.</p>\n\n\n\n<h3>custom8Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom8Tag>\r\n   &lt;h1>{ message }&lt;/h1>\r\n   &lt;script>\r\n      this.mixin('authService')\r\n      this.message = this.login(\"admin\",\"admin\")\r\n   &lt;/script>\r\n&lt;/custom8Tag></code></pre>\n\n\n\n<h3>custom9Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom9Tag>\r\n   &lt;h1>{ message }&lt;/h1>\r\n   &lt;script>\r\n      this.mixin('authService')\r\n      this.message = this.login(\"admin1\",\"admin\")\r\n   &lt;/script>\r\n&lt;/custom9Tag></code></pre>\n\n\n\n<h3>custom8.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;custom8Tag>&lt;/custom8Tag>\r\n      &lt;custom9Tag>&lt;/custom9Tag>\r\n      &lt;script src = \"custom8Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script src = \"custom9Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         riot.mixin('authService', {\r\n            init: function() {\r\n               console.log('AuthService Created!')\r\n            },\r\n            login: function(user, password) {\r\n               if(user == \"admin\" &amp;&amp; password == \"admin\"){\r\n                  return 'User is authentic!'\r\n               }else{\r\n                  return 'Authentication failed!'\r\n               }   \r\n            }\r\n         });\r\n         riot.mount(\"*\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/custom8.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>Through Mixin, we can share common functionality among tags. Mixin can be a function, class or object. Consider a case of Authentication Service which each tag should be using. Define Mixin&nbsp;− Define mixin using riot.mixin() method before calling mount(). Initialize mixin&nbsp;− Initialize mixin in each tag. this.mixin(&#8216;authService&#8217;) Use mixin&nbsp;− After initializing, mixin can be used [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4218"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4218"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4218/revisions"}],"predecessor-version":[{"id":4219,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4218/revisions/4219"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4218"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4218"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4218"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4220,"date":"2021-02-16T07:58:22","date_gmt":"2021-02-16T07:58:22","guid":{"rendered":"http://javascript.foobrdigital.com/?p=4220"},"modified":"2021-02-16T07:58:22","modified_gmt":"2021-02-16T07:58:22","slug":"observables-3","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/observables-3/","title":{"rendered":"Observables"},"content":{"rendered":"\n<p>Observables mechanism allows RIOT to send events from one tag to another. Following APIs are important to understand RIOT observables.</p>\n\n\n\n<ul><li><strong>riot.observable(element)</strong>&nbsp;− Adds Observer support for the given object element or if the argument is empty a new observable instance is created and returned. After this the object is able to trigger and listen to events.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">var EventBus = function(){\n   riot.observable(this);\n}</pre>\n\n\n\n<ul><li><strong>element.trigger(events)</strong>&nbsp;− Execute all callback functions that listen to the given event.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">sendMessage() {\n   riot.eventBus.trigger('message', 'Custom 10 Button Clicked!');    \n}</pre>\n\n\n\n<ul><li><strong>element.on(events, callback)</strong>&nbsp;− Listen to the given event and execute the callback each time an event is triggered.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">riot.eventBus.on('message', function(input) {      \n   console.log(input);\n});</pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following is the complete example.</p>\n\n\n\n<h3>custom10Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom10Tag>\r\n   &lt;button onclick = {sendMessage}>Custom 10&lt;/button>\r\n   &lt;script>\r\n      sendMessage() {\r\n         riot.eventBus.trigger('message', 'Custom 10 Button Clicked!');    \r\n      }\r\n   &lt;/script>    \r\n&lt;/custom10Tag></code></pre>\n\n\n\n<h3>custom11Tag.tag</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;custom11Tag>\r\n   &lt;script>\r\n      riot.eventBus.on('message', function(input) {      \r\n         console.log(input);\r\n      });\r\n   &lt;/script>    \r\n&lt;/custom11Tag></code></pre>\n\n\n\n<h3>custom9.htm</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n   &lt;head>\r\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/riot/3.13.2/riot+compiler.min.js\">&lt;/script>\r\n   &lt;/head>\r\n   &lt;body>\r\n      &lt;custom10Tag>&lt;/custom10Tag>\r\n      &lt;custom11Tag>&lt;/custom11Tag>\r\n      &lt;script src = \"custom10Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script src = \"custom11Tag.tag\" type = \"riot/tag\">&lt;/script>\r\n      &lt;script>\r\n         var EventBus = function(){\r\n            riot.observable(this);\r\n         }\r\n         riot.eventBus = new EventBus();\r\n         riot.mount(\"*\");\r\n      &lt;/script>\r\n   &lt;/body>\r\n&lt;/html></code></pre>\n\n\n\n<p>This will produce following result −https://www.tutorialspoint.com/riotjs/src/custom9.htm</p>\n","protected":false},"excerpt":{"rendered":"<p>Observables mechanism allows RIOT to send events from one tag to another. Following APIs are important to understand RIOT observables. riot.observable(element)&nbsp;− Adds Observer support for the given object element or if the argument is empty a new observable instance is created and returned. After this the object is able to trigger and listen to events. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[153],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4220"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=4220"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4220/revisions"}],"predecessor-version":[{"id":4221,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/4220/revisions/4221"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=4220"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=4220"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=4220"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]