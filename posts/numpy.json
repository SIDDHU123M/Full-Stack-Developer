[{"id":314,"date":"2020-07-04T05:20:13","date_gmt":"2020-07-04T05:20:13","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=314"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"introduction-4-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-4-2/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>NumPy is a Python package. It stands for &#8216;Numerical Python&#8217;. It is a library consisting of multidimensional array objects and a collection of routines for processing of array.</p>\n\n\n\n<p><strong>Numeric</strong>, the ancestor of NumPy, was developed by Jim Hugunin. Another package Numarray was also developed, having some additional functionalities. In 2005, Travis Oliphant created NumPy package by incorporating the features of Numarray into Numeric package. There are many contributors to this open source project.</p>\n\n\n\n<h2>Operations using NumPy</h2>\n\n\n\n<p>Using NumPy, a developer can perform the following operations −</p>\n\n\n\n<ul><li>Mathematical and logical operations on arrays.</li><li>Fourier transforms and routines for shape manipulation.</li><li>Operations related to linear algebra. NumPy has in-built functions for linear algebra and random number generation.</li></ul>\n\n\n\n<h2>NumPy – A Replacement for MatLab</h2>\n\n\n\n<p>NumPy is often used along with packages like&nbsp;<strong>SciPy</strong>&nbsp;(Scientific Python) and&nbsp;<strong>Mat−plotlib</strong>&nbsp;(plotting library). This combination is widely used as a replacement for MatLab, a popular platform for technical computing. However, Python alternative to MatLab is now seen as a more modern and complete programming language.</p>\n\n\n\n<p>It is open source, which is an added advantage of NumPy.</p>\n","protected":false},"excerpt":{"rendered":"<p>NumPy is a Python package. It stands for &#8216;Numerical Python&#8217;. It is a library consisting of multidimensional array objects and a collection of routines for processing of array. Numeric, the ancestor of NumPy, was developed by Jim Hugunin. Another package Numarray was also developed, having some additional functionalities. In 2005, Travis Oliphant created NumPy package [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/314"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=314"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/314/revisions"}],"predecessor-version":[{"id":3034,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/314/revisions/3034"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=314"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=314"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=314"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":316,"date":"2020-07-04T05:21:38","date_gmt":"2020-07-04T05:21:38","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=316"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"environment-2-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/environment-2-2/","title":{"rendered":"Environment"},"content":{"rendered":"\n<p>Standard Python distribution doesn&#8217;t come bundled with NumPy module. A lightweight alternative is to install NumPy using popular Python package installer, <strong>pip</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install numpy\n</code></pre>\n\n\n\n<p>The best way to enable NumPy is to use an installable binary package specific to your operating system. These binaries contain full SciPy stack (inclusive of NumPy, SciPy, matplotlib, IPython, SymPy and nose packages along with core Python).</p>\n\n\n\n<h2>Windows</h2>\n\n\n\n<p>Anaconda (from https://www.continuum.io) is a free Python distribution for SciPy stack. It is also available for Linux and Mac.</p>\n\n\n\n<p>Canopy (https://www.enthought.com/products/canopy/) is available as free as well as commercial distribution with full SciPy stack for Windows, Linux and Mac.</p>\n\n\n\n<p>Python (x,y): It is a free Python distribution with SciPy stack and Spyder IDE for Windows OS. (Downloadable from https://www.python-xy.github.io/)</p>\n\n\n\n<h2>Linux</h2>\n\n\n\n<p>Package managers of respective Linux distributions are used to install one or more packages in SciPy stack.</p>\n\n\n\n<h2>For Ubuntu</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install python-numpy \npython-scipy python-matplotlibipythonipythonnotebook python-pandas \npython-sympy python-nose</code></pre>\n\n\n\n<h2>For Fedora</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo yum install numpyscipy python-matplotlibipython \npython-pandas sympy python-nose atlas-devel</code></pre>\n\n\n\n<h2>Building from Source</h2>\n\n\n\n<p>Core Python (2.6.x, 2.7.x and 3.2.x onwards) must be installed with distutils and zlib module should be enabled.</p>\n\n\n\n<p>GNU gcc (4.2 and above) C compiler must be available.</p>\n\n\n\n<p>To install NumPy, run the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Python setup.py install\n</code></pre>\n\n\n\n<p>To test whether NumPy module is properly installed, try to import it from Python prompt.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy\n</code></pre>\n\n\n\n<p>If it is not installed, the following error message will be displayed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Traceback (most recent call last): \n   File \"&lt;pyshell#0>\", line 1, in &lt;module> \n      import numpy \nImportError: No module named 'numpy'\n﻿</code></pre>\n\n\n\n<p>Alternatively, NumPy package is imported using the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Standard Python distribution doesn&#8217;t come bundled with NumPy module. A lightweight alternative is to install NumPy using popular Python package installer, pip. The best way to enable NumPy is to use an installable binary package specific to your operating system. These binaries contain full SciPy stack (inclusive of NumPy, SciPy, matplotlib, IPython, SymPy and nose packages [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/316"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=316"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/316/revisions"}],"predecessor-version":[{"id":3030,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/316/revisions/3030"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=316"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=316"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=316"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":318,"date":"2020-07-04T05:36:04","date_gmt":"2020-07-04T05:36:04","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=318"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"ndarray-object","status":"publish","type":"post","link":"https://python3.foobrdigital.com/ndarray-object/","title":{"rendered":"Ndarray Object"},"content":{"rendered":"\n<p>The most important object defined in NumPy is an N-dimensional array type called&nbsp;<strong>ndarray</strong>. It describes the collection of items of the same type. Items in the collection can be accessed using a zero-based index.</p>\n\n\n\n<p>Every item in an ndarray takes the same size of block in the memory. Each element in ndarray is an object of data-type object (called&nbsp;<strong>dtype</strong>).</p>\n\n\n\n<p>Any item extracted from ndarray object (by slicing) is represented by a Python object of one of array scalar types. The following diagram shows a relationship between ndarray, data type object (dtype) and array scalar type −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/numpy/images/ndarray.jpg\" alt=\"Ndarray\"/></figure>\n\n\n\n<p>An instance of ndarray class can be constructed by different array creation routines described later in the tutorial. The basic ndarray is created using an array function in NumPy as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.array \n</code></pre>\n\n\n\n<p>It creates an ndarray from any object exposing array interface, or from any method that returns an array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)\n</code></pre>\n\n\n\n<p>The above constructor takes the following parameters −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>object</strong>Any object exposing the array interface method returns an array, or any (nested) sequence.</td></tr><tr><td>2</td><td><strong>dtype</strong>Desired data type of array, optional</td></tr><tr><td>3</td><td><strong>copy</strong>Optional. By default (true), the object is copied</td></tr><tr><td>4</td><td><strong>order</strong>C (row major) or F (column major) or A (any) (default)</td></tr><tr><td>5</td><td><strong>subok</strong>By default, returned array forced to be a base class array. If true, sub-classes passed through</td></tr><tr><td>6</td><td><strong>ndmin</strong>Specifies minimum dimensions of resultant array</td></tr></tbody></table></figure>\n\n\n\n<p>Take a look at the following examples to understand better.</p>\n\n\n\n<h2>Example 1</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;1,2,3]) \nprint a</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1, 2, 3]\n</code></pre>\n\n\n\n<h2>Example 2</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># more than one dimensions \nimport numpy as np \na = np.array(&#91;&#91;1, 2], &#91;3, 4]]) \nprint a</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1, 2] \n &#91;3, 4]]\n﻿</code></pre>\n\n\n\n<h2>Example 3</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># minimum dimensions \nimport numpy as np \na = np.array(&#91;1, 2, 3,4,5], ndmin = 2) \nprint a</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1, 2, 3, 4, 5]]\n</code></pre>\n\n\n\n<h2>Example 4</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># dtype parameter \nimport numpy as np \na = np.array(&#91;1, 2, 3], dtype = complex) \nprint a</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 1.+0.j,  2.+0.j,  3.+0.j]\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>ndarray</strong>&nbsp;object consists of contiguous one-dimensional segment of computer memory, combined with an indexing scheme that maps each item to a location in the memory block. The memory block holds the elements in a row-major order (C style) or a column-major order (FORTRAN or MatLab style).</p>\n","protected":false},"excerpt":{"rendered":"<p>The most important object defined in NumPy is an N-dimensional array type called&nbsp;ndarray. It describes the collection of items of the same type. Items in the collection can be accessed using a zero-based index. Every item in an ndarray takes the same size of block in the memory. Each element in ndarray is an object [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/318"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=318"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/318/revisions"}],"predecessor-version":[{"id":3040,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/318/revisions/3040"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=318"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=318"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=318"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":320,"date":"2020-07-04T05:39:19","date_gmt":"2020-07-04T05:39:19","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=320"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"data-types-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/data-types-2/","title":{"rendered":"Data Types"},"content":{"rendered":"\n<p>NumPy supports a much greater variety of numerical types than Python does. The following table shows different scalar data types defined in NumPy.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Data Types &amp; Description</th></tr><tr><td>1</td><td><strong>bool_</strong>Boolean (True or False) stored as a byte</td></tr><tr><td>2</td><td><strong>int_</strong>Default integer type (same as C long; normally either int64 or int32)</td></tr><tr><td>3</td><td><strong>intc</strong>Identical to C int (normally int32 or int64)</td></tr><tr><td>4</td><td><strong>intp</strong>Integer used for indexing (same as C ssize_t; normally either int32 or int64)</td></tr><tr><td>5</td><td><strong>int8</strong>Byte (-128 to 127)</td></tr><tr><td>6</td><td><strong>int16</strong>Integer (-32768 to 32767)</td></tr><tr><td>7</td><td><strong>int32</strong>Integer (-2147483648 to 2147483647)</td></tr><tr><td>8</td><td><strong>int64</strong>Integer (-9223372036854775808 to 9223372036854775807)</td></tr><tr><td>9</td><td><strong>uint8</strong>Unsigned integer (0 to 255)</td></tr><tr><td>10</td><td><strong>uint16</strong>Unsigned integer (0 to 65535)</td></tr><tr><td>11</td><td><strong>uint32</strong>Unsigned integer (0 to 4294967295)</td></tr><tr><td>12</td><td><strong>uint64</strong>Unsigned integer (0 to 18446744073709551615)</td></tr><tr><td>13</td><td><strong>float_</strong>Shorthand for float64</td></tr><tr><td>14</td><td><strong>float16</strong>Half precision float: sign bit, 5 bits exponent, 10 bits mantissa</td></tr><tr><td>15</td><td><strong>float32</strong>Single precision float: sign bit, 8 bits exponent, 23 bits mantissa</td></tr><tr><td>16</td><td><strong>float64</strong>Double precision float: sign bit, 11 bits exponent, 52 bits mantissa</td></tr><tr><td>17</td><td><strong>complex_</strong>Shorthand for complex128</td></tr><tr><td>18</td><td><strong>complex64</strong>Complex number, represented by two 32-bit floats (real and imaginary components)</td></tr><tr><td>19</td><td><strong>complex128</strong>Complex number, represented by two 64-bit floats (real and imaginary components)</td></tr></tbody></table></figure>\n\n\n\n<p>NumPy numerical types are instances of dtype (data-type) objects, each having unique characteristics. The dtypes are available as np.bool_, np.float32, etc.</p>\n\n\n\n<h2>Data Type Objects (dtype)</h2>\n\n\n\n<p>A data type object describes interpretation of fixed block of memory corresponding to an array, depending on the following aspects −</p>\n\n\n\n<ul><li>Type of data (integer, float or Python object)</li><li>Size of data</li><li>Byte order (little-endian or big-endian)</li><li>In case of structured type, the names of fields, data type of each field and part of the memory block taken by each field.</li><li>If data type is a subarray, its shape and data type</li></ul>\n\n\n\n<p>The byte order is decided by prefixing &#8216;&lt;&#8216; or &#8216;&gt;&#8217; to data type. &#8216;&lt;&#8216; means that encoding is little-endian (least significant is stored in smallest address). &#8216;&gt;&#8217; means that encoding is big-endian (most significant byte is stored in smallest address).</p>\n\n\n\n<p>A dtype object is constructed using the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.dtype(object, align, copy)</code></pre>\n\n\n\n<p>The parameters are −</p>\n\n\n\n<ul><li><strong>Object</strong>&nbsp;− To be converted to data type object</li><li><strong>Align</strong>&nbsp;− If true, adds padding to the field to make it similar to C-struct</li><li><strong>Copy</strong>&nbsp;− Makes a new copy of dtype object. If false, the result is reference to builtin data type object</li></ul>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># using array-scalar type \nimport numpy as np \ndt = np.dtype(np.int32) \nprint dt</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int32</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#int8, int16, int32, int64 can be replaced by equivalent string 'i1', 'i2','i4', etc. \nimport numpy as np \n\ndt = np.dtype('i4')\nprint dt </code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int32</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># using endian notation \nimport numpy as np \ndt = np.dtype('>i4') \nprint dt</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>>i4</code></pre>\n\n\n\n<p>The following examples show the use of structured data type. Here, the field name and the corresponding scalar data type is to be declared.</p>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># first create structured data type \nimport numpy as np \ndt = np.dtype(&#91;('age',np.int8)]) \nprint dt </code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;('age', 'i1')] </code></pre>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># now apply it to ndarray object \nimport numpy as np \n\ndt = np.dtype(&#91;('age',np.int8)]) \na = np.array(&#91;(10,),(20,),(30,)], dtype = dt) \nprint a</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;(10,) (20,) (30,)]</code></pre>\n\n\n\n<h3>Example 6</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># file name can be used to access content of age column \nimport numpy as np \n\ndt = np.dtype(&#91;('age',np.int8)]) \na = np.array(&#91;(10,),(20,),(30,)], dtype = dt) \nprint a&#91;'age']</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10 20 30]\n</code></pre>\n\n\n\n<h3>Example 7</h3>\n\n\n\n<p>The following examples define a structured data type called <strong>student</strong> with a string field &#8216;name&#8217;, an <strong>integer field</strong> &#8216;age&#8217; and a <strong>float field</strong> &#8216;marks&#8217;. This dtype is applied to ndarray object.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nstudent = np.dtype(&#91;('name','S20'), ('age', 'i1'), ('marks', 'f4')]) \nprint student</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;('name', 'S20'), ('age', 'i1'), ('marks', '&lt;f4')])\n</code></pre>\n\n\n\n<h3>Example 8</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n\nstudent = np.dtype(&#91;('name','S20'), ('age', 'i1'), ('marks', 'f4')]) \na = np.array(&#91;('abc', 21, 50),('xyz', 18, 75)], dtype = student) \nprint a</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;('abc', 21, 50.0), ('xyz', 18, 75.0)]\n</code></pre>\n\n\n\n<p>Each built-in data type has a character code that uniquely identifies it.</p>\n\n\n\n<ul><li><strong>&#8216;b&#8217;</strong>&nbsp;− boolean</li><li><strong>&#8216;i&#8217;</strong>&nbsp;− (signed) integer</li><li><strong>&#8216;u&#8217;</strong>&nbsp;− unsigned integer</li><li><strong>&#8216;f&#8217;</strong>&nbsp;− floating-point</li><li><strong>&#8216;c&#8217;</strong>&nbsp;− complex-floating point</li><li><strong>&#8216;m&#8217;</strong>&nbsp;− timedelta</li><li><strong>&#8216;M&#8217;</strong>&nbsp;− datetime</li><li><strong>&#8216;O&#8217;</strong>&nbsp;− (Python) objects</li><li><strong>&#8216;S&#8217;, &#8216;a&#8217;</strong>&nbsp;− (byte-)string</li><li><strong>&#8216;U&#8217;</strong>&nbsp;− Unicode</li><li><strong>&#8216;V&#8217;</strong>&nbsp;− raw data (void)</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>NumPy supports a much greater variety of numerical types than Python does. The following table shows different scalar data types defined in NumPy. Sr.No. Data Types &amp; Description 1 bool_Boolean (True or False) stored as a byte 2 int_Default integer type (same as C long; normally either int64 or int32) 3 intcIdentical to C int [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/320"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=320"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/320/revisions"}],"predecessor-version":[{"id":3029,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/320/revisions/3029"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=320"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=320"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=320"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":322,"date":"2020-07-04T05:42:00","date_gmt":"2020-07-04T05:42:00","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=322"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"array-attributes","status":"publish","type":"post","link":"https://python3.foobrdigital.com/array-attributes/","title":{"rendered":"Array Attributes"},"content":{"rendered":"\n<p>In this chapter, we will discuss the various array attributes of NumPy.</p>\n\n\n\n<h2>ndarray.shape</h2>\n\n\n\n<p>This array attribute returns a tuple consisting of array dimensions. It can also be used to resize the array.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;1,2,3],&#91;4,5,6]]) \nprint a.shape</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>(2, 3)</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># this resizes the ndarray \nimport numpy as np \n\na = np.array(&#91;&#91;1,2,3],&#91;4,5,6]]) \na.shape = (3,2) \nprint a </code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1, 2] \n &#91;3, 4] \n &#91;5, 6]]</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>NumPy also provides a reshape function to resize an array.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;1,2,3],&#91;4,5,6]]) \nb = a.reshape(3,2) \nprint b</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1, 2] \n &#91;3, 4] \n &#91;5, 6]]\n﻿</code></pre>\n\n\n\n<h2>ndarray.ndim</h2>\n\n\n\n<p>This array attribute returns the number of array dimensions.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># an array of evenly spaced numbers \nimport numpy as np \na = np.arange(24) \nprint a</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;0 1  2  3  4  5  6  7  8  9  10  11  12  13  14  15  16 17 18 19 20 21 22 23] </code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># this is one dimensional array \nimport numpy as np \na = np.arange(24) \na.ndim  \n\n# now reshape it \nb = a.reshape(2,4,3) \nprint b \n# b is having three dimensions</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;&#91; 0,  1,  2] \n  &#91; 3,  4,  5] \n  &#91; 6,  7,  8] \n  &#91; 9, 10, 11]]  \n  &#91;&#91;12, 13, 14] \n   &#91;15, 16, 17]\n   &#91;18, 19, 20] \n   &#91;21, 22, 23]]] </code></pre>\n\n\n\n<h2>numpy.itemsize</h2>\n\n\n\n<p>This array attribute returns the length of each element of array in bytes.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># dtype of array is int8 (1 byte) \nimport numpy as np \nx = np.array(&#91;1,2,3,4,5], dtype = np.int8) \nprint x.itemsize</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n﻿</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># dtype of array is now float32 (4 bytes) \nimport numpy as np \nx = np.array(&#91;1,2,3,4,5], dtype = np.float32) \nprint x.itemsize</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>4</code></pre>\n\n\n\n<h2>numpy.flags</h2>\n\n\n\n<p>The ndarray object has the following attributes. Its current values are returned by this function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Attribute &amp; Description</th></tr><tr><td>1</td><td><strong>C_CONTIGUOUS (C)</strong>The data is in a single, C-style contiguous segment</td></tr><tr><td>2</td><td><strong>F_CONTIGUOUS (F)</strong>The data is in a single, Fortran-style contiguous segment</td></tr><tr><td>3</td><td><strong>OWNDATA (O)</strong>The array owns the memory it uses or borrows it from another object</td></tr><tr><td>4</td><td><strong>WRITEABLE (W)</strong>The data area can be written to. Setting this to False locks the data, making it read-only</td></tr><tr><td>5</td><td><strong>ALIGNED (A)</strong>The data and all elements are aligned appropriately for the hardware</td></tr><tr><td>6</td><td><strong>UPDATEIFCOPY (U)</strong>This array is a copy of some other array. When this array is deallocated, the base array will be updated with the contents of this array</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows the current values of flags.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.array(&#91;1,2,3,4,5]) \nprint x.flags</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C_CONTIGUOUS : True \nF_CONTIGUOUS : True \nOWNDATA : True \nWRITEABLE : True \nALIGNED : True \nUPDATEIFCOPY : False</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss the various array attributes of NumPy. ndarray.shape This array attribute returns a tuple consisting of array dimensions. It can also be used to resize the array. Example 1 Live Demo The output is as follows − Example 2 Live Demo The output is as follows − Example 3 NumPy [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/322"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=322"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/322/revisions"}],"predecessor-version":[{"id":3020,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/322/revisions/3020"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=322"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=322"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=322"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":324,"date":"2020-07-04T05:45:21","date_gmt":"2020-07-04T05:45:21","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=324"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"array-creation-routines","status":"publish","type":"post","link":"https://python3.foobrdigital.com/array-creation-routines/","title":{"rendered":"Array Creation Routines"},"content":{"rendered":"\n<p>A new&nbsp;<strong>ndarray</strong>&nbsp;object can be constructed by any of the following array creation routines or using a low-level ndarray constructor.</p>\n\n\n\n<h2>numpy.empty</h2>\n\n\n\n<p>It creates an uninitialized array of specified shape and dtype. It uses the following constructor −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.empty(shape, dtype = float, order = 'C')</code></pre>\n\n\n\n<p>The constructor takes the following parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>Shape</strong>Shape of an empty array in int or tuple of int</td></tr><tr><td>2</td><td><strong>Dtype</strong>Desired output data type. Optional</td></tr><tr><td>3</td><td><strong>Order</strong>&#8216;C&#8217; for C-style row-major array, &#8216;F&#8217; for FORTRAN style column-major array</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following code shows an example of an empty array.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.empty(&#91;3,2], dtype = int) \nprint x</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;22649312    1701344351] \n &#91;1818321759  1885959276] \n &#91;16779776    156368896]]</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− The elements in an array show random values as they are not initialized.</p>\n\n\n\n<h2>numpy.zeros</h2>\n\n\n\n<p>Returns a new array of specified size, filled with zeros.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.zeros(shape, dtype = float, order = 'C')</code></pre>\n\n\n\n<p>The constructor takes the following parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>Shape</strong>Shape of an empty array in int or sequence of int</td></tr><tr><td>2</td><td><strong>Dtype</strong>Desired output data type. Optional</td></tr><tr><td>3</td><td><strong>Order</strong>&#8216;C&#8217; for C-style row-major array, &#8216;F&#8217; for FORTRAN style column-major array</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># array of five zeros. Default dtype is float \nimport numpy as np \nx = np.zeros(5) \nprint x</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 0.  0.  0.  0.  0.]</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.zeros((5,), dtype = np.int) \nprint x</code></pre>\n\n\n\n<p>Now, the output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;0  0  0  0  0]</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># custom type \nimport numpy as np \nx = np.zeros((2,2), dtype = &#91;('x', 'i4'), ('y', 'i4')])  \nprint x</code></pre>\n\n\n\n<p>It should produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;(0,0)(0,0)]\n &#91;(0,0)(0,0)]]     </code></pre>\n\n\n\n<h2>numpy.ones</h2>\n\n\n\n<p>Returns a new array of specified size and type, filled with ones.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.ones(shape, dtype = None, order = 'C')</code></pre>\n\n\n\n<p>The constructor takes the following parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>Shape</strong>Shape of an empty array in int or tuple of int</td></tr><tr><td>2</td><td><strong>Dtype</strong>Desired output data type. Optional</td></tr><tr><td>3</td><td><strong>Order</strong>&#8216;C&#8217; for C-style row-major array, &#8216;F&#8217; for FORTRAN style column-major array</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># array of five ones. Default dtype is float \nimport numpy as np \nx = np.ones(5) \nprint x</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 1.  1.  1.  1.  1.]\n﻿</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.ones(&#91;2,2], dtype = int) \nprint x</code></pre>\n\n\n\n<p>Now, the output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1  1] \n &#91;1  1]]</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>A new&nbsp;ndarray&nbsp;object can be constructed by any of the following array creation routines or using a low-level ndarray constructor. numpy.empty It creates an uninitialized array of specified shape and dtype. It uses the following constructor − The constructor takes the following parameters. Sr.No. Parameter &amp; Description 1 ShapeShape of an empty array in int or [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/324"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=324"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/324/revisions"}],"predecessor-version":[{"id":3021,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/324/revisions/3021"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=324"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=324"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=324"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":326,"date":"2020-07-04T05:49:12","date_gmt":"2020-07-04T05:49:12","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=326"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"array-from-existing-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/array-from-existing-data/","title":{"rendered":"Array From Existing Data"},"content":{"rendered":"\n<p>In this chapter, we will discuss how to create an array from existing data.</p>\n\n\n\n<h2>numpy.asarray</h2>\n\n\n\n<p>This function is similar to numpy.array except for the fact that it has fewer parameters. This routine is useful for converting Python sequence into ndarray.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.asarray(a, dtype = None, order = None)</code></pre>\n\n\n\n<p>The constructor takes the following parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>a</strong>Input data in any form such as list, list of tuples, tuples, tuple of tuples or tuple of lists</td></tr><tr><td>2</td><td><strong>dtype</strong>By default, the data type of input data is applied to the resultant ndarray</td></tr><tr><td>3</td><td><strong>order</strong>C (row major) or F (column major). C is default</td></tr></tbody></table></figure>\n\n\n\n<p>The following examples show how you can use the&nbsp;<strong>asarray</strong>&nbsp;function.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># convert list to ndarray \nimport numpy as np \n\nx = &#91;1,2,3] \na = np.asarray(x) \nprint a</code></pre>\n\n\n\n<p>Its output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1  2  3] </code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># dtype is set \nimport numpy as np \n\nx = &#91;1,2,3]\na = np.asarray(x, dtype = float) \nprint a</code></pre>\n\n\n\n<p>Now, the output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 1.  2.  3.] </code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># ndarray from tuple \nimport numpy as np \n\nx = (1,2,3) \na = np.asarray(x) \nprint a</code></pre>\n\n\n\n<p>Its output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1 2 3]</code></pre>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># ndarray from list of tuples \nimport numpy as np \n\nx = &#91;(1,2,3),(4,5)] \na = np.asarray(x) \nprint a</code></pre>\n\n\n\n<p>Here, the output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;(1, 2, 3) (4, 5)]</code></pre>\n\n\n\n<h2>numpy.frombuffer</h2>\n\n\n\n<p>This function interprets a buffer as one-dimensional array. Any object that exposes the buffer interface is used as parameter to return an <strong>ndarray</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0)</code></pre>\n\n\n\n<p>The constructor takes the following parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>buffer</strong>Any object that exposes buffer interface</td></tr><tr><td>2</td><td><strong>dtype</strong>Data type of returned ndarray. Defaults to float</td></tr><tr><td>3</td><td><strong>count</strong>The number of items to read, default -1 means all data</td></tr><tr><td>4</td><td><strong>offset</strong>The starting position to read from. Default is 0</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following examples demonstrate the use of <strong>frombuffer</strong> function.Live Demo</p>\n\n\n\n<pre class=\"wp-block-preformatted\">import numpy as np <br>s = 'Hello World' <br>a = np.frombuffer(s, dtype = 'S1') <br>print a</pre>\n\n\n\n<p>Here is its output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;'H'  'e'  'l'  'l'  'o'  ' '  'W'  'o'  'r'  'l'  'd']</code></pre>\n\n\n\n<h2>numpy.fromiter</h2>\n\n\n\n<p>This function builds an <strong>ndarray</strong> object from any iterable object. A new one-dimensional array is returned by this function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.fromiter(iterable, dtype, count = -1)</code></pre>\n\n\n\n<p>Here, the constructor takes the following parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>iterable</strong>Any iterable object</td></tr><tr><td>2</td><td><strong>dtype</strong>Data type of resultant array</td></tr><tr><td>3</td><td><strong>count</strong>The number of items to be read from iterator. Default is -1 which means all data to be read</td></tr></tbody></table></figure>\n\n\n\n<p>The following examples show how to use the built-in&nbsp;<strong>range()</strong>&nbsp;function to return a list object. An iterator of this list is used to form an&nbsp;<strong>ndarray</strong>&nbsp;object.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># create list object using range function \nimport numpy as np \nlist = range(5) \nprint list</code></pre>\n\n\n\n<p>Its output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;0,  1,  2,  3,  4]</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># obtain iterator object from list \nimport numpy as np \nlist = range(5) \nit = iter(list)  \n\n# use iterator to create ndarray \nx = np.fromiter(it, dtype = float) \nprint x</code></pre>\n\n\n\n<p>Now, the output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;0.   1.   2.   3.   4.]</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss how to create an array from existing data. numpy.asarray This function is similar to numpy.array except for the fact that it has fewer parameters. This routine is useful for converting Python sequence into ndarray. The constructor takes the following parameters. Sr.No. Parameter &amp; Description 1 aInput data in any [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/326"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=326"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/326/revisions"}],"predecessor-version":[{"id":3022,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/326/revisions/3022"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=326"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=326"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=326"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":328,"date":"2020-07-04T05:53:09","date_gmt":"2020-07-04T05:53:09","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=328"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"array-from-numerical-ranges","status":"publish","type":"post","link":"https://python3.foobrdigital.com/array-from-numerical-ranges/","title":{"rendered":"Array From Numerical Ranges"},"content":{"rendered":"\n<p>In this chapter, we will see how to create an array from numerical ranges.</p>\n\n\n\n<h2>numpy.arange</h2>\n\n\n\n<p>This function returns an <strong>ndarray</strong> object containing evenly spaced values within a given range. The format of the function is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.arange(start, stop, step, dtype)</code></pre>\n\n\n\n<p>The constructor takes the following parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>start</strong>The start of an interval. If omitted, defaults to 0</td></tr><tr><td>2</td><td><strong>stop</strong>The end of an interval (not including this number)</td></tr><tr><td>3</td><td><strong>step</strong>Spacing between values, default is 1</td></tr><tr><td>4</td><td><strong>dtype</strong>Data type of resulting ndarray. If not given, data type of input is used</td></tr></tbody></table></figure>\n\n\n\n<p>The following examples show how you can use this function.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.arange(5) \nprint x</code></pre>\n\n\n\n<p>Its output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;0  1  2  3  4]</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n# dtype set \nx = np.arange(5, dtype = float)\nprint x</code></pre>\n\n\n\n<p>Here, the output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;0.  1.  2.  3.  4.] </code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># start and stop parameters set \nimport numpy as np \nx = np.arange(10,20,2) \nprint x</code></pre>\n\n\n\n<p>Its output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10  12  14  16  18]</code></pre>\n\n\n\n<h2>numpy.linspace</h2>\n\n\n\n<p>This function is similar to <strong>arange()</strong> function. In this function, instead of step size, the number of evenly spaced values between the interval is specified. The usage of this function is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.linspace(start, stop, num, endpoint, retstep, dtype)</code></pre>\n\n\n\n<p>The constructor takes the following parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>start</strong>The starting value of the sequence</td></tr><tr><td>2</td><td><strong>stop</strong>The end value of the sequence, included in the sequence if endpoint set to true</td></tr><tr><td>3</td><td><strong>num</strong>The number of evenly spaced samples to be generated. Default is 50</td></tr><tr><td>4</td><td><strong>endpoint</strong>True by default, hence the stop value is included in the sequence. If false, it is not included</td></tr><tr><td>5</td><td><strong>retstep</strong>If true, returns samples and step between the consecutive numbers</td></tr><tr><td>6</td><td><strong>dtype</strong>Data type of output&nbsp;<strong>ndarray</strong></td></tr></tbody></table></figure>\n\n\n\n<p>The following examples demonstrate the use&nbsp;<strong>linspace</strong>&nbsp;function.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.linspace(10,20,5) \nprint x</code></pre>\n\n\n\n<p>Its output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10.   12.5   15.   17.5  20.]</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># endpoint set to false \nimport numpy as np \nx = np.linspace(10,20, 5, endpoint = False) \nprint x</code></pre>\n\n\n\n<p>The output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10.   12.   14.   16.   18.]\n﻿</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># find retstep value \nimport numpy as np \n\nx = np.linspace(1,2,5, retstep = True) \nprint x \n# retstep here is 0.25</code></pre>\n\n\n\n<p>Now, the output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>(array(&#91; 1.  ,  1.25,  1.5 ,  1.75,  2.  ]), 0.25)</code></pre>\n\n\n\n<h2>numpy.logspace</h2>\n\n\n\n<p>This function returns an <strong>ndarray</strong> object that contains the numbers that are evenly spaced on a log scale. Start and stop endpoints of the scale are indices of the base, usually 10.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.logspace(start, stop, num, endpoint, base, dtype)</code></pre>\n\n\n\n<p>Following parameters determine the output of&nbsp;<strong>logspace</strong>&nbsp;function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>start</strong>The starting point of the sequence is base<sup>start</sup></td></tr><tr><td>2</td><td><strong>stop</strong>The final value of sequence is base<sup>stop</sup></td></tr><tr><td>3</td><td><strong>num</strong>The number of values between the range. Default is 50</td></tr><tr><td>4</td><td><strong>endpoint</strong>If true, stop is the last value in the range</td></tr><tr><td>5</td><td><strong>base</strong>Base of log space, default is 10</td></tr><tr><td>6</td><td><strong>dtype</strong>Data type of output array. If not given, it depends upon other input arguments</td></tr></tbody></table></figure>\n\n\n\n<p>The following examples will help you understand the&nbsp;<strong>logspace</strong>&nbsp;function.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n# default base is 10 \na = np.logspace(1.0, 2.0, num = 10) \nprint a</code></pre>\n\n\n\n<p>Its output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 10.           12.91549665     16.68100537      21.5443469  27.82559402      \n  35.93813664   46.41588834     59.94842503      77.42636827    100.    ]</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># set base of log space to 2 \nimport numpy as np \na = np.logspace(1,10,num = 10, base = 2) \nprint a</code></pre>\n\n\n\n<p>Now, the output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 2.     4.     8.    16.    32.    64.   128.   256.    512.   1024.] </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will see how to create an array from numerical ranges. numpy.arange This function returns an ndarray object containing evenly spaced values within a given range. The format of the function is as follows − The constructor takes the following parameters. Sr.No. Parameter &amp; Description 1 startThe start of an interval. If omitted, defaults [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/328"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=328"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/328/revisions"}],"predecessor-version":[{"id":3023,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/328/revisions/3023"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=328"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=328"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=328"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":330,"date":"2020-07-04T05:59:48","date_gmt":"2020-07-04T05:59:48","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=330"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"indexing-slicing","status":"publish","type":"post","link":"https://python3.foobrdigital.com/indexing-slicing/","title":{"rendered":"Indexing &#038; Slicing"},"content":{"rendered":"\n<p>Contents of ndarray object can be accessed and modified by indexing or slicing, just like Python&#8217;s in-built container objects.</p>\n\n\n\n<p>As mentioned earlier, items in ndarray object follows zero-based index. Three types of indexing methods are available −&nbsp;<strong>field access, basic slicing</strong>&nbsp;and&nbsp;<strong>advanced indexing</strong>.</p>\n\n\n\n<p>Basic slicing is an extension of Python&#8217;s basic concept of slicing to n dimensions. A Python slice object is constructed by giving&nbsp;<strong>start, stop</strong>, and&nbsp;<strong>step</strong>&nbsp;parameters to the built-in&nbsp;<strong>slice</strong>&nbsp;function. This slice object is passed to the array to extract a part of array.</p>\n\n\n\n<h2>Example 1</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(10) \ns = slice(2,7,2) \nprint a&#91;s]</code></pre>\n\n\n\n<p>Its output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;2  4  6]</code></pre>\n\n\n\n<p>In the above example, an&nbsp;<strong>ndarray</strong>&nbsp;object is prepared by&nbsp;<strong>arange()</strong>&nbsp;function. Then a slice object is defined with start, stop, and step values 2, 7, and 2 respectively. When this slice object is passed to the ndarray, a part of it starting with index 2 up to 7 with a step of 2 is sliced.</p>\n\n\n\n<p>The same result can also be obtained by giving the slicing parameters separated by a colon : (start:stop:step) directly to the&nbsp;<strong>ndarray</strong>&nbsp;object.</p>\n\n\n\n<h2>Example 2</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(10) \nb = a&#91;2:7:2] \nprint b</code></pre>\n\n\n\n<p>Here, we will get the same output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;2  4  6]</code></pre>\n\n\n\n<p>If only one parameter is put, a single item corresponding to the index will be returned. If a : is inserted in front of it, all items from that index onwards will be extracted. If two parameters (with : between them) is used, items between the two indexes (not including the stop index) with default step one are sliced.</p>\n\n\n\n<h2>Example 3</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># slice single item \nimport numpy as np \n\na = np.arange(10) \nb = a&#91;5] \nprint b</code></pre>\n\n\n\n<p>Its output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>5</code></pre>\n\n\n\n<h2>Example 4</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># slice items starting from index \nimport numpy as np \na = np.arange(10) \nprint a&#91;2:]</code></pre>\n\n\n\n<p>Now, the output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;2  3  4  5  6  7  8  9]</code></pre>\n\n\n\n<h2>Example 5</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># slice items between indexes \nimport numpy as np \na = np.arange(10) \nprint a&#91;2:5]</code></pre>\n\n\n\n<p>Here, the output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;2  3  4] </code></pre>\n\n\n\n<p>The above description applies to multi-dimensional&nbsp;<strong>ndarray</strong>&nbsp;too.</p>\n\n\n\n<h2>Example 6</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;1,2,3],&#91;3,4,5],&#91;4,5,6]]) \nprint a  \n\n# slice items starting from index\nprint 'Now we will slice the array from the index a&#91;1:]' \nprint a&#91;1:]</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1 2 3]\n &#91;3 4 5]\n &#91;4 5 6]]\n\nNow we will slice the array from the index a&#91;1:]\n&#91;&#91;3 4 5]\n &#91;4 5 6]]</code></pre>\n\n\n\n<p>Slicing can also include ellipsis (…) to make a selection tuple of the same length as the dimension of an array. If ellipsis is used at the row position, it will return an ndarray comprising of items in rows.</p>\n\n\n\n<h2>Example 7</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code># array to begin with \nimport numpy as np \na = np.array(&#91;&#91;1,2,3],&#91;3,4,5],&#91;4,5,6]]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\n# this returns array of items in the second column \nprint 'The items in the second column are:'  \nprint a&#91;...,1] \nprint '\\n'  \n\n# Now we will slice all items from the second row \nprint 'The items in the second row are:' \nprint a&#91;1,...] \nprint '\\n'  \n\n# Now we will slice all items from column 1 onwards \nprint 'The items column 1 onwards are:' \nprint a&#91;...,1:]</code></pre>\n\n\n\n<p>The output of this program is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;1 2 3]\n &#91;3 4 5]\n &#91;4 5 6]] \n \nThe items in the second column are: \n&#91;2 4 5] \n\nThe items in the second row are:\n&#91;3 4 5]\n\nThe items column 1 onwards are:\n&#91;&#91;2 3]\n &#91;4 5]\n &#91;5 6]] </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Contents of ndarray object can be accessed and modified by indexing or slicing, just like Python&#8217;s in-built container objects. As mentioned earlier, items in ndarray object follows zero-based index. Three types of indexing methods are available −&nbsp;field access, basic slicing&nbsp;and&nbsp;advanced indexing. Basic slicing is an extension of Python&#8217;s basic concept of slicing to n dimensions. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/330"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=330"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/330/revisions"}],"predecessor-version":[{"id":3033,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/330/revisions/3033"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=330"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=330"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=330"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":332,"date":"2020-07-04T06:01:57","date_gmt":"2020-07-04T06:01:57","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=332"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"advanced-indexing","status":"publish","type":"post","link":"https://python3.foobrdigital.com/advanced-indexing/","title":{"rendered":"Advanced Indexing"},"content":{"rendered":"\n<p>It is possible to make a selection from ndarray that is a non-tuple sequence, ndarray object of integer or Boolean data type, or a tuple with at least one item being a sequence object. Advanced indexing always returns a copy of the data. As against this, the slicing only presents a view.</p>\n\n\n\n<p>There are two types of advanced indexing −&nbsp;<strong>Integer</strong>&nbsp;and&nbsp;<strong>Boolean</strong>.</p>\n\n\n\n<h2>Integer Indexing</h2>\n\n\n\n<p>This mechanism helps in selecting any arbitrary item in an array based on its Ndimensional index. Each integer array represents the number of indexes into that dimension. When the index consists of as many integer arrays as the dimensions of the target ndarray, it becomes straightforward.</p>\n\n\n\n<p>In the following example, one element of specified column from each row of ndarray object is selected. Hence, the row index contains all row numbers, and the column index specifies the element to be selected.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p><a rel=\"noreferrer noopener\" href=\"http://tpcg.io/FTdZD5\" target=\"_blank\">Live Demo</a></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n\nx = np.array(&#91;&#91;1, 2], &#91;3, 4], &#91;5, 6]]) \ny = x&#91;&#91;0,1,2], &#91;0,1,0]] \nprint y</code></pre>\n\n\n\n<p>Its output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1  4  5]</code></pre>\n\n\n\n<p>The selection includes elements at (0,0), (1,1) and (2,0) from the first array.</p>\n\n\n\n<p>In the following example, elements placed at corners of a 4X3 array are selected. The row indices of selection are [0, 0] and [3,3] whereas the column indices are [0,2] and [0,2].</p>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.array(&#91;&#91; 0,  1,  2],&#91; 3,  4,  5],&#91; 6,  7,  8],&#91; 9, 10, 11]]) \n   \nprint 'Our array is:' \nprint x \nprint '\\n' \n\nrows = np.array(&#91;&#91;0,0],&#91;3,3]])\ncols = np.array(&#91;&#91;0,2],&#91;0,2]]) \ny = x&#91;rows,cols] \n   \nprint 'The corner elements of this array are:' \nprint y</code></pre>\n\n\n\n<p>The output of this program is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:                                                                 \n&#91;&#91; 0  1  2]                                                                   \n &#91; 3  4  5]                                                                   \n &#91; 6  7  8]                                                                   \n &#91; 9 10 11]]\n \nThe corner elements of this array are:                                        \n&#91;&#91; 0  2]                                                                      \n &#91; 9 11]] </code></pre>\n\n\n\n<p>The resultant selection is an ndarray object containing corner elements.</p>\n\n\n\n<p>Advanced and basic indexing can be combined by using one slice (:) or ellipsis (…) with an index array. The following example uses slice for row and advanced index for column. The result is the same when slice is used for both. But advanced index results in copy and may have different memory layout.</p>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.array(&#91;&#91; 0,  1,  2],&#91; 3,  4,  5],&#91; 6,  7,  8],&#91; 9, 10, 11]]) \n\nprint 'Our array is:' \nprint x \nprint '\\n'  \n\n# slicing \nz = x&#91;1:4,1:3] \n\nprint 'After slicing, our array becomes:' \nprint z \nprint '\\n'  \n\n# using advanced index for column \ny = x&#91;1:4,&#91;1,2]] \n\nprint 'Slicing using advanced index for column:' \nprint y</code></pre>\n\n\n\n<p>The output of this program would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91; 0  1  2] \n &#91; 3  4  5] \n &#91; 6  7  8]\n &#91; 9 10 11]]\n \nAfter slicing, our array becomes:\n&#91;&#91; 4  5]\n &#91; 7  8]\n &#91;10 11]]\n\nSlicing using advanced index for column:\n&#91;&#91; 4  5]\n &#91; 7  8]\n &#91;10 11]] </code></pre>\n\n\n\n<h2>Boolean Array Indexing</h2>\n\n\n\n<p>This type of advanced indexing is used when the resultant object is meant to be the result of Boolean operations, such as comparison operators.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>In this example, items greater than 5 are returned as a result of Boolean indexing.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.array(&#91;&#91; 0,  1,  2],&#91; 3,  4,  5],&#91; 6,  7,  8],&#91; 9, 10, 11]]) \n\nprint 'Our array is:' \nprint x \nprint '\\n'  \n\n# Now we will print the items greater than 5 \nprint 'The items greater than 5 are:' \nprint x&#91;x > 5]</code></pre>\n\n\n\n<p>The output of this program would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is: \n&#91;&#91; 0  1  2] \n &#91; 3  4  5] \n &#91; 6  7  8] \n &#91; 9 10 11]] \n \nThe items greater than 5 are:\n&#91; 6  7  8  9 10 11] \n﻿</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>In this example, NaN (Not a Number) elements are omitted by using ~ (complement operator).<a rel=\"noreferrer noopener\" href=\"http://tpcg.io/jeAVbf\" target=\"_blank\">Live Demo</a></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;np.nan, 1,2,np.nan,3,4,5]) \nprint a&#91;~np.isnan(a)]</code></pre>\n\n\n\n<p>Its output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 1.   2.   3.   4.   5.] </code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>The following example shows how to filter out the non-complex elements from an array.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;1, 2+6j, 5, 3.5+5j]) \nprint a&#91;np.iscomplex(a)]</code></pre>\n\n\n\n<p>Here, the output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;2.0+6.j  3.5+5.j] </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>It is possible to make a selection from ndarray that is a non-tuple sequence, ndarray object of integer or Boolean data type, or a tuple with at least one item being a sequence object. Advanced indexing always returns a copy of the data. As against this, the slicing only presents a view. There are two [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/332"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=332"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/332/revisions"}],"predecessor-version":[{"id":3018,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/332/revisions/3018"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=332"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=332"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=332"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":334,"date":"2020-07-04T06:03:23","date_gmt":"2020-07-04T06:03:23","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=334"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"broadcasting","status":"publish","type":"post","link":"https://python3.foobrdigital.com/broadcasting/","title":{"rendered":"Broadcasting"},"content":{"rendered":"\n<p>The term&nbsp;<strong>broadcasting</strong>&nbsp;refers to the ability of NumPy to treat arrays of different shapes during arithmetic operations. Arithmetic operations on arrays are usually done on corresponding elements. If two arrays are of exactly the same shape, then these operations are smoothly performed.</p>\n\n\n\n<h2>Example 1</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n\na = np.array(&#91;1,2,3,4]) \nb = np.array(&#91;10,20,30,40]) \nc = a * b \nprint c</code></pre>\n\n\n\n<p>Its output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10   40   90   160]</code></pre>\n\n\n\n<p>If the dimensions of two arrays are dissimilar, element-to-element operations are not possible. However, operations on arrays of non-similar shapes is still possible in NumPy, because of the broadcasting capability. The smaller array is&nbsp;<strong>broadcast</strong>&nbsp;to the size of the larger array so that they have compatible shapes.</p>\n\n\n\n<p>Broadcasting is possible if the following rules are satisfied −</p>\n\n\n\n<ul><li>Array with smaller&nbsp;<strong>ndim</strong>&nbsp;than the other is prepended with &#8216;1&#8217; in its shape.</li><li>Size in each dimension of the output shape is maximum of the input sizes in that dimension.</li><li>An input can be used in calculation, if its size in a particular dimension matches the output size or its value is exactly 1.</li><li>If an input has a dimension size of 1, the first data entry in that dimension is used for all calculations along that dimension.</li></ul>\n\n\n\n<p>A set of arrays is said to be&nbsp;<strong>broadcastable</strong>&nbsp;if the above rules produce a valid result and one of the following is true −</p>\n\n\n\n<ul><li>Arrays have exactly the same shape.</li><li>Arrays have the same number of dimensions and the length of each dimension is either a common length or 1.</li><li>Array having too few dimensions can have its shape prepended with a dimension of length 1, so that the above stated property is true.</li></ul>\n\n\n\n<p>The following program shows an example of broadcasting.</p>\n\n\n\n<h2>Example 2</h2>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;0.0,0.0,0.0],&#91;10.0,10.0,10.0],&#91;20.0,20.0,20.0],&#91;30.0,30.0,30.0]]) \nb = np.array(&#91;1.0,2.0,3.0])  \n   \nprint 'First array:' \nprint a \nprint '\\n'  \n   \nprint 'Second array:' \nprint b \nprint '\\n'  \n   \nprint 'First Array + Second Array' \nprint a + b</code></pre>\n\n\n\n<p>The output of this program would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>First array:\n&#91;&#91; 0. 0. 0.]\n &#91; 10. 10. 10.]\n &#91; 20. 20. 20.]\n &#91; 30. 30. 30.]]\n\nSecond array:\n&#91; 1. 2. 3.]\n\nFirst Array + Second Array\n&#91;&#91; 1. 2. 3.]\n &#91; 11. 12. 13.]\n &#91; 21. 22. 23.]\n &#91; 31. 32. 33.]]</code></pre>\n\n\n\n<p>The following figure demonstrates how array&nbsp;<strong>b</strong>&nbsp;is broadcast to become compatible with&nbsp;<strong>a</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/numpy/images/array.jpg\" alt=\"array\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The term&nbsp;broadcasting&nbsp;refers to the ability of NumPy to treat arrays of different shapes during arithmetic operations. Arithmetic operations on arrays are usually done on corresponding elements. If two arrays are of exactly the same shape, then these operations are smoothly performed. Example 1 Live Demo Its output is as follows − If the dimensions of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/334"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=334"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/334/revisions"}],"predecessor-version":[{"id":3026,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/334/revisions/3026"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=334"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=334"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=334"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":336,"date":"2020-07-04T06:06:31","date_gmt":"2020-07-04T06:06:31","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=336"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"iterating-over-array","status":"publish","type":"post","link":"https://python3.foobrdigital.com/iterating-over-array/","title":{"rendered":"Iterating Over Array"},"content":{"rendered":"\n<p>NumPy package contains an iterator object&nbsp;<strong>numpy.nditer</strong>. It is an efficient multidimensional iterator object using which it is possible to iterate over an array. Each element of an array is visited using Python’s standard Iterator interface.</p>\n\n\n\n<p>Let us create a 3X4 array using arange() function and iterate over it using&nbsp;<strong>nditer</strong>.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\na = np.arange(0,60,5)\na = a.reshape(3,4)\n\nprint 'Original array is:'\nprint a\nprint '\\n'\n\nprint 'Modified array is:'\nfor x in np.nditer(a):\n   print x,</code></pre>\n\n\n\n<p>The output of this program is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original array is:\n&#91;&#91; 0 5 10 15]\n &#91;20 25 30 35]\n &#91;40 45 50 55]]\n\nModified array is:\n0 5 10 15 20 25 30 35 40 45 50 55</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>The order of iteration is chosen to match the memory layout of an array, without considering a particular ordering. This can be seen by iterating over the transpose of the above array.<a rel=\"noreferrer noopener\" href=\"http://tpcg.io/0An4h9\" target=\"_blank\">Live Demo</a></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(0,60,5) \na = a.reshape(3,4) \n   \nprint 'Original array is:'\nprint a \nprint '\\n'  \n   \nprint 'Transpose of the original array is:' \nb = a.T \nprint b \nprint '\\n'  \n   \nprint 'Modified array is:' \nfor x in np.nditer(b): \n   print x,</code></pre>\n\n\n\n<p>The output of the above program is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original array is:\n&#91;&#91; 0 5 10 15]\n &#91;20 25 30 35]\n &#91;40 45 50 55]]\n\nTranspose of the original array is:\n&#91;&#91; 0 20 40]\n &#91; 5 25 45]\n &#91;10 30 50]\n &#91;15 35 55]]\n\nModified array is:\n0 5 10 15 20 25 30 35 40 45 50 55\n﻿</code></pre>\n\n\n\n<h2>Iteration Order</h2>\n\n\n\n<p>If the same elements are stored using F-style order, the iterator chooses the more efficient way of iterating over an array.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\na = np.arange(0,60,5)\na = a.reshape(3,4)\nprint 'Original array is:'\nprint a\nprint '\\n'\n\nprint 'Transpose of the original array is:'\nb = a.T\nprint b\nprint '\\n'\n\nprint 'Sorted in C-style order:'\nc = b.copy(order = 'C')\nprint c\nfor x in np.nditer(c):\n   print x,\n\nprint '\\n'\n\nprint 'Sorted in F-style order:'\nc = b.copy(order = 'F')\nprint c\nfor x in np.nditer(c):\n   print x,</code></pre>\n\n\n\n<p>Its output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original array is:\n&#91;&#91; 0 5 10 15]\n &#91;20 25 30 35]\n &#91;40 45 50 55]]\n\nTranspose of the original array is:\n&#91;&#91; 0 20 40]\n &#91; 5 25 45]\n &#91;10 30 50]\n &#91;15 35 55]]\n\nSorted in C-style order:\n&#91;&#91; 0 20 40]\n &#91; 5 25 45]\n &#91;10 30 50]\n &#91;15 35 55]]\n0 20 40 5 25 45 10 30 50 15 35 55\n\nSorted in F-style order:\n&#91;&#91; 0 20 40]\n &#91; 5 25 45]\n &#91;10 30 50]\n &#91;15 35 55]]\n0 5 10 15 20 25 30 35 40 45 50 55</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>It is possible to force <strong>nditer</strong> object to use a specific order by explicitly mentioning it.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(0,60,5) \na = a.reshape(3,4) \n\nprint 'Original array is:' \nprint a \nprint '\\n'  \n\nprint 'Sorted in C-style order:' \nfor x in np.nditer(a, order = 'C'): \n   print x,  \nprint '\\n' \n\nprint 'Sorted in F-style order:' \nfor x in np.nditer(a, order = 'F'): \n   print x,</code></pre>\n\n\n\n<p>Its output would be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original array is:\n&#91;&#91; 0 5 10 15]\n &#91;20 25 30 35]\n &#91;40 45 50 55]]\n\nSorted in C-style order:\n0 5 10 15 20 25 30 35 40 45 50 55\n\nSorted in F-style order:\n0 20 40 5 25 45 10 30 50 15 35 55\n﻿</code></pre>\n\n\n\n<h2>Modifying Array Values</h2>\n\n\n\n<p>The&nbsp;<strong>nditer</strong>&nbsp;object has another optional parameter called&nbsp;<strong>op_flags</strong>. Its default value is read-only, but can be set to read-write or write-only mode. This will enable modifying array elements using this iterator.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\na = np.arange(0,60,5)\na = a.reshape(3,4)\nprint 'Original array is:'\nprint a\nprint '\\n'\n\nfor x in np.nditer(a, op_flags = &#91;'readwrite']):\n   x&#91;...] = 2*x\nprint 'Modified array is:'\nprint a</code></pre>\n\n\n\n<p>Its output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original array is:\n&#91;&#91; 0 5 10 15]\n &#91;20 25 30 35]\n &#91;40 45 50 55]]\n\nModified array is:\n&#91;&#91; 0 10 20 30]\n &#91; 40 50 60 70]\n &#91; 80 90 100 110]]</code></pre>\n\n\n\n<h2>External Loop</h2>\n\n\n\n<p>The nditer class constructor has a&nbsp;<strong>‘flags’</strong>&nbsp;parameter, which can take the following values −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>c_index</strong>C_order index can be tracked</td></tr><tr><td>2</td><td><strong>f_index</strong>Fortran_order index is tracked</td></tr><tr><td>3</td><td><strong>multi-index</strong>Type of indexes with one per iteration can be tracked</td></tr><tr><td>4</td><td><strong>external_loop</strong>Causes values given to be one-dimensional arrays with multiple values instead of zero-dimensional array</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In the following example, one-dimensional arrays corresponding to each column is traversed by the iterator.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(0,60,5) \na = a.reshape(3,4) \n\nprint 'Original array is:' \nprint a \nprint '\\n'  \n\nprint 'Modified array is:' \nfor x in np.nditer(a, flags = &#91;'external_loop'], order = 'F'):\n   print x,</code></pre>\n\n\n\n<p>The output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original array is:\n&#91;&#91; 0 5 10 15]\n &#91;20 25 30 35]\n &#91;40 45 50 55]]\n\nModified array is:\n&#91; 0 20 40] &#91; 5 25 45] &#91;10 30 50] &#91;15 35 55]\n﻿</code></pre>\n\n\n\n<h2>Broadcasting Iteration</h2>\n\n\n\n<p>If two arrays are&nbsp;<strong>broadcastable</strong>, a combined&nbsp;<strong>nditer</strong>&nbsp;object is able to iterate upon them concurrently. Assuming that an array&nbsp;<strong>a</strong>&nbsp;has dimension 3X4, and there is another array&nbsp;<strong>b</strong>&nbsp;of dimension 1X4, the iterator of following type is used (array&nbsp;<strong>b</strong>&nbsp;is broadcast to size of&nbsp;<strong>a</strong>).</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(0,60,5) \na = a.reshape(3,4) \n\nprint 'First array is:' \nprint a \nprint '\\n'  \n\nprint 'Second array is:' \nb = np.array(&#91;1, 2, 3, 4], dtype = int) \nprint b  \nprint '\\n' \n\nprint 'Modified array is:' \nfor x,y in np.nditer(&#91;a,b]): \n   print \"%d:%d\" % (x,y),</code></pre>\n\n\n\n<p>Its output would be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>First array is:\n&#91;&#91; 0 5 10 15]\n &#91;20 25 30 35]\n &#91;40 45 50 55]]\n\nSecond array is:\n&#91;1 2 3 4]\n\nModified array is:\n0:1 5:2 10:3 15:4 20:1 25:2 30:3 35:4 40:1 45:2 50:3 55:4</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>NumPy package contains an iterator object&nbsp;numpy.nditer. It is an efficient multidimensional iterator object using which it is possible to iterate over an array. Each element of an array is visited using Python’s standard Iterator interface. Let us create a 3X4 array using arange() function and iterate over it using&nbsp;nditer. Example 1 Live Demo The output [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/336"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=336"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/336/revisions"}],"predecessor-version":[{"id":3035,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/336/revisions/3035"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=336"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=336"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=336"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":338,"date":"2020-07-04T06:07:19","date_gmt":"2020-07-04T06:07:19","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=338"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"array-manipulation","status":"publish","type":"post","link":"https://python3.foobrdigital.com/array-manipulation/","title":{"rendered":"Array Manipulation"},"content":{"rendered":"\n<p>Several routines are available in NumPy package for manipulation of elements in ndarray object. They can be classified into the following types −</p>\n\n\n\n<h2>Changing Shape</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Shape &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_reshape.htm\">reshape</a>Gives a new shape to an array without changing its data</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_ndarray_flat.htm\">flat</a>A 1-D iterator over the array</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_ndarray_flatten.htm\">flatten</a>Returns a copy of the array collapsed into one dimension</td></tr><tr><td>4</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_ndarray_ravel.htm\">ravel</a>Returns a contiguous flattened array</td></tr></tbody></table></figure>\n\n\n\n<h2>Transpose Operations</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Operation &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_transpose.htm\">transpose</a>Permutes the dimensions of an array</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_ndarray_t.htm\">ndarray.T</a>Same as self.transpose()</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_rollaxis.htm\">rollaxis</a>Rolls the specified axis backwards</td></tr><tr><td>4</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_swapaxes.htm\">swapaxes</a>Interchanges the two axes of an array</td></tr></tbody></table></figure>\n\n\n\n<h2>Changing Dimensions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Dimension &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_broadcast.htm\">broadcast</a>Produces an object that mimics broadcasting</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_broadcast_to.htm\">broadcast_to</a>Broadcasts an array to a new shape</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_expand_dims.htm\">expand_dims</a>Expands the shape of an array</td></tr><tr><td>4</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_squeeze.htm\">squeeze</a>Removes single-dimensional entries from the shape of an array</td></tr></tbody></table></figure>\n\n\n\n<h2>Joining Arrays</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Array &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_concatenate.htm\">concatenate</a>Joins a sequence of arrays along an existing axis</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_stack.htm\">stack</a>Joins a sequence of arrays along a new axis</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_hstack.htm\">hstack</a>Stacks arrays in sequence horizontally (column wise)</td></tr><tr><td>4</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_vstack.htm\">vstack</a>Stacks arrays in sequence vertically (row wise)</td></tr></tbody></table></figure>\n\n\n\n<h2>Splitting Arrays</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Array &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_split.htm\">split</a>Splits an array into multiple sub-arrays</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_hsplit.htm\">hsplit</a>Splits an array into multiple sub-arrays horizontally (column-wise)</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_vsplit.htm\">vsplit</a>Splits an array into multiple sub-arrays vertically (row-wise)</td></tr></tbody></table></figure>\n\n\n\n<h2>Adding / Removing Elements</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Element &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_resize.htm\">resize</a>Returns a new array with the specified shape</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_append.htm\">append</a>Appends the values to the end of an array</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_insert.htm\">insert</a>Inserts the values along the given axis before the given indices</td></tr><tr><td>4</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_delete.htm\">delete</a>Returns a new array with sub-arrays along an axis deleted</td></tr><tr><td>5</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_unique.htm\">unique</a>Finds the unique elements of an array</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Several routines are available in NumPy package for manipulation of elements in ndarray object. They can be classified into the following types − Changing Shape Sr.No. Shape &amp; Description 1 reshapeGives a new shape to an array without changing its data 2 flatA 1-D iterator over the array 3 flattenReturns a copy of the array [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/338"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=338"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/338/revisions"}],"predecessor-version":[{"id":3024,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/338/revisions/3024"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=338"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=338"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=338"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":340,"date":"2020-07-04T06:07:58","date_gmt":"2020-07-04T06:07:58","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=340"},"modified":"2020-12-16T16:57:23","modified_gmt":"2020-12-16T16:57:23","slug":"binary-operators","status":"publish","type":"post","link":"https://python3.foobrdigital.com/binary-operators/","title":{"rendered":"Binary Operators"},"content":{"rendered":"\n<p>Following are the functions for bitwise operations available in NumPy package.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Operation &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_bitwise_and.htm\">bitwise_and</a>Computes bitwise AND operation of array elements</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_bitwise_or.htm\">bitwise_or</a>Computes bitwise OR operation of array elements</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_invert.htm\">invert</a>Computes bitwise NOT</td></tr><tr><td>4</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_left_shift.htm\">left_shift</a>Shifts bits of a binary representation to the left</td></tr><tr><td>5</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_right_shift.htm\">right_shift</a>Shifts bits of binary representation to the right</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Following are the functions for bitwise operations available in NumPy package. Sr.No. Operation &amp; Description 1 bitwise_andComputes bitwise AND operation of array elements 2 bitwise_orComputes bitwise OR operation of array elements 3 invertComputes bitwise NOT 4 left_shiftShifts bits of a binary representation to the left 5 right_shiftShifts bits of binary representation to the right</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/340"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=340"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/340/revisions"}],"predecessor-version":[{"id":3025,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/340/revisions/3025"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=340"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=340"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=340"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":342,"date":"2020-07-04T06:08:43","date_gmt":"2020-07-04T06:08:43","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=342"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"string-functions","status":"publish","type":"post","link":"https://python3.foobrdigital.com/string-functions/","title":{"rendered":"String Functions"},"content":{"rendered":"\n<p>The following functions are used to perform vectorized string operations for arrays of dtype numpy.string_ or numpy.unicode_. They are based on the standard string functions in Python&#8217;s built-in library.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Function &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_add.htm\">add()</a>Returns element-wise string concatenation for two arrays of str or Unicode</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_multiply.htm\">multiply()</a>Returns the string with multiple concatenation, element-wise</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_center.htm\">center()</a>Returns a copy of the given string with elements centered in a string of specified length</td></tr><tr><td>4</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_capitalize.htm\">capitalize()</a>Returns a copy of the string with only the first character capitalized</td></tr><tr><td>5</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_title.htm\">title()</a>Returns the element-wise title cased version of the string or unicode</td></tr><tr><td>6</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_lower.htm\">lower()</a>Returns an array with the elements converted to lowercase</td></tr><tr><td>7</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_upper.htm\">upper()</a>Returns an array with the elements converted to uppercase</td></tr><tr><td>8</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_string_split.htm\">split()</a>Returns a list of the words in the string, using separatordelimiter</td></tr><tr><td>9</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_splitlines.htm\">splitlines()</a>Returns a list of the lines in the element, breaking at the line boundaries</td></tr><tr><td>10</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_strip.htm\">strip()</a>Returns a copy with the leading and trailing characters removed</td></tr><tr><td>11</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_join.htm\">join()</a>Returns a string which is the concatenation of the strings in the sequence</td></tr><tr><td>12</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_replace.htm\">replace()</a>Returns a copy of the string with all occurrences of substring replaced by the new string</td></tr><tr><td>13</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_decode.htm\">decode()</a>Calls str.decode element-wise</td></tr><tr><td>14</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_char_encode.htm\">encode()</a>Calls str.encode element-wise</td></tr></tbody></table></figure>\n\n\n\n<p>These functions are defined in character array class (numpy.char). The older Numarray package contained chararray class. The above functions in numpy.char class are useful in performing vectorized string operations.</p>\n","protected":false},"excerpt":{"rendered":"<p>The following functions are used to perform vectorized string operations for arrays of dtype numpy.string_ or numpy.unicode_. They are based on the standard string functions in Python&#8217;s built-in library. Sr.No. Function &amp; Description 1 add()Returns element-wise string concatenation for two arrays of str or Unicode 2 multiply()Returns the string with multiple concatenation, element-wise 3 center()Returns [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/342"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=342"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/342/revisions"}],"predecessor-version":[{"id":3043,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/342/revisions/3043"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=342"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=342"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=342"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":344,"date":"2020-07-04T06:23:52","date_gmt":"2020-07-04T06:23:52","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=344"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"mathematical-functions","status":"publish","type":"post","link":"https://python3.foobrdigital.com/mathematical-functions/","title":{"rendered":"Mathematical Functions"},"content":{"rendered":"\n<p>Quite understandably, NumPy contains a large number of various mathematical operations. NumPy provides standard trigonometric functions, functions for arithmetic operations, handling complex numbers, etc.</p>\n\n\n\n<h2>Trigonometric Functions</h2>\n\n\n\n<p>NumPy has standard trigonometric functions which return trigonometric ratios for a given angle in radians.</p>\n\n\n\n<p><strong>Example</strong>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;0,30,45,60,90]) \n\nprint 'Sine of different angles:' \n# Convert to radians by multiplying with pi/180 \nprint np.sin(a*np.pi/180) \nprint '\\n'  \n\nprint 'Cosine values for angles in array:' \nprint np.cos(a*np.pi/180) \nprint '\\n'  \n\nprint 'Tangent values for given angles:' \nprint np.tan(a*np.pi/180) </code></pre>\n\n\n\n<p>Here is its output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sine of different angles:\n&#91; 0.          0.5         0.70710678  0.8660254   1.        ]\n\nCosine values for angles in array:\n&#91;  1.00000000e+00   8.66025404e-01   7.07106781e-01   5.00000000e-01\n   6.12323400e-17]                                                            \n\nTangent values for given angles:\n&#91;  0.00000000e+00   5.77350269e-01   1.00000000e+00   1.73205081e+00\n   1.63312394e+16]</code></pre>\n\n\n\n<p><strong>arcsin, arcos,</strong>&nbsp;and&nbsp;<strong>arctan</strong>&nbsp;functions return the trigonometric inverse of sin, cos, and tan of the given angle. The result of these functions can be verified by&nbsp;<strong>numpy.degrees() function</strong>&nbsp;by converting radians to degrees.</p>\n\n\n\n<p><strong>Example</strong>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;0,30,45,60,90]) \n\nprint 'Array containing sine values:' \nsin = np.sin(a*np.pi/180) \nprint sin \nprint '\\n'  \n\nprint 'Compute sine inverse of angles. Returned values are in radians.' \ninv = np.arcsin(sin) \nprint inv \nprint '\\n'  \n\nprint 'Check result by converting to degrees:' \nprint np.degrees(inv) \nprint '\\n'  \n\nprint 'arccos and arctan functions behave similarly:' \ncos = np.cos(a*np.pi/180) \nprint cos \nprint '\\n'  \n\nprint 'Inverse of cos:' \ninv = np.arccos(cos) \nprint inv \nprint '\\n'  \n\nprint 'In degrees:' \nprint np.degrees(inv) \nprint '\\n'  \n\nprint 'Tan function:' \ntan = np.tan(a*np.pi/180) \nprint tan\nprint '\\n'  \n\nprint 'Inverse of tan:' \ninv = np.arctan(tan) \nprint inv \nprint '\\n'  \n\nprint 'In degrees:' \nprint np.degrees(inv) </code></pre>\n\n\n\n<p>Its output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Array containing sine values:\n&#91; 0.          0.5         0.70710678  0.8660254   1.        ]\n\nCompute sine inverse of angles. Returned values are in radians.\n&#91; 0.          0.52359878  0.78539816  1.04719755  1.57079633] \n\nCheck result by converting to degrees:\n&#91;  0.  30.  45.  60.  90.]\n\narccos and arctan functions behave similarly:\n&#91;  1.00000000e+00   8.66025404e-01   7.07106781e-01   5.00000000e-01          \n   6.12323400e-17] \n\nInverse of cos:\n&#91; 0.          0.52359878  0.78539816  1.04719755  1.57079633] \n\nIn degrees:\n&#91;  0.  30.  45.  60.  90.] \n\nTan function:\n&#91;  0.00000000e+00   5.77350269e-01   1.00000000e+00   1.73205081e+00          \n   1.63312394e+16]\n\nInverse of tan:\n&#91; 0.          0.52359878  0.78539816  1.04719755  1.57079633]\n\nIn degrees:\n&#91;  0.  30.  45.  60.  90.]\n﻿</code></pre>\n\n\n\n<h2>Functions for Rounding</h2>\n\n\n\n<h3>numpy.around()</h3>\n\n\n\n<p>This is a function that returns the value rounded to the desired precision. The function takes the following parameters.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.around(a,decimals)</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>a</strong>Input data</td></tr><tr><td>2</td><td><strong>decimals</strong>The number of decimals to round to. Default is 0. If negative, the integer is rounded to position to the left of the decimal point</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example</strong>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;1.0,5.55, 123, 0.567, 25.532]) \n\nprint 'Original array:' \nprint a \nprint '\\n'  \n\nprint 'After rounding:' \nprint np.around(a) \nprint np.around(a, decimals = 1) \nprint np.around(a, decimals = -1)</code></pre>\n\n\n\n<p>It produces the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Original array:                                                               \n&#91;   1.       5.55   123.       0.567   25.532] \n\nAfter rounding:                                                               \n&#91;   1.    6.   123.    1.   26. ]                                               \n&#91;   1.    5.6  123.    0.6  25.5]                                          \n&#91;   0.    10.  120.    0.   30. ]</code></pre>\n\n\n\n<h3>numpy.floor()</h3>\n\n\n\n<p>This function returns the largest integer not greater than the input parameter. The floor of the&nbsp;<strong>scalar x</strong>&nbsp;is the largest&nbsp;<strong>integer i</strong>, such that&nbsp;<strong>i &lt;= x</strong>. Note that in Python, flooring always is rounded away from 0.</p>\n\n\n\n<p><strong>Example</strong>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;-1.7, 1.5, -0.2, 0.6, 10]) \n\nprint 'The given array:' \nprint a \nprint '\\n'  \n\nprint 'The modified array:' \nprint np.floor(a)</code></pre>\n\n\n\n<p>It produces the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The given array:                                                              \n&#91; -1.7   1.5  -0.2   0.6  10. ]\n\nThe modified array:                                                           \n&#91; -2.   1.  -1.   0.  10.]\n﻿</code></pre>\n\n\n\n<h3>numpy.ceil()</h3>\n\n\n\n<p>The ceil() function returns the ceiling of an input value, i.e. the ceil of the&nbsp;<strong>scalar x</strong>&nbsp;is the smallest&nbsp;<strong>integer i</strong>, such that&nbsp;<strong>i &gt;= x.</strong></p>\n\n\n\n<p><strong>Example</strong>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;-1.7, 1.5, -0.2, 0.6, 10]) \n\nprint 'The given array:' \nprint a \nprint '\\n'  \n\nprint 'The modified array:' \nprint np.ceil(a)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The given array:                                                              \n&#91; -1.7   1.5  -0.2   0.6  10. ]\n\nThe modified array:                                                           \n&#91; -1.   2.  -0.   1.  10.]</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Quite understandably, NumPy contains a large number of various mathematical operations. NumPy provides standard trigonometric functions, functions for arithmetic operations, handling complex numbers, etc. Trigonometric Functions NumPy has standard trigonometric functions which return trigonometric ratios for a given angle in radians. ExampleLive Demo Here is its output − arcsin, arcos,&nbsp;and&nbsp;arctan&nbsp;functions return the trigonometric inverse of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/344"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=344"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/344/revisions"}],"predecessor-version":[{"id":3037,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/344/revisions/3037"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=344"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=344"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=344"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":346,"date":"2020-07-04T06:26:35","date_gmt":"2020-07-04T06:26:35","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=346"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"arithmetic-operations","status":"publish","type":"post","link":"https://python3.foobrdigital.com/arithmetic-operations/","title":{"rendered":"Arithmetic Operations"},"content":{"rendered":"\n<p>Input arrays for performing arithmetic operations such as add(), subtract(), multiply(), and divide() must be either of the same shape or should conform to array broadcasting rules.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(9, dtype = np.float_).reshape(3,3) \n\nprint 'First array:' \nprint a \nprint '\\n'  \n\nprint 'Second array:' \nb = np.array(&#91;10,10,10]) \nprint b \nprint '\\n'  \n\nprint 'Add the two arrays:' \nprint np.add(a,b) \nprint '\\n'  \n\nprint 'Subtract the two arrays:' \nprint np.subtract(a,b) \nprint '\\n'  \n\nprint 'Multiply the two arrays:' \nprint np.multiply(a,b) \nprint '\\n'  \n\nprint 'Divide the two arrays:' \nprint np.divide(a,b)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>First array:\n&#91;&#91; 0. 1. 2.]\n &#91; 3. 4. 5.]\n &#91; 6. 7. 8.]]\n\nSecond array:\n&#91;10 10 10]\n\nAdd the two arrays:\n&#91;&#91; 10. 11. 12.]\n &#91; 13. 14. 15.]\n &#91; 16. 17. 18.]]\n\nSubtract the two arrays:\n&#91;&#91;-10. -9. -8.]\n &#91; -7. -6. -5.]\n &#91; -4. -3. -2.]]\n\nMultiply the two arrays:\n&#91;&#91; 0. 10. 20.]\n &#91; 30. 40. 50.]\n &#91; 60. 70. 80.]]\n\nDivide the two arrays:\n&#91;&#91; 0. 0.1 0.2]\n &#91; 0.3 0.4 0.5]\n &#91; 0.6 0.7 0.8]]</code></pre>\n\n\n\n<p>Let us now discuss some of the other important arithmetic functions available in NumPy.</p>\n\n\n\n<h2>numpy.reciprocal()</h2>\n\n\n\n<p>This function returns the reciprocal of argument, element-wise. For elements with absolute values larger than 1, the result is always 0 because of the way in which Python handles integer division. For integer 0, an overflow warning is issued.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-preformatted\">import numpy as np <br>a = np.array([0.25, 1.33, 1, 0, 100]) <br><br>print 'Our array is:' <br>print a <br>print '\\n'  <br><br>print 'After applying reciprocal function:' <br>print np.reciprocal(a) <br>print '\\n'  <br><br>b = np.array([100], dtype = int) <br>print 'The second array is:' <br>print b <br>print '\\n'  <br><br>print 'After applying reciprocal function:' <br>print np.reciprocal(b) </pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;   0.25    1.33    1.      0.    100.  ]\n\nAfter applying reciprocal function:\nmain.py:9: RuntimeWarning: divide by zero encountered in reciprocal\n  print np.reciprocal(a)\n&#91; 4.         0.7518797  1.               inf  0.01     ]\n\nThe second array is:\n&#91;100]\n\nAfter applying reciprocal function:\n&#91;0]\n﻿</code></pre>\n\n\n\n<h2>numpy.power()</h2>\n\n\n\n<p>This function treats elements in the first input array as base and returns it raised to the power of the corresponding element in the second input array.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;10,100,1000]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Applying power function:' \nprint np.power(a,2) \nprint '\\n'  \n\nprint 'Second array:' \nb = np.array(&#91;1,2,3]) \nprint b \nprint '\\n'  \n\nprint 'Applying power function again:' \nprint np.power(a,b)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;  10  100 1000]\n\nApplying power function:\n&#91;    100   10000 1000000]\n\nSecond array:\n&#91;1 2 3]\n\nApplying power function again:\n&#91;        10      10000 1000000000]</code></pre>\n\n\n\n<h2>numpy.mod()</h2>\n\n\n\n<p>This function returns the remainder of division of the corresponding elements in the input array. The function <strong>numpy.remainder()</strong> also produces the same result.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;10,20,30]) \nb = np.array(&#91;3,5,7]) \n\nprint 'First array:' \nprint a \nprint '\\n'  \n\nprint 'Second array:' \nprint b \nprint '\\n'  \n\nprint 'Applying mod() function:' \nprint np.mod(a,b) \nprint '\\n'  \n\nprint 'Applying remainder() function:' \nprint np.remainder(a,b) </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>First array:                                                                  \n&#91;10 20 30]\n\nSecond array:                                                                 \n&#91;3 5 7]\n\nApplying mod() function:                                                      \n&#91;1 0 2]\n\nApplying remainder() function:                                                \n&#91;1 0 2]</code></pre>\n\n\n\n<p>The following functions are used to perform operations on array with complex numbers.</p>\n\n\n\n<ul><li><strong>numpy.real()</strong>&nbsp;− returns the real part of the complex data type argument.</li><li><strong>numpy.imag()</strong>&nbsp;− returns the imaginary part of the complex data type argument.</li><li><strong>numpy.conj()</strong>&nbsp;− returns the complex conjugate, which is obtained by changing the sign of the imaginary part.</li><li><strong>numpy.angle()</strong>&nbsp;− returns the angle of the complex argument. The function has degree parameter. If true, the angle in the degree is returned, otherwise the angle is in radians.</li></ul>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;-5.6j, 0.2j, 11. , 1+1j]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Applying real() function:' \nprint np.real(a) \nprint '\\n'  \n\nprint 'Applying imag() function:' \nprint np.imag(a) \nprint '\\n'  \n\nprint 'Applying conj() function:' \nprint np.conj(a) \nprint '\\n'  \n\nprint 'Applying angle() function:' \nprint np.angle(a) \nprint '\\n'  \n\nprint 'Applying angle() function again (result in degrees)' \nprint np.angle(a, deg = True)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91; 0.-5.6j 0.+0.2j 11.+0.j 1.+1.j ]\n\nApplying real() function:\n&#91; 0. 0. 11. 1.]\n\nApplying imag() function:\n&#91;-5.6 0.2 0. 1. ]\n\nApplying conj() function:\n&#91; 0.+5.6j 0.-0.2j 11.-0.j 1.-1.j ]\n\nApplying angle() function:\n&#91;-1.57079633 1.57079633 0. 0.78539816]\n\nApplying angle() function again (result in degrees)\n&#91;-90. 90. 0. 45.]</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Input arrays for performing arithmetic operations such as add(), subtract(), multiply(), and divide() must be either of the same shape or should conform to array broadcasting rules. Example Live Demo It will produce the following output − Let us now discuss some of the other important arithmetic functions available in NumPy. numpy.reciprocal() This function returns [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/346"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=346"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/346/revisions"}],"predecessor-version":[{"id":3019,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/346/revisions/3019"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=346"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=346"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=346"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":348,"date":"2020-07-04T06:31:15","date_gmt":"2020-07-04T06:31:15","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=348"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"statistical-functions","status":"publish","type":"post","link":"https://python3.foobrdigital.com/statistical-functions/","title":{"rendered":"Statistical Functions"},"content":{"rendered":"\n<p>NumPy has quite a few useful statistical functions for finding minimum, maximum, percentile standard deviation and variance, etc. from the given elements in the array. The functions are explained as follows −</p>\n\n\n\n<h2>numpy.amin() and numpy.amax()</h2>\n\n\n\n<p>These functions return the minimum and the maximum from the elements in the given array along the specified axis.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;3,7,5],&#91;8,4,3],&#91;2,4,9]]) \n\nprint 'Our array is:' \nprint a  \nprint '\\n'  \n\nprint 'Applying amin() function:' \nprint np.amin(a,1) \nprint '\\n'  \n\nprint 'Applying amin() function again:' \nprint np.amin(a,0) \nprint '\\n'  \n\nprint 'Applying amax() function:' \nprint np.amax(a) \nprint '\\n'  \n\nprint 'Applying amax() function again:' \nprint np.amax(a, axis = 0)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;3 7 5]\n&#91;8 4 3]\n&#91;2 4 9]]\n\nApplying amin() function:\n&#91;3 3 2]\n\nApplying amin() function again:\n&#91;2 4 3]\n\nApplying amax() function:\n9\n\nApplying amax() function again:\n&#91;8 7 9]</code></pre>\n\n\n\n<h2>numpy.ptp()</h2>\n\n\n\n<p>The <strong>numpy.ptp()</strong> function returns the range (maximum-minimum) of values along an axis.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;3,7,5],&#91;8,4,3],&#91;2,4,9]]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Applying ptp() function:' \nprint np.ptp(a) \nprint '\\n'  \n\nprint 'Applying ptp() function along axis 1:' \nprint np.ptp(a, axis = 1) \nprint '\\n'   \n\nprint 'Applying ptp() function along axis 0:'\nprint np.ptp(a, axis = 0) </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;3 7 5]\n&#91;8 4 3]\n&#91;2 4 9]]\n\nApplying ptp() function:\n7\n\nApplying ptp() function along axis 1:\n&#91;4 5 7]\n\nApplying ptp() function along axis 0:\n&#91;6 3 6]</code></pre>\n\n\n\n<h2>numpy.percentile()</h2>\n\n\n\n<p>Percentile (or a centile) is a measure used in statistics indicating the value below which a given percentage of observations in a group of observations fall. The function <strong>numpy.percentile()</strong> takes the following arguments.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.percentile(a, q, axis)</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Argument &amp; Description</th></tr><tr><td>1</td><td><strong>a</strong>Input array</td></tr><tr><td>2</td><td><strong>q</strong>The percentile to compute must be between 0-100</td></tr><tr><td>3</td><td><strong>axis</strong>The axis along which the percentile is to be calculated</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;30,40,70],&#91;80,20,10],&#91;50,90,60]]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Applying percentile() function:' \nprint np.percentile(a,50) \nprint '\\n'  \n\nprint 'Applying percentile() function along axis 1:' \nprint np.percentile(a,50, axis = 1) \nprint '\\n'  \n\nprint 'Applying percentile() function along axis 0:' \nprint np.percentile(a,50, axis = 0)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;30 40 70]\n &#91;80 20 10]\n &#91;50 90 60]]\n\nApplying percentile() function:\n50.0\n\nApplying percentile() function along axis 1:\n&#91; 40. 20. 60.]\n\nApplying percentile() function along axis 0:\n&#91; 50. 40. 60.]</code></pre>\n\n\n\n<h2>numpy.median()</h2>\n\n\n\n<p><strong>Median</strong>&nbsp;is defined as the value separating the higher half of a data sample from the lower half. The&nbsp;<strong>numpy.median()</strong>&nbsp;function is used as shown in the following program.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;30,65,70],&#91;80,95,10],&#91;50,90,60]]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Applying median() function:' \nprint np.median(a) \nprint '\\n'  \n\nprint 'Applying median() function along axis 0:' \nprint np.median(a, axis = 0) \nprint '\\n'  \n \nprint 'Applying median() function along axis 1:' \nprint np.median(a, axis = 1)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;30 65 70]\n &#91;80 95 10]\n &#91;50 90 60]]\n\nApplying median() function:\n65.0\n\nApplying median() function along axis 0:\n&#91; 50. 90. 60.]\n\nApplying median() function along axis 1:\n&#91; 65. 80. 60.]</code></pre>\n\n\n\n<h2>numpy.mean()</h2>\n\n\n\n<p>Arithmetic mean is the sum of elements along an axis divided by the number of elements. The&nbsp;<strong>numpy.mean()</strong>&nbsp;function returns the arithmetic mean of elements in the array. If the axis is mentioned, it is calculated along it.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;1,2,3],&#91;3,4,5],&#91;4,5,6]]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Applying mean() function:' \nprint np.mean(a) \nprint '\\n'  \n\nprint 'Applying mean() function along axis 0:' \nprint np.mean(a, axis = 0) \nprint '\\n'  \n\nprint 'Applying mean() function along axis 1:' \nprint np.mean(a, axis = 1)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;1 2 3]\n &#91;3 4 5]\n &#91;4 5 6]]\n\nApplying mean() function:\n3.66666666667\n\nApplying mean() function along axis 0:\n&#91; 2.66666667 3.66666667 4.66666667]\n\nApplying mean() function along axis 1:\n&#91; 2. 4. 5.]</code></pre>\n\n\n\n<h2>numpy.average()</h2>\n\n\n\n<p>Weighted average is an average resulting from the multiplication of each component by a factor reflecting its importance. The&nbsp;<strong>numpy.average()</strong>&nbsp;function computes the weighted average of elements in an array according to their respective weight given in another array. The function can have an axis parameter. If the axis is not specified, the array is flattened.</p>\n\n\n\n<p>Considering an array [1,2,3,4] and corresponding weights [4,3,2,1], the weighted average is calculated by adding the product of the corresponding elements and dividing the sum by the sum of weights.</p>\n\n\n\n<p>Weighted average = (1*4+2*3+3*2+4*1)/(4+3+2+1)</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;1,2,3,4]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Applying average() function:' \nprint np.average(a) \nprint '\\n'  \n\n# this is same as mean when weight is not specified \nwts = np.array(&#91;4,3,2,1]) \n\nprint 'Applying average() function again:' \nprint np.average(a,weights = wts) \nprint '\\n'  \n\n# Returns the sum of weights, if the returned parameter is set to True. \nprint 'Sum of weights' \nprint np.average(&#91;1,2,3, 4],weights = &#91;4,3,2,1], returned = True)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;1 2 3 4]\n\nApplying average() function:\n2.5\n\nApplying average() function again:\n2.0\n\nSum of weights\n(2.0, 10.0)\n﻿</code></pre>\n\n\n\n<p>In a multi-dimensional array, the axis for computation can be specified.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(6).reshape(3,2) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Modified array:' \nwt = np.array(&#91;3,5]) \nprint np.average(a, axis = 1, weights = wt) \nprint '\\n'  \n\nprint 'Modified array:' \nprint np.average(a, axis = 1, weights = wt, returned = True)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;0 1]\n &#91;2 3]\n &#91;4 5]]\n\nModified array:\n&#91; 0.625 2.625 4.625]\n\nModified array:\n(array(&#91; 0.625, 2.625, 4.625]), array(&#91; 8., 8., 8.]))</code></pre>\n\n\n\n<h2>Standard Deviation</h2>\n\n\n\n<p>Standard deviation is the square root of the average of squared deviations from mean. The formula for standard deviation is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>std = sqrt(mean(abs(x - x.mean())**2))</code></pre>\n\n\n\n<p>If the array is [1, 2, 3, 4], then its mean is 2.5. Hence the squared deviations are [2.25, 0.25, 0.25, 2.25] and the square root of its mean divided by 4, i.e., sqrt (5/4) is 1.1180339887498949.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><a rel=\"noreferrer noopener\" href=\"http://tpcg.io/aNdFyg\" target=\"_blank\">Live Demo</a></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nprint np.std(&#91;1,2,3,4])</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1.1180339887498949 </code></pre>\n\n\n\n<h2>Variance</h2>\n\n\n\n<p>Variance is the average of squared deviations, i.e.,&nbsp;<strong>mean(abs(x &#8211; x.mean())**2)</strong>. In other words, the standard deviation is the square root of variance.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nprint np.var(&#91;1,2,3,4])</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1.25</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>NumPy has quite a few useful statistical functions for finding minimum, maximum, percentile standard deviation and variance, etc. from the given elements in the array. The functions are explained as follows − numpy.amin() and numpy.amax() These functions return the minimum and the maximum from the elements in the given array along the specified axis. Example [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/348"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=348"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/348/revisions"}],"predecessor-version":[{"id":3042,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/348/revisions/3042"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=348"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=348"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=348"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":350,"date":"2020-07-04T06:34:05","date_gmt":"2020-07-04T06:34:05","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=350"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"sort-search-counting-functions","status":"publish","type":"post","link":"https://python3.foobrdigital.com/sort-search-counting-functions/","title":{"rendered":"Sort, Search &#038; Counting Functions"},"content":{"rendered":"\n<p>A variety of sorting related functions are available in NumPy. These sorting functions implement different sorting algorithms, each of them characterized by the speed of execution, worst case performance, the workspace required and the stability of algorithms. Following table shows the comparison of three sorting algorithms.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>kind</th><th>speed</th><th>worst case</th><th>work space</th><th>stable</th></tr><tr><td>‘quicksort’</td><td>1</td><td>O(n^2)</td><td>0</td><td>no</td></tr><tr><td>‘mergesort’</td><td>2</td><td>O(n*log(n))</td><td>~n/2</td><td>yes</td></tr><tr><td>‘heapsort’</td><td>3</td><td>O(n*log(n))</td><td>0</td><td>no</td></tr></tbody></table></figure>\n\n\n\n<h2>numpy.sort()</h2>\n\n\n\n<p>The sort() function returns a sorted copy of the input array. It has the following parameters −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.sort(a, axis, kind, order)\n﻿</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>a</strong>Array to be sorted</td></tr><tr><td>2</td><td><strong>axis</strong>The axis along which the array is to be sorted. If none, the array is flattened, sorting on the last axis</td></tr><tr><td>3</td><td><strong>kind</strong>Default is quicksort</td></tr><tr><td>4</td><td><strong>order</strong>If the array contains fields, the order of fields to be sorted</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np  \na = np.array(&#91;&#91;3,7],&#91;9,1]]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'\n\nprint 'Applying sort() function:' \nprint np.sort(a) \nprint '\\n' \n  \nprint 'Sort along axis 0:' \nprint np.sort(a, axis = 0) \nprint '\\n'  \n\n# Order parameter in sort function \ndt = np.dtype(&#91;('name', 'S10'),('age', int)]) \na = np.array(&#91;(\"raju\",21),(\"anil\",25),(\"ravi\", 17), (\"amar\",27)], dtype = dt) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Order by name:' \nprint np.sort(a, order = 'name')</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;3 7]\n &#91;9 1]]\n\nApplying sort() function:\n&#91;&#91;3 7]\n &#91;1 9]]\n\nSort along axis 0:\n&#91;&#91;3 1]\n &#91;9 7]]\n\nOur array is:\n&#91;('raju', 21) ('anil', 25) ('ravi', 17) ('amar', 27)]\n\nOrder by name:\n&#91;('amar', 27) ('anil', 25) ('raju', 21) ('ravi', 17)]</code></pre>\n\n\n\n<h2>numpy.argsort()</h2>\n\n\n\n<p>The&nbsp;<strong>numpy.argsort()</strong>&nbsp;function performs an indirect sort on input array, along the given axis and using a specified kind of sort to return the array of indices of data. This indices array is used to construct the sorted array.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.array(&#91;3, 1, 2]) \n\nprint 'Our array is:' \nprint x \nprint '\\n'  \n\nprint 'Applying argsort() to x:' \ny = np.argsort(x) \nprint y \nprint '\\n'  \n\nprint 'Reconstruct original array in sorted order:' \nprint x&#91;y] \nprint '\\n'  \n\nprint 'Reconstruct the original array using loop:' \nfor i in y: \n   print x&#91;i],</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;3 1 2]\n\nApplying argsort() to x:\n&#91;1 2 0]\n\nReconstruct original array in sorted order:\n&#91;1 2 3]\n\nReconstruct the original array using loop:\n1 2 3\n﻿</code></pre>\n\n\n\n<h2>numpy.lexsort()</h2>\n\n\n\n<p>function performs an indirect sort using a sequence of keys. The keys can be seen as a column in a spreadsheet. The function returns an array of indices, using which the sorted data can be obtained. Note, that the last key happens to be the primary key of sort.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n\nnm = ('raju','anil','ravi','amar') \ndv = ('f.y.', 's.y.', 's.y.', 'f.y.') \nind = np.lexsort((dv,nm)) \n\nprint 'Applying lexsort() function:' \nprint ind \nprint '\\n'  \n\nprint 'Use this index to get sorted data:' \nprint &#91;nm&#91;i] + \", \" + dv&#91;i] for i in ind] </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Applying lexsort() function:\n&#91;3 1 0 2]\n\nUse this index to get sorted data:\n&#91;'amar, f.y.', 'anil, s.y.', 'raju, f.y.', 'ravi, s.y.']</code></pre>\n\n\n\n<p>NumPy module has a number of functions for searching inside an array. Functions for finding the maximum, the minimum as well as the elements satisfying a given condition are available.</p>\n\n\n\n<h2>numpy.argmax() and numpy.argmin()</h2>\n\n\n\n<p>These two functions return the indices of maximum and minimum elements respectively along the given axis.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;30,40,70],&#91;80,20,10],&#91;50,90,60]]) \n\nprint 'Our array is:' \nprint a \nprint '\\n' \n\nprint 'Applying argmax() function:' \nprint np.argmax(a) \nprint '\\n'  \n\nprint 'Index of maximum number in flattened array' \nprint a.flatten() \nprint '\\n'  \n\nprint 'Array containing indices of maximum along axis 0:' \nmaxindex = np.argmax(a, axis = 0) \nprint maxindex \nprint '\\n'  \n\nprint 'Array containing indices of maximum along axis 1:' \nmaxindex = np.argmax(a, axis = 1) \nprint maxindex \nprint '\\n'  \n\nprint 'Applying argmin() function:' \nminindex = np.argmin(a) \nprint minindex \nprint '\\n'  \n   \nprint 'Flattened array:' \nprint a.flatten()&#91;minindex] \nprint '\\n'  \n\nprint 'Flattened array along axis 0:' \nminindex = np.argmin(a, axis = 0) \nprint minindex\nprint '\\n'\n\nprint 'Flattened array along axis 1:' \nminindex = np.argmin(a, axis = 1) \nprint minindex</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;30 40 70]\n &#91;80 20 10]\n &#91;50 90 60]]\n\nApplying argmax() function:\n7\n\nIndex of maximum number in flattened array\n&#91;30 40 70 80 20 10 50 90 60]\n\nArray containing indices of maximum along axis 0:\n&#91;1 2 0]\n\nArray containing indices of maximum along axis 1:\n&#91;2 0 1]\n\nApplying argmin() function:\n5\n\nFlattened array:\n10\n\nFlattened array along axis 0:\n&#91;0 1 1]\n\nFlattened array along axis 1:\n&#91;0 2 0]</code></pre>\n\n\n\n<h2>numpy.nonzero()</h2>\n\n\n\n<p>The&nbsp;<strong>numpy.nonzero()</strong>&nbsp;function returns the indices of non-zero elements in the input array.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;30,40,0],&#91;0,20,10],&#91;50,0,60]]) \n\nprint 'Our array is:' \nprint a \nprint '\\n'  \n\nprint 'Applying nonzero() function:' \nprint np.nonzero (a)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;30 40 0]\n &#91; 0 20 10]\n &#91;50 0 60]]\n\nApplying nonzero() function:\n(array(&#91;0, 0, 1, 1, 2, 2]), array(&#91;0, 1, 1, 2, 0, 2]))</code></pre>\n\n\n\n<h2>numpy.where()</h2>\n\n\n\n<p>The where() function returns the indices of elements in an input array where the given condition is satisfied.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.arange(9.).reshape(3, 3) \n\nprint 'Our array is:' \nprint x  \n\nprint 'Indices of elements > 3' \ny = np.where(x > 3) \nprint y  \n\nprint 'Use these indices to get elements satisfying the condition' \nprint x&#91;y]</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91; 0. 1. 2.]\n &#91; 3. 4. 5.]\n &#91; 6. 7. 8.]]\n\nIndices of elements > 3\n(array(&#91;1, 1, 2, 2, 2]), array(&#91;1, 2, 0, 1, 2]))\n\nUse these indices to get elements satisfying the condition\n&#91; 4. 5. 6. 7. 8.]\n﻿</code></pre>\n\n\n\n<h2>numpy.extract()</h2>\n\n\n\n<p>The <strong>extract()</strong> function returns the elements satisfying any condition.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nx = np.arange(9.).reshape(3, 3) \n\nprint 'Our array is:' \nprint x  \n\n# define a condition \ncondition = np.mod(x,2) == 0 \n\nprint 'Element-wise value of condition' \nprint condition  \n\nprint 'Extract elements using condition' \nprint np.extract(condition, x)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91; 0. 1. 2.]\n &#91; 3. 4. 5.]\n &#91; 6. 7. 8.]]\n\nElement-wise value of condition\n&#91;&#91; True False True]\n &#91;False True False]\n &#91; True False True]]\n\nExtract elements using condition\n&#91; 0. 2. 4. 6. 8.]</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>A variety of sorting related functions are available in NumPy. These sorting functions implement different sorting algorithms, each of them characterized by the speed of execution, worst case performance, the workspace required and the stability of algorithms. Following table shows the comparison of three sorting algorithms. kind speed worst case work space stable ‘quicksort’ 1 [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/350"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=350"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/350/revisions"}],"predecessor-version":[{"id":3041,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/350/revisions/3041"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=350"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=350"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=350"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":352,"date":"2020-07-04T06:35:07","date_gmt":"2020-07-04T06:35:07","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=352"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"byte-swapping","status":"publish","type":"post","link":"https://python3.foobrdigital.com/byte-swapping/","title":{"rendered":"Byte Swapping"},"content":{"rendered":"\n<p>We have seen that the data stored in the memory of a computer depends on which architecture the CPU uses. It may be little-endian (least significant is stored in the smallest address) or big-endian (most significant byte in the smallest address).</p>\n\n\n\n<h2>numpy.ndarray.byteswap()</h2>\n\n\n\n<p>The <strong>numpy.ndarray.byteswap()</strong> function toggles between the two representations: bigendian and little-endian.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;1, 256, 8755], dtype = np.int16) \n\nprint 'Our array is:' \nprint a  \n\nprint 'Representation of data in memory in hexadecimal form:'  \nprint map(hex,a)  \n# byteswap() function swaps in place by passing True parameter \n\nprint 'Applying byteswap() function:' \nprint a.byteswap(True) \n\nprint 'In hexadecimal form:' \nprint map(hex,a) \n# We can see the bytes being swapped</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;1 256 8755]\n\nRepresentation of data in memory in hexadecimal form:\n&#91;'0x1', '0x100', '0x2233']\n\nApplying byteswap() function:\n&#91;256 1 13090]\n\nIn hexadecimal form:\n&#91;'0x100', '0x1', '0x3322']</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>We have seen that the data stored in the memory of a computer depends on which architecture the CPU uses. It may be little-endian (least significant is stored in the smallest address) or big-endian (most significant byte in the smallest address). numpy.ndarray.byteswap() The numpy.ndarray.byteswap() function toggles between the two representations: bigendian and little-endian.Live Demo It will produce [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/352"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=352"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/352/revisions"}],"predecessor-version":[{"id":3027,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/352/revisions/3027"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=352"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=352"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=352"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":354,"date":"2020-07-04T06:36:52","date_gmt":"2020-07-04T06:36:52","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=354"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"copies-views","status":"publish","type":"post","link":"https://python3.foobrdigital.com/copies-views/","title":{"rendered":"Copies &#038; Views"},"content":{"rendered":"\n<p>While executing the functions, some of them return a copy of the input array, while some return the view. When the contents are physically stored in another location, it is called&nbsp;<strong>Copy</strong>. If on the other hand, a different view of the same memory content is provided, we call it as&nbsp;<strong>View</strong>.</p>\n\n\n\n<h2>No Copy</h2>\n\n\n\n<p>Simple assignments do not make the copy of array object. Instead, it uses the same id() of the original array to access it. The&nbsp;<strong>id()</strong>&nbsp;returns a universal identifier of Python object, similar to the pointer in C.</p>\n\n\n\n<p>Furthermore, any changes in either gets reflected in the other. For example, the changing shape of one will change the shape of the other too.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.arange(6) \n\nprint 'Our array is:' \nprint a  \n\nprint 'Applying id() function:' \nprint id(a)  \n\nprint 'a is assigned to b:' \nb = a \nprint b  \n\nprint 'b has same id():' \nprint id(b)  \n\nprint 'Change shape of b:' \nb.shape = 3,2 \nprint b  \n\nprint 'Shape of a also gets changed:' \nprint a</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;0 1 2 3 4 5]\n\nApplying id() function:\n139747815479536\n\na is assigned to b:\n&#91;0 1 2 3 4 5]\nb has same id():\n139747815479536\n\nChange shape of b:\n&#91;&#91;0 1]\n &#91;2 3]\n &#91;4 5]]\n\nShape of a also gets changed:\n&#91;&#91;0 1]\n &#91;2 3]\n &#91;4 5]]</code></pre>\n\n\n\n<h2>View or Shallow Copy</h2>\n\n\n\n<p>NumPy has&nbsp;<strong>ndarray.view()</strong>&nbsp;method which is a new array object that looks at the same data of the original array. Unlike the earlier case, change in dimensions of the new array doesn’t change dimensions of the original.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n# To begin with, a is 3X2 array \na = np.arange(6).reshape(3,2) \n\nprint 'Array a:' \nprint a  \n\nprint 'Create view of a:' \nb = a.view() \nprint b  \n\nprint 'id() for both the arrays are different:' \nprint 'id() of a:'\nprint id(a)  \nprint 'id() of b:' \nprint id(b)  \n\n# Change the shape of b. It does not change the shape of a \nb.shape = 2,3 \n\nprint 'Shape of b:' \nprint b  \n\nprint 'Shape of a:' \nprint a</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Array a:\n&#91;&#91;0 1]\n &#91;2 3]\n &#91;4 5]]\n\nCreate view of a:\n&#91;&#91;0 1]\n &#91;2 3]\n &#91;4 5]]\n\nid() for both the arrays are different:\nid() of a:\n140424307227264\nid() of b:\n140424151696288\n\nShape of b:\n&#91;&#91;0 1 2]\n &#91;3 4 5]]\n\nShape of a:\n&#91;&#91;0 1]\n &#91;2 3]\n &#91;4 5]]</code></pre>\n\n\n\n<p>Slice of an array creates a view.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;10,10], &#91;2,3], &#91;4,5]]) \n\nprint 'Our array is:' \nprint a  \n\nprint 'Create a slice:' \ns = a&#91;:, :2] \nprint s </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Our array is:\n&#91;&#91;10 10]\n &#91; 2 3]\n &#91; 4 5]]\n\nCreate a slice:\n&#91;&#91;10 10]\n &#91; 2 3]\n &#91; 4 5]]</code></pre>\n\n\n\n<h2>Deep Copy</h2>\n\n\n\n<p>The&nbsp;<strong>ndarray.copy()</strong>&nbsp;function creates a deep copy. It is a complete copy of the array and its data, and doesn’t share with the original array.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;&#91;10,10], &#91;2,3], &#91;4,5]]) \n\nprint 'Array a is:' \nprint a  \n\nprint 'Create a deep copy of a:' \nb = a.copy() \nprint 'Array b is:' \nprint b \n\n#b does not share any memory of a \nprint 'Can we write b is a' \nprint b is a  \n\nprint 'Change the contents of b:' \nb&#91;0,0] = 100 \n\nprint 'Modified array b:' \nprint b  \n\nprint 'a remains unchanged:' \nprint a</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Array a is:\n&#91;&#91;10 10]\n &#91; 2 3]\n &#91; 4 5]]\n\nCreate a deep copy of a:\nArray b is:\n&#91;&#91;10 10]\n &#91; 2 3]\n &#91; 4 5]]\nCan we write b is a\nFalse\n\nChange the contents of b:\nModified array b:\n&#91;&#91;100 10]\n &#91; 2 3]\n &#91; 4 5]]\n\na remains unchanged:\n&#91;&#91;10 10]\n &#91; 2 3]\n &#91; 4 5]]</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>While executing the functions, some of them return a copy of the input array, while some return the view. When the contents are physically stored in another location, it is called&nbsp;Copy. If on the other hand, a different view of the same memory content is provided, we call it as&nbsp;View. No Copy Simple assignments do [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/354"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=354"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/354/revisions"}],"predecessor-version":[{"id":3028,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/354/revisions/3028"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=354"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=354"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=354"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":356,"date":"2020-07-04T06:42:15","date_gmt":"2020-07-04T06:42:15","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=356"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"matrix-library","status":"publish","type":"post","link":"https://python3.foobrdigital.com/matrix-library/","title":{"rendered":"Matrix Library"},"content":{"rendered":"\n<p>NumPy package contains a Matrix library&nbsp;<strong>numpy.matlib</strong>. This module has functions that return matrices instead of ndarray objects.</p>\n\n\n\n<h2>matlib.empty()</h2>\n\n\n\n<p>The <strong>matlib.empty()</strong> function returns a new matrix without initializing the entries. The function takes the following parameters.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.matlib.empty(shape, dtype, order</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>shape</strong><strong>int</strong>&nbsp;or tuple of&nbsp;<strong>int</strong>&nbsp;defining the shape of the new matrix</td></tr><tr><td>2</td><td><strong>Dtype</strong>Optional. Data type of the output</td></tr><tr><td>3</td><td><strong>order</strong>C or F</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np \n\nprint np.matlib.empty((2,2)) \n# filled with random data</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91; 2.12199579e-314,   4.24399158e-314] \n &#91; 4.24399158e-314,   2.12199579e-314]] </code></pre>\n\n\n\n<h2>numpy.matlib.zeros()</h2>\n\n\n\n<p>This function returns the matrix filled with zeros.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np \nprint np.matlib.zeros((2,2)) </code></pre>\n\n\n\n<p></p>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91; 0.  0.] \n &#91; 0.  0.]] \n﻿</code></pre>\n\n\n\n<h2>numpy.matlib.ones()</h2>\n\n\n\n<p>This function returns the matrix filled with 1s.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np \nprint np.matlib.ones((2,2))</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91; 1.  1.] \n &#91; 1.  1.]] </code></pre>\n\n\n\n<h2>numpy.matlib.eye()</h2>\n\n\n\n<p>This function returns a matrix with 1 along the diagonal elements and the zeros elsewhere. The function takes the following parameters.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>numpy.matlib.eye(n, M,k, dtype)</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>n</strong>The number of rows in the resulting matrix</td></tr><tr><td>2</td><td><strong>M</strong>The number of columns, defaults to n</td></tr><tr><td>3</td><td><strong>k</strong>Index of diagonal</td></tr><tr><td>4</td><td><strong>dtype</strong>Data type of the output</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np \nprint np.matlib.eye(n = 3, M = 4, k = 0, dtype = float)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91; 1.  0.  0.  0.] \n &#91; 0.  1.  0.  0.] \n &#91; 0.  0.  1.  0.]] </code></pre>\n\n\n\n<h2>numpy.matlib.identity()</h2>\n\n\n\n<p>The <strong>numpy.matlib.identity()</strong> function returns the Identity matrix of the given size. An identity matrix is a square matrix with all diagonal elements as 1.Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np \nprint np.matlib.identity(5, dtype = float)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91; 1.  0.  0.  0.  0.] \n &#91; 0.  1.  0.  0.  0.] \n &#91; 0.  0.  1.  0.  0.] \n &#91; 0.  0.  0.  1.  0.] \n &#91; 0.  0.  0.  0.  1.]] </code></pre>\n\n\n\n<h2>numpy.matlib.rand()</h2>\n\n\n\n<p>The&nbsp;<strong>numpy.matlib.rand()</strong>&nbsp;function returns a matrix of the given size filled with random values.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np \nprint np.matlib.rand(3,3)</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91; 0.82674464  0.57206837  0.15497519] \n &#91; 0.33857374  0.35742401  0.90895076] \n &#91; 0.03968467  0.13962089  0.39665201]]\n﻿</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;that a matrix is always two-dimensional, whereas ndarray is an n-dimensional array. Both the objects are inter-convertible.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Live Demo</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np  \n\ni = np.matrix('1,2;3,4') \nprint i </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1  2] \n &#91;3  4]]\n﻿</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np  \n\nj = np.asarray(i) \nprint j </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1  2] \n &#91;3  4]] \n﻿</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy.matlib \nimport numpy as np  \n\nk = np.asmatrix (j) \nprint k</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1  2] \n &#91;3  4]]</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>NumPy package contains a Matrix library&nbsp;numpy.matlib. This module has functions that return matrices instead of ndarray objects. matlib.empty() The matlib.empty() function returns a new matrix without initializing the entries. The function takes the following parameters. Where, Sr.No. Parameter &amp; Description 1 shapeint&nbsp;or tuple of&nbsp;int&nbsp;defining the shape of the new matrix 2 DtypeOptional. Data type of the output [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/356"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=356"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/356/revisions"}],"predecessor-version":[{"id":3039,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/356/revisions/3039"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=356"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=356"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=356"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":358,"date":"2020-07-04T07:00:53","date_gmt":"2020-07-04T07:00:53","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=358"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"linear-algebra","status":"publish","type":"post","link":"https://python3.foobrdigital.com/linear-algebra/","title":{"rendered":"Linear Algebra"},"content":{"rendered":"\n<p>NumPy package contains&nbsp;<strong>numpy.linalg</strong>&nbsp;module that provides all the functionality required for linear algebra. Some of the important functions in this module are described in the following table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Function &amp; Description</th></tr><tr><td>1</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_dot.htm\">dot</a>Dot product of the two arrays</td></tr><tr><td>2</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_vdot.htm\">vdot</a>Dot product of the two vectors</td></tr><tr><td>3</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_inner.htm\">inner</a>Inner product of the two arrays</td></tr><tr><td>4</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_matmul.htm\">matmul</a>Matrix product of the two arrays</td></tr><tr><td>5</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_determinant.htm\">determinant</a>Computes the determinant of the array</td></tr><tr><td>6</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_solve.htm\">solve</a>Solves the linear matrix equation</td></tr><tr><td>7</td><td><a href=\"https://www.tutorialspoint.com/numpy/numpy_inv.htm\">inv</a>Finds the multiplicative inverse of the matrix</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>NumPy package contains&nbsp;numpy.linalg&nbsp;module that provides all the functionality required for linear algebra. Some of the important functions in this module are described in the following table. Sr.No. Function &amp; Description 1 dotDot product of the two arrays 2 vdotDot product of the two vectors 3 innerInner product of the two arrays 4 matmulMatrix product of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/358"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=358"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/358/revisions"}],"predecessor-version":[{"id":3036,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/358/revisions/3036"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=358"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=358"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=358"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":360,"date":"2020-07-04T07:02:48","date_gmt":"2020-07-04T07:02:48","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=360"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"matplotlib-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/matplotlib-2/","title":{"rendered":"Matplotlib"},"content":{"rendered":"\n<p>Matplotlib is a plotting library for Python. It is used along with NumPy to provide an environment that is an effective open source alternative for MatLab. It can also be used with graphics toolkits like PyQt and wxPython.</p>\n\n\n\n<p>Matplotlib module was first written by John D. Hunter. Since 2012, Michael Droettboom is the principal developer. Currently, Matplotlib ver. 1.5.1 is the stable version available. The package is available in binary distribution as well as in the source code form on www.matplotlib.org.</p>\n\n\n\n<p>Conventionally, the package is imported into the Python script by adding the following statement −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from matplotlib import pyplot as plt\n﻿</code></pre>\n\n\n\n<p>Here&nbsp;<strong>pyplot()</strong>&nbsp;is the most important function in matplotlib library, which is used to plot 2D data. The following script plots the equation&nbsp;<strong>y = 2x + 5</strong></p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nfrom matplotlib import pyplot as plt \n\nx = np.arange(1,11) \ny = 2 * x + 5 \nplt.title(\"Matplotlib demo\") \nplt.xlabel(\"x axis caption\") \nplt.ylabel(\"y axis caption\") \nplt.plot(x,y) \nplt.show()</code></pre>\n\n\n\n<p>An ndarray object x is created from&nbsp;<strong>np.arange() function</strong>&nbsp;as the values on the&nbsp;<strong>x axis</strong>. The corresponding values on the&nbsp;<strong>y axis</strong>&nbsp;are stored in another&nbsp;<strong>ndarray object y</strong>. These values are plotted using&nbsp;<strong>plot()</strong>&nbsp;function of pyplot submodule of matplotlib package.</p>\n\n\n\n<p>The graphical representation is displayed by&nbsp;<strong>show()</strong>&nbsp;function.</p>\n\n\n\n<p>The above code should produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/numpy/images/matplotlib_demo.jpg\" alt=\"Matplotlib Demo\"/></figure>\n\n\n\n<p>Instead of the linear graph, the values can be displayed discretely by adding a format string to the&nbsp;<strong>plot()</strong>&nbsp;function. Following formatting characters can be used.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Character &amp; Description</th></tr><tr><td>1</td><td><strong>&#8216;-&#8216;</strong>Solid line style</td></tr><tr><td>2</td><td><strong>&#8216;&#8211;&#8216;</strong>Dashed line style</td></tr><tr><td>3</td><td><strong>&#8216;-.&#8217;</strong>Dash-dot line style</td></tr><tr><td>4</td><td><strong>&#8216;:&#8217;</strong>Dotted line style</td></tr><tr><td>5</td><td><strong>&#8216;.&#8217;</strong>Point marker</td></tr><tr><td>6</td><td><strong>&#8216;,&#8217;</strong>Pixel marker</td></tr><tr><td>7</td><td><strong>&#8216;o&#8217;</strong>Circle marker</td></tr><tr><td>8</td><td><strong>&#8216;v&#8217;</strong>Triangle_down marker</td></tr><tr><td>9</td><td><strong>&#8216;^&#8217;</strong>Triangle_up marker</td></tr><tr><td>10</td><td><strong>&#8216;&lt;&#8216;</strong>Triangle_left marker</td></tr><tr><td>11</td><td><strong>&#8216;&gt;&#8217;</strong>Triangle_right marker</td></tr><tr><td>12</td><td><strong>&#8216;1&#8217;</strong>Tri_down marker</td></tr><tr><td>13</td><td><strong>&#8216;2&#8217;</strong>Tri_up marker</td></tr><tr><td>14</td><td><strong>&#8216;3&#8217;</strong>Tri_left marker</td></tr><tr><td>15</td><td><strong>&#8216;4&#8217;</strong>Tri_right marker</td></tr><tr><td>16</td><td><strong>&#8216;s&#8217;</strong>Square marker</td></tr><tr><td>17</td><td><strong>&#8216;p&#8217;</strong>Pentagon marker</td></tr><tr><td>18</td><td><strong>&#8216;*&#8217;</strong>Star marker</td></tr><tr><td>19</td><td><strong>&#8216;h&#8217;</strong>Hexagon1 marker</td></tr><tr><td>20</td><td><strong>&#8216;H&#8217;</strong>Hexagon2 marker</td></tr><tr><td>21</td><td><strong>&#8216;+&#8217;</strong>Plus marker</td></tr><tr><td>22</td><td><strong>&#8216;x&#8217;</strong>X marker</td></tr><tr><td>23</td><td><strong>&#8216;D&#8217;</strong>Diamond marker</td></tr><tr><td>24</td><td><strong>&#8216;d&#8217;</strong>Thin_diamond marker</td></tr><tr><td>25</td><td><strong>&#8216;|&#8217;</strong>Vline marker</td></tr><tr><td>26</td><td><strong>&#8216;_&#8217;</strong>Hline marker</td></tr></tbody></table></figure>\n\n\n\n<p>The following color abbreviations are also defined.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Character</th><th>Color</th></tr><tr><td>&#8216;b&#8217;</td><td>Blue</td></tr><tr><td>&#8216;g&#8217;</td><td>Green</td></tr><tr><td>&#8216;r&#8217;</td><td>Red</td></tr><tr><td>&#8216;c&#8217;</td><td>Cyan</td></tr><tr><td>&#8216;m&#8217;</td><td>Magenta</td></tr><tr><td>&#8216;y&#8217;</td><td>Yellow</td></tr><tr><td>&#8216;k&#8217;</td><td>Black</td></tr><tr><td>&#8216;w&#8217;</td><td>White</td></tr></tbody></table></figure>\n\n\n\n<p>To display the circles representing points, instead of the line in the above example, use&nbsp;<strong>“ob”</strong>&nbsp;as the format string in plot() function.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nfrom matplotlib import pyplot as plt \n\nx = np.arange(1,11) \ny = 2 * x + 5 \nplt.title(\"Matplotlib demo\") \nplt.xlabel(\"x axis caption\") \nplt.ylabel(\"y axis caption\") \nplt.plot(x,y,\"ob\") \nplt.show() </code></pre>\n\n\n\n<p>The above code should produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/numpy/images/color_abbreviation.jpg\" alt=\"Color Abbreviation\"/></figure>\n\n\n\n<h2>Sine Wave Plot</h2>\n\n\n\n<p>The following script produces the&nbsp;<strong>sine wave plot</strong>&nbsp;using matplotlib.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nimport matplotlib.pyplot as plt  \n\n# Compute the x and y coordinates for points on a sine curve \nx = np.arange(0, 3 * np.pi, 0.1) \ny = np.sin(x) \nplt.title(\"sine wave form\") \n\n# Plot the points using matplotlib \nplt.plot(x, y) \nplt.show() </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/numpy/images/sine_wave.jpg\" alt=\"Sine Wave\"/></figure>\n\n\n\n<h2>subplot()</h2>\n\n\n\n<p>The subplot() function allows you to plot different things in the same figure. In the following script,&nbsp;<strong>sine</strong>&nbsp;and&nbsp;<strong>cosine values</strong>&nbsp;are plotted.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nimport matplotlib.pyplot as plt  \n   \n# Compute the x and y coordinates for points on sine and cosine curves \nx = np.arange(0, 3 * np.pi, 0.1) \ny_sin = np.sin(x) \ny_cos = np.cos(x)  \n   \n# Set up a subplot grid that has height 2 and width 1, \n# and set the first such subplot as active. \nplt.subplot(2, 1, 1)\n   \n# Make the first plot \nplt.plot(x, y_sin) \nplt.title('Sine')  \n   \n# Set the second subplot as active, and make the second plot. \nplt.subplot(2, 1, 2) \nplt.plot(x, y_cos) \nplt.title('Cosine')  \n   \n# Show the figure. \nplt.show()</code></pre>\n\n\n\n<p>The above code should produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/numpy/images/sub_plot.jpg\" alt=\"Sub Plot\"/></figure>\n\n\n\n<h2>bar()</h2>\n\n\n\n<p>The&nbsp;<strong>pyplot submodule</strong>&nbsp;provides&nbsp;<strong>bar()</strong>&nbsp;function to generate bar graphs. The following example produces the bar graph of two sets of&nbsp;<strong>x</strong>&nbsp;and&nbsp;<strong>y</strong>&nbsp;arrays.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from matplotlib import pyplot as plt \nx = &#91;5,8,10] \ny = &#91;12,16,6]  \n\nx2 = &#91;6,9,11] \ny2 = &#91;6,15,7] \nplt.bar(x, y, align = 'center') \nplt.bar(x2, y2, color = 'g', align = 'center') \nplt.title('Bar graph') \nplt.ylabel('Y axis') \nplt.xlabel('X axis')  \n\nplt.show()</code></pre>\n\n\n\n<p>This code should produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/numpy/images/bar_graph.jpg\" alt=\"Bar Graph\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Matplotlib is a plotting library for Python. It is used along with NumPy to provide an environment that is an effective open source alternative for MatLab. It can also be used with graphics toolkits like PyQt and wxPython. Matplotlib module was first written by John D. Hunter. Since 2012, Michael Droettboom is the principal developer. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/360"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=360"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/360/revisions"}],"predecessor-version":[{"id":3038,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/360/revisions/3038"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=360"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=360"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=360"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":362,"date":"2020-07-04T07:03:38","date_gmt":"2020-07-04T07:03:38","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=362"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"histogram-using-matplotlib","status":"publish","type":"post","link":"https://python3.foobrdigital.com/histogram-using-matplotlib/","title":{"rendered":"Histogram Using Matplotlib"},"content":{"rendered":"\n<p>NumPy has a&nbsp;<strong>numpy.histogram()</strong>&nbsp;function that is a graphical representation of the frequency distribution of data. Rectangles of equal horizontal size corresponding to class interval called&nbsp;<strong>bin</strong>&nbsp;and&nbsp;<strong>variable height</strong>&nbsp;corresponding to frequency.</p>\n\n\n\n<h2>numpy.histogram()</h2>\n\n\n\n<p>The numpy.histogram() function takes the input array and bins as two parameters. The successive elements in bin array act as the boundary of each bin.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n   \na = np.array(&#91;22,87,5,43,56,73,55,54,11,20,51,5,79,31,27]) \nnp.histogram(a,bins = &#91;0,20,40,60,80,100]) \nhist,bins = np.histogram(a,bins = &#91;0,20,40,60,80,100]) \nprint hist \nprint bins </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;3 4 5 2 1]\n&#91;0 20 40 60 80 100]</code></pre>\n\n\n\n<h2>plt()</h2>\n\n\n\n<p>Matplotlib can convert this numeric representation of histogram into a graph. The <strong>plt() function</strong> of pyplot submodule takes the array containing the data and bin array as parameters and converts into a histogram.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from matplotlib import pyplot as plt \nimport numpy as np  \n   \na = np.array(&#91;22,87,5,43,56,73,55,54,11,20,51,5,79,31,27]) \nplt.hist(a, bins = &#91;0,20,40,60,80,100]) \nplt.title(\"histogram\") \nplt.show()</code></pre>\n\n\n\n<p>It should produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/numpy/images/histogram_plot.jpg\" alt=\"Histogram Plot\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>NumPy has a&nbsp;numpy.histogram()&nbsp;function that is a graphical representation of the frequency distribution of data. Rectangles of equal horizontal size corresponding to class interval called&nbsp;bin&nbsp;and&nbsp;variable height&nbsp;corresponding to frequency. numpy.histogram() The numpy.histogram() function takes the input array and bins as two parameters. The successive elements in bin array act as the boundary of each bin. It will [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/362"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=362"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/362/revisions"}],"predecessor-version":[{"id":3031,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/362/revisions/3031"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=362"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=362"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=362"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":364,"date":"2020-07-04T07:04:55","date_gmt":"2020-07-04T07:04:55","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=364"},"modified":"2020-12-16T16:57:22","modified_gmt":"2020-12-16T16:57:22","slug":"i-o-with-numpy","status":"publish","type":"post","link":"https://python3.foobrdigital.com/i-o-with-numpy/","title":{"rendered":"I/O with NumPy"},"content":{"rendered":"\n<p>The ndarray objects can be saved to and loaded from the disk files. The IO functions available are −</p>\n\n\n\n<ul><li><strong>load()</strong>&nbsp;and&nbsp;<strong>save()</strong>&nbsp;functions handle /numPy binary files (with&nbsp;<strong>npy</strong>&nbsp;extension)</li><li><strong>loadtxt()</strong>&nbsp;and&nbsp;<strong>savetxt()</strong>&nbsp;functions handle normal text files</li></ul>\n\n\n\n<p>NumPy introduces a simple file format for ndarray objects. This&nbsp;<strong>.npy</strong>&nbsp;file stores data, shape, dtype and other information required to reconstruct the ndarray in a disk file such that the array is correctly retrieved even if the file is on another machine with different architecture.</p>\n\n\n\n<h2>numpy.save()</h2>\n\n\n\n<p>The <strong>numpy.save()</strong> file stores the input array in a disk file with <strong>npy</strong> extension.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \na = np.array(&#91;1,2,3,4,5]) \nnp.save('outfile',a)</code></pre>\n\n\n\n<p>To reconstruct array from <strong>outfile.npy</strong>, use <strong>load()</strong> function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \nb = np.load('outfile.npy') \nprint b </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>array(&#91;1, 2, 3, 4, 5])</code></pre>\n\n\n\n<p>The save() and load() functions accept an additional Boolean parameter&nbsp;<strong>allow_pickles</strong>. A pickle in Python is used to serialize and de-serialize objects before saving to or reading from a disk file.</p>\n\n\n\n<h2>savetxt()</h2>\n\n\n\n<p>The storage and retrieval of array data in simple text file format is done with&nbsp;<strong>savetxt()</strong>&nbsp;and&nbsp;<strong>loadtxt()</strong>&nbsp;functions.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np \n\na = np.array(&#91;1,2,3,4,5]) \nnp.savetxt('out.txt',a) \nb = np.loadtxt('out.txt') \nprint b </code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; 1.  2.  3.  4.  5.] </code></pre>\n\n\n\n<p>The savetxt() and loadtxt() functions accept additional optional parameters such as header, footer, and delimiter.</p>\n","protected":false},"excerpt":{"rendered":"<p>The ndarray objects can be saved to and loaded from the disk files. The IO functions available are − load()&nbsp;and&nbsp;save()&nbsp;functions handle /numPy binary files (with&nbsp;npy&nbsp;extension) loadtxt()&nbsp;and&nbsp;savetxt()&nbsp;functions handle normal text files NumPy introduces a simple file format for ndarray objects. This&nbsp;.npy&nbsp;file stores data, shape, dtype and other information required to reconstruct the ndarray in a disk [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[30,80,152],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/364"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=364"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/364/revisions"}],"predecessor-version":[{"id":3032,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/364/revisions/3032"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=364"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=364"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=364"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]