[
    {
        "id": 2130,
        "date": "2020-07-03T11:14:35",
        "date_gmt": "2020-07-03T11:14:35",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2130"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "introduction-9",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/introduction-9\/",
        "title": {
            "rendered": "Introduction"
        },
        "content": {
            "rendered": "\n<p>Data visualization is the presentation of data in a pictorial or graphical format. The primary goal of data visualization is to communicate information clearly and efficiently via statistical graphics, plots and information graphics.<\/p>\n\n\n\n<p>Data visualization helps us to communicate our insights quickly and effectively. Any type of data, which is represented by a visualization allows users to compare the data, generate analytic reports, understand patterns and thus helps them to take the decision. Data visualizations can be interactive, so that users analyze specific data in the chart. Well, Data visualizations can be developed and integrated in regular websites and even mobile applications using different JavaScript frameworks.<\/p>\n\n\n\n<h2>What is D3.js?<\/h2>\n\n\n\n<p>D3.js is a JavaScript library used to create interactive visualizations in the browser. The D3.js library allows us to manipulate elements of a webpage in the context of a data set. These elements can be&nbsp;<strong>HTML, SVG,<\/strong>&nbsp;or&nbsp;<strong>Canvas elements<\/strong>&nbsp;and can be introduced, removed, or edited according to the contents of the data set. It is a library for manipulating the DOM objects. D3.js can be a valuable aid in data exploration, it gives you control over your data&#8217;s representation and lets you add interactivity.<\/p>\n\n\n\n<h2>Why Do We Need D3.js?<\/h2>\n\n\n\n<p>D3.js is one of the premier framework when compare to other libraries. This is because it works on the web and its data visualizations are par excellence. Another reason it has worked so well is owing to its flexibility. Since it works seamlessly with the existing web technologies and can manipulate any part of the document object model, it is as flexible as the&nbsp;<strong>Client Side Web Technology Stack<\/strong>&nbsp;(HTML, CSS, and SVG). It has a great community support and is easier to learn.<\/p>\n\n\n\n<h2>D3.js Features<\/h2>\n\n\n\n<p>D3.js is one of the best data visualization framework and it can be used to generate simple as well as complex visualizations along with user interaction and transition effects. Some of its salient features are listed below \u2212<\/p>\n\n\n\n<ul><li>Extremely flexible.<\/li><li>Easy to use and fast.<\/li><li>Supports large datasets.<\/li><li>Declarative programming.<\/li><li>Code reusability.<\/li><li>Has wide variety of curve generating functions.<\/li><li>Associates data to an element or group of elements in the html page.<\/li><\/ul>\n\n\n\n<h2>D3.js Benefits<\/h2>\n\n\n\n<p>D3.js is an open source project and works without any plugin. It requires very less code and comes up with the following benefits \u2212<\/p>\n\n\n\n<ul><li>Great data visualization.<\/li><li>It is modular. You can download a small piece of D3.js, which you want to use. No need to load the whole library every time.<\/li><li>Easy to build a charting component.<\/li><li>DOM manipulation.<\/li><\/ul>\n\n\n\n<p>In the next chapter, we will understand how to install D3.js on our system.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Data visualization is the presentation of data in a pictorial or graphical format. The primary goal of data visualization is to communicate information clearly and efficiently via statistical graphics, plots and information graphics. Data visualization helps us to communicate our insights quickly and effectively. Any type of data, which is represented by a visualization allows [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2130"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2130"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2130\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2131,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2130\/revisions\/2131"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2130"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2130"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2130"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2129,
        "date": "2020-07-03T11:15:51",
        "date_gmt": "2020-07-03T11:15:51",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2129"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "installation-7",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/installation-7\/",
        "title": {
            "rendered": "Installation"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will learn how to set up the D3.js development environment. Before we start, we need the following components \u2212<\/p>\n\n\n\n<ul><li>D3.js library<\/li><li>Editor<\/li><li>Web browser<\/li><li>Web server<\/li><\/ul>\n\n\n\n<p>Let us go through the steps one by one in detail.<\/p>\n\n\n\n<h2>D3.js Library<\/h2>\n\n\n\n<p>We need to include the D3.js library into your HTML webpage in order to use D3.js to create data visualization. We can do it in the following two ways \u2212<\/p>\n\n\n\n<ul><li>Include the D3.js library from your project&#8217;s folder.<\/li><li>Include D3.js library from CDN (Content Delivery Network).<\/li><\/ul>\n\n\n\n<h3>Download D3.js Library<\/h3>\n\n\n\n<p>D3.js is an open-source library and the source code of the library is freely available on the web at\u00a0https:\/\/d3js.org\/\u00a0website. Visit the D3.js website and download the latest version of D3.js (d3.zip). As of now, the latest version is 4.6.0.<\/p>\n\n\n\n<p>After the download is complete, unzip the file and look for&nbsp;<strong>d3.min.js<\/strong>. This is the minified version of the D3.js source code. Copy the d3.min.js file and paste it into your project&#8217;s root folder or any other folder, where you want to keep all the library files. Include the d3.min.js file in your HTML page as shown below.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;script src = \"\/path\/to\/d3.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;script>\n         \/\/ write your d3 code here.. \n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>D3.js is a JavaScript code, so we should write all our D3 code within \u201cscript\u201d tag. We may need to manipulate the existing DOM elements, so it is advisable to write the D3 code just before the end of the \u201cbody\u201d tag.<\/p>\n\n\n\n<h3>Include D3 Library from CDN<\/h3>\n\n\n\n<p>We can use the D3.js library by linking it directly into our HTML page from the Content Delivery Network (CDN). CDN is a network of servers where files are hosted and are delivered to a user based on their geographic location. If we use the CDN, we do not need to download the source code.<\/p>\n\n\n\n<p>Include the D3.js library using the CDN URL\u00a0https:\/\/d3js.org\/d3.v4.min.js\u00a0into our page as shown below.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;script src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;script>\n         \/\/ write your d3 code here.. \n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>D3.js Editor<\/h2>\n\n\n\n<p>We will need an editor to start writing your code. There are some great IDEs (Integrated Development Environment) with support for JavaScript like \u2212<\/p>\n\n\n\n<ul><li>Visual Studio Code<\/li><li>WebStorm<\/li><li>Eclipse<\/li><li>Sublime Text<\/li><\/ul>\n\n\n\n<p>These IDEs provide intelligent code completion as well as support some of the modern JavaScript frameworks. If you do not have fancy IDE, you can always use a basic editor like Notepad, VI, etc.<\/p>\n\n\n\n<h2>Web Browser<\/h2>\n\n\n\n<p>D3.js works on all the browsers except IE8 and lower.<\/p>\n\n\n\n<h3>Web Server<\/h3>\n\n\n\n<p>Most browsers serve local HTML files directly from the local file system. However, there are certain restrictions when it comes to loading external data files. In the latter chapters of this tutorial, we will be loading data from external files like&nbsp;<strong>CSV<\/strong>&nbsp;and&nbsp;<strong>JSON<\/strong>. Therefore, it will be easier for us, if we set up the web server right from the beginning.<\/p>\n\n\n\n<p>You can use any web server, which you are comfortable with \u2212 e.g. IIS, Apache, etc.<\/p>\n\n\n\n<h3>Viewing Your Page<\/h3>\n\n\n\n<p>In most cases, we can just open your HTML file in a web browser to view it. However, when loading external data sources, it is more reliable to run a local web server and view your page from the server&nbsp;<strong>(http:\/\/localhost:8080)<\/strong>.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will learn how to set up the D3.js development environment. Before we start, we need the following components \u2212 D3.js library Editor Web browser Web server Let us go through the steps one by one in detail. D3.js Library We need to include the D3.js library into your HTML webpage in [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2129"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2129"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2129\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2132,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2129\/revisions\/2132"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2129"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2129"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2129"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2128,
        "date": "2020-07-03T11:17:50",
        "date_gmt": "2020-07-03T11:17:50",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2128"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "concepts",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/concepts\/",
        "title": {
            "rendered": "Concepts"
        },
        "content": {
            "rendered": "\n<p>D3.js is an open source JavaScript library for \u2212<\/p>\n\n\n\n<ul><li>Data-driven manipulation of the Document Object Model (DOM).<\/li><li>Working with data and shapes.<\/li><li>Laying out visual elements for linear, hierarchical, network and geographic data.<\/li><li>Enabling smooth transitions between user interface (UI) states.<\/li><li>Enabling effective user interaction.<\/li><\/ul>\n\n\n\n<h2>Web Standards<\/h2>\n\n\n\n<p>Before we can start using D3.js to create visualizations, we need to get familiar with web standards. The following web standards are heavily used in D3.js.<\/p>\n\n\n\n<ul><li>HyperText Markup Language (HTML)<\/li><li>Document Object Model (DOM)<\/li><li>Cascading Style Sheets (CSS)<\/li><li>Scalable Vector Graphics (SVG)<\/li><li>JavaScript<\/li><\/ul>\n\n\n\n<p>Let us go through each of these web standards one by one in detail.<\/p>\n\n\n\n<h3>HyperText Markup Language (HTML)<\/h3>\n\n\n\n<p>As we know, HTML is used to structure the content of the webpage. It is stored in a text file with the extension \u201c.html\u201d.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 A typical bare-bones HTML example looks like this<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;title>&lt;\/title>\n   &lt;\/head>\n\n   &lt;body>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h3>Document Object Model (DOM)<\/h3>\n\n\n\n<p>When a HTML page is loaded by a browser, it is converted to a hierarchical structure. Every tag in HTML is converted to an element \/ object in the DOM with a parent-child hierarchy. It makes our HTML more logically structured. Once the DOM is formed, it becomes easier to manipulate (add\/modify\/remove) the elements on the page.<\/p>\n\n\n\n<p>Let us understand the DOM using the following HTML document \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;title>My Document&lt;\/title>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div>\n         &lt;h1>Greeting&lt;\/h1>\n         &lt;p>Hello World!&lt;\/p>\n      &lt;\/div>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>The document object model of the above HTML document is as follows,<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/document_object_model.jpg\" alt=\"Document Object Model\"\/><\/figure>\n\n\n\n<h3>Cascading Style Sheets (CSS)<\/h3>\n\n\n\n<p>While HTML gives a structure to the webpage, CSS styles makes the webpage more pleasant to look at. CSS is a&nbsp;<strong>Style Sheet Language<\/strong>&nbsp;used to describe the presentation of a document written in HTML or XML (including XML dialects like SVG or XHTML). CSS describes how elements should be rendered on a webpage.<\/p>\n\n\n\n<h3>Scalable Vector Graphics (SVG)<\/h3>\n\n\n\n<p>SVG is a way to render images on the webpage. SVG is not a direct image, but is just a way to create images using text. As its name suggests, it is a&nbsp;<strong>Scalable Vector<\/strong>. It scales itself according to the size of the browser, so resizing your browser will not distort the image. All browsers support SVG except IE 8 and below. Data visualizations are visual representations and it is convenient to use SVG to render visualizations using the D3.js.<\/p>\n\n\n\n<p>Think of SVG as a canvas on which we can paint different shapes. So to start with, let us create an SVG tag \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"500\" height = \"500\">&lt;\/&lt;svg><\/code><\/pre>\n\n\n\n<p>The default measurement for SVG is pixels, so we do not need to specify if our unit is pixel. Now, if we want to draw a rectangle, we can draw it using the code below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"500\" height = \"500\">\n   &lt;rect x = \"0\" y = \"0\" width = \"300\" height = \"200\">&lt;\/rect>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p>We can draw other shapes in SVG such as \u2212 Line, Circle, Ellipse, Text and Path.<\/p>\n\n\n\n<p>Just like styling HTML elements, styling SVG elements is simple. Let us set the background color of the rectangle to yellow. For that, we need to add an attribute \u201cfill\u201d and specify the value as yellow as shown below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"500\" height = \"500\">\n   &lt;rect x = \"0\" y = \"0\" width = \"300\" height = \"200\" fill = \"yellow\">&lt;\/rect>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<h3>JavaScript<\/h3>\n\n\n\n<p>JavaScript is a loosely typed client side scripting language that executes in the user&#8217;s browser. JavaScript interacts with HTML elements (DOM elements) in order to make the web user interface interactive. JavaScript implements the&nbsp;<strong>ECMAScript Standards<\/strong>, which includes core features based on ECMA-262 specifications as well as other features, which are not based on the ECMAScript standards. JavaScript knowledge is a prerequisite for D3.js.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>D3.js is an open source JavaScript library for \u2212 Data-driven manipulation of the Document Object Model (DOM). Working with data and shapes. Laying out visual elements for linear, hierarchical, network and geographic data. Enabling smooth transitions between user interface (UI) states. Enabling effective user interaction. Web Standards Before we can start using D3.js to create [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2128"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2128"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2128\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2133,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2128\/revisions\/2133"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2128"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2128"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2128"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2127,
        "date": "2020-07-03T11:45:17",
        "date_gmt": "2020-07-03T11:45:17",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2127"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "selections",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/selections\/",
        "title": {
            "rendered": "Selections"
        },
        "content": {
            "rendered": "\n<p>Selections is one of the core concepts in D3.js. It is based on CSS selectors. It allows us to select one or more elements in a webpage. In addition, it allows us to modify, append, or remove elements in a relation to the pre-defined dataset. In this chapter, we will see how to use selections to create data visualizations.<\/p>\n\n\n\n<p>D3.js helps to select elements from the HTML page using the following two methods \u2212<\/p>\n\n\n\n<ul><li><strong>select()<\/strong>&nbsp;\u2212 Selects only one DOM element by matching the given CSS selector. If there are more than one elements for the given CSS selector, it selects the first one only.<\/li><li><strong>selectAll()<\/strong>&nbsp;\u2212 Selects all DOM elements by matching the given CSS selector. If you are familiar with selecting elements with jQuery, D3.js selectors are almost the same.<\/li><\/ul>\n\n\n\n<p>Let us go through each of the methods in detail.<\/p>\n\n\n\n<h2>The select() method<\/h2>\n\n\n\n<p>The select() method selects the HTML element based on CSS Selectors. In CSS Selectors, you can define and access HTML-elements in the following three ways \u2212<\/p>\n\n\n\n<ul><li>Tag of a HTML element (e.g. div, h1, p, span, etc.,)<\/li><li>Class name of a HTML element<\/li><li>ID of a HTML element<\/li><\/ul>\n\n\n\n<p>Let us see it in action with examples.<\/p>\n\n\n\n<h3>Selection by Tag<\/h3>\n\n\n\n<p>You can select HTML elements using its TAG. The following syntax is used to select the \u201cdiv\u201d tag elements,<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\u201cdiv\u201d)<\/code><\/pre>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Create a page \u201cselect_by_tag.html\u201d and add the following changes<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div>\n         Hello World!    \n      &lt;\/div>\n      \n      &lt;script>\n         alert(d3.select(\"div\").text());\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>By requesting the webpage through the browser, you will see the following output on the screen <\/p>\n\n\n\n<h3>Selection by Class name<\/h3>\n\n\n\n<p>HTML elements styled using CSS classes can be selected by using the following syntax.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\u201c.&lt;class name>\u201d)<\/code><\/pre>\n\n\n\n<p>Create a webpage \u201cselect_by_class.html\u201d and add the following changes <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div class = \"myclass\">\n         Hello World!\n      &lt;\/div>\n      \n      &lt;script>\n         alert(d3.select(\".myclass\").text());\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>By requesting the webpage through the browser,<\/p>\n\n\n\n<h3>Selection by ID<\/h3>\n\n\n\n<p>Every element in a HTML page should have a unique ID. We can use this unique ID of an element to access it using the select() method as specified below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\u201c#&lt;id of an element>\u201d)<\/code><\/pre>\n\n\n\n<p>Create a webpage \u201cselect_by_id.html\u201d and add the following changes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\u201c#&lt;id of an element>\u201d)<\/code><\/pre>\n\n\n\n<p>By requesting the webpage through the browser, <\/p>\n\n\n\n<h2>Adding DOM Elements<\/h2>\n\n\n\n<p>The D3.js selection provides the&nbsp;<strong>append()<\/strong>&nbsp;and the&nbsp;<strong>text()<\/strong>&nbsp;methods to append new elements into the existing HTML documents. This section explains about adding DOM elements in detail.<\/p>\n\n\n\n<h3>The append() Method<\/h3>\n\n\n\n<p>The append() method appends a new element as the last child of the element in the current selection. This method can also modify the style of the elements, their attributes, properties, HTML and text content.<\/p>\n\n\n\n<p>Create a webpage \u201cselect_and_append.html\u201d and add the following changes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n&lt;head>\n&lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n&lt;\/head>\n\n&lt;body>\n&lt;div class = \"myclass\">\nHello World!\n&lt;\/div>\n\n&lt;script>\nd3.select(\"div.myclass\").append(\"span\");\n&lt;\/script>\n&lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Requesting the webpage through browser,<\/p>\n\n\n\n<p>Here, the append() method adds a new tag span inside the div tag as shown below \u2212<\/p>\n\n\n\n<h3>The text() Method<\/h3>\n\n\n\n<p>The text() method is used to set the content of the selected \/ appended elements. Let us change the above example and add the text() method as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div class = \"myclass\">\n         Hello World!\n      &lt;\/div>\n      \n      &lt;script>\n         d3.select(\"div.myclass\").append(\"span\").text(\"from D3.js\");\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Now refresh the webpage and you will see the following response.<\/p>\n\n\n\n<p>Here, the above script performs a chaining operation. D3.js smartly employs a technique called the\u00a0<strong>chain syntax<\/strong>, which you may recognize from\u00a0<strong>jQuery<\/strong>. By chaining methods together with periods, you can perform several actions in a single line of code. It is fast and easy. The same script can also access without chain syntax as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var body = d3.select(\"div.myclass\");\nvar span = body.append(\"span\");\nspan.text(\"from D3.js\");<\/code><\/pre>\n\n\n\n<h2>Modifying Elements<\/h2>\n\n\n\n<p>D3.js provides various methods,&nbsp;<strong>html(), attr()<\/strong>&nbsp;and&nbsp;<strong>style()<\/strong>&nbsp;to modify the content and style of the selected elements. Let us see how to use modify methods in this chapter.<\/p>\n\n\n\n<h3>The html() Method<\/h3>\n\n\n\n<p>The html() method is used to set the html content of the selected \/ appended elements.<\/p>\n\n\n\n<p>Create a webpage \u201cselect_and_add_html.html\u201d and add the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div class = \"myclass\">\n         Hello World!\n      &lt;\/div>\n      \n      &lt;script>\n         d3.select(\".myclass\").html(\"Hello World! &lt;span>from D3.js&lt;\/span>\");\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>By requesting the webpage through the browser, you will see the following output on the screen.<\/p>\n\n\n\n<h3>The attr() Method<\/h3>\n\n\n\n<p>The attr() method is used to add or update the attribute of the selected elements. Create a webpage \u201cselect_and_modify.html\u201d and add the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div class = \"myclass\">\n         Hello World!\n      &lt;\/div>\n      \n      &lt;script>\n         d3.select(\".myclass\").attr(\"style\", \"color: red\");\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>By requesting the webpage through the browser, you will see the following output on the screen.<\/p>\n\n\n\n<h3>The style() Method<\/h3>\n\n\n\n<p>The style() method is used to set the style property of the selected elements. Create a webpage \u201cselect_and_style.html\u201d and add the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div class = \"myclass\">\n         Hello World!\n      &lt;\/div>\n      \n      &lt;script>\n         d3.select(\".myclass\").style(\"color\", \"red\");\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>By requesting the webpage through the browser, you will see the following output on the screen.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\".myclass\").classed(\"myanotherclass\", true);<\/code><\/pre>\n\n\n\n<h3>The classed() Method<\/h3>\n\n\n\n<p>The classed() method is exclusively used to set the \u201cclass\u201d attribute of an HTML element. Since, a single HTML element can have multiple classes; we need to be careful while assigning a class to an HTML element. This method knows how to handle one or many classes on an element, and it will be performant.<\/p>\n\n\n\n<ul><li><strong>Add class<\/strong>\u00a0\u2212 To add a class, the second parameter of the classed method must be set to true. It is defined below \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\".myclass\").classed(\"myanotherclass\", true);<\/code><\/pre>\n\n\n\n<ul><li><strong>Remove class<\/strong>\u00a0\u2212 To remove a class, the second parameter of the classed method must be set to false. It is defined below \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\".myclass\").classed(\"myanotherclass\", false);<\/code><\/pre>\n\n\n\n<ul><li><strong>Check class<\/strong>\u00a0\u2212 To check for the existence of a class, just leave off the second parameter and pass the class name you are querying. This will return true, if it exists, false, if it does not.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\".myclass\").classed(\"myanotherclass\");<\/code><\/pre>\n\n\n\n<p>This will return true, if any element in the selection has the class. Use&nbsp;<strong>d3.select<\/strong>&nbsp;for single element selection.<\/p>\n\n\n\n<ul><li><strong>Toggle class<\/strong>\u00a0\u2212 To flip a class to the opposite state \u2013 remove it if it exists already, add it if it does not yet exist \u2013 you can do one of the following.For a single element, the code might look as shown below \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>var element = d3.select(\".myclass\")\nelement.classed(\"myanotherclass\", !oneBar.classed(\"myanotherclass\"));<\/code><\/pre>\n\n\n\n<h2>The selectAll() Method<\/h2>\n\n\n\n<p>The selectAll() method is used to select multiple elements in the HTML document. The select method selects the first element, but the selectAll method selects all the elements that match the specific selector string. In case the selection matches none, then it returns an empty selection. We can chain all the appending modifying methods,\u00a0<strong>append(), html(), text(), attr(), style(), classed(),<\/strong>\u00a0etc., in the selectAll() method as well. In this case, the methods will affect all the matching elements. Let us understand by creating a new webpage \u201cselect_multiple.html\u201d and add the following script \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h2 class = \"myclass\">Message&lt;\/h2>\n      &lt;div class = \"myclass\">\n         Hello World!\n      &lt;\/div>\n      \n      &lt;script>\n         d3.selectAll(\".myclass\").attr(\"style\", \"color: red\");\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>By requesting the webpage through the browser, you will see the following output on the screen.<\/p>\n\n\n\n<p>Here, the attr() method applies to both&nbsp;<strong>div<\/strong>&nbsp;and&nbsp;<strong>h2 tag<\/strong>&nbsp;and the color of the text in both tags changes to Red.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Selections is one of the core concepts in D3.js. It is based on CSS selectors. It allows us to select one or more elements in a webpage. In addition, it allows us to modify, append, or remove elements in a relation to the pre-defined dataset. In this chapter, we will see how to use selections [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2127"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2127"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2127\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2134,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2127\/revisions\/2134"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2127"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2127"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2127"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2126,
        "date": "2020-07-03T11:53:40",
        "date_gmt": "2020-07-03T11:53:40",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2126"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "data-join",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/data-join\/",
        "title": {
            "rendered": "Data Join"
        },
        "content": {
            "rendered": "\n<p>Data join is another important concept in D3.js. It works along with selections and enables us to manipulate the HTML document with respect to our data set (a series of numerical values). By default, D3.js gives data set the highest priority in its methods and each item in the data set corresponds to a HTML element. This chapter explains data joins in detail.<\/p>\n\n\n\n<h2>What is a Data Join?<\/h2>\n\n\n\n<p>Data join enables us to inject, modify and remove elements (HTML element as well as embedded SVG elements) based on the data set in the existing HTML document. By default, each data item in the data set corresponds to an element (graphical) in the document.<\/p>\n\n\n\n<p>As the data set changes, the corresponding element can also be manipulated easily. Data join creates a close relationship between our data and graphical elements of the document. Data join makes manipulation of the elements based on the data set a very simple and easy process.<\/p>\n\n\n\n<h2>How Data Join Works?<\/h2>\n\n\n\n<p>The primary purpose of the Data join is to map the elements of the existing document with the given data set. It creates a virtual representation of the document with respect to the given data set and provides methods to work with the virtual representation. Let us consider a simple data set as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10, 20, 30, 25, 15]<\/code><\/pre>\n\n\n\n<p>The data set has five items and so, it can be mapped to five elements of the document. Let us map it to the&nbsp;<strong>li<\/strong>&nbsp;element of the following document using the selector&#8217;s selectAll() method and data join&#8217;s data() method.<\/p>\n\n\n\n<h3>HTML<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul id = \"list\">\n   &lt;li>&lt;li>\n   &lt;li>&lt;\/li>\n&lt;\/ul> <\/code><\/pre>\n\n\n\n<h3>D3.js code<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\"#list\").selectAll(\"li\").data(&#91;10, 20, 30, 25, 15]);<\/code><\/pre>\n\n\n\n<p>Now, there are five virtual elements in the document. The first two virtual elements are the two\u00a0<strong>li<\/strong>\u00a0element defined in the document as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>1. li - 10\n2. li - 20<\/code><\/pre>\n\n\n\n<p>We can use all the selector&#8217;s element modifying methods like\u00a0<strong>attr(), style(), text()<\/strong>, etc., for the first two\u00a0<strong>li<\/strong>\u00a0as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\"#list\").selectAll(\"li\")\n   .data(&#91;10, 20, 30, 25, 15])\n   .text(function(d) { return d; });<\/code><\/pre>\n\n\n\n<p>The function in the text() method is used to get the&nbsp;<strong>li<\/strong>&nbsp;elements mapped data. Here,&nbsp;<strong>d<\/strong>represent 10 for first&nbsp;<strong>li<\/strong>&nbsp;element and 20 for second&nbsp;<strong>li<\/strong>&nbsp;element.<\/p>\n\n\n\n<p>The next three elements can be mapped to any elements and it can be done using the data join&#8217;s enter() and selector&#8217;s append() method. The enter() method gives access to the remaining data (which is not mapped to the existing elements) and the append() method is used to create a new element from the corresponding data. Let us create\u00a0<strong>li<\/strong>\u00a0for the remaining data items as well. The data map is as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>3. li - 30\n4. li - 25\n5. li - 15<\/code><\/pre>\n\n\n\n<p>The code to create new a li element is as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\"#list\").selectAll(\"li\")\n   .data(&#91;10, 20, 30, 25, 15])\n   .text(function(d) { return \"This is pre-existing element and the value is \" + d; })\n   .enter()\n   .append(\"li\")\n   .text(function(d) \n      { return \"This is dynamically created element and the value is \" + d; });<\/code><\/pre>\n\n\n\n<p>Data join provides another method called as the\u00a0<strong>exit() method<\/strong>\u00a0to process the data items removed dynamically from the data set as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.selectAll(\"li\")\n   .data(&#91;10, 20, 30, 15])\n   .exit()\n   .remove()<\/code><\/pre>\n\n\n\n<p>Here, we have removed the fourth item from the data set and its corresponding li using the exit() and the remove() methods.<\/p>\n\n\n\n<p>The complete code is as follows <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;style>\n         body { font-family: Arial; }\n      &lt;\/style>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;ul id = \"list\">\n         &lt;li>&lt;\/li>\n         &lt;li>&lt;\/li>\n      &lt;\/ul>\n        \n      &lt;input type = \"button\" name = \"remove\" value = \"Remove fourth value\" \n         onclick = \"javascript:remove()\" \/>\n      \n      &lt;script>\n         d3.select(\"#list\").selectAll(\"li\")\n            .data(&#91;10, 20, 30, 25, 15])\n            .text(function(d) \n               { return \"This is pre-existing element and the value is \" + d; })\n            .enter()\n            .append(\"li\")\n            .text(function(d) \n               { return \"This is dynamically created element and the value is \" + d; });\n             \n         function remove() {\n            d3.selectAll(\"li\")\n            .data(&#91;10, 20, 30, 15])\n            .exit()\n            .remove()\n         }\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>The result of the above code will be as follows \u2212<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Data join is another important concept in D3.js. It works along with selections and enables us to manipulate the HTML document with respect to our data set (a series of numerical values). By default, D3.js gives data set the highest priority in its methods and each item in the data set corresponds to a HTML [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2126"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2126"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2126\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2136,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2126\/revisions\/2136"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2126"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2126"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2126"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2143,
        "date": "2020-07-03T11:59:24",
        "date_gmt": "2020-07-03T11:59:24",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2143"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "introduction-to-svg",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/introduction-to-svg\/",
        "title": {
            "rendered": "Introduction to SVG"
        },
        "content": {
            "rendered": "\n<p>SVG stands for&nbsp;<strong>Scalable Vector Graphics<\/strong>. SVG is an XML-based vector graphics format. It provides options to draw different shapes such as Lines, Rectangles, Circles, Ellipses, etc. Hence, designing visualizations with SVG gives you more power and flexibility.<\/p>\n\n\n\n<h2>Features of SVG<\/h2>\n\n\n\n<p>Some of the salient features of SVG are as follows \u2212<\/p>\n\n\n\n<ul><li>SVG is a vector based image format and it is text-based.<\/li><li>SVG is similar in structure to HTML.<\/li><li>SVG can be represented as a&nbsp;<strong>Document object model<\/strong>.<\/li><li>SVG properties can be specified as attributes.<\/li><li>SVG should have absolute positions relative to the origin (0, 0).<\/li><li>SVG can be included as is in the HTML document.<\/li><\/ul>\n\n\n\n<h2>A Minimal Example<\/h2>\n\n\n\n<p>Let us create a minimal SVG image and include it in the HTML document.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212 Create a SVG image and set width as 300 pixel and height as 300 pixel.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p>Here, the&nbsp;<strong>svg<\/strong>&nbsp;tag starts an SVG image and it has width and height as attributes. The default unit of the SVG format is&nbsp;<strong>pixel<\/strong>.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212 Create a line starting at (100, 100) and ending at (200, 100) and set red color for the line.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;line x1 = \"100\" y1 = \"100\" x2 = \"200\" y2 = \"200\" \n   style = \"stroke:rgb(255,0,0);stroke-width:2\"\/><\/code><\/pre>\n\n\n\n<p>Here, the&nbsp;<strong>line<\/strong>&nbsp;tag draws a line and its attributes&nbsp;<strong>x1, y1<\/strong>&nbsp;refers to the starting point and&nbsp;<strong>x2, y2<\/strong>refers to the ending point. The style attribute sets color and thickness of the line using the&nbsp;<strong>stroke<\/strong>&nbsp;and the&nbsp;<strong>stroke-width<\/strong>&nbsp;styles.<\/p>\n\n\n\n<ul><li><strong>x1<\/strong>&nbsp;\u2212 This is the x-coordinate of the first point.<\/li><li><strong>y1<\/strong>&nbsp;\u2212 This is the y-coordinate of the first point.<\/li><li><strong>x2<\/strong>&nbsp;\u2212 This is the x-coordinate of the second point.<\/li><li><strong>y2<\/strong>&nbsp;\u2212 This is the y-coordinate of the second point.<\/li><li><strong>stroke<\/strong>&nbsp;\u2212 Color of the line.<\/li><li><strong>stroke-width<\/strong>&nbsp;\u2212 Thickness of the line.<\/li><\/ul>\n\n\n\n<p><strong>Step 3<\/strong>\u00a0\u2212 Create a HTML document, \u201csvg_line.html\u201d and integrate the above SVG as shown below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;style>\n         body { font-family: Arial; }\n      &lt;\/style>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div id = \"svgcontainer\">\n         &lt;svg width = \"300\" height = \"300\">\n            &lt;line x1 = \"100\" y1 = \"100\" \n               x2 = \"200\" y2 = \"200\" style = \"stroke:rgb(255,0,0);\n               stroke-width:2\"\/>\n         &lt;\/svg>\n      &lt;\/div>\n      &lt;p>&lt;\/p>\n      &lt;p>&lt;\/p>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>SVG Using D3.js<\/h2>\n\n\n\n<p>To create SVG using D3.js, let us follow the steps given below.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212 Create a container to hold the SVG image as given below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"svgcontainer\">&lt;\/div>\n<\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212 Select the SVG container using the select() method and inject the SVG element using the append() method. Add the attributes and styles using the attr() and the style() methods.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var width = 300;\nvar height = 300;\nvar svg = d3.select(\"#svgcontainer\")\n   .append(\"svg\").attr(\"width\", width).attr(\"height\", height);<\/code><\/pre>\n\n\n\n<p><strong>Step 3<\/strong>\u00a0\u2212 Similarly, add the\u00a0<strong>line<\/strong>\u00a0element inside the\u00a0<strong>svg<\/strong>\u00a0element as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"line\")\n   .attr(\"x1\", 100)\n   .attr(\"y1\", 100)\n   .attr(\"x2\", 200) \n   .attr(\"y2\", 200)\n   .style(\"stroke\", \"rgb(255,0,0)\")\n   .style(\"stroke-width\", 2);<\/code><\/pre>\n\n\n\n<p>The complete code is as follows <\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n   &lt;head&gt;\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\"&gt;&lt;\/script&gt;\n      &lt;style&gt;\n         body { font-family: Arial; }\n      &lt;\/style&gt;\n   &lt;\/head&gt;\n\n   &lt;body&gt;\n      &lt;div id = \"svgcontainer\"&gt;\n      &lt;\/div&gt;\n      &lt;script language = \"javascript\"&gt;\n         var width = 300;\n         var height = 300;\n         var svg = d3.select(\"#svgcontainer\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n         svg.append(\"line\")\n            .attr(\"x1\", 100)\n            .attr(\"y1\", 100)\n            .attr(\"x2\", 200)\n            .attr(\"y2\", 200)\n            .style(\"stroke\", \"rgb(255,0,0)\")\n            .style(\"stroke-width\", 2);\n      &lt;\/script&gt;\n   &lt;\/body&gt;\n&lt;\/html&gt;<\/pre>\n\n\n\n<h2>Rectangle Element<\/h2>\n\n\n\n<p>A rectangle is represented by the\u00a0<strong>&lt;rect><\/strong>\u00a0tag as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;rect x = \"20\" y = \"20\" width = \"300\" height = \"300\">&lt;\/rect>\n<\/code><\/pre>\n\n\n\n<p>The attributes of a rectangle are as follows \u2212<\/p>\n\n\n\n<ul><li><strong>x<\/strong>&nbsp;\u2212 This is the x-coordinate of the top-left corner of the rectangle.<\/li><li><strong>y<\/strong>&nbsp;\u2212 This is the y-coordinate of the top-left corner of the rectangle.<\/li><li><strong>width<\/strong>&nbsp;\u2212 This denotes the width of the rectangle.<\/li><li><strong>height<\/strong>&nbsp;\u2212 This denotes the height of the rectangle.<\/li><\/ul>\n\n\n\n<p>A simple rectangle in SVG is defined as explained below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n   &lt;rect x = \"20\" y = \"20\" width = \"300\" height = \"300\" fill = \"green\">&lt;\/rect>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p>The same rectangle can be created dynamically as described below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div id = \"svgcontainer\">&lt;\/div>\n      &lt;script>\n         var width = 300;\n         var height = 300;\n         \/\/Create SVG element\n         var svg = d3.select(\"#svgcontainer\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n         \/\/Create and append rectangle element\n         svg.append(\"rect\")\n            .attr(\"x\", 20)\n            .attr(\"y\", 20)\n            .attr(\"width\", 200)\n            .attr(\"height\", 100)\n            .attr(\"fill\", \"green\");\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>Circle Element<\/h2>\n\n\n\n<p>A circle is represented by the\u00a0<strong>&lt;circle><\/strong>\u00a0tag as explained below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;circle cx = \"200\" cy = \"50\" r = \"20\"\/><\/code><\/pre>\n\n\n\n<p>The attributes of circle are as follows \u2212<\/p>\n\n\n\n<ul><li><strong>cx<\/strong>&nbsp;\u2212 This is the x-coordinate of the center of the circle.<\/li><li><strong>cy<\/strong>&nbsp;\u2212 This is the y-coordinate of the center of the circle.<\/li><li><strong>r<\/strong>&nbsp;\u2212 This denotes the radius of the circle.<\/li><\/ul>\n\n\n\n<p>A simple circle in SVG is described below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n   &lt;circle cx = \"200\" cy = \"50\" r = \"20\" fill = \"green\"\/>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p>The same circle can be created dynamically as described below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div id = \"svgcontainer\">&lt;\/div>\n      &lt;script>\n         var width = 300;\n         var height = 300;\n         \/\/Create SVG element\n         var svg = d3.select(\"#svgcontainer\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n         \/\/Append circle \n         svg.append(\"circle\")\n            .attr(\"cx\", 200)\n            .attr(\"cy\", 50)\n            .attr(\"r\", 20)\n            .attr(\"fill\", \"green\");\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>Ellipse Element<\/h2>\n\n\n\n<p>The SVG Ellipse element is represented by the\u00a0<strong>&lt;ellipse><\/strong>\u00a0tag as explained below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ellipse cx = \"200\" cy = \"50\" rx = \"100\" ry = \"50\"\/><\/code><\/pre>\n\n\n\n<p>The attributes of an ellipse are as follows \u2212<\/p>\n\n\n\n<ul><li><strong>cx<\/strong>&nbsp;\u2212 This is the x-coordinate of the center of the ellipse.<\/li><li><strong>cy<\/strong>&nbsp;\u2212 This is the y-coordinate of the center of the ellipse.<\/li><li><strong>rx<\/strong>&nbsp;\u2212 This is the x radius of the circle.<\/li><li><strong>ry<\/strong>&nbsp;\u2212 This is the y radius of the circle.<\/li><\/ul>\n\n\n\n<p>A simple ellipse in the SVG is described below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n   &lt;ellipse cx = \"200\" cy = \"50\" rx = \"100\" ry = \"50\" fill = \"green\" \/>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p>The same ellipse can be created dynamically as below,<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div id = \"svgcontainer\">&lt;\/div>\n      &lt;script>\n         var width = 300;\n         var height = 300;\n         var svg = d3.select(\"#svgcontainer\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n         svg.append(\"ellipse\")\n            .attr(\"cx\", 200)\n            .attr(\"cy\", 50)\n            .attr(\"rx\", 100)\n            .attr(\"ry\", 50)\n            .attr(\"fill\", \"green\")\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>SVG stands for&nbsp;Scalable Vector Graphics. SVG is an XML-based vector graphics format. It provides options to draw different shapes such as Lines, Rectangles, Circles, Ellipses, etc. Hence, designing visualizations with SVG gives you more power and flexibility. Features of SVG Some of the salient features of SVG are as follows \u2212 SVG is a vector [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2143"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2143"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2143\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2144,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2143\/revisions\/2144"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2143"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2143"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2143"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2142,
        "date": "2020-07-03T12:01:25",
        "date_gmt": "2020-07-03T12:01:25",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2142"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "transition",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/transition\/",
        "title": {
            "rendered": "Transition"
        },
        "content": {
            "rendered": "\n<p>Transition is the process of changing from one state to another of an item. D3.js provides a&nbsp;<strong>transition()<\/strong>&nbsp;method to perform transition in the HTML page. Let us learn about transition in this chapter.<\/p>\n\n\n\n<h2>The transition() method<\/h2>\n\n\n\n<p>The transition() method is available for all selectors and it starts the transition process. This method supports most of the selection methods such as \u2013 attr(), style(), etc. But, It does not support the append() and the data() methods, which need to be called before the transition() method. Also, it provides methods specific to transition like duration(), ease(), etc. A simple transition can be defined as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\"body\")\n   .transition()\n   .style(\"background-color\", \"lightblue\");<\/code><\/pre>\n\n\n\n<p>A transition can be directly created using the d3.transition() method and then used along with selectors as follows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var t = d3.transition()\n   .duration(2000);\nd3.select(\"body\")\n   .transition(t)\n   .style(\"background-color\", \"lightblue\");<\/code><\/pre>\n\n\n\n<h2>A Minimal Example<\/h2>\n\n\n\n<p>Let us now create a basic example to understand how transition works.<\/p>\n\n\n\n<p>Create a new HTML file,\u00a0<strong>transition_simple.html<\/strong>\u00a0with the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>Simple transitions&lt;\/h3>\n      &lt;script>\n         d3.select(\"body\").transition().style(\"background-color\", \"lightblue\");\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we have selected the&nbsp;<strong>body<\/strong>&nbsp;element and then started transition by calling the transition() method. Then, we have instructed to transit the background color from the current color,&nbsp;<strong>white<\/strong>&nbsp;to&nbsp;<strong>light blue<\/strong>.<\/p>\n\n\n\n<p>Now, refresh the browser and on the screen, the background color changes from white to light blue. If we want to change the background color from light blue to gray, we can use the following transition \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\"body\").transition().style(\"background-color\", \"gray\");<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Transition is the process of changing from one state to another of an item. D3.js provides a&nbsp;transition()&nbsp;method to perform transition in the HTML page. Let us learn about transition in this chapter. The transition() method The transition() method is available for all selectors and it starts the transition process. This method supports most of the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2142"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2142"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2142\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2145,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2142\/revisions\/2145"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2142"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2142"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2142"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2141,
        "date": "2020-07-03T12:03:05",
        "date_gmt": "2020-07-03T12:03:05",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2141"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "animation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/animation\/",
        "title": {
            "rendered": "Animation"
        },
        "content": {
            "rendered": "\n<p>D3.js supports animation through transition. We can do animation with proper use of transition. Transitions are a limited form of&nbsp;<strong>Key Frame Animation<\/strong>&nbsp;with only two key frames \u2013 start and end. The starting key frame is typically the current state of the DOM, and the ending key frame is a set of attributes, styles and other properties you specify. Transitions are well suited for transitioning to a new view without a complicated code that depends on the starting view.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following code in \u201ctransition_color.html\u201d page.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>Simple transitions&lt;\/h3>\n      &lt;script>\n         d3.select(\"body\").style(\"background-color\", \"lightblue\") \n         \/\/ make the background-color lightblue.transition()\n         .style(\"background-color\", \"gray\");\n         \/\/ make the background-color gray\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, the Background color of the document changed from white to light gray and then to gray.<\/p>\n\n\n\n<h2>The duration() Method<\/h2>\n\n\n\n<p>The duration() method allows property changes to occur smoothly over a specified duration rather than instantaneously. Let us make the transition which takes 5 seconds using the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>Simple transitions&lt;\/h3>\n      &lt;script>\n         d3.selectAll(\"h3\").transition().style(\"color\",\"green\").duration(5000);\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, the transitions occurred smoothly and evenly. We can also assign RGB color code value directly using the following method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.selectAll(\"h3\").transition().style(\"color\",\"rgb(0,150,120)\").duration(5000);<\/code><\/pre>\n\n\n\n<p>Now, each color number slowly, smoothly and evenly goes from 0 to 150. To get the accurate blending of in-between frames from the start frame value to the end frame value, D3.js uses an internal interpolate method. The syntax is given below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.interpolate(a, b)\n<\/code><\/pre>\n\n\n\n<p>D3 also supports the following interpolation types \u2212<\/p>\n\n\n\n<ul><li><strong>interpolateNumber<\/strong>&nbsp;\u2212 support numerical values.<\/li><li><strong>interpolateRgb<\/strong>&nbsp;\u2212 support colors.<\/li><li><strong>interpolateString<\/strong>&nbsp;\u2212 support string.<\/li><\/ul>\n\n\n\n<p>D3.js takes care of using the proper interpolate method and in advanced cases, we can use the interpolate methods directly to get our desired result. We can even create a new interpolate method, if needed.<\/p>\n\n\n\n<h2>The delay() Method<\/h2>\n\n\n\n<p>The delay() method allows a transition to take place after a certain period of time. Consider the following code in \u201ctransition_delay.html\u201d.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3> Simple transitions &lt;\/h3>\n      &lt;script>\n         d3.selectAll(\"h3\").transition()\n            .style(\"font-size\",\"28px\").delay(2000).duration(2000);\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>Lifecycle of Transition<\/h2>\n\n\n\n<p>Transition has a four-phased lifecycle \u2212<\/p>\n\n\n\n<ul><li>The transition is scheduled.<\/li><li>The transition starts.<\/li><li>The transition runs.<\/li><li>The transition ends.<\/li><\/ul>\n\n\n\n<p>Let us go through each of these one by one in detail.<\/p>\n\n\n\n<h3>The Transition is scheduled<\/h3>\n\n\n\n<p>A transition is scheduled when it is created. When we call&nbsp;<strong>selection.transition<\/strong>, we are scheduling a transition. This is also when we call&nbsp;<strong>attr(), style()<\/strong>&nbsp;and other transition methods to define the ending key frame.<\/p>\n\n\n\n<h3>The Transition Starts<\/h3>\n\n\n\n<p>A transition starts based on its delay, which was specified when the transition was scheduled. If no delay was specified, then the transition starts as soon as possible, which is typically after a few milliseconds.<\/p>\n\n\n\n<p>If the transition has a delay, then the starting value should be set only when the transition starts. We can do this by listening to the start event \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\"body\")\n   .transition()\n   .delay(200)\n   .each(\"start\", function() { d3.select(this).style(\"color\", \"green\"); })\n   .style(\"color\", \"red\");<\/code><\/pre>\n\n\n\n<h3>The Transition Runs<\/h3>\n\n\n\n<p>When the transition runs, it repeatedly invoked with values of transition ranging from 0 to 1. In addition to delay and duration, transitions have easing to control timing. Easing distorts time, such as for slow-in and slow-out. Some easing functions may temporarily give values of t greater than 1 or less than 0.<\/p>\n\n\n\n<h3>The Transition Ends<\/h3>\n\n\n\n<p>The transition ending time is always exactly 1, so that the ending value is set exactly when the transition ends. A transition ends based on the sum of its delay and duration. When a transition ends, the end event is dispatched.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>D3.js supports animation through transition. We can do animation with proper use of transition. Transitions are a limited form of&nbsp;Key Frame Animation&nbsp;with only two key frames \u2013 start and end. The starting key frame is typically the current state of the DOM, and the ending key frame is a set of attributes, styles and other [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2141"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2141"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2141\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2146,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2141\/revisions\/2146"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2141"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2141"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2141"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2140,
        "date": "2020-07-03T12:08:22",
        "date_gmt": "2020-07-03T12:08:22",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2140"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "graphs",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/graphs\/",
        "title": {
            "rendered": "Graphs"
        },
        "content": {
            "rendered": "\n<p>A Graph is a 2-dimensional flat space represented as a rectangle. Graphs have a coordinate space where x = 0 and y = 0 coordinates fall on the bottom left. According to mathematical Cartesian coordinate space, graphs have the X coordinate growing from left to right and the Y coordinate growing from bottom to top.<\/p>\n\n\n\n<p>When we talk about drawing a circle with x = 30 and y = 30 coordinates, we go 30 units from the bottom left to the right and then we go 30 units up.<\/p>\n\n\n\n<h2>SVG Coordinate Space<\/h2>\n\n\n\n<p>SVG Coordinate Space works in the same way that a mathematical graph coordinate space works, except for two important features \u2212<\/p>\n\n\n\n<ul><li>SVG Coordinate space has x = 0 and y = 0 coordinates fall on the top left.<\/li><li>SVG Coordinate space has the Y coordinate growing from top to bottom.<\/li><\/ul>\n\n\n\n<h3>SVG Coordinate Space Graph<\/h3>\n\n\n\n<p>When we talk about drawing a circle with x = 30 and y = 30 coordinates in the SVG Coordinate Space, we go 30 units from the top left to the right and then we go down 30 units up. It is defined as follows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svgContainer = d3\n   .select(\"body\")\n   .append(\"svg\")\n   .attr(\"width\", 200)\n   .attr(\"height\", 200);<\/code><\/pre>\n\n\n\n<p>Consider, SVG element as a graph 200 units wide and 200 units tall. We now know that the X and Y zero coordinates are at the top left. We also now know that as the Y coordinate grows, it will move from the top to the bottom of our graph. You can style the SVG elements as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svgContainer = d3\n   .select(\"body\").append(\"svg\")\n   .attr(\"width\", 200)\n   .attr(\"height\", 200)\n   .style(\"border\", \"1px solid black\");<\/code><\/pre>\n\n\n\n<h3>Graph Example<\/h3>\n\n\n\n<p>Let us consider an example of the Line graph.<\/p>\n\n\n\n<p><strong>Line Graph<\/strong>&nbsp;\u2212 A line graph is used to visualize the value of something over time. It compares two variables. Each variable is plotted along an axis. A line graph has a vertical axis and a horizontal axis.<\/p>\n\n\n\n<p>In this example graph, we can take csv file records as Indian States Population Growth form year 2006 to 2017. Let us first create a&nbsp;<strong>data.csv<\/strong>&nbsp;to show the population records.<\/p>\n\n\n\n<p>Create a new csv file in your D3 folder \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>year,population\n2006,40\n2008,45\n2010,48\n2012,51\n2014,53\n2016,57\n2017,62<\/code><\/pre>\n\n\n\n<p>Now, save the file and perform the following steps to draw a line graph in D3. Let us go through each step in detail.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212\u00a0<strong>Adding styles<\/strong>\u00a0\u2212 Let us add a style to the\u00a0<strong>line<\/strong>\u00a0class using the code given below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.line {\n   fill: none;\n   stroke: green;\n   stroke-width: 5px;\n}<\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212\u00a0<strong>Define variables<\/strong>\u00a0\u2212 The SVG attributes are defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var margin = {top: 20, right: 20, bottom: 30, left: 50},\n   width = 960 - margin.left - margin.right,\n   height = 500 - margin.top - margin.bottom;<\/code><\/pre>\n\n\n\n<p>Here, the first line defines the four margins, which surround the block where the graph is positioned.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>\u00a0\u2212\u00a0<strong>Define line<\/strong>\u00a0\u2212 Draw a new line using the\u00a0<strong>d3.line()<\/strong>\u00a0function, which is shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var valueline = d3.line()\n   .x(function(d) { return x(d.year); })\n   .y(function(d) { return y(d.population); });<\/code><\/pre>\n\n\n\n<p>Here, Year represents the data in the X-axis records and the population refers to the data in the Y-axis.<\/p>\n\n\n\n<p><strong>Step 4<\/strong>\u00a0\u2212\u00a0<strong>Append SVG attributes<\/strong>\u00a0\u2212 Append SVG attributes and group elements using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svg = d3.select(\"body\").append(\"svg\")\n   .attr(\"width\", width + margin.left + margin.right)\n   .attr(\"height\", height + margin.top + margin.bottom)\n   .append(\"g\").attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");<\/code><\/pre>\n\n\n\n<p>Here, we have appended the group elements and applied the transformation.<\/p>\n\n\n\n<p><strong>Step 5<\/strong>\u00a0\u2212\u00a0<strong>Read data<\/strong>\u00a0\u2212 Now, we can read data from our dataset\u00a0<strong>data.csv<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.csv(\"data.csv\", function(error, data) {\n   if (error) throw error;\n}<\/code><\/pre>\n\n\n\n<p>Here, the data.csv is not present, it throws an error.<\/p>\n\n\n\n<p><strong>Step 6<\/strong>\u00a0\u2212\u00a0<strong>Format data<\/strong>\u00a0\u2212 Now, format the data using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>data.forEach(function(d) {\n   d.year = d.year;\n   d.population = +d.population;\n});<\/code><\/pre>\n\n\n\n<p>This above code ensures that all the values that are pulled out of the csv file are set and formatted correctly. Each row consists of two values \u2212 one value for \u2018year\u2019 and another value for \u2018population\u2019. The function is pulling out values of \u2018year\u2019 and \u2018population\u2019 one row at a time.<\/p>\n\n\n\n<p><strong>Step 7<\/strong>\u00a0\u2212\u00a0<strong>Set scale range<\/strong>\u00a0\u2212 After data formatted, you can set the scale range for X and Y.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>x.domain(d3.extent(data, function(d) { return d.year; }));\ny.domain(&#91;0, d3.max(data, function(d) { return d.population; })]);<\/code><\/pre>\n\n\n\n<p><strong>Step 8<\/strong>\u00a0\u2212\u00a0<strong>Append path<\/strong>\u00a0\u2212 Append path and data as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"path\").data(&#91;data])\n   .attr(\"class\", \"line\").attr(\"d\", valueline);<\/code><\/pre>\n\n\n\n<p><strong>Step 9<\/strong>\u00a0\u2212\u00a0<strong>Add X-axis<\/strong>\u00a0\u2212 Now, you can add X-axis using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"g\")\n   .attr(\"transform\", \"translate(0,\" + height + \")\")\n   .call(d3.axisBottom(x));<\/code><\/pre>\n\n\n\n<p><strong>Step 10<\/strong>\u00a0\u2212\u00a0<strong>Add Y-axis<\/strong>\u00a0\u2212 We can add Y-axis to the group as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"g\")\n   .call(d3.axisLeft(y));<\/code><\/pre>\n\n\n\n<p><strong>Step 11<\/strong>&nbsp;\u2212&nbsp;<strong>Working Example<\/strong>&nbsp;\u2212 The complete code is given in the following code block. Create a simple webpage&nbsp;<strong>linegraphs.html<\/strong>&nbsp;and add the following changes to it.<\/p>\n\n\n\n<p><strong>graph.html<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;style> \n         .line {\n            fill: none;\n            stroke: green;\n            stroke-width: 5px;\n         }\n      &lt;\/style>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;script>\n         \/\/ set the dimensions and margins of the graph\n         var margin = {top: 20, right: 20, bottom: 30, left: 50},\n         width = 960 - margin.left - margin.right,\n         height = 500 - margin.top - margin.bottom;\n\n         \/\/ set the ranges\n         var x = d3.scaleTime().range(&#91;0, width]);\n         var y = d3.scaleLinear().range(&#91;height, 0]);\n\n         \/\/ define the line\n         var valueline = d3.line()\n            .x(function(d) { return x(d.year); })\n            .y(function(d) { return y(d.population); });\n\n         \/\/ append the svg obgect to the body of the page\n         \/\/ appends a 'group' element to 'svg'\n         \/\/ moves the 'group' element to the top left margin\n         var svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\").attr(\"transform\",\n               \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n         \/\/ Get the data\n         d3.csv(\"data.csv\", function(error, data) {\n            if (error) throw error;\n            \/\/ format the data\n            data.forEach(function(d) {\n               d.year = d.year;\n               d.population = +d.population;\n            });\n\n            \/\/ Scale the range of the data\n            x.domain(d3.extent(data, function(d) { return d.year; }));\n            y.domain(&#91;0, d3.max(data, function(d) { return d.population; })]);\n\n            \/\/ Add the valueline path.\n            svg.append(\"path\")\n               .data(&#91;data])\n               .attr(\"class\", \"line\")\n               .attr(\"d\", valueline);\n\n            \/\/ Add the X Axis\n            svg.append(\"g\")\n               .attr(\"transform\", \"translate(0,\" + height + \")\")\n               .call(d3.axisBottom(x));\n\n            \/\/ Add the Y Axis\n            svg.append(\"g\")\n               .call(d3.axisLeft(y));\n         });\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/graph.jpg\" alt=\"Graph\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A Graph is a 2-dimensional flat space represented as a rectangle. Graphs have a coordinate space where x = 0 and y = 0 coordinates fall on the bottom left. According to mathematical Cartesian coordinate space, graphs have the X coordinate growing from left to right and the Y coordinate growing from bottom to top. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2140"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2140"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2140\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2147,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2140\/revisions\/2147"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2140"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2140"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2140"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2139,
        "date": "2020-07-03T12:19:45",
        "date_gmt": "2020-07-03T12:19:45",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2139"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "geographies",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/geographies\/",
        "title": {
            "rendered": "Geographies"
        },
        "content": {
            "rendered": "\n<p>Geospatial coordinates are often used for weather or population data. D3.js gives us three tools for geographic data \u2212<\/p>\n\n\n\n<ul><li><strong>Paths<\/strong>&nbsp;\u2212 They produce the final pixels.<\/li><li><strong>Projections<\/strong>&nbsp;\u2212 They turn sphere coordinates into Cartesian coordinates and<\/li><li><strong>Streams<\/strong>&nbsp;\u2212 They speed things up.<\/li><\/ul>\n\n\n\n<p>Before learning what geographies in D3.js are, we should understand the following two terms \u2212<\/p>\n\n\n\n<ul><li>D3 Geo Path and<\/li><li>Projections<\/li><\/ul>\n\n\n\n<p>Let us discuss these two terms in detail.<\/p>\n\n\n\n<h2>D3 Geo Path<\/h2>\n\n\n\n<p>It is a geographic path generator. GeoJSON generates SVG path data string or renders the path to a Canvas. A Canvas is recommended for dynamic or interactive projections to improve performance. To generate a D3 Geo Path Data Generator, you can call the following function.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.geo.path()\n<\/code><\/pre>\n\n\n\n<p>Here, the&nbsp;<strong>d3.geo.path()<\/strong>&nbsp;path generator function allows us to select which Map Projection we want to use for the translation from Geo Coordinates to Cartesian Coordinates.<\/p>\n\n\n\n<p>For example, if we want to show the map details of India, we can define a path as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var path = d3.geo.path()\nsvg.append(\"path\")\n   .attr(\"d\", path(states))<\/code><\/pre>\n\n\n\n<h2>Projections<\/h2>\n\n\n\n<p>Projections transform spherical polygonal geometry to planar polygonal geometry. D3 provides the following projection implementations.<\/p>\n\n\n\n<ul><li><strong>Azimuthal<\/strong>&nbsp;\u2212 Azimuthal projections project the sphere directly onto a plane.<\/li><li><strong>Composite<\/strong>&nbsp;\u2212 Composite consists of several projections that are composed into a single display.<\/li><li><strong>Conic<\/strong>&nbsp;\u2212 Projects the sphere onto a cone and then unroll the cone onto the plane.<\/li><li><strong>Cylindrical<\/strong>&nbsp;\u2212 Cylindrical projections project the sphere onto a containing cylinder, and then unroll the cylinder onto the plane.<\/li><\/ul>\n\n\n\n<p>To create a new projection, you can use the following function.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.geoProjection(project)\n<\/code><\/pre>\n\n\n\n<p>It constructs a new projection from the specified raw projection project. The project function takes the longitude and latitude of a given point in radians. You can apply the following projection in your code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var width = 400\nvar height = 400\nvar projection = d3.geo.orthographic() \nvar projections = d3.geo.equirectangular()\nvar project = d3.geo.gnomonic()\nvar p = d3.geo.mercator()\nvar pro = d3.geo.transverseMercator()\n   .scale(100)\n   .rotate(&#91;100,0,0])\n   .translate(&#91;width\/2, height\/2])\n   .clipAngle(45);<\/code><\/pre>\n\n\n\n<p>Here, we can apply any one of the above projections. Let us discuss each of these projections in brief.<\/p>\n\n\n\n<ul><li><strong>d3.geo.orthographic()<\/strong>&nbsp;\u2212 The orthographic projection is an azimuthal projection suitable for displaying a single hemisphere; the point of perspective is at infinity.<\/li><li><strong>d3.geo.gnomonic()<\/strong>&nbsp;\u2212 The gnomonic projection is an azimuthal projection that projects great circles as straight lines.<\/li><li><strong>d3.geo.equirectangular()<\/strong>&nbsp;\u2212 The equirectangular is the simplest possible geographic projection. The identity function. It is neither equal-area nor conformal, but is sometimes used for raster data.<\/li><li><strong>d3.geo.mercator()<\/strong>&nbsp;\u2212 The Spherical Mercator projection is commonly used by tiled mapping libraries.<\/li><li><strong>d3.geo.transverseMercator()<\/strong>&nbsp;\u2212 The Transverse Mercator projection.<\/li><\/ul>\n\n\n\n<h3>Working Example<\/h3>\n\n\n\n<p>Let us create the map of India in this example. To do this, we should adhere to the following steps.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212&nbsp;<strong>Apply styles<\/strong>&nbsp;\u2212 Let us add styles in map using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style>\n   path {\n      stroke: white;\n      stroke-width: 0.5px;\n      fill: grey;\n   }\n   \n   .stateTN { fill: red; }\n   .stateAP { fill: blue; }\n   .stateMP{ fill: green; }\n&lt;\/style><\/code><\/pre>\n\n\n\n<p>Here, we have applied particular colors for state TN, AP and MP.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212&nbsp;<strong>Include topojson script<\/strong>&nbsp;\u2212 TopoJSON is an extension of GeoJSON that encodes topology, which is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"http:\/\/d3js.org\/topojson.v0.min.js\">&lt;\/script>\n<\/code><\/pre>\n\n\n\n<p>We can include this script in our coding.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212&nbsp;<strong>Define variables<\/strong>&nbsp;\u2212 Add variables in your script, using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var width = 600;\nvar height = 400;\nvar projection = d3.geo.mercator()\n   .center(&#91;78, 22])\n   .scale(680)\n   .translate(&#91;width \/ 2, height \/ 2]);<\/code><\/pre>\n\n\n\n<p>Here, SVG width is 600 and height is 400. The screen is a two-dimensional space and we are trying to present a three-dimensional object. So, we can grievously distort the land size \/ shape using the&nbsp;<strong>d3.geo.mercator()<\/strong>&nbsp;function.<\/p>\n\n\n\n<p>The center is specified [78, 22], this sets the projection\u2019s center to the specified location as a two-element array of longitude and latitude in degrees and returns the projection.<\/p>\n\n\n\n<p>Here, the map has been centered on 78 degrees West and 22 degrees North.<\/p>\n\n\n\n<p>The Scale is specified as 680, this sets the projection\u2019s scale factor to the specified value. If the scale is not specified, it returns the current scale factor, which defaults to 150. It is important to note that scale factors are not consistent across projections.<\/p>\n\n\n\n<p><strong>Step 4<\/strong>&nbsp;\u2212&nbsp;<strong>Append SVG<\/strong>&nbsp;\u2212 Now, append the SVG attributes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svg = d3.select(\"body\").append(\"svg\")\n   .attr(\"width\", width)\n   .attr(\"height\", height);<\/code><\/pre>\n\n\n\n<p><strong>Step 5<\/strong>&nbsp;\u2212&nbsp;<strong>Create path<\/strong>&nbsp;\u2212 The following portion of code creates a new geographic path generator.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">var path = d3.geo.path()<br>   .projection(projection);<\/pre>\n\n\n\n<p>Here, the path generator (d3.geo.path()) is used to specify a projection type (.projection), which was defined earlier as a Mercator projection using the variable projection.<\/p>\n\n\n\n<p><strong>Step 6<\/strong>&nbsp;\u2212&nbsp;<strong>Generate data<\/strong>&nbsp;\u2212 indiatopo.json \u2013 This file contains so many records, which we can easily download from the following attachment.<\/p>\n\n\n\n<p>Download&nbsp;<strong>indiatopo.json file<\/strong><\/p>\n\n\n\n<p>After the file has been downloaded, we can add it our D3 location. The sample format is shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"type\":\"Topology\",\"transform\":{\"scale\":&#91;0.002923182318231823,0.0027427542754275428],\n\"translate\":&#91;68.1862,8.0765]},\"objects\":\n{\"states\":{\"type\":\"GeometryCollection\",\n\"geometries\":&#91;{\"type\":\"MultiPolygon\",\"id\":\"AP\",\"arcs\":\n&#91;&#91;&#91;0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,\n25,26,27,28,29,30,31,32,33,34]],&#91;&#91;35,36,37,38,39,40,41]],&#91;&#91;42]],\n&#91;&#91;43,44,45]],&#91;&#91;46]],&#91;&#91;47]],&#91;&#91;48]],&#91;&#91;49]],&#91;&#91;50]],&#91;&#91;51]],&#91;&#91;52,53]],\n&#91;&#91;54]],&#91;&#91;55]],&#91;&#91;56]],&#91;&#91;57,58]],&#91;&#91;59]],&#91;&#91;60]],&#91;&#91;61,62,63]],&#91;&#91;64]],\n&#91;&#91;65]],&#91;&#91;66]],&#91;&#91;67]],&#91;&#91;68]],&#91;&#91;69]],&#91;&#91;-41,70]],\n&#91;&#91;71]],&#91;&#91;72]],&#91;&#91;73]],&#91;&#91;74]],&#91;&#91;75]]],\n\"properties\":{\"name\":\"Andhra Pradesh\"}},{\"type\":\"MultiPolygon\",\n\"id\":\"AR\",\"arcs\":&#91;&#91;&#91;76,77,78,79,80,81,82]]],\n\"properties\":{\"name\":\"Arunachal Pradesh\"}},{\"type\":\"MultiPolygon\",\n\"id\":\"AS\",\"arcs\":&#91;&#91;&#91;83,84,85,86,87,88,89,90,\n91,92,93,94,95,96,97,98,99,100,101,102,103]],\n&#91;&#91;104,105,106,107]],&#91;&#91;108,109]]], ......\n<\/code><\/pre>\n\n\n\n<p><strong>Step 7<\/strong>\u00a0\u2212\u00a0<strong>Draw map<\/strong>\u00a0\u2212 Now, read the data from the\u00a0<strong>indiatopo.json<\/strong>\u00a0file and draw the map.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.json(\"indiatopo.json\", function(error, topology) {\n   g.selectAll(\"path\")\n   .data(topojson.object(topology, topology.objects.states)\n   .geometries)\n   .enter()\n   .append(\"path\")\n   .attr(\"class\", function(d) { return \"state\" + d.id; })\n   .attr(\"d\", path)\n});<\/code><\/pre>\n\n\n\n<p>Here, we will load the TopoJSON file with the coordinates for the India map (indiatopo.json). Then we declare that we are going to act on all the path elements in the graphic. It is defined as, g.selectAll(\u201cpath\u201d). We will then pull the data that defines the countries from the TopoJSON file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.data(topojson.object(topology, topology.objects.states)\n   .geometries)<\/code><\/pre>\n\n\n\n<p>Finally, we will add it to the data that we are going to display using the&nbsp;<strong>.enter()<\/strong>&nbsp;method and then we append that data as path elements using the&nbsp;<strong>.append(\u201cpath\u201d)<\/strong>&nbsp;method.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Geospatial coordinates are often used for weather or population data. D3.js gives us three tools for geographic data \u2212 Paths&nbsp;\u2212 They produce the final pixels. Projections&nbsp;\u2212 They turn sphere coordinates into Cartesian coordinates and Streams&nbsp;\u2212 They speed things up. Before learning what geographies in D3.js are, we should understand the following two terms \u2212 D3 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2139"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2139"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2139\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2148,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2139\/revisions\/2148"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2139"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2139"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2139"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2138,
        "date": "2020-07-03T12:25:02",
        "date_gmt": "2020-07-03T12:25:02",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2138"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "svg-transformation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/svg-transformation\/",
        "title": {
            "rendered": "SVG Transformation"
        },
        "content": {
            "rendered": "\n<p>SVG provides options to transform a single SVG shape element or group of SVG elements. SVG transform supports&nbsp;<strong>Translate, Scale, Rotate<\/strong>&nbsp;and&nbsp;<strong>Skew<\/strong>. Let us learn transformation in this chapter.<\/p>\n\n\n\n<h2>Introduction to SVG Transformation<\/h2>\n\n\n\n<p>SVG introduces a new attribute,&nbsp;<strong>transform<\/strong>&nbsp;to support transformation. The possible values are one or more of the following,<\/p>\n\n\n\n<ul><li><strong>Translate<\/strong>&nbsp;\u2212 It takes two options,&nbsp;<strong>tx<\/strong>&nbsp;refers translation along the x-axis and&nbsp;<strong>ty<\/strong>&nbsp;refers to the translation along the y-axis. For&nbsp;<strong>Example<\/strong>\u2212 translate(30 30).<\/li><li><strong>Rotate<\/strong>&nbsp;\u2212 It takes three options,&nbsp;<strong>angle<\/strong>&nbsp;refers rotation angle,&nbsp;<strong>cx<\/strong>&nbsp;and&nbsp;<strong>cy<\/strong>&nbsp;refers to the center of the rotation in the x and y axis. If&nbsp;<strong>cx<\/strong>&nbsp;and&nbsp;<strong>cy<\/strong>&nbsp;are not specified, then it defaults to the current origin of the coordinate system. For&nbsp;<strong>Example<\/strong>&nbsp;\u2212 rotate(60).<\/li><li><strong>Scale<\/strong>&nbsp;\u2212 It takes two options,&nbsp;<strong>sx<\/strong>&nbsp;refers to the scaling factor along the x-axis and&nbsp;<strong>sy<\/strong>refers to the scaling factor along the y-axis. Here,&nbsp;<strong>sy<\/strong>&nbsp;is optional and it takes the value of&nbsp;<strong>sx<\/strong>, if it is not specified. For&nbsp;<strong>Example<\/strong>&nbsp;\u2212 scale(10).<\/li><li><strong>Skew (SkewX and SkewY)<\/strong>&nbsp;\u2212 It takes a single option; the&nbsp;<strong>skew-angle<\/strong>&nbsp;refers to the angle along the x-axis for SkewX and the angle along the y-axis for SkewY. For&nbsp;<strong>Example<\/strong>&nbsp;\u2212 skewx(20).<\/li><\/ul>\n\n\n\n<p>An example of the SVG rectangle with translate, which is described as follows <\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;svg width = \"300\" height = \"300\">\n         &lt;rect x = \"20\" \n            y = \"20\"\n            width = \"60\"\n            height = \"60\"\n            fill = \"green\"\n            transform = \"translate(30 30)\">\n         &lt;\/rect>\n      &lt;\/svg>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>More than one transformation can be specified for a single SVG element using space as separation. If more than one value is specified, the transformation will be applied one by one sequentially in the order specified.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;svg width = \"300\" height = \"300\">\n         &lt;rect x = \"20\" \n            y = \"20\" \n            width = \"60\" \n            height = \"60\" \n            fill = \"green\" \n            transform = \"translate(60 60) rotate(45)\">\n         &lt;\/rect>\n      &lt;\/svg>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Transformation can be applied to the SVG group element as well. This enables to transform complex graphics defined in the SVG as described below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;svg width = \"300\" height = \"300\">\n         &lt;g transform = \"translate(60,60) rotate(30)\">\n            &lt;rect x = \"20\" \n               y = \"20\" \n               width = \"60\" \n               height = \"30\" \n               fill = \"green\">\n            &lt;\/rect>\n            &lt;circle cx = \"0\" \n               cy = \"0\" \n               r = \"30\" \n               fill = \"red\"\/>\n         &lt;\/g>\n      &lt;\/svg>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>A Minimal Example<\/h2>\n\n\n\n<p>To create an SVG image, try to scale, and rotate it using transformation, let us follow the steps given below.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212 Create an SVG image and set width as 300 pixels and height as 300 pixels.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212 Create an SVG group.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n   &lt;g>\n   &lt;\/g>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p><strong>Step 3<\/strong>\u00a0\u2212 Create a rectangle of length 60 and height 30 and fill it with green color.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n   &lt;g>\n      &lt;rect x = \"20\" \n         y = \"20\" \n         width = \"60\" \n         height = \"30\" \n         fill = \"green\">\n      &lt;\/rect>\n   &lt;\/g>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p><strong>Step 4<\/strong>\u00a0\u2212 Create a circle of radius 30 and fill it with red color.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n   &lt;g>\n      &lt;rect x = \"20\" \n         y = \"20\" \n         width = \"60\" \n         height = \"30\" \n         fill = \"green\">\n      &lt;\/rect>\n      &lt;circle cx = \"0\" \n         cy = \"0\" \n         r = \"30\" \n         fill = \"red\"\/>\n   &lt;\/g>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p><strong>Step 5<\/strong>\u00a0\u2212 Add a transform attribute and add translate and rotate as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;svg width = \"300\" height = \"300\">\n   &lt;g transform = \"translate(60,60) rotate(30)\">\n      &lt;rect x = \"20\" \n         y = \"20\" \n         width = \"60\" \n         height = \"60\" \n         fill = \"green\">\n      &lt;\/rect>\n      &lt;circle cx = \"0\" \n         cy = \"0\" \n         r = \"30\" \n         fill = \"red\"\/>\n   &lt;\/g>\n&lt;\/svg><\/code><\/pre>\n\n\n\n<p><strong>Step 6<\/strong>\u00a0\u2212 Create an HTML document, \u201csvg_transform_rotate_group.html\u201d and integrate the above SVG as explained below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;style>\n         body { font-family: Arial; }\n      &lt;\/style>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div id = \"svgcontainer\">\n         &lt;svg width = \"300\" height = \"300\">\n            &lt;g transform = \"translate(60,60) rotate(30)\">\n               &lt;rect x = \"20\" \n                  y = \"20\" \n                  width = \"60\" \n                  height = \"60\" \n                  fill = \"green\">\n               &lt;\/rect>\n               &lt;circle cx = \"0\" \n                  cy = \"0\" \n                  r = \"30\" \n                  fill = \"red\"\/>\n            &lt;\/g>\n         &lt;\/svg>\n      &lt;\/div>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h3>Transformation Using D3.js<\/h3>\n\n\n\n<p>To create SVG using D3.js, let us follow the steps given below.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212 Create a container to hold the SVG image as explained below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"svgcontainer\">&lt;\/div><\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212 Create a SVG image as explained below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var width = 300;\nvar height = 300;\nvar svg = d3.select(\"#svgcontainer\")\n   .append(\"svg\")\n   .attr(\"width\", width)\n   .attr(\"height\", height);<\/code><\/pre>\n\n\n\n<p><strong>Step 3<\/strong>\u00a0\u2212 Create a SVG group element and set translate and rotate attributes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var group = svg.append(\"g\").attr(\"transform\", \"translate(60, 60) rotate(30)\");<\/code><\/pre>\n\n\n\n<p><strong>Step 4<\/strong>\u00a0\u2212 Create an SVG rectangle and append it inside the group.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var rect = group\n   .append(\"rect\")\n   .attr(\"x\", 20)\n   .attr(\"y\", 20)\n   .attr(\"width\", 60)\n   .attr(\"height\", 30)\n   .attr(\"fill\", \"green\")<\/code><\/pre>\n\n\n\n<p><strong>Step 5<\/strong>\u00a0\u2212 Create an SVG circle and append it inside the group.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var circle = group\n   .append(\"circle\")\n   .attr(\"cx\", 0)\n   .attr(\"cy\", 0)\n   .attr(\"r\", 30)\n   .attr(\"fill\", \"red\")<\/code><\/pre>\n\n\n\n<p>The complete code is as follows<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;title>SVG rectangle&lt;\/title>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;style>\n         body { font-family: Arial; }\n      &lt;\/style>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;div id = \"svgcontainer\">&lt;\/div>\n         &lt;script language = \"javascript\">\n            var width = 300;\n            var height = 300;\n            var svg = d3.select(\"#svgcontainer\")\n               .append(\"svg\")\n               .attr(\"width\", width)\n               .attr(\"height\", height);\n\n            var group = svg.append(\"g\")\n               .attr(\"transform\", \"translate(60, 60) rotate(30)\");\n            \n            var rect = group.append(\"rect\")\n               .attr(\"x\", 20)\n               .attr(\"y\", 20)\n               .attr(\"width\", 60)\n               .attr(\"height\", 30)\n               .attr(\"fill\", \"green\")\n            \n            var circle = group\n               .append(\"circle\")\n               .attr(\"cx\", 0)\n               .attr(\"cy\", 0)\n               .attr(\"r\", 30)\n               .attr(\"fill\", \"red\")\n         &lt;\/script>\n      &lt;\/div>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>Transform Library<\/h2>\n\n\n\n<p>D3.js provides a separate library to manage transform without manually creating the transform attributes. It provides methods to handle all type of transformation. Some of the methods are\u00a0<strong>transform(), translate(), scale(), rotate()<\/strong>, etc. You can include\u00a0<strong>d3-transform<\/strong>in your webpage using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"http:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n&lt;script src = \"d3-transform.js\">&lt;\/script><\/code><\/pre>\n\n\n\n<p>In the above example, the transform code can be written as shown below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var my_transform = d3Transform()\n   .translate(&#91;60, 60])\n   .rotate(30);\n\nvar group = svg\n   .append(\"g\")\n   .attr(\"transform\", my_transform);<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>SVG provides options to transform a single SVG shape element or group of SVG elements. SVG transform supports&nbsp;Translate, Scale, Rotate&nbsp;and&nbsp;Skew. Let us learn transformation in this chapter. Introduction to SVG Transformation SVG introduces a new attribute,&nbsp;transform&nbsp;to support transformation. The possible values are one or more of the following, Translate&nbsp;\u2212 It takes two options,&nbsp;tx&nbsp;refers translation along [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2138"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2138"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2138\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2149,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2138\/revisions\/2149"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2138"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2138"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2138"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2137,
        "date": "2020-07-03T12:35:12",
        "date_gmt": "2020-07-03T12:35:12",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2137"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "animation-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/animation-2\/",
        "title": {
            "rendered": "Animation"
        },
        "content": {
            "rendered": "\n<p>D3.js supports animation through transition. We can do animation with proper use of transition. Transitions are a limited form of&nbsp;<strong>Key Frame Animation<\/strong>&nbsp;with only two key frames \u2013 start and end. The starting key frame is typically the current state of the DOM, and the ending key frame is a set of attributes, styles and other properties you specify. Transitions are well suited for transitioning to a new view without a complicated code that depends on the starting view.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following code in \u201ctransition_color.html\u201d page.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>Simple transitions&lt;\/h3>\n      &lt;script>\n         d3.select(\"body\").style(\"background-color\", \"lightblue\") \n         \/\/ make the background-color lightblue.transition()\n         .style(\"background-color\", \"gray\");\n         \/\/ make the background-color gray\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, the Background color of the document changed from white to light gray and then to gray.<\/p>\n\n\n\n<h2>The duration() Method<\/h2>\n\n\n\n<p>The duration() method allows property changes to occur smoothly over a specified duration rather than instantaneously. Let us make the transition which takes 5 seconds using the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>Simple transitions&lt;\/h3>\n      &lt;script>\n         d3.selectAll(\"h3\").transition().style(\"color\",\"green\").duration(5000);\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, the transitions occurred smoothly and evenly. We can also assign RGB color code value directly using the following method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.selectAll(\"h3\").transition().style(\"color\",\"rgb(0,150,120)\").duration(5000);<\/code><\/pre>\n\n\n\n<p>Now, each color number slowly, smoothly and evenly goes from 0 to 150. To get the accurate blending of in-between frames from the start frame value to the end frame value, D3.js uses an internal interpolate method. The syntax is given below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.interpolate(a, b)<\/code><\/pre>\n\n\n\n<p>D3 also supports the following interpolation types \u2212<\/p>\n\n\n\n<ul><li><strong>interpolateNumber<\/strong>&nbsp;\u2212 support numerical values.<\/li><li><strong>interpolateRgb<\/strong>&nbsp;\u2212 support colors.<\/li><li><strong>interpolateString<\/strong>&nbsp;\u2212 support string.<\/li><\/ul>\n\n\n\n<p>D3.js takes care of using the proper interpolate method and in advanced cases, we can use the interpolate methods directly to get our desired result. We can even create a new interpolate method, if needed.<\/p>\n\n\n\n<h2>The delay() Method<\/h2>\n\n\n\n<p>The delay() method allows a transition to take place after a certain period of time. Consider the following code in \u201ctransition_delay.html\u201d.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3> Simple transitions &lt;\/h3>\n      &lt;script>\n         d3.selectAll(\"h3\").transition()\n            .style(\"font-size\",\"28px\").delay(2000).duration(2000);\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>Lifecycle of Transition<\/h2>\n\n\n\n<p>Transition has a four-phased lifecycle \u2212<\/p>\n\n\n\n<ul><li>The transition is scheduled.<\/li><li>The transition starts.<\/li><li>The transition runs.<\/li><li>The transition ends.<\/li><\/ul>\n\n\n\n<p>Let us go through each of these one by one in detail.<\/p>\n\n\n\n<h3>The Transition is scheduled<\/h3>\n\n\n\n<p>A transition is scheduled when it is created. When we call&nbsp;<strong>selection.transition<\/strong>, we are scheduling a transition. This is also when we call&nbsp;<strong>attr(), style()<\/strong>&nbsp;and other transition methods to define the ending key frame.<\/p>\n\n\n\n<h3>The Transition Starts<\/h3>\n\n\n\n<p>A transition starts based on its delay, which was specified when the transition was scheduled. If no delay was specified, then the transition starts as soon as possible, which is typically after a few milliseconds.<\/p>\n\n\n\n<p>If the transition has a delay, then the starting value should be set only when the transition starts. We can do this by listening to the start event \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\"body\")\n   .transition()\n   .delay(200)\n   .each(\"start\", function() { d3.select(this).style(\"color\", \"green\"); })\n   .style(\"color\", \"red\");<\/code><\/pre>\n\n\n\n<h3>The Transition Runs<\/h3>\n\n\n\n<p>When the transition runs, it repeatedly invoked with values of transition ranging from 0 to 1. In addition to delay and duration, transitions have easing to control timing. Easing distorts time, such as for slow-in and slow-out. Some easing functions may temporarily give values of t greater than 1 or less than 0.<\/p>\n\n\n\n<h3>The Transition Ends<\/h3>\n\n\n\n<p>The transition ending time is always exactly 1, so that the ending value is set exactly when the transition ends. A transition ends based on the sum of its delay and duration. When a transition ends, the end event is dispatched.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>D3.js supports animation through transition. We can do animation with proper use of transition. Transitions are a limited form of&nbsp;Key Frame Animation&nbsp;with only two key frames \u2013 start and end. The starting key frame is typically the current state of the DOM, and the ending key frame is a set of attributes, styles and other [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2137"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2137"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2137\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2156,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2137\/revisions\/2156"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2137"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2137"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2137"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2155,
        "date": "2020-07-03T12:38:49",
        "date_gmt": "2020-07-03T12:38:49",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2155"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "graphs-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/graphs-2\/",
        "title": {
            "rendered": "Graphs"
        },
        "content": {
            "rendered": "\n<p>A Graph is a 2-dimensional flat space represented as a rectangle. Graphs have a coordinate space where x = 0 and y = 0 coordinates fall on the bottom left. According to mathematical Cartesian coordinate space, graphs have the X coordinate growing from left to right and the Y coordinate growing from bottom to top.<\/p>\n\n\n\n<p>When we talk about drawing a circle with x = 30 and y = 30 coordinates, we go 30 units from the bottom left to the right and then we go 30 units up.<\/p>\n\n\n\n<h2>SVG Coordinate Space<\/h2>\n\n\n\n<p>SVG Coordinate Space works in the same way that a mathematical graph coordinate space works, except for two important features \u2212<\/p>\n\n\n\n<ul><li>SVG Coordinate space has x = 0 and y = 0 coordinates fall on the top left.<\/li><li>SVG Coordinate space has the Y coordinate growing from top to bottom.<\/li><\/ul>\n\n\n\n<h3>SVG Coordinate Space Graph<\/h3>\n\n\n\n<p>When we talk about drawing a circle with x = 30 and y = 30 coordinates in the SVG Coordinate Space, we go 30 units from the top left to the right and then we go down 30 units up. It is defined as follows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svgContainer = d3\n   .select(\"body\")\n   .append(\"svg\")\n   .attr(\"width\", 200)\n   .attr(\"height\", 200);<\/code><\/pre>\n\n\n\n<p>Consider, SVG element as a graph 200 units wide and 200 units tall. We now know that the X and Y zero coordinates are at the top left. We also now know that as the Y coordinate grows, it will move from the top to the bottom of our graph. You can style the SVG elements as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svgContainer = d3\n   .select(\"body\").append(\"svg\")\n   .attr(\"width\", 200)\n   .attr(\"height\", 200)\n   .style(\"border\", \"1px solid black\");<\/code><\/pre>\n\n\n\n<h3>Graph Example<\/h3>\n\n\n\n<p>Let us consider an example of the Line graph.<\/p>\n\n\n\n<p><strong>Line Graph<\/strong>&nbsp;\u2212 A line graph is used to visualize the value of something over time. It compares two variables. Each variable is plotted along an axis. A line graph has a vertical axis and a horizontal axis.<\/p>\n\n\n\n<p>In this example graph, we can take csv file records as Indian States Population Growth form year 2006 to 2017. Let us first create a&nbsp;<strong>data.csv<\/strong>&nbsp;to show the population records.<\/p>\n\n\n\n<p>Create a new csv file in your D3 folder \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>year,population\n2006,40\n2008,45\n2010,48\n2012,51\n2014,53\n2016,57\n2017,62<\/code><\/pre>\n\n\n\n<p>Now, save the file and perform the following steps to draw a line graph in D3. Let us go through each step in detail.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212\u00a0<strong>Adding styles<\/strong>\u00a0\u2212 Let us add a style to the\u00a0<strong>line<\/strong>\u00a0class using the code given below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.line {\n   fill: none;\n   stroke: green;\n   stroke-width: 5px;\n}<\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212\u00a0<strong>Define variables<\/strong>\u00a0\u2212 The SVG attributes are defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var margin = {top: 20, right: 20, bottom: 30, left: 50},\n   width = 960 - margin.left - margin.right,\n   height = 500 - margin.top - margin.bottom;<\/code><\/pre>\n\n\n\n<p>Here, the first line defines the four margins, which surround the block where the graph is positioned.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>\u00a0\u2212\u00a0<strong>Define line<\/strong>\u00a0\u2212 Draw a new line using the\u00a0<strong>d3.line()<\/strong>\u00a0function, which is shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var valueline = d3.line()\n   .x(function(d) { return x(d.year); })\n   .y(function(d) { return y(d.population); });<\/code><\/pre>\n\n\n\n<p>Here, Year represents the data in the X-axis records and the population refers to the data in the Y-axis.<\/p>\n\n\n\n<p><strong>Step 4<\/strong>\u00a0\u2212\u00a0<strong>Append SVG attributes<\/strong>\u00a0\u2212 Append SVG attributes and group elements using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svg = d3.select(\"body\").append(\"svg\")\n   .attr(\"width\", width + margin.left + margin.right)\n   .attr(\"height\", height + margin.top + margin.bottom)\n   .append(\"g\").attr(\"transform\",\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");<\/code><\/pre>\n\n\n\n<p>Here, we have appended the group elements and applied the transformation.<\/p>\n\n\n\n<p><strong>Step 5<\/strong>\u00a0\u2212\u00a0<strong>Read data<\/strong>\u00a0\u2212 Now, we can read data from our dataset\u00a0<strong>data.csv<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.csv(\"data.csv\", function(error, data) {\n   if (error) throw error;\n}<\/code><\/pre>\n\n\n\n<p>Here, the data.csv is not present, it throws an error.<\/p>\n\n\n\n<p><strong>Step 6<\/strong>&nbsp;\u2212&nbsp;<strong>Format data<\/strong>&nbsp;\u2212 Now, format the data using the code below.<\/p>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-code\"><code>data.forEach(function(d) {\n   d.year = d.year;\n   d.population = +d.population;\n});<\/code><\/pre>\n<\/div><\/div>\n\n\n\n<p>This above code ensures that all the values that are pulled out of the csv file are set and formatted correctly. Each row consists of two values \u2212 one value for \u2018year\u2019 and another value for \u2018population\u2019. The function is pulling out values of \u2018year\u2019 and \u2018population\u2019 one row at a time.<\/p>\n\n\n\n<p><strong>Step 7<\/strong>\u00a0\u2212\u00a0<strong>Set scale range<\/strong>\u00a0\u2212 After data formatted, you can set the scale range for X and Y.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>x.domain(d3.extent(data, function(d) { return d.year; }));\ny.domain(&#91;0, d3.max(data, function(d) { return d.population; })]);<\/code><\/pre>\n\n\n\n<p><strong>Step 8<\/strong>\u00a0\u2212\u00a0<strong>Append path<\/strong>\u00a0\u2212 Append path and data as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"path\").data(&#91;data])\n   .attr(\"class\", \"line\").attr(\"d\", valueline);<\/code><\/pre>\n\n\n\n<p><strong>Step 9<\/strong>\u00a0\u2212\u00a0<strong>Add X-axis<\/strong>\u00a0\u2212 Now, you can add X-axis using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"g\")\n   .attr(\"transform\", \"translate(0,\" + height + \")\")\n   .call(d3.axisBottom(x));<\/code><\/pre>\n\n\n\n<p><strong>Step 10<\/strong>\u00a0\u2212\u00a0<strong>Add Y-axis<\/strong>\u00a0\u2212 We can add Y-axis to the group as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"g\")\n   .call(d3.axisLeft(y));<\/code><\/pre>\n\n\n\n<p><strong>Step 11<\/strong>&nbsp;\u2212&nbsp;<strong>Working Example<\/strong>&nbsp;\u2212 The complete code is given in the following code block. Create a simple webpage&nbsp;<strong>linegraphs.html<\/strong>&nbsp;and add the following changes to it.<\/p>\n\n\n\n<p><strong>graph.html<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;style> \n         .line {\n            fill: none;\n            stroke: green;\n            stroke-width: 5px;\n         }\n      &lt;\/style>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;script>\n         \/\/ set the dimensions and margins of the graph\n         var margin = {top: 20, right: 20, bottom: 30, left: 50},\n         width = 960 - margin.left - margin.right,\n         height = 500 - margin.top - margin.bottom;\n\n         \/\/ set the ranges\n         var x = d3.scaleTime().range(&#91;0, width]);\n         var y = d3.scaleLinear().range(&#91;height, 0]);\n\n         \/\/ define the line\n         var valueline = d3.line()\n            .x(function(d) { return x(d.year); })\n            .y(function(d) { return y(d.population); });\n\n         \/\/ append the svg obgect to the body of the page\n         \/\/ appends a 'group' element to 'svg'\n         \/\/ moves the 'group' element to the top left margin\n         var svg = d3.select(\"body\").append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\").attr(\"transform\",\n               \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n         \/\/ Get the data\n         d3.csv(\"data.csv\", function(error, data) {\n            if (error) throw error;\n            \/\/ format the data\n            data.forEach(function(d) {\n               d.year = d.year;\n               d.population = +d.population;\n            });\n\n            \/\/ Scale the range of the data\n            x.domain(d3.extent(data, function(d) { return d.year; }));\n            y.domain(&#91;0, d3.max(data, function(d) { return d.population; })]);\n\n            \/\/ Add the valueline path.\n            svg.append(\"path\")\n               .data(&#91;data])\n               .attr(\"class\", \"line\")\n               .attr(\"d\", valueline);\n\n            \/\/ Add the X Axis\n            svg.append(\"g\")\n               .attr(\"transform\", \"translate(0,\" + height + \")\")\n               .call(d3.axisBottom(x));\n\n            \/\/ Add the Y Axis\n            svg.append(\"g\")\n               .call(d3.axisLeft(y));\n         });\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/graph.jpg\" alt=\"Graph\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A Graph is a 2-dimensional flat space represented as a rectangle. Graphs have a coordinate space where x = 0 and y = 0 coordinates fall on the bottom left. According to mathematical Cartesian coordinate space, graphs have the X coordinate growing from left to right and the Y coordinate growing from bottom to top. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2155"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2155"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2155\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2157,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2155\/revisions\/2157"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2155"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2155"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2155"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2154,
        "date": "2020-07-03T17:03:21",
        "date_gmt": "2020-07-03T17:03:21",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2154"
        },
        "modified": "2020-12-25T19:08:28",
        "modified_gmt": "2020-12-25T19:08:28",
        "slug": "geographies-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/geographies-2\/",
        "title": {
            "rendered": "Geographies"
        },
        "content": {
            "rendered": "\n<p>Geospatial coordinates are often used for weather or population data. D3.js gives us three tools for geographic data \u2212<\/p>\n\n\n\n<ul><li><strong>Paths<\/strong>&nbsp;\u2212 They produce the final pixels.<\/li><li><strong>Projections<\/strong>&nbsp;\u2212 They turn sphere coordinates into Cartesian coordinates and<\/li><li><strong>Streams<\/strong>&nbsp;\u2212 They speed things up.<\/li><\/ul>\n\n\n\n<p>Before learning what geographies in D3.js are, we should understand the following two terms \u2212<\/p>\n\n\n\n<ul><li>D3 Geo Path and<\/li><li>Projections<\/li><\/ul>\n\n\n\n<p>Let us discuss these two terms in detail.<\/p>\n\n\n\n<h2>D3 Geo Path<\/h2>\n\n\n\n<p>It is a geographic path generator. GeoJSON generates SVG path data string or renders the path to a Canvas. A Canvas is recommended for dynamic or interactive projections to improve performance. To generate a D3 Geo Path Data Generator, you can call the following function.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.geo.path()<\/code><\/pre>\n\n\n\n<p>Here, the&nbsp;<strong>d3.geo.path()<\/strong>&nbsp;path generator function allows us to select which Map Projection we want to use for the translation from Geo Coordinates to Cartesian Coordinates.<\/p>\n\n\n\n<p>For example, if we want to show the map details of India, we can define a path as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var path = d3.geo.path()\nsvg.append(\"path\")\n   .attr(\"d\", path(states))<\/code><\/pre>\n\n\n\n<h2>Projections<\/h2>\n\n\n\n<p>Projections transform spherical polygonal geometry to planar polygonal geometry. D3 provides the following projection implementations.<\/p>\n\n\n\n<ul><li><strong>Azimuthal<\/strong>&nbsp;\u2212 Azimuthal projections project the sphere directly onto a plane.<\/li><li><strong>Composite<\/strong>&nbsp;\u2212 Composite consists of several projections that are composed into a single display.<\/li><li><strong>Conic<\/strong>&nbsp;\u2212 Projects the sphere onto a cone and then unroll the cone onto the plane.<\/li><li><strong>Cylindrical<\/strong>&nbsp;\u2212 Cylindrical projections project the sphere onto a containing cylinder, and then unroll the cylinder onto the plane.<\/li><\/ul>\n\n\n\n<p>To create a new projection, you can use the following function.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.geoProjection(project)<\/code><\/pre>\n\n\n\n<p>It constructs a new projection from the specified raw projection project. The project function takes the longitude and latitude of a given point in radians. You can apply the following projection in your code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var width = 400\nvar height = 400\nvar projection = d3.geo.orthographic() \nvar projections = d3.geo.equirectangular()\nvar project = d3.geo.gnomonic()\nvar p = d3.geo.mercator()\nvar pro = d3.geo.transverseMercator()\n   .scale(100)\n   .rotate(&#91;100,0,0])\n   .translate(&#91;width\/2, height\/2])\n   .clipAngle(45);<\/code><\/pre>\n\n\n\n<p>Here, we can apply any one of the above projections. Let us discuss each of these projections in brief.<\/p>\n\n\n\n<ul><li><strong>d3.geo.orthographic()<\/strong>&nbsp;\u2212 The orthographic projection is an azimuthal projection suitable for displaying a single hemisphere; the point of perspective is at infinity.<\/li><li><strong>d3.geo.gnomonic()<\/strong>&nbsp;\u2212 The gnomonic projection is an azimuthal projection that projects great circles as straight lines.<\/li><li><strong>d3.geo.equirectangular()<\/strong>&nbsp;\u2212 The equirectangular is the simplest possible geographic projection. The identity function. It is neither equal-area nor conformal, but is sometimes used for raster data.<\/li><li><strong>d3.geo.mercator()<\/strong>&nbsp;\u2212 The Spherical Mercator projection is commonly used by tiled mapping libraries.<\/li><li><strong>d3.geo.transverseMercator()<\/strong>&nbsp;\u2212 The Transverse Mercator projection.<\/li><\/ul>\n\n\n\n<h3>Working Example<\/h3>\n\n\n\n<p>Let us create the map of India in this example. To do this, we should adhere to the following steps.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212\u00a0<strong>Apply styles<\/strong>\u00a0\u2212 Let us add styles in map using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style>\n   path {\n      stroke: white;\n      stroke-width: 0.5px;\n      fill: grey;\n   }\n   \n   .stateTN { fill: red; }\n   .stateAP { fill: blue; }\n   .stateMP{ fill: green; }\n&lt;\/style><\/code><\/pre>\n\n\n\n<p>Here, we have applied particular colors for state TN, AP and MP.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212\u00a0<strong>Include topojson script<\/strong>\u00a0\u2212 TopoJSON is an extension of GeoJSON that encodes topology, which is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"http:\/\/d3js.org\/topojson.v0.min.js\">&lt;\/script><\/code><\/pre>\n\n\n\n<p>We can include this script in our coding.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>\u00a0\u2212\u00a0<strong>Define variables<\/strong>\u00a0\u2212 Add variables in your script, using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var width = 600;\nvar height = 400;\nvar projection = d3.geo.mercator()\n   .center(&#91;78, 22])\n   .scale(680)\n   .translate(&#91;width \/ 2, height \/ 2]);<\/code><\/pre>\n\n\n\n<p>Here, SVG width is 600 and height is 400. The screen is a two-dimensional space and we are trying to present a three-dimensional object. So, we can grievously distort the land size \/ shape using the&nbsp;<strong>d3.geo.mercator()<\/strong>&nbsp;function.<\/p>\n\n\n\n<p>The center is specified [78, 22], this sets the projection\u2019s center to the specified location as a two-element array of longitude and latitude in degrees and returns the projection.<\/p>\n\n\n\n<p>Here, the map has been centered on 78 degrees West and 22 degrees North.<\/p>\n\n\n\n<p>The Scale is specified as 680, this sets the projection\u2019s scale factor to the specified value. If the scale is not specified, it returns the current scale factor, which defaults to 150. It is important to note that scale factors are not consistent across projections.<\/p>\n\n\n\n<p><strong>Step 4<\/strong>\u00a0\u2212\u00a0<strong>Append SVG<\/strong>\u00a0\u2212 Now, append the SVG attributes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svg = d3.select(\"body\").append(\"svg\")\n   .attr(\"width\", width)\n   .attr(\"height\", height);<\/code><\/pre>\n\n\n\n<p><strong>Step 5<\/strong>\u00a0\u2212\u00a0<strong>Create path<\/strong>\u00a0\u2212 The following portion of code creates a new geographic path generator.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var path = d3.geo.path()\n   .projection(projection);<\/code><\/pre>\n\n\n\n<p>Here, the path generator (d3.geo.path()) is used to specify a projection type (.projection), which was defined earlier as a Mercator projection using the variable projection.<\/p>\n\n\n\n<p><strong>Step 6<\/strong>&nbsp;\u2212&nbsp;<strong>Generate data<\/strong>&nbsp;\u2212 indiatopo.json \u2013 This file contains so many records, which we can easily download from the following attachment.<\/p>\n\n\n\n<p>Download&nbsp;<strong>indiatopo.json file<\/strong><\/p>\n\n\n\n<p>After the file has been downloaded, we can add it our D3 location. The sample format is shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"type\":\"Topology\",\"transform\":{\"scale\":&#91;0.002923182318231823,0.0027427542754275428],\n\"translate\":&#91;68.1862,8.0765]},\"objects\":\n{\"states\":{\"type\":\"GeometryCollection\",\n\"geometries\":&#91;{\"type\":\"MultiPolygon\",\"id\":\"AP\",\"arcs\":\n&#91;&#91;&#91;0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,\n25,26,27,28,29,30,31,32,33,34]],&#91;&#91;35,36,37,38,39,40,41]],&#91;&#91;42]],\n&#91;&#91;43,44,45]],&#91;&#91;46]],&#91;&#91;47]],&#91;&#91;48]],&#91;&#91;49]],&#91;&#91;50]],&#91;&#91;51]],&#91;&#91;52,53]],\n&#91;&#91;54]],&#91;&#91;55]],&#91;&#91;56]],&#91;&#91;57,58]],&#91;&#91;59]],&#91;&#91;60]],&#91;&#91;61,62,63]],&#91;&#91;64]],\n&#91;&#91;65]],&#91;&#91;66]],&#91;&#91;67]],&#91;&#91;68]],&#91;&#91;69]],&#91;&#91;-41,70]],\n&#91;&#91;71]],&#91;&#91;72]],&#91;&#91;73]],&#91;&#91;74]],&#91;&#91;75]]],\n\"properties\":{\"name\":\"Andhra Pradesh\"}},{\"type\":\"MultiPolygon\",\n\"id\":\"AR\",\"arcs\":&#91;&#91;&#91;76,77,78,79,80,81,82]]],\n\"properties\":{\"name\":\"Arunachal Pradesh\"}},{\"type\":\"MultiPolygon\",\n\"id\":\"AS\",\"arcs\":&#91;&#91;&#91;83,84,85,86,87,88,89,90,\n91,92,93,94,95,96,97,98,99,100,101,102,103]],\n&#91;&#91;104,105,106,107]],&#91;&#91;108,109]]], ......\n\n........................................<\/code><\/pre>\n\n\n\n<p><strong>Step 7<\/strong>\u00a0\u2212\u00a0<strong>Draw map<\/strong>\u00a0\u2212 Now, read the data from the\u00a0<strong>indiatopo.json<\/strong>\u00a0file and draw the map.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.json(\"indiatopo.json\", function(error, topology) {\n   g.selectAll(\"path\")\n   .data(topojson.object(topology, topology.objects.states)\n   .geometries)\n   .enter()\n   .append(\"path\")\n   .attr(\"class\", function(d) { return \"state\" + d.id; })\n   .attr(\"d\", path)\n});<\/code><\/pre>\n\n\n\n<p>Here, we will load the TopoJSON file with the coordinates for the India map (indiatopo.json). Then we declare that we are going to act on all the path elements in the graphic. It is defined as, g.selectAll(\u201cpath\u201d). We will then pull the data that defines the countries from the TopoJSON file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.data(topojson.object(topology, topology.objects.states)\n   .geometries)<\/code><\/pre>\n\n\n\n<p>Finally, we will add it to the data that we are going to display using the&nbsp;<strong>.enter()<\/strong>&nbsp;method and then we append that data as path elements using the&nbsp;<strong>.append(\u201cpath\u201d)<\/strong>&nbsp;method.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Geospatial coordinates are often used for weather or population data. D3.js gives us three tools for geographic data \u2212 Paths&nbsp;\u2212 They produce the final pixels. Projections&nbsp;\u2212 They turn sphere coordinates into Cartesian coordinates and Streams&nbsp;\u2212 They speed things up. Before learning what geographies in D3.js are, we should understand the following two terms \u2212 D3 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2154"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2154"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2154\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2158,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2154\/revisions\/2158"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2154"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2154"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2154"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2153,
        "date": "2020-07-03T17:09:36",
        "date_gmt": "2020-07-03T17:09:36",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2153"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "array-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/array-api\/",
        "title": {
            "rendered": "Array API"
        },
        "content": {
            "rendered": "\n<p>D3 contains a collection of modules. You can use each module independently or a collection of modules together to perform operations. This chapter explains about the Array API in detail.<\/p>\n\n\n\n<h2>What is an Array?<\/h2>\n\n\n\n<p>An Array contains a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.<\/p>\n\n\n\n<h2>Configuring API<\/h2>\n\n\n\n<p>You can easily configure the API using the script below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-array.v1.min.js\">&lt;\/script>\n&lt;body>\n   &lt;script>\n   &lt;\/script>\n&lt;\/body><\/code><\/pre>\n\n\n\n<h2>Array Statistics API Methods<\/h2>\n\n\n\n<p>Following are some of the most important array statistics API methods.<\/p>\n\n\n\n<ul><li>d3.min(array)<\/li><li>d3.max(array)<\/li><li>d3.extent(array)<\/li><li>d3.sum(array)<\/li><li>d3.mean(array)<\/li><li>d3.quantile(array)<\/li><li>d3.variance(array)<\/li><li>d3.deviation(array)<\/li><\/ul>\n\n\n\n<p>Let us discuss each of these in detail.<\/p>\n\n\n\n<h3>d3.min(array)<\/h3>\n\n\n\n<p>It returns the minimum value in the given array using natural order.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Consider the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var data = &#91;20,40,60,80,100];\n   console.log(d3.min(data));\n&lt;\/script><\/code><\/pre>\n\n\n\n<p><strong>Result<\/strong>&nbsp;\u2212 The above script returns the minmum value in the array 20 in your console.<\/p>\n\n\n\n<h3>d3.max(array)<\/h3>\n\n\n\n<p>It returns the maximum value in a given array.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Consider the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var data = &#91;20,40,60,80,100];\n   console.log(d3.max(data));\n&lt;\/script><\/code><\/pre>\n\n\n\n<p><strong>Result<\/strong>&nbsp;\u2212 The above script returns the maximum value in the array (100) in your console.<\/p>\n\n\n\n<h3>d3.extent(array)<\/h3>\n\n\n\n<p>It returns the minimum and maximum value in the given array.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Consider the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var data = &#91;20,40,60,80,100];\n   console.log(d3.extent(data));\n&lt;\/script><\/code><\/pre>\n\n\n\n<p><strong>Result<\/strong>&nbsp;\u2212 The above script returns an extent value [20,100].<\/p>\n\n\n\n<h3>d3.sum(array)<\/h3>\n\n\n\n<p>It returns the sum of the given array of numbers. If the array is empty, it returns 0.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Consider the following below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var data = &#91;20,40,60,80,100];\n   console.log(d3.sum(data));\n&lt;\/script><\/code><\/pre>\n\n\n\n<p><strong>Result<\/strong>&nbsp;\u2212 The above script returns the sum value is 300.<\/p>\n\n\n\n<h3>d3.mean(array)<\/h3>\n\n\n\n<p>It returns the mean of the given array of numbers.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Consider the following below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var data = &#91;20,40,60,80,100];\n   console.log(d3.mean(data));\n&lt;\/script><\/code><\/pre>\n\n\n\n<p><strong>Result<\/strong>&nbsp;\u2212 The above script returns the mean value as 60. Similarly, you can check the median value.<\/p>\n\n\n\n<h3>d3.quantile(array)<\/h3>\n\n\n\n<p>It returns the p-quantile of the given sorted array of numbers, where p is a number in the range[0, 1]. For example, the median can be computed using p = 0.5, the first quartile at p = 0.25, and the third quartile at p = 0.75. This implementation uses the R-7 method, default R programming language and Excel.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var data = &#91;20, 40, 60, 80, 100];\nd3.quantile(data, 0); \/\/ output is 20\nd3.quantile(data, 0.5); \/\/ output is 60\nd3.quantile(data, 1); \/\/ output is 100<\/code><\/pre>\n\n\n\n<p>Similarly, you can check other values.<\/p>\n\n\n\n<h3>d3.variance(array)<\/h3>\n\n\n\n<p>It returns the variance of the given array of numbers.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Consider the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var data = &#91;20,40,60,80,100];\n   console.log(d3.variance(data));\n&lt;\/script><\/code><\/pre>\n\n\n\n<p><strong>Result<\/strong>&nbsp;\u2212 The above script returns the variance value as 1000.<\/p>\n\n\n\n<h3>d3.deviation(array)<\/h3>\n\n\n\n<p>It returns the standard deviation of the given array. If the array has fewer than two values, it returns as undefined.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Consider the following below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var data = &#91;20,40,60,80,100];\n   console.log(d3.deviation(data));\n&lt;\/script><\/code><\/pre>\n\n\n\n<p><strong>Result<\/strong>&nbsp;\u2212 The above script returns the deviation value as 31.622776601683793.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us perform all the Array API methods discussed above using the following script. Create a webpage \u201carray.html\u201d and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 array API&lt;\/h3>\n      &lt;script>\n         var data = &#91;20,40,60,80,100];\n         console.log(d3.min(data));  \n         console.log(d3.max(data));\n         console.log(d3.extent(data));\n         console.log(d3.sum(data));\n         console.log(d3.mean(data));\n         console.log(d3.quantile(data,0.5));\n         console.log(d3.variance(data));\n         console.log(d3.deviation(data));\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/array.jpg\" alt=\"Array\"\/><\/figure>\n\n\n\n<h2>Array Search API Methods<\/h2>\n\n\n\n<p>Following are a couple of important Array search API methods.<\/p>\n\n\n\n<ul><li>d3.scan(array)<\/li><li>d3.ascending(a, b)<\/li><\/ul>\n\n\n\n<p>Let us understand both of these in detail.<\/p>\n\n\n\n<h3>d3.scan(array)<\/h3>\n\n\n\n<p>This method is used to perform a linear scan of the specified array. It returns the index of the least element to the specified comparator. A simple example is defined below.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var array = &#91;{one: 1}, {one: 10}];\nconsole.log(d3.scan(array, function(a, b) { return a.one - b.one; })); \/\/ output is 0\nconsole.log(d3.scan(array, function(a, b) { return b.one - a.one; })); \/\/ output is 1<\/code><\/pre>\n\n\n\n<h3>d3.ascending(a, b)<\/h3>\n\n\n\n<p>This method is used to perform the comparator function. It can be implemented as \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 array API&lt;\/h3>\n      &lt;script>\n         var array = &#91;{one: 1}, {one: 10}];\n         console.log(d3.scan(array, function(a, b) { return a.one - b.one; })); \/\/ 0\n         console.log(d3.scan(array, function(a, b) { return b.one - a.one; })); \/\/ 1\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>If no comparator function is specified to the built-in sort method, the default order is alphabetical. The above function returns -1, if a is less than b, or 1, if a is greater than b, or 0.<\/p>\n\n\n\n<p>Similarly, you can perform descending(a, b) method. It returns -1, if a is greater than b, or 1, if a is less than b, or 0. This function performs reverse natural order.<\/p>\n\n\n\n<p><strong>Example<\/strong>&nbsp;\u2212<\/p>\n\n\n\n<p>Create a webpage\u00a0<strong>array_search.html<\/strong>\u00a0and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 array API&lt;\/h3>\n      &lt;script>\n         var array = &#91;{one: 1}, {one: 10}];\n         console.log(d3.scan(array, function(a, b) { return a.one - b.one; })); \/\/ 0\n         console.log(d3.scan(array, function(a, b) { return b.one - a.one; })); \/\/ 1\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>Array Transformations API<\/h2>\n\n\n\n<p>Following are some of the most prominent array transformations API methods.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.cross(a, b&#91;, reducer])\nd3.merge(arrays)\nd3.pairs(array&#91;, reducer])\nd3.permute(array, indexes)\nd3.zip(arrays)<\/code><\/pre>\n\n\n\n<p>Let us understand each of these in detail.<\/p>\n\n\n\n<h3>d3.cross(a, b[, reducer])<\/h3>\n\n\n\n<p>This method is used to return the Cartesian product of the given two arrays a and b. A simple example is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.cross(&#91;10, 20], &#91;\"a\", \"b\"]); \/\/ output is &#91;&#91;10, \"a\"], &#91;10, \"b\"], &#91;20, \"a\"], &#91;20, \"b\"]]<\/code><\/pre>\n\n\n\n<h3>d3.merge(arrays)<\/h3>\n\n\n\n<p>This method is used to merge the arrays and it is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.merge(&#91;&#91;10], &#91;20]]); \/\/ output is &#91;10, 20]<\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<h3>d3.permute(array, indexes)<\/h3>\n\n\n\n<p>This method is used to perform the permutation from specified array and indexes. You can also perform the values from an object into an array. It is explained below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var object = {fruit:\"mango\", color: \"yellow\"},\n   fields = &#91;\"fruit\", \"color\"];\nd3.permute(object, fields); \/\/ output is \"mango\" \"yellow\"<\/code><\/pre>\n\n\n\n<h3>d3.zip(arrays)<\/h3>\n\n\n\n<p>This method is used to return an array of arrays. If arrays contain only a single array, the returned array contains one-element arrays. If no argument is specified, then the returned array is empty. It is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.zip(&#91;10, 20], &#91;30, 40]); \/\/ output is &#91;&#91;10, 30], &#91;20, 40]]<\/code><\/pre>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Create a webpage\u00a0<strong>array_transform<\/strong>\u00a0and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 array API&lt;\/h3>\n      &lt;script>\n         console.log(d3.cross(&#91;10, 20], &#91;\"a\", \"b\"]));\n         console.log(d3.merge(&#91;&#91;10], &#91;30]]));\n         console.log(d3.pairs(&#91;10, 20, 30, 40]));\n         var object = {fruit:\"mango\", color: \"yellow\"},\n         fields = &#91;\"fruit\", \"color\"];\n         console.log(d3.permute(object, fields)); \n         console.log(d3.zip(&#91;10, 20], &#91;30, 40]));\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/array_transform.jpg\" alt=\"Array Transform\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>D3 contains a collection of modules. You can use each module independently or a collection of modules together to perform operations. This chapter explains about the Array API in detail. What is an Array? An Array contains a fixed-size sequential collection of elements of the same type. An array is used to store a collection [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2153"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2153"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2153\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2159,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2153\/revisions\/2159"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2153"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2153"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2153"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2152,
        "date": "2020-07-03T17:12:00",
        "date_gmt": "2020-07-03T17:12:00",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2152"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "collections-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/collections-api\/",
        "title": {
            "rendered": "Collections API"
        },
        "content": {
            "rendered": "\n<p>A collection is simply an object that groups multiple elements into a single unit. It is also called as a container. This chapter explains about collections API in detail.<\/p>\n\n\n\n<h2>Configuring API<\/h2>\n\n\n\n<p>You can configure the API using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-collection.v1.min.js\">&lt;\/script>\n&lt;script>\n\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Collections API Methods<\/h2>\n\n\n\n<p>Collections API contains objects, maps, sets and nests. Following are the most commonly used collections API methods.<\/p>\n\n\n\n<ul><li>Objects API<\/li><li>Maps API<\/li><li>Sets API<\/li><li>Nests API<\/li><\/ul>\n\n\n\n<p>Let us go through each of these API in detail.<\/p>\n\n\n\n<h3>Objects API<\/h3>\n\n\n\n<p>Object API is one of the important data type. It supports the following methods \u2212<\/p>\n\n\n\n<ul><li><strong>d3.keys(object)<\/strong>&nbsp;\u2212 This method contains the object property keys and returns an array of the property names.<\/li><li><strong>d3.values(object)<\/strong>&nbsp;\u2212 This method contains the object values and returns an array of property values.<\/li><li><strong>d3.entries(object)<\/strong>&nbsp;\u2212 This method is used to return an array containing both keys and values of the specified object. Each entry is an object with a key and value.<\/li><\/ul>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.entries({one: 1})<\/code><\/pre>\n\n\n\n<p>Here, key is one and value is 1.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Create a webpage\u00a0<strong>objects.html<\/strong>\u00a0and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 collection API&lt;\/h3>\n      &lt;script>\n         var month = {\"jan\": 1, \"Feb\": 2, \"mar\": 3, \"apr\": 4};\n         console.log(d3.keys(month));\n         console.log(d3.values(month));\n         console.log(d3.entries(month));\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/collections_api.jpg\" alt=\"Collections API\"\/><\/figure>\n\n\n\n<h3>Maps API<\/h3>\n\n\n\n<p>A map contains values based on key and value pairs. Each key and value pair is known as an entry. A Map contains only unique keys. It is useful to search, update or delete elements based on the key. Let us go through the various Maps API methods in detail.<\/p>\n\n\n\n<ul><li><strong>d3.map([object[, key]])<\/strong>&nbsp;\u2212 This method is used to create a new map. Object is used to copy all enumerable properties.<\/li><li><strong>map.has(key)<\/strong>&nbsp;\u2212 This method is used to check whether map has an entry for the specified key string.<\/li><li><strong>map.get(key)<\/strong>&nbsp;\u2212 This method is used to return the value for the specified key string.<\/li><li><strong>map.set(key, value)<\/strong>&nbsp;\u2212 This method is used to set the value for the specified key string. If the map previously had an entry for the same key string, the old entry is replaced with the new value.<\/li><li><strong>map.remove(key)<\/strong>&nbsp;\u2212 It is used to remove the map entry. If the key is not specified, it returns false.<\/li><li><strong>map.clear()<\/strong>&nbsp;\u2212 Removes all entries from this map.<\/li><li><strong>map.keys()<\/strong>&nbsp;\u2212 Returns an array of string keys for every entry in this map.<\/li><li><strong>map.values()<\/strong>&nbsp;\u2212 Returns an array of values for every entry in this map.<\/li><li><strong>map.entries()<\/strong>&nbsp;\u2212 Returns an array of key-value objects for each entry in this map.<\/li><li><strong>(x) map.each(function)<\/strong>&nbsp;\u2212 This method is used to call the specified function for each entry in the map.<\/li><li><strong>(xi) map.empty()<\/strong>&nbsp;\u2212 Returns true if and only if this map has zero entries.<\/li><li><strong>(xii) map.size()<\/strong>&nbsp;\u2212 Returns the number of entries in this map.<\/li><\/ul>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Create a webpage\u00a0<strong>maps.html<\/strong>\u00a0and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 collection API&lt;\/h3>\n      &lt;script>\n         var month = d3.map(&#91;{name: \"jan\"}, {name: \"feb\"}], \n            function(d) { return d.name; });\n         console.log(month.get(\"jan\")); \/\/ {\"name\": \"jan\"}\n         console.log(month.get(\"apr\")); \/\/ undefined\n         console.log(month.has(\"feb\")); \/\/ true\n         \n         var map =  d3.map().set(\"fruit\", \"mango\");\n         console.log(map.get(\"fruit\")); \/\/ mango\n         console.log(map.remove(\"fruit\")); \/\/ remove key and return true.\n         console.log(map.size());    \/\/ size is 0 because key removed.\n         console.log(map.empty());   \/\/ true\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/map_api.jpg\" alt=\"Map API\"\/><\/figure>\n\n\n\n<p>Similarly, you can perform other operations as well.<\/p>\n\n\n\n<h3>Sets API<\/h3>\n\n\n\n<p>A Set is a Collection that cannot contain duplicate elements. It models the mathematical set abstraction. Let us go through the various Sets API methods in detail.<\/p>\n\n\n\n<ul><li><strong>d3.set([array[, accessor]])<\/strong>&nbsp;\u2212 This method is used to create a new set. Array is used to add string values. An accessor is optional.<\/li><li><strong>set.has(value)<\/strong>&nbsp;\u2212 This method is used to check whether the set has an entry for the specified value string.<\/li><li><strong>set.add(value)<\/strong>&nbsp;\u2212 It is used to add the specified value string to the set.<\/li><li><strong>set.remove(value)<\/strong>&nbsp;\u2212 It is used to remove the set that contains the specified value string.<\/li><li><strong>set.clear()<\/strong>&nbsp;\u2212 Removes all the values from this set.<\/li><li><strong>set.values()<\/strong>&nbsp;\u2212 This method is used to return an array of values to the set.<\/li><li><strong>set.empty()<\/strong>&nbsp;\u2212 Returns true if and only if this set has zero values.<\/li><li><strong>set.size()<\/strong>&nbsp;\u2212 Returns the number of values in this set.<\/li><\/ul>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Create a webpage\u00a0<strong>sets.html<\/strong>\u00a0and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 collection API&lt;\/h3>\n      &lt;script>\n         var fruits =  d3.set().add(\"mango\")\n          .add(\"apple\").add(\"orange\");\n         console.log(fruits.has(\"grapes\")); \/\/ return false.\n         console.log(fruits.remove(\"apple\")); \/\/true\n         console.log(fruits.size());    \/\/ size is 2\n         console.log(fruits.empty());   \/\/ true\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/sets_api.jpg\" alt=\"Sets API\"\/><\/figure>\n\n\n\n<p>Similarly, we can perform other operations as well.<\/p>\n\n\n\n<h3>Nests API<\/h3>\n\n\n\n<p>Nesting API contains elements in array and performs in a hierarchical tree structure. Let us go through the various Nests API methods in detail.<\/p>\n\n\n\n<ul><li><strong>d3.nest()<\/strong>&nbsp;\u2212 This method is used to create a new nest.<\/li><li><strong>nest.key(key)<\/strong>&nbsp;\u2212 This method is used to initialize a new key function. This function is used to invoke each element in an input array and return elements in the group.<\/li><li><strong>nest.sortKeys(comparator)<\/strong>&nbsp;\u2212 This method is used to sort keys in a specified comparator. Function is defined as d3.ascending or d3.descending.<\/li><li><strong>nest.sortValues(comparator)<\/strong>&nbsp;\u2212 This method is used to sort values in a specified comparator. Comparator function sorts leaf elements.<\/li><li><strong>nest.map(array)<\/strong>&nbsp;\u2212 This method is used to apply the specified array and in returning a nested map. Each entry in the returned map corresponds to a distinct key value returned by the first key function. The entry value depends on the number of registered key functions.<\/li><li><strong>nest.object(array)<\/strong>&nbsp;\u2212 This method is used to apply the nest operator to the specified array and return a nested object.<\/li><li><strong>nest.entries(array)<\/strong>&nbsp;\u2212 This method is used to apply the nest operator to the specified array and return an array of key-values entries.<\/li><\/ul>\n\n\n\n<p>Consider a simple webpage&nbsp;<strong>nest.html<\/strong>&nbsp;to perform the above discussed nest methods.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 Nest API&lt;\/h3>\n      &lt;script>\n         var data = &#91;\n            {\n               \"color\" : \"red\",\n               \"key\" : 1\n            },\n            {\n               \"color\" : \"green\",\n               \"key\" : 2\n            },\n            {\n               \"color\" : \"blue\",\n               \"key\" : 75\n            }\n         ]\n         var nest =  d3.nest()\n            .key(function (d) { return d.color; })\n            .entries(data)console.log(nest);\n         var filter = nest.filter(function (d) { return d.key = = = 'red' })\n         console.log(filter);\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Now, check the result in a browser and we will see the following result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Array&#91;3]\n0: Object\n1: Object\n2: Object\nlength: 3\n__proto__: Array&#91;0]\n\nArray&#91;1]\n0: Object\nlength: 1\n__proto__: Array&#91;0]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A collection is simply an object that groups multiple elements into a single unit. It is also called as a container. This chapter explains about collections API in detail. Configuring API You can configure the API using the following script. Collections API Methods Collections API contains objects, maps, sets and nests. Following are the most [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2152"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2152"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2152\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2160,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2152\/revisions\/2160"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2152"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2152"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2152"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2151,
        "date": "2020-07-03T17:22:20",
        "date_gmt": "2020-07-03T17:22:20",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2151"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "selection-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/selection-api\/",
        "title": {
            "rendered": "Selection API"
        },
        "content": {
            "rendered": "\n<p>Selections are powerful data-driven transformation of the document object model (DOM). It is used to set Attributes, Styles, Properties, HTML or Text Content and much more. This chapter explains the selections API in detail.<\/p>\n\n\n\n<h2>Configuring the API<\/h2>\n\n\n\n<p>You can configure the API directly using the script below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-selection.v1.min.js\">&lt;\/script>\n&lt;script>\n\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Selection API Methods<\/h2>\n\n\n\n<p>Following are the most important methods in selection API.<\/p>\n\n\n\n<ul><li>d3.selection()<\/li><li>d3.select(selector)<\/li><li>d3.selectAll(selector)<\/li><li>selection.selectAll(selector)<\/li><li>selection.filter(filter)<\/li><li>selection.merge(other)<\/li><li>d3.matcher(selector)<\/li><li>d3.creator(name)<\/li><li>selection.each(function)<\/li><li>selection.call(function[, arguments\u2026])<\/li><li>d3.local()<\/li><li>local.set(node, value)<\/li><li>local.get(node)<\/li><li>local.remove(node)<\/li><\/ul>\n\n\n\n<p>Let us now discuss each of these in detail.<\/p>\n\n\n\n<h3>d3.selection()<\/h3>\n\n\n\n<p>This method is used to select the root element. This function can also be used to test for selections or to extend the selection d3js.<\/p>\n\n\n\n<h3>d3.select(selector)<\/h3>\n\n\n\n<p>This method is used to select the first element that matches the specified selector string.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var body = d3.select(\"body\");<\/code><\/pre>\n\n\n\n<p>If the selector is not a string, then it selects the specified node, which is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\"p\").style(\"color\", \"red\");<\/code><\/pre>\n\n\n\n<h3>d3.selectAll(selector)<\/h3>\n\n\n\n<p>This method selects all the elements that match the specified selector string.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var body = d3.selectAll(\"body\");<\/code><\/pre>\n\n\n\n<p>If the selector is not a string, then it selects the specified array of nodes, which is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.selectAll(\"body\").style(\"color\", \"red\");<\/code><\/pre>\n\n\n\n<h3>selection.selectAll(selector)<\/h3>\n\n\n\n<p>This method is used to select an element. It selects the descendant elements that match the specified selector string. The elements in the returned selection are grouped by their corresponding parent node in this selection. If no element matches the specified selector for the current element, or if the selector is null, the group at the current index will be empty.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var b = d3.selectAll(\"p\").selectAll(\"b\");<\/code><\/pre>\n\n\n\n<h3>selection.filter(filter)<\/h3>\n\n\n\n<p>This method is used to filter the selection, returning a new selection that contains only the elements for which the specified filter is true.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var even = d3.selectAll(\"tr\").filter(\":nth-child(odd)\");<\/code><\/pre>\n\n\n\n<p>Here, filter a selection of table rows returns only odd.<\/p>\n\n\n\n<h3>selection.merge(other)<\/h3>\n\n\n\n<p>This method is used to return a new selection merging with the specified other selection.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var rect = svg.selectAll(\"rect\").data(data);\nrect.enter().append(\"rect\").merge(rect);<\/code><\/pre>\n\n\n\n<h3>d3.matcher(selector)<\/h3>\n\n\n\n<p>This method is used to assign the specified selector. It returns a function, which returns true.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var p = selection.filter(d3.matcher(\"p\"));<\/code><\/pre>\n\n\n\n<h3>d3.creator(name)<\/h3>\n\n\n\n<p>This method is used to assign the specified element name It returns a function, which creates an element of the given name, assuming that this is the parent element.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>selection.append(d3.creator(\"p\"));<\/code><\/pre>\n\n\n\n<h3>selection.each(function)<\/h3>\n\n\n\n<p>This method is used to invoke the specified function for each selected element, in the order passed by the current datum (d), the current index (i) and the current group (nodes) with this as the current DOM element (nodes[i]). It is explained below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>parent.each(function(p, j) {\n   d3.select(this)\n      .selectAll(\".child\")\n      .text(function(d, i) { return \"child \" + d.name + \" of \" + p.name; });\n});<\/code><\/pre>\n\n\n\n<h3>selection.call(function[, arguments\u2026])<\/h3>\n\n\n\n<p>It is used to invoke the specified function exactly once. The syntax is shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>function name(selection, first, last) {\n   selection.attr(\"first-name\", first).attr(\"last-name\", last);\n}<\/code><\/pre>\n\n\n\n<p>This method can be specified as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.selectAll(\"p\").call(name, \"Adam\", \"David\");<\/code><\/pre>\n\n\n\n<h3>d3.local()<\/h3>\n\n\n\n<p>D3 local allows you to define the local state that is independent of data.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var data = d3.local();<\/code><\/pre>\n\n\n\n<p>Unlike var, the value of each local is also scoped by the DOM.<\/p>\n\n\n\n<h3>local.set(node, value)<\/h3>\n\n\n\n<p>This method sets the value of this local on the specified node to the value.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>selection.each(function(d) \n   { data.set(this, d.value); });\nlocal.get(node)<\/code><\/pre>\n\n\n\n<p>This method returns the value of this local on the specified node. If the node does not define this local, then it returns the value from the nearest ancestor that defines it.<\/p>\n\n\n\n<h3>local.remove(node)<\/h3>\n\n\n\n<p>This method deletes this local\u2019s value from the specified node. It returns true, if the node defined, otherwise returns false.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Selections are powerful data-driven transformation of the document object model (DOM). It is used to set Attributes, Styles, Properties, HTML or Text Content and much more. This chapter explains the selections API in detail. Configuring the API You can configure the API directly using the script below. Selection API Methods Following are the most important [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2151"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2151"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2151\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2161,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2151\/revisions\/2161"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2151"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2151"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2151"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2150,
        "date": "2020-07-03T17:24:13",
        "date_gmt": "2020-07-03T17:24:13",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2150"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "paths-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/paths-api\/",
        "title": {
            "rendered": "Paths API"
        },
        "content": {
            "rendered": "\n<p>Paths are used to draw Rectangles, Circles, Ellipses, Polylines, Polygons, Straight Lines, and Curves. SVG Paths represent the outline of a shape that can be Stroked, Filled, Used as a Clipping Path, or any combination of all three. This chapter explains Paths API in detail.<\/p>\n\n\n\n<h2>Configuring Paths<\/h2>\n\n\n\n<p>You can configure the Paths API using the script below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-path.v1.min.js\">&lt;\/script>\n&lt;script>\n\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Paths API Methods<\/h2>\n\n\n\n<p>Some of the most commonly used Paths API methods are briefly described as follows.<\/p>\n\n\n\n<ul><li><strong>d3.path()<\/strong>&nbsp;\u2212 This method is used to create a new path.<\/li><li><strong>path.moveTo(x, y)<\/strong>&nbsp;\u2212 This method is used to move the specified x and y values.<\/li><li><strong>path.closePath()<\/strong>&nbsp;\u2212 This method is used to close the current path.<\/li><li><strong>path.lineTo(x, y)<\/strong>&nbsp;\u2212 This method is used to create a line from current point to defined x,y values.<\/li><li><strong>path.quadraticCurveTo(cpx, cpy, x, y)<\/strong>&nbsp;\u2212 This method is used to draw a quadratic curve from current point to the specified point.<\/li><li><strong>path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x, y)<\/strong>&nbsp;\u2212 This method is used to draw a bezier curve from current point to the specified point.<\/li><li><strong>path.arcTo(x1, y1, x2, y2, radius)<\/strong>&nbsp;\u2212 This method is used to draw a circular arc from the current point to a specified point (x1, y1) and end the line between the specified points (x1, y1) and (x2, y2).<\/li><li><strong>path.arc(x, y, radius, startAngle, endAngle[, anticlockwise])<\/strong>&nbsp;\u2212 This method is used to draw a circular arc to the specified center (x, y), radius, startAngle and endAngle. If anticlockwise value is true then the arc is drawn in the anticlockwise direction, otherwise it is drawn in the clockwise direction.<\/li><li><strong>path.rect(x, y, w, h)<\/strong>&nbsp;\u2212 This method is used to create new sub path containing just the four points (x, y), (x + w, y), (x + w, y + h), (x, y + h). With these four points connected by straight lines marks the subpath as closed. Equivalent to context.rect and uses SVG\u2019s \u201clineto\u201d commands.<\/li><li><strong>path.toString()<\/strong>&nbsp;\u2212 Returns the string representation of this path according to SVG\u2019s path data specification.<\/li><\/ul>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Let us draw a simple line in D3 using path API. Create a webpage\u00a0<strong>linepath.html<\/strong>\u00a0and add the following changes in it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;meta charset = \"UTF-8\">\n   &lt;head>\n      &lt;title>SVG path line Generator&lt;\/title>\n   &lt;\/head>\n\n   &lt;style>\n      path {\n         fill: green;\n         stroke: #aaa;\n      }\n   &lt;\/style>\n   \n   &lt;body>\n      &lt;svg width = \"600\" height = \"100\">\n         &lt;path transform = \"translate(200, 0)\" \/>\n      &lt;\/svg>\n      \n      &lt;script src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;script>\n         var data = &#91;&#91;0, 20], &#91;50, 30], &#91;100, 50], &#91;200, 60], &#91;300, 90]];\n         var lineGenerator = d3.line();\n         var pathString = lineGenerator(data);\n         d3.select('path').attr('d', pathString);\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Paths are used to draw Rectangles, Circles, Ellipses, Polylines, Polygons, Straight Lines, and Curves. SVG Paths represent the outline of a shape that can be Stroked, Filled, Used as a Clipping Path, or any combination of all three. This chapter explains Paths API in detail. Configuring Paths You can configure the Paths API using the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2150"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2150"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2150\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2162,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2150\/revisions\/2162"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2150"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2150"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2150"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2174,
        "date": "2020-07-03T17:27:42",
        "date_gmt": "2020-07-03T17:27:42",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2174"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "scales-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/scales-api\/",
        "title": {
            "rendered": "Scales API"
        },
        "content": {
            "rendered": "\n<p>D3.js provides scale functions to perform data transformations. These functions map an input domain to an output range.<\/p>\n\n\n\n<h2>Configuring API<\/h2>\n\n\n\n<p>We can configure the API directly using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-array.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-collection.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-color.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-format.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-interpolate.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-time.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-time-format.v2.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-scale.v1.min.js\">&lt;\/script>\n&lt;script>\n\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Scales API Methods<\/h2>\n\n\n\n<p>D3 provides the following important scaling methods for different types of charts. Let us understand then in detail.<\/p>\n\n\n\n<ul><li><strong>d3.scaleLinear()<\/strong>&nbsp;\u2212 Constructs a continuous linear scale where we can input data (domain) maps to the specified output range.<\/li><li><strong>d3.scaleIdentity()<\/strong>&nbsp;\u2212 Construct a linear scale where the input data is the same as the output.<\/li><li><strong>d3.scaleTime()<\/strong>&nbsp;\u2212 Construct a linear scale where the input data is in the dates and the output in numbers.<\/li><li><strong>d3.scaleLog()<\/strong>&nbsp;\u2212 Construct a logarithmic scale.<\/li><li><strong>d3.scaleSqrt()<\/strong>&nbsp;\u2212 Construct a square root scale.<\/li><li><strong>d3.scalePow()<\/strong>&nbsp;\u2212 Construct an exponential scale.<\/li><li><strong>d3.scaleSequential()<\/strong>&nbsp;\u2212 Construct a sequential scale where output range is fixed by interpolator function.<\/li><li><strong>d3.scaleQuantize()<\/strong>&nbsp;\u2212 Construct a quantize scale with discrete output range.<\/li><li><strong>d3.scaleQuantile()<\/strong>&nbsp;\u2212 Construct a quantile scale where the input sample data maps to the discrete output range.<\/li><li><strong>d3.scaleThreshold()<\/strong>&nbsp;\u2212 Construct a scale where the arbitrary input data maps to the discrete output range.<\/li><li><strong>d3.scaleBand()<\/strong>&nbsp;\u2212 Band scales are like ordinal scales except the output range is continuous and numeric.<\/li><li><strong>d3.scalePoint()<\/strong>&nbsp;\u2212 Construct a point scale.<\/li><li><strong>d3.scaleOrdinal()<\/strong>&nbsp;\u2212 Construct an ordinal scale where the input data includes alphabets and are mapped to the discrete numeric output range.<\/li><\/ul>\n\n\n\n<p>Before doing a working example, let us first understand the following two terms \u2212<\/p>\n\n\n\n<ul><li><strong>Domain<\/strong>&nbsp;\u2212 The Domain denotes minimum and maximum values of your input data.<\/li><li><strong>Range<\/strong>&nbsp;\u2212 The Range is the output range, which we would like the input values to map to&#8230;<\/li><\/ul>\n\n\n\n<h3>Working Example<\/h3>\n\n\n\n<p>Let us perform the d3.scaleLinear function in this example. To do this, you need to adhere to the following steps \u2212<\/p>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212&nbsp;<strong>Define variables<\/strong>&nbsp;\u2212 Define SVG variables and data using the coding below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var data = &#91;100, 200, 300, 400, 800, 0]\n   var width = 500, \n      barHeight = 20, \n      margin = 1;<\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212&nbsp;<strong>Create linear scale<\/strong>&nbsp;\u2212 Use the following code to create a linear scale.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var scale = d3.scaleLinear()\n   .domain(&#91;d3.min(data), d3.max(data)])\n   .range(&#91;100, 400]);<\/code><\/pre>\n\n\n\n<p>Here, for the minimum and maximum value for our domain manually, we can use the built-in&nbsp;<strong>d3.min()<\/strong>&nbsp;and&nbsp;<strong>d3.max()<\/strong>&nbsp;functions, which will return minimum and maximum values respectively from our data array.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212&nbsp;<strong>Append SVG attributes<\/strong>&nbsp;\u2212 Append the SVG elements using the code given below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var svg = d3.select(\"body\")\n   .append(\"svg\")\n   .attr(\"width\", width)\n   .attr(\"height\", barHeight * data.length);<\/code><\/pre>\n\n\n\n<p><strong>Step 4<\/strong>&nbsp;\u2212&nbsp;<strong>Apply transformation<\/strong>&nbsp;\u2212 Apply the transformation using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var g = svg.selectAll(\"g\")\n   .data(data).enter().append(\"g\")\n   .attr(\"transform\", function (d, i) {\n      return \"translate(0,\" + i * barHeight + \")\";\n});<\/code><\/pre>\n\n\n\n<p><strong>Step 5<\/strong>&nbsp;\u2212&nbsp;<strong>Append rect elements<\/strong>&nbsp;\u2212 Append the rect elements to scaling as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>g.append(\"rect\")\n   .attr(\"width\", function (d) {\n      return scale(d);\n   })\n   .attr(\"height\", barHeight - margin)<\/code><\/pre>\n\n\n\n<p><strong>Step 6<\/strong>&nbsp;\u2212&nbsp;<strong>Display data<\/strong>&nbsp;\u2212 Now display the data using the coding given below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>g.append(\"text\")\n   .attr(\"x\", function (d) { return (scale(d)); })\n   .attr(\"y\", barHeight \/ 2)\n   .attr(\"dy\", \".35em\")\n   .text(function (d) { return d; });<\/code><\/pre>\n\n\n\n<p><strong>Step 7<\/strong>&nbsp;\u2212&nbsp;<strong>Working Example<\/strong>&nbsp;\u2212 Now, let us create a bar chart using the d3.scaleLinear() function as follows.<\/p>\n\n\n\n<p>Create a webpage \u201cscales.html\u201d and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;script>\n         var data = &#91;100, 200, 300, 350, 400, 250]\n         var width = 500, barHeight = 20, margin = 1;\n         \n         var scale = d3.scaleLinear()\n            .domain(&#91;d3.min(data), d3.max(data)])\n            .range(&#91;100, 400]);\n         \n         var svg = d3.select(\"body\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", barHeight * data.length);\n         \n         var g = svg.selectAll(\"g\")\n            .data(data)\n            .enter()\n            .append(\"g\")\n            .attr(\"transform\", function (d, i) {\n               return \"translate(0,\" + i * barHeight + \")\";\n         });\n    \n         g.append(\"rect\")\n         .attr(\"width\", function (d) {\n            return scale(d);\n         })\n         \n         .attr(\"height\", barHeight - margin)\n         g.append(\"text\")\n         .attr(\"x\", function (d) { return (scale(d)); })\n         .attr(\"y\", barHeight \/ 2).attr(\"dy\", \".35em\")\n         .text(function (d) { return d; });\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>D3.js provides scale functions to perform data transformations. These functions map an input domain to an output range. Configuring API We can configure the API directly using the following script. Scales API Methods D3 provides the following important scaling methods for different types of charts. Let us understand then in detail. d3.scaleLinear()&nbsp;\u2212 Constructs a continuous [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2174"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2174"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2174\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2185,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2174\/revisions\/2185"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2174"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2174"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2174"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2173,
        "date": "2020-07-03T17:31:04",
        "date_gmt": "2020-07-03T17:31:04",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2173"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "axis-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/axis-api\/",
        "title": {
            "rendered": "Axis API"
        },
        "content": {
            "rendered": "\n<p>D3 provides functions to draw axes. An axis is made of Lines, Ticks and Labels. An axis uses a Scale, so each axis will need to be given a scale to work with.<\/p>\n\n\n\n<h2>Configuring the Axis API<\/h2>\n\n\n\n<p>You can configure the API using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-axis.v1.min.js\">&lt;\/script>\n&lt;script>\n\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Axis API Methods<\/h2>\n\n\n\n<p>D3 provides the following significant functions to draw axes. They are described in brief as follows.<\/p>\n\n\n\n<ul><li><strong>d3.axisTop()<\/strong>&nbsp;\u2212 This method is used to create a top horizontal axis.<\/li><li><strong>d3.axisRight()<\/strong>&nbsp;\u2212 This method is used to create a vertical right-oriented axis.<\/li><li><strong>d3.axisBottom()<\/strong>&nbsp;\u2212 This method is used to create a bottom horizontal axis.<\/li><li><strong>d3.axisLeft()<\/strong>&nbsp;\u2212 It creates left vertical axis.<\/li><\/ul>\n\n\n\n<h3>Working Example<\/h3>\n\n\n\n<p>Let us learn how to add the x and y-axis to a graph. To do this, we need to adhere to the steps given below.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>\u00a0\u2212\u00a0<strong>Define variables<\/strong>\u00a0\u2212 Define SVG and data variables using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var width = 400, height = 400;\nvar data = &#91;100, 150, 200, 250, 280, 300];\nvar svg = d3.select(\"body\")\n   .append(\"svg\")\n   .attr(\"width\", width)\n   .attr(\"height\", height);<\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>\u00a0\u2212\u00a0<strong>Create a scale linear function<\/strong>\u00a0\u2212 Create a scale linear function for both x and y axis as defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var xscale = d3.scaleLinear()\n   .domain(&#91;0, d3.max(data)])\n   .range(&#91;0, width - 100]);\n\nvar yscale = d3.scaleLinear()\n   .domain(&#91;0, d3.max(data)])\n   .range(&#91;height\/2, 0]);<\/code><\/pre>\n\n\n\n<p>Here, we have created a linear scale and specified the domain and the range.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>\u00a0\u2212\u00a0<strong>Add scales to x-axis<\/strong>\u00a0\u2212 Now, we can add scales to the x-axis using the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var x_axis = d3.axisBottom()\n   .scale(xscale);<\/code><\/pre>\n\n\n\n<p>Here, we use d3.axisBottom to create our x-axis and provide it with the scale, which is defined earlier.<\/p>\n\n\n\n<p><strong>Step 4<\/strong>\u00a0\u2212\u00a0<strong>Add scales to the y-axis<\/strong>\u00a0\u2212 Use the following code to add scales to the y-axis.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var y_axis = d3.axisLeft()\n   .scale(yscale);<\/code><\/pre>\n\n\n\n<p>Here, we use the d3.axisLeft to create our y-axis and provide it with the scale we defined above.<\/p>\n\n\n\n<p><strong>Step 5<\/strong>\u00a0\u2212\u00a0<strong>Apply transformation<\/strong>\u00a0\u2212 You can append a group element and insert the x, y axis, which is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"g\")\n   .attr(\"transform\", \"translate(50, 10)\")\n   .call(y_axis);<\/code><\/pre>\n\n\n\n<p><strong>Step 6<\/strong>\u00a0\u2212\u00a0<strong>Append group elements<\/strong>\u00a0\u2212 Apply transition and group elements using the following code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var xAxisTranslate = height\/2 + 10;\nsvg.append(\"g\")\n   .attr(\"transform\", \"translate(50, \" + xAxisTranslate  +\")\")\n   .call(x_axis)<\/code><\/pre>\n\n\n\n<p><strong>Step 7<\/strong>\u00a0\u2212\u00a0<strong>Working Example<\/strong>\u00a0\u2212 The complete code listing is given in the following code block. Create a webpage\u00a0<strong>axes.html<\/strong>\u00a0and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;style>\n         svg text {\n            fill: purple;\n            font: 12px sans-serif;\n            text-anchor: end;\n         }\n      &lt;\/style>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;script>\n         var width = 400, height = 400;\n         var data = &#91;100, 120, 140, 160, 180, 200];\n         var svg = d3.select(\"body\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n         \n         var xscale = d3.scaleLinear()\n            .domain(&#91;0, d3.max(data)])\n            .range(&#91;0, width - 100]);\n         \n         var yscale = d3.scaleLinear()\n            .domain(&#91;0, d3.max(data)])\n            .range(&#91;height\/2, 0]);\n    \n         var x_axis = d3.axisBottom().scale(xscale);\n         \n         var y_axis = d3.axisLeft().scale(yscale);\n         \n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(50, 10)\")\n            .call(y_axis);\n         \n         var xAxisTranslate = height\/2 + 10;\n         \n         svg.append(\"g\")\n            .attr(\"transform\", \"translate(50, \" + xAxisTranslate  +\")\")\n            .call(x_axis)\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>D3 provides functions to draw axes. An axis is made of Lines, Ticks and Labels. An axis uses a Scale, so each axis will need to be given a scale to work with. Configuring the Axis API You can configure the API using the following script. Axis API Methods D3 provides the following significant functions [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2173"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2173"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2173\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2178,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2173\/revisions\/2178"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2173"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2173"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2173"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2172,
        "date": "2020-07-03T17:35:43",
        "date_gmt": "2020-07-03T17:35:43",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2172"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "shapes-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/shapes-api\/",
        "title": {
            "rendered": "Shapes API"
        },
        "content": {
            "rendered": "\n<p>This chapter discusses the different shape generators in D3.js.<\/p>\n\n\n\n<h2>Configuring API<\/h2>\n\n\n\n<p>You can configure the Shapes API using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-path.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-shape.v1.min.js\">&lt;\/script>\n&lt;script>\n\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Shapes Generators<\/h2>\n\n\n\n<p>D3.js supports different shapes. Let us go through the prominent shapes in detail.<\/p>\n\n\n\n<h3>Arcs API<\/h3>\n\n\n\n<p>The arc generator produces a circle or annulus shape. We have used these API methods in the previous pie charts chapter. Let us understand the various Arcs API methods in detail.<\/p>\n\n\n\n<ul><li><strong>d3.arc()<\/strong>\u00a0\u2212 This method is used to create a new arc generator.<\/li><li><strong>arc(args)<\/strong>\u00a0\u2212 It is used to generate an arc with the specified given arguments. Default settings with an object radii and angles is defined below.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var arc = d3.arc();\n   arc({\n      innerRadius: 0,\n      outerRadius: 100,\n      startAngle: 0,\n      endAngle: Math.PI \/ 2\n   });\n&lt;\/script><\/code><\/pre>\n\n\n\n<ul><li><strong>arc.centroid(args)<\/strong>\u00a0\u2212 This method is used to compute the midpoint [x, y] of the centerline of the arc with the specified arguments.<\/li><li><strong>arc.innerRadius([radius])<\/strong>\u00a0\u2212 This method is used to set the inner radius from the given radius and return an arc generator. It is defined below \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function innerRadius(d) {\n   return d.innerRadius;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>arc.outerRadius([radius])<\/strong>\u00a0\u2212 This method is used to set the outer radius from the given radius and return an arc generator. It is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function outerRadius(d) {\n   return d.outerRadius;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>arc.cornerRadius([radius])<\/strong>\u00a0\u2212 This method is used to set the corner radius from the given radius and return an arc generator. It is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function cornerRadius() {\n   return 0;\n}<\/code><\/pre>\n\n\n\n<p>If the corner radius is greater than zero, the corners of the arc are rounded using the circles of the given radius. The corner radius may not be larger than (outerRadius &#8211; innerRadius) \/ 2.<\/p>\n\n\n\n<ul><li><strong>arc.startAngle([angle])<\/strong>\u00a0\u2212 This method is used to set the start angle to the function from the given angle. It is defined as follows \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function startAngle(d) {\n   return d.startAngle;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>arc.endAngle([angle])<\/strong>\u00a0\u2212 This method is used to set the end angle to the function from the given angle. It is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function endAngle(d) {\n   return d.endAngle;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>arc.padAngle([angle])<\/strong>\u00a0\u2212 This method is used to set the pad angle to the function from the given angle. It is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function padAngle() {\n   return d &amp;&amp; d.padAngle;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>(x) arc.padRadius([radius])<\/strong>&nbsp;\u2212 This method is used to set the pad radius to the specified function from the given radius. The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius *padAngle.<\/li><li><strong>(xi) arc.context([context])<\/strong>&nbsp;\u2212 This method is used to set the context and return an arc generator.<\/li><\/ul>\n\n\n\n<h2>Pies API<\/h2>\n\n\n\n<p>This API is used to create a Pie generator. We have performed these API methods in the previous chapter. We will discuss all those methods in detail.<\/p>\n\n\n\n<ul><li><strong>d3.pie()<\/strong>\u00a0\u2212 Constructs a new pie generator with the default settings.<\/li><li><strong>pie(data[, arguments])<\/strong>\u00a0\u2212 This method is used to generate a pie for the given array values. It returns an array of objects. Objects are datum&#8217;s arc angles. Each object has the following properties \u2212<ul><li><strong>data<\/strong>\u00a0\u2212 the input datum; the corresponding element in the input data array.<\/li><li><strong>value<\/strong>\u00a0\u2212 the numeric value of the arc.<\/li><li><strong>index<\/strong>\u00a0\u2212 index of the arc.<\/li><li><strong>startAngle<\/strong>\u00a0\u2212 the start angle of the arc.<\/li><li><strong>endAngle<\/strong>\u00a0\u2212 the end angle of the arc.<\/li><li><strong>padAngle<\/strong>\u00a0\u2212 the pad angle of the arc.<\/li><\/ul><\/li><li><strong>pie.value([value])<\/strong>\u00a0\u2212 This method is used to set the value to the specified function and generates a pie. It is defined as follows \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function value(d) {\n   return d;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>pie.sort([compare])<\/strong>\u00a0\u2212 This method is used to sort the data to the specified function and generates pie. The comparator function is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>pie.sort(function(a, b) \n   { return a.name.localeCompare(b.name); }\n);<\/code><\/pre>\n\n\n\n<p>Here, the compare function takes two arguments \u2018a\u2019 and \u2018b\u2019, each element from the input data array. If the arc for \u2018a\u2019 should be before the arc for \u2018b\u2019, then the comparator must return a number less than zero. If the arc for \u2018a\u2019 should be after the arc for \u2018b\u2019, then the comparator must return a number greater than zero.<\/p>\n\n\n\n<ul><li><strong>pie.sortValues([compare])<\/strong>\u00a0\u2212 This method is used to compare the value from the given function and generates a pie. The function is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function compare(a, b) {\n   return b - a;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>pie.startAngle([angle])<\/strong>\u00a0\u2212 This method is used to set the start angle of the pie to the specified function. If the angle is not specified, it returns the current start angle. It is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function startAngle() {\n   return 0;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>pie.endAngle([angle])<\/strong>\u00a0\u2212 This method is used to set the end angle of the pie to the specified function. If angle is not specified, it returns the current end angle. It is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function endAngle() {\n   return 2 * Math.PI;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>pie.padAngle([angle])<\/strong>\u00a0\u2212 This method is used to set the pad angle to the specified function and generates the pie. The function is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function padAngle() {\n   return 0;\n}<\/code><\/pre>\n\n\n\n<h2>Lines API<\/h2>\n\n\n\n<p>Lines API is used to generate a line. We have used these API methods in the&nbsp;<strong>Graphs<\/strong>chapter. Let us go through each methods in detail.<\/p>\n\n\n\n<ul><li><strong>d3.line()<\/strong>\u00a0\u2212 This method is used to create a new line generator.<\/li><li><strong>line(data)<\/strong>\u00a0\u2212 This method is used to generate a line for the given array of data.<\/li><li><strong>line.x([x])<\/strong>\u00a0\u2212 This method is used to set the x accessor to the specified function and generates a line. The function is defined below,<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function x(d) {\n   return d&#91;0];\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>line.y([y])<\/strong>\u00a0\u2212 This method is used to set the \u2018y\u2019\u2019 accessor to the specified function and generates a line. The function is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function y(d) {\n   return d&#91;1];\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>line.defined([defined])<\/strong>\u00a0\u2212 This method is used to set the defined accessor to the specified function. It is defined as follows.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>function defined() {\n  return true;\n}<\/code><\/pre>\n\n\n\n<ul><li><strong>line.curve([curve])<\/strong>&nbsp;\u2212 It is used to set the curve and generates the line.<\/li><li><strong>line.context([context])<\/strong>&nbsp;\u2212 This method is used to set the context and generates a line. If the context is not specified, it returns null.<\/li><li><strong>d3.lineRadial()<\/strong>&nbsp;\u2212 This method is used to create new radial line; it is equivalent to the Cartesian line generator.<\/li><li><strong>lineRadial.radius([radius])<\/strong>&nbsp;\u2212 This method is used to draw a radial line and the accessor returns the radius. It takes distance from the origin(0,0).<\/li><\/ul>\n\n\n\n<p>In the next chapter, we will learn about the Colors API in D3.js.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This chapter discusses the different shape generators in D3.js. Configuring API You can configure the Shapes API using the following script. Shapes Generators D3.js supports different shapes. Let us go through the prominent shapes in detail. Arcs API The arc generator produces a circle or annulus shape. We have used these API methods in the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2172"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2172"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2172\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2183,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2172\/revisions\/2183"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2172"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2172"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2172"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2171,
        "date": "2020-07-03T17:44:53",
        "date_gmt": "2020-07-03T17:44:53",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2171"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "colors-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/colors-api\/",
        "title": {
            "rendered": "Colors API"
        },
        "content": {
            "rendered": "\n<p>Colors are displayed combining RED, GREEN and BLUE. Colors can be specified in the following different ways \u2212<\/p>\n\n\n\n<ul><li>By color names<\/li><li>As RGB values<\/li><li>As hexadecimal values<\/li><li>As HSL values<\/li><li>As HWB values<\/li><\/ul>\n\n\n\n<p>The d3-color API provides representations for various colors. You can perform conversion and manipulation operations in API. Let us understand these operations in detail.<\/p>\n\n\n\n<h2>Configuring API<\/h2>\n\n\n\n<p>You can directly load API using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-color.v1.min.js\">&lt;\/script>\n&lt;script>\n\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Basic Operations<\/h2>\n\n\n\n<p>Let us go through the basic color operations in D3.<\/p>\n\n\n\n<p><strong>Convert color value to HSL<\/strong>\u00a0\u2212 To convert color value to HSL, use the following\u00a0<strong>Example<\/strong>\u00a0\u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var convert = d3.hsl(\"green\");<\/code><\/pre>\n\n\n\n<p>You can rotate the hue by 45\u00b0 as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>convert.h + =  45;<\/code><\/pre>\n\n\n\n<p>Similarly, you can change the saturation level as well. To fade the color value, you can change the opacity value as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>convert.opacity = 0.5;<\/code><\/pre>\n\n\n\n<h2>Color API Methods<\/h2>\n\n\n\n<p>Following are some of the most important Color API Methods.<\/p>\n\n\n\n<ul><li>d3.color(specifier)<\/li><li>color.opacity<\/li><li>color.rgb()<\/li><li>color.toString()<\/li><li>color.displayable()<\/li><li>d3.rgb(color)<\/li><li>d3.hsl(color)<\/li><li>d3.lab(color)<\/li><li>d3.hcl(color)<\/li><li>d3.cubehelix(color)<\/li><\/ul>\n\n\n\n<p>Let us understand each of these Color API Methods in detail.<\/p>\n\n\n\n<h3>d3.color(specifier)<\/h3>\n\n\n\n<p>It is used to parse the specified CSS color and return RGB or HSL color. If specifier is not given, then null is returned.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var color = d3.color(\"green\");  \/\/ asign color name directly\n   console.log(color);\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on our screen \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{r: 0, g: 128, b: 0, opacity: 1}\n<\/code><\/pre>\n\n\n\n<h3>color.opacity<\/h3>\n\n\n\n<p>If we want to fade the color, we can change the opacity value. It is in the range of [0, 1].<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var color = d3.color(\"green\");\n   console.log(color.opacity);\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on the screen \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>1<\/code><\/pre>\n\n\n\n<h3>color.rgb()<\/h3>\n\n\n\n<p>It returns the RGB value for the color. Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var color = d3.color(\"green\");\n   console.log(color.rgb());\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on our screen.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{r: 0, g: 128, b: 0, opacity: 1}\n<\/code><\/pre>\n\n\n\n<h3>color.toString()<\/h3>\n\n\n\n<p>It returns a string representing the color according to the CSS Object Model specification. Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var color = d3.color(\"green\");\n   console.log(color.toString());\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on our screen.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>rgb(0, 128, 0)\n<\/code><\/pre>\n\n\n\n<h3>color.displayable()<\/h3>\n\n\n\n<p>Returns true, if the color is displayable. Returns false, if RGB color value is less than 0 or greater than 255, or if the opacity is not in the range [0, 1]. Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var color = d3.color(\"green\");\n   console.log(color.displayable());\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on our screen.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n<\/code><\/pre>\n\n\n\n<h3>d3.rgb(color)<\/h3>\n\n\n\n<p>This method is used to construct a new RGB color. Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   console.log(d3.rgb(\"yellow\"));\n   console.log(d3.rgb(200,100,0));\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on the screen.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{r: 255, g: 255, b: 0, opacity: 1}\n{r: 200, g: 100, b: 0, opacity: 1}<\/code><\/pre>\n\n\n\n<h3>d3.hsl(color)<\/h3>\n\n\n\n<p>It is used to construct a new HSL color. Values are exposed as h, s and l properties on the returned instance. Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var hsl = d3.hsl(\"blue\");\n   console.log(hsl.h + =  90);\n   console.log(hsl.opacity = 0.5);\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on the screen.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>330\n0.5<\/code><\/pre>\n\n\n\n<h3>d3.lab(color)<\/h3>\n\n\n\n<p>It constructs a new Lab color. The channel values are exposed as \u2018l\u2019, \u2018a\u2019 and \u2018b\u2019 properties on the returned instance.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var lab = d3.lab(\"blue\");\n   console.log(lab);\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on the screen.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{l: 32.29701093285073, a: 79.18751984512221, b: -107.8601617541481, opacity: 1}<\/code><\/pre>\n\n\n\n<h3>d3.hcl(color)<\/h3>\n\n\n\n<p>Constructs a new HCL color. The channel values are exposed as h, c and l properties on the returned instance. Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var hcl = d3.hcl(\"blue\");\n   console.log(hcl);\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on the screen.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{h: 306.2849380699878, c: 133.80761485376166, l: 32.29701093285073, opacity: 1}<\/code><\/pre>\n\n\n\n<h3>d3.cubehelix(color)<\/h3>\n\n\n\n<p>Constructs a new Cubehelix color. Values are exposed as h, s and l properties on the returned instance. Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var hcl = d3.hcl(\"blue\");\n   console.log(hcl);\n&lt;\/script><\/code><\/pre>\n\n\n\n<p>We will see the following response on the screen,<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>{h: 236.94217167732103, s: 4.614386868039719, l: 0.10999954957200976, opacity: 1}<\/code><\/pre>\n\n\n\n<h3>Working Example<\/h3>\n\n\n\n<p>Let us create a new webpage \u2013\u00a0<strong>color.html<\/strong>\u00a0to perform all the color API methods. The complete code listing is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3>D3 colors API&lt;\/h3>\n      &lt;script>\n         var color = d3.color(\"green\");\n         console.log(color);\n         console.log(color.opacity);\n         console.log(color.rgb());\n         console.log(color.toString());\n         console.log(color.displayable());\n         console.log(d3.rgb(\"yellow\"));\n         console.log(d3.rgb(200,100,0));\n         var hsl = d3.hsl(\"blue\");\n         console.log(hsl.h + =  90);\n         console.log(hsl.opacity = 0.5);\n         var lab = d3.lab(\"blue\");\n         console.log(lab);\n         var hcl = d3.hcl(\"blue\");\n         console.log(hcl);\n         var cube = d3.cubehelix(\"blue\");\n         console.log(cube);\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/colors_api.jpg\" alt=\"Colors API\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Colors are displayed combining RED, GREEN and BLUE. Colors can be specified in the following different ways \u2212 By color names As RGB values As hexadecimal values As HSL values As HWB values The d3-color API provides representations for various colors. You can perform conversion and manipulation operations in API. Let us understand these operations [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2171"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2171"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2171\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2191,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2171\/revisions\/2191"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2171"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2171"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2171"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2170,
        "date": "2020-07-03T17:47:02",
        "date_gmt": "2020-07-03T17:47:02",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2170"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "transitions-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/transitions-api\/",
        "title": {
            "rendered": "Transitions API"
        },
        "content": {
            "rendered": "\n<p>D3 Transitions take a selection of elements and for each element; it applies a transition to a part of the current definition of the element.<\/p>\n\n\n\n<h2>Configuring API<\/h2>\n\n\n\n<p>You can configure the transition API using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-color.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-dispatch.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-ease.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-interpolate.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-selection.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-timer.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-transition.v1.min.js\">&lt;\/script>\n&lt;script>\n\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Transition API Methods<\/h2>\n\n\n\n<p>Let us go through the Transition API methods in detail.<\/p>\n\n\n\n<h2>Selecting Elements<\/h2>\n\n\n\n<p>Let us discuss the various selecting elements in detail.<\/p>\n\n\n\n<ul><li><strong>selection.transition([name])<\/strong>\u00a0\u2212 This method is used to return a new selection transition with the name. If a name is not specified, it returns null.<\/li><li><strong>selection.interrupt([name])<\/strong>\u00a0\u2212 This method is used to interrupt the selected elements of the transition with the name and is defined below.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>selection.interrupt().selectAll(\"*\").interrupt();<\/code><\/pre>\n\n\n\n<ul><li><strong>d3.interrupt(node[, name])<\/strong>\u00a0\u2212 This method is used to interrupt the transition of the specified name on the specified node.<\/li><li><strong>d3.transition([name])<\/strong>\u00a0\u2212 This method is used to return a new transition with the specified name.<\/li><li><strong>transition.select(selector)<\/strong>\u00a0\u2212 This method is used to select the first element that matches the specified selector and returns a transition on the resulting selection, which is defined below.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>transition\n   .selection()\n   .select(selector)\n   .transition(transition)<\/code><\/pre>\n\n\n\n<ul><li><strong>transition.selectAll(selector)<\/strong>\u00a0\u2212 This method is used to select all the elements that matches the specified selector and returns a transition on the resulting selection. It is defined below \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>transition\n   .selection()\n   .selectAll(selector)\n   .transition(transition)<\/code><\/pre>\n\n\n\n<ul><li><strong>transition.filter(filter)<\/strong>\u00a0\u2212 This method is used to select the elements matching the specified filter, they are defined below.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>transition\n   .selection()\n   .filter(filter)\n   .transition(transition)<\/code><\/pre>\n\n\n\n<ul><li><strong>transition.merge(other)<\/strong>&nbsp;\u2212 This method is used to merge the transition with other transition. It is defined below.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">transition\n   .selection()\n   .merge(other.selection())\n   .transition(transition)<\/pre>\n\n\n\n<ul><li><strong>transition.transition()<\/strong>&nbsp;\u2212 This method is used to return a new transition on the selected elements. It is scheduled to start when the transition stops. The new transition inherits this transition\u2019s name, duration and easing.<\/li><\/ul>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.selectAll(\".body\")\n   .transition() \n   \n   \/\/ fade to yellow.\n   .style(\"fill\", \"yellow\")\n   .transition() \n   \n   \/\/ Wait for five second. Then change blue, and remove.\n   .delay(5000)\n   .style(\"fill\", \"blue\")\n   .remove();<\/code><\/pre>\n\n\n\n<p>Here, the body fades to yellow and starts just five seconds before the last transition.<\/p>\n\n\n\n<ul><li><strong>d3.active(node[, name])<\/strong>&nbsp;\u2212 This method is used to return the transition on the specified node with the name.<\/li><\/ul>\n\n\n\n<h3>Timing Methods<\/h3>\n\n\n\n<p>Let us go through the transition timing API methods in detail.<\/p>\n\n\n\n<ul><li><strong>transition.delay([value])<\/strong>\u00a0\u2212 This method is used to set the transition delay to the specified value. If a function is evaluated for each selected element, it is passed to the current datum \u2018d\u2019 and index \u2018i&#8217;, with the context as the current DOM element. If a value is not specified, returns the current value of the delay for the first (non-null) element in the transition. It is defined below,<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>transition.delay(function(d, i) { return i * 10; });<\/code><\/pre>\n\n\n\n<ul><li><strong>transition.duration([value])<\/strong>&nbsp;\u2212 This method is used to set the transition duration to the specified value. If a value is not specified, returns the current value of the duration for the first (non-null) element in the transition.<\/li><li><strong>transition.ease([value])<\/strong>&nbsp;\u2212 This method is used to ease the transition value for selected elements. The easing function is invoked for each frame of the animation and passed the normalized time \u2018t\u2019 in the range [0, 1]. If a value is not specified, it returns the current easing function for the first (non-null) element in the transition.<\/li><\/ul>\n\n\n\n<p>In the next chapter, we will discuss the drag and drop concept in d3.js.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>D3 Transitions take a selection of elements and for each element; it applies a transition to a part of the current definition of the element. Configuring API You can configure the transition API using the following script. Transition API Methods Let us go through the Transition API methods in detail. Selecting Elements Let us discuss [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2170"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2170"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2170\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2192,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2170\/revisions\/2192"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2170"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2170"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2170"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2169,
        "date": "2020-07-03T17:50:52",
        "date_gmt": "2020-07-03T17:50:52",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2169"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "dragging-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/dragging-api\/",
        "title": {
            "rendered": "Dragging API"
        },
        "content": {
            "rendered": "\n<p>Drag and drop is one of the most familiar concept in d3.js. This chapter explains dragging and its methods in detail.<\/p>\n\n\n\n<h2>Installation<\/h2>\n\n\n\n<p>We can directly include dragging API using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-dispatch.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-selection.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-drag.v1.min.js\">&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Dragging API Methods<\/h2>\n\n\n\n<p>Following are some of the most important dragging API methods in D3.js.<\/p>\n\n\n\n<ul><li>d3.drag()<\/li><li>drag(selection)<\/li><li>drag.container([container])<\/li><li>drag.filter([filter])<\/li><li>drag.subject([subject])<\/li><li>drag.clickDistance([distance])<\/li><li>drag.on(typenames, [listener])<\/li><li>d3.dragDisable(window)<\/li><li>d3.dragEnable(window[, noclick])<\/li><\/ul>\n\n\n\n<p>Let us now understand each of these in detail.<\/p>\n\n\n\n<h3>d3.drag()<\/h3>\n\n\n\n<p>This method is used to create a new dragging. You can call this method using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var drag = d3.drag();\n&lt;\/script><\/code><\/pre>\n\n\n\n<h3>drag(selection)<\/h3>\n\n\n\n<p>This method is used to apply the dragging to the specified selection. You can invoke this function using\u00a0<strong>selection.call<\/strong>. A simple example is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.select(\".node\").call(d3.drag().on(\"drag\", mousemove));<\/code><\/pre>\n\n\n\n<p>Here, the drag behavior applied to the selected elements is via selection.call.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>drag.container(&#91;container])<\/code><\/pre>\n\n\n\n<p>It is used to set the container to the specified function for dragging. If a container is not specified, it returns the current accessor. To drag any graphical elements with a Canvas, you can redefine the container as itself. It is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>function container() {\n   return this;\n}<\/code><\/pre>\n\n\n\n<h3>drag.filter([filter])<\/h3>\n\n\n\n<p>It is used to set the filter for the specified function. If the filter is not specified, it returns the current filter as defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>function filter() {\n   return !d3.event.button;\n}<\/code><\/pre>\n\n\n\n<h3>drag.subject([subject])<\/h3>\n\n\n\n<p>It is used to set the subject to the specified function for dragging and is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>function subject(d) {\n   return d = =  null ? {x: d3.event.x, y: d3.event.y} : d;\n}<\/code><\/pre>\n\n\n\n<p>Here, the subject represents the thing being dragged. For example, if you want to drag rectangle elements in SVG, the default subject is datum of the rectangle being dragged.<\/p>\n\n\n\n<h3>drag.clickDistance([distance])<\/h3>\n\n\n\n<p>This method is used to set the maximum distance for clicking a mousedown and mouseup event. If distance is not specified, it points to zero.<\/p>\n\n\n\n<h3>drag.on(typenames, [listener])<\/h3>\n\n\n\n<p>This method is used to set the event listener for the specified typenames for dragging. The typenames is a string containing one or more typename separated by whitespace. Each typename is a type, optionally followed by a period (.) and a name, such as drag.one and drag.two. This type should be from one of the following \u2212<\/p>\n\n\n\n<ul><li><strong>start<\/strong>&nbsp;\u2212 starts a new pointer.<\/li><li><strong>drag<\/strong>&nbsp;\u2212 drags an active pointer.<\/li><li><strong>end<\/strong>&nbsp;\u2212 Inactive an active pointer.<\/li><\/ul>\n\n\n\n<h3>d3.dragDisable(window)<\/h3>\n\n\n\n<p>This method is used to disable the drag and drop selection. It prevents mousedown event action. Most of the selected browsers supports this action by default. If not supported, you can set the CSS property to none.<\/p>\n\n\n\n<h3>d3.dragEnable(window[, noclick])<\/h3>\n\n\n\n<p>This method is used to enable the drag and drop selection on the specified window location. It is used to call mouseup event action. If you assign the noclick value is true then click event expires a zero millisecond timeout.<\/p>\n\n\n\n<h2>Dragging API &#8211; Drag Events<\/h2>\n\n\n\n<p>The D3.event method is used to set the drag event. It consists of the following fields \u2212<\/p>\n\n\n\n<ul><li><strong>Target<\/strong>&nbsp;\u2212 It represents the drag behavior.<\/li><li><strong>Type<\/strong>&nbsp;\u2212 It is a string and can be any one of the following\u2013 \u201cstart\u201d, \u201cdrag\u201d or \u201cend\u201d.<\/li><li><strong>Subject<\/strong>&nbsp;\u2212 The drag subject, defined by drag.subject.<\/li><\/ul>\n\n\n\n<h3>event.on(typenames, [listener])<\/h3>\n\n\n\n<p>The event object exposes the event.on method to perform dragging. It is defined as follows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.event.on(\"drag\", dragged).on(\"end\", ended);<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Drag and drop is one of the most familiar concept in d3.js. This chapter explains dragging and its methods in detail. Installation We can directly include dragging API using the following script. Dragging API Methods Following are some of the most important dragging API methods in D3.js. d3.drag() drag(selection) drag.container([container]) drag.filter([filter]) drag.subject([subject]) drag.clickDistance([distance]) drag.on(typenames, [listener]) [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2169"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2169"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2169\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2199,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2169\/revisions\/2199"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2169"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2169"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2169"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2168,
        "date": "2020-07-03T17:55:36",
        "date_gmt": "2020-07-03T17:55:36",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2168"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "zooming-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/zooming-api\/",
        "title": {
            "rendered": "Zooming API"
        },
        "content": {
            "rendered": "\n<p>Zooming helps to scale your content. You can focus on a particular region using the click-and-drag approach. In this chapter, we will discuss Zooming API in detail.<\/p>\n\n\n\n<h2>Configuring API<\/h2>\n\n\n\n<p>You can load the Zooming API directly from the \u201cd3js.org\u201d using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-color.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-dispatch.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-ease.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-interpolate.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-selection.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-timer.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-transition.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-drag.v1.min.js\">&lt;\/script>\n&lt;script src = \"https:\/\/d3js.org\/d3-zoom.v1.min.js\">&lt;\/script>\n\n&lt;body>\n   &lt;script>\n   &lt;\/script>\n&lt;\/body><\/code><\/pre>\n\n\n\n<h2>Zooming API Methods<\/h2>\n\n\n\n<p>Following are some of the most commonly used Zooming API Methods.<\/p>\n\n\n\n<ul><li>d3.zoom()<\/li><li>zoom(selection)<\/li><li>zoom.transform(selection, transform)<\/li><li>zoom.translateBy(selection, x, y)<\/li><li>zoom.translateTo(selection, x, y)<\/li><li>zoom.scaleTo(selection, k)<\/li><li>zoom.scaleBy(selection, k)<\/li><li>zoom.filter([filter])<\/li><li>zoom.wheelDelta([delta])<\/li><li>zoom.extent([extent])<\/li><li>zoom.scaleExtent([extent])<\/li><li>zoom.translateExtent([extent])<\/li><li>zoom.clickDistance([distance])<\/li><li>zoom.duration([duration])<\/li><li>zoom.interpolate([interpolate])<\/li><li>zoom.on(typenames[, listener])<\/li><\/ul>\n\n\n\n<p>Let us go through all these Zooming API methods in brief.<\/p>\n\n\n\n<h3>d3.zoom()<\/h3>\n\n\n\n<p>It creates a new zoom behavior. We can access it using the script below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var zoom = d3.zoom();\n&lt;\/script><\/code><\/pre>\n\n\n\n<h3>zoom(selection)<\/h3>\n\n\n\n<p>It is used to apply the zoom transformation on a selected element. For example, you can instantiate a mousedown.zoom behavior using the following syntax.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>selection.call(d3.zoom().on(\"mousedown.zoom\", mousedowned));<\/code><\/pre>\n\n\n\n<h3>zoom.transform(selection, transform)<\/h3>\n\n\n\n<p>It is used to set the current zoom transform of the selected elements to the specified transform. For example, we can reset the zoom transform to the identity transform using the syntax below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>selection.call(zoom.transform, d3.zoomIdentity);<\/code><\/pre>\n\n\n\n<p>We can also reset the zoom transform to the identity transform for 1000 milliseconds using the following syntax.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>selection.transition().duration(1000).call(zoom.transform, d3.zoomIdentity);<\/code><\/pre>\n\n\n\n<h3>zoom.translateBy(selection, x, y)<\/h3>\n\n\n\n<p>It is used to translate the current zoom transform of the selected elements by x and y values. You can specify x and y translation values either as numbers or as functions that returns numbers. If a function is invoked for the selected element, then it is passed through the current datum \u2018d\u2019 and index \u2018i&#8217; for DOM. A sample code is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>zoom.translateBy(selection, x, y) {\n   zoom.transform(selection, function() {\n      return constrain(this.__zoom.translate(\n         x = = = \"function\" ? x.apply(this, arguments) : x,\n         y = = = \"function\" ? y.apply(this, arguments) : y\n      );\n   }\n};<\/code><\/pre>\n\n\n\n<h3>zoom.translateTo(selection, x, y)<\/h3>\n\n\n\n<p>It is used to translate the current zoom transform of the selected elements to the specified position of x and y.<\/p>\n\n\n\n<h3>zoom.scaleTo(selection, k)<\/h3>\n\n\n\n<p>It is used to scale the current zoom transform of the selected elements to\u00a0<strong>k<\/strong>. Here,\u00a0<strong>k<\/strong>\u00a0is a scale factor, specified as numbers or functions.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>zoom.scaleTo = function(selection, k) {\n   zoom.transform(selection, function() {\n      k = = = \"function\" ? k.apply(this, arguments) : k;\n   });\n};<\/code><\/pre>\n\n\n\n<h3>zoom.scaleBy(selection, k)<\/h3>\n\n\n\n<p>It is used to scale the current zoon transform of the selected elements by\u00a0<strong>k<\/strong>. Here,\u00a0<strong>k<\/strong>\u00a0is a scale factor, specified either as numbers or as functions that returns numbers.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>zoom.scaleBy = function(selection, k) {\n   zoom.scaleTo(selection, function() {\n      var k0 = this.__zoom.k,\n      k1 = k = = = \"function\" ? k.apply(this, arguments) : k;\n      return k0 * k1;\n   });\n};<\/code><\/pre>\n\n\n\n<h3>zoom.filter([filter])<\/h3>\n\n\n\n<p>It is used to set the filter to the specified function for zoom behavior. If the filter is not specified, it returns the current filter as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>function filter() {\n   return !d3.event.button;\n}<\/code><\/pre>\n\n\n\n<h3>zoom.wheelDelta([delta])<\/h3>\n\n\n\n<p>The value of&nbsp;<strong>\u0394<\/strong>&nbsp;is returned by the wheel delta function. If delta is not specified, it returns the current wheel delta function.<\/p>\n\n\n\n<h3>zoom.extent([extent])<\/h3>\n\n\n\n<p>It is used to set the extent to the specified array points. If the extent is not specified, it returns the current extent accessor, which defaults to [[0, 0], [width, height]], where width is the client width of the element and height is its client height.<\/p>\n\n\n\n<h3>zoom.scaleExtent([extent])<\/h3>\n\n\n\n<p>It is used to set the scale extent to the specified array of numbers [k0, k1]. Here,\u00a0<strong>k0<\/strong>\u00a0is the minimum allowed scale factor. While,\u00a0<strong>k1<\/strong>\u00a0is the maximum allowed scale factor. If extent is not specified, it returns the current scale extent, which defaults to [0, \u221e]. Consider the sample code that is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>selection\n   .call(zoom)\n   .on(\"wheel\", function() { d3.event.preventDefault(); });<\/code><\/pre>\n\n\n\n<p>The user can try to zoom by wheeling, when already at the corresponding limit of the scale extent. If we want to prevent scrolling on wheel input regardless of the scale extent, register a wheel event listener to prevent the browser default behavior.<\/p>\n\n\n\n<h3>zoom.translateExtent([extent])<\/h3>\n\n\n\n<p>If the extent is specified, it sets the translate extent to the specified array of points. If extent is not specified, it returns the current translate extent, which defaults to [[-\u221e, -\u221e], [+\u221e, +\u221e]].<\/p>\n\n\n\n<h3>zoom.clickDistance([distance])<\/h3>\n\n\n\n<p>This method is used to set the maximum distance that the zoomable area can move between up and down, which will trigger a subsequent click event.<\/p>\n\n\n\n<h3>zoom.duration([duration])<\/h3>\n\n\n\n<p>This method is used to set the duration for zoom transitions on double-click and double-tap to the specified number of milliseconds and returns the zoom behavior. If the duration is not specified, it returns the current duration, which defaults to 250 milliseconds, which is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>selection\n   .call(zoom)\n   .on(\"dblclick.zoom\", null);<\/code><\/pre>\n\n\n\n<h3>zoom.interpolate([interpolate])<\/h3>\n\n\n\n<p>This method is used to interpolate for zoom transitions to the specified function. If interpolate is not specified, it returns the current interpolation factory, which defaults to d3.interpolateZoom.<\/p>\n\n\n\n<h3>zoom.on(typenames[, listener])<\/h3>\n\n\n\n<p>If the listener is specified, it sets the event listener for the specified typenames and returns the zoom behavior. The typenames is a string containing one or more typename separated by whitespace. Each typename is a type, optionally followed by a period (.) and a name, such as zoom.one and zoom.second. The name allows multiple listeners to be registered for the same type. This type must be from one of the following \u2212<\/p>\n\n\n\n<ul><li><strong>Start<\/strong>&nbsp;\u2212 after zooming begins (such as on mousedown).<\/li><li><strong>Zoom<\/strong>&nbsp;\u2212 after a change to the zoom transform (such as on mousemove).<\/li><li><strong>End<\/strong>&nbsp;\u2212 after zooming ends (such as on mouseup ).<\/li><\/ul>\n\n\n\n<p>In the next chapter, we will discuss the different requests API in D3.js.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Zooming helps to scale your content. You can focus on a particular region using the click-and-drag approach. In this chapter, we will discuss Zooming API in detail. Configuring API You can load the Zooming API directly from the \u201cd3js.org\u201d using the following script. Zooming API Methods Following are some of the most commonly used Zooming [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2168"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2168"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2168\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2205,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2168\/revisions\/2205"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2168"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2168"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2168"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2167,
        "date": "2020-07-03T17:58:25",
        "date_gmt": "2020-07-03T17:58:25",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2167"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "delimiter-separated",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/delimiter-separated\/",
        "title": {
            "rendered": "Delimiter-Separated"
        },
        "content": {
            "rendered": "\n<p>A delimiter is a sequence of one or more characters used to specify the boundary between separate, independent regions in plain text or other data. A field delimiter is a sequence of comma-separated values. Well, delimiter-separated values are&nbsp;<strong>comma separated values<\/strong>(CSV) or&nbsp;<strong>tab-separated values<\/strong>&nbsp;(TSV). This chapter explains the delimiter separated values in detail.<\/p>\n\n\n\n<h2>Configuring API<\/h2>\n\n\n\n<p>We can easily load the API using the following syntax.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-dsv.v1.min.js\">&lt;\/script>\n&lt;script>\n   var data = d3.csvParse(string);\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>API methods<\/h2>\n\n\n\n<p>Following are the various API methods of the delimiter-separated values.<\/p>\n\n\n\n<ul><li>d3.csvParse(string[, row])<\/li><li>d3.csvParseRows(string[, row])<\/li><li>d3.csvFormat(rows[, columns])<\/li><li>d3.csvFormatRows(rows)<\/li><li>d3.tsvParse(string[, row])<\/li><li>d3.tsvParseRows(string[, row])<\/li><li>d3.tsvFormat(rows[, columns])<\/li><li>d3.tsvFormatRows(rows)<\/li><\/ul>\n\n\n\n<p>Let us go through each of these API methods in detail.<\/p>\n\n\n\n<h3>d3.csvParse(string[, row])<\/h3>\n\n\n\n<p>This method is used to parse the csv format. Consider the file\u00a0<strong>data.csv<\/strong>\u00a0that is shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>year,population\n2006,40\n2008,45\n2010,48\n2012,51\n2014,53\n2016,57\n2017,62<\/code><\/pre>\n\n\n\n<p>Now, we can apply the above-given function.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var data = d3.csvParse(string, function(d) {\n   return {\n      year: new Date(+d.Year, 0, 1), \/\/ lowercase and convert \"Year\" to Date\n      population: d.population\n   };\n});<\/code><\/pre>\n\n\n\n<p>Here, it Parses the specified string in the delimiter-separated values. It returns an array of objects representing the parsed rows.<\/p>\n\n\n\n<h3>d3.csvParseRows(string[, row])<\/h3>\n\n\n\n<p>This method is used to parse the csv format equivalent to rows.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var data = d3.csvParseRows(string, function(d, i) {\n   return {\n      year: new Date(+d&#91;0], 0, 1), \/\/ convert first colum column to Date\n      population: d&#91;1],\n   };\n});<\/code><\/pre>\n\n\n\n<p>It parses each row in the csv file.<\/p>\n\n\n\n<h3>d3.csvFormat(rows[, columns])<\/h3>\n\n\n\n<p>This method is used to format the csv rows and columns.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var string = d3.csvFormat(data, &#91;\"year\", \"population\"]);<\/code><\/pre>\n\n\n\n<p>Here, if the columns are not specified, the list of the column names that forms the header row is determined by the union of all properties on all the objects in the rows. If columns are specified, it is an array of strings representing the column names.<\/p>\n\n\n\n<h3>d3.csvFormatRows(rows)<\/h3>\n\n\n\n<p>This method is used to format the csv rows.<\/p>\n\n\n\n<p><strong>Example<\/strong>\u00a0\u2212 Let us consider the following example.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var string = d3.csvFormatRows(data.map(function(d, i) {\n   return &#91;\n      d.year.getFullYear(), \/\/ Assuming d.year is a Date object.\n      d.population\n   ];\n}));<\/code><\/pre>\n\n\n\n<p>Here, it formats the specified array of string rows as delimiter-separated values, returning a string.<\/p>\n\n\n\n<h3>d3.tsvParse(string[, row])<\/h3>\n\n\n\n<p>This method is used to parse the tsv format. It is similar to csvParse.<\/p>\n\n\n\n<h3>d3.tsvParseRows(string[, row])<\/h3>\n\n\n\n<p>This method is used to parse the tsv format equivalent to rows. It is similar to csvParseRows function.<\/p>\n\n\n\n<h3>d3.tsvFormat(rows[, columns])<\/h3>\n\n\n\n<p>This method is used to format the tsv rows and columns.<\/p>\n\n\n\n<h3>d3.tsvFormatRows(rows)<\/h3>\n\n\n\n<p>This method is used to format the tsv rows.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A delimiter is a sequence of one or more characters used to specify the boundary between separate, independent regions in plain text or other data. A field delimiter is a sequence of comma-separated values. Well, delimiter-separated values are&nbsp;comma separated values(CSV) or&nbsp;tab-separated values&nbsp;(TSV). This chapter explains the delimiter separated values in detail. Configuring API We can [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2167"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2167"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2167\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2211,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2167\/revisions\/2211"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2167"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2167"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2167"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2166,
        "date": "2020-07-03T18:00:23",
        "date_gmt": "2020-07-03T18:00:23",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2166"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "timer-api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/timer-api\/",
        "title": {
            "rendered": "Timer API"
        },
        "content": {
            "rendered": "\n<p>Timer API module is used to perform the concurrent animations with synchronized timing delay. It uses&nbsp;<strong>requestAnimationFrame<\/strong>&nbsp;for animation. This chapter explains Timer API module in detail.<\/p>\n\n\n\n<h2>requestAnimationFrame<\/h2>\n\n\n\n<p>This method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation.<\/p>\n\n\n\n<h2>Configuring Timer<\/h2>\n\n\n\n<p>We can easily load the timer directly from d3js.org by using the following script.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https:\/\/d3js.org\/d3-timer.v1.min.js\">&lt;\/script>\n&lt;script>\n   var timer = d3.timer(callback);\n&lt;\/script><\/code><\/pre>\n\n\n\n<h2>Timer API Methods<\/h2>\n\n\n\n<p>The Timer API supports the following important methods. All of these are explained in detail as follows.<\/p>\n\n\n\n<h3>d3.now()<\/h3>\n\n\n\n<p>This method returns the current time.<\/p>\n\n\n\n<h3>d3.timer(callback[, delay[, time]])<\/h3>\n\n\n\n<p>This method is used to schedule a new timer and invokes the timer until stopped. You can set a numeric delay in MS, but it is optional otherwise, it defaults to zero. If time is not specified, it is considered as d3.now().<\/p>\n\n\n\n<h3>timer.restart(callback[, delay[, time]])<\/h3>\n\n\n\n<p>Restart a timer with the specified callback and optional delay and time.<\/p>\n\n\n\n<h3>timer.stop()<\/h3>\n\n\n\n<p>This method stops the timer, preventing subsequent callbacks.<\/p>\n\n\n\n<h3>d3.timeout(callback[, delay[, time]])<\/h3>\n\n\n\n<p>It is used to stop the timer on its first callback. Callback is passed as the elapsed time.<\/p>\n\n\n\n<h3>d3.interval(callback[, delay[, time]])<\/h3>\n\n\n\n<p>It is invoked on a particular time delay interval. If delay is not specified, it takes the timer time.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Create a webpage \u201ctimer.html\u201d and add the following script to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;script type = \"text\/javascript\" src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;h3> Timer API &lt;\/h3>\n      &lt;script>\n         var timer = d3.timer(function(duration) {\n            console.log(duration);\n            if (duration > 150) timer.stop();\n         }, 100);\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/timer_api.jpg\" alt=\"Timer API\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Timer API module is used to perform the concurrent animations with synchronized timing delay. It uses&nbsp;requestAnimationFrame&nbsp;for animation. This chapter explains Timer API module in detail. requestAnimationFrame This method tells the browser that you wish to perform an animation and requests that the browser call a specified function to update an animation. Configuring Timer We can [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2166"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2166"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2166\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2212,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2166\/revisions\/2212"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2166"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2166"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2166"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 2165,
        "date": "2020-07-03T18:04:22",
        "date_gmt": "2020-07-03T18:04:22",
        "guid": {
            "rendered": "http:\/\/angular.foobrdigital.com\/?p=2165"
        },
        "modified": "2020-12-25T19:08:27",
        "modified_gmt": "2020-12-25T19:08:27",
        "slug": "working-example",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/angular.foobrdigital.com\/working-example\/",
        "title": {
            "rendered": "Working Example"
        },
        "content": {
            "rendered": "\n<p>Let us perform an animated bar chart in this chapter. For this example, we take the data.csv file used in the previous chapter of the population records as dataset and generate an animated bar chart.<\/p>\n\n\n\n<p>To do this, we need to perform the following steps \u2212<\/p>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212&nbsp;<strong>Apply styles<\/strong>&nbsp;\u2212 Apply CSS styles using the coding given below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style>\n   .bar {\n      fill: green;\n   }\n   \n   .highlight {\n      fill: red;\n   }\n   \n   .title {\n      fill: blue;\n      font-weight: bold;\n   }\n&lt;\/style><\/code><\/pre>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212&nbsp;<strong>Define variables<\/strong>&nbsp;\u2212 Let us define the SVG attributes using the script below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n   var svg = d3.select(\"svg\"), margin = 200,\n   width = svg.attr(\"width\") - margin,\n   height = svg.attr(\"height\") - margin;\n&lt;\/script><\/code><\/pre>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212&nbsp;<strong>Append text<\/strong>&nbsp;\u2212 Now, append text and apply the transformation using the coding below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>svg.append(\"text\")\n   .attr(\"transform\", \"translate(100,0)\")\n   .attr(\"x\", 50)\n   .attr(\"y\", 50)\n   .attr(\"font-size\", \"20px\")\n   .attr(\"class\", \"title\")\n   .text(\"Population bar chart\")<\/code><\/pre>\n\n\n\n<p><strong>Step 4<\/strong>&nbsp;\u2212&nbsp;<strong>Create scale range<\/strong>&nbsp;\u2212 In this step, we can create a scale range and append the group elements. It is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>var x = d3.scaleBand().range(&#91;0, width]).padding(0.4),\n   y = d3.scaleLinear()\n      .range(&#91;height, 0]);\n   var g = svg.append(\"g\")\n      .attr(\"transform\", \"translate(\" + 100 + \",\" + 100 + \")\");<\/code><\/pre>\n\n\n\n<p><strong>Step 5<\/strong>&nbsp;\u2212&nbsp;<strong>Read data<\/strong>&nbsp;\u2212 We have already created the&nbsp;<strong>data.csv<\/strong>&nbsp;file in our previous examples. The same file, we have used here.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>year,population\n2006,40\n2008,45\n2010,48\n2012,51\n2014,53\n2016,57\n2017,62<\/code><\/pre>\n\n\n\n<p>Now, read the above file using the code below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d3.csv(\"data.csv\", function(error, data) {\n   if (error) {\n      throw error;\n   }<\/code><\/pre>\n\n\n\n<p><strong>Step 6<\/strong>&nbsp;\u2212&nbsp;<strong>Set domain<\/strong>&nbsp;\u2212 Now, set the domain using the coding below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>x.domain(data.map(function(d) { return d.year; }));\ny.domain(&#91;0, d3.max(data, function(d) { return d.population; })]);<\/code><\/pre>\n\n\n\n<p><strong>Step 7<\/strong>&nbsp;\u2212&nbsp;<strong>Add X-axis<\/strong>&nbsp;\u2212 Now, you can add the X-axis to the transformation. It is shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>g.append(\"g\")\n   .attr(\"transform\", \"translate(0,\" + height + \")\")\n   .call(d3.axisBottom(x)).append(\"text\")\n   .attr(\"y\", height - 250).attr(\"x\", width - 100)\n   .attr(\"text-anchor\", \"end\").attr(\"font-size\", \"18px\")\n   .attr(\"stroke\", \"blue\").text(\"year\");<\/code><\/pre>\n\n\n\n<p><strong>Step 8<\/strong>&nbsp;\u2212&nbsp;<strong>Add Y-axis<\/strong>&nbsp;\u2212 Add the Y-axis to the transformation using the code given below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>g.append(\"g\")\n   .append(\"text\").attr(\"transform\", \"rotate(-90)\")\n   .attr(\"y\", 6).attr(\"dy\", \"-5.1em\")\n   .attr(\"text-anchor\", \"end\").attr(\"font-size\", \"18px\")\n   .attr(\"stroke\", \"blue\").text(\"population\");<\/code><\/pre>\n\n\n\n<p><strong>Step 9<\/strong>&nbsp;\u2212&nbsp;<strong>Append group elements<\/strong>&nbsp;\u2212 Now, append the group elements and apply transformation to Y-axis as defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>g.append(\"g\")\n   .attr(\"transform\", \"translate(0, 0)\")\n   .call(d3.axisLeft(y))<\/code><\/pre>\n\n\n\n<p><strong>Step 10<\/strong>&nbsp;\u2212&nbsp;<strong>Select the bar class<\/strong>&nbsp;\u2212 Now, select all the elements in the bar class as defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>g.selectAll(\".bar\")\n   .data(data).enter()\n   .append(\"rect\")\n   .attr(\"class\", \"bar\")\n   .on(\"mouseover\", onMouseOver) \n   .on(\"mouseout\", onMouseOut)\n   .attr(\"x\", function(d) { return x(d.year); })\n   .attr(\"y\", function(d) { return y(d.population); })\n   .attr(\"width\", x.bandwidth())\n   .transition()\n   .ease(d3.easeLinear)\n   .duration(200)\n   .delay(function (d, i) {\n      return i * 25;\n   })\n   .attr(\"height\", function(d) { return height - y(d.population); });\n});<\/code><\/pre>\n\n\n\n<p>Here, we added the listener event for the mouseout and mouseover to perform animation. It applies the animation, when the mouse hovers over a particular bar and goes out of it. These functions are explained in the following step.<\/p>\n\n\n\n<p>The&nbsp;<strong>.ease(d3.easeLinear)<\/strong>&nbsp;function is used to perform apparent motion in animation. It processes the slow-in and the slow-out motion with a duration of 200. The delay can be calculated using \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>.delay(function (d, i) {\n   return i * 25;\n})<\/code><\/pre>\n\n\n\n<p><strong>Step 11<\/strong>&nbsp;\u2212&nbsp;<strong>Mouseover event handler function<\/strong>&nbsp;\u2212 Let us create a mouseover event handler to handle a mouse event as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>function onMouseOver(d, i) {\n   d3.select(this)\n      .attr('class', 'highlight');\n   d3.select(this)\n      .transition()\n      .duration(200)\n      .attr('width', x.bandwidth() + 5)\n      .attr(\"y\", function(d) { return y(d.population) - 10; })\n      .attr(\"height\", function(d) { return height - y(d.population) + 10; });\n   g.append(\"text\")\n      .attr('class', 'val') \n   \n   .attr('x', function() {\n      return x(d.year);\n   })\n   \n   .attr('y', function() {\n      return y(d.value) - 10;\n   })\n}<\/code><\/pre>\n\n\n\n<p>Here, in the mouseover event, we want to increase the bar width and height, and the bar color of the selected bar to red. For the color, we have added a class \u2018highlight\u2019, which changes the color of the selected bar to red.<\/p>\n\n\n\n<p>A transition function to the bar for the duration of 200 milliseconds. When we increase the width of the bar by 5px, and the height by 10px, the transition from the previous width and height of the bar to the new width and height will be for the duration of 200 milliseconds.<\/p>\n\n\n\n<p>Next, we calculated a new \u2018y\u2019 value to the bar, so that the bar does not distort due to the new height value.<\/p>\n\n\n\n<p><strong>Step 12<\/strong>&nbsp;\u2212&nbsp;<strong>Mouseout event handler function<\/strong>&nbsp;\u2212 Let us create a mouseout event handler to handle a mouse event. It is defined below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>function onMouseOut(d, i) {\n   d3.select(this).attr('class', 'bar');\n   \n   d3.select(this)\n      .transition()     \n      .duration(400).attr('width', x.bandwidth())\n      .attr(\"y\", function(d) { return y(d.population); })\n      .attr(\"height\", function(d) { return height - y(d.population); });\n   \n   d3.selectAll('.val')\n      .remove()\n}<\/code><\/pre>\n\n\n\n<p>Here, in the mouseout event, we want to remove the selection features that we had applied in the mouseover event. Therefore, we revert the bar class to the original \u2018bar\u2019 class and restore the original width and height of the selected bar and restore the y value to the original value.<\/p>\n\n\n\n<p>The&nbsp;<strong>d3.selectAll(\u2018.val\u2019).remove()<\/strong>&nbsp;function is used to remove the text value we had added during the bar selection.<\/p>\n\n\n\n<p><strong>Step 13<\/strong>&nbsp;\u2212&nbsp;<strong>Working Example<\/strong>&nbsp;\u2212 The complete program is given in the following code block. Create a webpage&nbsp;<strong>animated_bar.html<\/strong>&nbsp;and add the following changes to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;style>\n         .bar {\n            fill: green;\n         }\n        \n         .highlight {\n            fill: red;\n         }\n         \n         .title {\n            fill: blue;\n            font-weight: bold;\n         }\n      &lt;\/style>\n      &lt;script src = \"https:\/\/d3js.org\/d3.v4.min.js\">&lt;\/script>\n      &lt;title> Animated bar chart &lt;\/title>\n   &lt;\/head>\n\n   &lt;body>\n      &lt;svg width = \"500\" height = \"500\">&lt;\/svg>\n      &lt;script>\n         var svg = d3.select(\"svg\"),\n         margin = 200, width = svg.attr(\"width\") - margin,\n         height = svg.attr(\"height\") - margin;\n         \n         svg.append(\"text\")\n            .attr(\"transform\", \"translate(100,0)\")\n            .attr(\"x\", 50).attr(\"y\", 50)\n            .attr(\"font-size\", \"20px\")\n            .attr(\"class\", \"title\")\n            .text(\"Population bar chart\")\n            \n         var x = d3.scaleBand().range(&#91;0, width]).padding(0.4),\n         y = d3.scaleLinear().range(&#91;height, 0]);\n            \n         var g = svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + 100 + \",\" + 100 + \")\");\n\n         d3.csv(\"data.csv\", function(error, data) {\n            if (error) {\n               throw error;\n            }\n               \n            x.domain(data.map(function(d) { return d.year; }));\n            y.domain(&#91;0, d3.max(data, function(d) { return d.population; })]);\n                     \n            g.append(\"g\")\n               .attr(\"transform\", \"translate(0,\" + height + \")\")\n               .call(d3.axisBottom(x))\n               .append(\"text\")\n               .attr(\"y\", height - 250)\n               .attr(\"x\", width - 100)\n               .attr(\"text-anchor\", \"end\")\n               .attr(\"font-size\", \"18px\")\n               .attr(\"stroke\", \"blue\").text(\"year\");\n               \n            g.append(\"g\")\n               .append(\"text\")\n               .attr(\"transform\", \"rotate(-90)\")\n               .attr(\"y\", 6)\n               .attr(\"dy\", \"-5.1em\")\n               .attr(\"text-anchor\", \"end\")\n               .attr(\"font-size\", \"18px\")\n               .attr(\"stroke\", \"blue\")\n               .text(\"population\");\n                         \n            g.append(\"g\")\n               .attr(\"transform\", \"translate(0, 0)\")\n               .call(d3.axisLeft(y))\n\n            g.selectAll(\".bar\")\n               .data(data)\n               .enter()\n               .append(\"rect\")\n               .attr(\"class\", \"bar\")\n               .on(\"mouseover\", onMouseOver) \n               .on(\"mouseout\", onMouseOut)   \n               .attr(\"x\", function(d) { return x(d.year); })\n               .attr(\"y\", function(d) { return y(d.population); })\n               .attr(\"width\", x.bandwidth()).transition()\n               .ease(d3.easeLinear).duration(200)\n               .delay(function (d, i) {\n                  return i * 25;\n               })\n                  \n            .attr(\"height\", function(d) { return height - y(d.population); });\n         });\n          \n          \n         function onMouseOver(d, i) {\n            d3.select(this)\n            .attr('class', 'highlight');\n               \n            d3.select(this)\n               .transition()     \n               .duration(200)\n               .attr('width', x.bandwidth() + 5)\n               .attr(\"y\", function(d) { return y(d.population) - 10; })\n               .attr(\"height\", function(d) { return height - y(d.population) + 10; });\n              \n            g.append(\"text\")\n               .attr('class', 'val')\n               .attr('x', function() {\n                  return x(d.year);\n               })\n               \n            .attr('y', function() {\n               return y(d.value) - 10;\n            })\n         }\n          \n         function onMouseOut(d, i) {\n             \n            d3.select(this)\n               .attr('class', 'bar');\n            \n            d3.select(this)\n               .transition()     \n               .duration(200)\n               .attr('width', x.bandwidth())\n               .attr(\"y\", function(d) { return y(d.population); })\n               .attr(\"height\", function(d) { return height - y(d.population); });\n            \n            d3.selectAll('.val')\n               .remove()\n         }\n      &lt;\/script>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/d3js\/images\/animated_bar.jpg\" alt=\"Animated Bar\"\/><\/figure>\n\n\n\n<p>If we select any bar, it will be highlighted in red color. D3 is a general-purpose visualization library that deals with the transformation of data into information, documents, elements, etc., and ultimately helps in creating data visualization.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Let us perform an animated bar chart in this chapter. For this example, we take the data.csv file used in the previous chapter of the population records as dataset and generate an animated bar chart. To do this, we need to perform the following steps \u2212 Step 1&nbsp;\u2212&nbsp;Apply styles&nbsp;\u2212 Apply CSS styles using the coding [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            91,
            108,
            170,
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2165"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=2165"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2165\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 2214,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/posts\/2165\/revisions\/2214"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=2165"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=2165"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/angular.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=2165"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]