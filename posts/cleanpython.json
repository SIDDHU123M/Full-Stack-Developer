[{"id":3767,"date":"2020-11-03T11:02:59","date_gmt":"2020-11-03T11:02:59","guid":{"rendered":"http://python3.foobrdigital.com/?p=3767"},"modified":"2020-11-03T11:02:59","modified_gmt":"2020-11-03T11:02:59","slug":"pycodestyle","status":"publish","type":"post","link":"https://python3.foobrdigital.com/pycodestyle/","title":{"rendered":"Pycodestyle"},"content":{"rendered":"\n<p><strong>PEP 8</strong>&nbsp;is the document that spells out Python’s coding conventions — everything from whether to use tabs or spaces when indenting (use four spaces, problem solved) to how to name variables and objects.&nbsp;Pycodestyle&nbsp;is the Python module that checks Python code against the PEP 8 recommendations and delivers a report on where the analyzed code is out of spec.</p>\n\n\n\n<p>Pycodestyle doesn’t provide automatic fixes for issues; that’s on you. But Pycodestyle&nbsp; is highly configurable, allowing you to suppress specific kinds of errors or parse only specific files in a source tree. And just about every IDE with Python support also supports Pycodestyle, so it’s the easy choice for universal compatibility, if not functionality.</p>\n\n\n\n<p>Many Python code linters can work as modules in Python, and Pycodestyle&nbsp;is no exception. You can use it to verify code programmatically, for instance as part of a test suite.</p>\n","protected":false},"excerpt":{"rendered":"<p>PEP 8&nbsp;is the document that spells out Python’s coding conventions — everything from whether to use tabs or spaces when indenting (use four spaces, problem solved) to how to name variables and objects.&nbsp;Pycodestyle&nbsp;is the Python module that checks Python code against the PEP 8 recommendations and delivers a report on where the analyzed code is [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[97],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3767"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3767"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3767/revisions"}],"predecessor-version":[{"id":3768,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3767/revisions/3768"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3767"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3767"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3767"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3766,"date":"2020-11-03T11:03:13","date_gmt":"2020-11-03T11:03:13","guid":{"rendered":"http://python3.foobrdigital.com/?p=3766"},"modified":"2020-11-03T11:03:13","modified_gmt":"2020-11-03T11:03:13","slug":"autopep8","status":"publish","type":"post","link":"https://python3.foobrdigital.com/autopep8/","title":{"rendered":"Autopep8"},"content":{"rendered":"\n<p><strong>Autopep8</strong> picks up where Pycodestyle leaves off. It uses Pycodestyle to determine what changes need to be made, then reformats code to conform to the suggestions provided. Existing files can be reformatted in place or written to new files. Autopep8 also fixes a host of other issues that can creep in, such as cleaning up code converted from Python 2 to Python 3 or files that have mixed line-ending markers. And Autoprep8 can be used programmatically to reformat code supplied as strings.</p>\n","protected":false},"excerpt":{"rendered":"<p>Autopep8 picks up where Pycodestyle leaves off. It uses Pycodestyle to determine what changes need to be made, then reformats code to conform to the suggestions provided. Existing files can be reformatted in place or written to new files. Autopep8 also fixes a host of other issues that can creep in, such as cleaning up code converted [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[97],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3766"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3766"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3766/revisions"}],"predecessor-version":[{"id":3769,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3766/revisions/3769"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3766"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3766"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3766"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3765,"date":"2020-11-03T11:03:27","date_gmt":"2020-11-03T11:03:27","guid":{"rendered":"http://python3.foobrdigital.com/?p=3765"},"modified":"2020-11-03T11:03:27","modified_gmt":"2020-11-03T11:03:27","slug":"flake8","status":"publish","type":"post","link":"https://python3.foobrdigital.com/flake8/","title":{"rendered":"Flake8"},"content":{"rendered":"\n<p><strong>Flake8</strong> wraps up several Python linting and code-style tools in a single package. Along with PyFlakes, which uses syntax checking to detect basic errors, and Pycodestyle, which we discussed above, Flake8 provides an additional tool to check the “cyclomatic complexity” of a project — that is, the number of independent code paths found in the program. ( Cyclomatic complexity is a potentially useful metric if you want to keep a basic module from becoming too un-basic, for example.) At the end of each analysis, Flake8 delivers a percentile metric for the overall quality of the analyzed code, a handy way to get quick idea of which parts of a codebase are most problematic.</p>\n","protected":false},"excerpt":{"rendered":"<p>Flake8 wraps up several Python linting and code-style tools in a single package. Along with PyFlakes, which uses syntax checking to detect basic errors, and Pycodestyle, which we discussed above, Flake8 provides an additional tool to check the “cyclomatic complexity” of a project — that is, the number of independent code paths found in the program. ( Cyclomatic [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[97],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3765"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3765"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3765/revisions"}],"predecessor-version":[{"id":3770,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3765/revisions/3770"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3765"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3765"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3765"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3764,"date":"2020-11-03T11:03:45","date_gmt":"2020-11-03T11:03:45","guid":{"rendered":"http://python3.foobrdigital.com/?p=3764"},"modified":"2020-11-03T11:03:45","modified_gmt":"2020-11-03T11:03:45","slug":"pylint","status":"publish","type":"post","link":"https://python3.foobrdigital.com/pylint/","title":{"rendered":"Pylint"},"content":{"rendered":"\n<p><strong>Pylint</strong>&nbsp;is probably the most broadly used and supported Python linter out there. Like the others, it looks for errors and deviations from coding standards in your Python code, and offers changes for how to fix those mistakes.</p>\n\n\n\n<p>Pylint is also arguably the most&nbsp;<em>completist</em>&nbsp;of the code checkers, in the sense that it can warn you about a great many issues with your code, some of which might not even be relevant in your particular context. The results can be verbose, but can also be tailored to suit the quirks of a particular project.</p>\n\n\n\n<p>Pylint looks for five progressively more problematic classes of issues. “Conventions” are violations of PEP 8 or other rules of consistency in Python. “Refactors” indicate code smells, common mistakes, or code that could be reworked to be more efficient or less confusing, such as cyclic imports or files with too many similar lines that could be condensed into a common function. “Warnings” are Python-specific issues, like unreachable code (everything after a&nbsp;<code>return</code>&nbsp;in a function) or classes missing an&nbsp;<code>__init__</code>&nbsp;method. “Errors” are actual code bugs, like undefined variables, and “Fatal” problems are those that prevent Pylint from even running.</p>\n","protected":false},"excerpt":{"rendered":"<p>Pylint&nbsp;is probably the most broadly used and supported Python linter out there. Like the others, it looks for errors and deviations from coding standards in your Python code, and offers changes for how to fix those mistakes. Pylint is also arguably the most&nbsp;completist&nbsp;of the code checkers, in the sense that it can warn you about [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[97],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3764"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3764"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3764/revisions"}],"predecessor-version":[{"id":3771,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3764/revisions/3771"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3764"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3764"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3764"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3763,"date":"2020-11-03T11:04:02","date_gmt":"2020-11-03T11:04:02","guid":{"rendered":"http://python3.foobrdigital.com/?p=3763"},"modified":"2020-11-03T11:04:02","modified_gmt":"2020-11-03T11:04:02","slug":"black","status":"publish","type":"post","link":"https://python3.foobrdigital.com/black/","title":{"rendered":"Black"},"content":{"rendered":"\n<p><strong>Black</strong>&nbsp;isn’t a linter or code analysis tool, but a tool for enforcing style as a way to ensure better code quality. For that reason it sits comfortably alongside the other tools described here, since it’s a way to pre-emptively avoid many basic style errors.</p>\n\n\n\n<p>Black is described as “the uncompromising code formatter” — uncompromising because it has no settable options except for line length. Black reformats Python code into a singular, consistent, and readable style, drawing on internal rules for handling tricky problems like multiline expressions, so even those get reformatted consistently.</p>\n\n\n\n<p>One touted advantage to using Black is&nbsp;that it solves all disputes over formatting, so eliminates “bikeshedding” and makes linter output less noisy, too. You don’t have to argue about how to format code for a project, or even do much of it manually. You just use Black and be done with it; you can even configure many IDEs to automatically format code with Black. Another claimed advantage is that it makes&nbsp;<code>git</code>&nbsp;commits cleaner, since it reduces the number of changes that get made to any given file.</p>\n","protected":false},"excerpt":{"rendered":"<p>Black&nbsp;isn’t a linter or code analysis tool, but a tool for enforcing style as a way to ensure better code quality. For that reason it sits comfortably alongside the other tools described here, since it’s a way to pre-emptively avoid many basic style errors. Black is described as “the uncompromising code formatter” — uncompromising because [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[97],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3763"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3763"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3763/revisions"}],"predecessor-version":[{"id":3772,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3763/revisions/3772"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3763"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3763"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3763"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]