[
  {
    "id": 302,
    "date": "2020-10-20T10:40:36",
    "date_gmt": "2020-10-20T10:40:36",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=302"
    },
    "modified": "2020-10-20T10:40:36",
    "modified_gmt": "2020-10-20T10:40:36",
    "slug": "installation-of-r",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/installation-of-r/",
    "title": {
      "rendered": "Installation of R"
    },
    "content": {
      "rendered": "\n<p><strong>R programming</strong>&nbsp;is a very popular language and to work on that we have to install two things, i.e., R and RStudio. R and RStudio works together to create a project on R.</p>\n\n\n\n<p>Installing R to the local computer is very easy. First, we must know which operating system we are using so that we can download it accordingly.</p>\n\n\n\n<p>The official site https://cloud.r-project.org provides binary files for major operating systems including Windows, Linux, and Mac OS. In some Linux distributions, R is installed by default, which we can verify from the console by entering R.</p>\n\n\n\n<p>To install R, either we can get it from the site https://cloud.r-project.org or can use commands from the terminal.</p>\n\n\n\n<h3>Install R in Windows</h3>\n\n\n\n<p>There are following steps used to install the R in Windows:</p>\n\n\n\n<p><strong>Step 1:</strong></p>\n\n\n\n<p>First, we have to download the R setup from https://cloud.r-project.org/bin/windows/base/.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/installation-of-r.png\" alt=\"Installation of R\"/></figure>\n\n\n\n<p><strong>Step 2:</strong></p>\n\n\n\n<p>When we click on&nbsp;<strong>Download R 3.6.1 for windows</strong>, our downloading will be started of R setup. Once the downloading is finished, we have to run the setup of R in the following way:</p>\n\n\n\n<p>1) Select the path where we want to download the R and proceed to Next.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/installation-of-r2.png\" alt=\"Installation of R\"/></figure>\n\n\n\n<p>2) Select all components which we want to install, and then we will proceed to&nbsp;<strong>Next</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/installation-of-r3.png\" alt=\"Installation of R\"/></figure>\n\n\n\n<p>3) In the next step, we have to select either customized startup or accept the default, and then we proceed to&nbsp;<strong>Next</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/installation-of-r4.png\" alt=\"Installation of R\"/></figure>\n\n\n\n<p>4) When we proceed to next, our installation of R in our system will get started:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/installation-of-r5.png\" alt=\"Installation of R\"/></figure>\n\n\n\n<p>5) In the last, we will click on finish to successfully install R in our system.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/installation-of-r6.png\" alt=\"Installation of R\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>R programming&nbsp;is a very popular language and to work on that we have to install two things, i.e., R and RStudio. R and RStudio works together to create a project on R. Installing R to the local computer is very easy. First, we must know which operating system we are using so that we can [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/302"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=302"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/302/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 303,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/302/revisions/303"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=302"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=302"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=302"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 304,
    "date": "2020-10-20T10:41:42",
    "date_gmt": "2020-10-20T10:41:42",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=304"
    },
    "modified": "2020-10-20T10:41:42",
    "modified_gmt": "2020-10-20T10:41:42",
    "slug": "rstudio-ide",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/rstudio-ide/",
    "title": {
      "rendered": "RStudio IDE"
    },
    "content": {
      "rendered": "\n<p>RStudio is an integrated development environment which allows us to interact with R more readily. RStudio is similar to the standard RGui, but it is considered more user-friendly. This IDE has various drop-down menus, Windows with multiple tabs, and so many customization processes. The first time when we open RStudio, we will see three Windows. The fourth Window will be hidden by default. We can open this hidden Window by clicking the&nbsp;<strong>File</strong>&nbsp;drop-down menu, then&nbsp;<strong>New File</strong>&nbsp;and then&nbsp;<strong>R Script</strong>.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>RStudio Windows/Tabs</th><th>Location</th><th>Description</th></tr><tr><td>Console Window</td><td>Lower-left</td><td>The location where commands are entered and output is printed.</td></tr><tr><td>Source Tabs</td><td>Upper-left</td><td>Built-in test editor</td></tr><tr><td>Environment Tab</td><td>Upper-left</td><td>An interactive list of loaded R objects.</td></tr><tr><td>History Tab</td><td>Upper-left</td><td>List of keystrokes entered into the console.</td></tr><tr><td>Files Tab</td><td>Lower-right</td><td>File explorer to navigate C drive folders.</td></tr><tr><td>Plots Tab</td><td>Lower-right</td><td>Output location for plots.</td></tr><tr><td>Packages Tab</td><td>Lower-right</td><td>List of installed packages.</td></tr><tr><td>Help Tab</td><td>Lower-right</td><td>Output location for help commands and help search Window.</td></tr><tr><td>Viewer Tab</td><td>Lower-right</td><td>Advanced tab for local web content.</td></tr></tbody></table></figure>\n\n\n\n<h2>Installation of RStudio</h2>\n\n\n\n<p><strong>RStudio Desktop</strong>&nbsp;is available for both Windows and Linux. The open-source RStudio Desktop installation is very simple to install on both operating systems. The licensed version of RStudio has some more features than open-source. Before installing RStudio, let&#8217;s see what are the additional features in the license version of RStudio.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Factor</th><th>Open-Source</th><th>Commercial License</th></tr><tr><td><strong>Overview</strong></td><td>1) Access RStudio locally</td><td>All of the features of open-source are include with<br>1) There is a commercial license for organizations which are not able to use AGPL software.<br>2) It provides access to priority support.</td></tr><tr><td>2) Code completion, syntax highlighting, and smart indentation</td></tr><tr><td>3) Can execute R code directly from the source editor</td></tr><tr><td>4) Quickly jump to function definitions.</td></tr><tr><td>5) Easily manage multiple working directories using projects.</td></tr><tr><td>6) Integrated R help and documentation.</td></tr><tr><td>7) Provide interactive debugger to diagnose and fix errors quickly.</td></tr><tr><td>8) Extensive package deployment tools.</td></tr><tr><td><strong>Support</strong></td><td>It supports for community forums only.</td><td>1) It supports priority email.<br>2) It supports for an 8-hour response during business hour.</td></tr><tr><td><strong>License</strong></td><td>AGPL v3</td><td>RStudio License Agreement</td></tr><tr><td><strong>Pricing</strong></td><td>Free</td><td>$995/year</td></tr></tbody></table></figure>\n\n\n\n<h3>Installation on Windows/Linux</h3>\n\n\n\n<p>On Windows and Linux, it is quite simple to install RStudio. The process of installing RStudio in both the OS is the same. There are the following steps to install RStudio in our Windows/Linux:</p>\n\n\n\n<p><strong>Step 1:</strong></p>\n\n\n\n<p>In the first step, we visit the RStudio official site and click on&nbsp;<strong>Download RStudio</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/rstudio-installation.png\" alt=\"Installation of RStudio\"/></figure>\n\n\n\n<p><strong>Step 2:</strong></p>\n\n\n\n<p>In the next step, we will select the RStudio desktop for open-source license and click on download.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/rstudio-installation2.png\" alt=\"Installation of RStudio\"/></figure>\n\n\n\n<p><strong>Step 3:</strong></p>\n\n\n\n<p>In the next step, we will select the appropriate installer. When we select the installer, our downloading of RStudion setup will start.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/rstudio-installation3.png\" alt=\"Installation of RStudio\"/></figure>\n\n\n\n<p><strong>Step 4:</strong></p>\n\n\n\n<p>In the next step, we will run our setup in the following way:</p>\n\n\n\n<p>1) Click on Next.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/rstudio-installation4.png\" alt=\"Installation of RStudio\"/></figure>\n\n\n\n<p>2) Click on Install.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/rstudio-installation5.png\" alt=\"Installation of RStudio\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/rstudio-installation6.png\" alt=\"Installation of RStudio\"/></figure>\n\n\n\n<p>3) Click on finish.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/rstudio-installation7.png\" alt=\"Installation of RStudio\"/></figure>\n\n\n\n<p>4) RStudio is ready to work.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/rstudio-installation8.png\" alt=\"Installation of RStudio\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>RStudio is an integrated development environment which allows us to interact with R more readily. RStudio is similar to the standard RGui, but it is considered more user-friendly. This IDE has various drop-down menus, Windows with multiple tabs, and so many customization processes. The first time when we open RStudio, we will see three Windows. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/304"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=304"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/304/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 305,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/304/revisions/305"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=304"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=304"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=304"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 306,
    "date": "2020-10-20T10:42:46",
    "date_gmt": "2020-10-20T10:42:46",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=306"
    },
    "modified": "2020-10-20T10:42:46",
    "modified_gmt": "2020-10-20T10:42:46",
    "slug": "r-advantages-and-disadvantages",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-advantages-and-disadvantages/",
    "title": {
      "rendered": "R Advantages and Disadvantages"
    },
    "content": {
      "rendered": "\n<p>R is the most popular programming language for statistical modeling and analysis. Like other programming languages, R also has some advantages and disadvantages. It is a continuously evolving language which means that many cons will slowly fade away with future updates to R.</p>\n\n\n\n<p>There are the following pros and cons of R</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-advantages-and-disadvantages.png\" alt=\"R Advantages and Disadvantages\"/></figure>\n\n\n\n<h2>Pros</h2>\n\n\n\n<h3>1) Open Source</h3>\n\n\n\n<p>An open-source language is a language on which we can work without any need for a license or a fee. R is an open-source language. We can contribute to the development of R by optimizing our packages, developing new ones, and resolving issues.</p>\n\n\n\n<h3>2) Platform Independent</h3>\n\n\n\n<p>R is a platform-independent language or cross-platform programming language which means its code can run on all operating systems. R enables programmers to develop software for several competing platforms by writing a program only once. R can run quite easily on Windows, Linux, and Mac.</p>\n\n\n\n<h3>3) Machine Learning Operations</h3>\n\n\n\n<p>R allows us to do various machine learning operations such as classification and regression. For this purpose, R provides various packages and features for developing the artificial neural network. R is used by the best data scientists in the world.</p>\n\n\n\n<h3>4) Exemplary support for data wrangling</h3>\n\n\n\n<p>R allows us to perform data wrangling. R provides packages such as dplyr, readr which are capable of transforming messy data into a structured form.</p>\n\n\n\n<h3>5) Quality plotting and graphing</h3>\n\n\n\n<p>R simplifies quality plotting and graphing. R libraries such as ggplot2 and plotly advocates for visually appealing and aesthetic graphs which set R apart from other programming languages.</p>\n\n\n\n<h3>6) The array of packages</h3>\n\n\n\n<p>R has a rich set of packages. R has over 10,000 packages in the CRAN repository which are constantly growing. R provides packages for data science and machine learning operations.</p>\n\n\n\n<h3>7) Statistics</h3>\n\n\n\n<p>R is mainly known as the language of statistics. It is the main reason why R is predominant than other programming languages for the development of statistical tools.</p>\n\n\n\n<h3>8) Continuously Growing</h3>\n\n\n\n<p>R is a constantly evolving programming language. Constantly evolving means when something evolves, it changes or develops over time, like our taste in music and clothes, which evolve as we get older. R is a state of the art which provides updates whenever any new feature is added.</p>\n\n\n\n<h2>Cons</h2>\n\n\n\n<h3>1) Data Handling</h3>\n\n\n\n<p>In R, objects are stored in physical memory. It is in contrast with other programming languages like Python. R utilizes more memory as compared to Python. It requires the entire data in one single place which is in the memory. It is not an ideal option when we deal with Big Data.</p>\n\n\n\n<h3>2) Basic Security</h3>\n\n\n\n<p>R lacks basic security. It is an essential part of most programming languages such as Python. Because of this, there are many restrictions with R as it cannot be embedded in a web-application.</p>\n\n\n\n<h3>3) Complicated Language</h3>\n\n\n\n<p>R is a very complicated language, and it has a steep learning curve. The people who don&#8217;t have prior knowledge or programming experience may find it difficult to learn R.</p>\n\n\n\n<h3>4) Weak Origin</h3>\n\n\n\n<p>The main disadvantage of R is, it does not have support for dynamic or 3D graphics. The reason behind this is its origin. It shares its origin with a much older programming language &#8220;S.&#8221;</p>\n\n\n\n<h3>5) Lesser Speed</h3>\n\n\n\n<p>R programming language is much slower than other programming languages such as MATLAB and Python. In comparison to other programming language, R packages are much slower.</p>\n\n\n\n<p>In R, algorithms are spread across different packages. The programmers who have no prior knowledge of packages may find it difficult to implement algorithms.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>R is the most popular programming language for statistical modeling and analysis. Like other programming languages, R also has some advantages and disadvantages. It is a continuously evolving language which means that many cons will slowly fade away with future updates to R. There are the following pros and cons of R Pros 1) Open [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/306"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=306"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/306/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 307,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/306/revisions/307"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=306"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=306"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=306"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 308,
    "date": "2020-10-20T10:43:31",
    "date_gmt": "2020-10-20T10:43:31",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=308"
    },
    "modified": "2020-10-20T10:43:31",
    "modified_gmt": "2020-10-20T10:43:31",
    "slug": "r-integration-with-hadoop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-integration-with-hadoop/",
    "title": {
      "rendered": "R integration with Hadoop"
    },
    "content": {
      "rendered": "\n<h2>What is Hadoop?</h2>\n\n\n\n<p><strong>Hadoop</strong>&nbsp;is an open-source framework which was founded by the&nbsp;<strong>ASF &#8211; Apache Software Foundation</strong>. It is used to store process and analyze data that are huge in volume. Hadoop is written in Java, and it is not OLAP (Online Analytical Processing). It is used for batch/offline processing. It is being used by Facebook, Google, Twitter, Yahoo, LinkedIn, and many more. Moreover, it can be scaled up just by adding nodes in the cluster.</p>\n\n\n\n<h2>Why integrate R with Hadoop?</h2>\n\n\n\n<p>R is an open-source programming language. It is best suited for statistical and graphical analysis. Also, if we need strong data analytics and visualization features, we have to combine R with Hadoop.</p>\n\n\n\n<p>The purpose behind R and Hadoop integration:</p>\n\n\n\n<ol><li>To use Hadoop to execute R code.</li><li>To use R to access the data stored in Hadoop.</li></ol>\n\n\n\n<h2>R Hadoop Integration Method</h2>\n\n\n\n<p>Hadoop and R complement each other very well in terms of big data visualization and analytics. There are four ways of using Hadoop and R together, which are as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-integration-with-hadoop.png\" alt=\"R integration with Hadoop\"/></figure>\n\n\n\n<h3>R Hadoop</h3>\n\n\n\n<p>The R Hadoop methods are the collection of packages. It contains three packages i.e., rmr, rhbase, and rhdfs.</p>\n\n\n\n<p><strong>The rmr package</strong></p>\n\n\n\n<p>For the Hadoop framework, the rmr package provides MapReduce functionality by executing the Mapping and Reducing codes in R.</p>\n\n\n\n<p><strong>The rhbase package</strong></p>\n\n\n\n<p>This package provides R database management capability with integration with HBASE.</p>\n\n\n\n<p><strong>The rhdfs package</strong></p>\n\n\n\n<p>This package provides file management capabilities by integrating with HDFS.</p>\n\n\n\n<h3>Hadoop Streaming</h3>\n\n\n\n<p>Hadoop Streaming is a utility that allows users to create and run jobs with any executable as the mapper and/or the reducer. Using the streaming system, we can develop working Hadoop jobs with just enough knowledge of Java to write two shell scripts which work in tandem.</p>\n\n\n\n<p>The combination of R and Hadoop appears as a must-have toolkit for people working with large data sets and statistics. However, some Hadoop enthusiasts have raised a red flag when dealing with very large Big Data excerpts. They claim that the benefit of R is not its syntax, but the entire library of primitives for visualization and data. These libraries are fundamentally non-distributed, making data retrieval a time-consuming affair. This is an inherent flaw with R, and if you choose to ignore it, both R and Hadoop can work together.</p>\n\n\n\n<h3>RHIPE</h3>\n\n\n\n<p>RHIPE stands for&nbsp;<strong>R and Hadoop Integrated Programming Environment</strong>. Divide and Recombine developed RHIPE for carrying out efficient analysis of a large amount of data.</p>\n\n\n\n<p>RHIPE involves working with R and Hadoop integrated programming environment. We can use Python, Perl, or Java to read data sets in RHIPE. There are various functions in RHIPE which lets HDFS interact with HDFS. Hence, this way we can read, save the complete data which is created using RHIPE MapReduce.</p>\n\n\n\n<h3>ORCH</h3>\n\n\n\n<p>ORCH is known as Oracle R Connector. This method is used to work with Big Data in Oracle appliance particularly. It is also used on a non- Oracle framework like Hadoop.</p>\n\n\n\n<p>This method helps in accessing the Hadoop cluster with the help of R and also helps to write the mapping and reducing functions. It allows us to manipulate the data residing in the Hadoop Distributed File System.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Hadoop? Hadoop&nbsp;is an open-source framework which was founded by the&nbsp;ASF &#8211; Apache Software Foundation. It is used to store process and analyze data that are huge in volume. Hadoop is written in Java, and it is not OLAP (Online Analytical Processing). It is used for batch/offline processing. It is being used by Facebook, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/308"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=308"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/308/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 309,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/308/revisions/309"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=308"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=308"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=308"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 310,
    "date": "2020-10-20T10:45:49",
    "date_gmt": "2020-10-20T10:45:49",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=310"
    },
    "modified": "2020-10-20T10:45:49",
    "modified_gmt": "2020-10-20T10:45:49",
    "slug": "r-packages",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-packages/",
    "title": {
      "rendered": "R Packages"
    },
    "content": {
      "rendered": "\n<p>R packages are the collection of R functions, sample data, and compile codes. In the R environment, these packages are stored under a directory called &#8220;<strong>library</strong>.&#8221; During installation, R installs a set of packages. We can add packages later when they are needed for some specific purpose. Only the default packages will be available when we start the R console. Other packages which are already installed will be loaded explicitly to be used by the R program.</p>\n\n\n\n<p>There is the following list of commands to be used to check, verify, and use the R packages.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-packages.png\" alt=\"R Packages\"/></figure>\n\n\n\n<h3>Check Available R Packages</h3>\n\n\n\n<p>To check the available R Packages, we have to find the library location in which R packages are contained. R provides libPaths() function to find the library locations.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>libPaths() </code></pre>\n\n\n\n<p>When the above code executes, it produces the following project, which may vary depending on the local settings of our PCs &amp; Laptops.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"C:/Users/ajeet/OneDrive/Documents/R/win-library/3.6\"\r\n&#91;2] \"C:/Program Files/R/R-3.6.1/library\"\n</code></pre>\n\n\n\n<h3>Getting the list of all the packages installed</h3>\n\n\n\n<p>R provides library() function, which allows us to get the list of all the installed packages.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library()  </code></pre>\n\n\n\n<p>When we execute the above function, it produces the following result, which may vary depending on the local settings of our PCs or laptops.</p>\n\n\n\n<p>Packages in library &#8216;C:/Program Files/R/R-3.6.1/library&#8217;:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-packages2.png\" alt=\"R Packages\"/></figure>\n\n\n\n<p>Like library() function, R provides search() function to get all packages currently loaded in the R environment.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>search()  </code></pre>\n\n\n\n<p>When we execute the above code, it will produce the following result, which may vary depending on the local settings of our PCs and laptops:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\"\n&#91;4] \"package:grDevices\" \"package:utils\"     \"package:datasets\"\n&#91;7] \"package:methods\"   \"Autoloads\"         \"package:base\"\n</code></pre>\n\n\n\n<h3>Install a New Package</h3>\n\n\n\n<p>In R, there are two techniques to add new R packages. The first technique is installing package directly from the CRAN directory, and the second one is to install it manually after downloading the package to our local system.</p>\n\n\n\n<p><strong>Install directly from CRAN</strong></p>\n\n\n\n<p>The following command is used to get the packages directly from CRAN webpage and install the package in the R environment. We may be prompted to choose the nearest mirror. Choose the one appropriate to our location.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"Package Name\") </code></pre>\n\n\n\n<p>The syntax of installing XML package is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"XML\")  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-packages3.png\" alt=\"R Packages\"/></figure>\n\n\n\n<p><strong>Install package manually</strong></p>\n\n\n\n<p>To install a package manually, we first have to download it from https://cran.r-project.org/web/packages/available_packages_by_name.html. The required package will be saved as a .zip file in a suitable location in the local system.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-packages4.png\" alt=\"R Packages\"/></figure>\n\n\n\n<p>Once the downloading has finished, we will use the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(file_name_with_path, repos = NULL, type = \"source\") </code></pre>\n\n\n\n<p>Install the package named &#8220;XML&#8221;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"C:\\Users\\ajeet\\OneDrive\\Desktop\\graphics\\xml2_1.2.2.zip\", repos = NULL, type = \"source\")  </code></pre>\n\n\n\n<h3>Load Package to Library</h3>\n\n\n\n<p>We cannot use the package in our code until it will not be loaded into the current R environment. We also need to load a package which is already installed previously but not available in the current environment.</p>\n\n\n\n<p>There is the following command to load a package:</p>\n\n\n\n<ol><li>library(&#8220;package&nbsp;Name&#8221;,&nbsp;lib.loc&nbsp;=&nbsp;&#8220;path&nbsp;to&nbsp;library&#8221;)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Command to load the XML package</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"C:\\Users\\ajeet\\OneDrive\\Desktop\\graphics\\xml2_1.2.2.zip\", repos = NULL, type = \"source\")  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>R packages are the collection of R functions, sample data, and compile codes. In the R environment, these packages are stored under a directory called &#8220;library.&#8221; During installation, R installs a set of packages. We can add packages later when they are needed for some specific purpose. Only the default packages will be available when [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/310"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=310"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/310/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 311,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/310/revisions/311"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=310"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=310"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=310"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 312,
    "date": "2020-10-20T10:46:11",
    "date_gmt": "2020-10-20T10:46:11",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=312"
    },
    "modified": "2020-10-20T10:46:11",
    "modified_gmt": "2020-10-20T10:46:11",
    "slug": "list-of-r-packages",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/list-of-r-packages/",
    "title": {
      "rendered": "List of R packages"
    },
    "content": {
      "rendered": "\n<p>R is the language of data science which includes a vast repository of packages. These packages appeal to different regions which use R for their data purposes. CRAN has 10,000 packages, making it an ocean of superlative statistical work. There are lots of packages in R, but we will discuss the important one.</p>\n\n\n\n<p>There are some mostly used and popular packages which are as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/list-of-r-packages.png\" alt=\"List of R packages\"/></figure>\n\n\n\n<h3>1) tidyr</h3>\n\n\n\n<p>The word tidyr comes from the word tidy, which means clear. So the&nbsp;<strong>tidyr</strong>&nbsp;package is used to make the data&#8217; tidy&#8217;. This package works well with dplyr. This package is an evolution of the reshape2 package.</p>\n\n\n\n<h3>2) ggplot2</h3>\n\n\n\n<p>R allows us to create graphics declaratively. R provides the&nbsp;<strong>ggplot</strong>&nbsp;package for this purpose. This package is famous for its elegant and quality graphs which sets it apart from other visualization packages.</p>\n\n\n\n<h3>3) ggraph</h3>\n\n\n\n<p>R provides an extension of ggplot known as&nbsp;<strong>ggraph</strong>. The limitation of&nbsp;<strong>ggplot</strong>&nbsp;is the dependency on tabular data is taken away in ggraph.</p>\n\n\n\n<h3>4) dplyr</h3>\n\n\n\n<p>R allows us to perform data wrangling and data analysis. R provides the&nbsp;<strong>dplyr</strong>&nbsp;library for this purpose. This library facilitates several functions for the data frame in R.</p>\n\n\n\n<h3>5) tidyquant</h3>\n\n\n\n<p>The tidyquant is a financial package which is used for carrying out quantitative financial analysis. This package adds to the&nbsp;<strong>tidyverse</strong>&nbsp;universe as a financial package which is used for importing, analyzing and visualizing the data.</p>\n\n\n\n<h3>6) dygraphs</h3>\n\n\n\n<p>The dygraphs package provides an interface to the main JavaScript library which we can use for charting. This package is essentially used for plotting time-series data in R.</p>\n\n\n\n<h3>7) leaflet</h3>\n\n\n\n<p>For creating interactive visualization, R provides the&nbsp;<strong>leaflet</strong>&nbsp;package. This package is an open-source JavaScript library. The world&#8217;s popular websites like the New York Times, Github and Flicker, etc. are using leaflet. The leaflet package makes it easier to interact with these sites.</p>\n\n\n\n<h3>8) ggmap</h3>\n\n\n\n<p>For delineating spatial visualization, the&nbsp;<strong>ggmap</strong>&nbsp;package is used. It is a mapping package which consists of various tools for geolocating and routing.</p>\n\n\n\n<h3>9) glue</h3>\n\n\n\n<p>R provides the&nbsp;<strong>glue</strong>&nbsp;package to perform the operations of data wrangling. This package is used for evaluating R expressions which are present within the string.</p>\n\n\n\n<h3>10) shiny</h3>\n\n\n\n<p>R allows us to develop interactive and aesthetically pleasing web apps by providing a&nbsp;<strong>shiny</strong>&nbsp;package. This package provides various extensions with HTML widgets, CSS, and JavaScript.</p>\n\n\n\n<h3>11) plotly</h3>\n\n\n\n<p>The plotly package provides online interactive and quality graphs. This package extends upon the JavaScript library&nbsp;<strong>-plotly.js</strong>.</p>\n\n\n\n<h3>12) tidytext</h3>\n\n\n\n<p>The&nbsp;<strong>tidytext</strong>&nbsp;package provides various functions of text mining for word processing and carrying out analysis through ggplot, dplyr, and other miscellaneous tools.</p>\n\n\n\n<h3>13) stringr</h3>\n\n\n\n<p>The stringr package provides simplicity and consistency to use wrappers for the &#8216;<strong>stringi</strong>&#8216; package. The stringi package facilitates common string operations.</p>\n\n\n\n<h3>14) reshape2</h3>\n\n\n\n<p>This package facilitates flexible reorganization and aggregation of data using melt () and decast () functions.</p>\n\n\n\n<h3>15) dichromat</h3>\n\n\n\n<p>The R dichromat package is used to remove Red-Green or Blue-Green contrasts from the colors.</p>\n\n\n\n<h3>16) digest</h3>\n\n\n\n<p>The digest package is used for the creation of cryptographic hash objects of R functions.</p>\n\n\n\n<h3>17) MASS</h3>\n\n\n\n<p>The&nbsp;<strong>MASS</strong>&nbsp;package provides a large number of statistical functions. It provides datasets that are in conjunction with the book &#8220;Modern Applied Statistics with S.&#8221;</p>\n\n\n\n<h3>18) caret</h3>\n\n\n\n<p>R allows us to perform classification and regression tasks by providing the caret package.&nbsp;<strong>CaretEnsemble</strong>&nbsp;is a feature of caret which is used for the combination of different models.</p>\n\n\n\n<h3>19) e1071</h3>\n\n\n\n<p>The&nbsp;<strong>e1071</strong>&nbsp;library provides useful functions which are essential for data analysis like Naive Bayes, Fourier Transforms, SVMs, Clustering, and other miscellaneous functions.</p>\n\n\n\n<h3>20) sentimentr</h3>\n\n\n\n<p>The sentiment package provides functions for carrying out sentiment analysis. It is used to calculate text polarity at the sentence level and to perform aggregation by rows or grouping variables.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>R is the language of data science which includes a vast repository of packages. These packages appeal to different regions which use R for their data purposes. CRAN has 10,000 packages, making it an ocean of superlative statistical work. There are lots of packages in R, but we will discuss the important one. There are [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/312"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=312"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/312/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 313,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/312/revisions/313"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=312"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=312"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=312"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 314,
    "date": "2020-10-20T10:47:39",
    "date_gmt": "2020-10-20T10:47:39",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=314"
    },
    "modified": "2020-10-20T10:47:39",
    "modified_gmt": "2020-10-20T10:47:39",
    "slug": "syntax-of-r-programming",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/syntax-of-r-programming/",
    "title": {
      "rendered": "Syntax of R Programming"
    },
    "content": {
      "rendered": "\n<p>R Programming is a very popular programming language which is broadly used in data analysis. The way in which we define its code is quite simple. The &#8220;Hello World!&#8221; is the basic program for all the languages, and now we will understand the syntax of R programming with &#8220;Hello world&#8221; program. We can write our code either in command prompt, or we can use an R script file.</p>\n\n\n\n<h2>R Command Prompt</h2>\n\n\n\n<p>It is required that we have already installed the R environment set up in our system to work on the R command prompt. After the installation of R environment setup, we can easily start R command prompt by typing R in our Windows command prompt. When we press enter after typing R, it will launch interpreter, and we will get a prompt on which we can code our program.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/syntax-of-r-programming.png\" alt=\"Syntax of R Programming\"/></figure>\n\n\n\n<p><strong>&#8220;Hello, World!&#8221; Program</strong></p>\n\n\n\n<p>The code of &#8220;Hello World!&#8221; in R programming can be written as:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/syntax-of-r-programming2.jpg\" alt=\"Syntax of R Programming\"/></figure>\n\n\n\n<p>In the above code, the first statement defines a&nbsp;<strong>string variable</strong>&nbsp;string, where we assign a string &#8220;Hello World!&#8221;. The next statement print() is used to print the value which is stored in the variable string.</p>\n\n\n\n<h2>R Script File</h2>\n\n\n\n<p>The R script file is another way on which we can write our programs, and then we execute those scripts at our command prompt with the help of R interpreter known as&nbsp;<strong>Rscript</strong>. We make a text file and write the following code. We will save this file with .R extension as:</p>\n\n\n\n<p><strong>Demo.R</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>string &lt;-\"Hello World!\"  \r\nprint(string)  </code></pre>\n\n\n\n<p>To execute this file in Windows and other operating systems, the process will remain the same as mentioned below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/syntax-of-r-programming3.jpg\" alt=\"Syntax of R Programming\"/></figure>\n\n\n\n<p>When we press enter it will give us the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/syntax-of-r-programming4.jpg\" alt=\"Syntax of R Programming\"/></figure>\n\n\n\n<h2>Comments</h2>\n\n\n\n<p>In R programming, comments are the programmer readable explanation in the source code of an R program. The purpose of adding these comments is to make the source code easier to understand. These comments are generally ignored by compilers and interpreters.</p>\n\n\n\n<p>In R programming there is only single-line comment. R doesn&#8217;t support multi-line comment. But if we want to perform multi-line comments, then we can add our code in a false block.</p>\n\n\n\n<p><strong>Single-line comment</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#My First program in R programming  \r\nstring &lt;-\"Hello World!\"  \r\nprint(string)</code></pre>\n\n\n\n<p><strong>The trick for multi-line comment</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Trick for multi-line comment  \r\nif(FALSE) {  \r\n   \"R is an interpreted computer programming language which was created by  \r\n   Ross Ihaka and Robert Gentleman at the University of Auckland, New Zealand \"  \r\n}  \r\n#My First program in R programming  \r\nstring &lt;-\"Hello World!\"  \r\nprint(string)  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/syntax-of-r-programming5.jpg\" alt=\"Syntax of R Programming\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>R Programming is a very popular programming language which is broadly used in data analysis. The way in which we define its code is quite simple. The &#8220;Hello World!&#8221; is the basic program for all the languages, and now we will understand the syntax of R programming with &#8220;Hello world&#8221; program. We can write our [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/314"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=314"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/314/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 315,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/314/revisions/315"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=314"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=314"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=314"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 316,
    "date": "2020-10-20T10:48:23",
    "date_gmt": "2020-10-20T10:48:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=316"
    },
    "modified": "2020-10-20T10:48:23",
    "modified_gmt": "2020-10-20T10:48:23",
    "slug": "data-types-in-r-programming",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-types-in-r-programming/",
    "title": {
      "rendered": "Data Types in R Programming"
    },
    "content": {
      "rendered": "\n<p>In programming languages, we need to use various variables to store various information. Variables are the reserved memory location to store values. As we create a variable in our program, some space is reserved in memory.</p>\n\n\n\n<p>In R, there are several data types such as integer, string, etc. The operating system allocates memory based on the data type of the variable and decides what can be stored in the reserved memory.</p>\n\n\n\n<p>There are the following data types which are used in R programming:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-data-types.png\" alt=\"R Programming Data Types\"/></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Data type</th><th>Example</th><th>Description</th></tr><tr><td><strong>Logical</strong></td><td>True, False</td><td>It is a special data type for data with only two possible values which can be construed as true/false.</td></tr><tr><td><strong>Numeric</strong></td><td>12,32,112,5432</td><td>Decimal value is called numeric in R, and it is the default computational data type.</td></tr><tr><td><strong>Integer</strong></td><td>3L, 66L, 2346L</td><td>Here, L tells R to store the value as an integer,</td></tr><tr><td><strong>Complex</strong></td><td>Z=1+2i, t=7+3i</td><td>A complex value in R is defined as the pure imaginary value i.</td></tr><tr><td><strong>Character</strong></td><td>&#8216;a&#8217;, &#8216;&#8221;good'&#8221;, &#8220;TRUE&#8221;, &#8216;35.4&#8217;</td><td>In R programming, a character is used to represent string values. We convert objects into character values with the help ofas.character() function.</td></tr><tr><td><strong>Raw</strong></td><td></td><td>A raw data type is used to holds raw bytes.</td></tr></tbody></table></figure>\n\n\n\n<p>Let&#8217;s see an example for better understanding of data types:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Logical Data type  \r\nvariable_logical&lt;- TRUE  \r\ncat(variable_logical,\"\\n\")  \r\ncat(\"The data type of variable_logical is \",class(variable_logical),\"\\n\\n\")  \r\n  \r\n#Numeric Data type  \r\nvariable_numeric&lt;- 3532  \r\ncat(variable_numeric,\"\\n\")     \r\ncat(\"The data type of variable_numeric is \",class(variable_numeric),\"\\n\\n\")  \r\n  \r\n#Integer Data type  \r\nvariable_integer&lt;- 133L  \r\ncat(variable_integer,\"\\n\")   \r\ncat(\"The data type of variable_integer is \",class(variable_integer),\"\\n\\n\")  \r\n  \r\n#Complex Data type  \r\nvariable_complex&lt;- 3+2i  \r\ncat(variable_complex,\"\\n\")  \r\ncat(\"The data type of variable_complex is \",class(variable_complex),\"\\n\\n\")  \r\n  \r\n#Character Data type  \r\nvariable_char&lt;- \"Learning r programming\"  \r\ncat(variable_char,\"\\n\")  \r\ncat(\"The data type of variable_char is \",class(variable_char),\"\\n\\n\")  \r\n  \r\n#Raw Data type  \r\nvariable_raw&lt;- charToRaw(\"Learning r programming\")  \r\ncat(variable_raw,\"\\n\")  \r\ncat(\"The data type of variable_char is \",class(variable_raw),\"\\n\\n\")  </code></pre>\n\n\n\n<p>When we execute the following program, it will give us the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-data-types2.jpg\" alt=\"R Programming Data Types\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In programming languages, we need to use various variables to store various information. Variables are the reserved memory location to store values. As we create a variable in our program, some space is reserved in memory. In R, there are several data types such as integer, string, etc. The operating system allocates memory based on [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/316"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=316"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/316/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 317,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/316/revisions/317"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=316"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=316"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=316"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 318,
    "date": "2020-10-20T10:49:08",
    "date_gmt": "2020-10-20T10:49:08",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=318"
    },
    "modified": "2020-10-20T10:49:08",
    "modified_gmt": "2020-10-20T10:49:08",
    "slug": "data-structures-in-r-programming",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-structures-in-r-programming/",
    "title": {
      "rendered": "Data Structures in R Programming"
    },
    "content": {
      "rendered": "\n<p>Data structures are very important to understand. Data structure are the objects which we will manipulate in our day-to-day basis in R. Dealing with object conversions is the most common sources of despairs for beginners. We can say that everything in R is an object.</p>\n\n\n\n<p>R has many data structures, which include:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-data-structures.png\" alt=\"R Programming data structures\"/></figure>\n\n\n\n<ol><li>Atomic vector</li><li>List</li><li>Array</li><li>Matrices</li><li>Data Frame</li><li>Factors</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Vectors</h3>\n\n\n\n<p>A vector is the basic data structure in R, or we can say vectors are the most basic R data objects. There are six types of atomic vectors such as logical, integer, character, double, and raw.&nbsp;<strong>&#8220;A vector is a collection of elements which is most commonly of mode character, integer, logical or numeric&#8221;</strong>&nbsp;A vector can be one of the following two types:</p>\n\n\n\n<ol><li>Atomic vector</li><li>Lists</li></ol>\n\n\n\n<h3>List</h3>\n\n\n\n<p>In R,&nbsp;<strong>the list</strong>&nbsp;is the container. Unlike an atomic vector, the list is not restricted to be a single mode. A list contains a mixture of data types. The list is also known as generic vectors because the element of the list can be of any type of R object.&nbsp;<strong>&#8220;A list is a special type of vector in which each element can be a different type.&#8221;</strong></p>\n\n\n\n<p>We can create a list with the help of list() or as.list(). We can use vector() to create a required length empty list.</p>\n\n\n\n<h3>Arrays</h3>\n\n\n\n<p>There is another type of data objects which can store data in more than two dimensions known as arrays.&nbsp;<strong>&#8220;An array is a collection of a similar data type with contiguous memory allocation.&#8221;</strong>&nbsp;Suppose, if we create an array of dimension (2, 3, 4) then it creates four rectangular matrices of two rows and three columns.</p>\n\n\n\n<p>In R, an array is created with the help of&nbsp;<strong>array()</strong>&nbsp;function. This function takes a vector as an input and uses the value in the dim parameter to create an array.</p>\n\n\n\n<h3>Matrices</h3>\n\n\n\n<p>A matrix is an R object in which the elements are arranged in a two-dimensional rectangular layout. In the matrix, elements of the same atomic types are contained. For mathematical calculation, this can use a matrix containing the numeric element. A matrix is created with the help of the matrix() function in R.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<p>The basic syntax of creating a matrix is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>matrix(data, no_row, no_col, by_row, dim_name)  </code></pre>\n\n\n\n<h3>Data Frames</h3>\n\n\n\n<p>A&nbsp;<strong>data frame</strong>&nbsp;is a two-dimensional array-like structure, or we can say it is a table in which each column contains the value of one variable, and row contains the set of value from each column.</p>\n\n\n\n<p>There are the following characteristics of a data frame:</p>\n\n\n\n<ol><li>The column name will be non-empty.</li><li>The row names will be unique.</li><li>A data frame stored numeric, factor or character type data.</li><li>Each column will contain same number of data items.</li></ol>\n\n\n\n<h3>Factors</h3>\n\n\n\n<p><strong>Factors</strong>&nbsp;are also data objects that are used to categorize the data and store it as levels. Factors can store both strings and integers. Columns have a limited number of unique values so that factors are very useful in columns. It is very useful in data analysis for statistical modeling.</p>\n\n\n\n<p>Factors are created with the help of&nbsp;<strong>factor()</strong>&nbsp;function by taking a vector as an input parameter.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Data structures are very important to understand. Data structure are the objects which we will manipulate in our day-to-day basis in R. Dealing with object conversions is the most common sources of despairs for beginners. We can say that everything in R is an object. R has many data structures, which include: Atomic vector List [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/318"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=318"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/318/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 319,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/318/revisions/319"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=318"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=318"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=318"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 320,
    "date": "2020-10-20T10:49:52",
    "date_gmt": "2020-10-20T10:49:52",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=320"
    },
    "modified": "2020-10-20T10:49:52",
    "modified_gmt": "2020-10-20T10:49:52",
    "slug": "variables-in-r-programming",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/variables-in-r-programming/",
    "title": {
      "rendered": "Variables in R Programming"
    },
    "content": {
      "rendered": "\n<p>Variables are used to store the information to be manipulated and referenced in the R program. The R variable can store an atomic vector, a group of atomic vectors, or a combination of many R objects.</p>\n\n\n\n<p>Language like C++ is statically typed, but R is a dynamically typed, means it check the type of data type when the statement is run. A valid variable name contains letter, numbers, dot and underlines characters. A variable name should start with a letter or the dot not followed by a number.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Name of variable</th><th>Validity</th><th>Reason for valid and invalid</th></tr><tr><td><strong>_var_name</strong></td><td>Invalid</td><td>Variable name can&#8217;t start with an underscore(_).</td></tr><tr><td><strong>var_name, var.name</strong></td><td>Valid</td><td>Variable can start with a dot, but dot should not be followed by a number. In this case, the variable will be invalid.</td></tr><tr><td><strong>var_name%</strong></td><td>Invalid</td><td>In R, we can&#8217;t use any special character in the variable name except dot and underscore.</td></tr><tr><td><strong>2var_name</strong></td><td>Invalid</td><td>Variable name cant starts with a numeric digit.</td></tr><tr><td><strong>.2var_name</strong></td><td>Invalid</td><td>A variable name cannot start with a dot which is followed by a digit.</td></tr><tr><td><strong>var_name2</strong></td><td>Valid</td><td>The variable contains letter, number and underscore and starts with a letter.</td></tr></tbody></table></figure>\n\n\n\n<h2>Assignment of variable</h2>\n\n\n\n<p>In R programming, there are three operators which we can use to assign the values to the variable. We can use leftward, rightward, and equal_to operator for this purpose.</p>\n\n\n\n<p>There are two functions which are used to print the value of the variable i.e., print() and cat(). The cat() function combines multiples values into a continuous print output.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Assignment using equal operator.  \r\nvariable.1 = 124             \r\n  \r\n# Assignment using leftward operator.  \r\nvariable.2 &lt;- \"Learn R Programming\"     \r\n  \r\n# Assignment using rightward operator.     \r\n133L -> variable.3             \r\n  \r\nprint(variable.1)  \r\ncat (\"variable.1 is \", variable.1 ,\"\\n\")  \r\ncat (\"variable.2 is \", variable.2 ,\"\\n\")  \r\ncat (\"variable.3 is \", variable.3 ,\"\\n\")  </code></pre>\n\n\n\n<p>When we execute the above code in our R command prompt, it will give us the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-variables.jpg\" alt=\"R Programming Variables\"/></figure>\n\n\n\n<h2>Data types of variable</h2>\n\n\n\n<p>R programming is a dynamically typed language, which means that we can change the data type of the same variable again and again in our program. Because of its dynamic nature, a variable is not declared of any data type. It gets the data type from the R-object, which is to be assigned to the variable.</p>\n\n\n\n<p>We can check the data type of the variable with the help of the class() function. Let&#8217;s see an example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>variable_y&lt;- 124  \r\ncat(\"The data type of variable_y is \",class(variable_y),\"\\n\")  \r\n  \r\nvariable_y&lt;- \"Learn R Programming\"     \r\ncat(\"  Now the data type of variable_y is \",class(variable_y),\"\\n\")  \r\n  \r\nvariable_y&lt;- 133L   \r\ncat(\"   Next the data type of variable_y becomes \",class(variable_y),\"\\n\")  </code></pre>\n\n\n\n<p>When we execute the above code in our R command prompt, it will give us the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-variables2.jpg\" alt=\"R Programming Variables\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Variables are used to store the information to be manipulated and referenced in the R program. The R variable can store an atomic vector, a group of atomic vectors, or a combination of many R objects. Language like C++ is statically typed, but R is a dynamically typed, means it check the type of data [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/320"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=320"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/320/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 321,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/320/revisions/321"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=320"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=320"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=320"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 322,
    "date": "2020-10-20T10:52:53",
    "date_gmt": "2020-10-20T10:52:53",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=322"
    },
    "modified": "2020-10-20T10:52:53",
    "modified_gmt": "2020-10-20T10:52:53",
    "slug": "keywords-in-r-programming",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/keywords-in-r-programming/",
    "title": {
      "rendered": "Keywords in R Programming"
    },
    "content": {
      "rendered": "\n<p>In programming, a keyword is a word which is reserved by a program because it has a special meaning. A keyword can be a command or a parameter. Like in C, C++, Java, there is also a set of keywords in R. A keyword can&#8217;t be used as a variable name. Keywords are also called as &#8220;reserved names.&#8221;</p>\n\n\n\n<p>There are the following keywords as per&nbsp;<strong>?reserved</strong>&nbsp;or&nbsp;<strong>help(reserved)</strong>&nbsp;command:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>if</td><td>else</td><td>repeat</td></tr><tr><td>while</td><td>function</td><td>for</td></tr><tr><td>next</td><td>break</td><td>TRUE</td></tr><tr><td>FALSE</td><td>NULL</td><td>Inf</td></tr><tr><td>NaN</td><td>NA</td><td>NA_integer_</td></tr><tr><td>NA_real_</td><td>NA_complex_</td><td>NA_character_</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords.png\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>1) if</h3>\n\n\n\n<p>The if statement consists of a Boolean expression which is followed by one or more statements. In R, if statement is the simplest conditional statement which is used to decide whether a block of the statement will be executed or not.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-11  \r\nif(a&lt;15)  \r\n+ print(\"I am lesser than 15\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-if.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>2) else</h3>\n\n\n\n<p>The R else statement is associated with if statement. When the if statement&#8217;s condition is false only then else block will be executed. Let see an example to make it clear:</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-22  \r\nif(a&lt;20){  \r\n    cat(\"I am lesser than 20\")  \r\n}else{   \r\n    cat(\"I am larger than 20\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-else.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>3) repeat</h3>\n\n\n\n<p>The repeat keyword is used to iterate over a block of code multiple numbers of times. In R, repeat is a loop, and in this loop statement, there is no condition to exit from the loop. For exiting the loop, we will use the break statement.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;- 1  \r\nrepeat {  \r\n    cat(x)  \r\n    x = x+1  \r\nif (x == 6){  \r\n        break  \r\n    }  \r\n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-repeat.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>4) while</h3>\n\n\n\n<p>A while keyword is used as a loop. The while loop is executed until the given condition is true. This is also used to make an infinite loop.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<ol><li>   </li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>a &lt;- 20  \r\nwhile(a!=0){  \r\n      cat(a)  \r\n      a = a-2  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-while.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>5) function</h3>\n\n\n\n<p>A function is an object in R programming. The keyword function is used to create a user-define function in R. R has some pre-defined functions also, such as seq, mean, and sum.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>new.function&lt;- function(n) {  \r\n   for(i in 1:n) {  \r\n      a &lt;- i^2  \r\n      print(a)  \r\n   }  \r\n}  \r\nnew.function(6)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-function.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>6) for</h3>\n\n\n\n<p>The&nbsp;<strong>for</strong>&nbsp;is a keyword which is used for looping or iterating over a sequence (dictionary, string, list, set or tuple).</p>\n\n\n\n<p>We can execute a set of a statement once for each item in the iterator (list, set, tuple, etc.) with the help of for loop.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>v &lt;- LETTERS&#91;1:4]  \r\nfor ( i in v) {  \r\n   print(i)  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-for..jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>7) next</h3>\n\n\n\n<p>The next keyword skips the current iteration of a loop without terminating it. When R parser found next, it skips further evaluation and starts the new iteration of the loop.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>v &lt;- LETTERS&#91;1:6]  \r\nfor ( i in v) {  \r\nif (i == \"D\") {  \r\n        next  \r\n}  \r\n    print(i)  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-next.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>8) break</h3>\n\n\n\n<p>The&nbsp;<strong>break</strong>&nbsp;keyword is used to terminate the loop if the condition is true. The control of the program firstly passes to the outer statement then passes to the body of the break statement.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>n&lt;-1  \r\nwhile(n&lt;10){  \r\nif(n==3)  \r\n        break  \r\nn=n+1  \r\ncat(n,\"\\n\")  \r\n}  \r\ncat(\"End of the program\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-break.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>9) TRUE/FALSE</h3>\n\n\n\n<p>The TRUE and FALSE keywords are used to represent a Boolean true and Boolean false. If the given statement is true, then the interpreter returns true else the interpreter returns false.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-true_false.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>10) NULL</h3>\n\n\n\n<p>In R, NULL represents the null object. NULL is used to represent missing and undefined values. NULL is the logical representation of a statement which is neither TRUE nor FALSE.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>as.null(list(a = 1, b = \"c\"))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-programming-keywords-null.jpg\" alt=\"R Programming Keywords\"/></figure>\n\n\n\n<h3>11) Inf and NaN</h3>\n\n\n\n<p>The is.finite and is.infinite function returns a vector of the same length indicating which elements are finite or infinite.</p>\n\n\n\n<p>Inf and -Inf are positive and negative infinity. NaN stands for &#8216;Not a Number.&#8217; NaN applies on numeric values and real and imaginary parts of complex values, but it will not apply to the values of integer vectors.</p>\n\n\n\n<p><strong>Usage</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>is.finite(x)  \r\nis.infinite(x)  \r\nis.nan(x)  \r\n  \r\nInf  \r\nNaN  </code></pre>\n\n\n\n<h3>12) NA</h3>\n\n\n\n<p>NA is a logical constant of length 1 that contains a missing value indicator. It can be coerced to any other vector type except raw. There are other types of constant also, such as NA_Integer_, NA_real_, NA_complex_, and NA_character. These constants are of the other atomic vector type which supports missing values.</p>\n\n\n\n<p><strong>Usage</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>NA  \r\nis.na(x)  \r\nanyNA(x, recursive = FALSE)  \r\n  \r\n## S3 method for class 'data.frame'  \r\nis.na(x)  \r\n  \r\nis.na(x) &lt;- value </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In programming, a keyword is a word which is reserved by a program because it has a special meaning. A keyword can be a command or a parameter. Like in C, C++, Java, there is also a set of keywords in R. A keyword can&#8217;t be used as a variable name. Keywords are also called [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/322"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=322"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/322/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 323,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/322/revisions/323"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=322"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=322"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=322"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 324,
    "date": "2020-10-20T10:53:50",
    "date_gmt": "2020-10-20T10:53:50",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=324"
    },
    "modified": "2020-10-20T10:53:50",
    "modified_gmt": "2020-10-20T10:53:50",
    "slug": "operators-in-r",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/operators-in-r/",
    "title": {
      "rendered": "Operators in R"
    },
    "content": {
      "rendered": "\n<p>In&nbsp;<strong>computer programming</strong>, an operator is a symbol which represents an action. An operator is a symbol which tells the compiler to perform specific&nbsp;<strong>logical</strong>&nbsp;or&nbsp;<strong>mathematical</strong>&nbsp;manipulations. R programming is very rich in built-in operators.</p>\n\n\n\n<p>In&nbsp;<strong>R programming</strong>, there are different types of operator, and each operator performs a different task. For data manipulation, There are some advance operators also such as model formula and list indexing.</p>\n\n\n\n<p><strong>There are the following types of operators used in R:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-operators.png\" alt=\"R Operators\"/></figure>\n\n\n\n<ol><li>Arithmetic Operators</li><li>Relational Operators</li><li>Logical Operators</li><li>Assignment Operators</li><li>Miscellaneous Operators</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2 id=\"Arithmetic\">Arithmetic Operators</h2>\n\n\n\n<p>Arithmetic operators are the symbols which are used to represent arithmetic math operations. The operators act on each and every element of the vector. There are various arithmetic operators which are supported by R.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>+</td><td>This operator is used to add two vectors in R. a &lt;- c(2, 3.3, 4)</td><td>b &lt;- c(11, 5, 3) print(a+b) <strong>It will give us the following output:</strong> [1] 13.0 8.3 5.0</td></tr><tr><td><strong>2.</strong></td><td>&#8211;</td><td>This operator is used to divide a vector from another one. a &lt;- c(2, 3.3, 4)</td><td>b &lt;- c(11, 5, 3) print(a-b) <strong>It will give us the following output:</strong> [1] -9.0 -1.7 3.0</td></tr><tr><td><strong>3.</strong></td><td>*</td><td>This operator is used to multiply two vectors with each other. a &lt;- c(2, 3.3, 4)</td><td>b &lt;- c(11, 5, 3) print(a*b) <strong>It will give us the following output:</strong> [1] 22.0 16.5 4.0</td></tr><tr><td><strong>4.</strong></td><td>/</td><td>This operator divides the vector from another one. a &lt;- c(2, 3.3, 4)</td><td>b &lt;- c(11, 5, 3) print(a/b)<strong>It will give us the following output:</strong> [1] 0.1818182 0.6600000 4.0000000</td></tr><tr><td><strong>5.</strong></td><td>%%</td><td>This operator is used to find the remainder of the first vector with the second vector. a &lt;- c(2, 3.3, 4)</td><td>b &lt;- c(11, 5, 3) print(a%%b) <strong>It will give us the following output:</strong> [1] 2.0 3.3 0</td></tr><tr><td><strong>6.</strong></td><td>%/%</td><td>This operator is used to find the division of the first vector with the second(quotient).</td><td>a &lt;- c(2, 3.3, 4) b &lt;- c(11, 5, 3) print(a%/%b) <strong>It will give us the following output:</strong> [1] 0 0 4</td></tr><tr><td><strong>7.</strong></td><td>^</td><td>This operator raised the first vector to the exponent of the second vector. a &lt;- c(2, 3.3, 4)</td><td>b &lt;- c(11, 5, 3) print(a^b) <strong>It will give us the following output:</strong> [1] 0248.0000 391.3539 4.0000</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2 id=\"Relational\">Relational Operators</h2>\n\n\n\n<p>A relational operator is a symbol which defines some kind of relation between two entities. These include numerical equalities and inequalities. A relational operator compares each element of the first vector with the corresponding element of the second vector. The result of the comparison will be a Boolean value. There are the following relational operators which are supported by R:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>&gt;</td><td>This operator will return TRUE when every element in the first vector is greater than the corresponding element of the second vector.</td><td>a &lt;- c(1, 3, 5) b &lt;- c(2, 4, 6) print(a&gt;b) <strong>It will give us the following output:</strong> [1] FALSE FALSE FALSE</td></tr><tr><td><strong>2.</strong></td><td>&lt;</td><td>This operator will return TRUE when every element in the first vector is less then the corresponding element of the second vector.</td><td>a &lt;- c(1, 9, 5) b &lt;- c(2, 4, 6) print(a&lt;b) <strong>It will give us the following output:</strong> [1] FALSE TRUE FALSE</td></tr><tr><td><strong>3.</strong></td><td>&lt;=</td><td>This operator will return TRUE when every element in the first vector is less than or equal to the corresponding element of another vector.</td><td>a &lt;- c(1, 3, 5) b &lt;- c(2, 3, 6) print(a&lt;=b) <strong>It will give us the following output:</strong> [1] TRUE TRUE TRUE</td></tr><tr><td><strong>4.</strong></td><td>&gt;=</td><td>This operator will return TRUE when every element in the first vector is greater than or equal to the corresponding element of another vector.</td><td>a &lt;- c(1, 3, 5) b &lt;- c(2, 3, 6) print(a&gt;=b) <strong>It will give us the following output:</strong> [1] FALSE TRUE FALSE</td></tr><tr><td><strong>5.</strong></td><td>==</td><td>This operator will return TRUE when every element in the first vector is equal to the corresponding element of the second vector.</td><td>a &lt;- c(1, 3, 5) b &lt;- c(2, 3, 6) print(a==b) <strong>It will give us the following output:</strong>[1] FALSE TRUE FALSE</td></tr><tr><td><strong>6.</strong></td><td>!=</td><td>This operator will return TRUE when every element in the first vector is not equal to the corresponding element of the second vector.</td><td>a &lt;- c(1, 3, 5) b &lt;- c(2, 3, 6) print(a&gt;=b) <strong>It will give us the following output:</strong> [1] TRUE FALSE TRUE</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2 id=\"Logical\">Logical Operators</h2>\n\n\n\n<p>The logical operators allow a program to make a decision on the basis of multiple conditions. In the program, each operand is considered as a condition which can be evaluated to a false or true value. The value of the conditions is used to determine the overall value of the op1&nbsp;<strong>operator</strong>&nbsp;op2. Logical operators are applicable to those vectors whose type is logical, numeric, or complex.</p>\n\n\n\n<p>The logical operator compares each element of the first vector with the corresponding element of the second vector.There are the following types of operators which are supported by R:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>&amp;</td><td>This operator is known as the Logical AND operator. This operator takes the first element of both the vector and returns TRUE if both the elements are TRUE.</td><td>a &lt;- c(3, 0, TRUE, 2+2i) b &lt;- c(2, 4, TRUE, 2+3i) print(a&amp;b) <strong>It will give us the following output:</strong> [1] TRUE FALSE TRUE TRUE</td></tr><tr><td><strong>2.</strong></td><td>|</td><td>This operator is called the Logical OR operator. This operator takes the first element of both the vector and returns TRUE if one of them is TRUE.</td><td>a &lt;- c(3, 0, TRUE, 2+2i) b &lt;- c(2, 4, TRUE, 2+3i) print(a|b) <strong>It will give us the following output:</strong> [1] TRUE TRUE TRUE TRUE</td></tr><tr><td><strong>3.</strong></td><td>!</td><td>This operator is known as Logical NOT operator. This operator takes the first element of the vector and gives the opposite logical value as a result.</td><td>a &lt;- c(3, 0, TRUE, 2+2i) print(!a) <strong>It will give us the following output:</strong> [1] FALSE TRUE FALSE FALSE</td></tr><tr><td><strong>4.</strong></td><td>&amp;&amp;</td><td>This operator takes the first element of both the vector and gives TRUE as a result, only if both are TRUE.</td><td>a &lt;- c(3, 0, TRUE, 2+2i) b &lt;- c(2, 4, TRUE, 2+3i) print(a&amp;&amp;b) <strong>It will give us the following output:</strong> [1] TRUE</td></tr><tr><td><strong>5.</strong></td><td>||</td><td>This operator takes the first element of both the vector and gives the result TRUE, if one of them is true.</td><td>a &lt;- c(3, 0, TRUE, 2+2i) b &lt;- c(2, 4, TRUE, 2+3i) print(a||b) <strong>It will give us the following output:</strong> [1] TRUE</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2 id=\"Assignment\">Assignment Operators</h2>\n\n\n\n<p>An assignment operator is used to assign a new value to a variable. In R, these operators are used to assign values to vectors. There are the following types of assignment</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>&lt;- or = or &lt;&lt;-</td><td>These operators are known as left assignment operators.</td><td>a &lt;- c(3, 0, TRUE, 2+2i) b &lt;&lt;- c(2, 4, TRUE, 2+3i) d = c(1, 2, TRUE, 2+3i) print(a) print(b) print(d) <strong>It will give us the following output:</strong> [1] 3+0i 0+0i 1+0i 2+2i [1] 2+0i 4+0i 1+0i 2+3i [1] 1+0i 2+0i 1+0i 2+3i</td></tr><tr><td><strong>2.</strong></td><td>-&gt; or -&gt;&gt;</td><td>These operators are known as right assignment operators.</td><td>c(3, 0, TRUE, 2+2i) -&gt; a c(2, 4, TRUE, 2+3i) -&gt;&gt; b print(a) print(b) <strong>It will give us the following output:</strong> [1] 3+0i 0+0i 1+0i 2+2i [1] 2+0i 4+0i 1+0i 2+3i</td></tr></tbody></table></figure>\n\n\n\n<p>operators which are supported by R:</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Miscellaneous Operators</h2>\n\n\n\n<p>Miscellaneous operators are used for a special and specific purpose. These operators are not used for general mathematical or logical computation. There are the following miscellaneous operators which are supported in R</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Operator</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>:</td><td>The colon operator is used to create the series of numbers in sequence for a vector.</td><td>v &lt;- 1:8 print(v) <strong>It will give us the following output:</strong> [1] 1 2 3 4 5 6 7 8</td></tr><tr><td><strong>2.</strong></td><td>%in%</td><td>This is used when we want to identify if an element belongs to a vector.</td><td>a1 &lt;- 8 a2 &lt;- 12 d &lt;- 1:10 print(a1%in%t) print(a2%in%t) <strong>It will give us the following output:</strong> [1] FALSE [1] FALSE</td></tr><tr><td><strong>3.</strong></td><td>%*%</td><td>It is used to multiply a matrix with its transpose.</td><td>M=matrix(c(1,2,3,4,5,6), nrow=2, ncol=3, byrow=TRUE) T=m%*%T(m) print(T) <strong>It will give us the following output:</strong> 14 32 32 77</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In&nbsp;computer programming, an operator is a symbol which represents an action. An operator is a symbol which tells the compiler to perform specific&nbsp;logical&nbsp;or&nbsp;mathematical&nbsp;manipulations. R programming is very rich in built-in operators. In&nbsp;R programming, there are different types of operator, and each operator performs a different task. For data manipulation, There are some advance operators also [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/324"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=324"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/324/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 325,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/324/revisions/325"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=324"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=324"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=324"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 326,
    "date": "2020-10-20T10:55:42",
    "date_gmt": "2020-10-20T10:55:42",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=326"
    },
    "modified": "2020-10-20T10:55:42",
    "modified_gmt": "2020-10-20T10:55:42",
    "slug": "r-if-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-if-statement/",
    "title": {
      "rendered": "R if Statement"
    },
    "content": {
      "rendered": "\n<p>The if statement consists of the Boolean expressions followed by one or more statements. The if statement is the simplest decision-making statement which helps us to take a decision on the basis of the condition.</p>\n\n\n\n<p>The if statement is a conditional programming statement which performs the function and displays the information if it is proved true.</p>\n\n\n\n<p>The block of code inside the if statement will be executed only when the boolean expression evaluates to be true. If the statement evaluates false, then the code which is mentioned after the condition will run.</p>\n\n\n\n<p>The syntax of if statement in R is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(boolean_expression) {  \r\n   // If the boolean expression is true, then statement(s) will be executed.   \r\n} </code></pre>\n\n\n\n<p><strong>Flow Chart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-statement.png\" alt=\"R If Statement\"/></figure>\n\n\n\n<p>Let see some examples to understand how if statements work and perform a certain task in R.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;-24L  \r\ny &lt;- \"shubham\"  \r\nif(is.integer(x))  \r\n{  \r\n    print(\"x is an Integer\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-statement-output1.png\" alt=\"R If Statement\"/></figure>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;-20  \r\ny&lt;-24  \r\ncount=0  \r\nif(x&lt;y)  \r\n{  \r\n    cat(x,\"is a smaller number\\n\")  \r\n    count=1  \r\n}  \r\nif(count==1){  \r\n    cat(\"Block is successfully execute\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-statement-output2.png\" alt=\"R If Statement\"/></figure>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;-1  \r\ny&lt;-24  \r\ncount=0  \r\nwhile(x&lt;y){  \r\n    cat(x,\"is a smaller number\\n\")  \r\n    x=x+2  \r\n    if(x==15)  \r\n        break  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-statement-output3.png\" alt=\"R If Statement\"/></figure>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;-24  \r\nif(x%%2==0){  \r\n    cat(x,\" is an even number\")  \r\n}  \r\nif(x%%2!=0){  \r\n    cat(x,\" is an odd number\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-statement-output4.png\" alt=\"R If Statement\"/></figure>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>year  \r\n1 = 2011  \r\nif(year1 %% 4 == 0) {  \r\n if(year1 %% 100 == 0) {   \r\n     if(year1 %% 400 == 0) {   \r\n         cat(year,\"is a leap year\")   \r\n        } else {  \r\n         cat(year,\"is not a leap year\")   \r\n        }  \r\n    } else {  \r\n     cat(year,\"is a leap year\")   \r\n    }  \r\n} else {  \r\n cat(year,\"is not a leap year\")   \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-statement-output5.png\" alt=\"R If Statement\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The if statement consists of the Boolean expressions followed by one or more statements. The if statement is the simplest decision-making statement which helps us to take a decision on the basis of the condition. The if statement is a conditional programming statement which performs the function and displays the information if it is proved [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/326"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=326"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/326/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 327,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/326/revisions/327"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=326"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=326"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=326"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 328,
    "date": "2020-10-20T10:58:13",
    "date_gmt": "2020-10-20T10:58:13",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=328"
    },
    "modified": "2020-10-20T10:58:13",
    "modified_gmt": "2020-10-20T10:58:13",
    "slug": "if-else-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/if-else-statement/",
    "title": {
      "rendered": "If-else statement"
    },
    "content": {
      "rendered": "\n<p>In the if statement, the inner code is executed when the condition is true. The code which is outside the if block will be executed when the if condition is false.</p>\n\n\n\n<p>There is another type of decision-making statement known as the if-else statement. An if-else statement is the if statement followed by an else statement. An if-else statement, else statement will be executed when the boolean expression will false. In simple words, If a Boolean expression will have true value, then the if block gets executed otherwise, the else block will get executed.</p>\n\n\n\n<p>R programming treats any non-zero and non-null values as true, and if the value is either zero or null, then it treats them as false.</p>\n\n\n\n<p>The basic syntax of If-else statement is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(boolean_expression) {  \r\n   // statement(s) will be executed if the boolean expression is true.  \r\n} else {  \r\n   // statement(s) will be executed if the boolean expression is false.  \r\n}</code></pre>\n\n\n\n<p><strong>Flow Chart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-else-statement.png\" alt=\"R If-else statement\"/></figure>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># local variable definition  \r\na&lt;- 100  \r\n#checking boolean condition  \r\nif(a&lt;20){  \r\n    # if the condition is true then print the following  \r\n    cat(\"a is less than 20\\n\")  \r\n}else{  \r\n    # if the condition is false then print the following  \r\n    cat(\"a is not less than 20\\n\")  \r\n}  \r\ncat(\"The value of a is\", a)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-else-statement-output1.png\" alt=\"R If-else statement\"/></figure>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;- c(\"Hardwork\",\"is\",\"the\",\"key\",\"of\",\"success\")  \r\n  \r\nif(\"key\" %in% x) {    \r\n   print(\"key is found\")  \r\n} else {  \r\n   print(\"key is not found\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-else-statement-output2.png\" alt=\"R If-else statement\"/></figure>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;- 100  \r\n#checking boolean condition  \r\nif(a&lt;20){  \r\n    cat(\"a is less than 20\")  \r\n    if(a%%2==0){  \r\n        cat(\" and an even number\\n\")  \r\n    }  \r\n    else{  \r\n        cat(\" but not an even number\\n\")  \r\n    }  \r\n}else{  \r\n    cat(\"a is greater than 20\")  \r\n    if(a%%2==0){  \r\n        cat(\" and an even number\\n\")  \r\n    }  \r\n    else{  \r\n        cat(\" but not an even number\\n\")  \r\n    }  \r\n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-else-statement-output3.png\" alt=\"R If-else statement\"/></figure>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;- 'u'  \r\nif(a=='a'||a=='e'||a=='i'||a=='o'||a=='u'||a=='A'||a=='E'||a=='I'||a=='O'||a=='U'){  \r\n    cat(\"character is a vowel\\n\")     \r\n}else{  \r\n    cat(\"character is a constant\")  \r\n}  \r\ncat(\"character is =\",a)  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-else-statement-output4.png\" alt=\"R If-else statement\"/></figure>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;- 'u'  \r\nif(a=='a'||a=='e'||a=='i'||a=='o'||a=='u'||a=='A'||a=='E'||a=='I'||a=='O'||a=='U'){  \r\n    cat(\"character is a vowel\\n\")     \r\n}else{  \r\n    cat(\"character is a constant\")  \r\n}  \r\ncat(\"character is =\",a)  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-if-else-statement-output5.png\" alt=\"R If-else statement\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the if statement, the inner code is executed when the condition is true. The code which is outside the if block will be executed when the if condition is false. There is another type of decision-making statement known as the if-else statement. An if-else statement is the if statement followed by an else statement. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/328"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=328"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/328/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 329,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/328/revisions/329"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=328"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=328"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=328"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 330,
    "date": "2020-10-20T11:00:55",
    "date_gmt": "2020-10-20T11:00:55",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=330"
    },
    "modified": "2020-10-20T11:00:55",
    "modified_gmt": "2020-10-20T11:00:55",
    "slug": "r-else-if-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-else-if-statement/",
    "title": {
      "rendered": "R else if statement"
    },
    "content": {
      "rendered": "\n<p>This statement is also known as nested if-else statement. The if statement is followed by an optional else if&#8230;.. else statement. This statement is used to test various condition in a single if&#8230;&#8230;else if statement. There are some key points which are necessary to keep in mind when we are using the if&#8230;..else if&#8230;..else statement. These points are as follows:</p>\n\n\n\n<ol><li><strong>if</strong>&nbsp;statement can have either zero or one&nbsp;<strong>else</strong>&nbsp;statement and it must come after any&nbsp;<strong>else if&#8217;s</strong>&nbsp;statement.</li><li><strong>if</strong>&nbsp;statement can have many&nbsp;<strong>else if&#8217;s</strong>&nbsp;statement and they come before the else statement.</li><li>Once an&nbsp;<strong>else if</strong>&nbsp;statement succeeds, none of the remaining&nbsp;<strong>else if&#8217;s</strong>&nbsp;or&nbsp;<strong>else&#8217;s</strong>&nbsp;will be tested.</li></ol>\n\n\n\n<p>The basic syntax of If-else statement is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(boolean_expression 1) {  \r\n   // This block executes when the boolean expression 1 is true.  \r\n} else if( boolean_expression 2) {  \r\n   // This block executes when the boolean expression 2 is true.  \r\n} else if( boolean_expression 3) {  \r\n   // This block executes when the boolean expression 3 is true.  \r\n} else {  \r\n   // This block executes when none of the above condition is true.   \r\n}</code></pre>\n\n\n\n<p><strong>Flow Chart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-else-if-statement.png\" alt=\"R else if statement\"/></figure>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>age &lt;- readline(prompt=\"Enter age: \")  \r\nage &lt;- as.integer(age)  \r\nif(age&lt;18)  \r\n    print(\"You are child\")  \r\nelse if(age>30)  \r\n    print(\"You are old guy\")  \r\nelse  \r\n    print(\"You are adult\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-else-if-statement-output1.png\" alt=\"R else if statement\"/></figure>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>marks=83;  \r\nif(marks>75){  \r\n    print(\"First class\")  \r\n}else if(marks>65){  \r\n    print(\"Second class\")  \r\n}else if(marks>55){  \r\n    print(\"Third class\")  \r\n}else{  \r\n    print(\"Fail\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-else-if-statement-output2.png\" alt=\"R else if statement\"/></figure>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>cat(\"1) For Addition\\n\")  \r\ncat(\"2) For Subtraction\\n\")  \r\ncat(\"3) For Division\\n\")  \r\ncat(\"4) For multiplication\\n\")  \r\nn1&lt;-readline(prompt=\"Enter first number:\")  \r\nn2&lt;-readline(prompt=\"Enter second number:\")  \r\nchoice&lt;-readline(prompt=\"Enter your choice:\")  \r\nn1&lt;- as.integer(n1)  \r\nn2&lt;- as.integer(n2)  \r\nchoice&lt;- as.integer(choice)  \r\nif(choice==1){  \r\n    sum &lt;-(n1+n2)  \r\n    cat(\"sum=\",sum)  \r\n}else if(choice==2){  \r\n    sub&lt;-(n1-n2)  \r\n    cat(\"sub=\",sub)  \r\n}else if(choice==3){  \r\n    div&lt;-n1/n2  \r\n    cat(\"Division=\",div)  \r\n}else if(choice==4){  \r\n    mul&lt;-n1*n2  \r\n    cat(\"mul=\",mul)  \r\n}else{  \r\n    cat(\"wrong choice\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-else-if-statement-output3.png\" alt=\"R else if statement\"/></figure>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;- c(\"Hardwork\",\"is\",\"the\",\"key\",\"of\",\"success\")  \r\nif(\"Success\" %in% x) {  \r\n   print(\"success is found in the first time\")  \r\n} else if (\"success\" %in% x) {  \r\n   print(\"success is found in the second time\")  \r\n} else {  \r\n   print(\"No success found\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-else-if-statement-output4.png\" alt=\"R else if statement\"/></figure>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>n1=4  \r\nn2=87  \r\nn3=43  \r\nn4=74  \r\nif(n1>n2){  \r\n    if(n1>n3&amp;&amp;n1>n4){  \r\n        largest=n1  \r\n    }  \r\n}else if(n2>n3){  \r\n    if(n2>n1&amp;&amp;n2>n4){  \r\n        largest=n2  \r\n    }  \r\n}else if(n3>n4){  \r\n    if(n3>n1&amp;&amp;n3>n2){  \r\n        largest=n3  \r\n    }  \r\n}else{  \r\n    largest=n4  \r\n}  \r\ncat(\"Largest number is =\",largest) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-else-if-statement-output5.png\" alt=\"R else if statement\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This statement is also known as nested if-else statement. The if statement is followed by an optional else if&#8230;.. else statement. This statement is used to test various condition in a single if&#8230;&#8230;else if statement. There are some key points which are necessary to keep in mind when we are using the if&#8230;..else if&#8230;..else statement. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/330"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=330"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/330/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 331,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/330/revisions/331"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=330"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=330"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=330"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 332,
    "date": "2020-10-20T11:02:56",
    "date_gmt": "2020-10-20T11:02:56",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=332"
    },
    "modified": "2020-10-20T11:02:56",
    "modified_gmt": "2020-10-20T11:02:56",
    "slug": "r-switch-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-switch-statement/",
    "title": {
      "rendered": "R Switch Statement"
    },
    "content": {
      "rendered": "\n<p>A switch statement is a selection control mechanism that allows the value of an expression to change the control flow of program execution via map and search.</p>\n\n\n\n<p>The switch statement is used in place of long if statements which compare a variable with several integral values. It is a multi-way branch statement which provides an easy way to dispatch execution for different parts of code. This code is based on the value of the expression.</p>\n\n\n\n<p>This statement allows a variable to be tested for equality against a list of values. A switch statement is a little bit complicated. To understand it, we have some key points which are as follows:</p>\n\n\n\n<ul><li>If expression type is a character string, the string is matched to the listed cases.</li><li>If there is more than one match, the first match element is used.</li><li>No default case is available.</li><li>If no case is matched, an unnamed case is used.</li></ul>\n\n\n\n<p>There are basically two ways in which one of the cases is selected:</p>\n\n\n\n<h3>1) Based on Index</h3>\n\n\n\n<p>If the cases are values like a character vector, and the expression is evaluated to a number than the expression&#8217;s result is used as an index to select the case.</p>\n\n\n\n<h3>2) Based on Matching Value</h3>\n\n\n\n<p>When the cases have both case value and output value like [&#8220;case_1&#8243;=&#8221;value1&#8221;], then the expression value is matched against case values. If there is a match with the case, the corresponding value is the output.</p>\n\n\n\n<p>The basic syntax of If-else statement is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>switch(expression, case1, case2, case3....)  </code></pre>\n\n\n\n<p><strong>Flow Chart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-switch-statement.png\" alt=\"R Switch Statement\"/></figure>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;- switch(  \r\n3,  \r\n\"Shubham\",  \r\n\"Nishka\",  \r\n\"Gunjan\",     \r\n\"Sumit\"  \r\n)  \r\nprint(x)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-switch-statement-output1.png\" alt=\"R Switch Statement\"/></figure>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>ax= 1  \r\nbx = 2  \r\ny = switch(  \r\n    ax+bx,  \r\n    \"Hello, Shubham\",  \r\n    \"Hello Arpita\",  \r\n    \"Hello Vaishali\",  \r\n    \"Hello Nishka\"  \r\n)  \r\nprint (y)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-switch-statement-output2.png\" alt=\"R Switch Statement\"/></figure>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>y = \"18\"  \r\nx = switch(  \r\n    y,  \r\n    \"9\"=\"Hello Arpita\",  \r\n    \"12\"=\"Hello Vaishali\",  \r\n    \"18\"=\"Hello Nishka\",  \r\n    \"21\"=\"Hello Shubham\"  \r\n)  \r\n   \r\nprint (x)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-switch-statement-output3.png\" alt=\"R Switch Statement\"/></figure>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x= \"2\"  \r\ny=\"1\"  \r\na = switch(  \r\n    paste(x,y,sep=\"\"),  \r\n    \"9\"=\"Hello Arpita\",  \r\n    \"12\"=\"Hello Vaishali\",  \r\n    \"18\"=\"Hello Nishka\",  \r\n    \"21\"=\"Hello Shubham\"  \r\n)  \r\n   \r\nprint (a)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-switch-statement-output4.png\" alt=\"R Switch Statement\"/></figure>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>y = \"18\"  \r\na=10  \r\nb=2  \r\nx = switch(  \r\n    y,  \r\n    \"9\"=cat(\"Addition=\",a+b),  \r\n    \"12\"=cat(\"Subtraction =\",a-b),  \r\n    \"18\"=cat(\"Division= \",a/b),  \r\n    \"21\"=cat(\"multiplication =\",a*b)  \r\n)  \r\n  \r\nprint (x)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-switch-statement-output5.png\" alt=\"R Switch Statement\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A switch statement is a selection control mechanism that allows the value of an expression to change the control flow of program execution via map and search. The switch statement is used in place of long if statements which compare a variable with several integral values. It is a multi-way branch statement which provides an [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/332"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=332"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/332/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 333,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/332/revisions/333"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=332"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=332"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=332"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 334,
    "date": "2020-10-20T11:04:37",
    "date_gmt": "2020-10-20T11:04:37",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=334"
    },
    "modified": "2020-10-20T11:04:37",
    "modified_gmt": "2020-10-20T11:04:37",
    "slug": "r-next-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-next-statement/",
    "title": {
      "rendered": "R next Statement"
    },
    "content": {
      "rendered": "\n<p>The next statement is used to skip any remaining statements in the loop and continue executing. In simple words, a next statement is a statement which skips the current iteration of a loop without terminating it. When the next statement is encountered, the R parser skips further evaluation and starts the next iteration of the loop.</p>\n\n\n\n<p>This statement is mostly used with for loop and while loop.</p>\n\n\n\n<h4><strong>Note:</strong>&nbsp;In else branch of the if-else statement, the next statement can also be used.</h4>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>There is the following syntax for creating the next statement in R</p>\n\n\n\n<pre class=\"wp-block-code\"><code>next  </code></pre>\n\n\n\n<p><strong>Flowchart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-next-statement.png\" alt=\"R next statement\"/></figure>\n\n\n\n<h3>Example 1: next in repeat loop</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a &lt;- 1            \r\nrepeat {          \r\n  if(a == 10)    \r\n    break    \r\n  if(a == 5){    \r\n    next       \r\n  }    \r\n  print(a)    \r\n  a &lt;- a+1    \r\n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-next-statement-output1.png\" alt=\"R next statement\"/></figure>\n\n\n\n<h3>Example 2: next in while loop</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-1    \r\nwhile (a &lt; 10) {    \r\n  if(a==5)    \r\n    next    \r\nprint(a)    \r\n  a = a + 1    \r\n}    </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-next-statement-output2.png\" alt=\"R next statement\"/></figure>\n\n\n\n<h3>Example 3: next in for loop</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;- 1:10  \r\nfor (val in x) {  \r\nif (val == 3){  \r\nnext  \r\n}  \r\nprint(val)  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-next-statement-output3.png\" alt=\"R next statement\"/></figure>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a1&lt;- c(10L,-11L,12L,-13L,14L,-15L,16L,-17L,18L)  \r\nsum&lt;-0  \r\nfor(i in a1){  \r\n    if(i&lt;0){  \r\n        next  \r\n    }  \r\n    sum=sum+i  \r\n}  \r\ncat(\"The sum of all positive numbers in array is=\",sum) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-next-statement-output4.png\" alt=\"R next statement\"/></figure>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>j&lt;-0  \r\nwhile(j&lt;10){  \r\n    if (j==7){  \r\n        j=j+1  \r\n        next  \r\n    }  \r\n    cat(\"\\nnumber is =\",j)  \r\n    j=j+1  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-next-statement-output5.png\" alt=\"R next statement\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The next statement is used to skip any remaining statements in the loop and continue executing. In simple words, a next statement is a statement which skips the current iteration of a loop without terminating it. When the next statement is encountered, the R parser skips further evaluation and starts the next iteration of the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/334"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=334"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/334/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 335,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/334/revisions/335"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=334"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=334"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=334"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 336,
    "date": "2020-10-20T11:21:30",
    "date_gmt": "2020-10-20T11:21:30",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=336"
    },
    "modified": "2020-10-20T11:21:30",
    "modified_gmt": "2020-10-20T11:21:30",
    "slug": "r-break-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-break-statement/",
    "title": {
      "rendered": "R Break Statement"
    },
    "content": {
      "rendered": "\n<p>In the R language, the break statement is used to break the execution and for an immediate exit from the loop. In nested loops, break exits from the innermost loop only and control transfer to the outer loop.</p>\n\n\n\n<p>It is useful to manage and control the program execution flow. We can use it to various loops like: for, repeat, etc.</p>\n\n\n\n<p>There are basically two usages of break statement which are as follows:</p>\n\n\n\n<ol><li>When the break statement is inside the loop, the loop terminates immediately and program control resumes on the next statement after the loop.</li><li>It is also used to terminate a case in the switch statement.</li></ol>\n\n\n\n<h4><strong>Note:</strong>&nbsp;We can also use break statement inside the&nbsp;<code>else</code>&nbsp;branch of&nbsp;<code>if...else</code>&nbsp;statement.</h4>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>There is the following syntax for creating a break statement in R</p>\n\n\n\n<pre class=\"wp-block-code\"><code>break  </code></pre>\n\n\n\n<p><strong>Flowchart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-break-statement.png\" alt=\"R Break statement\"/></figure>\n\n\n\n<h3>Example 1: Break in repeat loop</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a &lt;- 1            \r\nrepeat {          \r\n  print(\"hello\");    \r\n  if(a >= 5)      \r\n    break         \r\n  a&lt;-a+1          \r\n}    </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-break-statement-output1.png\" alt=\"R Break statement\"/></figure>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>v &lt;- c(\"Hello\",\"loop\")  \r\ncount &lt;- 2  \r\nrepeat {  \r\n   print(v)  \r\n   count &lt;- count + 1  \r\n   if(count > 5) {  \r\n      break  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-break-statement-output2.png\" alt=\"R Break statement\"/></figure>\n\n\n\n<h3>Example 3: Break in while loop</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-1    \r\nwhile (a &lt; 10) {    \r\n  print(a)    \r\n  if(a==5)    \r\n    break    \r\n  a = a + 1    \r\n}    </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-break-statement-output3.png\" alt=\"R Break statement\"/></figure>\n\n\n\n<h3>Example 4: Break in for loop</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>for (i in c(2,4,6,8)) {    \r\n  for (j in c(1,3)) {    \r\n      if (i==6)    \r\n        break    \r\n     print(i)    \r\n  }    \r\n}   </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-break-statement-output4.png\" alt=\"R Break statement\"/></figure>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>num=7  \r\nflag = 0  \r\nif(num> 1) {  \r\n    flag = 1  \r\n    for(i in 2:(num-1)) {  \r\n        if ((num %% i) == 0) {  \r\n            flag = 0  \r\n            break  \r\n        }  \r\n    }  \r\n}   \r\nif(num == 2)    flag = 1  \r\nif(flag == 1) {  \r\n    print(paste(num,\"is a prime number\"))  \r\n} else {  \r\n    print(paste(num,\"is not a prime number\"))  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-break-statement-output5.png\" alt=\"R Break statement\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the R language, the break statement is used to break the execution and for an immediate exit from the loop. In nested loops, break exits from the innermost loop only and control transfer to the outer loop. It is useful to manage and control the program execution flow. We can use it to various [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/336"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=336"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/336/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 337,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/336/revisions/337"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=336"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=336"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=336"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 338,
    "date": "2020-10-20T11:23:23",
    "date_gmt": "2020-10-20T11:23:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=338"
    },
    "modified": "2020-10-20T11:23:23",
    "modified_gmt": "2020-10-20T11:23:23",
    "slug": "r-for-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-for-loop/",
    "title": {
      "rendered": "R For Loop"
    },
    "content": {
      "rendered": "\n<p>A for loop is the most popular control flow statement. A for loop is used to iterate a vector. It is similar to the while loop. There is only one difference between for and while, i.e., in while loop, the condition is checked before the execution of the body, but in for loop condition is checked after the execution of the body.</p>\n\n\n\n<p>There is the following syntax of For loop in C/C++:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for (initialization_Statement; test_Expression; update_Statement)  \r\n{  \r\n    // statements inside the body of the loop   \r\n}</code></pre>\n\n\n\n<h2>How For loop works in C/C++?</h2>\n\n\n\n<p>The for loop in C and C++ is executed in the following way:</p>\n\n\n\n<ul><li>The initialization statement of for loop is executed only once.</li><li>After the initialization process, the test expression is evaluated. The for loop is terminated when the test expression is evaluated to false.</li><li>The statements inside the body of for loop are executed, and expression is updated if the test expression is evaluated to true.</li><li>The test expression is again evaluated.</li><li>The process continues until the test expression is false. The loop terminates when the test expression is false.</li></ul>\n\n\n\n<h2>For loop in R Programming</h2>\n\n\n\n<p>In R, a for loop is a way to repeat a sequence of instructions under certain conditions. It allows us to automate parts of our code which need repetition. In simple words, a for loop is a repetition control structure. It allows us to efficiently write the loop that needs to execute a certain number of time.</p>\n\n\n\n<p>In R, a for loop is defined as :</p>\n\n\n\n<ol><li>It starts with the keyword for like C or C++.</li><li>Instead of initializing and declaring a loop counter variable, we declare a variable which is of the same type as the base type of the vector, matrix, etc., followed by a colon, which is then followed by the array or matrix name.</li><li>In the loop body, use the loop variable rather than using the indexed array element.</li><li>There is a following syntax of for loop in R:</li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>for (value in vector) {  \r\n   statements  \r\n}  </code></pre>\n\n\n\n<p><strong>Flowchart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-for-loop.png\" alt=\"R For Loop\"/></figure>\n\n\n\n<p><strong>Example 1:</strong>&nbsp;We iterate all the elements of a vector and print the current value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Create fruit vector  \r\nfruit &lt;- c('Apple', 'Orange',\"Guava\", 'Pinapple', 'Banana','Grapes')  \r\n# Create the for statement  \r\nfor ( i in fruit){   \r\n    print(i)  \r\n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-for-loop-1.png\" alt=\"R For Loop\"/></figure>\n\n\n\n<p><strong>Example 2:</strong> creates a non-linear function with the help of the polynomial of x between 1 and 5 and store it in a list.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating an empty list  \r\nlist &lt;- c()  \r\n# Creating a for statement to populate the list  \r\nfor (i in seq(1, 5, by=1)) {  \r\n  list&#91;&#91;i]] &lt;- i*i  \r\n}  \r\nprint(list)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-for-loop-2.png\" alt=\"R For Loop\"/></figure>\n\n\n\n<p><strong>Example 3:</strong>&nbsp;For loop over a matrix</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a matrix  \r\nmat &lt;- matrix(data = seq(10, 21, by=1), nrow = 6, ncol =2)  \r\n# Creating the loop with r and c to iterate over the matrix  \r\nfor (r in 1:nrow(mat))     \r\n    for (c in 1:ncol(mat))    \r\n         print(paste(\"mat&#91;\", r, \",\",c, \"]=\", mat&#91;r,c]))   \r\nprint(mat)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-for-loop-3.png\" alt=\"R For Loop\"/></figure>\n\n\n\n<p><strong>Example 4:</strong>&nbsp;For loop over a list</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Create a list with three vectors  \r\nfruit &lt;- list(Basket = c('Apple', 'Orange',\"Guava\", 'Pinapple', 'Banana','Grapes'),   \r\nMoney = c(10, 12, 15), purchase = TRUE)  \r\nfor (p  in fruit)   \r\n{   \r\n    print(p)  \r\n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-for-loop-4.png\" alt=\"R For Loop\"/></figure>\n\n\n\n<p><strong>Example 5:</strong> count the number of even numbers in a vector.# Create a list with three vectors.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x &lt;- c(2,5,3,9,8,11,6,44,43,47,67,95,33,65,12,45,12)  \r\ncount &lt;- 0  \r\nfor (val in x) {  \r\nif(val %% 2 == 0)  count = count+1  \r\n}  \r\nprint(count)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-for-loop-5.png\" alt=\"R For Loop\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A for loop is the most popular control flow statement. A for loop is used to iterate a vector. It is similar to the while loop. There is only one difference between for and while, i.e., in while loop, the condition is checked before the execution of the body, but in for loop condition is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/338"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=338"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/338/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 339,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/338/revisions/339"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=338"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=338"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=338"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 340,
    "date": "2020-10-20T11:24:59",
    "date_gmt": "2020-10-20T11:24:59",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=340"
    },
    "modified": "2020-10-20T11:24:59",
    "modified_gmt": "2020-10-20T11:24:59",
    "slug": "r-repeat-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-repeat-loop/",
    "title": {
      "rendered": "R repeat loop"
    },
    "content": {
      "rendered": "\n<p>A repeat loop is used to iterate a block of code. It is a special type of loop in which there is no condition to exit from the loop. For exiting, we include a break statement with a user-defined condition. This property of the loop makes it different from the other loops.</p>\n\n\n\n<p>A repeat loop constructs with the help of the repeat keyword in R. It is very easy to construct an infinite loop in R.</p>\n\n\n\n<p>The basic syntax of the repeat loop is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>repeat {   \r\n   commands   \r\n   if(condition) {  \r\n      break  \r\n   }  \r\n} </code></pre>\n\n\n\n<p><strong>Flowchart</strong>&nbsp;<img src=\"https://static.javatpoint.com/tutorial/r/images/r-repeat-loop.png\" alt=\"R Repeat Loop\"></p>\n\n\n\n<ol><li>First, we have to initialize our variables than it will enter into the Repeat loop.</li><li>This loop will execute the group of statements inside the loop.</li><li>After that, we have to use any expression inside the loop to exit.</li><li>It will check for the condition. It will execute a break statement to exit from the loop</li><li>If the condition is true.</li><li>The statements inside the repeat loop will be executed again if the condition is false.</li></ol>\n\n\n\n<p><strong>Example 1:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>v &lt;- c(\"Hello\",\"repeat\",\"loop\")  \r\ncnt &lt;- 2  \r\nrepeat {  \r\n   print(v)  \r\n   cnt &lt;- cnt+1  \r\n     \r\n   if(cnt > 5) {  \r\n      break  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-repeat-loop-1.png\" alt=\"R Repeat Loop\"/></figure>\n\n\n\n<p><strong>Example 2:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>sum &lt;- 0  \r\n{  \r\n    n1&lt;-readline(prompt=\"Enter any integer value below 20: \" )  \r\n    n1&lt;-as.integer(n1)  \r\n}  \r\nrepeat{  \r\n    sum&lt;-sum+n1  \r\n    n1n1=n1+1  \r\n    if(n1>20){  \r\n        break  \r\n    }  \r\n}  \r\ncat(\"The sum of numbers from the repeat loop is: \",sum)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-repeat-loop-2.png\" alt=\"R Repeat Loop\"/></figure>\n\n\n\n<p><strong>Example 3: Infinity repeat loop</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>total&lt;-0  \r\nnumber&lt;-readline(prompt=\"please enter any integer value: \")  \r\nrepeat{  \r\ntotaltotal=total+number  \r\nnumbernumber=number+1  \r\ncat(\"sum is =\",total)  \r\n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-repeat-loop-3.png\" alt=\"R Repeat Loop\"/></figure>\n\n\n\n<p><strong>Example 4:</strong>&nbsp;repeat loop with next</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a &lt;- 1            \r\nrepeat {      \r\n  if(a == 10)    \r\n    break    \r\n  if(a == 7){    \r\n    aa=a+1  \r\n    next       \r\n  }  \r\n  print(a)    \r\n  a &lt;- a+1      \r\n}    </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-repeat-loop-4.png\" alt=\"R Repeat Loop\"/></figure>\n\n\n\n<p><strong>Example 5:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>terms&lt;-readline(prompt=\"How many terms do you want ?\")  \r\nterms&lt;-as.integer(terms)  \r\ni&lt;-1  \r\nrepeat{  \r\n    print(paste(\"The cube of number\",i,\"is =\",(i*i*i)))  \r\n    if(i==terms)  \r\n        break  \r\n    i&lt;-i+1  \r\n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-repeat-loop-5.png\" alt=\"R Repeat Loop\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A repeat loop is used to iterate a block of code. It is a special type of loop in which there is no condition to exit from the loop. For exiting, we include a break statement with a user-defined condition. This property of the loop makes it different from the other loops. A repeat loop [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/340"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=340"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/340/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 341,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/340/revisions/341"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=340"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=340"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=340"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 342,
    "date": "2020-10-20T11:26:30",
    "date_gmt": "2020-10-20T11:26:30",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=342"
    },
    "modified": "2020-10-20T11:26:30",
    "modified_gmt": "2020-10-20T11:26:30",
    "slug": "r-while-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-while-loop/",
    "title": {
      "rendered": "R while loop"
    },
    "content": {
      "rendered": "\n<p>A while loop is a type of control flow statements which is used to iterate a block of code several numbers of times. The while loop terminates when the value of the Boolean expression will be false.</p>\n\n\n\n<p>In while loop, firstly the condition will be checked and then after the body of the statement will execute. In this statement, the condition will be checked n+1 time, rather than n times.</p>\n\n\n\n<p>The basic syntax of while loop is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>while (test_expression) {  \r\n   statement  \r\n}  </code></pre>\n\n\n\n<p><strong>Flowchart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-while-loop.png\" alt=\"R While Loop\"/></figure>\n\n\n\n<p><strong>Example 1:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>v &lt;- c(\"Hello\",\"while loop\",\"example\")  \r\ncnt &lt;- 2  \r\nwhile (cnt &lt; 7) {  \r\n   print(v)  \r\n   cntcnt = cnt + 1  \r\n}}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-while-loop-1.png\" alt=\"R While Loop\"/></figure>\n\n\n\n<p><strong>Example 2:</strong>&nbsp;Program to find the sum of the digits of the number.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>n&lt;-readline(prompt=\"please enter any integer value: \")  \r\nplease enter any integer value: 12367906  \r\nn &lt;- as.integer(n)  \r\nsum&lt;-0  \r\nwhile(n!=0){  \r\n    sumsum=sum+(n%%10)  \r\n    n=as.integer(n/10)  \r\n}  \r\ncat(\"sum of the digits of the numbers is=\",sum)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-while-loop-2.png\" alt=\"R While Loop\"/></figure>\n\n\n\n<p><strong>Example 3:</strong>&nbsp;Program to check a number is palindrome or not.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>n &lt;- readline(prompt=\"Enter a four digit number please: \")  \r\nn &lt;- as.integer(n)  \r\nnum&lt;-n  \r\nrev&lt;-0  \r\nwhile(n!=0){  \r\n    rem&lt;-n%%10  \r\n    rev&lt;-rem+(rev*10)  \r\n    n&lt;-as.integer(n/10)  \r\n}  \r\nprint(rev)  \r\nif(rev==num){  \r\n    cat(num,\"is a palindrome num\")  \r\n}else{  \r\n    cat(num,\"is not a palindrome number\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-while-loop-3.png\" alt=\"R While Loop\"/></figure>\n\n\n\n<p><strong>Example 4:</strong>&nbsp;Program to check a number is Armstrong or not.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>num = as.integer(readline(prompt=\"Enter a number: \"))  \r\nsum = 0  \r\ntemp = num  \r\nwhile(temp > 0) {  \r\n    digit = temp %% 10  \r\n    sumsum = sum + (digit ^ 3)  \r\n    temp = floor(temp / 10)  \r\n}  \r\nif(num == sum) {  \r\n    print(paste(num, \"is an Armstrong number\"))  \r\n} else {  \r\n    print(paste(num, \"is not an Armstrong number\"))  \r\n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-while-loop-4.png\" alt=\"R While Loop\"/></figure>\n\n\n\n<p><strong>Example 5:</strong>&nbsp;program to find the frequency of a digit in the number.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>num = as.integer(readline(prompt=\"Enter a number: \"))  \r\ndigit = as.integer(readline(prompt=\"Enter digit: \"))  \r\nn=num  \r\ncount = 0  \r\nwhile(num > 0) {  \r\n        if(num%%10==digit){  \r\n            countcount=count+1  \r\n        }  \r\n        num=as.integer(num/10)  \r\n}  \r\nprint(paste(\"The frequency of\",digit,\"in\",n,\"is=\",count))  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-while-loop-5.png\" alt=\"R While Loop\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A while loop is a type of control flow statements which is used to iterate a block of code several numbers of times. The while loop terminates when the value of the Boolean expression will be false. In while loop, firstly the condition will be checked and then after the body of the statement will [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/342"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=342"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/342/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 343,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/342/revisions/343"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=342"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=342"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=342"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 344,
    "date": "2020-10-20T11:28:30",
    "date_gmt": "2020-10-20T11:28:30",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=344"
    },
    "modified": "2020-10-20T11:28:30",
    "modified_gmt": "2020-10-20T11:28:30",
    "slug": "r-functions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-functions/",
    "title": {
      "rendered": "R Functions"
    },
    "content": {
      "rendered": "\n<p>A set of statements which are organized together to perform a specific task is known as a function. R provides a series of in-built functions, and it allows the user to create their own functions. Functions are used to perform tasks in the modular approach.</p>\n\n\n\n<p>Functions are used to avoid repeating the same task and to reduce complexity. To understand and maintain our code, we logically break it into smaller parts using the function. A function should be</p>\n\n\n\n<ol><li>Written to carry out a specified task.</li><li>May or may not have arguments</li><li>Contain a body in which our code is written.</li><li>May or may not return one or more output values.</li></ol>\n\n\n\n<p><strong>&#8220;An R function is created by using the keyword function.&#8221;</strong>&nbsp;There is the following syntax of R function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>func_name &lt;- function(arg_1, arg_2, ...) {  \r\n   Function body   \r\n}  </code></pre>\n\n\n\n<h2>Components of Functions</h2>\n\n\n\n<p>There are four components of function, which are as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-components-of-functions.png\" alt=\"R Functions\"/></figure>\n\n\n\n<p><strong>Function Name</strong></p>\n\n\n\n<p>The function name is the actual name of the function. In R, the function is stored as an object with its name.</p>\n\n\n\n<p><strong>Arguments</strong></p>\n\n\n\n<p>In R, an argument is a placeholder. In function, arguments are optional means a function may or may not contain arguments, and these arguments can have default values also. We pass a value to the argument when a function is invoked.</p>\n\n\n\n<p><strong>Function Body</strong></p>\n\n\n\n<p>The function body contains a set of statements which defines what the function does.</p>\n\n\n\n<p><strong>Return value</strong></p>\n\n\n\n<p>It is the last expression in the function body which is to be evaluated.</p>\n\n\n\n<h2>Function Types</h2>\n\n\n\n<p>Similar to the other languages, R also has two types of function, i.e.&nbsp;<strong>Built-in Function</strong>&nbsp;and&nbsp;<strong>User-defined Function</strong>. In R, there are lots of built-in functions which we can directly call in the program without defining them. R also allows us to create our own functions.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-function-types.png\" alt=\"R Functions\"/></figure>\n\n\n\n<h3>Built-in function</h3>\n\n\n\n<p>The functions which are already created or defined in the programming framework are known as built-in functions. User doesn&#8217;t need to create these types of functions, and these functions are built into an application. End-users can access these functions by simply calling it. R have different types of built-in functions such as seq(), mean(), max(), and sum(x) etc.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating sequence of numbers from 32 to 46.  \r\nprint(seq(32,46))  \r\n  \r\n# Finding the mean of numbers from 22 to 80.  \r\nprint(mean(22:80))  \r\n  \r\n# Finding the sum of numbers from 41 to 70.  \r\nprint(sum(41:70))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-function-types-output1.png\" alt=\"R Functions\"/></figure>\n\n\n\n<h3>User-defined function</h3>\n\n\n\n<p>R allows us to create our own function in our program. A user defines a user-define function to fulfill the requirement of user. Once these functions are created, we can use these functions like in-built function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a function without an argument.  \r\nnew.function &lt;- function() {  \r\n   for(i in 1:5) {  \r\n      print(i^2)  \r\n   }  \r\n}     \r\n  \r\nnew.function()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-function-types-output2.png\" alt=\"R Functions\"/></figure>\n\n\n\n<h2>Function calling with an argument</h2>\n\n\n\n<p>We can easily call a function by passing an appropriate argument in the function. Let see an example to see how a function is called.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a function to print squares of numbers in sequence.  \r\nnew.function &lt;- function(a) {  \r\n   for(i in 1:a) {  \r\n      b &lt;- i^2  \r\n      print(b)  \r\n   }  \r\n  \r\n# Calling the function new.function supplying 10 as an argument.  \r\nnew.function(10)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-function-calling-with-an-argument.png\" alt=\"R Functions\"/></figure>\n\n\n\n<h2>Function calling with no argument</h2>\n\n\n\n<p>In R, we can call a function without an argument in the following way</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a function to print squares of numbers in sequence.  \r\nnew.function &lt;- function() {  \r\n   for(i in 1:5) {  \r\n      a &lt;- i^2  \r\n      print(a)  \r\n   }  \r\n}  \r\n  \r\n# Calling the function new.function with no argument.  \r\nnew.function()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-function-calling-with-no-argument.png\" alt=\"R Functions\"/></figure>\n\n\n\n<h2>Function calling with Argument Values</h2>\n\n\n\n<p>We can supply the arguments to a function call in the same sequence as defined in the function or can supply in a different sequence but assigned them to the names of the arguments.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a function with arguments.  \r\nnew.function &lt;- function(x,y,z) {  \r\n   result &lt;- x * y + z  \r\n   print(result)  \r\n}  \r\n  \r\n# Calling the function by position of arguments.  \r\nnew.function(11,13,9)  \r\n  \r\n# Calling the function by names of the arguments.  \r\nnew.function(x = 2, y = 5, z = 3)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-function-calling-with-argument-values.png\" alt=\"R Functions\"/></figure>\n\n\n\n<h2>Function calling with default arguments</h2>\n\n\n\n<p>To get the default result, we assign the value to the arguments in the function definition, and then we call the function without supplying argument. If we pass any argument in the function call, then it will get replaced with the default value of the argument in the function definition.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a function with arguments.  \r\nnew.function &lt;- function(x = 11, y = 24) {  \r\n   result &lt;- x * y  \r\n   print(result)  \r\n}  \r\n  \r\n# Calling the function without giving any argument.  \r\nnew.function()  \r\n  \r\n# Calling the function with giving new values of the argument.  \r\nnew.function(4,6)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-function-calling-with-default-arguments.png\" alt=\"R Functions\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A set of statements which are organized together to perform a specific task is known as a function. R provides a series of in-built functions, and it allows the user to create their own functions. Functions are used to perform tasks in the modular approach. Functions are used to avoid repeating the same task and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/344"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=344"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/344/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 345,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/344/revisions/345"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=344"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=344"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=344"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 346,
    "date": "2020-10-20T11:29:49",
    "date_gmt": "2020-10-20T11:29:49",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=346"
    },
    "modified": "2020-10-20T11:29:49",
    "modified_gmt": "2020-10-20T11:29:49",
    "slug": "r-built-in-functions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-built-in-functions/",
    "title": {
      "rendered": "R Built-in Functions"
    },
    "content": {
      "rendered": "\n<p>The functions which are already created or defined in the programming framework are known as a built-in function. R has a rich set of functions that can be used to perform almost every task for the user. These built-in functions are divided into the following categories based on their functionality.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-built-in-functions.png\" alt=\"R Built-in Functions\"/></figure>\n\n\n\n<h2>Math Functions</h2>\n\n\n\n<p>R provides the various mathematical functions to perform the mathematical calculation. These mathematical functions are very helpful to find absolute value, square value and much more calculations. In R, there are the following functions which are used:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Function</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>abs(x)</td><td>It returns the absolute value of input x.</td><td>x&lt;- -4 print(abs(x)) <strong>Output</strong>[1] 4</td></tr><tr><td><strong>2.</strong></td><td>sqrt(x)</td><td>It returns the square root of input x.</td><td>x&lt;- 4 print(sqrt(x)) <strong>Output</strong>[1] 2</td></tr><tr><td><strong>3.</strong></td><td>ceiling(x)</td><td>It returns the smallest integer which is larger than or equal to x.</td><td>x&lt;- 4.5 print(ceiling(x)) <strong>Output</strong>[1] 5</td></tr><tr><td><strong>4.</strong></td><td>floor(x)</td><td>It returns the largest integer, which is smaller than or equal to x.</td><td>x&lt;- 2.5 print(floor(x)) <strong>Output</strong>[1] 2</td></tr><tr><td><strong>5.</strong></td><td>trunc(x)</td><td>It returns the truncate value of input x.</td><td>x&lt;- c(1.2,2.5,8.1) print(trunc(x)) <strong>Output</strong>[1] 1 2 8</td></tr><tr><td><strong>6.</strong></td><td>round(x, digits=n)</td><td>It returns round value of input x.</td><td>x&lt;- -4 print(abs(x)) <strong>Output</strong>4</td></tr><tr><td><strong>7.</strong></td><td>cos(x), sin(x), tan(x)</td><td>It returns cos(x), sin(x) value of input x.</td><td>x&lt;- 4 print(cos(x)) print(sin(x)) print(tan(x)) <strong>Output</strong>[1] -06536436 [2] -0.7568025 [3] 1.157821</td></tr><tr><td><strong>8.</strong></td><td>log(x)</td><td>It returns natural logarithm of input x.</td><td>x&lt;- 4 print(log(x)) <strong>Output</strong>[1] 1.386294</td></tr><tr><td><strong>9.</strong></td><td>log10(x)</td><td>It returns common logarithm of input x.</td><td>x&lt;- 4 print(log10(x)) <strong>Output</strong>[1] 0.60206</td></tr><tr><td><strong>10.</strong></td><td>exp(x)</td><td>It returns exponent.</td><td>x&lt;- 4 print(exp(x)) <strong>Output</strong>[1] 54.59815</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>String Function</h2>\n\n\n\n<p>R provides various string functions to perform tasks. These string functions allow us to extract sub string from string, search pattern etc. There are the following string functions in R:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Function</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>substr(x, start=n1,stop=n2)</td><td>It is used to extract substrings in a character vector.</td><td>a &lt;- &#8220;987654321&#8221; substr(a, 3, 3) <strong>Output</strong>[1] &#8220;3&#8221;</td></tr><tr><td><strong>2.</strong></td><td>grep(pattern, x , ignore.case=FALSE, fixed=FALSE)</td><td>It searches for pattern in x.</td><td>st1 &lt;- c(&#8216;abcd&#8217;,&#8217;bdcd&#8217;,&#8217;abcdabcd&#8217;) pattern&lt;- &#8216;^abc&#8217; print(grep(pattern, st1)) <strong>Output</strong>[1] 1 3</td></tr><tr><td><strong>3.</strong></td><td>sub(pattern, replacement, x, ignore.case =FALSE, fixed=FALSE)</td><td>It finds pattern in x and replaces it with replacement (new) text.</td><td>st1&lt;- &#8220;England is beautiful but no the part of EU&#8221; sub(&#8220;England&#8217;, &#8220;UK&#8221;, st1) <strong>Output</strong>[1] &#8220;UK is beautiful but not a part of EU&#8221;</td></tr><tr><td><strong>4.</strong></td><td>paste(&#8230;, sep=&#8221;&#8221;)</td><td>It concatenates strings after using sep string to separate them.</td><td>paste(&#8216;one&#8217;,2,&#8217;three&#8217;,4,&#8217;five&#8217;) <strong>Output</strong>[1] one 2 three 4 five</td></tr><tr><td><strong>5.</strong></td><td>strsplit(x, split)</td><td>It splits the elements of character vector x at split point.</td><td>a&lt;-&#8220;Split all the character&#8221; print(strsplit(a, &#8220;&#8221;)) <strong>Output</strong>[[1]] [1] &#8220;split&#8221; &#8220;all&#8221; &#8220;the&#8221; &#8220;character&#8221;</td></tr><tr><td><strong>6.</strong></td><td>tolower(x)</td><td>It is used to convert the string into lower case.</td><td>st1&lt;- &#8220;shuBHAm&#8221; print(tolower(st1)) <strong>Output</strong>[1] shubham</td></tr><tr><td><strong>7.</strong></td><td>toupper(x)</td><td>It is used to convert the string into upper case.</td><td>st1&lt;- &#8220;shuBHAm&#8221; print(toupper(st1)) <strong>Output</strong>[1] SHUBHAM</td></tr></tbody></table></figure>\n\n\n\n<h2>Statistical Probability Functions</h2>\n\n\n\n<p>R provides various statistical probability functions to perform statistical task. These statistical functions are very helpful to find normal density, normal quantile and many more calculation. In R, there are following functions which are used:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Function</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>dnorm(x, m=0, sd=1, log=False)</td><td>It is used to find the height of the probability distribution at each point to a given mean and standard deviation</td><td>a &lt;- seq(-7, 7, by=0.1) b &lt;- dnorm(a, mean=2.5, sd=0.5) png(file=&#8221;dnorm.png&#8221;) plot(x,y) dev.off()</td></tr><tr><td><strong>2.</strong></td><td>pnorm(q, m=0, sd=1, lower.tail=TRUE, log.p=FALSE)</td><td>it is used to find the probability of a normally distributed random numbers which are less than the value of a given number.</td><td>a &lt;- seq(-7, 7, by=0.2) b &lt;- dnorm(a, mean=2.5, sd=2) png(file=&#8221;pnorm.png&#8221;) plot(x,y) dev.off()</td></tr><tr><td><strong>3.</strong></td><td>qnorm(p, m=0, sd=1)</td><td>It is used to find a number whose cumulative value matches with the probability value.</td><td>a &lt;- seq(1, 2, by=002) b &lt;- qnorm(a, mean=2.5, sd=0.5) png(file=&#8221;qnorm.png&#8221;) plot(x,y) dev.off()</td></tr><tr><td><strong>4.</strong></td><td>rnorm(n, m=0, sd=1)</td><td>It is used to generate random numbers whose distribution is normal.</td><td>y &lt;- rnorm(40) png(file=&#8221;rnorm.png&#8221;) hist(y, main=&#8221;Normal Distribution&#8221;) dev.off()</td></tr><tr><td><strong>5.</strong></td><td>dbinom(x, size, prob)</td><td>It is used to find the probability density distribution at each point.</td><td>a&lt;-seq(0, 40, by=1) b&lt;- dbinom(a, 40, 0.5) png(file=&#8221;pnorm.png&#8221;) plot(x,y) dev.off()</td></tr><tr><td><strong>6.</strong></td><td>pbinom(q, size, prob)</td><td>It is used to find the cumulative probability (a single value representing the probability) of an event.</td><td>a &lt;- pbinom(25, 40,0.5) print(a) <strong>Output</strong>[1] 0.9596548</td></tr><tr><td><strong>7.</strong></td><td>qbinom(p, size, prob)</td><td>It is used to find a number whose cumulative value matches the probability value.</td><td>a &lt;- qbinom(0.25, 40,01/2) print(a) <strong>Output</strong>[1] 18</td></tr><tr><td><strong>8.</strong></td><td>rbinom(n, size, prob)</td><td>It is used to generate required number of random values of a given probability from a given sample.</td><td>a &lt;- rbinom(6, 140,0.4) print(a) <strong>Output</strong>[1] 55 61 46 56 58 49</td></tr><tr><td><strong>9.</strong></td><td>dpois(x, lamba)</td><td>it is the probability of x successes in a period when the expected number of events is lambda (λ)</td><td>dpois(a=2, lambda=3)+dpois(a=3, lambda=3)+dpois(z=4, labda=4) <strong>Output</strong>[1] 0.616115</td></tr><tr><td><strong>10.</strong></td><td>ppois(q, lamba)</td><td>It is a cumulative probability of less than or equal to q successes.</td><td>ppois(q=4, lambda=3, lower.tail=TRUE)-ppois(q=1, lambda=3, lower.tail=TRUE) <strong>Output</strong>[1] 0.6434504</td></tr><tr><td><strong>11.</strong></td><td>rpois(n, lamba)</td><td>It is used to generate random numbers from the poisson distribution.</td><td>rpois(10, 10) [1] 6 10 11 3 10 7 7 8 14 12</td></tr><tr><td><strong>12.</strong></td><td>dunif(x, min=0, max=1)</td><td>This function provide information about the uniform distribution on the interval from min to max. It gives the density.</td><td>dunif(x, min=0, max=1, log=FALSE)</td></tr><tr><td><strong>13.</strong></td><td>punif(q, min=0, max=1)</td><td>It gives the distributed function</td><td>punif(q, min=0, max=1, lower.tail=TRUE, log.p=FALSE)</td></tr><tr><td><strong>14.</strong></td><td>qunif(p, min=0, max=1)</td><td>It gives the quantile function.</td><td>qunif(p, min=0, max=1, lower.tail=TRUE, log.p=FALSE)</td></tr><tr><td><strong>15.</strong></td><td>runif(x, min=0, max=1)</td><td>It generates random deviates.</td><td>runif(x, min=0, max=1)</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Other Statistical Function</h2>\n\n\n\n<p>Apart from the functions mentioned above, there are some other useful functions which helps for statistical purpose. There are the following functions:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S. No</th><th>Function</th><th>Description</th><th>Example</th></tr><tr><td><strong>1.</strong></td><td>mean(x, trim=0, na.rm=FALSE)</td><td>It is used to find the mean for x object</td><td>a&lt;-c(0:10, 40) xm&lt;-mean(a) print(xm) <strong>Output</strong>[1] 7.916667</td></tr><tr><td><strong>2.</strong></td><td>sd(x)</td><td>It returns standard deviation of an object.</td><td>a&lt;-c(0:10, 40) xm&lt;-sd(a) print(xm) <strong>Output</strong>[1] 10.58694</td></tr><tr><td><strong>3.</strong></td><td>median(x)</td><td>It returns median.</td><td>a&lt;-c(0:10, 40) xm&lt;-meadian(a) print(xm) <strong>Output</strong>[1] 5.5</td></tr><tr><td><strong>4.</strong></td><td>quantilie(x, probs)</td><td>It returns quantile where x is the numeric vector whose quantiles are desired and probs is a numeric vector with probabilities in [0, 1]</td><td></td></tr><tr><td><strong>5.</strong></td><td>range(x)</td><td>It returns range.</td><td>a&lt;-c(0:10, 40) xm&lt;-range(a) print(xm) <strong>Output</strong>[1] 0 40</td></tr><tr><td><strong>6.</strong></td><td>sum(x)</td><td>It returns sum.</td><td>a&lt;-c(0:10, 40) xm&lt;-sum(a) print(xm) <strong>Output</strong>[1] 95</td></tr><tr><td><strong>7.</strong></td><td>diff(x, lag=1)</td><td>It returns differences with lag indicating which lag to use.</td><td>a&lt;-c(0:10, 40) xm&lt;-diff(a) print(xm) <strong>Output</strong>[1] 1 1 1 1 1 1 1 1 1 1 30</td></tr><tr><td><strong>8.</strong></td><td>min(x)</td><td>It returns minimum value.</td><td>a&lt;-c(0:10, 40) xm&lt;-min(a) print(xm) <strong>Output</strong>[1] 0</td></tr><tr><td><strong>9.</strong></td><td>max(x)</td><td>It returns maximum value</td><td>a&lt;-c(0:10, 40) xm&lt;-max(a) print(xm) <strong>Output</strong>[1] 40</td></tr><tr><td><strong>10.</strong></td><td>scale(x, center=TRUE, scale=TRUE)</td><td>Column center or standardize a matrix.</td><td>a &lt;- matrix(1:9,3,3) scale(x) <strong>Output</strong>[,1] [1,] -0.747776547 [2,] -0.653320562 [3,] -0.558864577 [4,] -0.464408592 [5,] -0.369952608 [6,] -0.275496623 [7,] -0.181040638 [8,] -0.086584653 [9,] 0.007871332 [10,] 0.102327317 [11,] 0.196783302 [12,] 3.030462849 attr(,&#8221;scaled:center&#8221;) [1] 7.916667 attr(,&#8221;scaled:scale&#8221;) [1] 10.58694</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The functions which are already created or defined in the programming framework are known as a built-in function. R has a rich set of functions that can be used to perform almost every task for the user. These built-in functions are divided into the following categories based on their functionality. Math Functions R provides the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/346"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=346"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/346/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 347,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/346/revisions/347"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=346"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=346"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=346"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 348,
    "date": "2020-10-20T11:48:32",
    "date_gmt": "2020-10-20T11:48:32",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=348"
    },
    "modified": "2020-10-20T11:48:32",
    "modified_gmt": "2020-10-20T11:48:32",
    "slug": "r-vector",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-vector/",
    "title": {
      "rendered": "R Vector"
    },
    "content": {
      "rendered": "\n<p>A&nbsp;<strong>vector</strong>&nbsp;is a basic data structure which plays an important role in R programming.</p>\n\n\n\n<p>In R, a sequence of elements which share the same data type is known as vector. A vector supports logical, integer, double, character, complex, or raw data type. The elements which are contained in vector known as&nbsp;<strong>components</strong>&nbsp;of the vector. We can check the type of vector with the help of the&nbsp;<strong>typeof()</strong>&nbsp;function.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vector.png\" alt=\"R Vector\"/></figure>\n\n\n\n<p>The length is an important property of a vector. A vector length is basically the number of elements in the vector, and it is calculated with the help of the length() function.</p>\n\n\n\n<p>Vector is classified into two parts, i.e.,&nbsp;<strong>Atomic vectors</strong>&nbsp;and&nbsp;<strong>Lists</strong>. They have three common properties, i.e.,&nbsp;<strong>function type, function length</strong>, and&nbsp;<strong>attribute function</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vector-1.png\" alt=\"R Vector\"/></figure>\n\n\n\n<p>There is only one difference between atomic vectors and lists. In an atomic vector, all the elements are of the same type, but in the list, the elements are of different data types. In this section, we will discuss only the atomic vectors. We will discuss lists briefly in the next topic.</p>\n\n\n\n<h2>How to create a vector in R?</h2>\n\n\n\n<p>In R, we use c() function to create a vector. This function returns a one-dimensional array or simply vector. The c() function is a generic function which combines its argument. All arguments are restricted with a common data type which is the type of the returned value. There are various other ways to create a vector in R, which are as follows:</p>\n\n\n\n<h3>1) Using the colon(:) operator</h3>\n\n\n\n<p>We can create a vector with the help of the colon operator. There is the following syntax to use colon operator:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>z&lt;-x:y   </code></pre>\n\n\n\n<p>This operator creates a vector with elements from x to y and assigns it to z.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-4:-10  \r\na  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1]   4   3   2   1   0   -1   -2   -3   -4   -5   -6   -7   -8   -9   -10\n</code></pre>\n\n\n\n<h3>2) Using the seq() function</h3>\n\n\n\n<p>In R, we can create a vector with the help of the seq() function. A sequence function creates a sequence of elements as a vector. The seq() function is used in two ways, i.e., by setting step size with ?by&#8217; parameter or specifying the length of the vector with the &#8216;length.out&#8217; feature.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>seq_vec&lt;-seq(1,4,by=0.5)  \r\nseq_vec  \r\nclass(seq_vec)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1]   1.0   1.5   2.0   2.5   3.0   3.5   4.0\n</code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>seq_vec&lt;-seq(1,4,length.out=6)  \r\nseq_vec  \r\nclass(seq_vec)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1]   1.0   1.6   2.2   2.8   3.4   4.0\n&#91;1]   \"numeric\"\n</code></pre>\n\n\n\n<h2>Atomic vectors in R</h2>\n\n\n\n<p>In R, there are four types of atomic vectors. Atomic vectors play an important role in Data Science. Atomic vectors are created with the help of&nbsp;<strong>c()</strong>&nbsp;function. These atomic vectors are as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vector-2.png\" alt=\"R Vector\"/></figure>\n\n\n\n<h3>Numeric vector</h3>\n\n\n\n<p>The decimal values are known as numeric data types in R. If we assign a decimal value to any variable d, then this d variable will become a numeric type. A vector which contains numeric elements is known as a numeric vector.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>d&lt;-45.5  \r\nnum_vec&lt;-c(10.1, 10.2, 33.2)  \r\nd  \r\nnum_vec  \r\nclass(d)  \r\nclass(num_vec) </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1]   45.5\n&#91;1]   10.1   10.2   33.2\n&#91;1]   \"numeric\"\n&#91;1]   \"numeric\"\n</code></pre>\n\n\n\n<h3>Integer vector</h3>\n\n\n\n<p>A non-fraction numeric value is known as integer data. This integer data is represented by &#8220;Int.&#8221; The Int size is 2 bytes and long Int size of 4 bytes. There is two way to assign an integer value to a variable, i.e., by using as.integer() function and appending of L to the value.</p>\n\n\n\n<p>A vector which contains integer elements is known as an integer vector.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>d&lt;-as.integer(5)  \r\ne&lt;-5L  \r\nint_vec&lt;-c(1,2,3,4,5)  \r\nint_vec&lt;-as.integer(int_vec)  \r\nint_vec1&lt;-c(1L,2L,3L,4L,5L)  \r\nclass(d)  \r\nclass(e)  \r\nclass(int_vec)  \r\nclass(int_vec1)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1]   \"integer\"\n&#91;1]   \"integer\"\n&#91;1]   \"integer\"\n&#91;1]   \"integer\"\n</code></pre>\n\n\n\n<h3>Character vector</h3>\n\n\n\n<p>A character is held as a one-byte integer in memory. In R, there are two different ways to create a character data type value, i.e., using as.character() function and by typing string between double quotes(&#8220;&#8221;) or single quotes(&#8221;).</p>\n\n\n\n<p>A vector which contains character elements is known as an integer vector.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>d&lt;-'shubham'  \r\ne&lt;-\"Arpita\"  \r\nf&lt;-65  \r\nf&lt;-as.character(f)  \r\nd  \r\ne  \r\nf  \r\nchar_vec&lt;-c(1,2,3,4,5)  \r\nchar_vec&lt;-as.character(char_vec)  \r\nchar_vec1&lt;-c(\"shubham\",\"arpita\",\"nishka\",\"vaishali\")  \r\nchar_vec  \r\nclass(d)  \r\nclass(e)  \r\nclass(f)  \r\nclass(char_vec)  \r\nclass(char_vec1)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1]   \"shubham\"\n&#91;1]   \"Arpita\"\n&#91;1]   \"65\"\n&#91;1]   \"1\"   \"2\"   \"3\"   \"4\"   \"5\"\n&#91;1]   \"shubham\"   \"arpita\"   \"nishka\"   \"vaishali\"\n&#91;1]   \"character\"\n&#91;1]   \"character\"\n&#91;1]   \"character\"\n&#91;1]   \"character\"\n&#91;1]   \"character\"\n</code></pre>\n\n\n\n<h3>Logical vector</h3>\n\n\n\n<p>The logical data types have only two values i.e., True or False. These values are based on which condition is satisfied. A vector which contains Boolean values is known as the logical vector.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>d&lt;-as.integer(5)  \r\ne&lt;-as.integer(6)  \r\nf&lt;-as.integer(7)  \r\ng&lt;-d>e  \r\nh&lt;-e&lt;f  \r\ng  \r\nh  \r\nlog_vec&lt;-c(d&lt;e, d&lt;f, e&lt;d,e&lt;f,f&lt;d,f&lt;e)  \r\nlog_vec  \r\nclass(g)  \r\nclass(h)  \r\nclass(log_vec)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1]   FALSE\n&#91;1]   TRUE\n&#91;1]   TRUE   TRUE   FALSE   TRUE   FALSE   FALSE\n&#91;1]   \"logical\"\n&#91;1]   \"logical\"\n&#91;1]   \"logical\"\n</code></pre>\n\n\n\n<h2>Accessing elements of vectors</h2>\n\n\n\n<p>We can access the elements of a vector with the help of vector indexing. Indexing denotes the position where the value in a vector is stored. Indexing will be performed with the help of integer, character, or logic.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vector-3.png\" alt=\"R Vector\"/></figure>\n\n\n\n<h3>1) Indexing with integer vector</h3>\n\n\n\n<p>On integer vector, indexing is performed in the same way as we have applied in C, C++, and java. There is only one difference, i.e., in C, C++, and java the indexing starts from 0, but in R, the indexing starts from 1. Like other programming languages, we perform indexing by specifying an integer value in square braces [] next to our vector.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>seq_vec&lt;-seq(1,4,length.out=6)  \r\nseq_vec  \r\nseq_vec&#91;2]  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] 1.0 1.6 2.2 2.8 3.4 4.0\n&#91;1] 1.6\n</code></pre>\n\n\n\n<h3>2) Indexing with a character vector</h3>\n\n\n\n<p>In character vector indexing, we assign a unique key to each element of the vector. These keys are uniquely defined as each element and can be accessed very easily. Let&#8217;s see an example to understand how it is performed.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>char_vec&lt;-c(\"shubham\"=22,\"arpita\"=23,\"vaishali\"=25)  \r\nchar_vec  \r\nchar_vec&#91;\"arpita\"]  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>shubham   arpita vaishali\n   22      23     25\narpita\n      23\n</code></pre>\n\n\n\n<h3>3) Indexing with a logical vector</h3>\n\n\n\n<p>In logical indexing, it returns the values of those positions whose corresponding position has a logical vector TRUE. Let see an example to understand how it is performed on vectors.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-c(1,2,3,4,5,6)  \r\na&#91;c(TRUE,FALSE,TRUE,TRUE,FALSE,TRUE)]  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] 1 3 4 6\n</code></pre>\n\n\n\n<h2>Vector Operation</h2>\n\n\n\n<p>In R, there are various operation which is performed on the vector. We can add, subtract, multiply or divide two or more vectors from each other. In data science, R plays an important role, and operations are required for data manipulation. There are the following types of operation which are performed on the vector.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vector-4.png\" alt=\"R Vector\"/></figure>\n\n\n\n<h3>1) Combining vectors</h3>\n\n\n\n<p>The c() function is not only used to create a vector, but also it is also used to combine two vectors. By combining one or more vectors, it forms a new vector which contains all the elements of each vector. Let see an example to see how c() function combines the vectors.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>p&lt;-c(1,2,4,5,7,8)  \r\nq&lt;-c(\"shubham\",\"arpita\",\"nishka\",\"gunjan\",\"vaishali\",\"sumit\")  \r\nr&lt;-c(p,q)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"1\"        \"2\"        \"4\"        \"5\"        \"7\"        \"8\"\n&#91;7] \"shubham\"  \"arpita\"   \"nishka\"   \"gunjan\"   \"vaishali\" \"sumit\"\n</code></pre>\n\n\n\n<h3>2) Arithmetic operations</h3>\n\n\n\n<p>We can perform all the arithmetic operation on vectors. The arithmetic operations are performed member-by-member on vectors. We can add, subtract, multiply, or divide two vectors. Let see an example to understand how arithmetic operations are performed on vectors.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-c(1,3,5,7)  \r\nb&lt;-c(2,4,6,8)  \r\na+b  \r\na-b  \r\na/b  \r\na%%b  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1]  3  7 11 15 \n&#91;1] -1 -1 -1 -1\n&#91;1]  2 12 30 56\n&#91;1] 0.5000000 0.7500000 0.8333333 0.8750000\n&#91;1] 1 3 5 7\n</code></pre>\n\n\n\n<h3>3) Logical Index vector</h3>\n\n\n\n<p>With the help of the logical index vector in R, we can form a new vector from a given vector. This vector has the same length as the original vector. The vector members are TRUE only when the corresponding members of the original vector are included in the slice; otherwise, it will be false. Let see an example to understand how a new vector is formed with the help of logical index vector.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-c(\"Shubham\",\"Arpita\",\"Nishka\",\"Vaishali\",\"Sumit\",\"Gunjan\")  \r\nb&lt;-c(TRUE,FALSE,TRUE,TRUE,FALSE,FALSE)  \r\na&#91;b]  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"Shubham\"  \"Nishka\"   \"Vaishali\"\n</code></pre>\n\n\n\n<h3>4) Numeric Index</h3>\n\n\n\n<p>In R, we specify the index between square braces [ ] for indexing a numerical value. If our index is negative, it will return us all the values except for the index which we have specified. For example, specifying [-3] will prompt R to convert -3 into its absolute value and then search for the value which occupies that index.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>q&lt;-c(\"shubham\",\"arpita\",\"nishka\",\"gunjan\",\"vaishali\",\"sumit\")  \r\nq&#91;2]  \r\nq&#91;-4]  \r\nq&#91;15]  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"arpita\"\n&#91;1] \"shubham\"  \"arpita\"   \"nishka\"   \"vaishali\" \"sumit\"\n&#91;1] NA\n</code></pre>\n\n\n\n<h3>5) Duplicate Index</h3>\n\n\n\n<p>An index vector allows duplicate values which means we can access one element twice in one operation. Let see an example to understand how duplicate index works.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>q&lt;-c(\"shubham\",\"arpita\",\"nishka\",\"gunjan\",\"vaishali\",\"sumit\")  \r\nq&#91;c(2,4,4,3)]    </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"arpita\" \"gunjan\" \"gunjan\" \"nishka\"\n</code></pre>\n\n\n\n<h3>6) Range Indexes</h3>\n\n\n\n<p>Range index is used to slice our vector to form a new vector. For slicing, we used colon(:) operator. Range indexes are very helpful for the situation involving a large operator. Let see an example to understand how slicing is done with the help of the colon operator to form a new vector.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>q&lt;-c(\"shubham\",\"arpita\",\"nishka\",\"gunjan\",\"vaishali\",\"sumit\")  \r\nb&lt;-q&#91;2:5]  \r\nb  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"arpita\"   \"nishka\"   \"gunjan\"   \"vaishali\"\n</code></pre>\n\n\n\n<h3>7) Out-of-order Indexes</h3>\n\n\n\n<p>In R, the index vector can be out-of-order. Below is an example in which a vector slice with the order of first and second values reversed.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>q&lt;-c(\"shubham\",\"arpita\",\"nishka\",\"gunjan\",\"vaishali\",\"sumit\")b&lt;-q&#91;2:5]  \r\nq&#91;c(2,1,3,4,5,6)]  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"arpita\"   \"shubham\"  \"nishka\"   \"gunjan\"   \"vaishali\" \"sumit\"\n</code></pre>\n\n\n\n<h3>8) Named vectors members</h3>\n\n\n\n<p>We first create our vector of characters as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>z=c(\"TensorFlow\",\"PyTorch\")  \r\nz  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"TensorFlow\" \"PyTorch\"\n</code></pre>\n\n\n\n<p>Once our vector of characters is created, we name the first vector member as &#8220;Start&#8221; and the second member as &#8220;End&#8221; as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>names(z)=c(\"Start\",\"End\")  \r\nz  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Start              End\n\"TensorFlow\"    \"PyTorch\"\n</code></pre>\n\n\n\n<p>We retrieve the first member by its name as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>z&#91;\"Start\"]  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Start\n\"TensorFlow\"\n</code></pre>\n\n\n\n<p>We can reverse the order with the help of the character string index vector.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>z&#91;c(\"Second\",\"First\")]  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>     Second        First\n\"PyTorch\"    \"TensorFlow\"\n</code></pre>\n\n\n\n<h2>Applications of vectors</h2>\n\n\n\n<ol><li>In machine learning for principal component analysis vectors are used. They are extended to eigenvalues and eigenvector and then used for performing decomposition in vector spaces.</li><li>The inputs which are provided to the deep learning model are in the form of vectors. These vectors consist of standardized data which is supplied to the input layer of the neural network.</li><li>In the development of support vector machine algorithms, vectors are used.</li><li>Vector operations are utilized in neural networks for various operations like image recognition and text processing.</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A&nbsp;vector&nbsp;is a basic data structure which plays an important role in R programming. In R, a sequence of elements which share the same data type is known as vector. A vector supports logical, integer, double, character, complex, or raw data type. The elements which are contained in vector known as&nbsp;components&nbsp;of the vector. We can check [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/348"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=348"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/348/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 349,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/348/revisions/349"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=348"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=348"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=348"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 351,
    "date": "2020-10-21T10:23:24",
    "date_gmt": "2020-10-21T10:23:24",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=351"
    },
    "modified": "2020-10-21T10:23:24",
    "modified_gmt": "2020-10-21T10:23:24",
    "slug": "r-lists",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-lists/",
    "title": {
      "rendered": "R Lists"
    },
    "content": {
      "rendered": "\n<p>In R, lists are the second type of vector. Lists are the objects of R which contain elements of different types such as number, vectors, string and another list inside it. It can also contain a function or a matrix as its elements. A list is a data structure which has components of mixed data types. We can say, a list is a generic vector which contains other objects.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>vec &lt;- c(3,4,5,6)  \r\nchar_vec&lt;-c(\"shubham\",\"nishka\",\"gunjan\",\"sumit\")  \r\nlogic_vec&lt;-c(TRUE,FALSE,FALSE,TRUE)  \r\nout_list&lt;-list(vec,char_vec,logic_vec)  \r\nout_list  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1]]\n&#91;1] 3 4 5 6\n&#91;&#91;2]]\n&#91;1] \"shubham\" \"nishka\"  \"gunjan\"  \"sumit\"\n&#91;&#91;3]]\n&#91;1]  TRUE FALSE FALSE  TRUE\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-lists.png\" alt=\"R Lists\"/></figure>\n\n\n\n<h2>Lists creation</h2>\n\n\n\n<p>The process of creating a list is the same as a vector. In R, the vector is created with the help of c() function. Like c() function, there is another function, i.e., list() which is used to create a list in R. A list avoid the drawback of the vector which is data type. We can add the elements in the list of different data types.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>list() </code></pre>\n\n\n\n<p><strong>Example 1:</strong>&nbsp;Creating list with same data type</p>\n\n\n\n<pre class=\"wp-block-code\"><code>list_1&lt;-list(1,2,3)  \r\nlist_2&lt;-list(\"Shubham\",\"Arpita\",\"Vaishali\")  \r\nlist_3&lt;-list(c(1,2,3))  \r\nlist_4&lt;-list(TRUE,FALSE,TRUE)  \r\nlist_1  \r\nlist_2  \r\nlist_3  \r\nlist_4  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1]]\n&#91;1] 1\n&#91;&#91;2]]\n&#91;1] 2\n&#91;&#91;3]]\n&#91;1] 3\n\n&#91;&#91;1]]\n&#91;1] \"Shubham\"\n&#91;&#91;2]]\n&#91;1] \"Arpita\"\n&#91;&#91;3]]\n&#91;1] \"Vaishali\"\n\n&#91;&#91;1]]\n&#91;1] 1 2 3\n\n&#91;&#91;1]]\n&#91;1] TRUE\n&#91;&#91;2]]\n&#91;1] FALSE\n&#91;&#91;3]]\n&#91;1] TRUE\n</code></pre>\n\n\n\n<p><strong>Example 2:</strong>&nbsp;Creating the list with different data type</p>\n\n\n\n<pre class=\"wp-block-code\"><code>list_data&lt;-list(\"Shubham\",\"Arpita\",c(1,2,3,4,5),TRUE,FALSE,22.5,12L)  \r\nprint(list_data)  </code></pre>\n\n\n\n<p>In the above example, the list function will create a list with character, logical, numeric, and vector element. It will give the following output</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1]]\n&#91;1] \"Shubham\"\n&#91;&#91;2]]\n&#91;1] \"Arpita\"\n&#91;&#91;3]]\n&#91;1] 1 2 3 4 5\n&#91;&#91;4]]\n&#91;1] TRUE\n&#91;&#91;5]]\n&#91;1] FALSE\n&#91;&#91;6]]\n&#91;1] 22.5\n&#91;&#91;7]]\n&#91;1] 12\n</code></pre>\n\n\n\n<h2>Giving a name to list elements</h2>\n\n\n\n<p>R provides a very easy way for accessing elements, i.e., by giving the name to each element of a list. By assigning names to the elements, we can access the element easily. There are only three steps to print the list data corresponding to the name:</p>\n\n\n\n<ol><li>Creating a list.</li><li>Assign a name to the list elements with the help of names() function.</li><li>Print the list data.</li></ol>\n\n\n\n<p>Let see an example to understand how we can give the names to the list elements.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a list containing a vector, a matrix and a list.  \r\nlist_data &lt;- list(c(\"Shubham\",\"Nishka\",\"Gunjan\"), matrix(c(40,80,60,70,90,80), nrow = 2),  \r\n   list(\"BCA\",\"MCA\",\"B.tech\"))  \r\n  \r\n# Giving names to the elements in the list.  \r\nnames(list_data) &lt;- c(\"Students\", \"Marks\", \"Course\")  \r\n  \r\n# Show the list.  \r\nprint(list_data)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>$Students\n&#91;1] \"Shubham\" \"Nishka\"  \"Gunjan\"\n\n$Marks\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]   40   60   90\n&#91;2,]   80   70   80\n\n$Course\n$Course&#91;&#91;1]]\n&#91;1] \"BCA\"\n\n$Course&#91;&#91;2]]\n&#91;1] \"MCA\"\n\n$Course&#91;&#91;3]]\n&#91;1] \"B. tech.\"\n</code></pre>\n\n\n\n<h2>Accessing List Elements</h2>\n\n\n\n<p>R provides two ways through which we can access the elements of a list. First one is the indexing method performed in the same way as a vector. In the second one, we can access the elements of a list with the help of names. It will be possible only with the named list.; we cannot access the elements of a list using names if the list is normal.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-lists-1.png\" alt=\"R Lists\"/></figure>\n\n\n\n<p>Let see an example of both methods to understand how they are used in the list to access elements.</p>\n\n\n\n<p><strong>Example 1:</strong> Accessing elements using index</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a list containing a vector, a matrix and a list.  \r\nlist_data &lt;- list(c(\"Shubham\",\"Arpita\",\"Nishka\"), matrix(c(40,80,60,70,90,80), nrow = 2),  \r\n   list(\"BCA\",\"MCA\",\"B.tech\"))  \r\n# Accessing the first element of the list.  \r\nprint(list_data&#91;1])  \r\n  \r\n# Accessing the third element. The third element is also a list, so all its elements will be printed.  \r\nprint(list_data&#91;3]) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1]]\n&#91;1] \"Shubham\" \"Arpita\"  \"Nishka\"\n\n&#91;&#91;1]]\n&#91;&#91;1]]&#91;&#91;1]]\n&#91;1] \"BCA\"\n\n&#91;&#91;1]]&#91;&#91;2]]\n&#91;1] \"MCA\"\n\n&#91;&#91;1]]&#91;&#91;3]]\n&#91;1] \"B.tech\"\n</code></pre>\n\n\n\n<p><strong>Example 2:</strong>&nbsp;Accessing elements using names</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a list containing a vector, a matrix and a list.  \r\nlist_data &lt;- list(c(\"Shubham\",\"Arpita\",\"Nishka\"), matrix(c(40,80,60,70,90,80), nrow = 2),list(\"BCA\",\"MCA\",\"B.tech\"))  \r\n# Giving names to the elements in the list.  \r\nnames(list_data) &lt;- c(\"Student\", \"Marks\", \"Course\")  \r\n# Accessing the first element of the list.  \r\nprint(list_data&#91;\"Student\"])  \r\nprint(list_data$Marks)  \r\nprint(list_data)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>$Student\n&#91;1] \"Shubham\" \"Arpita\"  \"Nishka\"\n\n        &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]   40   60   90\n&#91;2,]   80   70   80\n\n$Student\n&#91;1] \"Shubham\" \"Arpita\"  \"Nishka\"\n\n$Marks\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]   40   60   90\n&#91;2,]   80   70   80\n\n$Course\n$Course&#91;&#91;1]]\n&#91;1] \"BCA\"\n$Course&#91;&#91;2]]\n&#91;1] \"MCA\"\n$Course&#91;&#91;3]]\n&#91;1] \"B. tech.\"\n</code></pre>\n\n\n\n<h2>Manipulation of list elements</h2>\n\n\n\n<p>R allows us to add, delete, or update elements in the list. We can update an element of a list from anywhere, but elements can add or delete only at the end of the list. To remove an element from a specified index, we will assign it a null value. We can update the element of a list by overriding it from the new value. Let see an example to understand how we can add, delete, or update the elements in the list.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a list containing a vector, a matrix and a list.  \r\nlist_data &lt;- list(c(\"Shubham\",\"Arpita\",\"Nishka\"), matrix(c(40,80,60,70,90,80), nrow = 2),  \r\n   list(\"BCA\",\"MCA\",\"B.tech\"))  \r\n  \r\n# Giving names to the elements in the list.  \r\nnames(list_data) &lt;- c(\"Student\", \"Marks\", \"Course\")  \r\n  \r\n# Adding element at the end of the list.  \r\nlist_data&#91;4] &lt;- \"Moradabad\"  \r\nprint(list_data&#91;4])  \r\n  \r\n# Removing the last element.  \r\nlist_data&#91;4] &lt;- NULL  \r\n  \r\n# Printing the 4th Element.  \r\nprint(list_data&#91;4])  \r\n  \r\n# Updating the 3rd Element.  \r\nlist_data&#91;3] &lt;- \"Masters of computer applications\"  \r\nprint(list_data&#91;3])  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1]]\n&#91;1] \"Moradabad\"\n\n$&amp;lt;NA&amp;gt;\nNULL\n\n$Course\n&#91;1] \"Masters of computer applications\"\n</code></pre>\n\n\n\n<h2>Converting list to vector</h2>\n\n\n\n<p>There is a drawback with the list, i.e., we cannot perform all the arithmetic operations on list elements. To remove this, drawback R provides unlist() function. This function converts the list into vectors. In some cases, it is required to convert a list into a vector so that we can use the elements of the vector for further manipulation.</p>\n\n\n\n<p>The unlist() function takes the list as a parameter and change into a vector. Let see an example to understand how to unlist() function is used in R.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating lists.  \r\nlist1 &lt;- list(10:20)  \r\nprint(list1)  \r\n  \r\nlist2 &lt;-list(5:14)  \r\nprint(list2)  \r\n  \r\n# Converting the lists to vectors.  \r\nv1 &lt;- unlist(list1)  \r\nv2 &lt;- unlist(list2)  \r\n  \r\nprint(v1)  \r\nprint(v2)  \r\n  \r\nadding the vectors  \r\nresult &lt;- v1+v2  \r\nprint(result)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1]]\n&#91;1] 1 2 3 4 5\n\n&#91;&#91;1]]\n&#91;1] 10 11 12 13 14\n\n&#91;1] 1 2 3 4 5\n&#91;1] 10 11 12 13 14\n&#91;1] 11 13 15 17 19\n</code></pre>\n\n\n\n<h2>Merging Lists</h2>\n\n\n\n<p>R allows us to merge one or more lists into one list. Merging is done with the help of the list() function also. To merge the lists, we have to pass all the lists into list function as a parameter, and it returns a list which contains all the elements which are present in the lists. Let see an example to understand how the merging process is done.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating two lists.  \r\nEven_list &lt;- list(2,4,6,8,10)  \r\nOdd_list &lt;- list(1,3,5,7,9)  \r\n  \r\n# Merging the two lists.  \r\nmerged.list &lt;- list(Even_list,Odd_list)  \r\n  \r\n# Printing the merged list.  \r\nprint(merged.list)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;&#91;1]]\n&#91;&#91;1]]&#91;&#91;1]]\n&#91;1] 2\n\n&#91;&#91;1]]&#91;&#91;2]]\n&#91;1] 4\n\n&#91;&#91;1]]&#91;&#91;3]]\n&#91;1] 6\n\n&#91;&#91;1]]&#91;&#91;4]]\n&#91;1] 8\n\n&#91;&#91;1]]&#91;&#91;5]]\n&#91;1] 10\n\n\n&#91;&#91;2]]\n&#91;&#91;2]]&#91;&#91;1]]\n&#91;1] 1\n\n&#91;&#91;2]]&#91;&#91;2]]\n&#91;1] 3\n\n&#91;&#91;2]]&#91;&#91;3]]\n&#91;1] 5\n\n&#91;&#91;2]]&#91;&#91;4]]\n&#91;1] 7\n\n&#91;&#91;2]]&#91;&#91;5]]\n&#91;1] 9</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In R, lists are the second type of vector. Lists are the objects of R which contain elements of different types such as number, vectors, string and another list inside it. It can also contain a function or a matrix as its elements. A list is a data structure which has components of mixed data [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/351"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=351"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/351/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 352,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/351/revisions/352"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=351"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=351"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=351"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 353,
    "date": "2020-10-21T10:29:18",
    "date_gmt": "2020-10-21T10:29:18",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=353"
    },
    "modified": "2020-10-21T10:29:18",
    "modified_gmt": "2020-10-21T10:29:18",
    "slug": "r-arrays",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-arrays/",
    "title": {
      "rendered": "R Arrays"
    },
    "content": {
      "rendered": "\n<p>In R, arrays are the data objects which allow us to store data in more than two dimensions. In R, an array is created with the help of the&nbsp;<strong>array()</strong>&nbsp;function. This array() function takes a vector as an input and to create an array it uses vectors values in the&nbsp;<strong>dim</strong>&nbsp;parameter.</p>\n\n\n\n<p><strong>For example</strong>&#8211; if we will create an array of dimension (2, 3, 4) then it will create 4 rectangular matrices of 2 row and 3 columns.</p>\n\n\n\n<h2>R Array Syntax</h2>\n\n\n\n<p>There is the following syntax of R arrays:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>array_name &lt;- array(data, dim= (row_size, column_size, matrices, dim_names))  </code></pre>\n\n\n\n<p><strong>data</strong></p>\n\n\n\n<p>The data is the first argument in the array() function. It is an input vector which is given to the array.</p>\n\n\n\n<p><strong>matrices</strong></p>\n\n\n\n<p>In R, the array consists of multi-dimensional matrices.</p>\n\n\n\n<p><strong>row_size</strong></p>\n\n\n\n<p>This parameter defines the number of row elements which an array can store.</p>\n\n\n\n<p><strong>column_size</strong></p>\n\n\n\n<p>This parameter defines the number of columns elements which an array can store.</p>\n\n\n\n<p><strong>dim_names</strong></p>\n\n\n\n<p>This parameter is used to change the default names of rows and columns.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-arrays.png\" alt=\"R Arrays\"/></figure>\n\n\n\n<h2>How to create?</h2>\n\n\n\n<p>In R, array creation is quite simple. We can easily create an array using vector and array() function. In array, data is stored in the form of the matrix. There are only two steps to create a matrix which are as follows</p>\n\n\n\n<ol><li>In the first step, we will create two vectors of different lengths.</li><li>Once our vectors are created, we take these vectors as inputs to the array.</li></ol>\n\n\n\n<p>Let see an example to understand how we can implement an array with the help of the vectors and array() function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating two vectors of different lengths  \r\nvec1 &lt;-c(1,3,5)  \r\nvec2 &lt;-c(10,11,12,13,14,15)  \r\n  \r\n#Taking these vectors as input to the array   \r\nres &lt;- array(c(vec1,vec2),dim=c(3,3,2))  \r\nprint(res)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>, , 1\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    1   10   13\n&#91;2,]    3   11   14\n&#91;3,]    5   12   15\n\n, , 2\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    1   10   13\n&#91;2,]    3   11   14\n&#91;3,]    5   12   15\n</code></pre>\n\n\n\n<h2>Naming rows and columns</h2>\n\n\n\n<p>In R, we can give the names to the rows, columns, and matrices of the array. This is done with the help of the dim name parameter of the array() function.</p>\n\n\n\n<p>It is not necessary to give the name to the rows and columns. It is only used to differentiate the row and column for better understanding.</p>\n\n\n\n<p>Below is an example, in which we create two arrays and giving names to the rows, columns, and matrices.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating two vectors of different lengths  \r\nvec1 &lt;-c(1,3,5)  \r\nvec2 &lt;-c(10,11,12,13,14,15)  \r\n  \r\n#Initializing names for rows, columns and matrices  \r\ncol_names &lt;- c(\"Col1\",\"Col2\",\"Col3\")  \r\nrow_names &lt;- c(\"Row1\",\"Row2\",\"Row3\")  \r\nmatrix_names &lt;- c(\"Matrix1\",\"Matrix2\")  \r\n  \r\n#Taking the vectors as input to the array   \r\nres &lt;- array(c(vec1,vec2),dim=c(3,3,2),dimnames=list(row_names,col_names,matrix_names))  \r\nprint(res) </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>, , Matrix1\n\n     Col1 Col2 Col3\nRow1    1   10   13\nRow2    3   11   14\nRow3    5   12   15\n\n, , Matrix2\n\n     Col1 Col2 Col3\nRow1    1   10   13\nRow2    3   11   14\nRow3    5   12   15\n</code></pre>\n\n\n\n<h2>Accessing array elements</h2>\n\n\n\n<p>Like C or C++, we can access the elements of the array. The elements are accessed with the help of the index. Simply, we can access the elements of the array with the help of the indexing method. Let see an example to understand how we can access the elements of the array using the indexing method.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>, , Matrix1  \r\n     Col1 Col2 Col3  \r\nRow1    1   10   13  \r\nRow2    3   11   14  \r\nRow3    5   12   15  \r\n  \r\n, , Matrix2  \r\n     Col1 Col2 Col3  \r\nRow1    1   10   13  \r\nRow2    3   11   14  \r\nRow3    5   12   15  \r\n  \r\nCol1 Col2 Col3  \r\n   5   12   15  \r\n  \r\n&#91;1] 13  \r\n  \r\n     Col1 Col2 Col3  \r\nRow1    1   10   13  \r\nRow2    3   11   14  \r\nRow3    5   12   15  </code></pre>\n\n\n\n<h2>Manipulation of elements</h2>\n\n\n\n<p>The array is made up matrices in multiple dimensions so that the operations on elements of an array are carried out by accessing elements of the matrices.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating two vectors of different lengths  \r\nvec1 &lt;-c(1,3,5)  \r\nvec2 &lt;-c(10,11,12,13,14,15)  \r\n  \r\n#Taking the vectors as input to the array1   \r\nres1 &lt;- array(c(vec1,vec2),dim=c(3,3,2))  \r\nprint(res1)  \r\n  \r\n#Creating two vectors of different lengths  \r\nvec1 &lt;-c(8,4,7)  \r\nvec2 &lt;-c(16,73,48,46,36,73)  \r\n  \r\n#Taking the vectors as input to the array2   \r\nres2 &lt;- array(c(vec1,vec2),dim=c(3,3,2))  \r\nprint(res2)  \r\n  \r\n#Creating matrices from these arrays  \r\nmat1 &lt;- res1&#91;,,2]  \r\nmat2 &lt;- res2&#91;,,2]  \r\nres3 &lt;- mat1+mat2  \r\nprint(res3)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>, , 1\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    1   10   13\n&#91;2,]    3   11   14\n&#91;3,]    5   12   15\n\n, , 2\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    1   10   13\n&#91;2,]    3   11   14\n&#91;3,]    5   12   15\n\n, , 1\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    8   16   46\n&#91;2,]    4   73   36\n&#91;3,]    7   48   73\n\n, , 2\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    8   16   46\n&#91;2,]    4   73   36\n&#91;3,]    7   48   73\n\n\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    9   26   59\n&#91;2,]    7   84   50\n&#91;3,]   12   60   88\n</code></pre>\n\n\n\n<h2>Calculations across array elements</h2>\n\n\n\n<p>For calculation purpose, r provides&nbsp;<strong>apply()</strong>&nbsp;function. This apply function contains three parameters i.e., x, margin, and function.</p>\n\n\n\n<p>This function takes the array on which we have to perform the calculations. The basic syntax of the apply() function is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>apply(x, margin, fun)  </code></pre>\n\n\n\n<p>Here, x is an array, and a margin is the name of the dataset which is used and fun is the function which is to be applied to the elements of the array.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating two vectors of different lengths  \r\nvec1 &lt;-c(1,3,5)  \r\nvec2 &lt;-c(10,11,12,13,14,15)  \r\n  \r\n#Taking the vectors as input to the array1   \r\nres1 &lt;- array(c(vec1,vec2),dim=c(3,3,2))  \r\nprint(res1)  \r\n  \r\n#using apply function   \r\nresult &lt;- apply(res1,c(1),sum)  \r\nprint(result)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>, , 1\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    1   10   13\n&#91;2,]    3   11   14\n&#91;3,]    5   12   15\n\n, , 2\n     &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    1   10   13\n&#91;2,]    3   11   14\n&#91;3,]    5   12   15\n\n&#91;1] 48 56 64</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In R, arrays are the data objects which allow us to store data in more than two dimensions. In R, an array is created with the help of the&nbsp;array()&nbsp;function. This array() function takes a vector as an input and to create an array it uses vectors values in the&nbsp;dim&nbsp;parameter. For example&#8211; if we will create [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/353"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=353"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/353/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 354,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/353/revisions/354"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=353"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=353"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=353"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 355,
    "date": "2020-10-21T10:33:06",
    "date_gmt": "2020-10-21T10:33:06",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=355"
    },
    "modified": "2020-10-21T10:33:06",
    "modified_gmt": "2020-10-21T10:33:06",
    "slug": "r-matrix",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-matrix/",
    "title": {
      "rendered": "R Matrix"
    },
    "content": {
      "rendered": "\n<p>In R, a two-dimensional rectangular data set is known as a matrix. A matrix is created with the help of the vector input to the matrix function. On R matrices, we can perform addition, subtraction, multiplication, and division operation.</p>\n\n\n\n<p>In the R matrix, elements are arranged in a fixed number of rows and columns. The matrix elements are the real numbers. In R, we use matrix function, which can easily reproduce the memory representation of the matrix. In the R matrix, all the elements must share a common basic type.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>matrix1&lt;-matrix(c(11, 13, 15, 12, 14, 16),nrow =2, ncol =3, byrow = TRUE)  \r\nmatrix1  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;,1]  &#91;,2]  &#91;,3]\n&#91;1,]   11   13   15\n&#91;2,]   12   14   16\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-matrix.png\" alt=\"R Matrix\"/></figure>\n\n\n\n<h2>History of matrices in R</h2>\n\n\n\n<p>The word &#8220;Matrix&#8221; is the Latin word for womb which means a place where something is formed or produced. Two authors of historical importance have used the word &#8220;Matrix&#8221; for unusual ways. They proposed this axiom as a means to reduce any function to one of the lower types so that at the &#8220;bottom&#8221; (0order) the function is identical to its extension.</p>\n\n\n\n<p>Any possible function other than a matrix from the matrix holds true with the help of the process of generalization. It will be true only when the proposition (which asserts function in question) is true. It will hold true for all or one of the value of argument only when the other argument is undetermined.</p>\n\n\n\n<h2>How to create a matrix in R?</h2>\n\n\n\n<p>Like vector and list, R provides a function which creates a matrix. R provides the matrix() function to create a matrix. This function plays an important role in data analysis. There is the following syntax of the matrix in R:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>matrix(data, nrow, ncol, byrow, dim_name)  </code></pre>\n\n\n\n<p><strong>data</strong></p>\n\n\n\n<p>The first argument in matrix function is data. It is the input vector which is the data elements of the matrix.</p>\n\n\n\n<p><strong>nrow</strong></p>\n\n\n\n<p>The second argument is the number of rows which we want to create in the matrix.</p>\n\n\n\n<p><strong>ncol</strong></p>\n\n\n\n<p>The third argument is the number of columns which we want to create in the matrix.</p>\n\n\n\n<p><strong>byrow</strong></p>\n\n\n\n<p>The byrow parameter is a logical clue. If its value is true, then the input vector elements are arranged by row.</p>\n\n\n\n<p><strong>dim_name</strong></p>\n\n\n\n<p>The dim_name parameter is the name assigned to the rows and columns.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how matrix function is used to create a matrix and arrange the elements sequentially by row or column.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Arranging elements sequentially by row.  \r\nP &lt;- matrix(c(5:16), nrow = 4, byrow = TRUE)  \r\nprint(P)  \r\n  \r\n# Arranging elements sequentially by column.  \r\nQ &lt;- matrix(c(3:14), nrow = 4, byrow = FALSE)  \r\nprint(Q)  \r\n  \r\n# Defining the column and row names.  \r\nrow_names = c(\"row1\", \"row2\", \"row3\", \"row4\")  \r\nccol_names = c(\"col1\", \"col2\", \"col3\")  \r\n  \r\nR &lt;- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(row_names, col_names))  \r\nprint(R)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>      &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    5    6    7\n&#91;2,]    8    9   10\n&#91;3,]   11   12   13\n&#91;4,]   14   15   16\n\n      &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    3    7   11\n&#91;2,]    4    8   12\n&#91;3,]    5    9   13\n&#91;4,]    6   10   14\n\n      col1 col2 col3\nrow1    3    4    5\nrow2    6    7    8\nrow3    9   10   11\nrow4   12   13   14\n</code></pre>\n\n\n\n<h2>Accessing matrix elements in R</h2>\n\n\n\n<p>Like C and C++, we can easily access the elements of our matrix by using the index of the element. There are three ways to access the elements from the matrix.</p>\n\n\n\n<ol><li>We can access the element which presents on nth row and mth column.</li><li>We can access all the elements of the matrix which are present on the nth row.</li><li>We can also access all the elements of the matrix which are present on the mth column.</li></ol>\n\n\n\n<p>Let see an example to understand how elements are accessed from the matrix present on nth row mth column, nth row, or mth column.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Defining the column and row names.  \r\nrow_names = c(\"row1\", \"row2\", \"row3\", \"row4\")  \r\nccol_names = c(\"col1\", \"col2\", \"col3\")  \r\n#Creating matrix   \r\nR &lt;- matrix(c(5:16), nrow = 4, byrow = TRUE, dimnames = list(row_names, col_names))  \r\nprint(R)  \r\n  \r\n#Accessing element present on 3rd row and 2nd column  \r\nprint(R&#91;3,2])  \r\n  \r\n#Accessing element present in 3rd row  \r\nprint(R&#91;3,])  \r\n  \r\n#Accessing element present in 2nd column  \r\nprint(R&#91;,2])  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11   12   13\nrow4   14   15   16\n\n&#91;1] 12\n\ncol1 col2 col3\n  11   12   13\n\nrow1 row2 row3 row4\n   6    9   12   15\n</code></pre>\n\n\n\n<h2>Modification of the matrix</h2>\n\n\n\n<p>R allows us to do modification in the matrix. There are several methods to do modification in the matrix, which are as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-matrix-1.png\" alt=\"R Matrix\"/></figure>\n\n\n\n<h3>Assign a single element</h3>\n\n\n\n<p>In matrix modification, the first method is to assign a single element to the matrix at a particular position. By assigning a new value to that position, the old value will get replaced with the new one. This modification technique is quite simple to perform matrix modification. The basic syntax for it is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>matrix&#91;n, m]&lt;-y  </code></pre>\n\n\n\n<p>Here, n and m are the rows and columns of the element, respectively. And, y is the value which we assign to modify our matrix.</p>\n\n\n\n<p>Let see an example to understand how modification will be done:</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Defining the column and row names.  \r\nrow_names = c(\"row1\", \"row2\", \"row3\", \"row4\")  \r\nccol_names = c(\"col1\", \"col2\", \"col3\")  \r\n  \r\nR &lt;- matrix(c(5:16), nrow = 4, byrow = TRUE, dimnames = list(row_names, col_names))  \r\nprint(R)  \r\n  \r\n#Assigning value 20 to the element at 3d roe and 2nd column  \r\nR&#91;3,2]&lt;-20  \r\nprint(R)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11   12   13\nrow4   14   15   16\n\n      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11   20   13\nrow4   14   15   16\n</code></pre>\n\n\n\n<h3>Use of Relational Operator</h3>\n\n\n\n<p>R provides another way to perform matrix medication. In this method, we used some relational operators like &gt;, &lt;, ==. Like the first method, the second method is quite simple to use. Let see an example to understand how this method modifies the matrix.</p>\n\n\n\n<p><strong>Example 1</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Defining the column and row names.  \r\nrow_names = c(\"row1\", \"row2\", \"row3\", \"row4\")  \r\nccol_names = c(\"col1\", \"col2\", \"col3\")  \r\n  \r\nR &lt;- matrix(c(5:16), nrow = 4, byrow = TRUE, dimnames = list(row_names, col_names))  \r\nprint(R)  \r\n  \r\n#Replacing element that equal to the 12  \r\nR&#91;R==12]&lt;-0  \r\nprint(R)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11   12   13\nrow4   14   15   16\n\n      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11    0   13\nrow4   14   15   16\n</code></pre>\n\n\n\n<p><strong>Example 2</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Defining the column and row names.  \r\nrow_names = c(\"row1\", \"row2\", \"row3\", \"row4\")  \r\nccol_names = c(\"col1\", \"col2\", \"col3\")  \r\n  \r\nR &lt;- matrix(c(5:16), nrow = 4, byrow = TRUE, dimnames = list(row_names, col_names))  \r\nprint(R)  \r\n  \r\n#Replacing elements whose values are greater than 12  \r\nR&#91;R>12]&lt;-0  \r\nprint(R)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11   12   13\nrow4   14   15   16\n\n      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11   12    0\nrow4    0    0    0\n</code></pre>\n\n\n\n<h3>Addition of Rows and Columns</h3>\n\n\n\n<p>The third method of matrix modification is through the addition of rows and columns using the cbind() and rbind() function. The cbind() and rbind() function are used to add a column and a row respectively. Let see an example to understand the working of cbind() and rbind() functions.</p>\n\n\n\n<p><strong>Example 1</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Defining the column and row names.  \r\nrow_names = c(\"row1\", \"row2\", \"row3\", \"row4\")  \r\nccol_names = c(\"col1\", \"col2\", \"col3\")  \r\n  \r\nR &lt;- matrix(c(5:16), nrow = 4, byrow = TRUE, dimnames = list(row_names, col_names))  \r\nprint(R)  \r\n  \r\n#Adding row  \r\nrbind(R,c(17,18,19))  \r\n  \r\n#Adding column  \r\ncbind(R,c(17,18,19,20))  \r\n  \r\n#transpose of the matrix using the t() function:  \r\nt(R)  \r\n  \r\n#Modifying the dimension of the matrix using the dim() function  \r\ndim(R)&lt;-c(1,12)  \r\nprint(R)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11   12   13\nrow4   14   15   16\n\n      col1 col2 col3\nrow1    5    6    7\nrow2    8    9   10\nrow3   11   12   13\nrow4   14   15   16\n             17   18   19\n\n      col1 col2 col3\nrow1    5    6    7 17\nrow2    8    9   10 18\nrow3   11   12   13 19\nrow4   14   15   16 20\n\n      row1 row2 row3 row4\ncol1    5    8   11   14\ncol2    6    9   12   15\ncol3    7   10   13   16\n\n     &#91;,1] &#91;,2] &#91;,3] &#91;,4] &#91;,5] &#91;,6] &#91;,7] &#91;,8] &#91;,9] &#91;,10] &#91;,11] &#91;,12]\n&#91;1,]    5    8   11   14    6    9   12   15    7    10    13    16\n</code></pre>\n\n\n\n<h2>Matrix operations</h2>\n\n\n\n<p>In R, we can perform the mathematical operations on a matrix such as addition, subtraction, multiplication, etc. For performing the mathematical operation on the matrix, it is required that both the matrix should have the same dimensions.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-matrix-2.png\" alt=\"R Matrix\"/></figure>\n\n\n\n<p>Let see an example to understand how mathematical operations are performed on the matrix.</p>\n\n\n\n<p><strong>Example 1</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>R &lt;- matrix(c(5:16), nrow = 4,ncol=3)  \r\nS &lt;- matrix(c(1:12), nrow = 4,ncol=3)  \r\n  \r\n#Addition  \r\nsum&lt;-R+S  \r\nprint(sum)  \r\n  \r\n#Subtraction  \r\nsub&lt;-R-S  \r\nprint(sub)  \r\n  \r\n#Multiplication  \r\nmul&lt;-R*S  \r\nprint(mul)  \r\n  \r\n#Multiplication by constant  \r\nmul1&lt;-R*12  \r\nprint(mul1)  \r\n  \r\n#Division  \r\ndiv&lt;-R/S  \r\nprint(div)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<h2>Applications of matrix</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>      &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    6   14   22\n&#91;2,]    8   16   24\n&#91;3,]   10   18   26\n&#91;4,]   12   20   28\n\n      &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    4    4    4\n&#91;2,]    4    4    4\n&#91;3,]    4    4    4\n&#91;4,]    4    4    4\n\n      &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]    5   45  117\n&#91;2,]   12   60  140\n&#91;3,]   21   77  165\n&#91;4,]   32   96  192\n\n      &#91;,1] &#91;,2] &#91;,3]\n&#91;1,]   60  108  156\n&#91;2,]   72  120  168\n&#91;3,]   84  132  180\n&#91;4,]   96  144  192\n\n      &#91;,1]     &#91;,2]      &#91;,3]\n&#91;1,] 5.000000 1.800000 1.444444\n&#91;2,] 3.000000 1.666667 1.400000\n&#91;3,] 2.333333 1.571429 1.363636\n&#91;4,] 2.000000 1.500000 1.333333\n</code></pre>\n\n\n\n<ol><li>In geology, Matrices takes surveys and plot graphs, statistics, and used to study in different fields.</li><li>Matrix is the representation method which helps in plotting common survey things.</li><li>In robotics and automation, Matrices have the topmost elements for the robot movements.</li><li>Matrices are mainly used in calculating the gross domestic products in Economics, and it also helps in calculating the capability of goods and products.</li><li>In computer-based application, matrices play a crucial role in the creation of realistic seeming motion.</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In R, a two-dimensional rectangular data set is known as a matrix. A matrix is created with the help of the vector input to the matrix function. On R matrices, we can perform addition, subtraction, multiplication, and division operation. In the R matrix, elements are arranged in a fixed number of rows and columns. The [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/355"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=355"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/355/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 356,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/355/revisions/356"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=355"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=355"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=355"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 357,
    "date": "2020-10-21T10:37:11",
    "date_gmt": "2020-10-21T10:37:11",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=357"
    },
    "modified": "2020-10-21T10:37:11",
    "modified_gmt": "2020-10-21T10:37:11",
    "slug": "r-data-frame",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-data-frame/",
    "title": {
      "rendered": "R Data Frame"
    },
    "content": {
      "rendered": "\n<p>A data frame is a two-dimensional array-like structure or a table in which a column contains values of one variable, and rows contains one set of values from each column. A data frame is a special case of the list in which each component has equal length.</p>\n\n\n\n<p>A data frame is used to store data table and the vectors which are present in the form of a list in a data frame, are of equal length.</p>\n\n\n\n<p>In a simple way, it is a list of equal length vectors. A matrix can contain one type of data, but a data frame can contain different data types such as numeric, character, factor, etc.</p>\n\n\n\n<p>There are following characteristics of a data frame.</p>\n\n\n\n<ul><li>The columns name should be non-empty.</li><li>The rows name should be unique.</li><li>The data which is stored in a data frame can be a factor, numeric, or character type.</li><li>Each column contains the same number of data items.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-frames.png\" alt=\"R Data Frame\"/></figure>\n\n\n\n<h2>How to create Data Frame</h2>\n\n\n\n<p>In R, the data frames are created with the help of frame() function of data. This function contains the vectors of any type such as numeric, character, or integer. In below example, we create a data frame that contains employee id (integer vector), employee name(character vector), salary(numeric vector), and starting date(Date vector).</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data frame.  \r\nemp.data&lt;- data.frame(  \r\nemployee_id = c (1:5),   \r\nemployee_name = c(\"Shubham\",\"Arpita\",\"Nishka\",\"Gunjan\",\"Sumit\"),  \r\nsal = c(623.3,915.2,611.0,729.0,843.25),   \r\n  \r\nstarting_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",  \r\n      \"2015-03-27\")),  \r\nstringsAsFactors = FALSE  \r\n)  \r\n# Printing the data frame.            \r\nprint(emp.data)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>employee_idemployee_namesalstarting_date\n1           1       Shubham623.30    2012-01-01\n2           2        Arpita915.20    2013-09-23\n3           3        Nishka611.00    2014-11-15\n4           4        Gunjan729.00    2014-05-11\n5          5         Sumit843.25    2015-03-27\n</code></pre>\n\n\n\n<h2>Getting the structure of R Data Frame</h2>\n\n\n\n<p>In R, we can find the structure of our data frame. R provides an in-build function called str() which returns the data with its complete structure. In below example, we have created a frame using a vector of different data type and extracted the structure of it.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data frame.  \r\nemp.data&lt;- data.frame(  \r\nemployee_id = c (1:5),   \r\nemployee_name = c(\"Shubham\",\"Arpita\",\"Nishka\",\"Gunjan\",\"Sumit\"),  \r\nsal = c(623.3,515.2,611.0,729.0,843.25),   \r\n  \r\nstarting_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",  \r\n      \"2015-03-27\")),  \r\nstringsAsFactors = FALSE  \r\n)  \r\n# Printing the structure of data frame.           \r\nstr(emp.data)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>'data.frame':   5 obs. of  4 variables:\n $ employee_id  : int  1 2 3 4 5\n $ employee_name: chr  \"Shubham\" \"Arpita\" \"Nishka\" \"Gunjan\" ...\n $ sal          : num  623 515 611 729 843\n $ starting_date: Date, format: \"2012-01-01\" \"2013-09-23\" ...\n</code></pre>\n\n\n\n<h2>Extracting data from Data Frame</h2>\n\n\n\n<p>The data of the data frame is very crucial for us. To manipulate the data of the data frame, it is essential to extract it from the data frame. We can extract the data in three ways which are as follows:</p>\n\n\n\n<ol><li>We can extract the specific columns from a data frame using the column name.</li><li>We can extract the specific rows also from a data frame.</li><li>We can extract the specific rows corresponding to specific columns.</li></ol>\n\n\n\n<p>Let&#8217;s see an example of each one to understand how data is extracted from the data frame with the help these ways.</p>\n\n\n\n<h3>Extracting the specific columns from a data frame</h3>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data frame.  \r\nemp.data&lt;- data.frame(  \r\nemployee_id = c (1:5),   \r\nemployee_name= c(\"Shubham\",\"Arpita\",\"Nishka\",\"Gunjan\",\"Sumit\"),  \r\nsal = c(623.3,515.2,611.0,729.0,843.25),   \r\n  \r\nstarting_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",  \r\n      \"2015-03-27\")),  \r\nstringsAsFactors = FALSE  \r\n)  \r\n# Extracting specific columns from a data frame       \r\nfinal &lt;- data.frame(emp.data$employee_id,emp.data$sal)  \r\nprint(final)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>emp.data.employee_idemp.data.sal\n1                    \t\t1       623.30\n2                    \t\t2       515.20\n3          \t\t\t3       611.00\n4                    \t\t4       729.00\n5                    \t\t5       843.25\n</code></pre>\n\n\n\n<h3>Extracting the specific rows from a data frame</h3>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data frame.  \r\nemp.data&lt;- data.frame(  \r\nemployee_id = c (1:5),   \r\nemployee_name = c(\"Shubham\",\"Arpita\",\"Nishka\",\"Gunjan\",\"Sumit\"),  \r\nsal = c(623.3,515.2,611.0,729.0,843.25),   \r\n  \r\nstarting_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",  \r\n      \"2015-03-27\")),  \r\nstringsAsFactors = FALSE  \r\n)  \r\n# Extracting first row from a data frame      \r\nfinal &lt;- emp.data&#91;1,]  \r\nprint(final)  \r\n  \r\n  \r\n# Extracting last two row from a data frame       \r\nfinal &lt;- emp.data&#91;4:5,]  \r\nprint(final)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>        employee_id  employee_name    sal       starting_date\n1          1           Shubham       623.3        2012-01-01\n\n       employee_id  employee_name    sal      starting_date\n4         4          Gunjan        729.00       2014-05-11\n5         5          Sumit         843.25       2015-03-27\n</code></pre>\n\n\n\n<h3>Extracting specific rows corresponding to specific columns</h3>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data frame.  \r\nemp.data&lt;- data.frame(  \r\nemployee_id = c (1:5),   \r\nemployee_name = c(\"Shubham\",\"Arpita\",\"Nishka\",\"Gunjan\",\"Sumit\"),  \r\nsal = c(623.3,515.2,611.0,729.0,843.25),   \r\n  \r\nstarting_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",  \r\n      \"2015-03-27\")),  \r\nstringsAsFactors = FALSE  \r\n)  \r\n# Extracting 2nd and 3rd row corresponding to the 1st and 4th column      \r\nfinal &lt;- emp.data&#91;c(2,3),c(1,4)]  \r\nprint(final)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>        employee_id   starting_date\n2           2           2013-09-23\n3           3           2014-11-15\n</code></pre>\n\n\n\n<h2>Modification in Data Frame</h2>\n\n\n\n<p>R allows us to do modification in our data frame. Like matrices modification, we can modify our data frame through re-assignment. We cannot only add rows and columns, but also we can delete them. The data frame is expanded by adding rows and columns.</p>\n\n\n\n<p>We can</p>\n\n\n\n<ol><li>Add a column by adding a column vector with the help of a new column name using cbind() function.</li><li>Add rows by adding new rows in the same structure as the existing data frame and using rbind() function</li><li>Delete the columns by assigning a NULL value to them.</li><li>Delete the rows by re-assignment to them.</li></ol>\n\n\n\n<p>Let&#8217;s see an example to understand how rbind() function works and how the modification is done in our data frame.</p>\n\n\n\n<p><strong>Example: Adding rows and columns</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data frame.  \r\nemp.data&lt;- data.frame(  \r\nemployee_id = c (1:5),   \r\nemployee_name = c(\"Shubham\",\"Arpita\",\"Nishka\",\"Gunjan\",\"Sumit\"),  \r\nsal = c(623.3,515.2,611.0,729.0,843.25),   \r\n  \r\nstarting_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",  \r\n      \"2015-03-27\")),  \r\nstringsAsFactors = FALSE  \r\n)  \r\nprint(emp.data)  \r\n  \r\n#Adding row in the data frame  \r\nx &lt;- list(6,\"Vaishali\",547,\"2015-09-01\")  \r\nrbind(emp.data,x)  \r\n  \r\n#Adding column in the data frame  \r\ny &lt;- c(\"Moradabad\",\"Lucknow\",\"Etah\",\"Sambhal\",\"Khurja\")  \r\ncbind(emp.data,Address=y)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>     employee_id  employee_name    sal          starting_date\n1       1              Shubham    623.30          2012-01-01\n2       2              Arpita     515.20          2013-09-23\n3       3              Nishka     611.00          2014-11-15\n4       4              Gunjan     729.00          2014-05-11\n5       5              Sumit      843.25          2015-03-27\n     employee_id  employee_name     sal        starting_date\n1       1              Shubham     623.30          2012-01-01\n2       2              Arpita      515.20          2013-09-23\n3       3              Nishka      611.00          2014-11-15\n4       4              Gunjan      729.00          2014-05-11\n5       5              Sumit       843.25          2015-03-27\n6       6              Vaishali    547.00          2015-09-01\n     employee_id     employee_name    sal        starting_date        Address\n1       1              Shubham       623.30        2012-01-01        Moradabad\n2       2              Arpita        515.20        2013-09-23        Lucknow\n3       3              Nishka        611.00        2014-11-15        Etah\n4       4              Gunjan        729.00        2014-05-11        Sambhal\n5       5              Sumit         843.25        2015-03-27        Khurja\n</code></pre>\n\n\n\n<p><strong>Example: Delete rows and columns</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data frame.  \r\nemp.data&lt;- data.frame(  \r\nemployee_id = c (1:5),   \r\nemployee_name = c(\"Shubham\",\"Arpita\",\"Nishka\",\"Gunjan\",\"Sumit\"),  \r\nsal = c(623.3,515.2,611.0,729.0,843.25),   \r\n  \r\nstarting_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",  \r\n      \"2015-03-27\")),  \r\nstringsAsFactors = FALSE  \r\n)  \r\nprint(emp.data)  \r\n  \r\n#Delete rows from data frame  \r\nemp.data&lt;-emp.data&#91;-1,]  \r\nprint(emp.data)  \r\n  \r\n#Delete column from the data frame  \r\nemp.data$starting_date&lt;-NULL  \r\nprint(emp.data)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>employee_idemployee_namesalstarting_date\n1           1       Shubham623.30    2012-01-01\n2           2        Arpita515.20    2013-09-23\n3           3        Nishka611.00    2014-11-15\n4           4        Gunjan729.00    2014-05-11\n5           5         Sumit843.25    2015-03-27\nemployee_idemployee_namesalstarting_date\n2           2        Arpita515.20    2013-09-23\n3           3        Nishka611.00    2014-11-15\n4           4        Gunjan729.00    2014-05-11\n5           5         Sumit843.25    2015-03-27\nemployee_idemployee_namesal\n1           1       Shubham623.30    \n2           2        Arpita515.20    \n3         3        Nishka611.00    \n4           4        Gunjan729.00    \n5           5         Sumit843.25    \n</code></pre>\n\n\n\n<h2>Summary of data in Data Frames</h2>\n\n\n\n<p>In some cases, it is required to find the statistical summary and nature of the data in the data frame. R provides the summary() function to extract the statistical summary and nature of the data. This function takes the data frame as a parameter and returns the statistical information of the data. Let?s see an example to understand how this function is used in R:</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data frame.  \r\nemp.data&lt;- data.frame(  \r\nemployee_id = c (1:5),   \r\nemployee_name = c(\"Shubham\",\"Arpita\",\"Nishka\",\"Gunjan\",\"Sumit\"),  \r\nsal = c(623.3,515.2,611.0,729.0,843.25),   \r\n  \r\nstarting_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",  \r\n      \"2015-03-27\")),  \r\nstringsAsFactors = FALSE  \r\n)  \r\nprint(emp.data)  \r\n  \r\n#Printing the summary  \r\nprint(summary(emp.data)) </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>employee_idemployee_namesalstarting_date\n1           1       Shubham623.30    2012-01-01\n2           2        Arpita515.20    2013-09-23\n3           3  Nishka611.00    2014-11-15\n4           4        Gunjan729.00    2014-05-11\n5           5         Sumit843.25    2015-03-27\n\nemployee_idemployee_namesalstarting_date\n Min.   :1   Length:5           Min.   :515.2   Min.   :2012-01-01\n 1st Qu.:2    Class :character   1st Qu.:611.0 1st Qu.:2013-09-23\n Median :3    Mode  :character   Median :623.3   Median :2014-05-11\n Mean   :3                       Mean   :664.4   Mean   :2014-01-14\n 3rd Qu.:4              3rd Qu.:729.0   3rd Qu.:2014-11-15\n Max.   :5                       Max.   :843.2   Max.   :2015-03-27</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A data frame is a two-dimensional array-like structure or a table in which a column contains values of one variable, and rows contains one set of values from each column. A data frame is a special case of the list in which each component has equal length. A data frame is used to store data [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/357"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=357"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/357/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 358,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/357/revisions/358"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=357"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=357"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=357"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 359,
    "date": "2020-10-21T10:43:02",
    "date_gmt": "2020-10-21T10:43:02",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=359"
    },
    "modified": "2020-10-21T10:43:02",
    "modified_gmt": "2020-10-21T10:43:02",
    "slug": "r-factors",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-factors/",
    "title": {
      "rendered": "R factors"
    },
    "content": {
      "rendered": "\n<p>The factor is a data structure which is used for fields which take only predefined finite number of values. These are the variable which takes a limited number of different values. These are the data objects which are used to categorize the data and to store it on multiple levels. It can store both integers and strings values, and are useful in the column that has a limited number of unique values.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-factors.png\" alt=\"R factors\"/></figure>\n\n\n\n<p>Factors have labels which are associated with the unique integers stored in it. It contains predefined set value known as levels and by default R always sorts levels in alphabetical order.</p>\n\n\n\n<h2>Attributes of a factor</h2>\n\n\n\n<p>There are the following attributes of a factor in R</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/attributes-of-r-factors.png\" alt=\"R factors\"/></figure>\n\n\n\n<ol><li><strong>X</strong><br>It is the input vector which is to be transformed into a factor.</li><li><strong>levels</strong><br>It is an input vector that represents a set of unique values which are taken by x.</li><li><strong>labels</strong><br>It is a character vector which corresponds to the number of labels.</li><li><strong>Exclude</strong><br>It is used to specify the value which we want to be excluded,</li><li><strong>ordered</strong><br>It is a logical attribute which determines if the levels are ordered.</li><li><strong>nmax</strong><br>It is used to specify the upper bound for the maximum number of level.</li></ol>\n\n\n\n<h2>How to create a factor?</h2>\n\n\n\n<p>In R, it is quite simple to create a factor. A factor is created in two steps</p>\n\n\n\n<ol><li>In the first step, we create a vector.</li><li>Next step is to convert the vector into a factor,</li></ol>\n\n\n\n<p>R provides factor() function to convert the vector into factor. There is the following syntax of factor() function</p>\n\n\n\n<ol><li>factor_data<strong>&lt;</strong><strong>&#8211;</strong>&nbsp;factor(vector)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Let&#8217;s see an example to understand how factor function is used.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a vector as input.  \r\ndata &lt;- c(\"Shubham\",\"Nishka\",\"Arpita\",\"Nishka\",\"Shubham\",\"Sumit\",\"Nishka\",\"Shubham\",\"Sumit\",\"Arpita\",\"Sumit\")  \r\n  \r\nprint(data)  \r\nprint(is.factor(data))  \r\n  \r\n# Applying the factor function.  \r\nfactor_data&lt;- factor(data)  \r\n  \r\nprint(factor_data)  \r\nprint(is.factor(factor_data))  </code></pre>\n\n\n\n<p></p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] \"Shubham\" \"Nishka\"  \"Arpita\"  \"Nishka\"  \"Shubham\" \"Sumit\"   \"Nishka\"\n &#91;8] \"Shubham\" \"Sumit\"   \"Arpita\"  \"Sumit\"\n&#91;1] FALSE\n &#91;1] Shubham Nishka Arpita Nishka Shubham Sumit Nishka Shubham Sumit\n&#91;10] Arpita Sumit\nLevels: Arpita Nishka Shubham Sumit\n&#91;1] TRUE\n</code></pre>\n\n\n\n<h2>Accessing components of factor</h2>\n\n\n\n<p>Like vectors, we can access the components of factors. The process of accessing components of factor is much more similar to the vectors. We can access the element with the help of the indexing method or using logical vectors. Let&#8217;s see an example in which we understand the different-different ways of accessing the components.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a vector as input.  \r\ndata &lt;- c(\"Shubham\",\"Nishka\",\"Arpita\",\"Nishka\",\"Shubham\",\"Sumit\",\"Nishka\",\"Shubham\",\"Sumit\",\"Arpita\",\"Sumit\")  \r\n  \r\n# Applying the factor function.  \r\nfactor_data&lt;- factor(data)  \r\n  \r\n#Printing all elements of factor  \r\nprint(factor_data)  \r\n  \r\n#Accessing 4th element of factor  \r\nprint(factor_data&#91;4])  \r\n  \r\n#Accessing 5th and 7th element  \r\nprint(factor_data&#91;c(5,7)])  \r\n  \r\n#Accessing all elemcent except 4th one  \r\nprint(factor_data&#91;-4])  \r\n  \r\n#Accessing elements using logical vector  \r\nprint(factor_data&#91;c(TRUE,FALSE,FALSE,FALSE,TRUE,TRUE,TRUE,FALSE,FALSE,FALSE,TRUE)])  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] Shubham Nishka Arpita Nishka Shubham Sumit Nishka Shubham Sumit\n&#91;10] Arpita Sumit\nLevels: Arpita Nishka Shubham Sumit\n\n&#91;1] Nishka\nLevels: Arpita Nishka Shubham Sumit\n \n&#91;1] Shubham Nishka\nLevels: Arpita Nishka Shubham Sumit\n\n &#91;1] Shubham Nishka Arpita Shubham Sumit Nishka Shubham Sumit Arpita\n&#91;10] Sumit\nLevels: Arpita Nishka Shubham Sumit\n\n&#91;1] Shubham Shubham Sumit Nishka Sumit\nLevels: Arpita Nishka Shubham Sumit\n</code></pre>\n\n\n\n<h2>Modification of factor</h2>\n\n\n\n<p>Like data frames, R allows us to modify the factor. We can modify the value of a factor by simply re-assigning it. In R, we cannot choose values outside of its predefined levels means we cannot insert value if it&#8217;s level is not present on it. For this purpose, we have to create a level of that value, and then we can add it to our factor.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how the modification is done in factors.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a vector as input.  \r\ndata &lt;- c(\"Shubham\",\"Nishka\",\"Arpita\",\"Nishka\",\"Shubham\")  \r\n  \r\n# Applying the factor function.  \r\nfactor_data&lt;- factor(data)  \r\n  \r\n#Printing all elements of factor  \r\nprint(factor_data)  \r\n  \r\n#Change 4th element of factor with sumit  \r\nfactor_data&#91;4] &lt;-\"Arpita\"  \r\nprint(factor_data)  \r\n  \r\n#change 4th element of factor with \"Gunjan\"  \r\nfactor_data&#91;4] &lt;- \"Gunjan\"    # cannot assign values outside levels  \r\nprint(factor_data)  \r\n  \r\n#Adding the value to the level  \r\nlevels(factor_data) &lt;- c(levels(factor_data),\"Gunjan\")#Adding new level  \r\nfactor_data&#91;4] &lt;- \"Gunjan\"  \r\nprint(factor_data)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] Shubham Nishka Arpita Nishka Shubham\nLevels: Arpita Nishka Shubham\n&#91;1] Shubham Nishka Arpita Arpita Shubham\nLevels: Arpita Nishka Shubham\nWarning message:\nIn `&#91;&amp;lt;-.factor`(`*tmp*`, 4, value = \"Gunjan\") :\n  invalid factor level, NA generated\n&#91;1] Shubham Nishka Arpita  Shubham\nLevels: Arpita Nishka Shubham\n&#91;1] Shubham Nishka Arpita Gunjan Shubham\nLevels: Arpita Nishka Shubham Gunjan\n</code></pre>\n\n\n\n<h2>Factor in Data Frame</h2>\n\n\n\n<p>When we create a frame with a column of text data, R treats this text column as categorical data and creates factor on it.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the vectors for data frame.  \r\nheight &lt;- c(132,162,152,166,139,147,122)  \r\nweight &lt;- c(40,49,48,40,67,52,53)  \r\ngender &lt;- c(\"male\",\"male\",\"female\",\"female\",\"male\",\"female\",\"male\")  \r\n  \r\n# Creating the data frame.  \r\ninput_data&lt;- data.frame(height,weight,gender)  \r\nprint(input_data)  \r\n  \r\n# Testing if the gender column is a factor.  \r\nprint(is.factor(input_data$gender))  \r\n  \r\n# Printing the gender column to see the levels.  \r\nprint(input_data$gender)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>height weight gender\n1    132     40   male\n2    162     49   male\n3    152     48 female\n4    166     40 female\n5    139     67   male\n6    147     52 female\n7    122     53   male\n&#91;1] TRUE\n&#91;1] male   male   female female male   female male\nLevels: female male\n</code></pre>\n\n\n\n<h2>Changing order of the levels</h2>\n\n\n\n<p>In R, we can change the order of the levels in the factor with the help of the factor function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>data &lt;- c(\"Nishka\",\"Gunjan\",\"Shubham\",\"Arpita\",\"Arpita\",\"Sumit\",\"Gunjan\",\"Shubham\")  \r\n# Creating the factors  \r\nfactor_data&lt;- factor(data)  \r\nprint(factor_data)  \r\n  \r\n# Apply the factor function with the required order of the level.  \r\nnew_order_factor&lt;- factor(factor_data,levels = c(\"Gunjan\",\"Nishka\",\"Arpita\",\"Shubham\",\"Sumit\"))  \r\nprint(new_order_factor)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] Nishka Gunjan Shubham Arpita Arpita Sumit Gunjan Shubham\nLevels: Arpita Gunjan Nishka Shubham Sumit\n&#91;1] Nishka Gunjan Shubham Arpita Arpita Sumit Gunjan Shubham\nLevels: Gunjan Nishka Arpita Shubham Sumit\n</code></pre>\n\n\n\n<h2>Generating Factor Levels</h2>\n\n\n\n<p>R provides gl() function to generate factor levels. This function takes three arguments i.e., n, k, and labels. Here, n and k are the integers which indicate how many levels we want and how many times each level is required.</p>\n\n\n\n<p>There is the following syntax of gl() function which is as follows</p>\n\n\n\n<ol><li>gl(n,&nbsp;k,&nbsp;labels)&nbsp;&nbsp;</li></ol>\n\n\n\n<ol><li>n indicates the number of levels.</li><li>k indicates the number of replications.</li><li>labels is a vector of labels for the resulting factor levels.</li></ol>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>gen_factor&lt;- gl(3,5,labels=c(\"BCA\",\"MCA\",\"B.Tech\"))  \r\ngen_factor </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1] BCA BCA BCA BCA BCA MCA MCA MCA MCA MCA\n&#91;11] B.Tech B.Tech B.Tech B.Tech B.Tech\nLevels: BCA MCA B.Tech</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The factor is a data structure which is used for fields which take only predefined finite number of values. These are the variable which takes a limited number of different values. These are the data objects which are used to categorize the data and to store it on multiple levels. It can store both integers [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/359"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=359"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/359/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 360,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/359/revisions/360"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=359"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=359"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=359"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 361,
    "date": "2020-10-21T10:47:38",
    "date_gmt": "2020-10-21T10:47:38",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=361"
    },
    "modified": "2020-10-21T10:47:38",
    "modified_gmt": "2020-10-21T10:47:38",
    "slug": "data-reshaping-in-r",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-reshaping-in-r/",
    "title": {
      "rendered": "Data Reshaping in R"
    },
    "content": {
      "rendered": "\n<p>In R, Data Reshaping is about changing how the data is organized into rows and columns. In R, data processing is done by taking the input as a data frame. It is much easier to extract data from the rows and columns of a data frame, but there is a problem when we need a data frame in a format which is different from the format in which we received it. R provides many functions to merge, split, and change the rows to columns and vice-versa in a data frame.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-reshaping.png\" alt=\"Data Reshaping in R\"/></figure>\n\n\n\n<h2>Transpose a Matrix</h2>\n\n\n\n<p>R allows us to calculate the transpose of a matrix or a data frame by providing t() function. This t() function takes the matrix or data frame as an input and return the transpose of the input matrix or data frame. The syntax of t() function is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>t(Matrix/data frame)  </code></pre>\n\n\n\n<p>Let&#8217;s see an example to understand how this function is used</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a &lt;- matrix(c(4:12),nrow=3,byrow=TRUE)  \r\na  \r\nprint(\"Matrix after transpose\\n\")  \r\nb &lt;- t(a)  \r\nb </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-reshaping-output1.png\" alt=\"Data Reshaping in R\"/></figure>\n\n\n\n<h2>Joining rows and columns in Data Frame</h2>\n\n\n\n<p>R allows us to join multiple vectors to create a data frame. For this purpose R provides cbind() function. R also provides rbind() function, which allows us to merge two data frame. In some situation, we need to merge data frames to access the information which depends on both the data frame. There is the following syntax of cbind() function and rbind() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cbind(vector1, vector2,.......vectorN)  \r\nrbind(dataframe1, dataframe2,........dataframeN)  </code></pre>\n\n\n\n<p>Let&#8217;s see an example to understand how cbind() and rbind() function is used.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating vector objects  \r\nName &lt;- c(\"Shubham Rastogi\",\"Nishka Jain\",\"Gunjan Garg\",\"Sumit Chaudhary\")  \r\nAddress &lt;- c(\"Moradabad\",\"Etah\",\"Sambhal\",\"Khurja\")  \r\nMarks &lt;- c(255,355,455,655)  \r\n  \r\n#Combining vectors into one data frame  \r\ninfo &lt;- cbind(Name,Address,Marks)  \r\n  \r\n#Printing data frame  \r\nprint(info)  \r\n  \r\n# Creating another data frame with similar columns  \r\nnew.stuinfo &lt;- data.frame(  \r\n    Name = c(\"Deepmala\",\"Arun\"),  \r\n    Address = c(\"Khurja\",\"Moradabad\"),  \r\n    Marks = c(\"755\",\"855\"),  \r\n    stringsAsFactors=FALSE  \r\n)  \r\n  \r\n#Printing a header.  \r\ncat(\"# # # The Second data frame\\n\")   \r\n  \r\n#Printing the data frame.  \r\nprint(new.stuinfo)  \r\n  \r\n# Combining rows form both the data frames.  \r\nall.info &lt;- rbind(info,new.stuinfo)  \r\n  \r\n# Printing a header.  \r\ncat(\"# # # The combined data frame\\n\")   \r\n  \r\n# Printing the result.  \r\nprint(all.info)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-reshaping-output2.png\" alt=\"Data Reshaping in R\"/></figure>\n\n\n\n<h2>Merging Data Frame</h2>\n\n\n\n<p>R provides the merge() function to merge two data frames. In the merging process, there is a constraint i.e.; data frames must have the same column names.</p>\n\n\n\n<p>Let&#8217;s take an example in which we take the dataset about Diabetes in Pima Indian Women which is present in the &#8220;MASS&#8221; library. We will merge two datasets on the basis of the value of the blood pressure and body mass index. When selecting these two columns for merging, the records where values of these two variables match in both data sets are combined together to form a single data frame.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>library(MASS)  \r\nmerging_pima&lt;- merge(x = Pima.te, y = Pima.tr,  \r\n   by.x = c(\"bp\", \"bmi\"),  \r\n   by.y = c(\"bp\", \"bmi\")  \r\n)  \r\nprint(merging_pima)  \r\nnrow(merging_pima)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-reshaping-output3.png\" alt=\"Data Reshaping in R\"/></figure>\n\n\n\n<h2>Melting and Casting</h2>\n\n\n\n<p>In R, the most important and interesting topic is about changing the shape of the data in multiple steps to get the desired shape. For this purpose, R provides melt() and cast() function. To understand its process, consider a dataset called ships which is present in the MASS library.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>library(MASS)  \r\nprint(ships)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-reshaping-output4.png\" alt=\"Data Reshaping in R\"/></figure>\n\n\n\n<h3>Melt the Data</h3>\n\n\n\n<p>Now we will use the above data to organize it by melting it. Melting means the conversion of columns into multiple rows. We will convert all the columns except type and year of the above dataset into multiple rows.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>library(MASS)  \r\nlibrary(reshape2)  \r\nmolten_ships &lt;- melt(ships, id = c(\"type\",\"year\"))  \r\nprint(molten_ships) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-reshaping-output5.png\" alt=\"Data Reshaping in R\"/></figure>\n\n\n\n<h3>Casting of Molten Data</h3>\n\n\n\n<p>After melting the data, we can cast it into a new form where the aggregate of each type of ship for each year is created. For this purpose, R provides cast() function.</p>\n\n\n\n<p>Let&#8217;s starts doing the casting of our molten data.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>library(MASS)  \r\nlibrary(reshape2)  \r\n#Melting the data  \r\nmolten.ships &lt;- melt(ships, id = c(\"type\",\"year\"))  \r\nprint(\"Molted Data\")  \r\nprint(molten.ships)  \r\n#Casting of data  \r\nrecasted.ship &lt;- dcast(molten.ships, type+year~variable,sum)  \r\nprint(\"Cast Data\")  \r\nprint(recasted.ship)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-reshaping-output6.png\" alt=\"Data Reshaping in R\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In R, Data Reshaping is about changing how the data is organized into rows and columns. In R, data processing is done by taking the input as a data frame. It is much easier to extract data from the rows and columns of a data frame, but there is a problem when we need a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/361"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=361"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/361/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 362,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/361/revisions/362"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=361"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=361"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=361"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 363,
    "date": "2020-10-21T10:52:50",
    "date_gmt": "2020-10-21T10:52:50",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=363"
    },
    "modified": "2020-10-21T10:52:50",
    "modified_gmt": "2020-10-21T10:52:50",
    "slug": "what-is-object-oriented-programming-in-r",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/what-is-object-oriented-programming-in-r/",
    "title": {
      "rendered": "What is Object-Oriented Programming in R?"
    },
    "content": {
      "rendered": "\n<p>Object-Oriented Programming (OOP) is the most popular programming language. With the help of oops concepts, we can construct the modular pieces of code which are used to build blocks for large systems. R is a functional language, and we can do programming in oops style. In R, oops is a great tool to manage the complexity of larger programs.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<p>In Object-Oriented Programming, S3 and S4 are the two important systems.</p>\n\n\n\n<p><strong>S3</strong></p>\n\n\n\n<p>In oops, the S3 is used to overload any function. So that we can call the functions with different names and it depends on the type of input parameter or the number of parameters.</p>\n\n\n\n<p><strong>S4</strong></p>\n\n\n\n<p>S4 is the most important characteristic of oops. However, this is a limitation, as it is quite difficult to debug. There is an optional reference class for S4.</p>\n\n\n\n<h2>Objects and Classes in R</h2>\n\n\n\n<p>In R, everything is an object. Therefore, programmers perform OOPS concept when they write code in R. An object is a data structure which has some methods that can act upon its attributes.</p>\n\n\n\n<p>In R, classes are the outline or design for the object. Classes encapsulate the data members, along with the functions. In R, there are two most important classes, i.e., S3 and S4, which play an important role in performing OOPs concepts.</p>\n\n\n\n<p>Let&#8217;s discuss both the classes one by one with their examples for better understanding.</p>\n\n\n\n<h3>1) S3 Class</h3>\n\n\n\n<p>With the help of the S3 class, we can take advantage of the ability to implement the generic function OO. Furthermore, using only the first argument, S3 is capable of dispatching. S3 differs from traditional programming languages such as Java, C ++, and C #, which implement OO passing messages. This makes S3 easy to implement. In the S3 class, the generic function calls the method. S3 is very casual and has no formal definition of classes.</p>\n\n\n\n<p>S3 requires very little knowledge from the programmer.</p>\n\n\n\n<h3>Creating an S3 class</h3>\n\n\n\n<p>In R, we define a function which will create a class and return the object of the created class. A list is made with relevant members, class of the list is determined, and a copy of the list is returned. There is the following syntax to create a class</p>\n\n\n\n<pre class=\"wp-block-code\"><code>variable_name &lt;- list(member1, member2, member3.........memberN)  </code></pre>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>s &lt;- list(name = \"Ram\", age = 29, GPA = 4.0)  \r\nclass(s) &lt;- \"Faculty\"  \r\ns  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output1.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<p>There is the following way in which we define our generic function print.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print  \r\nfunction(x, ...)  \r\nUseMethod(\"Print\")  </code></pre>\n\n\n\n<p>When we execute or run the above code, it will give us the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output2.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<p>Like print function, we will make a generic function GPA to assign a new value to our GPA member. In the following way we will make the generic function GPA</p>\n\n\n\n<pre class=\"wp-block-code\"><code>GPA &lt;- function(obj1){  \r\nUseMethod(\"GPA\")  \r\n}  </code></pre>\n\n\n\n<p>Once our generic function GPA is created, we will implement a default function for it</p>\n\n\n\n<pre class=\"wp-block-code\"><code>GPA.default &lt;- function(obj){  \r\ncat(\"We are entering in generic function\\n\")  \r\n}  </code></pre>\n\n\n\n<p>After that we will make a new method for our GPA function in the following way</p>\n\n\n\n<pre class=\"wp-block-code\"><code>GPA.faculty &lt;- function(obj1){  \r\ncat(\"Final GPA is \",obj1$GPA,\"\\n\")  \r\n}  </code></pre>\n\n\n\n<p>And at last we will run the method GPA as</p>\n\n\n\n<pre class=\"wp-block-code\"><code>GPA(s) </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output3.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<h3>Inheritance in S3</h3>\n\n\n\n<p>Inheritance means extracting the features of one class into another class. In the S3 class of R, inheritance is achieved by applying the class attribute in a vector.</p>\n\n\n\n<p>For inheritance, we first create a function which creates new object of class faculty in the following way</p>\n\n\n\n<pre class=\"wp-block-code\"><code>faculty&lt;- function(n,a,g) {  \r\nvalue &lt;- list(nname=n, aage=a, GPA=g)  \r\nattr(value, \"class\") &lt;- \"faculty\"  \r\nvalue  \r\n}  </code></pre>\n\n\n\n<p>After that we will define a method for generic function print() as</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print.student &lt;- function(obj1) {  \r\ncat(1obj$name, \"\\n\")  \r\ncat(1obj$age, \"years old\\n\")  \r\ncat(\"GPA:\", obj1$GPA, \"\\n\")  \r\n}  </code></pre>\n\n\n\n<p>Now, we will create an object of class InternationalFaculty which will inherit from faculty class. This process will be done by assigning a character vector of class name as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class(Objet) &lt;- c(child, parent)  </code></pre>\n\n\n\n<p>so,</p>\n\n\n\n<pre class=\"wp-block-code\"><code># create a list  \r\nfac &lt;- list(name=\"Shubham\", age=22, GPA=3.5, country=\"India\")  \r\n# make it of the class InternationalFaculty which is derived from the class Faculty  \r\nclass(fac) &lt;- c(\"InternationalFaculty\",\"Faculty\")  \r\n# print it out  \r\nfac  </code></pre>\n\n\n\n<p>When we run the above code which we have discussed, it will generate the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output4.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<p>We can see above that, we have not defined any method of form print. InternationalFaculty (), the method called print.Faculty(). This method of class Faculty was inherited.</p>\n\n\n\n<p>So our next step is to defined print.InternationalFaculty() in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print.InternationalFaculty&lt;- function(obj1) {  \r\ncat(obj1$name, \"is from\", obj1$country, \"\\n\")  \r\n}  </code></pre>\n\n\n\n<p>The above function will overwrite the method defined for class faculty as</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Fac  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output5.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<h3>getS3method and getAnywhere function</h3>\n\n\n\n<p>There are the two most common and popular S3 method functions which are used in R. The first method is&nbsp;<strong>getS3method()</strong>&nbsp;and the second one is&nbsp;<strong>getAnywhere()</strong>.</p>\n\n\n\n<p>S3 finds the appropriate method associated with a class, and it is useful to see how a method is implemented. Sometimes, the methods are non-visible, because they are hidden in a namespace. We use getS3method or getAnywhere to solve this problem.</p>\n\n\n\n<p><strong>getS3method</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output6.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<p><strong>getAnywhere function</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>getAnywhere(\"simpleloess\")  </code></pre>\n\n\n\n<h3>2) S4 Class</h3>\n\n\n\n<p>The S4 class is similar to the S3 but is more formal than the latter one. It differs from S3 in two different ways. First, in S4, there are formal class definitions which provide a description and representation of classes. In addition, it has special auxiliary functions for defining methods and generics. The S4 also offers multiple dispatches. This means that common functions are capable of taking methods based on multiple arguments which are based on class.</p>\n\n\n\n<h3>Creating an S4 class</h3>\n\n\n\n<p>In R, we use setClass() command for creating S4 class. In S4 class, we will specify a function for verifying the data consistency and also specify the default value. In R, member variables are called slots.</p>\n\n\n\n<p>To create an S3 class, we have to define the class and its slots. There are the following steps to create an S4 class</p>\n\n\n\n<p><strong>Step 1:</strong></p>\n\n\n\n<p>In the first step, we will create a new class called faculty with three slots name, age, and GPA.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>setClass(\"faculty\", slots=list(name=\"character\", age=\"numeric\", GPA=\"numeric\"))  </code></pre>\n\n\n\n<p>There are many other optional arguments of setClass() function which we can explore by using&nbsp;<strong>?setClass</strong>&nbsp;command.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output7.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<p><strong>Step 2:</strong></p>\n\n\n\n<p>In the next step, we will create the object of S4 class. R provides new() function to create an object of S4 class. In this new function we pass the class name and the values for the slots in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>setClass(\"faculty\", slots=list(name=\"character\", age=\"numeric\", GPA=\"numeric\"))  \r\n# creating an object using new()  \r\n# providing the class name and value for slots  \r\ns &lt;- new(\"faculty\",name=\"Shubham\", age=22, GPA=3.5)  \r\ns  </code></pre>\n\n\n\n<p>It will generate the following output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output8.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<h3>Creating S4 objects using a generator function</h3>\n\n\n\n<p>The setClass() function returns a generator function. This generator function helps in creating new objects. And it acts as a constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A &lt;- setClass(\"faculty\", slots=list(name=\"character\", age=\"numeric\", GPA=\"numeric\"))  \r\nA</code></pre>\n\n\n\n<p>It will generate the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output9.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<p>Now we can use the above constructor function to create new objects. The constructor in turn uses the new() function to create objects. It is just a wrap around. Let&#8217;s see an example to understand how S4 object is created with the help of generator function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>faculty&lt;-setClass(\"faculty\", slots=list(name=\"character\", age=\"numeric\", GPA=\"numeric\"))  \r\n# creating an object using generator() function  \r\n# providing the class name and value for slots  \r\nfaculty(name=\"Shubham\", age=22, GPA=3.5)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output10.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<h3>Inheritance in S4 class</h3>\n\n\n\n<p>Like S3 class, we can perform inheritance in S4 class also. The derived class will inherit both attributes and methods of the parent class. Let&#8217;s start understanding that how we can perform inheritance in S4 class. There are the following ways to perform inheritance in S4 class:</p>\n\n\n\n<p><strong>Step 1:</strong></p>\n\n\n\n<p>In the first step, we will create or define class with appropriate slots in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>setClass(\"faculty\",  \r\nslots=list(name=\"character\", age=\"numeric\", GPA=\"numeric\")  \r\n) </code></pre>\n\n\n\n<p><strong>Step 2:</strong></p>\n\n\n\n<p>After defining class, our next step is to define class method for the display() generic function. This will be done in the following manner:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>setMethod(\"show\",  \r\n\"faculty\",  \r\nfunction(obj) {  \r\ncat(obj@name, \"\\n\")  \r\ncat(obj@age, \"years old\\n\")  \r\ncat(\"GPA:\", obj@GPA, \"\\n\")  \r\n}  \r\n)  </code></pre>\n\n\n\n<p><strong>Step 3:</strong></p>\n\n\n\n<p>In the next step, we will define the derived class with the argument contains. The derived class is defined in the following way</p>\n\n\n\n<pre class=\"wp-block-code\"><code>setClass(\"Internationalfaculty\",  \r\nslots=list(country=\"character\"),  \r\ncontains=\"faculty\"  \r\n)  </code></pre>\n\n\n\n<p>In our derived class we have defined only one attribute i.e. country. Other attributes will be inherited from its parent class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>s &lt;- new(\"Internationalfaculty\",name=\"John\", age=21, GPA=3.5, country=\"India\")  \r\nshow(s)</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-object-oriented-programming-output11.png\" alt=\"R Object Oriented Programming\"/></figure>\n\n\n\n<p>When we did show(s), the method defines for class faculty gets called. We can also define methods for the derived class of the base class as in the case of the S3 system.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Object-Oriented Programming (OOP) is the most popular programming language. With the help of oops concepts, we can construct the modular pieces of code which are used to build blocks for large systems. R is a functional language, and we can do programming in oops style. In R, oops is a great tool to manage the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/363"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=363"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/363/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 364,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/363/revisions/364"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=363"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=363"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=363"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 365,
    "date": "2020-10-21T11:04:40",
    "date_gmt": "2020-10-21T11:04:40",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=365"
    },
    "modified": "2020-10-21T11:04:40",
    "modified_gmt": "2020-10-21T11:04:40",
    "slug": "what-is-r-debug",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/what-is-r-debug/",
    "title": {
      "rendered": "What is R Debug?"
    },
    "content": {
      "rendered": "\n<p>In computer programming, debugging is a multi-step process which involves identifying a problem, isolating the source of the problem, and then fixing the problem or determining a way to work around it. The final step of debugging is to test an improvement or workaround and ensure that it works.</p>\n\n\n\n<p>The grammatically correct program may give us incorrect results due to some logical errors which are known as &#8220;<strong>bug</strong>.&#8221; In case, if such errors occur, then we need to find out why and where they have occurred so that we can fix them. The procedure to identify and fix bugs is called &#8220;<strong>debugging</strong>.&#8221;</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-debugging.png\" alt=\"R Debugging\"/></figure>\n\n\n\n<h2>Fundamental principles of Debugging</h2>\n\n\n\n<p>R programmers find that they spend more time in debugging of a program than actually writing it or code it. This makes debugging skills less valuable. In R, there are various principles of debugging which help the programmers to spend their time in writing and coding rather than in debugging. These principles are as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/fundamental-principles-of-r-debugging.png\" alt=\"R Debugging\"/></figure>\n\n\n\n<h3>1. The essence of debugging</h3>\n\n\n\n<p>Fixing a bugging is a process of confirmation. It gradually confirms that many aspects we believe to be true about the code are true actually. When it is found that one such assumption is false, there we found a clue to the bug&#8217;s location.</p>\n\n\n\n<p><strong>For example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a &lt;- b^2 + 3*c(z, 2)  \r\nx&lt;- 28  \r\nif (x+q> 0)   \r\nt&lt;- 1   \r\nelse   \r\n     u&lt;- -10 </code></pre>\n\n\n\n<h3>2. Start Small</h3>\n\n\n\n<p>Stick to small, simple test cases, at least at the beginning of the R debug process. Working with big data objects can make it difficult to think about the problem. Of course, we should eventually test our code in large, complex cases, but start small.</p>\n\n\n\n<h3>3. Debug in a Modular</h3>\n\n\n\n<p>Most professional software developers agree that the code should be written in a modular manner. Our first-level code should not be too long for a function call. And those functions should not be too long and should call another function if necessary. This makes the code easier to write and helps others understand when the time comes to extend the code.</p>\n\n\n\n<p>We should debug in a top-down manner. Suppose we have the debug state of our function f () and it has the below line.</p>\n\n\n\n<p><strong>For example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Y &lt;- g (x, 8)  </code></pre>\n\n\n\n<p>Currently, say no to debug (g). Execute the line and see if g () returns the value that we expect. If this happens, we simply have to avoid the single-step time-consuming process through g(). If g () returns an incorrect value, now is the time to call debug (g).</p>\n\n\n\n<h3>4. Antibugging</h3>\n\n\n\n<p>If there is a section of a code in which a variable z should be positive then we can insert the following line for better performance:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>             Stopifnot(z>0)</code></pre>\n\n\n\n<p>When there is a bug in the code like the value of z is equal to -3, then the <strong>Stopifnot()</strong> function is called and will bring things right there with an error message :</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Error:x>0 is not TRUE</code></pre>\n\n\n\n<h2>Functions</h2>\n\n\n\n<p>In R, for debugging purposes, there are lots of functions available. These functions play an important role in removing bugs from our code. R provides the following functions of debugging:</p>\n\n\n\n<h3>1) traceback()</h3>\n\n\n\n<p>If our code has already crashed and we want to know where the offensive line is, try traceback (). This will (sometimes) show the location somewhere in the code of the problem. When an R function fails, an error is printed on the screen. Immediately after the error, we can call traceback () to see on which function the error occurred. The traceback () function prints the list of functions which were called before the error had occurred. The functions are printed in reverse order.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how we can use the traceback() function</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>f &lt;- function(a){  \r\n    x &lt;- a-ql(a)  \r\n    x  \r\n}  \r\nql&lt;- function(b){  \r\n    r &lt;- b*mn(b)  \r\n    r  \r\n}  \r\nmn&lt;- function(p){  \r\n    r &lt;- log(p)  \r\n    if(r&lt;10)  \r\n        r^2  \r\n    else  \r\n        r^3  \r\n}  \r\nf(-2)  </code></pre>\n\n\n\n<p>When we run the above code, it will generate the following output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-debugging-functions.png\" alt=\"R Debugging\"/></figure>\n\n\n\n<p>After finding the following error we call our traceback() function and when we run, it will show the following output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>traceback()\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-debugging-functions2.png\" alt=\"R Debugging\"/></figure>\n\n\n\n<h3>2) debug()</h3>\n\n\n\n<p>In R, debug () function allows the user to step through the execution of a function. At any point, we can print the values of the variables or draw a graph of the results within the function. While debugging, we can just type &#8220;c&#8221; to continue to the end of the current block of code. Traceback () does not tell us where the function error occurred. To know which line is causing the error, we have to step through the function using debug ().</p>\n\n\n\n<p>Let&#8217;s see an example to understand how the debug function is used in R.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>func&lt;- function(a,value){  \r\nsubt&lt;- value-a  \r\nsquar&lt;- subt^2  \r\ncollect &lt;- sum(squar)  \r\ncollect  \r\n}  \r\nset.seed(100)  \r\nvalue &lt;- rnorm(100)  \r\nfunc(1,value)  \r\ndebug(func)  \r\nfunc(1,value)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-debugging-functions3.png\" alt=\"R Debugging\"/></figure>\n\n\n\n<h3>3) browser()</h3>\n\n\n\n<p>The browser() function halts the execution of a function until the user allows it to continue. This is useful if we don&#8217;t want to step through the complete code, line-by-line, but we wish to stop it at a certain point so we can check what&#8217;s going on.</p>\n\n\n\n<p>Inserting a call into the browser() in a function will pause the function&#8217;s execution at the point where the browser () is called. It is same as using debug (), except that we can control where the execution gets pause.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how the browser() function is used in R.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a&lt;-function(b) {  \r\n  browser() ## a break point inserted here  \r\n  c&lt;-log(b)  \r\n  if(c&lt;10)  \r\n    c^2  \r\n  else  \r\n    c^3  \r\n}  \r\na(-1)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-debugging-functions4.png\" alt=\"R Debugging\"/></figure>\n\n\n\n<h3>4) trace()</h3>\n\n\n\n<p>The trace() function call allows the user to insert bits of code into the function. The syntax for the R debug function trace () is a bit awkward for first-time users. It may be better to use debug ().</p>\n\n\n\n<p>Let&#8217;s see an example to understand how the browser() function is used in R.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>f &lt;- function(a){  \r\n    x &lt;- a-ql(a)  \r\n    x  \r\n}  \r\nql&lt;- function(b){  \r\n    r &lt;- b*mn(b)  \r\n    r  \r\n}  \r\nmn&lt;- function(p){  \r\n    r &lt;- log(p)  \r\n    if(r&lt;10)  \r\n        r^2  \r\n    else  \r\n        r^3  \r\n}  \r\nas.list(body(mn))  \r\ntrace(\"mn\",quote(if(is.nan(r)){browser()}),at=3,print=FALSE)  \r\nf(1)  \r\nf(-1)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-debugging-functions5.png\" alt=\"R Debugging\"/></figure>\n\n\n\n<h3>5) recover()</h3>\n\n\n\n<p>When we will perform debugging of a function, recover () allows us to examine variables in an upper-level function.</p>\n\n\n\n<p>By typing a number in the selection, we are navigated to the function on the call stack and deployed in a browser environment.</p>\n\n\n\n<p>The recover () function is used as an error handler, set using options () (eg. Adopt (error = retrieval)).</p>\n\n\n\n<p>When a function throws an error, execution is stopped at the point of failure. We can browse the function call and examine the environment to find the source of the problem.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>f &lt;- function(a){  \r\n    x &lt;- a-ql(a)  \r\n    x  \r\n}  \r\nql&lt;- function(b){  \r\n    r &lt;- b*mn(b)  \r\n    r  \r\n}  \r\nmn&lt;- function(p){  \r\n    r &lt;- log(p)  \r\n    if(r&lt;10)  \r\n        r^2  \r\n    else  \r\n        r^3  \r\n}  \r\nas.list(body(mn))  \r\ntrace(\"mn\",quote(if(is.nan(r)){recover()}),at=3,print=FALSE)  \r\nf(-1)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-debugging-functions6.png\" alt=\"R Debugging\"/></figure>\n\n\n\n<h2>Debugging Installed Packages</h2>\n\n\n\n<p>There is probability of an error stemming by an installed R package. The several ways by which we can solve our problem are as follows:</p>\n\n\n\n<ul><li>Setting the options ( error = recover) and then it is proceeded line by line by the code using n.</li><li>In complex situations, we should have a copy of the function code. In R the function entering is used to print out the function code which can be copied into the text editor. We can edit this by loading it into the global workspace and then by performing debugging.</li><li>If our problems are not solved, then we have to download the source code. We can also use the devtools package and the install(), load_all() functions to make our procedure quicker.</li></ul>\n\n\n\n<h2>Error Handling and Recovery</h2>\n\n\n\n<p>Exception or error handling is a process of response to odd events of code that interrupts the flow of code. In general, the scope for the exception handler begins with a try and ends with a catch. R provides the try (), and trycatch () functions for the same.</p>\n\n\n\n<p>The try () function is the wrapper function for trycatch () that prints the error and then continues. On the other hand, trycatch () gives us control of the error function and, optionally, also continues the process of the function.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In computer programming, debugging is a multi-step process which involves identifying a problem, isolating the source of the problem, and then fixing the problem or determining a way to work around it. The final step of debugging is to test an improvement or workaround and ensure that it works. The grammatically correct program may give [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/365"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=365"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/365/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 366,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/365/revisions/366"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=365"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=365"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=365"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 367,
    "date": "2020-10-21T11:08:30",
    "date_gmt": "2020-10-21T11:08:30",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=367"
    },
    "modified": "2020-10-21T11:08:30",
    "modified_gmt": "2020-10-21T11:08:30",
    "slug": "r-csv-files",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-csv-files/",
    "title": {
      "rendered": "R CSV Files"
    },
    "content": {
      "rendered": "\n<p>A&nbsp;<strong>Comma-Separated Values (CSV) file</strong>&nbsp;is a plain text file which contains a list of data. These files are often used for the exchange of data between different applications. For example, databases and contact managers mostly support CSV files.</p>\n\n\n\n<p>These files can sometimes be called&nbsp;<strong>character-separated values</strong>&nbsp;or&nbsp;<strong>comma-delimited files</strong>. They often use the comma character to separate data, but sometimes use other characters such as semicolons. The idea is that we can export the complex data from one application to a CSV file, and then importing the data in that CSV file to another application.</p>\n\n\n\n<p>Storing data in excel spreadsheets is the most common way for data storing, which is used by the data scientists. There are lots of packages in R designed for accessing data from the excel spreadsheet. Users often find it easier to save their spreadsheets in comma-separated value files and then use R&#8217;s built-in functionality to read and manipulate the data.</p>\n\n\n\n<p>R allows us to read data from files which are stored outside the R environment. Let&#8217;s start understanding how we can read and write data into CSV files. The file should be present in the current working directory so that R can read it. We can also set our directory and read file from there.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<h2>Getting and setting the working directory</h2>\n\n\n\n<p>In R, getwd() and setwd() are the two useful functions. The getwd() function is used to check on which directory the R workspace is pointing. And the setwd() function is used to set a new working directory to read and write files from that directory.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how getwd() and setwd() functions are used.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Getting and printing current working directory.  \r\nprint(getwd())  \r\n# Setting the current working directory.  \r\nsetwd(\"C:/Users/ajeet\")  \r\n# Getting and printingthe current working directory.  \r\nprint(getwd())  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files2.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<h2>Creating a CSV File</h2>\n\n\n\n<p>A text file in which a comma separates the value in a column is known as a CSV file. Let&#8217;s start by creating a CSV file with the help of the data, which is mentioned below by saving with .csv extension using the save As All files(*.*) option in the notepad.</p>\n\n\n\n<p><strong>Example: record.csv</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>id,name,salary,start_date,dept  \r\n1,Shubham,613.3,2012-01-01,IT  \r\n2,Arpita,525.2,2013-09-23,Operations  \r\n3,Vaishali,63,2014-11-15,IT  \r\n4,Nishka,749,2014-05-11,HR  \r\n5,Gunjan,863.25,2015-03-27,Finance  \r\n6,Sumit,588,2013-05-21,IT  \r\n7,Anisha,932.8,2013-07-30,Operations  \r\n8,Akash,712.5,2014-06-17,Financ  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files3.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<h2>Reading a CSV file</h2>\n\n\n\n<p>R has a rich set of functions. R provides read.csv() function, which allows us to read a CSV file available in our current working directory. This function takes the file name as an input and returns all the records present on it.</p>\n\n\n\n<p>Let&#8217;s use our record.csv file to read records from it using read.csv() function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>data &lt;- read.csv(\"record.csv\")  \r\nprint(data)  </code></pre>\n\n\n\n<p>When we execute above code, it will give the following output</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files4.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<h2>Analyzing the CSV File</h2>\n\n\n\n<p>When we read data from the .csv file using&nbsp;<strong>read.csv()</strong>&nbsp;function, by default, it gives the output as a data frame. Before analyzing data, let&#8217;s start checking the form of our output with the help of&nbsp;<strong>is.data.frame()</strong>&nbsp;function. After that, we will check the number of rows and number of columns with the help of&nbsp;<strong>nrow()</strong>&nbsp;and&nbsp;<strong>ncol()</strong>&nbsp;function.</p>\n\n\n\n<p><strong>Example</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>csv_data&lt;- read.csv(\"record.csv\")  \r\nprint(is.data.frame(csv_data))  \r\nprint(ncol(csv_data))  \r\nprint(nrow(csv_data))</code></pre>\n\n\n\n<p>When we run above code, it will generate the following output:</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files5.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<p>From the above output, it is clear that our data is read in the form of the data frame. So we can apply all the functions of the data frame, which we have discussed in the earlier sections.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files6.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<p><strong>Example: Getting the maximum salary</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a data frame.  \r\ncsv_data&lt;- read.csv(\"record.csv\")  \r\n  \r\n# Getting the maximum salary from data frame.  \r\nmax_sal&lt;- max(csv_data$salary)  \r\nprint(max_sal)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files7.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<p><strong>Example: Getting the details of the person who have a maximum salary</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a data frame.  \r\ncsv_data&lt;- read.csv(\"record.csv\")  \r\n  \r\n# Getting the maximum salary from data frame.  \r\nmax_sal&lt;- max(csv_data$salary)  \r\nprint(max_sal)  \r\n  \r\n#Getting the detais of the pweson who have maximum salary  \r\ndetails &lt;- subset(csv_data,salary==max(salary))  \r\nprint(details)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files8.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<p><strong>Example: Getting the details of all the persons who are working in the IT department</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a data frame.  \r\ncsv_data&lt;- read.csv(\"record.csv\")  \r\n  \r\n#Getting the detais of all the pweson who are working in IT department  \r\ndetails &lt;- subset(csv_data,dept==\"IT\")  \r\nprint(details)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files9.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<p><strong>Example: Getting the details of the persons whose salary is greater than 600 and working in the IT department.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a data frame.  \r\ncsv_data&lt;- read.csv(\"record.csv\")  \r\n  \r\n#Getting the detais of all the pweson who are working in IT department  \r\ndetails &lt;- subset(csv_data,dept==\"IT\"&amp;salary>600)  \r\nprint(details)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files10.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<p><strong>Example: Getting details of those peoples who joined on or after 2014.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a data frame.  \r\ncsv_data&lt;- read.csv(\"record.csv\")  \r\n  \r\n#Getting details of those peoples who joined on or after 2014  \r\ndetails &lt;- subset(csv_data,as.Date(start_date)>as.Date(\"2014-01-01\"))  \r\nprint(details)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files11.png\" alt=\"R CSV Files\"/></figure>\n\n\n\n<h2>Writing into a CSV file</h2>\n\n\n\n<p>Like reading and analyzing, R also allows us to write into the .csv file. For this purpose, R provides a write.csv() function. This function creates a CSV file from an existing data frame. This function creates the file in the current working directory.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how&nbsp;<strong>write.csv()</strong>&nbsp;function is used to create an output CSV file.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>csv_data&lt;- read.csv(\"record.csv\")  \r\n  \r\n#Getting details of those peoples who joined on or after 2014  \r\ndetails &lt;- subset(csv_data,as.Date(start_date)>as.Date(\"2014-01-01\"))  \r\n  \r\n# Writing filtered data into a new file.  \r\nwrite.csv(details,\"output.csv\")  \r\nnew_details&lt;- read.csv(\"output.csv\")  \r\nprint(new_details)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-csv-files12.png\" alt=\"R CSV Files\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A&nbsp;Comma-Separated Values (CSV) file&nbsp;is a plain text file which contains a list of data. These files are often used for the exchange of data between different applications. For example, databases and contact managers mostly support CSV files. These files can sometimes be called&nbsp;character-separated values&nbsp;or&nbsp;comma-delimited files. They often use the comma character to separate data, but [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/367"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=367"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/367/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 368,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/367/revisions/368"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=367"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=367"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=367"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 369,
    "date": "2020-10-21T11:10:25",
    "date_gmt": "2020-10-21T11:10:25",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=369"
    },
    "modified": "2020-10-21T11:10:25",
    "modified_gmt": "2020-10-21T11:10:25",
    "slug": "r-excel-file",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-excel-file/",
    "title": {
      "rendered": "R Excel file"
    },
    "content": {
      "rendered": "\n<p>The xlsx is a file extension of a spreadsheet file format which was created by Microsoft to work with Microsoft Excel. In the present era, Microsoft Excel is a widely used spreadsheet program that sores data in the .xls or .xlsx format. R allows us to read data directly from these files by providing some excel specific packages. There are lots of packages such as XLConnect, xlsx, gdata, etc. We will use xlsx package, which not only allows us to read data from an excel file but also allow us to write data in it.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-excel-file.png\" alt=\"R Excel file\"/></figure>\n\n\n\n<h2>Install xlsx Package</h2>\n\n\n\n<p>Our primary task is to install &#8220;xlsx&#8221; package with the help of install.package command. When we install the xlsx package, it will ask us to install some additional packages on which this package is dependent. For installing the additional packages, the same command is used with the required package name. There is the following syntax of install command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"package name\")  </code></pre>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"xlsx\")  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-excel-file2.png\" alt=\"R Excel file\"/></figure>\n\n\n\n<h2>Verifying and Loading of &#8220;xlsx&#8221; Package</h2>\n\n\n\n<p>In R, grepl() and any() functions are used to verify the package. If the packages are installed, these functions will return True else return False. For verifying the package, both the functions are used together.</p>\n\n\n\n<p>For loading purposes, we use the library() function with the appropriate package name. This function loads all the additional packages also.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Installing xlsx package  \r\ninstall.packages(\"xlsx\")  \r\n  \r\n# Verifying the package is installed.  \r\nany(grepl(\"xlsx\",installed.packages()))  \r\n  \r\n# Loading the library into R workspace.  \r\nlibrary(\"xlsx\")</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-excel-file3.png\" alt=\"R Excel file\"/></figure>\n\n\n\n<h2>Creating an xlsx File</h2>\n\n\n\n<p>Once the xlsx package is loaded into our system, we will create an excel file with the following data and named it employee.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-excel-file4.png\" alt=\"R Excel file\"/></figure>\n\n\n\n<p>Apart from this, we will create another table with the following data and give it a name as employee_info.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-excel-file5.png\" alt=\"R Excel file\"/></figure>\n\n\n\n<h4><strong>Note:</strong>&nbsp;Both the files will be saved in the current working directory of the R workspace.</h4>\n\n\n\n<h2>Reading the Excel File</h2>\n\n\n\n<p>Like the CSV file, we can read data from an excel file. R provides read.xlsx() function, which takes two arguments as input, i.e., file name and index of the sheet. This function returns the excel data in the form of a data frame in the R environment. There is the following syntax of read.xlsx() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>read.xlsx(file_name,sheet_index)</code></pre>\n\n\n\n<p>Let&#8217;s see an example in which we read data from our employee.xlsx file.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading xlsx package  \r\nlibrary(\"xlsx\")  \r\n  \r\n# Reading the first worksheet in the file employee.xlsx.  \r\nexcel_data&lt;- read.xlsx(\"employee.xlsx\", sheetIndex = 1)  \r\nprint(excel_data)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-excel-file6.png\" alt=\"R Excel file\"/></figure>\n\n\n\n<h2>Writing data into Excel File</h2>\n\n\n\n<p>In R, we can also write the data into our .xlsx file. R provides a write.xlsx() function to write data into the excel file. There is the following syntax of write.xlsx() function:</p>\n\n\n\n<ol><li>write.xlsx(data_frame,file_name,col.names,row.names,sheetnames,append)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>The data_frame is our data, which we want to insert into our excel file.</li><li>The file_names is the name of that file in which we want to insert our data.</li><li>The col.names and row.names are the logical values that are specifying whether the column names/row names of the data frame are to be written to the file.</li><li>The append is a logical value, which indicates our data should be appended or not into an existing file.</li></ul>\n\n\n\n<p>Let&#8217;s see an example to understand how write.xlsx() function works with its parameters.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading xlsx package  \r\nlibrary(\"xlsx\")  \r\n  \r\n#Creating data frame  \r\nemp.data&lt;- data.frame(    \r\nname = c(\"Raman\",\"Rafia\",\"Himanshu\",\"jasmine\",\"Yash\"),    \r\nsalary = c(623.3,915.2,611.0,729.0,843.25),     \r\nstart_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",\"2015-03-27\")),  \r\ndept = c(\"Operations\",\"IT\",\"HR\",\"IT\",\"Finance\"),    \r\nstringsAsFactors = FALSE    \r\n)    \r\n  \r\n# Writing the first data set in employee.xlsxRscript  \r\nwrite.xlsx(emp.data, file = \"employee.xlsx\", col.names=TRUE, row.names=TRUE,sheetName=\"Sheet2\",append = TRUE)  \r\n      \r\n# Reading the first worksheet in the file employee.xlsx.  \r\nexcel_data&lt;- read.xlsx(\"employee.xlsx\", sheetIndex = 1)  \r\nprint(excel_data)  \r\n  \r\n# Reading the first worksheet in the file employee.xlsx.  \r\nexcel_data&lt;- read.xlsx(\"employee.xlsx\", sheetIndex = 2)  \r\nprint(excel_data)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-excel-file7.png\" alt=\"R Excel file\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The xlsx is a file extension of a spreadsheet file format which was created by Microsoft to work with Microsoft Excel. In the present era, Microsoft Excel is a widely used spreadsheet program that sores data in the .xls or .xlsx format. R allows us to read data directly from these files by providing some [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/369"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=369"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/369/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 370,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/369/revisions/370"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=369"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=369"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=369"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 373,
    "date": "2020-10-22T10:32:19",
    "date_gmt": "2020-10-22T10:32:19",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=373"
    },
    "modified": "2020-10-22T10:32:19",
    "modified_gmt": "2020-10-22T10:32:19",
    "slug": "r-binary-file",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-binary-file/",
    "title": {
      "rendered": "R Binary File"
    },
    "content": {
      "rendered": "\n<p>A binary file is a file which contains information present only in the form of bits and bytes(0&#8217;s and 1&#8217;s). They are not human-readable because the bytes translate into characters and symbols that contain many other non-printable characters. If we will read a binary file using any text editor, it will show the characters like ð and Ø.</p>\n\n\n\n<p>The code is relatively very easy to read binary data into R. To read binary data, we must know how a piece of information has been parsed into binary.</p>\n\n\n\n<p>The binary file must be read by specific programs to be useful. For example, the binary file of a Microsoft Word program can only be read by the Word program in a human-readable form. It indicates that, in addition to human-readable text, there is a lot of information such as character formatting and page numbers, etc., which are also stored with alphanumeric characters. And finally, a binary file is a contiguous sequence of bytes. The line break we see in a text file is a character joining the first line to the next line.</p>\n\n\n\n<p>Sometimes, the data generated by other programs need to be processed by R as a binary file. Also, R needs to create binary files that can be shared with other programs. There are two functions writeBin () and readBin () for creating and reading binary files in R.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binary-file.png\" alt=\"R Binary File\"/></figure>\n\n\n\n<h2>Writing the Binary File</h2>\n\n\n\n<p>Like CSV and Excel files, we can also write into a binary file. R provides a writeBin() function for writing the data into a binary file. There is the following syntax of writeBin() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>writeBin(object,con)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>The ?con&#8217; is the connection object which is used to write the binary file.</li><li>The ?object&#8217; is the binary file in which we write our data.</li></ul>\n\n\n\n<p>Let&#8217;s see an example to understand how this function is used to write data into a file in binary format. In the following example, we will use R inbuilt data &#8220;mtcars.&#8221; We will create a CSV file from it and convert it into a binary file.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Reading the \"mtcars\" data frame as a csv file and will store only the columns \"cyl\", \"am\" and \"gear\".  \r\nwrite.table(mtcars, file = \"mtcars.csv\",row.names = FALSE, na = \"\",   \r\ncol.names = TRUE, sep = \",\")  \r\n  \r\n# Storing 5 records from the csv file as a new data frame.  \r\nnew.mtcars &lt;- read.table(\"mtcars.csv\",sep = \",\",header = TRUE,nrows = 5)  \r\nnew.mtcars  \r\n  \r\n# Creating a connection object to write the binary file using mode \"wb\".  \r\nwrite.filename = file(\"/Users/ajeet/R/binary.bin\", \"wb\")  \r\n  \r\n# Writing the column names of the data frame to the connection object.  \r\nwriteBin(colnames(new.mtcars), write.filename)  \r\n  \r\n# Writing the records in each of the column to the file.  \r\nwriteBin(c(new.mtcars$cyl,new.mtcars$am,new.mtcars$gear), write.filename)  \r\n  \r\n# Closing the file for writing so that other programs can read it.  \r\nclose(write.filename)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binary-file2.png\" alt=\"R Binary File\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binary-file3.png\" alt=\"R Binary File\"/></figure>\n\n\n\n<h2>Reading the Binary File</h2>\n\n\n\n<p>We can also read our binary file which we have created before. For this purpose, R provides a readBin() function for reading the data from a binary file.</p>\n\n\n\n<p>There is the following syntax of readbin() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>readBin(con,what,n)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>The ?con&#8217; is the connection object which is used to read the binary file.</li><li>The ?what&#8217; is the mode such as character, integer, etc. which represent the bytes to be read.</li><li>The ?n&#8217; is the number of bytes which we want to read from the binary file.</li></ul>\n\n\n\n<p>Let&#8217;s see an example in which we read our binary data from binary.bin file.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a connection object to read the file in binary mode using \"rb\".  \r\nread.filename &lt;- file(\"/Users/ajeet/R/binary.bin\", \"rb\")  \r\n  \r\n# Reading the column names. n = 3 as we have 3 columns.  \r\ncolumn.names &lt;- readBin(read.filename, character(),  n = 3)  \r\n  \r\n# Reading the column values. n = 18 as we have 3 column names and 15 values.  \r\nread.filename &lt;- file(\"/Users/ajeet/R/binary.bin\", \"rb\")  \r\nbin_data &lt;- readBin(read.filename, integer(),  n = 18)  \r\n  \r\n# Printing the data.  \r\nprint(bin_data)  \r\n  \r\n# Reading the values from 4th byte to 8th byte, which represents \"cyl.\"  \r\ncyl_data = bin_data&#91;4:8]  \r\nprint(cyl_data)  \r\n  \r\n# Reading the values form 9th byte to 13th byte which represents \"am\".  \r\nam_data = bin_data&#91;9:13]  \r\nprint(am_data)  \r\n  \r\n# Reading the values form 9th byte to 13th byte which represents \"gear\".  \r\ngear_data = bin_data&#91;14:18]  \r\nprint(gear_data)  \r\n  \r\n# Combining all the read values to a dat frame.  \r\nfinal_data = cbind(cyl_data, am_data, gear_data)  \r\ncolnames(final_data) = column.names  \r\nprint(final_data)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binary-file4.png\" alt=\"R Binary File\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A binary file is a file which contains information present only in the form of bits and bytes(0&#8217;s and 1&#8217;s). They are not human-readable because the bytes translate into characters and symbols that contain many other non-printable characters. If we will read a binary file using any text editor, it will show the characters like [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/373"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=373"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/373/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 374,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/373/revisions/374"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=373"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=373"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=373"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 375,
    "date": "2020-10-22T10:33:49",
    "date_gmt": "2020-10-22T10:33:49",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=375"
    },
    "modified": "2020-10-22T10:33:49",
    "modified_gmt": "2020-10-22T10:33:49",
    "slug": "r-json-file",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-json-file/",
    "title": {
      "rendered": "R JSON File"
    },
    "content": {
      "rendered": "\n<h1>R JSON File</h1>\n\n\n\n<p>JSON stands for JavaScript Object Notation. The JSON file contains the data as text in a human-readable format. Like other files, we can also read and write into the JSON files. For this purpose, R provides a package named rjson, which we have to install with the help of the familiar command&nbsp;<strong>install.packages</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-json-file.png\" alt=\"R JSON File\"/></figure>\n\n\n\n<h2>Install rjson package</h2>\n\n\n\n<p>By running the following command into the R console, we will install the rjson package into our current working directory.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"rjson\")  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-json-file2.png\" alt=\"R JSON File\"/></figure>\n\n\n\n<h2>Creating a JSON file</h2>\n\n\n\n<p>The extension of JSON file is .json. To create the JSON file, we will save the following data as employee_info.json. We can write the information of employees in any text editor with its appropriate rule of writing the JSON file. In JSON files, the information contains in between the curly braces({}).</p>\n\n\n\n<p><strong>Example: employee_info.json</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>{   \r\n   \"id\":&#91;\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\" ],  \r\n   \"name\":&#91;\"Shubham\",\"Nishka\",\"Gunjan\",\"Sumit\",\"Arpita\",\"Vaishali\",\"Anisha\",\"Ginni\" ],  \r\n   \"salary\":&#91;\"623\",\"552\",\"669\",\"825\",\"762\",\"882\",\"783\",\"964\"],  \r\n  \r\n   \"start_date\":&#91; \"1/1/2012\",\"9/15/2013\",\"11/23/2013\",\"5/11/2014\",\"3/27/2015\",\"5/21/2013\",  \r\n      \"7/30/2013\",\"6/17/2014\"],  \r\n   \"dept\":&#91; \"IT\",\"Operations\",\"Finance\",\"HR\",\"Finance\",\"IT\",\"Operations\",\"Finance\"]  \r\n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-json-file3.png\" alt=\"R JSON File\"/></figure>\n\n\n\n<h2>Read the JSON file</h2>\n\n\n\n<p>Reading the JSON file in R is a very easy and effective process. R provide from JSON() function to extract data from a JSON file. This function, by default, extracts the data in the form of a list. This function takes the JSON file and returns the records which are contained in it.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how fromJSON() function is used to extract data and print the result in the form of a list. We will consider the employee_info.json file which we have created before.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the package which is required to read JSON files.  \r\nlibrary(\"rjson\")  \r\n  \r\n# Giving the input file name to the function fromJSON.  \r\nresult &lt;- fromJSON(file = \"employee_info.json\")  \r\n  \r\n# Printing the result.  \r\nprint(result)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-json-file4.png\" alt=\"R JSON File\"/></figure>\n\n\n\n<h2>Converting JSON data to a Data Frame</h2>\n\n\n\n<p>R provide, as.data.frame() function to convert the extracted data into data frame. For further analysis, data analysts use this function. Let&#8217;s start an example to see how this function is used, and in our example, we will consider our employee_info.json file.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the package which is required to read JSON files.  \r\nlibrary(\"rjson\")  \r\n  \r\n# Giving the input file name to the function fromJSON.  \r\nresult &lt;- fromJSON(file = \"employee_info.json\")  \r\n  \r\n# Converting the JSON record to a data frame.  \r\ndata_frame &lt;- as.data.frame(result)  \r\n  \r\n#Printing JSON data frame  \r\nprint(data_frame)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-json-file5.png\" alt=\"R JSON File\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>R JSON File JSON stands for JavaScript Object Notation. The JSON file contains the data as text in a human-readable format. Like other files, we can also read and write into the JSON files. For this purpose, R provides a package named rjson, which we have to install with the help of the familiar command&nbsp;install.packages. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/375"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=375"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/375/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 376,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/375/revisions/376"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=375"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=375"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=375"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 377,
    "date": "2020-10-22T10:35:45",
    "date_gmt": "2020-10-22T10:35:45",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=377"
    },
    "modified": "2020-10-22T10:35:45",
    "modified_gmt": "2020-10-22T10:35:45",
    "slug": "r-xml-file",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-xml-file/",
    "title": {
      "rendered": "R XML File"
    },
    "content": {
      "rendered": "\n<p>Like HTML, XML is also a markup language which stands for Extensible Markup Language. It is developed by World Wide Web Consortium(W3C) to define the syntax for encoding documents which both humans and machine can read. This file contains markup tags. There is a difference between HTML and XML. In HTML, the markup tag describes the structure of the page, and in xml, it describes the meaning of the data contained in the file. In R, we can read the xml files by installing &#8220;XML&#8221; package into the R environment. This package will be installed with the help of the familiar command i.e., install.packages.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"XML\")  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-xml-file.png\" alt=\"R XML File\"/></figure>\n\n\n\n<h2>Creating XML File</h2>\n\n\n\n<p>We will create an xml file with the help of the given data. We will save the following data with the .xml file extension to create an xml file. XML tags describe the meaning of data, so that data contained in such tags can easily tell or explain about the data.</p>\n\n\n\n<p><strong>Example: xml_data.xml</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;records>  \r\n&lt;employee_info>  \r\n&lt;id>1&lt;/id>  \r\n&lt;name>Shubham&lt;/name>  \r\n&lt;salary>623&lt;/salary>  \r\n&lt;date>1/1/2012&lt;/date>  \r\n&lt;dept>IT&lt;/dept>  \r\n&lt;/employee_info>  \r\n      \r\n&lt;employee_info>  \r\n&lt;id>2&lt;/id>  \r\n&lt;name>Nishka&lt;/name>  \r\n&lt;salary>552&lt;/salary>  \r\n&lt;date>1/1/2012&lt;/date>  \r\n&lt;dept>IT&lt;/dept>  \r\n&lt;/employee_info>  \r\n  \r\n&lt;employee_info>  \r\n&lt;id>1&lt;/id>  \r\n&lt;name>Gunjan&lt;/name>  \r\n&lt;salary>669&lt;/salary>  \r\n&lt;date>1/1/2012&lt;/date>  \r\n&lt;dept>IT&lt;/dept>  \r\n&lt;/employee_info>  \r\n  \r\n&lt;employee_info>  \r\n&lt;id>1&lt;/id>  \r\n&lt;name>Sumit&lt;/name>  \r\n&lt;salary>825&lt;/salary>  \r\n&lt;date>1/1/2012&lt;/date>  \r\n&lt;dept>IT&lt;/dept>  \r\n&lt;/employee_info>  \r\n  \r\n&lt;employee_info>  \r\n&lt;id>1&lt;/id>  \r\n&lt;name>Arpita&lt;/name>  \r\n&lt;salary>762&lt;/salary>  \r\n&lt;date>1/1/2012&lt;/date>  \r\n&lt;dept>IT&lt;/dept>  \r\n&lt;/employee_info>  \r\n  \r\n&lt;employee_info>  \r\n&lt;id>1&lt;/id>  \r\n&lt;name>Vaishali&lt;/name>  \r\n&lt;salary>882&lt;/salary>  \r\n&lt;date>1/1/2012&lt;/date>  \r\n&lt;dept>IT&lt;/dept>  \r\n&lt;/employee_info>  \r\n  \r\n&lt;employee_info>  \r\n&lt;id>1&lt;/id>  \r\n&lt;name>Anisha&lt;/name>  \r\n&lt;salary>783&lt;/salary>  \r\n&lt;date>1/1/2012&lt;/date>  \r\n&lt;dept>IT&lt;/dept>  \r\n&lt;/employee_info>  \r\n  \r\n&lt;employee_info>  \r\n&lt;id>1&lt;/id>  \r\n&lt;name>Ginni&lt;/name>  \r\n&lt;salary>964&lt;/salary>  \r\n&lt;date>1/1/2012&lt;/date>  \r\n&lt;dept>IT&lt;/dept>  \r\n&lt;/employee_info>  \r\n      \r\n&lt;/records>  </code></pre>\n\n\n\n<h2>Reading XML File</h2>\n\n\n\n<p>In R, we can easily read an xml file with the help of xmlParse() function. This function is stored as a list in R. To use this function, we first need to load the xml package with the help of the library() function. Apart from the xml package, we also need to load one additional package named methods.</p>\n\n\n\n<p>Let&#8217;s see an example to understand the working of xmlParse() function in which we read our xml_data.xml file.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-xml-file2.png\" alt=\"R XML File\"/></figure>\n\n\n\n<p><strong>Example: Reading xml data in the form of a list.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the package required to read XML files.  \r\nlibrary(\"XML\")  \r\n  \r\n# Also loading the other required package.  \r\nlibrary(\"methods\")  \r\n  \r\n# Giving the input file name to the function.  \r\nresult &lt;- xmlParse(file = \"xml_data.xml\")  \r\n  \r\nxml_data &lt;- xmlToList(result)  \r\nprint(xml_data)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-xml-file3.png\" alt=\"R XML File\"/></figure>\n\n\n\n<p><strong>Example: Getting number of nodes present in xml file.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the package required to read XML files.  \r\nlibrary(\"XML\")  \r\n  \r\n# Also loading the other required package.  \r\nlibrary(\"methods\")  \r\n  \r\n# Giving the input file name to the function.  \r\nresult &lt;- xmlParse(file = \"xml_data.xml\")  \r\n  \r\n#Converting the data into list  \r\nxml_data &lt;- xmlToList(result)  \r\n  \r\n#Printing the data  \r\nprint(xml_data)  \r\n  \r\n# Exracting the root node form the xml file.  \r\nroot_node &lt;- xmlRoot(result)  \r\n  \r\n# Finding the number of nodes in the root.  \r\nroot_size &lt;- xmlSize(root_node)  \r\n  \r\n# Printing the result.  \r\nprint(root_size)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-xml-file4.png\" alt=\"R XML File\"/></figure>\n\n\n\n<p><strong>Example: Getting details of the first node in xml.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the package required to read XML files.  \r\nlibrary(\"XML\")  \r\n  \r\n# Also loading the other required package.  \r\nlibrary(\"methods\")  \r\n  \r\n# Giving the input file name to the function.  \r\nresult &lt;- xmlParse(file = \"xml_data.xml\")  \r\n  \r\n# Exracting the root node form the xml file.  \r\nroot_node &lt;- xmlRoot(result)  \r\n  \r\n# Printing the result.  \r\nprint(root_node&#91;1])  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-xml-file5.png\" alt=\"R XML File\"/></figure>\n\n\n\n<p><strong>Example: Getting details of different elements of a node.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the package required to read XML files.  \r\nlibrary(\"XML\")  \r\n  \r\n# Also loading the other required package.  \r\nlibrary(\"methods\")  \r\n  \r\n# Giving the input file name to the function.  \r\nresult &lt;- xmlParse(file = \"xml_data.xml\")  \r\n  \r\n# Exracting the root node form the xml file.  \r\nroot_node &lt;- xmlRoot(result)  \r\n  \r\n# Getting the first element of the first node.  \r\nprint(root_node&#91;&#91;1]]&#91;&#91;1]])  \r\n  \r\n# Getting the fourth element of the first node.  \r\nprint(root_node&#91;&#91;1]]&#91;&#91;4]])  \r\n  \r\n# Getting the third element of the third node.  \r\nprint(root_node&#91;&#91;3]]&#91;&#91;3]])  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-xml-file6.png\" alt=\"R XML File\"/></figure>\n\n\n\n<h2>How to convert xml data into a data frame</h2>\n\n\n\n<p>It&#8217;s not easy to handle data effectively in large files. For this purpose, we read the data in the xml file as a data frame. Then this data frame is processed by the data analyst. R provide xmlToDataFrame() function to extract the information in the form of Data Frame.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how this function is used and processed:</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the package required to read XML files.  \r\nlibrary(\"XML\")  \r\n  \r\n# Also loading the other required package.  \r\nlibrary(\"methods\")  \r\n  \r\n# Giving the input file name to the function xmlToDataFrame.  \r\ndata_frame &lt;- xmlToDataFrame(\"xml_data.xml\")  \r\n  \r\n#Printing the result  \r\nprint(data_frame)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-xml-file7.png\" alt=\"R XML File\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Like HTML, XML is also a markup language which stands for Extensible Markup Language. It is developed by World Wide Web Consortium(W3C) to define the syntax for encoding documents which both humans and machine can read. This file contains markup tags. There is a difference between HTML and XML. In HTML, the markup tag describes [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/377"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=377"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/377/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 378,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/377/revisions/378"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=377"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=377"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=377"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 380,
    "date": "2020-10-22T10:39:10",
    "date_gmt": "2020-10-22T10:39:10",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=380"
    },
    "modified": "2020-10-22T10:39:10",
    "modified_gmt": "2020-10-22T10:39:10",
    "slug": "r-database",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-database/",
    "title": {
      "rendered": "R Database"
    },
    "content": {
      "rendered": "\n<p>In the relational database management system, the data is stored in a normalized format. Therefore, to complete statistical computing, we need very advanced and complex SQL queries. The large and huge data which is present in the form of tables require SQL queries to extract the data from it.</p>\n\n\n\n<p>R can easily connect with many of the relational databases like MySql, SQL Server, Oracle, etc. When we extract the information from these databases, by default, the information is extracted in the form of data frame. Once, the data comes from the database to the R environment; it will become a normal R dataset. The data analyst can easily analyze or manipulate the data with the help of all the powerful packages and functions.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database.png\" alt=\"R Database\"/></figure>\n\n\n\n<h2>RMySQL Package</h2>\n\n\n\n<p>RMySQL package is one of the most important built-in package of R. This package provides native connectivity between the R and MySql database. In R, to work with MySql database, we first have to install the RMySQL package with the help of the familiar command, which is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>install.packages(\"RMySQL\")  </code></pre>\n\n\n\n<p>When we run the above command in the R environment, it will start downloading the package RMySQL.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database2.png\" alt=\"R Database\"/></figure>\n\n\n\n<p>We have created a database employee in which there is a table employee_info, which has the following record.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database3.png\" alt=\"R Database\"/></figure>\n\n\n\n<p>We will use the data which we have mentioned above in our upcoming topics.</p>\n\n\n\n<h2>Create a connection between R and MySql</h2>\n\n\n\n<p>To work with MySql database, it is required to create a connection object between R and the database. For creating a connection, R provides&nbsp;<strong>dbConnect()</strong>&nbsp;function. This function takes the username, password, database name, and host name as input parameters. Let&#8217;s see an example to understand how the&nbsp;<strong>dbConnect()</strong>&nbsp;function is used to connect with the database.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading RMySQL package into R  \r\nlibrary(\"RMySQL\")  \r\n  \r\n# Creating a connection Object to MySQL database.  \r\n# Conneting with database named \"employee\" which we have created befoe with the helpof XAMPP server.  \r\nmysql_connect = dbConnect(MySQL(), user = 'root', password = '', dbname = 'employee',  \r\n   host = 'localhost')  \r\n  \r\n# Listing the tables available in this database.  \r\n dbListTables(mysql_connect)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database4.png\" alt=\"R Database\"/></figure>\n\n\n\n<h2>R MySQL Commands</h2>\n\n\n\n<p>In R, we can perform all the SQL commands like insert, delete, update, etc. For performing the query on the database, R provides the dbSendQuery() function. The query is executed in MySQL, and the result set is returned using the R fetch () function. Finally, it is stored in R as a data frame. Let&#8217;s see the example of each and every SQL command to understand how dbSendQuery() and fetch() functions are used.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database5.png\" alt=\"R Database\"/></figure>\n\n\n\n<h3>Create Table</h3>\n\n\n\n<p>R provides an additional function to create a table into the database i.e., dbWriteTable(). This function creates a table in the database; if it does not exist else, it will overwrite the table. This function takes the data frame as an input.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading RMySQL package into R  \r\nlibrary(\"RMySQL\")  \r\n  \r\n# Creating a connection Object to MySQL database.  \r\n# Conneting with database named \"employee\" which we have created befoe with the helpof XAMPP server.  \r\nmysql_connect = dbConnect(MySQL(), user = 'root', password = '', dbname = 'employee',  \r\n   host = 'localhost')  \r\n  \r\n#Creating data frame to create a table   \r\nemp.data&lt;- data.frame(    \r\nname = c(\"Raman\",\"Rafia\",\"Himanshu\",\"jasmine\",\"Yash\"),    \r\nsalary = c(623.3,915.2,611.0,729.0,843.25),     \r\nstart_date = as.Date(c(\"2012-01-01\", \"2013-09-23\", \"2014-11-15\", \"2014-05-11\",\"2015-03-27\")),  \r\ndept = c(\"Operations\",\"IT\",\"HR\",\"IT\",\"Finance\"),    \r\nstringsAsFactors = FALSE    \r\n)    \r\n  \r\n# All the rows of emp.data are taken inot MySql.  \r\ndbWriteTable(mysql_connect, \"emp\", emp.data&#91;, ], overwrite = TRUE)</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database6.png\" alt=\"R Database\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database7.png\" alt=\"R Database\"/></figure>\n\n\n\n<h3>Select</h3>\n\n\n\n<p>We can simply select the record from the table with the help of the fetch() and dbSendQuery() function. Let&#8217;s see an example to understand how to select query works with these two functions.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading RMySQL package into R  \r\nlibrary(\"RMySQL\")  \r\n  \r\n# Creating a connection Object to MySQL database.  \r\n# Conneting with database named \"employee\" which we have created befoe with the helpof XAMPP server.  \r\nmysql_connect = dbConnect(MySQL(), user = 'root', password = '', dbname = 'employee',  \r\n   host = 'localhost')  \r\n  \r\n# selecting the record from employee_info table.  \r\nrecord = dbSendQuery(mysql_connect, \"select * from employee_info\")  \r\n  \r\n# Storing the result in a R data frame object. n = 6 is used to fetch first 6 rows.  \r\ndata_frame = fetch(record, n = 6)  \r\nprint(data_frame)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database8.png\" alt=\"R Database\"/></figure>\n\n\n\n<h3>Select with where clause</h3>\n\n\n\n<p>We can select the specific record from the table with the help of the fetch() and dbSendQuery() function. Let&#8217;s see an example to understand how to select query works with where clause and these two functions.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading RMySQL package into R  \r\nlibrary(\"RMySQL\")  \r\n  \r\n# Creating a connection Object to MySQL database.  \r\n# Conneting with database named \"employee\" which we have created befoe with the helpof XAMPP server.  \r\nmysql_connect = dbConnect(MySQL(), user = 'root', password = '', dbname = 'employee',  \r\n   host = 'localhost')  \r\n  \r\n# selecting the specific record from employee_info table.  \r\nrecord = dbSendQuery(mysql_connect, \"select * from employee_info where dept='IT'\")  \r\n  \r\n# Fetching all the records(with n = -1) and storing it as a data frame.  \r\ndata_frame = fetch(record, n = -1)  \r\nprint(data_frame)  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database9.png\" alt=\"R Database\"/></figure>\n\n\n\n<h3>Insert command</h3>\n\n\n\n<p>We can insert the data into tables with the help of the familiar method dbSendQuery() function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading RMySQL package into R  \r\nlibrary(\"RMySQL\")  \r\n  \r\n# Creating a connection Object to MySQL database.  \r\n# Conneting with database named \"employee\" which we have created befoe with the helpof XAMPP server.  \r\nmysql_connect = dbConnect(MySQL(), user = 'root', password = '', dbname = 'employee',  \r\n   host = 'localhost')  \r\n  \r\n# Inserting record into employee_info table.  \r\ndbSendQuery(mysql_connect, \"insert into employee_info values(9,'Preeti',1025,'8/25/2013','Operations')\")  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database10.png\" alt=\"R Database\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database11.png\" alt=\"R Database\"/></figure>\n\n\n\n<h3>Update command</h3>\n\n\n\n<p>Updating a record in the table is much easier. For this purpose, we have to pass the update query to the dbSendQuery() function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading RMySQL package into R  \r\nlibrary(\"RMySQL\")  \r\n  \r\n# Creating a connection Object to MySQL database.  \r\n# Conneting with database named \"employee\" which we have created befoe with the helpof XAMPP server.  \r\nmysql_connect = dbConnect(MySQL(), user = 'root', password = '', dbname = 'employee',  \r\n   host = 'localhost')  \r\n  \r\n# Updating the record in employee_info table.  \r\ndbSendQuery(mysql_connect, \"update employee_info set dept='IT' where id=9\")  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database12.png\" alt=\"R Database\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database13.png\" alt=\"R Database\"/></figure>\n\n\n\n<h3>Delete command</h3>\n\n\n\n<p>Below is an example in which we delete a specific row from the table by passing the delete query in the dbSendQuery() function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading RMySQL package into R  \r\nlibrary(\"RMySQL\")  \r\n  \r\n# Creating a connection Object to MySQL database.  \r\n# Conneting with database named \"employee\" which we have created befoe with the helpof XAMPP server.  \r\nmysql_connect = dbConnect(MySQL(), user = 'root', password = '', dbname = 'employee',  \r\n   host = 'localhost')  \r\n  \r\n# Deleting the specific record from employee_info table.  \r\ndbSendQuery(mysql_connect, \"delete from employee_info where id=8\")  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database14.png\" alt=\"R Database\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database15.png\" alt=\"R Database\"/></figure>\n\n\n\n<h3>Drop command</h3>\n\n\n\n<p>Below is an example in which we drop a table from the database by passing the appropriate drop query in the dbSendQuery() function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading RMySQL package into R  \r\nlibrary(\"RMySQL\")  \r\n  \r\n# Creating a connection Object to MySQL database.  \r\n# Conneting with database named \"employee\" which we have created befoe with the helpof XAMPP server.  \r\nmysql_connect = dbConnect(MySQL(), user = 'root', password = '', dbname = 'employee',  \r\n   host = 'localhost')  \r\n  \r\n# Dropping the specific table from the employee database.  \r\ndbSendQuery(mysql_connect, \"drop table if exists emp\")  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database16.png\" alt=\"R Database\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-database17.png\" alt=\"R Database\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the relational database management system, the data is stored in a normalized format. Therefore, to complete statistical computing, we need very advanced and complex SQL queries. The large and huge data which is present in the form of tables require SQL queries to extract the data from it. R can easily connect with many [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/380"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=380"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/380/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 381,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/380/revisions/381"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=380"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=380"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=380"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 382,
    "date": "2020-10-22T10:40:03",
    "date_gmt": "2020-10-22T10:40:03",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=382"
    },
    "modified": "2020-10-22T10:40:03",
    "modified_gmt": "2020-10-22T10:40:03",
    "slug": "r-data-visualization",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-data-visualization/",
    "title": {
      "rendered": "R Data Visualization"
    },
    "content": {
      "rendered": "\n<p>In R, we can create visually appealing data visualizations by writing few lines of code. For this purpose, we use the diverse functionalities of R. Data visualization is an efficient technique for gaining insight about data through a visual medium. With the help of visualization techniques, a human can easily obtain information about hidden patterns in data that might be neglected.</p>\n\n\n\n<p>By using the data visualization technique, we can work with large datasets to efficiently obtain key insights about it.</p>\n\n\n\n<h2>R Visualization Packages</h2>\n\n\n\n<p>R provides a series of packages for data visualization. These packages are as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-visualization.png\" alt=\"R Data Visualization\"/></figure>\n\n\n\n<p><strong>1) plotly</strong></p>\n\n\n\n<p>The plotly package provides online interactive and quality graphs. This package extends upon the JavaScript library ?plotly.js.</p>\n\n\n\n<p><strong>2) ggplot2</strong></p>\n\n\n\n<p>R allows us to create graphics declaratively. R provides the&nbsp;<strong>ggplot</strong>&nbsp;package for this purpose. This package is famous for its elegant and quality graphs, which sets it apart from other visualization packages.</p>\n\n\n\n<p><strong>3) tidyquant</strong></p>\n\n\n\n<p>The&nbsp;<strong>tidyquant</strong>&nbsp;is a financial package that is used for carrying out quantitative financial analysis. This package adds under tidyverse universe as a financial package that is used for importing, analyzing, and visualizing the data.</p>\n\n\n\n<p><strong>4) taucharts</strong></p>\n\n\n\n<p>Data plays an important role in taucharts. The library provides a declarative interface for rapid mapping of data fields to visual properties.</p>\n\n\n\n<p><strong>5) ggiraph</strong></p>\n\n\n\n<p>It is a tool that allows us to create dynamic ggplot graphs. This package allows us to add tooltips, JavaScript actions, and animations to the graphics.</p>\n\n\n\n<p><strong>6) geofacets</strong></p>\n\n\n\n<p>This package provides geofaceting functionality for &#8216;ggplot2&#8217;. Geofaceting arranges a sequence of plots for different geographical entities into a grid that preserves some of the geographical orientation.</p>\n\n\n\n<p><strong>7) googleVis</strong></p>\n\n\n\n<p>googleVis provides an interface between R and Google&#8217;s charts tools. With the help of this package, we can create web pages with interactive charts based on R data frames.</p>\n\n\n\n<p><strong>8) RColorBrewer</strong></p>\n\n\n\n<p>This package provides color schemes for maps and other graphics, which are designed by Cynthia Brewer.</p>\n\n\n\n<p><strong>9) dygraphs</strong></p>\n\n\n\n<p>The dygraphs package is an R interface to the dygraphs JavaScript charting library. It provides rich features for charting time-series data in R.</p>\n\n\n\n<p><strong>10) shiny</strong></p>\n\n\n\n<p>R allows us to develop interactive and aesthetically pleasing web apps by providing a&nbsp;<strong>shiny</strong>&nbsp;package. This package provides various extensions with HTML widgets, CSS, and JavaScript.</p>\n\n\n\n<h2>R Graphics</h2>\n\n\n\n<p>Graphics play an important role in carrying out the important features of the data. Graphics are used to examine marginal distributions, relationships between variables, and summary of very large data. It is a very important complement for many statistical and computational techniques.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-visualization2.png\" alt=\"R Data Visualization\"/></figure>\n\n\n\n<h3>Standard Graphics</h3>\n\n\n\n<p>R standard graphics are available through package graphics, include several functions which provide statistical plots, like:</p>\n\n\n\n<ul><li>Scatterplots</li><li>Piecharts</li><li>Boxplots</li><li>Barplots etc.</li></ul>\n\n\n\n<p>We use the above graphs that are typically a single function call.</p>\n\n\n\n<h3>Graphics Devices</h3>\n\n\n\n<p>It is something where we can make a plot to appear. A graphics device is a window on your computer (screen device), a PDF file (file device), a Scalable Vector Graphics (SVG) file (file device), or a PNG or JPEG file (file device).</p>\n\n\n\n<p><strong>There are some of the following points which are essential to understand:</strong></p>\n\n\n\n<ul><li>The functions of graphics devices produce output, which depends on the active graphics device.</li><li>A screen is the default and most frequently used device.</li><li>R graphical devices such as the PDF device, the JPEG device, etc. are used.</li><li>We just need to open the graphics output device which we want. Therefore, R takes care of producing the type of output which is required by the device.</li><li>For producing a certain plot on the screen or as a GIF R graphics file, the R code should exactly be the same. We only need to open the target output device before.</li><li>Several devices can be open at the same time, but there will be only one active device.</li></ul>\n\n\n\n<h3>The basics of the grammar of graphics</h3>\n\n\n\n<p>There are some key elements of a statistical graphic. These elements are the basics of the grammar of graphics. Let&#8217;s discuss each of the elements one by one to gain the basic knowledge of graphics.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-data-visualization3.png\" alt=\"R Data Visualization\"/></figure>\n\n\n\n<p><strong>1) Data</strong></p>\n\n\n\n<p>Data is the most crucial thing which is processed and generates an output.</p>\n\n\n\n<p><strong>2) Aesthetic Mappings</strong></p>\n\n\n\n<p>Aesthetic mappings are one of the most important elements of a statistical graphic. It controls the relation between graphics variables and data variables. In a scatter plot, it also helps to map the temperature variable of a data set into the X variable.</p>\n\n\n\n<p>In graphics, it helps to map the species of a plant into the color of dots.</p>\n\n\n\n<p><strong>3) Geometric Objects</strong></p>\n\n\n\n<p>Geometric objects are used to express each observation by a point using the aesthetic mappings. It maps two variables in the data set into the x,y variables of the plot.</p>\n\n\n\n<p><strong>4) Statistical Transformations</strong></p>\n\n\n\n<p>Statistical transformations allow us to calculate the statistical analysis of the data in the plot.The statistical transformation uses the data and approximates it with the help of a regression line having x,y coordinates, and counts occurrences of certain values.</p>\n\n\n\n<p><strong>5) Scales</strong></p>\n\n\n\n<p>It is used to map the data values into values present in the coordinate system of the graphics device.</p>\n\n\n\n<p><strong>6) Coordinate system</strong></p>\n\n\n\n<p>The coordinate system plays an important role in the plotting of the data.</p>\n\n\n\n<ul><li>Cartesian</li><li>Plot</li></ul>\n\n\n\n<p><strong>7) Faceting</strong></p>\n\n\n\n<p>Faceting is used to split the data into subgroups and draw sub-graphs for each group.</p>\n\n\n\n<h2>Advantages of Data Visualization in R</h2>\n\n\n\n<p><strong>1. Understanding</strong></p>\n\n\n\n<p>It can be more attractive to look at the business. And, it is easier to understand through graphics and charts than a written document with text and numbers. Thus, it can attract a wider range of audiences. Also, it promotes the widespread use of business insights that come to make better decisions.</p>\n\n\n\n<p><strong>2. Efficiency</strong></p>\n\n\n\n<p>Its applications allow us to display a lot of information in a small space. Although, the decision-making process in business is inherently complex and multifunctional, displaying evaluation findings in a graph can allow companies to organize a lot of interrelated information in useful ways.</p>\n\n\n\n<p><strong>3. Location</strong></p>\n\n\n\n<p>Its app utilizing features such as Geographic Maps and GIS can be particularly relevant to wider business when the location is a very relevant factor. We will use maps to show business insights from various locations, also consider the seriousness of the issues, the reasons behind them, and working groups to address them.</p>\n\n\n\n<h2>Disadvantages of Data Visualization in R</h2>\n\n\n\n<p><strong>1. Cost</strong></p>\n\n\n\n<p>R application development range a good amount of money. It may not be possible, especially for small companies, that many resources can be spent on purchasing them. To generate reports, many companies may employ professionals to create charts that can increase costs. Small enterprises are often operating in resource-limited settings, and are also receiving timely evaluation results that can often be of high importance.</p>\n\n\n\n<p><strong>2. Distraction</strong></p>\n\n\n\n<p>However, at times, data visualization apps create highly complex and fancy graphics-rich reports and charts, which may entice users to focus more on the form than the function. If we first add visual appeal, then the overall value of the graphic representation will be minimal. In resource-setting, it is required to understand how resources can be best used. And it is also not caught in the graphics trend without a clear purpose.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In R, we can create visually appealing data visualizations by writing few lines of code. For this purpose, we use the diverse functionalities of R. Data visualization is an efficient technique for gaining insight about data through a visual medium. With the help of visualization techniques, a human can easily obtain information about hidden patterns [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/382"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=382"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/382/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 383,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/382/revisions/383"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=382"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=382"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=382"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 384,
    "date": "2020-10-22T10:41:47",
    "date_gmt": "2020-10-22T10:41:47",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=384"
    },
    "modified": "2020-10-22T10:41:47",
    "modified_gmt": "2020-10-22T10:41:47",
    "slug": "r-pie-charts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-pie-charts/",
    "title": {
      "rendered": "R Pie Charts"
    },
    "content": {
      "rendered": "\n<p>R programming language has several libraries for creating charts and graphs. A pie-chart is a representation of values in the form of slices of a circle with different colors. Slices are labeled with a description, and the numbers corresponding to each slice are also shown in the chart. However, pie charts are not recommended in the R documentation, and their characteristics are limited. The authors recommend a bar or dot plot on a pie chart because people are able to measure length more accurately than volume.</p>\n\n\n\n<p>The Pie charts are created with the help of pie () function, which takes positive numbers as vector input. Additional parameters are used to control labels, colors, titles, etc.</p>\n\n\n\n<p>There is the following syntax of the pie() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pie(X, Labels, Radius, Main, Col, Clockwise)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ol><li><strong>X</strong>&nbsp;is a vector that contains the numeric values used in the pie chart.</li><li><strong>Labels</strong>&nbsp;are used to give the description to the slices.</li><li><strong>Radius</strong>&nbsp;describes the radius of the pie chart.</li><li><strong>Main</strong>&nbsp;describes the title of the chart.</li><li><strong>Col</strong>&nbsp;defines the color palette.</li><li><strong>Clockwise</strong>&nbsp;is a logical value that indicates the clockwise or anti-clockwise direction in which slices are drawn.</li></ol>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating data for the graph.  \r\nx &lt;- c(20, 65, 15, 50)  \r\nlabels &lt;- c(\"India\", \"America\", \"Shri Lanka\", \"Nepal\")  \r\n# Giving the chart file a name.  \r\npng(file = \"Country.jpg\")  \r\n# Plotting the chart.  \r\npie(x,labels)  \r\n# Saving the file.  \r\ndev.off()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-pie-charts-output1.png\" alt=\"R Pie Charts\"/></figure>\n\n\n\n<h2>Title and color</h2>\n\n\n\n<p>A pie chart has several more features that we can use by adding more parameters to the pie() function. We can give a title to our pie chart by passing the main parameter. It tells the title of the pie chart to the pie() function. Apart from this, we can use a rainbow colour pallet while drawing the chart by passing the col parameter.</p>\n\n\n\n<h4><strong>Note:</strong>&nbsp;The length of the pallet will be the same as the number of values that we have for the chart. So for that, we will use length() function.</h4>\n\n\n\n<p>Let&#8217;s see an example to understand how these methods work in creating an attractive pie chart with title and color.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating data for the graph.  \r\nx &lt;- c(20, 65, 15, 50)  \r\nlabels &lt;- c(\"India\", \"America\", \"Shri Lanka\", \"Nepal\")  \r\n# Giving the chart file a name.  \r\npng(file = \"title_color.jpg\")  \r\n# Plotting the chart.  \r\npie(x,labels,main=\"Country Pie chart\",col=rainbow(length(x)))  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-pie-charts-output2.png\" alt=\"R Pie Charts\"/></figure>\n\n\n\n<h2>Slice Percentage &amp; Chart Legend</h2>\n\n\n\n<p>There are two additional properties of the pie chart, i.e., slice percentage and chart legend. We can show the data in the form of percentage as well as we can add legends to plots in R by using the legend() function. There is the following syntax of the legend() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>legend(x,y=NULL,legend,fill,col,bg)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>x and y are the coordinates to be used to position the legend.</li><li>legend is the text of legend</li><li>fill is the color to use for filling the boxes beside the legend text.</li><li>col defines the color of line and points besides the legend text.</li><li>bg is the background color for the legend box.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating data for the graph.  \r\nx &lt;- c(20, 65, 15, 50)  \r\nlabels &lt;- c(\"India\", \"America\", \"Shri Lanka\", \"Nepal\")  \r\npie_percent&lt;- round(100*x/sum(x), 1)  \r\n# Giving the chart file a name.  \r\npng(file = \"per_pie.jpg\")  \r\n# Plotting the chart.  \r\npie(x, labels = pie_percent, main = \"Country Pie Chart\",col = rainbow(length(x)))  \r\nlegend(\"topright\", c(\"India\", \"America\", \"Shri Lanka\", \"Nepal\"), cex = 0.8,  \r\nfill = rainbow(length(x)))  \r\n#Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-pie-charts-output3.png\" alt=\"R Pie Charts\"/></figure>\n\n\n\n<h2>3 Dimensional Pie Chart</h2>\n\n\n\n<p>In R, we can also create a three-dimensional pie chart. For this purpose, R provides a plotrix package whose pie3D() function is used to create an attractive 3D pie chart. The parameters of pie3D() function remain same as pie() function. Let&#8217;s see an example to understand how a 3D pie chart is created with the help of this function.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Getting the library.  \r\nlibrary(plotrix)  \r\n# Creating data for the graph.  \r\nx &lt;- c(20, 65, 15, 50,45)  \r\nlabels &lt;- c(\"India\", \"America\", \"Shri Lanka\", \"Nepal\",\"Bhutan\")  \r\n# Give the chart file a name.  \r\npng(file = \"3d_pie_chart1.jpg\")  \r\n# Plot the chart.  \r\npie3D(x,labelslabels = labels,explode = 0.1, main = \"Country Pie Chart\")  \r\n# Save the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-pie-charts-output4.png\" alt=\"R Pie Charts\"/></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Getting the library.  \r\nlibrary(plotrix)  \r\n# Creating data for the graph.  \r\nx &lt;- c(20, 65, 15, 50,45)  \r\nlabels &lt;- c(\"India\", \"America\", \"Shri Lanka\", \"Nepal\",\"Bhutan\")  \r\npie_percent&lt;- round(100*x/sum(x), 1)  \r\n# Giving the chart file a name.  \r\npng(file = \"three_D_pie.jpg\")  \r\n# Plotting the chart.  \r\npie3D(x, labels = pie_percent, main = \"Country Pie Chart\",col = rainbow(length(x)))  \r\nlegend(\"topright\", c(\"India\", \"America\", \"Shri Lanka\", \"Nepal\",\"Bhutan\"), cex = 0.8,  \r\nfill = rainbow(length(x)))  \r\n#Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-pie-charts-output5.png\" alt=\"R Pie Charts\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>R programming language has several libraries for creating charts and graphs. A pie-chart is a representation of values in the form of slices of a circle with different colors. Slices are labeled with a description, and the numbers corresponding to each slice are also shown in the chart. However, pie charts are not recommended in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/384"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=384"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/384/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 385,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/384/revisions/385"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=384"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=384"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=384"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 386,
    "date": "2020-10-22T10:43:22",
    "date_gmt": "2020-10-22T10:43:22",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=386"
    },
    "modified": "2020-10-22T10:43:22",
    "modified_gmt": "2020-10-22T10:43:22",
    "slug": "r-bar-charts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-bar-charts/",
    "title": {
      "rendered": "R Bar Charts"
    },
    "content": {
      "rendered": "\n<p>A bar chart is a pictorial representation in which numerical values of variables are represented by length or height of lines or rectangles of equal width. A bar chart is used for summarizing a set of categorical data. In bar chart, the data is shown through rectangular bars having the length of the bar proportional to the value of the variable.</p>\n\n\n\n<p>In R, we can create a bar chart to visualize the data in an efficient manner. For this purpose, R provides the barplot() function, which has the following syntax:</p>\n\n\n\n<ol><li>barplot(h,x,y,main,&nbsp;names.arg,col)&nbsp;&nbsp;</li></ol>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>H</td><td>A vector or matrix which contains numeric values used in the bar chart.</td></tr><tr><td>2.</td><td>xlab</td><td>A label for the x-axis.</td></tr><tr><td>3.</td><td>ylab</td><td>A label for the y-axis.</td></tr><tr><td>4.</td><td>main</td><td>A title of the bar chart.</td></tr><tr><td>5.</td><td>names.arg</td><td>A vector of names that appear under each bar.</td></tr><tr><td>6.</td><td>col</td><td>It is used to give colors to the bars in the graph.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data for Bar chart  \r\nH&lt;- c(12,35,54,3,41)  \r\n# Giving the chart file a name  \r\npng(file = \"bar_chart.png\")  \r\n# Plotting the bar chart   \r\nbarplot(H)  \r\n# Saving the file  \r\ndev.off()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-bar-charts.png\" alt=\"R Bar Charts\"/></figure>\n\n\n\n<h2>Labels, Title &amp; Colors</h2>\n\n\n\n<p>Like pie charts, we can also add more functionalities in the bar chart by-passing more arguments in the barplot() functions. We can add a title in our bar chart or can add colors to the bar by adding the main and col parameters, respectively. We can add another parameter i.e., args.name, which is a vector that has the same number of values, which are fed as the input vector to describe the meaning of each bar.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how labels, titles, and colors are added in our bar chart.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data for Bar chart  \r\nH &lt;- c(12,35,54,3,41)  \r\nM&lt;- c(\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\")  \r\n  \r\n# Giving the chart file a name  \r\npng(file = \"bar_properties.png\")  \r\n  \r\n# Plotting the bar chart   \r\nbarplot(H,names.arg=M,xlab=\"Month\",ylab=\"Revenue\",col=\"Green\",  \r\n        main=\"Revenue Bar chart\",border=\"red\")  \r\n# Saving the file  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-bar-charts2.png\" alt=\"R Bar Charts\"/></figure>\n\n\n\n<h2>Group Bar Chart &amp; Stacked Bar Chart</h2>\n\n\n\n<p>We can create bar charts with groups of bars and stacks using matrices as input values in each bar. One or more variables are represented as a matrix that is used to construct group bar charts and stacked bar charts.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how these charts are created.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>library(RColorBrewer)  \r\nmonths &lt;- c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\")  \r\nregions &lt;- c(\"West\",\"North\",\"South\")  \r\n# Creating the matrix of the values.  \r\nValues &lt;- matrix(c(21,32,33,14,95,46,67,78,39,11,22,23,94,15,16), nrow = 3, ncol = 5, byrow = TRUE)  \r\n# Giving the chart file a name  \r\npng(file = \"stacked_chart.png\")  \r\n# Creating the bar chart  \r\nbarplot(Values, main = \"Total Revenue\", names.arg = months, xlab = \"Month\", ylab = \"Revenue\", ccol =c(\"cadetblue3\",\"deeppink2\",\"goldenrod1\"))  \r\n# Adding the legend to the chart  \r\nlegend(\"topleft\", regions, cex = 1.3, fill = c(\"cadetblue3\",\"deeppink2\",\"goldenrod1\"))  \r\n  \r\n# Saving the file  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-bar-charts3.png\" alt=\"R Bar Charts\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A bar chart is a pictorial representation in which numerical values of variables are represented by length or height of lines or rectangles of equal width. A bar chart is used for summarizing a set of categorical data. In bar chart, the data is shown through rectangular bars having the length of the bar proportional [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/386"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=386"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/386/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 387,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/386/revisions/387"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=386"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=386"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=386"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 388,
    "date": "2020-10-22T10:44:41",
    "date_gmt": "2020-10-22T10:44:41",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=388"
    },
    "modified": "2020-10-22T10:44:41",
    "modified_gmt": "2020-10-22T10:44:41",
    "slug": "r-boxplot",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-boxplot/",
    "title": {
      "rendered": "R Boxplot"
    },
    "content": {
      "rendered": "\n<p>Boxplots are a measure of how well data is distributed across a data set. This divides the data set into three quartiles. This graph represents the minimum, maximum, average, first quartile, and the third quartile in the data set. Boxplot is also useful in comparing the distribution of data in a data set by drawing a boxplot for each of them.</p>\n\n\n\n<p>R provides a boxplot() function to create a boxplot. There is the following syntax of boxplot() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>boxplot(x, data, notch, varwidth, names, main)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>x</td><td>It is a vector or a formula.</td></tr><tr><td>2.</td><td>data</td><td>It is the data frame.</td></tr><tr><td>3.</td><td>notch</td><td>It is a logical value set as true to draw a notch.</td></tr><tr><td>4.</td><td>varwidth</td><td>It is also a logical value set as true to draw the width of the box same as the sample size.</td></tr><tr><td>5.</td><td>names</td><td>It is the group of labels that will be printed under each boxplot.</td></tr><tr><td>6.</td><td>main</td><td>It is used to give a title to the graph.</td></tr></tbody></table></figure>\n\n\n\n<p>Let?s see an example to understand how we can create a boxplot in R. In the below example, we will use the &#8220;mtcars&#8221; dataset present in the R environment. We will use its two columns only, i.e., &#8220;mpg&#8221; and &#8220;cyl&#8221;. The below example will create a boxplot graph for the relation between mpg and cyl, i.e., miles per gallon and number of cylinders, respectively.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Giving a name to the chart file.  \r\npng(file = \"boxplot.png\")  \r\n# Plotting the chart.  \r\nboxplot(mpg ~ cyl, data = mtcars, xlab = \"Quantity of Cylinders\",  \r\n        ylab = \"Miles Per Gallon\", main = \"R Boxplot Example\")  \r\n  \r\n# Save the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-boxplot1.png\" alt=\"R Boxplot\"/></figure>\n\n\n\n<h2>Boxplot using notch</h2>\n\n\n\n<p>In R, we can draw a boxplot using a notch. It helps us to find out how the medians of different data groups match with each other. Let&#8217;s see an example to understand how a boxplot graph is created using notch for each of the groups.</p>\n\n\n\n<p>In our below example, we will use the same dataset ?mtcars.&#8221;</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Giving a name to our chart.  \r\npng(file = \"boxplot_using_notch.png\")  \r\n# Plotting the chart.  \r\nboxplot(mpg ~ cyl, data = mtcars,   \r\n        xlab = \"Quantity of Cylinders\",  \r\n        ylab = \"Miles Per Gallon\",   \r\n        main = \"Boxplot Example\",  \r\n        notch = TRUE,   \r\n        varwidth = TRUE,   \r\n        ccol = c(\"green\",\"yellow\",\"red\"),  \r\n        names = c(\"High\",\"Medium\",\"Low\")  \r\n)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-boxplot2.png\" alt=\"R Boxplot\"/></figure>\n\n\n\n<h2>Violin Plots</h2>\n\n\n\n<p>R provides an additional plotting scheme which is created with the combination of a&nbsp;<strong>boxplot</strong>&nbsp;and a&nbsp;<strong>kernel density</strong>&nbsp;plot. The violin plots are created with the help of vioplot() function present in the vioplot package.</p>\n\n\n\n<p>Let&#8217;s see an example to understand the creation of the violin plot.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the vioplot package   \r\nlibrary(vioplot)  \r\n# Giving a name to our chart.  \r\npng(file = \"vioplot.png\")  \r\n#Creating data for vioplot function  \r\nx1 &lt;- mtcars$mpg&#91;mtcars$cyl==4]  \r\nx2 &lt;- mtcars$mpg&#91;mtcars$cyl==6]  \r\nx3 &lt;- mtcars$mpg&#91;mtcars$cyl==8]  \r\n#Creating vioplot function  \r\nvioplot(x1, x2, x3, names=c(\"4 cyl\", \"6 cyl\", \"8 cyl\"),  \r\n        col=\"green\")  \r\n#Setting title   \r\ntitle(\"Violin plot example\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-boxplot3.png\" alt=\"R Boxplot\"/></figure>\n\n\n\n<h2>Bagplot- 2-Dimensional Boxplot Extension</h2>\n\n\n\n<p>The bagplot(x, y) function in the&nbsp;<strong>aplpack</strong>&nbsp;package provides a biennial version of the univariate boxplot. The bag contains 50% of all points. The bivariate median is approximate. The fence separates itself from the outside points, and the outlays are displayed.</p>\n\n\n\n<p>Let?s see an example to understand how we can create a two-dimensional boxplot extension in R.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading aplpack package  \r\nlibrary(aplpack)  \r\n# Giving a name to our chart.  \r\npng(file = \"bagplot.png\")  \r\n#Creating bagplot function  \r\nattach(mtcars)  \r\nbagplot(wt,mpg, xlab=\"Car Weight\", ylab=\"Miles Per Gallon\",  \r\n   main=\"2D Boxplot Extension\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-boxplot4.png\" alt=\"R Boxplot\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Boxplots are a measure of how well data is distributed across a data set. This divides the data set into three quartiles. This graph represents the minimum, maximum, average, first quartile, and the third quartile in the data set. Boxplot is also useful in comparing the distribution of data in a data set by drawing [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/388"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=388"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/388/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 389,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/388/revisions/389"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=388"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=388"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=388"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 390,
    "date": "2020-10-22T10:46:21",
    "date_gmt": "2020-10-22T10:46:21",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=390"
    },
    "modified": "2020-10-22T10:46:21",
    "modified_gmt": "2020-10-22T10:46:21",
    "slug": "r-histogram",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-histogram/",
    "title": {
      "rendered": "R Histogram"
    },
    "content": {
      "rendered": "\n<p>A histogram is a type of bar chart which shows the frequency of the number of values which are compared with a set of values ranges. The histogram is used for the distribution, whereas a bar chart is used for comparing different entities. In the histogram, each bar represents the height of the number of values present in the given range.</p>\n\n\n\n<p>For creating a histogram, R provides hist() function, which takes a vector as an input and uses more parameters to add more functionality. There is the following syntax of hist() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>hist(v,main,xlab,ylab,xlim,ylim,breaks,col,border) </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>v</td><td>It is a vector that contains numeric values.</td></tr><tr><td>2.</td><td>main</td><td>It indicates the title of the chart.</td></tr><tr><td>3.</td><td>col</td><td>It is used to set the color of the bars.</td></tr><tr><td>4.</td><td>border</td><td>It is used to set the border color of each bar.</td></tr><tr><td>5.</td><td>xlab</td><td>It is used to describe the x-axis.</td></tr><tr><td>6.</td><td>ylab</td><td>It is used to describe the y-axis.</td></tr><tr><td>7.</td><td>xlim</td><td>It is used to specify the range of values on the x-axis.</td></tr><tr><td>8.</td><td>ylim</td><td>It is used to specify the range of values on the y-axis.</td></tr><tr><td>9.</td><td>breaks</td><td>It is used to mention the width of each bar.</td></tr></tbody></table></figure>\n\n\n\n<p>Let?s see an example in which we create a simple histogram with the help of required parameters like v, main, col, etc.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating data for the graph.  \r\nv &lt;-  c(12,24,16,38,21,13,55,17,39,10,60)  \r\n  \r\n# Giving a name to the chart file.  \r\npng(file = \"histogram_chart.png\")  \r\n  \r\n# Creating the histogram.  \r\nhist(v,xlab = \"Weight\",ylab=\"Frequency\",col = \"green\",border = \"red\")  \r\n  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-histogram1.png\" alt=\"R Histogram\"/></figure>\n\n\n\n<p>Let?s see some more examples in which we have used different parameters of hist() function to add more functionality or to create a more attractive chart.</p>\n\n\n\n<h3>Example: Use of xlim &amp; ylim parameter</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating data for the graph.  \r\nv &lt;-  c(12,24,16,38,21,13,55,17,39,10,60)  \r\n  \r\n# Giving a name to the chart file.  \r\npng(file = \"histogram_chart_lim.png\")  \r\n  \r\n# Creating the histogram.  \r\nhist(v,xlab = \"Weight\",ylab=\"Frequency\",col = \"green\",border = \"red\",xlim = c(0,40), ylim = c(0,3), breaks = 5)  \r\n  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-histogram2.png\" alt=\"R Histogram\"/></figure>\n\n\n\n<h3>Example: Finding return value of hist()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating data for the graph.  \r\nv &lt;-  c(12,24,16,38,21,13,55,17,39,10,60)  \r\n  \r\n# Giving a name to the chart file.  \r\npng(file = \"histogram_chart_lim.png\")  \r\n# Creating the histogram.  \r\nm&lt;-hist(v)  \r\nm   </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-histogram3.png\" alt=\"R Histogram\"/></figure>\n\n\n\n<h3>Example: Using histogram return values for labels using text()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating data for the graph.  \r\nv &lt;-  c(12,24,16,38,21,13,55,17,39,10,60,120,40,70,90)  \r\n# Giving a name to the chart file.  \r\npng(file = \"histogram_return.png\")  \r\n  \r\n# Creating the histogram.  \r\nm&lt;-hist(v,xlab = \"Weight\",ylab=\"Frequency\",col = \"darkmagenta\",border = \"pink\", breaks = 5)  \r\n#Setting labels  \r\ntext(m$mids,m$counts,labels=m$counts, adj=c(0.5, -0.5))  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-histogram4.png\" alt=\"R Histogram\"/></figure>\n\n\n\n<h3>Example: Histogram using non-uniform width</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating data for the graph.  \r\nv &lt;-  c(12,24,16,38,21,13,55,17,39,10,60,120,40,70,90)  \r\n# Giving a name to the chart file.  \r\npng(file = \"histogram_non_uniform.png\")  \r\n# Creating the histogram.  \r\nhist(v,xlab = \"Weight\",ylab=\"Frequency\",xlim=c(50,100),col = \"darkmagenta\",border = \"pink\", breaks=c(10,55,60,70,75,80,100,120))  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-histogram5.png\" alt=\"R Histogram\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A histogram is a type of bar chart which shows the frequency of the number of values which are compared with a set of values ranges. The histogram is used for the distribution, whereas a bar chart is used for comparing different entities. In the histogram, each bar represents the height of the number of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/390"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=390"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/390/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 391,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/390/revisions/391"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=390"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=390"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=390"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 392,
    "date": "2020-10-22T10:47:48",
    "date_gmt": "2020-10-22T10:47:48",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=392"
    },
    "modified": "2020-10-22T10:47:48",
    "modified_gmt": "2020-10-22T10:47:48",
    "slug": "r-line-graphs",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-line-graphs/",
    "title": {
      "rendered": "R Line Graphs"
    },
    "content": {
      "rendered": "\n<p>A line graph is a pictorial representation of information which changes continuously over time. A line graph can also be referred to as a line chart. Within a line graph, there are points connecting the data to show the continuous change. The lines in a line graph can move up and down based on the data. We can use a line graph to compare different events, information, and situations.</p>\n\n\n\n<p>A line chart is used to connect a series of points by drawing line segments between them. Line charts are used in identifying the trends in data. For line graph construction, R provides plot() function, which has the following syntax:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>plot(v,type,col,xlab,ylab)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>v</td><td>It is a vector which contains the numeric values.</td></tr><tr><td>2.</td><td>type</td><td>This parameter takes the value ?I? to draw only the lines or ?p? to draw only the points and &#8220;o&#8221; to draw both lines and points.</td></tr><tr><td>3.</td><td>xlab</td><td>It is the label for the x-axis.</td></tr><tr><td>4.</td><td>ylab</td><td>It is the label for the y-axis.</td></tr><tr><td>5.</td><td>main</td><td>It is the title of the chart.</td></tr><tr><td>6.</td><td>col</td><td>It is used to give the color for both the points and lines</td></tr></tbody></table></figure>\n\n\n\n<p>Let?s see a basic example to understand how plot() function is used to create the line graph:</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data for the chart.  \r\nv &lt;- c(13,22,28,7,31)  \r\n# Giving a name to the chart file.  \r\npng(file = \"line_graph.jpg\")  \r\n# Plotting the bar chart.   \r\nplot(v,type = \"o\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-line-graphs1.png\" alt=\"R Line Graphs\"/></figure>\n\n\n\n<h2>Line Chart Title, Color, and Labels</h2>\n\n\n\n<p>Like other graphs and charts, in line chart, we can add more features by adding more parameters. We can add the colors to the lines and points, add labels to the axis, and can give a title to the chart. Let?s see an example to understand how these parameters are used in plot() function to create an attractive line graph.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data for the chart.  \r\nv &lt;- c(13,22,28,7,31)  \r\n# Giving a name to the chart file.  \r\npng(file = \"line_graph_feature.jpg\")  \r\n# Plotting the bar chart.   \r\nplot(v,type = \"o\",col=\"green\",xlab=\"Month\",ylab=\"Temperature\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-line-graphs2.png\" alt=\"R Line Graphs\"/></figure>\n\n\n\n<h2>Line Charts Containing Multiple Lines</h2>\n\n\n\n<p>In our previous examples, we created line graphs containing only one line in each graph. R allows us to create a line graph containing multiple lines. R provides lines() function to create a line in the line graph.</p>\n\n\n\n<p>The lines() function takes an additional input vector for creating a line. Let?s see an example to understand how this function is used:</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating the data for the chart.  \r\nv &lt;- c(13,22,28,7,31)  \r\nw &lt;- c(11,13,32,6,35)  \r\nx &lt;- c(12,22,15,34,35)  \r\n# Giving a name to the chart file.  \r\npng(file = \"multi_line_graph.jpg\")  \r\n# Plotting the bar chart.   \r\nplot(v,type = \"o\",col=\"green\",xlab=\"Month\",ylab=\"Temperature\")  \r\nlines(w, type = \"o\", col = \"red\")  \r\nlines(x, type = \"o\", col = \"blue\")  \r\n# Saving the file.  \r\ndev.off() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-line-graphs3.png\" alt=\"R Line Graphs\"/></figure>\n\n\n\n<h2>Line Graph using ggplot2</h2>\n\n\n\n<p>In R, there is another way to create a line graph i.e. the use of ggplot2 packages. The ggplot2 package provides geom_line(), geom_step() and geom_path() function to create line graph. To use these functions, we first have to install the ggplot2 package and then we load it into the current working library.</p>\n\n\n\n<p>Let?s see an example to understand how ggplot2 is used to create a line graph. In the below example, we will use the predefined ToothGrowth dataset, which describes the effect of vitamin C on tooth growth in Guinea pigs.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>library(ggplot2)  \r\n#Creating data for the graph  \r\ndata_frame&lt;- data.frame(dose=c(\"D0.5\", \"D1\", \"D2\"),  \r\nlen=c(4.2, 10, 29.5))  \r\nhead(data_frame)  \r\npng(file = \"multi_line_graph2.jpg\")  \r\n# Basic line plot with points  \r\nggplot(data=data_frame, aes(x=dose, y=len, group=1)) +geom_line()+geom_point()  \r\n# Change the line type  \r\nggplot(data=df, aes(x=dose, y=len, group=1)) +geom_line(linetype = \"dashed\")+geom_point()  \r\n# Change the color  \r\nggplot(data=df, aes(x=dose, y=len, group=1)) +geom_line(color=\"red\")+geom_point()  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-line-graphs4.png\" alt=\"R Line Graphs\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A line graph is a pictorial representation of information which changes continuously over time. A line graph can also be referred to as a line chart. Within a line graph, there are points connecting the data to show the continuous change. The lines in a line graph can move up and down based on the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/392"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=392"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/392/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 393,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/392/revisions/393"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=392"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=392"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=392"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 394,
    "date": "2020-10-22T10:50:40",
    "date_gmt": "2020-10-22T10:50:40",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=394"
    },
    "modified": "2020-10-22T10:50:40",
    "modified_gmt": "2020-10-22T10:50:40",
    "slug": "r-scatterplots",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-scatterplots/",
    "title": {
      "rendered": "R Scatterplots"
    },
    "content": {
      "rendered": "\n<p>The scatter plots are used to compare variables. A comparison between variables is required when we need to define how much one variable is affected by another variable. In a scatterplot, the data is represented as a collection of points. Each point on the scatterplot defines the values of the two variables. One variable is selected for the vertical axis and other for the horizontal axis. In R, there are two ways of creating scatterplot, i.e., using plot() function and using the ggplot2 package&#8217;s functions.</p>\n\n\n\n<p>There is the following syntax for creating scatterplot in R:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>plot(x, y, main, xlab, ylab, xlim, ylim, axes)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameters</th><th>Description</th></tr><tr><td>1.</td><td>x</td><td>It is the dataset whose values are the horizontal coordinates.</td></tr><tr><td>2.</td><td>y</td><td>It is the dataset whose values are the vertical coordinates.</td></tr><tr><td>3.</td><td>main</td><td>It is the title of the graph.</td></tr><tr><td>4.</td><td>xlab</td><td>It is the label on the horizontal axis.</td></tr><tr><td>5.</td><td>ylab</td><td>It is the label on the vertical axis.</td></tr><tr><td>6.</td><td>xlim</td><td>It is the limits of the x values which is used for plotting.</td></tr><tr><td>7.</td><td>ylim</td><td>It is the limits of the values of y, which is used for plotting.</td></tr><tr><td>8.</td><td>axes</td><td>It indicates whether both axes should be drawn on the plot.</td></tr></tbody></table></figure>\n\n\n\n<p>Let&#8217;s see an example to understand how we can construct a scatterplot using the plot function. In our example, we will use the dataset &#8220;mtcars&#8221;, which is the predefined dataset available in the R environment.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Fetching two columns from mtcars  \r\ndata &lt;-mtcars&#91;,c('wt','mpg')]  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot.png\")  \r\n# Plotting the chart for cars with weight between 2.5 to 5 and mileage between 15 and 30.  \r\nplot(x = data$wt,y = data$mpg, xlab = \"Weight\", ylab = \"Milage\", xlim = c(2.5,5), ylim = c(15,30), main = \"Weight v/sMilage\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots1.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<h2>Scatterplot using ggplot2</h2>\n\n\n\n<p>In R, there is another way for creating scatterplot i.e. with the help of ggplot2 package.</p>\n\n\n\n<p>The ggplot2 package provides ggplot() and geom_point() function for creating a scatterplot. The ggplot() function takes a series of the input item. The first parameter is an input vector, and the second is the aes() function in which we add the x-axis and y-axis.</p>\n\n\n\n<p>Let&#8217;s start understanding how the ggplot2 package is used with the help of an example where we have used the familiar dataset &#8220;mtcars&#8221;.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2)  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot_ggplot.png\")  \r\n# Plotting the chart using ggplot() and geom_point() functions.  \r\nggplot(mtcars, aes(x = drat, y = mpg)) +geom_point()  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots2.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<p>We can add more features and make a more attractive scatter plots also. Below are some examples in which different parameters are added.</p>\n\n\n\n<h3>Example 1: Scatterplot with groups</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2)  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot1.png\")  \r\n# Plotting the chart using ggplot() and geom_point() functions.  \r\n#The aes() function inside the geom_point() function controls the color of the group.  \r\nggplot(mtcars, aes(x = drat, y = mpg)) +  \r\ngeom_point(aes(color=factor(gear)))  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots3.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<h3>Example 2: Changes in axis</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2)  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot2.png\")  \r\n# Plotting the chart using ggplot() and geom_point() functions.  \r\n#The aes() function inside the geom_point() function controls the color of the group.  \r\nggplot(mtcars, aes(x = log(mpg), y = log(drat))) +geom_point(aes(color=factor(gear)))  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots4.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<h3>Example 3: Scatterplot with fitted values</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2)  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot3.png\")  \r\n#Creating scatterplot with fitted values.  \r\n# An additional function stst_smooth is used for linear regression.  \r\nggplot(mtcars, aes(x = log(mpg), y = log(drat))) +geom_point(aes(color = factor(gear))) + stat_smooth(method = \"lm\",col = \"#C42126\",se = FALSE,size = 1)  \r\n#in above example lm is used for linear regression and se stands for standard error.  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots5.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<h2>Adding information to the graph</h2>\n\n\n\n<h3>Example 4: Adding title</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2)  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot4.png\")  \r\n#Creating scatterplot with fitted values.  \r\n# An additional function stst_smooth is used for linear regression.  \r\nnew_graph&lt;-ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +geom_point(aes(color = factor(gear))) +  \r\nstat_smooth(method = \"lm\",col = \"#C42126\",se = FALSE,size = 1)  \r\n#in above example lm is used for linear regression and se stands for standard error.  \r\nnew_graph+  \r\nlabs(  \r\n        title = \"Scatterplot with more information\"  \r\n)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots6.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<h3>Example 5: Adding title with dynamic name</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2)  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot5.png\")  \r\n#Creating scatterplot with fitted values.  \r\n# An additional function stst_smooth is used for linear regression.  \r\nnew_graph&lt;-ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +geom_point(aes(color = factor(gear))) +  \r\nstat_smooth(method = \"lm\",col = \"#C42126\",se = FALSE,size = 1)  \r\n#in above example lm is used for linear regression and se stands for standard error.  \r\n#Finding mean of mpg  \r\nmean_mpg&lt;- mean(mtcars$mpg)  \r\n#Adding title with dynamic name  \r\nnew_graph + labs(  \r\n        title = paste(\"Adding additiona information. Average mpg is\", mean_mpg)  \r\n)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots7.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<h3>Example 6: Adding a sub-title</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2)  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot6.png\")  \r\n#Creating scatterplot with fitted values.  \r\n# An additional function stst_smooth is used for linear regression.  \r\nnew_graph&lt;-ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +geom_point(aes(color = factor(gear))) +  \r\nstat_smooth(method = \"lm\",col = \"#C42126\",se = FALSE,size = 1)  \r\n#in above example lm is used for linear regression and se stands for standard error.  \r\n#Adding title with dynamic name  \r\nnew_graph + labs(  \r\n        title =  \r\n                \"Relation between Mile per hours and drat\",  \r\n        subtitle =  \r\n                \"Relationship break down by gear class\",  \r\n        caption = \"Authors own computation\"  \r\n)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots8.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<h3>Example 7: Changing name of x-axis and y-axis</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot7.png\")  \r\n#Creating scatterplot with fitted values.  \r\n# An additional function stst_smooth is used for linear regression.  \r\nnew_graph&lt;-ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +geom_point(aes(color = factor(gear))) +  \r\nstat_smooth(method = \"lm\",col = \"#C42126\",se = FALSE,size = 1)  \r\n#in above example lm is used for linear regression and se stands for standard error.  \r\n#Adding title with dynamic name  \r\nnew_graph + labs(  \r\n        x = \"Drat definition\",  \r\n        y = \"Mile per hours\",  \r\n        color = \"Gear\",  \r\n        title = \"Relation between Mile per hours and drat\",  \r\n        subtitle = \"Relationship break down by gear class\",  \r\n        caption = \"Authors own computation\"  \r\n)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots9.png\" alt=\"R Scatterplots\"/></figure>\n\n\n\n<h3>Example 8: Adding theme</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2 package  \r\nlibrary(ggplot2  \r\n# Giving a name to the chart file.  \r\npng(file = \"scatterplot8.png\")  \r\n#Creating scatterplot with fitted values.  \r\n# An additional function stst_smooth is used for linear regression.  \r\nnew_graph&lt;-ggplot(mtcars, aes(x = log(mpg), y = log(drat))) +geom_point(aes(color = factor(gear))) +  \r\nstat_smooth(method = \"lm\",col = \"#C42126\",se = FALSE,size = 1)  \r\n#in above example lm is used for linear regression and se stands for standard error.  \r\n#Adding title with dynamic name  \r\nnew_graph+  \r\ntheme_dark() +  \r\n                labs(  \r\n                        x = \"Drat definition, in log\",  \r\n                        y = \"Mile per hours, in log\",  \r\n                        color = \"Gear\",  \r\n                        title = \"Relation between Mile per hours and drat\",  \r\n                        subtitle = \"Relationship break down by gear class\",  \r\n                        caption = \"Authors own computation\"  \r\n                )  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-scatterplots10.png\" alt=\"R Scatterplots\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The scatter plots are used to compare variables. A comparison between variables is required when we need to define how much one variable is affected by another variable. In a scatterplot, the data is represented as a collection of points. Each point on the scatterplot defines the values of the two variables. One variable is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/394"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=394"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/394/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 395,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/394/revisions/395"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=394"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=394"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=394"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 396,
    "date": "2020-10-22T10:53:13",
    "date_gmt": "2020-10-22T10:53:13",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=396"
    },
    "modified": "2020-10-22T10:53:13",
    "modified_gmt": "2020-10-22T10:53:13",
    "slug": "linear-regression",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/linear-regression/",
    "title": {
      "rendered": "Linear Regression"
    },
    "content": {
      "rendered": "\n<p>Linear regression is used to predict the value of an outcome variable y on the basis of one or more input predictor variables x. In other words, linear regression is used to establish a linear relationship between the predictor and response variables.</p>\n\n\n\n<p>In linear regression, predictor and response variables are related through an equation in which the exponent of both these variables is 1. Mathematically, a linear relationship denotes a straight line, when plotted as a graph.</p>\n\n\n\n<p>There is the following general mathematical equation for linear regression:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>y = ax + b  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>y is a response variable.</li><li>x is a predictor variable.</li><li>a and b are constants that are called the coefficients.</li></ul>\n\n\n\n<h2>Steps for establishing the Regression</h2>\n\n\n\n<p>The prediction of the weight of a person when his height is known, is a simple example of regression. To predict the weight, we need to have a relationship between the height and weight of a person.</p>\n\n\n\n<p>There are the following steps to create the relationship:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>In the first step, we carry out the experiment of gathering a sample of observed values of height and weight.\r\nAfter that, we create a relationship model using the lm() function of R.\r\nNext, we will find the coefficient with the help of the model and create the mathematical equation using this coefficient.\r\nWe will get the summary of the relationship model to understand the average error in prediction, known as residuals.\r\nAt last, we use the predict() function to predict the weight of the new person.</code></pre>\n\n\n\n<p>There is the following syntax of lm() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>lm(formula,data)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameters</th><th>Description</th></tr><tr><td>1.</td><td>Formula</td><td>It is a symbol that presents the relationship between x and y.</td></tr><tr><td>2.</td><td>Data</td><td>It is a vector on which we will apply the formula.</td></tr></tbody></table></figure>\n\n\n\n<h2>Creating Relationship Model and Getting the Coefficients</h2>\n\n\n\n<p>Let&#8217;s start performing the second and third steps, i.e., creating a relationship model and getting the coefficients. We will use the lm() function and pass the x and y input vectors and store the result in a variable named&nbsp;<strong>relationship_model</strong>.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating input vector for lm() function  \r\nx &lt;- c(141, 134, 178, 156, 108, 116, 119, 143, 162, 130)  \r\ny &lt;- c(62, 85, 56, 21, 47, 17, 76, 92, 62, 58)  \r\n# Applying the lm() function.  \r\nrelationship_model&lt;- lm(y~x)  \r\n#Printing the coefficient   \r\nprint(relationship_model)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Call:\r\nlm(formula = y ~ x)\r\n\r\nCoefficients:\r\n(Intercept)            x  \r\n   47.50833      0.07276</code></pre>\n\n\n\n<h2>Getting Summary of Relationship Model</h2>\n\n\n\n<p>We will use the summary() function to get a summary of the relationship model. Let&#8217;s see an example to understand the use of the summary() function.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating input vector for lm() function  \r\nx &lt;- c(141, 134, 178, 156, 108, 116, 119, 143, 162, 130)  \r\ny &lt;- c(62, 85, 56, 21, 47, 17, 76, 92, 62, 58)  \r\n  \r\n# Applying the lm() function.  \r\nrelationship_model&lt;- lm(y~x)  \r\n  \r\n#Printing the coefficient   \r\nprint(summary(relationship_model))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Call:\nlm(formula = y ~ x)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-38.948  -7.390   1.869  15.933  34.087 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&amp;gt;|t|)\n(Intercept) 47.50833   55.18118   0.861    0.414\nx            0.07276    0.39342   0.185    0.858\n\nResidual standard error: 25.96 on 8 degrees of freedom\nMultiple R-squared:  0.004257,\tAdjusted R-squared:  -0.1202 \nF-statistic: 0.0342 on 1 and 8 DF,  p-value: 0.8579\n</code></pre>\n\n\n\n<h2>The predict() Function</h2>\n\n\n\n<p>Now, we will predict the weight of new persons with the help of the predict() function. There is the following syntax of predict function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>predict(object, newdata)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>object</td><td>It is the formula that we have already created using the lm() function.</td></tr><tr><td>2.</td><td>Newdata</td><td>It is the vector that contains the new value for the predictor variable.</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating input vector for lm() function  \r\nx &lt;- c(141, 134, 178, 156, 108, 116, 119, 143, 162, 130)  \r\ny &lt;- c(62, 85, 56, 21, 47, 17, 76, 92, 62, 58)  \r\n  \r\n# Applying the lm() function.  \r\nrelationship_model&lt;- lm(y~x)  \r\n  \r\n# Finding the weight of a person with height 170.  \r\nz &lt;- data.frame(x = 160)  \r\npredict_result&lt;-  predict(relationship_model,z)  \r\nprint(predict_result)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 \n59.14977 \n</code></pre>\n\n\n\n<h2>Plotting Regression</h2>\n\n\n\n<p>Now, we plot out prediction results with the help of the plot() function. This function takes parameter x and y as an input vector and many more arguments.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating input vector for lm() function  \r\nx &lt;- c(141, 134, 178, 156, 108, 116, 119, 143, 162, 130)  \r\ny &lt;- c(62, 85, 56, 21, 47, 17, 76, 92, 62, 58)  \r\nrelationship_model&lt;- lm(y~x)  \r\n# Giving a name to the chart file.  \r\npng(file = \"linear_regression.png\")  \r\n# Plotting the chart.  \r\nplot(y,x,col = \"red\",main = \"Height and Weight Regression\",abline(lm(x~y)),cex = 1.3,pch = 16,xlab = \"Weight in Kg\",ylab = \"Height in cm\")  \r\n# Saving the file.  \r\ndev.off() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-linear-regression-output.png\" alt=\"R Linear Regression\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Linear regression is used to predict the value of an outcome variable y on the basis of one or more input predictor variables x. In other words, linear regression is used to establish a linear relationship between the predictor and response variables. In linear regression, predictor and response variables are related through an equation in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/396"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=396"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/396/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 397,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/396/revisions/397"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=396"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=396"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=396"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 398,
    "date": "2020-10-22T10:55:04",
    "date_gmt": "2020-10-22T10:55:04",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=398"
    },
    "modified": "2020-10-22T10:55:04",
    "modified_gmt": "2020-10-22T10:55:04",
    "slug": "r-multiple-linear-regression",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-multiple-linear-regression/",
    "title": {
      "rendered": "R-Multiple Linear Regression"
    },
    "content": {
      "rendered": "\n<p>Multiple linear regression is the extension of the simple linear regression, which is used to predict the outcome variable (y) based on multiple distinct predictor variables (x). With the help of three predictor variables (x1, x2, x3), the prediction of y is expressed using the following equation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>y=b0+b1*x1+b2*x2+b3*x3</code></pre>\n\n\n\n<p>The &#8220;b&#8221; values represent the regression weights. They measure the association between the outcome and the predictor variables. &#8220;</p>\n\n\n\n<p><strong>Or</strong></p>\n\n\n\n<p>Multiple linear regression is the extension of linear regression in the relationship between more than two variables. In simple linear regression, we have one predictor and one response variable. But in multiple regressions, we have more than one predictor variable and one response variable.</p>\n\n\n\n<p>There is the following general mathematical equation for multiple regression &#8211;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>y=b0+b1*x1+b2*x2+b3*x3+⋯bn*xn</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li><strong>y</strong>&nbsp;is a response variable.</li><li><strong>b0, b1, b2&#8230;bn</strong>&nbsp;are the coefficients.</li><li><strong>x1, x2, &#8230;xn</strong>&nbsp;are the predictor variables.</li></ul>\n\n\n\n<p>In R, we create the regression model with the help of the&nbsp;<strong>lm()</strong>&nbsp;function. The model will determine the value of the coefficients with the help of the input data. We can predict the value of the response variable for the set of predictor variables using these coefficients.</p>\n\n\n\n<p>There is the following syntax of lm() function in multiple regression</p>\n\n\n\n<pre class=\"wp-block-code\"><code>lm(y ~ x1+x2+x3...., data)  </code></pre>\n\n\n\n<p>Before proceeding further, we first create our data for multiple regression. We will use the &#8220;mtcars&#8221; dataset present in the R environment. The main task of the model is to create the relationship between the &#8220;mpg&#8221; as a response variable with &#8220;wt&#8221;, &#8220;disp&#8221; and &#8220;hp&#8221; as predictor variables.</p>\n\n\n\n<p>For this purpose, we will create a subset of these variables from the &#8220;mtcars&#8221; dataset.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>data&lt;-mtcars&#91;,c(\"mpg\",\"wt\",\"disp\",\"hp\")]  \r\nprint(head(input))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-multiple-linear-regression-output.png\" alt=\"R Multiple Linear Regression\"/></figure>\n\n\n\n<h2>Creating Relationship Model and finding Coefficient</h2>\n\n\n\n<p>Now, we will use the data which we have created before to create the Relationship Model. We will use the lm() function, which takes two parameters i.e., formula and data. Let&#8217;s start understanding how the lm() function is used to create the Relationship Model.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating input data.  \r\ninput &lt;- mtcars&#91;,c(\"mpg\",\"wt\",\"disp\",\"hp\")]  \r\n# Creating the relationship model.  \r\nModel &lt;- lm(mpg~wt+disp+hp, data = input)  \r\n# Showing the Model.  \r\nprint(Model)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>From the above output it is clear that our model is successfully setup. Now, our next step is to find the coefficient with the help of the model.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>b0&amp;lt;- coef(Model)&#91;1]\nprint(b0)\nx_wt&amp;lt;- coef(Model)&#91;2]\nx_disp&amp;lt;- coef(Model)&#91;3]\nx_hp&amp;lt;- coef(Model)&#91;4]\nprint(x_wt)\nprint(x_disp)\nprint(x_hp)\n</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-multiple-linear-regression-output2.png\" alt=\"R Multiple Linear Regression\"/></figure>\n\n\n\n<h2>The equation for the Regression Model</h2>\n\n\n\n<p>Now, we have coefficient values and intercept. Let&#8217;s start creating a mathematical equation that we will apply for predicting new values. First, we will create an equation, and then we use the equation to predict the mileage when a new set of values for weight, displacement, and horsepower is provided.</p>\n\n\n\n<p>Let&#8217;s see an example in which we predict the mileage for a car with weight=2.51, disp=211 and hp=82.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating equation for predicting new values.  \r\ny=b0+x_wt*x1+x_disp*x2+x_hp*x3\\  \r\n#Applying equation for prediction new values  \r\ny=b0+x_wt*2.51+x_disp*211+x_hp*82 </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-multiple-linear-regression-output3.png\" alt=\"R Multiple Linear Regression\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Multiple linear regression is the extension of the simple linear regression, which is used to predict the outcome variable (y) based on multiple distinct predictor variables (x). With the help of three predictor variables (x1, x2, x3), the prediction of y is expressed using the following equation: The &#8220;b&#8221; values represent the regression weights. They [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/398"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=398"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/398/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 399,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/398/revisions/399"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=398"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=398"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=398"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 400,
    "date": "2020-10-22T11:32:55",
    "date_gmt": "2020-10-22T11:32:55",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=400"
    },
    "modified": "2020-10-22T11:32:55",
    "modified_gmt": "2020-10-22T11:32:55",
    "slug": "r-logistic-regression",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-logistic-regression/",
    "title": {
      "rendered": "R-Logistic Regression"
    },
    "content": {
      "rendered": "\n<p>In the logistic regression, a regression curve, y = f (x), is fitted. In the regression curve equation, y is a categorical variable. This Regression Model is used for predicting that y has given a set of predictors x. Therefore, predictors can be categorical, continuous, or a mixture of both.</p>\n\n\n\n<p>The logistic regression is a classification algorithm that falls under nonlinear regression. This model is used to predict a given binary result (1/0, yes/no, true/false) as a set of independent variables. Furthermore, it helps to represent categorical/binary outcomes using dummy variables.</p>\n\n\n\n<p>Logistic regression is a regression model in which the response variable has categorical values such as true/false or 0/1. Therefore, we can measure the probability of the binary response.</p>\n\n\n\n<p>There is the following mathematical equation for the logistic regression:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>y=1/(1+e^-(b0+b1 x1+b2 x2+⋯))</code></pre>\n\n\n\n<p>In the above equation, y is a response variable, x is the predictor variable, and b<sub>0</sub>&nbsp;and b<sub>1</sub>, b<sub>2</sub>,&#8230;b<sub>n</sub>&nbsp;are the coefficients, which is numeric constants. We use the glm() function to create the regression model.</p>\n\n\n\n<p>There is the following syntax of the glm() function.</p>\n\n\n\n<ol><li>glm(formula,&nbsp;data,&nbsp;family)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>formula</td><td>It is a symbol which represents the relationship b/w the variables.</td></tr><tr><td>2.</td><td>data</td><td>It is the dataset giving the values of the variables.</td></tr><tr><td>3.</td><td>family</td><td>An R object which specifies the details of the model, and its value is binomial for logistic regression.</td></tr></tbody></table></figure>\n\n\n\n<h2>Building Logistic Regression</h2>\n\n\n\n<p>The in-built data set &#8220;mtcars&#8221; describes various models of the car with their different engine specifications. In the &#8220;mtcars&#8221; data set, the transmission mode is described by the column &#8220;am&#8221;, which is a binary value (0 or 1). We can construct a logistic regression model between column &#8220;am&#8221; and three other columns &#8211; hp, wt, and cyl.</p>\n\n\n\n<p>Let&#8217;s see an example to understand how the glm function is used to create logistic regression and how we can use the summary function to find a summary for the analysis.</p>\n\n\n\n<p>In our example, we will use the dataset &#8220;BreastCancer&#8221; available in the R environment. To use it, we first need to install &#8220;mlbench&#8221; and &#8220;caret&#8221; packages.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading library  \r\nlibrary(mlbench)  \r\n#Using BreastCancer dataset  \r\ndata(BreastCancer, package = \"mlbench\")  \r\nbreast_canc = BreastCancer&#91;complete.cases(BreastCancer),]  \r\n#Displaying the information related to dataset with the str() function.  \r\nstr(breast_canc)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-logistic-regression-output.png\" alt=\"R Logistic Regression\"/></figure>\n\n\n\n<p>We now divide our data into training and test sets with training sets containing 70% data and test sets including the remaining percentages.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Dividing dataset into training and test dataset.  \r\nset.seed(100)  \r\n#Creating partitioning.  \r\nTraining_Ratio &lt;- createDataPartition(b_canc$Class, p=0.7, list = F)  \r\n#Creating training data.  \r\nTraining_Data &lt;- b_canc&#91;Training_Ratio, ]  \r\nstr(Training_Data)  \r\n#Creating test data.  \r\nTest_Data &lt;- b_canc&#91;-Training_Ratio, ]  \r\nstr(Test_Data)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-logistic-regression-output2.png\" alt=\"R Logistic Regression\"/></figure>\n\n\n\n<p>Now, we construct the logistic regression function with the help of glm() function. We pass the formula&nbsp;<strong>Class~Cell.shape</strong>&nbsp;as the first parameter and specifying the attribute family as &#8220;<strong>binomial</strong>&#8221; and use Training_data as the third parameter.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating Regression Model  \r\nglm(Class ~ Cell.shape, family=\"binomial\", data = Training_Data)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-logistic-regression-output3.png\" alt=\"R Logistic Regression\"/></figure>\n\n\n\n<p>Now, use the summary function for analysis.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating Regression Model  \r\nmodel&lt;-glm(Class ~ Cell.shape, family=\"binomial\", data = Training_Data)  \r\n#Using summary function  \r\nprint(summary(model))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-logistic-regression-output4.png\" alt=\"R Logistic Regression\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the logistic regression, a regression curve, y = f (x), is fitted. In the regression curve equation, y is a categorical variable. This Regression Model is used for predicting that y has given a set of predictors x. Therefore, predictors can be categorical, continuous, or a mixture of both. The logistic regression is a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/400"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=400"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/400/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 401,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/400/revisions/401"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=400"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=400"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=400"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 402,
    "date": "2020-10-22T11:33:47",
    "date_gmt": "2020-10-22T11:33:47",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=402"
    },
    "modified": "2020-10-22T11:33:47",
    "modified_gmt": "2020-10-22T11:33:47",
    "slug": "r-poisson-regression",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-poisson-regression/",
    "title": {
      "rendered": "R Poisson Regression"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<strong>Poisson Regression</strong>&nbsp;model is used for modeling events where the outcomes are counts. Count data is a discrete data with non-negative integer values that count things, such as the number of people in line at the grocery store, or the number of times an event occurs during the given timeframe.</p>\n\n\n\n<p>We can also define the&nbsp;<strong>count data</strong>&nbsp;as the rate data. So that it can express the number of times an event occurs within the timeframe as a raw count or as a rate. Poisson regression allows us to determine which explanatory variable (x values) influence a given response variable (y value, count, or a rate).</p>\n\n\n\n<p><strong>For example,</strong>&nbsp;poisson regression can be implemented by a grocery store to understand better, and predict the number of people in a row.</p>\n\n\n\n<p>There is the following general mathematical equation for poisson regression:</p>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>y</td><td>It is the response variable.</td></tr><tr><td>2.</td><td>a and b</td><td>These are the numeric coefficients.</td></tr><tr><td>3.</td><td>x</td><td>x is the predictor variable.</td></tr></tbody></table></figure>\n\n\n\n<p>The poisson regression model is created with the help of the familiar function glm().</p>\n\n\n\n<p>Let&#8217;s see an example in which we create the poisson regression model using glm() function. In this example, we have considered an in-built dataset &#8220;wrapbreaks&#8221; that describe the tension(low, medium, or high), and the effect of wool type(A and B) on the number of wrap breaks per loom. We will consider wool &#8220;type&#8221; and &#8220;tension&#8221;as the predictor variables, and &#8220;breaks&#8221; is taken as the response variable.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creting data for the poisson regression  \r\nreg_data&lt;-warpbreaks  \r\nprint(head(reg_data))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-poisson-regression-output.png\" alt=\"R Poisson Regression\"/></figure>\n\n\n\n<p>Now, we will create the regression model with the help of the glm() function as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating Poisson Regression Model using glm() function  \r\noutput_result &lt;-glm(formula = breaks ~ wool+tension, data = warpbreaks,family = poisson)  \r\noutput_result  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-poisson-regression-output2.png\" alt=\"R Poisson Regression\"/></figure>\n\n\n\n<p>Now, let&#8217;s use summary() function to find the summary of the model for data analysis.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Using summary function  \r\nprint(summary(output_result))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-poisson-regression-output3.png\" alt=\"R Poisson Regression\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;Poisson Regression&nbsp;model is used for modeling events where the outcomes are counts. Count data is a discrete data with non-negative integer values that count things, such as the number of people in line at the grocery store, or the number of times an event occurs during the given timeframe. We can also define the&nbsp;count data&nbsp;as [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/402"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=402"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/402/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 403,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/402/revisions/403"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=402"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=402"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=402"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 404,
    "date": "2020-10-22T11:35:29",
    "date_gmt": "2020-10-22T11:35:29",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=404"
    },
    "modified": "2020-10-22T11:35:29",
    "modified_gmt": "2020-10-22T11:35:29",
    "slug": "r-normal-distribution",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-normal-distribution/",
    "title": {
      "rendered": "R Normal Distribution"
    },
    "content": {
      "rendered": "\n<p>In random collections of data from independent sources, it is commonly seen that the distribution of data is normal. It means that if we plot a graph with the value of the variable in the horizontal axis and counting the values in the vertical axis, then we get a bell shape curve. The curve center represents the mean of the data set. In the graph, fifty percent of the value is located to the left of the mean. And the other fifty percent to the right of the graph. This is referred to as the normal distribution.</p>\n\n\n\n<p>R allows us to generate normal distribution by providing the following functions:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-normal-distribution.png\" alt=\"R Normal Distribution\"/></figure>\n\n\n\n<p>These function can have the following parameters:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>x</td><td>It is a vector of numbers.</td></tr><tr><td>2.</td><td>p</td><td>It is a vector of probabilities.</td></tr><tr><td>3.</td><td>n</td><td>It is a vector of observations.</td></tr><tr><td>4.</td><td>mean</td><td>It is the mean value of the sample data whose default value is zero.</td></tr><tr><td>5.</td><td>sd</td><td>It is the standard deviation whose default value is 1.</td></tr></tbody></table></figure>\n\n\n\n<p>Let&#8217;s start understanding how these functions are used with the help of the examples.</p>\n\n\n\n<h2>dnorm():Density</h2>\n\n\n\n<p>The dnorm() function of R calculates the height of the probability distribution at each point for a given mean and standard deviation. The probability density of the normal distribution is:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-normal-distribution2.png\" alt=\"R Normal Distribution\"/></figure>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a sequence of numbers between -1 and 20 incrementing by 0.2.  \r\nx &lt;- seq(-1, 20, by = .2)  \r\n# Choosing the mean as 2.0 and standard deviation as 0.5.  \r\ny &lt;- dnorm(x, mean = 2.0, sd = 0.5)  \r\n# Giving a name to the chart file.  \r\npng(file = \"dnorm.png\")  \r\n#Plotting the graph  \r\nplot(x,y)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-normal-distribution-output.png\" alt=\"R Normal Distribution\"/></figure>\n\n\n\n<h2>pnorm():Direct Look-Up</h2>\n\n\n\n<p>The dnorm() function is also known as &#8220;Cumulative Distribution Function&#8221;. This function calculates the probability of a normally distributed random numbers, which is less than the value of a given number. The cumulative distribution is as follows:</p>\n\n\n\n<p>f(x)=P(X≤x)</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a sequence of numbers between -1 and 20 incrementing by 0.2.  \r\nx &lt;- seq(-1, 20, by = .1)  \r\n# Choosing the mean as 2.0 and standard deviation as 0.5.  \r\ny &lt;- pnorm(x, mean = 2.0, sd = 0.5)  \r\n# Giving a name to the chart file.  \r\npng(file = \"pnorm.png\")  \r\n#Plotting the graph  \r\nplot(x,y)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-normal-distribution-output2.png\" alt=\"R Normal Distribution\"/></figure>\n\n\n\n<h2>qnorm():Inverse Look-Up</h2>\n\n\n\n<p>The qnorm() function takes the probability value as an input and calculates a number whose cumulative value matches with the probability value. The cumulative distribution function and the inverse cumulative distribution function are related by</p>\n\n\n\n<pre class=\"wp-block-code\"><code>p=f(x)\r\nx=f-1 (p)</code></pre>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a sequence of numbers between -1 and 20 incrementing by 0.2.  \r\nx &lt;- seq(0, 1, by = .01)  \r\n# Choosing the mean as 2.0 and standard deviation as 0.5.  \r\ny &lt;- qnorm(x, mean = 2.0, sd = 0.5)  \r\n# Giving a name to the chart file.  \r\npng(file = \"qnorm.png\")  \r\n#Plotting the graph  \r\nplot(y,x)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-normal-distribution-output3.png\" alt=\"R Normal Distribution\"/></figure>\n\n\n\n<h2>rnorm():Random variates</h2>\n\n\n\n<p>The rnorm() function is used for generating normally distributed random numbers. This function generates random numbers by taking the sample size as an input. Let&#8217;s see an example in which we draw a histogram for showing the distribution of the generated numbers.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a sequence of numbers between -1 and 20 incrementing by 0.2.  \r\nx &lt;- rnorm(1500, mean=80,  sd=15 )  \r\n# Giving a name to the chart file.  \r\npng(file = \"rnorm.png\")  \r\n#Creating histogram  \r\nhist(x,probability =TRUE,col=\"red\",border=\"black\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-normal-distribution-output4.png\" alt=\"R Normal Distribution\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In random collections of data from independent sources, it is commonly seen that the distribution of data is normal. It means that if we plot a graph with the value of the variable in the horizontal axis and counting the values in the vertical axis, then we get a bell shape curve. The curve center [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/404"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=404"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/404/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 405,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/404/revisions/405"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=404"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=404"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=404"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 406,
    "date": "2020-10-22T11:36:46",
    "date_gmt": "2020-10-22T11:36:46",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=406"
    },
    "modified": "2020-10-22T11:36:46",
    "modified_gmt": "2020-10-22T11:36:46",
    "slug": "binomial-distribution",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/binomial-distribution/",
    "title": {
      "rendered": "Binomial Distribution"
    },
    "content": {
      "rendered": "\n<p>The binomial distribution is also known as&nbsp;<strong>discrete probability distribution</strong>, which is used to find the probability of success of an event. The event has only two possible outcomes in a series of experiments. The tossing of the coin is the best example of the binomial distribution. When a coin is tossed, it gives either a head or a tail. The probability of finding exactly three heads in repeatedly tossing the coin ten times is approximate during the binomial distribution.</p>\n\n\n\n<p>R allows us to create binomial distribution by providing the following function:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binomial-distribution.png\" alt=\"R Binomial Distribution\"/></figure>\n\n\n\n<p>These function can have the following parameters:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>x</td><td>It is a vector of numbers.</td></tr><tr><td>2.</td><td>p</td><td>It is a vector of probabilities.</td></tr><tr><td>3.</td><td>n</td><td>It is a vector of observations.</td></tr><tr><td>4.</td><td>size</td><td>It is the number of trials.</td></tr><tr><td>5.</td><td>prob</td><td>It is the probability of the success of each trial.</td></tr></tbody></table></figure>\n\n\n\n<p>Let&#8217;s start understanding how these functions are used with the help of the examples</p>\n\n\n\n<h2>dbinom(): Direct Look-Up, Points</h2>\n\n\n\n<p>The dbinom() function of R calculates the probability density distribution at each point. In simple words, it calculates the density function of the particular binomial distribution.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Creating a sample of 100 numbers which are incremented by 1.5.  \r\nx &lt;- seq(0,100,by = 1)  \r\n# Creating the binomial distribution.  \r\ny &lt;- dbinom(x,50,0.5)  \r\n# Giving a name to the chart file.  \r\npng(file = \"dbinom.png\")  \r\n# Plotting the graph.  \r\nplot(x,y)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binomial-distribution-output.png\" alt=\"R Binomial Distribution\"/></figure>\n\n\n\n<h2>pbinom():Direct Look-Up, Intervals</h2>\n\n\n\n<p>The dbinom() function of R calculates the cumulative probability(a single value representing the probability) of an event. In simple words, it calculates the cumulative distribution function of the particular binomial distribution.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Probability of getting 20 or fewer heads from 48 tosses of a coin.  \r\nx &lt;- pbinom(20,48,0.5)  \r\n#Showing output  \r\nprint(x)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binomial-distribution-output2.png\" alt=\"R Binomial Distribution\"/></figure>\n\n\n\n<h2>qbinom(): Inverse Look-Up</h2>\n\n\n\n<p>The qbinom() function of R takes the probability value and generates a number whose cumulative value matches with the probability value. In simple words, it calculates the inverse cumulative distribution function of the binomial distribution.</p>\n\n\n\n<p>Let&#8217;s find the number of heads that have a probability of 0.45 when a coin is tossed 51 times.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Finding number of heads with the  help of qbinom() function   \r\nx &lt;- qbinom(0.45,48,0.5)  \r\n#Showing output  \r\nprint(x) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binomial-distribution-output3.png\" alt=\"R Binomial Distribution\"/></figure>\n\n\n\n<h2>rbinom()</h2>\n\n\n\n<p>The rbinom() function of R is used to generate required number of random values for given probability from a given sample.</p>\n\n\n\n<p>Let&#8217;s see an example in which we find nine random values from a sample of 160 with a probability of 0.5.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Finding random values    \r\nx &lt;- rbinom(9,160,0.5)  \r\n#Showing output  \r\nprint(x)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-binomial-distribution-output4.png\" alt=\"R Binomial Distribution\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The binomial distribution is also known as&nbsp;discrete probability distribution, which is used to find the probability of success of an event. The event has only two possible outcomes in a series of experiments. The tossing of the coin is the best example of the binomial distribution. When a coin is tossed, it gives either a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/406"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=406"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/406/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 407,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/406/revisions/407"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=406"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=406"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=406"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 408,
    "date": "2020-10-22T11:37:11",
    "date_gmt": "2020-10-22T11:37:11",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=408"
    },
    "modified": "2020-10-22T11:37:11",
    "modified_gmt": "2020-10-22T11:37:11",
    "slug": "r-classification",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-classification/",
    "title": {
      "rendered": "R Classification"
    },
    "content": {
      "rendered": "\n<p>The idea of the classification algorithm is very simple. We predict the target class by analyzing the training dataset. We use training datasets to obtain better boundary conditions that can be used to determine each target class. Once the boundary condition is determined, the next task is to predict the target class. The entire process is known as classification.</p>\n\n\n\n<p>There are some important points of classification algorithms:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-classification.png\" alt=\"R Classification\"/></figure>\n\n\n\n<ul><li><strong>Classifier</strong><br>It is an algorithm that maps the input data to a specific category.</li><li><strong>Classification Model</strong><br>A classification model tries to draw some conclusions from the input values which are given for training. This conclusion will predict class labels/categories for new data.</li><li><strong>Feature</strong><br>It is an individual measurable property of an event being observed.</li><li><strong>Binary classification</strong><br>It is a classification task that has two possible outcomes. E.g., Gender classification, which has only two possible outcomes, i.e., Male and Female.</li><li><strong>Multi-class classification</strong><br>It is a classification task in which classification is done with more than two classes. An example of multi-class classification is: an animal can be a dog or cat, but not both at the same time.</li><li><strong>Multi-label classification</strong><br>It is a classification task in which each sample is mapped with a set of target labels. An example of multi-label classification is: a news article that can be about a person, location, and sports at the same time.</li></ul>\n\n\n\n<h2>Types of Classification Algorithms</h2>\n\n\n\n<p>In R, classification algorithms are broadly classified in the following types:</p>\n\n\n\n<ul><li><strong>Linear classifier</strong><br>In machine learning, the main task of statistical classification is to use an object&#8217;s characteristics for finding to which class it belongs. This task is achieved by making a classification decision based on the value of a linear combination of the characteristics. In R, there are three linear classification algorithms which are as follows:<ol><li>Logistic Regression</li><li>Naive Bayes classifier</li><li>Fisher&#8217;s linear discriminant</li></ol></li><li><strong>Support vector machines</strong><br>A support vector machine is the supervised learning algorithm that analyzes data that are used for classification and regression analysis. In SVM, each data item is plotted as a point in n-dimensional space with the value of each attribute, that is the value of a particular coordinate.<br><strong>Least squares support vector machines</strong>&nbsp;is mostly used classification algorithm in R.</li><li><strong>Quadratic classifiers</strong><br>Quadratic classification algorithms are based on Bayes theorem. These classifiers algorithms are different in their approach for classification from the logistic regression. In logistic regression, it is possible to derive the probability of observation directly for a class (Y = k) for a particular observation (X = x). But in quadratic classifies, the observation is done in the following two steps:<ol><li>In the first step, we identify the distribution for input X for each of the groups or classes.</li><li>After that, we flip the distribution with the help of Bayes theorem to calculate the probability.</li></ol></li><li><strong>Kernel estimation</strong><br>Kernel estimation is a non-parametric way of estimating the&nbsp;<strong>Probability Density Function</strong>&nbsp;(PDF) of the continuous random variable. It is non-parametric because it assumes no implicit distribution for the variable. Essentially, on each datum, a kernel function is created with the datum at its center. It ensures that the kernel is symmetric about the datum. The PDF is then estimated by adding all these kernel functions and dividing it by the number of data to ensure that it satisfies the two properties of the PDF:<ol><li>Every possible value of the PDF should be non-negative.</li><li>The fixed integral of the PDF on its support set should be equal to 1.</li></ol>In R, the k-nearest neighbor is the most used kernel estimation algorithm for classification.</li><li><strong>Decision Trees</strong><br>Decision Tree is a supervised learning algorithm that is used for classification and regression tasks. In R, the decision tree classifier is implemented with the help of the R machine learning caret package. The random forest algorithm is the mostly used decision tree algorithm used in R.</li><li><strong>Neural Networks</strong><br>The neural network is another classifier algorithm that is inspired by the human brain for performing a particular task or function. These algorithms are mostly used in image classification in R. To implement neural network algorithms, we have to install the&nbsp;<strong>neuralnet</strong>&nbsp;package.</li><li><strong>Learning vector quantization</strong><br>Learning vector quantization is a classification algorithm that is used for binary and multi-class problems. By learning the training dataset, the LVQ model creates codebook vectors that represent class regions. They contain elements which are placed around the respective class according to their matching level. If the element matches, it moves closer to the target class, if it does not match, then it proceeds.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The idea of the classification algorithm is very simple. We predict the target class by analyzing the training dataset. We use training datasets to obtain better boundary conditions that can be used to determine each target class. Once the boundary condition is determined, the next task is to predict the target class. The entire process [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/408"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=408"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/408/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 409,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/408/revisions/409"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=408"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=408"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=408"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 410,
    "date": "2020-10-22T11:41:20",
    "date_gmt": "2020-10-22T11:41:20",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=410"
    },
    "modified": "2020-10-22T11:41:20",
    "modified_gmt": "2020-10-22T11:41:20",
    "slug": "r-time-series-analysis",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-time-series-analysis/",
    "title": {
      "rendered": "R-Time Series Analysis"
    },
    "content": {
      "rendered": "\n<p>Any metric which is measured over regular time intervals creates a time series. Analysis of time series is commercially important due to industrial necessity and relevance, especially with respect to the forecasting (demand, supply, and sale, etc.). A series of data points in which each data point is associated with a timestamp is known as time series.</p>\n\n\n\n<p>The stock price at different points in a day in the stock market is the simplest example of the time series. The amount of rainfall in an area in different months of the year is another example of it. R provides several functions for creating, manipulating, and plotting time series data. In the R-object, the time series data is known as the time-series object. It is just like a vector or data frame.</p>\n\n\n\n<h2>Creating a Time Series</h2>\n\n\n\n<p>R provides ts() function for creating a Time Series. There is the following syntax of the ts() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Timeseries_object_name&lt;-  ts(data, start, end, frequency)</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameter</th><th>Description</th></tr><tr><td>1.</td><td>data</td><td>It is a vector or matrix which contains the value used in time series.</td></tr><tr><td>2.</td><td>start</td><td>It is the start time for the first observation</td></tr><tr><td>3.</td><td>end</td><td>It is the end time for the last observation</td></tr><tr><td>4.</td><td>frequency</td><td>It specifies the number of observations per unit time.</td></tr></tbody></table></figure>\n\n\n\n<p>Let&#8217;s see an example to understand how ts() function is used for creating Time Series.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<p>In the below example, we will consider the annual snowfall details at a place starting from January 2013. We will create an R time series object for a period of 12 month and plot it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Getting the data points in form of a R vector.  \r\nsnowfall &lt;- c(790,1170.8,860.1,1330.6,630.4,911.5,683.5,996.6,783.2,982,881.8,1021)  \r\n# Convertting it into a time series object.  \r\nsnowfall_timeseries&lt;- ts(snowfall,start = c(2013,1),frequency = 12)  \r\n# Printing the timeseries data.  \r\nprint(snowfall_timeseries)  \r\n# Giving a name to the chart file.  \r\npng(file = \"snowfall.png\")  \r\n# Plotting a graph of the time series.  \r\nplot(snowfall_timeseries)  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output1.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output1_2.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<h2>What is Stationary Time Series?</h2>\n\n\n\n<p>A Stationary Time Series is a time series, if:</p>\n\n\n\n<ol><li>The mean value of the time-series is constant over time. This implies that the trend component is declared null.</li><li>The variance should not increase over time.</li><li>The seasonality effect should be minimal.</li></ol>\n\n\n\n<p>This means that it is devoid of or trendseasonal patterns, which resemble a random white noise regardless of the time interval observed.</p>\n\n\n\n<p>In simple words, a stationary time series is the one whose statistical properties like mean, variance, and autocorrelation, etc. are all constant over time.</p>\n\n\n\n<h2>Extracting the trend, seasonality, and error</h2>\n\n\n\n<p>We can decompose the time series by splitting it into three components, such as seasonality, trends, and random fluctuations.</p>\n\n\n\n<p>Time series decomposition is a mathematical process that transforms a time series into multiple time series.</p>\n\n\n\n<p><strong>Seasonal:</strong></p>\n\n\n\n<p>Patterns that repeat over a certain period of time</p>\n\n\n\n<p><strong>Trend:</strong></p>\n\n\n\n<p>An underlying trend of the matrices.</p>\n\n\n\n<p><strong>Random:</strong></p>\n\n\n\n<p>It is the residuals of the original time series after the seasonal and trend series are removed.</p>\n\n\n\n<h2>Additive and Multiplicative Decomposition</h2>\n\n\n\n<p>Additive and Multiplicative decompositions are the models that are used for analyzing the series. When the seasonal variation seems to be constant means when the seasonal variation does not change at the time when the value of the time series increases, then we use the Additive model else we use the multiplicative model.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis2.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p>Let&#8217;s see a step by step procedure to understand how we can decompose the time series using both Additive and Multiplicative model. For the additive model, we use ausbeer dataset, and for multiplicative, we use the AirPassengersdataset.</p>\n\n\n\n<p><strong>Step 1: Load data and create time series</strong></p>\n\n\n\n<p><strong>For Additive Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Importing library fpp  \r\nlibrary(fpp)  \r\n#Using ausbeer data  \r\ndata(ausbeer)  \r\n#Creating time series for ausbeer dataset  \r\ntimeserie.beer = tail(head(ausbeer, 17*4+2),17*4-4)  \r\n# Giving a name to the chart file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(timeserie_beer), col=\"magenta\")  \r\n# Saving the file.  \r\ndev.off()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output2.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>For Multiplicative Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Importing library Ecdat  \r\nlibrary(Ecdat)  \r\n#Using AirPassengers data  \r\ndata(AirPassengers)  \r\n#Creating time series  for AirPassengers dataset  \r\ntimeserie_air = AirPassengers  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(timeserie_air))  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output3.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>Step 2: Detecting the Trend</strong></p>\n\n\n\n<p><strong>For Additive Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Detecting trend  \r\ntrend.beer = ma(timeserie.beer, order = 4, centre = T)  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(timeserie.beer),col=\"red\")  \r\nlines(trend.beer,col=\"red\")  \r\nplot(as.ts(trend.beer),col=\"red\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output1:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output4.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>Output2:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output5.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>For Multiplicative Model:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Detecting trend  \r\ntrend.air = ma(timeserie.air, order = 12, centre = T)  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(timeserie.air),col=\"blue\")  \r\nlines(trend.air,col=\"blue\")  \r\nplot(as.ts(trend.air),col=\"blue\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output1:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output6.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>Output2:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output7.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>Step 3: Detrend of Time Series</strong></p>\n\n\n\n<p><strong>For Additive Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Detrend the time series.  \r\ndetrend.beer=timeserie.beer-trend.beer  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(detrend.beer),col=\"magenta\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output8.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>For Multiplicative Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Detrend of time series  \r\ndetrend.air=timeserie.air / trend.air  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(detrend.air),col=\"blue\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output9.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>Step 4: Average the Seasonality</strong></p>\n\n\n\n<p><strong>For Additive Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Average the seasonality  \r\nm.beer = t(matrix(data = detrend.beer, nrow = 4))  \r\nseasonal.beer = colMeans(m.beer, na.rm = T)  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(rep(seasonal.beer,16)),col=\"magenta\")  \r\n# Saving the file.  \r\ndev.off()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output10.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>For Multiplicative Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Average the seasonality   \r\nm.air = t(matrix(data = detrend.air, nrow = 12))  \r\nseasonal.air = colMeans(m.air, na.rm = T)  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(rep(seasonal.air,12)),col=\"blue\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output11.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>Step 5: Examining the Remaining Random Noise</strong></p>\n\n\n\n<p><strong>For Additive Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Examining the Remaining Random Noise  \r\nrandom.beer = timeserie.beer - trend.beer - seasonal.beer  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(rep(random.beer)),col=\"magenta\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output12.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>For Multiplicative Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Examining the Remaining Random Noise  \r\nrandom.air = timeserie.air / (trend.air * seasonal.air)  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(random.air),col=\"blue\")  \r\n# Saving the file.  \r\ndev.off() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output13.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>Step 5: Reconstruction of Original Signal</strong></p>\n\n\n\n<p><strong>For Additive Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Reconstruction of original signal  \r\nrecomposed.beer=trend.beer+seasonal.beer+random.beer  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(recomposed.beer),col=\"magenta\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output1:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output14.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>For Multiplicative Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Reconstruction of original signal  \r\nrecomposed.air = trend.air*seasonal.air*random.air  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\nplot(as.ts(recomposed.air),col=\"blue\")  \r\n# Saving the file.  \r\ndev.off() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output15.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<h3>Time Series Decomposition using decompose()</h3>\n\n\n\n<p><strong>For Additive Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Importing libraries  \r\nlibrary(forecast)  \r\nlibrary(timeSeries)  \r\nlibrary(fpp)  \r\n#Using ausbeer data  \r\ndata(ausbeer)  \r\n#Creating time series  \r\ntimeserie.beer = tail(head(ausbeer, 17*4+2),17*4-4)  \r\n#Detect trend  \r\ntrend.beer = ma(timeserie.beer, order = 4, centre = T)  \r\n#Detrend of time series  \r\ndetrend.beer=timeserie.beer-trend.beer  \r\n#Average the seasonality  \r\nm.beer = t(matrix(data = detrend.beer, nrow = 4))  \r\nseasonal.beer = colMeans(m.beer, na.rm = T)  \r\n#Examine the remaining random noise  \r\nrandom.beer = timeserie.beer - trend.beer - seasonal.beer  \r\n#Reconstruct the original signal   \r\nrecomposed.beer = trend.beer+seasonal.beer+random.beer  \r\n#Decomposed the time series  \r\ntsts.beer = ts(timeserie.beer, frequency = 4)  \r\ndecomposedecompose.beer = decompose(ts.beer, \"additive\")  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\npar(mfrow=c(2,2))  \r\nplot(as.ts(decompose.beer$seasonal),col=\"magenta\")  \r\nplot(as.ts(decompose.beer$trend),col=\"magenta\")  \r\nplot(as.ts(decompose.beer$random),col=\"magenta\")  \r\nplot(decompose.beer,col=\"magenta\")  \r\n# Saving the file.  \r\ndev.off()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output16.png\" alt=\"R Time Series Analysis\"/></figure>\n\n\n\n<p><strong>For Multiplicative Model</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Importing libraries  \r\nlibrary(forecast)  \r\nlibrary(timeSeries)  \r\nlibrary(fpp)  \r\nlibrary(Ecdat)  \r\n#Using Airpassengers data  \r\ndata(AirPassengers)  \r\n#Creating time series  \r\ntimeseries.air = AirPassengers  \r\n#Detect trend  \r\ntrend.air = ma(timeseries.air, order = 12, centre = T)  \r\n#Detrend of time series  \r\ndetrend.air=timeseries.air / trend.air  \r\n#Average the seasonality  \r\nm.air = t(matrix(data = detrend.air, nrow = 12))  \r\nseasonal.air = colMeans(m.air, na.rm = T)  \r\n#Examine the remaining random noise  \r\nrandom.air = timeseries.air / (trend.air * seasonal.air)  \r\n#Reconstruct the original signal  \r\nrecomposed.air = trend.air*seasonal.air*random.air  \r\n#Decomposed the time series  \r\ntsts.air = ts(timeseries.air, frequency = 12)  \r\ndecomposedecompose.air = decompose(ts.air, \"multiplicative\")  \r\n  \r\n# Giving a name to the file.  \r\npng(file = \"time.png\")  \r\n  \r\npar(mfrow=c(2,2))  \r\n  \r\nplot(as.ts(decompose.air$seasonal),col=\"blue\")  \r\nplot(as.ts(decompose.air$trend),col=\"blue\")  \r\nplot(as.ts(decompose.air$random),col=\"blue\")  \r\nplot(decompose.air,col=\"blue\")  \r\n  \r\n# Saving the file.  \r\ndev.off() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-time-series-analysis-output17.png\" alt=\"R Time Series Analysis\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Any metric which is measured over regular time intervals creates a time series. Analysis of time series is commercially important due to industrial necessity and relevance, especially with respect to the forecasting (demand, supply, and sale, etc.). A series of data points in which each data point is associated with a timestamp is known as [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/410"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=410"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/410/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 412,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/410/revisions/412"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=410"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=410"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=410"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 414,
    "date": "2020-10-22T11:45:47",
    "date_gmt": "2020-10-22T11:45:47",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=414"
    },
    "modified": "2020-10-22T11:45:47",
    "modified_gmt": "2020-10-22T11:45:47",
    "slug": "r-random-forest",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-random-forest/",
    "title": {
      "rendered": "R-Random Forest"
    },
    "content": {
      "rendered": "\n<p>The Random Forest is also known as Decision Tree Forest. It is one of the popular&nbsp;<strong>decision tree-based</strong>&nbsp;ensemble models. The accuracy of these models is higher than other decision trees. This algorithm is used for both classification and regression applications.</p>\n\n\n\n<p>In a random forest, we create a large number of decision trees, and in each decision tree, every observation is fed. The final output is the most common outcome for each observation. We take a majority vote for each classification model by feeding a new observation into all the trees.</p>\n\n\n\n<p>An error estimate is made for cases that were not used when constructing the tree. This is called an&nbsp;<strong>out-of-bag(OOB)</strong>&nbsp;error estimate mentioned as a percentage.</p>\n\n\n\n<p>The decision trees are prone to overfitting, and this is the main drawback of it. The reason is that trees, if deepened, are able to fit all types of variations in the data, including noise. It is possible to address this by partial pruning, and the results are often less than satisfactory.</p>\n\n\n\n<p>R allows us to create random forests by providing the randomForest package. The randomForest package provides randomForest() function, which helps us to create and analyze random forests. There is the following syntax of random forest in R:</p>\n\n\n\n<ol><li>randomForest(formula,&nbsp;data)&nbsp;&nbsp;</li></ol>\n\n\n\n<h3>Example:</h3>\n\n\n\n<p>Let&#8217;s start understanding how the randomForest package and its function are used. For this, we take an example in which we used the heart-disease dataset. Let&#8217;s start our coding section step by step.</p>\n\n\n\n<p>1) In the first step, we have to load the three required libraries i.e., ggplot2, cowplot, and randomForest.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Loading ggplot2, cowplot, and randomForest packages   \r\nlibrary(ggplot2)  \r\nlibrary(cowplot)  \r\nlibrary(randomForest)</code></pre>\n\n\n\n<p>2) Now, we will use the heart-disease dataset present in http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data. And then, from this dataset, we read the data in CSV format and store it in a variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Fetching heart-disease dataset  \r\nurl&lt;-\"http://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data\"  \r\ndata &lt;- read.csv(url,header=FALSE)  </code></pre>\n\n\n\n<p>3) Now, we print our data with the help of head() function which prints only the starting six rows as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Head print six rows of data.  \r\nhead(data)  </code></pre>\n\n\n\n<p>When we run the above code, it will generate the following output.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output1.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>4) From the above output, it is clear that none of the columns are labeled. Now, we name the columns and make these columns labeled in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>colnames(data) &lt;-c(\"age\",\"sex\",\"cp\",\"trestbps\",\"chol\",\"fbs\",\"restecg\",\"thalach\",\"exang\",\"oldpeak\",\"slope\",\"ca\",\"thal\",\"hd\")  \r\nhead(data)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output2.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>5) Let&#8217;s check the structure of the data with the help of str() function to analyze it better.</p>\n\n\n\n<ol><li>str(data)&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output3.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>6) In the above output, we highlight those columns which we will use in our analysis. It is clear from the output that some of the columns are messed up. Sex is supposed to be a factor where 0 represents the &#8220;Female&#8221; and 1 represents the &#8220;Male&#8221;. And cp(chest pain) is also supposed to be a factor where level 1 to 3 represent a different type of pain, and 4 represent no chest pain.</p>\n\n\n\n<p>The ca and thal are factors, but one of the levels is &#8220;?&#8221; when we need it to be NA. We have to clean up the data in our dataset, which are as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Changing the \"?\" to NAs?   \r\ndata&#91;data==\"?\"] &lt;- NA  \r\n  \r\n#Converting the 0's in sex to F and 1's to M  \r\ndata&#91;data$sex==0,]$sex &lt;-\"F\"  \r\ndata&#91;data$sex==1,]$sex &lt;-\"M\"  \r\n  \r\n#Converting columns tnto the factors  \r\ndata$sex&lt;- as.factor(data$sex)  \r\ndata$cp&lt;- as.factor(data$cp)  \r\ndata$fbs&lt;- as.factor(data$fbs)  \r\ndata$restecg&lt;- as.factor(data$restecg)  \r\ndata$exang&lt;- as.factor(data$exang)  \r\ndata$slope&lt;- as.factor(data$slope)  \r\n  \r\n#ca and thal columns contain? rather than NA. R treats it as a column of string, We correct this assumption by telling R that is a column of integers.   \r\n  \r\ndata$ca&lt;- as.integer(data$ca)  \r\ndata$ca&lt;- as.factor(data$ca)  \r\ndata$thal&lt;- as.integer(data$thal)  \r\ndata$thal&lt;- as.factor(data$thal)  \r\n  \r\n#Making data hd where 0's represent healthy and 1's to unhealthy.  \r\ndata$hd&lt;- ifelse(test=data$hd==0,yes=\"healthy\",no=\"Unhealthy\")  \r\ndata$hd&lt;- as.factor(data$hd)  \r\n  \r\n#Checking structure of data  \r\nstr(data)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output4.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>7) Now, we are randomly sampling things by setting the seed for the random number generator so that we can reproduce our result.</p>\n\n\n\n<ol><li>set.seed(42)&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>8) NWxt, we impute values for the NAs in the dataset with rfImput() function. In the following way:</p>\n\n\n\n<ol><li>data.imputed<strong>&lt;</strong><strong>&#8211;</strong>&nbsp;rfImpute(hd~.,datadata=data,iter=6)&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output5.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>9) Now, we build the proper random forest with the help of the randomForest() function in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Model&lt;-randomForest(hd~.,datadata=data.imputed,ntree=1000,proximity=TRUE)  \r\nModel</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output6.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>10) Now, if 500 trees are enough for optimal classification, we will plot the error rates. We create a data frame which will format the error rate information in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>oob_error_data&lt;- data.frame(Trees=rep(1:nrow(Model$err.rate),times=3),Type=rep(c(\"OOB\",\"Healthy\",\"Unhealthy\"),each=nrow(Model$err.rate)),Error=c(Model$err.rate&#91;,\"OOB\"],Model$err.rate&#91;,\"healthy\"],Model$err.rate&#91;,\"Unhealthy\"]))  </code></pre>\n\n\n\n<p>11) We call the ggplot for plotting error rate in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1)  We call the ggplot for plotting error rate in the following way:  \r\nggplot(data=oob_error_data,aes(x=Trees,y=Error))+geom_line(aes(color=Type))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output7.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>From the above output, it is clear that the error rate decreases when our random forest has more trees.</p>\n\n\n\n<p>12) Now, we add 1000 trees and check would the error rate goes down further? So we make a random forest with 1000 trees and find the error rate as we have done before.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Model&lt;-randomForest(hd~.,datadata=data.imputed,ntree=1000,proximity=TRUE)  \r\nModel  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output8.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>oob_error_data&lt;- data.frame(Trees=rep(1:nrow(Model$err.rate),times=3),Type=rep(c(\"OOB\",\"Healthy\",\"Unhealthy\"),each=nrow(Model$err.rate)),Error=c(Model$err.rate&#91;,\"OOB\"],Model$err.rate&#91;,\"healthy\"],Model$err.rate&#91;,\"Unhealthy\"]))  \r\nggplot(data=oob_error_data,aes(x=Trees,y=Error))+geom_line(aes(color=Type)) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output9.png\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>From the above output it is clear that the error rate is stabilized.</p>\n\n\n\n<p>13) Now, we need to make sure that we are considering the optimal number of variables at each internal node in the tree. This will be done in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating a vector that can hold ten values.  \r\noob_values&lt;- vector(length=10)  \r\n  \r\n#Testing of the different numbers of variables at each step.  \r\nfor(i in 1:10){  \r\n  #Building a random forest for determining the number of variables to try at each step.  \r\ntemp_model&lt;- randomForest(hd~.,datadata=data.imputed,mtry=i,ntree=1000)  \r\n  \r\n  #Storing OOB error rate.  \r\noob_values&#91;i] &lt;- temp_model$err.rate&#91;nrow(temp_model$err.rate),1]  \r\n}  \r\noob_values  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output10.jpg\" alt=\"R-Random Forest\"/></figure>\n\n\n\n<p>14) Now, we use the random forest to draw an MDS plot with samples. This will show us how they are related to each other. This will be done in the following way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#Creating a distance matrix with the help of dist() function.  \r\ndistance_matrix&lt;- dist(1-Model$proximity)  \r\n  \r\n#Running cmdscale() on the distance matrix.   \r\nmds_stuff&lt;- cmdscale(distance_matrix,eig=TRUE,x.ret=TRUE)  \r\n  \r\n#Calculating the percentage of variation in the distance matrix that the X and Y axes account for.  \r\nmds_var_per&lt;- round(mds_stuff$eig/sum(mds_stuff$eig)*100,1)  \r\n  \r\n#Formatting the data for ggplot() function  \r\nmds_values&lt;- mds_stuff$points  \r\nmds_data&lt;- data.frame(Sample=rownames(mds_values),X=mds_values&#91;,1],Y=mds_values&#91;,2],Status=data.imputed$hd)  \r\n  \r\n#Drawing the graph with ggplot() function.  \r\nggplot(data=mds_data,aes(x=X,y=Y,label=Sample))+geom_text(aes(color=Status))+theme_bw()+xlab(paste(\"MDS1-\",mds_var_per&#91;1],\"%\",sep=\"\"))+ylab(paste(\"MDS2-\",mds_var_per&#91;2],\"%\",sep=\"\"))+ggtitle(\"MDS plot using(1-Random Forest Proximities)\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-random-forest-output11.png\" alt=\"R-Random Forest\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Random Forest is also known as Decision Tree Forest. It is one of the popular&nbsp;decision tree-based&nbsp;ensemble models. The accuracy of these models is higher than other decision trees. This algorithm is used for both classification and regression applications. In a random forest, we create a large number of decision trees, and in each decision [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/414"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=414"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/414/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 415,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/414/revisions/415"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=414"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=414"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=414"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 416,
    "date": "2020-10-22T11:48:33",
    "date_gmt": "2020-10-22T11:48:33",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=416"
    },
    "modified": "2020-10-22T11:48:33",
    "modified_gmt": "2020-10-22T11:48:33",
    "slug": "t-test-in-r",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/t-test-in-r/",
    "title": {
      "rendered": "T-Test in R"
    },
    "content": {
      "rendered": "\n<p>In statistics, the T-test is one of the most common test which is used to determine whether the mean of the two groups is equal to each other. The assumption for the test is that both groups are sampled from a normal distribution with equal fluctuation. The null hypothesis is that the two means are the same, and the alternative is that they are not identical. It is known that under the null hypothesis, we can compute a t-statistic that will follow a t-distribution with n1 + n2 &#8211; 2 degrees of freedom.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/t-test-in-r.png\" alt=\"T-Test in R\"/></figure>\n\n\n\n<p>In R, there are various types of T-test like&nbsp;<strong>one sample</strong>&nbsp;and&nbsp;<strong>Welch T-test</strong>. R provides a t.test() function, which provides a variety of T-tests.</p>\n\n\n\n<p>There are the following syntaxes of t.test() function for different T-test</p>\n\n\n\n<p><strong>Independent 2-group T-test</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>t.test(y~x)   </code></pre>\n\n\n\n<p>here, y is numeric, and x is a binary factor.</p>\n\n\n\n<p><strong>Independent 2-group T-test</strong></p>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-code\"><code>t.test(y1,y2) </code></pre>\n</div></div>\n\n\n\n<p>Here, y1 and y2 are numeric.</p>\n\n\n\n<p><strong>Paired T-test</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>t.test(y1,y2,paired=TRUE)   </code></pre>\n\n\n\n<p>Here, y1 &amp; y2 are numeric.</p>\n\n\n\n<p><strong>One sample T-test</strong></p>\n\n\n\n<ol><li>t.test(y,mu=3)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Here, Ho: mu=3</p>\n\n\n\n<h2>How to perform T-tests in R</h2>\n\n\n\n<p>In the T-test, for specifying equal variances and a pooled variance estimate, we set var.equal=True. We can also use alternative=&#8221;less&#8221; or alternative=&#8221;greater&#8221; for specifying one-tailed test.</p>\n\n\n\n<p>Let&#8217;s see how one-sample, paired sample, and independent samples T-test is performed.</p>\n\n\n\n<h3>One-Sample T-test</h3>\n\n\n\n<p>One-Sample T-test is a T-test which compares the mean of a vector against a theoretical mean. There is a following formula which is used to compute the T-test :</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/t-test-in-r2.png\" alt=\"T-Test in R\"/></figure>\n\n\n\n<p>Here,</p>\n\n\n\n<ol><li>M is the mean.</li><li>? is the theoretical mean.</li><li>s is the standard deviation.</li><li>n is the number of observations.</li></ol>\n\n\n\n<p>For evaluating the statistical significance of the&nbsp;<strong>t-test</strong>, we need to compute the&nbsp;<strong>p-value</strong>. The p-value range starts from 0 to 1, and is interpreted as follow:</p>\n\n\n\n<ul><li>If the p-value is lower than 0.05, it means we are strongly confident to reject the null hypothesis. So that H3 is accepted.</li><li>If the p-value is higher than 0.05, then it indicates that we don&#8217;t have enough evidence to reject the null hypothesis.</li></ul>\n\n\n\n<p>We construct the pvalue by looking at the corresponding absolute value of the t-test.</p>\n\n\n\n<p>In R, we use the following syntax of t.test() function for performing a one-sample T-test in R.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>t.test(x, ?=0)  </code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x is the name of our variable of interest.\r\n? is described by the null hypothesis, which is set equal to the mean.</code></pre>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>Let&#8217;s see an example of One-Sample T-test in which we test whether the volume of a shipment of wood was less than usual(?<sub>0</sub>=0).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>set.seed(0)  \r\nship_vol &lt;- c(rnorm(70, mean = 35000, sd = 2000))  \r\nt.test(ship_vol, mu = 35000)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/t-test-in-r3.png\" alt=\"T-Test in R\"/></figure>\n\n\n\n<h3>Paired-Sample T-test</h3>\n\n\n\n<p>To perform a paired-sample test, we need two vectors data y1 and y2. Then, we will run the code using the syntax t.test (y1, y2, paired = TRUE).</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Suppose, we work in a large health clinic, and we are testing a new drug Procardia, which aims to reduce high blood pressure. We find 13000 individuals with high systolic blood pressure (x 150 = 150 mmHg, SD = 10 mmHg), and we provide them with Procardia for a month, and then measure their blood pressure again. We find that the average systolic blood pressure decreased to 144 mmHg with a standard deviation of 9 mmHg.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>set.seed(2800)  \r\npre.treatment &lt;- c(rnorm(2000, mean = 130, sd = 5))  \r\npost.treatment &lt;- c(rnorm(2000, mean = 144, sd = 4))  \r\nt.test(pre_Treatment, post_Treatment, paired = TRUE) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/t-test-in-r4.png\" alt=\"T-Test in R\"/></figure>\n\n\n\n<h3>Independent-Sample T-test</h3>\n\n\n\n<p>Depending on the structure of our data and the equality of their variance, the independent-sample T-test can take one of the three forms, which are as follows:</p>\n\n\n\n<ol><li>Independent-Samples T-test where y1 and y2 are numeric.</li><li>Independent-Samples T-test where y1 is numeric and y2 is binary.</li><li>Independent-Samples T-test with equal variances not assumed.</li></ol>\n\n\n\n<p>There is the following general form of t.test() function for the independent-sample t-test:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>t.test(y1,y2, paired=FALSE) </code></pre>\n\n\n\n<p>By default, R assumes that the versions of y1 and y2 are unequal, thus defaulting to Welch&#8217;s test. For toggling this, we set the flag var.equal=TRUE.</p>\n\n\n\n<p>Let&#8217;s see some examples in which we test the hypothesis. In this hypothesis, Clevelanders and New Yorkers spend different amounts for eating outside on a monthly basis.</p>\n\n\n\n<p><strong>Example 1: Independent-Sample T-test where y1 and y2 are numeric</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>set.seed(0)  \r\nSpenders.Cleve &lt;- rnorm(50, mean = 300, sd = 70)  \r\nSpenders.NY &lt;- rnorm(50, mean = 350, sd = 70)  \r\nt.test(Spenders.Cleve, Spenders.NY, var.equal = TRUE)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/t-test-in-r5.png\" alt=\"T-Test in R\"/></figure>\n\n\n\n<p><strong>Example 2: Where y1 is numeric and y2 are binary</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>set.seed(0)  \r\nSpenders.Cleve &lt;- rnorm(50, mean = 300, sd = 70)  \r\nSpenders.NY &lt;- rnorm(50, mean = 350, sd = 70)  \r\nAmount.Spent &lt;- c(Spenders.Cleve, Spenders.NY)  \r\ncity.name &lt;- c(rep(\"Cleveland\", 50), rep(\"New York\", 50))  \r\nt.test(Amount.Spent ~ city.name, var.equal = TRUE)  </code></pre>\n\n\n\n<p><strong>Output:</strong><img src=\"https://static.javatpoint.com/tutorial/r/images/t-test-in-r6.png\" alt=\"T-Test in R\"></p>\n\n\n\n<p><strong>Example 3: With equal variance not assumed</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>set.seed(0)  \r\nSpenders.Cleve &lt;- rnorm(50, mean = 300, sd = 70)  \r\nSpenders.NY &lt;- rnorm(50, mean = 350, sd = 70)  \r\nt.test(Spenders.Cleve, Spenders.NY, var.equal = FALSE)  </code></pre>\n\n\n\n<p><strong>Output:</strong><img src=\"https://static.javatpoint.com/tutorial/r/images/t-test-in-r7.png\" alt=\"T-Test in R\"></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In statistics, the T-test is one of the most common test which is used to determine whether the mean of the two groups is equal to each other. The assumption for the test is that both groups are sampled from a normal distribution with equal fluctuation. The null hypothesis is that the two means are [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/416"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=416"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/416/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 417,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/416/revisions/417"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=416"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=416"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=416"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 418,
    "date": "2020-10-22T11:49:29",
    "date_gmt": "2020-10-22T11:49:29",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=418"
    },
    "modified": "2020-10-22T11:49:29",
    "modified_gmt": "2020-10-22T11:49:29",
    "slug": "chi-square-test",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/chi-square-test/",
    "title": {
      "rendered": "Chi-Square Test"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<strong>Chi-Square Test</strong>&nbsp;is used to analyze the frequency table (i.e., contingency table), which is formed by two categorical variables. The chi-square test evaluates whether there is a significant relationship between the categories of the two variables.</p>\n\n\n\n<p>The Chi-Square Test is a statistical method which is used to determine whether two categorical variables have a significant correlation between them. These variables should be from the same population and should be categorical like- Yes/No, Red/Green, Male/Female, etc.</p>\n\n\n\n<p>R provides&nbsp;<strong>chisq.test()</strong>&nbsp;function to perform chi-square test. This function takes data as an input, which is in the table form, containing the count value of the variables in the observation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/chi-square-test-in-r.png\" alt=\"R Chi-Square Test\"/></figure>\n\n\n\n<p>In R, there is the following syntax of chisq.test() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>chisq.test(data)  </code></pre>\n\n\n\n<p>Let&#8217;s see an example in which we will take the Cars93 data present in the &#8220;Mass&#8221; library. This data represents the sales of different models of cars in the year 1993.</p>\n\n\n\n<p><strong>Data:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>library(\"MASS\")  \r\nprint(str(Cars93))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/chi-square-test-in-r2.png\" alt=\"R Chi-Square Test\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Loading the Mass library.  \r\nlibrary(\"MASS\")  \r\n# Creating a data frame from the main data set.  \r\ncar_data&lt;- data.frame(Cars93$AirBags, Cars93$Type)  \r\n# Creating a table with the needed variables.  \r\ncar_data = table(Cars93$AirBags, Cars93$Type)   \r\nprint(car_data)  \r\n# Performing the Chi-Square test.  \r\nprint(chisq.test(car_data))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/chi-square-test-in-r3.png\" alt=\"R Chi-Square Test\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;Chi-Square Test&nbsp;is used to analyze the frequency table (i.e., contingency table), which is formed by two categorical variables. The chi-square test evaluates whether there is a significant relationship between the categories of the two variables. The Chi-Square Test is a statistical method which is used to determine whether two categorical variables have a significant correlation [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/418"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=418"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/418/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 419,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/418/revisions/419"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=418"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=418"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=418"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 420,
    "date": "2020-10-22T11:49:51",
    "date_gmt": "2020-10-22T11:49:51",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=420"
    },
    "modified": "2020-10-22T11:49:51",
    "modified_gmt": "2020-10-22T11:49:51",
    "slug": "r-v-s-python",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/r-v-s-python/",
    "title": {
      "rendered": "R v/s Python"
    },
    "content": {
      "rendered": "\n<h2>R</h2>\n\n\n\n<p>Academics and statisticians have developed R from the past two decades. R now has one of the richest ecosystems for data analysis. In CRAN (open-source repository), there are about 12000 packages available. For whatever analysis we want to do, it is possible to find a library. The rich diversity of the library makes R the first choice for statistical analysis and especially for specialized analytical work.</p>\n\n\n\n<h2>Python</h2>\n\n\n\n<p>Python can do a lot of the same functions as R: data wrangling, apps, engineering, feature selection web scraping, and so on. Python is a tool for deploying and implementing large-scale machine learning. Python code is easy to maintain and stronger than R. In the past few years, Python did not have enough data analysis and machine learning libraries. But recently, Python is catching up and providing advance APIs for machine learning or artificial intelligence. Most data science jobs can be done with five Python libraries: Pandas, Numpy, Scikit-learn, Scipy, and Seaborn.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vs-python.png\" alt=\"R vs Python\"/></figure>\n\n\n\n<p>R is considered as the best programming language for any statistician because it contains a comprehensive list of statistical and graphical methods. On the other hand, Python can function similar to R, but data scientists or data analysts prefer it due to its simplicity and high performance. R is a powerful scripting language and is highly flexible with a vibrant community and a resource bank, while Python is a widely used, object-oriented language that is easy to learn and debug.</p>\n\n\n\n<p>Let&#8217;s start making the comparison between R and Python-based on some factors such as speed, flexibility, and popularity, etc.</p>\n\n\n\n<h2>Ease of Learning</h2>\n\n\n\n<p>R is used for statistical analysis of data. R has a steep learning curve. The people who have less or no experience in programming will find it difficult in the beginning. R is not so hard, once we get a grip of the language. On the other hand, Python emphasizes productivity and code readability, which make it one of the simplest programming languages. It is better due to the ease of learning and understanding.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vs-python2.png\" alt=\"R vs Python\"/></figure>\n\n\n\n<h2>Speed</h2>\n\n\n\n<p>Because of the low-level programming language, R requires longer codes for simple procedures. A long code takes much time in execution, and is the reason for the reduced speed. Python is a high-level programming language which is preferred for building critical, yet fast applications. Python codes are too simple and reduce in length, which takes less time to run.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vs-python3.png\" alt=\"R vs Python\"/></figure>\n\n\n\n<h2>Data Handling Capabilities</h2>\n\n\n\n<p>R is convenient for analysis due to a large number of packages, the advantage of using formulas, and easily usable tests. It can be used for basic data analysis without any installation of packages. The Python package was an issue for data analysis but has been improved with recent versions. Numpy and Pandas packages are used for data analysis in Python. It is also suitable for parallel calculations. From the discussion, it is clear that in data handling, both are good.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vs-python4.png\" alt=\"R vs Python\"/></figure>\n\n\n\n<h2>Graphics and Visualization</h2>\n\n\n\n<p>We can efficiently and more effectively understand the visualized data rather than the raw data. In R, several packages provide advanced graphical capabilities. Visualizations are important when choosing data analysis software. Python has some amazing visualization libraries, but they are complex and give a clear output. R advanced graphical capabilities make R stronger than Python.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vs-python5.png\" alt=\"R vs Python\"/></figure>\n\n\n\n<h2>Flexibility</h2>\n\n\n\n<p>When we compare R and Python with a flexibility factor, then we find that both the languages are flexible. Because in R, it is easy to use complex formulas, and R statistical tests and models are also available, and we can use them easily. Python is flexible when it comes to build something from scratch. Python is also used for scripting a website and other applications.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vs-python6.png\" alt=\"R vs Python\"/></figure>\n\n\n\n<h2>Popularity</h2>\n\n\n\n<p>From the past decades, both R and Python were started at the same level. Python became more popular than R. It ranked first in 2016 as compared to R that was ranked 6<sup>th</sup>&nbsp;on the list. The users of Python are more patriotic rather than R. The percentage of switching from R to Python is twice as large as Python to R.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vs-python7.png\" alt=\"R vs Python\"/></figure>\n\n\n\n<p>From the above discussion, we conclude that both languages give a head to head fight in the world of data analytics and data science. But Python emerged as the winner from both due to its widespread popularity and simplicity in writing code.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/r/images/r-vs-python8.png\" alt=\"R vs Python\"/></figure>\n\n\n\n<h2>Difference between R and Python</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No</th><th>Parameters</th><th>R</th><th>Python</th></tr><tr><td><strong>1.</strong></td><td>Objective</td><td>Its main objective is to perform data analysis and statistics.</td><td>Python is used for deployment and production.</td></tr><tr><td><strong>2.</strong></td><td>Primary Users</td><td>Scholar and R&amp;D are the primary users of R.</td><td>Programmers and developers are the primary users of R.</td></tr><tr><td><strong>3.</strong></td><td>Flexibility</td><td>In R, we can easily use the available libraries.</td><td>In Python, we can easily construct new models from scratch.</td></tr><tr><td><strong>4.</strong></td><td>Learning Curve</td><td>In R, the learning curve is difficult at the beginning.</td><td>The learning curve is linear and smooth.</td></tr><tr><td><strong>5.</strong></td><td>Popularity of programming language</td><td>4.23% in 2018.</td><td>21.69% in 2018.</td></tr><tr><td><strong>6.</strong></td><td>Average Salary</td><td>$99.000</td><td>$100.000</td></tr><tr><td><strong>7.</strong></td><td>Integration</td><td>R runs locally.</td><td>It is well-integrated with the app.</td></tr><tr><td><strong>8.</strong></td><td>Task</td><td>In R, we can easily get the primary results.</td><td>Python is good to deploy the algorithm.</td></tr><tr><td><strong>9.</strong></td><td>Database size</td><td>R handles the huge size of data.</td><td>It will also handle the huge size of data.</td></tr><tr><td><strong>10.</strong></td><td>IDE</td><td>Rstudio</td><td>Spyder, Ipthon Notebook.</td></tr><tr><td><strong>11.</strong></td><td>Packages and library</td><td>tydiverse, ggplot2, caret, and zoo.</td><td>Pandas, scipy, scikit-learn, TensorFlow, caret.</td></tr><tr><td><strong>12.</strong></td><td>Advantages</td><td>Beautiful graph construction.A large catalog is available for data analysis.It has a GitHub interface.RMarkdown.Shiny.</td><td>Notebooks help to share data with colleagues, and python has a jupyter notebook.Mathematical computation.Code Readability.Function in Python.Deployment.Speed.</td></tr><tr><td><strong>13.</strong></td><td>Disadvantages</td><td>It has a slow high learning curve dependencies between the library.</td><td>Not as many libraries as R.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>R Academics and statisticians have developed R from the past two decades. R now has one of the richest ecosystems for data analysis. In CRAN (open-source repository), there are about 12000 packages available. For whatever analysis we want to do, it is possible to find a library. The rich diversity of the library makes R [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      6
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/420"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=420"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/420/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 421,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/420/revisions/421"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=420"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=420"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=420"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]