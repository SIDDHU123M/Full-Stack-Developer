[{"id":5642,"date":"2020-12-18T10:18:47","date_gmt":"2020-12-18T10:18:47","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3373"},"modified":"2020-12-18T10:18:47","modified_gmt":"2020-12-18T10:18:47","slug":"introduction-2-4","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/introduction-2-4/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>Generally, developing a mobile application is a complex and challenging task. There are many frameworks available to develop a mobile application. Android provides a native framework based on Java language and iOS provides a native framework based on Objective-C/Shift language. However, to develop an application that support both operating systems, we need to code in two different languages using two different frameworks.</p>\n\n\n\n<p>To overcome this complexity, mobile frameworks supports this feature. The main reason behind to use cross-platform or hybrid framework is easier to maintain a single code base. Some of the popular frameworks are NativeScript, Apache Cordova, Xamarin, etc.</p>\n\n\n\n<h2>Overview of JavaScript Frameworks</h2>\n\n\n\n<p>JavaScript is a multi-paradigm language. It supports functional programming, object-oriented and prototype based programming. JavaScript was initially used for the client-side. Nowadays, JavaScript is used as a server-side programming language as well. JavaScript frameworks are a type of tool that makes working with JavaScript easier and smoother.</p>\n\n\n\n<p>Using this framework, programmers can easily code the application as a device responsive. Responsiveness is one of the reasons behind why this framework is becoming very popular.</p>\n\n\n\n<p>Let us have a look at some of the popular JS frameworks −</p>\n\n\n\n<h3>Angular</h3>\n\n\n\n<p>One of the most powerful, efficient, and open-source JavaScript frameworks is Angular. We can build mobile and desktop applications. Google uses this framework. It is used for developing a Single Page Application (SPA).</p>\n\n\n\n<h3>Vue.js</h3>\n\n\n\n<p>VueJS is a progressive JavaScript framework used to develop interactive web interfaces. It is one of the famous frameworks used to simplify web development. It can be easily integrated into big projects for front-end development without any issues. It is dual integration mode is one of the most attractive features for the creation of high-end SPA or Single Page Application.</p>\n\n\n\n<h3>React</h3>\n\n\n\n<p>ReactJS is JavaScript library used for building reusable UI components. It is developed by Facebook. It is currently one of the most popular JavaScript libraries and has a strong foundation and large community behind it.</p>\n\n\n\n<h3>Node.js</h3>\n\n\n\n<p>Node.js is an open source, cross-platform runtime environment for developing server-side and networking applications. It is built on Google Chrome’s JavaScript Engine (V8 Engine). Node.js applications are written in JavaScript, and can be run on OS X, Microsoft Windows,and Linux. It provides a rich library of various JavaScript modules which simplifies the development of web applications.</p>\n\n\n\n<h2>Overview of NativeScript</h2>\n\n\n\n<p>NativeScript is an open source framework used for creating native iOS and android mobile applications. It is a JIT compiled framework. NativeScript code runs on JS virtual machine. It uses V8 engine runtime for both Android and iOS platforms. NativeScript uses XML, JS and CSS for development. It has a WebIDE known as PlayGround. This PlayGround supports easy working interface, easy to manage projects, hot reload and debug on devices.</p>\n\n\n\n<p>NativeScript allows developers to create native, cross-platform apps quickly and efficiently and save on the costs of development, testing, and training. Hence, Native apps will continue to be rich and strong for years to come to make better and easier to use.</p>\n\n\n\n<h3>Features</h3>\n\n\n\n<p>NativeScript has vibrant community support. Some of the salient features of NativeScript listed below −</p>\n\n\n\n<ul><li>Extensible</li><li>Hot Module Replacement</li><li>Easy to setup</li><li>We can build rich animations, graphs, charts and lists</li><li>Developers can use any view as the root of an application</li><li>Lazy coding</li></ul>\n\n\n\n<h3>Benefits</h3>\n\n\n\n<p>NativeScript helps small or large scale companies to build cross-platform mobile apps. Some of the key benefits are −</p>\n\n\n\n<ul><li>Developers can reuse existing tools and code</li><li>Easy to modify, troubleshoot and update newer versions</li><li>Development experience is good so we don’t have to spend time to learn new tools</li><li>Platform-specific APIs from JavaScript, eliminating the need to learn Cordova plugins</li><li>Ease authentication with different sign-on providers</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Generally, developing a mobile application is a complex and challenging task. There are many frameworks available to develop a mobile application. Android provides a native framework based on Java language and iOS provides a native framework based on Objective-C/Shift language. However, to develop an application that support both operating systems, we need to code in [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5642"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5642"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5642/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5642"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5642"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5642"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5643,"date":"2020-12-18T10:20:14","date_gmt":"2020-12-18T10:20:14","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3375"},"modified":"2020-12-18T10:20:14","modified_gmt":"2020-12-18T10:20:14","slug":"installation-4-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/installation-4-2/","title":{"rendered":"Installation"},"content":{"rendered":"\n<p>This section explains about how to install NativeScript on your machine.</p>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<p>Before moving to installation, we need the following prerequisites −</p>\n\n\n\n<ul><li>Node.js</li><li>Android</li><li>iOS</li></ul>\n\n\n\n<h2>Verify Node.js</h2>\n\n\n\n<p><em>Node.js</em>&nbsp;is a JavaScript runtime engine build on top of Google Chrome’s internal JavaScript engine, v8. NativeScript uses Node.js extensively for various purpose like creating the starter template application, compiling the application, etc., It is mandatory to have&nbsp;<em>Node.js</em>&nbsp;on your machine.</p>\n\n\n\n<p>Hopefully, you have installed Node.js on your machine. If it is not installed then visit the link, https://nodejs.org/ and download the latest LTS package and install it.</p>\n\n\n\n<p>To verify if Node.js is properly installed, type the below command on your terminal −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">node --version\n</pre>\n\n\n\n<p>You could see the version. As of now, the current stable “LTS” version of node is 12.14.0.</p>\n\n\n\n<h2>CLI setup</h2>\n\n\n\n<p>NativeScript CLI is a terminal/command line based application and allows you to create and develop NativeScript application. Node.js package manager npm is used to install NativeScript CLI on your machine.</p>\n\n\n\n<p>Use the below command to install NativeScript CLI −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g nativescript\n</code></pre>\n\n\n\n<p>After executing this command, we could see the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/command.jpg\" alt=\"Command\"/></figure>\n\n\n\n<h3>setupcli</h3>\n\n\n\n<p>We have installed the latest NativeScript CLI, tns in our system. Now, type the below command in your terminal −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns\n</code></pre>\n\n\n\n<p>This will list out quick-start guide. You could see the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/cli.jpg\" alt=\"CLI\"/></figure>\n\n\n\n<h3>cli</h3>\n\n\n\n<p>We can use tns to create and develop application even without any additional setup. But, we could not able to deploy the application in real device. Instead we can run the application using&nbsp;<em>NativeScript PlayGround iOS&nbsp;</em>/ Android application. We will check it in the upcoming chapters.</p>\n\n\n\n<h2>Installing NativeScript playground App</h2>\n\n\n\n<p>Go to your iOS App store or Google Play Store and search NativeScript Playground app. Once the application is listed in the search result, click the install option. It will install the&nbsp;<em>NativeScript Playground</em>&nbsp;app in our device.</p>\n\n\n\n<p><em>NativeScript Playground</em>&nbsp;application will be helpful for testing your apps in Android or iOS device without deploying the application in the real device or emulator. This will reduce the time to develop the application and easy way to kick-start the development of our mobile application.</p>\n\n\n\n<h2>Android and iOS setup</h2>\n\n\n\n<p>In this chapter, let us learn how to setup the system to build and run iOS and Android apps either in emulator or in real device.</p>\n\n\n\n<h3>Step 1: Windows dependency</h3>\n\n\n\n<p>Execute the below command in your windows command prompt and run as administrator −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex \n((new-object net.webclient).DownloadString('https://www.nativescript.org/setup/win'))\"</code></pre>\n\n\n\n<p>After this command, Scripts being downloaded then install the dependencies and configure it.</p>\n\n\n\n<h3>Step 2: macOS dependency</h3>\n\n\n\n<p>To install in macOS, you must ensure that Xcode is installed or not. Xcode is mandatory for NativeScript. If Xcode is not installed, then visit the following link https://developer.apple.com/xcode/ and download; then install it.</p>\n\n\n\n<p>Now execute the following command in your terminal −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo ruby -e \"$(curl -fsSL https://www.nativescript.org/setup/mac)\"\n</code></pre>\n\n\n\n<p>After executing the above command, script will install the dependencies for both iOS and Android development. Once it is done, close and restart your terminal.</p>\n\n\n\n<h3>Step 3: Android dependency</h3>\n\n\n\n<p>Hopefully, you have configured the following prerequisites −</p>\n\n\n\n<ul><li>JDK 8 or higher</li><li>Android SDK</li><li>Android Support Repository</li><li>Google Repository</li><li>Android SDK Build-tools 28.0.3 or higher</li><li>Android Studio</li></ul>\n\n\n\n<p>If the above prerequisites are not configured, then visit the following link https://developer.android.com/studio/install and install it. Finally, Add JAVA_HOME and ANDROID_HOME in your environment variables.</p>\n\n\n\n<h3>Step 4: Verify dependencies</h3>\n\n\n\n<p>Now everything is done. You can verify the dependency using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns doctor\n</code></pre>\n\n\n\n<p>This will verify all the dependency and summarize the result as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>√ Getting environment information \nNo issues were detected. \n√ Your ANDROID_HOME environment variable is set and points to correct directory. \n√ Your adb from the Android SDK is correctly installed. \n√ The Android SDK is installed. \n√ A compatible Android SDK for compilation is found. \n√ Javac is installed and is configured properly. \n√ The Java Development Kit (JDK) is installed and is configured properly. \n√ Local builds for iOS can be executed only on a macOS system. \n   To build for iOS on a different operating system, you can use the\n   NativeScript cloud infrastructure. \n√ Getting NativeScript components versions information... \n√ Component nativescript has 6.3.0 version and is up to date. \n√ Component tns-core-modules has 6.3.2 version and is up to date. \n√ Component tns-android has 6.3.1 version and is up to date. \n√ Component tns-ios has 6.3.0 version and is up to date.\n</code></pre>\n\n\n\n<p>If you find any issues, please correct the issues before proceeding to develop the application.</p>\n","protected":false},"excerpt":{"rendered":"<p>This section explains about how to install NativeScript on your machine. Prerequisites Before moving to installation, we need the following prerequisites − Node.js Android iOS Verify Node.js Node.js&nbsp;is a JavaScript runtime engine build on top of Google Chrome’s internal JavaScript engine, v8. NativeScript uses Node.js extensively for various purpose like creating the starter template application, [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5643"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5643"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5643/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5643"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5643"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5643"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5644,"date":"2020-12-18T10:21:44","date_gmt":"2020-12-18T10:21:44","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3377"},"modified":"2020-12-18T10:21:44","modified_gmt":"2020-12-18T10:21:44","slug":"architecture","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/architecture/","title":{"rendered":"Architecture"},"content":{"rendered":"\n<p>NativeScript is an advanced framework to create mobile application. It hides the complexity of creating mobile application and exposes a rather simple API to create highly optimized and advanced mobile application. NativeScript enables even entry level developers to easily create mobile application in both Android and iOS.</p>\n\n\n\n<p>Let us understand the architecture of the NativeScript framework in this chapter.</p>\n\n\n\n<h2>Introduction</h2>\n\n\n\n<p>The core concept of NativeScript framework is to enable the developer to create hybrid style mobile application. Hybrid application uses the platform specific browser API to host a web application inside a normal mobile application and provides system access to the application through JavaScript API.</p>\n\n\n\n<p>NativeScript invests heavily on the&nbsp;<strong>JavaScript language</strong>&nbsp;to provide an efficient framework for developers. Since&nbsp;<strong>JavaScript</strong>&nbsp;is de-facto standard for client side programming (Web development) and every developer is well aware of the JavaScript language, it helps developers to easily get into the NativeScript framework. At the low level, NativeScript exposes the native API through a collection of JavaScript plugins called&nbsp;<strong>Native plugins.</strong></p>\n\n\n\n<p>NativeScript builds on the foundation of&nbsp;<em>Native plugins</em>&nbsp;and provides many high level and easy to use&nbsp;<em>JavaScript Modules</em>. Each module does a specific functionality like accessing a camera, designing a screen, etc. All these modules can be combined in multiple ways to architect a complex mobile application.</p>\n\n\n\n<p>Below diagram shows the high level overview of the NativeScript framework −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/framework.jpg\" alt=\"Framework\"/></figure>\n\n\n\n<p><strong>NativeScript Application</strong>&nbsp;− NativeScript framework allows developer to use either Angular style application or Vue Style application.</p>\n\n\n\n<p><strong>JavaScript Modules</strong>&nbsp;− NativeScript framework provides a rich set of JavaScript modules clearly categorized as UI Modules, Application Modules, Core Modules, etc. All modules can be accessed by application at any time to write any level of complex application.</p>\n\n\n\n<p><strong>JavaScript plugins</strong>&nbsp;− NativeScript framework provides a large collection of JavaScript plugins to access the platform related functionality. Modules uses the JavaScript plugins to provide platform specific functionality.</p>\n\n\n\n<p><strong>Native plugins</strong>− Native plugins are written in platform specific language to wrapper the system functionality which will be further used by JavaScript plugin.</p>\n\n\n\n<p><strong>Platform API</strong>&nbsp;− API provided by platform vendors.</p>\n\n\n\n<p>In short, NativeScript application is written and organized using modules. Modules are written in pure JavaScript and the modules access the platform related functionality (whenever needed) through plugins and finally, the plugins bridge the platform API and JavaScript API.</p>\n\n\n\n<h2>Workflow of a NativeScript Application</h2>\n\n\n\n<p>As we learned earlier, NativeScript application is composed of modules. Each and every module enables a specific feature. The two important categories of module to bootstrap a NativeScript application are as follows −</p>\n\n\n\n<ul><li>Root Modules</li><li>Page Modules</li></ul>\n\n\n\n<p>Root and Page modules can be categorized as application modules. The application module is the entry point of the NativeScript application. It bootstraps a page, enables the developer to create user interface of the page and finally allows execution of the business logic of the page. An application module consists of below three items −</p>\n\n\n\n<ul><li>User interface design coded in XML (e.g. page.xml/page.component.html)</li><li>Styles coded in CSS (e.g. page.css/page.component.css)</li><li>Actual business logic of the module in JavaScript (e.g. page.js/page.component.ts)</li></ul>\n\n\n\n<p>NativeScript provides lot of UI components (under UI Module) to design the application page. UI Component can be represented in XML format or HTML format in Angular based application. Application module uses the UI Component to design the page and store the design in separate XML,&nbsp;<em>page.xml/page.component.html</em>. The design can be styled using standard CSS.</p>\n\n\n\n<p>Application modules stores the style of the design in separate CSS,&nbsp;<em>page.css/page.component.css.</em>&nbsp;The functionality of the page can be done using JavaScript/TypeScript, which has full access to the design as well as the platform features. Application module uses a separate file, page.js/page.component.ts to code the actual functionality of the page.</p>\n\n\n\n<h3>Root Modules</h3>\n\n\n\n<p>NativeScript manages the user interface and user interaction through UI containers. Every UI container should have a&nbsp;<em>Root Module</em>&nbsp;and through which the UI container manages UI. NativeScript application have two type of UI containers −</p>\n\n\n\n<p><strong>Application Container</strong>&nbsp;− Every NativeScript application should have one application container and it will be set using application.run() method. It initializes the UI of the application.</p>\n\n\n\n<p><strong>Model View Container</strong>&nbsp;− NativeScript manages the Modal dialogs using model view container. A NativeScript application can have any number of model view container.</p>\n\n\n\n<p>Every root module should have only one UI Component as its content. The UI component in turn can have other UI components as its children. NativeScript provides a lot of UI component like TabView, ScrollView, etc., with child feature. We can use these as root UI component. One exception is&nbsp;<em>Frame</em>, which does not have child option but can be used as root component. Frame provides options to load Page Modules and options to navigate to other&nbsp;<em>page modules</em>&nbsp;as well.</p>\n\n\n\n<h3>Page Modules</h3>\n\n\n\n<p>In NativeScript, each and every page is basically a&nbsp;<em>Page Module</em>. Page module is designed using the rich set of UI components provided by NativeScript. Page modules are loadedinto the application through&nbsp;<em>Frame</em>&nbsp;component (using its defaultPage attribute or using navigate() method), which in turn loaded using&nbsp;<em>Root Modules</em>, which again in turn loaded using application.run() while the application is started.</p>\n\n\n\n<p>The work flow of the application can be represented as in the below diagram −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/application.jpg\" alt=\"Application\"/></figure>\n\n\n\n<p>The above diagram is explained in detail in the following steps −</p>\n\n\n\n<ul><li>NativeScript Application starts and calls application.run() method.</li><li>application.run() loads a&nbsp;<em>Root module</em>.</li><li><em>Root Module</em>&nbsp;is designed using any one of the UI component as specified below −<ul><li>Frame</li><li>TabView</li><li>SideDrawer</li><li>Any Layout View</li></ul></li><li>Frame component loads the specified page (Page module) and gets rendered. Other UI components will be rendered as specified in the&nbsp;<em>Root Module</em>. Other UI component also has option to load&nbsp;<em>Page Modules</em>&nbsp;as its main content.</li></ul>\n\n\n\n<h2>Workflow of Angular based NativeScript Application</h2>\n\n\n\n<p>As we learned earlier, NativeScript framework provides multiple methodologies to cater different category of developers. The methodologies supported by NativeScript are as follows −</p>\n\n\n\n<ul><li><strong>NativeScript Core</strong>&nbsp;− Basic or core concept of NativeScript Framework</li><li><strong>Angular + NativeScript</strong>&nbsp;− Angular based methodology</li><li><strong>Vuejs + NativeScript</strong>&nbsp;− Vue.js based methodology</li></ul>\n\n\n\n<p>Let us learn how Angular framework is incorporated into the NativeScript framework.</p>\n\n\n\n<h3>Step 1</h3>\n\n\n\n<p>NativeScript provides an object (platformNativeScriptDynamic) to bootstrap the Angular application. platformNativeScriptDynamic has a method, bootstrapModule, which is used to start the application.</p>\n\n\n\n<p>The syntax to bootstrap the application using Angular framework is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { platformNativeScriptDynamic } from \"nativescript-angular/platform\"; \nimport { AppModule } from \"./app/app.module\"; \nplatformNativeScriptDynamic().bootstrapModule(AppModule);</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p><strong><em>AppModule</em></strong>&nbsp;is our Root module.</p>\n\n\n\n<h3>Step 2</h3>\n\n\n\n<p>A simple implementation (below specified code) of the app module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from \"@angular/core\"; \nimport { NativeScriptModule } from \"nativescript-angular/nativescript.module\"; \nimport { AppRoutingModule } from \"./app-routing.module\"; \nimport { AppComponent } from \"./app.component\"; \n@NgModule(\n   {\n      bootstrap: &#91;\n         AppComponent\n      ], imports: &#91;\n         NativeScriptModule,\n         AppRoutingModule\n      ], declarations: &#91;\n         AppComponent\n      ]\n   }\n) export class AppModule { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p><em><strong>AppModule</strong></em>&nbsp;starts the application by loading AppComponent component. Angular components are similar to pages and are used for both design and programming logic.</p>\n\n\n\n<p>A simple implementation of AppComponent (app.component.ts) and its presentation logic (app.component.css) is as follows −</p>\n\n\n\n<p><strong>app.component.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from \"@angular/core\"; \n@Component(\n   {\n      selector: \"ns-app\",\n      templateUrl: \"app.component.html\"\n   }\n)\nexport class AppComponent { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p><em>templateUrl</em>&nbsp;refers the design of the component.</p>\n\n\n\n<p><strong>app.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;page-router-outlet>&lt;/page-router-outlet>\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p><strong><em>page-router-outlet</em></strong>&nbsp;is the place where the Angular application get attached.</p>\n\n\n\n<p>In summary, Angular framework is composed of modules similar to NativeScript framework with slight differences. Each module in the Angular will have an Angular component and a router setup file (page-routing.mocdule.ts). The router is set per module and it takes care of navigation. Angular components are analogues to pages in NativeSctipt core.</p>\n\n\n\n<p>Each component will have a UI design (page.component.html), a style sheet (page.component.css), and a JavaScript/TypeScript code file (page.component.ts).</p>\n","protected":false},"excerpt":{"rendered":"<p>NativeScript is an advanced framework to create mobile application. It hides the complexity of creating mobile application and exposes a rather simple API to create highly optimized and advanced mobile application. NativeScript enables even entry level developers to easily create mobile application in both Android and iOS. Let us understand the architecture of the NativeScript [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5644"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5644"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5644/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5644"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5644"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5644"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5645,"date":"2020-12-18T10:25:28","date_gmt":"2020-12-18T10:25:28","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3379"},"modified":"2020-12-18T10:25:28","modified_gmt":"2020-12-18T10:25:28","slug":"angular-application","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/angular-application/","title":{"rendered":"Angular Application"},"content":{"rendered":"\n<p>Let us create a simple bare bone application to understand the work flow of the NativeScript application.</p>\n\n\n\n<h2>Creating the Application</h2>\n\n\n\n<p>Let us learn how to create simple application using NativeScript CLI, tns. tns provides a command create to used to create a new project in NativeScript.</p>\n\n\n\n<p>The basic syntax to create a new application is as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns create &lt;projectname> --template &lt;template_name>\n</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<ul><li><strong><em>Projectname</em></strong>&nbsp;is the Name of the project.</li><li><strong><em>template_name</em></strong>&nbsp;is Project template. NativeScript provides lot of startup template to create different type of application. Use Angular based template.</li></ul>\n\n\n\n<p>Let us create a new directory named NativeScriptSamples to work on our new application. Now, open a new terminal then move to our directory and type the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntns create BlankNgApp --template tns-template-blank-ng\n</code></pre>\n\n\n\n<p>Where,&nbsp;<em><strong>tns-template-blank-ng</strong></em>&nbsp;refers a blank mobile application based on AngularJS.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>..... \n..... \n..... \nProject BlankNgApp was successfully created. \nNow you can navigate to your project with $ cd BlankNgApp \nAfter that you can preview it on device by executing $ tns preview</code></pre>\n\n\n\n<p>Now, our first mobile application,&nbsp;<em>BlankNgApp</em>&nbsp;is created.</p>\n\n\n\n<h2>Structure of the Application</h2>\n\n\n\n<p>Let us understand the structure of the NativeScript application by analyzing our first application BlankNgApp in this chapter. NativeScript application is organized into multiple sections and they are as follows −</p>\n\n\n\n<ul><li>Configuration section</li><li>Node modules</li><li>Android sources</li><li>iOS Sources</li><li>Application source code</li></ul>\n\n\n\n<p>The general structure of the application is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>│ angular.json \n│ LICENSE \n│ nsconfig.json \n│ package-lock.json \n│ package.json \n│ tsconfig.json \n│ tsconfig.tns.json \n│ tsfmt.json \n│ webpack.config.js \n│\n├───App_Resources \n│  ├───Android \n│  │ \n│  └───iOS \n│ \n├───hooks \n│ \n├───node_modules \n| \n└───src \n   │ app.css \n   │ main.ts \n   │ package.json \n   │ \n   └───app \n      │  app-routing.module.ts \n      │  app.component.html \n      │  app.component.ts \n      │  app.module.ts \n      │ \n      └───home \n         home-routing.module.ts \n         home.component.html \n         home.component.ts \n         home.module.ts\n</code></pre>\n\n\n\n<p>Let us understand each section of the application and how it helps us to create our application.</p>\n\n\n\n<h2>Configuration section</h2>\n\n\n\n<p>All the files in the root of the application are configuration files. The format of the configuration files are in JSON format, which helps the developer to easily understand the configuration details. NativeScript application relies on these files to gets all available configuration information. Let us go through all the configuration files in this section.</p>\n\n\n\n<h3>package.json</h3>\n\n\n\n<p>package.json files sets the identity (id) of the application and all the modules that the application depends on for its proper working. Below is our package.json −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{ \n   \"nativescript\": {\n      \"id\": \"org.nativescript.BlankNgApp\",\n      \"tns-android\": {\n         \"version\": \"6.3.1\"\n      }, \"tns-ios\": {\n         \"version\": \"6.3.0\"\n      } \n   }, \"description\": \"NativeScript Application\", \n   \"license\": \"SEE LICENSE IN &lt;your-license-filename>\", \n   \"repository\": \"&lt;fill-your-repository-here>\", \n   \"dependencies\": { \n      \"@angular/animations\": \"~8.2.0\", \n      \"@angular/common\": \"~8.2.0\", \n      \"@angular/compiler\": \"~8.2.0\", \n      \"@angular/core\": \"~8.2.0\", \n      \"@angular/forms\": \"~8.2.0\", \n      \"@angular/platform-browser\": \"~8.2.0\", \n      \"@angular/platform-browser-dynamic\": \"~8.2.0\", \n      \"@angular/router\": \"~8.2.0\", \n      \"@nativescript/theme\": \"~2.2.1\", \n      \"nativescript-angular\": \"~8.20.3\", \n      \"reflect-metadata\": \"~0.1.12\", \n      \"rxjs\": \"^6.4.0\", \n      \"tns-core-modules\": \"~6.3.0\", \n      \"zone.js\": \"~0.9.1\" \n   }, \n   \"devDependencies\": { \n      \"@angular/compiler-cli\": \"~8.2.0\", \n      \"@ngtools/webpack\": \"~8.2.0\", \n      \"nativescript-dev-webpack\": \"~1.4.0\", \n      \"typescript\": \"~3.5.3\" \n   }, \n   \"gitHead\": \"fa98f785df3fba482e5e2a0c76f4be1fa6dc7a14\", \n   \"readme\": \"NativeScript Application\" \n}</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p><em><strong>Identity of the application (nativescript/id)</strong></em>&nbsp;− Sets the id of the application as org.nativescript.BlankNgApp. This id is used to publish our app to the Play Store or iTunes. This id will be our Application Identifier or Package Name.</p>\n\n\n\n<p><em><strong>Dependencies (dependencies)</strong></em>&nbsp;− Specifies all our dependent node modules. Since, the default NativeScript implementation depends on Angular Framework, Angular modules are included.</p>\n\n\n\n<p><em><strong>Development dependencies</strong></em>&nbsp;− Specifies all the tools that the application depends on. Since, we are developing our application in TypeScript, it includes typescript as one of the dependent modules.</p>\n\n\n\n<p><strong>angular.json</strong>&nbsp;− Angular framework configuration information.</p>\n\n\n\n<p><strong>nsconfig.json</strong>&nbsp;− NativeScript framework configuration information.</p>\n\n\n\n<p><strong>tsconfig.json, tsfmt.json &amp; tsconfig.tns.json&nbsp;</strong>− TypeScript language configuration information</p>\n\n\n\n<p><strong>webpack.config.js</strong>&nbsp;− WebPack configuration written in JavaScript.</p>\n\n\n\n<h3>Node modules</h3>\n\n\n\n<p>As NativeScript project are node based project, it stores all its dependencies in the node_modules folder. We can use npm (npm install) or tns to download and install all the application dependency into the node_moduels.</p>\n\n\n\n<h3>Android source code</h3>\n\n\n\n<p>NativeScript auto-generates the android source code and place it in App_Resources\\Android folder. It will be used to create android application using&nbsp;<em>Android SDK</em></p>\n\n\n\n<h3>iOS source code</h3>\n\n\n\n<p>NativeScript auto-generates the iOS source code and place it in App_Resources\\iOS folder. It will be used to create iOS application using iOS SDK and XCode</p>\n\n\n\n<h3>Application source code</h3>\n\n\n\n<p>The actual application code is placed in src folder. Our application has below files in src folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>└───src \n   │ app.css \n   │ main.ts \n   │ package.json \n   │ \n   └───app \n   │ app-routing.module.ts \n   │ app.component.html \n   │ app.component.ts \n   │ app.module.ts \n   │ \n   └───home \n         home-routing.module.ts \n         home.component.html \n         home.component.ts \n         home.module.ts\n\n</code></pre>\n\n\n\n<p>Let us understand the purpose of all files and how they are organized in this section −</p>\n\n\n\n<h3>Step 1</h3>\n\n\n\n<p>main.ts &#8211; Entry point of the application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// this import should be first in order to load some required settings (like globals and reflect-metadata) \nimport { platformNativeScriptDynamic } from \"nativescript-angular/platform\";\nimport { AppModule } from \"./app/app.module\"; \nplatformNativeScriptDynamic().bootstrapModule(AppModule);</code></pre>\n\n\n\n<p>Here, we have set the AppModule as the bootstrapping module of the application.</p>\n\n\n\n<h3>Step 2</h3>\n\n\n\n<p>app.css &#8211; Main style sheet of the application is as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@import \"~@nativescript/theme/css/core.css\"; \n@import \"~@nativescript/theme/css/brown.css\"; \n/* Place any CSS rules you want to apply on both iOS and Android here. \nThis is where the vast majority of your CSS code goes. */</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>app.css imports the core style sheet and brown color themes style sheet of the NativeScript framework.</p>\n\n\n\n<h3>Step 3</h3>\n\n\n\n<p>app\\app.module.ts &#8211; Root module of the application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule, NO_ERRORS_SCHEMA } from \"@angular/core\";\nimport { NativeScriptModule } from \"nativescript-angular/nativescript.module\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppComponent } from \"./app.component\";\n@NgModule(\n   {\n      bootstrap: &#91;\n         AppComponent\n      ], \n      imports: &#91;\n         NativeScriptModule,\n         AppRoutingModule\n      ], \n      declarations: &#91;\n         AppComponent\n      ], schemas: &#91;\n         NO_ERRORS_SCHEMA\n      ]\n   }\n)\nexport class AppModule { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>AppModule is created based on NgModule and sets the components and modules of the application. It imports two modules NativeScriptModule and AppRoutingModule and a component, AppComponent. It also set the AppComponent as the root component of the application.</p>\n\n\n\n<h3>Step 4</h3>\n\n\n\n<p>app.component.ts &#8211; Root component of the application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from \"@angular/core\"; \n@Component(\n   { \n      selector: \"ns-app\", \n      templateUrl: \"app.component.html\" \n   }\n) \nexport class AppComponent { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>AppComponent sets the template and style sheet of the component. Template is designed in plain HMTL using NativeScript UI components.</p>\n\n\n\n<h3>Step 5</h3>\n\n\n\n<p>app-routing.module.ts &#8211; Routing module for the AppModule</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from \"@angular/core\"; \nimport { Routes } from \"@angular/router\"; \nimport { NativeScriptRouterModule } from \"nativescript-angular/router\"; \nconst routes: Routes = &#91;\n   { path: \"\", redirectTo: \"/home\", pathMatch: \"full\" },\n   { path: \"home\", loadChildren: () =>\n   import(\"~/app/home/home.module\").then((m) => m.HomeModule) } \n];\n@NgModule(\n   {\n      imports: &#91;NativeScriptRouterModule.forRoot(routes)], \n      exports: &#91;NativeScriptRouterModule] \n   }\n)\nexport class AppRoutingModule { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>AppRoutingModule uses the NativeScriptRouterModule and sets the routes of the AppModule. It basically redirects the empty path to /home and the points the /home to HomeModule.</p>\n\n\n\n<h3>Step 6</h3>\n\n\n\n<p>app\\home\\home.module.ts &#8211; Defines a new module, HomeModule.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule, NO_ERRORS_SCHEMA } from \"@angular/core\";\nimport { NativeScriptCommonModule } from \"nativescript-angular/common\";\nimport { HomeRoutingModule } from \"./home-routing.module\";\nimport { HomeComponent } from \"./home.component\";\n@NgModule(\n   {\n      imports: &#91;\n         NativeScriptCommonModule,\n         HomeRoutingModule\n      ],\n      declarations: &#91;\n         HomeComponent\n      ],\n      schemas: &#91;\n         NO_ERRORS_SCHEMA\n      ]\n   }\n)\nexport class HomeModule { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>HomeModule imports two modules, HomeRoutingModule and NativeScriptCommonModule and one component HomeComponent</p>\n\n\n\n<h3>Step 7</h3>\n\n\n\n<p>app\\home\\home.component.ts &#8211; Defines the Home component and used as home page of the application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from \"@angular/core\";\n@Component(\n   {\n      selector: \"Home\", templateUrl: \"./home.component.html\" \n   }\n) \nexport class HomeComponent implements OnInit { \n   constructor() { \n      // Use the component constructor to inject providers. \n   } \n   ngOnInit(): void { \n      // Init your component properties here. \n   } \n}</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>HomeComponent sets the template and selector of the home component.</p>\n\n\n\n<h3>Step 8</h3>\n\n\n\n<p>app\\home\\home-routing.module.ts &#8211; Routing module for HomeModule and used to define routing for home module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from \"@angular/core\"; \nimport { Routes } from \"@angular/router\"; \nimport { NativeScriptRouterModule } from \"nativescript-angular/router\"; \nimport { HomeComponent } from \"./home.component\"; \nconst routes: Routes = &#91;\n   { path: \"\", component: HomeComponent } \n]; \n@NgModule(\n   { \n      imports: &#91;NativeScriptRouterModule.forChild(routes)], \n      exports: &#91;NativeScriptRouterModule] \n   }\n) \nexport class HomeRoutingModule { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>HomeRoutingModule set the empty path to HomeComponent.</p>\n\n\n\n<h3>Step 9</h3>\n\n\n\n<p>app.component.html and home.component.html &#8211; They are used to design the UI of the application using NativeScript UI components.</p>\n\n\n\n<h2>Run your app</h2>\n\n\n\n<p>If you want run your app without using any device, then type the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns preview\n</code></pre>\n\n\n\n<p>After executing this command, this will generate QR code to scan and connect with your device.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/qrcode.jpg\" alt=\"QRCode\"/></figure>\n\n\n\n<p><strong>QRCode</strong></p>\n\n\n\n<p>Now QR code is generated and connect to PlayGround in next step.</p>\n\n\n\n<h3>NativeScript PlayGround</h3>\n\n\n\n<p>Open NativeScript PlayGround app on your iOS or Android mobile then choose&nbsp;<em>Scan QR code&nbsp;</em>option. It will open the camera. Focus the QR code displayed on the console. This will scan the QR Code. Scanning the QR Code will trigger the application build and then sync the application to the device as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Copying template files... \nPlatform android successfully added. v6.3.1 \nPreparing project... \nFile change detected. Starting incremental webpack compilation... \nwebpack is watching the files… \nHash: 1f38aaf6fcda4e082b88 \nVersion: webpack 4.27.1 \nTime: 9333ms \nBuilt at: 01/04/2020 4:22:31 PM\n               Asset          Size        Chunks         Chunk Names \n               0.js           8.32 KiB     0     &#91;emitted] \n          bundle.js           22.9 KiB    bundle &#91;emitted] bundle \n       package.json          112 bytes           &#91;emitted] \n         runtime.js             73 KiB   runtime &#91;emitted] runtime \ntns-java-classes.js            0 bytes  &#91;emitted] \n          vendor.js            345 KiB   vendor  &#91;emitted] vendor \nEntrypoint bundle = runtime.js vendor.js bundle.js \n&#91;../$$_lazy_route_resource lazy recursive] ../$$_lazy_route_resource lazy \nnamespace object 160 bytes {bundle} &#91;built] &#91;./app.css] 1.18 KiB {bundle} &#91;built] &#91;./app/app-routing.module.ts] 688 bytes {bundle} &#91;built] \n&#91;./app/app.component.html] 62 bytes {bundle} &#91;built] \n&#91;./app/app.component.ts] 354 bytes {bundle} &#91;built] \n&#91;./app/app.module.ts] 3.22 KiB {bundle} &#91;built] \n&#91;./app/home/home.module.ts] 710 bytes {0} &#91;built] \n&#91;./main.ts] 1.84 KiB {bundle} &#91;built] \n&#91;@angular/core] external \"@angular/core\" 42 bytes {bundle} &#91;built] &#91;nativescript-angular/nativescript.module] external \"nativescript-\nangular/nativescript.module\" 42 bytes {bundle} &#91;built] \n&#91;nativescript-angular/platform] external \"nativescript-angular/platform\" 42 \nbytes {bundle} &#91;built] &#91;tns-core-modules/application] external \"tns-core-\nmodules/application\" 42 bytes {bundle} &#91;built] \n&#91;tns-core-modules/bundle-entry-points] external \"tns-core-modules/bundle-entry-points\" 42 \nbytes {bundle} &#91;built] \n&#91;tns-core-modules/ui/frame] external \"tns-core-\nmodules/ui/frame\" 42 bytes {bundle} &#91;built] \n&#91;tns-core-modules/ui/frame/activity] external \"tns-core-\nmodules/ui/frame/activity\" 42 bytes {bundle} &#91;built] \n   + 15 hidden modules Webpack compilation complete. Watching for file changes. \nWebpack build done! \nProject successfully prepared (android) \nStart sending initial files for device Bala Honor Holly (ff5e8622-7a01-4f9c-\nb02f-3dc6d4ee0e1f). \nSuccessfully sent initial files for device Bala Honor Holly (ff5e8622-7a01-4f9c-b02f-3dc6d4ee0e1f). \nLOG from device Bala Honor Holly: HMR: Hot Module Replacement Enabled. Waiting for signal. \nLOG from device Bala Honor Holly: Angular is running in the development mode. \nCall enableProdMode() to enable the production mode.\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>After scanning, you should see your BlankNgApp on your device. It is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/blankngapp.jpg\" alt=\"BlankNgApp\"/></figure>\n\n\n\n<h2>Run your app on device</h2>\n\n\n\n<p>If you want to test the connected device in your application, you can verify it using the below syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>'tns device &lt;Platform> --available-devices'\n</code></pre>\n\n\n\n<p>After that, you can execute your app using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntns run\n</code></pre>\n\n\n\n<p>The above command is used to build your apps locally and install on Andriod or iOS devices. If you want to run your app on an Android simulator, then type the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns run android\n</code></pre>\n\n\n\n<p>For iOS device, you can follow the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns run ios\n</code></pre>\n\n\n\n<p>This will initialize the app in an Android/iOS device. We will discuss this more in detail in the upcoming chapters.</p>\n\n\n\n<h2>LiveSync</h2>\n\n\n\n<p>NativeScript provides real time syncing of changes in the application to the preview application. Let us open the project using any of your favourite editor (Visual Studio Code would be the ideal choice for better visualization). Let us add some changes in our code and see how that will be detected in LiveSync.</p>\n\n\n\n<p>Now open the file app.css and it will have below content −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@import \"~@nativescript/theme/css/core.css\"; \n@import \"~@nativescript/theme/css/blue.css\"; \n/* Place any CSS rules you want to apply on both iOS and Android here. \nThis is where the vast majority of your CSS code goes. */</code></pre>\n\n\n\n<p>Here, import statement tells the color scheme of our app. Let’s change the blue color scheme to the&nbsp;<strong>brown</strong>&nbsp;color scheme as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@import \"~@nativescript/theme/css/core.css\"; \n@import \"~@nativescript/theme/css/brown.css\"; \n/* Place any CSS rules you want to apply on both iOS and Android here. \nThis is where the vast majority of your CSS code goes. */\n</code></pre>\n\n\n\n<p>The application in our device refreshes and you should see a brown color ActionBar as shown below −</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the BlankNgApp Home Page &#8211; Brown Theme.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/brown_theme.jpg\" alt=\"Brown Theme\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Let us create a simple bare bone application to understand the work flow of the NativeScript application. Creating the Application Let us learn how to create simple application using NativeScript CLI, tns. tns provides a command create to used to create a new project in NativeScript. The basic syntax to create a new application is [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5645"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5645"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5645/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5645"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5645"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5645"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5646,"date":"2020-12-18T10:27:43","date_gmt":"2020-12-18T10:27:43","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3381"},"modified":"2020-12-18T10:27:43","modified_gmt":"2020-12-18T10:27:43","slug":"templates-4","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/templates-4/","title":{"rendered":"Templates"},"content":{"rendered":"\n<p>NativeScript provides lot of readymade templates to create simple blank but fully functional application to complex Tab based application.</p>\n\n\n\n<h2>Using template</h2>\n\n\n\n<p>As learned earlier, new application can be created using&nbsp;<strong>create</strong>&nbsp;subcommand of tns command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns create &lt;app-name> --template &lt;tns-template-name>\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p><strong><em>tns-template-name</em></strong>&nbsp;is the name of the template.</p>\n\n\n\n<p>If you want to create a template with one page and without any custom styles using JavaScript, use the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns create &lt;app-name> --template tns-template-blank\n</code></pre>\n\n\n\n<p>The above same template can be created using TypeScript as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns create &lt;app-name> --template tns-template-blank-ts\n</code></pre>\n\n\n\n<h2>Navigation Template</h2>\n\n\n\n<p>Navigation template is used to create moderate to complex application. It comes with pre-configured&nbsp;<strong><em>SideDrawer</em></strong>&nbsp;component with several pages.&nbsp;<strong><em>SideDrawer</em></strong>&nbsp;component contains a hidden view for navigation UI or common settings. Use the below command to create navigation based application −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntns create &lt;app-name> --template tns-template-drawer-navigation\n</code></pre>\n\n\n\n<h2>Tab Navigation Template</h2>\n\n\n\n<p>Tab navigation template is used to create tab based application. It comes with pre-configured&nbsp;<strong>TabView</strong>&nbsp;component with several pages. Use below command to create tab based application −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntns create &lt;app-name> --template tns-template-tab-navigation\n</code></pre>\n\n\n\n<h2>Master-Detail Template</h2>\n\n\n\n<p>Master-Detail template is used to create list based application along with detail page for every item in the list.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns create &lt;app-name> --template tns-template-master-detail\n</code></pre>\n\n\n\n<h2>Custom Template</h2>\n\n\n\n<p>To create simple customized template, we need to clone blank templates. As you know already, NativeScript supports JavaScript, TypeScript, Angular and Vue.js templates so you can choose any language and create your customized one.</p>\n\n\n\n<p>For example, clone simple and customized template from git repository using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>git clone https://github.com/NativeScript/template-blank-ts.git\n</code></pre>\n\n\n\n<p>Now, it will create mobile app structure so you can do any changes and run your android/iOS device. This structure based on list of guidelines. Let us see the guidelines in brief.</p>\n\n\n\n<h3>Structure</h3>\n\n\n\n<p>Your customized template must meet the following requirements −</p>\n\n\n\n<ul><li>Don’t place your code inside your app root folder.</li><li>Create a separate folder and add feature area inside.</li><li>Page, View models and service should be placed in feature area. This helps to create neat and clean code.</li><li>Create page folder and place inside&nbsp;<em>.ts, .xml, .scss/css, etc.</em>, files.</li></ul>\n\n\n\n<h3>package.json</h3>\n\n\n\n<p>Place package.json file in the root folder of your app template. Provide a value for the name property using the format −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"name\": \"tns-template-blank-ts\", \n   displayName\": \"template-blank\", \n}</code></pre>\n\n\n\n<p>Assign a value for the version property. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"version\": \"3.2.1\",\n</code></pre>\n\n\n\n<p>Assign a value for the main property specifying the primary entry point to your app. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"main\": \"app.js\",\n</code></pre>\n\n\n\n<p>Assign a value for the android property. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"android\": { \n   \"v8Flags\": \"--expose_gc\" \n},</code></pre>\n\n\n\n<p>The repository property should be specified inside your code as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"repository\": { \n   \"type\": \"git\", \n   \"url\": \"https://github.com/NativeScript/template-master-detail-ts\" \n},</code></pre>\n\n\n\n<h3>Style</h3>\n\n\n\n<p>Import styles and themes in your app template using the below syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@import '~nativescript-theme-core/scss/light';</code></pre>\n\n\n\n<p>We can also assign custom background color using the below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/* Colors */ \n$background: #fff; \n$primary: lighten(#000, 13%);</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>NativeScript provides lot of readymade templates to create simple blank but fully functional application to complex Tab based application. Using template As learned earlier, new application can be created using&nbsp;create&nbsp;subcommand of tns command. Here, tns-template-name&nbsp;is the name of the template. If you want to create a template with one page and without any custom styles [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5646"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5646"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5646/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5646"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5646"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5646"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5647,"date":"2020-12-18T10:31:01","date_gmt":"2020-12-18T10:31:01","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3383"},"modified":"2020-12-18T10:31:01","modified_gmt":"2020-12-18T10:31:01","slug":"widgets","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/widgets/","title":{"rendered":"Widgets"},"content":{"rendered":"\n<p>NativeScript provides a large set of user interface components and are called as ‘widgets’. Each widget does a special task and comes with a set of methods. Let’s understand NativeScript widgets in detail in this section.</p>\n\n\n\n<h2>Button</h2>\n\n\n\n<p>Button is a component to execute tap event action. When a user taps the button it performs the corresponding actions. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n&lt;Button text=\"Click here!\" tap=\"onTap\">&lt;/Button>\n</code></pre>\n\n\n\n<p>Let us add the button in our BlankNgApp as below −</p>\n\n\n\n<h3>Step 1</h3>\n\n\n\n<p>Open the&nbsp;<strong>src\\app\\home\\home.component.html.</strong>&nbsp;This is the UI design page of our home component.</p>\n\n\n\n<h3>Step 2</h3>\n\n\n\n<p>Add a button inside the&nbsp;<strong><em>GirdLayout</em></strong>&nbsp;component. The complete code is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n&lt;GridLayout> \n   &lt;button text=\"Click Here!\">&lt;/button> \n&lt;/GridLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of the button −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/girdlayout.jpg\" alt=\"GirdLayout\"/></figure>\n\n\n\n<h3>Step 3</h3>\n\n\n\n<p>We can style the button using CSS as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n&lt;GridLayout> \n   &lt;button text=\"Click Here!\" class=\"-primary\">&lt;/button> \n&lt;/GridLayout></code></pre>\n\n\n\n<p>Here, −<strong>primary</strong>&nbsp;class is used to represent the primary button.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of&nbsp;<strong><em>ButtonPrimary</em></strong>&nbsp;−</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/buttonprimary.jpg\" alt=\"ButtonPrimary\"/></figure>\n\n\n\n<h3>Step 4</h3>\n\n\n\n<p>NativeScript provides formatted option to provide custom icons in the button. The sample code is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;GridLayout> \n   &lt;Button class=\"-primary\"> \n      &lt;FormattedString> \n         &lt;Span text=\"&amp;#xf099;\" class=\"fa\">&lt;/Span> \n         &lt;Span text=\" Button.-primary with icon\">&lt;/Span> \n      &lt;/FormattedString> \n   &lt;/Button> \n&lt;/GridLayout>\n.fa {\n   font-family: \"FontAwesome\", \"fontawesome-webfont\";\n}</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>&amp;#xf099 specifies the location of the icon in the font, FontAwesome. Download the latest Font Awesome font and place the fontawesome-webfont.ttf in src\\fonts folder.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of&nbsp;<strong><em>ButtonPrimary</em></strong>&nbsp;−</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/fontawesome.jpg\" alt=\"FontAwesome\"/></figure>\n\n\n\n<h3>Step 5</h3>\n\n\n\n<p>Rounded button can be created using the below syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Button text=\"Button.-primary.-rounded-sm\" class=\"-primary -rounded-sm\">&lt;/Button>\n</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of ButtonPrimary −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/home.jpg\" alt=\"Home\"/></figure>\n\n\n\n<h2>Label</h2>\n\n\n\n<p><em>Label component</em>&nbsp;is used to display static text. Change the home page as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;GridLayout> \n   &lt;Label text=\"NativeScript is an open source framework for creating native iOS and Android apps in TypeScript or JavaScript.\" textWrap=\"true\">\n   &lt;/Label> \n&lt;/GridLayout></code></pre>\n\n\n\n<p>Here, textWrap wraps the content of the label, if the label extends beyond the screen width.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of Label −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/label.jpg\" alt=\"Label\"/></figure>\n\n\n\n<h2>TextField</h2>\n\n\n\n<p><em>TextField component</em>&nbsp;is used to get information from user. Let us change our home page as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;GridLayout> \n   &lt;TextField hint=\"Username\" \n      color=\"lightblue\" \n      backgroundColor=\"lightyellow\" \n      height=\"75px\">\n   &lt;/TextField> \n&lt;/GridLayout></code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>color represent text color</li><li>backgroundColor represent background of the text box</li><li>height represent the height of the text box</li></ul>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of Text Field −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/text_field.jpg\" alt=\"Text Field\"/></figure>\n\n\n\n<h2>TextView</h2>\n\n\n\n<p><em>TextView Component</em>&nbsp;is used to get multi-line text content from the user. Let us change our home page as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;GridLayout> \n   &lt;TextView loaded=\"onTextViewLoaded\" hint=\"Enter text\" returnKeyType=\"done\" autocorrect=\"false\" maxLength=\"100\"> \n   &lt;/TextView> \n&lt;/GridLayout></code></pre>\n\n\n\n<p>Here, maxLength represent maximum length accepted by&nbsp;<em>TextView</em>.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of TextView −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/textview.jpg\" alt=\"TextView\"/></figure>\n\n\n\n<h2>SearchBar</h2>\n\n\n\n<p>This component is used for search any queries or submit any request. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;StackLayout> \n   &lt;SearchBar id=\"bar\" hint=\"click here to search ...\">&lt;/SearchBar> \n&lt;StackLayout></code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/searchbar.jpg\" alt=\"SearchBar\"/></figure>\n\n\n\n<p>We can apply styles −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;StackLayout> \n   &lt;SearchBar id=\"bar\" hint=\"click here to search ...\" color=\"green\" backgroundColor=\"green\">&lt;/SearchBar> \n&lt;/StackLayout></code></pre>\n\n\n\n<p>Below is the output of SearchBarStyle −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/searchbarstyle.jpg\" alt=\"SearchBarstyle\"/></figure>\n\n\n\n<h2>Switch</h2>\n\n\n\n<p>Switch is based on toggle to choose between options. Default state is false. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;StackLayout> \n   &lt;Switch checked=\"false\" loaded=\"onSwitchLoaded\">&lt;/Switch> \n&lt;/StackLayout></code></pre>\n\n\n\n<p>The output for the above program is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/program.jpg\" alt=\"Program\"/></figure>\n\n\n\n<h2>Slider</h2>\n\n\n\n<p>Slider is a sliding component to pick a numeric range. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Slider value=\"30\" minValue=\"0\" maxValue=\"50\" loaded=\"onSliderLoaded\">&lt;/Slider></code></pre>\n\n\n\n<p>The output for the above program is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/slider.jpg\" alt=\"Slider\"/></figure>\n\n\n\n<h2>Progress</h2>\n\n\n\n<p>Progress widget indicates progress in an operation. Current progress is represented as bar. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;StackLayout verticalAlign=\"center\" height=\"50\"> \n   &lt;Progress value=\"90\" maxValue=\"100\" backgroundColor=\"red\" color=\"green\" row=\"0\">&lt;/Progress>\n&lt;/StackLayout></code></pre>\n\n\n\n<p>Below is the output of Progress widget −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/progress.jpg\" alt=\"Progress\"/></figure>\n\n\n\n<h2>ActivityIndicator</h2>\n\n\n\n<p>ActivityIndicator shows a task in a progress. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;StackLayout verticalAlign=\"center\" height=\"50\"> \n   &lt;ActivityIndicator busy=\"true\" color=\"red\" width=\"50\" \n   height=\"50\">&lt;/ActivityIndicator> \n&lt;/StackLayout></code></pre>\n\n\n\n<p>Below is the output for ActivityIndicator −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/activityindicator.jpg\" alt=\"ActivityIndicator\"/></figure>\n\n\n\n<h2>Image</h2>\n\n\n\n<p>Image widget is used to display an image. It can be loaded using ‘ImageSource’ url. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;StackLayout class=\"m-15\" backgroundColor=\"lightgray\">\n   &lt;Image src=\"~/images/logo.png\" stretch=\"aspectFill\">&lt;/Image> \n&lt;/StackLayout></code></pre>\n\n\n\n<p>The output for Image Widget is as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/image.jpg\" alt=\"Image\"/></figure>\n\n\n\n<h2>WebView</h2>\n\n\n\n<p>WebView shows web pages. Web pages can be loaded using URL. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;WebView row=\"1\" loaded=\"onWebViewLoaded\" id=\"myWebView\" src=\"http://www.google.com\">&lt;/WebView></code></pre>\n\n\n\n<p>The output for the above code is as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/webview.jpg\" alt=\"WebView\"/></figure>\n\n\n\n<h2>DatePicker</h2>\n\n\n\n<p>DatePicker component is used to pick date. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;StackLayout class=\"m-15\" backgroundColor=\"lightgray\"> \n   &lt;DatePicker year=\"1980\" month=\"4\" day=\"20\" verticalAlignment=\"center\">&lt;/DatePicker> \n&lt;/StackLayout></code></pre>\n\n\n\n<p>The output of DatePicker component is as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/datepicker.jpg\" alt=\"DatePicker\"/></figure>\n\n\n\n<h2>TimePicker</h2>\n\n\n\n<p>TimePicker component is used to pick the time. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;StackLayout class=\"m-15\" backgroundColor=\"lightgray\"> \n&lt;TimePicker hour=\"9\" \n   minute=\"25\" \n   maxHour=\"23\" \n   maxMinute=\"59\" \n   minuteInterval=\"5\"> \n&lt;/TimePicker> \n&lt;/StackLayout></code></pre>\n\n\n\n<p>Below is the output of TimePicker component −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/timepicker.jpg\" alt=\"TimePicker\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>NativeScript provides a large set of user interface components and are called as ‘widgets’. Each widget does a special task and comes with a set of methods. Let’s understand NativeScript widgets in detail in this section. Button Button is a component to execute tap event action. When a user taps the button it performs the [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5647"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5647"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5647/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5647"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5647"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5647"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5648,"date":"2020-12-18T10:33:28","date_gmt":"2020-12-18T10:33:28","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3385"},"modified":"2020-12-18T10:33:28","modified_gmt":"2020-12-18T10:33:28","slug":"layout-containers","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/layout-containers/","title":{"rendered":"Layout Containers"},"content":{"rendered":"\n<p>NativeScript provides collection of container component for the sole purpose of laying out UI widget component. Layout containers act as the parent component and can have one or more child components. All child components of a layout container can be arranged based on the technique provided by its parent layout container.</p>\n\n\n\n<p>NativeScript supports six layouts containers and they are as follows −</p>\n\n\n\n<ul><li>Absolute layout container</li><li>Dock layout container</li><li>Grid layout container</li><li>Stack layout container</li><li>Wrap layout container</li><li>FlexBox layout container</li></ul>\n\n\n\n<p>Let us learn all the layout container concepts in detail in this chapter.</p>\n\n\n\n<h2>Absolute Layout</h2>\n\n\n\n<p><strong>AbsoluteLayout</strong>&nbsp;container is the simplest layout container in NativeScript. AbsoluteLayout does not enforce any constraint on its children and will place its children inside it using 2-dimensional coordinate system with top-left corner as origin.</p>\n\n\n\n<p>AbsoluteLayout uses four properties of its children to position them and they are as follows −</p>\n\n\n\n<p><strong>top</strong>&nbsp;− Defines the placement of the child from origin moving downwards in y direction.</p>\n\n\n\n<p><strong>left</strong>&nbsp;− Defines the placement of the child from origin moving sidewards in x direction.</p>\n\n\n\n<p><strong>width</strong>&nbsp;− Defines the width of the child.</p>\n\n\n\n<p><strong>height</strong>&nbsp;− Defines the height of the child.</p>\n\n\n\n<p>Let us add AbsoluteLayout container in the home page of our application as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n\n&lt;AbsoluteLayout width=\"200\" height=\"300\" backgroundColor=\"blue\"> \n   &lt;Label text=\"Top Left\" left=\"0\" top=\"0\" width=\"100\" height=\"150\" backgroundColor=\"green\">\n   &lt;/Label> \n   &lt;Label text=\"Top Right\" left=\"100\" top=\"0\" width=\"100\" height=\"150\" backgroundColor=\"blue\">&lt;/Label> \n   &lt;Label text=\"Bottom Left\" left=\"0\" top=\"150\" width=\"100\" height=\"150\" backgroundColor=\"orange\">\n   &lt;/Label>\n   &lt;Label text=\"Bottom Right\" left=\"100\" top=\"150\" width=\"100\" height=\"150\" backgroundColor=\"red\">&lt;/Label> \n&lt;/AbsoluteLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The output of the AbsoluteLayout is as given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/absolutelayout.jpg\" alt=\"AbsoluteLayout\"/></figure>\n\n\n\n<h2>DockLayout</h2>\n\n\n\n<p><strong>Docklayout</strong>&nbsp;container component enables its children to dock inside it. Each side of the container (top, bottom, left, right) can dock a child component. DockLayout container uses the dock property of its children to correctly dock them.</p>\n\n\n\n<p>The possible values of the dock property is as follows −</p>\n\n\n\n<p><strong>top</strong>&nbsp;− Layout container dock the child component at the top corner.</p>\n\n\n\n<p><strong>bottom</strong>&nbsp;− Layout container dock the child component at the bottom corner.</p>\n\n\n\n<p><strong>left</strong>&nbsp;− Layout container dock the child component at the left corner.</p>\n\n\n\n<p><strong>right</strong>&nbsp;− Layout container dock the child component at the right corner.</p>\n\n\n\n<p>By default,&nbsp;<strong>DockLayout</strong>&nbsp;container docks its last child component. It can override by setting its stretchLastChild property to zero.</p>\n\n\n\n<p>Let us add&nbsp;<strong>DockLayout</strong>&nbsp;container in the home page of our application as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n&lt;DockLayout width=\"250\" height=\"300\" backgroundColor=\"blue\" stretchLastChild=\"false\"> \n   &lt;Label text=\"left\" dock=\"left\" width=\"50\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"top\" dock=\"top\" height=\"50\" backgroundColor=\"orange\">&lt;/Label> \n   &lt;Label text=\"right\" dock=\"right\" width=\"50\" backgroundColor=\"red\">&lt;/Label&lt; \n   &lt;Label text=\"bottom\" dock=\"bottom\" height=\"50\" \n   backgroundColor=\"orange\">&lt;/Label> \n&lt;/DockLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output for DockLayout −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/docklayout.jpg\" alt=\"DockLayout\"/></figure>\n\n\n\n<h2>GridLayout</h2>\n\n\n\n<p>GridLayout container component is one of the complex layout container and arranges child elements in tabular format with rows and columns. By default, it has one row and one column. It has the following properties −</p>\n\n\n\n<p><strong>columns</strong>&nbsp;− Used to represent the default width of each column separated by ,. The possible values are number, * and auto keyword.</p>\n\n\n\n<p>Where,</p>\n\n\n\n<ul><li>number indicates an absolute column width.</li><li>indicates the width of a column relative to other columns. It can be preceded by number to indicate how many times the column width should be relative to other column. For example, 2* indicate the width the column should be 2 times the width of the smallest column.</li><li>auto indicates the width of the column as wide as its widest child.</li></ul>\n\n\n\n<p>For example, *,2* means two columns and second will be twice the size of first column.</p>\n\n\n\n<p><strong>rows&nbsp;</strong>− Used to represent the default height of each row separated by ,. Value representation is similar to columns.</p>\n\n\n\n<p>GridLayout uses the below specified properties of its children to layout them −</p>\n\n\n\n<p><strong>row</strong>&nbsp;− Row number</p>\n\n\n\n<p>col − Column number</p>\n\n\n\n<p><strong>rowSpan</strong>&nbsp;− total number of rows that child content spans within a layout.</p>\n\n\n\n<p><strong>colSpan</strong>&nbsp;− total number of columns that child content spans within a layout.</p>\n\n\n\n<p>Let us add GridLayout container in the home page of our application as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n&lt;GridLayout columns=\"50, auto, *\" rows=\"50, auto, *\" width=\"210\" height=\"210\"\n   backgroundColor=\"blue\"> \n   &lt;Label text=\"Row: 0; Column 0\" row=\"0\" col=\"0\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Row: 0; Column 1\" row=\"0\" col=\"1\" colSpan=\"1\" backgroundColor=\"brown\">&lt;/Label> \n   &lt;Label text=\"Row: 1; Column 0\" row=\"1\" col=\"0\" rowSpan=\"1\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Row: 1; Column 1\" row=\"1\" col=\"1\" backgroundColor=\"orange\">&lt;/Label> \n&lt;/GridLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output for GridLayout −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/gridlayout.jpg\" alt=\"GridLayout\"/></figure>\n\n\n\n<h2>StackLayout</h2>\n\n\n\n<p>StackLayout organizes its children in a one-dimensional line either horizontally or vertically. It can be sized based on the space in the layout using layout options. It has orientation property that can be used to specify direction, horizontal or vertical.</p>\n\n\n\n<p>Let us add StackLayout container in the home page of our application as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n&lt;StackLayout orientation=\"vertical\" width=\"200\" height=\"200\" backgroundColor=\"blue\"> \n   &lt;Label text=\"Label1\" width=\"50\" height=\"50\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Label2\" width=\"50\" height=\"50\" backgroundColor=\"brown\">&lt;/Label> \n   &lt;Label text=\"Label3\" width=\"50\" height=\"50\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Label4\" width=\"50\" height=\"50\" backgroundColor=\"orange\">&lt;/Label> \n&lt;/StackLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The output for StackLayout is as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/stacklayout.jpg\" alt=\"StackLayout\"/></figure>\n\n\n\n<h2>WrapLayout</h2>\n\n\n\n<p>WrapLayout is used to wrap contents on new rows or columns.</p>\n\n\n\n<p>It has the following three properties −</p>\n\n\n\n<p><strong>orientation</strong>&nbsp;− display either horizontally or vertically.</p>\n\n\n\n<p><strong>itemWidth</strong>&nbsp;− layout width for each child.</p>\n\n\n\n<p><strong>itemHeight</strong>&nbsp;− layout height for each child.</p>\n\n\n\n<p>Let us add WrapLayout container in the home page of our application as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> &lt;WrapLayout orientation=\"horizontal\" width=\"200\" height=\"200\" backgroundColor=\"blue\">\n   &lt;Label text=\"Label1\" width=\"70\" height=\"70\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Label2\" width=\"70\" height=\"70\" backgroundColor=\"brown\">&lt;/Label \n   &lt;Label text=\"Label3\" width=\"70\" height=\"70\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Label4\" width=\"70\" height=\"70\" backgroundColor=\"orange\">&lt;/Label> \n&lt;/WrapLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/wraplayout.jpg\" alt=\"WrapaLayout\"/></figure>\n\n\n\n<h2>Flexbox Layout</h2>\n\n\n\n<p>FlexboxLayout container component is one of the advanced layout container. It provides option to render simple layout to very complex and sophisticated layouts. It is based on the CSS Flexbox.</p>\n\n\n\n<p>FlexboxLayout component has lot of properties and they are as follows −</p>\n\n\n\n<h2>flexDirection</h2>\n\n\n\n<p>It represents the direction in which the child components are arranged. The possible values of flexDirection are as follows −</p>\n\n\n\n<p><strong>row</strong>&nbsp;− Child components are arranged side by side.</p>\n\n\n\n<p><strong>row-reverse</strong>&nbsp;− Child components are arranged side by side but in reverse direction.</p>\n\n\n\n<p><strong>column</strong>&nbsp;− Child components are arranged one below the another.</p>\n\n\n\n<p><strong>column-reverse</strong>&nbsp;− Child components are arranged one below the another but in reverse direction.</p>\n\n\n\n<p>Let us add FlexLayout container in the home page of our application as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n&lt;FlexboxLayout flexDirection=\"row\"> \n   &lt;Label text=\"First Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Second Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Third Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Fourth Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Fifth Item\" backgroundColor=\"red\">&lt;/Label> \n&lt;/FlexboxLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of FlexLayout – Row −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/flexlayout.jpg\" alt=\"FlexLayout\"/></figure>\n\n\n\n<p>Now, let us change the flexDirection value from row to row-reverse and check how it affects the layout.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> &lt;FlexboxLayout flexDirection=\"row-reverse\"> \n   &lt;Label text=\"First Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Second Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Third Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Fourth Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Fifth Item\" backgroundColor=\"red\">&lt;/Label> \n&lt;/FlexboxLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of Flex Layout &#8211; Row Reverse −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/flexlayout1.jpg\" alt=\"FlexLayout1\"/></figure>\n\n\n\n<p>Let us change the flexDirection value from row-reverse to column and check how it affects the layout.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n&lt;FlexboxLayout flexDirection=\"column\"> \n   &lt;Label text=\"First Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Second Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Third Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Fourth Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Fifth Item\" backgroundColor=\"red\">&lt;/Label> \n&lt;/FlexboxLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>The output for FlexLayout – Column is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/flexlayout_column.jpg\" alt=\"FlexLayout Column\"/></figure>\n\n\n\n<p>Let us change the flexDirection value from column to column-reverse and check how it affects the layout.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar> \n&lt;FlexboxLayout flexDirection=\"column-reverse\"> \n   &lt;Label text=\"First Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Second Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Third Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Fourth Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Fifth Item\" backgroundColor=\"red\">&lt;/Label> \n&lt;/FlexboxLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of FlexLayout – Column Reverse −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/column_reverse.jpg\" alt=\"Column Reverse\"/></figure>\n\n\n\n<h3>flexWrap</h3>\n\n\n\n<p>It represents whether the child components will be rendered in a single row/column or flow into multiple rows by wraping in the direction set by flexDirection.</p>\n\n\n\n<p>The possible values are as follows −</p>\n\n\n\n<p><strong>wrap</strong>&nbsp;− Wraps the children components, if no space is available in the given direction (flexDirection).</p>\n\n\n\n<p><strong>wrap-reverse</strong>&nbsp;− Same as wrap except the component flow in opposite direction.</p>\n\n\n\n<p>Let us add the flexWrap property and then set its value as wrap. Also add three more children as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&amp;tl;/ActionBar> \n&lt;FlexboxLayout flexDirection=\"row\" flexWrap=\"wrap\"> \n   &lt;Label text=\"First Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Second Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Third Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Fourth Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Fifth Item\" backgroundColor=\"red\">&lt;/Label>\n   &lt;Label text=\"Sixth Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Seventh Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Eighth Item\" backgroundColor=\"green\">&lt;/Label> \n&lt;/FlexboxLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output for flexWrap −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/flexwrap.jpg\" alt=\"FlexWrap\"/></figure>\n\n\n\n<h3>JustifyContent</h3>\n\n\n\n<p>It represents how child components are arranged with respect to each other and the overall structure. It has three properties as specified below −</p>\n\n\n\n<p><strong>flex-end</strong>&nbsp;− It packs the child component toward the end line.</p>\n\n\n\n<p><strong>space-between</strong>&nbsp;− It packs the child component by evenly distributing in line.</p>\n\n\n\n<p><strong>space-around</strong>&nbsp;− Similar to space-between except it packs the child component by evenly distributing in line as well as equal space around them.</p>\n\n\n\n<p>Let us add justifyContent as well and check how it behaves −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label>\n&lt;/ActionBar> \n&lt;FlexboxLayout flexDirection=\"row\" flexWrap=\"wrap\" justifyContent=\"space-around\"> \n   &lt;Label text=\"First Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Second Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Third Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Fourth Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Fifth Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Sixth Item\" backgroundColor=\"green\">&lt;/Label> \n   &lt;Label text=\"Seventh Item\" backgroundColor=\"red\">&lt;/Label> \n   &lt;Label text=\"Eighth Item\" backgroundColor=\"green\">&lt;/Label> \n&lt;/FlexboxLayout></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Below is the output of Flex Layout – JustifyContent −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/justifycontent.jpg\" alt=\"JustifyContent\"/></figure>\n\n\n\n<p>FlexLayout container provides two more properties for its children to specify the order and ability to shrink. They are as follows −</p>\n\n\n\n<p><strong>order</strong>&nbsp;− It determines that order in which the children of the FlexLayout container will be rendered.</p>\n\n\n\n<p><strong>flexShrink</strong>&nbsp;− It determines the ability of the children to shrink to level 0.</p>\n","protected":false},"excerpt":{"rendered":"<p>NativeScript provides collection of container component for the sole purpose of laying out UI widget component. Layout containers act as the parent component and can have one or more child components. All child components of a layout container can be arranged based on the technique provided by its parent layout container. NativeScript supports six layouts [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5648"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5648"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5648/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5648"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5648"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5648"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5649,"date":"2020-12-18T10:35:04","date_gmt":"2020-12-18T10:35:04","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3387"},"modified":"2020-12-18T10:35:04","modified_gmt":"2020-12-18T10:35:04","slug":"navigation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/navigation/","title":{"rendered":"Navigation"},"content":{"rendered":"\n<p>Navigation enables users to quickly swipe in to their desired screen or to navigate through an app or to perform a particular action. Navigation component helps you implement navigation using simple button clicks to more complex patterns.</p>\n\n\n\n<p>Navigation differ substantially between core and angular version of NativeScript. While core framework navigation is foundation for navigation process, NativeScript’s Angular model adopts the core navigation concept and extends it to make it compatible with Angular framework.</p>\n\n\n\n<p>Let us see both core navigation concept and angular adoption of navigation in this chapter.</p>\n\n\n\n<h2>Core Concepts</h2>\n\n\n\n<p>Let us understand how the navigation works in core NativeScript in this chapter.</p>\n\n\n\n<p>In NativeScript, navigation is split into four different categories based on the direction it applies as specified below −</p>\n\n\n\n<ul><li>Forward navigation</li><li>Backward navigation</li><li>Lateral navigation</li><li>Bottom navigation</li></ul>\n\n\n\n<h3>Forward Navigation</h3>\n\n\n\n<p><em>Forward Navigation</em>&nbsp;refers to navigating users to the screen in the next level of hierarchy. It is based on two NativeScript components,&nbsp;<strong>Frame</strong>&nbsp;and&nbsp;<strong>Page.</strong></p>\n\n\n\n<p><strong>Frame</strong></p>\n\n\n\n<p>Frame is the root level component for navigation. It is not a visible container but acts as a container for transitions between pages.</p>\n\n\n\n<p>A simple example is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Frame id=\"featured\" defaultPage=\"featured-page\" />\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>Frame navigates to (or loads) the featured-page page component and renders it.</p>\n\n\n\n<p><strong>Page</strong></p>\n\n\n\n<p>Page is next to Frame component and it acts as a container for UI component. Simple example is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Page loaded=\"onPageLoaded\"> \n   &lt;ActionBar title=\"Item\" class=\"action-bar\">&lt;/ActionBar>\n   &lt;AbsoluteLayout> \n      &lt;Label text=\"Label\"/&lt; \n      &lt;Button text=\"navigate('another-page')\" tap=\"onTap\"/> \n   &lt;/AbsoluteLayout> \n&lt;/Page></code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>Initially, Page loads all the UI component of the screen and renders it.</li><li>When user clicks the button, it will navigate the user to&nbsp;<strong>another-page</strong>&nbsp;page.</li></ul>\n\n\n\n<h3>Backward Navigation</h3>\n\n\n\n<p>Backward navigation method enables backward movement through screens within one app or across different apps. It is the opposite direction of forward navigation. Simple goBack() method is used to navigate back to the previous page.</p>\n\n\n\n<p>It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Page class=\"page\" loaded=\"onPageLoaded\"> \n   &lt;ActionBar title=\"Item\" class=\"action-bar\">&lt;/ActionBar> \n   &lt;StackLayout class=\"home-panel\"> \n      &lt;Button class=\"btn btn-primary\" text=\"Back\" tap=\"goBack\"/> \n   &lt;/StackLayout> \n&lt;/Page></code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p><strong>goBack()</strong>&nbsp;method will be triggered when user taps the button.&nbsp;<strong>goBack()</strong>&nbsp;navigates the users to the previous page, if one is available.</p>\n\n\n\n<h3>Lateral Navigation</h3>\n\n\n\n<p>Lateral navigation refers to the navigation between screens at same levels of hierarchy. It is based on hub pattern. It is enabled through specific navigation components such as BottomNavigation, Tabs, TabView, SideDrawer and Modal View.</p>\n\n\n\n<p>A simple example is defined as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Page class=\"page\" xmlns=\"http://www.nativescript.org/tns.xsd\"> \n   &lt;ActionBar title=\"Hub\" class=\"action-bar\">&lt;/ActionBar> \n   &lt;StackLayout class=\"home-panel\"> \n      &lt;Button class=\"btn btn-primary\" text=\"navigate('featured-page')\" tap=\"navigateToFeatured\" /> \n      &lt;Button class=\"btn btn-primary\" text=\"navigate('search-page')\" tap=\"navigateToSearch\" />\n   &lt;/StackLayout> \n&lt;/Page></code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li><strong>navigateToFeatured</strong>&nbsp;function uses navigate() method to navigate the user to featured page.</li><li>Similarly,&nbsp;<strong>navigateToSearch</strong>&nbsp;function will navigate the user to search page.</li></ul>\n\n\n\n<p>The hub page can also be reached using navigate method available in page screen and one can move out of hub page using goBack() method.</p>\n\n\n\n<p>A simple example is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Page class=\"page\"> \n   &lt;ActionBar title=\"Item\" class=\"action-bar\">&lt;/ActionBar> \n   &lt;StackLayout class=\"home-panel\"> \n      &lt;Button class=\"btn btn-primary\" text=\"navigate('hub-page')\" tap=\"navigateToHub\" /> \n      &lt;Button class=\"btn btn-primary\" text=\"goBack()\" tap=\"goBack\" /> \n   &lt;/StackLayout> \n&lt;/Page></code></pre>\n\n\n\n<h3>Bottom and Tab Navigation</h3>\n\n\n\n<p>The most common style of navigation in mobile apps is tab-based navigation. The Tab Navigation is arranged at the bottom of the screen or on the top below the header. It is achieved by using&nbsp;<em>TabView</em>&nbsp;and&nbsp;<em>BottomNavigation</em>&nbsp;component.</p>\n\n\n\n<h2>Angular based navigation</h2>\n\n\n\n<p>NativeScript extends its navigation concept to accommodate the Angular routing concept. NativeScript provides a new module, NativeScriptRouterModule by extending Angular RouterModule.</p>\n\n\n\n<p>NativeScript angular navigation concept can be categorized into section as below −</p>\n\n\n\n<ul><li>page-router-outlet tag</li><li>nsRouterLink attractive</li><li><em>RouterExtension</em>&nbsp;class</li><li>Custom&nbsp;<em>RouterReuseStrategy</em></li></ul>\n\n\n\n<p>Let us learn all the above angular navigation in this section.</p>\n\n\n\n<h3>Page Router Outlet</h3>\n\n\n\n<p>As learned earlier, page-router-outlet is the replacement of Angular’s router-outlet. page-router-outlet wraps the Frame and Page strategy of Nativescript core navigation framework. Each page-router-outlet creates a new Frame component and each configured components in the outlet will be wrapped using Page component. Then, the native navigate method is used to navigate to another page / route.</p>\n\n\n\n<h3>Router Link (nsRouterLink)</h3>\n\n\n\n<p>nsRouterLink is the replacement of Angular’s RouterLink. It enables UI component to link to another page using route. nsRouterLink also provides below two options −</p>\n\n\n\n<p><strong>pageTransition</strong>&nbsp;− It is used to set page transition animation. true enables default transition. false disables the transition. Specific values like slide, fadein, etc., set the particular transition.</p>\n\n\n\n<p><strong>clearHistory</strong>&nbsp;− true clears the navigation history of nsRouterLink.</p>\n\n\n\n<p>A simple example code is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Button text=\"Go to Home\" &#91;nsRouterLink]=\"&#91;'/home']\" \n   pageTransition=\"slide\" clearHistory=\"true\">&lt;/Button></code></pre>\n\n\n\n<h3>Router Extension</h3>\n\n\n\n<p>NativeScript provides RouterExtensions class and exposes the navigation function of the core NativeScript.</p>\n\n\n\n<p>The methods exposed by RouterExtensions are as follows −</p>\n\n\n\n<ul><li>navigate</li><li>navigateByUrl</li><li>back</li><li>canGoBack</li><li>backToPreviousPage</li><li>canGoBackToPreviousPage</li></ul>\n\n\n\n<p>A simple example code using RouterExtensions is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { RouterExtensions } from \"nativescript-angular/router\"; \n@Component({ \n   // ... \n}) \nexport class HomeComponent { \n   constructor(private routerExtensions: RouterExtensions) { } \n}</code></pre>\n\n\n\n<h3>Custom Route Reuse Strategy</h3>\n\n\n\n<p>NativeScript uses a custom route reuse strategy (RouterReuseStrategy) to accommodate the architecture of a mobile application. A mobile application differs in certain aspects in comparison to a web application.</p>\n\n\n\n<p>For example, the page can be destroyed in a web application when user navigates away from the page and recreates it when the user navigates to the page. But, in mobile application, the page will be preserved and reused. These concepts are taken into consideration while designing the routing concept.</p>\n\n\n\n<h3>Routes</h3>\n\n\n\n<p>A simple routing module in NativeScript Angular application will be as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from \"@angular/core\"; \nimport { Routes } from \"@angular/router\"; \nimport { NativeScriptRouterModule } from \"nativescript-angular/router\"; \nimport { HomeComponent } from \"./home.component\"; \nimport { SearchComponent } from \"./search.component\"; \nconst routes: Routes = &#91; \n   { path: \"\", redirectTo: \"/home\", pathMatch: \"full\" }, \n   { path: \"home\", component: HomeComponent }, \n   { path: \"search\", component: SearchComponent }, \n];\n@NgModule({ \n   imports: &#91;NativeScriptRouterModule.forRoot(routes)], \n   exports: &#91;NativeScriptRouterModule] \n}) \nexport class AppRoutingModule { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>Routing module is very similar to Angular version except very few exceptions. In reality, NativeScript uses its core navigation strategy by exposing it in a way similar to Angular framework.</p>\n","protected":false},"excerpt":{"rendered":"<p>Navigation enables users to quickly swipe in to their desired screen or to navigate through an app or to perform a particular action. Navigation component helps you implement navigation using simple button clicks to more complex patterns. Navigation differ substantially between core and angular version of NativeScript. While core framework navigation is foundation for navigation [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5649"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5649"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5649/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5649"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5649"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5649"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5650,"date":"2020-12-18T10:36:42","date_gmt":"2020-12-18T10:36:42","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3389"},"modified":"2020-12-18T10:36:42","modified_gmt":"2020-12-18T10:36:42","slug":"events-handling-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/events-handling-2/","title":{"rendered":"Events Handling"},"content":{"rendered":"\n<p>In every GUI application, events play a very important role of enabling user interaction. Whenever user interact with the application, an event fires and a corresponding action will be executed.</p>\n\n\n\n<p>For example, when user clicks the Login button in the login page of an application, it triggers the login process.</p>\n\n\n\n<p>Events involve two actors −</p>\n\n\n\n<ul><li><strong>Event sender</strong>&nbsp;− object, which raise the actual event.</li><li><strong>Event listener</strong>&nbsp;− function, which listen for a particular event and then executed when an event is fired.</li></ul>\n\n\n\n<h2>Observable Class</h2>\n\n\n\n<p>It is a pre-defined class to handle events. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const Observable = require(\"tns-core-modules/data/observable\").Observable;\n</code></pre>\n\n\n\n<p>In NativeScript, almost every object derives from Observable class and so every object support events.</p>\n\n\n\n<h2>Event Listener</h2>\n\n\n\n<p>Let us understand how to create an object and add an event listener to the object in this chapter.</p>\n\n\n\n<h3>Step 1</h3>\n\n\n\n<p>Create a button that is used to generate an event as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const Button = require(\"tns-core-modules/ui/button\").Button; \nconst testButton = new Button();\n</code></pre>\n\n\n\n<h3>Step 2</h3>\n\n\n\n<p>Next add text to the button as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>testButton.text = \"Click\";\n</code></pre>\n\n\n\n<h3>Step 3</h3>\n\n\n\n<p>Create a function, onTap as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let onTap = function(args) {\n   console.log(\"you clicked!\"); \n};</code></pre>\n\n\n\n<h3>Step 4</h3>\n\n\n\n<p>Now attach tap event to the onTap function as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>testButton.on(\"tap\", onTap, this);\n</code></pre>\n\n\n\n<p>An alternate way to add an event listener is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>testButton.addEventListener(\"tap\", onTap, this);\n</code></pre>\n\n\n\n<h3>Step 5</h3>\n\n\n\n<p>An alternative way to attach event is through UI itself as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Button text=\"click\" (tap)=\"onTap($event)\">&lt;/Button>\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>$event is of type EventData. EventData contains two property and they are follows −</p>\n\n\n\n<p><strong>Object</strong>&nbsp;− Observable instance that is used to raise an event. In this scenario, it is Button object.</p>\n\n\n\n<p><strong>EventName</strong>&nbsp;− It is the event name. In this scenario, it is tap event.</p>\n\n\n\n<h3>Step 6</h3>\n\n\n\n<p>Finally, an event listener can be detached / removed at any time as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>testButton.off(Button.onTap);\n</code></pre>\n\n\n\n<p>You can also use another format as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>testButton.removeEventListener(Button.onTap);\n</code></pre>\n\n\n\n<h2>Modifying BlankNgApp</h2>\n\n\n\n<p>Let us modify the BlankNgApp application to better understand the events in NativeScript.</p>\n\n\n\n<h3>Step 1</h3>\n\n\n\n<p>Open the home component’s UI,&nbsp;<strong>src/app/home/home.component.html</strong>&nbsp;and add below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar>\n&lt;StackLayout> \n   &lt;Button text='Fire an event' class=\"-primary\" color='gray' (tap)='onButtonTap($event)'>&lt;/Button>\n&lt;/StackLayout></code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>tap is the event and Button is event raiser.</li><li>onButtonTap is the event listener.</li></ul>\n\n\n\n<h3>Step 2</h3>\n\n\n\n<p>Open the home component’s code,&nbsp;<strong>‘src/app/home/home.component.ts’</strong>&nbsp;and update the below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from \"@angular/core\"; \nimport { EventData } from \"tns-core-modules/data/observable\"; \nimport { Button } from \"tns-core-modules/ui/button\" \n@Component({ \n   selector: \"Home\", \n   templateUrl: \"./home.component.html\" \n}) \nexport class HomeComponent implements OnInit { \n   constructor() { \n      // Use the component constructor to inject providers. \n   } \n   ngOnInit(): void { \n      // Init your component properties here. \n   } \n   onButtonTap(args: EventData): void { \n      console.log(args.eventName); \n      const button = &lt;Button>args.object; \n      console.log(button.text); \n   } \n}</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>Added new event listener, onButtonTap.</li><li>Print the event name, tap and button text, Fire an event in the console.</li></ul>\n\n\n\n<h3>Step 3</h3>\n\n\n\n<p>Run the application and tap the button. It prints the below line in the console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>LOG from device &lt;device name>: tap \nLOG from device &lt;device name>: Fire an event\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In every GUI application, events play a very important role of enabling user interaction. Whenever user interact with the application, an event fires and a corresponding action will be executed. For example, when user clicks the Login button in the login page of an application, it triggers the login process. Events involve two actors − [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5650"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5650"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5650/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5650"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5650"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5650"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5651,"date":"2020-12-18T10:37:56","date_gmt":"2020-12-18T10:37:56","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3391"},"modified":"2020-12-18T10:37:56","modified_gmt":"2020-12-18T10:37:56","slug":"data-binding-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/data-binding-2/","title":{"rendered":"Data Binding"},"content":{"rendered":"\n<p>Data binding is one of the advanced concepts supported by NativeScript. NativeScript follows Angular data binding concept as closely as possible. Data binding enables the UI component to show/update the current value of the application data model without any programming effort.</p>\n\n\n\n<p>NativeScript supports two type of data binding. They are as follows −</p>\n\n\n\n<p><strong>One-Way data binding</strong>&nbsp;− Update the UI whenever the model is changed.</p>\n\n\n\n<p><strong>Two-Way data binding</strong>&nbsp;− Sync the UI and model. Whenever the model is updated, UI is updated automatically and also whenever the UI gets data from user (UI gets updated), the model will be updated.</p>\n\n\n\n<p>Let us learn both the concepts in this section.</p>\n\n\n\n<h2>One-Way Data Binding</h2>\n\n\n\n<p>NativeScript provides a simple option to enable one-way data binding in a UI component. To enable one-way data binding, just add square bracket in the property of the target UI and then assign it the necessary model’s property.</p>\n\n\n\n<p>For example, to update the text content of a Label component, just change the UI code as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Label &#91;text]='this.model.prop' />\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p><strong>this.model.prop</strong>&nbsp;refers to the property of the model, this.model.</p>\n\n\n\n<p>Let us change our BlankNgApp to understand the one-way data binding.</p>\n\n\n\n<h3>Step 1</h3>\n\n\n\n<p>Add a new model, User (src/model/user.ts) as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export class User { \n   name: string \n}</code></pre>\n\n\n\n<p>Step 2</p>\n\n\n\n<p>Open UI of our component,&nbsp;<strong>src/app/home/home.component.html</strong>&nbsp;and update the code as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> \n   &lt;Label text=\"Home\">&lt;/Label> \n&lt;/ActionBar>\n&lt;GridLayout columns=\"*\" rows=\"auto, auto, auto\"> \n   &lt;Button text=\"Click here to greet\" class=\"-primary\" color='gray' \n      (tap)='onButtonTap($event)' row='1' column='0'>\n   &lt;/Button> \n   &lt;Label &#91;text]='this.user.name' row='2' column='0' \n      height=\"50px\" textAlignment='center' style='font-size: 16px; \n      font-weight: bold; margin: 0px 32px 0 25px;'>\n   &lt;/Label> \n&lt;/GridLayout></code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>Label’s text is set to the user model’s property name.</li><li>Button tap event is attached to onButtonTap method.</li></ul>\n\n\n\n<h3>Step 3</h3>\n\n\n\n<p>Open code of the home component,&nbsp;<strong>src/app/home/home.component.ts</strong>&nbsp;and update the code as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from \"@angular/core\"; \nimport { User } from \"../../model/user\" \n@Component({\n   selector: \"Home\", \n   templateUrl: \"./home.component.html\" \n}) \nexport class HomeComponent implements OnInit { \n   public user: User; \n   constructor() {\n      // Use the component constructor to inject providers. \n      this.user = new User(); \n      this.user.name = \"User1\"; \n   }\n   ngOnInit(): void { \n      // Init your component properties here. \n   } \n   onButtonTap(args: EventData) { \n      this.user.name = 'User2'; \n   } \n}</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>user model is imported</li><li>User object is created in component’s constructor</li><li>onButtonTap event is implemented. Implementation of onButtonTap updates the User object and set name of the property as User2</li></ul>\n\n\n\n<h3>Step 4</h3>\n\n\n\n<p>Compile and run the application and click the button to change the model and it will automatically change the&nbsp;<strong><em>Label</em></strong>&nbsp;text.</p>\n\n\n\n<p>The initial and final state of the application is as follows −</p>\n\n\n\n<h3>Initial State</h3>\n\n\n\n<p>One Way Data Binding Initial State is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/one_way_data_binding.jpg\" alt=\"One Way Data Binding\"/></figure>\n\n\n\n<h3>Final State</h3>\n\n\n\n<p>One Way Data Binding Final State is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/final_state.jpg\" alt=\"Final State\"/></figure>\n\n\n\n<h2>Two-way Data Binding</h2>\n\n\n\n<p>NativeScript also provides two-way data binding for advanced functionality. It binds the model data to UI and also binds the data updated in UI to model.</p>\n\n\n\n<p>To do two-way data binding, use ngModel property and then surround it with [] and () as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;TextField &#91;(ngModel)] = 'this.user.name'>&lt;/TextField>\n</code></pre>\n\n\n\n<p>Let us change the BlankNgApp application to better understand the two-way data binding.</p>\n\n\n\n<h3>Step 1</h3>\n\n\n\n<p>Import NativeScriptFormsModule into the HomeModule (<strong>src/app/home/home.module.ts</strong>) as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule, NO_ERRORS_SCHEMA } from \"@angular/core\"; \nimport { NativeScriptCommonModule } from \"nativescript-angular/common\"; \nimport { HomeRoutingModule } from \"./home-routing.module\"; \nimport { HomeComponent } from \"./home.component\"; \nimport { NativeScriptFormsModule } from \"nativescript-angular/forms\";\n@NgModule({ \n   imports: &#91; \n      NativeScriptCommonModule, \n      HomeRoutingModule, \n      NativeScriptFormsModule \n   ], \n   declarations: &#91; \n      HomeComponent \n   ], \n   schemas: &#91; \n      NO_ERRORS_SCHEMA \n   ]\n}) \nexport class HomeModule { }</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>NativeScriptFormsModule enables the two-way data binding. Otherwise, the two-way data binding will not work as expected.</p>\n\n\n\n<h3>Step 2</h3>\n\n\n\n<p>Change the UI of the home component as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ActionBar> &lt;Label text=\"Home\">&lt;/Label>&lt;/ActionBar> \n&lt;GridLayout columns=\"*\" rows=\"auto, auto\"> \n   &lt;TextField hint=\"Username\" row='0' column='0' color=\"gray\" \n      backgroundColor=\"lightyellow\" height=\"75px\" &#91;(ngModel)]='this.user.name'>\n   &lt;/TextField> \n   &lt;Label &#91;text]='this.user.name' row='1' column='0' height=\"50px\" \n      textAlignment='center' style='font-size: 16px; font-weight: bold; \n      margin: 0px 32px 0 25px;'>\n   &lt;/Label> \n&lt;/GridLayout></code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>Label component’s text property is set with one-way data binding. If the model user is updated, then its text property will automatically get updated.</p>\n\n\n\n<p>TextField component sets the ngModel as this.user.name. If the model user is updated, then it’s text property will automatically get updated. At the same time, if user changes the TextField’s value, then the model gets updated as well. If the model gets updated, it will trigger Label’s text property changes as well. So, if user changes data, then it will show in Label’s text property.</p>\n\n\n\n<h3>Step 3</h3>\n\n\n\n<p>Run the application and try to change the value of text box.</p>\n\n\n\n<p>The initial and final state of the application will be similar as specified below −</p>\n\n\n\n<h3>Initial State</h3>\n\n\n\n<p>Two-way data binding – Initial state is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/initial_state.jpg\" alt=\"Initial State\"/></figure>\n\n\n\n<h3>Final State</h3>\n\n\n\n<p>Two-way data binding – Final state is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/two_way_final_state.jpg\" alt=\"Two Way Final State\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Data binding is one of the advanced concepts supported by NativeScript. NativeScript follows Angular data binding concept as closely as possible. Data binding enables the UI component to show/update the current value of the application data model without any programming effort. NativeScript supports two type of data binding. They are as follows − One-Way data [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5651"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5651"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5651/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5651"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5651"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5651"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":5652,"date":"2020-12-18T10:43:49","date_gmt":"2020-12-18T10:43:49","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3393"},"modified":"2020-12-18T10:43:49","modified_gmt":"2020-12-18T10:43:49","slug":"modules","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/modules/","title":{"rendered":"Modules"},"content":{"rendered":"\n<p>A&nbsp;<em>NativeScript Module</em>&nbsp;contains a set of related functionalities packaged as single library. Let us learn the modules provided by NativeScript framework.</p>\n\n\n\n<p>It contains core functionalities of the NativeScript framework. Let us understand the core modules in this chapter.</p>\n\n\n\n<h2>Application</h2>\n\n\n\n<p>Application contains platform specific implementation of mobile application. Simple core module is defined below −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">const applicationModule = require(\"tns-core-modules/application\");\n</pre>\n\n\n\n<h2>Console</h2>\n\n\n\n<p>Console module is used to log message. It has the following methods −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log(\"My FirstApp project\"); \nconsole.info(\"Native apps!\"); \nconsole.warn(\"Warning message!\"); \nconsole.error(\"Exception occurred\");\n</code></pre>\n\n\n\n<h2>application-settings</h2>\n\n\n\n<p><em>application-settings</em>&nbsp;module contains method to manage application settings. To add this module, we need to add the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const appSettings = require(\"tns-core-modules/application-settings\");\n</code></pre>\n\n\n\n<p>Few methods available in the application-setting are as follows −</p>\n\n\n\n<ul><li>setBoolean(key: string, value: boolean) &#8211; set boolean object</li><li>setNumber(key: string, value: number) &#8211; set number object</li><li>setString(key: string, value: string) &#8211; sets string object</li><li>getAllKeys() &#8211; Contains all stored keys</li><li>hasKey(key: string) &#8211; check whether a key present or not</li><li>clear &#8211; clears stored values</li><li>remove &#8211; remove any entry based on key.</li></ul>\n\n\n\n<p>A simple example using application setting is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function onNavigatingTo(args) { \n   appSettings.setBoolean(\"isTurnedOff\", false);\n   appSettings.setString(\"name\", \"nativescript\"); \n   appSettings.setNumber(\"locationX\", 54.321); \n   const isTurnedOn = appSettings.getBoolean(\"isTurnedOn\"); \n   const username = appSettings.getString(\"username\"); \n   const locationX = appSettings.getNumber(\"locationX\"); \n   // Will return \"not present\" if there is no value for \"noKey\" \n   const someKey = appSettings.getString(\"noKey\", \"not present\"); \n}\nexports.onNavigatingTo = onNavigatingTo; \nfunction onClear() {\n   // Removing a single entry via its key name \n   appSettings.remove(\"isTurnedOff\"); \n   // Clearing the whole settings \n   appSettings.clear(); \n}</code></pre>\n\n\n\n<h2>http</h2>\n\n\n\n<p>This module is used for handling&nbsp;<strong><em>http</em></strong>&nbsp;request and response. To add this module in your application, add the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const httpModule = require(\"tns-core-modules/http\");\n</code></pre>\n\n\n\n<p>We can send data using the following methods −</p>\n\n\n\n<p><strong>getString</strong>&nbsp;− It is used to make request and downloads the data from URL as string. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>httpModule.getString(\"https://.../get\").then(\n   (r) => { \n      viewModel.set(\"getStringResult\", r); \n   }, (e) => \n   { \n   }\n);</code></pre>\n\n\n\n<p><strong><em>getJSON</em></strong>&nbsp;− It is used to access data from JSON. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>httpModule.getJSON(\"https://.../get\").then((r) =&gt; { \n}, (e) =&gt; { \n});</code></pre>\n\n\n\n<p><strong><em>getImage</em></strong>&nbsp;− downloads the content from specified URL and return ImageSource object. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>httpModule.getImage(\"https://.../image/jpeg\").then((r) => { \n}, (e) => { \n});</code></pre>\n\n\n\n<p><strong>getFile</strong>&nbsp;− It has two arguments URL and file path.</p>\n\n\n\n<ul><li><strong>URL</strong>&nbsp;− downloads the data.</li><li><strong>File path</strong>&nbsp;− save URL data into the file. It is defined below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>httpModule.getFile(\"https://\").then((resultFile) => { \n}, (e) => { \n});</code></pre>\n\n\n\n<p><strong>request</strong>&nbsp;− It has options argument. It is used to request options and return HttpResponse object. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>httpModule.request({ \n   url: \"https://.../get\", \n   method: \"GET\" \n}).then((response) => { \n}, (e) => { \n});</code></pre>\n\n\n\n<h2>Image-source</h2>\n\n\n\n<p>image-source module is used save image. We can add this module using the below statement −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const imageSourceModule = require(\"tns-core-modules/image-source\");\n</code></pre>\n\n\n\n<p>If you want to load images from resource, use the below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const imgFromResources = imageSourceModule.fromResource(\"icon\");\n</code></pre>\n\n\n\n<p>To add image from local file, use the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const folder = fileSystemModule.knownFolders.currentApp(); \nconst path = fileSystemModule.path.join(folder.path, \"images/sample.png\"); \nconst imageFromLocalFile = imageSourceModule.fromFile(path);</code></pre>\n\n\n\n<p>To save image to the file path, use the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const img = imageSourceModule.fromFile(imagePath); \nconst folderDest = fileSystemModule.knownFolders.documents(); \nconst pathDest = fileSystemModule.path.join(folderDest.path, \"sample.png\"); \nconst saved = img.saveToFile(pathDest, \"png\"); if (saved) { \n   console.log(\" sample image saved successfully!\"); \n}</code></pre>\n\n\n\n<h2>Timer</h2>\n\n\n\n<p>This module is used to execute code at specific time intervals. To add this, we need to use&nbsp;<strong>require</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const timerModule = require(\"tns-core-modules/timer\");\n</code></pre>\n\n\n\n<p>It is based on two methods −</p>\n\n\n\n<p><strong>setTimeout</strong>&nbsp;− It is used to delay the execution. It is represented as milliseconds.</p>\n\n\n\n<p><strong>setInterval</strong>&nbsp;− It is used to apply recurring at specific intervals.</p>\n\n\n\n<h2>Trace</h2>\n\n\n\n<p>This module is useful for debugging. It gives the logging information. This module can be represented as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const traceModule = require(\"tns-core-modules/trace\");\n</code></pre>\n\n\n\n<p>If you want to enable in your application then use the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>traceModule.enable();\n</code></pre>\n\n\n\n<h2>ui/image-cache</h2>\n\n\n\n<p>image-cache module is used to handle image download requests and caches downloaded images. This module can be represented as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const Cache = require(\"tns-core-modules/ui/image-cache\").Cache;\n</code></pre>\n\n\n\n<h2>connectivity</h2>\n\n\n\n<p>This module is used to receive the connection information of the connected network. It can be represented as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const connectivityModule = require(\"tns-core-modules/connectivity\");\n</code></pre>\n\n\n\n<h2>Functionality Modules</h2>\n\n\n\n<p>Functionality modules include lot of system/platform specific modules. Some of the important modules are as follows −</p>\n\n\n\n<p><strong>platform</strong>&nbsp;− Used to display the information about your device. It can be defined as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const platformModule = require(\"tns-core-modules/platform\");\n</code></pre>\n\n\n\n<p><strong>fps-meter</strong>&nbsp;− Used to capture frames per second. It can be defined as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const fpsMeter = require(\"tns-core-modules/fps-meter\");\n</code></pre>\n\n\n\n<p><strong>file-system</strong>&nbsp;− Used to work with your device file system. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const fileSystemModule = require(\"tns-core-modules/file-system\");\n</code></pre>\n\n\n\n<p><strong>ui/gestures</strong>&nbsp;− Used to work with UI gestures.</p>\n\n\n\n<h2>UI module</h2>\n\n\n\n<p>UI module includes the UI component and its related functionality. Some of the important UI modules are as follows −</p>\n\n\n\n<ul><li>frame</li><li>page</li><li>color</li><li>text/formatted-string</li><li>xml</li><li>styling</li><li>animation</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>A&nbsp;NativeScript Module&nbsp;contains a set of related functionalities packaged as single library. Let us learn the modules provided by NativeScript framework. It contains core functionalities of the NativeScript framework. Let us understand the core modules in this chapter. Application Application contains platform specific implementation of mobile application. Simple core module is defined below − const applicationModule [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5652"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5652"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5652/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5652"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5652"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5652"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3396,"date":"2020-12-18T10:48:21","date_gmt":"2020-12-18T10:48:21","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3396"},"modified":"2020-12-18T10:48:21","modified_gmt":"2020-12-18T10:48:21","slug":"plugins-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/plugins-2/","title":{"rendered":"Plugins"},"content":{"rendered":"\n<p>The npm package is used for adding native functionality. Using this package, we can install or search or delete any plugins. This section explains about plugins in detail.</p>\n\n\n\n<h2>Commands</h2>\n\n\n\n<p><strong>add</strong>&nbsp;− It is used to install plugin.</p>\n\n\n\n<p><strong>update</strong>&nbsp;− Updates specified plugin and modify its dependencies.</p>\n\n\n\n<p><strong>remove</strong>&nbsp;− Removes the plugin.</p>\n\n\n\n<p><strong>build</strong>&nbsp;− It is used to build plugin for iOS or android projects.</p>\n\n\n\n<p><strong>create</strong>&nbsp;− Creates a plugin for your project.</p>\n\n\n\n<h2>Adding Plugin</h2>\n\n\n\n<p>Below syntax is used to add a new plugin −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns plugin add &lt;plugin-name>\n</code></pre>\n\n\n\n<p>For example, if you want to add nativescript-barcodescanner, you can use the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns plugin add nativescript-barcodescanner\n</code></pre>\n\n\n\n<p>You could see the following response −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n+ nativescript-barcodescanner@3.4.1 \nadded 1 package from 1 contributor and audited 11704 packages in 8.76s\n</code></pre>\n\n\n\n<p>You can also use npm module to add the above plugin −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install nativescript-barcodescanner\n</code></pre>\n\n\n\n<p>Now, NativeScript CLI downloads the plugin from npm and add inside your node_modules folder.</p>\n\n\n\n<p>If you want to add the plugin directly to your&nbsp;<strong><em>package.json</em></strong>&nbsp;and resolve all the dependency issues, you can use the below command instead of the previous one −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nnpm i nativescript-barcodescanner\n</code></pre>\n\n\n\n<p>If you want to install a developer dependencies during development, use the below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nnpm i tns-platform-declarations --save-dev\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>tns-platform-declarations is a developer dependency required only for intelliSense during the development process.</p>\n\n\n\n<h2>Importing Plugins</h2>\n\n\n\n<p>Now, we have installed&nbsp;<strong><em>nativescript-barcodescanner plugin</em></strong>. Let us add inside your project using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n</code></pre>\n\n\n\n<h2>Updating Plugins</h2>\n\n\n\n<p>This method is used to update a specified plugin so it uninstalls previous one and installs new version and modify its dependencies. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns plugin update &lt;Plugin name version>\n</code></pre>\n\n\n\n<h2>Removing Plugin</h2>\n\n\n\n<p>If you want remove the plugin, if not required, you can use the below syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntns plugin remove &lt;plugin-name>\n</code></pre>\n\n\n\n<p>For example, if you want to remove the above installed nativescript-google-maps-sdk, then use the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns plugin remove nativescript-barcodescanner\n</code></pre>\n\n\n\n<p>You could see the following response −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Successfully removed plugin nativescript-barcodescanner\n</code></pre>\n\n\n\n<h2>Building Plugins</h2>\n\n\n\n<p>It is used to build the plugin’s Android-specific project files located in platforms/android. Let us build the nativescript-barcodescanner pugin using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns plugin build nativescript-barcodescanner\n</code></pre>\n\n\n\n<h2>Creating Plugins</h2>\n\n\n\n<p>NativeScript plugins are simple JavaScript modules. It is defined inside your application src\\package.json file. This module is used to create a new project for NativeScript plugin development. It is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns plugin create &lt;Plugin Repository Name> &#91;--path &lt;Directory>]\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>The npm package is used for adding native functionality. Using this package, we can install or search or delete any plugins. This section explains about plugins in detail. Commands add&nbsp;− It is used to install plugin. update&nbsp;− Updates specified plugin and modify its dependencies. remove&nbsp;− Removes the plugin. build&nbsp;− It is used to build plugin [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3396"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3396"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3396/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3396"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3396"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3396"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3398,"date":"2020-12-18T10:51:24","date_gmt":"2020-12-18T10:51:24","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3398"},"modified":"2020-12-18T10:51:24","modified_gmt":"2020-12-18T10:51:24","slug":"native-apis-using-javascript","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/native-apis-using-javascript/","title":{"rendered":"Native APIs Using JavaScript"},"content":{"rendered":"\n<p>This section explains about the overview of accessing Native APIs using JavaScript.</p>\n\n\n\n<h2>Marshalling</h2>\n\n\n\n<p>The NativeScript Runtime provides implicit type conversion for both android and iOS platforms. This concept is known as marshalling. For example, NativeScript- iOS paltform can implicitly convert JavaScript and Objective-C data types similarly, Java/Kotlin can easily be mapped to JavaScript project types and values. Let us understand how to perform marshalling in each type one by one briefly.</p>\n\n\n\n<h2>Numeric Values</h2>\n\n\n\n<p>We can easily convert iOS and android numeric data types into JavaScript numbers. Simple numeric conversion for iOS into JavaScript is defined below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nconsole.log(`max(7,9) = ${max(7,9)}`);\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>The native max() function is converted into JavaScript number.</p>\n\n\n\n<h3>Android Environment</h3>\n\n\n\n<p>Java supports different numeric types such as byte, short, int, float, double and long. JavaScript has only number type.</p>\n\n\n\n<p>Consider a simple Java class shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Demo extends java.lang.Object {\n   public int maxMethod(int a,int b) {\n      if(a>b) {\n         return a;\n      } else {\n         return b;\n      }\n   }\n}</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>The above code contains two integer arguments. We can call the above code object using JavaScript as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n//Create an instance for Demo class \nvar obj = new Demo(); \n\n//implicit integer conversion for calling the above method \nobj.maxMethod(7,9);\n</code></pre>\n\n\n\n<h2>Strings</h2>\n\n\n\n<p>Android strings are defined in java.lang.string and iOS strings are defined in NSSring. Let us see how to perform marshalling in both platforms.</p>\n\n\n\n<h3>Android</h3>\n\n\n\n<p>Strings are immutable but String buffers support mutable strings.</p>\n\n\n\n<p>Below code is an example for simple mapping −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Create android label widget \nvar label = new android.widget.Label(); \n\n//Create JavaScript string \nvar str = \"Label1\";  \n\n//Convert JavaScript string into java label.setText(str); \n// text is converted to java.lang.String</code></pre>\n\n\n\n<p>Boolean class is defined in java.lang.Boolean. This class wraps a value of boolean in an object. We can easily convert boolean to String and vice-versa. Simple example is defined as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//create java string \nlet data = new java.lang.String('NativeScript'); \n\n//map java String to JavaScript string, \nlet result = data.startsWith('N'); \n\n//return result \nconsole.log(result);// true</code></pre>\n\n\n\n<h3>iOS environment</h3>\n\n\n\n<p>NSString class is immutable but its subclass NSMutableString is immutable. This class contains a collection of methods for working with strings. It is declared as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class NSString : NSObject\n</code></pre>\n\n\n\n<p>Consider a simple objective-c declaration as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>NSString *str = @\"nativescript\"; \n//convert the string to uppercase\nNSString *str1; \nstr1 = &#91;str uppercaseString]; \nNSLog(@\"Uppercase String : %@\\n\", str1 );</code></pre>\n\n\n\n<p>NSStrings can easily be mapped to JavaScript strings.</p>\n\n\n\n<h2>Array</h2>\n\n\n\n<p>This section explains about how to perform marshalling in arrays. Let’s take an example of iOS environment first.</p>\n\n\n\n<h3>Array Declaration</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class NSArray : NSObject\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>NSArray is used to manage ordered collection of objects called arrays. It is used to create static array. Its sub class&nbsp;<strong><em>NSMutableArray</em></strong>&nbsp;is used to create dynamic arrays.</p>\n\n\n\n<p>Consider NSArray objects can be created using array literals as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let array: NSArray = &#91;\"React\",\"Vue\",\"TypeScript\"]\n</code></pre>\n\n\n\n<p>Now, we can map this array into JavaScript as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//create native array \nlet nsArr = NSArray.arrayWithArray(\"React\",\"Vue\",\"TypeScript\"]); \n\n//create simple javascript array \nlet jsArr = &#91;\"Hello,World\",\"NativeScript\"]; \n\n//Now compare the two arrays, \nlet compare = nsArr.isEqual(jsArr); \nconsole.log(comapre);</code></pre>\n\n\n\n<p>This will return the output as false.</p>\n\n\n\n<h3>Android array declaration</h3>\n\n\n\n<p>Java arrays are defined in&nbsp;<strong><em>java.util.Arrays</em></strong>. This class contains various methods for manipulating arrays. An example is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//javascript array \nlet data = &#91;12,45,23,56,34,78,50]; \n\n//create java array \nlet result = ns.example.Math.maxElement(data);\nconsole.log(result);</code></pre>\n\n\n\n<h2>Classes and Objects</h2>\n\n\n\n<p>Classes and Objects are basic concepts of Object Oriented Programming. Class is a user defined prototype. Object is an instance of class. Class represents the set of properties or methods that are common to all objects of one type. Let us understand native classes and objects for both mobile development environments.</p>\n\n\n\n<h3>Android Environment</h3>\n\n\n\n<p>Java and Kotlin classes have unique identifiers denoted by the full package name.</p>\n\n\n\n<p>For example,</p>\n\n\n\n<p><strong>android.view.View</strong>&nbsp;− It is a basic user interface class for screen layout and interaction with the user. We can access this class in JavaScript as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const View = android.view.View;\n</code></pre>\n\n\n\n<p>First, we import the class using the below statement −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import android.view.View;\n</code></pre>\n\n\n\n<p>Next create a class as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyClass {\n   public static void staticMethod(context) {\n      //create view instance\n      android.view.View myview = new android.view.View(context);\n   }\n}</code></pre>\n\n\n\n<p>In the above same class, we can access JavaScript function using the below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const myview = new android.view.View(context);\n</code></pre>\n\n\n\n<p>Similarly, we can access interfaces, constants and enumerations within java.lang packages.</p>\n\n\n\n<h3>iOS Environment</h3>\n\n\n\n<p>Objective-C classes are defined in two sections @interface and @implementation. Class definition starts with the keyword&nbsp;<strong>@interface</strong>&nbsp;followed by the&nbsp;<strong>interface(class)</strong>&nbsp;name. In Objective-C, all classes are derived from the base class called NSObject.</p>\n\n\n\n<p>It is the superclass of all Objective-C classes. Simple Circle class is defined as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@interface Circle:NSObject {\n   //Instance variable\n   int radius;\n}\n@end</code></pre>\n\n\n\n<p>Consider a class with one method as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@interface MyClass : NSObject \n+ (void)baseStaticMethod; \n@end</code></pre>\n\n\n\n<p>This class can be converted to javascript using the below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function MyClass() { /* native call */ }; \nObject.setPrototypeOf(MyClass, NSObject); \nBaseClass.baseStaticMethod = function () { /* native call */ };\n</code></pre>\n\n\n\n<p>JavaScript&nbsp;<strong><em>instanceof</em></strong>&nbsp;operator is used to verify, if an object inherits from a given class. This can be defined as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var obj = MyClass.alloc().init(); // object creation \nconsole.log(obj instanceof NSObject); //return true\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>Objective-C instances are created using alloc, init or new methods. In the above example, we can easily create object initialization using new method as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var obj = MyClass.new();\n</code></pre>\n\n\n\n<p>Similarly, you can access static methods and properties.</p>\n","protected":false},"excerpt":{"rendered":"<p>This section explains about the overview of accessing Native APIs using JavaScript. Marshalling The NativeScript Runtime provides implicit type conversion for both android and iOS platforms. This concept is known as marshalling. For example, NativeScript- iOS paltform can implicitly convert JavaScript and Objective-C data types similarly, Java/Kotlin can easily be mapped to JavaScript project types [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3398"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3398"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3398/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3398"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3398"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3398"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3400,"date":"2020-12-18T10:52:07","date_gmt":"2020-12-18T10:52:07","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3400"},"modified":"2020-12-18T10:52:07","modified_gmt":"2020-12-18T10:52:07","slug":"creating-an-application-in-android","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/creating-an-application-in-android/","title":{"rendered":"Creating an Application in Android"},"content":{"rendered":"\n<p>Create and publish your app makes your Android application available to all users. Google Play is a robust publishing platform. It helps you to publish and distribute your Android applications to all the users around the whole world. This chapter explains about how to publish your Native app in Google Play.</p>\n\n\n\n<h2>NativeScript Sidekick</h2>\n\n\n\n<p>SideKick is a GUI client and supports all kind of OS. It simplifies NativeScript CLI process and helps to create mobile application.</p>\n\n\n\n<h3>Publish your app from Sidekick to Google Play Console</h3>\n\n\n\n<p>Downloading and installing sidekick depends on your OS. Follow the below steps to run your app in Sidekick.</p>\n\n\n\n<p><strong>Step 1: Launch Sidekick</strong></p>\n\n\n\n<p>Let us Launch Sidekick. It looks similar to the below image −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/sidekick.jpg\" alt=\"Sidekick\"/></figure>\n\n\n\n<p><strong>Step 2: Build your device</strong></p>\n\n\n\n<p>Now, open your app from your device and select build option from the toolbar and select Android. You will get a response similar to the below image −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/toolbar.jpg\" alt=\"ToolBar\"/></figure>\n\n\n\n<p><strong>Step 3: Properties</strong></p>\n\n\n\n<p>Click properties tab and add your android configuration. Screen looks similar to the below one −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/configuration.jpg\" alt=\"Configuration\"/></figure>\n\n\n\n<p><strong>Step 4: Plugins</strong></p>\n\n\n\n<p>Sidekick helps to find which plugins you depend on for your application. Click on plugins tab and it will list out the following −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/plugins.jpg\" alt=\"Plugins\"/></figure>\n\n\n\n<p><strong>Step 5: Android Certificates</strong></p>\n\n\n\n<p>Click cogwheel icon from android and choose browse option, then select a certificate stored on your file system. It is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/certificates.jpg\" alt=\"Certificates\"/></figure>\n\n\n\n<p>After selecting that, close the dialog box.</p>\n\n\n\n<p><strong>Step 6: Build your application</strong></p>\n\n\n\n<p>Finally click local build option from build type and select release option from configuration. After that build your application.</p>\n\n\n\n<p><strong>Step 7: Application package</strong></p>\n\n\n\n<p>Once build is completed, it will generate a path and&nbsp;<strong><em>apk</em></strong>&nbsp;file. Save the location of the application package. This apk file is used to upload it to the Google Play store.</p>\n\n\n\n<p><strong>Step 8: Publish in Google Play</strong></p>\n\n\n\n<p>Select publish option from the toolbar and select Google Play. Then, add Manage Android Certificates for Google Play Store dialog. It is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/google_play.jpg\" alt=\"Google Play\"/></figure>\n\n\n\n<p>After that, select Build type and provide Service Account JSON key then select Alpha, Beta or Production tracks finally click upload.</p>\n\n\n\n<h2>Publish your app in Google Play</h2>\n\n\n\n<p>To publish your app in Google Play console, you must meet the following prerequisites.</p>\n\n\n\n<h3>Prerequisites</h3>\n\n\n\n<ul><li>You must be registered in Google Play</li><li>You have a valid Google Play self-signed code signing identity</li></ul>\n\n\n\n<h3>Procedure for publish your app</h3>\n\n\n\n<p>Below steps are helpful to understand how to release your app in Google Play store.</p>\n\n\n\n<p><strong>Step 1: Login Google Play console</strong></p>\n\n\n\n<p>Open Google Play console and login with your account.</p>\n\n\n\n<p><strong>Step 2: Create an app</strong></p>\n\n\n\n<p>Go to the All applications tab and click Create Application and create a new app. Now, add default language,application title finally click proceed to go further.</p>\n\n\n\n<p><strong>Step 3: Fill required fields</strong></p>\n\n\n\n<p>Move to store listing tab and fill the required fields, then complete the needed assets and save all the changes.</p>\n\n\n\n<p><strong>Step 4: Price and distribution</strong></p>\n\n\n\n<p>Go to Pricing &amp; distribution tab, complete all the settings and save all the changes.</p>\n\n\n\n<p><strong>Step 5: Release your app</strong></p>\n\n\n\n<p>Choose App releases tab and select Alpha, Beta. It is used for testing your application. And, select Production tracks. It is used for publishing your app to Google Play. Finally add the application package (apk).</p>\n\n\n\n<p><strong>Step 6: Review your app</strong></p>\n\n\n\n<p>This is your final step. In the Review, verify if there are any issues. If no issues, then confirm rollout to publish your app.</p>\n","protected":false},"excerpt":{"rendered":"<p>Create and publish your app makes your Android application available to all users. Google Play is a robust publishing platform. It helps you to publish and distribute your Android applications to all the users around the whole world. This chapter explains about how to publish your Native app in Google Play. NativeScript Sidekick SideKick is [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3400"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3400"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3400/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3400"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3400"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3400"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3402,"date":"2020-12-18T10:52:34","date_gmt":"2020-12-18T10:52:34","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3402"},"modified":"2020-12-18T10:52:34","modified_gmt":"2020-12-18T10:52:34","slug":"creating-an-application-in-ios","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/creating-an-application-in-ios/","title":{"rendered":"Creating an Application in iOS"},"content":{"rendered":"\n<p>This chapter explains about how to publish your Native app in App Store. Go through the below steps to publish your app.</p>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<p>To perform this, you must need the following prerequisites −</p>\n\n\n\n<ul><li>Certificate for distribution</li><li>Distribution provisioning profile</li><li>Registered bundle ID in iOS Dev center</li><li>App record in iTunes Connect</li></ul>\n\n\n\n<h2>Steps to publish your app</h2>\n\n\n\n<p>Below are the steps to publish your app −</p>\n\n\n\n<h3>Step 1: Open NativeScript Sidekick</h3>\n\n\n\n<p>Launch NativeScript Sidekick and open your app in Sidekick.</p>\n\n\n\n<h3>Step 2: Select publish</h3>\n\n\n\n<p>Go to toolbar and select&nbsp;<em>publish</em>&nbsp;option from the toolbar. It is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/publish.jpg\" alt=\"Publish\"/></figure>\n\n\n\n<p>Now, select Apple App Store option. It looks similar to the below image −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/apple_app_store.jpg\" alt=\"Apple App Store\"/></figure>\n\n\n\n<h3>Step 3: Manage iOS provision and certificates</h3>\n\n\n\n<p>Click the Apple App Store cogwheel icon and choose browse option and add the details.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/cogwheel.jpg\" alt=\"Cogwheel\"/></figure>\n\n\n\n<h3>Step 4: Build your app</h3>\n\n\n\n<p>Next, click build option and build your app and wait till the process to complete.</p>\n\n\n\n<h3>Step 5: Provide credentials</h3>\n\n\n\n<p>This is your final step. Specify Apple Username and Password in your account and click upload and check the confirmation message. If you want to submit your app for review, then go to iTunes Connect and submit it.</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter explains about how to publish your Native app in App Store. Go through the below steps to publish your app. Prerequisites To perform this, you must need the following prerequisites − Certificate for distribution Distribution provisioning profile Registered bundle ID in iOS Dev center App record in iTunes Connect Steps to publish your [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3402"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3402"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3402/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3402"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3402"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3402"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3404,"date":"2020-12-18T10:54:15","date_gmt":"2020-12-18T10:54:15","guid":{"rendered":"http://appdev.foobrdigital.com/?p=3404"},"modified":"2020-12-18T10:54:15","modified_gmt":"2020-12-18T10:54:15","slug":"testing-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/testing-3/","title":{"rendered":"Testing"},"content":{"rendered":"\n<p>Testing is a very important phase in the development life cycle of an application. It ensures an application quality. It needs careful planning and execution. It is also most time consuming phase of the development. NativeScript framework provides an extensive support for the automated testing of an application.</p>\n\n\n\n<h2>Types of Testing</h2>\n\n\n\n<p>Generally, three types of testing processes are available to test an application. They are as follows −</p>\n\n\n\n<h2>Unit Testing</h2>\n\n\n\n<p>Unit testing is the easiest method to test an application. It is based on ensuring the correctness of a piece of code (a function, in general) or a method of a class. But, it does not reflect the real environment and subsequently. It is the least option to find the bugs.</p>\n\n\n\n<p>Generally, NativeScript uses Jasmine, Mocha with Chai and QUnit unit testing frameworks.</p>\n\n\n\n<p>To perform this, first you need to configure in your project using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntns test init\n</code></pre>\n\n\n\n<p>Now, you get the following response −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>? Select testing framework: (Use arrow keys) \n> jasmine \n   mocha \n   qunit\n﻿</code></pre>\n\n\n\n<p>Now, select&nbsp;<strong><em>jasmine</em></strong>&nbsp;framework and your screen looks similar to this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>? Select testing framework: jasmine \n+ karma@4.4.1 \nadded 90 packages from 432 contributors and audited 11944 packages in 8.753s \n\n+ karma-nativescript-launcher@0.4.0 \nadded 2 packages from 1 contributor and audited 11946 packages in 7.299s \n\n> core-js@2.6.11 postinstall \n/Users/workspace/NativeScript/NativeApp/node_modules/core-js \n\n> node -e \"try{require('./postinstall')}catch(e){}\" \nThank you for using core-js ( https://github.com/zloirock/core-js ) for \npolyfilling JavaScript standard library! \nThe project needs your help! Please consider supporting of core-js on Open \nCollective or Patreon:\n\n> https://opencollective.com/core-js \n> https://www.patreon.com/zloirock \nAlso, the author of core-js ( https://github.com/zloirock ) is looking for a \ngood job -) \nnpm WARN karma-webpack@3.0.5 requires a peer of webpack@^2.0.0 \n|| ^3.0.0 but none is installed. You must install peer dependencies yourself. \n\n+ karma-webpack@3.0.5 \nadded 19 packages from 52 contributors and audited 12012 packages in 9.368s \n\n+ karma-jasmine@2.0.1 \nadded 2 packages from 35 contributors and audited 12014 packages in 6.925s \n\n+ karma@4.4.1 \nupdated 1 package and audited 12014 packages in 7.328s \n+ @types/jasmine@3.4.6 \n\n> nativescript-unit-test-runner@0.7.0 postinstall /Users/deiva/workspace/NativeScript/NativeApp/node_modules/nativescript-unit\n-test-runner \n\n> node postinstall.js \n+ nativescript-unit-test-runner@0.7.0 \n\nadded 1 package from 1 contributor and audited 12032 packages in 7.14s \nSuccessfully installed plugin nativescript-unit-test-runner. \n\nExample test file created in src/tests \nRun your tests using the \"$ tns test &lt;platform>\" command.\n</code></pre>\n\n\n\n<p>Now, the test file is created inside src\\tests\\example.ts.</p>\n\n\n\n<h2>Create Your Tests</h2>\n\n\n\n<p>Let us add a simple test inside example.ts file as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>describe(\"NativeApp test:\", function() { \n   it(\"Check counter.\", function() { \n      expect(mainViewModel.createViewModel().counter).toEqual(10); \n   }); \n   it(\"Check message.\", function () { \n      expect(mainViewModel.createViewModel().message).toBe(\"10 taps left\"); \n   }); \n});</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>First, check if the counter equals 10 and check if the message is 10 taps left.</p>\n\n\n\n<p>Let us run the test in next step.</p>\n\n\n\n<h2>Run Your Tests</h2>\n\n\n\n<p>Now, run the test in either android or iOS connected device using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntns test android\n</code></pre>\n\n\n\n<p>This will return the following status −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>? To continue, choose one of the following options: (Use arrow keys) \n> Configure for Cloud Builds \n   Configure for Local Builds \n   Configure for Both Local and Cloud Builds \n   Skip Step and Configure Manually</code></pre>\n\n\n\n<p>Then choose the below option −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>? To continue, choose one of the following options: Configure for Local Builds \nRunning the setup script to try and automatically configure your environment. \nThese scripts require sudo permissions \n.....\n</code></pre>\n\n\n\n<p>To execute your test suite in the android simulator, run the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns test android --emulator\n</code></pre>\n\n\n\n<p>Now, karma server prepares builds and deploy your project.</p>\n\n\n\n<h2>End To End (E2E) Testing</h2>\n\n\n\n<p>Unit tests are small, simple and fast process whereas, E2E testing phase multiple components are involved and works together which cover flows in the application. This could not be achieved by unit and integration tests.</p>\n\n\n\n<p><strong>NativeScript Appium</strong>&nbsp;plugin is used to perform E2E automation testing. Well, Appium is an open source testing framework for mobile app. To add this framework in your project, you must have either latest version of XCode or Android SDK above 25.3.0.</p>\n\n\n\n<h3>Install Appium</h3>\n\n\n\n<p>Let us install Appium globally using npm module −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g appium\n</code></pre>\n\n\n\n<p>Now, you could see the following response −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g appium \n/Users/.npm-global/bin/authorize-ios -> \n/Users/.npm-global/lib/node_modules/ appium/node_modules/.bin/authorize-ios \n\n> appium-windows-driver@1.8.0 install \n/Users/.npm-global/lib/node_modules/ appium/node_modules/appium-windows-driver\n\n> node install-npm.js \nNot installing WinAppDriver since did not detect a Windows system \n\n> core-js@2.6.11 postinstall /Users/.npm-\nglobal/lib/node_modules/appium/node_modules/core-js \n\n> node -e \"try{require('./postinstall')}catch(e){}\" \nThank you for using core-js ( https://github.com/zloirock/core-js ) for \npolyfilling JavaScript \nstandard library! \nThe project needs your help! Please consider supporting of core-js on Open Collective or Patreon: \n\n> https://opencollective.com/core-js \n> https://www.patreon.com/zloirock \nAlso, the author of core-js ( https://github.com/zloirock ) \nis looking for a good job -) \n\n> appium-chromedriver@4.19.0 postinstall/Users/.npm-\nglobal/lib/node_modules/appium/node_modules \n/appium-chromedriver \n\n> node install-npm.js \n............................................ \n............................................. \n+ appium@1.16.0 \nadded 671 packages from 487 contributors in 28.889s\n</code></pre>\n\n\n\n<h3>Add Plugin</h3>\n\n\n\n<p>Let us add&nbsp;<strong><em>nativescript-dev-appium</em></strong>&nbsp;plugin as a devDependency to your project using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -D nativescript-dev-appium\n</code></pre>\n\n\n\n<p>After executing this, choose&nbsp;<strong><em>mocha</em></strong>&nbsp;framework and you will get a response similar to this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>> node ./postinstall.js \n? What kind of project do you use\n? javascript ? Which testing framework do you prefer? mocha \n+ nativescript-dev-appium@6.1.3</code></pre>\n\n\n\n<p>Now, files are stored inside your project folder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/project_folder.jpg\" alt=\"Project Folder\"/></figure>\n\n\n\n<h3>Build your device</h3>\n\n\n\n<p>Let us build android device using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tns build android</code></pre>\n\n\n\n<p>The above command will run the tests should specify the targeted capabilities. If you have iOS device, you can build using&nbsp;<strong><em>iOS</em></strong>&nbsp;device.</p>\n\n\n\n<h3>Run Test</h3>\n\n\n\n<p>Now, we have configured the device. Let us run our test using the below command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nnpm run e2e -- --runType &lt;capability-name>\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<p>capability-name is defined inside your application&nbsp;<strong>e2e/config/appium.capabilities.json</strong>.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/nativescript/images/config.jpg\" alt=\"Config\"/></figure>\n\n\n\n<h2>NativeScript &#8211; Conclusion</h2>\n\n\n\n<p>NativeScript is a great mobile app for web developers to test their application completely in a very easy way without putting extra efforts. Developers can confidently develop a great looking as well as a successful application without any issues in a short period of time.</p>\n","protected":false},"excerpt":{"rendered":"<p>Testing is a very important phase in the development life cycle of an application. It ensures an application quality. It needs careful planning and execution. It is also most time consuming phase of the development. NativeScript framework provides an extensive support for the automated testing of an application. Types of Testing Generally, three types of [&hellip;]</p>\n","protected":false},"author":3,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[106],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3404"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3404"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3404/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3404"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3404"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3404"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]