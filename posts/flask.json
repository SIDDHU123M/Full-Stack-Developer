[
  {
    "id": 4569,
    "date": "2020-05-16T09:56:36",
    "date_gmt": "2020-05-16T09:56:36",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=842"
    },
    "modified": "2020-05-16T09:56:36",
    "modified_gmt": "2020-05-16T09:56:36",
    "slug": "overview-6-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/overview-6-2/",
    "title": {
      "rendered": "Overview"
    },
    "content": {
      "rendered": "\n<h2>What is Web Framework?</h2>\n\n\n\n<p>Web Application Framework or simply Web Framework represents a collection of libraries and modules that enables a web application developer to write applications without having to bother about low-level details such as protocols, thread management etc.</p>\n\n\n\n<h2>What is Flask?</h2>\n\n\n\n<p>Flask is a web application framework written in Python. It is developed by&nbsp;<strong>Armin Ronacher</strong>, who leads an international group of Python enthusiasts named Pocco. Flask is based on the Werkzeug WSGI toolkit and Jinja2 template engine. Both are Pocco projects.</p>\n\n\n\n<h2>WSGI</h2>\n\n\n\n<p>Web Server Gateway Interface (WSGI) has been adopted as a standard for Python web application development. WSGI is a specification for a universal interface between the web server and the web applications.</p>\n\n\n\n<h2>Werkzeug</h2>\n\n\n\n<p>It is a WSGI toolkit, which implements requests, response objects, and other utility functions. This enables building a web framework on top of it. The Flask framework uses Werkzeug as one of its bases.</p>\n\n\n\n<h2>Jinja2</h2>\n\n\n\n<p>Jinja2 is a popular templating engine for Python. A web templating system combines a template with a certain data source to render dynamic web pages.</p>\n\n\n\n<p>Flask is often referred to as a micro framework. It aims to keep the core of an application simple yet extensible. Flask does not have built-in abstraction layer for database handling, nor does it have form a validation support. Instead, Flask supports the extensions to add such functionality to the application. Some of the popular Flask extensions are discussed later in the tutorial.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Web Framework? Web Application Framework or simply Web Framework represents a collection of libraries and modules that enables a web application developer to write applications without having to bother about low-level details such as protocols, thread management etc. What is Flask? Flask is a web application framework written in Python. It is developed [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1963,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4569"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4569"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4569/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1963"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4569"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4569"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4569"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 843,
    "date": "2020-05-16T09:58:35",
    "date_gmt": "2020-05-16T09:58:35",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=843"
    },
    "modified": "2020-05-16T09:58:35",
    "modified_gmt": "2020-05-16T09:58:35",
    "slug": "environment-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/environment-3/",
    "title": {
      "rendered": "Environment"
    },
    "content": {
      "rendered": "\n<h2>Prerequisite</h2>\n\n\n\n<p>Python 2.6 or higher is usually required for installation of Flask. Although Flask and its dependencies work well with Python 3 (Python 3.3 onwards), many Flask extensions do not support it properly. Hence, it is recommended that Flask should be installed on Python 2.7.</p>\n\n\n\n<h2>Install virtual env for development environment</h2>\n\n\n\n<p><strong>virtualenv</strong>&nbsp;is a virtual Python environment builder. It helps a user to create multiple Python environments side-by-side. Thereby, it can avoid compatibility issues between the different versions of the libraries.</p>\n\n\n\n<p>The following command installs&nbsp;<strong>virtual env</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install virtualenv</code></pre>\n\n\n\n<p>This command needs administrator privileges. Add&nbsp;<strong>sudo</strong>&nbsp;before&nbsp;<strong>pip</strong>&nbsp;on Linux/Mac OS. If you are on Windows, log in as Administrator. On Ubuntu&nbsp;<strong>virtualenv</strong>&nbsp;may be installed using its package manager.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sudo apt-get install virtualenv</code></pre>\n\n\n\n<p>Once installed, new virtual environment is created in a folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mkdir newproj\ncd newproj\nvirtualenv venv</code></pre>\n\n\n\n<p>To activate corresponding environment, on&nbsp;<strong>Linux/OS X</strong>, use the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>venv/bin/activate</code></pre>\n\n\n\n<p>On&nbsp;<strong>Windows</strong>, following can be used</p>\n\n\n\n<pre class=\"wp-block-code\"><code>venv\\scripts\\activate</code></pre>\n\n\n\n<p>We are now ready to install Flask in this environment.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install Flask</code></pre>\n\n\n\n<p>The above command can be run directly, without virtual environment for system-wide installation.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Prerequisite Python 2.6 or higher is usually required for installation of Flask. Although Flask and its dependencies work well with Python 3 (Python 3.3 onwards), many Flask extensions do not support it properly. Hence, it is recommended that Flask should be installed on Python 2.7. Install virtual env for development environment virtualenv&nbsp;is a virtual Python [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1964,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/843"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=843"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/843/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1964"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=843"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=843"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=843"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4570,
    "date": "2020-05-16T10:00:06",
    "date_gmt": "2020-05-16T10:00:06",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=844"
    },
    "modified": "2020-05-16T10:00:06",
    "modified_gmt": "2020-05-16T10:00:06",
    "slug": "application-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/application-2/",
    "title": {
      "rendered": "Application"
    },
    "content": {
      "rendered": "\n<p>In order to test&nbsp;<strong>Flask</strong>&nbsp;installation, type the following code in the editor as&nbsp;<strong>Hello.py</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n   return 'Hello World’\n\nif __name__ == '__main__':\n   app.run()</code></pre>\n\n\n\n<p>Importing flask module in the project is mandatory. An object of Flask class is our&nbsp;<strong>WSGI</strong>&nbsp;application.</p>\n\n\n\n<p>Flask constructor takes the name of&nbsp;<strong>current module (__name__)</strong>&nbsp;as argument.</p>\n\n\n\n<p>The&nbsp;<strong>route()</strong>&nbsp;function of the Flask class is a decorator, which tells the application which URL should call the associated function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>app.route(rule, options)</code></pre>\n\n\n\n<ul><li>The&nbsp;<strong>rule</strong>&nbsp;parameter represents URL binding with the function.</li><li>The&nbsp;<strong>options</strong>&nbsp;is a list of parameters to be forwarded to the underlying Rule object.</li></ul>\n\n\n\n<p>In the above example,&nbsp;<strong>‘/’</strong>&nbsp;URL is bound with&nbsp;<strong>hello_world()</strong>&nbsp;function. Hence, when the home page of web server is opened in browser, the output of this function will be rendered.</p>\n\n\n\n<p>Finally the&nbsp;<strong>run()</strong>&nbsp;method of Flask class runs the application on the local development server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>app.run(host, port, debug, options)</code></pre>\n\n\n\n<p>All parameters are optional</p>\n\n\n\n<table><tbody><tr><th>Sr.No.</th><th>Parameters &amp; Description</th></tr><tr><td>1</td><td><strong>host</strong>Hostname to listen on. Defaults to 127.0.0.1 (localhost). Set to ‘0.0.0.0’ to have server available externally</td></tr><tr><td>2</td><td><strong>port</strong>Defaults to 5000</td></tr><tr><td>3</td><td><strong>debug</strong>Defaults to false. If set to true, provides a debug information</td></tr><tr><td>4</td><td><strong>options</strong>To be forwarded to underlying Werkzeug server.</td></tr></tbody></table>\n\n\n\n<p>The above given&nbsp;<strong>Python</strong>&nbsp;script is executed from Python shell.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Python Hello.py</code></pre>\n\n\n\n<p>A message in Python shell informs you that</p>\n\n\n\n<pre class=\"wp-block-code\"><code>* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</code></pre>\n\n\n\n<p>Open the above URL&nbsp;<strong>(localhost:5000)</strong>&nbsp;in the browser.&nbsp;<strong>‘Hello World’</strong>&nbsp;message will be displayed on it.</p>\n\n\n\n<h2>Debug mode</h2>\n\n\n\n<p>A&nbsp;<strong>Flask</strong>&nbsp;application is started by calling the&nbsp;<strong>run()</strong>&nbsp;method. However, while the application is under development, it should be restarted manually for each change in the code. To avoid this inconvenience, enable&nbsp;<strong>debug support</strong>. The server will then reload itself if the code changes. It will also provide a useful debugger to track the errors if any, in the application.</p>\n\n\n\n<p>The&nbsp;<strong>Debug</strong>&nbsp;mode is enabled by setting the&nbsp;<strong>debug</strong>&nbsp;property of the&nbsp;<strong>application</strong>&nbsp;object to&nbsp;<strong>True</strong>&nbsp;before running or passing the debug parameter to the&nbsp;<strong>run()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>app.debug = True\napp.run()\napp.run(debug = True)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In order to test&nbsp;Flask&nbsp;installation, type the following code in the editor as&nbsp;Hello.py Importing flask module in the project is mandatory. An object of Flask class is our&nbsp;WSGI&nbsp;application. Flask constructor takes the name of&nbsp;current module (__name__)&nbsp;as argument. The&nbsp;route()&nbsp;function of the Flask class is a decorator, which tells the application which URL should call the associated function. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1965,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4570"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4570"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4570/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1965"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4570"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4570"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4570"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 845,
    "date": "2020-05-16T10:01:01",
    "date_gmt": "2020-05-16T10:01:01",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=845"
    },
    "modified": "2020-05-16T10:01:01",
    "modified_gmt": "2020-05-16T10:01:01",
    "slug": "routing-6",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/routing-6/",
    "title": {
      "rendered": "Routing"
    },
    "content": {
      "rendered": "\n<p>Modern web frameworks use the routing technique to help a user remember application URLs. It is useful to access the desired page directly without having to navigate from the home page.</p>\n\n\n\n<p>The&nbsp;<strong>route()</strong>&nbsp;decorator in Flask is used to bind URL to a function. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route(‘/hello’)\ndef hello_world():\n   return ‘hello world’</code></pre>\n\n\n\n<p>Here, URL&nbsp;<strong>‘/hello’</strong>&nbsp;rule is bound to the&nbsp;<strong>hello_world()</strong>&nbsp;function. As a result, if a user visits&nbsp;<strong>http://localhost:5000/hello</strong>&nbsp;URL, the output of the&nbsp;<strong>hello_world()</strong>&nbsp;function will be rendered in the browser.</p>\n\n\n\n<p>The&nbsp;<strong>add_url_rule()</strong>&nbsp;function of an application object is also available to bind a URL with a function as in the above example,&nbsp;<strong>route()</strong>&nbsp;is used.</p>\n\n\n\n<p>A decorator’s purpose is also served by the following representation −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def hello_world():\n   return ‘hello world’\napp.add_url_rule(‘/’, ‘hello’, hello_world)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Modern web frameworks use the routing technique to help a user remember application URLs. It is useful to access the desired page directly without having to navigate from the home page. The&nbsp;route()&nbsp;decorator in Flask is used to bind URL to a function. For example − Here, URL&nbsp;‘/hello’&nbsp;rule is bound to the&nbsp;hello_world()&nbsp;function. As a result, if [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1966,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/845"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=845"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/845/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1966"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=845"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=845"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=845"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 846,
    "date": "2020-05-16T10:03:16",
    "date_gmt": "2020-05-16T10:03:16",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=846"
    },
    "modified": "2020-05-16T10:03:16",
    "modified_gmt": "2020-05-16T10:03:16",
    "slug": "variable-rule",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/variable-rule/",
    "title": {
      "rendered": "Variable Rule"
    },
    "content": {
      "rendered": "\n<p>It is possible to build a URL dynamically, by adding variable parts to the rule parameter. This variable part is marked as&nbsp;<strong>&lt;variable-name&gt;</strong>. It is passed as a keyword argument to the function with which the rule is associated.</p>\n\n\n\n<p>In the following example, the rule parameter of&nbsp;<strong>route()</strong>&nbsp;decorator contains&nbsp;<strong>&lt;name&gt;</strong>&nbsp;variable part attached to URL&nbsp;<strong>‘/hello’</strong>. Hence, if the&nbsp;<strong>http://localhost:5000/hello/<strong>Codemeals</strong></strong>&nbsp;is entered as a&nbsp;<strong>URL</strong>&nbsp;in the browser,&nbsp;<strong>‘<strong>Codemeals</strong>’</strong>&nbsp;will be supplied to&nbsp;<strong>hello()</strong>&nbsp;function as argument.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/hello/&lt;name>')\ndef hello_name(name):\n   return 'Hello %s!' % name\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>Save the above script as&nbsp;<strong>hello.py</strong>&nbsp;and run it from Python shell. Next, open the browser and enter URL&nbsp;<strong>http://localhost:5000/hello/Codemeals.</strong></p>\n\n\n\n<p>The following output will be displayed in the browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello Codemeals!\n</code></pre>\n\n\n\n<p>In addition to the default string variable part, rules can be constructed using the following converters −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Converters &amp; Description</th></tr><tr><td>1</td><td><strong>int</strong>accepts integer</td></tr><tr><td>2</td><td><strong>float</strong>For floating point value</td></tr><tr><td>3</td><td><strong>path</strong>accepts slashes used as directory separator character</td></tr></tbody></table></figure>\n\n\n\n<p>In the following code, all these constructors are used.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/blog/&lt;int:postID>')\ndef show_blog(postID):\n   return 'Blog Number %d' % postID\n\n@app.route('/rev/&lt;float:revNo>')\ndef revision(revNo):\n   return 'Revision Number %f' % revNo\n\nif __name__ == '__main__':\n   app.run()</code></pre>\n\n\n\n<p>Run the above code from Python Shell. Visit the URL&nbsp;<strong>http://localhost:5000/blog/11</strong>&nbsp;in the browser.</p>\n\n\n\n<p>The given number is used as argument to the&nbsp;<strong>show_blog()</strong>&nbsp;function. The browser displays the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Blog Number 11\n</code></pre>\n\n\n\n<p>Enter this URL in the browser −&nbsp;<strong>http://localhost:5000/rev/1.1</strong></p>\n\n\n\n<p>The&nbsp;<strong>revision()</strong>&nbsp;function takes up the floating point number as argument. The following result appears in the browser window −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Revision Number 1.100000\n</code></pre>\n\n\n\n<p>The URL rules of Flask are based on&nbsp;<strong>Werkzeug’s</strong>&nbsp;routing module. This ensures that the URLs formed are unique and based on precedents laid down by Apache.</p>\n\n\n\n<p>Consider the rules defined in the following script −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/flask')\ndef hello_flask():\n   return 'Hello Flask'\n\n@app.route('/python/')\ndef hello_python():\n   return 'Hello Python'\n\nif __name__ == '__main__':\n   app.run()</code></pre>\n\n\n\n<p>Both the rules appear similar but in the second rule, trailing slash&nbsp;<strong>(/)</strong>&nbsp;is used. As a result, it becomes a canonical URL. Hence, using&nbsp;<strong>/python</strong>&nbsp;or&nbsp;<strong>/python/</strong>&nbsp;returns the same output. However, in case of the first rule,&nbsp;<strong>/flask/</strong>&nbsp;URL results in&nbsp;<strong>404 Not Found</strong>&nbsp;page.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>It is possible to build a URL dynamically, by adding variable parts to the rule parameter. This variable part is marked as&nbsp;&lt;variable-name&gt;. It is passed as a keyword argument to the function with which the rule is associated. In the following example, the rule parameter of&nbsp;route()&nbsp;decorator contains&nbsp;&lt;name&gt;&nbsp;variable part attached to URL&nbsp;‘/hello’. Hence, if the&nbsp;http://localhost:5000/hello/Codemeals&nbsp;is entered [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1967,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/846"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=846"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/846/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1967"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=846"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=846"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=846"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4571,
    "date": "2020-05-16T10:04:36",
    "date_gmt": "2020-05-16T10:04:36",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=847"
    },
    "modified": "2020-05-16T10:04:36",
    "modified_gmt": "2020-05-16T10:04:36",
    "slug": "url-building",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/url-building/",
    "title": {
      "rendered": "URL Building"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<strong>url_for()</strong>&nbsp;function is very useful for dynamically building a URL for a specific function. The function accepts the name of a function as first argument, and one or more keyword arguments, each corresponding to the variable part of URL.</p>\n\n\n\n<p>The following script demonstrates use of&nbsp;<strong>url_for()</strong>&nbsp;function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, redirect, url_for\napp = Flask(__name__)\n\n@app.route('/admin')\ndef hello_admin():\n   return 'Hello Admin'\n\n@app.route('/guest/&lt;guest>')\ndef hello_guest(guest):\n   return 'Hello %s as Guest' % guest\n\n@app.route('/user/&lt;name>')\ndef hello_user(name):\n   if name =='admin':\n      return redirect(url_for('hello_admin'))\n   else:\n      return redirect(url_for('hello_guest',guest = name))\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>The above script has a function&nbsp;<strong>user(name)</strong>&nbsp;which accepts a value to its argument from the URL.</p>\n\n\n\n<p>The&nbsp;<strong>User()</strong>&nbsp;function checks if an argument received matches&nbsp;<strong>‘admin’</strong>&nbsp;or not. If it matches, the application is redirected to the&nbsp;<strong>hello_admin()</strong>&nbsp;function using&nbsp;<strong>url_for()</strong>, otherwise to the&nbsp;<strong>hello_guest()</strong>&nbsp;function passing the received argument as guest parameter to it.</p>\n\n\n\n<p>Save the above code and run from Python shell.</p>\n\n\n\n<p>Open the browser and enter URL as −&nbsp;<strong>http://localhost:5000/user/admin</strong></p>\n\n\n\n<p>The application response in browser is −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello Admin</code></pre>\n\n\n\n<p>Enter the following URL in the browser −&nbsp;<strong>http://localhost:5000/user/mvl</strong></p>\n\n\n\n<p>The application response now changes to −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello mvl as Guest</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;url_for()&nbsp;function is very useful for dynamically building a URL for a specific function. The function accepts the name of a function as first argument, and one or more keyword arguments, each corresponding to the variable part of URL. The following script demonstrates use of&nbsp;url_for()&nbsp;function. The above script has a function&nbsp;user(name)&nbsp;which accepts a value to its [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1968,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4571"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4571"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4571/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1968"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4571"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4571"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4571"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4572,
    "date": "2020-05-16T10:07:42",
    "date_gmt": "2020-05-16T10:07:42",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=860"
    },
    "modified": "2020-05-16T10:07:42",
    "modified_gmt": "2020-05-16T10:07:42",
    "slug": "http-methods",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/http-methods/",
    "title": {
      "rendered": "HTTP methods"
    },
    "content": {
      "rendered": "\n<p>Http protocol is the foundation of data communication in world wide web. Different methods of data retrieval from specified URL are defined in this protocol.</p>\n\n\n\n<p>The following table summarizes different http methods −</p>\n\n\n\n<table><tbody><tr><th>Sr.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td><strong>GET</strong>Sends data in unencrypted form to the server. Most common method.</td></tr><tr><td>2</td><td><strong>HEAD</strong>Same as GET, but without response body</td></tr><tr><td>3</td><td><strong>POST</strong>Used to send HTML form data to server. Data received by POST method is not cached by server.</td></tr><tr><td>4</td><td><strong>PUT</strong>Replaces all current representations of the target resource with the uploaded content.</td></tr><tr><td>5</td><td><strong>DELETE</strong>Removes all current representations of the target resource given by a URL</td></tr></tbody></table>\n\n\n\n<p>By default, the Flask route responds to the&nbsp;<strong>GET</strong>&nbsp;requests. However, this preference can be altered by providing methods argument to&nbsp;<strong>route()</strong>&nbsp;decorator.</p>\n\n\n\n<p>In order to demonstrate the use of&nbsp;<strong>POST</strong>&nbsp;method in URL routing, first let us create an HTML form and use the&nbsp;<strong>POST</strong>&nbsp;method to send form data to a URL.</p>\n\n\n\n<p>Save the following script as login.html</p>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;form action = \"http://localhost:5000/login\" method = \"post\">\n         &lt;p>Enter Name:&lt;/p>\n         &lt;p>&lt;input type = \"text\" name = \"nm\" />&lt;/p>\n         &lt;p>&lt;input type = \"submit\" value = \"submit\" />&lt;/p>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n</div></div>\n\n\n\n<p>Now enter the following script in Python shell.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, redirect, url_for, request\napp = Flask(__name__)\n\n@app.route('/success/&lt;name>')\ndef success(name):\n   return 'welcome %s' % name\n\n@app.route('/login',methods = &#91;'POST', 'GET'])\ndef login():\n   if request.method == 'POST':\n      user = request.form&#91;'nm']\n      return redirect(url_for('success',name = user))\n   else:\n      user = request.args.get('nm')\n      return redirect(url_for('success',name = user))\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>After the development server starts running, open&nbsp;<strong>login.html</strong>&nbsp;in the browser, enter name in the text field and click&nbsp;<strong>Submit</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/post_method_example.jpg\" alt=\"Post Method Example\"/></figure>\n\n\n\n<p>Form data is POSTed to the URL in action clause of form tag.</p>\n\n\n\n<p><strong>http://localhost/login</strong>&nbsp;is mapped to the&nbsp;<strong>login()</strong>&nbsp;function. Since the server has received data by&nbsp;<strong>POST</strong>&nbsp;method, value of ‘nm’ parameter obtained from the form data is obtained by −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>user = request.form&#91;'nm']</code></pre>\n\n\n\n<p>It is passed to&nbsp;<strong>‘/success’</strong>&nbsp;URL as variable part. The browser displays a&nbsp;<strong>welcome</strong>&nbsp;message in the window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/welcome_message.jpg\" alt=\"Welcome Message\"/></figure>\n\n\n\n<p>Change the method parameter to&nbsp;<strong>‘GET’</strong>&nbsp;in&nbsp;<strong>login.html</strong>&nbsp;and open it again in the browser. The data received on server is by the&nbsp;<strong>GET</strong>&nbsp;method. The value of ‘nm’ parameter is now obtained by −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>User = request.args.get(‘nm’)\n</code></pre>\n\n\n\n<p>Here,&nbsp;<strong>args</strong>&nbsp;is dictionary object containing a list of pairs of form parameter and its corresponding value. The value corresponding to ‘nm’ parameter is passed on to ‘/success’ URL as before.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Http protocol is the foundation of data communication in world wide web. Different methods of data retrieval from specified URL are defined in this protocol. The following table summarizes different http methods − Sr.No. Methods &amp; Description 1 GETSends data in unencrypted form to the server. Most common method. 2 HEADSame as GET, but without [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1969,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4572"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4572"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4572/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1969"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4572"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4572"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4572"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 861,
    "date": "2020-05-16T10:09:57",
    "date_gmt": "2020-05-16T10:09:57",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=861"
    },
    "modified": "2020-05-16T10:09:57",
    "modified_gmt": "2020-05-16T10:09:57",
    "slug": "template-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/template-2/",
    "title": {
      "rendered": "Template"
    },
    "content": {
      "rendered": "\n<p>It is possible to return the output of a function bound to a certain URL in the form of HTML. For instance, in the following script,&nbsp;<strong>hello()</strong>&nbsp;function will render&nbsp;<strong>‘Hello World’</strong>&nbsp;with&nbsp;<strong>&lt;h1&gt;</strong>&nbsp;tag attached to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return '&lt;html>&lt;body>&lt;h1>Hello World&lt;/h1>&lt;/body>&lt;/html>'\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>However, generating HTML content from Python code is cumbersome, especially when variable data and Python language elements like conditionals or loops need to be put. This would require frequent escaping from HTML.</p>\n\n\n\n<p>This is where one can take advantage of&nbsp;<strong>Jinja2</strong>&nbsp;template engine, on which Flask is based. Instead of returning hardcode HTML from the function, a HTML file can be rendered by the&nbsp;<strong>render_template()</strong>&nbsp;function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return render_template(‘hello.html’)\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>Flask will try to find the HTML file in the templates folder, in the same folder in which this script is present.</p>\n\n\n\n<ul><li>Application folder<ul><li>Hello.py</li><li>templates<ul><li>hello.html</li></ul></li></ul></li></ul>\n\n\n\n<p>The term&nbsp;<strong>‘web templating system’</strong>&nbsp;refers to designing an HTML script in which the variable data can be inserted dynamically. A web template system comprises of a template engine, some kind of data source and a template processor.</p>\n\n\n\n<p>Flask uses&nbsp;<strong>jinja2</strong>&nbsp;template engine. A web template contains HTML syntax interspersed placeholders for variables and expressions (in these case Python expressions) which are replaced values when the template is rendered.</p>\n\n\n\n<p>The following code is saved as&nbsp;<strong>hello.html</strong>&nbsp;in the templates folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n   &lt;body>\n   \n      &lt;h1>Hello {{ name }}!&lt;/h1>\n      \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Next, run the following script from Python shell.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/hello/&lt;user>')\ndef hello_name(user):\n   return render_template('hello.html', name = user)\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>As the development server starts running, open the browser and enter URL as −&nbsp;<strong>http://localhost:5000/hello/mvl</strong></p>\n\n\n\n<p>The&nbsp;<strong>variable</strong>&nbsp;part of URL is inserted at&nbsp;<strong>{{ name }}</strong>&nbsp;place holder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/web_templating_system_example.jpg\" alt=\"Web Templating System Example\"/></figure>\n\n\n\n<p>The&nbsp;<strong>jinja2</strong>&nbsp;template engine uses the following delimiters for escaping from HTML.</p>\n\n\n\n<ul><li>{% &#8230; %} for Statements</li><li>{{ &#8230; }} for Expressions to print to the template output</li><li>{# &#8230; #} for Comments not included in the template output</li><li># &#8230; ## for Line Statements</li></ul>\n\n\n\n<p>In the following example, use of conditional statement in the template is demonstrated. The URL rule to the&nbsp;<strong>hello()</strong>&nbsp;function accepts the integer parameter. It is passed to the&nbsp;<strong>hello.html</strong>&nbsp;template. Inside it, the value of number received (marks) is compared (greater or less than 50) and accordingly HTML is conditionally rendered.</p>\n\n\n\n<p>The Python Script is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/hello/&lt;int:score>')\ndef hello_name(score):\n   return render_template('hello.html', marks = score)\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>HTML template script of&nbsp;<strong>hello.html</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n   &lt;body>\n      {% if marks>50 %}\n         &lt;h1> Your result is pass!&lt;/h1>\n      {% else %}\n         &lt;h1>Your result is fail&lt;/h1>\n      {% endif %}\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Note that the conditional statements&nbsp;<strong>if-else</strong>&nbsp;and&nbsp;<strong>endif</strong>&nbsp;are enclosed in delimiter&nbsp;<strong>{%..%}</strong>.</p>\n\n\n\n<p>Run the Python script and visit URL&nbsp;<strong>http://localhost/hello/60</strong>&nbsp;and then&nbsp;<strong>http://localhost/hello/30</strong>&nbsp;to see the output of HTML changing conditionally.</p>\n\n\n\n<p>The Python loop constructs can also be employed inside the template. In the following script, the&nbsp;<strong>result()</strong>&nbsp;function sends a dictionary object to template&nbsp;<strong>results.html</strong>&nbsp;when URL&nbsp;<strong>http://localhost:5000/result</strong>&nbsp;is opened in the browser.</p>\n\n\n\n<p>The Template part of&nbsp;<strong>result.html</strong>&nbsp;employs a&nbsp;<strong>for loop</strong>&nbsp;to render key and value pairs of dictionary object&nbsp;<strong>result{}</strong>&nbsp;as cells of an HTML table.</p>\n\n\n\n<p>Run the following code from Python shell.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route('/result')\ndef result():\n   dict = {'phy':50,'che':60,'maths':70}\n   return render_template('result.html', result = dict)\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>Save the following HTML script as&nbsp;<strong>result.html</strong>&nbsp;in the templates folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n   &lt;body>\n      &lt;table border = 1>\n         {% for key, value in result.items() %}\n            &lt;tr>\n               &lt;th> {{ key }} &lt;/th>\n               &lt;td> {{ value }} &lt;/td>\n            &lt;/tr>\n         {% endfor %}\n      &lt;/table>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Here, again the Python statements corresponding to the&nbsp;<strong>For</strong>&nbsp;loop are enclosed in {%..%} whereas, the expressions&nbsp;<strong>key and value</strong>&nbsp;are put inside&nbsp;<strong>{{ }}</strong>.</p>\n\n\n\n<p>After the development starts running, open&nbsp;<strong>http://localhost:5000/result</strong>&nbsp;in the browser to get the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/table_template_example.jpg\" alt=\"Table Template Example\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>It is possible to return the output of a function bound to a certain URL in the form of HTML. For instance, in the following script,&nbsp;hello()&nbsp;function will render&nbsp;‘Hello World’&nbsp;with&nbsp;&lt;h1&gt;&nbsp;tag attached to it. However, generating HTML content from Python code is cumbersome, especially when variable data and Python language elements like conditionals or loops need to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1970,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/861"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=861"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/861/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1970"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=861"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=861"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=861"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4573,
    "date": "2020-05-16T10:10:59",
    "date_gmt": "2020-05-16T10:10:59",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=862"
    },
    "modified": "2020-05-16T10:10:59",
    "modified_gmt": "2020-05-16T10:10:59",
    "slug": "static-files-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/static-files-2/",
    "title": {
      "rendered": "Static Files"
    },
    "content": {
      "rendered": "\n<p>A web application often requires a static file such as a&nbsp;<strong>javascript</strong>&nbsp;file or a&nbsp;<strong>CSS</strong>&nbsp;file supporting the display of a web page. Usually, the web server is configured to serve them for you, but during the development, these files are served from&nbsp;<em>static</em>&nbsp;folder in your package or next to your module and it will be available at&nbsp;<strong><em>/static</em></strong>&nbsp;on the application.</p>\n\n\n\n<p>A special endpoint ‘static’ is used to generate URL for static files.</p>\n\n\n\n<p>In the following example, a&nbsp;<strong>javascript</strong>&nbsp;function defined in&nbsp;<strong>hello.js</strong>&nbsp;is called on&nbsp;<strong>OnClick</strong>&nbsp;event of HTML button in&nbsp;<strong>index.html</strong>, which is rendered on&nbsp;<strong>‘/’</strong>&nbsp;URL of the Flask application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, render_template\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef index():\n   return render_template(\"index.html\")\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>The HTML script of&nbsp;<strong>index.html</strong>&nbsp;is given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text/javascript\" \n         src = \"{{ url_for('static', filename = 'hello.js') }}\" >&lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;input type = \"button\" onclick = \"sayHello()\" value = \"Say Hello\" />\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>hello.js</strong>&nbsp;contains&nbsp;<strong>sayHello()</strong>&nbsp;function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>function sayHello() {\n   alert(\"Hello World\")\n}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A web application often requires a static file such as a&nbsp;javascript&nbsp;file or a&nbsp;CSS&nbsp;file supporting the display of a web page. Usually, the web server is configured to serve them for you, but during the development, these files are served from&nbsp;static&nbsp;folder in your package or next to your module and it will be available at&nbsp;/static&nbsp;on the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1971,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4573"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4573"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4573/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1971"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4573"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4573"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4573"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4576,
    "date": "2020-05-16T10:11:28",
    "date_gmt": "2020-05-16T10:11:28",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=869"
    },
    "modified": "2020-05-16T10:11:28",
    "modified_gmt": "2020-05-16T10:11:28",
    "slug": "request-object",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/request-object/",
    "title": {
      "rendered": "Request Object"
    },
    "content": {
      "rendered": "\n<p>The data from a client’s web page is sent to the server as a global request object. In order to process the request data, it should be imported from the Flask module.</p>\n\n\n\n<p>Important attributes of request object are listed below −</p>\n\n\n\n<ul><li><strong>Form</strong>&nbsp;− It is a dictionary object containing key and value pairs of form parameters and their values.</li><li><strong>args</strong>&nbsp;− parsed contents of query string which is part of URL after question mark (?).</li><li><strong>Cookies</strong>&nbsp;− dictionary object holding Cookie names and values.</li><li><strong>files</strong>&nbsp;− data pertaining to uploaded file.</li><li><strong>method</strong>&nbsp;− current request method.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The data from a client’s web page is sent to the server as a global request object. In order to process the request data, it should be imported from the Flask module. Important attributes of request object are listed below − Form&nbsp;− It is a dictionary object containing key and value pairs of form parameters [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1972,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4576"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4576"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4576/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1972"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4576"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4576"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4576"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 863,
    "date": "2020-05-16T10:12:31",
    "date_gmt": "2020-05-16T10:12:31",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=863"
    },
    "modified": "2020-05-16T10:12:31",
    "modified_gmt": "2020-05-16T10:12:31",
    "slug": "sending-form-data-to-template",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/sending-form-data-to-template/",
    "title": {
      "rendered": "Sending Form Data to Template"
    },
    "content": {
      "rendered": "\n<p>We have already seen that the http method can be specified in URL rule. The&nbsp;<strong>Form</strong>&nbsp;data received by the triggered function can collect it in the form of a dictionary object and forward it to a template to render it on a corresponding web page.</p>\n\n\n\n<p>In the following example,&nbsp;<strong>‘/’</strong>&nbsp;URL renders a web page (student.html) which has a form. The data filled in it is posted to the&nbsp;<strong>‘/result’</strong>&nbsp;URL which triggers the&nbsp;<strong>result()</strong>&nbsp;function.</p>\n\n\n\n<p>The&nbsp;<strong>results()</strong>&nbsp;function collects form data present in&nbsp;<strong>request.form</strong>&nbsp;in a dictionary object and sends it for rendering to&nbsp;<strong>result.html</strong>.</p>\n\n\n\n<p>The template dynamically renders an HTML table of&nbsp;<strong>form</strong>&nbsp;data.</p>\n\n\n\n<p>Given below is the Python code of application −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, render_template, request\napp = Flask(__name__)\n\n@app.route('/')\ndef student():\n   return render_template('student.html')\n\n@app.route('/result',methods = &#91;'POST', 'GET'])\ndef result():\n   if request.method == 'POST':\n      result = request.form\n      return render_template(\"result.html\",result = result)\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>Given below is the HTML script of&nbsp;<strong>student.html</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;form action = \"http://localhost:5000/result\" method = \"POST\">\n         &lt;p>Name &lt;input type = \"text\" name = \"Name\" />&lt;/p>\n         &lt;p>Physics &lt;input type = \"text\" name = \"Physics\" />&lt;/p>\n         &lt;p>Chemistry &lt;input type = \"text\" name = \"chemistry\" />&lt;/p>\n         &lt;p>Maths &lt;input type =\"text\" name = \"Mathematics\" />&lt;/p>\n         &lt;p>&lt;input type = \"submit\" value = \"submit\" />&lt;/p>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Code of template&nbsp;<strong>(result.html)</strong>&nbsp;is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n   &lt;body>\n      &lt;table border = 1>\n         {% for key, value in result.items() %}\n            &lt;tr>\n               &lt;th> {{ key }} &lt;/th>\n               &lt;td> {{ value }} &lt;/td>\n            &lt;/tr>\n         {% endfor %}\n      &lt;/table>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Run the Python script and enter the URL&nbsp;<strong>http://localhost:5000/</strong>&nbsp;in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/submit_marks.jpg\" alt=\"Submit Marks\"/></figure>\n\n\n\n<p>When the&nbsp;<strong>Submit</strong>&nbsp;button is clicked, form data is rendered on&nbsp;<strong>result.html</strong>&nbsp;in the form of HTML table.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/marks_table.jpg\" alt=\"Marks Table\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>We have already seen that the http method can be specified in URL rule. The&nbsp;Form&nbsp;data received by the triggered function can collect it in the form of a dictionary object and forward it to a template to render it on a corresponding web page. In the following example,&nbsp;‘/’&nbsp;URL renders a web page (student.html) which has [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1973,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/863"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=863"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/863/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1973"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=863"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=863"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=863"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 870,
    "date": "2020-05-16T10:16:31",
    "date_gmt": "2020-05-16T10:16:31",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=870"
    },
    "modified": "2020-05-16T10:16:31",
    "modified_gmt": "2020-05-16T10:16:31",
    "slug": "cookies-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/cookies-3/",
    "title": {
      "rendered": "Cookies"
    },
    "content": {
      "rendered": "\n<p>A cookie is stored on a client’s computer in the form of a text file. Its purpose is to remember and track data pertaining to a client’s usage for better visitor experience and site statistics.</p>\n\n\n\n<p>A&nbsp;<strong>Request object</strong>&nbsp;contains a cookie’s attribute. It is a dictionary object of all the cookie variables and their corresponding values, a client has transmitted. In addition to it, a cookie also stores its expiry time, path and domain name of the site.</p>\n\n\n\n<p>In Flask, cookies are set on response object. Use&nbsp;<strong>make_response()</strong>&nbsp;function to get response object from return value of a view function. After that, use the&nbsp;<strong>set_cookie()</strong>&nbsp;function of response object to store a cookie.</p>\n\n\n\n<p>Reading back a cookie is easy. The&nbsp;<strong>get()</strong>&nbsp;method of&nbsp;<strong>request.cookies</strong>&nbsp;attribute is used to read a cookie.</p>\n\n\n\n<p>In the following Flask application, a simple form opens up as you visit&nbsp;<strong>‘/’</strong>&nbsp;URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route('/')\ndef index():\n   return render_template('index.html')</code></pre>\n\n\n\n<p>This HTML page contains one text input.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;form action = \"/setcookie\" method = \"POST\">\n         &lt;p>&lt;h3>Enter userID&lt;/h3>&lt;/p>\n         &lt;p>&lt;input type = 'text' name = 'nm'/>&lt;/p>\n         &lt;p>&lt;input type = 'submit' value = 'Login'/>&lt;/p>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The Form is posted to&nbsp;<strong>‘/setcookie’</strong>&nbsp;URL. The associated view function sets a Cookie name&nbsp;<strong>userID</strong>&nbsp;and renders another page.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route('/setcookie', methods = &#91;'POST', 'GET'])\ndef setcookie():\n   if request.method == 'POST':\n   user = request.form&#91;'nm']\n   \n   resp = make_response(render_template('readcookie.html'))\n   resp.set_cookie('userID', user)\n   \n   return resp</code></pre>\n\n\n\n<p><strong>‘readcookie.html’</strong>&nbsp;contains a hyperlink to another view function&nbsp;<strong>getcookie()</strong>, which reads back and displays the cookie value in browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route('/getcookie')\ndef getcookie():\n   name = request.cookies.get('userID')\n   return '&lt;h1>welcome '+name+'&lt;/h1>'</code></pre>\n\n\n\n<p>Run the application and visit&nbsp;<strong>http://localhost:5000/</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/readcookie_html.jpg\" alt=\"ReadCookie HTML\"/></figure>\n\n\n\n<p>The result of setting a cookie is displayed like this −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/result_of_setting_cookie.jpg\" alt=\"Result of Setting Cookie\"/></figure>\n\n\n\n<p>The output of read back cookie is shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/reading_cookie_back.jpg\" alt=\"Reading Cookie Back\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A cookie is stored on a client’s computer in the form of a text file. Its purpose is to remember and track data pertaining to a client’s usage for better visitor experience and site statistics. A&nbsp;Request object&nbsp;contains a cookie’s attribute. It is a dictionary object of all the cookie variables and their corresponding values, a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1974,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/870"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=870"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/870/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1974"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=870"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=870"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=870"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 864,
    "date": "2020-05-16T10:18:01",
    "date_gmt": "2020-05-16T10:18:01",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=864"
    },
    "modified": "2020-05-16T10:18:01",
    "modified_gmt": "2020-05-16T10:18:01",
    "slug": "sessions-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/sessions-3/",
    "title": {
      "rendered": "Sessions"
    },
    "content": {
      "rendered": "\n<p>Like Cookie, Session data is stored on client. Session is the time interval when a client logs into a server and logs out of it. The data, which is needed to be held across this session, is stored in the client browser.</p>\n\n\n\n<p>A session with each client is assigned a&nbsp;<strong>Session ID</strong>. The Session data is stored on top of cookies and the server signs them cryptographically. For this encryption, a Flask application needs a defined&nbsp;<strong>SECRET_KEY</strong>.</p>\n\n\n\n<p>Session object is also a dictionary object containing key-value pairs of session variables and associated values.</p>\n\n\n\n<p>For example, to set a&nbsp;<strong>‘username’</strong>&nbsp;session variable use the statement −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Session&#91;‘username’] = ’admin’\n</code></pre>\n\n\n\n<p>To release a session variable use&nbsp;<strong>pop()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>session.pop('username', None)\n</code></pre>\n\n\n\n<p>The following code is a simple demonstration of session works in Flask. URL&nbsp;<strong>‘/’</strong>&nbsp;simply prompts user to log in, as session variable&nbsp;<strong>‘username’</strong>&nbsp;is not set.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route('/')\ndef index():\n   if 'username' in session:\n      username = session&#91;'username']\n         return 'Logged in as ' + username + '&lt;br>' + \\\n         \"&lt;b>&lt;a href = '/logout'>click here to log out&lt;/a>&lt;/b>\"\n   return \"You are not logged in &lt;br>&lt;a href = '/login'>&lt;/b>\" + \\\n      \"click here to log in&lt;/b>&lt;/a>\"</code></pre>\n\n\n\n<p>As user browses to ‘/login’ the login() view function, because it is called through GET method, opens up a login form.</p>\n\n\n\n<p>A Form is posted back to&nbsp;<strong>‘/login’</strong>&nbsp;and now session variable is set. Application is redirected to&nbsp;<strong>‘/’</strong>. This time session variable&nbsp;<strong>‘username’</strong>&nbsp;is found.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route('/login', methods = &#91;'GET', 'POST'])\ndef login():\n   if request.method == 'POST':\n      session&#91;'username'] = request.form&#91;'username']\n      return redirect(url_for('index'))\n   return '''\n\t\n   &lt;form action = \"\" method = \"post\">\n      &lt;p>&lt;input type = text name = username/>&lt;/p>\n      &lt;p&lt;&lt;input type = submit value = Login/>&lt;/p>\n   &lt;/form>\n\t\n   '''</code></pre>\n\n\n\n<p>The application also contains a&nbsp;<strong>logout()</strong>&nbsp;view function, which pops out&nbsp;<strong>‘username’</strong>&nbsp;session variable. Hence,&nbsp;<strong>‘/’</strong>&nbsp;URL again shows the opening page.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route('/logout')\ndef logout():\n   # remove the username from the session if it is there\n   session.pop('username', None)\n   return redirect(url_for('index'))</code></pre>\n\n\n\n<p>Run the application and visit the homepage. (Ensure to set&nbsp;<strong>secret_key</strong>&nbsp;of the application)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, session, redirect, url_for, escape, request\napp = Flask(__name__)\napp.secret_key = 'any random string’</code></pre>\n\n\n\n<p>The output will be displayed as shown below. Click the link&nbsp;<strong>“click here to log in”</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/login_page_using_session.jpg\" alt=\"Login Page Using Session\"/></figure>\n\n\n\n<p>The link will be directed to another screen. Type ‘admin’.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/another_login_screen.jpg\" alt=\"Another Login Screen\"/></figure>\n\n\n\n<p>The screen will show you the message,&nbsp;<strong>‘Logged in as admin’</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/logged_in_as_admin.jpg\" alt=\"Logged in as admin\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Like Cookie, Session data is stored on client. Session is the time interval when a client logs into a server and logs out of it. The data, which is needed to be held across this session, is stored in the client browser. A session with each client is assigned a&nbsp;Session ID. The Session data is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 2010,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/864"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=864"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/864/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/2010"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=864"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=864"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=864"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4574,
    "date": "2020-05-16T10:19:19",
    "date_gmt": "2020-05-16T10:19:19",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=865"
    },
    "modified": "2020-05-16T10:19:19",
    "modified_gmt": "2020-05-16T10:19:19",
    "slug": "redirect-errors",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/redirect-errors/",
    "title": {
      "rendered": "Redirect Errors"
    },
    "content": {
      "rendered": "\n<p>Flask class has a&nbsp;<strong>redirect()</strong>&nbsp;function. When called, it returns a response object and redirects the user to another target location with specified status code.</p>\n\n\n\n<p>Prototype of&nbsp;<strong>redirect()</strong>&nbsp;function is as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Flask.redirect(location, statuscode, response)\n</code></pre>\n\n\n\n<p>In the above function −</p>\n\n\n\n<ul><li><strong>location</strong>&nbsp;parameter is the URL where response should be redirected.</li><li><strong>statuscode</strong>&nbsp;sent to browser’s header, defaults to 302.</li><li><strong>response</strong>&nbsp;parameter is used to instantiate response.</li></ul>\n\n\n\n<p>The following status codes are standardized −</p>\n\n\n\n<ul><li>HTTP_300_MULTIPLE_CHOICES</li><li>HTTP_301_MOVED_PERMANENTLY</li><li>HTTP_302_FOUND</li><li>HTTP_303_SEE_OTHER</li><li>HTTP_304_NOT_MODIFIED</li><li>HTTP_305_USE_PROXY</li><li>HTTP_306_RESERVED</li><li>HTTP_307_TEMPORARY_REDIRECT</li></ul>\n\n\n\n<p>The&nbsp;<strong>default status</strong>&nbsp;code is&nbsp;<strong>302</strong>, which is for&nbsp;<strong>‘found’</strong>.</p>\n\n\n\n<p>In the following example, the&nbsp;<strong>redirect()</strong>&nbsp;function is used to display the login page again when a login attempt fails.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, redirect, url_for, render_template, request\n# Initialize the Flask application\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return render_template('log_in.html')\n\n@app.route('/login',methods = &#91;'POST', 'GET']) \ndef login(): \n   if request.method == 'POST' and request.form&#91;'username'] == 'admin' :\n      return redirect(url_for('success'))\n   else:\n      return redirect(url_for('index'))\n\n@app.route('/success')\ndef success():\n   return 'logged in successfully'\n\t\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>Flask class has&nbsp;<strong>abort()</strong>&nbsp;function with an error code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Flask.abort(code)\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>Code</strong>&nbsp;parameter takes one of following values −</p>\n\n\n\n<ul><li><strong>400</strong>&nbsp;− for Bad Request</li><li><strong>401</strong>&nbsp;− for Unauthenticated</li><li><strong>403</strong>&nbsp;− for Forbidden</li><li><strong>404</strong>&nbsp;− for Not Found</li><li><strong>406</strong>&nbsp;− for Not Acceptable</li><li><strong>415</strong>&nbsp;− for Unsupported Media Type</li><li><strong>429</strong>&nbsp;− Too Many Requests</li></ul>\n\n\n\n<p>Let us make a slight change in the&nbsp;<strong>login()</strong>&nbsp;function in the above code. Instead of re-displaying the login page, if&nbsp;<strong>‘Unauthourized’</strong>&nbsp;page is to be displayed, replace it with call to&nbsp;<strong>abort(401)</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, redirect, url_for, render_template, request, abort\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n   return render_template('log_in.html')\n\n@app.route('/login',methods = &#91;'POST', 'GET'])\ndef login():\n   if request.method == 'POST':\n      if request.form&#91;'username'] == 'admin' :\n         return redirect(url_for('success'))\n      else:\n         abort(401)\n   else:\n      return redirect(url_for('index'))\n\n@app.route('/success')\ndef success():\n   return 'logged in successfully'\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Flask class has a&nbsp;redirect()&nbsp;function. When called, it returns a response object and redirects the user to another target location with specified status code. Prototype of&nbsp;redirect()&nbsp;function is as below − In the above function − location&nbsp;parameter is the URL where response should be redirected. statuscode&nbsp;sent to browser’s header, defaults to 302. response&nbsp;parameter is used to instantiate [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1976,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4574"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4574"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4574/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1976"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4574"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4574"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4574"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 866,
    "date": "2020-05-16T10:21:09",
    "date_gmt": "2020-05-16T10:21:09",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=866"
    },
    "modified": "2020-05-16T10:21:09",
    "modified_gmt": "2020-05-16T10:21:09",
    "slug": "message-flashing",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/message-flashing/",
    "title": {
      "rendered": "Message Flashing"
    },
    "content": {
      "rendered": "\n<p>A good GUI based application provides feedback to a user about the interaction. For example, the desktop applications use dialog or message box and JavaScript uses alerts for similar purpose.</p>\n\n\n\n<p>Generating such informative messages is easy in Flask web application. Flashing system of Flask framework makes it possible to create a message in one view and render it in a view function called&nbsp;<strong>next</strong>.</p>\n\n\n\n<p>A Flask module contains&nbsp;<strong>flash()</strong>&nbsp;method. It passes a message to the next request, which generally is a template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flash(message, category)\n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li><strong>message</strong>&nbsp;parameter is the actual message to be flashed.</li><li><strong>category</strong>&nbsp;parameter is optional. It can be either ‘error’, ‘info’ or ‘warning’.</li></ul>\n\n\n\n<p>In order to remove message from session, template calls&nbsp;<strong>get_flashed_messages()</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>get_flashed_messages(with_categories, category_filter)\n</code></pre>\n\n\n\n<p>Both parameters are optional. The first parameter is a tuple if received messages are having category. The second parameter is useful to display only specific messages.</p>\n\n\n\n<p>The following flashes received messages in a template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% with messages = get_flashed_messages() %}\n   {% if messages %}\n      {% for message in messages %}\n         {{ message }}\n      {% endfor %}\n   {% endif %}\n{% endwith %}</code></pre>\n\n\n\n<p>Let us now see a simple example, demonstrating the flashing mechanism in Flask. In the following code, a&nbsp;<strong>‘/’</strong>&nbsp;URL displays link to the login page, with no message to flash.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route('/')\ndef index():\n   return render_template('index.html')</code></pre>\n\n\n\n<p>The link leads a user to&nbsp;<strong>‘/login’</strong>&nbsp;URL which displays a login form. When submitted, the&nbsp;<strong>login()</strong>&nbsp;view function verifies a username and password and accordingly flashes a&nbsp;<strong>‘success’</strong>&nbsp;message or creates&nbsp;<strong>‘error’</strong>&nbsp;variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route('/login', methods = &#91;'GET', 'POST'])\ndef login():\n   error = None\n   \n   if request.method == 'POST':\n      if request.form&#91;'username'] != 'admin' or \\\n         request.form&#91;'password'] != 'admin':\n         error = 'Invalid username or password. Please try again!'\n      else:\n         flash('You were successfully logged in')\n         return redirect(url_for('index'))\n   return render_template('login.html', error = error)</code></pre>\n\n\n\n<p>In case of&nbsp;<strong>error</strong>, the login template is redisplayed with error message.</p>\n\n\n\n<h2>Login.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n   &lt;body>\n      &lt;h1>Login&lt;/h1>\n\n      {% if error %}\n         &lt;p>&lt;strong>Error:&lt;/strong> {{ error }}\n      {% endif %}\n      \n      &lt;form action = \"\" method = post>\n         &lt;dl>\n            &lt;dt>Username:&lt;/dt>\n            &lt;dd>\n               &lt;input type = text name = username \n                  value = \"{{request.form.username }}\">\n            &lt;/dd>\n            &lt;dt>Password:&lt;/dt>\n            &lt;dd>&lt;input type = password name = password>&lt;/dd>\n         &lt;/dl>\n         &lt;p>&lt;input type = submit value = Login>&lt;/p>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>On the other hand, if&nbsp;<strong>login</strong>&nbsp;is successful, a success message is flashed on the index template.</p>\n\n\n\n<h2>Index.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n   &lt;head>\n      &lt;title>Flask Message flashing&lt;/title>\n   &lt;/head>\n   &lt;body>\n      {% with messages = get_flashed_messages() %}\n         {% if messages %}\n            &lt;ul>\n               {% for message in messages %}\n               &lt;li&lt;{{ message }}&lt;/li>\n               {% endfor %}\n            &lt;/ul>\n         {% endif %}\n      {% endwith %}\n\t\t\n      &lt;h1>Flask Message Flashing Example&lt;/h1>\n      &lt;p>Do you want to &lt;a href = \"{{ url_for('login') }}\">\n         &lt;b>log in?&lt;/b>&lt;/a>&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>A complete code for Flask message flashing example is given below −</p>\n\n\n\n<h2>Flash.py</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, flash, redirect, render_template, request, url_for\napp = Flask(__name__)\napp.secret_key = 'random string'\n\n@app.route('/')\ndef index():\n   return render_template('index.html')\n\n@app.route('/login', methods = &#91;'GET', 'POST'])\ndef login():\n   error = None\n   \n   if request.method == 'POST':\n      if request.form&#91;'username'] != 'admin' or \\\n         request.form&#91;'password'] != 'admin':\n         error = 'Invalid username or password. Please try again!'\n      else:\n         flash('You were successfully logged in')\n         return redirect(url_for('index'))\n\t\t\t\n   return render_template('login.html', error = error)\n\nif __name__ == \"__main__\":\n   app.run(debug = True)</code></pre>\n\n\n\n<p>After executing the above codes, you will see the screen as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/flask_message_flashing_example.jpg\" alt=\"Flask Message Flashing Example\"/></figure>\n\n\n\n<p>When you click on the link, you will be directed to the Login page.</p>\n\n\n\n<p>Enter the Username and password.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/login_page.jpg\" alt=\"Login Page\"/></figure>\n\n\n\n<p>Click&nbsp;<strong>Login</strong>. A message will be displayed “You were successfully logged in” .</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/successfully_logged_in_page.jpg\" alt=\"Successfully Logged in Page\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A good GUI based application provides feedback to a user about the interaction. For example, the desktop applications use dialog or message box and JavaScript uses alerts for similar purpose. Generating such informative messages is easy in Flask web application. Flashing system of Flask framework makes it possible to create a message in one view [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1977,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/866"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=866"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/866/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1977"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=866"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=866"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=866"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4575,
    "date": "2020-05-16T10:22:24",
    "date_gmt": "2020-05-16T10:22:24",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=867"
    },
    "modified": "2020-05-16T10:22:24",
    "modified_gmt": "2020-05-16T10:22:24",
    "slug": "file-uploading-8",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/file-uploading-8/",
    "title": {
      "rendered": "File Uploading"
    },
    "content": {
      "rendered": "\n<p>Handling file upload in Flask is very easy. It needs an HTML form with its enctype attribute set to ‘multipart/form-data’, posting the file to a URL. The URL handler fetches file from&nbsp;<strong>request.files[]</strong>&nbsp;object and saves it to the desired location.</p>\n\n\n\n<p>Each uploaded file is first saved in a temporary location on the server, before it is actually saved to its ultimate location. Name of destination file can be hard-coded or can be obtained from filename property of&nbsp;<strong>request.files[file]</strong>&nbsp;object. However, it is recommended to obtain a secure version of it using the&nbsp;<strong>secure_filename()</strong>&nbsp;function.</p>\n\n\n\n<p>It is possible to define the path of default upload folder and maximum size of uploaded file in configuration settings of Flask object.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>app.config[‘UPLOAD_FOLDER’]</td><td>Defines path for upload folder</td></tr><tr><td>app.config[‘MAX_CONTENT_PATH’]</td><td>Specifies maximum size of file yo be uploaded – in bytes</td></tr></tbody></table></figure>\n\n\n\n<p>The following code has&nbsp;<strong>‘/upload’</strong>&nbsp;URL rule that displays&nbsp;<strong>‘upload.html’</strong>&nbsp;from the templates folder, and&nbsp;<strong>‘/upload-file’</strong>&nbsp;URL rule that calls&nbsp;<strong>uploader()</strong>&nbsp;function handling upload process.</p>\n\n\n\n<p><strong>‘upload.html’</strong>&nbsp;has a file chooser button and a submit button.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;form action = \"http://localhost:5000/uploader\" method = \"POST\" \n         enctype = \"multipart/form-data\">\n         &lt;input type = \"file\" name = \"file\" />\n         &lt;input type = \"submit\"/>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>You will see the screen as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/flask_file_uploading.jpg\" alt=\"Flask File Uploading\"/></figure>\n\n\n\n<p>Click&nbsp;<strong>Submit</strong>&nbsp;after choosing file. Form’s post method invokes&nbsp;<strong>‘/upload_file’</strong>&nbsp;URL. The underlying function&nbsp;<strong>uploader()</strong>&nbsp;does the save operation.</p>\n\n\n\n<p>Following is the Python code of Flask application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, render_template, request\nfrom werkzeug import secure_filename\napp = Flask(__name__)\n\n@app.route('/upload')\ndef upload_file():\n   return render_template('upload.html')\n\t\n@app.route('/uploader', methods = &#91;'GET', 'POST'])\ndef upload_file():\n   if request.method == 'POST':\n      f = request.files&#91;'file']\n      f.save(secure_filename(f.filename))\n      return 'file uploaded successfully'\n\t\t\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Handling file upload in Flask is very easy. It needs an HTML form with its enctype attribute set to ‘multipart/form-data’, posting the file to a URL. The URL handler fetches file from&nbsp;request.files[]&nbsp;object and saves it to the desired location. Each uploaded file is first saved in a temporary location on the server, before it is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1978,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4575"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4575"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4575/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1978"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4575"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4575"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4575"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4577,
    "date": "2020-05-16T10:24:11",
    "date_gmt": "2020-05-16T10:24:11",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=890"
    },
    "modified": "2020-05-16T10:24:11",
    "modified_gmt": "2020-05-16T10:24:11",
    "slug": "extension",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/extension/",
    "title": {
      "rendered": "Extension"
    },
    "content": {
      "rendered": "\n<p>Flask is often referred to as a micro framework, because a core functionality includes WSGI and routing based on&nbsp;<strong>Werkzeug</strong>&nbsp;and template engine based on&nbsp;<strong>Jinja2</strong>. In addition, Flask framework has support for cookie and sessions as well as web helpers like&nbsp;<strong>JSON</strong>, static files etc. Obviously, this is not enough for the development of a full-fledged web application. This is where the Flask extensions come in picture. Flask extensions give extensibility to Flask framework.</p>\n\n\n\n<p>There are a large number of Flask extensions available. A Flask extension is a Python module, which adds specific type of support to the Flask application. Flask Extension Registry is a directory of extensions available. The required extension can be downloaded by&nbsp;<strong>pip</strong>&nbsp;utility.</p>\n\n\n\n<p>In this tutorial, we will discuss the following important Flask extensions −</p>\n\n\n\n<ul><li><strong>Flask Mail</strong>&nbsp;− provides SMTP interface to Flask application</li><li><strong>Flask WTF</strong>&nbsp;− adds rendering and validation of WTForms</li><li><strong>Flask SQLAlchemy</strong>&nbsp;− adds SQLAlchemy support to Flask application</li><li><strong>Flask Sijax</strong>&nbsp;− Interface for Sijax &#8211; Python/jQuery library that makes AJAX easy to use in web applications</li></ul>\n\n\n\n<p>Each type of extension usually provides extensive documentation about its usage. Since an extension is a Python module, it needs to be imported for it to be used. Flask extensions are generally named as flask-foo. To import,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask_foo import &#91;class, function]\n</code></pre>\n\n\n\n<p>For versions of Flask later than 0.7, you can also use the syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask.ext import foo\n</code></pre>\n\n\n\n<p>For this usage, a compatibility module needs to be activated. It can be installed by running flaskext_compat.py</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import flaskext_compat\nflaskext_compat.activate()\nfrom flask.ext import foo</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Flask is often referred to as a micro framework, because a core functionality includes WSGI and routing based on&nbsp;Werkzeug&nbsp;and template engine based on&nbsp;Jinja2. In addition, Flask framework has support for cookie and sessions as well as web helpers like&nbsp;JSON, static files etc. Obviously, this is not enough for the development of a full-fledged web application. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1979,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4577"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4577"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4577/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1979"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4577"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4577"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4577"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4578,
    "date": "2020-05-16T10:26:18",
    "date_gmt": "2020-05-16T10:26:18",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=891"
    },
    "modified": "2020-05-16T10:26:18",
    "modified_gmt": "2020-05-16T10:26:18",
    "slug": "mail",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/mail/",
    "title": {
      "rendered": "Mail"
    },
    "content": {
      "rendered": "\n<p>A web based application is often required to have a feature of sending mail to the users/clients.&nbsp;<strong>Flask-Mail</strong>&nbsp;extension makes it very easy to set up a simple interface with any email server.</p>\n\n\n\n<p>At first, Flask-Mail extension should be installed with the help of pip utility.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install Flask-Mail\n</code></pre>\n\n\n\n<p>Then Flask-Mail needs to be configured by setting values of the following application parameters.</p>\n\n\n\n<table><tbody><tr><th>Sr.No</th><th>Parameters &amp; Description</th></tr><tr><td>1</td><td><strong>MAIL_SERVER</strong>Name/IP address of email server</td></tr><tr><td>2</td><td><strong>MAIL_PORT</strong>Port number of server used</td></tr><tr><td>3</td><td><strong>MAIL_USE_TLS</strong>Enable/disable Transport Security Layer encryption</td></tr><tr><td>4</td><td><strong>MAIL_USE_SSL</strong>Enable/disable Secure Sockets Layer encryption</td></tr><tr><td>5</td><td><strong>MAIL_DEBUG</strong>Debug support. Default is Flask application’s debug status</td></tr><tr><td>6</td><td><strong>MAIL_USERNAME</strong>User name of sender</td></tr><tr><td>7</td><td><strong>MAIL_PASSWORD</strong>password of sender</td></tr><tr><td>8</td><td><strong>MAIL_DEFAULT_SENDER</strong>sets default sender</td></tr><tr><td>9</td><td><strong>MAIL_MAX_EMAILS</strong>Sets maximum mails to be sent</td></tr><tr><td>10</td><td><strong>MAIL_SUPPRESS_SEND</strong>Sending suppressed if app.testing set to true</td></tr><tr><td>11</td><td><strong>MAIL_ASCII_ATTACHMENTS</strong>If set to true, attached filenames converted to ASCII</td></tr></tbody></table>\n\n\n\n<p>The flask-mail module contains definitions of the following important classes.</p>\n\n\n\n<h2>Mail class</h2>\n\n\n\n<p>It manages email-messaging requirements. The class constructor takes the following form −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flask-mail.Mail(app = None)\n</code></pre>\n\n\n\n<p>The Constructor takes the Flask application object as a parameter.</p>\n\n\n\n<h2>Methods of Mail class</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td><strong>send()</strong>Sends contents of Message class object</td></tr><tr><td>2</td><td><strong>connect()</strong>Opens connection with mail host</td></tr><tr><td>3</td><td><strong>send_message()</strong>Sends message object</td></tr></tbody></table></figure>\n\n\n\n<h2>Message class</h2>\n\n\n\n<p>It encapsulates an email message. Message class constructor has several parameters −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flask-mail.Message(subject, recipients, body, html, sender, cc, bcc, \n   reply-to, date, charset, extra_headers, mail_options, rcpt_options)</code></pre>\n\n\n\n<h2>Message class methods</h2>\n\n\n\n<p><strong>attach()</strong>&nbsp;− adds an attachment to message. This method takes the following parameters −</p>\n\n\n\n<ul><li><strong>filename</strong>&nbsp;− name of file to attach</li><li><strong>content_type</strong>&nbsp;− MIME type of file</li><li><strong>data</strong>&nbsp;− raw file data</li><li><strong>disposition</strong>&nbsp;− content disposition, if any.</li></ul>\n\n\n\n<p><strong>add_recipient()</strong>&nbsp;− adds another recipient to message</p>\n\n\n\n<p>In the following example, SMTP server of Google’s gmail service is used as MAIL_SERVER for Flask-Mail configuration.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Import Mail and Message class from flask-mail module in the code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask_mail import Mail, Message\n</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Then Flask-Mail is configured as per following settings.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>app.config&#91;'MAIL_SERVER']='smtp.gmail.com'\napp.config&#91;'MAIL_PORT'] = 465\napp.config&#91;'MAIL_USERNAME'] = 'yourId@gmail.com'\napp.config&#91;'MAIL_PASSWORD'] = '*****'\napp.config&#91;'MAIL_USE_TLS'] = False\napp.config&#91;'MAIL_USE_SSL'] = True</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Create an instance of Mail class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mail = Mail(app)\n</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Set up a Message object in a Python function mapped by URL rule&nbsp;<strong>(‘/’)</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@app.route(\"/\")\ndef index():\n   msg = Message('Hello', sender = 'yourId@gmail.com', recipients = &#91;'id1@gmail.com'])\n   msg.body = \"This is the email body\"\n   mail.send(msg)\n   return \"Sent\"</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− The entire code is given below. Run the following script in Python Shell and visit&nbsp;<strong>http://localhost:5000/.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask\nfrom flask_mail import Mail, Message\n\napp =Flask(__name__)\nmail=Mail(app)\n\napp.config&#91;'MAIL_SERVER']='smtp.gmail.com'\napp.config&#91;'MAIL_PORT'] = 465\napp.config&#91;'MAIL_USERNAME'] = 'yourId@gmail.com'\napp.config&#91;'MAIL_PASSWORD'] = '*****'\napp.config&#91;'MAIL_USE_TLS'] = False\napp.config&#91;'MAIL_USE_SSL'] = True\nmail = Mail(app)\n\n@app.route(\"/\")\ndef index():\n   msg = Message('Hello', sender = 'yourId@gmail.com', recipients = &#91;'id1@gmail.com'])\n   msg.body = \"Hello Flask message sent from Flask-Mail\"\n   mail.send(msg)\n   return \"Sent\"\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>Note that the built-insecurity features in Gmail service may block this login attempt. You may have to decrease the security level. Please log in to your Gmail account and visit&nbsp;this&nbsp;link to decrease the security.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/decrease_the_security.jpg\" alt=\"Decrease the Security\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A web based application is often required to have a feature of sending mail to the users/clients.&nbsp;Flask-Mail&nbsp;extension makes it very easy to set up a simple interface with any email server. At first, Flask-Mail extension should be installed with the help of pip utility. Then Flask-Mail needs to be configured by setting values of the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1980,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4578"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4578"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4578/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1980"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4578"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4578"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4578"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4579,
    "date": "2020-05-16T10:28:38",
    "date_gmt": "2020-05-16T10:28:38",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=892"
    },
    "modified": "2020-05-16T10:28:38",
    "modified_gmt": "2020-05-16T10:28:38",
    "slug": "wtf",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/wtf/",
    "title": {
      "rendered": "WTF"
    },
    "content": {
      "rendered": "\n<p>One of the essential aspects of a web application is to present a user interface for the user. HTML provides a&nbsp;<strong>&lt;form&gt;</strong>&nbsp;tag, which is used to design an interface. A&nbsp;<strong>Form’s</strong>&nbsp;elements such as text input, radio, select etc. can be used appropriately.</p>\n\n\n\n<p>Data entered by a user is submitted in the form of Http request message to the server side script by either GET or POST method.</p>\n\n\n\n<ul><li>The Server side script has to recreate the form elements from http request data. So in effect, form elements have to be defined twice – once in HTML and again in the server side script.</li><li>Another disadvantage of using HTML form is that it is difficult (if not impossible) to render the form elements dynamically. HTML itself provides no way to validate a user’s input.</li></ul>\n\n\n\n<p>This is where&nbsp;<strong>WTForms</strong>, a flexible form, rendering and validation library comes handy. Flask-WTF extension provides a simple interface with this&nbsp;<strong>WTForms</strong>&nbsp;library.</p>\n\n\n\n<p>Using&nbsp;<strong>Flask-WTF</strong>, we can define the form fields in our Python script and render them using an HTML template. It is also possible to apply validation to the&nbsp;<strong>WTF</strong>&nbsp;field.</p>\n\n\n\n<p>Let us see how this dynamic generation of HTML works.</p>\n\n\n\n<p>First, Flask-WTF extension needs to be installed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install flask-WTF\n</code></pre>\n\n\n\n<p>The installed package contains a&nbsp;<strong>Form</strong>&nbsp;class, which has to be used as a parent for user- defined form.</p>\n\n\n\n<p><strong>WTforms</strong>&nbsp;package contains definitions of various form fields. Some&nbsp;<strong>Standard form fields</strong>&nbsp;are listed below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Standard Form Fields &amp; Description</th></tr><tr><td>1</td><td><strong>TextField</strong>Represents &lt;input type = &#8216;text&#8217;&gt; HTML form element</td></tr><tr><td>2</td><td><strong>BooleanField</strong>Represents &lt;input type = &#8216;checkbox&#8217;&gt; HTML form element</td></tr><tr><td>3</td><td><strong>DecimalField</strong>Textfield for displaying number with decimals</td></tr><tr><td>4</td><td><strong>IntegerField</strong>TextField for displaying integer</td></tr><tr><td>5</td><td><strong>RadioField</strong>Represents &lt;input type = &#8216;radio&#8217;&gt; HTML form element</td></tr><tr><td>6</td><td><strong>SelectField</strong>Represents select form element</td></tr><tr><td>7</td><td><strong>TextAreaField</strong>Represents &lt;testarea&gt; html form element</td></tr><tr><td>8</td><td><strong>PasswordField</strong>Represents &lt;input type = &#8216;password&#8217;&gt; HTML form element</td></tr><tr><td>9</td><td><strong>SubmitField</strong>Represents &lt;input type = &#8216;submit&#8217;&gt; form element</td></tr></tbody></table></figure>\n\n\n\n<p>For example, a form containing a text field can be designed as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask_wtf import Form\nfrom wtforms import TextField\n\nclass ContactForm(Form):\n   name = TextField(\"Name Of Student\")</code></pre>\n\n\n\n<p>In addition to the&nbsp;<strong>‘name’</strong>&nbsp;field, a hidden field for CSRF token is created automatically. This is to prevent&nbsp;<strong>Cross Site Request Forgery</strong>&nbsp;attack.</p>\n\n\n\n<p>When rendered, this will result into an equivalent HTML script as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input id = \"csrf_token\" name = \"csrf_token\" type = \"hidden\" />\n&lt;label for = \"name\">Name Of Student&lt;/label>&lt;br>\n&lt;input id = \"name\" name = \"name\" type = \"text\" value = \"\" /></code></pre>\n\n\n\n<p>A user-defined form class is used in a Flask application and the form is rendered using a template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, render_template\nfrom forms import ContactForm\napp = Flask(__name__)\napp.secret_key = 'development key'\n\n@app.route('/contact')\ndef contact():\n   form = ContactForm()\n   return render_template('contact.html', form = form)\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>WTForms package also contains validator class. It is useful in applying validation to form fields. Following list shows commonly used validators.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Validators Class &amp; Description</th></tr><tr><td>1</td><td><strong>DataRequired</strong>Checks whether input field is empty</td></tr><tr><td>2</td><td><strong>Email</strong>Checks whether text in the field follows email ID conventions</td></tr><tr><td>3</td><td><strong>IPAddress</strong>Validates IP address in input field</td></tr><tr><td>4</td><td><strong>Length</strong>Verifies if length of string in input field is in given range</td></tr><tr><td>5</td><td><strong>NumberRange</strong>Validates a number in input field within given range</td></tr><tr><td>6</td><td><strong>URL</strong>Validates URL entered in input field</td></tr></tbody></table></figure>\n\n\n\n<p>We shall now apply&nbsp;<strong>‘DataRequired’</strong>&nbsp;validation rule for the&nbsp;<strong>name</strong>&nbsp;field in contact form.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">name = TextField(\"Name Of Student\",[validators.Required(\"Please enter your name.\")])\n</pre>\n\n\n\n<p>The&nbsp;<strong>validate()</strong>&nbsp;function of form object validates the form data and throws the validation errors if validation fails. The&nbsp;<strong>Error</strong>&nbsp;messages are sent to the template. In the HTML template, error messages are rendered dynamically.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{% for message in form.name.errors %}\n   {{ message }}\n{% endfor %}</code></pre>\n\n\n\n<p>The following example demonstrates the concepts given above. The design of&nbsp;<strong>Contact form</strong>&nbsp;is given below&nbsp;<strong>(forms.py)</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask_wtf import Form\nfrom wtforms import TextField, IntegerField, TextAreaField, SubmitField, RadioField,\n   SelectField\n\nfrom wtforms import validators, ValidationError\n\nclass ContactForm(Form):\n   name = TextField(\"Name Of Student\",&#91;validators.Required(\"Please enter \n      your name.\")])\n   Gender = RadioField('Gender', choices = &#91;('M','Male'),('F','Female')])\n   Address = TextAreaField(\"Address\")\n   \n   email = TextField(\"Email\",&#91;validators.Required(\"Please enter your email address.\"),\n      validators.Email(\"Please enter your email address.\")])\n   \n   Age = IntegerField(\"age\")\n   language = SelectField('Languages', choices = &#91;('cpp', 'C++'), \n      ('py', 'Python')])\n   submit = SubmitField(\"Send\")</code></pre>\n\n\n\n<p>Validators are applied to the&nbsp;<strong>Name</strong>&nbsp;and&nbsp;<strong>Email</strong>&nbsp;fields.</p>\n\n\n\n<p>Given below is the Flask application script&nbsp;<strong>(formexample.py)</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flask import Flask, render_template, request, flash\nfrom forms import ContactForm\napp = Flask(__name__)\napp.secret_key = 'development key'\n\n@app.route('/contact', methods = &#91;'GET', 'POST'])\ndef contact():\n   form = ContactForm()\n   \n   if request.method == 'POST':\n      if form.validate() == False:\n         flash('All fields are required.')\n         return render_template('contact.html', form = form)\n      else:\n         return render_template('success.html')\n      elif request.method == 'GET':\n         return render_template('contact.html', form = form)\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>The Script of the template&nbsp;<strong>(contact.html)</strong>&nbsp;is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html>\n   &lt;body>\n      &lt;h2 style = \"text-align: center;\">Contact Form&lt;/h2>\n\t\t\n      {% for message in form.name.errors %}\n         &lt;div>{{ message }}&lt;/div>\n      {% endfor %}\n      \n      {% for message in form.email.errors %}\n         &lt;div>{{ message }}&lt;/div>\n      {% endfor %}\n      \n      &lt;form action = \"http://localhost:5000/contact\" method = post>\n         &lt;fieldset>\n            &lt;legend>Contact Form&lt;/legend>\n            {{ form.hidden_tag() }}\n            \n            &lt;div style = font-size:20px; font-weight:bold; margin-left:150px;>\n               {{ form.name.label }}&lt;br>\n               {{ form.name }}\n               &lt;br>\n               \n               {{ form.Gender.label }} {{ form.Gender }}\n               {{ form.Address.label }}&lt;br>\n               {{ form.Address }}\n               &lt;br>\n               \n               {{ form.email.label }}&lt;br>\n               {{ form.email }}\n               &lt;br>\n               \n               {{ form.Age.label }}&lt;br>\n               {{ form.Age }}\n               &lt;br>\n               \n               {{ form.language.label }}&lt;br>\n               {{ form.language }}\n               &lt;br>\n               {{ form.submit }}\n            &lt;/div>\n            \n         &lt;/fieldset>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Run&nbsp;<strong>formexample.py</strong>&nbsp;in Python shell and visit URL&nbsp;<strong>http://localhost:5000/contact</strong>. The&nbsp;<strong>Contact</strong>&nbsp;form will be displayed as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/form_example.jpg\" alt=\"Form Example\"/></figure>\n\n\n\n<p>If there are any errors, the page will look like this −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/form_error_page.jpg\" alt=\"Form Error Page\"/></figure>\n\n\n\n<p>If there are no errors,&nbsp;<strong>‘success.html’</strong>&nbsp;will be rendered.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flask/images/form_success_page.jpg\" alt=\"Form Success Page\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>One of the essential aspects of a web application is to present a user interface for the user. HTML provides a&nbsp;&lt;form&gt;&nbsp;tag, which is used to design an interface. A&nbsp;Form’s&nbsp;elements such as text input, radio, select etc. can be used appropriately. Data entered by a user is submitted in the form of Http request message to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1981,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4579"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4579"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4579/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1981"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4579"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4579"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4579"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4580,
    "date": "2020-05-16T10:30:03",
    "date_gmt": "2020-05-16T10:30:03",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=893"
    },
    "modified": "2020-05-16T10:30:03",
    "modified_gmt": "2020-05-16T10:30:03",
    "slug": "sijax",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/sijax/",
    "title": {
      "rendered": "Sijax"
    },
    "content": {
      "rendered": "\n<p><strong>Sijax</strong>&nbsp;stands for&nbsp;<strong>‘Simple Ajax’</strong>&nbsp;and it is a&nbsp;<strong>Python/jQuery</strong>&nbsp;library designed to help you easily bring&nbsp;<strong>Ajax</strong>&nbsp;to your application. It uses&nbsp;<strong>jQuery.ajax</strong>&nbsp;to make AJAX requests.</p>\n\n\n\n<h2>Installation</h2>\n\n\n\n<p>Installation of Flask-Sijax is easy.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install flask-sijax\n</code></pre>\n\n\n\n<h2>Configuration</h2>\n\n\n\n<ul><li><strong>SIJAX_STATIC_PATH</strong>&nbsp;− the static path where you want the Sijax javascript files to be mirrored. The default location is&nbsp;<strong>static/js/sijax</strong>. In this folder,&nbsp;<strong>sijax.js</strong>&nbsp;and&nbsp;<strong>json2.js</strong>&nbsp;files are kept.</li><li><strong>SIJAX_JSON_URI</strong>&nbsp;− the URI to load the json2.js static file from</li></ul>\n\n\n\n<p>Sijax uses&nbsp;<strong>JSON</strong>&nbsp;to pass the data between the browser and the server. This means that the browsers need either to support&nbsp;<strong>JSON</strong>&nbsp;natively or get&nbsp;<strong>JSON</strong>&nbsp;support from the&nbsp;<strong>json2.js</strong>&nbsp;file.</p>\n\n\n\n<p>Functions registered that way cannot provide&nbsp;<strong>Sijax</strong>&nbsp;functionality, because they cannot be accessed using a&nbsp;<strong>POST</strong>&nbsp;method by default (and Sijax uses POST requests).</p>\n\n\n\n<p>To make a&nbsp;<strong>View</strong>&nbsp;function capable of handling&nbsp;<strong>Sijax</strong>&nbsp;requests, make it accessible via POST using&nbsp;<strong>@app.route(&#8216;/url&#8217;, methods = [&#8216;GET&#8217;, &#8216;POST&#8217;])</strong>&nbsp;or use the&nbsp;<strong>@flask_sijax.route</strong>&nbsp;helper decorator like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@flask_sijax.route(app, '/hello')\n</code></pre>\n\n\n\n<p>Every Sijax handler function (like this one) receives at least one parameter automatically, much like Python passes ‘self’ to the object methods. The&nbsp;<strong>‘obj_response’</strong>&nbsp;parameter is the function&#8217;s way of talking back to the browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def say_hi(obj_response):\n   obj_response.alert('Hi there!')</code></pre>\n\n\n\n<p>When Sijax request is detected, Sijax handles it like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>g.sijax.register_callback('say_hi', say_hi)\n   return g.sijax.process_request()</code></pre>\n\n\n\n<h2>Sijax Application</h2>\n\n\n\n<p>A minimal Sijax application code looks as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import os\nfrom flask import Flask, g\nfrom flask_sijax import sijax\n\npath = os.path.join('.', os.path.dirname(__file__), 'static/js/sijax/')\napp = Flask(__name__)\n\napp.config&#91;'SIJAX_STATIC_PATH'] = path\napp.config&#91;'SIJAX_JSON_URI'] = '/static/js/sijax/json2.js'\nflask_sijax.Sijax(app)\n\n@app.route('/')\ndef index():\n   return 'Index'\n\t\n@flask_sijax.route(app, '/hello')\ndef hello():\n   def say_hi(obj_response):\n      obj_response.alert('Hi there!')\n   if g.sijax.is_sijax_request:\n      # Sijax request detected - let Sijax handle it\n      g.sijax.register_callback('say_hi', say_hi)\n      return g.sijax.process_request()\n      return _render_template('sijaxexample.html')\n\nif __name__ == '__main__':\n   app.run(debug = True)</code></pre>\n\n\n\n<p>When a Sijax requests (a special&nbsp;<strong>jQuery.ajax()</strong>&nbsp;request) to the server, this request is detected on the server by&nbsp;<strong>g.sijax.is_sijax_request()</strong>, in which case you let&nbsp;<strong>Sijax</strong>&nbsp;handle the request.</p>\n\n\n\n<p>All the functions registered using&nbsp;<strong>g.sijax.register_callback()</strong>&nbsp;are exposed for calling from the browser.</p>\n\n\n\n<p>Calling&nbsp;<strong>g.sijax.process_request()</strong>&nbsp;tells Sijax to execute the appropriate (previously registered) function and return the response to the browser.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Sijax&nbsp;stands for&nbsp;‘Simple Ajax’&nbsp;and it is a&nbsp;Python/jQuery&nbsp;library designed to help you easily bring&nbsp;Ajax&nbsp;to your application. It uses&nbsp;jQuery.ajax&nbsp;to make AJAX requests. Installation Installation of Flask-Sijax is easy. Configuration SIJAX_STATIC_PATH&nbsp;− the static path where you want the Sijax javascript files to be mirrored. The default location is&nbsp;static/js/sijax. In this folder,&nbsp;sijax.js&nbsp;and&nbsp;json2.js&nbsp;files are kept. SIJAX_JSON_URI&nbsp;− the URI to load the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1984,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4580"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4580"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4580/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1984"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4580"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4580"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4580"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4581,
    "date": "2020-05-16T10:31:43",
    "date_gmt": "2020-05-16T10:31:43",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=894"
    },
    "modified": "2020-05-16T10:31:43",
    "modified_gmt": "2020-05-16T10:31:43",
    "slug": "deployment-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/deployment-3/",
    "title": {
      "rendered": "Deployment"
    },
    "content": {
      "rendered": "\n<h2>Externally Visible Server</h2>\n\n\n\n<p>A Flask application on the development server is accessible only on the computer on which the development environment is set up. This is a default behavior, because in debugging mode, a user can execute arbitrary code on the computer.</p>\n\n\n\n<p>If&nbsp;<strong>debug</strong>&nbsp;is disabled, the development server on local computer can be made available to the users on network by setting the host name as&nbsp;<strong>‘0.0.0.0’</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>app.run(host = ’0.0.0.0’)\n</code></pre>\n\n\n\n<p>Thereby, your operating system listens to all public IPs.</p>\n\n\n\n<h2>Deployment</h2>\n\n\n\n<p>To switch over from a development environment to a full-fledged production environment, an application needs to be deployed on a real web server. Depending upon what you have, there are different options available to deploy a Flask web application.</p>\n\n\n\n<p>For small application, you can consider deploying it on any of the following hosted platforms, all of which offer free plan for small application.</p>\n\n\n\n<ul><li>Heroku</li><li>dotcloud</li><li>webfaction</li></ul>\n\n\n\n<p>Flask application can be deployed on these cloud platforms. In addition, it is possible to deploy Flask app on Google cloud platform. Localtunnel service allows you to share your application on localhost without messing with DNS and firewall settings.</p>\n\n\n\n<p>If you are inclined to use a dedicated web server in place of above mentioned shared platforms, following options are there to explore.</p>\n\n\n\n<h2>mod_wsgi</h2>\n\n\n\n<p><strong>mod_wsgi</strong>&nbsp;is an Apache module that provides a WSGI compliant interface for hosting Python based web applications on Apache server.</p>\n\n\n\n<h2>Installing mod_wsgi</h2>\n\n\n\n<p>To install an official release direct from PyPi, you can run −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">pip install mod_wsgi</pre>\n\n\n\n<p>To verify that the installation was successful, run the mod_wsgi-express script with the start-server command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mod_wsgi-express start-server\n</code></pre>\n\n\n\n<p>This will start up Apache/mod_wsgi on port 8000. You can then verify that the installation worked by pointing your browser at −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/\n</code></pre>\n\n\n\n<h2>Creating .wsgi file</h2>\n\n\n\n<p>There should be a&nbsp;<strong>yourapplication.wsgi</strong>&nbsp;file. This file contains the code&nbsp;<strong>mod_wsgi,</strong>&nbsp;which executes on startup to get the application object. For most applications, the following file should be sufficient −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from yourapplication import app as application\n</code></pre>\n\n\n\n<p>Make sure that&nbsp;<strong>yourapplication</strong>&nbsp;and all the libraries that are in use are on the python load path.</p>\n\n\n\n<h2>Configuring Apache</h2>\n\n\n\n<p>You need to tell&nbsp;<strong>mod_wsgi,</strong>&nbsp;the location of your application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;VirtualHost *>\n   ServerName example.com\n   WSGIScriptAlias / C:\\yourdir\\yourapp.wsgi\n\n   &lt;Directory C:\\yourdir>\n      Order deny,allow\n      Allow from all\n   &lt;/Directory>\n\n&lt;/VirtualHost></code></pre>\n\n\n\n<h2>Standalone WSGI containers</h2>\n\n\n\n<p>There are many popular servers written in Python that contains WSGI applications and serve HTTP.</p>\n\n\n\n<ul><li>Gunicorn</li><li>Tornado</li><li>Gevent</li><li>Twisted Web</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Externally Visible Server A Flask application on the development server is accessible only on the computer on which the development environment is set up. This is a default behavior, because in debugging mode, a user can execute arbitrary code on the computer. If&nbsp;debug&nbsp;is disabled, the development server on local computer can be made available to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1982,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4581"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4581"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4581/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1982"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4581"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4581"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4581"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 868,
    "date": "2020-05-16T10:32:47",
    "date_gmt": "2020-05-16T10:32:47",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=868"
    },
    "modified": "2020-05-16T10:32:47",
    "modified_gmt": "2020-05-16T10:32:47",
    "slug": "fast-cgi",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/fast-cgi/",
    "title": {
      "rendered": "Fast CGI"
    },
    "content": {
      "rendered": "\n<p>FastCGI is another deployment option for Flask application on web servers like nginix, lighttpd, and Cherokee.</p>\n\n\n\n<h2>Configuring FastCGI</h2>\n\n\n\n<p>First, you need to create the&nbsp;<strong>FastCGI</strong>&nbsp;server file. Let us call it&nbsp;<strong>yourapplication.fcgi</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from flup.server.fcgi import WSGIServer\nfrom yourapplication import app\n\nif __name__ == '__main__':\n   WSGIServer(app).run()</code></pre>\n\n\n\n<p><strong>nginx</strong>&nbsp;and older versions of&nbsp;<strong>lighttpd</strong>&nbsp;need a socket to be explicitly passed to communicate with the&nbsp;<strong>FastCGI</strong>&nbsp;server. For that to work, you need to pass the path to the socket to the&nbsp;<strong>WSGIServer</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>WSGIServer(application, bindAddress = '/path/to/fcgi.sock').run()\n﻿</code></pre>\n\n\n\n<h2>Configuring Apache</h2>\n\n\n\n<p>For a basic Apache deployment, your&nbsp;<strong>.fcgi</strong>&nbsp;file will appear in your application URL e.g.&nbsp;<strong>example.com/yourapplication.fcgi/hello/</strong>. There are few ways to configure your application so that&nbsp;<strong>yourapplication.fcgi</strong>&nbsp;does not appear in the URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;VirtualHost *>\n   ServerName example.com\n   ScriptAlias / /path/to/yourapplication.fcgi/\n&lt;/VirtualHost></code></pre>\n\n\n\n<h2>Configuring lighttpd</h2>\n\n\n\n<p>Basic configuration of&nbsp;<strong>lighttpd</strong>&nbsp;looks like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fastcgi.server = (\"/yourapplication.fcgi\" => ((\n   \"socket\" => \"/tmp/yourapplication-fcgi.sock\",\n   \"bin-path\" => \"/var/www/yourapplication/yourapplication.fcgi\",\n   \"check-local\" => \"disable\",\n   \"max-procs\" => 1\n)))\n\nalias.url = (\n   \"/static/\" => \"/path/to/your/static\"\n)\n\nurl.rewrite-once = (\n   \"^(/static($|/.*))$\" => \"$1\",\n   \"^(/.*)$\" => \"/yourapplication.fcgi$1\"\n)</code></pre>\n\n\n\n<p>Remember to enable the&nbsp;<strong>FastCGI</strong>, alias and rewrite modules. This configuration binds the application to&nbsp;<strong>/yourapplication</strong>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>FastCGI is another deployment option for Flask application on web servers like nginix, lighttpd, and Cherokee. Configuring FastCGI First, you need to create the&nbsp;FastCGI&nbsp;server file. Let us call it&nbsp;yourapplication.fcgi. nginx&nbsp;and older versions of&nbsp;lighttpd&nbsp;need a socket to be explicitly passed to communicate with the&nbsp;FastCGI&nbsp;server. For that to work, you need to pass the path to the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 1983,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      72
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/868"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=868"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/868/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1983"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=868"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=868"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=868"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]