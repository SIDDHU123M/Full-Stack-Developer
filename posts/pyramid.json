[{"id":3920,"date":"2020-11-10T17:06:52","date_gmt":"2020-11-10T17:06:52","guid":{"rendered":"http://python3.foobrdigital.com/?p=3920"},"modified":"2020-12-15T11:28:49","modified_gmt":"2020-12-15T11:28:49","slug":"introduction-13","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-13/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>In this series of lessons, we&#8217;re going to learn how to use the <strong>Pyramid</strong> framework in Python. It is an open-source web development framework that uses the Model-View-Controller (MVC) architecture pattern and is based on the Web Server Gateway Interface (WSGI). The Pyramid framework has a lot of useful add-on packages that make web development a lot more convenient. Some other popular alternatives for web development in Python include Django and Flask.</p>\n\n\n\n<h3 id=\"prerequisites\">Prerequisites</h3>\n\n\n\n<p>You need to have basic knowledge of HTML for this series. If you do not have any prior experience with it, we strongly recommend going back and completing our basics section first. You can still follow this series and understand how Pyramid works, but to develop real-world production web applications you will have to go back and learn HTML.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this series of lessons, we&#8217;re going to learn how to use the Pyramid framework in Python. It is an open-source web development framework that uses the Model-View-Controller (MVC) architecture pattern and is based on the Web Server Gateway Interface (WSGI). The Pyramid framework has a lot of useful add-on packages that make web development a lot more convenient. Some other [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[51,126],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3920"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3920"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3920/revisions"}],"predecessor-version":[{"id":3922,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3920/revisions/3922"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3920"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3920"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3920"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3923,"date":"2020-11-10T17:09:53","date_gmt":"2020-11-10T17:09:53","guid":{"rendered":"http://python3.foobrdigital.com/?p=3923"},"modified":"2020-12-15T11:28:49","modified_gmt":"2020-12-15T11:28:49","slug":"architecture","status":"publish","type":"post","link":"https://python3.foobrdigital.com/architecture/","title":{"rendered":"Architecture"},"content":{"rendered":"\n<p>Before we move on and see the code, let&#8217;s first understand WSGI and MVC.</p>\n\n\n\n<p>WSGI is basically a standard which defines the way in which a Python based web application interacts with a server. It governs the process of sending requests to a server, and receiving responses from a server.</p>\n\n\n\n<p>MVC is an architectural pattern which modularizes your application; the model contains the data and business logic of your application, the view displays the relevant information to the user, and the controller is responsible for the interaction between the model and the view.</p>\n\n\n\n<p>Google Maps is a perfect example of the MVC architecture. When we use the route-finding feature in Google Maps, the model contains the code for the algorithm which finds the shortest path from location A to location B, the view is the screen that is shown to you containing the map labeled with the route, and the controller contains the code that uses the shortest path found by the model and displays it to the user through the view. You can also view controller, as the code which receives a request from the view (by the user), forwards it to the model to generate a response, and then displays the response from the model back to the user through a view.</p>\n\n\n\n<p>Besides WSGI and MVC, there are two more terms that you should be familiar with, which are &#8220;routes&#8221; and &#8220;scripts&#8221;. Routes allow your website to be divided into different webpages, with each webpage performing a different function.</p>\n\n\n\n<p>Let&#8217;s consider Facebook as an example. If you wish to view your messages, a new webpage with a different view is opened up for that, if you wish to view your own profile, a new webpage is opened for that, but they are all connected to your main website. That&#8217;s done through routes. Each time you click on a button or link, you are redirected to a new webpage as specified by the routes in our application.</p>\n\n\n\n<p>As for scripts, they simply include configuration settings for our application, and help in managing it.</p>\n\n\n\n<p>We will learn more about all these terms when we create a basic web application using Pyramid. So, let&#8217;s begin.</p>\n","protected":false},"excerpt":{"rendered":"<p>Before we move on and see the code, let&#8217;s first understand WSGI and MVC. WSGI is basically a standard which defines the way in which a Python based web application interacts with a server. It governs the process of sending requests to a server, and receiving responses from a server. MVC is an architectural pattern [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[51,126],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3923"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3923"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3923/revisions"}],"predecessor-version":[{"id":3924,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3923/revisions/3924"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3923"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3923"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3923"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3925,"date":"2020-11-10T17:11:20","date_gmt":"2020-11-10T17:11:20","guid":{"rendered":"http://python3.foobrdigital.com/?p=3925"},"modified":"2020-12-15T11:28:49","modified_gmt":"2020-12-15T11:28:49","slug":"installation-6","status":"publish","type":"post","link":"https://python3.foobrdigital.com/installation-6/","title":{"rendered":"Installation"},"content":{"rendered":"\n<p>Whenever we develop a web application that is to be deployed online, it is always considered a good practice to make a virtual environment first. The virtual environment contains all the libraries, or frameworks and all the other dependencies that are necessary for running the web app. This way, when you deploy your app to a server, you can simply re-install all those libraries on the server, for your application to run smoothly.</p>\n\n\n\n<p>Let&#8217;s create a virtual environment before we move forward. Install virtual environment module by running the command below in your terminal:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ pip install virtualenv\n</code></pre>\n\n\n\n<p>To test that your installation was successful, run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ virtualenv --version\n</code></pre>\n\n\n\n<p>If you see a version number printed to the console then the installation was successful (or&nbsp;<code>virtualenv</code>&nbsp;was already installed on your system).</p>\n\n\n\n<p>To create a virtual environment, first navigate to the folder where you wish to create it, and then run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ virtualenv myvenv\n</code></pre>\n\n\n\n<p><strong>Note</strong>: You can name your virtual environment anything you want. Here we&#8217;re using &#8220;myenv&#8221; for demonstration purposes only.</p>\n\n\n\n<p>The last step is to activate your virtual environment. On Mac, run the following command in the terminal:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ source myvenv/bin/activate\n</code></pre>\n\n\n\n<p>On a Windows machine, you can activate the environment with the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>'Installation folder'\\myvenv\\Scripts\\activate.bat\n</code></pre>\n\n\n\n<p>Now that you have your virtual environment set up, let&#8217;s install Pyramid in it. We will use the pip package manager for that:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ pip install pyramid\n</code></pre>\n\n\n\n<p><strong>Note</strong>: When you are done with working with the application and wish to deactivate your virtual environment, run the following command in the terminal:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ deactivate</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Whenever we develop a web application that is to be deployed online, it is always considered a good practice to make a virtual environment first. The virtual environment contains all the libraries, or frameworks and all the other dependencies that are necessary for running the web app. This way, when you deploy your app to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[51,126],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3925"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3925"}],"version-history":[{"count":2,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3925/revisions"}],"predecessor-version":[{"id":3927,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3925/revisions/3927"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3925"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3925"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3925"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3928,"date":"2020-11-10T17:15:19","date_gmt":"2020-11-10T17:15:19","guid":{"rendered":"http://python3.foobrdigital.com/?p=3928"},"modified":"2020-12-15T11:28:48","modified_gmt":"2020-12-15T11:28:48","slug":"a-simple-example","status":"publish","type":"post","link":"https://python3.foobrdigital.com/a-simple-example/","title":{"rendered":"A Simple Example"},"content":{"rendered":"\n<p>In this section, we will start off by developing a skeleton app to understand how the Pyramid apps are structured and how they communicate at a basic level. After that, we will see how to create applications with multiple views.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># intro.py\n# Import necessary functions to run our web app\n\nfrom wsgiref.simple_server import make_server\nfrom pyramid.config import Configurator\nfrom pyramid.response import Response\n\n# This function receives a request from the user, and returns a response\ndef intro(request):\n    return Response('Hi, My name is Junaid Khalid')\n\n# This function will start a server on our computer (localhost), define the\n# routes for our application, and also add a view to be shown to the user\ndef main():\n    with Configurator() as config:\n\n        config.add_route('intro', '/')\n        config.add_view(intro, route_name='intro')\n        application = config.make_wsgi_app()\n\n    # 8000 is the port number through which the requests of our app will be served\n    server = make_server('0.0.0.0', 8000, application)\n    server.serve_forever()\n\nmain()\n</code></pre>\n\n\n\n<p><strong>Note</strong>: The&nbsp;<code>Configurator</code>&nbsp;module is being used to connect a particular view to a specific route. For instance, on Facebook, the &#8220;My Profile&#8221; view would be different than the &#8220;News Feed&#8221; view, and they both have different URLs as well. This is exactly what a configurator does; connecting a specific URL/route to a particular view.</p>\n\n\n\n<p>Then&nbsp;<code>make_server</code>&nbsp;methods is used to run our application on a local HTTP server on our machine, with an assigned port number.</p>\n\n\n\n<p>The&nbsp;<code>intro</code>&nbsp;function is used to process the requests received from the user, process them, and return the response to the view. Any processing of the request before sending a response, can be done inside this function.</p>\n\n\n\n<p>To run the above application on your workstation, go to the terminal and run the .py file we just created:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ python3 intro.py</code></pre>\n\n\n\n<p>In my case, the filename is intro.py, but yours could be different depending on what you decided to name it.</p>\n\n\n\n<p>Then open any web browser on your PC, and go to this address: <code>http://localhost:8000</code>. You should see a webpage with &#8220;Welcome to CodePoint&#8221; written in a very aesthetically displeasing way. To make it look more pleasant, you can return HTML code as a response as well. For a simple example, let&#8217;s edit the intro function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def intro(request):\n    return Response('&lt;h2 style=\"text-align: center; font-family: verdana; color: blue;\">Welcome to CodePoint.&lt;/h2>')\n</code></pre>\n\n\n\n<p>Replace the intro function with the one above, and see the output now. A lot better, right? This was just an example. You can make it a lot better.</p>\n\n\n\n<p><strong>Remember</strong>: When you make any change in the code, the server is not automatically going to log that. You will have to stop the server, and then restart it to see your changes take effect. To do that, open your terminal where the server is running and press <code>Control+C</code>, this will terminate the server. Then you can restart your server as usual to see the changes.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this section, we will start off by developing a skeleton app to understand how the Pyramid apps are structured and how they communicate at a basic level. After that, we will see how to create applications with multiple views. Note: The&nbsp;Configurator&nbsp;module is being used to connect a particular view to a specific route. For [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[51,126],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3928"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3928"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3928/revisions"}],"predecessor-version":[{"id":3929,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3928/revisions/3929"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3928"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3928"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3928"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3930,"date":"2020-11-10T17:18:54","date_gmt":"2020-11-10T17:18:54","guid":{"rendered":"http://python3.foobrdigital.com/?p=3930"},"modified":"2020-12-15T11:28:48","modified_gmt":"2020-12-15T11:28:48","slug":"conclusion","status":"publish","type":"post","link":"https://python3.foobrdigital.com/conclusion/","title":{"rendered":"Conclusion"},"content":{"rendered":"\n<p>Pyramid is a Python-based Web Development Framework to build web apps with ease. In this tutorial, we learned how to install Pyramid inside a virtual environment and make a basic Web Application using Pyramid which runs on a locally created server on our computer.</p>\n","protected":false},"excerpt":{"rendered":"<p>Pyramid is a Python-based Web Development Framework to build web apps with ease. In this tutorial, we learned how to install Pyramid inside a virtual environment and make a basic Web Application using Pyramid which runs on a locally created server on our computer.</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[51,126],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3930"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3930"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3930/revisions"}],"predecessor-version":[{"id":3931,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3930/revisions/3931"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3930"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3930"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3930"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]