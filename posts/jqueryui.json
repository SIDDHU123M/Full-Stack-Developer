[{"id":72,"date":"2020-07-20T11:04:38","date_gmt":"2020-07-20T11:04:38","guid":{"rendered":"http://javascript.foobrdigital.com/?p=72"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"overview-2","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/overview-2/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p>JqueryUI is a powerful Javascript library built on top of jQuery JavaScript library. UI stands for User interface, It is a set of plug-ins for jQuery that adds new functionalities to the jQuery core library.</p>\n\n\n\n<p>The set of plug-ins in JqueryUI includes interface interactions, effects, animations, widgets, and themes built on top of jQuery JavaScript Library.</p>\n\n\n\n<p>It was released in September 2007, announced in a blog post by John Resig on jquery.com. The latest release, 1.10.4, requires jQuery 1.6 or later version. jQuery UI is a free, open source software, licensed under the MIT License.</p>\n\n\n\n<h2>Features</h2>\n\n\n\n<p>JqueryUI is categorized into four groups, interactions, widgets, effects, utilities. These will be discussed in detail in the subsequent chapters. The structure of the library is as shown in the image below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jqueryui/images/jqueryui_category.jpg\" alt=\"Jquery UI Cartegory\"/></figure>\n\n\n\n<ul><li><strong>Interactions</strong>&nbsp;− These are the interactive plugins like drag, drop, resize and more which give the user the ability to interact with DOM elements.</li><li><strong>Widgets</strong>&nbsp;− Using widgets which are jQuery plugins, you can create user interface elements like accordian,datepicker etc.</li><li><strong>Effects</strong>&nbsp;− These are built on the internal jQuery effects. They contain a full suite of custom animations and transitions for DOM elements.</li><li><strong>Utilities</strong>&nbsp;− These are a set of modular tools the JqueryUI library uses internally.</li></ul>\n\n\n\n<h2>Benefits of JqueryUI</h2>\n\n\n\n<p>The below are some of the benefits of Jquery UI −</p>\n\n\n\n<ul><li>Cohesive and Consistent APIs.</li><li>Comprehensive Browser Support.</li><li>Open Source and Free to Use.</li><li>Good Documentation.</li><li>Powerful Theming Mechanism.</li><li>Stable and Maintenance Friendly.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>JqueryUI is a powerful Javascript library built on top of jQuery JavaScript library. UI stands for User interface, It is a set of plug-ins for jQuery that adds new functionalities to the jQuery core library. The set of plug-ins in JqueryUI includes interface interactions, effects, animations, widgets, and themes built on top of jQuery JavaScript [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/72"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=72"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/72/revisions"}],"predecessor-version":[{"id":73,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/72/revisions/73"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=72"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=72"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=72"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":71,"date":"2020-07-20T11:06:29","date_gmt":"2020-07-20T11:06:29","guid":{"rendered":"http://javascript.foobrdigital.com/?p=71"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"environment-setup","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/environment-setup/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>This chapter will discuss about download and set up of JqueryUI library. We will also briefly study the directory structure and its contents. JqueryUI library can be used in two ways in your web page −</p>\n\n\n\n<ul><li>Downloading UI Library from its official website</li><li>Downloading UI Library from CDNs</li></ul>\n\n\n\n<h2>Download UI Library from Its Official Website</h2>\n\n\n\n<p>When you open the link http://jqueryui.com/, you will see there are three options to download JqueryUI library −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jqueryui/images/jqueryui_downloadpage.jpg\" alt=\"JqueryUI Download Page\"/></figure>\n\n\n\n<ul><li><strong>Custom Download</strong>&nbsp;− Click on this button to download a customized version of library.</li><li><strong>Stable</strong>&nbsp;− Click on this button to get the stable and latest version of JqueryUI library.</li><li><strong>Legacy</strong>&nbsp;− Click on this button to get the previous major release of the JqueryUI library.</li></ul>\n\n\n\n<h2>Custom Download with Download Builder</h2>\n\n\n\n<p>Using Download Builder, you can create a custom build to include only those portions of the library that you need. You can download this new customized version of JqueryUI, depending on the chosen theme. You will see the following screen (same page is split into two images) −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jqueryui/images/jqueryui_custom_downloadpage_1.jpg\" alt=\"JqueryUI Custom Download Page\"/></figure>\n\n\n\n<p>This is useful when you require only specific plugins or features of the JqueryUI library. The directory structure of this version is shown in the following figure −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jqueryui/images/jqueryui_custom_directorystruct.jpg\" alt=\"JqueryUI Custom Directory Structure Page\"/></figure>\n\n\n\n<p>Uncompressed files are located in the&nbsp;<em>development-bundle</em>&nbsp;directory. The uncompressed file is best used during development or debugging; the compressed file saves bandwidth and improves performance in production.</p>\n\n\n\n<h2>Stable download</h2>\n\n\n\n<p>Click on the Stable button, which leads directly to a ZIP file containing the sources, examples, and documentation for latest version of JqueryUI library. Extract the ZIP file contents to a&nbsp;<em>jqueryui</em>&nbsp;directory.</p>\n\n\n\n<p>This version contains all files including all dependencies, a large collection of demos, and even the library’s unit test suite. This version is helpful to getting started.</p>\n\n\n\n<h2>Legacy download</h2>\n\n\n\n<p>Click on the Legacy button, which leads directly to a ZIP file of previous major release of JqueryUI library. This version also contains all files including all dependencies, a large collection of demos, and even the library’s unit test suite. This version is helpful to get you started.</p>\n\n\n\n<h2>Download UI Library from CDNs</h2>\n\n\n\n<p>A CDN or Content Delivery Network is a network of servers designed to serve files to users. If you use a CDN link in your web page, it moves the responsibility of hosting files from your own servers to a series of external ones. This also offers an advantage that if the visitor to your webpage has already downloaded a copy of JqueryUI from the same CDN, it won&#8217;t have to be re-downloaded.</p>\n\n\n\n<p>The jQuery Foundation, Google, and Microsoft all provide CDNs that host jQuery core as well as jQuery UI.</p>\n\n\n\n<p>Because a CDN does not require you to host your own version of jQuery and jQuery UI, it is perfect for demos and experimentation.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>We are using the CDN versions of the library throughout this tutorial.</p></blockquote>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Now let us write a simple example using JqueryUI. Let us create an HTML file, copy the following content to the &lt;head> tag −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n   rel = \"stylesheet\">\n&lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n&lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script></code></pre>\n\n\n\n<p>Details of the above code are −</p>\n\n\n\n<ul><li>The first line, adds jQuery UI theme (in our case&nbsp;<em>ui-lightness</em>) via CSS. This CSS will make our UI stylish.</li><li>Second line, adds the jQuery library, as jQuery UI is built on top of jQuery library.</li><li>Third line, adds the jQuery UI library. This enables jQuery UI in your page.</li></ul>\n\n\n\n<p>Now let&#8217;s add some content to &lt;head> tag −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script type = \"text/javascript\">\n   $(function () {\n      $('#dialogMsg').dialog();\n   });\n&lt;/script></code></pre>\n\n\n\n<p>In the &lt;body> add this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;body>\n   &lt;form id = \"form1\" runat = \"server\">\n      &lt;div id = \"dialogMsg\" title = \"First JqueryUI Example\">\n         Hello this is my first JqueryUI example.\n      &lt;/div>\n   &lt;/form>\n&lt;/body></code></pre>\n\n\n\n<p>The complete HTML code is as follows. Save it as <strong>myfirstexample.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script type = \"text/javascript\">\n         $(function () {\n            $('#dialogMsg').dialog();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;form id = \"form1\" runat = \"server\">\n         &lt;div id = \"dialogMsg\" title = \"First JqueryUI Example\">\n            Hello this is my first JqueryUI example.\n         &lt;/div>\n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Open the above page in your browser. It will produce the following screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jqueryui/images/jqueryui_first_example_demo.jpg\" alt=\"JqueryUI Fist Example Demo\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss about download and set up of JqueryUI library. We will also briefly study the directory structure and its contents. JqueryUI library can be used in two ways in your web page − Downloading UI Library from its official website Downloading UI Library from CDNs Download UI Library from Its Official Website [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/71"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=71"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/71/revisions"}],"predecessor-version":[{"id":74,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/71/revisions/74"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=71"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=71"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=71"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":70,"date":"2020-07-20T11:11:22","date_gmt":"2020-07-20T11:11:22","guid":{"rendered":"http://javascript.foobrdigital.com/?p=70"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"draggable","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/draggable/","title":{"rendered":"Draggable"},"content":{"rendered":"\n<p>jQueryUI provides&nbsp;<strong>draggable()</strong>&nbsp;method to make any DOM element draggable. Once the element is draggable, you can move that element by clicking on it with the mouse and dragging it anywhere within the viewport.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>draggable()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).draggable (options) Method</li><li>$(selector, context).draggable (&#8220;action&#8221;, [params]) Method</li></ul>\n\n\n\n<h2>$ (selector, context).draggable (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>draggable (options)</em>&nbsp;method declares that an HTML element can be moved in the HTML page. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior of the elements involved.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).draggable(options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).draggable({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>addClassesIf this option is set to <strong>false</strong>, it will prevent the <strong>ui-draggable</strong> class from being added in the list of selected DOM elements. By default its value is <strong>true</strong>.</td></tr><tr><td>2</td><td>appendToSpecifies the element in which the draggable helper should be appended to while dragging. By default its value is &#8220;parent&#8221;.</td></tr><tr><td>3</td><td>axisThis option constrains dragging to either the horizontal (x) or vertical (y) axis. Possible values: &#8220;x&#8221;, &#8220;y&#8221;.</td></tr><tr><td>4</td><td>cancelYou can use this option to prevent dragging from starting on specified elements. By default its value is &#8220;input,textarea, button,select,option&#8221;.</td></tr><tr><td>5</td><td>connectToSortableYou can use this option to specify a list whose elements are interchangeable. At the end of placement, the element is part of the list. By default its value is &#8220;false&#8221;.</td></tr><tr><td>6</td><td>containmentConstrains dragging to within the bounds of the specified element or region. By default its value is &#8220;false&#8221;.</td></tr><tr><td>7</td><td>cursorSpecifies the cursor CSS property when the element moves. It represents the shape of the mouse pointer. By default its value is &#8220;auto&#8221;.</td></tr><tr><td>8</td><td>cursorAtSets the offset of the dragging helper relative to the mouse cursor. Coordinates can be given as a hash using a combination of one or two keys: { top, left, right, bottom }. By default its value is &#8220;false&#8221;.</td></tr><tr><td>9</td><td>delayDelay, in milliseconds, after which the first movement of the mouse is taken into account. The displacement may begin after that time. By default its value is &#8220;0&#8221;.</td></tr><tr><td>10</td><td>disabledWhen set to true, disables the ability to move items. Items cannot be moved until this function is enabled (using the draggable (&#8220;enable&#8221;) instruction). By default its value is &#8220;false&#8221;.</td></tr><tr><td>11</td><td>distanceNumber of pixels that the mouse must be moved before the displacement is taken into account. By default its value is &#8220;1&#8221;.</td></tr><tr><td>12</td><td>gridSnaps the dragging helper to a grid, every x and y pixels. The array must be of the form [ x, y ]. By default its value is &#8220;false&#8221;.</td></tr><tr><td>13</td><td>handleIf specified, restricts dragging from starting unless the mousedown occurs on the specified element(s). By default its value is &#8220;false&#8221;.</td></tr><tr><td>14</td><td>helperAllows for a helper element to be used for dragging display. By default its value is &#8220;original&#8221;.</td></tr><tr><td>15</td><td>iframeFixPrevent iframes from capturing the mousemove events during a drag. By default its value is &#8220;false&#8221;.</td></tr><tr><td>16</td><td>opacityOpacity of the element moved when moving. By default its value is &#8220;false&#8221;.</td></tr><tr><td>17</td><td>refreshPositionsIf set to <em>true</em>, all droppable positions are calculated on every mousemove. By default its value is &#8220;false&#8221;.</td></tr><tr><td>18</td><td>revertIndicates whether the element is moved back to its original position at the end of the move. By default its value is &#8220;false&#8221;.</td></tr><tr><td>19</td><td>revertDurationDuration of displacement (in milliseconds) after which the element returns to its original position (see options.revert). By default its value is &#8220;500&#8221;.</td></tr><tr><td>20</td><td>scopeUsed to group sets of draggable and droppable items, in addition to droppable&#8217;s accept option. By default its value is &#8220;default&#8221;.</td></tr><tr><td>21</td><td>scrollWhen set to <em>true</em> (the default), the display will scroll if the item is moved outside the viewable area of the window. By default its value is &#8220;true&#8221;.</td></tr><tr><td>22</td><td>scrollSensitivityIndicates how many pixels the mouse must exit the window to cause scrolling of the display. By default its value is &#8220;20&#8221;.</td></tr><tr><td>23</td><td>scrollSpeedIndicates the scrolling speed of the display once scrolling begins. By default its value is &#8220;20&#8221;.</td></tr><tr><td>24</td><td>snapAdjusts the display of the item being moved on other elements (which are flown). By default its value is &#8220;false&#8221;.</td></tr><tr><td>25</td><td>snapModeSpecifies how the adjustment should be made between the moved element and those indicated in <em>options.snap</em>. By default its value is &#8220;both&#8221;.</td></tr><tr><td>26</td><td>snapToleranceMaximum number of pixels in the difference in position necessary to establish the adjustment. By default its value is &#8220;20&#8221;.</td></tr><tr><td>27</td><td>stackControls the z-index of the set of elements that match the selector, always brings the currently dragged item to the front. Very useful in things like window managers. By default its value is &#8220;false&#8221;.</td></tr><tr><td>28</td><td>zIndexZ-index for the helper while being dragged. By default its value is &#8220;false&#8221;.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of drag functionality.</p>\n\n\n\n<h3>Default functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of draggable functionality passing no parameters to the <strong>draggable()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\" \n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #draggable { width: 150px; height: 150px; padding: 0.5em; background:#eee;}\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#draggable\" ).draggable();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"draggable\" class = \"ui-widget-content\">\n         &lt;p>Drag me !!!&lt;/p>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dragexample.htm</strong> and open it in a standard browser that supports javascript. You must also see the following output. </p>\n\n\n\n<h3>Use of Disable, Distance, and Delay</h3>\n\n\n\n<p>The following example shows the usage of three important options <strong>(a) disabled (b) delay</strong> and <strong>(c) distance</strong> in the drag function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"div1\" style = \"border:solid 1px;background-color:gainsboro;\">\n         &lt;span>You can't move me!&lt;/span>&lt;br />&lt;br />\n      &lt;/div>\n      &lt;div id = \"div2\" style = \"border:solid 1px;background-color:grey;\">\n         &lt;span>\n            Dragging will start only after you drag me for 50px\n         &lt;/span>\n         &lt;br />&lt;br />\n      &lt;/div>\n      &lt;div id = \"div3\" style = \"border:solid 1px;background-color:gainsboro;\">\n         &lt;span>\n            You have to wait for 500ms for dragging to start!\n         &lt;/span>\n         &lt;br />&lt;br />\n      &lt;/div>\n\n      &lt;script>\n         $(\"#div1 span\").draggable (\n            { disabled: true }\n         );\n         $(\"#div2 span\").draggable (\n            { distance: 50 }\n         );\n         $(\"#div3 span\").draggable (\n            { delay: 500 }\n         );\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>dragexample.htm</strong>&nbsp;and open it in a standard browser that supports javascript, you should see the following output. Now, you can play with the result −</p>\n\n\n\n<h3>Constrain Movement</h3>\n\n\n\n<p>The following example shows how to limit the movement of elements on the screen using <strong>containment</strong> option in the drag function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   &lt;/head>\n      \n   &lt;body>\n      &lt;div id = \"div4\" style = \"border:solid 1px;background-color:gainsboro;\">\n         &lt;span>You can drag me only within this div.&lt;/span>&lt;br />&lt;br />\n      &lt;/div>\n      &lt;div id = \"div5\" style = \"border:solid 1px;background-color:grey;\">\n         &lt;span>You can drag me only along x axis.&lt;/span>&lt;br />&lt;br />\n      &lt;/div>\n\n      &lt;script>\n         $(\"#div4 span\").draggable ({\n            containment : \"#div4\"\n         });\n         $(\"#div5 span\").draggable ({\n            axis : \"x\"\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dragexample.htm</strong> and open it in a standard browser which supports javascript. It should produce the following output. </p>\n\n\n\n<p>Here, &lt;span&gt; elements are prevented from going outside a &lt;div&gt; whose ID is div4. You can also impose constraints on vertical or horizontal motion using options&nbsp;<em>axis</em>&nbsp;worth &#8220;x&#8221; or &#8220;y&#8221;, which is also demonstrated.</p>\n\n\n\n<h3>Move content by duplicating</h3>\n\n\n\n<p>The following example demonstrates how to move an item that is the clone of the selected element. This is done using the option <em>helper</em> with value <em>clone</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"div6\" style = \"border:solid 1px;background:#eee; height:50px;\">\n         &lt;span>You can duplicate me....&lt;/span>\n      &lt;/div>\n      \n      &lt;script>\n         $(\"#div6 span\").draggable ({\n            helper : \"clone\"\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dragexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>As you can see when the first element is being dragged, only the cloned element moves, while the original item stays put. If you release the mouse, the cloned element disappears and the original item is still in its original position.</p>\n\n\n\n<h3>Get Current Option Value</h3>\n\n\n\n<p>The following example demonstrates how you can get a value of any option at any time during your script execution. Here we will read the value of <strong>cursor</strong> and <strong>cursorAt</strong> options set at the time of execution. Similar way you can get value of any other options available.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   &lt;/head>\n\n   &lt;body>\n      &lt;div id = \"divX\" style = \"border:solid 1px;background:#eee; height:50px;\">\n         &lt;span>Click anywhere on me to see cursor type...&lt;/span>\n      &lt;/div>\n\n      &lt;script>\n         /* First make the item draggable */\n         $(\"#divX span\").draggable();\n\n         $(\"#divX span\").bind('click', function( event ) {\n            var cursor = $( \"#divX span\" ).draggable( \"option\", \"cursor\" );\n            var cursorAt = $( \"#divX span\" ).draggable( \"option\", \"cursorAt\" );\n            alert(\"Cursor type - \" + cursor + \", cursorAt - \" + cursorAt);\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dragexample.htm</strong> and open it in a standard browser which supports javascript.</p>\n\n\n\n<h2>$ (selector, context).draggable (&#8220;action&#8221;, [params]) Method</h2>\n\n\n\n<p>The&nbsp;<em>draggable (action, params)</em>&nbsp;method can perform an action on the movable elements, such as to prevent displacement. The&nbsp;<strong>action</strong>&nbsp;is specified as a string in the first argument and optionally, one or more&nbsp;<strong>params</strong>&nbsp;can be provided based on the given action.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Basically, Here actions are nothing but they are jQuery methods which we can use in the form of string.</p></blockquote>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).draggable (\"action\", &#91;params]);\n</code></pre>\n\n\n\n<p>The following table lists the actions for this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroy()Remove drag functionality completely. The elements are no longer movable. This will return the element back to its pre-init state.</td></tr><tr><td>2</td><td>disable()Disable drag functionality. Elements cannot be moved until the next call to the draggable(&#8220;enable&#8221;) method.</td></tr><tr><td>3</td><td>enable()Reactivates drag management. The elements can be moved again.</td></tr><tr><td>4</td><td>option(optionName)Gets the value currently associated with the specified <em>optionName</em>. Where <em>optionName</em> is name of the option to get and is of type <em>String</em>.</td></tr><tr><td>5</td><td>option()Gets an object containing key/value pairs representing the current draggable options hash.</td></tr><tr><td>6</td><td>option(optionName, value)Sets the <em>value</em> of the draggable option associated with the specified <em>optionName</em>. Where <em>optionName</em> is the name of the option to set and <em>value</em> is the value to set for the option.</td></tr><tr><td>7</td><td>option(options)Sets one or more options for the draggable. Where <em>options</em> is a map of option-value pairs to set.</td></tr><tr><td>8</td><td>widget()Returns a jQuery object containing the draggable element.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of actions <em>disable</em> and <em>enable</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"div7\" style = \"border:solid 1px;background-color:gainsboro;\">\n         &lt;span>You can't move me. Dragging is disabled.&lt;/span>&lt;br>&lt;br>\n      &lt;/div>\n      &lt;div id = \"div8\" style = \"border:solid 1px;background-color:grey;\">\n         &lt;span>You can move me. Dragging is enabled.&lt;/span>&lt;br>&lt;br>\n      &lt;/div>\n      \n      &lt;script>\n         $(\"#div7 span\").draggable ();\n         $(\"#div7 span\").draggable ('disable');\n         $(\"#div8 span\").draggable ();\n         $(\"#div8 span\").draggable ('enable');\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dragexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>As you can see first element is disabled and the second element&#8217;s dragging is enabled which you can try to drag.</p>\n\n\n\n<h2>Event Management on the Moved elements</h2>\n\n\n\n<p>In addition to the draggable (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>create(event, ui)Triggered when the draggable is created. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>2</td><td>drag(event, ui)Triggered while the mouse is moved during the dragging. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em> like helper, position, offset.</td></tr><tr><td>3</td><td>start(event, ui)Triggered when dragging starts. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em> like helper, position, offset.</td></tr><tr><td>4</td><td>stop(event, ui)Triggered when dragging stops. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em> like helper, position, offset.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the use of event method during drag functionality. This example demonstrates use of <em>drag</em> event.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"div9\" style = \"border:solid 1px;background-color:gainsboro;\">\n         &lt;span>Drag me to check the event method firing&lt;/span>&lt;br />&lt;br />\n      &lt;/div>\n      \n      &lt;script>\n         $(\"#div9 span\").draggable ({\n            cursor: \"move\",\n            axis : \"x\",\n            drag: function( event, ui ) {\n               alert(\"hi..\");\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dragexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Now try to drag the written content and you will see that&nbsp;<strong>start</strong>&nbsp;of a drag event gets fired which results in showing a dialogue box and cursor will change to move icon and text will move in X-axis only.</p>\n","protected":false},"excerpt":{"rendered":"<p>jQueryUI provides&nbsp;draggable()&nbsp;method to make any DOM element draggable. Once the element is draggable, you can move that element by clicking on it with the mouse and dragging it anywhere within the viewport. Syntax The&nbsp;draggable()&nbsp;method can be used in two forms − $(selector, context).draggable (options) Method $(selector, context).draggable (&#8220;action&#8221;, [params]) Method $ (selector, context).draggable (options) Method The&nbsp;draggable (options)&nbsp;method [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/70"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=70"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/70/revisions"}],"predecessor-version":[{"id":75,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/70/revisions/75"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=70"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=70"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=70"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":69,"date":"2020-07-20T11:17:13","date_gmt":"2020-07-20T11:17:13","guid":{"rendered":"http://javascript.foobrdigital.com/?p=69"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"droppable","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/droppable/","title":{"rendered":"Droppable"},"content":{"rendered":"\n<p>jQueryUI provides&nbsp;<strong>droppable()</strong>&nbsp;method to make any DOM element droppable at a specified target (a target for draggable elements).</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>droppable()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).droppable (options)&nbsp;Method</li><li>$(selector, context).droppable (&#8220;action&#8221;, params)&nbsp;Method</li></ul>\n\n\n\n<h2>$ (selector, context).droppable (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>droppable (options)</em>&nbsp;method declares that an HTML element can be used as an element in which you can drop other elements. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior of the elements involved.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).droppable (options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).droppable({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>acceptThis option is used when you need to control which draggable elements are to be accepted for dropping. By default its value is&nbsp;<strong>*</strong>.</td></tr><tr><td>2</td><td>activeClassThis option is a String representing one or more CSS classes to be added to the droppable element when an accepted element (one of those indicated in&nbsp;<em>options.accept</em>) is being dragged. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>3</td><td>addClassesThis option when set to&nbsp;<em>false</em>&nbsp;will prevent the&nbsp;<em>ui-droppable</em>&nbsp;class from being added to the droppable elements. By default its value is&nbsp;<strong>true</strong>.</td></tr><tr><td>4</td><td>disabledThis option when set to&nbsp;<em>true</em>&nbsp;disables the droppable. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>5</td><td>greedyThis option is used when you need to control which draggable elements are to be accepted for dropping on nested droppables. By default its value is&nbsp;<strong>false</strong>. If this option is set to&nbsp;<em>true</em>, any parent droppables will not receive the element.</td></tr><tr><td>6</td><td>hoverClassThis option is&nbsp;<em>String</em>&nbsp;representing one or more CSS classes to be added to the element of droppable when an accepted element (an element indicated in&nbsp;<em>options.accept</em>) moves into it. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>7</td><td>scopeThis option is used to restrict the droppable action of draggable elements only to items that have the same&nbsp;<em>options.scope</em>&nbsp;(defined in draggable (options)). By default its value is&nbsp;<strong>&#8220;default&#8221;</strong>.</td></tr><tr><td>8</td><td>toleranceThis option is a&nbsp;<em>String</em>&nbsp;that specifies which mode to use for testing whether a draggable is hovering over a droppable. By default its value is&nbsp;<strong>&#8220;intersect&#8221;</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of drop functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of droppable functionality, passing no parameters to the&nbsp;<strong>droppable()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Droppable - Default functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;style>\n         #draggable-1 { \n            width: 100px; height: 50px; padding: 0.5em; float: left;\n            margin: 22px 5px 10px 0; \n         }\n         #droppable-1 { \n            width: 120px; height: 90px;padding: 0.5em; float: left; \n            margin: 10px; \t\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#draggable-1\" ).draggable();\n            $( \"#droppable-1\" ).droppable();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"draggable-1\" class = \"ui-widget-content\">\n         &lt;p>Drag me to my target&lt;/p>\n      &lt;/div>\n      &lt;div id = \"droppable-1\" class = \"ui-widget-header\">\n         &lt;p>Drop here&lt;/p>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>dropexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you should see the following output. </p>\n\n\n\n<h3>Use of addClass, disabled and tolerance</h3>\n\n\n\n<p>The following example demonstrates the usage of three options&nbsp;<strong>(a) addClass (b) disabled</strong>&nbsp;and&nbsp;<strong>(c) tolerance</strong>&nbsp;in the drop function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Droppable - Default functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #draggable-2 { \n            width: 100px; height: 50px; padding: 0.5em; \n            margin: 0px 5px 10px 0; \t    \n         }\n         #droppable-2,#droppable-3, #droppable-4,#droppable-5 { \n            width: 120px; height: 90px;padding: 0.5em; float: left; \n            margin: 10px; \n         }\n      &lt;/style>\n\n      &lt;script>\n         $(function() {\n            $( \"#draggable-2\" ).draggable();\n            $( \"#droppable-2\" ).droppable({\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped!\" );\n               }\n            });\n\t\t\t\t\n            $( \"#droppable-3\" ).droppable({\n               disabled : \"true\",\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped!\" );\n               }\n            });\n\t\t\t\t\n            $( \"#droppable-4\" ).droppable({\n               tolerance: 'touch',\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped with a touch!\" );\n               }\n            });\n\t\t\t\t\n            $( \"#droppable-5\" ).droppable({\n               tolerance: 'fit',\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped only when fully fit on the me!\" );\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"draggable-2\" class = \"ui-widget-content\">\n         &lt;p>Drag me to my target&lt;/p>\n      &lt;/div>\n      &lt;div id = \"droppable-2\" class = \"ui-widget-header\">\n         &lt;p>Drop here&lt;/p>\n      &lt;/div>\n      &lt;div id = \"droppable-3\" class = \"ui-widget-header\">\n         &lt;p>I'm disabled, you can't drop here!&lt;/p>\n      &lt;/div>\n      &lt;div id = \"droppable-4\" class = \"ui-widget-header\">\n         &lt;p>Tolerance Touch!&lt;/p>\n      &lt;/div>\n      &lt;div id = \"droppable-5\" class = \"ui-widget-header\">\n         &lt;p>Tolerance Fit!&lt;/p>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>dropexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you should see the following output. </p>\n\n\n\n<p>Now drop the element on the &#8220;Tolerance Touch!&#8221; box (just touch the edge of this box) and see the changes of target element. Now to drop the element on &#8220;Tolerance Fit!&#8221; target, the draggable element has to fully overlap the target element i.e &#8220;Tolerance Fit!&#8221; target.</p>\n\n\n\n<h3>Choose elements to be dropped</h3>\n\n\n\n<p>The following example demonstrates the use of option&nbsp;<strong>accept</strong>&nbsp;and&nbsp;<strong>scope</strong>&nbsp;option in the drag function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Droppable - Default functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .wrap {\n            display: table-row-group;\n         }\n         #japanpeople,#indiapeople, #javatutorial,#springtutorial { \n            width: 120px; height: 70px; padding: 0.5em; float: left;\n            margin: 0px 5px 10px 0; \n         }\n         \n         #japan,#india,#java,#spring { \n            width: 140px; height: 100px;padding: 0.5em; float: left; \n            margin: 10px;  \n         }\n      &lt;/style>\n\n      &lt;script>\n         $(function() {\n            $( \"#japanpeople\" ).draggable();\n            $( \"#indiapeople\" ).draggable();\n\n            $( \"#japan\" ).droppable({\n               accept: \"#japanpeople\",\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped!\" );\n               }\n            });\n\t\t\t\t\n            $( \"#india\" ).droppable({\n               accept: \"#indiapeople\",\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped!\" );\n               }\n            });\n\n            $( \"#javatutorial\" ).draggable({scope : \"java\"});\n            $( \"#springtutorial\" ).draggable({scope : \"spring\"});\n\t\t\t\t\n            $( \"#java\" ).droppable({\n               scope: \"java\",\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped!\" );\n               }\n            });\n\t\t\t\t\n            $( \"#spring\" ).droppable({\n               scope: \"spring\",\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped!\" );\n               }\n            }); \n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"wrap\" >\n         &lt;div id = \"japanpeople\" class = \"ui-widget-content\">\n            &lt;p>People to be dropped to Japan&lt;/p>\n         &lt;/div>\n\n         &lt;div id = \"indiapeople\" class = \"ui-widget-content\">\n            &lt;p>People to be dropped to India&lt;/p>\n         &lt;/div>\n\n         &lt;div id = \"japan\" class = \"ui-widget-header\">\n            &lt;p>Japan&lt;/p>\n         &lt;/div>\n\n         &lt;div id = \"india\" class = \"ui-widget-header\">\n            &lt;p>India&lt;/p>\n         &lt;/div>\n      &lt;/div>\n      &lt;hr/>\n         \n      &lt;div class = \"wrap\" >\n         &lt;div id = \"javatutorial\" class = \"ui-widget-content\">\n            &lt;p>People who want to learn Java&lt;/p>\n         &lt;/div>\n         &lt;div id = \"springtutorial\" class = \"ui-widget-content\">\n            &lt;p>People who want to learn Spring&lt;/p>\n         &lt;/div>\n         &lt;div id = \"java\" class = \"ui-widget-header\">\n            &lt;p>Java&lt;/p>\n         &lt;/div>\n\n         &lt;div id = \"spring\" class = \"ui-widget-header\">\n            &lt;p>Spring&lt;/p>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>dropexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you should see the following output. </p>\n\n\n\n<p>Here you can see that you can drop element &#8220;People from Japan&#8221; on only &#8220;Japan&#8221; target and element &#8220;People from India&#8221; on target India. Similary the scope for &#8220;People who want to learn Java&#8221; is set to target &#8220;Java&#8221; and &#8220;People who want to learn Spring&#8221; is set to &#8220;Spring target&#8221;.</p>\n\n\n\n<h3>Managing appearance</h3>\n\n\n\n<p>The following example demonstrates the use of options&nbsp;<strong>activeClass</strong>&nbsp;and&nbsp;<strong>hoverClass</strong>&nbsp;of JqueryUI class, which help us manage appearance.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Droppable - Default functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style type = \"text/css\">\n         #draggable-3 { \n            width: 100px; height: 50px; padding: 0.5em; float: left;\n            margin: 21px 5px 10px 0;\n         }\n         #droppable-6 { \n            width: 120px; height: 90px;padding: 0.5em; float: left; \n            margin: 10px; \n         }\n         .active {\n            border-color : blue;\n            background : grey;\n         }  \n         .hover {\n            border-color : red;\n            background : green;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#draggable-3\" ).draggable();\n            $( \"#droppable-6\" ).droppable({\n               activeClass: \"active\",\n               hoverClass:  \"hover\",\n               drop: function( event, ui ) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped!\" );\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"draggable-3\" class = \"ui-widget-content\">\n         &lt;p>Drag me to my target&lt;/p>\n      &lt;/div>\n      &lt;div id = \"droppable-6\" class = \"ui-widget-header\">\n         &lt;p>Drop here&lt;/p>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>dropexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>You can notice that on dragging or hovering (over the target) of &#8220;Drag me to my target&#8221; element, changes the color of target element &#8220;Drop here&#8221;.</p>\n\n\n\n<h2>$ (selector, context).droppable (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The <em>droppable (&#8220;action&#8221;, params)</em> method can perform an action on droppable elements, such as preventing droppable functionality. The action is specified as a string in the first argument (e.g., &#8220;disable&#8221; to prevent the drop). Check out the actions that can be passed.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).droppable (\"action\", params);;\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action destroys the droppable functionality of an element completely. The elements return to their pre-init state.</td></tr><tr><td>2</td><td>disableThis action disables the droppable operation. The elements are no longer droppable elements. This method does not accept any arguments.</td></tr><tr><td>3</td><td>enableThis action reactivate the droppable operation. The elements can again receive a droppable element. This method does not accept any arguments.</td></tr><tr><td>4</td><td>optionThis action gets an object containing key/value pairs representing the current droppable options hash. This method does not accept any arguments.</td></tr><tr><td>5</td><td>option( optionName )This action gets the value of currently associated droppable element with the specified&nbsp;<em>optionName</em>. This takes a String value as argument.</td></tr><tr><td>6</td><td>option( optionName, value )This action sets the value of the droppable option associated with the specified&nbsp;<em>optionName</em>.</td></tr><tr><td>7</td><td>option( options )This action is sets one or more options for the droppable. The argument&nbsp;<em>options</em>&nbsp;is a map of option-value pairs to be set.</td></tr><tr><td>8</td><td>widgetThis action returns a jQuery object containing the droppable element. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of&nbsp;<em>destroy()</em>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Droppable - Default functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .draggable-4 { \n            width: 90px; height: 50px; padding: 0.5em; float: left;\n            margin: 0px 5px 10px 0;\n            border: 1px solid red;  \n            background-color:#B9CD6D;\n         }\n         .droppable-7 { \n            width: 100px; height: 90px;padding: 0.5em; float: left; \n            margin: 10px; \n            border: 1px solid black; \n            background-color:#A39480;\n         }\n         .droppable.active { \n            background-color: red; \n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $('.draggable-4').draggable({ revert: true });\n            $('.droppable-7').droppable({\n               hoverClass: 'active',\n               drop: function(e, ui) {\n                  $(this).html(ui.draggable.remove().html());\n                  $(this).droppable('destroy');\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"i'm destroyed!\" );\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"draggable-4\">&lt;p>drag 1&lt;/p>&lt;/div>\n      &lt;div class = \"draggable-4\">&lt;p>drag 2&lt;/p>&lt;/div>\n      &lt;div class = \"draggable-4\">&lt;p>drag 3&lt;/p>&lt;/div>\n\n      &lt;div style = \"clear: both;padding:10px\">&lt;/div>\n\n      &lt;div class = \"droppable-7\">drop here&lt;/div>\n      &lt;div class = \"droppable-7\">drop here&lt;/div>\n      &lt;div class = \"droppable-7\">drop here&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>dropexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>If you drop &#8220;drag1&#8221; on any of the elements named &#8220;drop here&#8221;, you will notice that this element gets dropped and this action destroys the droppable functionality of an element completely. You cannot drop &#8220;drag2&#8221; and &#8220;drag3&#8221; on this element again.</p>\n\n\n\n<h2>Event Management on droppable elements</h2>\n\n\n\n<p>In addition to the droppable (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>activate(event, ui)This event is triggered when the accepted draggable element starts dragging. This can be useful if you want to make the droppable &#8220;light up&#8221; when it can be dropped on.</td></tr><tr><td>2</td><td>create(event, ui)This event is triggered when a droppable element is created. Where&nbsp;<em>event</em>&nbsp;is of type&nbsp;<em>Event</em>, and&nbsp;<em>ui</em>&nbsp;is of type&nbsp;<em>Object</em>.</td></tr><tr><td>3</td><td>deactivate(event, ui)This event is triggered when an accepted draggable stops dragging. Where&nbsp;<em>event</em>&nbsp;is of type&nbsp;<em>Event</em>, and&nbsp;<em>ui</em>&nbsp;is of type&nbsp;<em>Object</em>.</td></tr><tr><td>4</td><td>drop(event, ui)This action is triggered when an element is dropped on the droppable. This is based on the&nbsp;<em>tolerance</em>&nbsp;option. Where&nbsp;<em>event</em>&nbsp;is of type&nbsp;<em>Event</em>, and&nbsp;<em>ui</em>&nbsp;is of type&nbsp;<em>Object</em>.</td></tr><tr><td>5</td><td>out(event, ui)This event is triggered when an accepted draggable element is dragged out of the droppable. This is based on the&nbsp;<em>tolerance</em>&nbsp;option. Where&nbsp;<em>event</em>&nbsp;is of type&nbsp;<em>Event</em>, and&nbsp;<em>ui</em>&nbsp;is of type&nbsp;<em>Object</em>.</td></tr><tr><td>6</td><td>over(event, ui)This event is triggered when an accepted draggable element is dragged over the droppable. This is based on the&nbsp;<em>tolerance</em>&nbsp;option. Where&nbsp;<em>event</em>&nbsp;is of type&nbsp;<em>Event</em>, and&nbsp;<em>ui</em>&nbsp;is of type&nbsp;<em>Object</em>.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage during drop functionality. This example demonstrates the use of events&nbsp;<em>drop</em>,&nbsp;<em>over</em>&nbsp;and&nbsp;<em>out</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Droppable - Default functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #draggable-5 { \n            width: 100px; height: 50px; padding: 0.5em; float: left;\n            margin: 22px 5px 10px 0; \n         }\n         #droppable-8 {    \n            width: 120px; height: 90px;padding: 0.5em; float: left; \n            margin: 10px;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#draggable-5\" ).draggable();\n            $(\"#droppable-8\").droppable({\n               drop: function (event, ui) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"Dropped!\" );\n               },  \n\t\t\t\t\t\n               over: function (event, ui) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"moving in!\" );\n               },\n               out: function (event, ui) {\n                  $( this )\n                  .addClass( \"ui-state-highlight\" )\n                  .find( \"p\" )\n                  .html( \"moving out!\" );\n               }      \n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"draggable-5\" class = \"ui-widget-content\">\n         &lt;p>Drag me to my target&lt;/p>\n      &lt;/div>\n      &lt;div id = \"droppable-8\" class = \"ui-widget-header\">\n         &lt;p>Drop here&lt;/p>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>dropexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Here you will notice how the message in the droppable element changes as you drag the element.</p>\n","protected":false},"excerpt":{"rendered":"<p>jQueryUI provides&nbsp;droppable()&nbsp;method to make any DOM element droppable at a specified target (a target for draggable elements). Syntax The&nbsp;droppable()&nbsp;method can be used in two forms − $(selector, context).droppable (options)&nbsp;Method $(selector, context).droppable (&#8220;action&#8221;, params)&nbsp;Method $ (selector, context).droppable (options) Method The&nbsp;droppable (options)&nbsp;method declares that an HTML element can be used as an element in which you can [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/69"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=69"}],"version-history":[{"count":2,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/69/revisions"}],"predecessor-version":[{"id":266,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/69/revisions/266"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=69"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=69"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=69"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":68,"date":"2020-07-20T11:23:26","date_gmt":"2020-07-20T11:23:26","guid":{"rendered":"http://javascript.foobrdigital.com/?p=68"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"resizable","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/resizable/","title":{"rendered":"Resizable"},"content":{"rendered":"\n<p>jQueryUI provides resizable() method to resize any DOM element. This method simplifies the resizing of element which otherwise takes time and lot of coding in HTML. The resizable () method displays an icon in the bottom right of the item to resize.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>resizable()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).resizable (options)&nbsp;Method</li><li>$(selector, context).resizable (&#8220;action&#8221;, params)&nbsp;Method</li></ul>\n\n\n\n<h2>$ (selector, context).resizable (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>resizable (options)</em>&nbsp;method declares that an HTML element can be resized. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior of the elements involved when resizing.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).resizable (options);</code></pre>\n\n\n\n<p>You can provide one or more options at a time of using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).resizable({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>alsoResizeThis option is of type&nbsp;<em>Selector</em>,&nbsp;<em>jQuery&nbsp;</em>, or any DOM&nbsp;<em>Element</em>. It represents elements that also resize when resizing the original object. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>2</td><td>animateThis option when set to&nbsp;<strong>true</strong>&nbsp;is used to enable a visual effect during resizing when the mouse button is released. The default value is&nbsp;<strong>false</strong>&nbsp;(no effect).</td></tr><tr><td>3</td><td>animateDurationThis option is used to set the duration (in milliseconds) of the resizing effect. This option is used only when&nbsp;<strong>animate</strong>&nbsp;option is&nbsp;<em>true</em>. By default its value is&nbsp;<strong>&#8220;slow&#8221;</strong>.</td></tr><tr><td>4</td><td>animateEasingThis option is used to specify which&nbsp;<em>easing</em>&nbsp;to apply when using the&nbsp;<strong>animate</strong>&nbsp;option. By default its value is&nbsp;<strong>&#8220;swing&#8221;</strong>.</td></tr><tr><td>5</td><td>aspectRatioThis option is used to indicate whether to keep the aspect (height and width) ratio for the item. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>6</td><td>autoHideThis option is used to hide the magnification icon or handles, except when the mouse is over the item. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>7</td><td>cancelThis option is used to prevent resizing on specified elements. By default its value is&nbsp;<strong>input,textarea,button,select,option</strong>.</td></tr><tr><td>8</td><td>containmentThis option is used restrict the resizing of elements within a specified element or region. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>9</td><td>delayThis option is used to set tolerance or delay in milliseconds. Resizing or displacement will begin thereafter. By default its value is&nbsp;<strong>0</strong>.</td></tr><tr><td>10</td><td>disabledThis option disables the resizing mechanism when set to&nbsp;<em>true</em>. The mouse no longer resizes elements, until the mechanism is enabled, using the resizable (&#8220;enable&#8221;). By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>11</td><td>distanceWith this option, the resizing starts only when the mouse moves a distance(pixels). By default its value is&nbsp;<strong>1 pixel</strong>. This can help prevent unintended resizing when clicking on an element.</td></tr><tr><td>12</td><td>ghostThis option when set to&nbsp;<em>true</em>, a semi-transparent helper element is shown for resizing. This ghost item will be deleted when the mouse is released. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>13</td><td>gridThis option is of type Array [x, y], indicating the number of pixels that the element expands horizontally and vertically during movement of the mouse. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>14</td><td>handlesThis option is a character string indicating which sides or angles of the element can be resized. By default its values are&nbsp;<strong>e, s, se</strong>.</td></tr><tr><td>15</td><td>helperThis option is used to add a CSS class to style the element to be resized. When the element is resized a new &lt;div&gt; element is created, which is the one that is scaled (ui-resizable-helper class). Once the resize is complete, the original element is sized and the &lt;div&gt; element disappears. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>16</td><td>maxHeightThis option is used to set the maximum height the resizable should be allowed to resize to. By default its value is&nbsp;<strong>null</strong>.</td></tr><tr><td>17</td><td>maxWidthThis option is used to set the maximum width the resizable should be allowed to resize to. By default its value is&nbsp;<strong>null</strong>.</td></tr><tr><td>18</td><td>minHeightThis option is used to set the minimum height the resizable should be allowed to resize to. By default its value is&nbsp;<strong>10</strong>.</td></tr><tr><td>19</td><td>minWidthThis option is used to set the minimum width the resizable should be allowed to resize to. By default its value is&nbsp;<strong>10</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you few a working examples of resize functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of resizable functionality, passing no parameters to the&nbsp;<strong>resizable()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         #resizable { width: 150px; height: 150px; padding: 0.5em;\n            text-align: center; margin: 0; }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#resizable\" ).resizable();\n         });\n      &lt;/script>\n   &lt;/head>\n\n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"resizable\" class = \"ui-widget-content\"> \n         &lt;h3 class = \"ui-widget-header\">Pull my edges to resize me!!&lt;/h3>\n      &lt;/div>\n  &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>resizeexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Drag the square border to resize.</p>\n\n\n\n<h3>Use of animate and ghost</h3>\n\n\n\n<p>The following example demonstrates the usage of two options&nbsp;<strong>animate</strong>&nbsp;and&nbsp;<strong>ghost</strong>&nbsp;in the resize function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         #resizable-2,#resizable-3 { \n            width: 150px; height: 150px; padding: 0.5em;\n            text-align: center; margin: 0; }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#resizable-2\" ).resizable({\n               animate: true\n            });\n            $( \"#resizable-3\" ).resizable({\n               ghost: true\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"resizable-2\" class = \"ui-widget-content\"> \n         &lt;h3 class = \"ui-widget-header\">\n            Pull my edges and Check the animation!!\n         &lt;/h3>\n      &lt;/div>&lt;br>\n      &lt;div id = \"resizable-3\" class = \"ui-widget-content\"> \n         &lt;h3 class = \"ui-widget-header\">I'm ghost!!&lt;/h3>\n      &lt;/div> \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>resizeexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Drag the square border to resize and see the effect of animate and ghost options.</p>\n\n\n\n<h3>Use of containment, minHeight, and minWidth</h3>\n\n\n\n<p>The following example demonstrates the usage of three options&nbsp;<strong>containment</strong>,&nbsp;<strong>minHeight</strong>&nbsp;and&nbsp;<strong>minWidth</strong>&nbsp;in the resize function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   \n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         #container-1 { width: 300px; height: 300px; }\n         #resizable-4 {background-position: top left; \n            width: 150px; height: 150px; } \n         #resizable-4, #container { padding: 0.5em; }  \n      &lt;/style>\n\n      &lt;script>\n         $(function() {\n            $( \"#resizable-4\" ).resizable({\n               containment: \"#container\",\n               minHeight: 70,\n               minWidth: 100\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n\n   &lt;body>\n      &lt;div id = \"container\" class = \"ui-widget-content\">\n         &lt;div id = \"resizable-4\" class = \"ui-state-active\">\n            &lt;h3 class = \"ui-widget-header\">\n               Resize contained to this container\n            &lt;/h3>\n         &lt;/div>\n      &lt;/div> \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>resizeexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Drag the square border to resize, you cannot resize beyond the main container.</p>\n\n\n\n<h3>Use of delay, distance, and autoHide</h3>\n\n\n\n<p>The following example demonstrates the usage of three options&nbsp;<strong>delay</strong>,&nbsp;<strong>distance</strong>&nbsp;and&nbsp;<strong>autoHide</strong>&nbsp;in the resize function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         .square {\n            width: 150px;\n            height: 150px;\n            border: 1px solid black;\n            text-align: center;\n            float: left;\n            margin-left: 20px;\n            -right: 20px;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#resizable-5\" ).resizable({\n               delay: 1000\n            });\n\n            $( \"#resizable-6\" ).resizable({\n               distance: 40\n            });\n            $( \"#resizable-7\" ).resizable({\n               autoHide: true\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"resizable-5\" class = \"square ui-widget-content\">\n         &lt;h3 class = \"ui-widget-header\">\n            Resize starts after delay of 1000ms\n         &lt;/h3>\n      &lt;/div>&lt;br>\n      &lt;div id = \"resizable-6\" class = \"square ui-widget-content\">\n         &lt;h3 class = \"ui-widget-header\">\n            Resize starts at distance of 40px\n         &lt;/h3>\n      &lt;/div>&lt;br>\n      &lt;div id = \"resizable-7\" class = \"square ui-widget-content\">\n         &lt;h3 class = \"ui-widget-header\">\n            Hover over me to see the magnification icon!\n         &lt;/h3>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>resizeexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Drag the square border to resize and you can notice that −</p>\n\n\n\n<ul><li>The first square box resizes after a delay of 1000ms,</li><li>Second square box starts resizing after the mouse moves 40px.</li><li>Hover the mouse on the third square box, and the magnification icon appears.</li></ul>\n\n\n\n<h3>Use of alsoResize</h3>\n\n\n\n<p>The following example demonstrates the usage of option&nbsp;<strong>alsoResize</strong>&nbsp;in the resize function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         #resizable-8,#resizable-9{ width: 150px; height: 150px; \n            padding: 0.5em;text-align: center; margin: 0; }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#resizable-8\" ).resizable({\n               alsoResize: \"#resizable-9\"\n            });\n            $( \"#resizable-9\" ).resizable();\n         });\n      &lt;/script>\n   &lt;/head>\n\n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"resizable-8\" class = \"ui-widget-content\"> \n         &lt;h3 class = \"ui-widget-header\">Resize!!&lt;/h3>\n      &lt;/div>&lt;br>\n      &lt;div id = \"resizable-9\" class = \"ui-widget-content\"> \n         &lt;h3 class = \"ui-widget-header\">I also get resized!!&lt;/h3>\n      &lt;/div> \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>resizeexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you should see the following output. </p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         .square {\n            width: 150px;\n            height: 150px;\n            border: 1px solid black;\n            text-align: center;\n            float: left;\n            margin-left: 20px;\n            margin-right: 20px;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#resizable-10\" ).resizable({\n               aspectRatio: 10 / 3\n            });\n\n            $( \"#resizable-11\" ).resizable({\n               grid: &#91;50,20]\n            });\n\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"resizable-10\" class = \"square ui-widget-content\">\n         &lt;h3 class = \"ui-widget-header\">\n            Resize with aspectRatio of 10/3\n         &lt;/h3>\n      &lt;/div>\n      &lt;div id = \"resizable-11\" class = \"square ui-widget-content\">\n         &lt;h3 class = \"ui-widget-header\">\n            Snap me to the grid of &#91;50,20]\n         &lt;/h3>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Drag the square border to resize and you can notice that the second square box also resizes with the first square box.</p>\n\n\n\n<h3>Use of AspectRatio, Grid</h3>\n\n\n\n<p>The following example demonstrates the usage of option&nbsp;<strong>aspectRatio</strong>&nbsp;and&nbsp;<strong>grid</strong>&nbsp;in the resize function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         .square {\n            width: 150px;\n            height: 150px;\n            border: 1px solid black;\n            text-align: center;\n            float: left;\n            margin-left: 20px;\n            margin-right: 20px;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#resizable-10\" ).resizable({\n               aspectRatio: 10 / 3\n            });\n\n            $( \"#resizable-11\" ).resizable({\n               grid: &#91;50,20]\n            });\n\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"resizable-10\" class = \"square ui-widget-content\">\n         &lt;h3 class = \"ui-widget-header\">\n            Resize with aspectRatio of 10/3\n         &lt;/h3>\n      &lt;/div>\n      &lt;div id = \"resizable-11\" class = \"square ui-widget-content\">\n         &lt;h3 class = \"ui-widget-header\">\n            Snap me to the grid of &#91;50,20]\n         &lt;/h3>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>resizeexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you should see the following output. </p>\n\n\n\n<p>Drag the square border to resize, the first square box resizes with the aspect ratio of 10 / 3 and the second one resizes with grid of [50,20].</p>\n\n\n\n<h2>$ (selector, context).resizable (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The <em>resizable (&#8220;action&#8221;, params)</em> method can perform an action on resizable elements, such as allowing or preventing resizing functionality. The action is specified as a string in the first argument (e.g., &#8220;disable&#8221; to prevent the resize). Check out the actions that can be passed.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).resizable (\"action\", params);;</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action destroys the resizable functionality of an element completely. This will return the element back to its pre-init state.</td></tr><tr><td>2</td><td>disableThis action disables the resizing functionality of an element. This method does not accept any arguments.</td></tr><tr><td>3</td><td>enableThis action enables the resizing functionality of an element. This method does not accept any arguments.</td></tr><tr><td>4</td><td>option( optionName )This action retrieves the value of the specified&nbsp;<em>optionName</em>. This option corresponds to one of those used with resizable (options).</td></tr><tr><td>5</td><td>option()Gets an object containing key/value pairs representing the current resizable options hash. This does not accept any arguments.</td></tr><tr><td>6</td><td>option(optionName, value )This action sets the value of the resizable option with the specified&nbsp;<em>optionName</em>. This option corresponds to one of those used with resizable (options).</td></tr><tr><td>7</td><td>option( options )This action sets one or more options for the resizable.</td></tr><tr><td>8</td><td>widget()This action returns a&nbsp;<em>jQuery</em>&nbsp;object containing the resizable element. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of&nbsp;<em>destroy()</em>&nbsp;and&nbsp;<em>disable()</em>&nbsp;methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         #resizable-12,#resizable-13 { width: 150px; height: 150px; \n            padding: 0.5em;text-align: center; margin: 0; }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#resizable-12\" ).resizable();\n            $( \"#resizable-12\" ).resizable('disable');\n            $( \"#resizable-13\" ).resizable();\n            $( \"#resizable-13\" ).resizable('destroy');\t\n         });\n      &lt;/script>\n   &lt;/head>\n\n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"resizable-12\" class = \"ui-widget-content\"> \n         &lt;h3 class = \"ui-widget-header\">I'm disable!!&lt;/h3>\n      &lt;/div>&lt;br>\n      &lt;div id = \"resizable-13\" class = \"ui-widget-content\"> \n         &lt;h3 class = \"ui-widget-header\">I'm Destroyed!!&lt;/h3>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>resizeexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>You cannot resize the first square box as its disabled and the second square box is destroyed.</p>\n\n\n\n<h2>Event Management on resizable elements</h2>\n\n\n\n<p>In addition to the resizable (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>create(event, ui)This event is triggered when the resizable element is created.</td></tr><tr><td>2</td><td>resize(event, ui)This event is triggered when the handler of resizable element is dragged.</td></tr><tr><td>3</td><td>start(event, ui)This event is triggered at the start of a resize operation.</td></tr><tr><td>4</td><td>stop(event, ui)This event is triggered at the end of a resize operation.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage during resize functionality. This example demonstrates the use of events&nbsp;<em>create</em>, and&nbsp;<em>resize</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Resizable functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src=\"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         #resizable-14{ width: 150px; height: 150px; \n         padding: 0.5em;text-align: center; margin: 0; }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#resizable-14\" ).resizable({\n               create: function( event, ui ) {\n                  $(\"#resizable-15\").text (\"I'm Created!!\");\n               },\n               resize: function (event, ui) {\n                  $(\"#resizable-16\").text (\"top = \" + ui.position.top +\n                     \", left = \" + ui.position.left +\n                     \", width = \" + ui.size.width +\n                     \", height = \" + ui.size.height);\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"resizable-14\" class = \"ui-widget-content\"> \n         &lt;h3 class = \"ui-widget-header\">Resize !!&lt;/h3>\n      &lt;/div>&lt;br>\n      &lt;span id = \"resizable-15\">&lt;/span>&lt;br>\n      &lt;span id = \"resizable-16\">&lt;/span>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>resizeexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, should must see the following output −</p>\n\n\n\n<p>Drag the square box and you will see the output getting displayed on resize event.</p>\n","protected":false},"excerpt":{"rendered":"<p>jQueryUI provides resizable() method to resize any DOM element. This method simplifies the resizing of element which otherwise takes time and lot of coding in HTML. The resizable () method displays an icon in the bottom right of the item to resize. Syntax The&nbsp;resizable()&nbsp;method can be used in two forms − $(selector, context).resizable (options)&nbsp;Method $(selector, [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/68"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=68"}],"version-history":[{"count":2,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/68/revisions"}],"predecessor-version":[{"id":267,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/68/revisions/267"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=68"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=68"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=68"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":67,"date":"2020-07-20T11:27:53","date_gmt":"2020-07-20T11:27:53","guid":{"rendered":"http://javascript.foobrdigital.com/?p=67"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"selectable","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/selectable/","title":{"rendered":"Selectable"},"content":{"rendered":"\n<p>jQueryUI provides selectable() method to select DOM element individually or in a group. With this method elements can be selected by dragging a box (sometimes called a lasso) with the mouse over the elements. Also, elements can be selected by clicking or dragging while holding the Ctrl/Meta key, allowing for multiple (non-contiguous) selections.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>selectable()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).selectable (options) Method</li><li>$(selector, context).selectable (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).selectable (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>selectable (options)</em>&nbsp;method declares that an HTML element contains selectable items. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior of the elements involved when selecting.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).selectable (options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided, </p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).selectable({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>appendToThis option is tells which element the selection helper (the lasso) should be appended to. By default its value is <strong>body</strong>.</td></tr><tr><td>2</td><td>autoRefreshThis option if set to <em>true</em>, the position and size of each selectable item is computed at the beginning of a select operation. By default its value is <strong>true</strong>.</td></tr><tr><td>3</td><td>cancelThis option forbids selecting if you start selection of elements. By default its value is <strong>input,textarea,button,select,option</strong>.</td></tr><tr><td>4</td><td>delayThis option is used to set time in milliseconds and defines when the selecting should start. This can be used to prevent unwanted selections. By default its value is <strong>0</strong>.</td></tr><tr><td>5</td><td>disabledThis option when set to true, disables the selection mechanism. Users cannot select the elements until the mechanism is restored using the selectable (&#8220;enable&#8221;) instruction. By default its value is <strong>false</strong>.</td></tr><tr><td>6</td><td>distanceThis option is the distance (in pixels) the mouse must move to consider the selection in progress. This is useful, for example, to prevent simple clicks from being interpreted as a group selection. By default its value is <strong>0</strong>.</td></tr><tr><td>7</td><td>filterThis option is a selector indicating which elements can be part of the selection. By default its value is <strong>*</strong>.</td></tr><tr><td>8</td><td>toleranceThis option specifies which mode to use for testing whether the selection helper (the lasso) should select an item. By default its value is <strong>touch</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of selectable functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of selectable functionality, passing no parameters to the <strong>selectable()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI selectable-1&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #selectable-1 .ui-selecting { background: #707070 ; }\n         #selectable-1 .ui-selected { background: #EEEEEE; color: #000000; }\n         #selectable-1 { list-style-type: none; margin: 0; \n            padding: 0; width: 20%; }\n         #selectable-1 li { margin: 3px; padding: 0.4em; \n            font-size: 16px; height: 18px; }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n      &lt;script>\n         $(function() {\n            $( \"#selectable-1\" ).selectable();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ol id = \"selectable-1\">\n         &lt;li class = \"ui-widget-content\">Product 1&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 2&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 3&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 4&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 5&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 6&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 7&lt;/li>\n      &lt;/ol> \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>selectableexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Try to click on products, use CTRLS key to select multiple products.</p>\n\n\n\n<h3>Use of Delay and Distance</h3>\n\n\n\n<p>The following example demonstrates the usage of two options <strong>delay</strong> and <strong>distance</strong> in the selectable function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Selectable&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;style>\n         #selectable-2 .ui-selecting,#selectable-3 .ui-selecting { \n            background: #707070 ; }\n         #selectable-2 .ui-selected,#selectable-3 .ui-selected { \n            background: #EEEEEE; color: #000000; }\n         #selectable-2,#selectable-3 { list-style-type: none; margin: 0; \n            padding: 0; width: 20%; }\n         #selectable-2 li,#selectable-3 li { margin: 3px; padding: 0.4em; \n            font-size: 16px; height: 18px; }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#selectable-2\" ).selectable({\n               delay : 1000\n            });\n            $( \"#selectable-3\" ).selectable({\n               distance : 100\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h3>Starts after delay of 1000ms&lt;/h3>\n      &lt;ol id = \"selectable-2\">\n         &lt;li class = \"ui-widget-content\">Product 1&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 2&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 3&lt;/li>\n      &lt;/ol>\n      &lt;h3>Starts after mouse moves distance of 100px&lt;/h3>\n      &lt;ol id = \"selectable-3\">\n         &lt;li class = \"ui-widget-content\">Product 4&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 5&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 6&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 7&lt;/li>\n      &lt;/ol>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>selectableexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Try to click on products, use CTRL key to select multiple products. You will notice that selection of the Product 1, Product 2 and Product 3 start after a delay of 1000ms. Selection of the Product 4, Product 5, Product 6 and Product 7 can&#8217;t be done individually. The selection starts only after the mouse moves a distance of 100px.</p>\n\n\n\n<h3>Use of Filter</h3>\n\n\n\n<p>The following example demonstrates the usage of two options <strong>delay</strong> and <strong>distance</strong> in the selectable function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI selectable-4&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;style>\n         #selectable-4 .ui-selecting { background: #707070 ; }\n         #selectable-4 .ui-selected { background: #EEEEEE; color: #000000; }\n         #selectable-4 { list-style-type: none; margin: 0; \n            padding: 0; width: 20%; }\n         #selectable-4 li { margin: 3px; padding: 0.4em; \n            font-size: 16px; height: 18px; }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n     \n      &lt;script>\n         $(function() {\n            $( \"#selectable-4\" ).selectable({\n               filter : \"li:first-child\"\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ol id = \"selectable-4\">\n         &lt;li class = \"ui-widget-content\">Product 1&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 2&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 3&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 4&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 5&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 6&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 7&lt;/li>\n      &lt;/ol>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>selectableexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Try to click on products. You will notice that only first product can be selected.</p>\n\n\n\n<h2>$ (selector, context).selectable (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>selectable (&#8220;action&#8221;, params)</em>&nbsp;method can perform an action on selectable elements, such as preventing selectable functionality. The action is specified as a string in the first argument (e.g., &#8220;disable&#8221; to stop the selection). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).selectable (\"action\", params);;\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action removes the selectable functionality of an element completely. The elements return to their pre-init state.</td></tr><tr><td>2</td><td>disableThis action deactivates the selectable functionality of an element. This method does not accept any arguments.</td></tr><tr><td>3</td><td>enableThis action enables the selectable functionality of an element. This method does not accept any arguments.</td></tr><tr><td>4</td><td>option( optionName )This action gets the value currently associated with the specified <em>optionName</em>.</td></tr><tr><td>5</td><td>option()This action gets an object containing key/value pairs representing the current selectable options hash.</td></tr><tr><td>6</td><td>option( optionName, value )This action sets the value of the selectable option associated with the specified <em>optionName</em>. The argument <em>optionName</em> is name of the option to be set and <em>value</em> is the value to be set for the option.</td></tr><tr><td>7</td><td>option( options )This action is sets one or more options for the selectable. The argument <em>options</em> is a map of option-value pairs to be set.</td></tr><tr><td>8</td><td>refreshThis action causes the size and position of the selectable elements to be refreshed. Used mostly when the <em>autoRefresh</em> option is disabled (set to <em>false</em>). This method does not accept any arguments.</td></tr><tr><td>9</td><td>widgetThis action returns a jQuery object containing the selectable element. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>disable()</em> and <em>option( optionName, value )</em> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Selectable&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #selectable-5 .ui-selecting,#selectable-6 .ui-selecting { \n            background: #707070 ; }\n         #selectable-5 .ui-selected,#selectable-6 .ui-selected { \n            background: #EEEEEE; color: #000000; }\n         #selectable-5,#selectable-6 { \n            list-style-type: none; margin: 0; padding: 0; width: 20%; }\n         #selectable-5 li,#selectable-6 li { \n            margin: 3px; padding: 0.4em; font-size: 16px; height: 18px; }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#selectable-5\" ).selectable();\n            $( \"#selectable-5\" ).selectable('disable');\n            $( \"#selectable-6\" ).selectable();\n            $( \"#selectable-6\" ).selectable( \"option\", \"distance\", 1 );\t\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h3>Disabled using disable() method&lt;/h3>\n      &lt;ol id = \"selectable-5\">\n         &lt;li class = \"ui-widget-content\">Product 1&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 2&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 3&lt;/li>\n      &lt;/ol>\n      &lt;h3>Select using method option( optionName, value )&lt;/h3>\n      &lt;ol id = \"selectable-6\">\n         &lt;li class = \"ui-widget-content\">Product 4&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 5&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 6&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 7&lt;/li>\n      &lt;/ol>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>selectableexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Try to click on products, use CTRL key to select multiple products. You will notice that Product 1, Product 2, and Product 3 are disabled. Selection of Product 4, Product 5, Product 6 and Product 7 happens after the mouse moves distance of 1px.</p>\n\n\n\n<h2>Event Management on Selectable Elements</h2>\n\n\n\n<p>In addition to the selectable (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>create(event, ui)This event is triggered when the selectable element is created. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>2</td><td>selected(event, ui)This event is triggered for each element that becomes selected. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>3</td><td>selecting(event, ui)This event is triggered for each selectable element that’s about to get selected. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>4</td><td>start(event, ui)This event is triggered at the beginning of the select operation. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>5</td><td>stop(event, ui)This event is triggered at the end of the select operation. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>6</td><td>unselected(event, ui)This event is triggered at the end of the select operation for each element that becomes unselected. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>7</td><td>unselecting(event, ui)This event is triggered during select operation for each selected element that’s about to become unselected. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage during selectable functionality. This example demonstrates the use of event <em>selected</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI selectable-7&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #selectable-7 .ui-selecting { background: #707070 ; }\n         #selectable-7 .ui-selected { background: #EEEEEE; color: #000000; }\n         #selectable-7 { list-style-type: none; margin: 0; \n            padding: 0; width: 20%; }\n         #selectable-7 li { margin: 3px; padding: 0.4em; \n            font-size: 16px; height: 18px; }\n         .ui-widget-content {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         .resultarea {\n            background: #cedc98;\n            border-top: 1px solid #000000;\n            border-bottom: 1px solid #000000;\n            color: #333333;\n            font-size:14px;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#selectable-7\" ).selectable({\n               selected: function() {\n                  var result = $( \"#result\" ).empty();\n                  $( \".ui-selected\", this ).each(function() {\n                     var index = $( \"#selectable-7 li\" ).index( this );\n                     result.append( \" #\" + ( index + 1 ) );\n                  });\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h3>Events&lt;/h3>\n      &lt;ol id = \"selectable-7\">\n         &lt;li class = \"ui-widget-content\">Product 1&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 2&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 3&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 4&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 5&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 6&lt;/li>\n         &lt;li class = \"ui-widget-content\">Product 7&lt;/li>\n      &lt;/ol>\n      &lt;span class = \"resultarea\">Selected Product&lt;/span>>\n      &lt;span id = result class = \"resultarea\">&lt;/span>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>selectableexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Try to click on products, use CTRL key to select multiple products. You will notice that the product number selected is printed at the bottom.</p>\n","protected":false},"excerpt":{"rendered":"<p>jQueryUI provides selectable() method to select DOM element individually or in a group. With this method elements can be selected by dragging a box (sometimes called a lasso) with the mouse over the elements. Also, elements can be selected by clicking or dragging while holding the Ctrl/Meta key, allowing for multiple (non-contiguous) selections. Syntax The&nbsp;selectable()&nbsp;method [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/67"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=67"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/67/revisions"}],"predecessor-version":[{"id":78,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/67/revisions/78"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=67"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=67"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=67"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":66,"date":"2020-07-20T11:34:20","date_gmt":"2020-07-20T11:34:20","guid":{"rendered":"http://javascript.foobrdigital.com/?p=66"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"sortable","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/sortable/","title":{"rendered":"Sortable"},"content":{"rendered":"\n<p>jQueryUI provides&nbsp;<strong>sortable()</strong>&nbsp;method to reorder elements in list or grid using the mouse. This method performs sortability action based upon an operation string passed as the first parameter.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>sortable ()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).sortable (options) Method</li><li>$(selector, context).sortable (&#8220;action&#8221;, [params]) Method</li></ul>\n\n\n\n<h2>$ (selector, context).sortable (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>sortable (options)</em>&nbsp;method declares that an HTML element contains interchangeable elements. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior of the elements involved during reordering.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).sortable(options);\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>appendToThis option specifies the element in which the new element created with <em>options.helper</em> will be inserted during the time of the move/drag. By default its value is <strong>parent</strong>.</td></tr><tr><td>2</td><td>axisThis option indicates an axis of movement (&#8220;x&#8221; is horizontal, &#8220;y&#8221; is vertical). By default its value is <strong>false</strong>.</td></tr><tr><td>3</td><td>cancelThis option is used to prevent sorting of elements by clicking on any of the selector elements. By default its value is <strong>&#8220;input,textarea,button,select,option&#8221;</strong>.</td></tr><tr><td>4</td><td>connectWithThis option is a Selector that identifies another sortable element that can accept items from this sortable. This allows items from one list to be moved to other lists, a frequent and useful user interaction. If omitted, no other element is connected. This is a one-way relationship. By default its value is <strong>false</strong>.</td></tr><tr><td>5</td><td>containmentThis option indicates an element within which the displacement takes place. The element will be represented by a selector (only the first item in the list will be considered), a DOM element, or the string &#8220;parent&#8221; (parent element) or &#8220;window&#8221; (HTML page).</td></tr><tr><td>6</td><td>cursorSpecifies the cursor CSS property when the element moves. It represents the shape of the mouse pointer. By default its value is &#8220;auto&#8221;.</td></tr><tr><td>7</td><td>cursorAtSets the offset of the dragging helper relative to the mouse cursor. Coordinates can be given as a hash using a combination of one or two keys: { top, left, right, bottom }. By default its value is &#8220;false&#8221;.</td></tr><tr><td>8</td><td>delayDelay, in milliseconds, after which the first movement of the mouse is taken into account. The displacement may begin after that time. By default its value is &#8220;0&#8221;.</td></tr><tr><td>9</td><td>disabledThis option if set to <em>true</em>, disables the sortable functionality. By default its value is <strong>false</strong>.</td></tr><tr><td>10</td><td>distanceNumber of pixels that the mouse must be moved before the sorting starts. If specified, sorting will not start until after mouse is dragged beyond distance. By default its value is &#8220;1&#8221;.</td></tr><tr><td>11</td><td>dropOnEmptyThis option if set to <em>false</em>, then items from this sortable can&#8217;t be dropped on an empty connect sortable. By default its value is <strong>true</strong>.</td></tr><tr><td>12</td><td>forceHelperSizeIf this option if set to <em>true</em> forces the helper to have a size. By default its value is <strong>false</strong>.</td></tr><tr><td>13</td><td>forcePlaceholderSizeThis option when set to <em>true</em>, takes into account the size of the placeholder when an item is moved. This option is only useful if <em>options.placeholder</em> is initialized. By default its value is <strong>false</strong>.</td></tr><tr><td>14</td><td>gridThis option is an Array [x, y] indicating the number of pixels that the sorting element moves horizontally and vertically during displacement of the mouse. By default its value is <strong>false</strong>.</td></tr><tr><td>15</td><td>handleIf specified, restricts sort from starting unless the mousedown occurs on the specified element(s). By default its value is <strong>false</strong>.</td></tr><tr><td>16</td><td>helperAllows for a helper element to be used for dragging display. By default its value is <strong>original</strong>.</td></tr><tr><td>17</td><td>itemsThis option specifies which items inside the DOM element to be sorted. By default its value is <strong>> *</strong>.</td></tr><tr><td>18</td><td>opacityThis option is used to define the opacity of the helper while sorting. By default its value is <strong>false</strong>.</td></tr><tr><td>19</td><td>placeholderThis option is used to class name that gets applied to the otherwise white space.By default its value is <strong>false</strong>.</td></tr><tr><td>20</td><td>revertThis option decides whether the sortable items should revert to their new positions using a smooth animation. By default its value is <strong>false</strong>.</td></tr><tr><td>21</td><td>scrollThis option is used to enable scrolling. If set to <em>true</em> the page scrolls when coming to an edge. By default its value is <strong>true</strong>.</td></tr><tr><td>22</td><td>scrollSensitivityThis option indicates how many pixels the mouse must exit the visible area to cause scrolling. By default its value is <strong>20</strong>. This option is used only with options.scroll set to true.</td></tr><tr><td>23</td><td>scrollSpeedThis option indicates the scrolling speed of the display once the scrolling begins. By default its value is <strong>20</strong>.</td></tr><tr><td>24</td><td>toleranceThis option is a <em>String</em> that specifies which mode to use for testing whether the item being moved is hovering over another item. By default its value is <strong>&#8220;intersect&#8221;</strong>.</td></tr><tr><td>25</td><td>zIndexThis option represents z-index for element/helper while being sorted. By default its value is <strong>1000</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of drag functionality.</p>\n\n\n\n<h3>Default functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of sortable functionality, passing no parameters to the <strong>sortable()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>jQuery UI Sortable - Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #sortable-1 { list-style-type: none; margin: 0; \n            padding: 0; width: 25%; }\n         #sortable-1 li { margin: 0 3px 3px 3px; padding: 0.4em; \n            padding-left: 1.5em; font-size: 17px; height: 16px; }\n         .default {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#sortable-1\" ).sortable();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ul id = \"sortable-1\">\n         &lt;li class = \"default\">Product 1&lt;/li>\n         &lt;li class = \"default\">Product 2&lt;/li>\n         &lt;li class = \"default\">Product 3&lt;/li>\n         &lt;li class = \"default\">Product 4&lt;/li>\n         &lt;li class = \"default\">Product 5&lt;/li>\n         &lt;li class = \"default\">Product 6&lt;/li>\n         &lt;li class = \"default\">Product 7&lt;/li>\n      &lt;/ul>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sortexample.htm</strong> and open it in a standard browser which supports javascript, you should see the following output. </p>\n\n\n\n<p>Re-arrange the products above, use mouse to drag items.</p>\n\n\n\n<h3>Use of Options Delay and Distance</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>(a) delay</strong> and <strong>(b) distance</strong> in the sort function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>jQuery UI Sortable - Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #sortable-2, #sortable-3 { list-style-type: none; margin: 0; \n            padding: 0; width: 25%; }\n         #sortable-2 li, #sortable-3 li { margin: 0 3px 3px 3px; padding: 0.4em; \n            padding-left: 1.5em; font-size: 17px; height: 16px; }\n         .default {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#sortable-2\" ).sortable({\n               delay:500\n            });\n            $( \"#sortable-3\" ).sortable({\n               distance:30\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h3>Delay by 500ms&lt;/h3>\n      &lt;ul id = \"sortable-2\">\n         &lt;li class = \"default\">Product 1&lt;/li>\n         &lt;li class = \"default\">Product 2&lt;/li>\n         &lt;li class = \"default\">Product 3&lt;/li>\n         &lt;li class = \"default\">Product 4&lt;/li>\n      &lt;/ul>\n      &lt;h3>Distance Delay by 30px&lt;/h3>\n      &lt;ul id = \"sortable-3\">\n         &lt;li class = \"default\">Product 1&lt;/li>\n         &lt;li class = \"default\">Product 2&lt;/li>\n         &lt;li class = \"default\">Product 3&lt;/li>\n         &lt;li class = \"default\">Product 4&lt;/li>\n      &lt;/ul>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sortexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Re-arrange the products above, use mouse to drag items. To prevent accidental sorting either by delay (time) or distance, we have set a number of milliseconds the element needs to be dragged before sorting starts with the&nbsp;<em>delay</em>&nbsp;option. We have also set a distance in pixels the element needs to be dragged before sorting starts with the&nbsp;<em>distance</em>&nbsp;option.</p>\n\n\n\n<h3>Use of Placeholder</h3>\n\n\n\n<p>The following example demonstrates the usage of three option <strong>placeholder</strong> in the sort function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>jQuery UI Sortable - Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;style>\n         #sortable-4 { list-style-type: none; margin: 0; \n            padding: 0; width: 25%; }\n         #sortable-4 li { margin: 0 3px 3px 3px; padding: 0.4em; \n            padding-left: 1.5em; font-size: 17px; height: 16px; }\n         .highlight {\n            border: 1px solid red;\n            font-weight: bold;\n            font-size: 45px;\n            background-color: #333333;\n         }\n         .default {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#sortable-4\" ).sortable({\n               placeholder: \"highlight\"\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ul id = \"sortable-4\">\n         &lt;li class = \"default\">Product 1&lt;/li>\n         &lt;li class = \"default\">Product 2&lt;/li>\n         &lt;li class = \"default\">Product 3&lt;/li>\n         &lt;li class = \"default\">Product 4&lt;/li>\n         &lt;li class = \"default\">Product 5&lt;/li>\n         &lt;li class = \"default\">Product 6&lt;/li>\n         &lt;li class = \"default\">Product 7&lt;/li>\n      &lt;/ul>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sortexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Try to drag items to rearrange them, while you&#8217;re dragging items, the placeholder (we have used&nbsp;<em>highlight</em>&nbsp;class to style this space) will show up on an available place.</p>\n\n\n\n<h3>Use of Options Connectwith and Droponempty</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>(a) connectWith</strong> and <strong>(b) dropOnEmpty</strong> in the sort function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>jQuery UI Sortable - Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #sortable-5, #sortable-6,#sortable-7 { \n            list-style-type: none; margin: 0; padding: 0;\n            width: 20%;float:left }\n         #sortable-5 li, #sortable-6 li,#sortable-7 li { \n            margin: 0 3px 3px 3px; padding: 0.4em; \n            padding-left: 1.5em; font-size: 17px; height: 16px; }\n         .default {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#sortable-5, #sortable-6\" ).sortable({\n               connectWith: \"#sortable-5, #sortable-6\"\n            });\n            $( \"#sortable-7\").sortable({\n               connectWith: \"#sortable-5\",\n               dropOnEmpty: false\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ul id = \"sortable-5\">&lt;h3>List 1&lt;/h3>\n         &lt;li class = \"default\">A&lt;/li>\n         &lt;li class = \"default\">B&lt;/li>\n         &lt;li class = \"default\">C&lt;/li>\n         &lt;li class = \"default\">D&lt;/li>\n      &lt;/ul>\n      &lt;ul id = \"sortable-6\">&lt;h3>List 2&lt;/h3>\n         &lt;li class = \"default\">a&lt;/li>\n         &lt;li class = \"default\">b&lt;/li>\n         &lt;li class = \"default\">c&lt;/li>\n         &lt;li class = \"default\">d&lt;/li>\n      &lt;/ul>\n      &lt;ul id = \"sortable-7\">&lt;h3>List 3&lt;/h3>\n         &lt;li class = \"default\">e&lt;/li>\n         &lt;li class = \"default\">f&lt;/li>\n         &lt;li class = \"default\">g&lt;/li>\n         &lt;li class = \"default\">h&lt;/li>\n      &lt;/ul>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>sortexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you should see the following output. Now, you can play with the result −</p>\n\n\n\n<p>Sort items from one List1 into another (List2) and vice versa, by passing a selector into the&nbsp;<em>connectWith</em>&nbsp;option. This is done by grouping all related lists with a CSS class, and then pass that class into the sortable function (i.e., connectWith: &#8216;#sortable-5, #sortable-6&#8217;).</p>\n\n\n\n<p>Try to drag the items under List 3 to the List 2 or List 1. As we have set&nbsp;<em>dropOnEmpty</em>&nbsp;option to&nbsp;<em>false</em>, it won&#8217;t be possible to drop these items.</p>\n\n\n\n<h2>$ (selector, context).sortable (&#8220;action&#8221;, [params]) Method</h2>\n\n\n\n<p>The&nbsp;<em>sortable (action, params)</em>&nbsp;method can perform an action on the sortable elements, such as to prevent displacement. The&nbsp;<strong>action</strong>&nbsp;is specified as a string in the first argument and optionally, one or more&nbsp;<strong>params</strong>&nbsp;can be provided based on the given action.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Basically, here actions are nothing but they are jQuery methods which we can use in the form of string.</p></blockquote>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).sortable (\"action\", &#91;params]);\n</code></pre>\n\n\n\n<p>The following table lists the actions for this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>cancel()This action cancels the current sort operation. This is most useful within handlers for the sort receive and sort stop events. This method does not accept any arguments.</td></tr><tr><td>2</td><td>destroy()This action removes the sortability functionality completely. This will return the element back to its pre-init state. This method does not accept any arguments.</td></tr><tr><td>3</td><td>disable()This action disables the sortability of any sortable elements in the wrapped set. The sortability of the elements isn’t removed and can be restored by calling the enable variant of this method. This method does not accept any arguments.</td></tr><tr><td>4</td><td>enable()Re-enables sortability on any sortable elements in the wrapped set whose sortability has been disabled. Note that this method won’t add sortability to any non-sortable elements. This method does not accept any arguments.</td></tr><tr><td>5</td><td>option( optionName )This action gets the value currently associated with the specified <em>optionName</em>. Where <em>optionName</em> is the name of the option to get.</td></tr><tr><td>6</td><td>option()Gets an object containing key/value pairs representing the current sortable options hash.. This method does not accept any arguments.</td></tr><tr><td>7</td><td>option( optionName, value )This action sets the value of the sortable option associated with the specified <em>optionName</em>. Where <em>optionName</em> is the name of the option to set and <em>value</em> is the value to set for the option.</td></tr><tr><td>8</td><td>option( options )Sets one or more options for the sortable. Where <em>options</em> is a map of option-value pairs to set.</td></tr><tr><td>9</td><td>refresh()This action refreshes the list of items if necessary. This method does not accept any arguments. Calling this method will cause new items added to the sortable to be recognized.</td></tr><tr><td>10</td><td>toArray( options )This method returns an array of the <em>id</em> values of the sortable elements in sorted order. This method takes <em>Options</em> as parameter, to customize the serialization or sorted order.</td></tr><tr><td>11</td><td>serialize( options )This method returns a serialized query string (submittable via Ajax) formed from the sortable.</td></tr><tr><td>12</td><td>refreshPositions()This method is used mostly internally to refresh the cached information of the sortable. This method does not accept any arguments.</td></tr><tr><td>13</td><td>widget()This method returns a jQuery object containing the sortable element. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>toArray( options )</em> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>jQuery UI Sortable - Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src=\"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #sortable-8{ list-style-type: none; margin: 0; \n            padding: 0; width: 25%; float:left;}\n         #sortable-8 li{ margin: 0 3px 3px 3px; padding: 0.4em; \n            padding-left: 1.5em; font-size: 17px; height: 16px; }\n         .default {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $('#sortable-8').sortable({\n               update: function(event, ui) {\n                  var productOrder = $(this).sortable('toArray').toString();\n                  $(\"#sortable-9\").text (productOrder);\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;ul id = \"sortable-8\">\n         &lt;li id = \"1\" class = \"default\">Product 1&lt;/li>\n         &lt;li id = \"2\" class = \"default\">Product 2&lt;/li>\n         &lt;li id = \"3\" class = \"default\">Product 3&lt;/li>\n         &lt;li id = \"4\" class = \"default\">Product 4&lt;/li>\n      &lt;/ul>\n      &lt;br>\n      &lt;h3>&lt;span id = \"sortable-9\">&lt;/span>&lt;/h3>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sortexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Try sorting the items, the order of items is displayed at the bottom. Here we are calling&nbsp;<em>$(this).sortable(&#8216;toArray&#8217;).toString()</em>, which will give a string list of all the item id&#8217;s, it might look like&nbsp;<strong>1,2,3,4</strong>.</p>\n\n\n\n<h2>Event Management on The Sortable Elements</h2>\n\n\n\n<p>In addition to the sortable (options) method which we saw in the previous sections, JqueryUI provides event methods as which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>activate(event, ui)This event is triggered on the sortable when a sort operation starts on connected sortable.</td></tr><tr><td>2</td><td>beforeStop(event, ui)This event is triggered when the sort operation is about to end, with the helper and placeholder element reference still valid.</td></tr><tr><td>3</td><td>change(event, ui)This event is triggered when the sorted element changes position within the DOM.</td></tr><tr><td>4</td><td>create(event, ui)This event is triggered when the sortable is created.</td></tr><tr><td>5</td><td>deactivate(event, ui)This event is triggered when a connected sort stops, propagated to the connected sortable.</td></tr><tr><td>6</td><td>out(event, ui)This event is triggered when the sort item is moved away from a connected list.</td></tr><tr><td>7</td><td>over(event, ui)This event is triggered when a sort item moves into a connected list.</td></tr><tr><td>8</td><td>receive(event, ui)This event is triggered when a connected list has received a sort item from another list.</td></tr><tr><td>9</td><td>remove(event, ui)This event is triggered when the sort item is removed from a connected list and is dragged into another.</td></tr><tr><td>10</td><td>sort(event, ui)This event is repeatedly triggered for mousemove events during a sort operation.</td></tr><tr><td>11</td><td>start(event, ui)This event is triggered when a sort operation starts.</td></tr><tr><td>12</td><td>stop(event, ui)This event is triggered when a sort operation has concluded.</td></tr><tr><td>13</td><td>update(event, ui)This event is triggered when a sort operation stops and the position of the item has been changed.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage during drop functionality. This example demonstrates the use of events <em>receive</em>, <em>start</em> and <em>stop</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>jQuery UI Sortable - Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #sortable-10, #sortable-11 { list-style-type: none; \n            margin: 0; padding: 0; width: 80%; }\n         #sortable-10 li, #sortable-11 li { margin: 0 3px 3px 3px; \n            padding: 0.4em; padding-left: 1.5em; \n            font-size: 17px; height: 16px; }\n         .highlight {\n            border: 1px solid #000000;\n            font-weight: bold;\n            font-size: 45px;\n            background-color: #cedc98;\n         }\n         .default {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n         }\n         .wrap {\n            display: table-row-group;\n         }\n         .wrap1 {\n            float:left;\n            width: 100px;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#sortable-10\" ).sortable({\n               start: function (event, ui) {\n                  $(\"span#result\").html ($(\"span#result\").html () \n                     + \"&lt;b>start&lt;/b>&lt;br>\");\n               },\n               receive : function (event, ui) {\n                  $(\"span#result\").html ($(\"span#result\").html () \n                     + \", receive\");\n               },\n               stop: function (event, ui) {\n                  $(\"span#result\").html ($(\"span#result\").html () \n                     + \"&lt;b>stop&lt;/b>&lt;br>\");\n               }\n            });\n            $( \"#sortable-11\" ).sortable({\n               connectWith : \"#sortable-10, #sortable-11\"\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"wrap\">\n         &lt;div class = \"wrap1\"> \n            &lt;h3>List 1&lt;/h3>\n            &lt;ul id = \"sortable-10\">\n               &lt;li class = \"default\">A&lt;/li>\n               &lt;li class = \"default\">B&lt;/li>\n               &lt;li class = \"default\">C&lt;/li>\n               &lt;li class = \"default\">D&lt;/li>\n            &lt;/ul>\n         &lt;/div>\n         &lt;div class = \"wrap1\">\n            &lt;h3>List 2&lt;/h3> \n            &lt;ul id = \"sortable-11\">\n               &lt;li class = \"default\">a&lt;/li>\n               &lt;li class = \"default\">b&lt;/li>\n               &lt;li class = \"default\">c&lt;/li>\n               &lt;li class = \"default\">d&lt;/li>\n            &lt;/ul>\n         &lt;/div>\n      &lt;/div>\n      &lt;hr />\n      &lt;span id = result>&lt;/span>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sortexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Try sorting the items in List 1, you will see the message getting displayed at the&nbsp;<em>start</em>&nbsp;and&nbsp;<em>stop</em>&nbsp;of event. Now drop items from List 2 to List 1, again a message gets displayed on the&nbsp;<em>receive</em>&nbsp;event.</p>\n","protected":false},"excerpt":{"rendered":"<p>jQueryUI provides&nbsp;sortable()&nbsp;method to reorder elements in list or grid using the mouse. This method performs sortability action based upon an operation string passed as the first parameter. Syntax The&nbsp;sortable ()&nbsp;method can be used in two forms − $(selector, context).sortable (options) Method $(selector, context).sortable (&#8220;action&#8221;, [params]) Method $ (selector, context).sortable (options) Method The&nbsp;sortable (options)&nbsp;method declares that an HTML [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/66"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=66"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/66/revisions"}],"predecessor-version":[{"id":79,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/66/revisions/79"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=66"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=66"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=66"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":65,"date":"2020-07-20T11:38:04","date_gmt":"2020-07-20T11:38:04","guid":{"rendered":"http://javascript.foobrdigital.com/?p=65"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"accordion","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/accordion/","title":{"rendered":"Accordion"},"content":{"rendered":"\n<p>Accordion Widget in jQueryUI is a jQuery based expandable and collapsible content holder that is broken into sections and probably looks like tabs. jQueryUI provides accordion() method to achieve this.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>accordion()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).accordion (options) Method</li><li>$(selector, context).accordion (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).accordion (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>accordion (options)</em>&nbsp;method declares that an HTML element and its contents should be treated and managed as accordion menus. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the appearance and behavior of the menu involved.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).accordion (options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).accordion({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>activeIndicates the index of the menu that is open when the page is first accessed. By default its value is <strong>0</strong>, i.e the first menu.</td></tr><tr><td>2</td><td>animateThis option is used to set how to animate changing panels. By default its value is <strong>{}</strong>.</td></tr><tr><td>3</td><td>collapsibleThis option when set to <em>true</em>, it allows users to close a menu by clicking on it. By default, clicks on the open panel’s header have no effect. By default its value is <strong>false</strong>.</td></tr><tr><td>4</td><td>disabledThis option when set to <em>true</em> disables the accordion. By default its value is <strong>false</strong>.</td></tr><tr><td>5</td><td>eventThis option specifies the event used to select an accordion header. By default its value is <strong>click</strong>.</td></tr><tr><td>6</td><td>headerThis option specifies a selector or element to override the default pattern for identifying the header elements. By default its value is <strong>> li > :first-child,> :not(li):even</strong>.</td></tr><tr><td>7</td><td>heightStyleThis option is used to control the height of accordion and panels. By default its value is <strong>auto</strong>.</td></tr><tr><td>8</td><td>iconsThis option is an object that defines the icons to use to the left of the header text for opened and closed panels. The icon to use for closed panels is specified as a property named <em>header</em>, whereas the icon to use for open panels is specified as a property named <em>headerSelected</em>. By default its value is <strong>{ &#8220;header&#8221;: &#8220;ui-icon-triangle-1-e&#8221;, &#8220;activeHeader&#8221;: &#8220;ui-icon-triangle-1-s&#8221; }</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of accordion widget functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of accordion widget functionality, passing no parameters to the <strong>accordion()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Accordion Example &lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#accordion-1\" ).accordion();\n         });\n      &lt;/script>\n      \n      &lt;style>\n         #accordion-1{font-size: 14px;}\n      &lt;/style>\n   &lt;/head>\n\n   &lt;body>\n      &lt;div id = \"accordion-1\">\n         &lt;h3>Tab 1&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco \n               laboris nisi ut aliquip ex ea commodo consequat. \n            &lt;/p>\n         &lt;/div>\n         &lt;h3>Tab 2&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco \n               laboris nisi ut aliquip ex ea commodo consequat.     \n            &lt;/p>\n         &lt;/div>\n         &lt;h3>Tab 3&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco \n               laboris nisi ut aliquip ex ea commodo consequat.     \n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>accordionexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Accordion Example &lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#accordion-2\" ).accordion({\n               collapsible: true\n            });\n         });\n      &lt;/script>\n      \n      &lt;style>\n         #accordion-2{font-size: 14px;}\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"accordion-2\">\n         &lt;h3>Tab 1&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna \n               aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n               ullamco laboris nisi ut aliquip ex ea commodo consequat. \n            &lt;/p>\n         &lt;/div>\n         &lt;h3>Tab 2&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna \n               aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n               ullamco laboris nisi ut aliquip ex ea commodo consequat.      \n            &lt;/p>\n         &lt;/div>\n         &lt;h3>Tab 3&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna \n               aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n               ullamco laboris nisi ut aliquip ex ea commodo consequat.      \n            &lt;/p>\n            &lt;ul>\n               &lt;li>List item one&lt;/li>\n               &lt;li>List item two&lt;/li>\n               &lt;li>List item three&lt;/li>\n            &lt;/ul>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Click headers(Tab 1,Tab 2,Tab 3) to expand/collapse content that is broken into logical sections, much like tabs.</p>\n\n\n\n<h3>Use of collapsible</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>collapsible</strong> in the accordion widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Accordion Example &lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#accordion-2\" ).accordion({\n               collapsible: true\n            });\n         });\n      &lt;/script>\n      \n      &lt;style>\n         #accordion-2{font-size: 14px;}\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"accordion-2\">\n         &lt;h3>Tab 1&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna \n               aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n               ullamco laboris nisi ut aliquip ex ea commodo consequat. \n            &lt;/p>\n         &lt;/div>\n         &lt;h3>Tab 2&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna \n               aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n               ullamco laboris nisi ut aliquip ex ea commodo consequat.      \n            &lt;/p>\n         &lt;/div>\n         &lt;h3>Tab 3&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna \n               aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n               ullamco laboris nisi ut aliquip ex ea commodo consequat.      \n            &lt;/p>\n            &lt;ul>\n               &lt;li>List item one&lt;/li>\n               &lt;li>List item two&lt;/li>\n               &lt;li>List item three&lt;/li>\n            &lt;/ul>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>accordionexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Here we have set collapsible to&nbsp;<em>true</em>. Click on an accordion header, this allows collapsing the active section.</p>\n\n\n\n<h3>Use of heightStyle</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>heightStyle</strong> in the accordion widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Accordion Example &lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#accordion-3\" ).accordion({\n               heightStyle: \"content\"\n            });\n            $( \"#accordion-4\" ).accordion({\n               heightStyle: \"fill\"\n            });\n         });\n      &lt;/script>\n      \n      &lt;style>\n         #accordion-3, #accordion-4{font-size: 14px;}\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h3>Height style-content&lt;/h3>\n      &lt;div style = \"height:250px\">\n         &lt;div id = \"accordion-3\">\n            &lt;h3>Tab 1&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n                  sed do eiusmod tempor incididunt ut labore et dolore \n                  magna aliqua.\n               &lt;/p>\n               &lt;ul>\n                  &lt;li>List item one&lt;/li>\n                  &lt;li>List item two&lt;/li>\n                  &lt;li>List item three&lt;/li>\n                  &lt;li>List item four&lt;/li>\n                  &lt;li>List item five&lt;/li>\n               &lt;/ul>\n            &lt;/div>\n            &lt;h3>Tab 2&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n                  sed do eiusmod tempor incididunt ut labore et dolore \n                  magna aliqua.\n               &lt;/p>\n            &lt;/div>\n            &lt;h3>Tab 3&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n                  sed do eiusmod tempor incididunt ut labore et dolore \n                  magna aliqua. \n               &lt;/p>\n            &lt;/div>\n         &lt;/div>\n      &lt;/div>&lt;br>&lt;br>\n      \n      &lt;h3>Height style-Fill&lt;/h3>\n      &lt;div style = \"height:250px\">\n         &lt;div id = \"accordion-4\">\n            &lt;h3>Tab 1&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing \n                  elit, sed do eiusmod tempor incididunt ut labore \n                  et dolore magna aliqua.\n               &lt;/p>\n               &lt;ul>\n                  &lt;li>List item one&lt;/li>\n                  &lt;li>List item two&lt;/li>\n                  &lt;li>List item three&lt;/li>\n                  &lt;li>List item four&lt;/li>\n                  &lt;li>List item five&lt;/li>\n               &lt;/ul>\n            &lt;/div>\n            &lt;h3>Tab 2&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing \n                  elit, sed do eiusmod tempor incididunt ut labore \n                  et dolore magna aliqua.\n               &lt;/p>\n            &lt;/div>\n            &lt;h3>Tab 3&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing \n                  elit, sed do eiusmod tempor incididunt ut labore \n                  et dolore magna aliqua. \n               &lt;/p>\n            &lt;/div>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>accordionexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Here we have two accordions, the first one has&nbsp;<em>heightStyle</em>&nbsp;option set to&nbsp;<em>content</em>, which allows the accordion panels to keep their native height. Second accordion has&nbsp;<em>heightStyle</em>&nbsp;option set to&nbsp;<em>fill</em>, the script will automatically set the dimensions of the accordion to the height of its parent container.</p>\n\n\n\n<h2>$ (selector, context).accordion (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>accordion (&#8220;action&#8221;, params)</em>&nbsp;method can perform an action on accordion elements, such as selecting/de-selecting the accordion menu. The action is specified as a string in the first argument (e.g., &#8220;disable&#8221; disables all menus). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).accordion (\"action\", params);;\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action destroys the accordion functionality of an element completely. The elements return to their pre-init state.</td></tr><tr><td>2</td><td>disableThis action disable all menus. No click will be taken into account. This method does not accept any arguments.</td></tr><tr><td>3</td><td>enableThis action reactivate all menus. The clicks are again considered. This method does not accept any arguments.</td></tr><tr><td>4</td><td>option( optionName )This action gets the value of currently associated accordion element with the specified <em>optionName</em>. This takes a String value as argument.</td></tr><tr><td>5</td><td>optionThis action gets an object containing key/value pairs representing the current accordion options hash.</td></tr><tr><td>6</td><td>option( optionName, value )This action sets the value of the accordion option associated with the specified optionName.</td></tr><tr><td>7</td><td>option( options )This action sets one or more options for the accordion.</td></tr><tr><td>8</td><td>refreshThis action processes any headers and panels that were added or removed directly in the DOM. It then recomputes the height of the accordion panels. Results depend on the content and the heightStyle option. This method does not accept any arguments.</td></tr><tr><td>9</td><td>widgetThis action returns the accordion widget element; the one annotated with the <em>ui-accordion</em> class name.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>option( optionName, value )</em> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Accordion Example &lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src=\"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#accordion-5\" ).accordion({\n               disabled: false\n            });\n            $(\"input\").each(function () {\n               $(this).change(function () {\n                  if ($(this).attr(\"id\") == \"disableaccordion\") {\n                     $(\"#accordion-5\").accordion(\"option\", \"disabled\", true);\n                  } else {\n                     $(\"#accordion-5\").accordion(\"option\", \"disabled\", false);\n                  }\n               });\n            });\n         });\n      &lt;/script>\n      \n      &lt;style>\n         #accordion-5{font-size: 14px;}\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"accordion-5\">\n         &lt;h3>Tab 1&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n                  sed do eiusmod tempor incididunt ut labore et dolore magna \n                  aliqua. Ut enim ad minim veniam, quis nostrud \n                  exercitation ullamco laboris nisi ut aliquip ex ea \n                  commodo consequat. \n               &lt;/p>\n            &lt;/div>\n            &lt;h3>Tab 2&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n                  sed do eiusmod tempor incididunt ut labore et dolore magna \n                  aliqua. Ut enim ad minim veniam, quis nostrud \n                  exercitation ullamco laboris nisi ut aliquip ex ea \n                  commodo consequat.      \n               &lt;/p>\n            &lt;/div>\n            &lt;h3>Tab 3&lt;/h3>\n            &lt;div>\n               &lt;p>\n                  Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n                  sed do eiusmod tempor incididunt ut labore et dolore magna \n                  aliqua. Ut enim ad minim veniam, quis nostrud \n                  exercitation ullamco laboris nisi ut aliquip ex ea \n                  commodo consequat.      \n               &lt;/p>\n               &lt;ul>\n                  &lt;li>List item one&lt;/li>\n                  &lt;li>List item two&lt;/li>\n                  &lt;li>List item three&lt;/li>\n               &lt;/ul>\n            &lt;/div>\n         &lt;/div>\n         &lt;div style = \"margin-top:30px\">\n            &lt;input type = \"radio\" name = \"disable\" id = \"disableaccordion\"  \n               value = \"disable\">Disable accordion\n            &lt;input type = \"radio\" name = \"disable\" id = \"enableaccordion\" checked \n               value = \"enable\">Enable accordion\n         &lt;/div>\n     &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>accordionexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Here we demonstrate enabling and disabling of the accordions. Select the respective radio buttons to check each action.</p>\n\n\n\n<h2>Event Management on accordion elements</h2>\n\n\n\n<p>In addition to the accordion (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>activate(event, ui)This event is triggered when a menu is activated. This event is only fired on panel activation, it is not fired for the initial panel when the accordion widget is created.</td></tr><tr><td>2</td><td>beforeActivate(event, ui)This event is triggered before a panel is activated. This event can be canceled to prevent the panel from activating.</td></tr><tr><td>3</td><td>create(event, ui)This event is triggered when the accordion is created.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage in accordion widgets. This example demonstrates the use of events <em>create</em>, <em>beforeActive</em> and <em>active</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Accordion Example &lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#accordion-6\" ).accordion({\n               create: function (event, ui) {\n                  $(\"span#result\").html ($(\"span#result\").html () +\n                     \"&lt;b>Created&lt;/b>&lt;br>\");\n               },\n\t\t\t\t\t\n               beforeActivate : function (event, ui) {\n                  $(\"span#result\").html ($(\"span#result\").html () +\n                     \", &lt;b>beforeActivate&lt;/b>&lt;br>\");\n               },\n\t\t\t\t\t\n               activate: function (event, ui) {\n                  $(\"span#result\").html ($(\"span#result\").html () +\n                     \"&lt;b>activate&lt;/b>&lt;br>\");\n               }\n            });\n         });\n      &lt;/script>\n      \n      &lt;style>\n         #accordion-6{font-size: 14px;}\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"accordion-6\">\n         &lt;h3>Tab 1&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore \n               magna aliqua. Ut enim ad minim veniam, quis nostrud \n               exercitation ullamco laboris nisi ut aliquip ex ea \n               commodo consequat. \n            &lt;/p>\n         &lt;/div>\n         &lt;h3>Tab 2&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore \n               magna aliqua. Ut enim ad minim veniam, quis nostrud \n               exercitation ullamco laboris nisi ut aliquip ex ea \n               commodo consequat.    \n            &lt;/p>\n         &lt;/div>\n         &lt;h3>Tab 3&lt;/h3>\n         &lt;div>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore \n               magna aliqua. Ut enim ad minim veniam, quis nostrud \n               exercitation ullamco laboris nisi ut aliquip ex ea \n               commodo consequat.    \n            &lt;/p>\n            &lt;ul>\n               &lt;li>List item one&lt;/li>\n               &lt;li>List item two&lt;/li>\n               &lt;li>List item three&lt;/li>\n            &lt;/ul>\n         &lt;/div>\n      &lt;/div>\n      &lt;hr />\n      &lt;span id = result>&lt;/span>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>accordionexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Here we are displaying a text at the bottom, based on events.</p>\n","protected":false},"excerpt":{"rendered":"<p>Accordion Widget in jQueryUI is a jQuery based expandable and collapsible content holder that is broken into sections and probably looks like tabs. jQueryUI provides accordion() method to achieve this. Syntax The&nbsp;accordion()&nbsp;method can be used in two forms − $(selector, context).accordion (options) Method $(selector, context).accordion (&#8220;action&#8221;, params) Method $ (selector, context).accordion (options) Method The&nbsp;accordion (options)&nbsp;method declares that [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/65"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=65"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/65/revisions"}],"predecessor-version":[{"id":80,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/65/revisions/80"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=65"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=65"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=65"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":64,"date":"2020-07-20T11:42:22","date_gmt":"2020-07-20T11:42:22","guid":{"rendered":"http://javascript.foobrdigital.com/?p=64"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"autocomplete","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/autocomplete/","title":{"rendered":"Autocomplete"},"content":{"rendered":"\n<p>Auto completion is a mechanism frequently used in modern websites to provide the user with a list of suggestions for the beginning of the word, which he/she has typed in a text box. The user can then select an item from the list, which will be displayed in the input field. This feature prevents the user from having to enter an entire word or a set of words.</p>\n\n\n\n<p>JQueryUI provides an autocomplete widget — a control that acts a lot like a &lt;select&gt; dropdown, but filters the choices to present only those that match what the user is typing into a control. jQueryUI provides the&nbsp;<strong>autocomplete()</strong>&nbsp;method to create a list of suggestions below the input field and adds new CSS classes to the elements concerned to give them the appropriate style.Any field that can receive input can be converted into an Autocomplete, namely,&nbsp;<em>&lt;input&gt;</em>&nbsp;elements,&nbsp;<em>&lt;textarea&gt;</em>&nbsp;elements, and elements with the&nbsp;<em>contenteditable</em>&nbsp;attribute.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>autocomplete()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).autocomplete (options) Method</li><li>$(selector, context).autocomplete (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).autocomplete (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>autocomplete (options)</em>&nbsp;method declares that an HTML &lt;input&gt; element must be managed as an input field that will be displayed above a list of suggestions. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior of the list of suggestions when the user is typing in the input field.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).autocomplete (options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).autocomplete({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>appendToThis option is used append an element to the menu. By default its value is <strong>null</strong>.</td></tr><tr><td>2</td><td>autoFocusThis option when set to <em>true</em>, the first item of the menu will automatically be focused when the menu is shown. By default its value is <strong>false</strong>.</td></tr><tr><td>3</td><td>delayThis option is an Integer representing number of milliseconds to wait before trying to obtain the matching values (as specified by the <em>source</em> option). This can help reduce thrashing when non-local data is being obtained by giving the user time to enter more characters before the search is initiated. By default its value is <strong>300</strong>.</td></tr><tr><td>4</td><td>disabledThis option if specified and <em>true</em>, the autocomplete widget is initially disabled. By default its value is <strong>false</strong>.</td></tr><tr><td>5</td><td>minLengthThe number of characters that must be entered before trying to obtain the matching values (as specified by the source option). This can prevent too large a value set from being presented when a few characters isn’t enough to whittle the set down to a reasonable level. By default its value is <strong>1</strong>.</td></tr><tr><td>6</td><td>positionThis option identifies the position of the suggestions menu in relation to the associated input element. The <em>of</em> option defaults to the input element, but you can specify another element to position against. By default its value is <strong>{ my: &#8220;left top&#8221;, at: &#8220;left bottom&#8221;, collision: &#8220;none&#8221; }</strong>.</td></tr><tr><td>7</td><td>sourceThis option specifies the manner in which the data that matches the input data is obtained. A value must be provided or the autocomplete widget won’t be created. By default its value is <strong>none; must be specified</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of autocomplete widget functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of autocomplete widget functionality, passing no parameters to the <strong>autocomplete()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Autocomplete functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            var availableTutorials  =  &#91;\n               \"ActionScript\",\n               \"Bootstrap\",\n               \"C\",\n               \"C++\",\n            ];\n            $( \"#automplete-1\" ).autocomplete({\n               source: availableTutorials\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div class = \"ui-widget\">\n         &lt;p>Type \"a\" or \"s\"&lt;/p>\n         &lt;label for = \"automplete-1\">Tags: &lt;/label>\n         &lt;input id = \"automplete-1\">\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>autocompleteexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you should see the following output. Now, you can play with the result −</p>\n\n\n\n<h3>Use of autoFocus</h3>\n\n\n\n<p>The following example demonstrates the usage of option <strong>autoFocus</strong> in the autocomplete widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Autocomplete functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            var availableTutorials = &#91;\n               \"ActionScript\",\n               \"Bootstrap\",\n               \"C\",\n               \"C++\",\n            ];\n            $( \"#automplete-2\" ).autocomplete({\n               source: availableTutorials,\n               autoFocus:true\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div class = \"ui-widget\">\n         &lt;p>Type \"a\" or \"s\"&lt;/p>\n         &lt;label for = \"automplete-2\">Tags: &lt;/label>\n         &lt;input id = \"automplete-2\">\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>autocompleteexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you must also see the following output. Now, you can play with the result −</p>\n\n\n\n<h3>Use of minLength and delay</h3>\n\n\n\n<p>The following example demonstrates the usage of two options <strong>minLength</strong> and <strong>delay</strong> in the autocomplete widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Autocomplete functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            var availableTutorials = &#91;\n               \"ActionScript\",\n               \"Bootstrap\",\n               \"C\",\n               \"C++\",\n               \"Ecommerce\",\n               \"Jquery\",\n               \"Groovy\",\n               \"Java\",\n               \"JavaScript\",\n               \"Lua\",\n               \"Perl\",\n               \"Ruby\",\n               \"Scala\",\n               \"Swing\",\n               \"XHTML\"\t\n            ];\n            $( \"#automplete-3\" ).autocomplete({\n               minLength:2,   \n               delay:500,   \n               source: availableTutorials\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div class = \"ui-widget\">\n         &lt;p>Type two letter for e.g:ja,sc etc&lt;/p>\n         &lt;label for = \"automplete-3\">Tags: &lt;/label>\n         &lt;input id = \"automplete-3\">\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>autocompleteexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you must also see the following output. Now, you can play with the result −</p>\n\n\n\n<h3>Use of Label</h3>\n\n\n\n<p>The following example demonstrates the usage of option <strong>label</strong> in the autocomplete widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Autocomplete functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#autocomplete-4\" ).autocomplete({\n               source: &#91;\n                  { label: \"India\", value: \"IND\" },\n                  { label: \"Australia\", value: \"AUS\" }\n               ]\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div class = \"ui-widget\">\n         &lt;p>Type I OR A&lt;/p>\n         &lt;input id = \"autocomplete-4\">\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>autocompleteexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you must also see the following output. Now, you can play with the result −</p>\n\n\n\n<h3>Use of External Source</h3>\n\n\n\n<p>The following example demonstrates the use of external file for <strong>source</strong> option in the autocomplete widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Autocomplete functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#autocomplete-5\" ).autocomplete({\n               source: \"/jqueryui/search.php\",\n               minLength: 2\n            });\n         });\n      &lt;/script> \n   &lt;/head>\n   \n   &lt;body>\n      &lt;input id = \"autocomplete-5\">\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The file <em>search.php</em> is placed at the same location as the above file (autocompleteexample.html). Contents of search.php are as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?\n$term = $_GET&#91; \"term\" ];\n$companies = array(\n   array( \"label\" => \"JAVA\", \"value\" => \"1\" ),\n   array( \"label\" => \"DATA IMAGE PROCESSING\", \"value\" => \"2\" ),\n   array( \"label\" => \"JAVASCRIPT\", \"value\" => \"3\" ),\n   array( \"label\" => \"DATA MANAGEMENT SYSTEM\", \"value\" => \"4\" ),\n   array( \"label\" => \"COMPUTER PROGRAMMING\", \"value\" => \"5\" ),\n   array( \"label\" => \"SOFTWARE DEVELOPMENT LIFE CYCLE\", \"value\" => \"6\" ),\n   array( \"label\" => \"LEARN COMPUTER FUNDAMENTALS\", \"value\" => \"7\" ),\n   array( \"label\" => \"IMAGE PROCESSING USING JAVA\", \"value\" => \"8\" ),\n   array( \"label\" => \"CLOUD COMPUTING\", \"value\" => \"9\" ),\n   array( \"label\" => \"DATA MINING\", \"value\" => \"10\" ),\n   array( \"label\" => \"DATA WAREHOUSE\", \"value\" => \"11\" ),\n   array( \"label\" => \"E-COMMERCE\", \"value\" => \"12\" ),\n   array( \"label\" => \"DBMS\", \"value\" => \"13\" ),\n   array( \"label\" => \"HTTP\", \"value\" => \"14\" )\n\t\n);\n\n$result = array();\nforeach ($companies as $company) {\n   $companyLabel = $company&#91; \"label\" ];\n   if ( strpos( strtoupper($companyLabel), strtoupper($term) )!== false ) {\n      array_push( $result, $company );\n   }\n}\n\necho json_encode( $result );\n?></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>autocompleteexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you must also see the following output. Now, you can play with the result −</p>\n\n\n\n<p>Type two letter words for e.g: ja, sc etc</p>\n\n\n\n<h2>$ (selector, context).autocomplete (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>autocomplete (&#8220;action&#8221;, params)</em>&nbsp;method can perform an action on the list of suggestions, such as show or hide. The action is specified as a String in the first argument (e.g., &#8220;close&#8221; to hide the list). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).autocomplete (\"action\", params);;\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>closeThis action hides the list of suggestions in the Autocomplete menu. This method does not accept any arguments.</td></tr><tr><td>2</td><td>destroyThis action removes the autocomplete functionality. Lists of suggestions are deleted. This method does not accept any arguments.</td></tr><tr><td>3</td><td>disableThis action disables the autocompletion mechanism. The list of suggestions no longer appears. This method does not accept any arguments.</td></tr><tr><td>4</td><td>enableThis action reactivates the autocompletion mechanism. The list of suggestions will again be displayed. This method does not accept any arguments.</td></tr><tr><td>5</td><td>option( optionName )This action retrieves the value of the specified param <em>optionName</em>. This option corresponds to one of those used with autocomplete (options).</td></tr><tr><td>6</td><td>optionThis action gets an object containing key/value pairs representing the current autocomplete options hash.</td></tr><tr><td>7</td><td>option( optionName, value )This action sets the value of the autocomplete option associated with the specified <em>optionName</em>. The argument <em>optionName</em> is name of the option to be set and <em>value</em> is the value to be set for the option.</td></tr><tr><td>8</td><td>option( options )This action is sets one or more options for the autocomplete. The argument <em>options</em> is a map of option-value pairs to be set.</td></tr><tr><td>9</td><td>search( [value ] )This action searches for correspondence between the string value and the data source (specified in <em>options.source</em>). The minimum number of characters (indicated in <em>options.minLength</em>) must be reached in value, otherwise the search is not performed.</td></tr><tr><td>10</td><td>widgetRetrieve the &lt;ul> DOM element corresponding to the list of suggestions. This is an object of jQuery class that allows easy access to the list without using jQuery selectors.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>option( optionName, value )</em> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Autocomplete functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            var availableTutorials = &#91;\n               \"ActionScript\",\n               \"Bootstrap\",\n               \"C\",\n               \"C++\",\n               \"Ecommerce\",\n               \"Jquery\",\n               \"Groovy\",\n               \"Java\",\n               \"JavaScript\",\n               \"Lua\",\n               \"Perl\",\n               \"Ruby\",\n               \"Scala\",\n               \"Swing\",\n               \"XHTML\"\t\n            ];\n            $( \"#automplete-6\" ).autocomplete({\n               source: availableTutorials\n            });\n            $( \"#automplete-6\" ).autocomplete(\"option\", \"position\",\n               { my : \"right-10 top+10\", at: \"right top\" }) \n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div class = \"ui-widget\">\n         &lt;p>Type \"a\" or \"s\"&lt;/p>\n         &lt;label for = \"automplete-6\">Tags: &lt;/label>\n         &lt;input id = \"automplete-6\">\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>autocompleteexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you must also see the following output −</p>\n\n\n\n<h2>Extension Points</h2>\n\n\n\n<p>The autocomplete widget can be extended as its built with the widget factory. When extending widgets, you have the ability to override or add to the behavior of existing methods. The following table lists methods that act as extension points with the same API stability as the plugin methods listed above.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td>_renderItem( ul, item )This method controls the creation of each option in the widget&#8217;s menu. This method creates a new &lt;li> element, appends it to the menu and return it.</td></tr><tr><td>2</td><td>_renderMenu( ul, items )This method controls building the widget&#8217;s menu.</td></tr><tr><td>3</td><td>_resizeMenu()This method controls sizing the menu before it is displayed.The menu element is available at <em>this.menu.element</em>. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h2>Event Management on Autocomplete Elements</h2>\n\n\n\n<p>In addition to the autocomplete (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>change(event, ui)This event is triggered when the value of the &lt;input> element is changed based upon a selection. When triggered, this event will always come after the <em>close</em> event is triggered.</td></tr><tr><td>2</td><td>close(event, ui)This event is triggered whenever the autocomplete menu closes.</td></tr><tr><td>3</td><td>create(event, ui)This event is triggered when the autocomplete is created.</td></tr><tr><td>4</td><td>focus(event, ui)This event is triggered whenever one of the menu choices receives focus. Unless canceled (for example, by returning false), the focused value is set into the &lt;input> element.</td></tr><tr><td>5</td><td>open(event, ui)This event is triggered after the data has been readied and the menu is about to open.</td></tr><tr><td>6</td><td>response(event, ui)This event is triggered after a search completes, before the menu is shown. This event is always triggered when a search completes, even if the menu will not be shown because there are no results or the Autocomplete is disabled.</td></tr><tr><td>7</td><td>search(event, ui)This event is triggered after any <em>delay</em> and <em>minLength</em> criteria have been met, just before the mechanism specified by source is activated. If canceled, the search operation is aborted.</td></tr><tr><td>8</td><td>select(event, ui)This event is triggered when a value is selected from the autocomplete menu. Canceling this event prevents the value from being set into the &lt;input> element (but doesn’t prevent the menu from closing).</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage in autocomplete widgets. This example demonstrates the use of events <em>focus</em>, and <em>select</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Autocomplete functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         #project-label {\n            display: block;\n            font-weight: bold;\n            margin-bottom: 1em;\n         }\n         #project-icon {\n            float: left;\n            height: 32px;\n            width: 32px;\n         }\n         #project-description {\n            margin: 0;\n            padding: 0;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            var projects = &#91;\n               {\n                  value: \"java\",\n                  label: \"Java\",\n                  desc: \"write once run anywhere\",\n               },\n               {\n                  value: \"jquery-ui\",\n                  label: \"jQuery UI\",\n                  desc: \"the official user interface library for jQuery\",\n               },\n               {\n                  value: \"Bootstrap\",\n                  label: \"Twitter Bootstrap\",\n                  desc: \"popular front end frameworks \",\n               }\n            ];\n            $( \"#project\" ).autocomplete({\n               minLength: 0,\n               source: projects,\n               focus: function( event, ui ) {\n                  $( \"#project\" ).val( ui.item.label );\n                     return false;\n               },\n               select: function( event, ui ) {\n                  $( \"#project\" ).val( ui.item.label );\n                  $( \"#project-id\" ).val( ui.item.value );\n                  $( \"#project-description\" ).html( ui.item.desc );\n                  return false;\n               }\n            })\n\t\t\t\t\n            .data( \"ui-autocomplete\" )._renderItem = function( ul, item ) {\n               return $( \"&lt;li>\" )\n               .append( \"&lt;a>\" + item.label + \"&lt;br>\" + item.desc + \"&lt;/a>\" )\n               .appendTo( ul );\n            };\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"project-label\">Select a project (type \"a\" for a start):&lt;/div>\n      &lt;input id = \"project\">\n      &lt;input type = \"hidden\" id = \"project-id\">\n      &lt;p id = \"project-description\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>autocompleteexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript.</p>\n","protected":false},"excerpt":{"rendered":"<p>Auto completion is a mechanism frequently used in modern websites to provide the user with a list of suggestions for the beginning of the word, which he/she has typed in a text box. The user can then select an item from the list, which will be displayed in the input field. This feature prevents the [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/64"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=64"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/64/revisions"}],"predecessor-version":[{"id":81,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/64/revisions/81"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=64"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=64"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=64"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":94,"date":"2020-07-20T16:48:48","date_gmt":"2020-07-20T16:48:48","guid":{"rendered":"http://javascript.foobrdigital.com/?p=94"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"button","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/button/","title":{"rendered":"Button"},"content":{"rendered":"\n<p>jQueryUI provides button() method to transform the HTML elements (like buttons, inputs and anchors) into themeable buttons, with automatic management of mouse movements on them, all managed transparently by jQuery UI.</p>\n\n\n\n<p>In order to group radio buttons, Button also provides an additional widget, called&nbsp;<em>Buttonset</em>.&nbsp;<em>Buttonset</em>&nbsp;is used by selecting a container element (which contains the radio buttons) and calling&nbsp;<em>.buttonset()</em>.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>button()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).button (options) Method</li><li>$(selector, context).button (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).button (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>button (options)</em>&nbsp;method declares that an HTML element should be treated as button. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior and appearance of the button.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).button (options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).button({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>disabledThis option deactivates the button is set to <em>true</em>. By default its value is <strong>false</strong>.</td></tr><tr><td>2</td><td>iconsThis option specifies that one or two icons are to be displayed in the <em>button: primary</em> icons to the left, secondary icons to the right. The primary icon is identified by the <em>primary</em> property of the object, and the <em>secondary</em> icon is identified by the secondary property. By default its value is <strong>primary: null, secondary: null</strong>.</td></tr><tr><td>3</td><td>labelThis option specifies text to display on the button that overrides the natural label. If omitted, the natural label for the element is displayed. In the case of radio buttons and checkboxes, the natural label is the &lt;label> element associated with the control. By default its value is <strong>null</strong>.</td></tr><tr><td>4</td><td>textThis option specifies whether text is to be displayed on the button. If specified as <em>false</em>, text is suppressed if (and only if) the icons option specifies at least one icon. By default its value is <strong>true</strong>.</td></tr></tbody></table></figure>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of button widget functionality, passing no parameters to the <strong>button()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Buttons functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#button-1, #button-2, #button-3, #button-4\" ).button();\n            $( \"#button-5\" ).buttonset();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;button id = \"button-1\">A button element&lt;/button>\n      &lt;input id = \"button-2\" type = \"submit\" value = \"A submit button\">\n      &lt;a id = \"button-3\" href = \"\">An anchor&lt;/a>\n      &lt;input type = \"checkbox\"  id = \"button-4\" >\n      &lt;label for = \"button-4\">Toggle&lt;/label>\n      &lt;br>&lt;br>\n      &lt;div id = \"button-5\">\n         &lt;input type = \"checkbox\" id = \"check1\">\n         &lt;label for = \"check1\">Left&lt;/label>\n         &lt;input type = \"checkbox\" id = \"check2\">\n         &lt;label for = \"check2\">Middle&lt;/label>\n         &lt;input type = \"checkbox\" id = \"check3\">\n         &lt;label for = \"check3\">Right&lt;/label>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>buttonexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>This example demonstrates the markup that can be used for buttons: A button element, an input of type submit and an anchor.</p>\n\n\n\n<h3>Use of icons, text and disabled</h3>\n\n\n\n<p>The following example demonstrates the usage of two options <strong>icons</strong>, <strong>text</strong> and <strong>disabled</strong> in the button function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Buttons functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#button-6\" ).button({\n               icons: {\n                  primary: \"ui-icon-locked\"\n               },\n               text: false\n            });\n            $( \"#button-7\" ).button({\n               disabled:true\n            });\n            $( \"#button-8\" ).button({\n               icons: {\n                  primary: \"ui-icon-gear\",\n                  secondary: \"ui-icon-triangle-1-s\"\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;button id = \"button-6\">\n         Button with icon only\n      &lt;/button>\n      &lt;button id = \"button-7\">\n         Button Disabled\n      &lt;/button>\n      &lt;button id = \"button-8\">\n         Button with two icons\n      &lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>buttonexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>Here you can see a button with only icon, a button with two icons and a disabled button.</p>\n\n\n\n<h2>$ (selector, context).button (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>button (&#8220;action&#8221;, params)</em>&nbsp;method can perform an action on buttons, such as disabling the button. The action is specified as a string in the first argument (e.g., &#8220;disable&#8221; to disable button). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).button (\"action\", params);\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action removes the button functionality of an element completely. The elements return to their pre-init state. This method does not accept any arguments.</td></tr><tr><td>2</td><td>disableThis action disables the button functionality of an element. This method does not accept any arguments.</td></tr><tr><td>3</td><td>enableThis action enables the button functionality of an element. This method does not accept any arguments.</td></tr><tr><td>4</td><td>option( optionName )This action retrieves the value of the option specified in <em>optionName</em>. Where <em>optionName</em> is a String.</td></tr><tr><td>5</td><td>optionThis action retrieves an object containing key/value pairs representing the current button options hash.</td></tr><tr><td>6</td><td>option( optionName, value )This action sets the value of the button option associated with the specified <em>optionName</em>.</td></tr><tr><td>7</td><td>option( options )This action sets one or more options for the button. Where <em>options</em> is map of option-value pairs to set.</td></tr><tr><td>8</td><td>refreshThis action refreshes the display of the button. This is useful when the buttons are handled by the program and the display does not necessarily correspond to the internal state. This method does not accept any arguments.</td></tr><tr><td>9</td><td>widgetThis action returns a jQuery object containing the button element. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>destroy()</em> and <em>disable()</em> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Buttons functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#button-9\" ).button({\n               text: false,\n               icons: {\n                  primary: \"ui-icon-seek-start\"\n               }\n            });\n            $( \"#button-9\" ).button('destroy');\n            $( \"#button-10\" ).button({\n               icons: {\n                  primary: \"ui-icon-seek-prev\"\n               }\n            });\n            $( \"#button-10\" ).button('disable');\n            $( \"#button-11\" ).button({\n               text: false,\n               icons: {\n                  primary: \"ui-icon-play\"\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;button id = \"button-9\">\n         I'm destroyed\n      &lt;/button>\n      &lt;button id = \"button-10\">   \n         I'm disabled\n      &lt;/button>\n      &lt;button id = \"button-11\">\n         play\n      &lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>buttonexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<h2>Event Management on Buttons</h2>\n\n\n\n<p>In addition to the button (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>create(event, ui)This event is triggered when the button is created. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage for button widget functionality. This example demonstrates the use of event <em>create</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Buttons functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .resultarea {\n            background: #cedc98;\n            border-top: 1px solid #000000;\n            border-bottom: 1px solid #000000;\n            color: #333333;\n            font-size:14px;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#button-12\" ).button({\n               create: function() {\n                  $(\"p#result\").html ($(\"p#result\")\n                  .html () + \"&lt;b>created&lt;/b>&lt;br>\");\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;button id = \"button-12\">\n         A button element\n      &lt;/button>\n      &lt;p class = \"resultarea\" id = result>&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>buttonexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, you must also see the following output −</p>\n","protected":false},"excerpt":{"rendered":"<p>jQueryUI provides button() method to transform the HTML elements (like buttons, inputs and anchors) into themeable buttons, with automatic management of mouse movements on them, all managed transparently by jQuery UI. In order to group radio buttons, Button also provides an additional widget, called&nbsp;Buttonset.&nbsp;Buttonset&nbsp;is used by selecting a container element (which contains the radio buttons) [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/94"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=94"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/94/revisions"}],"predecessor-version":[{"id":95,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/94/revisions/95"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=94"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=94"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=94"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":93,"date":"2020-07-20T16:54:51","date_gmt":"2020-07-20T16:54:51","guid":{"rendered":"http://javascript.foobrdigital.com/?p=93"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"datepicker","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/datepicker/","title":{"rendered":"Datepicker"},"content":{"rendered":"\n<p>Datepickers in jQueryUI allow users to enter dates easily and visually. You can customize the date format and language, restrict the selectable date ranges and add in buttons and other navigation options easily.</p>\n\n\n\n<p>jQueryUI provides&nbsp;<strong>datepicker()</strong>&nbsp;method that creates a datepicker and changes the appearance of HTML elements on a page by adding new CSS classes. Transforms the &lt;input&gt;, &lt;div&gt;, and &lt;span&gt; elements in the wrapped set into a datepicker control.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>By default, for &lt;input&gt; elements, the datepicker calendar opens in a small overlay when the associated text field gains focus. For an inline calendar, simply attach the datepicker to a &lt;div&gt;, or &lt;span&gt; element.</p></blockquote>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>datepicker()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).datepicker (options) Method</li><li>$(selector, context).datepicker (&#8220;action&#8221;, [params]) Method</li></ul>\n\n\n\n<h2>$ (selector, context).datepicker (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>datepicker (options)</em>&nbsp;method declares that an &lt;input&gt; element (or &lt;div&gt;, or &lt;span&gt;, depending on how you choose to display the calendar) should be managed as a datepicker. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior and appearance of the datepicker elements.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).datepicker(options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).datepicker({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>altFieldThis option specifies a jQuery selector for a field that is also updated with any date selections. The <em>altFormat</em> option can be used to set the format for this value. This is quite useful for setting date values into a hidden input element to be submitted to the server, while displaying a more user-friendly format to the user. By default its value is <strong>&#8220;&#8221;</strong>.</td></tr><tr><td>2</td><td>altFormatThis option is used when an <em>altField</em> option is specified. It provides the format for the value to be written to the alternate element. By default its value is <strong>&#8220;&#8221;</strong>.</td></tr><tr><td>3</td><td>appendTextThis option is a String value to be placed after the &lt;input> element, intended to show instructions to the user. By default its value is <strong>&#8220;&#8221;</strong>.</td></tr><tr><td>4</td><td>autoSizeThis option when set to <em>true</em> resizes the &lt;input> element to accommodate the datepicker’s date format as set with the dateFormat option. By default its value is <strong>false</strong>.</td></tr><tr><td>5</td><td>beforeShowThis option is a callback function that’s invoked just before a datepicker is displayed, with the &lt;input> element and datepicker instance passed as parameters. This function can return an options hash used to modify the datepicker. By default its value is <strong>&#8220;&#8221;</strong>.</td></tr><tr><td>6</td><td>beforeShowDayThis option is a callback function which takes a date as parameter, that’s invoked for each day in the datepicker just before it’s displayed, with the date passed as the only parameter. This can be used to override some of the default behavior of the day elements. This function must return a three-element array.By default its value is <strong>null</strong>.</td></tr><tr><td>7</td><td>buttonImageThis option specifies the path to an image to be displayed on the button enabled by setting the <em>showOn</em> option to one of buttons or both. If <em>buttonText</em> is also provided, the button text becomes the <em>alt</em> attribute of the button. By default its value is <strong>&#8220;&#8221;</strong>.</td></tr><tr><td>8</td><td>buttonImageOnlyThis option if set to <em>true</em>, specifies that the image specified by buttonImage is to appear standalone (not on a button). The showOn option must still be set to one of button or both for the image to appear. By default its value is <strong>false</strong>.</td></tr><tr><td>9</td><td>buttonTextThis option specifies the caption for the button enabled by setting the <em>showOn</em> option to one of <em>button</em> or <em>both</em>. By default its value is <strong>&#8220;&#8230;&#8221;</strong>.</td></tr><tr><td>10</td><td>calculateWeekThis option is a custom function to calculate and return the week number for a date passed as the lone parameter. The default implementation is that provided by the <em>$.datepicker.iso8601Week()</em> utility function.</td></tr><tr><td>11</td><td>changeMonthThis option if set to <em>true</em>, a month dropdown is displayed, allowing the user to directly change the month without using the arrow buttons to step through them. By default its value is <strong>false</strong>.</td></tr><tr><td>12</td><td>changeYearThis option if set to <em>true</em>, a year dropdown is displayed, allowing the user to directly change the year without using the arrow buttons to step through them. Option <em>yearRange</em> can be used to control which years are made available for selection. By default its value is <strong>false</strong>.</td></tr><tr><td>13</td><td>closeTextThis option specifies the text to replace the default caption of Done for the close button. It is used when the button panel is displayed via the <em>showButtonPanel</em> option. By default its value is <strong>&#8220;Done&#8221;</strong>.</td></tr><tr><td>14</td><td>constrainInputThis option if set <em>true</em> (the default), text entry into the &lt;input> element is constrained to characters allowed by the current <em>dateformat</em> option. By default its value is <strong>true</strong>.</td></tr><tr><td>15</td><td>currentTextThis option specifies the text to replace the default caption of Today for the current button. This is used if the button panel is displayed via the <em>showButtonPanel</em> option. By default its value is <strong>Today</strong>.</td></tr><tr><td>16</td><td>dateFormatThis option specifies the date format to be used. By default its value is <strong>mm/dd/yy</strong>.</td></tr><tr><td>17</td><td>dayNamesThis option is a 7-element array providing the full day names with the 0th element representing Sunday. Can be used to localize the control. By default its value is <strong>[ &#8220;Sunday&#8221;, &#8220;Monday&#8221;, &#8220;Tuesday&#8221;, &#8220;Wednesday&#8221;, &#8220;Thursday&#8221;, &#8220;Friday&#8221;, &#8220;Saturday&#8221; ]</strong>.</td></tr><tr><td>18</td><td>dayNamesMinThis option is a 7-element array providing the minimal day names with the 0th element representing Sunday, used as column headers. Can be used to localize the control. By default its value is <strong>[ &#8220;Su&#8221;, &#8220;Mo&#8221;, &#8220;Tu&#8221;, &#8220;We&#8221;, &#8220;Th&#8221;, &#8220;Fr&#8221;, &#8220;Sa&#8221; ]</strong>.</td></tr><tr><td>19</td><td>dayNamesShortThis option specifies a 7-element array providing the short day names with the 0th element representing Sunday. Can be used to localize the control. By default its value is <strong>[ &#8220;Sun&#8221;, &#8220;Mon&#8221;, &#8220;Tue&#8221;, &#8220;Wed&#8221;, &#8220;Thu&#8221;, &#8220;Fri&#8221;, &#8220;Sat&#8221; ]</strong>.</td></tr><tr><td>20</td><td>defaultDateThis option sets the initial date for the control, overriding the default value of today, if the &lt;input> element has no value. This can be a <em>Date</em> instance, the <em>number</em> of days from today, or a <em>string</em> specifying an absolute or relative date. By default its value is <strong>null</strong>.</td></tr><tr><td>21</td><td>durationThis option specifies the speed of the animation that makes the datepicker appear. Can be one of <em>slow, normal, or fast,</em> or the number of milliseconds for the animation to span. By default its value is <strong>normal</strong>.</td></tr><tr><td>22</td><td>firstDayThis option specifies which day is considered the first day of the week, and will be displayed as the left-most column. By default its value is <strong>0</strong>.</td></tr><tr><td>23</td><td>gotoCurrentThis option when set to <em>true</em>, the current day link is set to the selected date, overriding the default of today. By default its value is <strong>false</strong>.</td></tr><tr><td>24</td><td>hideIfNoPrevNextThis option if set to <em>true</em>, hides the next and previous links (as opposed to merely disabling them) when they aren’t applicable, as determined by the settings of the <em>minDate</em> and <em>maxDate</em> options. By default its value is <strong>false</strong>.</td></tr><tr><td>25</td><td>isRTLThis option when set to <em>true</em>, specifies the localizations as a right-to-left language. By default its value is <strong>false</strong>.</td></tr><tr><td>26</td><td>maxDateThis option sets the maximum selectable date for the control. This can be a Date instance, the number of days from today, or a string specifying an absolute or relative date. By default its value is <strong>null</strong>.</td></tr><tr><td>27</td><td>minDateThis option sets the minimum selectable date for the control. This can be a <em>Date</em> instance, the <em>number</em> of days from today, or a <em>string</em> specifying an absolute or relative date. By default its value is <strong>null</strong>.</td></tr><tr><td>28</td><td>monthNamesThis option is a 12-element array providing the full month names with the 0th element representing January. Can be used to localize the control. By default its value is <strong>[ &#8220;January&#8221;, &#8220;February&#8221;, &#8220;March&#8221;, &#8220;April&#8221;, &#8220;May&#8221;, &#8220;June&#8221;, &#8220;July&#8221;, &#8220;August&#8221;, &#8220;September&#8221;, &#8220;October&#8221;, &#8220;November&#8221;, &#8220;December&#8221; ]</strong>.</td></tr><tr><td>29</td><td>monthNamesShortThis option specifies a 12-element array providing the short month names with the 0th element representing January. Can be used to localize the control. By default its value is <strong>[ &#8220;Jan&#8221;, &#8220;Feb&#8221;, &#8220;Mar&#8221;, &#8220;Apr&#8221;, &#8220;May&#8221;, &#8220;Jun&#8221;, &#8220;Jul&#8221;, &#8220;Aug&#8221;, &#8220;Sep&#8221;, &#8220;Oct&#8221;, &#8220;Nov&#8221;, &#8220;Dec&#8221; ]</strong>.</td></tr><tr><td>30</td><td>navigationAsDateFormatThis option if set to <em>true</em>, the navigation links for <em>nextText, prevText, </em>and <em>currentText</em> are passed through the <em>$.datepicker.formatDate()</em> function prior to display. This allows date formats to be supplied for those options that get replaced with the relevant values. By default its value is <strong>false</strong>.</td></tr><tr><td>31</td><td>nextTextThis option specifies the text to replace the default caption of Next for the next month navigation link. ThemeRoller replaces this text with an icon. By default its value is <strong>Next</strong>.</td></tr><tr><td>32</td><td>numberOfMonthsThis option specifies the number of months to show in the datepicker. By default its value is <strong>1</strong>.</td></tr><tr><td>33</td><td>onChangeMonthYearThis option is a callback that’s invoked when the datepicker moves to a new month or year, with the selected year, month (1-based), and datepicker instance passed as parameters, and the function context is set to the input field element. By default its value is <strong>null</strong>.</td></tr><tr><td>34</td><td>onCloseThis option is a callback invoked whenever a datepicker is closed, passed the selected date as text (the empty string if there is no selection), and the datepicker instance, and the function context is set to the input field element. By default its value is <strong>null</strong>.</td></tr><tr><td>35</td><td>onSelectThis option is a callback invoked whenever a date is selected, passed the selected date as text (the empty string if there is no selection), and the datepicker instance, and the function context is set to the input field element. By default its value is <strong>null</strong>.</td></tr><tr><td>36</td><td>prevTextThis option specifies the text to replace the default caption of <em>Prev</em> for the previous month navigation link. (Note that the ThemeRoller replaces this text with an icon). By default its value is <strong>PrevdefaultDatedayNamesMin</strong>.</td></tr><tr><td>37</td><td>selectOtherMonthsThis option if set to <em>true</em>, days shown before or after the displayed month(s) are selectable. Such days aren’t displayed unless the <em>showOtherMonths</em> option is true. By default its value is <strong>false</strong>.</td></tr><tr><td>38</td><td>shortYearCutoffThis option if its a number, specifies a value between 0 and 99 years before which any 2-digit year values will be considered to belong to the previous century. If this option is a string, the value undergoes a numeric conversion and is added to the current year. The default is <strong>+10</strong> which represents 10 years from the current year.</td></tr><tr><td>39</td><td>showAnimThis option specifies sets the name of the animation to be used to show and hide the datepicker. If specified, must be one of <em>show (the default), fadeIn, slideDown,</em> or any of the jQuery UI show/hide animations. By default its value is <strong>show</strong>.</td></tr><tr><td>40</td><td>showButtonPanelThis option if set to <em>true</em>, a button panel at the bottom of the datepicker is displayed, containing current and close buttons. The caption of these buttons can be provided via the <em>currentText</em> and <em>closeText</em> options. By default its value is <strong>false</strong>.</td></tr><tr><td>41</td><td>showCurrentAtPosThis option specifies the 0-based index, starting at the upper left, of where the month containing the current date should be placed within a multi-month display. By default its value is <strong>0</strong>.</td></tr><tr><td>42</td><td>showMonthAfterYearThis option specifies if set to <em>true</em>, the positions of the month and year are reversed in the header of the datepicker. By default its value is <strong>false</strong>.</td></tr><tr><td>43</td><td>showOnThis option specifies when the datepicker should appear. The possible values are <em>focus, button or both</em>. By default its value is <strong>focus</strong>.</td></tr><tr><td>44</td><td>showOptionsThis option provides a hash to be passed to the animation when a jQuery UI animation is specified for the <em>showAnim</em> option. By default its value is <strong>{}</strong>.</td></tr><tr><td>45</td><td>showOtherMonthsThis option if set to <em>true</em>, dates before or after the first and last days of the current month are displayed. These dates aren&#8217;t selectable unless the selectOtherMonths option is also set to true. By default its value is <strong>false</strong>.</td></tr><tr><td>46</td><td>showWeekThis option if set to <em>true</em>, the week number is displayed in a column to the left of the month display. The calculateWeek option can be used to alter the manner in which this value is determined. By default its value is <strong>false</strong>.</td></tr><tr><td>47</td><td>stepMonthsThis option specifies specifies how many months to move when one of the month navigation controls is clicked. By default its value is <strong>1</strong>.</td></tr><tr><td>48</td><td>weekHeaderThis option specifies the text to display for the week number column, overriding the default value of Wk, when showWeek is true. By default its value is <strong>Wk</strong>.</td></tr><tr><td>49</td><td>yearRangeThis option specifies limits on which years are displayed in the dropdown in the form <em>from:to</em> when <em>changeYear</em> is <em>true</em>. The values can be absolute or relative (for example: 2005:+2, for 2005 through 2 years from now). The prefix c can be used to make relative values offset from the selected year rather than the current year (example: c-2:c+3). By default its value is <strong>c-10:c+10</strong>.</td></tr><tr><td>50</td><td>yearSuffixThis option displays additional text after the year in the datepicker header. By default its value is <strong>&#8220;&#8221;</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of datepicker functionality.</p>\n\n\n\n<h3>Default functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of datepicker functionality passing no parameters to the <strong>datepicker()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-1\" ).datepicker();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-1\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h3>Inline Datepicker</h3>\n\n\n\n<p>The following example demonstrates a simple example of inline datepicker functionality.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-2\" ).datepicker();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      Enter Date: &lt;div id = \"datepicker-2\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example we use &lt;div&gt; element to get the inline date picker.</p>\n\n\n\n<h3>Use of appendText, dateFormat, altField and altFormat</h3>\n\n\n\n<p>The following example shows the usage of three important options <strong>(a) appendText (b) dateFormat</strong> <strong>(c) altField</strong> and <strong>(d) altFormat</strong> in the datepicker function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-3\" ).datepicker({\n               appendText:\"(yy-mm-dd)\",\n               dateFormat:\"yy-mm-dd\",\n               altField: \"#datepicker-4\",\n               altFormat: \"DD, d MM, yy\"\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-3\">&lt;/p>\n      &lt;p>Alternate Date: &lt;input type = \"text\" id = \"datepicker-4\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>In the above example, you can see that the date formate for first input is set as&nbsp;<em>yy-mm-dd</em>. If you select some date from datepicker the same date is reflected in the second input field whose date format is set as &#8220;DD, d MM, yy&#8221;.</p>\n\n\n\n<h3>Use of beforeShowDay</h3>\n\n\n\n<p>The following example shows the usage of option <strong>beforeShowDay</strong> in the datepicker function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-5\" ).datepicker({\n               beforeShowDay : function (date) {\n                  var dayOfWeek = date.getDay ();\n                  // 0 : Sunday, 1 : Monday, ...\n                  if (dayOfWeek == 0 || dayOfWeek == 6) return &#91;false];\n                  else return &#91;true];\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-5\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example sunday and saturday are disabled.</p>\n\n\n\n<h3>Use of showOn, buttonImage, and buttonImageOnly</h3>\n\n\n\n<p>The following example shows the usage of three important options <strong>(a) showOn (b) buttonImage</strong> and <strong>(c) buttonImageOnly</strong> in the datepicker function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-6\" ).datepicker({\n               showOn:\"button\",\n               buttonImage: \"/jqueryui/images/calendar-icon.png\",\n               buttonImageOnly: true\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-6\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example an icon is displayed which needs to b clicked to open the datepicker.</p>\n\n\n\n<h3>Use of defaultDate, dayNamesMin, and duration</h3>\n\n\n\n<p>The following example shows the usage of three important options <strong>(a) dayNamesMin (b) dayNamesMin</strong> and <strong>(c) duration</strong> in the datepicker function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-7\" ).datepicker({\n               defaultDate:+9,\n               dayNamesMin: &#91; \"So\", \"Mo\", \"Di\", \"Mi\", \"Do\", \"Fr\", \"Sa\" ],\n               duration: \"slow\"\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-7\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example the names of the days are changed using&nbsp;<em>dayNamesMin</em>. You can also see a default date is set.</p>\n\n\n\n<h3>Use of prevText, nextText, showOtherMonths and selectOtherMonths</h3>\n\n\n\n<p>The following example shows the usage of three important options <strong>(a) prevText (b) nextText (c) showOtherMonths</strong> and <strong>(d) selectOtherMonths</strong> in the datepicker function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      &lt;!-- Javascript -->\n      \n      &lt;script>\n         $(function() {\n            $( \"#datepicker-8\" ).datepicker({\n               prevText:\"click for previous months\",\n               nextText:\"click for next months\",\n               showOtherMonths:true,\n               selectOtherMonths: false\n            });\n            $( \"#datepicker-9\" ).datepicker({\n               prevText:\"click for previous months\",\n               nextText:\"click for next months\",\n               showOtherMonths:true,\n               selectOtherMonths: true\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Start Date: &lt;input type = \"text\" id = \"datepicker-8\">&lt;/p>\n      &lt;p>Enter End Date: &lt;input type = \"text\" id = \"datepicker-9\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>In the above example the prev and nect links have captions. If you click on the element, the datepicker opens. Now in the first datepicker, the other months dates are disable as selectOtherMonths is set<em>false</em>. In the second date picker for second input type, the selectOtherMonths is set to<em>true</em>.</p>\n\n\n\n<h3>Use of changeMonth, changeYear, and numberOfMonths</h3>\n\n\n\n<p>The following example shows the usage of three important options <strong>(a) changeMonth (b) changeYear</strong> and <strong>(c) numberOfMonths</strong> in the datepicker function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-10\" ).datepicker({\n               changeMonth:true,\n               changeYear:true,\n               numberOfMonths:&#91;2,2]\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-10\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>In the above example, you can see dropdown menus for Month and Year fields. And we are dispalying 4 months in an array structure of [2,2].</p>\n\n\n\n<h3>Use of showWeek, yearSuffix, and showAnim</h3>\n\n\n\n<p>The following example shows the usage of three important options <strong>(a) showWeek (b) yearSuffix</strong> and <strong>(c) showAnim</strong> in the datepicker function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-11\" ).datepicker({\n               showWeek:true,\n               yearSuffix:\"-CE\",\n               showAnim: \"slide\"\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-11\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>In the above example, you can see that week numbers are displayed on the left side of datepicker as&nbsp;<em>showWeek</em>&nbsp;is set to&nbsp;<em>true</em>. The year is have a suffix of &#8220;-CE&#8221;.</p>\n\n\n\n<h2>$ (selector, context).datepicker (&#8220;action&#8221;, [params]) Method</h2>\n\n\n\n<p>The&nbsp;<em>datepicker (action, params)</em>&nbsp;method can perform an action on the calendar, such as such as selecting a new date. The&nbsp;<strong>action</strong>&nbsp;is specified as a string in the first argument and optionally, one or more&nbsp;<strong>params</strong>&nbsp;can be provided based on the given action.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Basically, here actions are nothing but they are jQuery methods which we can use in the form of string.</p></blockquote>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).datepicker (\"action\", &#91;params]);\n</code></pre>\n\n\n\n<p>The following table lists the actions for this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroy()This action removes the datepicker functionality completely. This will return the element back to its pre-init state. This method does not accept any arguments.</td></tr><tr><td>2</td><td>dialog( date [, onSelect ] [, settings ] [, pos ] )This action displays datepicker in a jQuery UI dialog box.</td></tr><tr><td>3</td><td>getDate()This action returns the Date corresponding to the selected date. This method does not accept any arguments.</td></tr><tr><td>4</td><td>hide()This action closes the previously opened date picker. This method does not accept any arguments.</td></tr><tr><td>5</td><td>isDisabled()This action checks if the date picker funcitonality is disabled. This method does not accept any arguments.</td></tr><tr><td>6</td><td>option( optionName )This action retrieves the value currently associated with the specified <em>optionName</em>.</td></tr><tr><td>7</td><td>option()This action gets an object containing key/value pairs representing the current datepicker options hash. This method does not accept any arguments.</td></tr><tr><td>8</td><td>option( optionName, value )This action sets the value of the datepicker option associated with the specified optionName.</td></tr><tr><td>9</td><td>option( options )This action sets one or more options for the datepicker.</td></tr><tr><td>10</td><td>refresh()This action redraws the date picker, after having made some external modifications. This method does not accept any arguments.</td></tr><tr><td>11</td><td>setDate( date )This action sets the specified date as the current date of the datepicker.</td></tr><tr><td>12</td><td>show()This action opens the date picker. If the datepicker is attached to an input, the input must be visible for the datepicker to be shown. This method does not accept any arguments.</td></tr><tr><td>13</td><td>widget()This action returns a jQuery object containing the datepicker.</td></tr></tbody></table></figure>\n\n\n\n<p>The following examples show the use of some of the actions listed in the above table.</p>\n\n\n\n<h3>Use of setDate() action</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of actions <em>setDate</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-12\" ).datepicker();\n            $( \"#datepicker-12\" ).datepicker(\"setDate\", \"10w+1\");\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-12\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<h3>Use of show() action</h3>\n\n\n\n<p>The following example demonstrates the use of action <em>show</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Datepicker functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#datepicker-13\" ).datepicker();\n            $( \"#datepicker-13\" ).datepicker(\"show\");\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>Enter Date: &lt;input type = \"text\" id = \"datepicker-13\">&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>datepickerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h2>Event Management on datepicker elements</h2>\n\n\n\n<p>There are no datepicker event methods as of now!</p>\n","protected":false},"excerpt":{"rendered":"<p>Datepickers in jQueryUI allow users to enter dates easily and visually. You can customize the date format and language, restrict the selectable date ranges and add in buttons and other navigation options easily. jQueryUI provides&nbsp;datepicker()&nbsp;method that creates a datepicker and changes the appearance of HTML elements on a page by adding new CSS classes. Transforms [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/93"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=93"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/93/revisions"}],"predecessor-version":[{"id":96,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/93/revisions/96"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=93"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=93"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=93"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":92,"date":"2020-07-20T16:59:20","date_gmt":"2020-07-20T16:59:20","guid":{"rendered":"http://javascript.foobrdigital.com/?p=92"},"modified":"2020-12-07T08:55:13","modified_gmt":"2020-12-07T08:55:13","slug":"dialog","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/dialog/","title":{"rendered":"Dialog"},"content":{"rendered":"\n<p>Dialog boxes are one of the nice ways of presenting information on an HTML page. A dialog box is a floating window with a title and content area. This window can be moved, resized, and of course, closed using &#8220;X&#8221; icon by default.</p>\n\n\n\n<p>jQueryUI provides&nbsp;<strong>dialog()</strong>&nbsp;method that transforms the HTML code written on the page into HTML code to display a dialog box.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>dialog()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).dialog (options) Method</li><li>$(selector, context).dialog (&#8220;action&#8221;, [params]) Method</li></ul>\n\n\n\n<h2>$ (selector, context).dialog (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>dialog (options)</em>&nbsp;method declares that an HTML element can be administered in the form of a dialog box. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the appearance and behavior of that window.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).dialog(options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).dialog({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>appendToIf this option is set to <strong>false</strong>, it will prevent the <strong>ui-draggable</strong> class from being added in the list of selected DOM elements. By default its value is <strong>true</strong>.</td></tr><tr><td>2</td><td>autoOpenThis option unless set to <em>false</em>, the dialog box is opened upon creation. When <em>false</em>, the dialog box will be opened upon a call to dialog(&#8216;open&#8217;). By default its value is <strong>true</strong>.</td></tr><tr><td>3</td><td>buttonsThis option adds buttons in the dialog box. These are listed as objects, and each property is the text on the button. The value is a callback function called when the user clicks the button. By default its value is <strong>{}</strong>.</td></tr><tr><td>4</td><td>closeOnEscapeUnless this option set to <em>false</em>, the dialog box will be closed when the user presses the Escape key while the dialog box has focus. By default its value is <strong>true</strong>.</td></tr><tr><td>5</td><td>closeTextThis option contains text to replace the default of Close for the close button. By default its value is <strong>&#8220;close&#8221;</strong>.</td></tr><tr><td>6</td><td>dialogClassIf this option is set to <strong>false</strong>, it will prevent the <strong>ui-draggable</strong> class from being added in the list of selected DOM elements. By default its value is <strong>&#8220;&#8221;</strong>.</td></tr><tr><td>7</td><td>draggableUnless you this option to <strong>false</strong>, dialog box will be draggable by clicking and dragging the title bar. By default its value is <strong>true</strong>.</td></tr><tr><td>8</td><td>heightThis option sets the height of the dialog box. By default its value is <strong>&#8220;auto&#8221;</strong>.</td></tr><tr><td>9</td><td>hideThis option is used to set the effect to be used when the dialog box is closed. By default its value is <strong>null</strong>.</td></tr><tr><td>11</td><td>maxHeightThis option sets maximum height, in pixels, to which the dialog box can be resized. By default its value is <strong>false</strong>.</td></tr><tr><td>12</td><td>maxWidthThis option sets the maximum width to which the dialog can be resized, in pixels. By default its value is <strong>false</strong>.</td></tr><tr><td>13</td><td>minHeightThis option is the minimum height, in pixels, to which the dialog box can be resized. By default its value is <strong>150</strong>.</td></tr><tr><td>14</td><td>minWidthThis option is the minimum width, in pixels, to which the dialog box can be resized. By default its value is <strong>150</strong>.</td></tr><tr><td>15</td><td>modalIf this option is set to <strong>true</strong>, the dialog will have modal behavior; other items on the page will be disabled, i.e., cannot be interacted with. Modal dialogs create an overlay below the dialog but above other page elements. By default its value is <strong>false</strong>.</td></tr><tr><td>16</td><td>positionThis option specifies the initial position of the dialog box. Can be one of the predefined positions: <em>center (the default), left, right, top, or bottom</em>. Can also be a 2-element array with the left and top values (in pixels) as [left,top], or text positions such as [&#8216;right&#8217;,&#8217;top&#8217;]. By default its value is <strong>{ my: &#8220;center&#8221;, at: &#8220;center&#8221;, of: window }</strong>.</td></tr><tr><td>17</td><td>resizableThis option unless set to <strong>false</strong>, the dialog box is resizable in all directions. By default its value is <strong>true</strong>.</td></tr><tr><td>18</td><td>showThis option is an effect to be used when the dialog box is being opened. By default its value is <strong>null</strong>.</td></tr><tr><td>20</td><td>titleThis option specifies the text to appear in the title bar of the dialog box. By default its value is <strong>null</strong>.</td></tr><tr><td>21</td><td>widthThis option specifies the width of the dialog box in pixels. By default its value is <strong>300</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of dialog functionality.</p>\n\n\n\n<h3>Default functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of dialog functionality passing no parameters to the <strong>dialog()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Dialog functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header,.ui-state-default, ui-button {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#dialog-1\" ).dialog({\n               autoOpen: false,  \n            });\n            $( \"#opener\" ).click(function() {\n               $( \"#dialog-1\" ).dialog( \"open\" );\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"dialog-1\" \n         title = \"Dialog Title goes here...\">This my first jQuery UI Dialog!&lt;/div>\n      &lt;button id = \"opener\">Open Dialog&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dialogexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<h3>Use of buttons, title and position</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>buttons</strong>, <strong>title</strong> and <strong>position</strong> in the dialog widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Dialog functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header,.ui-state-default, ui-button {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#dialog-2\" ).dialog({\n               autoOpen: false, \n               buttons: {\n                  OK: function() {$(this).dialog(\"close\");}\n               },\n               title: \"Success\",\n               position: {\n                  my: \"left center\",\n                  at: \"left center\"\n               }\n            });\n            $( \"#opener-2\" ).click(function() {\n               $( \"#dialog-2\" ).dialog( \"open\" );\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"dialog-2\"\n         title = \"Dialog Title goes here...\">This my first jQuery UI Dialog!&lt;/div>\n      &lt;button id = \"opener-2\">Open Dialog&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dialogexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<h3>Use of hide, show and height</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>hide</strong>, <strong>show</strong> and <strong>height</strong> in the dialog widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Dialog functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header,.ui-state-default, ui-button {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#dialog-3\" ).dialog({\n               autoOpen: false, \n               hide: \"puff\",\n               show : \"slide\",\n               height: 200      \n            });\n            $( \"#opener-3\" ).click(function() {\n               $( \"#dialog-3\" ).dialog( \"open\" );\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"dialog-3\"\n         title = \"Dialog Title goes here...\">This my first jQuery UI Dialog!&lt;/div>\n      &lt;button id = \"opener-3\">Open Dialog&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dialogexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h3>Use of Modal</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>buttons</strong>, <strong>title</strong> and <strong>position</strong> in the dialog widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Dialog functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header,.ui-state-default, ui-button {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#dialog-4\" ).dialog({\n               autoOpen: false, \n               modal: true,\n               buttons: {\n                  OK: function() {$(this).dialog(\"close\");}\n               },\n            });\n            $( \"#opener-4\" ).click(function() {\n               $( \"#dialog-4\" ).dialog( \"open\" );\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"dialog-4\" title = \"Dialog Title goes here...\">This my first jQuery UI Dialog!&lt;/div>\n      &lt;button id = \"opener-4\">Open Dialog&lt;/button>\n      &lt;p>\n         Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt \n         ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco \n         laboris nisi ut aliquip ex ea commodo consequat.\n      &lt;/p>\n      &lt;label for = \"textbox\">Enter Name: &lt;/label>\n      &lt;input type = \"text\">\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dialogexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h2>$ (selector, context).dialog (&#8220;action&#8221;, [params]) Method</h2>\n\n\n\n<p>The&nbsp;<em>dialog (action, params)</em>&nbsp;method can perform an action on the dialog box, such as closing the box. The&nbsp;<strong>action</strong>&nbsp;is specified as a string in the first argument and optionally, one or more&nbsp;<strong>params</strong>&nbsp;can be provided based on the given action.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Basically, here actions are nothing but they are jQuery methods which we can use in the form of string.</p></blockquote>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).dialog (\"action\", &#91;params]);\n</code></pre>\n\n\n\n<p>The following table lists the actions for this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>close()This action closes the dialog box. This method does not accept any arguments.</td></tr><tr><td>2</td><td>destroy()This action removes the dialog box competely. This will return the element back to its pre-init state. This method does not accept any arguments.</td></tr><tr><td>3</td><td>isOpen()This action checks if the dialog box is open. This method does not accept any arguments.</td></tr><tr><td>4</td><td>moveToTop()This action positions the corresponding dialog boxes to the foreground (on top of the others). This method does not accept any arguments.</td></tr><tr><td>5</td><td>open()This action opens the dialog box. This method does not accept any arguments.</td></tr><tr><td>6</td><td>option( optionName )This action gets the value currently associated with the specified optionName. Where <em>optionName</em> is the name of the option to get.</td></tr><tr><td>7</td><td>option()This action gets an object containing key/value pairs representing the current dialog options hash. This method does not accept any arguments.</td></tr><tr><td>8</td><td>option( optionName, value )This action sets the value of the dialog option associated with the specified optionName.</td></tr><tr><td>9</td><td>option( options )This action sets one or more options for the dialog.</td></tr><tr><td>10</td><td>widget()This action returns the dialog box’s widget element; the element annotated with the ui-dialog class name. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>isOpen()</em>, <em>open()</em> and <em>close()</em> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Dialog functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header,.ui-state-default, ui-button {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script type = \"text/javascript\">\n         $(function() {\n            $(\"#toggle\").click(function() {\n               ($(\"#dialog-5\").dialog(\"isOpen\") == false) ? $(\n                  \"#dialog-5\").dialog(\"open\") : $(\"#dialog-5\").dialog(\"close\") ;\n            });\n            $(\"#dialog-5\").dialog({autoOpen: false});\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;button id = \"toggle\">Toggle dialog!&lt;/button>\n      &lt;div id = \"dialog-5\" title = \"Dialog Title!\">\n         Click on the Toggle button to open and close this dialog box.\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dialogexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h2>Event Management on Dialog Box</h2>\n\n\n\n<p>In addition to the dialog (options) method which we saw in the previous sections, JqueryUI provides event methods as which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>beforeClose(event, ui)This event is triggered when the dialog box is about to close. Returning <em>false</em> prevents the dialog box from closing. It is handy for dialog boxes with forms that fail validation. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>2</td><td>close(event, ui)This event is triggered when the dialog box is closed. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>3</td><td>create(event, ui)This event is triggered when the dialog box is created. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>4</td><td>drag(event, ui)This event is triggered repeatedly as a dialog box is moved about during a drag. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>5</td><td>dragStart(event, ui)This event is triggered when a repositioning of the dialog box commences by dragging its title bar. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>6</td><td>dragStop(event, ui)This event is triggered when a drag operation terminates. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>7</td><td>focus(event, ui)This event is triggered when the dialog gains focus. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>8</td><td>open(event, ui)This event is triggered when the dialog box is opened. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>9</td><td>resize(event, ui)This event is triggered repeatedly as a dialog box is resized. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>10</td><td>resizeStart(event, ui)This event is triggered when a resize of the dialog box commences. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>11</td><td>resizeStop(event, ui)This event is triggered when a resize of the dialog box terminates. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following examples demonstrate the use of the events listed in the above table.</p>\n\n\n\n<h3>Use of beforeClose Event method</h3>\n\n\n\n<p>The following example demonstrates the use of <strong>beforeClose</strong> event method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Dialog functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header,.ui-state-default, ui-button {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .invalid { color: red; }\n         textarea {\n            display: inline-block;\n            width: 100%;\n            margin-bottom: 10px;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script type = \"text/javascript\">\n         $(function() {\n            $( \"#dialog-6\" ).dialog({\n\t       autoOpen: false, \n               buttons: {\n                  OK: function() {\n                     $( this ).dialog( \"close\" );\n                  }\n               },\n               beforeClose: function( event, ui ) {\n                  if ( !$( \"#terms\" ).prop( \"checked\" ) ) {\n                     event.preventDefault();\n                     $( \"&#91;for = terms]\" ).addClass( \"invalid\" );\n                  }\n               },\n               width: 600\n            });\n            $( \"#opener-5\" ).click(function() {\n               $( \"#dialog-6\" ).dialog( \"open\" );\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"dialog-6\">\n         &lt;p>You must accept these terms before continuing.&lt;/p>\n         &lt;textarea>This Agreement and the Request constitute the entire agreement of the \n         parties with respect to the subject matter of the Request. This Agreement shall be \n         governed by and construed in accordance with the laws of the State, without giving \n         effect to principles of conflicts of law.&lt;/textarea>\n         &lt;div>\n            &lt;label for = \"terms\">I accept the terms&lt;/label>\n            &lt;input type = \"checkbox\" id = \"terms\">\n         &lt;/div>\n      &lt;/div>\n      &lt;button id = \"opener-5\">Open Dialog&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dialogexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h3>Use of resize Event method</h3>\n\n\n\n<p>The following example demonstrates the use of <strong>resize</strong> event method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Dialog functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-widget-header,.ui-state-default, ui-button {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script type = \"text/javascript\">\n         $(function() {\n            $( \"#dialog-7\" ).dialog({\n               autoOpen: false, \n               resize: function( event, ui ) {\n                  $( this ).dialog( \"option\", \"title\",\n\t         ui.size.height + \" x \" + ui.size.width );\n               }\n            });\n            $( \"#opener-6\" ).click(function() {\n               $( \"#dialog-7\" ).dialog( \"open\" );\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"dialog-7\" title = \"Dialog Title goes here...\"\n         >Resize this dialog to see the dialog co-ordinates in the title!&lt;/div>\n      &lt;button id = \"opener-6\">Open Dialog&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>dialogexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<h2>Extension Points</h2>\n\n\n\n<p>The dialog widget is built with the widget factory and can be extended. To extend widgets, we can either override or add to the behavior of existing methods. Following method provides as extension point with the same API stability as the dialog methods. Listed in the above table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td>_allowInteraction(event)This method allows the user to interact with a given target element by whitelisting elements that are not children of the dialog but allow the users to be able to use. Where <em>event</em> is of type <em>Event</em>.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Dialog boxes are one of the nice ways of presenting information on an HTML page. A dialog box is a floating window with a title and content area. This window can be moved, resized, and of course, closed using &#8220;X&#8221; icon by default. jQueryUI provides&nbsp;dialog()&nbsp;method that transforms the HTML code written on the page into [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/92"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=92"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/92/revisions"}],"predecessor-version":[{"id":97,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/92/revisions/97"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=92"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=92"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=92"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":91,"date":"2020-07-20T17:03:05","date_gmt":"2020-07-20T17:03:05","guid":{"rendered":"http://javascript.foobrdigital.com/?p=91"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"menu","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/menu/","title":{"rendered":"Menu"},"content":{"rendered":"\n<p>A menu widget usually consists of a main menu bar with pop up menus. Items in pop up menus often have sub pop up menus. A menu can be created using the markup elements as long as the parent-child relation is maintained (using &lt;ul&gt; or &lt;ol&gt;). Each menu item has an anchor element.</p>\n\n\n\n<p>The Menu Widget in jQueryUI can be used for inline and popup menus, or as a base for building more complex menu systems. For example, you can create nested menus with custom positioning.</p>\n\n\n\n<p>jQueryUI provides menu() methods to create a menu.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>menu()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).menu (options) Method</li><li>$(selector, context).menu (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).menu (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>menu (options)</em>&nbsp;method declares that an HTML element and its contents should be treated and managed as menus. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the appearance and behavior of the menu items involved.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).menu (options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).menu({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>disabledThis option if set to <em>true</em> disables the menu. By default its value is <strong>false</strong>.</td></tr><tr><td>2</td><td>iconsThis option sets the icons for submenus. By default its value is <strong>{ submenu: &#8220;ui-icon-carat-1-e&#8221; }</strong>.</td></tr><tr><td>3</td><td>menusThis option is a selector for the elements that serve as the menu container, including sub-menus. By default its value is <strong>ul</strong>.</td></tr><tr><td>4</td><td>positionThis option sets the position of submenus in relation to the associated parent menu item. By default its value is <strong>{ my: &#8220;left top&#8221;, at: &#8220;right top&#8221; }</strong>.</td></tr><tr><td>5</td><td>roleThis option is used to customize the ARIA roles used for the menu and menu items. By default its value is <strong>menu</strong>.</td></tr></tbody></table></figure>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of menu widget functionality, passing no parameters to the <strong>menu()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Menu functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-menu {\n            width: 200px;\n         }\n      &lt;/style>\n      &lt;!-- Javascript -->\n      \n      &lt;script>\n         $(function() {\n            $( \"#menu-1\" ).menu();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;ul id = \"menu-1\">\n         &lt;li>&lt;a href = \"#\">Spring&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Hibernate&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Java&lt;/a>\n            &lt;ul>\n               &lt;li>&lt;a href = \"#\">Java IO&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Swing&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jaspr Reports&lt;/a>&lt;/li>\n            &lt;/ul>\n         &lt;/li>\n         &lt;li>&lt;a href = \"#\">JSF&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">HTML5&lt;/a>&lt;/li>\n      &lt;/ul>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>menuexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, you can see a themeable menu with mouse and keyboard interactions for navigation.</p>\n\n\n\n<h3>Use of icons and position</h3>\n\n\n\n<p>The following example demonstrates the usage of two options <strong>icons</strong>, and <strong>position</strong> in the menu function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Menu functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-menu {\n            width: 200px;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#menu-2\" ).menu({\n               icons: { submenu: \"ui-icon-circle-triangle-e\"},\n               position: { my: \"right top\", at: \"right-10 top+5\" }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;ul id = \"menu-2\">\n         &lt;li>&lt;a href = \"#\">Spring&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Hibernate&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Java&lt;/a>\n            &lt;ul>\n               &lt;li>&lt;a href = \"#\">Java IO&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Swing&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jaspr Reports&lt;/a>&lt;/li>\n            &lt;/ul>\n         &lt;/li>\n         &lt;li>&lt;a href = \"#\">JSF&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">HTML5&lt;/a>&lt;/li>\n      &lt;/ul>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>menuexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, you can see we have applied an icon image for the submenu list and also changed the submenu position.</p>\n\n\n\n<h2>$ (selector, context).menu (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>menu (&#8220;action&#8221;, params)</em>&nbsp;method can perform an action on menu elements, such as enabling/disabling the menu. The action is specified as a string in the first argument (e.g., &#8220;disable&#8221; disables the menu). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).menu (\"action\", params);;\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>blur( [event ] )This action removes the focus from a menu. It triggers the menu&#8217;s <em>blur</em> event by resetting any active element style. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the menu to blur.</td></tr><tr><td>2</td><td>collapse( [event ] )This action closes the current active sub-menu. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the menu to collapse.</td></tr><tr><td>3</td><td>collapseAll( [event ] [, all ] )This action closes all the open submenus.</td></tr><tr><td>4</td><td>destroy()This action removes menu functionality completely. This will return the element back to its pre-init state. This method does not accept any arguments.</td></tr><tr><td>5</td><td>disable()This action disables the menu. This method does not accept any arguments.</td></tr><tr><td>6</td><td>enable()This action enables the the menu. This method does not accept any arguments.</td></tr><tr><td>7</td><td>expand( [event ] )This action opens the sub-menu below the currently active item, if one exists. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the menu to expand.</td></tr><tr><td>8</td><td>focus( [event ], item )This action activates a particular menu item, begins opening any sub-menu if present and triggers the menu&#8217;s focus event. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the menu to gain focus. and <em>item</em> is a jQuery object representing the menu item to focus/activate.</td></tr><tr><td>9</td><td>isFirstItem()This action returns a <em>boolean</em> value, which states if the current active menu item is the first menu item. This method does not accept any arguments.</td></tr><tr><td>10</td><td>isLastItem()This action returns a <em>boolean</em> value, which states if the current active menu item is the last menu item. This method does not accept any arguments.</td></tr><tr><td>11</td><td>next( [event ] )This action delegates the active state to the next menu item. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the focus to move.</td></tr><tr><td>12</td><td>nextPage( [event ] )This action moves active state to first menu item below the bottom of a scrollable menu or the last item if not scrollable. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the focus to move.</td></tr><tr><td>13</td><td>option( optionName )This action gets the value currently associated with the specified <em>optionName</em>. Where <em>optionName</em> is of type <strong>String</strong> and represents the name of the option to get.</td></tr><tr><td>14</td><td>option()This action gets an object containing key/value pairs representing the current menu options hash.</td></tr><tr><td>15</td><td>option( optionName, value )This action sets the value of the menu option associated with the specified optionName. Where <em>optionName</em> is of type <strong>String</strong> and represents name of option to set and <em>value</em> is of type <em>Object</em> and represents value to set for the option.</td></tr><tr><td>16</td><td>option( options )This action sets one or more options for the menu. Where <em>options</em> is of type <strong>Object</strong> and represents a map of option-value pairs to set.</td></tr><tr><td>17</td><td>previous( [event ] )This action moves active state to previous menu item. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the focus to move.</td></tr><tr><td>18</td><td>previousPage( [event ] )This action moves active state to first menu item above the top of a scrollable menu or the first item if not scrollable. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the focus to move.</td></tr><tr><td>19</td><td>refresh()This action initializes sub-menus and menu items that have not already been initialized. This method does not accept any arguments.</td></tr><tr><td>20</td><td>select( [event ] )This action selects the currently active menu item, collapses all sub-menus and triggers the menu&#8217;s select event. Where <em>event</em> is of type <strong>Event</strong> and represents what triggered the selection.</td></tr><tr><td>21</td><td>widget()This action returns a jQuery object containing the menu. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<p>The following examples demonstrate how to use the actions given in the above table.</p>\n\n\n\n<h3>Use of disable method</h3>\n\n\n\n<p>The following example demonstrates the use of <em>disable()</em> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Menu functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-menu {\n            width: 200px;\n         }\n      &lt;/style>\n      &lt;!-- Javascript -->\n      \n      &lt;script>\n         $(function() {\n            $( \"#menu-3\" ).menu();\n            $( \"#menu-3\" ).menu(\"disable\");\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;ul id = \"menu-3\">\n         &lt;li>&lt;a href = \"#\">Spring&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Hibernate&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Java&lt;/a>\n            &lt;ul>\n               &lt;li>&lt;a href = \"#\">Java IO&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Swing&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jaspr Reports&lt;/a>&lt;/li>\n            &lt;/ul>\n         &lt;/li>\n         &lt;li>&lt;a href = \"#\">JSF&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">HTML5&lt;/a>&lt;/li>\n      &lt;/ul>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>menuexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>In the above example, you can see the menu is disabled.</p>\n\n\n\n<h3>Use of focus and collapseAll methods</h3>\n\n\n\n<p>The following example demonstrates the use of <em>focus()</em> and <em>collapseAll</em> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Menu functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-menu {\n            width: 200px;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            var menu = $(\"#menu-4\").menu();\n            $( \"#menu-4\" ).menu(\n               \"focus\", null, $( \"#menu-4\" ).menu().find( \".ui-menu-item:last\" ));\n            $(menu).mouseleave(function () {\n               menu.menu('collapseAll');\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;ul id = \"menu-4\">\n         &lt;li>&lt;a href = \"#\">Spring&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Hibernate&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">JSF&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">HTML5&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Java&lt;/a>\n            &lt;ul>\n               &lt;li>&lt;a href = \"#\">Java IO&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Swing&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jaspr Reports&lt;/a>&lt;/li>\n            &lt;/ul>\n         &lt;/li>\n      &lt;/ul>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>menuexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, you can see the focus is on the last menu item. Now expand the submenu and when the mouse leaves the submenu, the submenu is closed.</p>\n\n\n\n<h2>Event Management on menu elements</h2>\n\n\n\n<p>In addition to the menu (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>blur(event, ui)This event is triggered when a menu loses focus.</td></tr><tr><td>2</td><td>create(event, ui)This event is triggered when a menu is created.</td></tr><tr><td>3</td><td>focus(event, ui)This event is triggered when a menu gains focus or when any menu item is activated.</td></tr><tr><td>4</td><td>select(event, ui)This event is triggered when a menu item is selected.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage for menu widget functionality. This example demonstrates the use of event <em>create</em>, <em>blur</em> and <em>focus</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Menu functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .ui-menu {\n            width: 200px;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#menu-5\" ).menu({\n               create: function( event, ui ) {\n                  var result = $( \"#result\" );\n                  result.append( \"Create event&lt;br>\" );\n               },\n               blur: function( event, ui ) {\n                  var result = $( \"#result\" );\n                  result.append( \"Blur event&lt;br>\" );\n               },\n               focus: function( event, ui ) {\n                  var result = $( \"#result\" );\n                  result.append( \"focus event&lt;br>\" );\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;ul id = \"menu-5\">\n         &lt;li>&lt;a href = \"#\">Spring&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Hibernate&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">JSF&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">HTML5&lt;/a>&lt;/li>\n         &lt;li>&lt;a href = \"#\">Java&lt;/a>\n            &lt;ul>\n               &lt;li>&lt;a href = \"#\">Java IO&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Swing&lt;/a>&lt;/li>\n               &lt;li>&lt;a href = \"#\">Jaspr Reports&lt;/a>&lt;/li>\n            &lt;/ul>\n         &lt;/li>\n      &lt;/ul>\n      &lt;span id = \"result\">&lt;/span>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>menuexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, we are printing the messages based on the events triggered.</p>\n","protected":false},"excerpt":{"rendered":"<p>A menu widget usually consists of a main menu bar with pop up menus. Items in pop up menus often have sub pop up menus. A menu can be created using the markup elements as long as the parent-child relation is maintained (using &lt;ul&gt; or &lt;ol&gt;). Each menu item has an anchor element. The Menu [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/91"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=91"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/91/revisions"}],"predecessor-version":[{"id":98,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/91/revisions/98"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=91"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=91"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=91"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":90,"date":"2020-07-20T17:05:55","date_gmt":"2020-07-20T17:05:55","guid":{"rendered":"http://javascript.foobrdigital.com/?p=90"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"progressbar","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/progressbar/","title":{"rendered":"Progressbar"},"content":{"rendered":"\n<p>Progress bars indicate the completion percentage of an operation or process. We can categorize progress bar as&nbsp;<strong>determinate progress bar</strong>&nbsp;and&nbsp;<strong>indeterminate progress bar</strong>.</p>\n\n\n\n<p><strong>Determinate progress bar</strong>&nbsp;should only be used in situations where the system can accurately update the current status. A determinate progress bar should never fill from left to right, then loop back to empty for a single process.</p>\n\n\n\n<p>If the actual status cannot be calculated, an&nbsp;<strong>indeterminate progress bar</strong>&nbsp;should be used to provide user feedback.</p>\n\n\n\n<p>jQueryUI provides an easy-to-use progress bar widget that we can use to let users know that our application is hard at work performing the requested operation. jQueryUI provides progressbar() method to create progress bars.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>progressbar()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).progressbar (options) Method</li><li>$(selector, context).progressbar (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).progressbar (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>progressbar (options)</em>&nbsp;method declares that an HTML element can be managed in the form of a progress bar. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the appearance and behavior of progress bars.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).progressbar (options);</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).progressbar({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>disabledThis option when set to <em>true</em> disables the progress bars. By default its value is <strong>false</strong>.</td></tr><tr><td>2</td><td>maxThis option sets the maximum value for a progress bar. By default its value is <strong>100</strong>.</td></tr><tr><td>3</td><td>valueThis option specifies the initial value of the progress bar. By default its value is <strong>0</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of progressbar functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of progressbar functionality, passing no parameters to the <strong>progressbar()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI ProgressBar functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .ui-widget-header {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#progressbar-1\" ).progressbar({\n               value: 30\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body> \n      &lt;div id = \"progressbar-1\">&lt;/div> \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>progressbarexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>This example shows the creation of progress bar using of&nbsp;<em>progressbar()</em>&nbsp;method. This is a default determinate progress bar.</p>\n\n\n\n<h3>Use of max and value</h3>\n\n\n\n<p>The following example demonstrates the usage of two options <strong>values</strong> and <strong>max</strong> in the progressbar function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI ProgressBar functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .ui-widget-header {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            var progressbar = $( \"#progressbar-2\" );\n            $( \"#progressbar-2\" ).progressbar({\n               value: 30,\n               max:300\n            });\n            function progress() {\n               var val = progressbar.progressbar( \"value\" ) || 0;\n               progressbar.progressbar( \"value\", val + 1 );\n               if ( val &lt; 99 ) {\n                  setTimeout( progress, 100 );\n               }\n            }\n            setTimeout( progress, 3000 );\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"progressbar-2\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>progressbarexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Here you can see that the progress bar fills from right to left and stops when the value reaches 300.</p>\n\n\n\n<h2>$ (selector, context).progressbar (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>progressbar (&#8220;action&#8221;, params)</em>&nbsp;method can perform an action on progress bar, such as changing the percentage filled. The action is specified as a string in the first argument (e.g., &#8220;value&#8221; to change the percentage filled). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).progressbar (\"action\", params);;</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action removes the progress bar functionality of an element completely. The elements return to their pre-init state. This method does not accept any arguments.</td></tr><tr><td>2</td><td>destroyThis action removes the progress bar functionality of an element completely. The elements return to their pre-init state. This method does not accept any arguments.</td></tr><tr><td>3</td><td>disableThis action disables the progress bar functionality of an element. This method does not accept any arguments.</td></tr><tr><td>4</td><td>enableThis action enables the progress bar functionality. This method does not accept any arguments.</td></tr><tr><td>5</td><td>option( optionName )This action retrieves the value currently associated with specified <em>optionName</em>. Where <em>optionName</em> is a String.</td></tr><tr><td>6</td><td>optionThis action gets an object containing key/value pairs representing the current progressbar options hash. This method does not accept any arguments.</td></tr><tr><td>7</td><td>option( optionName, value )This action sets the value of the progressbar option associated with the specified <em>optionName</em>.</td></tr><tr><td>8</td><td>option( options )This action sets one or more options for the progress bars. The argument <em>options</em> is a map of option-value pairs to be set.</td></tr><tr><td>9</td><td>valueThis action retrieves the current value of <em>options.value</em>, that is, the percentage of fill in the progress bar.</td></tr><tr><td>10</td><td>value( value )This action specifies a new value to the percentage filled in the progress bar. The argument <em>value</em> can be a Number or Boolean.</td></tr><tr><td>11</td><td>widgetThis action returns a jQuery object containing the progressbar. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>disable()</em> and <em>option( optionName, value )</em> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI ProgressBar functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .ui-widget-header {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n            font-weight: bold;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $( \"#progressbar-3\" ).progressbar({\n               value: 30\n            });\n            $( \"#progressbar-3\" ).progressbar('disable');\n            $( \"#progressbar-4\" ).progressbar({\n               value: 30\n            });\n            var progressbar = $( \"#progressbar-4\" );\n            $( \"#progressbar-4\" ).progressbar( \"option\", \"max\", 1024 );\n            function progress() {\n               var val = progressbar.progressbar( \"value\" ) || 0;\n               progressbar.progressbar( \"value\", val + 1 );\n               if ( val &lt; 99 ) {\n                  setTimeout( progress, 100 );\n               }\n            }\n            setTimeout( progress, 3000 );\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h3>Disabled Progressbar&lt;/h3>\n      &lt;div id = \"progressbar-3\">&lt;/div>&lt;br>\n      &lt;h3>Progressbar with max value set&lt;/h3>\n      &lt;div id = \"progressbar-4\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>progressbarexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h4>Disabled Progress bar</h4>\n\n\n\n<h4>Progress bar with max value set</h4>\n\n\n\n<h2>Event Management on progress bar elements</h2>\n\n\n\n<p>In addition to the progressbar (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>change(event, ui)This event is triggered whenever the value of progress bar changes. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>2</td><td>complete(event, ui)This event is triggered when the progressbar reaches the maximumm value. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr><tr><td>3</td><td>create(event, ui)This event is triggered whenever progressbar is created. Where <em>event</em> is of type <em>Event</em>, and <em>ui</em> is of type <em>Object</em>.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage during progressbar functionality. This example demonstrates the use of events <em>change</em> and <em>complete</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI ProgressBar functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .ui-widget-header {\n            background: #cedc98;\n            border: 1px solid #DDDDDD;\n            color: #333333;\n            font-weight: bold;\n         }\n         .progress-label {\n            position: absolute;\n            left: 50%;\n            top: 13px;\n            font-weight: bold;\n            text-shadow: 1px 1px 0 #fff;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            var progressbar = $( \"#progressbar-5\" );\n            progressLabel = $( \".progress-label\" );\n            $( \"#progressbar-5\" ).progressbar({\n               value: false,\n               change: function() {\n                  progressLabel.text( \n                     progressbar.progressbar( \"value\" ) + \"%\" );\n               },\n               complete: function() {\n                  progressLabel.text( \"Loading Completed!\" );\n               }\n            });\n            function progress() {\n               var val = progressbar.progressbar( \"value\" ) || 0;\n               progressbar.progressbar( \"value\", val + 1 );\n               if ( val &lt; 99 ) {\n                  setTimeout( progress, 100 );\n               }\n            }\n            setTimeout( progress, 3000 );\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"progressbar-5\">\n         &lt;div class = \"progress-label\">\n            Loading...\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>progressbarexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Here you can see as the progressbar changes its changed value is printed and upon complete event the &#8220;Loading Completed!&#8221; message displays.</p>\n","protected":false},"excerpt":{"rendered":"<p>Progress bars indicate the completion percentage of an operation or process. We can categorize progress bar as&nbsp;determinate progress bar&nbsp;and&nbsp;indeterminate progress bar. Determinate progress bar&nbsp;should only be used in situations where the system can accurately update the current status. A determinate progress bar should never fill from left to right, then loop back to empty for [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/90"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=90"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/90/revisions"}],"predecessor-version":[{"id":99,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/90/revisions/99"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=90"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=90"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=90"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":89,"date":"2020-07-20T17:35:01","date_gmt":"2020-07-20T17:35:01","guid":{"rendered":"http://javascript.foobrdigital.com/?p=89"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"slider","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/slider/","title":{"rendered":"Slider"},"content":{"rendered":"\n<p>A&nbsp;<em>slider</em>&nbsp;is used whenever a numeric value within a certain range is to be obtained. The advantage of a slider over text input is that it becomes impossible for the user to enter a bad value. Any value that they can pick with the slider is valid.</p>\n\n\n\n<p>jQueryUI provides us a slider control through slider widget. jQueryUI provides slider() method changes the appearance of HTML elements in the page, adding new CSS classes that give them the appropriate style.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>slider ()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).slider (options) Method</li><li>$(selector, context).slider (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).slider (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>slider (options)</em>&nbsp;method declares that an HTML element should be managed as a slider. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the appearance and behavior of slider.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).slider({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).slider({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>animateThis option when set to <em>true</em>, creates an animated effect when users click directly on the axis. By default its value is <strong>false</strong>.</td></tr><tr><td>2</td><td>disabledThis option when set to <em>true</em>, disables the slider. By default its value is <strong>false</strong>.</td></tr><tr><td>3</td><td>maxThis option specifies the upper value of the range that the slider can attain—the value represented when the handle is moved to the far right (for horizontal sliders) or top (for vertical sliders). By default its value is <strong>100</strong>.</td></tr><tr><td>4</td><td>minThis option specifies the lower value of the range that the slider can attain—the value represented when the handle is moved to the far left (for horizontal sliders) or bottom (for vertical sliders). By default its value is <strong>0</strong>.</td></tr><tr><td>5</td><td>orientationThis option indicates the horizontal or vertical orientation of the slider. By default its value is <strong>horizontal</strong>.</td></tr><tr><td>6</td><td>rangeThis option specifies whether the slider represents a range. By default its value is <strong>false</strong>.</td></tr><tr><td>7</td><td>stepThis option specifies discrete intervals between the minimum and maximum values that the slider is allowed to represent. By default its value is <strong>1</strong>.</td></tr><tr><td>8</td><td>valueThis option specifies the initial value of a single-handle slider. If there are multiple handles (see the values options), specifies the value for the first handle. By default its value is <strong>1</strong>.</td></tr><tr><td>9</td><td>valuesThis option is of type Array and causes multiple handles to be created and specifies the initial values for those handles. This option should be an array of possible values, one for each handle. By default its value is <strong>null</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of slider functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of slider functionality, passing no parameters to the <strong>slider()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Slider functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#slider-1\" ).slider();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"slider-1\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sliderexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, it is a basic horizontal slider and has a single handle that can be moved with the mouse or by using the arrow keys.</p>\n\n\n\n<h3>Use of value, animate, and orientation</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>(a) value (b) animate</strong> and, <strong>(c) orientation</strong> in the slider function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Slider functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#slider-2\" ).slider({\n               value: 60,\n               animate:\"slow\",\n               orientation: \"horizontal\"\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"slider-2\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sliderexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example the&nbsp;<em>value</em>&nbsp;of slider i.e the initial value is set as 60, hence you see the handle at initial value of 60. Now just click directly on the axis and see the animation effect.</p>\n\n\n\n<h3>Use of Range, Min, Max and Values</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>(a) range, (b) min</strong>, <strong>(c) max</strong>, and <strong>(d) values</strong> in the slider function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Slider functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#slider-3\" ).slider({\n               range:true,\n               min: 0,\n               max: 500,\n               values: &#91; 35, 200 ],\n               slide: function( event, ui ) {\n                  $( \"#price\" ).val( \"$\" + ui.values&#91; 0 ] + \" - $\" + ui.values&#91; 1 ] );\n               }\n            });\n            $( \"#price\" ).val( \"$\" + $( \"#slider-3\" ).slider( \"values\", 0 ) +\n               \" - $\" + $( \"#slider-3\" ).slider( \"values\", 1 ) );\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;p>\n         &lt;label for = \"price\">Price range:&lt;/label>\n         &lt;input type = \"text\" id = \"price\" \n            style = \"border:0; color:#b9cd6d; font-weight:bold;\">\n      &lt;/p>\n      &lt;div id = \"slider-3\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sliderexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example we have set the range option to true to capture a range of values with two drag handles. The space between the handles is filled with a different background color to indicate those values are selected.</p>\n\n\n\n<h2>$ (selector, context).slider (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>slider (&#8220;action&#8221;, params)</em>&nbsp;method allows an action on the slider, such as moving the cursor to a new location. The action is specified as a string in the first argument (e.g., &#8220;value&#8221; to indicate a new value of the cursor). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).slider (\"action\", params);;\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action destroys the slider functionality of an element completely. The elements return to their pre-init state. This method does not accept any arguments.</td></tr><tr><td>2</td><td>disableThis action disables the slider functionality. This method does not accept any arguments.</td></tr><tr><td>3</td><td>enableThis action enables the slider functionality. This method does not accept any arguments.</td></tr><tr><td>4</td><td>option( optionName )This action retrieves the value of the specified param option. This option corresponds to one of those used with <em>slider (options)</em>. Where <em>optionName</em> is the name of the option to get.</td></tr><tr><td>5</td><td>option()This action gets an object containing key/value pairs representing the current slider options hash.</td></tr><tr><td>6</td><td>option( optionName, value )This action sets the value of the slider option associated with the specified <em>optionName</em>. The argument <em>optionName</em> is name of the option to be set and <em>value</em> is the value to be set for the option.</td></tr><tr><td>7</td><td>option( options )This action sets one or more options for the slider. The argument <em>options</em> is a map of option-value pairs to be set.</td></tr><tr><td>8</td><td>valueThis action retrieves the current value of <em>options.value (the slider)</em>. Use only if the slider is unique (if not, use <em>slider (&#8220;values&#8221;))</em>. This signature does not accept any arguments.</td></tr><tr><td>9</td><td>value( value )This action sets the value of the slider.</td></tr><tr><td>10</td><td>valuesThis action retrieves the current value of <em>options.values</em> (the value of the sliders in an array). This signature does not accept any arguments.</td></tr><tr><td>11</td><td>values( index )This action gets the value for the specified handle. Where <em>index</em> is of type Integer and is a zero-based index of the handle.</td></tr><tr><td>12</td><td>values( index, value )This action sets the value for the specified handle. Where <em>index</em> is the zero-based index of the handle and <em>value</em> is the value to set.</td></tr><tr><td>13</td><td>values( values )This action sets the value for all the handles.</td></tr><tr><td>14</td><td>widgetThis action returns a jQuery object containing the slider. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>disable()</em> and <em>value() </em>method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Slider functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#slider-4\" ).slider({\n               orientation:\"vertical\"\t\n            });\n            $( \"#slider-4\" ).slider('disable');\n            $( \"#slider-5\" ).slider({\n               orientation:\"vertical\",\n               value:50,\n               slide: function( event, ui ) {\n                  $( \"#minval\" ).val( ui.value );\n               }\t\n            });\n            $( \"#minval\" ).val( $( \"#slider-5\" ).slider( \"value\" ) );\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"slider-4\">&lt;/div>\n      &lt;p>\n         &lt;label for = \"minval\">Minumum value:&lt;/label>\n         &lt;input type = \"text\" id = \"minval\" \n            style = \"border:0; color:#b9cd6d; font-weight:bold;\">\n      &lt;/p>\n      &lt;div id = \"slider-5\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>sliderexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, the first slider is disabled and the second slider the value is set to 50.</p>\n\n\n\n<h2>Event Management on slider elements</h2>\n\n\n\n<p>In addition to the slider (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>change(event, ui)This event is triggered handle’s value changes, either through user action or programmatically.</td></tr><tr><td>2</td><td>create(event, ui)This event is triggered when the slider is created.</td></tr><tr><td>3</td><td>slide(event, ui)This event is triggered for mouse move events whenever the handle is being dragged through the slider. Returning false cancels the slide.</td></tr><tr><td>4</td><td>start(event, ui)This event is triggered when the user starts sliding.</td></tr><tr><td>5</td><td>stop(event, ui)This event is triggered when a slide stops.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage during slider functionality. This example demonstrates the use of events <em>start</em>, <em>stop</em>, <em>change</em> and <em>slide</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Slider functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#slider-6\" ).slider({\n               range:true,\n               min: 0,\n               max: 500,\n               values: &#91; 35, 200 ],\n               start: function( event, ui ) {\n                  $( \"#startvalue\" )\n                     .val( \"$\" + ui.values&#91; 0 ] + \" - $\" + ui.values&#91; 1 ] );\n               },\n               stop: function( event, ui ) {\n                  $( \"#stopvalue\" )\n                     .val( \"$\" + ui.values&#91; 0 ] + \" - $\" + ui.values&#91; 1 ] );\n               },\n               change: function( event, ui ) {\n                  $( \"#changevalue\" )\n                     .val( \"$\" + ui.values&#91; 0 ] + \" - $\" + ui.values&#91; 1 ] );\n               },\n               slide: function( event, ui ) {\n                  $( \"#slidevalue\" )\n                     .val( \"$\" + ui.values&#91; 0 ] + \" - $\" + ui.values&#91; 1 ] );\n               }\n           });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"slider-6\">&lt;/div>\n      &lt;p>\n         &lt;label for = \"startvalue\">Start:&lt;/label>\n         &lt;input type = \"text\" id = \"startvalue\" \n            style = \"border:0; color:#b9cd6d; font-weight:bold;\">\n      &lt;/p>\n      &lt;p>\n         &lt;label for = \"stopvalue\">Stop:&lt;/label>\n         &lt;input type = \"text\" id = \"stopvalue\" \n            style = \"border:0; color:#b9cd6d; font-weight:bold;\">\n      &lt;/p>\n      &lt;p>\n         &lt;label for = \"changevalue\">Change:&lt;/label>\n         &lt;input type = \"text\" id = \"changevalue\" \n            style = \"border:0; color:#b9cd6d; font-weight:bold;\">\n      &lt;/p>\n      &lt;p>\n         &lt;label for = \"slidevalue\">Slide:&lt;/label>\n         &lt;input type = \"text\" id = \"slidevalue\" \n            style = \"border:0; color:#b9cd6d; font-weight:bold;\">\n      &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>sliderexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n","protected":false},"excerpt":{"rendered":"<p>A&nbsp;slider&nbsp;is used whenever a numeric value within a certain range is to be obtained. The advantage of a slider over text input is that it becomes impossible for the user to enter a bad value. Any value that they can pick with the slider is valid. jQueryUI provides us a slider control through slider widget. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/89"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=89"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/89/revisions"}],"predecessor-version":[{"id":100,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/89/revisions/100"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=89"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=89"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=89"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":88,"date":"2020-07-20T17:39:13","date_gmt":"2020-07-20T17:39:13","guid":{"rendered":"http://javascript.foobrdigital.com/?p=88"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"spinner","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/spinner/","title":{"rendered":"Spinner"},"content":{"rendered":"\n<p>Spinner widget adds a up/down arrow to the left of a input box thus allowing a user to increment/decrement a value in the input box. It allows users to type a value directly, or modify an existing value by spinning with the keyboard, mouse or scrollwheel. It also has a step feature to skip values. In addition to the basic numeric features, it also enables globalized formatting options (ie currency, thousand separator, decimals, etc.) thus providing a convenient internationalized masked entry box.</p>\n\n\n\n<p>The following example depends on <em>Globalize</em>. You can get the Globalize files from https://github.com/jquery/globalize. Click the <em>releases</em> link, select the version you want, and download the <em>.zip</em> or <em>tar.gz</em> file. Extract the files and copy the following files to the folder where your example is located.</p>\n\n\n\n<ul><li>lib/globalize.js : This file contains the Javascript code for dealing with localizations</li><li>lib/globalize.culture.js : This file contains a complete set of the locales that the Globalize library comes with.</li></ul>\n\n\n\n<p>These files are also present in the&nbsp;<em>external</em>&nbsp;folder of your jquery-ui library.</p>\n\n\n\n<p>jQueryUI provides spinner() method which creates a spinner.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>spinner()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).spinner (options) Method</li><li>$(selector, context).spinner (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).spinner (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>spinner (options)</em>&nbsp;method declares that an HTML element and its contents should be treated and managed as spinner. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the appearance and behavior of the spinner elements involved.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).spinner (options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).spinner({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>cultureThis option sets the culture to use for parsing and formatting the value. By default its value is <strong>null</strong> which means the currently set culture in Globalize is used.</td></tr><tr><td>2</td><td>disabledThis option if set to <em>true</em> disables spinner. By default its value is <strong>false</strong>.</td></tr><tr><td>3</td><td>iconsThis option sets icons to use for buttons, matching an icon provided by the jQuery UI CSS Framework. By default its value is <strong>{ down: &#8220;ui-icon-triangle-1-s&#8221;, up: &#8220;ui-icon-triangle-1-n&#8221; }</strong>.</td></tr><tr><td>4</td><td>incrementalThis option controls the number of steps taken when holding down a spin button. By default its value is <strong>true</strong>.</td></tr><tr><td>5</td><td>maxThis option indicates the maximum allowed value. By default its value is <strong>null</strong> which means there is no maximum enforced.</td></tr><tr><td>6</td><td>minThis option indicates the minimum allowed value. By default its value is <strong>null</strong> which means there is no minimum enforced.</td></tr><tr><td>7</td><td>numberFormatThis option indicates format of numbers passed to <em>Globalize</em>, if available. Most common are &#8220;n&#8221; for a decimal number and &#8220;C&#8221; for a currency value. By default its value is <strong>null</strong>.</td></tr><tr><td>8</td><td>pageThis option indicates the number of steps to take when paging via the pageUp/pageDown methods. By default its value is <strong>10</strong>.</td></tr><tr><td>9</td><td>stepThis option indicates size of the step to take when spinning via buttons or via the <em>stepUp()/stepDown()</em> methods. The element&#8217;s <em>step</em> attribute is used if it exists and the option is not explicitly set.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of spinner widget functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of spinner widget functionality, passing no parameters to the <strong>spinner()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Spinner functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style type = \"text/css\">\n         #spinner-1 input {width: 100px}\n      &lt;/style>\n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#spinner-1\" ).spinner();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"example\">\n         &lt;input type = \"text\" id = \"spinner-1\" value = \"0\" />\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>spinnerexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<h3>Use of Min, Max and Step Options</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>min</strong>, <em>max</em> and <em>step</em> in the spinner widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Spinner functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style type = \"text/css\">\n         #spinner-2,#spinner-3 input {width: 100px}\n      &lt;/style>\n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#spinner-2\" ).spinner({\n               min: -10, \n               max: 10\n            });\n            $('#spinner-3').spinner({\n               step: 100, \n               min: -1000000, \n               max: 1000000\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"example\">\n         Spinner Min, Max value set:\n         &lt;input type = \"text\" id = \"spinner-2\" value = \"0\" />&lt;br>&lt;br>\n         Spinner increments/decrements in step of of 100:\n         &lt;input type = \"text\" id = \"spinner-3\" value = \"0\" />\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>spinnerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, you can see in the first spinner the max and min values are set to 10 and -10 respectively. Hence crossing these values, the spinner will stop incrementing/decrementing. In the second spinner the spinner value increments/decrements in steps of 100.</p>\n\n\n\n<h3>Use of icons Option</h3>\n\n\n\n<p>The following example demonstrates the usage of option <strong>icons</strong> in the spinner widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Spinner functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style type = \"text/css\">\n         #spinner-5 input {width: 100px}\n      &lt;/style>\n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#spinner-5\" ).spinner({\n               icons: {\n                  down: \"custom-down-icon\", up: \"custom-up-icon\"\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"example\">\n         &lt;input type = \"text\" id = \"spinner-5\" value = \"0\" />\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>spinnerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, you can notice the images spinner are changed.</p>\n\n\n\n<h3>Use of culture, numberFormat, and page options</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>culture</strong>, <em>numberFormat</em> and <em>page</em> in the spinner widget of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Spinner functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      &lt;script src = \"/jqueryui/jquery-ui-1.10.4/external/jquery.mousewheel.js\">&lt;/script>\n      &lt;script src = \"/jqueryui/jquery-ui-1.10.4/external/globalize.js\">&lt;/script>\n      &lt;script src = \"/jqueryui/jquery-ui-1.10.4/external/globalize.culture.de-DE.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $( \"#spinner-4\" ).spinner({\n               culture:\"de-DE\",\n               numberFormat:\"C\",\n               step:2,\n               page:10\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p>\n         &lt;label for = \"spinner-4\">Amount to donate:&lt;/label>\n         &lt;input id = \"spinner-4\" name = \"spinner\" value = \"5\">\n      &lt;/p>\n     \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>spinnerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, you can see the spinner displays the number in currency format as the&nbsp;<em>numberFormat</em>&nbsp;is set to &#8220;C&#8221; and&nbsp;<em>culture</em>&nbsp;is set to &#8220;de-DE&#8221;. Here we have used the Globalize files from the jquery-ui library.</p>\n\n\n\n<h2>$ (selector, context).spinner (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>spinner (&#8220;action&#8221;, params)</em>&nbsp;method can perform an action on spinner elements, such as enabling/disabling the spinner. The action is specified as a string in the first argument (e.g., &#8220;disable&#8221; disables the spinner). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).spinner (\"action\", params);;\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action destroys the spinner functionality of an element completely. The elements return to their pre-init state. This method does not accept any arguments.</td></tr><tr><td>2</td><td>disableThis action disables the spinner functionality. This method does not accept any arguments.</td></tr><tr><td>3</td><td>enableThis action enables the spinner functionality. This method does not accept any arguments.</td></tr><tr><td>4</td><td>option( optionName )This action gets the value currently associated with the specified <em>optionName</em>. Where <em>optionName</em> is the name of the option to get.</td></tr><tr><td>5</td><td>optionThis action gets an object containing key/value pairs representing the current spinner options hash. This method does not accept any arguments.</td></tr><tr><td>6</td><td>option( optionName, value )This action sets the value of the spinner option associated with the specified <em>optionName</em>.</td></tr><tr><td>7</td><td>option( options )This action sets one or more options for the spinner.</td></tr><tr><td>8</td><td>pageDown( [pages ] )This action decrements the value by the specified number of pages, as defined by the page option.</td></tr><tr><td>9</td><td>pageUp( [pages ] )This action increments the value by the specified number of pages, as defined by the page option.</td></tr><tr><td>10</td><td>stepDown( [steps ] )This action decrements the value by the specified number of steps.</td></tr><tr><td>11</td><td>stepUp( [steps ] )This action increments the value by the specified number of steps.</td></tr><tr><td>12</td><td>valueThis action gets the current value as a number. The value is parsed based on the numberFormat and culture options. This method does not accept any arguments.</td></tr><tr><td>13</td><td>value( value )This action sets the value. if value is passed value is parsed based on the numberFormat and culture options.</td></tr><tr><td>14</td><td>widgetThis action returns the spinner widget element; the one annotated with the <em>ui-spinner</em> class name.</td></tr></tbody></table></figure>\n\n\n\n<p>The following examples demonstrate how to use the actions given in the above table.</p>\n\n\n\n<h3>Use of action stepUp, stepDown, pageUp, and pageDown</h3>\n\n\n\n<p>The following example demonstrates the use of <em>stepUp, stepDown, pageUp</em> and <em>pageDown</em> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Spinner functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style type = \"text/css\">\n         #spinner-6 input {width: 100px}\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $(\"#spinner-6\").spinner();\n            $('button').button();\n\n            $('#stepUp-2').click(function () {\n               $(\"#spinner-6\").spinner(\"stepUp\");\n            });\n\n            $('#stepDown-2').click(function () {\n               $(\"#spinner-6\").spinner(\"stepDown\");\n            });\n\n            $('#pageUp-2').click(function () {\n               $(\"#spinner-6\").spinner(\"pageUp\");\n            });\n\n            $('#pageDown-2').click(function () {\n               $(\"#spinner-6\").spinner(\"pageDown\");\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;input id = \"spinner-6\" />\n      &lt;br/>\n      &lt;button id = \"stepUp-2\">Increment&lt;/button>\n      &lt;button id = \"stepDown-2\">Decrement&lt;/button>\n      &lt;button id = \"pageUp-2\">Increment Page&lt;/button>\n      &lt;button id = \"pageDown-2\">Decrement Page&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>spinnerexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>In the above example, use the respective buttons to increment/decrement the spinner.</p>\n\n\n\n<h3>Use of action enable, and disable</h3>\n\n\n\n<p>The following example demonstrates the use of <em>enable</em> and <em>disable</em> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Spinner functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style type = \"text/css\">\n         #spinner-7 input {width: 100px}\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $(\"#spinner-7\").spinner();\n            $('button').button();\n            $('#stepUp-3').click(function () {\n               $(\"#spinner-7\").spinner(\"enable\");\n            });\n            $('#stepDown-3').click(function () {\n               $(\"#spinner-7\").spinner(\"disable\");\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;input id = \"spinner-7\" />\n      &lt;br/>\n      &lt;button id = \"stepUp-3\">Enable&lt;/button>\n      &lt;button id = \"stepDown-3\">Disable&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>spinnerexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>In the above example, use the Enable/Disable buttons to enable or disable the spinner.</p>\n\n\n\n<h2>Event Management on Spinner Elements</h2>\n\n\n\n<p>In addition to the spinner (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>change(event, ui)This event is triggered when the value of the spinner has changed and the input is no longer focused.</td></tr><tr><td>2</td><td>create(event, ui)This event is triggered when the spinner is created.</td></tr><tr><td>3</td><td>spin(event, ui)This event is triggered during increment/decrement.</td></tr><tr><td>4</td><td>start(event, ui)This event is triggered before a spin. Can be canceled, preventing the spin from occurring.</td></tr><tr><td>5</td><td>stop(event, ui)This event is triggered after a spin.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage in spinner widgets. This example demonstrates the use of events <em>spin</em>, <em>change</em> and <em>stop</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Spinner functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style type = \"text/css\">\n         #spinner-8 input {width: 100px}\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#spinner-8\" ).spinner({\n               spin: function( event, ui ) {\n                  var result = $( \"#result-2\" );\n                  result.append( \"Spin Value: \"+$( \"#spinner-8\" ).spinner(\"value\") );\n               },\n               change: function( event, ui ) {\n                  var result = $( \"#result-2\" );\n                  result.append( \"Change value: \"+$( \"#spinner-8\" ).spinner(\"value\") );\n               },\n               stop: function( event, ui ) {\n                  var result = $( \"#result-2\" );\n                  result.append( \"Stop value: \"+$( \"#spinner-8\" ).spinner(\"value\") );\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;div id = \"example\">\n         &lt;input type = \"text\" id = \"spinner-8\" value = \"0\" />\n      &lt;/div>\n      &lt;span id = \"result-2\">&lt;/span>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>spinnerexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example change the value of the spinner and see, the messages being displayed below for spin and stop events. Now change the focus of the spinner and you see a message being displayed on change event.</p>\n\n\n\n<h2>Extension Points</h2>\n\n\n\n<p>The spinner widget is built with the widget factory and can be extended. To extend widgets, we can either override or add to the behavior of existing methods. Following method provides as extension point with the same API stability as the spinner methods. Listed in the above table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td>_buttonHtml(event)This method return a String which is an HTML. This HTML can be used for the spinner&#8217;s increment and decrement buttons. Each button must be given a ui-spinner-button class name for the associated events to work. This method does not accept any arguments.</td></tr><tr><td>2</td><td>_uiSpinnerHtml(event)This method determine the HTML to use to wrap the spinner&#8217;s &lt;input> element. This method does not accept any arguments.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Spinner widget adds a up/down arrow to the left of a input box thus allowing a user to increment/decrement a value in the input box. It allows users to type a value directly, or modify an existing value by spinning with the keyboard, mouse or scrollwheel. It also has a step feature to skip values. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/88"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=88"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/88/revisions"}],"predecessor-version":[{"id":101,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/88/revisions/101"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=88"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=88"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=88"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":87,"date":"2020-07-20T17:42:44","date_gmt":"2020-07-20T17:42:44","guid":{"rendered":"http://javascript.foobrdigital.com/?p=87"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"tabs","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/tabs/","title":{"rendered":"Tabs"},"content":{"rendered":"\n<p>Tabs are sets of logically grouped content that allow us to quickly flip between them to. Tabs allow us to save space like accordions. For tabs to work properly following set of markups needs to use −</p>\n\n\n\n<ul><li>Tabs must be in a list either ordered(&lt;ol&gt;) or unordered(&lt;ul&gt;).</li><li>Each tab title must be within each &lt;li&gt; and wrapped by anchor (&lt;a&gt;) tag with an&nbsp;<em>href</em>&nbsp;attribute.</li><li>Each tab panel may be any valid element but it must have an&nbsp;<em>id</em>, which corresponds to the hash in the anchor of the associated tab.</li></ul>\n\n\n\n<p>jQueryUI provides us tabs () method drastically changes the appearance of HTML elements inside the page. This method traverses (internally in jQuery UI) HTML code and adds new CSS classes to the elements concerned (here, the tabs) to give them the appropriate style.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>tabs ()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).tabs (options) Method</li><li>$(selector, context).tabs (&#8220;action&#8221;, params) Method</li></ul>\n\n\n\n<h2>$ (selector, context).tabs (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>tabs (options)</em>&nbsp;method declares that an HTML element and its content should be managed as tabs. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the appearance and behavior of tabs.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).tabs (options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using JavaScript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).tabs({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>activeThis option specifies the current active tab/panel. By default its value is <strong>0</strong>.</td></tr><tr><td>2</td><td>collapsibleThis option set to <em>true</em>, it allows tabs to be deselected. When set to false (the default), clicking on a selected tab does not deselect (it remains selected). By default its value is <strong>false</strong>.</td></tr><tr><td>3</td><td>disabledThis option uses an array to indicate index tabs that are disabled (and therefore cannot be selected). For example, use [0, 1] to disable the first two tabs. By default its value is <strong>false</strong>.</td></tr><tr><td>4</td><td>eventThis option is a name of the event that lets users select a new tab. If, for example, this option is set to &#8220;mouseover&#8221;, passing the mouse over a tab will select it. By default its value is <strong>&#8220;click&#8221;</strong>.</td></tr><tr><td>5</td><td>heightStyleThis option controls the height of the tabs widget and each panel. By default its value is <strong>&#8220;content&#8221;</strong>.</td></tr><tr><td>6</td><td>hideThis option specifies how to animate hiding of panel. By default its value is <strong>null</strong>.</td></tr><tr><td>7</td><td>showThis option specifies how to animate showing of panel. By default its value is <strong>null</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of tabs functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of tabs functionality, passing no parameters to the <strong>tabs()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tabs functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\n         \" rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;script>\n         $(function() {\n            $( \"#tabs-1\" ).tabs();\n         });\n      &lt;/script>\n\t\t\n      &lt;style>\n         #tabs-1{font-size: 14px;}\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div id = \"tabs-1\">\n         &lt;ul>\n            &lt;li>&lt;a href = \"#tabs-2\">Tab 1&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-3\">Tab 2&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-4\">Tab 3&lt;/a>&lt;/li>\n         &lt;/ul>\n         &lt;div id = \"tabs-2\">\n            &lt;p>\n               Neque porro quisquam est qui dolorem ipsum quia dolor sit \n               amet, consectetur, adipisci velit... \n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-3\">\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n               nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-4\">\n            &lt;p>\n               ed ut perspiciatis unde omnis iste natus error sit \n               voluptatem accusantium doloremque laudantium, totam rem aperiam, \n               eaque ipsa quae ab illo inventore veritatis et quasi architecto \n               beatae vitae dicta sunt explicabo.\n            &lt;/p>\t\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n               nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>tabsexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, click on tabs to swap between content.</p>\n\n\n\n<h3>Use of heightStyle, collapsible, and hide</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>(a) heightStyle (b) collapsible</strong>, and <strong>(c) hide</strong> in the tabs function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tabs functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\t\t\n      &lt;script>\n         $(function() {\n            $( \"#tabs-5\" ).tabs({\n               heightStyle:\"fill\",\n               collapsible:true,\n               hide:\"slideUp\"\n            });\n         });\n      &lt;/script>\n\t\t\n      &lt;style>\n         #tabs-5{font-size: 14px;}\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div id = \"tabs-5\">\n         &lt;ul>\n            &lt;li>&lt;a href = \"#tabs-6\">Tab 1&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-7\">Tab 2&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-8\">Tab 3&lt;/a>&lt;/li>\n         &lt;/ul>\n         &lt;div id = \"tabs-6\">\n            &lt;p>Neque porro quisquam est qui dolorem ipsum quia dolor \n               sit amet, consectetur, adipisci velit...\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-7\">\n            &lt;p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna \n               aliqua. Ut enim ad minim veniam, quis nostrud exercitation \n               ullamco laboris nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-8\">\n            &lt;p>\n               ed ut perspiciatis unde omnis iste natus error sit voluptatem \n               accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae \n               ab illo inventore veritatis et quasi architecto beatae vitae dicta \n               sunt explicabo.\n            &lt;/p>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n               nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>tabsexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Click the selected tab to toggle its content closed/open. You can also see the animation effect &#8220;slideUp&#8221; when the tab is closed.</p>\n\n\n\n<h3>Use of Event</h3>\n\n\n\n<p>The following example demonstrates the usage of three options <strong>event</strong> in the tabs function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tabs functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\" \n         rel=\"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\t\t\n      &lt;script>\n         $(function() {\n            $( \"#tabs-9\" ).tabs({\n               event:\"mouseover\"\n            });\n         });\n      &lt;/script>\n\t\t\n      &lt;style>\n         #tabs-9{font-size: 14px;}\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div id = \"tabs-9\">\n         &lt;ul>\n            &lt;li>&lt;a href = \"#tabs-10\">Tab 1&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-11\">Tab 2&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-12\">Tab 3&lt;/a>&lt;/li>\n         &lt;/ul> \n         &lt;div id = \"tabs-10\">\n            &lt;p>Neque porro quisquam est qui dolorem ipsum quia dolor \n               sit amet, consectetur, adipisci velit... &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-11\">\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n               nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-12\">\n            &lt;p>\n               ed ut perspiciatis unde omnis iste natus error sit \n               voluptatem accusantium doloremque laudantium, totam rem aperiam, \n               eaque ipsa quae ab illo inventore veritatis et quasi architecto \n               beatae vitae dicta sunt explicabo.\n            &lt;/p>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n               nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>tabsexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example toggle the sections open/closed with mouseover the tabs.</p>\n\n\n\n<h2>$ (selector, context).tabs (&#8220;action&#8221;, params) Method</h2>\n\n\n\n<p>The&nbsp;<em>tabs (&#8220;action&#8221;, params)</em>&nbsp;method allows an action on the tabs (through a JavaScript program), selecting, disabling, adding, or removing a tab. The action is specified as a string in the first argument (e.g., &#8220;add&#8221; to add a new tab). Check out the actions that can be passed, in the following table.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).tabs (\"action\", params);;\n</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>actions</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>destroyThis action destroys the tabs functionality of an element completely. The elements return to their pre-init state. This method does not accept any arguments.</td></tr><tr><td>2</td><td>disableThis action disables all tabs. This method does not accept any arguments.</td></tr><tr><td>3</td><td>disable( index )This action disables the specified tab. Where <em>index</em> is the tab to be disabled.</td></tr><tr><td>4</td><td>enableThis action activates all the tabs. This signature does not accept any arguments.</td></tr><tr><td>5</td><td>enable( index )This action activates a specified tab. Where <em>index</em> is the tab to be enabled.</td></tr><tr><td>6</td><td>load( index )This action forces a reload of the indexed tab, ignoring the cache. Where <em>index</em> is the tab to load.</td></tr><tr><td>7</td><td>option( optionName )This action gets the value currently associated with the specified <em>optionName</em>.</td></tr><tr><td>8</td><td>optionThis action gets an object containing key/value pairs representing the current tabs options hash.</td></tr><tr><td>9</td><td>option( optionName, value )This action sets the value of the tabs option associated with the specified <em>optionName</em>. The argument <em>optionName</em> is name of the option to be set and <em>value</em> is the value to be set for the option.</td></tr><tr><td>10</td><td>option( options )This action sets one or more options to the tabs.</td></tr><tr><td>11</td><td>refreshThis action recomputes the height of the tab panels when any tabs that were added or removed directly in the DOM. Results depend on the content and the <em>heightStyle</em> option.</td></tr><tr><td>12</td><td>widgetThis action returns the element serving as the tabs widget, annotated with the <em>ui-tabs</em> class name.</td></tr></tbody></table></figure>\n\n\n\n<h3>Use of Action Disable()</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>disable()</em> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tabs functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\" \n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\t\t\n      &lt;script>\n         $(function() {\n            $( \"#tabs-13\" ).tabs();\n            $( \"#tabs-13\" ).tabs(\"disable\");\n         });\n      &lt;/script>\n\t\t\n      &lt;style>\n         #tabs-13{font-size: 14px;}\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div id = \"tabs-13\">\n         &lt;ul>\n            &lt;li>&lt;a href = \"#tabs-14\">Tab 1&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-15\">Tab 2&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-16\">Tab 3&lt;/a>&lt;/li>\n         &lt;/ul>\n         &lt;div id = \"tabs-14\">\n            &lt;p>\n               Neque porro quisquam est qui dolorem ipsum quia dolor \n               sit amet, consectetur, adipisci velit...\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-15\">\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco\n               laboris nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-16\">\n            &lt;p>\n               ed ut perspiciatis unde omnis iste natus error sit \n               voluptatem accusantium doloremque laudantium, totam rem aperiam, \n               eaque ipsa quae ab illo inventore veritatis et quasi architecto \n               beatae vitae dicta sunt explicabo.\n            &lt;/p>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n               nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>tabsexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Here you can see all the tabs are disabled.</p>\n\n\n\n<h3>Use of Action Disable(index)</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of <em>disable(index)</em> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tabs functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\" \n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\t\t\n      &lt;script>\n         $(function() {\n            $( \"#tabs-17\" ).tabs();\n            $( \"#tabs-17\" ).tabs(\"disable\",2);\n         });\n      &lt;/script>\n\t\t\n      &lt;style>\n         #tabs-17{font-size: 14px;}\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n      &lt;/style>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div id = \"tabs-17\">\n         &lt;ul>\n            &lt;li>&lt;a href = \"#tabs-18\">Tab 1&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-19\">Tab 2&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-20\">Tab 3&lt;/a>&lt;/li>\n         &lt;/ul>\n         &lt;div id = \"tabs-18\">\n            &lt;p>\n               Neque porro quisquam est qui dolorem ipsum quia dolor \n               sit amet, consectetur, adipisci velit...\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-19\">\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n               nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-20\">\n            &lt;p>\n               ed ut perspiciatis unde omnis iste natus error sit voluptatem \n               accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae \n               ab illo inventore veritatis et quasi architecto beatae vitae dicta \n               sunt explicabo.\n            &lt;/p>\t\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi \n               ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>tabsexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, you notice that Tab 3 is disabled.</p>\n\n\n\n<h2>Event Management on tabs elements</h2>\n\n\n\n<p>In addition to the tabs (options) method which we saw in the previous sections, JqueryUI provides event methods which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>activate(event, ui)This event is triggered after the tab has been activated (after the completion of animation).</td></tr><tr><td>2</td><td>beforeActivate(event, ui)This event is triggered before a the tab has been activated.</td></tr><tr><td>3</td><td>beforeLoad(event, ui)This event is triggered when a remote tab is about to be loaded, after the <em>beforeActivate</em> event. This event is triggered just before the Ajax request is made.</td></tr><tr><td>4</td><td>create(event, ui)This event is triggered when tabs are created.</td></tr><tr><td>5</td><td>load(event, ui)This event is triggered after a remote tab has been loaded.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example demonstrates the event method usage in tabs widgets. This example demonstrates the use of events <em>activate</em> and <em>create</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tabs functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\" \n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\t\t\n      &lt;script>\n         $(function() {\n            $( \"#tabs-21\" ).tabs({\n               activate: function( event, ui ) {\n                  var result = $( \"#result-2\" ).empty();\n                  result.append( \"activated\" );\n               },\n               create: function( event, ui ) {\n                  var result = $( \"#result-1\" ).empty();\n                  result.append( \"created\" );\n               }\n            });\n         });\n      &lt;/script>\n\t\t\n      &lt;style>\n         #tabs-21{font-size: 14px;}\n         .ui-widget-header {\n            background:#b9cd6d;\n            border: 1px solid #b9cd6d;\n            color: #FFFFFF;\n            font-weight: bold;\n         }\n         .resultarea {\n            background: #cedc98;\n            border-top: 1px solid #000000;\n            border-bottom: 1px solid #000000;\n            color: #333333;\n            font-size:14px;\n         }\n      &lt;/style>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div id = \"tabs-21\">\n         &lt;ul>\n            &lt;li>&lt;a href = \"#tabs-22\">Tab 1&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-23\">Tab 2&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"#tabs-24\">Tab 3&lt;/a>&lt;/li>\n         &lt;/ul>\n         &lt;div id = \"tabs-22\">\n            &lt;p>\n               Neque porro quisquam est qui dolorem ipsum quia dolor \n               sit amet, consectetur, adipisci velit...\n            &lt;/p>\n         &lt;/div>\n         &lt;div id = \"tabs-23\">\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \n               Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris \n               nisi ut aliquip ex ea commodo consequat.\n            &lt;/p>   \n         &lt;/div>\n         &lt;div id = \"tabs-24\">\n            &lt;p>\n               ed ut perspiciatis unde omnis iste natus error sit voluptatem \n               accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae \n               ab illo inventore veritatis et quasi architecto beatae vitae dicta \n               sunt explicabo.\n            &lt;/p>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, \n               sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut \n               enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi \n               ut aliquip ex ea commodo consequat.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>&lt;br>\n      \n      &lt;span class = \"resultarea\" id = result-1>&lt;/span>&lt;br>\n      &lt;span class = \"resultarea\" id = result-2>&lt;/span>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>tabsexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Click on the tabs to see a message getting printed below on specific to events.</p>\n","protected":false},"excerpt":{"rendered":"<p>Tabs are sets of logically grouped content that allow us to quickly flip between them to. Tabs allow us to save space like accordions. For tabs to work properly following set of markups needs to use − Tabs must be in a list either ordered(&lt;ol&gt;) or unordered(&lt;ul&gt;). Each tab title must be within each &lt;li&gt; [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/87"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=87"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/87/revisions"}],"predecessor-version":[{"id":102,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/87/revisions/102"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=87"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=87"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=87"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":86,"date":"2020-07-20T17:45:56","date_gmt":"2020-07-20T17:45:56","guid":{"rendered":"http://javascript.foobrdigital.com/?p=86"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"tooltip","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/tooltip/","title":{"rendered":"Tooltip"},"content":{"rendered":"\n<p>Tooltip widget of jQueryUI replaces the native tooltips. This widget adds new themes and allows for customization. First let us understand what tooltips are? Tooltips can be attached to any element. To display tooltips, just add&nbsp;<em>title</em>&nbsp;attribute to input elements and title attribute value will be used as tooltip. When you hover the element with your mouse, the title attribute is displayed in a little box next to the element.</p>\n\n\n\n<p>jQueryUI provides&nbsp;<strong>tooltip()</strong>&nbsp;method to add tooltip to any element on which you want to display tooltip. This gives a fade animation by default to show and hide the tooltip, compared to just toggling the visibility.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The&nbsp;<strong>tooltip()</strong>&nbsp;method can be used in two forms −</p>\n\n\n\n<ul><li>$(selector, context).tooltip (options)&nbsp;Method</li><li>$(selector, context).tooltip (&#8220;action&#8221;, [params])&nbsp;Method</li></ul>\n\n\n\n<h2>$ (selector, context).tooltip (options) Method</h2>\n\n\n\n<p>The&nbsp;<em>tooltip (options)</em>&nbsp;method declares that a tooltip can be added to an HTML element. The&nbsp;<em>options</em>&nbsp;parameter is an object that specifies the behavior and appearance of the tooltip.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).tooltip(options);\n</code></pre>\n\n\n\n<p>You can provide one or more options at a time using Javascript object. If there are more than one options to be provided then you will separate them using a comma as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).tooltip({option1: value1, option2: value2..... });</code></pre>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>contentThis option represents content of a tooltip. By default its value is&nbsp;<strong>function returning the title attribute</strong>.</td></tr><tr><td>2</td><td>disabledThis option when set to&nbsp;<em>true</em>&nbsp;disables the tooltip. By default its value is&nbsp;<strong>false</strong>.</td></tr><tr><td>3</td><td>hideThis option represents the animation effect when hiding the tooltip. By default its value is&nbsp;<strong>true</strong>.</td></tr><tr><td>4</td><td>itemsThis option indicates which items can show tooltips. By default its value is&nbsp;<strong>[title]</strong>.</td></tr><tr><td>5</td><td>positionThis option decides the position of the tooltip w.r.t the associated target element. By default its value is&nbsp;<strong>function returning the title attribute</strong>. Possible values are:&nbsp;<em>my, at, of, collision, using, within.</em></td></tr><tr><td>6</td><td>showThis option represents how to animate the showing of tooltip. By default its value is&nbsp;<strong>true</strong>.</td></tr><tr><td>7</td><td>tooltipClassThis option is a class which can be added to the tooltip widget for tooltips such as warning or errors. By default its value is&nbsp;<strong>null</strong>.</td></tr><tr><td>8</td><td>trackThis option when set to&nbsp;<em>true</em>, the tooltip follows/tracks the mouse. By default its value is&nbsp;<strong>false</strong>.</td></tr></tbody></table></figure>\n\n\n\n<p>The following section will show you a few working examples of tooltip functionality.</p>\n\n\n\n<h3>Default Functionality</h3>\n\n\n\n<p>The following example demonstrates a simple example of tooltip functionality passing no parameters to the&nbsp;<strong>tooltip()</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tooltip functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n   \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $(\"#tooltip-1\").tooltip();\n            $(\"#tooltip-2\").tooltip();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;label for = \"name\">Name:&lt;/label>\n      &lt;input id = \"tooltip-1\" title = \"Enter You name\">\n      &lt;p>&lt;a id = \"tooltip-2\" href = \"#\" title = \"Nice tooltip\">\n         I also have a tooltip&lt;/a>&lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>tooltipexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n\n\n\n<p>In the above example, hover over the links above or use the tab key to cycle the focus on each element.</p>\n\n\n\n<h3>Use of Content, Track and Disabled</h3>\n\n\n\n<p>The following example shows the usage of three important options&nbsp;<strong>(a) content (b) track</strong>&nbsp;and&nbsp;<strong>(c) disabled</strong>&nbsp;in the tooltip function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tooltip functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#tooltip-3\" ).tooltip({\n               content: \"&lt;strong>Hi!&lt;/strong>\",\n               track:true\n            }),\n            $( \"#tooltip-4\" ).tooltip({\n               disabled: true\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;label for = \"name\">Message:&lt;/label>\n      &lt;input id = \"tooltip-3\" title = \"tooltip\">&lt;br>&lt;br>&lt;br>\n      &lt;label for = \"name\">Tooltip disabled for me:&lt;/label>\n      &lt;input id = \"tooltip-4\" title = \"tooltip\">\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>tooltipexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, the content of tooltip of first box is set using&nbsp;<em>content</em>&nbsp;option. You can also notice the tooltip follows the mouse. The tooltip for second input box is disabled.</p>\n\n\n\n<h3>Use of Position</h3>\n\n\n\n<p>The following example shows the usage of option&nbsp;<strong>position</strong>&nbsp;in the tooltip function of JqueryUI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tooltip functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         body {\n            margin-top: 100px;\n         }\n\n         .ui-tooltip-content::after, .ui-tooltip-content::before {\n            content: \"\";\n            position: absolute;\n            border-style: solid;\n            display: block;\n            left: 90px;\n         }\n         .ui-tooltip-content::before {\n            bottom: -10px;\n            border-color: #AAA transparent;\n            border-width: 10px 10px 0;\n         }\n         .ui-tooltip-content::after {\n            bottom: -7px;\n            border-color: white transparent;\n            border-width: 10px 10px 0;\n         }\n      &lt;/style>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $( \"#tooltip-7\" ).tooltip({\n               position: {\n                  my: \"center bottom\",\n                  at: \"center top-10\",\n                  collision: \"none\"\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- HTML --> \n      &lt;label for = \"name\">Enter Date of Birth:&lt;/label>\n      &lt;input id = \"tooltip-7\" title = \"Please use MM.DD.YY format.\">\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>tooltipexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example the tooltip position is set on top of the input box.</p>\n\n\n\n<h2>$ (selector, context).tooltip (&#8220;action&#8221;, [params]) Method</h2>\n\n\n\n<p>The&nbsp;<em>tooltip (action, params)</em>&nbsp;method can perform an action on the tooltip elements, such as disabling the tooltip. The&nbsp;<strong>action</strong>&nbsp;is specified as a string in the first argument and optionally, one or more&nbsp;<strong>params</strong>&nbsp;can be provided based on the given action.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Basically, here actions are nothing but they are jQuery methods which we can use in the form of string.</p></blockquote>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>$(selector, context).tooltip (\"action\", &#91;params]);\n</code></pre>\n\n\n\n<p>The following table lists the actions for this method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>close()This action closes the tooltip. This method does not accept any arguments.</td></tr><tr><td>2</td><td>destroy()This action removes the tooltip functionality completely. This will return the element back to its pre-init state. This method does not accept any arguments.</td></tr><tr><td>3</td><td>disable()This action deactivates the tooltip. This method does not accept any arguments.</td></tr><tr><td>4</td><td>enable()This action activates the tooltip. This method does not accept any arguments.</td></tr><tr><td>5</td><td>open()This action programmatically opens the tooltip. This method does not accept any arguments.</td></tr><tr><td>6</td><td>option( optionName )This action gets the value associated with&nbsp;<em>optionName</em>&nbsp;for the tooltip. This method does not accept any arguments.</td></tr><tr><td>7</td><td>option()This action gets an object containing key/value pairs representing the current tooltip options hash. This method does not accept any arguments.</td></tr><tr><td>8</td><td>option( optionName, value )This action sets the value of the tooltip option associated with the specified&nbsp;<em>optionName</em>.</td></tr><tr><td>9</td><td>option( options )This action sets one or more options for tooltip.</td></tr><tr><td>10</td><td>widget()This action returns a jQuery object containing the original element. This method does not accept any arguments.</td></tr></tbody></table></figure>\n\n\n\n<h3>Examples</h3>\n\n\n\n<p>Now let us see an example using the actions from the above table. The following example demonstrates the use of actions&nbsp;<em>disable</em>&nbsp;and&nbsp;<em>enable</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tooltip functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $(\"#tooltip-8\").tooltip({\n               //use 'of' to link the tooltip to your specified input\n               position: { of: '#myInput', my: 'left center', at: 'left center' },\n            }),\n            $('#myBtn').click(function () {\n               $('#tooltip-8').tooltip(\"open\");\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body style = \"padding:100px;\">\n      &lt;!-- HTML --> \n      &lt;a id = \"tooltip-8\" title = \"Message\" href = \"#\">&lt;/a>\n      &lt;input id = \"myInput\" type = \"text\" name = \"myInput\" value = \"0\" size = \"7\" />\n      &lt;input id = \"myBtn\" type = \"submit\" name = \"myBtn\" value = \"myBtn\" class = \"myBtn\" />\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>tooltipexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example, click on&nbsp;<em>myBtn</em>&nbsp;button and a tooltip pops up.</p>\n\n\n\n<h2>Event Management on Tooltip elements</h2>\n\n\n\n<p>In addition to the tooltip (options) method which we saw in the previous sections, JqueryUI provides event methods as which gets triggered for a particular event. These event methods are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>create(event, ui)Triggered when the tooltip is created. Where&nbsp;<em>event</em>&nbsp;is of type&nbsp;<em>Event</em>, and&nbsp;<em>ui</em>&nbsp;is of type&nbsp;<em>Object</em>.</td></tr><tr><td>2</td><td>close(event, ui)Triggered when the tooltip is closed. Usually triggers on&nbsp;<em>focusout</em>&nbsp;or&nbsp;<em>mouseleave</em>. Where&nbsp;<em>event</em>&nbsp;is of type&nbsp;<em>Event</em>, and&nbsp;<em>ui</em>&nbsp;is of type&nbsp;<em>Object</em>.</td></tr><tr><td>3</td><td>open(event, ui)Triggered when the tooltip is displayed or shown. Usually triggered on&nbsp;<em>focusin</em>&nbsp;or&nbsp;<em>mouseover</em>. Where&nbsp;<em>event</em>&nbsp;is of type&nbsp;<em>Event</em>, and&nbsp;<em>ui</em>&nbsp;is of type&nbsp;<em>Object</em>.</td></tr></tbody></table></figure>\n\n\n\n<h3>Examples</h3>\n\n\n\n<p>The following example demonstrates event method usage during tooltip functionality. This example demonstrates use of&nbsp;<em>open</em>&nbsp;and&nbsp;<em>close</em>&nbsp;events.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Tooltip functionality&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- Javascript -->\n      &lt;script>\n         $(function() {\n            $('.tooltip-9').tooltip({\n               items: 'a.tooltip-9',\n               content: 'Hello welcome…',\n               show: \"slideDown\", // show immediately\n               open: function(event, ui) {\n                  ui.tooltip.hover(\n                  function () {\n                     $(this).fadeTo(\"slow\", 0.5);\n                  });\n               }\n            });\n         });\n         $(function() {\n            $('.tooltip-10').tooltip({\n               items: 'a.tooltip-10',\n               content: 'Welcome to codemeals…',\n               show: \"fold\", \n               close: function(event, ui) {\n                  ui.tooltip.hover(function() {\n                     $(this).stop(true).fadeTo(500, 1); \n                  },\n                  function() {\n                     $(this).fadeOut('500', function() {\n                        $(this).remove();\n                     });\n                  });\n               }\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body style = \"padding:100px;\">\n      &lt;!-- HTML --> \n      &lt;div id = \"target\">\n         &lt;a href = \"#\" class = \"tooltip-9\">Hover over me!&lt;/a>\n         &lt;a href = \"#\" class = \"tooltip-10\">Hover over me too!&lt;/a>\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>tooltipexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>In the above example the tooltip for&nbsp;<em>Hover over me!</em>&nbsp;disappear immediately whereas the tooltip for&nbsp;<em>Hover over me too!</em>&nbsp;fades out after duration of 1000ms.</p>\n","protected":false},"excerpt":{"rendered":"<p>Tooltip widget of jQueryUI replaces the native tooltips. This widget adds new themes and allows for customization. First let us understand what tooltips are? Tooltips can be attached to any element. To display tooltips, just add&nbsp;title&nbsp;attribute to input elements and title attribute value will be used as tooltip. When you hover the element with your [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/86"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=86"}],"version-history":[{"count":2,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/86/revisions"}],"predecessor-version":[{"id":264,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/86/revisions/264"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=86"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=86"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=86"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":85,"date":"2020-07-20T17:47:17","date_gmt":"2020-07-20T17:47:17","guid":{"rendered":"http://javascript.foobrdigital.com/?p=85"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"add-class","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/add-class/","title":{"rendered":"Add Class"},"content":{"rendered":"\n<p>This chapter will discuss the&nbsp;<strong>addClass()</strong>&nbsp;method, which is one of the methods used to manage jQueryUI visual effects.&nbsp;<em>addClass()</em>&nbsp;method allow animating the changes to the CSS properties.</p>\n\n\n\n<p><em>addClass()</em>&nbsp;method add specified classes to the matched elements while animating all style changes.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<h3>Added In Version 1.0 of jQueryUI</h3>\n\n\n\n<p>The <strong>addClass()</strong> method has its basic syntax as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.addClass( className &#91;, duration ] &#91;, easing ] &#91;, complete ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>className</strong>This is a String containing one or more CSS classes (separated by spaces).</td></tr><tr><td>2</td><td><strong>duration</strong>This is of type Number or String, and indicates the number of milliseconds of the effect. A value of 0 takes the element directly in the new style, without progress. Its default value is&nbsp;<em>400</em>.</td></tr><tr><td>3</td><td><strong>easing</strong>This is of type String and indicates the way to progress in the effect. Its default value is <em>swing</em>. Possible values are here.</td></tr><tr><td>4</td><td><strong>complete</strong>This is a callback method called for each element when the effect is complete for this element.</td></tr></tbody></table></figure>\n\n\n\n<h3>Added In Version 1.9 of jQueryUI</h3>\n\n\n\n<p>With version 1.9, this method now supports a&nbsp;<em>children</em>&nbsp;option, which will also animate descendant elements.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">.addClass( className [, options ] )</pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>className</strong>This is a String containing one or more CSS classes (separated by spaces).</td></tr><tr><td>2</td><td><strong>options</strong>This represents all animation settings. All properties are optional. Possible values are −<strong>duration</strong> − This is of type Number or String, and indicates the number of milliseconds of the effect. A value of 0 takes the element directly in the new style, without progress. Its default value is <em>400</em>.<strong>easing</strong> − This is of type String and indicates the way to progress in the effect. Its default value is <em>swing</em>. Possible values are here.<strong>complete</strong> − This is a callback method called for each element when the effect is complete for this element.<strong>children</strong> − This is of type Boolean and represents whether the animation should additionally be applied to all descendants of the matched elements. Its default value is <em>false</em>.<strong>queue</strong> − This is of type Boolean or String and represents whether to place the animation in the effects queue. Its default value is <em>true</em>.</td></tr></tbody></table></figure>\n\n\n\n<h2>Examples</h2>\n\n\n\n<p>The following example demonstrates the use of&nbsp;<em>addClass()</em>&nbsp;methods.</p>\n\n\n\n<h3>Passing single class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI addClass Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .elemClass {\n            width: 200px;\n            height: 50px;\n            background-color: #b9cd6d;\n         }\n         .myClass {\n            font-size: 40px; background-color: #ccc; color: white;\n         }\n      &lt;/style>\n      \n      &lt;script type = \"text/javascript\">\n         $(document).ready(function() {\n            $('.button').click(function() {\n               if (this.id == \"add\") {\n                  $('#animTarget').addClass(\"myClass\", \"fast\")\n               } else {\n               $('#animTarget').removeClass(\"myClass\", \"fast\")\n               }\n            })\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = animTarget class = \"elemClass\">\n         Hello!\n      &lt;/div>\n      &lt;button class = \"button\" id = \"add\">Add Class&lt;/button>\n      &lt;button class = \"button\" id = \"remove\">Remove Class&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>addclassexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Click on the&nbsp;<em>Add Class</em>&nbsp;and&nbsp;<em>Remove Class</em>&nbsp;buttons to see the effect of classes on the box.</p>\n\n\n\n<h3>Passing multiple classes</h3>\n\n\n\n<p>This example shows how to pass multiple classes to the <em>addClass</em> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI addClass Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .red { color: red; }\n         .big { font-size: 5em; }\n         .spaced { padding: 1em; }\n      &lt;/style>\n      \n      &lt;script>\n         $(document).ready(function() {\n            $('.button-1').click(function() {\n               $( \"#welcome\" ).addClass( \"red big spaced\", 3000 );\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;p id = \"welcome\">Welcome to Tutorials Point!&lt;/p>\n      &lt;button class = \"button-1\">Click me&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>addclassexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss the&nbsp;addClass()&nbsp;method, which is one of the methods used to manage jQueryUI visual effects.&nbsp;addClass()&nbsp;method allow animating the changes to the CSS properties. addClass()&nbsp;method add specified classes to the matched elements while animating all style changes. Syntax Added In Version 1.0 of jQueryUI The addClass() method has its basic syntax as follows − Sr.No. Parameter [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/85"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=85"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/85/revisions"}],"predecessor-version":[{"id":104,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/85/revisions/104"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=85"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=85"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=85"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":84,"date":"2020-07-20T17:48:08","date_gmt":"2020-07-20T17:48:08","guid":{"rendered":"http://javascript.foobrdigital.com/?p=84"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"color-animation","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/color-animation/","title":{"rendered":"Color Animation"},"content":{"rendered":"\n<p>jQueryUI extends some core jQuery methods so that you can animate different transitions for an element. One of them being&nbsp;<em>animate</em>&nbsp;method. jQueryUI extends the jQuery&nbsp;<em>animate</em>&nbsp;method, to add support for animating colors. You can animate one of several CSS properties that define an element’s colors. Following are the CSS properties that the&nbsp;<em>animate</em>&nbsp;method supports.</p>\n\n\n\n<ul><li><strong>backgroundColor</strong>&nbsp;− Sets the background color of the element.</li><li><strong>borderTopColor</strong>&nbsp;− Sets the color for top side of the element border.</li><li><strong>borderBottomColor</strong>&nbsp;− Sets the color for bottom side of the element border.</li><li><strong>borderLeftColor</strong>&nbsp;− Sets the color for left side of the element border.</li><li><strong>borderRightColor</strong>&nbsp;− Sets the color for right side of the element border.</li><li><strong>color</strong>&nbsp;− Sets the text color of the element.</li><li><strong>outlineColor</strong>&nbsp;− Sets the color for the outline; used to emphasize the element.</li></ul>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The following is the syntax of the jQueryUI <em>animate</em> method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$( \"#selector\" ).animate(\n   { backgroundColor: \"black\",\n      color: \"white\"\n   }\n);</code></pre>\n\n\n\n<p>You can set any number of properties in this method separated by&nbsp;<strong>,</strong>&nbsp;(comma).</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following example demonstrates the use of <em>addClass()</em> methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI addClass Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .elemClass {\n            width: 200px;\n            height: 50px;\n            background-color: #b9cd6d;\n         }\n         .myClass {\n            font-size: 40px; background-color: #ccc; color: white;\n         }\n      &lt;/style>\n      \n      &lt;script type = \"text/javascript\">\n         $(document).ready(function() {\n            $('#button-1').click(function() {\n               $('#animTarget').animate({\n                  backgroundColor: \"black\",\n                  color: \"white\"\n               })\n            })\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = animTarget class = \"elemClass\">\n         Hello!\n      &lt;/div>\n      &lt;button id = \"button-1\">Click Me&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>animateexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n","protected":false},"excerpt":{"rendered":"<p>jQueryUI extends some core jQuery methods so that you can animate different transitions for an element. One of them being&nbsp;animate&nbsp;method. jQueryUI extends the jQuery&nbsp;animate&nbsp;method, to add support for animating colors. You can animate one of several CSS properties that define an element’s colors. Following are the CSS properties that the&nbsp;animate&nbsp;method supports. backgroundColor&nbsp;− Sets the background [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/84"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=84"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/84/revisions"}],"predecessor-version":[{"id":105,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/84/revisions/105"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=84"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=84"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=84"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":83,"date":"2020-07-20T17:49:33","date_gmt":"2020-07-20T17:49:33","guid":{"rendered":"http://javascript.foobrdigital.com/?p=83"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"effect","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/effect/","title":{"rendered":"Effect"},"content":{"rendered":"\n<p>This chapter will discuss the&nbsp;<strong>effect()</strong>&nbsp;method, which is one of the methods used to manage jQueryUI visual effects.&nbsp;<em>effect()</em>&nbsp;method applies an animation effect to the elements without having to show or hide it.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The <strong>effect()</strong> method has the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.effect( effect &#91;, options ] &#91;, duration ] &#91;, complete ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>effect</strong>This is a String indicating which effect to use for the transition.</td></tr><tr><td>2</td><td><strong>options</strong>This is of type Object and indicates effect-specific settings and easing. Additionally, each effect has its own set of options that can be specified common across multiple effects described in the table <em>jQueryUI Effects</em>.</td></tr><tr><td>3</td><td><strong>duration</strong>This is of type Number or String, and indicates the number of milliseconds of the effect. Its default value is&nbsp;<em>400</em>.</td></tr><tr><td>4</td><td><strong>complete</strong>This is a callback method called for each element when the effect is complete for this element.</td></tr></tbody></table></figure>\n\n\n\n<h2>jQueryUI Effects</h2>\n\n\n\n<p>The following table describes the various effects that can be used with the effects() method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Effect &amp; Description</th></tr><tr><td>1</td><td><strong>blind</strong>Shows or hides the element in the manner of a window blind: by moving the bottom edge down or up, or the right edge to the right or left, depending upon the specified&nbsp;<em>direction</em>&nbsp;and&nbsp;<em>mode</em>.</td></tr><tr><td>2</td><td><strong>bounce</strong>Causes the element to appear to bounce in the vertical or horizontal direction, optionally showing or hiding the element.</td></tr><tr><td>3</td><td><strong>clip</strong>Shows or hides the element by moving opposite borders of the element together until they meet in the middle, or vice versa.</td></tr><tr><td>4</td><td><strong>drop</strong>Shows or hides the element by making it appear to drop onto, or drop off of, the page.</td></tr><tr><td>5</td><td><strong>explode</strong>Shows or hides the element by splitting it into multiple pieces that move in radial directions as if imploding into, or exploding from, the page.</td></tr><tr><td>6</td><td><strong>fade</strong>Shows or hides the element by adjusting its opacity. This is the same as the core fade effects, but without options.</td></tr><tr><td>7</td><td><strong>fold</strong>Shows or hides the element by adjusting opposite borders in or out, and then doing the same for the other set of borders.</td></tr><tr><td>8</td><td><strong>highlight</strong>Calls attention to the element by momentarily changing its background color while showing or hiding the element.</td></tr><tr><td>9</td><td><strong>puff</strong>Expands or contracts the element in place while adjusting its opacity.</td></tr><tr><td>10</td><td><strong>pulsate</strong>Adjusts the opacity of the element on and off before ensuring that the element is shown or hidden as specified.</td></tr><tr><td>11</td><td><strong>scale</strong>Expands or contracts the element by a specified percentage.</td></tr><tr><td>12</td><td><strong>shake</strong>Shakes the element back and forth, either vertically or horizontally.</td></tr><tr><td>13</td><td><strong>size</strong>Resizes the element to a specified width and height. Similar to scale except for how the target size is specified.</td></tr><tr><td>14</td><td><strong>slide</strong>Moves the element such that it appears to slide onto or off of the page.</td></tr><tr><td>15</td><td><strong>transfer</strong>Animates a transient outline element that makes the element appear to transfer to another element. The appearance of the outline element must be defined via CSS rules for the ui-effects-transfer class, or the class specified as an option.</td></tr></tbody></table></figure>\n\n\n\n<h2>Examples</h2>\n\n\n\n<p>The following examples demonstrates the use of&nbsp;<em>effect()</em>&nbsp;method with different effect listed in the above table.</p>\n\n\n\n<h3>Effect &#8211; Shake</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI effect Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         #box-1 {\n            height: 100px;\n            width: 100px;\n            background: #b9cd6d;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(document).ready(function() {\n            $('#box-1').click(function() {\n               $( \"#box-1\" ).effect( \"shake\", {\n                  times: 10,\n                  distance: 100\n               }, 3000, function() {\n                  $( this ).css( \"background\", \"#cccccc\" );\n               });\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"box-1\">Click On Me&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>effectexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h3>Effect &#8211; explode</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang=\"en\">\n   &lt;head>\n      &lt;meta charset=\"utf-8\">\n      &lt;title>jQuery UI effect Example&lt;/title>\n      &lt;link href=\"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel=\"stylesheet\">\n      &lt;script src=\"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src=\"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         #box-2 {\n            height: 100px;\n            width: 100px;\n            background: #b9cd6d;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(document).ready(function() {\n            $('#box-2').click(function() {\n               $( \"#box-2\" ).effect({\n                  effect: \"explode\",\n                  easing: \"easeInExpo\",\n                  pieces: 4,\n                  duration: 5000\n               });\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id=\"box-2\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>effectexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss the&nbsp;effect()&nbsp;method, which is one of the methods used to manage jQueryUI visual effects.&nbsp;effect()&nbsp;method applies an animation effect to the elements without having to show or hide it. Syntax The effect() method has the following syntax − Sr.No. Parameter &amp; Description 1 effectThis is a String indicating which effect to use for the transition. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/83"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=83"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/83/revisions"}],"predecessor-version":[{"id":106,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/83/revisions/106"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=83"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=83"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=83"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":82,"date":"2020-07-20T17:50:33","date_gmt":"2020-07-20T17:50:33","guid":{"rendered":"http://javascript.foobrdigital.com/?p=82"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"hide","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/hide/","title":{"rendered":"Hide"},"content":{"rendered":"\n<p>This chapter will discuss the&nbsp;<strong>hide()</strong>&nbsp;method, which is one of the methods used to manage jQueryUI visual effects.&nbsp;<em>effect()</em>&nbsp;method applies an animation effect to hide elements.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The <strong>hide()</strong> method has the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.hide( effect &#91;, options ] &#91;, duration ] &#91;, complete ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>effect</strong>This is a String indicating which effect to use for the transition.</td></tr><tr><td>2</td><td><strong>options</strong>This is of type Object and indicates effect-specific settings and easing. Additionally, each effect has its own set of options that can be specified common across multiple effects described in the table <em>jQueryUI Effects</em>.</td></tr><tr><td>3</td><td><strong>duration</strong>This is of type Number or String, and indicates the number of milliseconds of the effect. Its default value is&nbsp;<em>400</em>.</td></tr><tr><td>4</td><td><strong>complete</strong>This is a callback method called for each element when the effect is complete for this element.</td></tr></tbody></table></figure>\n\n\n\n<h2>jQueryUI Effects</h2>\n\n\n\n<p>The following table describes the various effects that can be used with the&nbsp;<em>hide()</em>&nbsp;method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Effect &amp; Description</th></tr><tr><td>1</td><td><strong>blind</strong>Shows or hides the element in the manner of a window blind: by moving the bottom edge down or up, or the right edge to the right or left, depending upon the specified&nbsp;<em>direction</em>&nbsp;and&nbsp;<em>mode</em>.</td></tr><tr><td>2</td><td><strong>bounce</strong>Causes the element to appear to bounce in the vertical or horizontal direction, optionally showing or hiding the element.</td></tr><tr><td>3</td><td><strong>clip</strong>Shows or hides the element by moving opposite borders of the element together until they meet in the middle, or vice versa.</td></tr><tr><td>4</td><td><strong>drop</strong>Shows or hides the element by making it appear to drop onto, or drop off of, the page.</td></tr><tr><td>5</td><td><strong>explode</strong>Shows or hides the element by splitting it into multiple pieces that move in radial directions as if imploding into, or exploding from, the page.</td></tr><tr><td>6</td><td><strong>fade</strong>Shows or hides the element by adjusting its opacity. This is the same as the core fade effects, but without options.</td></tr><tr><td>7</td><td><strong>fold</strong>Shows or hides the element by adjusting opposite borders in or out, and then doing the same for the other set of borders.</td></tr><tr><td>8</td><td><strong>highlight</strong>Calls attention to the element by momentarily changing its background color while showing or hiding the element.</td></tr><tr><td>9</td><td><strong>puff</strong>Expands or contracts the element in place while adjusting its opacity.</td></tr><tr><td>10</td><td><strong>pulsate</strong>Adjusts the opacity of the element on and off before ensuring that the element is shown or hidden as specified.</td></tr><tr><td>11</td><td><strong>scale</strong>Expands or contracts the element by a specified percentage.</td></tr><tr><td>12</td><td><strong>shake</strong>Shakes the element back and forth, either vertically or horizontally.</td></tr><tr><td>14</td><td><strong>size</strong>Resizes the element to a specified width and height. Similar to scale except for how the target size is specified.</td></tr><tr><td>15</td><td><strong>slide</strong>Moves the element such that it appears to slide onto or off of the page.</td></tr><tr><td>16</td><td><strong>transfer</strong>Animates a transient outline element that makes the element appear to transfer to another element. The appearance of the outline element must be defined via CSS rules for the ui-effects-transfer class, or the class specified as an option.</td></tr></tbody></table></figure>\n\n\n\n<h2>Examples</h2>\n\n\n\n<p>The following examples demonstrates the use of&nbsp;<em>hide()</em>&nbsp;method with different effect listed in the above table.</p>\n\n\n\n<h3>Effect &#8211; Blind</h3>\n\n\n\n<p>The following example shows the use of <em>hide()</em> method with <em>blind</em> effect. Click on the button <em>Blind Effect Hide</em> to see the blind effect before the element hides.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI hide Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .toggler { width: 500px; height: 200px; }\n            #button { padding: .5em 1em; text-decoration: none; }\n            #effect { width: 240px; height: 135px; padding: 0.4em; position: relative; }\n            #effect h3 { margin: 0; padding: 0.4em; text-align: center; }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            function runEffect() {\n               $( \"#effect\" ).hide( \"blind\", {times: 10, distance: 100}, 1000, callback );\n            };\n            // callback function to bring a hidden box back\n            function callback() {\n               setTimeout(function() {\n                  $( \"#effect\" ).removeAttr( \"style\" ).hide().fadeIn();\n               }, 1000 );\n            };\n            \n            $( \"#button\" ).click(function() {\n               runEffect();\n               return false;\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"toggler\">\n         &lt;div id = \"effect\" class = \"ui-widget-content ui-corner-all\">\n            &lt;h3 class = \"ui-widget-header ui-corner-all\">Hide&lt;/h3>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n      &lt;a href = \"#\" id = \"button\" class = \"ui-state-default ui-corner-all\">Blind Effect Hide&lt;/a>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>hideexample.htm</strong> and open it in a standard browser which supports javascript,</p>\n\n\n\n<h3>Effect &#8211; Shake</h3>\n\n\n\n<p>The following example shows the use of <em>shake()</em> method with <em>blind</em> effect. Click on the button <em>Shake Effect Hide</em> to see the shake effect before the element hides.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI hide Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .toggler-1 { width: 500px; height: 200px; }\n            #button-1 { padding: .5em 1em; text-decoration: none; }\n            #effect-1 { width: 240px; height: 135px; padding: 0.4em; position: relative; }\n            #effect-1 h3 { margin: 0; padding: 0.4em; text-align: center; }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            function runEffect() {\n               $( \"#effect-1\" ).hide( \"shake\", {times: 10, distance: 100}, 1000, callback );\n            };\n            \n            // callback function to bring a hidden box back\n            function callback() {\n               setTimeout(function() {\n                  $( \"#effect-1\" ).removeAttr( \"style\" ).hide().fadeIn();\n               }, 1000 );\n            };\n            \n            // set effect from select menu value\n            $( \"#button-1\" ).click(function() {\n               runEffect();\n               return false;\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"toggler-1\">\n         &lt;div id = \"effect-1\" class = \"ui-widget-content ui-corner-all\">\n            &lt;h3 class = \"ui-widget-header ui-corner-all\">Hide&lt;/h3>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n      &lt;a href = \"#\" id = \"button-1\" class = \"ui-state-default ui-corner-all\">Shake Effect Hide&lt;/a>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>hideexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss the&nbsp;hide()&nbsp;method, which is one of the methods used to manage jQueryUI visual effects.&nbsp;effect()&nbsp;method applies an animation effect to hide elements. Syntax The hide() method has the following syntax − Sr.No. Parameter &amp; Description 1 effectThis is a String indicating which effect to use for the transition. 2 optionsThis is of type Object and [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/82"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=82"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/82/revisions"}],"predecessor-version":[{"id":107,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/82/revisions/107"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=82"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=82"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=82"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":113,"date":"2020-07-20T17:51:43","date_gmt":"2020-07-20T17:51:43","guid":{"rendered":"http://javascript.foobrdigital.com/?p=113"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"remove-class","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/remove-class/","title":{"rendered":"Remove Class"},"content":{"rendered":"\n<p>This chapter will discuss the&nbsp;<strong>removeClass()</strong>&nbsp;method, wh ich is one of the methods used to manage jQueryUI visual effects.&nbsp;<em>removeClass()</em>&nbsp;method removes the applied classes from the elements.</p>\n\n\n\n<p><em>removeClass()</em>&nbsp;method removes the specified classes to the matched elements while animating all style changes.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<h3>Added In Version 1.0 of jQueryUI</h3>\n\n\n\n<p>The <strong>removeClass()</strong> method has its basic syntax as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.removeClass( className &#91;, duration ] &#91;, easing ] &#91;, complete ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>className</strong>This is a String containing one or more CSS classes (separated by spaces) to be removed.</td></tr><tr><td>2</td><td><strong>duration</strong>This is of type Number or String, and indicates the number of milliseconds of the effect. A value of 0 takes the element directly in the new style, without progress. Its default value is&nbsp;<em>400</em>.</td></tr><tr><td>3</td><td><strong>easing</strong>This is of type String and indicates the way to progress in the effect. Its default value is <em>swing</em>. Possible values are here.</td></tr><tr><td>4</td><td><strong>complete</strong>This is a callback method called for each element when the effect is complete for this element.</td></tr></tbody></table></figure>\n\n\n\n<h3>Added In Version 1.9 of jQueryUI</h3>\n\n\n\n<p>With version 1.9, this method now supports a <em>children</em> option, which will also animate descendant elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.removeClass( className &#91;, options ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>className</strong>This is a String containing one or more CSS classes (separated by spaces).</td></tr><tr><td>2</td><td><strong>options</strong>This represents all animation settings. All properties are optional. Possible values are −<strong>duration</strong> − This is of type Number or String, and indicates the number of milliseconds of the effect. A value of 0 takes the element directly in the new style, without progress. Its default value is <em>400</em>.<strong>easing</strong> − This is of type String and indicates the way to progress in the effect. Its default value is <em>swing</em>. Possible values are here.<strong>complete</strong> − This is a callback method called for each element when the effect is complete for this element.<strong>children</strong> − This is of type Boolean and represents whether the animation should additionally be applied to all descendants of the matched elements. Its default value is <em>false</em>.<strong>queue</strong> − This is of type Boolean or String and represents whether to place the animation in the effects queue. Its default value is <em>true</em>.</td></tr></tbody></table></figure>\n\n\n\n<h2>Examples</h2>\n\n\n\n<p>The following example demonstrates the use of&nbsp;<em>removeClass()</em>&nbsp;methods.</p>\n\n\n\n<h3>Passing single class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI removeClass Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;style>\n         .elemClass {\n            width: 200px;\n            height: 50px;\n            background-color: #b9cd6d;\n         }\n         .myClass {\n            font-size: 40px; background-color: #ccc; color: white;\n         }\n      &lt;/style>\n      \n      &lt;script type = \"text/javascript\">\n         $(document).ready(function() {\n            $('.button').click(function() {\n               if (this.id == \"add\") {\n                  $('#animTarget').addClass(\"myClass\", \"fast\")\n               } else {\n               $('#animTarget').removeClass(\"myClass\", \"fast\")\n               }\n            })\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = animTarget class = \"elemClass\">\n         Hello!\n      &lt;/div>\n      \n      &lt;button class = \"button\" id = \"add\">Add Class&lt;/button>\n      &lt;button class = \"button\" id = \"remove\">Remove Class&lt;/button>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>removeclassexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss the&nbsp;removeClass()&nbsp;method, wh ich is one of the methods used to manage jQueryUI visual effects.&nbsp;removeClass()&nbsp;method removes the applied classes from the elements. removeClass()&nbsp;method removes the specified classes to the matched elements while animating all style changes. Syntax Added In Version 1.0 of jQueryUI The removeClass() method has its basic syntax as follows − Sr.No. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/113"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=113"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/113/revisions"}],"predecessor-version":[{"id":114,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/113/revisions/114"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=113"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=113"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=113"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":112,"date":"2020-07-20T17:53:02","date_gmt":"2020-07-20T17:53:02","guid":{"rendered":"http://javascript.foobrdigital.com/?p=112"},"modified":"2020-12-07T08:55:12","modified_gmt":"2020-12-07T08:55:12","slug":"show","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/show/","title":{"rendered":"Show"},"content":{"rendered":"\n<p>This chapter will discuss the&nbsp;<strong>show()</strong>&nbsp;method, which is one of the methods used to manage jQueryUI visual effects.&nbsp;<em>show()</em>&nbsp;method displays an item using the indicated effect.</p>\n\n\n\n<p><em>show()</em>&nbsp;method toggles the visibility of the wrapped elements using the specified effect.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The <strong>show()</strong> method has the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.show( effect &#91;, options ] &#91;, duration ] &#91;, complete ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>effect</strong>This is a String indicating which effect to use for the transition.This is a String and represents the effect to use when adjusting the element visibility. The effects are listed in the table below.</td></tr><tr><td>2</td><td><strong>options</strong>This is of type Object and indicates effect-specific settings and easing. Additionally, each effect has its own set of options that can be specified common across multiple effects described in the table <em>jQueryUI Effects</em>.</td></tr><tr><td>3</td><td><strong>duration</strong>This is of type Number or String and determines how long the animation will run. Its default value is&nbsp;<em>400</em>.</td></tr><tr><td>4</td><td><strong>complete</strong>This is a callback method called for each element when the effect is complete for this element.</td></tr></tbody></table></figure>\n\n\n\n<h2>jQueryUI Effects</h2>\n\n\n\n<p>The following table describes the various effects that can be used with the effects() method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Effect &amp; Description</th></tr><tr><td>1</td><td><strong>blind</strong>Shows or hides the element in the manner of a window blind: by moving the bottom edge down or up, or the right edge to the right or left, depending upon the specified&nbsp;<em>direction</em>&nbsp;and&nbsp;<em>mode</em>.</td></tr><tr><td>2</td><td><strong>bounce</strong>Causes the element to appear to bounce in the vertical or horizontal direction, optionally showing or hiding the element.</td></tr><tr><td>3</td><td><strong>clip</strong>Shows or hides the element by moving opposite borders of the element together until they meet in the middle, or vice versa.</td></tr><tr><td>4</td><td><strong>drop</strong>Shows or hides the element by making it appear to drop onto, or drop off of, the page.</td></tr><tr><td>5</td><td><strong>explode</strong>Shows or hides the element by splitting it into multiple pieces that move in radial directions as if imploding into, or exploding from, the page.</td></tr><tr><td>6</td><td><strong>fade</strong>Shows or hides the element by adjusting its opacity. This is the same as the core fade effects, but without options.</td></tr><tr><td>7</td><td><strong>fold</strong>Shows or hides the element by adjusting opposite borders in or out, and then doing the same for the other set of borders.</td></tr><tr><td>8</td><td><strong>highlight</strong>Calls attention to the element by momentarily changing its background color while showing or hiding the element.</td></tr><tr><td>9</td><td><strong>puff</strong>Expands or contracts the element in place while adjusting its opacity.</td></tr><tr><td>10</td><td><strong>pulsate</strong>Adjusts the opacity of the element on and off before ensuring that the element is shown or hidden as specified.</td></tr><tr><td>11</td><td><strong>scale</strong>Expands or contracts the element by a specified percentage.</td></tr><tr><td>12</td><td><strong>shake</strong>Shakes the element back and forth, either vertically or horizontally.</td></tr><tr><td>13</td><td><strong>size</strong>Resizes the element to a specified width and height. Similar to scale except for how the target size is specified.</td></tr><tr><td>14</td><td><strong>slide</strong>Moves the element such that it appears to slide onto or off of the page.</td></tr><tr><td>15</td><td><strong>transfer</strong>Animates a transient outline element that makes the element appear to transfer to another element. The appearance of the outline element must be defined via CSS rules for the ui-effects-transfer class, or the class specified as an option.</td></tr></tbody></table></figure>\n\n\n\n<h2>Examples</h2>\n\n\n\n<p>The following example demonstrates the use of&nbsp;<em>show()</em>&nbsp;method.</p>\n\n\n\n<h3>Show with Shake Effect</h3>\n\n\n\n<p>The following examples demonstrates <em>show()</em> method with <em>shake</em> effect.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI show Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .toggler { width: 500px; height: 200px; }\n         #button { padding: .5em 1em; text-decoration: none; }\n         #effect { width: 240px; height: 135px; padding: 0.4em; position: relative; }\n         #effect h3 { margin: 0; padding: 0.4em; text-align: center; }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            // run the currently selected effect\n            function runEffect() {\n               // run the effect\n               $( \"#effect\" ).show( \"shake\", {times: 10,distance: 100}, 1000, callback);\n            };\n            \n            //callback function to bring a hidden box back\n            function callback() {\n               setTimeout(function() {\n                  $( \"#effect:visible\" ).removeAttr( \"style\" ).fadeOut();\n               }, 1000 );\n            };\n            $( \"#button\" ).click(function() {\n               runEffect();\n               return false;\n            });\n            $( \"#effect\" ).hide();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"toggler\">\n         &lt;div id = \"effect\" class = \"ui-widget-content ui-corner-all\">\n            &lt;h3 class = \"ui-widget-header ui-corner-all\">Show&lt;/h3>\n            &lt;p>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n      &lt;a href = \"#\" id = \"button\" class = \"ui-state-default ui-corner-all\">Run Effect&lt;/a>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>showexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<p>Click on the&nbsp;<em>Add Class</em>&nbsp;and&nbsp;<em>Remove Class</em>&nbsp;buttons to see the effect of classes on the box.</p>\n\n\n\n<h3>Show with Blind Effect</h3>\n\n\n\n<p>The following example demonstrates the use of <em>show()</em> method with <em>blind</em> effect.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI show Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .toggler { width: 500px; height: 200px; }\n            #button { padding: .5em 1em; text-decoration: none; }\n            #effect { width: 240px; height: 135px; padding: 0.4em; position: relative; }\n            #effect h3 { margin: 0; padding: 0.4em; text-align: center; }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            // run the currently selected effect\n            function runEffect() {\n               // run the effect\n               $( \"#effect\" ).show( \"blind\", {times: 10,distance: 100}, 1000, callback);\n            };\n            \n            //callback function to bring a hidden box back\n            function callback() {\n               setTimeout(function() {\n                  $( \"#effect:visible\" ).removeAttr( \"style\" ).fadeOut();\n               }, 1000 );\n            };\n            \n            // set effect from select menu value\n            $( \"#button\" ).click(function() {\n               runEffect();\n               return false;\n            });\n            $( \"#effect\" ).hide();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"toggler\">\n         &lt;div id = \"effect\" class = \"ui-widget-content ui-corner-all\">\n            &lt;h3 class = \"ui-widget-header ui-corner-all\">Show&lt;/h3>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n      &lt;a href = \"#\" id = \"button\" class = \"ui-state-default ui-corner-all\">Run Effect&lt;/a>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>showexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss the&nbsp;show()&nbsp;method, which is one of the methods used to manage jQueryUI visual effects.&nbsp;show()&nbsp;method displays an item using the indicated effect. show()&nbsp;method toggles the visibility of the wrapped elements using the specified effect. Syntax The show() method has the following syntax − Sr.No. Parameter &amp; Description 1 effectThis is a String indicating which effect [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/112"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=112"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/112/revisions"}],"predecessor-version":[{"id":115,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/112/revisions/115"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=112"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=112"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=112"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":111,"date":"2020-07-20T17:53:49","date_gmt":"2020-07-20T17:53:49","guid":{"rendered":"http://javascript.foobrdigital.com/?p=111"},"modified":"2020-12-07T08:55:11","modified_gmt":"2020-12-07T08:55:11","slug":"switch-class","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/switch-class/","title":{"rendered":"Switch Class"},"content":{"rendered":"\n<p>This chapter will discuss the&nbsp;<strong>switchClass()</strong>&nbsp;method, which is a useful new class for manipulation.&nbsp;<em>switchClass()</em>&nbsp;method move from one CSS one CSS class to another, animating the transition from one state to the other.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<h3>Added In Version 1.0 of jQueryUI</h3>\n\n\n\n<p>The&nbsp;<strong>switchClass()</strong>&nbsp;method has its basic syntax as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.switchClass( removeClassName, addClassName &#91;, duration ] &#91;, easing ] &#91;, complete ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>removeClassName</strong>This is a String and represents the CSS class name, or space-delimited list of class names, to be removed.</td></tr><tr><td>2</td><td><strong>addClassName</strong>This is of type String and represents one or more class names (space separated) to be added to the class attribute of each matched element.</td></tr><tr><td>3</td><td><strong>duration</strong>This is of type Number or String and optionally provides one of&nbsp;<em>slow, normal, fast,</em>&nbsp;or the duration of the effect in milliseconds. If omitted, the animate() method determines the default. Its default value is&nbsp;<em>400</em>.</td></tr><tr><td>4</td><td><strong>easing</strong>The name of the easing function to be passed to the animate() method.</td></tr><tr><td>5</td><td><strong>complete</strong>This is a callback method called for each element when the effect is complete for this element.</td></tr></tbody></table></figure>\n\n\n\n<h3>Added In Version 1.9 of jQueryUI</h3>\n\n\n\n<p>With version 1.9, this method now supports a&nbsp;<em>children</em>&nbsp;option, which will also animate descendant elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.switchClass( removeClassName, addClassName &#91;, options ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>removeClassName</strong>This is a String and represents the CSS class name, or space-delimited list of class names, to be removed.</td></tr><tr><td>2</td><td><strong>addClassName</strong>This is of type String and represents one or more class names (space separated) to be added to the class attribute of each matched element.</td></tr><tr><td>3</td><td><strong>options</strong>This represents all animation settings. All properties are optional. Possible values are −<strong>duration</strong> − A string or number determining how long the animation will run.. Its default value is <em>400</em>.<strong>easing</strong> − A string indicating which easing function to use for the transition. Its default value is <em>swing</em>. Possible values are here.<strong>complete</strong> − This is a callback method called for each element when the effect is complete for this element.<strong>children</strong> − This is a Boolean and represents whether the animation should additionally be applied to all descendants of the matched elements.<strong>queue</strong> − This is of type String/Boolean indicating whether to place the animation in the effects queue..</td></tr></tbody></table></figure>\n\n\n\n<h2>Examples</h2>\n\n\n\n<p>The following example demonstrates the use of&nbsp;<em>switchClass()</em>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Switch Class Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .LargeClass {\n            font-family: Arial;\n            font-size: large;\n            font-weight: bold;\n            color: Red;\n         }\n         .NormalClass {\n            font-family: Arial;\n            font-size: small;\n            font-weight: bold;\n            color: Blue;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            $('#btnSwitch').click(function() {\n               $(\".NormalClass\").switchClass(\"NormalClass\",\"LargeClass\",'fast');\n               $(\".LargeClass\").switchClass(\"LargeClass\",\"NormalClass\",'fast');\n               return false;\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"NormalClass\">\n         Tutorials Point Rocks!!!\n      &lt;/div>\n      &lt;div class = \"NormalClass\">\n         Welcome to Tutorials Point!!!\n      &lt;/div>\n      &lt;br />\n      &lt;input type = \"button\" id = \"btnSwitch\" value = \"Switch Class\" />\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>switchclassexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,&nbsp;</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss the&nbsp;switchClass()&nbsp;method, which is a useful new class for manipulation.&nbsp;switchClass()&nbsp;method move from one CSS one CSS class to another, animating the transition from one state to the other. Syntax Added In Version 1.0 of jQueryUI The&nbsp;switchClass()&nbsp;method has its basic syntax as follows − Sr.No. Parameter &amp; Description 1 removeClassNameThis is a String [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/111"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=111"}],"version-history":[{"count":2,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/111/revisions"}],"predecessor-version":[{"id":265,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/111/revisions/265"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=111"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=111"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=111"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":110,"date":"2020-07-20T17:54:53","date_gmt":"2020-07-20T17:54:53","guid":{"rendered":"http://javascript.foobrdigital.com/?p=110"},"modified":"2020-12-07T08:55:11","modified_gmt":"2020-12-07T08:55:11","slug":"toggle","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/toggle/","title":{"rendered":"Toggle"},"content":{"rendered":"\n<p>This chapter will discuss the&nbsp;<strong>toggle()</strong>&nbsp;method of jQueryUI visual effects.&nbsp;<em>toggle()</em>&nbsp;method toggles the show () or hide () methods depending on whether the element is hidden or not.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The <strong>toggle()</strong> method has the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.toggle( effect &#91;, options ] &#91;, duration ] &#91;, complete ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>effect</strong>This is a String indicating which effect to use for the transition.This is a String and represents the effect to use when adjusting the element visibility. The effects are listed in the table below.</td></tr><tr><td>2</td><td><strong>options</strong>This is of type Object and indicates effect-specific settings and easing. Additionally, each effect has its own set of options that can be specified common across multiple effects described in the table <em>jQueryUI Effects</em>.</td></tr><tr><td>3</td><td><strong>duration</strong>This is of type Number or String and determines how long the animation will run. Its default value is&nbsp;<em>400</em>.</td></tr><tr><td>4</td><td><strong>complete</strong>This is a callback method called for each element when the effect is complete for this element.</td></tr></tbody></table></figure>\n\n\n\n<h2>jQueryUI Effects</h2>\n\n\n\n<p>The following table describes the various effects that can be used with the effects() method −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Effect &amp; Description</th></tr><tr><td>1</td><td><strong>blind</strong>Shows or hides the element in the manner of a window blind: by moving the bottom edge down or up, or the right edge to the right or left, depending upon the specified&nbsp;<em>direction</em>&nbsp;and&nbsp;<em>mode</em>.</td></tr><tr><td>2</td><td><strong>bounce</strong>Causes the element to appear to bounce in the vertical or horizontal direction, optionally showing or hiding the element.</td></tr><tr><td>3</td><td><strong>clip</strong>Shows or hides the element by moving opposite borders of the element together until they meet in the middle, or vice versa.</td></tr><tr><td>4</td><td><strong>drop</strong>Shows or hides the element by making it appear to drop onto, or drop off of, the page.</td></tr><tr><td>5</td><td><strong>explode</strong>Shows or hides the element by splitting it into multiple pieces that move in radial directions as if imploding into, or exploding from, the page.</td></tr><tr><td>6</td><td><strong>fade</strong>Shows or hides the element by adjusting its opacity. This is the same as the core fade effects, but without options.</td></tr><tr><td>7</td><td><strong>fold</strong>Shows or hides the element by adjusting opposite borders in or out, and then doing the same for the other set of borders.</td></tr><tr><td>8</td><td><strong>highlight</strong>Calls attention to the element by momentarily changing its background color while showing or hiding the element.</td></tr><tr><td>9</td><td><strong>puff</strong>Expands or contracts the element in place while adjusting its opacity.</td></tr><tr><td>10</td><td><strong>pulsate</strong>Adjusts the opacity of the element on and off before ensuring that the element is shown or hidden as specified.</td></tr><tr><td>11</td><td><strong>scale</strong>Expands or contracts the element by a specified percentage.</td></tr><tr><td>12</td><td><strong>shake</strong>Shakes the element back and forth, either vertically or horizontally.</td></tr><tr><td>13</td><td><strong>size</strong>Resizes the element to a specified width and height. Similar to scale except for how the target size is specified.</td></tr><tr><td>14</td><td><strong>slide</strong>Moves the element such that it appears to slide onto or off of the page.</td></tr><tr><td>15</td><td><strong>transfer</strong>Animates a transient outline element that makes the element appear to transfer to another element. The appearance of the outline element must be defined via CSS rules for the ui-effects-transfer class, or the class specified as an option.</td></tr></tbody></table></figure>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>The following example demonstrates the use of <em>toggle()</em> method with different effect listed in the above table.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Toggle Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .toggler { width: 500px; height: 200px; }\n         #button { padding: .5em 1em; text-decoration: none; }\n         #effect { width: 240px; height: 135px; padding: 0.4em; position: relative; }\n         #effect h3 { margin: 0; padding: 0.4em; text-align: center; }\n      &lt;/style>\n      \n      &lt;script>\n         $(function() {\n            function runEffect() {\n               $( \"#effect\" ).toggle('explode', 300);\n            };\n            $( \"#button\" ).click(function() {\n               runEffect();\n               return false;\n            });\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"toggler\">\n         &lt;div id = \"effect\" class = \"ui-widget-content ui-corner-all\">\n            &lt;h3 class = \"ui-widget-header ui-corner-all\">Toggle&lt;/h3>\n            &lt;p>\n               Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore.\n            &lt;/p>\n         &lt;/div>\n      &lt;/div>\n      &lt;a href = \"#\" id = \"button\" class = \"ui-state-default ui-corner-all\">Toggle&lt;/a>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>toggleexample.htm</strong>l and open it in a standard browser which supports javascript,</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss the&nbsp;toggle()&nbsp;method of jQueryUI visual effects.&nbsp;toggle()&nbsp;method toggles the show () or hide () methods depending on whether the element is hidden or not. Syntax The toggle() method has the following syntax − Sr.No. Parameter &amp; Description 1 effectThis is a String indicating which effect to use for the transition.This is a String and represents [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/110"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=110"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/110/revisions"}],"predecessor-version":[{"id":117,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/110/revisions/117"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=110"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=110"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=110"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":109,"date":"2020-07-20T17:55:40","date_gmt":"2020-07-20T17:55:40","guid":{"rendered":"http://javascript.foobrdigital.com/?p=109"},"modified":"2020-12-07T08:55:11","modified_gmt":"2020-12-07T08:55:11","slug":"toggle-class","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/toggle-class/","title":{"rendered":"Toggle Class"},"content":{"rendered":"\n<p>This chapter will discuss the&nbsp;<strong>toggleClass()</strong>&nbsp;method, which is a useful new class for manipulation.&nbsp;<em>toggleClass()</em>&nbsp;method adds or removes one or more classes from each element in the set of matched elements.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<h3>Added in Version 1.0 of jQueryUI</h3>\n\n\n\n<p>The <strong>toggleClass()</strong> method has its basic syntax as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.toggleClass( className &#91;, switch ] &#91;, duration ] &#91;, easing ] &#91;, complete ] )</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>className</strong>This is a String and represents the CSS class name, or space-delimited list of class names, to be added, removed, or toggled.</td></tr><tr><td>2</td><td><strong>switch</strong>This is of type Boolean and if specified, forces the&nbsp;<em>toggleClass()</em>&nbsp;method to add the class if&nbsp;<em>true</em>, or to remove the class if&nbsp;<em>false</em>.</td></tr><tr><td>3</td><td><strong>duration</strong>This is of type Number or String and optionally provides one of&nbsp;<em>slow, normal, fast,</em>&nbsp;or the duration of the effect in milliseconds. If omitted, the animate() method determines the default. Its default value is&nbsp;<em>400</em>.</td></tr><tr><td>4</td><td><strong>easing</strong>The name of the easing function to be passed to the animate() method.</td></tr><tr><td>5</td><td><strong>complete</strong>This is a callback method called for each element when the effect is complete for this element.</td></tr></tbody></table></figure>\n\n\n\n<h3>Added In Version 1.9 of jQueryUI</h3>\n\n\n\n<p>With version 1.9, this method now supports a&nbsp;<em>children</em>&nbsp;option, which will also animate descendant elements.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">.toggleClass( className [, switch ] [, options ] )</pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Parameter &amp; Description</th></tr><tr><td>1</td><td><strong>className</strong>This is a String and represents the CSS class name, or space-delimited list of class names, to be added, removed, or toggled.</td></tr><tr><td>2</td><td><strong>switch</strong>This is of type Boolean and if specified, forces the&nbsp;<em>toggleClass()</em>&nbsp;method to add the class if&nbsp;<em>true</em>, or to remove the class if&nbsp;<em>false</em>.</td></tr><tr><td>3</td><td><strong>options</strong>This represents all animation settings. All properties are optional. Possible values are −<strong>duration</strong> − A string or number determining how long the animation will run.. Its default value is <em>400</em>.<strong>easing</strong> − A string indicating which easing function to use for the transition. Its default value is <em>swing</em>. Possible values are here.<strong>complete</strong> − This is a callback method called for each element when the effect is complete for this element.<strong>children</strong> − This is a Boolean and represents whether the animation should additionally be applied to all descendants of the matched elements.<strong>queue</strong> − This is of type String/Boolean indicating whether to place the animation in the effects queue.</td></tr></tbody></table></figure>\n\n\n\n<h2>Examples</h2>\n\n\n\n<p>The following example demonstrates the use of <em>toggleClass()</em> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html>\n&lt;html lang = \"en\">\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Switch Class Example&lt;/title>\n      &lt;link href = \"https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css\"\n         rel = \"stylesheet\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;!-- CSS -->\n      &lt;style>\n         .class1 {\n            border-width : 10px;\n            border-color : grey;\n            background-color : #cedc98;\n            color : black;\n         }\n      &lt;/style>\n      \n      &lt;script>\n         function toggle () {\n            $(\"#para\").toggleClass (\"class1\", 1000);\n         }\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;button onclick = toggle()> Toggle &lt;/button>\n      &lt;p id = \"para\" style = border-style:solid> Welcome to Tutorials Point &lt;/p>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>toggleclassexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript,</p>\n","protected":false},"excerpt":{"rendered":"<p>This chapter will discuss the&nbsp;toggleClass()&nbsp;method, which is a useful new class for manipulation.&nbsp;toggleClass()&nbsp;method adds or removes one or more classes from each element in the set of matched elements. Syntax Added in Version 1.0 of jQueryUI The toggleClass() method has its basic syntax as follows − Sr.No. Parameter &amp; Description 1 classNameThis is a String and represents [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/109"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=109"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/109/revisions"}],"predecessor-version":[{"id":118,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/109/revisions/118"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=109"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=109"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=109"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":108,"date":"2020-07-20T18:00:15","date_gmt":"2020-07-20T18:00:15","guid":{"rendered":"http://javascript.foobrdigital.com/?p=108"},"modified":"2020-12-07T08:55:11","modified_gmt":"2020-12-07T08:55:11","slug":"widget-factory","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/widget-factory/","title":{"rendered":"Widget Factory"},"content":{"rendered":"\n<p>Earlier, the only way to write custom controls in jQuery was to extend the&nbsp;<em>$.fn</em>&nbsp;namespace. This works well for simple widgets. Suppose you build more stateful widgets, it quickly becomes cumbersome. To aid in the process of building widgets, Widget Factory was introduced in the jQuery UI, which removes most of the boilerplate that is typically associated with managing a widget.</p>\n\n\n\n<p>The jQueryUI Widget Factory is simply a function ($.widget) that takes a string name and an object as arguments and creates a jQuery plugin and a &#8220;Class&#8221; to encapsulate its functionality.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<p>The following is the syntax of jQueryUI Widget Factory method −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>jQuery.widget( name &#91;, base ], prototype )</code></pre>\n\n\n\n<p><strong>name</strong>&nbsp;− It is a string containing a&nbsp;<em>namespace</em>&nbsp;and the&nbsp;<em>widget name</em>&nbsp;(separated by a dot) of the widget to create.</p>\n\n\n\n<p><strong>base</strong>&nbsp;− The base widget to inherit from. This must be a constructor that can be instantiated with the `new` keyword. Defaults to&nbsp;<em>jQuery.Widget</em>.</p>\n\n\n\n<p><strong>prototype</strong>&nbsp;− The object to use as a prototype for the widget to inherit from. For instance, jQuery UI has a &#8220;mouse&#8221; plugin on which the rest of the interaction plugins are based. In order to achieve this,&nbsp;<em>draggable, droppable,</em>&nbsp;etc. all inherit from the mouse plugin like so: jQuery.widget( &#8220;ui.draggable&#8221;, $.ui.mouse, {&#8230;} ); If you do not supply this argument, the widget will inherit directly from the &#8220;base widget,&#8221; jQuery.Widget (note the difference between lowercase &#8220;w&#8221; jQuery.widget and uppercase &#8220;W&#8221; jQuery.Widget).</p>\n\n\n\n<h2>Base Widget</h2>\n\n\n\n<p>Base widget is the widget used by the widget factory.</p>\n\n\n\n<h3>Options</h3>\n\n\n\n<p>The following table lists the different&nbsp;<em>options</em>&nbsp;that can be used with the base widget −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Option &amp; Description</th></tr><tr><td>1</td><td>disabledhideThis option disables the widget if set to <em>true</em>. By default its value is <strong>false</strong>.</td></tr><tr><td>2</td><td>hideThis option determines how to animate the hiding of the element. By default its value is <strong>null</strong>.</td></tr><tr><td>3</td><td>showThis option determines how to animate the showing of the element. By default its value is <strong>null</strong>.</td></tr></tbody></table></figure>\n\n\n\n<h3>Methods</h3>\n\n\n\n<p>The following table lists the different&nbsp;<em>methods</em>&nbsp;that can be used with the base widget −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Action &amp; Description</th></tr><tr><td>1</td><td>_create()This method is the widget&#8217;s constructor. There are no parameters, but <em>this.element</em> and <em>this.options</em> are already set.</td></tr><tr><td>2</td><td>_delay( fn [, delay ] )This method invokes the provided function after a specified delay. Returns the timeout ID for use with <em>clearTimeout()</em>.</td></tr><tr><td>3</td><td>_destroy()The public destroy() method cleans up all common data, events, etc. and then delegates out to this <em>_destroy()</em> method for custom, widget-specific, cleanup.</td></tr><tr><td>4</td><td>_focusable( element )This method sets up element to apply the <em>ui-state-focus</em> class on focus. The event handlers are automatically cleaned up on destroy.</td></tr><tr><td>5</td><td>_getCreateEventData()All widgets trigger the <em>create</em> event. By default, no data is provided in the event, but this method can return an object which will be passed as the create event&#8217;s data.</td></tr><tr><td>6</td><td>_getCreateOptions()This method allows the widget to define a custom method for defining options during instantiation. The user-provided options override the options returned by this method, which override the default options.</td></tr><tr><td>7</td><td>_hide( element, option [, callback ] )This method hides an element immediately, using built-in animation methods, or using custom effects. See the hide option for possible option values.</td></tr><tr><td>8</td><td>_hoverable( element )This method Sets up element to apply the ui-state-hover class on hover. The event handlers are automatically cleaned up on destroy.</td></tr><tr><td>9</td><td>_init()Any time the plugin is called with no arguments or with only an option hash, the widget is initialized; this includes when the widget is created.</td></tr><tr><td>10</td><td>_off( element, eventName )This method unbinds event handlers from the specified element(s).</td></tr><tr><td>11</td><td>_on( [suppressDisabledCheck ] [, element ], handlers )Binds event handlers to the specified element(s). Delegation is supported via selectors inside the event names, e.g., &#8220;click .foo&#8221;.</td></tr><tr><td>12</td><td>_setOption( key, value )This method is called from the _setOptions() method for each individual option. Widget state should be updated based on changes.</td></tr><tr><td>13</td><td>_setOptions( options )This method is called whenever the option() method is called, regardless of the form in which the option() method was called.</td></tr><tr><td>14</td><td>_show( element, option [, callback ] )Shows an element immediately, using built-in animation methods, or using custom effects. See the show option for possible option values.</td></tr><tr><td>15</td><td>_super( [arg ] [, &#8230; ] )This method invokes the method of the same name from the parent widget, with any specified arguments. Essentially .call().</td></tr><tr><td>16</td><td>_superApply( arguments )Invokes the method of the same name from the parent widget, with the array of arguments.</td></tr><tr><td>17</td><td>_trigger( type [, event ] [, data ] )This method triggers an event and its associated callback. The option with the name equal to type is invoked as the callback.</td></tr><tr><td>18</td><td>destroy()This method removes the widget functionality completely. This will return the element back to its pre-init state.</td></tr><tr><td>19</td><td>disable()This method disables the widget.</td></tr><tr><td>20</td><td>enable()This method enables the widget.</td></tr><tr><td>21</td><td>option( optionName )This method gets the value currently associated with the specified <em>optionName</em>.</td></tr><tr><td>22</td><td>option()This method gets an object containing key/value pairs representing the current widget options hash.</td></tr><tr><td>23</td><td>option( optionName, value )This method sets the value of the widget option associated with the specified optionName.</td></tr><tr><td>24</td><td>option( options )This method sets one or more options for the widget.</td></tr><tr><td>25</td><td>widget()This method returns a jQuery object containing the original element or other relevant generated element.</td></tr></tbody></table></figure>\n\n\n\n<h3>Events</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Event Method &amp; Description</th></tr><tr><td>1</td><td>create( event, ui )This event is triggered when a widget is created.</td></tr></tbody></table></figure>\n\n\n\n<h2>jQueryUI widget factory Lifecycle</h2>\n\n\n\n<p>The jQueryUI widget factory, provides an object-oriented way to manage the lifecycle of a widget. These lifecycle activities include −</p>\n\n\n\n<p>Creating and destroying a widget: For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$( \"#elem\" ).progressbar();</code></pre>\n\n\n\n<p>Changing widget options: For example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$( \"#elem\" ).progressbar({ value: 20 });</code></pre>\n\n\n\n<p>Making &#8220;super&#8221; calls in subclassed widgets: For example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$( \"#elem\" ).progressbar( \"value\" );\nor \n$( \"#elem\" ).progressbar( \"value\", 40 );</code></pre>\n\n\n\n<p>Event notifications: For example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$( \"#elem\" ).bind( \"progressbarchange\", function() {\n   alert( \"The value has changed!\" );\n});</code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Now let us create a custom widget in the following example. We will create a button widget. We will see how to create options, methods and events in a widget in the following examples −</p>\n\n\n\n<h3>Creating Custom Widget</h3>\n\n\n\n<p>Let us first create a simple custom widget.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Widget - Default functionality&lt;/title>\n      &lt;link rel = \"stylesheet\" href = \"//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $.widget(\"iP.myButton\", {\n               _create: function() { \n                  this._button = $(\"&lt;button>\"); \n                  this._button.text(\"My first Widget Button\");\n                  this._button.width(this.options.width) \n                  this._button.css(\"background-color\", this.options.color);    \n                  this._button.css(\"position\", \"absolute\");   \n                  this._button.css(\"left\", \"100px\");            \n                  $(this.element).append(this._button);\n               },\n            });\n            $(\"#button1\").myButton();\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"button1\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>widgetfactoryexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h3>Adding Options To Custom Widget</h3>\n\n\n\n<p>In the previous example, we used the <em>_create</em> function to create a custom control. But users generally want to customize the control by setting and modifying options. We can define an options object which stores the default values for all of the options you define. <em>_setOption</em> function is used for this purpose. It is called for each individual option that the user sets. Here we are setting <em>width</em> and <em>background-color</em> of the button.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Widget - Default functionality&lt;/title>\n      &lt;link rel = \"stylesheet\" href = \"//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $.widget(\"iP.myButton\", {\n               _create: function() { \n                  this._button = $(\"&lt;button>\"); \n                  this._button.text(\"My first Widget Button\");\n                  this._button.width(this.options.width) \n                  this._button.css(\"background-color\", this.options.color);    \n                  this._button.css(\"position\", \"absolute\");   \n                  this._button.css(\"left\", \"100px\");            \n                  $(this.element).append(this._button);\n               },\n               _setOption: function(key, value) { \n                  switch (key) { \n                     case \"width\": \n                     this._button.width(value); \n                     break; \n                     case \"color\":\n                     this._button.css(\"background-color\",value);\n                     break; \n                  } \n               },\n            });\n            $(\"#button2\").myButton();\n            $(\"#button2\").myButton(\"option\", {width:100,color:\"#cedc98\"});\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"button2\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>widgetfactoryexample.htm</strong> and open it in a standard browser which supports javascript, you must also see the following output −</p>\n\n\n\n<h3>Adding Methods to Custom Widget</h3>\n\n\n\n<p>In the following example we will add methods that the user can make use of and these are very easy to build into the framework. We will write a Move method, that shifts the button a specified horizontal distance. To make this work, we also need to set the position and left properties in the <em>_create</em> function −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this._button.css(\"position\", \"absolute\");   \nthis._button.css(\"left\", \"100px\");  </code></pre>\n\n\n\n<p>Following this, the user can now call your method in the usual jQuery UI way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this._button.css(\"position\", \"absolute\");   \nthis._button.css(\"left\", \"100px\"); </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>$(\"button3\").myButton(\"move\", 200);</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Widget - Default functionality&lt;/title>\n      &lt;link rel = \"stylesheet\" href = \"//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n\n      &lt;script>\n         $(function() {\n            $.widget(\"iP.myButton\", {\n               _create: function() { \n                  this._button = $(\"&lt;button>\"); \n                  this._button.text(\"My first Widget Button\");\n                  this._button.width(this.options.width) \n                  this._button.css(\"background-color\", this.options.color);    \n                  this._button.css(\"position\", \"absolute\");   \n                  this._button.css(\"left\", \"100px\");            \n                  $(this.element).append(this._button);\n               },\n         \n               move: function(dx) { \n                  var x = dx + parseInt(this._button.css(\"left\")); \n                  this._button.css(\"left\", x); \n                  if(x>400) { this._trigger(\"outbounds\",{},  {position:x}); }\n               }\n            });\n            $(\"#button3\").myButton();\n            $(\"#button3\").myButton(\"move\", 200);\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"button3\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file <strong>widgetfactoryexample.htm</strong> and open it in a standard browser which supports javascript, </p>\n\n\n\n<h3>Adding Events To Custom Widget</h3>\n\n\n\n<p>In this example we will demonstrate how to create an event. To create an event all you have to do is use the _trigger method. The first parameter is the name of the event, the second any standard event object you want to pass and the third any custom event object you want to pass.</p>\n\n\n\n<p>Here we are firing an event when if the button moves beyond x=400. All you have to do is to add to the move function −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(x&lt;400) { this_trigger(\"outbounds\",{}, {position:x}); }</code></pre>\n\n\n\n<p>In this case the event is called outbounds and an empty event object is passed with a custom event object that simply supplies the position as its only property.</p>\n\n\n\n<p>The entire move function is −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>move: function(dx) {\n   var x = dx + parseInt(this._button.css(\"left\")); \n   this._button.css(\"left\", x); \n   if(x&lt;400) { this._trigger(\"outbounds\",{}, {position:x}); }\n}</code></pre>\n\n\n\n<p>The user can set the event handling function by simply defining an option of the same name.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$(\"button4\").myButton(\"option\", {\n   width: 100, \n   color: \"red\",\n   outbounds:function(e,ui) {\n      alert(ui.position);}\n});</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\">\n      &lt;title>jQuery UI Widget - Default functionality&lt;/title>\n      &lt;link rel = \"stylesheet\" href = \"//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css\">\n      &lt;script src = \"https://code.jquery.com/jquery-1.10.2.js\">&lt;/script>\n      &lt;script src = \"https://code.jquery.com/ui/1.10.4/jquery-ui.js\">&lt;/script>\n      \n      &lt;script>\n         $(function() {\n            $.widget(\"iP.myButton\", {\n               _create: function() { \n                  this._button = $(\"&lt;button>\"); \n                  this._button.text(\"My first Widget Button\");\n                  this._button.width(this.options.width) \n                  this._button.css(\"background-color\", this.options.color);    \n                  this._button.css(\"position\", \"absolute\");   \n                  this._button.css(\"left\", \"100px\");            \n                  $(this.element).append(this._button);\n               },\n               move: function(dx) { \n                  var x = dx + parseInt(this._button.css(\"left\")); \n                  this._button.css(\"left\", x); \n                  if(x>400) { this._trigger(\"outbounds\",{},  {position:x}); }\n               }\n            });\n            $(\"#button4\").myButton();\n            $(\"#button4\").on(\"mybuttonoutbounds\", function(e, ui) {\n               alert(\"out\");\n            });\n            $(\"#button4\").myButton(\"move\", 500);\n         });\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = \"button4\">&lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Let us save the above code in an HTML file&nbsp;<strong>widgetfactoryexample.htm</strong>&nbsp;and open it in a standard browser which supports javascript, an alert box opens up.</p>\n","protected":false},"excerpt":{"rendered":"<p>Earlier, the only way to write custom controls in jQuery was to extend the&nbsp;$.fn&nbsp;namespace. This works well for simple widgets. Suppose you build more stateful widgets, it quickly becomes cumbersome. To aid in the process of building widgets, Widget Factory was introduced in the jQuery UI, which removes most of the boilerplate that is typically [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[6,123],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/108"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=108"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/108/revisions"}],"predecessor-version":[{"id":119,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/108/revisions/119"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=108"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=108"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=108"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]