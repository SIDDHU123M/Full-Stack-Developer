[
    {
        "id": 1033,
        "date": "2020-07-23T08:36:05",
        "date_gmt": "2020-07-23T08:36:05",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1033"
        },
        "modified": "2020-07-23T08:36:05",
        "modified_gmt": "2020-07-23T08:36:05",
        "slug": "overview-6",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-6\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>Testing is the process of checking the functionality of an application to ensure it runs as per requirements. Unit testing comes into picture at the developers\u2019 level; it is the testing of single entity (class or method). Unit testing plays a critical role in helping a software company deliver quality products to its customers.<\/p>\n\n\n\n<p>Unit testing can be done in two ways \u2212 manual testing and automated testing.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Manual Testing<\/th><th>Automated Testing<\/th><\/tr><tr><td>Executing a test cases manually without any tool support is known as manual testing.<\/td><td>Taking tool support and executing the test cases by using an automation tool is known as automation testing.<\/td><\/tr><tr><td><strong>Time-consuming and tedious<\/strong>&nbsp;\u2212 Since test cases are executed by human resources, it is very slow and tedious.<\/td><td><strong>Fast<\/strong>&nbsp;\u2212 Automation runs test cases significantly faster than human resources.<\/td><\/tr><tr><td><strong>Huge investment in human resources<\/strong>&nbsp;\u2212 As test cases need to be executed manually, more testers are required in manual testing.<\/td><td><strong>Less investment in human resources<\/strong>&nbsp;\u2212 Test cases are executed using automation tools, so less number of testers are required in automation testing.<\/td><\/tr><tr><td><strong>Less reliable<\/strong>&nbsp;\u2212 Manual testing is less reliable, as it has to account for human errors.<\/td><td><strong>More reliable<\/strong>&nbsp;\u2212 Automation tests are precise and reliable.<\/td><\/tr><tr><td><strong>Non-programmable<\/strong>&nbsp;\u2212 No programming can be done to write sophisticated tests to fetch hidden information.<\/td><td><strong>Programmable<\/strong>&nbsp;\u2212 Testers can program sophisticated tests to bring out hidden information.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>What is JUnit ?<\/h2>\n\n\n\n<p>JUnit is a unit testing framework for Java programming language. It plays a crucial role test-driven development, and is a family of unit testing frameworks collectively known as xUnit.<\/p>\n\n\n\n<p>JUnit promotes the idea of &#8220;first testing then coding&#8221;, which emphasizes on setting up the test data for a piece of code that can be tested first and then implemented. This approach is like &#8220;test a little, code a little, test a little, code a little.&#8221; It increases the productivity of the programmer and the stability of program code, which in turn reduces the stress on the programmer and the time spent on debugging.<\/p>\n\n\n\n<h2>Features of JUnit<\/h2>\n\n\n\n<ul><li>JUnit is an open source framework, which is used for writing and running tests.<\/li><li>Provides annotations to identify test methods.<\/li><li>Provides assertions for testing expected results.<\/li><li>Provides test runners for running tests.<\/li><li>JUnit tests allow you to write codes faster, which increases quality.<\/li><li>JUnit is elegantly simple. It is less complex and takes less time.<\/li><li>JUnit tests can be run automatically and they check their own results and provide immediate feedback. There&#8217;s no need to manually comb through a report of test results.<\/li><li>JUnit tests can be organized into test suites containing test cases and even other test suites.<\/li><li>JUnit shows test progress in a bar that is green if the test is running smoothly, and it turns red when a test fails.<\/li><\/ul>\n\n\n\n<h2>What is a Unit Test Case ?<\/h2>\n\n\n\n<p>A Unit Test Case is a part of code, which ensures that another part of code (method) works as expected. To achieve the desired results quickly, a test framework is required. JUnit is a perfect unit test framework for Java programming language.<\/p>\n\n\n\n<p>A formal written unit test case is characterized by a known input and an expected output, which is worked out before the test is executed. The known input should test a precondition and the expected output should test a post-condition.<\/p>\n\n\n\n<p>There must be at least two unit test cases for each requirement \u2212 one positive test and one negative test. If a requirement has sub-requirements, each sub-requirement must have at least two test cases as positive and negative.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Testing is the process of checking the functionality of an application to ensure it runs as per requirements. Unit testing comes into picture at the developers\u2019 level; it is the testing of single entity (class or method). Unit testing plays a critical role in helping a software company deliver quality products to its customers. Unit [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1033"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1033"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1033\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1047,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1033\/revisions\/1047"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1033"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1033"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1033"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1046,
        "date": "2020-07-23T08:39:31",
        "date_gmt": "2020-07-23T08:39:31",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1046"
        },
        "modified": "2020-07-23T08:39:31",
        "modified_gmt": "2020-07-23T08:39:31",
        "slug": "environment-setup-4",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-4\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<h2>Local Environment Setup<\/h2>\n\n\n\n<p>JUnit is a framework for Java, so the very first requirement is to have JDK installed in your machine.<\/p>\n\n\n\n<h3>System Requirement<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>JDK<\/th><td>1.5 or above.<\/td><\/tr><tr><th>Memory<\/th><td>No minimum requirement.<\/td><\/tr><tr><th>Disk Space<\/th><td>No minimum requirement.<\/td><\/tr><tr><th>Operating System<\/th><td>No minimum requirement.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 1: Verify Java Installation in Your Machine<\/h2>\n\n\n\n<p>First of all, open the console and execute a java command based on the operating system you are working on.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Task<\/th><th>Command<\/th><\/tr><tr><td>Windows<\/td><td>Open Command Console<\/td><td>c:\\&gt; java -version<\/td><\/tr><tr><td>Linux<\/td><td>Open Command Terminal<\/td><td>$ java -version<\/td><\/tr><tr><td>Mac<\/td><td>Open Terminal<\/td><td>machine:~ joseph$ java -version<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let&#8217;s verify the output for all the operating systems \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>java version &#8220;1.8.0_101&#8243;Java(TM) SE Runtime Environment (build 1.8.0_101)<\/td><\/tr><tr><td>Linux<\/td><td>java version &#8220;1.8.0_101&#8243;Java(TM) SE Runtime Environment (build 1.8.0_101)<\/td><\/tr><tr><td>Mac<\/td><td>java version &#8220;1.8.0_101&#8243;Java(TM) SE Runtime Environment (build 1.8.0_101)<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>If you do not have Java installed on your system, then download the Java Software Development Kit (SDK) from the following link\u00a0https:\/\/www.oracle.com. We are assuming Java 1.8.0_101 as the installed version for this tutorial.<\/p>\n\n\n\n<h2>Step 2: Set JAVA Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>JAVA_HOME<\/strong>&nbsp;environment variable to point to the base directory location where Java is installed on your machine. For example.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable JAVA_HOME to C:\\Program Files\\Java\\jdk1.8.0_101<\/td><\/tr><tr><td>Linux<\/td><td>export JAVA_HOME = \/usr\/local\/java-current<\/td><\/tr><tr><td>Mac<\/td><td>export JAVA_HOME = \/Library\/Java\/Home<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append Java compiler location to the System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Append the string&nbsp;<strong>C:\\Program Files\\Java\\jdk1.8.0_101\\bin<\/strong>&nbsp;at the end of the system variable,&nbsp;<strong>Path<\/strong>.<\/td><\/tr><tr><td>Linux<\/td><td>export PATH = $PATH:$JAVA_HOME\/bin\/<\/td><\/tr><tr><td>Mac<\/td><td>not required<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Verify Java installation using the command&nbsp;<strong>java -version<\/strong>&nbsp;as explained above.<\/p>\n\n\n\n<h2>Step 3: Download JUnit Archive<\/h2>\n\n\n\n<p>Download the latest version of JUnit jar file from\u00a0http:\/\/www.junit.org. At the time of writing this tutorial, we have downloaded Junit-4.12.jar and copied it into C:\\>JUnit folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>junit4.12.jar<\/td><\/tr><tr><td>Linux<\/td><td>junit4.12.jar<\/td><\/tr><tr><td>Mac<\/td><td>junit4.12.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 4: Set JUnit Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>JUNIT_HOME<\/strong>&nbsp;environment variable to point to the base directory location where JUNIT jar is stored on your machine. Let\u2019s assuming we&#8217;ve stored junit4.12.jar in the JUNIT folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>OS &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Set the environment variable JUNIT_HOME to C:\\JUNIT<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>export JUNIT_HOME = \/usr\/local\/JUNIT<\/td><\/tr><tr><td>3<\/td><td><strong>Mac<\/strong>export JUNIT_HOME = \/Library\/JUNIT<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 5: Set CLASSPATH Variable<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>CLASSPATH<\/strong>&nbsp;environment variable to point to the JUNIT jar location.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>OS &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Set the environment variable CLASSPATH to %CLASSPATH%;%JUNIT_HOME%\\junit4.12.jar;.;<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>export CLASSPATH = $CLASSPATH:$JUNIT_HOME\/junit4.12.jar:.<\/td><\/tr><tr><td>3<\/td><td><strong>Mac<\/strong>export CLASSPATH = $CLASSPATH:$JUNIT_HOME\/junit4.12.jar:.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 6: Test JUnit Setup<\/h2>\n\n\n\n<p>Create a java class file name TestJunit in\u00a0<strong>C:\\>JUNIT_WORKSPACE<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit {\n   @Test\n\t\n   public void testAdd() {\n      String str = \"Junit is working fine\";\n      assertEquals(\"Junit is working fine\",str);\n   }\n}<\/code><\/pre>\n\n\n\n<p>Create a java class file name TestRunner in\u00a0<strong>C:\\>JUNIT_WORKSPACE<\/strong>\u00a0to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  \t<\/code><\/pre>\n\n\n\n<h2>Step 7: Verify the Result<\/h2>\n\n\n\n<p>Compile the classes using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac TestJunit.java TestRunner.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner to see the result as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Local Environment Setup JUnit is a framework for Java, so the very first requirement is to have JDK installed in your machine. System Requirement JDK 1.5 or above. Memory No minimum requirement. Disk Space No minimum requirement. Operating System No minimum requirement. Step 1: Verify Java Installation in Your Machine First of all, open the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1046"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1046"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1046\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1048,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1046\/revisions\/1048"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1046"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1046"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1046"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1045,
        "date": "2020-07-23T08:40:41",
        "date_gmt": "2020-07-23T08:40:41",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1045"
        },
        "modified": "2020-07-23T08:40:41",
        "modified_gmt": "2020-07-23T08:40:41",
        "slug": "test-framework",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/test-framework\/",
        "title": {
            "rendered": "Test Framework"
        },
        "content": {
            "rendered": "\n<p>JUnit is a&nbsp;<strong>Regression Testing Framework<\/strong>&nbsp;used by developers to implement unit testing in Java, and accelerate programming speed and increase the quality of code. JUnit Framework can be easily integrated with either of the following \u2212<\/p>\n\n\n\n<ul><li>Eclipse<\/li><li>Ant<\/li><li>Maven<\/li><\/ul>\n\n\n\n<h2>Features of JUnit Test Framework<\/h2>\n\n\n\n<p>JUnit test framework provides the following important features \u2212<\/p>\n\n\n\n<ul><li>Fixtures<\/li><li>Test suites<\/li><li>Test runners<\/li><li>JUnit classes<\/li><\/ul>\n\n\n\n<h3>Fixtures<\/h3>\n\n\n\n<p><strong>Fixtures<\/strong>&nbsp;is a fixed state of a set of objects used as a baseline for running tests. The purpose of a test fixture is to ensure that there is a well-known and fixed environment in which tests are run so that results are repeatable. It includes \u2212<\/p>\n\n\n\n<ul><li>setUp() method, which runs before every test invocation.<\/li><li>tearDown() method, which runs after every test method.<\/li><\/ul>\n\n\n\n<p>Let&#8217;s check one example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import junit.framework.*;\n\npublic class JavaTest extends TestCase {\n   protected int value1, value2;\n   \n   \/\/ assigning the values\n   protected void setUp(){\n      value1 = 3;\n      value2 = 3;\n   }\n\n   \/\/ test method to add two values\n   public void testAdd(){\n      double result = value1 + value2;\n      assertTrue(result == 6);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Test Suites<\/h2>\n\n\n\n<p>A test suite bundles a few unit test cases and runs them together. In JUnit, both @RunWith and @Suite annotation are used to run the suite test. Given below is an example that uses TestJunit1 &amp; TestJunit2 test classes.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\n\n\/\/JUnit Suite Test\n@RunWith(Suite.class)\n\n@Suite.SuiteClasses({ \n   TestJunit1.class ,TestJunit2.class\n})\n\npublic class JunitTestSuite {\n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport org.junit.Ignore;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit1 {\n\n   String message = \"Robert\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n   \n   @Test\n   public void testPrintMessage() {\t\n      System.out.println(\"Inside testPrintMessage()\");    \n      assertEquals(message, messageUtil.printMessage());     \n   }\n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport org.junit.Ignore;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit2 {\n\n   String message = \"Robert\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n \n   @Test\n   public void testSalutationMessage() {\n      System.out.println(\"Inside testSalutationMessage()\");\n      message = \"Hi!\" + \"Robert\";\n      assertEquals(message,messageUtil.salutationMessage());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Test Runners<\/h2>\n\n\n\n<p>Test runner is used for executing the test cases. Here is an example that assumes the test class\u00a0<strong>TestJunit<\/strong>\u00a0already exists.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>JUnit Classes<\/h2>\n\n\n\n<p>JUnit classes are important classes, used in writing and testing JUnits. Some of the important classes are \u2212<\/p>\n\n\n\n<ul><li><strong>Assert<\/strong>&nbsp;\u2212 Contains a set of assert methods.<\/li><li><strong>TestCase<\/strong>&nbsp;\u2212 Contains a test case that defines the fixture to run multiple tests.<\/li><li><strong>TestResult<\/strong>&nbsp;\u2212 Contains methods to collect the results of executing a test case.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JUnit is a&nbsp;Regression Testing Framework&nbsp;used by developers to implement unit testing in Java, and accelerate programming speed and increase the quality of code. JUnit Framework can be easily integrated with either of the following \u2212 Eclipse Ant Maven Features of JUnit Test Framework JUnit test framework provides the following important features \u2212 Fixtures Test suites [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1045"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1045"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1045\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1049,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1045\/revisions\/1049"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1045"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1045"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1045"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1044,
        "date": "2020-07-23T08:43:17",
        "date_gmt": "2020-07-23T08:43:17",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1044"
        },
        "modified": "2020-07-23T08:43:17",
        "modified_gmt": "2020-07-23T08:43:17",
        "slug": "basic-usage",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/basic-usage\/",
        "title": {
            "rendered": "Basic Usage"
        },
        "content": {
            "rendered": "\n<p>Let us now have a basic example to demonstrate the step-by-step process of using JUnit.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say, MessageUtil.java in\u00a0<strong>C:\\>JUNIT_WORKSPACE<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\n* This class prints the given message on console.\n*\/\n\npublic class MessageUtil {\n\n   private String message;\n\n   \/\/Constructor\n   \/\/@param message to be printed\n\t\n   public MessageUtil(String message){\n      this.message = message;\n   }\n      \n   \/\/ prints the message\n   public String printMessage(){\n      System.out.println(message);\n      return message;\n   }   \n}  <\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<ul><li>Create a java test class, say, TestJunit.java.<\/li><li>Add a test method testPrintMessage() to your test class.<\/li><li>Add an Annotaion @Test to method testPrintMessage().<\/li><li>Implement the test condition and check the condition using assertEquals API of JUnit.<\/li><\/ul>\n\n\n\n<p>Create a java class file name TestJunit.java in\u00a0<strong>C:\\>JUNIT_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit {\n\t\n   String message = \"Hello World\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n\n   @Test\n   public void testPrintMessage() {\n      assertEquals(message,messageUtil.printMessage());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Runner Class<\/h2>\n\n\n\n<ul><li>Create a TestRunner java class.<\/li><li>Use runClasses method of JUnitCore class of JUnit to run the test case of the above created test class.<\/li><li>Get the result of test cases run in Result Object.<\/li><li>Get failure(s) using the getFailures() method of Result object.<\/li><li>Get Success result using the wasSuccessful() method of Result object.<\/li><\/ul>\n\n\n\n<p>Create a java class file named TestRunner.java in\u00a0<strong>C:\\>JUNIT_WORKSPACE<\/strong>\u00a0to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  <\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil, Test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac MessageUtil.java TestJunit.java TestRunner.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World\ntrue<\/code><\/pre>\n\n\n\n<p>Now update TestJunit in\u00a0<strong>C:\\>JUNIT_WORKSPACE<\/strong>\u00a0so that the test fails. Change the message string.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit {\n\t\n   String message = \"Hello World\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n\n   @Test\n   public void testPrintMessage() {\n      message = \"New Word\";\n      assertEquals(message,messageUtil.printMessage());\n   }\n}<\/code><\/pre>\n\n\n\n<p>Let&#8217;s keep the rest of the classes as is, and try to run the same Test Runner.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World\ntestPrintMessage(TestJunit): expected:&lt;&#91;New Wor]d> but was:&lt;&#91;Hello Worl]d>\nfalse<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Let us now have a basic example to demonstrate the step-by-step process of using JUnit. Create a Class Create a java class to be tested, say, MessageUtil.java in\u00a0C:\\>JUNIT_WORKSPACE Create Test Case Class Create a java test class, say, TestJunit.java. Add a test method testPrintMessage() to your test class. Add an Annotaion @Test to method testPrintMessage(). [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1044"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1044"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1044\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1050,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1044\/revisions\/1050"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1044"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1044"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1044"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1043,
        "date": "2020-07-23T08:51:36",
        "date_gmt": "2020-07-23T08:51:36",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1043"
        },
        "modified": "2020-07-23T08:51:36",
        "modified_gmt": "2020-07-23T08:51:36",
        "slug": "api",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/api\/",
        "title": {
            "rendered": "API"
        },
        "content": {
            "rendered": "\n<p>The most important package in JUnit is&nbsp;<strong>junit.framework<\/strong>, which contains all the core classes. Some of the important classes are as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Class Name<\/th><th>Functionality<\/th><\/tr><tr><td>1<\/td><td>Assert<\/td><td>A set of assert methods.<\/td><\/tr><tr><td>2<\/td><td>TestCase<\/td><td>A test case defines the fixture to run multiple tests.<\/td><\/tr><tr><td>3<\/td><td>TestResult<\/td><td>A TestResult collects the results of executing a test case.<\/td><\/tr><tr><td>4<\/td><td>TestSuite<\/td><td>A TestSuite is a composite of tests.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Assert Class<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>org.junit.Assert<\/strong>\u00a0class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Assert extends java.lang.Object\n<\/code><\/pre>\n\n\n\n<p>This class provides a set of assertion methods useful for writing tests. Only failed assertions are recorded. Some of the important methods of Assert class are as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Methods &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>void assertEquals(boolean expected, boolean actual)<\/strong>Checks that two primitives\/objects are equal.<\/td><\/tr><tr><td>2<\/td><td><strong>void assertFalse(boolean condition)<\/strong>Checks that a condition is false.<\/td><\/tr><tr><td>3<\/td><td><strong>void assertNotNull(Object object)<\/strong>Checks that an object isn&#8217;t null.<\/td><\/tr><tr><td>4<\/td><td><strong>void assertNull(Object object)<\/strong>Checks that an object is null.<\/td><\/tr><tr><td>5<\/td><td><strong>void assertTrue(boolean condition)<\/strong>Checks that a condition is true.<\/td><\/tr><tr><td>6<\/td><td><strong>void fail()<\/strong>Fails a test with no message.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let&#8217;s use some of the above-mentioned methods in an example. Create a java class file named TestJunit1.java in\u00a0<strong>C:\\>JUNIT_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestJunit1 {\n   @Test\n   public void testAdd() {\n      \/\/test data\n      int num = 5;\n      String temp = null;\n      String str = \"Junit is working fine\";\n\n      \/\/check for equality\n      assertEquals(\"Junit is working fine\", str);\n      \n      \/\/check for false condition\n      assertFalse(num > 6);\n\n      \/\/check for not null value\n      assertNotNull(temp);\n   }\n}<\/code><\/pre>\n\n\n\n<p>Next, create a java class file named\u00a0<strong>TestRunner1.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner1 {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit1.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  \t<\/code><\/pre>\n\n\n\n<p>Compile the test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac TestJunit1.java TestRunner1.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner1\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n<\/code><\/pre>\n\n\n\n<h2>TestCase Class<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>org.junit.TestCase<\/strong>\u00a0class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class TestCase extends Assert implements Test\n<\/code><\/pre>\n\n\n\n<p>A test case defines the fixture to run multiple tests. Some of the important methods of&nbsp;<strong>TestCase<\/strong>&nbsp;class are as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Methods &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>int countTestCases()<\/strong>Counts the number of test cases executed by run(TestResult result).<\/td><\/tr><tr><td>2<\/td><td><strong>TestResult createResult()<\/strong>Creates a default TestResult object.<\/td><\/tr><tr><td>3<\/td><td><strong>String getName()<\/strong>Gets the name of a TestCase.<\/td><\/tr><tr><td>4<\/td><td><strong>TestResult run()<\/strong>A convenience method to run this test, collecting the results with a default TestResult object.<\/td><\/tr><tr><td>5<\/td><td><strong>void run(TestResult result)<\/strong>Runs the test case and collects the results in TestResult.<\/td><\/tr><tr><td>6<\/td><td><strong>void setName(String name)<\/strong>Sets the name of a TestCase.<\/td><\/tr><tr><td>7<\/td><td><strong>void setUp()<\/strong>Sets up the fixture, for example, open a network connection.<\/td><\/tr><tr><td>8<\/td><td><strong>void tearDown()<\/strong>Tears down the fixture, for example, close a network connection.<\/td><\/tr><tr><td>9<\/td><td><strong>String toString()<\/strong>Returns a string representation of the test case.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let&#8217;s use some of the above-mentioned methods in an example. Create a java class file named\u00a0<strong>TestJunit2.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import junit.framework.TestCase;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class TestJunit2 extends TestCase  {\n   protected double fValue1;\n   protected double fValue2;\n   \n   @Before \n   public void setUp() {\n      fValue1 = 2.0;\n      fValue2 = 3.0;\n   }\n\t\n   @Test\n   public void testAdd() {\n      \/\/count the number of test cases\n      System.out.println(\"No of Test Case = \"+ this.countTestCases());\n\t\t\n      \/\/test getName \n      String name = this.getName();\n      System.out.println(\"Test Case Name = \"+ name);\n\n      \/\/test setName\n      this.setName(\"testNewAdd\");\n      String newName = this.getName();\n      System.out.println(\"Updated Test Case Name = \"+ newName);\n   }\n\t\n   \/\/tearDown used to close the connection or clean up activities\n   public void tearDown(  ) {\n   }\n}<\/code><\/pre>\n\n\n\n<p>Next, create a java class file named\u00a0<strong>TestRunner2.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner2 {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit2.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n} <\/code><\/pre>\n\n\n\n<p>Compile the test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac TestJunit2.java TestRunner2.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner2\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>No of Test Case = 1\nTest Case Name = testAdd\nUpdated Test Case Name = testNewAdd\ntrue<\/code><\/pre>\n\n\n\n<h2>TestResult Class<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>org.junit.TestResult<\/strong>\u00a0class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TestResult extends Object\n<\/code><\/pre>\n\n\n\n<p>A TestResult collects the results of executing a test case. It is an instance of the Collecting Parameter pattern. The test framework distinguishes between failures and errors. A failure is anticipated and checked for with assertions. Errors are unanticipated problems like an ArrayIndexOutOfBoundsException. Some of the important methods of&nbsp;<strong>TestResult<\/strong>&nbsp;class are as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Methods &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>void addError(Test test, Throwable t)<\/strong>Adds an error to the list of errors.<\/td><\/tr><tr><td>2<\/td><td><strong>void addFailure(Test test, AssertionFailedError t)<\/strong>Adds a failure to the list of failures.<\/td><\/tr><tr><td>3<\/td><td><strong>void endTest(Test test)<\/strong>Informs the result that a test was completed.<\/td><\/tr><tr><td>4<\/td><td><strong>int errorCount()<\/strong>Gets the number of detected errors.<\/td><\/tr><tr><td>5<\/td><td><strong>Enumeration&lt;TestFailure&gt; errors()<\/strong>Returns an Enumeration for the errors.<\/td><\/tr><tr><td>6<\/td><td><strong>int failureCount()<\/strong>Gets the number of detected failures.<\/td><\/tr><tr><td>7<\/td><td><strong>void run(TestCase test)<\/strong>Runs a TestCase.<\/td><\/tr><tr><td>8<\/td><td><strong>int runCount()<\/strong>Gets the number of run tests.<\/td><\/tr><tr><td>9<\/td><td><strong>void startTest(Test test)<\/strong>Informs the result that a test will be started.<\/td><\/tr><tr><td>10<\/td><td><strong>void stop()<\/strong>Marks that the test run should stop.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestJunit3.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport junit.framework.AssertionFailedError;\nimport junit.framework.TestResult;\n\npublic class TestJunit3 extends TestResult {\n   \/\/ add the error\n   public synchronized void addError(Test test, Throwable t) {\n      super.addError((junit.framework.Test) test, t);\n   }\n\n   \/\/ add the failure\n   public synchronized void addFailure(Test test, AssertionFailedError t) {\n      super.addFailure((junit.framework.Test) test, t);\n   }\n\t\n   @Test\n   public void testAdd() {\n      \/\/ add any test\n   }\n   \n   \/\/ Marks that the test run should stop.\n   public synchronized void stop() {\n      \/\/stop the test here\n   }\n}<\/code><\/pre>\n\n\n\n<p>Next, create a java class file named\u00a0<strong>TestRunner3.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner3 {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit3.class);\n\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  \t<\/code><\/pre>\n\n\n\n<p>Compile the test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac TestJunit3.java TestRunner3.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner3\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n<\/code><\/pre>\n\n\n\n<h2>TestSuite Class<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>org.junit.TestSuite<\/strong>\u00a0class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TestSuite extends Object implements Test\n<\/code><\/pre>\n\n\n\n<p>A TestSuite is a Composite of tests. It runs a collection of test cases. Some of the important methods of&nbsp;<strong>TestSuite<\/strong>&nbsp;class are as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Methods &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>void addTest(Test test)<\/strong>Adds a test to the suite.<\/td><\/tr><tr><td>2<\/td><td><strong>void addTestSuite(Class&lt;? extends TestCase&gt; testClass)<\/strong>Adds the tests from the given class to the suite.<\/td><\/tr><tr><td>3<\/td><td><strong>int countTestCases()<\/strong>Counts the number of test cases that will be run by this test.<\/td><\/tr><tr><td>4<\/td><td><strong>String getName()<\/strong>Returns the name of the suite.<\/td><\/tr><tr><td>5<\/td><td><strong>void run(TestResult result)<\/strong>Runs the tests and collects their result in a TestResult.<\/td><\/tr><tr><td>6<\/td><td><strong>void setName(String name)<\/strong>Sets the name of the suite.<\/td><\/tr><tr><td>7<\/td><td><strong>Test testAt(int index)<\/strong>Returns the test at the given index.<\/td><\/tr><tr><td>8<\/td><td><strong>int testCount()<\/strong>Returns the number of tests in this suite.<\/td><\/tr><tr><td>9<\/td><td><strong>static Test warning(String message)<\/strong>Returns a test which will fail and log a warning message.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Create a java class file named\u00a0<strong>JunitTestSuite.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to create Test suite.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import junit.framework.*;\n\npublic class JunitTestSuite {\n   public static void main(String&#91;] a) {\n      \/\/ add the test's in the suite\n      TestSuite suite = new TestSuite(TestJunit1.class, TestJunit2.class, TestJunit3.class );\n      TestResult result = new TestResult();\n      suite.run(result);\n      System.out.println(\"Number of test cases = \" + result.runCount());\n   }\n}<\/code><\/pre>\n\n\n\n<p>Compile the Test suite classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac JunitTestSuite.java \n<\/code><\/pre>\n\n\n\n<p>Now run the Test Suite.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java JunitTestSuite\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>No of Test Case = 1\nTest Case Name = testAdd\nUpdated Test Case Name = testNewAdd\nNumber of test cases = 3<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The most important package in JUnit is&nbsp;junit.framework, which contains all the core classes. Some of the important classes are as follows \u2212 Sr.No. Class Name Functionality 1 Assert A set of assert methods. 2 TestCase A test case defines the fixture to run multiple tests. 3 TestResult A TestResult collects the results of executing a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1043"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1043"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1043\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1051,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1043\/revisions\/1051"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1043"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1043"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1043"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1042,
        "date": "2020-07-23T10:38:34",
        "date_gmt": "2020-07-23T10:38:34",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1042"
        },
        "modified": "2020-07-23T10:38:34",
        "modified_gmt": "2020-07-23T10:38:34",
        "slug": "extensions",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/extensions\/",
        "title": {
            "rendered": "Extensions"
        },
        "content": {
            "rendered": "\n<p>Following are the JUnit extensions \u2212<\/p>\n\n\n\n<ul><li>Cactus<\/li><li>JWebUnit<\/li><li>XMLUnit<\/li><li>MockObject<\/li><\/ul>\n\n\n\n<h2>Cactus<\/h2>\n\n\n\n<p>Cactus is a simple test framework for unit testing server-side java code (Servlets, EJBs, Tag Libs, Filters). The intent of Cactus is to lower the cost of writing tests for server-side code. It uses JUnit and extends it. Cactus implements an in-container strategy that executes the tests inside a container.<\/p>\n\n\n\n<p>Cactus ecosystem is made of several components \u2212<\/p>\n\n\n\n<ul><li><strong>Cactus Framework<\/strong>&nbsp;is the heart of Cactus. It is the engine that provides the API to write Cactus tests.<\/li><li><strong>Cactus Integration Modules<\/strong>&nbsp;are front-ends and frameworks that provide easy ways of using the Cactus Framework (Ant scripts, Eclipse plugin, and Maven plugin).<\/li><\/ul>\n\n\n\n<p>The following code demonstrates how Cactus can be used.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.apache.cactus.*;\nimport junit.framework.*;\n\npublic class TestSampleServlet extends ServletTestCase {\n   @Test\n   public void testServlet() {\n      \/\/ Initialize class to test\n      SampleServlet servlet = new SampleServlet();\n\n      \/\/ Set a variable in session as the doSomething()\n      \/\/ method that we are testing \n      session.setAttribute(\"name\", \"value\");\n\n      \/\/ Call the method to test, passing an \n      \/\/ HttpServletRequest object (for example)\n      String result = servlet.doSomething(request);\n\n      \/\/ Perform verification that test was successful\n      assertEquals(\"something\", result);\n      assertEquals(\"otherValue\", session.getAttribute(\"otherName\"));\n   }\n}<\/code><\/pre>\n\n\n\n<h2>JWebUnit<\/h2>\n\n\n\n<p>JWebUnit is a Java-based testing framework for web applications. It wraps existing testing frameworks such as HtmlUnit and Selenium with a unified, simple testing interface to test the correctness of your web applications.<\/p>\n\n\n\n<p>JWebUnit provides a high-level Java API for navigating a web application combined with a set of assertions to verify the application&#8217;s correctness. This includes navigation via links, form entry and submission, validation of table contents, and other typical business web application features.<\/p>\n\n\n\n<p>The simple navigation methods and ready-to-use assertions allow for more rapid test creation than using only JUnit or HtmlUnit. And if you want to switch from HtmlUnit to other plugins such as Selenium (available soon), there is no need to rewrite your tests.<\/p>\n\n\n\n<p>Here is a sample code.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import junit.framework.TestCase;\nimport net.sourceforge.jwebunit.WebTester;\n\npublic class ExampleWebTestCase extends TestCase {\n   private WebTester tester;\n   \n   public ExampleWebTestCase(String name) {\n      super(name);\n      tester = new WebTester();\n   }\n\t\n   \/\/set base url\n   public void setUp() throws Exception {\n      getTestContext().setBaseUrl(\"http:\/\/myserver:8080\/myapp\");\n   }\n\t\n   \/\/ test base info\n   @Test\n   public void testInfoPage() {\n      beginAt(\"\/info.html\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>XMLUnit<\/h2>\n\n\n\n<p>XMLUnit provides a single JUnit extension class, XMLTestCase, and a set of supporting classes that allow assertions to be made about \u2212<\/p>\n\n\n\n<ul><li>The differences between two pieces of XML (via Diff and DetailedDiff classes).<\/li><li>The validity of a piece of XML (via Validator class).<\/li><li>The outcome of transforming a piece of XML using XSLT (via Transform class).<\/li><li>The evaluation of an XPath expression on a piece of XML (via classes implementing the XpathEngine interface).<\/li><li>Individual nodes in a piece of XML that are exposed by DOM Traversal (via NodeTest class).<\/li><\/ul>\n\n\n\n<p>Let us assume we have two pieces of XML that we wish to compare and assert that they are equal. We could write a simple test class like this \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.custommonkey.xmlunit.XMLTestCase;\n\npublic class MyXMLTestCase extends XMLTestCase {\n\n   \/\/ this test method compare two pieces of the XML\n   @Test\n   public void testForXMLEquality() throws Exception {\n      String myControlXML = \"&lt;msg>&lt;uuid>0x00435A8C&lt;\/uuid>&lt;\/msg>\";\n      String myTestXML = \"&lt;msg>&lt;localId>2376&lt;\/localId>&lt;\/msg>\";\n      assertXMLEqual(\"Comparing test xml to control xml\", myControlXML, myTestXML);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>MockObject<\/h2>\n\n\n\n<p>In a unit test, mock objects can simulate the behavior of complex, real (non-mock) objects and are therefore useful when a real object is impractical or impossible to incorporate into a unit test.<\/p>\n\n\n\n<p>The common coding style for testing with mock objects is to \u2212<\/p>\n\n\n\n<ul><li>Create instances of mock objects.<\/li><li>Set state and expectations in the mock objects.<\/li><li>Invoke domain code with mock objects as parameters.<\/li><li>Verify consistency in the mock objects.<\/li><\/ul>\n\n\n\n<p>Given below is an example of MockObject using Jmock.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jmock.Mockery;\nimport org.jmock.Expectations;\n\nclass PubTest extends TestCase {\n   Mockery context = new Mockery();\n   public void testSubReceivesMessage() {\n      \/\/ set up\n      final Sub sub = context.mock(Sub.class);\n\n      Pub pub = new Pub();\n      pub.add(sub);\n    \n      final String message = \"message\";\n      \n      \/\/ expectations\n      context.checking(new Expectations() {\n         oneOf (sub).receive(message);\n      });\n\n      \/\/ execute\n      pub.publish(message);\n      \n      \/\/ verify\n      context.assertIsSatisfied();\n   }\n}<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the JUnit extensions \u2212 Cactus JWebUnit XMLUnit MockObject Cactus Cactus is a simple test framework for unit testing server-side java code (Servlets, EJBs, Tag Libs, Filters). The intent of Cactus is to lower the cost of writing tests for server-side code. It uses JUnit and extends it. Cactus implements an in-container strategy that [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1042"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1042"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1042\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1052,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1042\/revisions\/1052"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1042"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1042"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1042"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1041,
        "date": "2020-07-23T10:39:28",
        "date_gmt": "2020-07-23T10:39:28",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1041"
        },
        "modified": "2020-07-23T10:39:28",
        "modified_gmt": "2020-07-23T10:39:28",
        "slug": "plug-with-eclipse",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/plug-with-eclipse\/",
        "title": {
            "rendered": "Plug with Eclipse"
        },
        "content": {
            "rendered": "\n<p>To set up JUnit with eclipse, follow the steps given below.<\/p>\n\n\n\n<h2>Step 1: Download JUnit Archive<\/h2>\n\n\n\n<p>Download a JUnit jar based on the operating system you have on your system.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive Name<\/th><\/tr><tr><td>Windows<\/td><td>junit4.10.jar<\/td><\/tr><tr><td>Linux<\/td><td>junit4.10.jar<\/td><\/tr><tr><td>Mac<\/td><td>junit4.10.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Assume you have copied the above JAR file onto the folder C:\\&gt;JUnit.<\/p>\n\n\n\n<h2>Step 2: Set Eclipse Environment<\/h2>\n\n\n\n<p>Open eclipse \u2192 right click on project and click on property &gt; Build Path &gt; Configure Build Path and add the junit-4.10.jar in the libraries using the button Add External Jar.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/junit\/images\/eclipse_properties.jpg\" alt=\"Add junit-4.10.jar in liraries.\"\/><\/figure>\n\n\n\n<p>We assume that your Eclipse has inbuilt JUnit plugin. If it is not available in C:\\&gt;eclipse\\plugins directory, then you can download it from&nbsp;<strong>JUnit Plugin<\/strong>. Unzip the downloaded zip file in the plugin folder of the Eclipse. Finally restart Eclipse.<\/p>\n\n\n\n<p>Now your Eclipse is ready for the development of JUnit test cases.<\/p>\n\n\n\n<h2>Step 3: Verify JUnit installation in Eclipse<\/h2>\n\n\n\n<p>Create a project\u00a0<strong>TestJunit<\/strong>\u00a0in Eclipse at any location. Then create a class\u00a0<strong>MessageUtil<\/strong>\u00a0to test in the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\n* This class prints the given message on console.\n*\/\n\npublic class MessageUtil {\n\n   private String message;\n\n   \/\/Constructor\n   \/\/@param message to be printed\n   public MessageUtil(String message){\n      this.message = message;\n   }\n      \n   \/\/ prints the message\n   public String printMessage(){\n      System.out.println(message);\n      return message;\n   }   \n} <\/code><\/pre>\n\n\n\n<p>Create a test class\u00a0<strong>TestJunit<\/strong>\u00a0in the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit {\n\t\n   String message = \"Hello World\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n\n   @Test\n   public void testPrintMessage() {\t  \n      assertEquals(message,messageUtil.printMessage());\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following should be the project structure \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/junit\/images\/junit_project_structure.jpg\" alt=\"Project Structure\"\/><\/figure>\n\n\n\n<p>Finally, right click the program and run as JUnit to verify the output of the program.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/junit\/images\/junit_run.jpg\" alt=\"Run Junit\"\/><\/figure>\n\n\n\n<p>Verify the result.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/junit\/images\/junit_success.jpg\" alt=\"JUnit result success.\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>To set up JUnit with eclipse, follow the steps given below. Step 1: Download JUnit Archive Download a JUnit jar based on the operating system you have on your system. OS Archive Name Windows junit4.10.jar Linux junit4.10.jar Mac junit4.10.jar Assume you have copied the above JAR file onto the folder C:\\&gt;JUnit. Step 2: Set Eclipse [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1041"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1041"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1041\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1053,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1041\/revisions\/1053"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1041"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1041"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1041"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1040,
        "date": "2020-07-23T10:41:02",
        "date_gmt": "2020-07-23T10:41:02",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1040"
        },
        "modified": "2020-07-23T10:41:02",
        "modified_gmt": "2020-07-23T10:41:02",
        "slug": "writing-a-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/writing-a-test\/",
        "title": {
            "rendered": "Writing a Test"
        },
        "content": {
            "rendered": "\n<p>Here we will see one complete example of JUnit testing using POJO class, Business logic class, and a test class, which will be run by the test runner.<\/p>\n\n\n\n<p>Create\u00a0<strong>EmployeeDetails.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE, which is a POJO class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EmployeeDetails {\n\n   private String name;\n   private double monthlySalary;\n   private int age;\n   \n   \/**\n   * @return the name\n   *\/\n\t\n   public String getName() {\n      return name;\n   }\n\t\n   \/**\n   * @param name the name to set\n   *\/\n\t\n   public void setName(String name) {\n      this.name = name;\n   }\n\t\n   \/**\n   * @return the monthlySalary\n   *\/\n\t\n   public double getMonthlySalary() {\n      return monthlySalary;\n   }\n\t\n   \/**\n   * @param monthlySalary the monthlySalary to set\n   *\/\n\t\n   public void setMonthlySalary(double monthlySalary) {\n      this.monthlySalary = monthlySalary;\n   }\n\t\n   \/**\n   * @return the age\n   *\/\n   public int getAge() {\n      return age;\n   }\n\t\n   \/**\n   * @param age the age to set\n   *\/\n   public void setAge(int age) {\n      this.age = age;\n   }\n}<\/code><\/pre>\n\n\n\n<p><strong>EmployeeDetails<\/strong>&nbsp;class is used to \u2212<\/p>\n\n\n\n<ul><li>get\/set the value of employee&#8217;s name.<\/li><li>get\/set the value of employee&#8217;s monthly salary.<\/li><li>get\/set the value of employee&#8217;s age.<\/li><\/ul>\n\n\n\n<p>Create a file called\u00a0<strong>EmpBusinessLogic.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE, which contains the business logic.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EmpBusinessLogic {\n   \/\/ Calculate the yearly salary of employee\n   public double calculateYearlySalary(EmployeeDetails employeeDetails) {\n      double yearlySalary = 0;\n      yearlySalary = employeeDetails.getMonthlySalary() * 12;\n      return yearlySalary;\n   }\n\t\n   \/\/ Calculate the appraisal amount of employee\n   public double calculateAppraisal(EmployeeDetails employeeDetails) {\n      double appraisal = 0;\n\t\t\n      if(employeeDetails.getMonthlySalary() &lt; 10000){\n         appraisal = 500;\n      }else{\n         appraisal = 1000;\n      }\n\t\t\n      return appraisal;\n   }\n}<\/code><\/pre>\n\n\n\n<p><strong>EmpBusinessLogic<\/strong>&nbsp;class is used for calculating \u2212<\/p>\n\n\n\n<ul><li>the yearly salary of an employee.<\/li><li>the appraisal amount of an employee.<\/li><\/ul>\n\n\n\n<p>Create a file called\u00a0<strong>TestEmployeeDetails.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE, which contains the test cases to be tested.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestEmployeeDetails {\n   EmpBusinessLogic empBusinessLogic = new EmpBusinessLogic();\n   EmployeeDetails employee = new EmployeeDetails();\n\n   \/\/test to check appraisal\n   @Test\n   public void testCalculateAppriasal() {\n      employee.setName(\"Rajeev\");\n      employee.setAge(25);\n      employee.setMonthlySalary(8000);\n\t\t\n      double appraisal = empBusinessLogic.calculateAppraisal(employee);\n      assertEquals(500, appraisal, 0.0);\n   }\n\n   \/\/ test to check yearly salary\n   @Test\n   public void testCalculateYearlySalary() {\n      employee.setName(\"Rajeev\");\n      employee.setAge(25);\n      employee.setMonthlySalary(8000);\n\t\t\n      double salary = empBusinessLogic.calculateYearlySalary(employee);\n      assertEquals(96000, salary, 0.0);\n   }\n}<\/code><\/pre>\n\n\n\n<p><strong>TestEmployeeDetails<\/strong>&nbsp;class is used for testing the methods of&nbsp;<strong>EmpBusinessLogic<\/strong>&nbsp;class. It<\/p>\n\n\n\n<ul><li>tests the yearly salary of the employee.<\/li><li>tests the appraisal amount of the employee.<\/li><\/ul>\n\n\n\n<p>Next, create a java class filed named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestEmployeeDetails.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n} <\/code><\/pre>\n\n\n\n<p>Compile the test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac EmployeeDetails.java \nEmpBusinessLogic.java TestEmployeeDetails.java TestRunner.java<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Here we will see one complete example of JUnit testing using POJO class, Business logic class, and a test class, which will be run by the test runner. Create\u00a0EmployeeDetails.java\u00a0in C:\\>JUNIT_WORKSPACE, which is a POJO class. EmployeeDetails&nbsp;class is used to \u2212 get\/set the value of employee&#8217;s name. get\/set the value of employee&#8217;s monthly salary. get\/set the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1040"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1040"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1040\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1054,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1040\/revisions\/1054"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1040"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1040"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1040"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1039,
        "date": "2020-07-23T10:42:59",
        "date_gmt": "2020-07-23T10:42:59",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1039"
        },
        "modified": "2020-07-23T10:42:59",
        "modified_gmt": "2020-07-23T10:42:59",
        "slug": "using-assertion",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/using-assertion\/",
        "title": {
            "rendered": "Using Assertion"
        },
        "content": {
            "rendered": "\n<h2>Assertion<\/h2>\n\n\n\n<p>All the assertions are in the Assert class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Assert extends java.lang.Object\n<\/code><\/pre>\n\n\n\n<p>This class provides a set of assertion methods, useful for writing tests. Only failed assertions are recorded. Some of the important methods of Assert class are as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Methods &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>void assertEquals(boolean expected, boolean actual)<\/strong>Checks that two primitives\/objects are equal.<\/td><\/tr><tr><td>2<\/td><td><strong>void assertTrue(boolean condition)<\/strong>Checks that a condition is true.<\/td><\/tr><tr><td>3<\/td><td><strong>void assertFalse(boolean condition)<\/strong>Checks that a condition is false.<\/td><\/tr><tr><td>4<\/td><td><strong>void assertNotNull(Object object)<\/strong>Checks that an object isn&#8217;t null.<\/td><\/tr><tr><td>5<\/td><td><strong>void assertNull(Object object)<\/strong>Checks that an object is null.<\/td><\/tr><tr><td>6<\/td><td><strong>void assertSame(object1, object2)<\/strong>The assertSame() method tests if two object references point to the same object.<\/td><\/tr><tr><td>7<\/td><td><strong>void assertNotSame(object1, object2)<\/strong>The assertNotSame() method tests if two object references do not point to the same object.<\/td><\/tr><tr><td>8<\/td><td><strong>void assertArrayEquals(expectedArray, resultArray);<\/strong>The assertArrayEquals() method will test whether two arrays are equal to each other.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let&#8217;s use some of the above-mentioned methods in an example. Create a java class file named\u00a0<strong>TestAssertions.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class TestAssertions {\n\n   @Test\n   public void testAssertions() {\n      \/\/test data\n      String str1 = new String (\"abc\");\n      String str2 = new String (\"abc\");\n      String str3 = null;\n      String str4 = \"abc\";\n      String str5 = \"abc\";\n\t\t\n      int val1 = 5;\n      int val2 = 6;\n\n      String&#91;] expectedArray = {\"one\", \"two\", \"three\"};\n      String&#91;] resultArray =  {\"one\", \"two\", \"three\"};\n\n      \/\/Check that two objects are equal\n      assertEquals(str1, str2);\n\n      \/\/Check that a condition is true\n      assertTrue (val1 &lt; val2);\n\n      \/\/Check that a condition is false\n      assertFalse(val1 > val2);\n\n      \/\/Check that an object isn't null\n      assertNotNull(str1);\n\n      \/\/Check that an object is null\n      assertNull(str3);\n\n      \/\/Check if two object references point to the same object\n      assertSame(str4,str5);\n\n      \/\/Check if two object references not point to the same object\n      assertNotSame(str1,str3);\n\n      \/\/Check whether two arrays are equal to each other.\n      assertArrayEquals(expectedArray, resultArray);\n   }\n}<\/code><\/pre>\n\n\n\n<p>Next, create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner2 {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestAssertions.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n} <\/code><\/pre>\n\n\n\n<p>Compile the Test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac TestAssertions.java TestRunner.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n<\/code><\/pre>\n\n\n\n<h2>Annotation<\/h2>\n\n\n\n<p>Annotations are like meta-tags that you can add to your code, and apply them to methods or in class. These annotations in JUnit provide the following information about test methods \u2212<\/p>\n\n\n\n<ul><li>which methods are going to run before and after test methods.<\/li><li>which methods run before and after all the methods, and.<\/li><li>which methods or classes will be ignored during the execution.<\/li><\/ul>\n\n\n\n<p>The following table provides a list of annotations and their meaning in JUnit \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Annotation &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>@Test<\/strong>The Test annotation tells JUnit that the public void method to which it is attached can be run as a test case.<\/td><\/tr><tr><td>2<\/td><td><strong>@Before<\/strong>Several tests need similar objects created before they can run. Annotating a public void method with @Before causes that method to be run before each Test method.<\/td><\/tr><tr><td>3<\/td><td><strong>@After<\/strong>If you allocate external resources in a Before method, you need to release them after the test runs. Annotating a public void method with @After causes that method to be run after the Test method.<\/td><\/tr><tr><td>4<\/td><td><strong>@BeforeClass<\/strong>Annotating a public static void method with @BeforeClass causes it to be run once before any of the test methods in the class.<\/td><\/tr><tr><td>5<\/td><td><strong>@AfterClass<\/strong>This will perform the method after all tests have finished. This can be used to perform clean-up activities.<\/td><\/tr><tr><td>6<\/td><td><strong>@Ignore<\/strong>The Ignore annotation is used to ignore the test and that test will not be executed.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Create a java class file named\u00a0<strong>JunitAnnotation.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to test annotation.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.After;\nimport org.junit.AfterClass;\n\nimport org.junit.Before;\nimport org.junit.BeforeClass;\n\nimport org.junit.Ignore;\nimport org.junit.Test;\n\npublic class JunitAnnotation {\n\t\n   \/\/execute before class\n   @BeforeClass\n   public static void beforeClass() {\n      System.out.println(\"in before class\");\n   }\n\n   \/\/execute after class\n   @AfterClass\n   public static void  afterClass() {\n      System.out.println(\"in after class\");\n   }\n\n   \/\/execute before test\n   @Before\n   public void before() {\n      System.out.println(\"in before\");\n   }\n\t\n   \/\/execute after test\n   @After\n   public void after() {\n      System.out.println(\"in after\");\n   }\n\t\n   \/\/test case\n   @Test\n   public void test() {\n      System.out.println(\"in test\");\n   }\n\t\n   \/\/test case ignore and will not execute\n   @Ignore\n   public void ignoreTest() {\n      System.out.println(\"in ignore test\");\n   }\n}<\/code><\/pre>\n\n\n\n<p>Next, create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute annotations.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(JunitAnnotation.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n} <\/code><\/pre>\n\n\n\n<p>Compile the Test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac JunitAnnotation.java TestRunner.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>in before class\nin before\nin test\nin after\nin after class\ntrue<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Assertion All the assertions are in the Assert class. This class provides a set of assertion methods, useful for writing tests. Only failed assertions are recorded. Some of the important methods of Assert class are as follows \u2212 Sr.No. Methods &amp; Description 1 void assertEquals(boolean expected, boolean actual)Checks that two primitives\/objects are equal. 2 void [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1039"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1039"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1039\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1055,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1039\/revisions\/1055"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1039"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1039"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1039"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1038,
        "date": "2020-07-23T10:51:56",
        "date_gmt": "2020-07-23T10:51:56",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1038"
        },
        "modified": "2020-07-23T10:51:56",
        "modified_gmt": "2020-07-23T10:51:56",
        "slug": "execution-procedure",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/execution-procedure\/",
        "title": {
            "rendered": "Execution Procedure"
        },
        "content": {
            "rendered": "\n<p>This chapter explains the execution procedure of methods in JUnit, which defines the order of the methods called. Discussed below is the execution procedure of the JUnit test API methods with example.<\/p>\n\n\n\n<p>Create a java class file named ExecutionProcedureJunit.java in C:\\>JUNIT_WORKSPACE to test annotation.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.After;\nimport org.junit.AfterClass;\n\nimport org.junit.Before;\nimport org.junit.BeforeClass;\n\nimport org.junit.Ignore;\nimport org.junit.Test;\n\npublic class ExecutionProcedureJunit {\n\t\n   \/\/execute only once, in the starting \n   @BeforeClass\n   public static void beforeClass() {\n      System.out.println(\"in before class\");\n   }\n\n   \/\/execute only once, in the end\n   @AfterClass\n   public static void  afterClass() {\n      System.out.println(\"in after class\");\n   }\n\n   \/\/execute for each test, before executing test\n   @Before\n   public void before() {\n      System.out.println(\"in before\");\n   }\n\t\n   \/\/execute for each test, after executing test\n   @After\n   public void after() {\n      System.out.println(\"in after\");\n   }\n\t\n   \/\/test case 1\n   @Test\n   public void testCase1() {\n      System.out.println(\"in test case 1\");\n   }\n\n   \/\/test case 2\n   @Test\n   public void testCase2() {\n      System.out.println(\"in test case 2\");\n   }\n}<\/code><\/pre>\n\n\n\n<p>Next, create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute annotations.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(ExecutionProcedureJunit.class);\n\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n} <\/code><\/pre>\n\n\n\n<p>Compile the Test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac ExecutionProcedureJunit.java TestRunner.java\n\ufeff<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>in before class\nin before\nin test case 1\nin after\nin before\nin test case 2\nin after\nin after class\n\ufeff<\/code><\/pre>\n\n\n\n<p>See the above output. The execution procedure is as follows \u2212<\/p>\n\n\n\n<ul><li>First of all, the beforeClass() method executes only once.<\/li><li>The afterClass() method executes only once.<\/li><li>The before() method executes for each test case, but before executing the test case.<\/li><li>The after() method executes for each test case, but after the execution of test case.<\/li><li>In between before() and after(), each test case executes.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This chapter explains the execution procedure of methods in JUnit, which defines the order of the methods called. Discussed below is the execution procedure of the JUnit test API methods with example. Create a java class file named ExecutionProcedureJunit.java in C:\\>JUNIT_WORKSPACE to test annotation. Next, create a java class file named\u00a0TestRunner.java\u00a0in C:\\>JUNIT_WORKSPACE to execute annotations. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1038"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1038"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1038\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1056,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1038\/revisions\/1056"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1038"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1038"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1038"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1037,
        "date": "2020-07-23T10:53:22",
        "date_gmt": "2020-07-23T10:53:22",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1037"
        },
        "modified": "2020-07-23T10:53:22",
        "modified_gmt": "2020-07-23T10:53:22",
        "slug": "executing-tests",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/executing-tests\/",
        "title": {
            "rendered": "Executing Tests"
        },
        "content": {
            "rendered": "\n<p>The test cases are executed using&nbsp;<strong>JUnitCore<\/strong>&nbsp;class. JUnitCore is a facade for running tests. It supports running JUnit 4 tests, JUnit 3.8.x tests, and mixtures. To run tests from the command line, run java org.junit.runner.JUnitCore &lt;TestClass&gt;. For one-shot test runs, use the static method runClasses(Class[]).<\/p>\n\n\n\n<p>Following is the declaration for\u00a0<strong>org.junit.runner.JUnitCore<\/strong>\u00a0class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class JUnitCore extends java.lang.Object\n<\/code><\/pre>\n\n\n\n<p>Here we will see how to execute the tests with the help of JUnitCore.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,\u00a0<strong>MessageUtil.java<\/strong>, in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\n* This class prints the given message on console.\n*\/\n\npublic class MessageUtil {\n\n   private String message;\n\n   \/\/Constructor\n   \/\/@param message to be printed\n   public MessageUtil(String message){\n      this.message = message;\n   }\n      \n   \/\/ prints the message\n   public String printMessage(){\n      System.out.println(message);\n      return message;\n   }   \n\t\n}  <\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<ul><li>Create a java test class, say, TestJunit.java.<\/li><li>Add a test method testPrintMessage() to your test class.<\/li><li>Add an Annotaion @Test to the method testPrintMessage().<\/li><li>Implement the test condition and check the condition using assertEquals API of JUnit.<\/li><\/ul>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestJunit.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit {\n\t\n   String message = \"Hello World\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n\n   @Test\n   public void testPrintMessage() {\n      assertEquals(message,messageUtil.printMessage());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Runner Class<\/h2>\n\n\n\n<p>Now create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s). It imports the JUnitCore class and uses the runClasses() method that takes the test class name as its parameter.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  <\/code><\/pre>\n\n\n\n<p>Compile the Test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac MessageUtil.java TestJunit.java TestRunner.java<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World\ntrue<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The test cases are executed using&nbsp;JUnitCore&nbsp;class. JUnitCore is a facade for running tests. It supports running JUnit 4 tests, JUnit 3.8.x tests, and mixtures. To run tests from the command line, run java org.junit.runner.JUnitCore &lt;TestClass&gt;. For one-shot test runs, use the static method runClasses(Class[]). Following is the declaration for\u00a0org.junit.runner.JUnitCore\u00a0class: Here we will see how to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1037"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1037"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1037\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1057,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1037\/revisions\/1057"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1037"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1037"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1037"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1036,
        "date": "2020-07-23T10:55:19",
        "date_gmt": "2020-07-23T10:55:19",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1036"
        },
        "modified": "2020-07-23T10:55:19",
        "modified_gmt": "2020-07-23T10:55:19",
        "slug": "suite-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/suite-test\/",
        "title": {
            "rendered": "Suite Test"
        },
        "content": {
            "rendered": "\n<p><strong>Test suite<\/strong>&nbsp;is used to bundle a few unit test cases and run them together. In JUnit, both&nbsp;<strong>@RunWith<\/strong>&nbsp;and&nbsp;<strong>@Suite<\/strong>&nbsp;annotations are used to run the suite tests. This chapter takes an example having two test classes,&nbsp;<strong>TestJunit1<\/strong>&nbsp;&amp;&nbsp;<strong>TestJunit2<\/strong>, that run together using Test Suite.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,\u00a0<strong>MessageUtil.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\n* This class prints the given message on console.\n*\/\n\npublic class MessageUtil {\n\n   private String message;\n\n   \/\/Constructor\n   \/\/@param message to be printed\n   public MessageUtil(String message){\n      this.message = message; \n   }\n\n   \/\/ prints the message\n   public String printMessage(){\n      System.out.println(message);\n      return message;\n   }   \n\n   \/\/ add \"Hi!\" to the message\n   public String salutationMessage(){\n      message = \"Hi!\" + message;\n      System.out.println(message);\n      return message;\n   }   \n}  <\/code><\/pre>\n\n\n\n<h2>Create Test Case Classes<\/h2>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestJunit1.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport org.junit.Ignore;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit1 {\n\n   String message = \"Robert\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n   \n   @Test\n   public void testPrintMessage() {\t\n      System.out.println(\"Inside testPrintMessage()\");    \n      assertEquals(message, messageUtil.printMessage());     \n   }\n}<\/code><\/pre>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestJunit2.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport org.junit.Ignore;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit2 {\n\n   String message = \"Robert\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n \n   @Test\n   public void testSalutationMessage() {\n      System.out.println(\"Inside testSalutationMessage()\");\n      message = \"Hi!\" + \"Robert\";\n      assertEquals(message,messageUtil.salutationMessage());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Suite Class<\/h2>\n\n\n\n<ul><li>Create a java class.<\/li><li>Attach @RunWith(Suite.class) Annotation with the class.<\/li><li>Add reference to JUnit test classes using @Suite.SuiteClasses annotation.<\/li><\/ul>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestSuite.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\n\n@RunWith(Suite.class)\n\n@Suite.SuiteClasses({\n   TestJunit1.class,\n   TestJunit2.class\n})\n\npublic class JunitTestSuite {   \n}  <\/code><\/pre>\n\n\n\n<h2>Create Test Runner Class<\/h2>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(JunitTestSuite.class);\n\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  <\/code><\/pre>\n\n\n\n<p>Compile all the java classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac MessageUtil.java TestJunit1.java \nTestJunit2.java JunitTestSuite.java TestRunner.java<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside testPrintMessage()\nRobert\nInside testSalutationMessage()\nHi Robert\ntrue<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Test suite&nbsp;is used to bundle a few unit test cases and run them together. In JUnit, both&nbsp;@RunWith&nbsp;and&nbsp;@Suite&nbsp;annotations are used to run the suite tests. This chapter takes an example having two test classes,&nbsp;TestJunit1&nbsp;&amp;&nbsp;TestJunit2, that run together using Test Suite. Create a Class Create a java class to be tested, say,\u00a0MessageUtil.java\u00a0in C:\\>JUNIT_WORKSPACE. Create Test Case Classes [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1036"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1036"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1036\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1058,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1036\/revisions\/1058"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1036"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1036"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1036"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1035,
        "date": "2020-07-23T10:57:13",
        "date_gmt": "2020-07-23T10:57:13",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1035"
        },
        "modified": "2020-07-23T10:57:13",
        "modified_gmt": "2020-07-23T10:57:13",
        "slug": "ignore-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/ignore-test\/",
        "title": {
            "rendered": "Ignore Test"
        },
        "content": {
            "rendered": "\n<p>Sometimes it so happens that our code is not completely ready while running a test case. As a result, the test case fails. The&nbsp;<strong>@Ignore<\/strong>&nbsp;annotation helps in this scenario.<\/p>\n\n\n\n<ul><li>A test method annotated with @Ignore will not be executed.<\/li><li>If a test class is annotated with @Ignore, then none of its test methods will be executed.<\/li><\/ul>\n\n\n\n<p>Now let&#8217;s see @Ignore in action.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,\u00a0<strong>MessageUtil.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\n* This class prints the given message on console.\n*\/\n\npublic class MessageUtil {\n\n   private String message;\n\n   \/\/Constructor\n   \/\/@param message to be printed\n   public MessageUtil(String message){\n      this.message = message; \n   }\n\n   \/\/ prints the message\n   public String printMessage(){\n      System.out.println(message);\n      return message;\n   }   \n\n   \/\/ add \"Hi!\" to the message\n   public String salutationMessage(){\n      message = \"Hi!\" + message;\n      System.out.println(message);\n      return message;\n   }   \n\t\n}  <\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<ul><li>Create a java test class, say, TestJunit.java.<\/li><li>Add a test method testPrintMessage() or testSalutationMessage() to your test class.<\/li><li>Add an Annotaion @Ignore to method testPrintMessage().<\/li><\/ul>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestJunit.java<\/strong>\u00a0in C:\\ JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport org.junit.Ignore;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit {\n\n   String message = \"Robert\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n   \n   @Ignore\n   @Test\n   public void testPrintMessage() {\n      System.out.println(\"Inside testPrintMessage()\");\n      message = \"Robert\";\n      assertEquals(message,messageUtil.printMessage());\n   }\n\n   @Test\n   public void testSalutationMessage() {\n      System.out.println(\"Inside testSalutationMessage()\");\n      message = \"Hi!\" + \"Robert\";\n      assertEquals(message,messageUtil.salutationMessage());\n   }\n\t\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Runner Class<\/h2>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  <\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil, Test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac MessageUtil.java TestJunit.java TestRunner.java<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will not run the testPrintMessage() test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output. testPrintMessage() test case is not tested.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside testSalutationMessage()\nHi!Robert\ntrue\n\ufeff<\/code><\/pre>\n\n\n\n<p>Now, update TestJunit in C:\\>JUNIT_WORKSPACE to ignore all test cases. Add @Ignore at class level.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport org.junit.Ignore;\nimport static org.junit.Assert.assertEquals;\n\n@Ignore\npublic class TestJunit {\n\n   String message = \"Robert\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n     \n   @Test\n   public void testPrintMessage() {\n      System.out.println(\"Inside testPrintMessage()\");\n      message = \"Robert\";\n      assertEquals(message,messageUtil.printMessage());\n   }\n\n   @Test\n   public void testSalutationMessage() {\n      System.out.println(\"Inside testSalutationMessage()\");\n      message = \"Hi!\" + \"Robert\";\n      assertEquals(message,messageUtil.salutationMessage());\n   }\n\t\n}<\/code><\/pre>\n\n\n\n<p>Compile the test case using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac TestJunit.java\n<\/code><\/pre>\n\n\n\n<p>Keep your Test Runner unchanged as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will not run any test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output. No test case is tested.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>true<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Sometimes it so happens that our code is not completely ready while running a test case. As a result, the test case fails. The&nbsp;@Ignore&nbsp;annotation helps in this scenario. A test method annotated with @Ignore will not be executed. If a test class is annotated with @Ignore, then none of its test methods will be executed. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1035"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1035"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1035\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1059,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1035\/revisions\/1059"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1035"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1035"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1035"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1034,
        "date": "2020-07-23T10:59:31",
        "date_gmt": "2020-07-23T10:59:31",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1034"
        },
        "modified": "2020-07-23T10:59:31",
        "modified_gmt": "2020-07-23T10:59:31",
        "slug": "time-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/time-test\/",
        "title": {
            "rendered": "Time Test"
        },
        "content": {
            "rendered": "\n<p>JUnit provides a handy option of Timeout. If a test case takes more time than the specified number of milliseconds, then JUnit will automatically mark it as failed. The&nbsp;<strong>timeout<\/strong>&nbsp;parameter is used along with @Test annotation. Let us see the @Test(timeout) in action.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in C:\\&gt;JUNIT_WORKSPACE.<\/p>\n\n\n\n<p>Add an infinite while loop inside the printMessage() method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\n* This class prints the given message on console.\n*\/\n\npublic class MessageUtil {\n\n   private String message;\n\n   \/\/Constructor\n   \/\/@param message to be printed\n   public MessageUtil(String message){\n      this.message = message; \n   }\n\n   \/\/ prints the message\n   public void printMessage(){\n      System.out.println(message);\n      while(true);\n   }   \n\n   \/\/ add \"Hi!\" to the message\n   public String salutationMessage(){\n      message = \"Hi!\" + message;\n      System.out.println(message);\n      return message;\n   }   \n}  \t<\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<p>Create a java test class, say,&nbsp;<strong>TestJunit.java<\/strong>. Add a timeout of 1000 to testPrintMessage() test case.<\/p>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestJunit.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport org.junit.Ignore;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit {\n\n   String message = \"Robert\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n   \n   @Test(timeout = 1000)\n   public void testPrintMessage() {\t\n      System.out.println(\"Inside testPrintMessage()\");     \n      messageUtil.printMessage();     \n   }\n\n   @Test\n   public void testSalutationMessage() {\n      System.out.println(\"Inside testSalutationMessage()\");\n      message = \"Hi!\" + \"Robert\";\n      assertEquals(message,messageUtil.salutationMessage());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Runner Class<\/h2>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  <\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil, Test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac MessageUtil.java TestJunit.java TestRunner.java<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test cases defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output. testPrintMessage() test case will mark the unit testing failed.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside testPrintMessage()\nRobert\nInside testSalutationMessage()\nHi!Robert\ntestPrintMessage(TestJunit): test timed out after 1000 milliseconds\nfalse<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JUnit provides a handy option of Timeout. If a test case takes more time than the specified number of milliseconds, then JUnit will automatically mark it as failed. The&nbsp;timeout&nbsp;parameter is used along with @Test annotation. Let us see the @Test(timeout) in action. Create a Class Create a java class to be tested, say,&nbsp;MessageUtil.java&nbsp;in C:\\&gt;JUNIT_WORKSPACE. Add [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1034"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1034"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1034\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1060,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1034\/revisions\/1060"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1034"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1034"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1034"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1063,
        "date": "2020-07-23T11:00:59",
        "date_gmt": "2020-07-23T11:00:59",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1063"
        },
        "modified": "2020-07-23T11:00:59",
        "modified_gmt": "2020-07-23T11:00:59",
        "slug": "exceptions-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/exceptions-test\/",
        "title": {
            "rendered": "Exceptions Test"
        },
        "content": {
            "rendered": "\n<p>JUnit provides an option of tracing the exception handling of code. You can test whether the code throws a desired exception or not. The&nbsp;<strong>expected<\/strong>&nbsp;parameter is used along with @Test annotation. Let us see @Test(expected) in action.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in C:\\&gt; JUNIT_WORKSPACE.<\/p>\n\n\n\n<p>Add an error condition inside the printMessage() method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\n* This class prints the given message on console.\n*\/\n\npublic class MessageUtil {\n\n   private String message;\n\n   \/\/Constructor\n   \/\/@param message to be printed\n   public MessageUtil(String message){\n      this.message = message; \n   }\n\n   \/\/ prints the message\n   public void printMessage(){\n      System.out.println(message);\n      int a = 0;\n      int b = 1\/a;\n   }   \n\n   \/\/ add \"Hi!\" to the message\n   public String salutationMessage(){\n      message = \"Hi!\" + message;\n      System.out.println(message);\n      return message;\n   }   \n}  <\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<p>Create a java test class called&nbsp;<strong>TestJunit.java<\/strong>. Add an expected exception ArithmeticException to the testPrintMessage() test case.<\/p>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestJunit.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\nimport org.junit.Ignore;\nimport static org.junit.Assert.assertEquals;\n\npublic class TestJunit {\n\n   String message = \"Robert\";\t\n   MessageUtil messageUtil = new MessageUtil(message);\n   \n   @Test(expected = ArithmeticException.class)\n   public void testPrintMessage() {\t\n      System.out.println(\"Inside testPrintMessage()\");     \n      messageUtil.printMessage();     \n   }\n\n   @Test\n   public void testSalutationMessage() {\n      System.out.println(\"Inside testSalutationMessage()\");\n      message = \"Hi!\" + \"Robert\";\n      assertEquals(message,messageUtil.salutationMessage());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Runner Class<\/h2>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(TestJunit.class);\n\t\t\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  <\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil, Test case and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac MessageUtil.java TestJunit.java TestRunner.java<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test cases defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output. testPrintMessage() test case will be passed.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Inside testPrintMessage()\nRobert\nInside testSalutationMessage()\nHi!Robert\ntrue<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JUnit provides an option of tracing the exception handling of code. You can test whether the code throws a desired exception or not. The&nbsp;expected&nbsp;parameter is used along with @Test annotation. Let us see @Test(expected) in action. Create a Class Create a java class to be tested, say,&nbsp;MessageUtil.java&nbsp;in C:\\&gt; JUNIT_WORKSPACE. Add an error condition inside the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1063"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1063"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1063\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1064,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1063\/revisions\/1064"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1063"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1063"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1063"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1062,
        "date": "2020-07-23T11:08:34",
        "date_gmt": "2020-07-23T11:08:34",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1062"
        },
        "modified": "2020-07-23T11:08:34",
        "modified_gmt": "2020-07-23T11:08:34",
        "slug": "parameterized-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/parameterized-test\/",
        "title": {
            "rendered": "Parameterized Test"
        },
        "content": {
            "rendered": "\n<p>JUnit 4 has introduced a new feature called&nbsp;<strong>parameterized tests<\/strong>. Parameterized tests allow a developer to run the same test over and over again using different values. There are five steps that you need to follow to create a parameterized test.<\/p>\n\n\n\n<ul><li>Annotate test class with @RunWith(Parameterized.class).<\/li><li>Create a public static method annotated with @Parameters that returns a Collection of Objects (as Array) as test data set.<\/li><li>Create a public constructor that takes in what is equivalent to one &#8220;row&#8221; of test data.<\/li><li>Create an instance variable for each &#8220;column&#8221; of test data.<\/li><li>Create your test case(s) using the instance variables as the source of the test data.<\/li><\/ul>\n\n\n\n<p>The test case will be invoked once for each row of data. Let us see parameterized tests in action.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,\u00a0<strong>PrimeNumberChecker.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PrimeNumberChecker {\n   public Boolean validate(final Integer primeNumber) {\n      for (int i = 2; i &lt; (primeNumber \/ 2); i++) {\n         if (primeNumber % i == 0) {\n            return false;\n         }\n      }\n      return true;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Create Parameterized Test Case Class<\/h2>\n\n\n\n<p>Create a java test class, say,\u00a0<strong>PrimeNumberCheckerTest.java<\/strong>. Create a java class file named\u00a0<strong>PrimeNumberCheckerTest.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Arrays;\nimport java.util.Collection;\n \nimport org.junit.Test;\nimport org.junit.Before;\n\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\nimport org.junit.runner.RunWith;\nimport static org.junit.Assert.assertEquals;\n\n@RunWith(Parameterized.class)\npublic class PrimeNumberCheckerTest {\n   private Integer inputNumber;\n   private Boolean expectedResult;\n   private PrimeNumberChecker primeNumberChecker;\n\n   @Before\n   public void initialize() {\n      primeNumberChecker = new PrimeNumberChecker();\n   }\n\n   \/\/ Each parameter should be placed as an argument here\n   \/\/ Every time runner triggers, it will pass the arguments\n   \/\/ from parameters we defined in primeNumbers() method\n\t\n   public PrimeNumberCheckerTest(Integer inputNumber, Boolean expectedResult) {\n      this.inputNumber = inputNumber;\n      this.expectedResult = expectedResult;\n   }\n\n   @Parameterized.Parameters\n   public static Collection primeNumbers() {\n      return Arrays.asList(new Object&#91;]&#91;] {\n         { 2, true },\n         { 6, false },\n         { 19, true },\n         { 22, false },\n         { 23, true }\n      });\n   }\n\n   \/\/ This test will run 4 times since we have 5 parameters defined\n   @Test\n   public void testPrimeNumberChecker() {\n      System.out.println(\"Parameterized Number is : \" + inputNumber);\n      assertEquals(expectedResult, \n      primeNumberChecker.validate(inputNumber));\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Runner Class<\/h2>\n\n\n\n<p>Create a java class file named\u00a0<strong>TestRunner.java<\/strong>\u00a0in C:\\>JUNIT_WORKSPACE to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.runner.JUnitCore;\nimport org.junit.runner.Result;\nimport org.junit.runner.notification.Failure;\n\npublic class TestRunner {\n   public static void main(String&#91;] args) {\n      Result result = JUnitCore.runClasses(PrimeNumberCheckerTest.class);\n\n      for (Failure failure : result.getFailures()) {\n         System.out.println(failure.toString());\n      }\n\t\t\n      System.out.println(result.wasSuccessful());\n   }\n}  <\/code><\/pre>\n\n\n\n<p>Compile the PrimeNumberChecker, PrimeNumberCheckerTest and Test Runner classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>javac PrimeNumberChecker.java PrimeNumberCheckerTest.java\nTestRunner.java<\/code><\/pre>\n\n\n\n<p>Now run the Test Runner, which will run the test cases defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JUNIT_WORKSPACE>java TestRunner\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Parameterized Number is : 2\nParameterized Number is : 6\nParameterized Number is : 19\nParameterized Number is : 22\nParameterized Number is : 23\ntrue<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JUnit 4 has introduced a new feature called&nbsp;parameterized tests. Parameterized tests allow a developer to run the same test over and over again using different values. There are five steps that you need to follow to create a parameterized test. Annotate test class with @RunWith(Parameterized.class). Create a public static method annotated with @Parameters that returns [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            19
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1062"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1062"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1062\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1065,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1062\/revisions\/1065"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1062"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1062"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1062"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]