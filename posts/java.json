[
    {
        "id": 4404,
        "date": "2020-06-18T09:49:13",
        "date_gmt": "2020-06-18T09:49:13",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=105"
        },
        "modified": "2020-06-18T09:49:13",
        "modified_gmt": "2020-06-18T09:49:13",
        "slug": "first-java-program",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/first-java-program/",
        "title": {
            "rendered": "First Java Program"
        },
        "content": {
            "rendered": "\n<p>In this page, we will learn how to write the simple program of java. We can write a simple hello java program easily after installing the JDK.</p>\n\n\n\n<p>To create a simple java program, you need to create a class that contains the main method. Let&#8217;s understand the requirement first.</p>\n\n\n\n<h3>The requirement for Java Hello World Example</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>For executing any java program, you need toInstall the JDK if you don&#8217;t have installed it,&nbsp;download the JDK&nbsp;and install it.Set path of the jdk/bin directory.&nbsp;http://www.codemeals.com/how-to-set-path-in-javaCreate the java programCompile and run the java program</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Creating Hello World Example</h3>\n\n\n\n<p>Let&#8217;s create the hello java program:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Simple{  \n    public static void main(String args&#91;]){  \n     System.out.println(\"Hello Java\");  \n    }  \n}  </code></pre>\n\n\n\n<p>Test it Now</p>\n\n\n\n<p>save this file as Simple.java</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>To compile:</strong></td><td>javac Simple.java</td></tr><tr><td><strong>To execute:</strong></td><td>java Simple</td></tr></tbody></table></figure>\n\n\n\n<pre class=\"wp-block-preformatted\"><strong>Output:</strong>Hello Java\n</pre>\n\n\n\n<p><strong>Compilation Flow:</strong></p>\n\n\n\n<p>When we compile Java program using javac tool, java compiler converts the source code into byte code.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/javacodecompile.png\" alt=\"Java How to Compile\"/></figure>\n\n\n\n<h2>Parameters used in First Java Program</h2>\n\n\n\n<p>Let&#8217;s see what is the meaning of class, public, static, void, main, String[], System.out.println().</p>\n\n\n\n<ul><li><strong>class</strong>&nbsp;keyword is used to declare a class in java.</li><li><strong>public</strong>&nbsp;keyword is an access modifier which represents visibility. It means it is visible to all.</li><li><strong>static</strong>&nbsp;is a keyword. If we declare any method as static, it is known as the static method. The core advantage of the static method is that there is no need to create an object to invoke the static method. The main method is executed by the JVM, so it doesn&#8217;t require to create an object to invoke the main method. So it saves memory.</li><li><strong>void</strong>&nbsp;is the return type of the method. It means it doesn&#8217;t return any value.</li><li><strong>main</strong>&nbsp;represents the starting point of the program.</li><li><strong>String[] args</strong>&nbsp;is used for command line argument. We will learn it later.</li><li><strong>System.out.println()</strong>&nbsp;is used to print statement. Here, System is a class, out is the object of PrintStream class, println() is the method of PrintStream class. We will learn about the internal working of System.out.println statement later.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>To write the simple program, you need to open notepad by&nbsp;<strong>start menu -&gt; All Programs -&gt; Accessories -&gt; notepad</strong>&nbsp;and write a simple program as displayed below:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/simpleprogram.jpg\" alt=\"The first program of java\"/></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>As displayed in the above diagram, write the simple program of java in notepad and saved it as Simple.java. To compile and run this program, you need to open the command prompt by&nbsp;<strong>start menu -&gt; All Programs -&gt; Accessories -&gt; command prompt</strong>.</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/simpleprogram2.jpg\" alt=\"how to compile and run a simple program of java\"/></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>To compile and run the above program, go to your current directory first; my current directory is c:\\new. Write here:</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>To compile:</strong></td><td>javac Simple.java</td></tr><tr><td><strong>To execute:</strong></td><td>java Simple</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>How many ways can we write a Java program</h2>\n\n\n\n<p>There are many ways to write a Java program. The modifications that can be done in a Java program are given below:</p>\n\n\n\n<p><strong>1) By changing the sequence of the modifiers, method prototype is not changed in Java.</strong></p>\n\n\n\n<p>Let&#8217;s see the simple code of the main method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>static public void main(String args&#91;])  </code></pre>\n\n\n\n<p><strong>2) The subscript notation in Java array can be used after type, before the variable or after the variable.</strong></p>\n\n\n\n<p>Let&#8217;s see the different codes to write the main method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static void main(String&#91;] args)  \npublic static void main(String &#91;]args)  \npublic static void main(String args&#91;])  </code></pre>\n\n\n\n<p><strong>3) You can provide var-args support to the main method by passing 3 ellipses (dots)</strong></p>\n\n\n\n<p>Let&#8217;s see the simple code of using var-args in the main method. We will learn about var-args later in Java New Features chapter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static void main(String... args)  </code></pre>\n\n\n\n<p><strong>4) Having a semicolon at the end of class is optional in Java.</strong></p>\n\n\n\n<p>Let&#8217;s see the simple code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nstatic public void main(String... args){  \nSystem.out.println(\"hello java4\");  \n}  \n};  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Valid java main method signature</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public static void main(String&#91;] args)  \npublic static void main(String &#91;]args)  \npublic static void main(String args&#91;])  \npublic static void main(String... args)  \nstatic public void main(String&#91;] args)  \npublic static final void main(String&#91;] args)  \nfinal public static void main(String&#91;] args)  \nfinal strictfp public static void main(String&#91;] args)  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Invalid java main method signature</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public void main(String&#91;] args)  \nstatic void main(String&#91;] args)  \npublic void static main(String&#91;] args)  \nabstract public static void main(String&#91;] args)  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Resolving an error &#8220;javac is not recognized as an internal or external command&#8221;?</h3>\n\n\n\n<p>If there occurs a problem like displayed in the below figure, you need to set path. Since DOS doesn&#8217;t know javac or java, we need to set path. The path is not required in such a case if you save your program inside the JDK/bin directory. However, it is an excellent approach to set the path. Click here for&nbsp;How to set path in java.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/simpleprogram3.jpg\" alt=\"how to resolve the problem of a hello world program in java\"/></figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this page, we will learn how to write the simple program of java. We can write a simple hello java program easily after installing the JDK. To create a simple java program, you need to create a class that contains the main method. Let&#8217;s understand the requirement first. The requirement for Java Hello World [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18,
            1
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4404"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4404"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4404/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4404"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4404"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4404"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4402,
        "date": "2020-06-18T09:52:17",
        "date_gmt": "2020-06-18T09:52:17",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=103"
        },
        "modified": "2020-06-18T09:52:17",
        "modified_gmt": "2020-06-18T09:52:17",
        "slug": "internal-details",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/internal-details/",
        "title": {
            "rendered": "Internal Details"
        },
        "content": {
            "rendered": "\n<p>In the previous page, we have learnt about the first program, how to compile and run the first java program. Here, we are going to learn, what happens while compiling and running the java program. Moreover, we will see some question based on the first program.</p>\n\n\n\n<h2>What happens at compile time?</h2>\n\n\n\n<p>At compile time, java file is compiled by Java Compiler (It does not interact with OS) and converts the java code into bytecode.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/javacodecompile.png\" alt=\"compilation of simple java program\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>What happens at runtime?</h2>\n\n\n\n<p>At runtime, following steps are performed:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/java-runtime-processing.png\" alt=\"Java Runtime Processing\"/></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Classloader:&nbsp;</strong>is the subsystem of JVM that is used to load class files.</td></tr><tr><td><strong>Bytecode Verifier:&nbsp;</strong>checks the code fragments for illegal code that can violate access right to objects.</td></tr><tr><td><strong>Interpreter:&nbsp;</strong>read bytecode stream then execute the instructions.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Q) Can you save a java source file by other name than the class name?</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Yes, if the class is not public. It is explained in the figure given below:</td></tr><tr><td><img src=\"https://static.javatpoint.com/images/another.JPG\" alt=\"how to save simple java program by another name\"></td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>To compile:</strong></td><td>javac Hard.java</td></tr><tr><td><strong>To execute:</strong></td><td>java Simple</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Q) Can you have multiple classes in a java source file?</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Yes, like the figure given below illustrates:</td></tr><tr><td><img src=\"https://static.javatpoint.com/images/core/d.png\" alt=\"how to contain multiple class in simple java program\"></td></tr></tbody></table></figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In the previous page, we have learnt about the first program, how to compile and run the first java program. Here, we are going to learn, what happens while compiling and running the java program. Moreover, we will see some question based on the first program. What happens at compile time? At compile time, java [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4402"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4402"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4402/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4402"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4402"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4402"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4401,
        "date": "2020-06-18T09:56:22",
        "date_gmt": "2020-06-18T09:56:22",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=102"
        },
        "modified": "2020-06-18T09:56:22",
        "modified_gmt": "2020-06-18T09:56:22",
        "slug": "how-to-set-path-in-java",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/how-to-set-path-in-java/",
        "title": {
            "rendered": "How to set path in Java"
        },
        "content": {
            "rendered": "\n<p>The path is required to be set for using tools such as javac, java, etc.</p>\n\n\n\n<p>If you are saving the Java source file inside the JDK/bin directory, the path is not required to be set because all the tools will be available in the current directory.</p>\n\n\n\n<p>However, if you have your Java file outside the JDK/bin folder, it is necessary to set the path of JDK.</p>\n\n\n\n<p>There are two ways to set the path in Java:</p>\n\n\n\n<ol><li>Temporary</li><li>Permanent</li></ol>\n\n\n\n<h2>1) How to set the Temporary Path of JDK in Windows</h2>\n\n\n\n<p>To set the temporary path of JDK, you need to follow the following steps:</p>\n\n\n\n<ul><li>Open the command prompt</li><li>Copy the path of the JDK/bin directory</li><li>Write in command prompt: set path=copied_path</li></ul>\n\n\n\n<h3>For Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>set path=C:\\Program Files\\Java\\jdk1.6.0_23\\bin\n</code></pre>\n\n\n\n<p>Let&#8217;s see it in the figure given below:</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/temporarypath.jpg\" alt=\"How to set the path in Java\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>2) How to set Permanent Path of JDK in Windows</h2>\n\n\n\n<p>For setting the permanent path of JDK, you need to follow these steps:</p>\n\n\n\n<ul><li>Go to MyComputer properties -&gt; advanced tab -&gt; environment variables -&gt; new tab of user variable -&gt; write path in variable name -&gt; write path of bin folder in variable value -&gt; ok -&gt; ok -&gt; ok</li></ul>\n\n\n\n<h3>For Example:</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>1) Go to MyComputer properties</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path1.JPG\" alt=\"how to set path in java\"></td></tr><tr><td><strong>2) Click on the advanced tab</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path2.JPG\" alt=\"how to set path in java\"></td></tr><tr><td><strong>3) Click on environment variables</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path3.JPG\" alt=\"how to set path in java \"></td></tr><tr><td><strong>4) Click on the new tab of user variables</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path4.JPG\" alt=\"how to set path in java\"></td></tr><tr><td><strong>5) Write the path in the variable name</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path5.JPG\" alt=\"how to set path in java\"></td></tr><tr><td><strong>6) Copy the path of bin folder</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path6.JPG\" alt=\"how to set path in java\"></td></tr><tr><td><strong>7) Paste path of bin folder in the variable value</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path7.JPG\" alt=\"how to set path in java\"></td></tr><tr><td><strong>8) Click on ok button</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path8.JPG\" alt=\"how to set path in java\"></td></tr><tr><td><strong>9) Click on ok button</strong></td></tr><tr><td><img src=\"https://static.javatpoint.com/images/path9.JPG\" alt=\"how to set path in java\"></td></tr></tbody></table></figure>\n\n\n\n<p>Now your permanent path is set. You can now execute any program of java from any drive.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Setting Java Path in Linux OS</h3>\n\n\n\n<p>Setting path in Linux OS is the same as setting the path in the Windows OS. But, here we use the export tool rather than set. Let&#8217;s see how to set path in Linux OS:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export PATH=$PATH:/home/jdk1.6.01/bin/\n</code></pre>\n\n\n\n<p>Here, we have installed the JDK in the home directory under Root (/home).</p>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The path is required to be set for using tools such as javac, java, etc. If you are saving the Java source file inside the JDK/bin directory, the path is not required to be set because all the tools will be available in the current directory. However, if you have your Java file outside the [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4401"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4401"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4401/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4401"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4401"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4401"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4403,
        "date": "2020-06-18T09:57:02",
        "date_gmt": "2020-06-18T09:57:02",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=104"
        },
        "modified": "2020-06-18T09:57:02",
        "modified_gmt": "2020-06-18T09:57:02",
        "slug": "difference-between-jdk-jre-and-jvm",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/difference-between-jdk-jre-and-jvm/",
        "title": {
            "rendered": "Difference between JDK, JRE, and JVM"
        },
        "content": {
            "rendered": "\n<p>We must understand the differences between JDK, JRE, and JVM before proceeding further to&nbsp;Java. See the brief overview of JVM here.</p>\n\n\n\n<p>If you want to get the detailed knowledge of Java Virtual Machine, move to the next page. Firstly, let&#8217;s see the differences between the JDK, JRE, and JVM.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>JVM</h3>\n\n\n\n<p>JVM (Java Virtual Machine) is an abstract machine. It is called a virtual machine because it doesn&#8217;t physically exist. It is a specification that provides a runtime environment in which Java bytecode can be executed. It can also run those programs which are written in other languages and compiled to Java bytecode.</p>\n\n\n\n<p>JVMs are available for many hardware and software platforms. JVM, JRE, and JDK are platform dependent because the configuration of each&nbsp;<a href=\"https://www.javatpoint.com/os-tutorial\">OS</a>&nbsp;is different from each other. However, Java is platform independent. There are three notions of the JVM:&nbsp;<em>specification</em>,&nbsp;<em>implementation</em>, and&nbsp;<em>instance</em>.</p>\n\n\n\n<p>The JVM performs the following main tasks:</p>\n\n\n\n<ul><li>Loads code</li><li>Verifies code</li><li>Executes code</li><li>Provides runtime environment</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>JRE</h3>\n\n\n\n<p>JRE is an acronym for Java Runtime Environment. It is also written as Java RTE. The Java Runtime Environment is a set of software tools which are used for developing Java applications. It is used to provide the runtime environment. It is the implementation of JVM. It physically exists. It contains a set of libraries + other files that JVM uses at runtime.</p>\n\n\n\n<p>The implementation of JVM is also actively released by other companies besides Sun Micro Systems.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/jre2.png\" alt=\"JRE\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>JDK</h3>\n\n\n\n<p>JDK is an acronym for Java Development Kit. The Java Development Kit (JDK) is a software development environment which is used to develop Java applications and applets. It physically exists. It contains JRE + development tools.</p>\n\n\n\n<p>JDK is an implementation of any one of the below given Java Platforms released by Oracle Corporation:</p>\n\n\n\n<ul><li>Standard Edition Java Platform</li><li>Enterprise Edition Java Platform</li><li>Micro Edition Java Platform</li></ul>\n\n\n\n<p>The JDK contains a private Java Virtual Machine (JVM) and a few other resources such as an interpreter/loader (java), a compiler (javac), an archiver (jar), a documentation generator (Javadoc), etc. to complete the development of a Java Application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/jdk2.png\" alt=\"JDK\"/></figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We must understand the differences between JDK, JRE, and JVM before proceeding further to&nbsp;Java. See the brief overview of JVM here. If you want to get the detailed knowledge of Java Virtual Machine, move to the next page. Firstly, let&#8217;s see the differences between the JDK, JRE, and JVM. JVM JVM (Java Virtual Machine) is [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4403"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4403"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4403/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4403"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4403"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4403"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4405,
        "date": "2020-06-18T09:58:32",
        "date_gmt": "2020-06-18T09:58:32",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=106"
        },
        "modified": "2020-06-18T09:58:32",
        "modified_gmt": "2020-06-18T09:58:32",
        "slug": "jvm",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/jvm/",
        "title": {
            "rendered": "JVM"
        },
        "content": {
            "rendered": "\n<p>JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides runtime environment in which java bytecode can be executed.</p>\n\n\n\n<p>JVMs are available for many hardware and software platforms (i.e. JVM is platform dependent).</p>\n\n\n\n<h3>What is JVM</h3>\n\n\n\n<p>It is:</p>\n\n\n\n<ol><li><strong>A specification</strong>&nbsp;where working of Java Virtual Machine is specified. But implementation provider is independent to choose the algorithm. Its implementation has been provided by Oracle and other companies.</li><li><strong>An implementation</strong>&nbsp;Its implementation is known as JRE (Java Runtime Environment).</li><li><strong>Runtime Instance</strong>&nbsp;Whenever you write java command on the command prompt to run the java class, an instance of JVM is created.</li></ol>\n\n\n\n<h3>What it does</h3>\n\n\n\n<p>The JVM performs following operation:</p>\n\n\n\n<ul><li>Loads code</li><li>Verifies code</li><li>Executes code</li><li>Provides runtime environment</li></ul>\n\n\n\n<p>JVM provides definitions for the:</p>\n\n\n\n<ul><li>Memory area</li><li>Class file format</li><li>Register set</li><li>Garbage-collected heap</li><li>Fatal error reporting etc.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>JVM Architecture</h2>\n\n\n\n<p>Let&#8217;s understand the internal architecture of JVM. It contains classloader, memory area, execution engine etc.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/jvm-architecture.png\" alt=\"JVM Architecture\"/></figure>\n\n\n\n<h3>1) Classloader</h3>\n\n\n\n<p>Classloader is a subsystem of JVM which is used to load class files. Whenever we run the java program, it is loaded first by the classloader. There are three built-in classloaders in Java.</p>\n\n\n\n<ol><li><strong>Bootstrap ClassLoader</strong>: This is the first classloader which is the super class of Extension classloader. It loads the&nbsp;<em>rt.jar</em>&nbsp;file which contains all class files of Java Standard Edition like java.lang package classes, java.net package classes, java.util package classes, java.io package classes, java.sql package classes etc.</li><li><strong>Extension ClassLoader</strong>: This is the child classloader of Bootstrap and parent classloader of System classloader. It loades the jar files located inside&nbsp;<em>$JAVA_HOME/jre/lib/ext</em>&nbsp;directory.</li><li><strong>System/Application ClassLoader</strong>: This is the child classloader of Extension classloader. It loads the classfiles from classpath. By default, classpath is set to current directory. You can change the classpath using &#8220;-cp&#8221; or &#8220;-classpath&#8221; switch. It is also known as Application classloader.</li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>//Let's see an example to print the classloader name  \npublic class ClassLoaderExample  \n{  \n    public static void main(String&#91;] args)  \n    {  \n        // Let's print the classloader name of current class.   \n        //Application/System classloader will load this class  \n        Class c=ClassLoaderExample.class;  \n        System.out.println(c.getClassLoader());  \n        //If we print the classloader name of String, it will print null because it is an  \n        //in-built class which is found in rt.jar, so it is loaded by Bootstrap classloader  \n        System.out.println(String.class.getClassLoader());  \n    }  \n}    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sun.misc.Launcher$AppClassLoader@4e0e2f2a\nnull\n﻿</code></pre>\n\n\n\n<p>These are the internal classloaders provided by Java. If you want to create your own classloader, you need to extend the ClassLoader class.</p>\n\n\n\n<h3>2) Class(Method) Area</h3>\n\n\n\n<p>Class(Method) Area stores per-class structures such as the runtime constant pool, field and method data, the code for methods.</p>\n\n\n\n<h3>3) Heap</h3>\n\n\n\n<p>It is the runtime data area in which objects are allocated.</p>\n\n\n\n<h3>4) Stack</h3>\n\n\n\n<p>Java Stack stores frames. It holds local variables and partial results, and plays a part in method invocation and return.</p>\n\n\n\n<p>Each thread has a private JVM stack, created at the same time as thread.</p>\n\n\n\n<p>A new frame is created each time a method is invoked. A frame is destroyed when its method invocation completes.</p>\n\n\n\n<h3>5) Program Counter Register</h3>\n\n\n\n<p>PC (program counter) register contains the address of the Java virtual machine instruction currently being executed.</p>\n\n\n\n<h3>6) Native Method Stack</h3>\n\n\n\n<p>It contains all the native methods used in the application.</p>\n\n\n\n<h3>7) Execution Engine</h3>\n\n\n\n<p>It contains:</p>\n\n\n\n<ol><li><strong>A virtual processor</strong></li><li><strong>Interpreter:</strong>&nbsp;Read bytecode stream then execute the instructions.</li><li><strong>Just-In-Time(JIT) compiler:</strong>&nbsp;It is used to improve the performance. JIT compiles parts of the byte code that have similar functionality at the same time, and hence reduces the amount of time needed for compilation. Here, the term &#8220;compiler&#8221; refers to a translator from the instruction set of a Java virtual machine (JVM) to the instruction set of a specific CPU.</li></ol>\n\n\n\n<h3>8) Java Native Interface</h3>\n\n\n\n<p>Java Native Interface (JNI) is a framework which provides an interface to communicate with another application written in another language like C, C++, Assembly etc. Java uses JNI framework to send output to the Console or interact with OS libraries.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides runtime environment in which java bytecode can be executed. JVMs are available for many hardware and software platforms (i.e. JVM is platform dependent). What is JVM It is: A specification&nbsp;where working of Java Virtual Machine is specified. But implementation provider is [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4405"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4405"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4405/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4405"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4405"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4405"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4406,
        "date": "2020-06-18T10:01:38",
        "date_gmt": "2020-06-18T10:01:38",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=107"
        },
        "modified": "2020-06-18T10:01:38",
        "modified_gmt": "2020-06-18T10:01:38",
        "slug": "java-variables",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/java-variables/",
        "title": {
            "rendered": "Java Variables"
        },
        "content": {
            "rendered": "\n<p>A variable is a container which holds the value while the&nbsp;Java program&nbsp;is executed. A variable is assigned with a data type.</p>\n\n\n\n<p>Variable is a name of memory location. There are three types of variables in java: local, instance and static.</p>\n\n\n\n<p>There are two types of&nbsp;data types in Java: primitive and non-primitive.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Variable</h2>\n\n\n\n<p><strong>Variable</strong>&nbsp;is name of&nbsp;<em>reserved area allocated in memory</em>. In other words, it is a&nbsp;<em>name of memory location</em>. It is a combination of &#8220;vary + able&#8221; that means its value can be changed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/core/images/variable.png\" alt=\"variables in java\"/></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>int data=50;//Here data is variable  </code></pre>\n\n\n\n<h3>Types of Variables</h3>\n\n\n\n<p>There are three types of variables in&nbsp;Java:</p>\n\n\n\n<ul><li>local variable</li><li>instance variable</li><li>static variable</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/core/images/types-of-variables1.png\" alt=\"types of variables in java\"/></figure>\n\n\n\n<h4>1) Local Variable</h4>\n\n\n\n<p>A variable declared inside the body of the method is called local variable. You can use this variable only within that method and the other methods in the class aren&#8217;t even aware that the variable exists.</p>\n\n\n\n<p>A local variable cannot be defined with &#8220;static&#8221; keyword.</p>\n\n\n\n<h4>2) Instance Variable</h4>\n\n\n\n<p>A variable declared inside the class but outside the body of the method, is called instance variable. It is not declared as&nbsp;static.</p>\n\n\n\n<p>It is called instance variable because its value is instance specific and is not shared among instances.</p>\n\n\n\n<h4>3) Static variable</h4>\n\n\n\n<p>A variable which is declared as static is called static variable. It cannot be local. You can create a single copy of static variable and share among all the instances of the class. Memory allocation for static variable happens only once when the class is loaded in the memory.</p>\n\n\n\n<h3 id=\"h3ex\">Example to understand the types of variables in java</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nint data=50;//instance variable  \nstatic int m=100;//static variable  \nvoid method(){  \nint n=90;//local variable  \n}  \n}//end of class </code></pre>\n\n\n\n<h3>Java Variable Example: Add Two Numbers</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Simple{  \npublic static void main(String&#91;] args){ \n \nint a=10;  \nint b=10;  \nint c=a+b;  \nSystem.out.println(c);  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20</code></pre>\n\n\n\n<h3>Java Variable Example: Widening</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Simple{  \npublic static void main(String&#91;] args){  \nint a=10;  \nfloat f=a;  \nSystem.out.println(a);  \nSystem.out.println(f);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n10.0</code></pre>\n\n\n\n<h3>Java Variable Example: Narrowing (Typecasting)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Simple{  \npublic static void main(String&#91;] args){  \nfloat f=10.5f;  \n//int a=f;//Compile time error  \nint a=(int)f;  \nSystem.out.println(f);  \nSystem.out.println(a);  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10.5\n10</code></pre>\n\n\n\n<h3>Java Variable Example: Overflow</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Simple{  \npublic static void main(String&#91;] args){  \n//Overflow  \nint a=130;  \nbyte b=(byte)a;  \nSystem.out.println(a);  \nSystem.out.println(b);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>130\n-126</code></pre>\n\n\n\n<h3>Java Variable Example: Adding Lower Type</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Simple{  \npublic static void main(String&#91;] args){  \nbyte a=10;  \nbyte b=10;  \n//byte c=a+b;//Compile Time Error: because a+b=20 will be int  \nbyte c=(byte)(a+b);  \nSystem.out.println(c);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A variable is a container which holds the value while the&nbsp;Java program&nbsp;is executed. A variable is assigned with a data type. Variable is a name of memory location. There are three types of variables in java: local, instance and static. There are two types of&nbsp;data types in Java: primitive and non-primitive. Variable Variable&nbsp;is name of&nbsp;reserved [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4406"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4406"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4406/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4406"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4406"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4406"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4400,
        "date": "2020-06-18T10:02:51",
        "date_gmt": "2020-06-18T10:02:51",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=101"
        },
        "modified": "2020-06-18T10:02:51",
        "modified_gmt": "2020-06-18T10:02:51",
        "slug": "data-types-in-java",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/data-types-in-java/",
        "title": {
            "rendered": "Data Types in Java"
        },
        "content": {
            "rendered": "\n<p>Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java:</p>\n\n\n\n<ol><li><strong>Primitive data types:</strong> The primitive data types include boolean, char, byte, short, int, long, float and double.</li><li><strong>Non-primitive data types:</strong> The non-primitive data types include Classes, Interfaces, and Arrays.</li></ol>\n\n\n\n<h2>Java Primitive Data Types</h2>\n\n\n\n<p>In Java language, primitive data types are the building blocks of data manipulation. These are the most basic data types available in Java language.</p>\n\n\n\n<p>Java is a statically-typed programming language. It means, all variables must be declared before its use. That is why we need to declare variable&#8217;s type and name.</p>\n\n\n\n<p>There are 8 types of primitive data types:</p>\n\n\n\n<ul><li>boolean data type</li><li>byte data type</li><li>char data type</li><li>short data type</li><li>int data type</li><li>long data type</li><li>float data type</li><li>double data type</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/java-data-types.png\" alt=\"Java Data Types\"/></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th><strong>Data Type</strong></th><th><strong>Default Value</strong></th><th><strong>Default size</strong></th></tr><tr><td>boolean</td><td>false</td><td>1 bit</td></tr><tr><td>char</td><td>&#8216;\\u0000&#8217;</td><td>2 byte</td></tr><tr><td>byte</td><td>0</td><td>1 byte</td></tr><tr><td>short</td><td>0</td><td>2 byte</td></tr><tr><td>int</td><td>0</td><td>4 byte</td></tr><tr><td>long</td><td>0L</td><td>8 byte</td></tr><tr><td>float</td><td>0.0f</td><td>4 byte</td></tr><tr><td>double</td><td>0.0d</td><td>8 byte</td></tr></tbody></table></figure>\n\n\n\n<h2>Boolean Data Type</h2>\n\n\n\n<p>The Boolean data type is used to store only two possible values: true and false. This data type is used for simple flags that track true/false conditions.</p>\n\n\n\n<p>The Boolean data type specifies one bit of information, but its &#8220;size&#8221; can&#8217;t be defined precisely.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;Boolean one = false</p>\n\n\n\n<h2>Byte Data Type</h2>\n\n\n\n<p>The byte data type is an example of primitive data type. It isan 8-bit signed two&#8217;s complement integer. Its value-range lies between -128 to 127 (inclusive). Its minimum value is -128 and maximum value is 127. Its default value is 0.</p>\n\n\n\n<p>The byte data type is used to save memory in large arrays where the memory savings is most required. It saves space because a byte is 4 times smaller than an integer. It can also be used in place of &#8220;int&#8221; data type.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;byte a = 10, byte b = -20</p>\n\n\n\n<h2>Short Data Type</h2>\n\n\n\n<p>The short data type is a 16-bit signed two&#8217;s complement integer. Its value-range lies between -32,768 to 32,767 (inclusive). Its minimum value is -32,768 and maximum value is 32,767. Its default value is 0.</p>\n\n\n\n<p>The short data type can also be used to save memory just like byte data type. A short data type is 2 times smaller than an integer.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;short s = 10000, short r = -5000</p>\n\n\n\n<h2>Int Data Type</h2>\n\n\n\n<p>The int data type is a 32-bit signed two&#8217;s complement integer. Its value-range lies between &#8211; 2,147,483,648 (-2^31) to 2,147,483,647 (2^31 -1) (inclusive). Its minimum value is &#8211; 2,147,483,648and maximum value is 2,147,483,647. Its default value is 0.</p>\n\n\n\n<p>The int data type is generally used as a default data type for integral values unless if there is no problem about memory.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;int a = 100000, int b = -200000</p>\n\n\n\n<h2>Long Data Type</h2>\n\n\n\n<p>The long data type is a 64-bit two&#8217;s complement integer. Its value-range lies between -9,223,372,036,854,775,808(-2^63) to 9,223,372,036,854,775,807(2^63 -1)(inclusive). Its minimum value is &#8211; 9,223,372,036,854,775,808and maximum value is 9,223,372,036,854,775,807. Its default value is 0. The long data type is used when you need a range of values more than those provided by int.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;long a = 100000L, long b = -200000L</p>\n\n\n\n<h2>Float Data Type</h2>\n\n\n\n<p>The float data type is a single-precision 32-bit IEEE 754 floating point.Its value range is unlimited. It is recommended to use a float (instead of double) if you need to save memory in large arrays of floating point numbers. The float data type should never be used for precise values, such as currency. Its default value is 0.0F.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;float f1 = 234.5f</p>\n\n\n\n<h2>Double Data Type</h2>\n\n\n\n<p>The double data type is a double-precision 64-bit IEEE 754 floating point. Its value range is unlimited. The double data type is generally used for decimal values just like float. The double data type also should never be used for precise values, such as currency. Its default value is 0.0d.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;double d1 = 12.3</p>\n\n\n\n<h2>Char Data Type</h2>\n\n\n\n<p>The char data type is a single 16-bit Unicode character. Its value-range lies between &#8216;\\u0000&#8217; (or 0) to &#8216;\\uffff&#8217; (or 65,535 inclusive).The char data type is used to store characters.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;char letterA = &#8216;A&#8217;</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Why char uses 2 byte in java and what is \\u0000 ?</h3>\n\n\n\n<p>It is because java uses Unicode system not ASCII code system. The \\u0000 is the lowest range of Unicode system. To get detail explanation about Unicode visit next page.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Data types specify the different sizes and values that can be stored in the variable. There are two types of data types in Java: Primitive data types: The primitive data types include boolean, char, byte, short, int, long, float and double. Non-primitive data types: The non-primitive data types include Classes, Interfaces, and Arrays. Java Primitive Data Types In Java language, [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4400"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4400"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4400/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4400"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4400"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4400"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4399,
        "date": "2020-06-18T10:03:13",
        "date_gmt": "2020-06-18T10:03:13",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=100"
        },
        "modified": "2020-06-18T10:03:13",
        "modified_gmt": "2020-06-18T10:03:13",
        "slug": "unicode-system",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/unicode-system/",
        "title": {
            "rendered": "Unicode System"
        },
        "content": {
            "rendered": "\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Unicode is a universal international standard character encoding that is capable of representing most of the world&#8217;s written languages.</td></tr></tbody></table></figure>\n\n\n\n<h3>Why java uses Unicode System?</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Before Unicode, there were many language standards:</td></tr><tr><td><strong>ASCII</strong>&nbsp;(American Standard Code for Information Interchange) for the United States.<strong>ISO 8859-1</strong>&nbsp;for Western European Language.<strong>KOI-8</strong>&nbsp;for Russian.<strong>GB18030 and BIG-5</strong>&nbsp;for chinese, and so on.</td></tr></tbody></table></figure>\n\n\n\n<h2>Problem</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>This caused two problems:</strong>A particular code value corresponds to different letters in the various language standards.The encodings for languages with large character sets have variable length.Some common characters are encoded as single bytes, other require two or more byte.</td></tr></tbody></table></figure>\n\n\n\n<h2>Solution</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>To solve these problems, a new language standard was developed i.e. Unicode System.</td></tr><tr><td>In unicode, character holds 2 byte, so java also uses 2 byte for characters.</td></tr><tr><td><strong>lowest value:</strong>\\u0000</td></tr><tr><td><strong>highest value:</strong>\\uFFFF</td></tr></tbody></table></figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Unicode is a universal international standard character encoding that is capable of representing most of the world&#8217;s written languages. Why java uses Unicode System? Before Unicode, there were many language standards: ASCII&nbsp;(American Standard Code for Information Interchange) for the United States.ISO 8859-1&nbsp;for Western European Language.KOI-8&nbsp;for Russian.GB18030 and BIG-5&nbsp;for chinese, and so on. Problem This caused [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4399"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4399"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4399/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4399"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4399"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4399"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4398,
        "date": "2020-06-18T10:11:52",
        "date_gmt": "2020-06-18T10:11:52",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=99"
        },
        "modified": "2020-06-18T10:11:52",
        "modified_gmt": "2020-06-18T10:11:52",
        "slug": "operators-in-java",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/operators-in-java/",
        "title": {
            "rendered": "Operators in Java"
        },
        "content": {
            "rendered": "\n<p><strong>Operator</strong>&nbsp;in&nbsp;Java&nbsp;is a symbol which is used to perform operations. For example: +, -, *, / etc.</p>\n\n\n\n<p>There are many types of operators in Java which are given below:</p>\n\n\n\n<ul><li>Unary Operator,</li><li>Arithmetic Operator,</li><li>Shift Operator,</li><li>Relational Operator,</li><li>Bitwise Operator,</li><li>Logical Operator,</li><li>Ternary Operator and</li><li>Assignment Operator.</li></ul>\n\n\n\n<h2>Java Operator Precedence</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator Type</th><th>Category</th><th>Precedence</th></tr><tr><td>Unary</td><td>postfix</td><td><code><em>expr</em>++&nbsp;<em>expr</em>--</code></td></tr><tr><td>prefix</td><td><code>++<em>expr</em>&nbsp;--<em>expr</em>&nbsp;+<em>expr</em>&nbsp;-<em>expr</em>&nbsp;~ !</code></td></tr><tr><td>Arithmetic</td><td>multiplicative</td><td><code>* / %</code></td></tr><tr><td>additive</td><td><code>+ -</code></td></tr><tr><td>Shift</td><td>shift</td><td><code>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</code></td></tr><tr><td>Relational</td><td>comparison</td><td><code>&lt; &gt; &lt;= &gt;= instanceof</code></td></tr><tr><td>equality</td><td><code>== !=</code></td></tr><tr><td>Bitwise</td><td>bitwise AND</td><td><code>&amp;</code></td></tr><tr><td>bitwise exclusive OR</td><td><code>^</code></td></tr><tr><td>bitwise inclusive OR</td><td><code>|</code></td></tr><tr><td>Logical</td><td>logical AND</td><td><code>&amp;&amp;</code></td></tr><tr><td>logical OR</td><td><code>||</code></td></tr><tr><td>Ternary</td><td>ternary</td><td><code>? :</code></td></tr><tr><td>Assignment</td><td>assignment</td><td><code>= += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</code></td></tr></tbody></table></figure>\n\n\n\n<h3>Java Unary Operator</h3>\n\n\n\n<p>The Java unary operators require only one operand. Unary operators are used to perform various operations i.e.:</p>\n\n\n\n<ul><li>incrementing/decrementing a value by one</li><li>negating an expression</li><li>inverting the value of a boolean</li></ul>\n\n\n\n<h3>Java Unary Operator Example: ++ and &#8212;</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint x=10;  \nSystem.out.println(x++);//10 (11)  \nSystem.out.println(++x);//12  \nSystem.out.println(x--);//12 (11)  \nSystem.out.println(--x);//10  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n12\n12\n10</code></pre>\n\n\n\n<h3>Java Unary Operator Example 2: ++ and &#8212;</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=10;  \nint b=10;  \nSystem.out.println(a++ + ++a);//10+12=22  \nSystem.out.println(b++ + b++);//10+11=21  \n  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>22\n21</code></pre>\n\n\n\n<h3>Java Unary Operator Example: ~ and !</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=10;  \nint b=-10;  \nboolean c=true;  \nboolean d=false;  \nSystem.out.println(~a);//-11 (minus of total positive value which starts from 0)  \nSystem.out.println(~b);//9 (positive of total minus, positive starts from 0)  \nSystem.out.println(!c);//false (opposite of boolean value)  \nSystem.out.println(!d);//true  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>-11\n9\nfalse\ntrue</code></pre>\n\n\n\n<h3>Java Arithmetic Operators</h3>\n\n\n\n<p>Java arithmatic operators are used to perform addition, subtraction, multiplication, and division. They act as basic mathematical operations.</p>\n\n\n\n<h3>Java Arithmetic Operator Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=10;  \nint b=5;  \nSystem.out.println(a+b);//15  \nSystem.out.println(a-b);//5  \nSystem.out.println(a*b);//50  \nSystem.out.println(a/b);//2  \nSystem.out.println(a%b);//0  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>15\n5\n50\n2\n0</code></pre>\n\n\n\n<h3>Java Arithmetic Operator Example: Expression</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nSystem.out.println(10*10/5+3-1*4/2);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>21\n</code></pre>\n\n\n\n<h3>Java Left Shift Operator</h3>\n\n\n\n<p>The Java left shift operator &lt;&lt; is used to shift all of the bits in a value to the left side of a specified number of times.</p>\n\n\n\n<h3>Java Left Shift Operator Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nSystem.out.println(10&lt;&lt;2);//10*2^2=10*4=40  \nSystem.out.println(10&lt;&lt;3);//10*2^3=10*8=80  \nSystem.out.println(20&lt;&lt;2);//20*2^2=20*4=80  \nSystem.out.println(15&lt;&lt;4);//15*2^4=15*16=240  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>40\n80\n80\n240</code></pre>\n\n\n\n<h3>Java Right Shift Operator</h3>\n\n\n\n<p>The Java right shift operator &gt;&gt; is used to move left operands value to right by the number of bits specified by the right operand.</p>\n\n\n\n<h3>Java Right Shift Operator Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nSystem.out.println(10>>2);//10/2^2=10/4=2  \nSystem.out.println(20>>2);//20/2^2=20/4=5  \nSystem.out.println(20>>3);//20/2^3=20/8=2  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2\n5\n2</code></pre>\n\n\n\n<h3>Java Shift Operator Example: >> vs >>></h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \n    //For positive number, >> and >>> works same  \n    System.out.println(20>>2);  \n    System.out.println(20>>>2);  \n    //For negative number, >>> changes parity bit (MSB) to 0  \n    System.out.println(-20>>2);  \n    System.out.println(-20>>>2);  \n}}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n5\n-5\n1073741819</code></pre>\n\n\n\n<h3>Java AND Operator Example: Logical &amp;&amp; and Bitwise &amp;</h3>\n\n\n\n<p>The logical &amp;&amp; operator doesn&#8217;t check second condition if first condition is false. It checks second condition only if first one is true.</p>\n\n\n\n<p>The bitwise &amp; operator always checks both conditions whether first condition is true or false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=10;  \nint b=5;  \nint c=20;  \nSystem.out.println(a&lt;b&amp;&amp;a&lt;c);//false &amp;&amp; true = false  \nSystem.out.println(a&lt;b&amp;a&lt;c);//false &amp; true = false  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\nfalse</code></pre>\n\n\n\n<h3>Java AND Operator Example: Logical &amp;&amp; vs Bitwise &amp;</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=10;  \nint b=5;  \nint c=20;  \nSystem.out.println(a&lt;b&amp;&amp;a++&lt;c);//false &amp;&amp; true = false  \nSystem.out.println(a);//10 because second condition is not checked  \nSystem.out.println(a&lt;b&amp;a++&lt;c);//false &amp;&amp; true = false  \nSystem.out.println(a);//11 because second condition is checked  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\n10\nfalse\n11</code></pre>\n\n\n\n<h3>Java OR Operator Example: Logical || and Bitwise |</h3>\n\n\n\n<p>The logical || operator doesn&#8217;t check second condition if first condition is true. It checks second condition only if first one is false.</p>\n\n\n\n<p>The bitwise | operator always checks both conditions whether first condition is true or false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=10;  \nint b=5;  \nint c=20;  \nSystem.out.println(a>b||a&lt;c);//true || true = true  \nSystem.out.println(a>b|a&lt;c);//true | true = true  \n//|| vs |  \nSystem.out.println(a>b||a++&lt;c);//true || true = true  \nSystem.out.println(a);//10 because second condition is not checked  \nSystem.out.println(a>b|a++&lt;c);//true | true = true  \nSystem.out.println(a);//11 because second condition is checked  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\ntrue\ntrue\n10\ntrue\n11</code></pre>\n\n\n\n<h3>Java Ternary Operator</h3>\n\n\n\n<p>Java Ternary operator is used as one liner replacement for if-then-else statement and used a lot in Java programming. it is the only conditional operator which takes three operands.</p>\n\n\n\n<h3>Java Ternary Operator Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=2;  \nint b=5;  \nint min=(a&lt;b)?a:b;  \nSystem.out.println(min);  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2</code></pre>\n\n\n\n<p>Another Example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=10;  \nint b=5;  \nint min=(a&lt;b)?a:b;  \nSystem.out.println(min);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>5</code></pre>\n\n\n\n<h3>Java Assignment Operator</h3>\n\n\n\n<p>Java assignment operator is one of the most common operator. It is used to assign the value on its right to the operand on its left.</p>\n\n\n\n<h3>Java Assignment Operator Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nint a=10;  \nint b=20;  \na+=4;//a=a+4 (a=10+4)  \nb-=4;//b=b-4 (b=20-4)  \nSystem.out.println(a);  \nSystem.out.println(b);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>14\n16</code></pre>\n\n\n\n<h3>Java Assignment Operator Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String&#91;] args){  \nint a=10;  \na+=3;//10+3  \nSystem.out.println(a);  \na-=4;//13-4  \nSystem.out.println(a);  \na*=2;//9*2  \nSystem.out.println(a);  \na/=2;//18/2  \nSystem.out.println(a);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>13\n9\n18\n9</code></pre>\n\n\n\n<h3>Java Assignment Operator Example: Adding short</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nshort a=10;  \nshort b=10;  \n//a+=b;//a=a+b internally so fine  \na=a+b;//Compile time error because 10+10=20 now int  \nSystem.out.println(a);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Compile time error\n</code></pre>\n\n\n\n<p>After type cast:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class OperatorExample{  \npublic static void main(String args&#91;]){  \nshort a=10;  \nshort b=10;  \na=(short)(a+b);//20 which is int now converted to short  \nSystem.out.println(a);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Operator&nbsp;in&nbsp;Java&nbsp;is a symbol which is used to perform operations. For example: +, -, *, / etc. There are many types of operators in Java which are given below: Unary Operator, Arithmetic Operator, Shift Operator, Relational Operator, Bitwise Operator, Logical Operator, Ternary Operator and Assignment Operator. Java Operator Precedence Operator Type Category Precedence Unary postfix expr++&nbsp;expr&#8211; [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4398"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4398"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4398/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4398"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4398"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4398"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4397,
        "date": "2020-06-18T10:14:39",
        "date_gmt": "2020-06-18T10:14:39",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=98"
        },
        "modified": "2020-06-18T10:14:39",
        "modified_gmt": "2020-06-18T10:14:39",
        "slug": "keywords",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/keywords/",
        "title": {
            "rendered": "Keywords"
        },
        "content": {
            "rendered": "\n<p><strong>Java keywords</strong>&nbsp;are also known as&nbsp;<strong>reserved words</strong>. Keywords are particular words which acts as a key to a code. These are predefined words by Java so it cannot be used as a variable or object name.</p>\n\n\n\n<h2>List of Java Keywords</h2>\n\n\n\n<p>A list of Java keywords or reserved words are given below:</p>\n\n\n\n<ol><li><strong>abstract:</strong> Java abstract keyword is used to declare abstract class. Abstract class can provide the implementation of interface. It can have abstract and non-abstract methods.</li><li><strong>boolean:</strong> Java boolean keyword is used to declare a variable as a boolean type. It can hold True and False values only.</li><li><strong>break:</strong> Java break keyword is used to break loop or switch statement. It breaks the current flow of the program at specified condition.</li><li><strong>byte:</strong> Java byte keyword is used to declare a variable that can hold an 8-bit data values.</li><li><strong>case:</strong> Java case keyword is used to with the switch statements to mark blocks of text.</li><li><strong>catch:</strong> Java catch keyword is used to catch the exceptions generated by try statements. It must be used after the try block only.</li><li><strong>char:</strong> Java char keyword is used to declare a variable that can hold unsigned 16-bit Unicode characters</li><li><strong>class:</strong> Java class keyword is used to declare a class.</li><li><strong>continue:</strong> Java continue keyword is used to continue the loop. It continues the current flow of the program and skips the remaining code at the specified condition.</li><li><strong>default:</strong> Java default keyword is used to specify the default block of code in a switch statement.</li><li><strong>do:</strong> Java do keyword is used in control statement to declare a loop. It can iterate a part of the program several times.</li><li><strong>double:</strong> Java double keyword is used to declare a variable that can hold a 64-bit floating-point numbers.</li><li><strong>else:</strong> Java else keyword is used to indicate the alternative branches in an if statement.</li><li><strong>enum:</strong> Java enum keyword is used to define a fixed set of constants. Enum constructors are always private or default.</li><li><strong>extends:</strong> Java extends keyword is used to indicate that a class is derived from another class or interface.</li><li><strong>final:</strong> Java final keyword is used to indicate that a variable holds a constant value. It is applied with a variable. It is used to restrict the user.</li><li><strong>finally:</strong> Java finally keyword indicates a block of code in a try-catch structure. This block is always executed whether exception is handled or not.</li><li><strong>float:</strong> Java float keyword is used to declare a variable that can hold a 32-bit floating-point number.</li><li><strong>for:</strong> Java for keyword is used to start a for loop. It is used to execute a set of instructions/functions repeatedly when some conditions become true. If the number of iteration is fixed, it is recommended to use for loop.</li><li><strong>if:</strong> Java if keyword tests the condition. It executes the if block if condition is true.</li><li><strong>implements:</strong> Java implements keyword is used to implement an interface.</li><li><strong>import:</strong> Java import keyword makes classes and interfaces available and accessible to the current source code.</li><li><strong>instanceof:</strong> Java instanceof keyword is used to test whether the object is an instance of the specified class or implements an interface.</li><li><strong>int:</strong> Java int keyword is used to declare a variable that can hold a 32-bit signed integer.</li><li><strong>interface:</strong> Java interface keyword is used to declare an interface. It can have only abstract methods.</li><li><strong>long:</strong> Java long keyword is used to declare a variable that can hold a 64-bit integer.</li><li><strong>native:</strong> Java native keyword is used to specify that a method is implemented in native code using JNI (Java Native Interface).</li><li><strong>new:</strong> Java new keyword is used to create new objects.</li><li><strong>null:</strong> Java null keyword is used to indicate that a reference does not refer to anything. It removes the garbage value.</li><li><strong>package:</strong> Java package keyword is used to declare a Java package that includes the classes.</li><li><strong>private:</strong> Java private keyword is an access modifier. It is used to indicate that a method or variable may be accessed only in the class in which it is declared.</li><li><strong>protected:</strong> Java protected keyword is an access modifier. It can be accessible within package and outside the package but through inheritance only. It can&#8217;t be applied on the class.</li><li><strong>public:</strong> Java public keyword is an access modifier. It is used to indicate that an item is accessible anywhere. It has the widest scope among all other modifiers.</li><li><strong>return:</strong> Java return keyword is used to return from a method when its execution is complete.</li><li><strong>short:</strong> Java short keyword is used to declare a variable that can hold a 16-bit integer.</li><li><strong>static:</strong> Java static keyword is used to indicate that a variable or method is a class method. The static keyword in Java is used for memory management mainly.</li><li><strong>strictfp:</strong> Java strictfp is used to restrict the floating-point calculations to ensure portability.</li><li><strong>super:</strong> Java super keyword is a reference variable that is used to refer parent class object. It can be used to invoke immediate parent class method.</li><li><strong>switch:</strong> The Java switch keyword contains a switch statement that executes code based on test value. The switch statement tests the equality of a variable against multiple values.</li><li><strong>synchronized:</strong> Java synchronized keyword is used to specify the critical sections or methods in multithreaded code.</li><li><strong>this:</strong> Java this keyword can be used to refer the current object in a method or constructor.</li><li><strong>throw:</strong> The Java throw keyword is used to explicitly throw an exception. The throw keyword is mainly used to throw custom exception. It is followed by an instance.</li><li><strong>throws:</strong> The Java throws keyword is used to declare an exception. Checked exception can be propagated with throws.</li><li><strong>transient:</strong> Java transient keyword is used in serialization. If you define any data member as transient, it will not be serialized.</li><li><strong>try:</strong> Java try keyword is used to start a block of code that will be tested for exceptions. The try block must be followed by either catch or finally block.</li><li><strong>void:</strong> Java void keyword is used to specify that a method does not have a return value.</li><li><strong>volatile:</strong> Java volatile keyword is used to indicate that a variable may change asynchronously.</li><li><strong>while:</strong> Java while keyword is used to start a while loop. This loop iterates a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop.</li></ol>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java keywords&nbsp;are also known as&nbsp;reserved words. Keywords are particular words which acts as a key to a code. These are predefined words by Java so it cannot be used as a variable or object name. List of Java Keywords A list of Java keywords or reserved words are given below: abstract: Java abstract keyword is used [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4397"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4397"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4397/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4397"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4397"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4397"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4396,
        "date": "2020-06-18T10:16:00",
        "date_gmt": "2020-06-18T10:16:00",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=97"
        },
        "modified": "2020-06-18T10:16:00",
        "modified_gmt": "2020-06-18T10:16:00",
        "slug": "if-else-statement-2",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/if-else-statement-2/",
        "title": {
            "rendered": "If-else Statement"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;Java&nbsp;<em>if statement</em>&nbsp;is used to test the condition. It checks&nbsp;boolean&nbsp;condition:&nbsp;<em>true</em>&nbsp;or&nbsp;<em>false</em>. There are various types of if statement in Java.</p>\n\n\n\n<ul><li>if statement</li><li>if-else statement</li><li>if-else-if ladder</li><li>nested if statement</li></ul>\n\n\n\n<h2>Java if Statement</h2>\n\n\n\n<p>The Java if statement tests the condition. It executes the&nbsp;<em>if block</em>&nbsp;if condition is true.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition){  \n//code to be executed  \n} </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/if1.png\" alt=\"if statement in java\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstate the use of if statement.  \npublic class IfExample {  \npublic static void main(String&#91;] args) {  \n    //defining an 'age' variable  \n    int age=20;  \n    //checking the age  \n    if(age>18){  \n        System.out.print(\"Age is greater than 18\");  \n    }  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age is greater than 18\n</code></pre>\n\n\n\n<h2>Java if-else Statement</h2>\n\n\n\n<p>The Java if-else statement also tests the condition. It executes the&nbsp;<em>if block</em>&nbsp;if condition is true otherwise&nbsp;<em>else block</em>&nbsp;is executed.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition){  \n//code if condition is true  \n}else{  \n//code if condition is false  \n}  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/if2.png\" alt=\"if-else statement in java\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//A Java Program to demonstrate the use of if-else statement.  \n//It is a program of odd and even number.  \npublic class IfElseExample {  \npublic static void main(String&#91;] args) {  \n    //defining a variable  \n    int number=13;  \n    //Check if the number is divisible by 2 or not  \n    if(number%2==0){  \n        System.out.println(\"even number\");  \n    }else{  \n        System.out.println(\"odd number\");  \n    }  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>odd number\n</code></pre>\n\n\n\n<p><strong>Leap Year Example:</strong></p>\n\n\n\n<p>A year is leap, if it is divisible by 4 and 400. But, not by 100.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LeapYearExample {    \npublic static void main(String&#91;] args) {    \n    int year=2020;    \n    if(((year % 4 ==0) &amp;&amp; (year % 100 !=0)) || (year % 400==0)){  \n        System.out.println(\"LEAP YEAR\");  \n    }  \n    else{  \n        System.out.println(\"COMMON YEAR\");  \n    }  \n}    \n}    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>LEAP YEAR\n</code></pre>\n\n\n\n<h2>Using Ternary Operator</h2>\n\n\n\n<p>We can also use ternary operator (? 🙂 to perform the task of if&#8230;else statement. It is a shorthand way to check the condition. If the condition is true, the result of ? is returned. But, if the condition is false, the result of : is returned.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class IfElseTernaryExample {    \npublic static void main(String&#91;] args) {    \n    int number=13;    \n    //Using ternary operator  \n    String output=(number%2==0)?\"even number\":\"odd number\";    \n    System.out.println(output);  \n}    \n}    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>odd number\n</code></pre>\n\n\n\n<h2>Java if-else-if ladder Statement</h2>\n\n\n\n<p>The if-else-if ladder statement executes one condition from multiple statements.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition1){  \n//code to be executed if condition1 is true  \n}else if(condition2){  \n//code to be executed if condition2 is true  \n}  \nelse if(condition3){  \n//code to be executed if condition3 is true  \n}  \n...  \nelse{  \n//code to be executed if all the conditions are false  \n}  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpages/images/elseifladder.png\" alt=\"if-else-if ladder statement in java\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of If else-if ladder.  \n//It is a program of grading system for fail, D grade, C grade, B grade, A grade and A+.  \npublic class IfElseIfExample {  \npublic static void main(String&#91;] args) {  \n    int marks=65;  \n      \n    if(marks&lt;50){  \n        System.out.println(\"fail\");  \n    }  \n    else if(marks>=50 &amp;&amp; marks&lt;60){  \n        System.out.println(\"D grade\");  \n    }  \n    else if(marks>=60 &amp;&amp; marks&lt;70){  \n        System.out.println(\"C grade\");  \n    }  \n    else if(marks>=70 &amp;&amp; marks&lt;80){  \n        System.out.println(\"B grade\");  \n    }  \n    else if(marks>=80 &amp;&amp; marks&lt;90){  \n        System.out.println(\"A grade\");  \n    }else if(marks>=90 &amp;&amp; marks&lt;100){  \n        System.out.println(\"A+ grade\");  \n    }else{  \n        System.out.println(\"Invalid!\");  \n    }  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C grade\n</code></pre>\n\n\n\n<p><strong>Program to check POSITIVE, NEGATIVE or ZERO:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PositiveNegativeExample {    \npublic static void main(String&#91;] args) {    \n    int number=-13;    \n    if(number>0){  \n    System.out.println(\"POSITIVE\");  \n    }else if(number&lt;0){  \n    System.out.println(\"NEGATIVE\");  \n    }else{  \n    System.out.println(\"ZERO\");  \n   }  \n}    \n}   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>NEGATIVE\n</code></pre>\n\n\n\n<h2>Java Nested if statement</h2>\n\n\n\n<p>The nested if statement represents the&nbsp;<em>if block within another if block</em>. Here, the inner if block condition executes only when outer if block condition is true.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition){    \n     //code to be executed    \n          if(condition){  \n             //code to be executed    \n    }    \n}  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/corebasic/images/nestedif.png\" alt=\"Java Nested If Statement\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of Nested If Statement.  \npublic class JavaNestedIfExample {    \npublic static void main(String&#91;] args) {    \n    //Creating two variables for age and weight  \n    int age=20;  \n    int weight=80;    \n    //applying condition on age and weight  \n    if(age>=18){    \n        if(weight>50){  \n            System.out.println(\"You are eligible to donate blood\");  \n        }    \n    }    \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>You are eligible to donate blood\n</code></pre>\n\n\n\n<p><strong>Example 2:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of Nested If Statement.    \npublic class JavaNestedIfExample2 {      \npublic static void main(String&#91;] args) {      \n    //Creating two variables for age and weight    \n    int age=25;    \n    int weight=48;      \n    //applying condition on age and weight    \n    if(age>=18){      \n        if(weight>50){    \n            System.out.println(\"You are eligible to donate blood\");    \n        } else{  \n            System.out.println(\"You are not eligible to donate blood\");    \n        }  \n    } else{  \n      System.out.println(\"Age must be greater than 18\");  \n    }  \n}  }  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>You are not eligible to donate blood</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;Java&nbsp;if statement&nbsp;is used to test the condition. It checks&nbsp;boolean&nbsp;condition:&nbsp;true&nbsp;or&nbsp;false. There are various types of if statement in Java. if statement if-else statement if-else-if ladder nested if statement Java if Statement The Java if statement tests the condition. It executes the&nbsp;if block&nbsp;if condition is true. Syntax: Example: Output: Java if-else Statement The Java if-else statement also [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4396"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4396"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4396/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4396"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4396"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4396"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4395,
        "date": "2020-06-18T10:17:27",
        "date_gmt": "2020-06-18T10:17:27",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=96"
        },
        "modified": "2020-06-18T10:17:27",
        "modified_gmt": "2020-06-18T10:17:27",
        "slug": "switch-statement",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/switch-statement/",
        "title": {
            "rendered": "Switch Statement"
        },
        "content": {
            "rendered": "\n<p>The Java&nbsp;<em>switch statement</em>&nbsp;executes one statement from multiple conditions. It is like&nbsp;if-else-if&nbsp;ladder statement. The switch statement works with byte, short, int, long, enum types, String and some wrapper types like Byte, Short, Int, and Long. Since Java 7, you can use&nbsp;strings&nbsp;in the switch statement.</p>\n\n\n\n<p>In other words, the switch statement tests the equality of a variable against multiple values.</p>\n\n\n\n<h4>Points to Remember</h4>\n\n\n\n<ul><li>There can be&nbsp;<em>one or N number of case values</em>&nbsp;for a switch expression.</li><li>The case value must be of switch expression type only. The case value must be&nbsp;<em>literal or constant</em>. It doesn&#8217;t allow&nbsp;variables.</li><li>The case values must be&nbsp;<em>unique</em>. In case of duplicate value, it renders compile-time error.</li><li>The Java switch expression must be of&nbsp;<em>byte, short, int, long (with its Wrapper type),&nbsp;enums&nbsp;and string</em>.</li><li>Each case statement can have a&nbsp;<em>break statement</em>&nbsp;which is optional. When control reaches to the&nbsp;break statement, it jumps the control after the switch expression. If a break statement is not found, it executes the next case.</li><li>The case value can have a&nbsp;<em>default label</em>&nbsp;which is optional.</li></ul>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>switch(expression){    \ncase value1:    \n //code to be executed;    \n break;  //optional  \ncase value2:    \n //code to be executed;    \n break;  //optional  \n......    \n    \ndefault:     \n code to be executed if all cases are not matched;    \n}    </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpages/images/cswitch.png\" alt=\"flow of switch statement in java\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SwitchExample {  \npublic static void main(String&#91;] args) {  \n    //Declaring a variable for switch expression  \n    int number=20;  \n    //Switch expression  \n    switch(number){  \n    //Case statements  \n    case 10: System.out.println(\"10\");  \n    break;  \n    case 20: System.out.println(\"20\");  \n    break;  \n    case 30: System.out.println(\"30\");  \n    break;  \n    //Default case statement  \n    default:System.out.println(\"Not in 10, 20 or 30\");  \n    }  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20\n</code></pre>\n\n\n\n<p><strong>Finding Month Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>/Java Program to demonstrate the example of Switch statement  \n//where we are printing month name for the given number  \npublic class SwitchMonthExample {    \npublic static void main(String&#91;] args) {    \n    //Specifying month number  \n    int month=7;    \n    String monthString=\"\";  \n    //Switch statement  \n    switch(month){    \n    //case statements within the switch block  \n    case 1: monthString=\"1 - January\";  \n    break;    \n    case 2: monthString=\"2 - February\";  \n    break;    \n    case 3: monthString=\"3 - March\";  \n    break;    \n    case 4: monthString=\"4 - April\";  \n    break;    \n    case 5: monthString=\"5 - May\";  \n    break;    \n    case 6: monthString=\"6 - June\";  \n    break;    \n    case 7: monthString=\"7 - July\";  \n    break;    \n    case 8: monthString=\"8 - August\";  \n    break;    \n    case 9: monthString=\"9 - September\";  \n    break;    \n    case 10: monthString=\"10 - October\";  \n    break;    \n    case 11: monthString=\"11 - November\";  \n    break;    \n    case 12: monthString=\"12 - December\";  \n    break;    \n    default:System.out.println(\"Invalid Month!\");    \n    }    \n    //Printing month of the given number  \n    System.out.println(monthString);  \n}    \n}   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>7 - July\n</code></pre>\n\n\n\n<p><strong>Program to check Vowel or Consonant:</strong></p>\n\n\n\n<p>If the character is A, E, I, O, or U, it is vowel otherwise consonant. It is not case-sensitive.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class SwitchVowelExample {    \npublic static void main(String&#91;] args) {    \n    char ch='O';    \n    switch(ch)  \n    {  \n        case 'a':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'e':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'i':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'o':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'u':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'A':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'E':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'I':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'O':   \n            System.out.println(\"Vowel\");  \n            break;  \n        case 'U':   \n            System.out.println(\"Vowel\");  \n            break;  \n        default:   \n            System.out.println(\"Consonant\");  \n    }  \n}    \n}   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vowel\n</code></pre>\n\n\n\n<h2>Java Switch Statement is fall-through</h2>\n\n\n\n<p>The Java switch statement is fall-through. It means it executes all statements after the first match if a break statement is not present.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>/Java Switch Example where we are omitting the  \n//break statement  \npublic class SwitchExample2 {  \npublic static void main(String&#91;] args) {  \n    int number=20;  \n    //switch expression with int value  \n    switch(number){  \n    //switch cases without break statements  \n    case 10: System.out.println(\"10\");  \n    case 20: System.out.println(\"20\");  \n    case 30: System.out.println(\"30\");  \n    default:System.out.println(\"Not in 10, 20 or 30\");  \n    }  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20\n30\nNot in 10, 20 or 30</code></pre>\n\n\n\n<h2>Java Switch Statement with String</h2>\n\n\n\n<p>Java allows us to use strings in switch expression since Java SE 7. The case statement should be string literal.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of Java Switch  \n//statement with String  \npublic class SwitchStringExample {    \npublic static void main(String&#91;] args) {    \n    //Declaring String variable  \n    String levelString=\"Expert\";  \n    int level=0;  \n    //Using String in Switch expression  \n    switch(levelString){    \n    //Using String Literal in Switch case  \n    case \"Beginner\": level=1;  \n    break;    \n    case \"Intermediate\": level=2;  \n    break;    \n    case \"Expert\": level=3;  \n    break;    \n    default: level=0;  \n    break;  \n    }    \n    System.out.println(\"Your Level is: \"+level);  \n}    \n}   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Your Level is: 3\n</code></pre>\n\n\n\n<h2>Java Nested Switch Statement</h2>\n\n\n\n<p>We can use switch statement inside other switch statement in Java. It is known as nested switch statement.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of Java Nested Switch  \npublic class NestedSwitchExample {    \n    public static void main(String args&#91;])  \n      {  \n      //C - CSE, E - ECE, M - Mechanical  \n        char branch = 'C';                 \n        int collegeYear = 4;  \n        switch( collegeYear )  \n        {  \n            case 1:  \n                System.out.println(\"English, Maths, Science\");  \n                break;  \n            case 2:  \n                switch( branch )   \n                {  \n                    case 'C':  \n                        System.out.println(\"Operating System, Java, Data Structure\");  \n                        break;  \n                    case 'E':  \n                        System.out.println(\"Micro processors, Logic switching theory\");  \n                        break;  \n                    case 'M':  \n                        System.out.println(\"Drawing, Manufacturing Machines\");  \n                        break;  \n                }  \n                break;  \n            case 3:  \n                switch( branch )   \n                {  \n                    case 'C':  \n                        System.out.println(\"Computer Organization, MultiMedia\");  \n                        break;  \n                    case 'E':  \n                        System.out.println(\"Fundamentals of Logic Design, Microelectronics\");  \n                        break;  \n                    case 'M':  \n                        System.out.println(\"Internal Combustion Engines, Mechanical Vibration\");  \n                        break;  \n                }  \n                break;  \n            case 4:  \n                switch( branch )   \n                {  \n                    case 'C':  \n                        System.out.println(\"Data Communication and Networks, MultiMedia\");  \n                        break;  \n                    case 'E':  \n                        System.out.println(\"Embedded System, Image Processing\");  \n                        break;  \n                    case 'M':  \n                        System.out.println(\"Production Technology, Thermal Engineering\");  \n                        break;  \n                }  \n                break;  \n        }  \n    }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Data Communication and Networks, MultiMedia\n</code></pre>\n\n\n\n<h2>Java Enum in Switch Statement</h2>\n\n\n\n<p>Java allows us to use enum in switch statement.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of Enum  \n//in switch statement  \npublic class JavaSwitchEnumExample {      \n       public enum Day {  Sun, Mon, Tue, Wed, Thu, Fri, Sat  }    \n       public static void main(String args&#91;])    \n       {    \n         Day&#91;] DayNow = Day.values();    \n           for (Day Now : DayNow)    \n           {    \n                switch (Now)    \n                {    \n                    case Sun:    \n                        System.out.println(\"Sunday\");    \n                        break;    \n                    case Mon:    \n                        System.out.println(\"Monday\");    \n                        break;    \n                    case Tue:    \n                        System.out.println(\"Tuesday\");    \n                        break;         \n                    case Wed:    \n                        System.out.println(\"Wednesday\");    \n                        break;    \n                    case Thu:    \n                        System.out.println(\"Thursday\");    \n                        break;    \n                    case Fri:    \n                        System.out.println(\"Friday\");    \n                        break;    \n                    case Sat:    \n                        System.out.println(\"Saturday\");    \n                        break;    \n                }    \n            }    \n        }    \n}    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sunday\nMonday\nTwesday\nWednesday\nThursday\nFriday\nSaturday</code></pre>\n\n\n\n<h2>Java Wrapper in Switch Statement</h2>\n\n\n\n<p>Java allows us to use four wrapper classes: Byte, Short, Integer and Long in switch statement.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of Wrapper class  \n//in switch statement  \npublic class WrapperInSwitchCaseExample {       \n       public static void main(String args&#91;])  \n       {         \n            Integer age = 18;        \n            switch (age)  \n            {  \n                case (16):            \n                    System.out.println(\"You are under 18.\");  \n                    break;  \n                case (18):                \n                    System.out.println(\"You are eligible for vote.\");  \n                    break;  \n                case (65):                \n                    System.out.println(\"You are senior citizen.\");  \n                    break;  \n                default:  \n                    System.out.println(\"Please give the valid age.\");  \n                    break;  \n            }             \n        }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>You are eligible for vote.</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The Java&nbsp;switch statement&nbsp;executes one statement from multiple conditions. It is like&nbsp;if-else-if&nbsp;ladder statement. The switch statement works with byte, short, int, long, enum types, String and some wrapper types like Byte, Short, Int, and Long. Since Java 7, you can use&nbsp;strings&nbsp;in the switch statement. In other words, the switch statement tests the equality of a variable [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4395"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4395"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4395/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4395"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4395"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4395"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4389,
        "date": "2020-06-18T10:23:45",
        "date_gmt": "2020-06-18T10:23:45",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=87"
        },
        "modified": "2020-06-18T10:23:45",
        "modified_gmt": "2020-06-18T10:23:45",
        "slug": "loops-in-java",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/loops-in-java/",
        "title": {
            "rendered": "Loops in Java"
        },
        "content": {
            "rendered": "\n<p>In programming languages, loops are used to execute a set of instructions/functions repeatedly when some conditions become true. There are three types of loops in Java.</p>\n\n\n\n<ul><li>for loop</li><li>while loop</li><li>do-while loop</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/java-loops.png\" alt=\"Loops in Java\"/></figure>\n\n\n\n<h2>Java For Loop vs While Loop vs Do While Loop</h2>\n\n\n\n<pre class=\"wp-block-table\"><table><tbody><tr><th>Comparison</th><th>for loop</th><th>while loop</th><th>do while loop</th></tr><tr><td>Introduction</td><td>The Java for loop is a control flow statement that iterates a part of the&nbsp;<a href=\"https://www.codemeals.com/java-programs\">programs</a>&nbsp;multiple times.</td><td>The Java while loop is a control flow statement that executes a part of the programs repeatedly on the basis of given boolean condition.</td><td>The Java do while loop is a control flow statement that executes a part of the programs at least once and the further execution depends upon the given boolean condition.</td></tr><tr><td>When to use</td><td>If the number of iteration is fixed, it is recommended to use for loop.</td><td>If the number of iteration is not fixed, it is recommended to use while loop.</td><td>If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use the do-while loop.</td></tr><tr><td>Syntax</td><td>for(init;condition;incr/decr){ // code to be executed }</td><td>while(condition){ //code to be executed }</td><td>do{ //code to be executed }while(condition);</td></tr><tr><td>Example</td><td>//for loop for(int i=1;i&lt;=10;i++){ System.out.println(i); }</td><td>//while loop int i=1; while(i&lt;=10){ System.out.println(i); i++; }</td><td>//do-while loop int i=1; do{ System.out.println(i); i++; }while(i&lt;=10);</td></tr><tr><td>Syntax for infinitive loop</td><td>for(;;){ //code to be executed }</td><td>while(true){ //code to be executed }</td><td>do{ //code to be executed }while(true);</td></tr></tbody></table></pre>\n\n\n\n<h1>Java For Loop</h1>\n\n\n\n<p>The Java&nbsp;<em>for loop</em>&nbsp;is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop.</p>\n\n\n\n<p>There are three types of for loops in java.</p>\n\n\n\n<ul><li>Simple For Loop</li><li>For-each&nbsp;or Enhanced For Loop</li><li>Labeled For Loop</li></ul>\n\n\n\n<h2>Java Simple For Loop</h2>\n\n\n\n<p>A simple for loop is the same as&nbsp;<a href=\"https://www.javatpoint.com/c-programming-language-tutorial\">C</a>/C++. We can initialize the&nbsp;variable, check condition and increment/decrement value. It consists of four parts:</p>\n\n\n\n<ol><li><strong>Initialization</strong>: It is the initial condition which is executed once when the loop starts. Here, we can initialize the variable, or we can use an already initialized variable. It is an optional condition.</li><li><strong>Condition</strong>: It is the second condition which is executed each time to test the condition of the loop. It continues execution until the condition is false. It must return boolean value either true or false. It is an optional condition.</li><li><strong>Statement</strong>: The statement of the loop is executed each time until the second condition is false.</li><li><strong>Increment/Decrement</strong>: It increments or decrements the variable value. It is an optional condition.</li></ol>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(initialization;condition;incr/decr){  \n//statement or code to be executed  \n}</code></pre>\n\n\n\n<p><strong>Flowchart:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpages/images/forloop.png\" alt=\"for loop in java flowchart\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the example of for loop  \n//which prints table of 1  \npublic class ForExample {  \npublic static void main(String&#91;] args) {  \n    //Code of Java for loop  \n    for(int i=1;i&lt;=10;i++){  \n        System.out.println(i);  \n    }  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10</code></pre>\n\n\n\n<h2>Java Nested For Loop</h2>\n\n\n\n<p>If we have a for loop inside the another loop, it is known as nested for loop. The inner loop executes completely whenever outer loop executes.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class NestedForExample {  \npublic static void main(String&#91;] args) {  \n//loop of i  \nfor(int i=1;i&lt;=3;i++){  \n//loop of j  \nfor(int j=1;j&lt;=3;j++){  \n        System.out.println(i+\" \"+j);  \n}//end of i  \n}//end of j  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3</code></pre>\n\n\n\n<p><strong>Pyramid Example 1:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PyramidExample {  \npublic static void main(String&#91;] args) {  \nfor(int i=1;i&lt;=5;i++){  \nfor(int j=1;j&lt;=i;j++){  \n        System.out.print(\"* \");  \n}  \nSystem.out.println();//new line  \n}  \n}  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>* \n* * \n* * * \n* * * * \n* * * * *</code></pre>\n\n\n\n<p><strong>Pyramid Example 2:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PyramidExample2 {  \npublic static void main(String&#91;] args) {  \nint term=6;  \nfor(int i=1;i&lt;=term;i++){  \nfor(int j=term;j>=i;j--){  \n        System.out.print(\"* \");  \n}  \nSystem.out.println();//new line  \n}  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">* * * * * * <br>* * * * * <br>* * * * <br>* * * <br>* * <br>* </pre>\n\n\n\n<h2>Java for-each Loop</h2>\n\n\n\n<p>The for-each loop is used to traverse array or collection in java. It is easier to use than simple for loop because we don&#8217;t need to increment value and use subscript notation.</p>\n\n\n\n<p>It works on elements basis not index. It returns element one by one in the defined variable.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(Type var:array){  \n//code to be executed  \n}  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java For-each loop example which prints the  \n//elements of the array  \npublic class ForEachExample {  \npublic static void main(String&#91;] args) {  \n    //Declaring an array  \n    int arr&#91;]={12,23,44,56,78};  \n    //Printing array using for-each loop  \n    for(int i:arr){  \n        System.out.println(i);  \n    }  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>12\n23\n44\n56\n78</code></pre>\n\n\n\n<h2>Java Labeled For Loop</h2>\n\n\n\n<p>We can have a name of each Java for loop. To do so, we use label before the for loop. It is useful if we have nested for loop so that we can break/continue specific for loop.</p>\n\n\n\n<p>Usually, break and continue keywords breaks/continues the innermost for loop only.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>labelname:  \nfor(initialization;condition;incr/decr){  \n//code to be executed  \n}  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//A Java program to demonstrate the use of labeled for loop  \npublic class LabeledForExample {  \npublic static void main(String&#91;] args) {  \n    //Using Label for outer and for loop  \n    aa:  \n        for(int i=1;i&lt;=3;i++){  \n            bb:  \n                for(int j=1;j&lt;=3;j++){  \n                    if(i==2&amp;&amp;j==2){  \n                        break aa;  \n                    }  \n                    System.out.println(i+\" \"+j);  \n                }  \n        }  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1</code></pre>\n\n\n\n<p>If you use&nbsp;<strong>break bb;</strong>, it will break inner loop only which is the default behavior of any loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LabeledForExample2 {  \npublic static void main(String&#91;] args) {  \n    aa:  \n        for(int i=1;i&lt;=3;i++){  \n            bb:  \n                for(int j=1;j&lt;=3;j++){  \n                    if(i==2&amp;&amp;j==2){  \n                        break bb;  \n                    }  \n                    System.out.println(i+\" \"+j);  \n                }  \n        }  \n}  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n3 1\n3 2\n3 3</code></pre>\n\n\n\n<h2>Java Infinitive For Loop</h2>\n\n\n\n<p>If you use two semicolons ;; in the for loop, it will be infinitive for loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(;;){  \n//code to be executed  \n}  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java program to demonstrate the use of infinite for loop  \n//which prints an statement  \npublic class ForExample {  \npublic static void main(String&#91;] args) {  \n    //Using no condition in for loop  \n    for(;;){  \n        System.out.println(\"infinitive loop\");  \n    }  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>infinitive loop\ninfinitive loop\ninfinitive loop\ninfinitive loop\ninfinitive loop\nctrl+c</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In programming languages, loops are used to execute a set of instructions/functions repeatedly when some conditions become true. There are three types of loops in Java. for loop while loop do-while loop Java For Loop vs While Loop vs Do While Loop Comparisonfor loopwhile loopdo while loopIntroductionThe Java for loop is a control flow statement [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4389"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4389"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4389/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4389"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4389"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4389"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4394,
        "date": "2020-06-18T10:26:47",
        "date_gmt": "2020-06-18T10:26:47",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=95"
        },
        "modified": "2020-06-18T10:26:47",
        "modified_gmt": "2020-06-18T10:26:47",
        "slug": "while-loop",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/while-loop/",
        "title": {
            "rendered": "While Loop"
        },
        "content": {
            "rendered": "\n<p>The Java <em>while loop</em> is used to iterate a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>while(condition){  \n//code to be executed  \n}  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpages/images/while.png\" alt=\"flowchart of java while loop\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class WhileExample {  \npublic static void main(String&#91;] args) {  \n    int i=1;  \n    while(i&lt;=10){  \n        System.out.println(i);  \n    i++;  \n    }  \n}  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10</code></pre>\n\n\n\n<h2>Java Infinitive While Loop</h2>\n\n\n\n<p>If you pass&nbsp;<strong>true</strong>&nbsp;in the while loop, it will be infinitive while loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>while(true){  \n//code to be executed  \n}  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class WhileExample2 {  \npublic static void main(String&#91;] args) {  \n    while(true){  \n        System.out.println(\"infinitive while loop\");  \n    }  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>infinitive while loop\ninfinitive while loop\ninfinitive while loop\ninfinitive while loop\ninfinitive while loop\nctrl+c</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The Java while loop is used to iterate a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop. Syntax: Example: Output: Java Infinitive While Loop If you pass&nbsp;true&nbsp;in the while loop, it will be infinitive while loop. Syntax: Example: Output:</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4394"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4394"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4394/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4394"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4394"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4394"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4388,
        "date": "2020-06-18T10:28:38",
        "date_gmt": "2020-06-18T10:28:38",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=86"
        },
        "modified": "2020-06-18T10:28:38",
        "modified_gmt": "2020-06-18T10:28:38",
        "slug": "do-while-loop",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/do-while-loop/",
        "title": {
            "rendered": "do-while Loop"
        },
        "content": {
            "rendered": "\n<p>The Java <em>do-while loop</em> is used to iterate a part of the program several times. If the number of iteration is not fixed and you must have to execute the loop at least once, I recommend it to use do-while loop.</p>\n\n\n\n<p>The Java&nbsp;<em>do-while loop</em>&nbsp;is executed at least once because condition is checked after loop body.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>do{  \n//code to be executed  \n}while(condition);  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpages/images/dowhile.png\" alt=\"flowchart of do while loop in java\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DoWhileExample {  \npublic static void main(String&#91;] args) {  \n    int i=1;  \n    do{  \n        System.out.println(i);  \n    i++;  \n    }while(i&lt;=10);  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10</code></pre>\n\n\n\n<h2>Java Infinitive do-while Loop</h2>\n\n\n\n<p>If you pass&nbsp;<strong>true</strong>&nbsp;in the do-while loop, it will be infinitive do-while loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>do{  \n//code to be executed  \n}while(true); </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DoWhileExample2 {  \npublic static void main(String&#91;] args) {  \n    do{  \n        System.out.println(\"infinitive do while loop\");  \n    }while(true);  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>infinitive do while loop\ninfinitive do while loop\ninfinitive do while loop\nctrl+c</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The Java do-while loop is used to iterate a part of the program several times. If the number of iteration is not fixed and you must have to execute the loop at least once, I recommend it to use do-while loop. The Java&nbsp;do-while loop&nbsp;is executed at least once because condition is checked after loop body. Syntax: Example: [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4388"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4388"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4388/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4388"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4388"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4388"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4390,
        "date": "2020-06-18T10:31:52",
        "date_gmt": "2020-06-18T10:31:52",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=89"
        },
        "modified": "2020-06-18T10:31:52",
        "modified_gmt": "2020-06-18T10:31:52",
        "slug": "break-statement-2",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/break-statement-2/",
        "title": {
            "rendered": "Break Statement"
        },
        "content": {
            "rendered": "\n<p>When a break statement is encountered inside a loop, the loop is immediately terminated and the program control resumes at the next statement following the loop.</p>\n\n\n\n<p>The Java <em>break</em> statement is used to break loop or switch statement. It breaks the current flow of the program at specified condition. In case of inner loop, it breaks only inner loop.</p>\n\n\n\n<p>We can use Java break statement in all types of loops such as for loop, while loop and do-while loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>jump-statement;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"\"><strong>break</strong>;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpages/images/break.png\" alt=\"java break statement flowchart\"/></figure>\n\n\n\n<h2>Java Break Statement with Loop</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>/Java Program to demonstrate the use of break statement    \n//inside the for loop.  \npublic class BreakExample {  \npublic static void main(String&#91;] args) {  \n    //using for loop  \n    for(int i=1;i&lt;=10;i++){  \n        if(i==5){  \n            //breaking the loop  \n            break;  \n        }  \n        System.out.println(i);  \n    }  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4</code></pre>\n\n\n\n<h2>Java Break Statement with Inner Loop</h2>\n\n\n\n<p>It breaks inner loop only if you use break statement inside the inner loop.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of break statement    \n//inside an inner loop   \npublic class BreakExample2 {  \npublic static void main(String&#91;] args) {  \n            //outer loop   \n            for(int i=1;i&lt;=3;i++){    \n                    //inner loop  \n                    for(int j=1;j&lt;=3;j++){    \n                        if(i==2&amp;&amp;j==2){    \n                            //using break statement inside the inner loop  \n                            break;    \n                        }    \n                        System.out.println(i+\" \"+j);    \n                    }    \n            }    \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n3 1\n3 2\n3 3</code></pre>\n\n\n\n<h2>Java Break Statement with Labeled For Loop</h2>\n\n\n\n<p>We can use break statement with a label. This feature is introduced since JDK 1.5. So, we can break any loop in Java now whether it is outer loop or inner.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of continue statement  \n//with label inside an inner loop to break outer loop  \npublic class BreakExample3 {  \npublic static void main(String&#91;] args) {  \n            aa:  \n            for(int i=1;i&lt;=3;i++){    \n                    bb:  \n                    for(int j=1;j&lt;=3;j++){    \n                        if(i==2&amp;&amp;j==2){    \n                            //using break statement with label  \n                            break aa;    \n                        }    \n                        System.out.println(i+\" \"+j);    \n                    }    \n            }    \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1</code></pre>\n\n\n\n<h2>Java Break Statement in while loop</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of break statement  \n//inside the while loop.  \npublic class BreakWhileExample {  \npublic static void main(String&#91;] args) {  \n    //while loop  \n    int i=1;  \n    while(i&lt;=10){  \n        if(i==5){  \n            //using break statement  \n            i++;  \n            break;//it will break the loop  \n        }  \n        System.out.println(i);  \n        i++;  \n    }  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4</code></pre>\n\n\n\n<h2>Java Break Statement in do-while loop</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of break statement  \n//inside the Java do-while loop.  \npublic class BreakDoWhileExample {  \npublic static void main(String&#91;] args) {  \n    //declaring variable  \n    int i=1;  \n    //do-while loop  \n    do{  \n        if(i==5){  \n           //using break statement  \n           i++;  \n           break;//it will break the loop  \n        }  \n        System.out.println(i);  \n        i++;  \n    }while(i&lt;=10);  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>When a break statement is encountered inside a loop, the loop is immediately terminated and the program control resumes at the next statement following the loop. The Java break statement is used to break loop or switch statement. It breaks the current flow of the program at specified condition. In case of inner loop, it breaks only inner loop. [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4390"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4390"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4390/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4390"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4390"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4390"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4393,
        "date": "2020-06-18T10:35:35",
        "date_gmt": "2020-06-18T10:35:35",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=94"
        },
        "modified": "2020-06-18T10:35:35",
        "modified_gmt": "2020-06-18T10:35:35",
        "slug": "continue-statement",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/continue-statement/",
        "title": {
            "rendered": "Continue Statement"
        },
        "content": {
            "rendered": "\n<p>The continue statement is used in loop control structure when you need to jump to the next iteration of the loop immediately. It can be used with for loop or while loop.</p>\n\n\n\n<p>The Java&nbsp;<em>continue statement</em>&nbsp;is used to continue the loop. It continues the current flow of the program and skips the remaining code at the specified condition. In case of an inner loop, it continues the inner loop only.</p>\n\n\n\n<p>We can use Java continue statement in all types of loops such as for loop, while loop and do-while loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>jump-statement;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"\"><strong>continue</strong>;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Java Continue Statement Example</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of continue statement  \n//inside the for loop.  \npublic class ContinueExample {  \npublic static void main(String&#91;] args) {  \n    //for loop  \n    for(int i=1;i&lt;=10;i++){  \n        if(i==5){  \n            //using continue statement  \n            continue;//it will skip the rest statement  \n        }  \n        System.out.println(i);  \n    }  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n6\n7\n8\n9\n10</code></pre>\n\n\n\n<p>As you can see in the above output, 5 is not printed on the console. It is because the loop is continued when it reaches to 5.</p>\n\n\n\n<h2>Java Continue Statement with Inner Loop</h2>\n\n\n\n<p>It continues inner loop only if you use the continue statement inside the inner loop.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of continue statement  \n//inside an inner loop  \npublic class ContinueExample2 {  \npublic static void main(String&#91;] args) {  \n            //outer loop  \n            for(int i=1;i&lt;=3;i++){    \n                    //inner loop  \n                    for(int j=1;j&lt;=3;j++){    \n                        if(i==2&amp;&amp;j==2){    \n                            //using continue statement inside inner loop  \n                            continue;    \n                        }    \n                        System.out.println(i+\" \"+j);    \n                    }    \n            }    \n}  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n2 3\n3 1\n3 2\n3 3</code></pre>\n\n\n\n<h2>Java Continue Statement with Labeled For Loop</h2>\n\n\n\n<p>We can use continute statement with a label. This feature is introduced since JDK 1.5. So, we can continue any loop in Java now whether it is outer loop or inner.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of continue statement  \n//with label inside an inner loop to continue outer loop  \npublic class ContinueExample3 {  \npublic static void main(String&#91;] args) {  \n            aa:  \n            for(int i=1;i&lt;=3;i++){    \n                    bb:  \n                    for(int j=1;j&lt;=3;j++){    \n                        if(i==2&amp;&amp;j==2){    \n                            //using continue statement with label  \n                            continue aa;    \n                        }    \n                        System.out.println(i+\" \"+j);    \n                    }    \n            }    \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n3 1\n3 2\n3 3</code></pre>\n\n\n\n<h2>Java Continue Statement in while loop</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of continue statement  \n//inside the while loop.  \npublic class ContinueWhileExample {  \npublic static void main(String&#91;] args) {  \n    //while loop  \n    int i=1;  \n    while(i&lt;=10){  \n        if(i==5){  \n            //using continue statement  \n            i++;  \n            continue;//it will skip the rest statement  \n        }  \n        System.out.println(i);  \n        i++;  \n    }  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n6\n7\n8\n9\n10</code></pre>\n\n\n\n<h2>Java Continue Statement in do-while loop</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of continue statement  \n//inside the Java do-while loop.  \npublic class ContinueDoWhileExample {  \npublic static void main(String&#91;] args) {  \n    //declaring variable  \n    int i=1;  \n    //do-while loop  \n    do{  \n        if(i==5){  \n                //using continue statement  \n                 i++;  \n            continue;//it will skip the rest statement  \n        }  \n        System.out.println(i);  \n        i++;  \n    }while(i&lt;=10);  \n}  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n6\n7\n8\n9\n10</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The continue statement is used in loop control structure when you need to jump to the next iteration of the loop immediately. It can be used with for loop or while loop. The Java&nbsp;continue statement&nbsp;is used to continue the loop. It continues the current flow of the program and skips the remaining code at the [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4393"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4393"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4393/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4393"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4393"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4393"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4387,
        "date": "2020-06-18T10:42:46",
        "date_gmt": "2020-06-18T10:42:46",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=85"
        },
        "modified": "2020-06-18T10:42:46",
        "modified_gmt": "2020-06-18T10:42:46",
        "slug": "java-comments",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/java-comments/",
        "title": {
            "rendered": "Java Comments"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;Java&nbsp;comments are the statements that are not executed by the compiler and interpreter. The comments can be used to provide information or explanation about the&nbsp;variable, method,&nbsp;class&nbsp;or any statement. It can also be used to hide program code.</p>\n\n\n\n<h2>Types of Java Comments</h2>\n\n\n\n<p>There are three types of comments in Kava.</p>\n\n\n\n<ol><li>Single Line Comment</li><li>Multi Line Comment</li><li>Documentation Comment</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/java-types-of-comments.png\" alt=\"Java Types of Comments\"/></figure>\n\n\n\n<h2>1) Java Single Line Comment</h2>\n\n\n\n<p>The single line comment is used to comment only one line.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//This is single line comment  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CommentExample1 {  \npublic static void main(String&#91;] args) {  \n    int i=10;//Here, i is a variable  \n    System.out.println(i);  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10</code></pre>\n\n\n\n<h2>2) Java Multi Line Comment</h2>\n\n\n\n<p>The multi line comment is used to comment multiple lines of code.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>/* \nThis  \nis  \nmulti line  \ncomment \n*/</code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class CommentExample2 {  \npublic static void main(String&#91;] args) {  \n/* Let's declare and \n print variable in java. */  \n    int i=10;  \n    System.out.println(i);  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10</code></pre>\n\n\n\n<h2>3) Java Documentation Comment</h2>\n\n\n\n<p>The documentation comment is used to create documentation API. To create documentation API, you need to use&nbsp;<strong>Japhetic tool</strong>.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>/** \nThis  \nis  \ndocumentation  \ncomment \n*/  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>/** The Calculator class provides methods to get addition and subtraction of given 2 numbers.*/  \npublic class Calculator {  \n/** The add() method returns addition of given numbers.*/  \npublic static int add(int a, int b){return a+b;}  \n/** The sub() method returns subtraction of given numbers.*/  \npublic static int sub(int a, int b){return a-b;}  \n}  </code></pre>\n\n\n\n<p>Compile it by javac tool:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>javac Calculator.java</code></pre>\n\n\n\n<p>Create Documentation API by javadoc tool:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>javadoc Calculator.java</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;Java&nbsp;comments are the statements that are not executed by the compiler and interpreter. The comments can be used to provide information or explanation about the&nbsp;variable, method,&nbsp;class&nbsp;or any statement. It can also be used to hide program code. Types of Java Comments There are three types of comments in Kava. Single Line Comment Multi Line Comment [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4387"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4387"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4387/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4387"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4387"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4387"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4391,
        "date": "2020-06-18T10:43:32",
        "date_gmt": "2020-06-18T10:43:32",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=91"
        },
        "modified": "2020-06-18T10:43:32",
        "modified_gmt": "2020-06-18T10:43:32",
        "slug": "oops-concepts",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/oops-concepts/",
        "title": {
            "rendered": "OOPs Concepts"
        },
        "content": {
            "rendered": "\n<p>In this page, we will learn about the basics of OOPs. Object-Oriented Programming is a paradigm that provides many concepts, such as&nbsp;<strong>inheritance</strong>,&nbsp;<strong>data binding</strong>,&nbsp;<strong>polymorphism</strong>, etc.</p>\n\n\n\n<p><strong>Simula</strong>&nbsp;is considered the first object-oriented programming language. The programming paradigm where everything is represented as an object is known as a truly object-oriented programming language.</p>\n\n\n\n<p><strong>Smalltalk</strong>&nbsp;is considered the first truly object-oriented programming language.</p>\n\n\n\n<p>The popular object-oriented languages are Java, C#, PHP, Python, C++, etc.</p>\n\n\n\n<p>The main aim of object-oriented programming is to implement real-world entities, for example, object, classes, abstraction, inheritance, polymorphism, etc.</p>\n\n\n\n<h2 id=\"oops\">OOPs (Object-Oriented Programming System)</h2>\n\n\n\n<p><strong>Object</strong>&nbsp;means a real-world entity such as a pen, chair, table, computer, watch, etc.&nbsp;<strong>Object-Oriented Programming</strong>&nbsp;is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:</p>\n\n\n\n<ul><li>Object</li><li>Class</li><li>Inheritance</li><li>Polymorphism</li><li>Abstraction</li><li>Encapsulation</li></ul>\n\n\n\n<p>Apart from these concepts, there are some other terms which are used in Object-Oriented design:</p>\n\n\n\n<ul><li>Coupling</li><li>Cohesion</li><li>Association</li><li>Aggregation</li><li>Composition</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/java-oops.png\" alt=\"Java OOPs Concepts\"/></figure>\n\n\n\n<h2>Object</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/objects.png\" alt=\"Java Object\"/></figure>\n\n\n\n<p>Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.</p>\n\n\n\n<p>An Object can be defined as an instance of a class. An object contains an address and takes up some space in memory. Objects can communicate without knowing the details of each other&#8217;s data or code. The only necessary thing is the type of message accepted and the type of response returned by the objects.</p>\n\n\n\n<p><strong>Example:</strong>&nbsp;A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.</p>\n\n\n\n<h2>Class</h2>\n\n\n\n<p><em>Collection of objects</em>&nbsp;is called class. It is a logical entity.</p>\n\n\n\n<p>A class can also be defined as a blueprint from which you can create an individual object. Class doesn&#8217;t consume any space.</p>\n\n\n\n<h3>Inheritance</h3>\n\n\n\n<p><em>When one object acquires all the properties and behaviors of a parent object</em>, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/polymorphism.gif\" alt=\"Polymorphism in Java\"/></figure>\n\n\n\n<h3>Polymorphism</h3>\n\n\n\n<p>If&nbsp;<em>one task is performed in different ways</em>, it is known as polymorphism. For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.</p>\n\n\n\n<p>In Java, we use method overloading and method overriding to achieve polymorphism.</p>\n\n\n\n<p>Another example can be to speak something; for example, a cat speaks meow, dog barks woof, etc.</p>\n\n\n\n<h4>Abstraction</h4>\n\n\n\n<p><em>Hiding internal details and showing functionality</em>&nbsp;is known as abstraction. For example phone call, we don&#8217;t know the internal processing.</p>\n\n\n\n<p>In Java, we use abstract class and interface to achieve abstraction.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/capsule.png\" alt=\"Encapsulation in Java OOPs Concepts\"/></figure>\n\n\n\n<h3>Encapsulation</h3>\n\n\n\n<p><em>Binding (or wrapping) code and data together into a single unit are known as encapsulation</em>. For example, a capsule, it is wrapped with different medicines.</p>\n\n\n\n<p>A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.</p>\n\n\n\n<h3>Coupling</h3>\n\n\n\n<p>Coupling refers to the knowledge or information or dependency of another class. It arises when classes are aware of each other. If a class has the details information of another class, there is strong coupling. In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field. You can use interfaces for the weaker coupling because there is no concrete implementation.</p>\n\n\n\n<h3>Cohesion</h3>\n\n\n\n<p>Cohesion refers to the level of a component which performs a single well-defined task. A single well-defined task is done by a highly cohesive method. The weakly cohesive method will split the task into separate parts. The java.io package is a highly cohesive package because it has I/O related classes and interface. However, the java.util package is a weakly cohesive package because it has unrelated classes and interfaces.</p>\n\n\n\n<h3>Association</h3>\n\n\n\n<p>Association represents the relationship between the objects. Here, one object can be associated with one object or many objects. There can be four types of association between the objects:</p>\n\n\n\n<ul><li>One to One</li><li>One to Many</li><li>Many to One, and</li><li>Many to Many</li></ul>\n\n\n\n<p>Let&#8217;s understand the relationship with real-time examples. For example, One country can have one prime minister (one to one), and a prime minister can have many ministers (one to many). Also, many MP&#8217;s can have one prime minister (many to one), and many ministers can have many departments (many to many).</p>\n\n\n\n<p>Association can be undirectional or bidirectional.</p>\n\n\n\n<h3>Aggregation</h3>\n\n\n\n<p>Aggregation is a way to achieve Association. Aggregation represents the relationship where one object contains other objects as a part of its state. It represents the weak relationship between objects. It is also termed as a&nbsp;<em>has-a</em>&nbsp;relationship in Java. Like, inheritance represents the&nbsp;<em>is-a</em>&nbsp;relationship. It is another way to reuse objects.</p>\n\n\n\n<h3>Composition</h3>\n\n\n\n<p>The composition is also a way to achieve Association. The composition represents the relationship where one object contains other objects as a part of its state. There is a strong relationship between the containing object and the dependent object. It is the state where containing objects do not have an independent existence. If you delete the parent object, all the child objects will be deleted automatically.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Advantage of OOPs over Procedure-oriented programming language</h2>\n\n\n\n<p>1) OOPs makes development and maintenance easier, whereas, in a procedure-oriented programming language, it is not easy to manage if code grows as project size increases.</p>\n\n\n\n<p>2) OOPs provides data hiding, whereas, in a procedure-oriented programming language, global data can be accessed from anywhere.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/globaldata2.png\" alt=\"Global Data\"/></figure>\n\n\n\n<p>Figure: Data Representation in Procedure-Oriented Programming</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/objectdata2.png\" alt=\"Object Data\"/></figure>\n\n\n\n<p>Figure: Data Representation in Object-Oriented Programming</p>\n\n\n\n<p>3) OOPs provides the ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this page, we will learn about the basics of OOPs. Object-Oriented Programming is a paradigm that provides many concepts, such as&nbsp;inheritance,&nbsp;data binding,&nbsp;polymorphism, etc. Simula&nbsp;is considered the first object-oriented programming language. The programming paradigm where everything is represented as an object is known as a truly object-oriented programming language. Smalltalk&nbsp;is considered the first truly object-oriented [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4391"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4391"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4391/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4391"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4391"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4391"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4392,
        "date": "2020-06-18T10:46:36",
        "date_gmt": "2020-06-18T10:46:36",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=93"
        },
        "modified": "2020-06-18T10:46:36",
        "modified_gmt": "2020-06-18T10:46:36",
        "slug": "naming-conventions",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/naming-conventions/",
        "title": {
            "rendered": "Naming conventions"
        },
        "content": {
            "rendered": "\n<p>Java naming convention is a rule to follow as you decide what to name your identifiers such as class, package, variable, constant, method, etc.</p>\n\n\n\n<p>But, it is not forced to follow. So, it is known as convention not rule. These conventions are suggested by several Java communities such as Sun Microsystems and Netscape.</p>\n\n\n\n<p>All the classes, interfaces, packages, methods and fields of Java programming language are given according to the Java naming convention. If you fail to follow these conventions, it may generate confusion or erroneous code.</p>\n\n\n\n<h2>Advantage of naming conventions in java</h2>\n\n\n\n<p>By using standard Java naming conventions, you make your code easier to read for yourself and other programmers. Readability of Java program is very important. It indicates that less time is spent to figure out what the code does.</p>\n\n\n\n<p>The following are the key rules that must be followed by every identifier:</p>\n\n\n\n<ul><li>The name must not contain any white spaces.</li><li>The name should not start with special characters like &amp; (ampersand), $ (dollar), _ (underscore).</li></ul>\n\n\n\n<p>Let&#8217;s see some other rules that should be followed by identifiers.</p>\n\n\n\n<h3>Class</h3>\n\n\n\n<ul><li>It should start with the uppercase letter.</li><li>It should be a noun such as Color, Button, System, Thread, etc.</li><li>Use appropriate words, instead of acronyms.</li><li><strong>Example: &#8211;</strong></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Employee  \n{  \n//code snippet  \n}  </code></pre>\n\n\n\n<h3>Interface</h3>\n\n\n\n<ul><li>It should start with the uppercase letter.</li><li>It should be an adjective such as Runnable, Remote, ActionListener.</li><li>Use words, instead of acronyms.</li><li><strong>Example: &#8211;</strong></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Printable  \n{  \n//code snippet  \n}  </code></pre>\n\n\n\n<h3>Method</h3>\n\n\n\n<ul><li>It should start with lowercase letter.</li><li>It should be a verb such as main(), print(), println().</li><li>If the name contains multiple words, start it with a lowercase letter followed by an uppercase letter such as actionPerformed().</li><li><strong>Example:-</strong></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code> class Employee  \n{  \n//method  \nvoid draw()  \n{  \n//code snippet  \n}  \n} </code></pre>\n\n\n\n<h3>Variable</h3>\n\n\n\n<ul><li>It should start with a lowercase letter such as id, name.</li><li>It should not start with the special characters like &amp; (ampersand), $ (dollar), _ (underscore).</li><li>If the name contains multiple words, start it with the lowercase letter followed by an uppercase letter such as firstName, lastName.</li><li>Avoid using one-character variables such as x, y, z.</li><li><strong>Example :-</strong></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>  class Employee  \n{  \n//variable  \nint id;  \n//code snippet  \n}  </code></pre>\n\n\n\n<h3>Package</h3>\n\n\n\n<ul><li>It should be a lowercase letter such as java, lang.</li><li>If the name contains multiple words, it should be separated by dots (.) such as java.util, java.lang.</li><li><strong>Example :-</strong></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals; //package  \nclass Employee  \n{  \n//code snippet  \n}  </code></pre>\n\n\n\n<h3>Constant</h3>\n\n\n\n<ul><li>It should be in uppercase letters such as RED, YELLOW.</li><li>If the name contains multiple words, it should be separated by an underscore(_) such as MAX_PRIORITY.</li><li>It may contain digits but not as the first letter.</li><li><strong>Example :-</strong></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class Employee  \n{  \n//constant  \n static final int MIN_AGE = 18;  \n//code snippet  \n} </code></pre>\n\n\n\n<h2>CamelCase in java naming conventions</h2>\n\n\n\n<p>Java follows camel-case syntax for naming the class, interface, method, and variable.</p>\n\n\n\n<p>If the name is combined with two words, the second word will start with uppercase letter always such as actionPerformed(), firstName, ActionEvent, ActionListener, etc.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java naming convention is a rule to follow as you decide what to name your identifiers such as class, package, variable, constant, method, etc. But, it is not forced to follow. So, it is known as convention not rule. These conventions are suggested by several Java communities such as Sun Microsystems and Netscape. All the [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4392"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4392"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4392/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4392"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4392"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4392"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4412,
        "date": "2020-06-18T11:01:12",
        "date_gmt": "2020-06-18T11:01:12",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=92"
        },
        "modified": "2020-06-18T11:01:12",
        "modified_gmt": "2020-06-18T11:01:12",
        "slug": "objects-and-classes",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/objects-and-classes/",
        "title": {
            "rendered": "Objects and Classes"
        },
        "content": {
            "rendered": "\n<p>In this page, we will learn about Java objects and classes. In object-oriented programming technique, we design a program using objects and classes.</p>\n\n\n\n<p>An object in Java is the physical as well as a logical entity, whereas, a class in Java is a logical entity only.</p>\n\n\n\n<h3>What is an object in Java</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/objects.jpg\" alt=\"object in Java\"/></figure>\n\n\n\n<p>An entity that has state and behavior is known as an object e.g., chair, bike, marker, pen, table, car, etc. It can be physical or logical (tangible and intangible). The example of an intangible object is the banking system.</p>\n\n\n\n<p>An object has three characteristics:</p>\n\n\n\n<ul><li><strong>State:</strong>represents the data (value) of an object.</li><li><strong>Behavior:</strong>&nbsp;represents the behavior (functionality) of an object such as deposit, withdraw, etc.</li><li><strong>Identity:</strong>&nbsp;An object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user. However, it is used internally by the JVM to identify each object uniquely.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/characteristics-of-object.jpg\" alt=\"Characteristics of Object in Java\"/></figure>\n\n\n\n<p>For Example, Pen is an object. Its name is Reynolds; color is white, known as its state. It is used to write, so writing is its behavior.</p>\n\n\n\n<p><strong>An object is an instance of a class.</strong>&nbsp;A class is a template or blueprint from which objects are created. So, an object is the instance(result) of a class.</p>\n\n\n\n<p><strong>Object Definitions:</strong></p>\n\n\n\n<ul><li>An object is&nbsp;<em>a real-world entity</em>.</li><li>An object is&nbsp;<em>a runtime entity</em>.</li><li>The object is&nbsp;<em>an entity which has state and behavior</em>.</li><li>The object is&nbsp;<em>an instance of a class</em>.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2 id=\"class\">What is a class in Java</h2>\n\n\n\n<p>A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can&#8217;t be physical.</p>\n\n\n\n<p>A class in Java can contain:</p>\n\n\n\n<ul><li><strong>Fields</strong></li><li><strong>Methods</strong></li><li><strong>Constructors</strong></li><li><strong>Blocks</strong></li><li><strong>Nested class and interface</strong></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/class-in-java.png\" alt=\"Class in Java\"/></figure>\n\n\n\n<h3>Syntax to declare a class:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class &lt;class_name>{  \n    field;  \n    method;  \n}  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Instance variable in Java</h3>\n\n\n\n<p>A variable which is created inside the class but outside the method is known as an instance variable. Instance variable doesn&#8217;t get memory at compile time. It gets memory at runtime when an object or instance is created. That is why it is known as an instance variable.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Method in Java</h3>\n\n\n\n<p>In Java, a method is like a function which is used to expose the behavior of an object.</p>\n\n\n\n<h4>Advantage of Method</h4>\n\n\n\n<ul><li>Code Reusability</li><li>Code Optimization</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>new keyword in Java</h3>\n\n\n\n<p>The new keyword is used to allocate memory at runtime. All objects get memory in Heap memory area.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Object and Class Example: main within the class</h3>\n\n\n\n<p>In this example, we have created a Student class which has two data members id and name. We are creating the object of the Student class by new keyword and printing the object&#8217;s value.</p>\n\n\n\n<p>Here, we are creating a main() method inside the class.</p>\n\n\n\n<p>File: Student.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate how to define a class and fields  \n//Defining a Student class.  \nclass Student{  \n //defining fields  \n int id;//field or data member or instance variable  \n String name;  \n //creating main method inside the Student class  \n public static void main(String args&#91;]){  \n  //Creating an object or instance  \n  Student s1=new Student();//creating an object of Student  \n  //Printing values of the object  \n  System.out.println(s1.id);//accessing member through reference variable  \n  System.out.println(s1.name);  \n }  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">0 \nnull\n</pre>\n\n\n\n<h3>Object and Class Example: main outside the class</h3>\n\n\n\n<p>In real time development, we create classes and use it from another class. It is a better approach than previous one. Let&#8217;s see a simple example, where we are having main() method in another class.</p>\n\n\n\n<p>We can have multiple classes in different Java files or single Java file. If you define multiple classes in a single Java source file, it is a good idea to save the file name with the class name which has main() method.</p>\n\n\n\n<p>File: TestStudent1.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate having the main method in   \n//another class  \n//Creating Student class.  \nclass Student{  \n int id;  \n String name;  \n}  \n//Creating another class TestStudent1 which contains the main method  \nclass TestStudent1{  \n public static void main(String args&#91;]){  \n  Student s1=new Student();  \n  System.out.println(s1.id);  \n  System.out.println(s1.name);  \n }  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 \nnull</code></pre>\n\n\n\n<h2>3 Ways to initialize object</h2>\n\n\n\n<p>There are 3 ways to initialize object in Java.</p>\n\n\n\n<ol><li>By reference variable</li><li>By method</li><li>By constructor</li></ol>\n\n\n\n<h3>1) Object and Class Example: Initialization through reference</h3>\n\n\n\n<p>Initializing an object means storing data into the object. Let&#8217;s see a simple example where we are going to initialize the object through a reference variable.</p>\n\n\n\n<p>File: TestStudent2.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \n int id;  \n String name;  \n}  \nclass TestStudent2{  \n public static void main(String args&#91;]){  \n  Student s1=new Student();  \n  s1.id=101;  \n  s1.name=\"Sonoo\";  \n  System.out.println(s1.id+\" \"+s1.name);//printing members with a white space  \n }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Sonoo\n</code></pre>\n\n\n\n<p>We can also create multiple objects and store information in it through reference variable.</p>\n\n\n\n<p>File: TestStudent3.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \n int id;  \n String name;  \n}  \nclass TestStudent3{  \n public static void main(String args&#91;]){  \n  //Creating objects  \n  Student s1=new Student();  \n  Student s2=new Student();  \n  //Initializing objects  \n  s1.id=101;  \n  s1.name=\"Sonoo\";  \n  s2.id=102;  \n  s2.name=\"Amit\";  \n  //Printing data  \n  System.out.println(s1.id+\" \"+s1.name);  \n  System.out.println(s2.id+\" \"+s2.name);  \n }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Sonoo\n102 Amit</code></pre>\n\n\n\n<h3>2) Object and Class Example: Initialization through method</h3>\n\n\n\n<p>In this example, we are creating the two objects of Student class and initializing the value to these objects by invoking the insertRecord method. Here, we are displaying the state (data) of the objects by invoking the displayInformation() method.</p>\n\n\n\n<p>File: TestStudent4.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \n int rollno;  \n String name;  \n void insertRecord(int r, String n){  \n  rollno=r;  \n  name=n;  \n }  \n void displayInformation(){System.out.println(rollno+\" \"+name);}  \n}  \nclass TestStudent4{  \n public static void main(String args&#91;]){  \n  Student s1=new Student();  \n  Student s2=new Student();  \n  s1.insertRecord(111,\"Karan\");  \n  s2.insertRecord(222,\"Aryan\");  \n  s1.displayInformation();  \n  s2.displayInformation();  \n }  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>111 Karan\n222 Aryan</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/object-in-memory.png\" alt=\"Object in Java with values\"/></figure>\n\n\n\n<p>As you can see in the above figure, object gets the memory in heap memory area. The reference variable refers to the object allocated in the heap memory area. Here, s1 and s2 both are reference variables that refer to the objects allocated in memory.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>3) Object and Class Example: Initialization through a constructor</h3>\n\n\n\n<p>We will learn about constructors in Java later.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Object and Class Example: Employee</h3>\n\n\n\n<p>Let&#8217;s see an example where we are maintaining records of employees.</p>\n\n\n\n<p>File: TestEmployee.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Employee{  \n    int id;  \n    String name;  \n    float salary;  \n    void insert(int i, String n, float s) {  \n        id=i;  \n        name=n;  \n        salary=s;  \n    }  \n    void display(){System.out.println(id+\" \"+name+\" \"+salary);}  \n}  \npublic class TestEmployee {  \npublic static void main(String&#91;] args) {  \n    Employee e1=new Employee();  \n    Employee e2=new Employee();  \n    Employee e3=new Employee();  \n    e1.insert(101,\"ajeet\",45000);  \n    e2.insert(102,\"irfan\",25000);  \n    e3.insert(103,\"nakul\",55000);  \n    e1.display();  \n    e2.display();  \n    e3.display();  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 ajeet 45000.0\n102 irfan 25000.0\n103 nakul 55000.0</code></pre>\n\n\n\n<h3>Object and Class Example: Rectangle</h3>\n\n\n\n<p>There is given another example that maintains the records of Rectangle class.</p>\n\n\n\n<p>File: TestRectangle1.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Rectangle{  \n int length;  \n int width;  \n void insert(int l, int w){  \n  length=l;  \n  width=w;  \n }  \n void calculateArea(){System.out.println(length*width);}  \n}  \nclass TestRectangle1{  \n public static void main(String args&#91;]){  \n  Rectangle r1=new Rectangle();  \n  Rectangle r2=new Rectangle();  \n  r1.insert(11,5);  \n  r2.insert(3,15);  \n  r1.calculateArea();  \n  r2.calculateArea();  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>55 \n45     </code></pre>\n\n\n\n<h2>What are the different ways to create an object in Java?</h2>\n\n\n\n<p>There are many ways to create an object in java. They are:</p>\n\n\n\n<ul><li>By new keyword</li><li>By newInstance() method</li><li>By clone() method</li><li>By deserialization</li><li>By factory method etc.</li></ul>\n\n\n\n<p>We will learn these ways to create object later.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/different-ways-to-create-object-in-java.jpg\" alt=\"Different Ways to create an Object in Java\"/></figure>\n\n\n\n<h2>Anonymous object</h2>\n\n\n\n<p>Anonymous simply means nameless. An object which has no reference is known as an anonymous object. It can be used at the time of object creation only.</p>\n\n\n\n<p>If you have to use an object only once, an anonymous object is a good approach. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>new Calculation();//anonymous object  </code></pre>\n\n\n\n<p>Calling method through a reference:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Calculation c=new Calculation();  \nc.fact(5);  </code></pre>\n\n\n\n<p>Calling method through an anonymous object</p>\n\n\n\n<pre class=\"wp-block-code\"><code>new Calculation().fact(5);  </code></pre>\n\n\n\n<p>Let&#8217;s see the full example of an anonymous object in Java.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Calculation{  \n void fact(int  n){  \n  int fact=1;  \n  for(int i=1;i&lt;=n;i++){  \n   fact=fact*i;  \n  }  \n System.out.println(\"factorial is \"+fact);  \n}  \npublic static void main(String args&#91;]){  \n new Calculation().fact(5);//calling method with anonymous object  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Factorial is 120\n</code></pre>\n\n\n\n<h3>Creating multiple objects by one type only</h3>\n\n\n\n<p>We can create multiple objects by one type only as we do in case of primitives.</p>\n\n\n\n<p>Initialization of primitive variables:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int a=10, b=20;  </code></pre>\n\n\n\n<p>Initialization of refernce variables:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rectangle r1=new Rectangle(), r2=new Rectangle();//creating two objects  </code></pre>\n\n\n\n<p>Let&#8217;s see the example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of Rectangle class which  \n//has length and width data members  \nclass Rectangle{  \n int length;  \n int width;  \n void insert(int l,int w){  \n  length=l;  \n  width=w;  \n }  \n void calculateArea(){System.out.println(length*width);}  \n}  \nclass TestRectangle2{  \n public static void main(String args&#91;]){  \n  Rectangle r1=new Rectangle(),r2=new Rectangle();//creating two objects  \n  r1.insert(11,5);  \n  r2.insert(3,15);  \n  r1.calculateArea();  \n  r2.calculateArea();  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>55 \n45 </code></pre>\n\n\n\n<h3>Real World Example: Account</h3>\n\n\n\n<p>File: TestAccount.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the working of a banking-system  \n//where we deposit and withdraw amount from our account.  \n//Creating an Account class which has deposit() and withdraw() methods  \nclass Account{  \nint acc_no;  \nString name;  \nfloat amount;  \n//Method to initialize object  \nvoid insert(int a,String n,float amt){  \nacc_no=a;  \nname=n;  \namount=amt;  \n}  \n//deposit method  \nvoid deposit(float amt){  \namount=amount+amt;  \nSystem.out.println(amt+\" deposited\");  \n}  \n//withdraw method  \nvoid withdraw(float amt){  \nif(amount&lt;amt){  \nSystem.out.println(\"Insufficient Balance\");  \n}else{  \namount=amount-amt;  \nSystem.out.println(amt+\" withdrawn\");  \n}  \n}  \n//method to check the balance of the account  \nvoid checkBalance(){System.out.println(\"Balance is: \"+amount);}  \n//method to display the values of an object  \nvoid display(){System.out.println(acc_no+\" \"+name+\" \"+amount);}  \n}  \n//Creating a test class to deposit and withdraw amount  \nclass TestAccount{  \npublic static void main(String&#91;] args){  \nAccount a1=new Account();  \na1.insert(832345,\"Ankit\",1000);  \na1.display();  \na1.checkBalance();  \na1.deposit(40000);  \na1.checkBalance();  \na1.withdraw(15000);  \na1.checkBalance();  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>832345 Ankit 1000.0\nBalance is: 1000.0\n40000.0 deposited\nBalance is: 41000.0\n15000.0 withdrawn\nBalance is: 26000.0</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this page, we will learn about Java objects and classes. In object-oriented programming technique, we design a program using objects and classes. An object in Java is the physical as well as a logical entity, whereas, a class in Java is a logical entity only. What is an object in Java An entity that [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4412"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4412"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4412/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4412"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4412"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4412"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4411,
        "date": "2020-06-18T11:10:30",
        "date_gmt": "2020-06-18T11:10:30",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=90"
        },
        "modified": "2020-06-18T11:10:30",
        "modified_gmt": "2020-06-18T11:10:30",
        "slug": "constructors",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/constructors/",
        "title": {
            "rendered": "Constructors"
        },
        "content": {
            "rendered": "\n<p>In&nbsp;Java, a constructor is a block of codes similar to the method. It is called when an instance of the&nbsp;class&nbsp;is created. At the time of calling constructor, memory for the object is allocated in the memory.</p>\n\n\n\n<p>It is a special type of method which is used to initialize the object.</p>\n\n\n\n<p>Every time an object is created using the new() keyword, at least one constructor is called.</p>\n\n\n\n<p>It calls a default constructor if there is no constructor available in the class. In such case, Java compiler provides a default constructor by default.</p>\n\n\n\n<p>There are two types of constructors in Java: no-arg constructor, and parameterized constructor.</p>\n\n\n\n<p><strong>Note:</strong>&nbsp;It is called constructor because it constructs the values at the time of object creation. It is not necessary to write a constructor for a class. It is because java compiler creates a default constructor if your class doesn&#8217;t have any.</p>\n\n\n\n<h3>Rules for creating Java constructor</h3>\n\n\n\n<p>There are two rules defined for the constructor.</p>\n\n\n\n<ol><li>Constructor name must be the same as its class name</li><li>A Constructor must have no explicit return type</li><li>A Java constructor cannot be abstract, static, final, and synchronized</li></ol>\n\n\n\n<h4>Note: We can use&nbsp;access modifiers&nbsp;while declaring a constructor. It controls the object creation. In other words, we can have private, protected, public or default constructor in Java.</h4>\n\n\n\n<h2>Types of Java constructors</h2>\n\n\n\n<p>There are two types of constructors in Java:</p>\n\n\n\n<ol><li>Default constructor (no-arg constructor)</li><li>Parameterized constructor</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/java-constructor.png\" alt=\"Java Constructors\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Java Default Constructor</h2>\n\n\n\n<p>A constructor is called &#8220;Default Constructor&#8221; when it doesn&#8217;t have any parameter.</p>\n\n\n\n<h3>Syntax of default constructor:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;class_name>(){} </code></pre>\n\n\n\n<h2>Example of default constructor</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>In this example, we are creating the no-arg constructor in the Bike class. It will be invoked at the time of object creation.</td></tr></tbody></table><figcaption><br><br><br></figcaption></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to create and call a default constructor  \nclass Bike1{  \n//creating a default constructor  \nBike1(){System.out.println(\"Bike is created\");}  \n//main method  \npublic static void main(String args&#91;]){  \n//calling a default constructor  \nBike1 b=new Bike1();  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Bike is created\n</code></pre>\n\n\n\n<h4>Rule: If there is no constructor in a class, compiler automatically creates a default constructor.</h4>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/default-constructor1.png\" alt=\"Java default constructor\"/></figure>\n\n\n\n<h3>Q) What is the purpose of a default constructor?</h3>\n\n\n\n<p>The default constructor is used to provide the default values to the object like 0, null, etc., depending on the type.</p>\n\n\n\n<h3>Example of default constructor that displays the default values</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>//Let us see another example of default constructor  \n//which displays the default values  \nclass Student3{  \nint id;  \nString name;  \n//method to display the value of id and name  \nvoid display(){System.out.println(id+\" \"+name);}  \n  \npublic static void main(String args&#91;]){  \n//creating objects  \nStudent3 s1=new Student3();  \nStudent3 s2=new Student3();  \n//displaying values of the object  \ns1.display();  \ns2.display();  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 null\n0 null</code></pre>\n\n\n\n<p><strong>Explanation:</strong>In the above class,you are not creating any constructor so compiler provides you a default constructor. Here 0 and null values are provided by default constructor.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Java Parameterized Constructor</h3>\n\n\n\n<p>A constructor which has a specific number of parameters is called a parameterized constructor.</p>\n\n\n\n<h3>Why use the parameterized constructor?</h3>\n\n\n\n<p>The parameterized constructor is used to provide different values to distinct objects. However, you can provide the same values also.</p>\n\n\n\n<h3>Example of parameterized constructor</h3>\n\n\n\n<p>In this example, we have created the constructor of Student class that have two parameters. We can have any number of parameters in the constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of the parameterized constructor.  \nclass Student4{  \n    int id;  \n    String name;  \n    //creating a parameterized constructor  \n    Student4(int i,String n){  \n    id = i;  \n    name = n;  \n    }  \n    //method to display the values  \n    void display(){System.out.println(id+\" \"+name);}  \n   \n    public static void main(String args&#91;]){  \n    //creating objects and passing values  \n    Student4 s1 = new Student4(111,\"Karan\");  \n    Student4 s2 = new Student4(222,\"Aryan\");  \n    //calling method to display the values of object  \n    s1.display();  \n    s2.display();  \n   }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>111 Karan\n222 Aryan</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Constructor Overloading in Java</h2>\n\n\n\n<p>In Java, a constructor is just like a method but without return type. It can also be overloaded like Java methods.</p>\n\n\n\n<p>Constructor&nbsp;overloading in Java&nbsp;is a technique of having more than one constructor with different parameter lists. They are arranged in a way that each constructor performs a different task. They are differentiated by the compiler by the number of parameters in the list and their types.</p>\n\n\n\n<h3>Example of Constructor Overloading</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java program to overload constructors  \nclass Student5{  \n    int id;  \n    String name;  \n    int age;  \n    //creating two arg constructor  \n    Student5(int i,String n){  \n    id = i;  \n    name = n;  \n    }  \n    //creating three arg constructor  \n    Student5(int i,String n,int a){  \n    id = i;  \n    name = n;  \n    age=a;  \n    }  \n    void display(){System.out.println(id+\" \"+name+\" \"+age);}  \n   \n    public static void main(String args&#91;]){  \n    Student5 s1 = new Student5(111,\"Karan\");  \n    Student5 s2 = new Student5(222,\"Aryan\",25);  \n    s1.display();  \n    s2.display();  \n   }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>111 Karan 0\n222 Aryan 25</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Difference between constructor and method in Java</h2>\n\n\n\n<p>There are many differences between constructors and methods. They are given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Java Constructor</th><th>Java Method</th></tr><tr><td>A constructor is used to initialize the state of an object.</td><td>A method is used to expose the behavior of an object.</td></tr><tr><td>A constructor must not have a return type.</td><td>A method must have a return type.</td></tr><tr><td>The constructor is invoked implicitly.</td><td>The method is invoked explicitly.</td></tr><tr><td>The Java compiler provides a default constructor if you don&#8217;t have any constructor in a class.</td><td>The method is not provided by the compiler in any case.</td></tr><tr><td>The constructor name must be same as the class name.</td><td>The method name may or may not be same as the class name.</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/constructor-vs-method-in-java.jpg\" alt=\"Java Constructors vs. Methods\"/></figure>\n\n\n\n<h2>Java Copy Constructor</h2>\n\n\n\n<p>There is no copy constructor in Java. However, we can copy the values from one object to another like copy constructor in C++.</p>\n\n\n\n<p>There are many ways to copy the values of one object into another in Java. They are:</p>\n\n\n\n<ul><li>By constructor</li><li>By assigning the values of one object into another</li><li>By clone() method of Object class</li></ul>\n\n\n\n<p>In this example, we are going to copy the values of one object into another using Java constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java program to initialize the values from one object to another object.  \nclass Student6{  \n    int id;  \n    String name;  \n    //constructor to initialize integer and string  \n    Student6(int i,String n){  \n    id = i;  \n    name = n;  \n    }  \n    //constructor to initialize another object  \n    Student6(Student6 s){  \n    id = s.id;  \n    name =s.name;  \n    }  \n    void display(){System.out.println(id+\" \"+name);}  \n   \n    public static void main(String args&#91;]){  \n    Student6 s1 = new Student6(111,\"Karan\");  \n    Student6 s2 = new Student6(s1);  \n    s1.display();  \n    s2.display();  \n   }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>111 Karan\n111 Karan</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Copying values without constructor</h2>\n\n\n\n<p>We can copy the values of one object into another by assigning the objects values to another object. In this case, there is no need to create the constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student7{  \n    int id;  \n    String name;  \n    Student7(int i,String n){  \n    id = i;  \n    name = n;  \n    }  \n    Student7(){}  \n    void display(){System.out.println(id+\" \"+name);}  \n   \n    public static void main(String args&#91;]){  \n    Student7 s1 = new Student7(111,\"Karan\");  \n    Student7 s2 = new Student7();  \n    s2.id=s1.id;  \n    s2.name=s1.name;  \n    s1.display();  \n    s2.display();  \n   }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>111 Karan\n111 Karan</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Q) Does constructor return any value?</h3>\n\n\n\n<p>Yes, it is the current class instance (You cannot use return type yet it returns a value).</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Can constructor perform other tasks instead of initialization?</h3>\n\n\n\n<p>Yes, like object creation, starting a thread, calling a method, etc. You can perform any operation in the constructor as you perform in the method.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Is there Constructor class in Java?</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Yes.</code></pre>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In&nbsp;Java, a constructor is a block of codes similar to the method. It is called when an instance of the&nbsp;class&nbsp;is created. At the time of calling constructor, memory for the object is allocated in the memory. It is a special type of method which is used to initialize the object. Every time an object is [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4411"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4411"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4411/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4411"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4411"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4411"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4410,
        "date": "2020-06-18T11:15:50",
        "date_gmt": "2020-06-18T11:15:50",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=88"
        },
        "modified": "2020-06-18T11:15:50",
        "modified_gmt": "2020-06-18T11:15:50",
        "slug": "static-keyword",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/static-keyword/",
        "title": {
            "rendered": "static keyword"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>static keyword</strong>&nbsp;in&nbsp;Java&nbsp;is used for memory management mainly. We can apply static keyword with&nbsp;variables, methods, blocks and&nbsp;nested classes. The static keyword belongs to the class than an instance of the class.</p>\n\n\n\n<p>The static can be:</p>\n\n\n\n<ol><li>Variable (also known as a class variable)</li><li>Method (also known as a class method)</li><li>Block</li><li>Nested class</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/java-static-keyword1.png\" alt=\"Static in Java\"/></figure>\n\n\n\n<h2>1) Java static variable</h2>\n\n\n\n<p>If you declare any variable as static, it is known as a static variable.</p>\n\n\n\n<ul><li>The static variable can be used to refer to the common property of all objects (which is not unique for each object), for example, the company name of employees, college name of students, etc.</li><li>The static variable gets memory only once in the class area at the time of class loading.</li></ul>\n\n\n\n<h3>Advantages of static variable</h3>\n\n\n\n<p>It makes your program&nbsp;<strong>memory efficient</strong>&nbsp;(i.e., it saves memory).</p>\n\n\n\n<h4>Understanding the problem without static variable</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \n     int rollno;  \n     String name;  \n     String college=\"ITS\";  \n}  </code></pre>\n\n\n\n<p>Suppose there are 500 students in my college, now all instance data members will get memory each time when the object is created. All students have its unique rollno and name, so instance data member is good in such case. Here, &#8220;college&#8221; refers to the common property of all&nbsp;objects. If we make it static, this field will get the memory only once.</p>\n\n\n\n<h4>Java static property is shared to all objects.</h4>\n\n\n\n<h3>Example of static variable</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of static variable  \nclass Student{  \n   int rollno;//instance variable  \n   String name;  \n   static String college =\"ITS\";//static variable  \n   //constructor  \n   Student(int r, String n){  \n   rollno = r;  \n   name = n;  \n   }  \n   //method to display the values  \n   void display (){System.out.println(rollno+\" \"+name+\" \"+college);}  \n}  \n//Test class to show the values of objects  \npublic class TestStaticVariable1{  \n public static void main(String args&#91;]){  \n Student s1 = new Student(111,\"Karan\");  \n Student s2 = new Student(222,\"Aryan\");  \n //we can change the college of all objects by the single line of code  \n //Student.college=\"BBDIT\";  \n s1.display();  \n s2.display();  \n }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>111 Karan ITS\n222 Aryan ITS</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/staticvariable.JPG\" alt=\"Static Variable\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Program of the counter without static variable</h3>\n\n\n\n<p>In this example, we have created an instance variable named count which is incremented in the constructor. Since instance variable gets the memory at the time of object creation, each object will have the copy of the instance variable. If it is incremented, it won&#8217;t reflect other objects. So each object will have the value 1 in the count variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of an instance variable  \n//which get memory each time when we create an object of the class.  \nclass Counter{  \nint count=0;//will get memory each time when the instance is created  \n  \nCounter(){  \ncount++;//incrementing value  \nSystem.out.println(count);  \n}  \n  \npublic static void main(String args&#91;]){  \n//Creating objects  \nCounter c1=new Counter();  \nCounter c2=new Counter();  \nCounter c3=new Counter();  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n1\n1\n﻿</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Program of counter by static variable</h3>\n\n\n\n<p>As we have mentioned above, static variable will get the memory only once, if any object changes the value of the static variable, it will retain its value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of static variable which  \n//is shared with all objects.  \nclass Counter2{  \nstatic int count=0;//will get memory only once and retain its value  \n  \nCounter2(){  \ncount++;//incrementing the value of static variable  \nSystem.out.println(count);  \n}  \n  \npublic static void main(String args&#91;]){  \n//creating objects  \nCounter2 c1=new Counter2();  \nCounter2 c2=new Counter2();  \nCounter2 c3=new Counter2();  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>2) Java static method</h2>\n\n\n\n<p>If you apply static keyword with any method, it is known as static method.</p>\n\n\n\n<ul><li>A static method belongs to the class rather than the object of a class.</li><li>A static method can be invoked without the need for creating an instance of a class.</li><li>A static method can access static data member and can change the value of it.</li></ul>\n\n\n\n<h3>Example of static method</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the use of a static method.  \nclass Student{  \n     int rollno;  \n     String name;  \n     static String college = \"ITS\";  \n     //static method to change the value of static variable  \n     static void change(){  \n     college = \"BBDIT\";  \n     }  \n     //constructor to initialize the variable  \n     Student(int r, String n){  \n     rollno = r;  \n     name = n;  \n     }  \n     //method to display values  \n     void display(){System.out.println(rollno+\" \"+name+\" \"+college);}  \n}  \n//Test class to create and display the values of object  \npublic class TestStaticMethod{  \n    public static void main(String args&#91;]){  \n    Student.change();//calling change method  \n    //creating objects  \n    Student s1 = new Student(111,\"Karan\");  \n    Student s2 = new Student(222,\"Aryan\");  \n    Student s3 = new Student(333,\"Sonoo\");  \n    //calling display method  \n    s1.display();  \n    s2.display();  \n    s3.display();  \n    }  \n}  \n\n\n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:111 Karan BBDIT\n       222 Aryan BBDIT\n       333 Sonoo BBDIT</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Another example of a static method that performs a normal calculation</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to get the cube of a given number using the static method  \n  \nclass Calculate{  \n  static int cube(int x){  \n  return x*x*x;  \n  }  \n  \n  public static void main(String args&#91;]){  \n  int result=Calculate.cube(5);  \n  System.out.println(result);  \n  }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:125\n</code></pre>\n\n\n\n<h3>Restrictions for the static method</h3>\n\n\n\n<p>There are two main restrictions for the static method. They are:</p>\n\n\n\n<ol><li>The static method can not use non static data member or call non-static method directly.</li><li>this and super cannot be used in static context.</li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \n int a=40;//non static  \n   \n public static void main(String args&#91;]){  \n  System.out.println(a);  \n }  \n}  \n\n\n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Compile Time Error\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Q) Why is the Java main method static?</h3>\n\n\n\n<p>Ans) It is because the object is not required to call a static method. If it were a non-static method,&nbsp;JVM&nbsp;creates an object first then call main() method that will lead the problem of extra memory allocation.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>3) Java static block</h2>\n\n\n\n<ul><li>Is used to initialize the static data member.</li><li>It is executed before the main method at the time of classloading.</li></ul>\n\n\n\n<h3>Example of static block</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class A2{  \n  static{System.out.println(\"static block is invoked\");}  \n  public static void main(String args&#91;]){  \n   System.out.println(\"Hello main\");  \n  }  \n}  \n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:static block is invoked\n       Hello main</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Q) Can we execute a program without main() method?</h3>\n\n\n\n<p>Ans) No, one of the ways was the static block, but it was possible till JDK 1.6. Since JDK 1.7, it is not possible to execute a Java class without the&nbsp;main method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A3{  \n  static{  \n  System.out.println(\"static block is invoked\");  \n  System.exit(0);  \n  }  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>static block is invoked\n</code></pre>\n\n\n\n<p>Since JDK 1.7 and above, output would be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Error: Main method not found in class A3, please define the main method as:\n   public static void main(String&#91;] args)\nor a JavaFX application class must extend javafx.application.Application</code></pre>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;static keyword&nbsp;in&nbsp;Java&nbsp;is used for memory management mainly. We can apply static keyword with&nbsp;variables, methods, blocks and&nbsp;nested classes. The static keyword belongs to the class than an instance of the class. The static can be: Variable (also known as a class variable) Method (also known as a class method) Block Nested class 1) Java static variable [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4410"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4410"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4410/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4410"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4410"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4410"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4409,
        "date": "2020-06-18T11:20:05",
        "date_gmt": "2020-06-18T11:20:05",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=84"
        },
        "modified": "2020-06-18T11:20:05",
        "modified_gmt": "2020-06-18T11:20:05",
        "slug": "inheritance-2",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/inheritance-2/",
        "title": {
            "rendered": "Inheritance"
        },
        "content": {
            "rendered": "\n<p><strong>Inheritance in Java</strong> is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOPs(Object Oriented programming system).</p>\n\n\n\n<p>The idea behind inheritance in Java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of the parent class. Moreover, you can add new methods and fields in your current class also.</p>\n\n\n\n<p>Inheritance represents the&nbsp;<strong>IS-A relationship</strong>&nbsp;which is also known as a&nbsp;<em>parent-child</em>&nbsp;relationship.</p>\n\n\n\n<h3>Why use inheritance in java</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>For Method Overriding (so runtime polymorphism can be achieved).\nFor Code Reusability.</code></pre>\n\n\n\n<h3>Terms used in Inheritance</h3>\n\n\n\n<ul><li><strong>Class:</strong>&nbsp;A class is a group of objects which have common properties. It is a template or blueprint from which objects are created.</li><li><strong>Sub Class/Child Class:</strong>&nbsp;Subclass is a class which inherits the other class. It is also called a derived class, extended class, or child class.</li><li><strong>Super Class/Parent Class:</strong>&nbsp;Superclass is the class from where a subclass inherits the features. It is also called a base class or a parent class.</li><li><strong>Reusability:</strong>&nbsp;As the name specifies, reusability is a mechanism which facilitates you to reuse the fields and methods of the existing class when you create a new class. You can use the same fields and methods already defined in the previous class.</li></ul>\n\n\n\n<h3>The syntax of Java Inheritance</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Subclass-name extends Superclass-name  \n{  \n   //methods and fields  \n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>extends keyword</strong>&nbsp;indicates that you are making a new class that derives from an existing class. The meaning of &#8220;extends&#8221; is to increase the functionality.</p>\n\n\n\n<p>In the terminology of Java, a class which is inherited is called a parent or superclass, and the new class is called child or subclass.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Java Inheritance Example</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/inheritance.jpg\" alt=\"Inheritance in Java\"/></figure>\n\n\n\n<p>As displayed in the above figure, Programmer is the subclass and Employee is the superclass. The relationship between the two classes is <strong>Programmer IS-A Employee</strong>. It means that Programmer is a type of Employee.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Employee{  \n float salary=40000;  \n}  \nclass Programmer extends Employee{  \n int bonus=10000;  \n public static void main(String args&#91;]){  \n   Programmer p=new Programmer();  \n   System.out.println(\"Programmer salary is:\"+p.salary);  \n   System.out.println(\"Bonus of Programmer is:\"+p.bonus);  \n}  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Programmer salary is:40000.0\n Bonus of programmer is:10000</code></pre>\n\n\n\n<p>In the above example, Programmer object can access the field of own class as well as of Employee class i.e. code reusability.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Types of inheritance in java</h2>\n\n\n\n<p>On the basis of class, there can be three types of inheritance in java: single, multilevel and hierarchical.</p>\n\n\n\n<p>In java programming, multiple and hybrid inheritance is supported through interface only. We will learn about interfaces later.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/typesofinheritance.jpg\" alt=\"Types of inheritance in Java\"/></figure>\n\n\n\n<h4>Note: Multiple inheritance is not supported in Java through class.</h4>\n\n\n\n<p>When one class inherits multiple classes, it is known as multiple inheritance. For Example:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/multiple.jpg\" alt=\"Multiple inheritance in Java\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Single Inheritance Example</h2>\n\n\n\n<p>When a class inherits another class, it is known as a&nbsp;<em>single inheritance</em>. In the example given below, Dog class inherits the Animal class, so there is the single inheritance.</p>\n\n\n\n<p>File: TestInheritance.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{  \nvoid eat(){System.out.println(\"eating...\");}  \n}  \nclass Dog extends Animal{  \nvoid bark(){System.out.println(\"barking...\");}  \n}  \nclass TestInheritance{  \npublic static void main(String args&#91;]){  \nDog d=new Dog();  \nd.bark();  \nd.eat();  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">barking...\neating...\n</pre>\n\n\n\n<h2>Multilevel Inheritance Example</h2>\n\n\n\n<p>When there is a chain of inheritance, it is known as&nbsp;<em>multilevel inheritance</em>. As you can see in the example given below, BabyDog class inherits the Dog class which again inherits the Animal class, so there is a multilevel inheritance.</p>\n\n\n\n<p>File: TestInheritance2.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{  \nvoid eat(){System.out.println(\"eating...\");}  \n}  \nclass Dog extends Animal{  \nvoid bark(){System.out.println(\"barking...\");}  \n}  \nclass BabyDog extends Dog{  \nvoid weep(){System.out.println(\"weeping...\");}  \n}  \nclass TestInheritance2{  \npublic static void main(String args&#91;]){  \nBabyDog d=new BabyDog();  \nd.weep();  \nd.bark();  \nd.eat();  \n}}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>weeping...\nbarking...\neating...\n﻿</code></pre>\n\n\n\n<h2>Hierarchical Inheritance Example</h2>\n\n\n\n<p>When two or more classes inherits a single class, it is known as&nbsp;<em>hierarchical inheritance</em>. In the example given below, Dog and Cat classes inherits the Animal class, so there is hierarchical inheritance.</p>\n\n\n\n<p>File: TestInheritance3.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{  \nvoid eat(){System.out.println(\"eating...\");}  \n}  \nclass Dog extends Animal{  \nvoid bark(){System.out.println(\"barking...\");}  \n}  \nclass Cat extends Animal{  \nvoid meow(){System.out.println(\"meowing...\");}  \n}  \nclass TestInheritance3{  \npublic static void main(String args&#91;]){  \nCat c=new Cat();  \nc.meow();  \nc.eat();  \n//c.bark();//C.T.Error  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>meowing...\neating...</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Q) Why multiple inheritance is not supported in java?</h2>\n\n\n\n<p>To reduce the complexity and simplify the language, multiple inheritance is not supported in java.</p>\n\n\n\n<p>Consider a scenario where A, B, and C are three classes. The C class inherits A and B classes. If A and B classes have the same method and you call it from child class object, there will be ambiguity to call the method of A or B class.</p>\n\n\n\n<p>Since compile-time errors are better than runtime errors, Java renders compile-time error if you inherit 2 classes. So whether you have same method or different, there will be compile time error.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nvoid msg(){System.out.println(\"Hello\");}  \n}  \nclass B{  \nvoid msg(){System.out.println(\"Welcome\");}  \n}  \nclass C extends A,B{//suppose if it were  \n   \n public static void main(String args&#91;]){  \n   C obj=new C();  \n   obj.msg();//Now which msg() method would be invoked?  \n}  \n}  \n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code> Compile Time Error</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object. It is an important part of OOPs(Object Oriented programming system). The idea behind inheritance in Java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4409"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4409"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4409/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4409"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4409"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4409"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4408,
        "date": "2020-06-18T11:21:59",
        "date_gmt": "2020-06-18T11:21:59",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=83"
        },
        "modified": "2020-06-18T11:21:59",
        "modified_gmt": "2020-06-18T11:21:59",
        "slug": "aggregation-2",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/aggregation-2/",
        "title": {
            "rendered": "Aggregation"
        },
        "content": {
            "rendered": "\n<p>If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship.</p>\n\n\n\n<p>Consider a situation, Employee object contains many informations such as id, name, emailId etc. It contains one more object named address, which contains its own informations such as city, state, country, zipcode etc. as given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Employee{  \nint id;  \nString name;  \nAddress address;//Address is a class  \n...  \n} </code></pre>\n\n\n\n<p>In such case, Employee has an entity reference address, so relationship is Employee HAS-A address.</p>\n\n\n\n<h3>Why use Aggregation?</h3>\n\n\n\n<ul><li>For Code Reusability.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Simple Example of Aggregation</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/aggregation.JPG\" alt=\"aggregation example\"/></figure>\n\n\n\n<p>In this example, we have created the reference of Operation class in the Circle class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Operation{  \n int square(int n){  \n  return n*n;  \n }  \n}  \n  \nclass Circle{  \n Operation op;//aggregation  \n double pi=3.14;  \n    \n double area(int radius){  \n   op=new Operation();  \n   int rsquare=op.square(radius);//code reusability (i.e. delegates the method call).  \n   return pi*rsquare;  \n }  \n  \n     \n    \n public static void main(String args&#91;]){  \n   Circle c=new Circle();  \n   double result=c.area(5);  \n   System.out.println(result);  \n }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:78.5\n</code></pre>\n\n\n\n<h3>When use Aggregation?</h3>\n\n\n\n<ul><li>Code reuse is also best achieved by aggregation when there is no is-a relationship.</li><li>Inheritance should be used only if the relationship is-a is maintained throughout the lifetime of the objects involved; otherwise, aggregation is the best choice.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Understanding meaningful example of Aggregation</h3>\n\n\n\n<p>In this example, Employee has an object of Address, address object contains its own informations such as city, state, country etc. In such case relationship is Employee HAS-A address.</p>\n\n\n\n<h4>Address.java</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Address {  \nString city,state,country;  \n  \npublic Address(String city, String state, String country) {  \n    this.city = city;  \n    this.state = state;  \n    this.country = country;  \n}  \n  \n} </code></pre>\n\n\n\n<h4>Emp.java</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Emp {  \nint id;  \nString name;  \nAddress address;  \n  \npublic Emp(int id, String name,Address address) {  \n    this.id = id;  \n    this.name = name;  \n    this.address=address;  \n}  \n  \nvoid display(){  \nSystem.out.println(id+\" \"+name);  \nSystem.out.println(address.city+\" \"+address.state+\" \"+address.country);  \n}  \n  \npublic static void main(String&#91;] args) {  \nAddress address1=new Address(\"gzb\",\"UP\",\"india\");  \nAddress address2=new Address(\"gno\",\"UP\",\"india\");  \n  \nEmp e=new Emp(111,\"varun\",address1);  \nEmp e2=new Emp(112,\"arun\",address2);  \n      \ne.display();  \ne2.display();  \n      \n}  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\">Output:111 varun\n       gzb UP pakistan\n       112 arun\n       gno UP pakistan</pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship. Consider a situation, Employee object contains many informations such as id, name, emailId etc. It contains one more object named address, which contains its own informations such as city, state, country, zipcode etc. as given below. In such case, [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4408"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4408"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4408/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4408"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4408"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4408"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4407,
        "date": "2020-06-18T11:25:37",
        "date_gmt": "2020-06-18T11:25:37",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=82"
        },
        "modified": "2020-06-18T11:25:37",
        "modified_gmt": "2020-06-18T11:25:37",
        "slug": "method-overloading",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/method-overloading/",
        "title": {
            "rendered": "Method Overloading"
        },
        "content": {
            "rendered": "\n<p>If a&nbsp;class&nbsp;has multiple methods having same name but different in parameters, it is known as&nbsp;<strong>Method Overloading</strong>.</p>\n\n\n\n<p>If we have to perform only one operation, having same name of the methods increases the readability of the&nbsp;program.</p>\n\n\n\n<p>Suppose you have to perform addition of the given numbers but there can be any number of arguments, if you write the method such as a(int,int) for two parameters, and b(int,int,int) for three parameters then it may be difficult for you as well as other programmers to understand the behavior of the method because its name differs.</p>\n\n\n\n<p>So, we perform method overloading to figure out the program quickly.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/overload1.jpg\" alt=\"java method overloading\"/></figure>\n\n\n\n<h2>Advantage of method overloading</h2>\n\n\n\n<p>Method overloading&nbsp;<em>increases the readability of the program</em>.</p>\n\n\n\n<h3>Different ways to overload the method</h3>\n\n\n\n<p>There are two ways to overload the method in java</p>\n\n\n\n<ol><li>By changing number of arguments</li><li>By changing the data type</li></ol>\n\n\n\n<h4>In java, Method Overloading is not possible by changing the return type of the method only.</h4>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>1) Method Overloading: changing no. of arguments</h3>\n\n\n\n<p>In this example, we have created two methods, first add() method performs addition of two numbers and second add method performs addition of three numbers.</p>\n\n\n\n<p>In this example, we are creating&nbsp;static methods&nbsp;so that we don&#8217;t need to create instance for calling methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Adder{  \nstatic int add(int a,int b){return a+b;}  \nstatic int add(int a,int b,int c){return a+b+c;}  \n}  \nclass TestOverloading1{  \npublic static void main(String&#91;] args){  \nSystem.out.println(Adder.add(11,11));  \nSystem.out.println(Adder.add(11,11,11));  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>22\n33</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>2) Method Overloading: changing data type of arguments</h3>\n\n\n\n<p>In this example, we have created two methods that differs in&nbsp;data type. The first add method receives two integer arguments and second add method receives two double arguments.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Adder{  \nstatic int add(int a, int b){return a+b;}  \nstatic double add(double a, double b){return a+b;}  \n}  \nclass TestOverloading2{  \npublic static void main(String&#91;] args){  \nSystem.out.println(Adder.add(11,11));  \nSystem.out.println(Adder.add(12.3,12.6));  \n}} </code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\">22\n24.9\n</pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Q) Why Method Overloading is not possible by changing the return type of method only?</h3>\n\n\n\n<p>In java, method overloading is not possible by changing the return type of the method only because of ambiguity. Let&#8217;s see how ambiguity may occur:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Adder{  \nstatic int add(int a,int b){return a+b;}  \nstatic double add(int a,int b){return a+b;}  \n}  \nclass TestOverloading3{  \npublic static void main(String&#91;] args){  \nSystem.out.println(Adder.add(11,11));//ambiguity  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">Compile Time Error: method add(int,int) is already defined in class Adder\n</pre>\n\n\n\n<p>System.out.println(Adder.add(11,11)); //Here, how can java determine which sum() method should be called?</p>\n\n\n\n<h4>Note: Compile Time Error is better than Run Time Error. So, java compiler renders compiler time error if you declare the same method having same parameters.</h4>\n\n\n\n<h3>Can we overload java main() method?</h3>\n\n\n\n<p>Yes, by method overloading. You can have any number of main methods in a class by method overloading. But&nbsp;JVM&nbsp;calls main() method which receives string array as arguments only. Let&#8217;s see the simple example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class TestOverloading4{  \npublic static void main(String&#91;] args){System.out.println(\"main with String&#91;]\");}  \npublic static void main(String args){System.out.println(\"main with String\");}  \npublic static void main(){System.out.println(\"main without args\");}  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>main with String&#91;]\n</code></pre>\n\n\n\n<h2>Method Overloading and Type Promotion</h2>\n\n\n\n<p>One type is promoted to another implicitly if no matching datatype is found. Let&#8217;s understand the concept by the figure given below:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/java-type-promotion.png\" alt=\"Java Method Overloading with Type Promotion\"/></figure>\n\n\n\n<p>As displayed in the above diagram, byte can be promoted to short, int, long, float or double. The short datatype can be promoted to int, long, float or double. The char datatype can be promoted to int,long,float or double and so on.</p>\n\n\n\n<h3>Example of Method Overloading with TypePromotion</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class OverloadingCalculation1{  \n  void sum(int a,long b){System.out.println(a+b);}  \n  void sum(int a,int b,int c){System.out.println(a+b+c);}  \n  \n  public static void main(String args&#91;]){  \n  OverloadingCalculation1 obj=new OverloadingCalculation1();  \n  obj.sum(20,20);//now second int literal will be promoted to long  \n  obj.sum(20,20,20);  \n  \n  }  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:40\n       60</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Example of Method Overloading with Type Promotion if matching found</h3>\n\n\n\n<p>If there are matching type arguments in the method, type promotion is not performed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class OverloadingCalculation2{  \n  void sum(int a,int b){System.out.println(\"int arg method invoked\");}  \n  void sum(long a,long b){System.out.println(\"long arg method invoked\");}  \n  \n  public static void main(String args&#91;]){  \n  OverloadingCalculation2 obj=new OverloadingCalculation2();  \n  obj.sum(20,20);//now int arg sum() method gets invoked  \n  }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:int arg method invoked\n</code></pre>\n\n\n\n<h3>Example of Method Overloading with Type Promotion in case of ambiguity</h3>\n\n\n\n<p>If there are no matching type arguments in the method, and each method promotes similar number of arguments, there will be ambiguity.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class OverloadingCalculation3{  \n  void sum(int a,long b){System.out.println(\"a method invoked\");}  \n  void sum(long a,int b){System.out.println(\"b method invoked\");}  \n  \n  public static void main(String args&#91;]){  \n  OverloadingCalculation3 obj=new OverloadingCalculation3();  \n  obj.sum(20,20);//now ambiguity  \n  }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Compile Time Error</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>If a&nbsp;class&nbsp;has multiple methods having same name but different in parameters, it is known as&nbsp;Method Overloading. If we have to perform only one operation, having same name of the methods increases the readability of the&nbsp;program. Suppose you have to perform addition of the given numbers but there can be any number of arguments, if you [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4407"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4407"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4407/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4407"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4407"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4407"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4418,
        "date": "2020-06-18T11:28:00",
        "date_gmt": "2020-06-18T11:28:00",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=143"
        },
        "modified": "2020-06-18T11:28:00",
        "modified_gmt": "2020-06-18T11:28:00",
        "slug": "method-overriding",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/method-overriding/",
        "title": {
            "rendered": "Method Overriding"
        },
        "content": {
            "rendered": "\n<p>If subclass (child class) has the same method as declared in the parent class, it is known as&nbsp;<strong>method overriding in Java</strong>.</p>\n\n\n\n<p>In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.</p>\n\n\n\n<h3>Usage of Java Method Overriding</h3>\n\n\n\n<ul><li>Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.</li><li>Method overriding is used for runtime polymorphism</li></ul>\n\n\n\n<h4>Rules for Java Method Overriding</h4>\n\n\n\n<ol><li>The method must have the same name as in the parent class</li><li>The method must have the same parameter as in the parent class.</li><li>There must be an IS-A relationship (inheritance).</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/java-rules-for-method-overriding.png\" alt=\"Java Rules for Method Overriding\"/></figure>\n\n\n\n<h3>Understanding the problem without method overriding</h3>\n\n\n\n<p>Let&#8217;s understand the problem that we may face in the program if we don&#8217;t use method overriding.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate why we need method overriding  \n//Here, we are calling the method of parent class with child  \n//class object.  \n//Creating a parent class  \nclass Vehicle{  \n  void run(){System.out.println(\"Vehicle is running\");}  \n}  \n//Creating a child class  \nclass Bike extends Vehicle{  \n  public static void main(String args&#91;]){  \n  //creating an instance of child class  \n  Bike obj = new Bike();  \n  //calling the method with child class instance  \n  obj.run();  \n  }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vehicle is running\n</code></pre>\n\n\n\n<p>Problem is that I have to provide a specific implementation of run() method in subclass that is why we use method overriding.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Example of method overriding</h3>\n\n\n\n<p>In this example, we have defined the run method in the subclass as defined in the parent class but it has some specific implementation. The name and parameter of the method are the same, and there is IS-A relationship between the classes, so there is method overriding.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of Java Method Overriding  \n//Creating a parent class.  \nclass Vehicle{  \n  //defining a method  \n  void run(){System.out.println(\"Vehicle is running\");}  \n}  \n//Creating a child class  \nclass Bike2 extends Vehicle{  \n  //defining the same method as in the parent class  \n  void run(){System.out.println(\"Bike is running safely\");}  \n  \n  public static void main(String args&#91;]){  \n  Bike2 obj = new Bike2();//creating object  \n  obj.run();//calling method  \n  }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">Bike is running safely\n</pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>A real example of Java Method Overriding</h3>\n\n\n\n<p>Consider a scenario where Bank is a class that provides functionality to get the rate of interest. However, the rate of interest varies according to banks. For example, SBI, ICICI and AXIS banks could provide 8%, 7%, and 9% rate of interest.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/bankinheritance.png\" alt=\"Java method overriding example of bank\"/></figure>\n\n\n\n<h4>Java method overriding is mostly used in Runtime Polymorphism which we will learn in next pages.</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the real scenario of Java Method Overriding  \n//where three classes are overriding the method of a parent class.  \n//Creating a parent class.  \nclass Bank{  \nint getRateOfInterest(){return 0;}  \n}  \n//Creating child classes.  \nclass SBI extends Bank{  \nint getRateOfInterest(){return 8;}  \n}  \n  \nclass ICICI extends Bank{  \nint getRateOfInterest(){return 7;}  \n}  \nclass AXIS extends Bank{  \nint getRateOfInterest(){return 9;}  \n}  \n//Test class to create objects and call the methods  \nclass Test2{  \npublic static void main(String args&#91;]){  \nSBI s=new SBI();  \nICICI i=new ICICI();  \nAXIS a=new AXIS();  \nSystem.out.println(\"SBI Rate of Interest: \"+s.getRateOfInterest());  \nSystem.out.println(\"ICICI Rate of Interest: \"+i.getRateOfInterest());  \nSystem.out.println(\"AXIS Rate of Interest: \"+a.getRateOfInterest());  \n}  \n}  </code></pre>\n\n\n\n<p></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:\nSBI Rate of Interest: 8\nICICI Rate of Interest: 7\nAXIS Rate of Interest: 9</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>If subclass (child class) has the same method as declared in the parent class, it is known as&nbsp;method overriding in Java. In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding. Usage of Java Method Overriding [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4418"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4418"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4418/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4418"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4418"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4418"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4417,
        "date": "2020-06-18T11:28:52",
        "date_gmt": "2020-06-18T11:28:52",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=142"
        },
        "modified": "2020-06-18T11:28:52",
        "modified_gmt": "2020-06-18T11:28:52",
        "slug": "covariant-return-type",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/covariant-return-type/",
        "title": {
            "rendered": "Covariant Return Type"
        },
        "content": {
            "rendered": "\n<p>The covariant return type specifies that the return type may vary in the same direction as the subclass.</p>\n\n\n\n<p>Before Java5, it was not possible to override any method by changing the return type. But now, since Java5, it is possible to override method by changing the return type if subclass overrides any method whose return type is Non-Primitive but it changes its return type to subclass type. Let&#8217;s take a simple example:</p>\n\n\n\n<h4>Note: If you are beginner to java, skip this topic and return to it after OOPs concepts.</h4>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Simple example of Covariant Return Type</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nA get(){return this;}  \n}  \n  \nclass B1 extends A{  \nB1 get(){return this;}  \nvoid message(){System.out.println(\"welcome to covariant return type\");}  \n  \npublic static void main(String args&#91;]){  \nnew B1().get().message();  \n}  \n}  \n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:welcome to covariant return type\n</code></pre>\n\n\n\n<p>As you can see in the above example, the return type of the get() method of A class is A but the return type of the get() method of B class is B. Both methods have different return type but it is method overriding. This is known as covariant return type.</p>\n\n\n\n<h3>How is Covariant return types implemented?</h3>\n\n\n\n<p>Java doesn&#8217;t allow the return type based overloading but JVM always allows return type based overloading. JVM uses full signature of a method for lookup/resolution. Full signature means it includes return type in addition to argument types. i.e., a class can have two or more methods differing only by return type. javac uses this fact to implement covariant return types.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The covariant return type specifies that the return type may vary in the same direction as the subclass. Before Java5, it was not possible to override any method by changing the return type. But now, since Java5, it is possible to override method by changing the return type if subclass overrides any method whose return [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4417"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4417"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4417/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4417"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4417"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4417"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4416,
        "date": "2020-06-18T11:31:36",
        "date_gmt": "2020-06-18T11:31:36",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=141"
        },
        "modified": "2020-06-18T11:31:36",
        "modified_gmt": "2020-06-18T11:31:36",
        "slug": "super-keyword-in-java",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/super-keyword-in-java/",
        "title": {
            "rendered": "Super Keyword in Java"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>super</strong>&nbsp;keyword in Java is a reference variable which is used to refer immediate parent class object.</p>\n\n\n\n<p>Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.</p>\n\n\n\n<h2>Usage of Java super Keyword</h2>\n\n\n\n<ol><li>super can be used to refer immediate parent class instance variable.</li><li>super can be used to invoke immediate parent class method.</li><li>super() can be used to invoke immediate parent class constructor.</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/usage-of-java-super.jpg\" alt=\"Usage of Java Super keyword\"/></figure>\n\n\n\n<h2>1) super is used to refer immediate parent class instance variable.</h2>\n\n\n\n<p>We can use super keyword to access the data member or field of parent class. It is used if parent class and child class have same fields.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{  \nString color=\"white\";  \n}  \nclass Dog extends Animal{  \nString color=\"black\";  \nvoid printColor(){  \nSystem.out.println(color);//prints color of Dog class  \nSystem.out.println(super.color);//prints color of Animal class  \n}  \n}  \nclass TestSuper1{  \npublic static void main(String args&#91;]){  \nDog d=new Dog();  \nd.printColor();  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>black\nwhite</code></pre>\n\n\n\n<p>In the above example, Animal and Dog both classes have a common property color. If we print color property, it will print the color of current class by default. To access the parent property, we need to use super keyword.</p>\n\n\n\n<h2>2) super can be used to invoke parent class method</h2>\n\n\n\n<p>The super keyword can also be used to invoke parent class method. It should be used if subclass contains the same method as parent class. In other words, it is used if method is overridden.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{  \nvoid eat(){System.out.println(\"eating...\");}  \n}  \nclass Dog extends Animal{  \nvoid eat(){System.out.println(\"eating bread...\");}  \nvoid bark(){System.out.println(\"barking...\");}  \nvoid work(){  \nsuper.eat();  \nbark();  \n}  \n}  \nclass TestSuper2{  \npublic static void main(String args&#91;]){  \nDog d=new Dog();  \nd.work();  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>eating...\nbarking...</code></pre>\n\n\n\n<p>In the above example Animal and Dog both classes have eat() method if we call eat() method from Dog class, it will call the eat() method of Dog class by default because priority is given to local.</p>\n\n\n\n<p>To call the parent class method, we need to use super keyword.</p>\n\n\n\n<h2>3) super is used to invoke parent class constructor.</h2>\n\n\n\n<p>The super keyword can also be used to invoke the parent class constructor. Let&#8217;s see a simple example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{  \nAnimal(){System.out.println(\"animal is created\");}  \n}  \nclass Dog extends Animal{  \nDog(){  \nsuper();  \nSystem.out.println(\"dog is created\");  \n}  \n}  \nclass TestSuper3{  \npublic static void main(String args&#91;]){  \nDog d=new Dog();  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>animal is created\ndog is created</code></pre>\n\n\n\n<h4>Note: super() is added in each class constructor automatically by compiler if there is no super() or this().</h4>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/java-super.jpg\" alt=\"java super\"/></figure>\n\n\n\n<p>As we know well that default constructor is provided by compiler automatically if there is no constructor. But, it also adds super() as the first statement.</p>\n\n\n\n<p><strong>Another example of super keyword where super() is provided by the compiler implicitly.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{  \nAnimal(){System.out.println(\"animal is created\");}  \n}  \nclass Dog extends Animal{  \nDog(){  \nSystem.out.println(\"dog is created\");  \n}  \n}  \nclass TestSuper4{  \npublic static void main(String args&#91;]){  \nDog d=new Dog();  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>animal is created\ndog is created</code></pre>\n\n\n\n<h2>super example: real use</h2>\n\n\n\n<p>Let&#8217;s see the real use of super keyword. Here, Emp class inherits Person class so all the properties of Person will be inherited to Emp by default. To initialize all the property, we are using parent class constructor from child class. In such way, we are reusing the parent class constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Person{  \nint id;  \nString name;  \nPerson(int id,String name){  \nthis.id=id;  \nthis.name=name;  \n}  \n}  \nclass Emp extends Person{  \nfloat salary;  \nEmp(int id,String name,float salary){  \nsuper(id,name);//reusing parent constructor  \nthis.salary=salary;  \n}  \nvoid display(){System.out.println(id+\" \"+name+\" \"+salary);}  \n}  \nclass TestSuper5{  \npublic static void main(String&#91;] args){  \nEmp e1=new Emp(1,\"ankit\",45000f);  \ne1.display();  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 ankit 45000</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;super&nbsp;keyword in Java is a reference variable which is used to refer immediate parent class object. Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable. Usage of Java super Keyword super can be used to refer immediate parent class instance variable. super [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4416"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4416"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4416/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4416"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4416"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4416"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4415,
        "date": "2020-06-18T11:34:26",
        "date_gmt": "2020-06-18T11:34:26",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=140"
        },
        "modified": "2020-06-18T11:34:26",
        "modified_gmt": "2020-06-18T11:34:26",
        "slug": "instance-initializer-block",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/instance-initializer-block/",
        "title": {
            "rendered": "Instance initializer block"
        },
        "content": {
            "rendered": "\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Instance Initializer block</strong>&nbsp;is used to initialize the instance data member. It run each time when object of the class is created.</td></tr><tr><td>The initialization of the instance variable can be done directly but there can be performed extra operations while initializing the instance variable in the instance initializer block.</td></tr></tbody></table></figure>\n\n\n\n<h4>Que) What is the use of instance initializer block while we can directly assign a value in instance data member? For example:</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike{  \n    int speed=100;  \n}  </code></pre>\n\n\n\n<h2>Why use instance initializer block?</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Suppose I have to perform some operations while assigning value to instance data member e.g. a for loop to fill a complex array or error handling etc.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Example of instance initializer block</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Let&#8217;s see the simple example of instance initializer block that performs initialization.</td></tr></tbody></table><figcaption><br><br></figcaption></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:speed is 100\n       speed is 100</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>There are three places in java where you can perform operations:methodconstructorblock</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>What is invoked first, instance initializer block or constructor?</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike8{  \n    int speed;  \n      \n    Bike8(){System.out.println(\"constructor is invoked\");}  \n   \n    {System.out.println(\"instance initializer block invoked\");}  \n       \n    public static void main(String args&#91;]){  \n    Bike8 b1=new Bike8();  \n    Bike8 b2=new Bike8();  \n    }      \n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:instance initializer block invoked\n       constructor is invoked\n       instance initializer block invoked\n       constructor is invoked</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>In the above example, it seems that instance initializer block is firstly invoked but NO. Instance intializer block is invoked at the time of object creation. The java compiler copies the instance initializer block in the constructor after the first statement super(). So firstly, constructor is invoked. Let&#8217;s understand it by the figure given below:</td></tr></tbody></table></figure>\n\n\n\n<h4>Note: The java compiler copies the code of instance initializer block in every constructor.</h4>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/instanceinitializerblock.jpg\" alt=\"instance initializer block\"/></figure>\n\n\n\n<h2>Rules for instance initializer block :</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>There are mainly three rules for the instance initializer block. They are as follows:</td></tr></tbody></table></figure>\n\n\n\n<ol><li>The instance initializer block is created when instance of the class is created.</li><li>The instance initializer block is invoked after the parent class constructor is invoked (i.e. after super() constructor call).</li><li>The instance initializer block comes in the order in which they appear.</li></ol>\n\n\n\n<h2>Program of instance initializer block that is invoked after super()</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nA(){  \nSystem.out.println(\"parent class constructor invoked\");  \n}  \n}  \nclass B2 extends A{  \nB2(){  \nsuper();  \nSystem.out.println(\"child class constructor invoked\");  \n}  \n  \n{System.out.println(\"instance initializer block is invoked\");}  \n  \npublic static void main(String args&#91;]){  \nB2 b=new B2();  \n}  \n} </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:parent class constructor invoked\n       instance initializer block is invoked\n       child class constructor invoked</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Another example of instance block</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nA(){  \nSystem.out.println(\"parent class constructor invoked\");  \n}  \n}  \n  \nclass B3 extends A{  \nB3(){  \nsuper();  \nSystem.out.println(\"child class constructor invoked\");  \n}  \n  \nB3(int a){  \nsuper();  \nSystem.out.println(\"child class constructor invoked \"+a);  \n}  \n  \n{System.out.println(\"instance initializer block is invoked\");}  \n  \npublic static void main(String args&#91;]){  \nB3 b1=new B3();  \nB3 b2=new B3(10);  \n}  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:parent class constructor invoked\n       instance initializer block is invoked\n       child class constructor invoked\n       parent class constructor invoked\n       instance initializer block is invoked\n       child class constructor invoked 10</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Instance Initializer block&nbsp;is used to initialize the instance data member. It run each time when object of the class is created. The initialization of the instance variable can be done directly but there can be performed extra operations while initializing the instance variable in the instance initializer block. Que) What is the use of instance [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4415"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4415"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4415/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4415"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4415"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4415"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4414,
        "date": "2020-06-18T11:37:41",
        "date_gmt": "2020-06-18T11:37:41",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=139"
        },
        "modified": "2020-06-18T11:37:41",
        "modified_gmt": "2020-06-18T11:37:41",
        "slug": "final-keyword",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/final-keyword/",
        "title": {
            "rendered": "Final Keyword"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>final keyword</strong>&nbsp;in java is used to restrict the user. The java final keyword can be used in many context. Final can be:</p>\n\n\n\n<ol><li>variable</li><li>method</li><li>class</li></ol>\n\n\n\n<p>The final keyword can be applied with the variables, a final variable that have no value it is called blank final variable or uninitialized final variable. It can be initialized in the constructor only. The blank final variable can be static also which will be initialized in the static block only. We will have detailed learning of these. Let&#8217;s first learn the basics of final keyword.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/final.jpg\" alt=\"final keyword in java\"/></figure>\n\n\n\n<h2>1) Java final variable</h2>\n\n\n\n<p>If you make any variable as final, you cannot change the value of final variable(It will be constant).</p>\n\n\n\n<h3>Example of final variable</h3>\n\n\n\n<p>There is a final variable speedlimit, we are going to change the value of this variable, but It can&#8217;t be changed because final variable once assigned a value can never be changed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike9{  \n final int speedlimit=90;//final variable  \n void run(){  \n  speedlimit=400;  \n }  \n public static void main(String args&#91;]){  \n Bike9 obj=new  Bike9();  \n obj.run();  \n }  \n}//end of class  \n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Compile Time Error\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>2) Java final method</h2>\n\n\n\n<p>If you make any method as final, you cannot override it.</p>\n\n\n\n<h3>Example of final method</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike{  \n  final void run(){System.out.println(\"running\");}  \n}  \n     \nclass Honda extends Bike{  \n   void run(){System.out.println(\"running safely with 100kmph\");}  \n     \n   public static void main(String args&#91;]){  \n   Honda honda= new Honda();  \n   honda.run();  \n   }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Compile Time Error\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>3) Java final class</h2>\n\n\n\n<p>If you make any class as final, you cannot extend it.</p>\n\n\n\n<h3>Example of final class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>final class Bike{}  \n  \nclass Honda1 extends Bike{  \n  void run(){System.out.println(\"running safely with 100kmph\");}  \n    \n  public static void main(String args&#91;]){  \n  Honda1 honda= new Honda1();  \n  honda.run();  \n  }  \n}  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Compile Time Error\n</code></pre>\n\n\n\n<h3>Q) Is final method inherited?</h3>\n\n\n\n<p>Ans) Yes, final method is inherited but you cannot override it. For Example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike{  \n  final void run(){System.out.println(\"running...\");}  \n}  \nclass Honda2 extends Bike{  \n   public static void main(String args&#91;]){  \n    new Honda2().run();  \n   }  \n}  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:running...\n</code></pre>\n\n\n\n<h3>Q) What is blank or uninitialized final variable?</h3>\n\n\n\n<p>A final variable that is not initialized at the time of declaration is known as blank final variable.</p>\n\n\n\n<p>If you want to create a variable that is initialized at the time of creating object and once initialized may not be changed, it is useful. For example PAN CARD number of an employee.</p>\n\n\n\n<p>It can be initialized only in constructor.</p>\n\n\n\n<h3>Example of blank final variable</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \nint id;  \nString name;  \nfinal String PAN_CARD_NUMBER;  \n...  \n}  </code></pre>\n\n\n\n<h3>Que) Can we initialize blank final variable?</h3>\n\n\n\n<p>Yes, but only in constructor. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike10{  \n  final int speedlimit;//blank final variable  \n    \n  Bike10(){  \n  speedlimit=70;  \n  System.out.println(speedlimit);  \n  }  \n  \n  public static void main(String args&#91;]){  \n    new Bike10();  \n }  \n}  \n\n\n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output: 70\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>static blank final variable</h3>\n\n\n\n<p>A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.</p>\n\n\n\n<h3>Example of static blank final variable</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \n  static final int data;//static blank final variable  \n  static{ data=50;}  \n  public static void main(String args&#91;]){  \n    System.out.println(A.data);  \n }  \n}  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Q) What is final parameter?</h3>\n\n\n\n<p>If you declare any parameter as final, you cannot change the value of it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike11{  \n  int cube(final int n){  \n   n=n+2;//can't be changed as n is final  \n   n*n*n;  \n  }  \n  public static void main(String args&#91;]){  \n    Bike11 b=new Bike11();  \n    b.cube(5);  \n }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output: Compile Time Error</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;final keyword&nbsp;in java is used to restrict the user. The java final keyword can be used in many context. Final can be: variable method class The final keyword can be applied with the variables, a final variable that have no value it is called blank final variable or uninitialized final variable. It can be initialized [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4414"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4414"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4414/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4414"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4414"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4414"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4413,
        "date": "2020-06-18T11:41:44",
        "date_gmt": "2020-06-18T11:41:44",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=137"
        },
        "modified": "2020-06-18T11:41:44",
        "modified_gmt": "2020-06-18T11:41:44",
        "slug": "instanceof",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/instanceof/",
        "title": {
            "rendered": "instanceof"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>java instanceof operator</strong>&nbsp;is used to test whether the object is an instance of the specified type (class or subclass or interface).</p>\n\n\n\n<p>The instanceof in java is also known as type&nbsp;<em>comparison operator</em>&nbsp;because it compares the instance with type. It returns either true or false. If we apply the instanceof operator with any variable that has null value, it returns false.</p>\n\n\n\n<h3>Simple example of java instanceof</h3>\n\n\n\n<p>Let&#8217;s see the simple example of instance operator where it tests the current class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Simple1{  \n public static void main(String args&#91;]){  \n Simple1 s=new Simple1();  \n System.out.println(s instanceof Simple1);//true  \n }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:true\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>An object of subclass type is also a type of parent class. For example, if Dog extends Animal then object of Dog can be referred by either Dog or Animal class.</p>\n\n\n\n<h2>Another example of java instanceof operator</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{}  \nclass Dog1 extends Animal{//Dog inherits Animal  \n  \n public static void main(String args&#91;]){  \n Dog1 d=new Dog1();  \n System.out.println(d instanceof Animal);//true  \n }  \n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:true\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>instanceof in java with a variable that have null value</h2>\n\n\n\n<p>If we apply instanceof operator with a variable that have null value, it returns false. Let&#8217;s see the example given below where we apply instanceof operator with the variable that have null value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Dog2{  \n public static void main(String args&#91;]){  \n  Dog2 d=null;  \n  System.out.println(d instanceof Dog2);//false  \n }  \n}  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:false\n</code></pre>\n\n\n\n<h2>Downcasting with java instanceof operator</h2>\n\n\n\n<p>When Subclass type refers to the object of Parent class, it is known as downcasting. If we perform it directly, compiler gives Compilation error. If you perform it by typecasting, ClassCastException is thrown at runtime. But if we use instanceof operator, downcasting is possible.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Dog d=new Animal();//Compilation error  </code></pre>\n\n\n\n<p>If we perform downcasting by typecasting, ClassCastException is thrown at runtime.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Dog d=(Dog)new Animal();  \n//Compiles successfully but ClassCastException is thrown at runtime </code></pre>\n\n\n\n<h3>Possibility of downcasting with instanceof</h3>\n\n\n\n<p>Let&#8217;s see the example, where downcasting is possible by instanceof operator.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal { }  \n  \nclass Dog3 extends Animal {  \n  static void method(Animal a) {  \n    if(a instanceof Dog3){  \n       Dog3 d=(Dog3)a;//downcasting  \n       System.out.println(\"ok downcasting performed\");  \n    }  \n  }  \n   \n  public static void main (String &#91;] args) {  \n    Animal a=new Dog3();  \n    Dog3.method(a);  \n  }  \n    \n }  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:ok downcasting performed\n</code></pre>\n\n\n\n<h3>Downcasting without the use of java instanceof</h3>\n\n\n\n<p>Downcasting can also be performed without the use of instanceof operator as displayed in the following example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal { }  \nclass Dog4 extends Animal {  \n  static void method(Animal a) {  \n       Dog4 d=(Dog4)a;//downcasting  \n       System.out.println(\"ok downcasting performed\");  \n  }  \n   public static void main (String &#91;] args) {  \n    Animal a=new Dog4();  \n    Dog4.method(a);  \n  }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:ok downcasting performed\n</code></pre>\n\n\n\n<p>Let&#8217;s take closer look at this, actual object that is referred by a, is an object of Dog class. So if we downcast it, it is fine. But what will happen if we write:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Animal a=new Animal();  \nDog.method(a);  \n//Now ClassCastException but not in case of instanceof operator  </code></pre>\n\n\n\n<h3>Understanding Real use of instanceof in java</h3>\n\n\n\n<p>Let&#8217;s see the real use of instanceof keyword by the example given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Printable{}  \nclass A implements Printable{  \npublic void a(){System.out.println(\"a method\");}  \n}  \nclass B implements Printable{  \npublic void b(){System.out.println(\"b method\");}  \n}  \n  \nclass Call{  \nvoid invoke(Printable p){//upcasting  \nif(p instanceof A){  \nA a=(A)p;//Downcasting   \na.a();  \n}  \nif(p instanceof B){  \nB b=(B)p;//Downcasting   \nb.b();  \n}  \n  \n}  \n}//end of Call class  \n  \nclass Test4{  \npublic static void main(String args&#91;]){  \nPrintable p=new B();  \nCall c=new Call();  \nc.invoke(p);  \n}  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output: b method</code></pre>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;java instanceof operator&nbsp;is used to test whether the object is an instance of the specified type (class or subclass or interface). The instanceof in java is also known as type&nbsp;comparison operator&nbsp;because it compares the instance with type. It returns either true or false. If we apply the instanceof operator with any variable that has null [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4413"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4413"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4413/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4413"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4413"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4413"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4419,
        "date": "2020-06-18T12:05:15",
        "date_gmt": "2020-06-18T12:05:15",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=156"
        },
        "modified": "2020-06-18T12:05:15",
        "modified_gmt": "2020-06-18T12:05:15",
        "slug": "abstract-class",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/abstract-class/",
        "title": {
            "rendered": "Abstract class"
        },
        "content": {
            "rendered": "\n<p>A class which is declared with the abstract keyword is known as an abstract class in&nbsp;Java. It can have abstract and non-abstract methods (method with the body).</p>\n\n\n\n<p>Before learning the Java abstract class, let&#8217;s understand the abstraction in Java first.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Abstraction in Java</h3>\n\n\n\n<p><strong>Abstraction</strong>&nbsp;is a process of hiding the implementation details and showing only functionality to the user.</p>\n\n\n\n<p>Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don&#8217;t know the internal processing about the message delivery.</p>\n\n\n\n<p>Abstraction lets you focus on what the&nbsp;object&nbsp;does instead of how it does it.</p>\n\n\n\n<h3>Ways to achieve Abstraction</h3>\n\n\n\n<p>There are two ways to achieve abstraction in java</p>\n\n\n\n<ol><li>Abstract class (0 to 100%)</li><li>Interface (100%)</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Abstract class in Java</h3>\n\n\n\n<p>A class which is declared as abstract is known as an&nbsp;<strong>abstract class</strong>. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.</p>\n\n\n\n<h4>Points to Remember</h4>\n\n\n\n<ul><li>An abstract class must be declared with an abstract keyword.</li><li>It can have abstract and non-abstract methods.</li><li>It cannot be instantiated.</li><li>It can have&nbsp;constructors&nbsp;and static methods also.</li><li>It can have final methods which will force the subclass not to change the body of the method.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/abstract-class-in-java.jpg\" alt=\"Rules for Java Abstract class\"/></figure>\n\n\n\n<p><strong>Example of abstract class</strong></p>\n\n\n\n<ol><li><strong>abstract</strong>&nbsp;<strong>class</strong>&nbsp;A{}&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Abstract Method in Java</h3>\n\n\n\n<p>A method which is declared as abstract and does not have implementation is known as an abstract method.</p>\n\n\n\n<p><strong>Example of abstract method</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract void printStatus();//no method body and abstract  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Example of Abstract class that has an abstract method</h3>\n\n\n\n<p>In this example, Bike is an abstract class that contains only one abstract method run. Its implementation is provided by the Honda class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Bike{  \n  abstract void run();  \n}  \nclass Honda4 extends Bike{  \nvoid run(){System.out.println(\"running safely\");}  \npublic static void main(String args&#91;]){  \n Bike obj = new Honda4();  \n obj.run();  \n}  \n}  \n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>running safely\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Understanding the real scenario of Abstract class</h3>\n\n\n\n<p>In this example, Shape is the abstract class, and its implementation is provided by the Rectangle and Circle classes.</p>\n\n\n\n<p>Mostly, we don&#8217;t know about the implementation class (which is hidden to the end user), and an object of the implementation class is provided by the&nbsp;<strong>factory method</strong>.</p>\n\n\n\n<p>A&nbsp;<strong>factory method</strong>&nbsp;is a method that returns the instance of the class. We will learn about the factory method later.</p>\n\n\n\n<p>In this example, if you create the instance of Rectangle class, draw() method of Rectangle class will be invoked.</p>\n\n\n\n<p>File: TestAbstraction1.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Shape{  \nabstract void draw();  \n}  \n//In real scenario, implementation is provided by others i.e. unknown by end user  \nclass Rectangle extends Shape{  \nvoid draw(){System.out.println(\"drawing rectangle\");}  \n}  \nclass Circle1 extends Shape{  \nvoid draw(){System.out.println(\"drawing circle\");}  \n}  \n//In real scenario, method is called by programmer or user  \nclass TestAbstraction1{  \npublic static void main(String args&#91;]){  \nShape s=new Circle1();//In a real scenario, object is provided through method, e.g., getShape() method  \ns.draw();  \n}  \n} \n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>drawing circle\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Another example of Abstract class in java</h3>\n\n\n\n<p>File: TestBank.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Bank{    \nabstract int getRateOfInterest();    \n}    \nclass SBI extends Bank{    \nint getRateOfInterest(){return 7;}    \n}    \nclass PNB extends Bank{    \nint getRateOfInterest(){return 8;}    \n}    \n    \nclass TestBank{    \npublic static void main(String args&#91;]){    \nBank b;  \nb=new SBI();  \nSystem.out.println(\"Rate of Interest is: \"+b.getRateOfInterest()+\" %\");    \nb=new PNB();  \nSystem.out.println(\"Rate of Interest is: \"+b.getRateOfInterest()+\" %\");    \n}}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Rate of Interest is: 7 %\nRate of Interest is: 8 %</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Abstract class having constructor, data member and methods</h3>\n\n\n\n<p>An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.</p>\n\n\n\n<p>File: TestAbstraction2.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Example of an abstract class that has abstract and non-abstract methods  \n abstract class Bike{  \n   Bike(){System.out.println(\"bike is created\");}  \n   abstract void run();  \n   void changeGear(){System.out.println(\"gear changed\");}  \n }  \n//Creating a Child class which inherits Abstract class  \n class Honda extends Bike{  \n void run(){System.out.println(\"running safely..\");}  \n }  \n//Creating a Test class which calls abstract and non-abstract methods  \n class TestAbstraction2{  \n public static void main(String args&#91;]){  \n  Bike obj = new Honda();  \n  obj.run();  \n  obj.changeGear();  \n }  \n}  \n\n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>bike is created\n       running safely..\n       gear changed</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h4>Rule: If there is an abstract method in a class, that class must be abstract.</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike12{  \nabstract void run();  \n}  \n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>compile time error\n</code></pre>\n\n\n\n<h4>Rule: If you are extending an abstract class that has an abstract method, you must either provide the implementation of the method or make this class abstract.</h4>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Another real scenario of abstract class</h3>\n\n\n\n<p>The abstract class can also be used to provide some implementation of the&nbsp;interface. In such case, the end user may not be forced to override all the methods of the interface.</p>\n\n\n\n<h4 id=\"r\">Note: If you are beginner to java, learn interface first and skip this example.</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>interface A{  \nvoid a();  \nvoid b();  \nvoid c();  \nvoid d();  \n}  \n  \nabstract class B implements A{  \npublic void c(){System.out.println(\"I am c\");}  \n}  \n  \nclass M extends B{  \npublic void a(){System.out.println(\"I am a\");}  \npublic void b(){System.out.println(\"I am b\");}  \npublic void d(){System.out.println(\"I am d\");}  \n}  \n  \nclass Test5{  \npublic static void main(String args&#91;]){  \nA a=new M();  \na.a();  \na.b();  \na.c();  \na.d(); }}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:I am a\n       I am b\n       I am c\n       I am d</code></pre>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A class which is declared with the abstract keyword is known as an abstract class in&nbsp;Java. It can have abstract and non-abstract methods (method with the body). Before learning the Java abstract class, let&#8217;s understand the abstraction in Java first. Abstraction in Java Abstraction&nbsp;is a process of hiding the implementation details and showing only functionality [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4419"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4419"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4419/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4419"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4419"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4419"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4422,
        "date": "2020-06-18T12:08:27",
        "date_gmt": "2020-06-18T12:08:27",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=162"
        },
        "modified": "2020-06-18T12:08:27",
        "modified_gmt": "2020-06-18T12:08:27",
        "slug": "abstract-class-2",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/abstract-class-2/",
        "title": {
            "rendered": "Abstract class"
        },
        "content": {
            "rendered": "\n<p>A class which is declared with the abstract keyword is known as an abstract class in&nbsp;Java. It can have abstract and non-abstract methods (method with the body).</p>\n\n\n\n<p>Before learning the Java abstract class, let&#8217;s understand the abstraction in Java first.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Abstraction in Java</h3>\n\n\n\n<p><strong>Abstraction</strong>&nbsp;is a process of hiding the implementation details and showing only functionality to the user.</p>\n\n\n\n<p>Another way, it shows only essential things to the user and hides the internal details, for example, sending SMS where you type the text and send the message. You don&#8217;t know the internal processing about the message delivery.</p>\n\n\n\n<p>Abstraction lets you focus on what the&nbsp;object&nbsp;does instead of how it does it.</p>\n\n\n\n<h3>Ways to achieve Abstraction</h3>\n\n\n\n<p>There are two ways to achieve abstraction in java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Abstract class (0 to 100%)\nInterface (100%)</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Abstract class in Java</h3>\n\n\n\n<p>A class which is declared as abstract is known as an&nbsp;<strong>abstract class</strong>. It can have abstract and non-abstract methods. It needs to be extended and its method implemented. It cannot be instantiated.</p>\n\n\n\n<h4>Points to Remember</h4>\n\n\n\n<ul><li>An abstract class must be declared with an abstract keyword.</li><li>It can have abstract and non-abstract methods.</li><li>It cannot be instantiated.</li><li>It can have&nbsp;constructors&nbsp;and static methods also.</li><li>It can have final methods which will force the subclass not to change the body of the method.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/abstract-class-in-java.jpg\" alt=\"Rules for Java Abstract class\"/></figure>\n\n\n\n<p><strong>Example of abstract class</strong></p>\n\n\n\n<ol><li><strong>abstract</strong>&nbsp;<strong>class</strong>&nbsp;A{}&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Abstract Method in Java</h3>\n\n\n\n<p>A method which is declared as abstract and does not have implementation is known as an abstract method.</p>\n\n\n\n<p><strong>Example of abstract method</strong></p>\n\n\n\n<ol><li><strong>abstract</strong>&nbsp;<strong>void</strong>&nbsp;printStatus();//no&nbsp;method&nbsp;body&nbsp;and&nbsp;abstract&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Example of Abstract class that has an abstract method</h3>\n\n\n\n<p>In this example, Bike is an abstract class that contains only one abstract method run. Its implementation is provided by the Honda class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Bike{  \n  abstract void run();  \n}  \nclass Honda4 extends Bike{  \nvoid run(){System.out.println(\"running safely\");}  \npublic static void main(String args&#91;]){  \n Bike obj = new Honda4();  \n obj.run();  \n}  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>running safely\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Understanding the real scenario of Abstract class</h3>\n\n\n\n<p>In this example, Shape is the abstract class, and its implementation is provided by the Rectangle and Circle classes.</p>\n\n\n\n<p>Mostly, we don&#8217;t know about the implementation class (which is hidden to the end user), and an object of the implementation class is provided by the&nbsp;<strong>factory method</strong>.</p>\n\n\n\n<p>A&nbsp;<strong>factory method</strong>&nbsp;is a method that returns the instance of the class. We will learn about the factory method later.</p>\n\n\n\n<p>In this example, if you create the instance of Rectangle class, draw() method of Rectangle class will be invoked.</p>\n\n\n\n<p>File: TestAbstraction1.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Shape{  \nabstract void draw();  \n}  \n//In real scenario, implementation is provided by others i.e. unknown by end user  \nclass Rectangle extends Shape{  \nvoid draw(){System.out.println(\"drawing rectangle\");}  \n}  \nclass Circle1 extends Shape{  \nvoid draw(){System.out.println(\"drawing circle\");}  \n}  \n//In real scenario, method is called by programmer or user  \nclass TestAbstraction1{  \npublic static void main(String args&#91;]){  \nShape s=new Circle1();//In a real scenario, object is provided through method, e.g., getShape() method  \ns.draw();  \n}  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>drawing circle\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Another example of Abstract class in java</h3>\n\n\n\n<p>File: TestBank.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Bank{    \nabstract int getRateOfInterest();    \n}    \nclass SBI extends Bank{    \nint getRateOfInterest(){return 7;}    \n}    \nclass PNB extends Bank{    \nint getRateOfInterest(){return 8;}    \n}    \n    \nclass TestBank{    \npublic static void main(String args&#91;]){    \nBank b;  \nb=new SBI();  \nSystem.out.println(\"Rate of Interest is: \"+b.getRateOfInterest()+\" %\");    \nb=new PNB();  \nSystem.out.println(\"Rate of Interest is: \"+b.getRateOfInterest()+\" %\");    \n}}    </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Rate of Interest is: 7 %\nRate of Interest is: 8 %</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Abstract class having constructor, data member and methods</h3>\n\n\n\n<p>An abstract class can have a data member, abstract method, method body (non-abstract method), constructor, and even main() method.</p>\n\n\n\n<p>File: TestAbstraction2.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Example of an abstract class that has abstract and non-abstract methods  \n abstract class Bike{  \n   Bike(){System.out.println(\"bike is created\");}  \n   abstract void run();  \n   void changeGear(){System.out.println(\"gear changed\");}  \n }  \n//Creating a Child class which inherits Abstract class  \n class Honda extends Bike{  \n void run(){System.out.println(\"running safely..\");}  \n }  \n//Creating a Test class which calls abstract and non-abstract methods  \n class TestAbstraction2{  \n public static void main(String args&#91;]){  \n  Bike obj = new Honda();  \n  obj.run();  \n  obj.changeGear();  \n }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>bike is created\n       running safely..\n       gear changed\n﻿</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h4>Rule: If there is an abstract method in a class, that class must be abstract.</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bike12{  \nabstract void run();  \n}  \n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>compile time error\n</code></pre>\n\n\n\n<h4>Rule: If you are extending an abstract class that has an abstract method, you must either provide the implementation of the method or make this class abstract.</h4>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Another real scenario of abstract class</h3>\n\n\n\n<p>The abstract class can also be used to provide some implementation of the&nbsp;interface. In such case, the end user may not be forced to override all the methods of the interface.</p>\n\n\n\n<h4 id=\"r\">Note: If you are beginner to java, learn interface first and skip this example.</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>interface A{  \nvoid a();  \nvoid b();  \nvoid c();  \nvoid d();  \n}  \n  \nabstract class B implements A{  \npublic void c(){System.out.println(\"I am c\");}  \n}  \n  \nclass M extends B{  \npublic void a(){System.out.println(\"I am a\");}  \npublic void b(){System.out.println(\"I am b\");}  \npublic void d(){System.out.println(\"I am d\");}  \n}  \n  \nclass Test5{  \npublic static void main(String args&#91;]){  \nA a=new M();  \na.a();  \na.b();  \na.c();  \na.d();  \n}}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:I am a\n       I am b\n       I am c\n       I am d</code></pre>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A class which is declared with the abstract keyword is known as an abstract class in&nbsp;Java. It can have abstract and non-abstract methods (method with the body). Before learning the Java abstract class, let&#8217;s understand the abstraction in Java first. Abstraction in Java Abstraction&nbsp;is a process of hiding the implementation details and showing only functionality [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4422"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4422"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4422/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4422"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4422"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4422"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4424,
        "date": "2020-06-18T12:12:15",
        "date_gmt": "2020-06-18T12:12:15",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=166"
        },
        "modified": "2020-06-18T12:12:15",
        "modified_gmt": "2020-06-18T12:12:15",
        "slug": "interface-in-java",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/interface-in-java/",
        "title": {
            "rendered": "Interface in Java"
        },
        "content": {
            "rendered": "\n<p>An&nbsp;<strong>interface in Java</strong>&nbsp;is a blueprint of a class. It has static constants and abstract methods.</p>\n\n\n\n<p>The interface in Java is&nbsp;<em>a mechanism to achieve&nbsp;abstraction</em>. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple&nbsp;inheritance in Java.</p>\n\n\n\n<p>In other words, you can say that interfaces can have abstract methods and variables. It cannot have a method body.</p>\n\n\n\n<p>Java Interface also&nbsp;<strong>represents the IS-A relationship</strong>.</p>\n\n\n\n<p>It cannot be instantiated just like the abstract class.</p>\n\n\n\n<p>Since Java 8, we can have&nbsp;<strong>default and static methods</strong>&nbsp;in an interface.</p>\n\n\n\n<p>Since Java 9, we can have&nbsp;<strong>private methods</strong>&nbsp;in an interface.</p>\n\n\n\n<h2>Why use Java interface?</h2>\n\n\n\n<p>There are mainly three reasons to use interface. They are given below.</p>\n\n\n\n<ul><li>It is used to achieve abstraction.</li><li>By interface, we can support the functionality of multiple inheritance.</li><li>It can be used to achieve loose coupling.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/interview/images/why-use-java-interface.jpg\" alt=\"Why use Java Interface\"/></figure>\n\n\n\n<h2>How to declare an interface?</h2>\n\n\n\n<p>An interface is declared by using the interface keyword. It provides total abstraction; means all the methods in an interface are declared with the empty body, and all the fields are public, static and final by default. A class that implements an interface must implement all the methods declared in the interface.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>interface &lt;interface_name>{  \n    // declare constant fields  \n    // declare methods that abstract   \n    // by default.  \n}  </code></pre>\n\n\n\n<h2>Java 8 Interface Improvement</h2>\n\n\n\n<p>Since&nbsp;Java 8, interface can have default and static methods which is discussed later.</p>\n\n\n\n<h2>Internal addition by the compiler</h2>\n\n\n\n<h4>The Java compiler adds public and abstract keywords before the interface method. Moreover, it adds public, static and final keywords before data members.</h4>\n\n\n\n<p>In other words, Interface fields are public, static and final by default, and the methods are public and abstract.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/interface.png\" alt=\"interface in java\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h4>The relationship between classes and interfaces</h4>\n\n\n\n<p>As shown in the figure given below, a class extends another class, an interface extends another interface, but a&nbsp;<strong>class implements an interface</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/interfacerelation.jpg\" alt=\"The relationship between class and interface\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Java Interface Example</h2>\n\n\n\n<p>In this example, the Printable interface has only one method, and its implementation is provided in the A6 class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface printable{  \nvoid print();  \n}  \nclass A6 implements printable{  \npublic void print(){System.out.println(\"Hello\");}  \n  \npublic static void main(String args&#91;]){  \nA6 obj = new A6();  \nobj.print();  \n }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello\n</code></pre>\n\n\n\n<h2>Java Interface Example: Drawable</h2>\n\n\n\n<p>In this example, the Drawable interface has only one method. Its implementation is provided by Rectangle and Circle classes. In a real scenario, an interface is defined by someone else, but its implementation is provided by different implementation providers. Moreover, it is used by someone else. The implementation part is hidden by the user who uses the interface.</p>\n\n\n\n<p>File: TestInterface1.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Interface declaration: by first user  \ninterface Drawable{  \nvoid draw();  \n}  \n//Implementation: by second user  \nclass Rectangle implements Drawable{  \npublic void draw(){System.out.println(\"drawing rectangle\");}  \n}  \nclass Circle implements Drawable{  \npublic void draw(){System.out.println(\"drawing circle\");}  \n}  \n//Using interface: by third user  \nclass TestInterface1{  \npublic static void main(String args&#91;]){  \nDrawable d=new Circle();//In real scenario, object is provided by method e.g. getDrawable()  \nd.draw();  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>drawing circle\n</code></pre>\n\n\n\n<h2>Java Interface Example: Bank</h2>\n\n\n\n<p>Let&#8217;s see another example of java interface which provides the implementation of Bank interface.</p>\n\n\n\n<p>File: TestInterface2.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Bank{  \nfloat rateOfInterest();  \n}  \nclass SBI implements Bank{  \npublic float rateOfInterest(){return 9.15f;}  \n}  \nclass PNB implements Bank{  \npublic float rateOfInterest(){return 9.7f;}  \n}  \nclass TestInterface2{  \npublic static void main(String&#91;] args){  \nBank b=new SBI();  \nSystem.out.println(\"ROI: \"+b.rateOfInterest());  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ROI: 9.15\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Multiple inheritance in Java by interface</h2>\n\n\n\n<p>If a class implements multiple interfaces, or an interface extends multiple interfaces, it is known as multiple inheritance.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/images/core/multipleinheritance.jpg\" alt=\" multiple inheritance in java\"/></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Printable{  \nvoid print();  \n}  \ninterface Showable{  \nvoid show();  \n}  \nclass A7 implements Printable,Showable{  \npublic void print(){System.out.println(\"Hello\");}  \npublic void show(){System.out.println(\"Welcome\");}  \n  \npublic static void main(String args&#91;]){  \nA7 obj = new A7();  \nobj.print();  \nobj.show();  \n }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\">Output:Hello\n       Welcome\n</pre>\n\n\n\n<h2>Q) Multiple inheritance is not supported through class in java, but it is possible by an interface, why?</h2>\n\n\n\n<p>As we have explained in the inheritance chapter, multiple inheritance is not supported in the case of&nbsp;class&nbsp;because of ambiguity. However, it is supported in case of an interface because there is no ambiguity. It is because its implementation is provided by the implementation class. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Printable{  \nvoid print();  \n}  \ninterface Showable{  \nvoid print();  \n}  \n  \nclass TestInterface3 implements Printable, Showable{  \npublic void print(){System.out.println(\"Hello\");}  \npublic static void main(String args&#91;]){  \nTestInterface3 obj = new TestInterface3();  \nobj.print();  \n }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello\n</code></pre>\n\n\n\n<p>As you can see in the above example, Printable and Showable interface have same methods but its implementation is provided by class TestTnterface1, so there is no ambiguity.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Interface inheritance</h2>\n\n\n\n<p>A class implements an interface, but one interface extends another interface.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Printable{  \nvoid print();  \n}  \ninterface Showable extends Printable{  \nvoid show();  \n}  \nclass TestInterface4 implements Showable{  \npublic void print(){System.out.println(\"Hello\");}  \npublic void show(){System.out.println(\"Welcome\");}  \n  \npublic static void main(String args&#91;]){  \nTestInterface4 obj = new TestInterface4();  \nobj.print();  \nobj.show();  \n }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello\nWelcome</code></pre>\n\n\n\n<h2>Java 8 Default Method in Interface</h2>\n\n\n\n<p>Since Java 8, we can have method body in interface. But we need to make it default method. Let&#8217;s see an example:</p>\n\n\n\n<p>File: TestInterfaceDefault.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Drawable{  \nvoid draw();  \ndefault void msg(){System.out.println(\"default method\");}  \n}  \nclass Rectangle implements Drawable{  \npublic void draw(){System.out.println(\"drawing rectangle\");}  \n}  \nclass TestInterfaceDefault{  \npublic static void main(String args&#91;]){  \nDrawable d=new Rectangle();  \nd.draw();  \nd.msg();  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>drawing rectangle\ndefault method</code></pre>\n\n\n\n<h2>Java 8 Static Method in Interface</h2>\n\n\n\n<p>Since Java 8, we can have static method in interface. Let&#8217;s see an example:</p>\n\n\n\n<p>File: TestInterfaceStatic.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Drawable{  \nvoid draw();  \nstatic int cube(int x){return x*x*x;}  \n}  \nclass Rectangle implements Drawable{  \npublic void draw(){System.out.println(\"drawing rectangle\");}  \n}  \n  \nclass TestInterfaceStatic{  \npublic static void main(String args&#91;]){  \nDrawable d=new Rectangle();  \nd.draw();  \nSystem.out.println(Drawable.cube(3));  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>drawing rectangle\n27</code></pre>\n\n\n\n<h2>Q) What is marker or tagged interface?</h2>\n\n\n\n<p>An interface which has no member is known as a marker or tagged interface, for example, Serializable, Cloneable, Remote, etc. They are used to provide some essential information to the JVM so that JVM may perform some useful operation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//How Serializable interface is written?  \npublic interface Serializable{  \n} </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h4>Nested Interface in Java</h4>\n\n\n\n<p>Note: An interface can have another interface which is known as a nested interface. We will learn it in detail in the&nbsp;nested classeschapter. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface printable{  \n void print();  \n interface MessagePrintable{  \n   void msg();  \n }  \n}  </code></pre>\n\n\n\n<p></p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>An&nbsp;interface in Java&nbsp;is a blueprint of a class. It has static constants and abstract methods. The interface in Java is&nbsp;a mechanism to achieve&nbsp;abstraction. There can be only abstract methods in the Java interface, not method body. It is used to achieve abstraction and multiple&nbsp;inheritance in Java. In other words, you can say that interfaces can [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4424"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4424"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4424/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4424"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4424"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4424"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4423,
        "date": "2020-06-18T12:13:25",
        "date_gmt": "2020-06-18T12:13:25",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=164"
        },
        "modified": "2020-06-18T12:13:25",
        "modified_gmt": "2020-06-18T12:13:25",
        "slug": "abstract-class-and-interface",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/abstract-class-and-interface/",
        "title": {
            "rendered": "abstract class and interface"
        },
        "content": {
            "rendered": "\n<p>Abstract class and interface both are used to achieve abstraction where we can declare the abstract methods. Abstract class and interface both can&#8217;t be instantiated.</p>\n\n\n\n<p>But there are many differences between abstract class and interface that are given below.</p>\n\n\n\n<pre class=\"wp-block-table\"><table><tbody><tr><th>Abstract class</th><th>Interface</th></tr><tr><td>1) Abstract class can&nbsp;<strong>have abstract and non-abstract</strong>methods.</td><td>Interface can have&nbsp;<strong>only abstract</strong>&nbsp;methods. Since Java 8, it can have&nbsp;<strong>default and static methods</strong>&nbsp;also.</td></tr><tr><td>2) Abstract class&nbsp;<strong>doesn't support multiple inheritance</strong>.</td><td>Interface&nbsp;<strong>supports multiple inheritance</strong>.</td></tr><tr><td>3) Abstract class&nbsp;<strong>can have final, non-final, static and non-static variables</strong>.</td><td>Interface has&nbsp;<strong>only static and final variables</strong>.</td></tr><tr><td>4) Abstract class&nbsp;<strong>can provide the implementation of interface</strong>.</td><td>Interface&nbsp;<strong>can't provide the implementation of abstract class</strong>.</td></tr><tr><td>5) The&nbsp;<strong>abstract keyword</strong>&nbsp;is used to declare abstract class.</td><td>The&nbsp;<strong>interface keyword</strong>&nbsp;is used to declare interface.</td></tr><tr><td>6) An&nbsp;<strong>abstract class</strong>&nbsp;can extend another Java class and implement multiple Java interfaces.</td><td>An&nbsp;<strong>interface</strong>&nbsp;can extend another Java interface only.</td></tr><tr><td>7) An&nbsp;<strong>abstract class</strong>&nbsp;can be extended using keyword \"extends\".</td><td>An&nbsp;<strong>interface</strong>&nbsp;can be implemented using keyword \"implements\".</td></tr><tr><td>8) A Java&nbsp;<strong>abstract class</strong>&nbsp;can have class members like private, protected, etc.</td><td>Members of a Java interface are public by default.</td></tr><tr><td>9)<strong>Example:</strong><br>public abstract class Shape{<br>public abstract void draw();<br>}</td><td><strong>Example:</strong><br>public interface Drawable{<br>void draw();<br>}</td></tr></tbody></table></pre>\n\n\n\n<p>Simply, abstract class achieves partial abstraction (0 to 100%) whereas interface achieves fully abstraction (100%).</p>\n\n\n\n<h3>Example of abstract class and interface in Java</h3>\n\n\n\n<p>Let&#8217;s see a simple example where we are using interface and abstract class both.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Creating interface that has 4 methods  \ninterface A{  \nvoid a();//bydefault, public and abstract  \nvoid b();  \nvoid c();  \nvoid d();  \n}  \n  \n//Creating abstract class that provides the implementation of one method of A interface  \nabstract class B implements A{  \npublic void c(){System.out.println(\"I am C\");}  \n}  \n  \n//Creating subclass of abstract class, now we need to provide the implementation of rest of the methods  \nclass M extends B{  \npublic void a(){System.out.println(\"I am a\");}  \npublic void b(){System.out.println(\"I am b\");}  \npublic void d(){System.out.println(\"I am d\");}  \n}  \n  \n//Creating a test class that calls the methods of A interface  \nclass Test5{  \npublic static void main(String args&#91;]){  \nA a=new M();  \na.a();  \na.b();  \na.c();  \na.d();  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code> I am a\n       I am b\n       I am c\n       I am d</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Abstract class and interface both are used to achieve abstraction where we can declare the abstract methods. Abstract class and interface both can&#8217;t be instantiated. But there are many differences between abstract class and interface that are given below. Abstract classInterface1) Abstract class can&nbsp;have abstract and non-abstractmethods.Interface can have&nbsp;only abstract&nbsp;methods. Since Java 8, it can [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4423"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4423"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4423/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4423"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4423"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4423"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4421,
        "date": "2020-06-18T12:17:55",
        "date_gmt": "2020-06-18T12:17:55",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=160"
        },
        "modified": "2020-06-18T12:17:55",
        "modified_gmt": "2020-06-18T12:17:55",
        "slug": "access-modifiers",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/access-modifiers/",
        "title": {
            "rendered": "Access Modifiers"
        },
        "content": {
            "rendered": "\n<p>There are two types of modifiers in Java:&nbsp;<strong>access modifiers</strong>&nbsp;and&nbsp;<strong>non-access modifiers</strong>.</p>\n\n\n\n<p>The access modifiers in Java specifies the accessibility or scope of a field, method, constructor, or class. We can change the access level of fields, constructors, methods, and class by applying the access modifier on it.</p>\n\n\n\n<p>There are four types of Java access modifiers:</p>\n\n\n\n<ol><li><strong>Private</strong>: The access level of a private modifier is only within the class. It cannot be accessed from outside the class.</li><li><strong>Default</strong>: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. If you do not specify any access level, it will be the default.</li><li><strong>Protected</strong>: The access level of a protected modifier is within the package and outside the package through child class. If you do not make the child class, it cannot be accessed from outside the package.</li><li><strong>Public</strong>: The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, within the package and outside the package.</li></ol>\n\n\n\n<p>There are many non-access modifiers, such as static, abstract, synchronized, native, volatile, transient, etc. Here, we are going to learn the access modifiers only.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Understanding Java Access Modifiers</h3>\n\n\n\n<p>Let&#8217;s understand the access modifiers in Java by a simple table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Access Modifier</th><th>within class</th><th>within package</th><th>outside package by subclass only</th><th>outside package</th></tr><tr><td><strong>Private</strong></td><td>Y</td><td>N</td><td>N</td><td>N</td></tr><tr><td><strong>Default</strong></td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td><strong>Protected</strong></td><td>Y</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td><strong>Public</strong></td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>1) Private</h3>\n\n\n\n<p>The private access modifier is accessible only within the class.</p>\n\n\n\n<p><strong>Simple example of private access modifier</strong></p>\n\n\n\n<p>In this example, we have created two classes A and Simple. A class contains private data member and private method. We are accessing these private members from outside the class, so there is a compile-time error.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nprivate int data=40;  \nprivate void msg(){System.out.println(\"Hello java\");}  \n}  \n  \npublic class Simple{  \n public static void main(String args&#91;]){  \n   A obj=new A();  \n   System.out.println(obj.data);//Compile Time Error  \n   obj.msg();//Compile Time Error  \n   }  \n} </code></pre>\n\n\n\n<h3>Role of Private Constructor</h3>\n\n\n\n<p>If you make any class constructor private, you cannot create the instance of that class from outside the class. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nprivate A(){}//private constructor  \nvoid msg(){System.out.println(\"Hello java\");}  \n}  \npublic class Simple{  \n public static void main(String args&#91;]){  \n   A obj=new A();//Compile Time Error  \n }  \n} </code></pre>\n\n\n\n<h4>Note: A class cannot be private or protected except nested class.</h4>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>2) Default</h3>\n\n\n\n<p>If you don&#8217;t use any modifier, it is treated as&nbsp;<strong>default</strong>&nbsp;by default. The default modifier is accessible only within package. It cannot be accessed from outside the package. It provides more accessibility than private. But, it is more restrictive than protected, and public.</p>\n\n\n\n<p><strong>Example of default access modifier</strong></p>\n\n\n\n<p>In this example, we have created two packages pack and mypack. We are accessing the A class from outside its package, since A class is not public, so it cannot be accessed from outside the package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package pack;  \nclass A{  \n  void msg(){System.out.println(\"Hello\");}  \n}\n\n/save by B.java  \npackage mypack;  \nimport pack.*;  \nclass B{  \n  public static void main(String args&#91;]){  \n   A obj = new A();//Compile Time Error  \n   obj.msg();//Compile Time Error  \n  }  \n}  </code></pre>\n\n\n\n<p>In the above example, the scope of class A and its method msg() is default so it cannot be accessed from outside the package.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>3) Protected</h3>\n\n\n\n<p>The&nbsp;<strong>protected access modifier</strong>&nbsp;is accessible within package and outside the package but through inheritance only.</p>\n\n\n\n<p>The protected access modifier can be applied on the data member, method and constructor. It can&#8217;t be applied on the class.</p>\n\n\n\n<p>It provides more accessibility than the default modifer.</p>\n\n\n\n<p><strong>Example of protected access modifier</strong></p>\n\n\n\n<p>In this example, we have created the two packages pack and mypack. The A class of pack package is public, so can be accessed from outside the package. But msg method of this package is declared as protected, so it can be accessed from outside the class only through inheritance.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//save by A.java  \npackage pack;  \npublic class A{  \nprotected void msg(){System.out.println(\"Hello\");}  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>//save by B.java  \npackage mypack;  \nimport pack.*;  \n  \nclass B extends A{  \n  public static void main(String args&#91;]){  \n   B obj = new B();  \n   obj.msg();  \n  }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Hello\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>4) Public</h3>\n\n\n\n<p>The&nbsp;<strong>public access modifier</strong>&nbsp;is accessible everywhere. It has the widest scope among all other modifiers.</p>\n\n\n\n<p><strong>Example of public access modifier</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//save by A.java  \n  \npackage pack;  \npublic class A{  \npublic void msg(){System.out.println(\"Hello\");}  \n} \n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>//save by B.java  \n  \npackage mypack;  \nimport pack.*;  \n  \nclass B{  \n  public static void main(String args&#91;]){  \n   A obj = new A();  \n   obj.msg();  \n  }  \n}\n\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:Hello\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Java Access Modifiers with Method Overriding</h3>\n\n\n\n<p>If you are overriding any method, overridden method (i.e. declared in subclass) must not be more restrictive.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nprotected void msg(){System.out.println(\"Hello java\");}  \n}  \n  \npublic class Simple extends A{  \nvoid msg(){System.out.println(\"Hello java\");}//C.T.Error  \n public static void main(String args&#91;]){  \n   Simple obj=new Simple();  \n   obj.msg();  \n   }  \n}  </code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There are two types of modifiers in Java:&nbsp;access modifiers&nbsp;and&nbsp;non-access modifiers. The access modifiers in Java specifies the accessibility or scope of a field, method, constructor, or class. We can change the access level of fields, constructors, methods, and class by applying the access modifier on it. There are four types of Java access modifiers: Private: [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4421"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4421"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4421/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4421"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4421"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4421"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4420,
        "date": "2020-06-18T12:22:18",
        "date_gmt": "2020-06-18T12:22:18",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=158"
        },
        "modified": "2020-06-18T12:22:18",
        "modified_gmt": "2020-06-18T12:22:18",
        "slug": "arrays-3",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/arrays-3/",
        "title": {
            "rendered": "Arrays"
        },
        "content": {
            "rendered": "\n<p>Normally, an array is a collection of similar type of elements which has contiguous memory location.</p>\n\n\n\n<p><strong>Java array</strong>&nbsp;is an object which contains elements of a similar data type. Additionally, The elements of an array are stored in a contiguous memory location. It is a data structure where we store similar elements. We can store only a fixed set of elements in a Java array.</p>\n\n\n\n<p>Array in Java is index-based, the first element of the array is stored at the 0th index, 2nd element is stored on 1st index and so on.</p>\n\n\n\n<p>Unlike C/C++, we can get the length of the array using the length member. In C/C++, we need to use the sizeof operator.</p>\n\n\n\n<p>In Java, array is an object of a dynamically generated class. Java array inherits the Object class, and implements the Serializable as well as Cloneable interfaces. We can store primitive values or objects in an array in Java. Like C/C++, we can also create single dimentional or multidimentional arrays in Java.</p>\n\n\n\n<p>Moreover, Java provides the feature of anonymous arrays which is not available in C/C++.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/images/core/array.gif\" alt=\"Java array\"/></figure>\n\n\n\n<h3>Advantages</h3>\n\n\n\n<ul><li><strong>Code Optimization:</strong>&nbsp;It makes the code optimized, we can retrieve or sort the data efficiently.</li><li><strong>Random access:</strong>&nbsp;We can get any data located at an index position.</li></ul>\n\n\n\n<h3>Disadvantages</h3>\n\n\n\n<ul><li><strong>Size Limit:</strong>&nbsp;We can store only the fixed size of elements in the array. It doesn&#8217;t grow its size at runtime. To solve this problem, collection framework is used in Java which grows automatically.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Types of Array in java</h3>\n\n\n\n<p>There are two types of array.</p>\n\n\n\n<ul><li>Single Dimensional Array</li><li>Multidimensional Array</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Single Dimensional Array in Java</h2>\n\n\n\n<p><strong>Syntax to Declare an Array in Java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>dataType&#91;] arr; (or)  \ndataType &#91;]arr; (or)  \ndataType arr&#91;];  </code></pre>\n\n\n\n<p><strong>Instantiation of an Array in Java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>arrayRefVar=new datatype&#91;size];  </code></pre>\n\n\n\n<h3>Example of Java Array</h3>\n\n\n\n<p>Let&#8217;s see the simple example of java array, where we are going to declare, instantiate, initialize and traverse an array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate how to declare, instantiate, initialize  \n//and traverse the Java array.  \nclass Testarray{  \npublic static void main(String args&#91;]){  \nint a&#91;]=new int&#91;5];//declaration and instantiation  \na&#91;0]=10;//initialization  \na&#91;1]=20;  \na&#91;2]=70;  \na&#91;3]=40;  \na&#91;4]=50;  \n//traversing array  \nfor(int i=0;i&lt;a.length;i++)//length is the property of array  \nSystem.out.println(a&#91;i]);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n20\n70\n40\n50\n﻿</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Declaration, Instantiation and Initialization of Java Array</h2>\n\n\n\n<p>We can declare, instantiate and initialize the java array together by:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int a&#91;]={33,3,4,5};//declaration, instantiation and initialization  </code></pre>\n\n\n\n<p>Let&#8217;s see the simple example to print this array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of declaration, instantiation   \n//and initialization of Java array in a single line  \nclass Testarray1{  \npublic static void main(String args&#91;]){  \nint a&#91;]={33,3,4,5};//declaration, instantiation and initialization  \n//printing array  \nfor(int i=0;i&lt;a.length;i++)//length is the property of array  \nSystem.out.println(a&#91;i]);  \n}}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>33\n3\n4\n5\n﻿</code></pre>\n\n\n\n<h2>For-each Loop for Java Array</h2>\n\n\n\n<p>We can also print the Java array using&nbsp;<strong>for-each loop</strong>. The Java for-each loop prints the array elements one by one. It holds an array element in a variable, then executes the body of the loop.</p>\n\n\n\n<p>The syntax of the for-each loop is given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(data_type variable:array){  \n//body of the loop  \n}  </code></pre>\n\n\n\n<p>Let us see the example of print the elements of Java array using the for-each loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to print the array elements using for-each loop  \nclass Testarray1{  \npublic static void main(String args&#91;]){  \nint arr&#91;]={33,3,4,5};  \n//printing array using for-each loop  \nfor(int i:arr)  \nSystem.out.println(i);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>33\n3\n4\n5</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Passing Array to a Method in Java</h2>\n\n\n\n<p>We can pass the java array to method so that we can reuse the same logic on any array.</p>\n\n\n\n<p>Let&#8217;s see the simple example to get the minimum number of an array using a method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the way of passing an array  \n//to method.  \nclass Testarray2{  \n//creating a method which receives an array as a parameter  \nstatic void min(int arr&#91;]){  \nint min=arr&#91;0];  \nfor(int i=1;i&lt;arr.length;i++)  \n if(min>arr&#91;i])  \n  min=arr&#91;i];  \n  \nSystem.out.println(min);  \n}  \n  \npublic static void main(String args&#91;]){  \nint a&#91;]={33,3,4,5};//declaring and initializing an array  \nmin(a);//passing array to method  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>3</code></pre>\n\n\n\n<h2>Anonymous Array in Java</h2>\n\n\n\n<p>Java supports the feature of an anonymous array, so you don&#8217;t need to declare the array while passing an array to the method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the way of passing an anonymous array  \n//to method.  \npublic class TestAnonymousArray{  \n//creating a method which receives an array as a parameter  \nstatic void printArray(int arr&#91;]){  \nfor(int i=0;i&lt;arr.length;i++)  \nSystem.out.println(arr&#91;i]);  \n}  \n  \npublic static void main(String args&#91;]){  \nprintArray(new int&#91;]{10,22,44,66});//passing anonymous array to method  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n22\n44\n66</code></pre>\n\n\n\n<h2>Returning Array from the Method</h2>\n\n\n\n<p>We can also return an array from the method in Java.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to return an array from the method  \nclass TestReturnArray{  \n//creating method which returns an array  \nstatic int&#91;] get(){  \nreturn new int&#91;]{10,30,50,90,60};  \n}  \n  \npublic static void main(String args&#91;]){  \n//calling method which returns an array  \nint arr&#91;]=get();  \n//printing the values of an array  \nfor(int i=0;i&lt;arr.length;i++)  \nSystem.out.println(arr&#91;i]);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n30\n50\n90\n60</code></pre>\n\n\n\n<h2>ArrayIndexOutOfBoundsException</h2>\n\n\n\n<p>The Java Virtual Machine (JVM) throws an ArrayIndexOutOfBoundsException if length of the array in negative, equal to the array size or greater than the array size while traversing the array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the case of   \n//ArrayIndexOutOfBoundsException in a Java Array.  \npublic class TestArrayException{  \npublic static void main(String args&#91;]){  \nint arr&#91;]={50,60,70,80};  \nfor(int i=0;i&lt;=arr.length;i++){  \nSystem.out.println(arr&#91;i]);  \n}  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 4\n\tat TestArrayException.main(TestArrayException.java:5)\n50\n60\n70\n80</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Multidimensional Array in Java</h2>\n\n\n\n<p>In such case, data is stored in row and column based index (also known as matrix form).</p>\n\n\n\n<p><strong>Syntax to Declare Multidimensional Array in Java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>dataType&#91;]&#91;] arrayRefVar; (or)  \ndataType &#91;]&#91;]arrayRefVar; (or)  \ndataType arrayRefVar&#91;]&#91;]; (or)  \ndataType &#91;]arrayRefVar&#91;];  </code></pre>\n\n\n\n<p><strong>Example to instantiate Multidimensional Array in Java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>int&#91;]&#91;] arr=new int&#91;3]&#91;3];//3 row and 3 column  </code></pre>\n\n\n\n<p><strong>Example to initialize Multidimensional Array in Java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>arr&#91;0]&#91;0]=1;  \narr&#91;0]&#91;1]=2;  \narr&#91;0]&#91;2]=3;  \narr&#91;1]&#91;0]=4;  \narr&#91;1]&#91;1]=5;  \narr&#91;1]&#91;2]=6;  \narr&#91;2]&#91;0]=7;  \narr&#91;2]&#91;1]=8;  \narr&#91;2]&#91;2]=9;  </code></pre>\n\n\n\n<h3>Example of Multidimensional Java Array</h3>\n\n\n\n<p>Let&#8217;s see the simple example to declare, instantiate, initialize and print the 2Dimensional array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the use of multidimensional array  \nclass Testarray3{  \npublic static void main(String args&#91;]){  \n//declaring and initializing 2D array  \nint arr&#91;]&#91;]={{1,2,3},{2,4,5},{4,4,5}};  \n//printing 2D array  \nfor(int i=0;i&lt;3;i++){  \n for(int j=0;j&lt;3;j++){  \n   System.out.print(arr&#91;i]&#91;j]+\" \");  \n }  \n System.out.println();  \n}  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 2 3\n2 4 5\n4 4 5</code></pre>\n\n\n\n<h2>Jagged Array in Java</h2>\n\n\n\n<p>If we are creating odd number of columns in a 2D array, it is known as a jagged array. In other words, it is an array of arrays with different number of columns.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to illustrate the jagged array  \nclass TestJaggedArray{  \n    public static void main(String&#91;] args){  \n        //declaring a 2D array with odd columns  \n        int arr&#91;]&#91;] = new int&#91;3]&#91;];  \n        arr&#91;0] = new int&#91;3];  \n        arr&#91;1] = new int&#91;4];  \n        arr&#91;2] = new int&#91;2];  \n        //initializing a jagged array  \n        int count = 0;  \n        for (int i=0; i&lt;arr.length; i++)  \n            for(int j=0; j&lt;arr&#91;i].length; j++)  \n                arr&#91;i]&#91;j] = count++;  \n   \n        //printing the data of a jagged array   \n        for (int i=0; i&lt;arr.length; i++){  \n            for (int j=0; j&lt;arr&#91;i].length; j++){  \n                System.out.print(arr&#91;i]&#91;j]+\" \");  \n            }  \n            System.out.println();//new line  \n        }  \n    }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 1 2 \n3 4 5 6 \n7 8 \n﻿</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>What is the class name of Java array?</h2>\n\n\n\n<p>In Java, an array is an object. For array object, a proxy class is created whose name can be obtained by getClass().getName() method on the object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to get the class name of array in Java  \nclass Testarray4{  \npublic static void main(String args&#91;]){  \n//declaration and initialization of array  \nint arr&#91;]={4,4,5};  \n//getting the class name of Java array  \nClass c=arr.getClass();  \nString name=c.getName();  \n//printing the class name of Java array   \nSystem.out.println(name);  \n  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>I</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Copying a Java Array</h2>\n\n\n\n<p>We can copy an array to another by the arraycopy() method of System class.</p>\n\n\n\n<p><strong>Syntax of arraycopy method</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static void arraycopy(  \nObject src, int srcPos,Object dest, int destPos, int length  \n)  </code></pre>\n\n\n\n<h3>Example of Copying an Array in Java</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to copy a source array into a destination array in Java  \nclass TestArrayCopyDemo {  \n    public static void main(String&#91;] args) {  \n        //declaring a source array  \n        char&#91;] copyFrom = { 'd', 'e', 'c', 'a', 'f', 'f', 'e',  \n                'i', 'n', 'a', 't', 'e', 'd' };  \n        //declaring a destination array  \n        char&#91;] copyTo = new char&#91;7];  \n        //copying array using System.arraycopy() method  \n        System.arraycopy(copyFrom, 2, copyTo, 0, 7);  \n        //printing the destination array  \n        System.out.println(String.valueOf(copyTo));  \n    }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>caffein\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Cloning an Array in Java</h2>\n\n\n\n<p>Since, Java array implements the Cloneable interface, we can create the clone of the Java array. If we create the clone of a single-dimensional array, it creates the deep copy of the Java array. It means, it will copy the actual value. But, if we create the clone of a multidimensional array, it creates the shallow copy of the Java array which means it copies the references.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to clone the array  \nclass Testarray1{  \npublic static void main(String args&#91;]){  \nint arr&#91;]={33,3,4,5};  \nSystem.out.println(\"Printing original array:\");  \nfor(int i:arr)  \nSystem.out.println(i);  \n  \nSystem.out.println(\"Printing clone of the array:\");  \nint carr&#91;]=arr.clone();  \nfor(int i:carr)  \nSystem.out.println(i);  \n  \nSystem.out.println(\"Are both equal?\");  \nSystem.out.println(arr==carr);  \n  \n}}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Printing original array:\n33\n3\n4\n5\nPrinting clone of the array:\n33\n3\n4\n5\nAre both equal?\nfalse</code></pre>\n\n\n\n<h2>Addition of 2 Matrices in Java</h2>\n\n\n\n<p>Let&#8217;s see a simple example that adds two matrices.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to demonstrate the addition of two matrices in Java  \nclass Testarray5{  \npublic static void main(String args&#91;]){  \n//creating two matrices  \nint a&#91;]&#91;]={{1,3,4},{3,4,5}};  \nint b&#91;]&#91;]={{1,3,4},{3,4,5}};  \n  \n//creating another matrix to store the sum of two matrices  \nint c&#91;]&#91;]=new int&#91;2]&#91;3];  \n  \n//adding and printing addition of 2 matrices  \nfor(int i=0;i&lt;2;i++){  \nfor(int j=0;j&lt;3;j++){  \nc&#91;i]&#91;j]=a&#91;i]&#91;j]+b&#91;i]&#91;j];  \nSystem.out.print(c&#91;i]&#91;j]+\" \");  \n}  \nSystem.out.println();//new line  \n}  \n  \n}} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2 6 8\n6 8 10</code></pre>\n\n\n\n<h2>Multiplication of 2 Matrices in Java</h2>\n\n\n\n<p>In the case of matrix multiplication, a one-row element of the first matrix is multiplied by all the columns of the second matrix which can be understood by the image given below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/matrix-multiplication-in-cpp1.png\" alt=\"Matrix Multiplication in Java\"/></figure>\n\n\n\n<p>Let&#8217;s see a simple example to multiply two matrices of 3 rows and 3 columns.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to multiply two matrices  \npublic class MatrixMultiplicationExample{  \npublic static void main(String args&#91;]){  \n//creating two matrices    \nint a&#91;]&#91;]={{1,1,1},{2,2,2},{3,3,3}};    \nint b&#91;]&#91;]={{1,1,1},{2,2,2},{3,3,3}};    \n    \n//creating another matrix to store the multiplication of two matrices    \nint c&#91;]&#91;]=new int&#91;3]&#91;3];  //3 rows and 3 columns  \n    \n//multiplying and printing multiplication of 2 matrices    \nfor(int i=0;i&lt;3;i++){    \nfor(int j=0;j&lt;3;j++){    \nc&#91;i]&#91;j]=0;      \nfor(int k=0;k&lt;3;k++)      \n{      \nc&#91;i]&#91;j]+=a&#91;i]&#91;k]*b&#91;k]&#91;j];      \n}//end of k loop  \nSystem.out.print(c&#91;i]&#91;j]+\" \");  //printing matrix element  \n}//end of j loop  \nSystem.out.println();//new line    \n}    \n}}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>6 6 6 \n12 12 12 \n18 18 18 </code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Normally, an array is a collection of similar type of elements which has contiguous memory location. Java array&nbsp;is an object which contains elements of a similar data type. Additionally, The elements of an array are stored in a contiguous memory location. It is a data structure where we store similar elements. We can store only [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4420"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4420"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4420/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4420"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4420"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4420"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4425,
        "date": "2020-06-19T05:14:23",
        "date_gmt": "2020-06-19T05:14:23",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=194"
        },
        "modified": "2020-06-19T05:14:23",
        "modified_gmt": "2020-06-19T05:14:23",
        "slug": "object-class",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/object-class/",
        "title": {
            "rendered": "Object class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>Object class</strong>&nbsp;is the parent class of all the classes in java by default. In other words, it is the topmost class of java.</p>\n\n\n\n<p>The Object class is beneficial if you want to refer any object whose type you don&#8217;t know. Notice that parent class reference variable can refer the child class object, know as upcasting.</p>\n\n\n\n<p>Let&#8217;s take an example, there is getObject() method that returns an object but it can be of any type like Employee,Student etc, we can use Object class reference to refer that object. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Object obj=getObject();//we don't know what object will be returned from this method  </code></pre>\n\n\n\n<p>The Object class provides some common behaviors to all the objects such as object can be compared, object can be cloned, object can be notified etc.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.javatpoint.com/images/core/objectclass.gif\" alt=\"object class in java\"/></figure>\n\n\n\n<h3>Methods of Object class</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>The Object class provides many methods. They are as follows:</td></tr></tbody></table></figure>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>public final Class getClass()</td><td>returns the Class class object of this object. The Class class can further be used to get the metadata of this class.</td></tr><tr><td>public int hashCode()</td><td>returns the hashcode number for this object.</td></tr><tr><td>public boolean equals(Object obj)</td><td>compares the given object to this object.</td></tr><tr><td>protected Object clone() throws CloneNotSupportedException</td><td>creates and returns the exact copy (clone) of this object.</td></tr><tr><td>public String toString()</td><td>returns the string representation of this object.</td></tr><tr><td>public final void notify()</td><td>wakes up single thread, waiting on this object&#8217;s monitor.</td></tr><tr><td>public final void notifyAll()</td><td>wakes up all the threads, waiting on this object&#8217;s monitor.</td></tr><tr><td>public final void wait(long timeout)throws InterruptedException</td><td>causes the current thread to wait for the specified milliseconds, until another thread notifies (invokes notify() or notifyAll() method).</td></tr><tr><td>public final void wait(long timeout,int nanos)throws InterruptedException</td><td>causes the current thread to wait for the specified milliseconds and nanoseconds, until another thread notifies (invokes notify() or notifyAll() method).</td></tr><tr><td>public final void wait()throws InterruptedException</td><td>causes the current thread to wait, until another thread notifies (invokes notify() or notifyAll() method).</td></tr><tr><td>protected void finalize()throws Throwable</td><td>is invoked by the garbage collector before object is being garbage collected.</td></tr></tbody></table></figure>\n\n\n\n<p>We will have the detailed learning of these methods in next chapters.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;Object class&nbsp;is the parent class of all the classes in java by default. In other words, it is the topmost class of java. The Object class is beneficial if you want to refer any object whose type you don&#8217;t know. Notice that parent class reference variable can refer the child class object, know as upcasting. [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4425"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4425"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4425/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4425"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4425"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4425"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4426,
        "date": "2020-06-19T05:16:31",
        "date_gmt": "2020-06-19T05:16:31",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=197"
        },
        "modified": "2020-06-19T05:16:31",
        "modified_gmt": "2020-06-19T05:16:31",
        "slug": "object-cloning",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/object-cloning/",
        "title": {
            "rendered": "Object Cloning"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>object cloning</strong>&nbsp;is a way to create exact copy of an object. The clone() method of Object class is used to clone an object.</p>\n\n\n\n<p>The&nbsp;<strong>java.lang.Cloneable interface</strong>&nbsp;must be implemented by the class whose object clone we want to create. If we don&#8217;t implement Cloneable interface, clone() method generates&nbsp;<strong>CloneNotSupportedException</strong>.</p>\n\n\n\n<p>The <strong>clone() method</strong> is defined in the Object class. Syntax of the clone() method is as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected Object clone() throws CloneNotSupportedException  </code></pre>\n\n\n\n<h3>Why use clone() method ?</h3>\n\n\n\n<p>The&nbsp;<strong>clone() method</strong>&nbsp;saves the extra processing task for creating the exact copy of an object. If we perform it by using the new keyword, it will take a lot of processing time to be performed that is why we use object cloning.</p>\n\n\n\n<h3>Advantage of Object cloning</h3>\n\n\n\n<p>Although Object.clone() has some design issues but it is still a popular and easy way of copying objects. Following is a list of advantages of using clone() method:</p>\n\n\n\n<ul><li>You don&#8217;t need to write lengthy and repetitive codes. Just use an abstract class with a 4- or 5-line long clone() method.</li><li>It is the easiest and most efficient way for copying objects, especially if we are applying it to an already developed or an old project. Just define a parent class, implement Cloneable in it, provide the definition of the clone() method and the task will be done.</li><li>Clone() is the fastest way to copy array.</li></ul>\n\n\n\n<h3>Disadvantage of Object cloning</h3>\n\n\n\n<p>Following is a list of some disadvantages of clone() method:</p>\n\n\n\n<ul><li>To use the Object.clone() method, we have to change a lot of syntaxes to our code, like implementing a Cloneable interface, defining the clone() method and handling CloneNotSupportedException, and finally, calling Object.clone() etc.</li><li>We have to implement cloneable interface while it doesn&#8217;t have any methods in it. We just have to use it to tell the JVM that we can perform clone() on our object.</li><li>Object.clone() is protected, so we have to provide our own clone() and indirectly call Object.clone() from it.</li><li>Object.clone() doesn&#8217;t invoke any constructor so we don&#8217;t have any control over object construction.</li><li>If you want to write a clone method in a child class then all of its superclasses should define the clone() method in them or inherit it from another parent class. Otherwise, the super.clone() chain will fail.</li><li>Object.clone() supports only shallow copying but we will need to override it if we need deep cloning.</li></ul>\n\n\n\n<h3>Example of clone() method (Object cloning)</h3>\n\n\n\n<p>Let&#8217;s see the simple example of object cloning</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student18 implements Cloneable{  \nint rollno;  \nString name;  \n  \nStudent18(int rollno,String name){  \nthis.rollno=rollno;  \nthis.name=name;  \n}  \n  \npublic Object clone()throws CloneNotSupportedException{  \nreturn super.clone();  \n}  \n  \npublic static void main(String args&#91;]){  \ntry{  \nStudent18 s1=new Student18(101,\"amit\");  \n  \nStudent18 s2=(Student18)s1.clone();  \n  \nSystem.out.println(s1.rollno+\" \"+s1.name);  \nSystem.out.println(s2.rollno+\" \"+s2.name);  \n  \n}catch(CloneNotSupportedException c){}  \n  \n}  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:101 amit\n       101 amit</code></pre>\n\n\n\n<p>download the example of object cloning</p>\n\n\n\n<p>As you can see in the above example, both reference variables have the same value. Thus, the clone() copies the values of an object to another. So we don&#8217;t need to write explicit code to copy the value of an object to another.</p>\n\n\n\n<p>If we create another object by new keyword and assign the values of another object to this one, it will require a lot of processing on this object. So to save the extra processing task we use clone() method.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;object cloning&nbsp;is a way to create exact copy of an object. The clone() method of Object class is used to clone an object. The&nbsp;java.lang.Cloneable interface&nbsp;must be implemented by the class whose object clone we want to create. If we don&#8217;t implement Cloneable interface, clone() method generates&nbsp;CloneNotSupportedException. The clone() method is defined in the Object class. Syntax of [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4426"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4426"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4426/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4426"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4426"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4426"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4435,
        "date": "2020-06-19T05:20:18",
        "date_gmt": "2020-06-19T05:20:18",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=196"
        },
        "modified": "2020-06-19T05:20:18",
        "modified_gmt": "2020-06-19T05:20:18",
        "slug": "math-class",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/math-class/",
        "title": {
            "rendered": "Math class"
        },
        "content": {
            "rendered": "\n<p>Java Math class provides several methods to work on math calculations like min(), max(), avg(), sin(), cos(), tan(), round(), ceil(), floor(), abs() etc.</p>\n\n\n\n<p>Unlike some of the StrictMath class numeric methods, all implementations of the equivalent function of Math class can&#8217;t define to return the bit-for-bit same results. This relaxation permits implementation with better-performance where strict reproducibility is not required.</p>\n\n\n\n<p>If the size is int or long and the results overflow the range of value, the methods addExact(),&nbsp;subtractExact(),&nbsp;multiplyExact(), and&nbsp;toIntExact()&nbsp;throw an&nbsp;ArithmeticException.</p>\n\n\n\n<p>For other arithmetic operations like increment, decrement, divide, absolute value, and negation overflow&nbsp;occur only with a specific minimum or maximum value. It should be checked against the maximum and minimum value as appropriate.</p>\n\n\n\n<h2>Example 1</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class JavaMathExample1    \n{    \n    public static void main(String&#91;] args)     \n    {    \n        double x = 28;    \n        double y = 4;    \n          \n        // return the maximum of two numbers  \n        System.out.println(\"Maximum number of x and y is: \" +Math.max(x, y));   \n          \n        // return the square root of y   \n        System.out.println(\"Square root of y is: \" + Math.sqrt(y));   \n          \n        //returns 28 power of 4 i.e. 28*28*28*28    \n        System.out.println(\"Power of x and y is: \" + Math.pow(x, y));      \n  \n        // return the logarithm of given value       \n        System.out.println(\"Logarithm of x is: \" + Math.log(x));   \n        System.out.println(\"Logarithm of y is: \" + Math.log(y));  \n          \n        // return the logarithm of given value when base is 10      \n        System.out.println(\"log10 of x is: \" + Math.log10(x));   \n        System.out.println(\"log10 of y is: \" + Math.log10(y));    \n          \n        // return the log of x + 1  \n        System.out.println(\"log1p of x is: \" +Math.log1p(x));    \n  \n        // return a power of 2    \n        System.out.println(\"exp of a is: \" +Math.exp(x));    \n          \n        // return (a power of 2)-1  \n        System.out.println(\"expm1 of a is: \" +Math.expm1(x));  \n    }    \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Maximum number of x and y is: 28.0\nSquare root of y is: 2.0\nPower of x and y is: 614656.0\nLogarithm of x is: 3.332204510175204\nLogarithm of y is: 1.3862943611198906\nlog10 of x is: 1.4471580313422192\nlog10 of y is: 0.6020599913279624\nlog1p of x is: 3.367295829986474\nexp of a is: 1.446257064291475E12\nexpm1 of a is: 1.446257064290475E12</code></pre>\n\n\n\n<h2>Example 2</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class JavaMathExample2    \n{    \n    public static void main(String&#91;] args)     \n    {    \n        double a = 30;    \n          \n        // converting values to radian    \n        double b = Math.toRadians(a);   \n          \n        // return the trigonometric sine of a      \n        System.out.println(\"Sine value of a is: \" +Math.sin(a));    \n          \n        // return the trigonometric cosine value of a  \n        System.out.println(\"Cosine value of a is: \" +Math.cos(a));  \n          \n        // return the trigonometric tangent value of a  \n        System.out.println(\"Tangent value of a is: \" +Math.tan(a));  \n          \n        // return the trigonometric arc sine of a      \n        System.out.println(\"Sine value of a is: \" +Math.asin(a));    \n          \n        // return the trigonometric arc cosine value of a  \n        System.out.println(\"Cosine value of a is: \" +Math.acos(a));  \n          \n        // return the trigonometric arc tangent value of a  \n        System.out.println(\"Tangent value of a is: \" +Math.atan(a));  \n  \n        // return the hyperbolic sine of a      \n        System.out.println(\"Sine value of a is: \" +Math.sinh(a));    \n          \n        // return the hyperbolic cosine value of a  \n        System.out.println(\"Cosine value of a is: \" +Math.cosh(a));  \n          \n        // return the hyperbolic tangent value of a  \n        System.out.println(\"Tangent value of a is: \" +Math.tanh(a));  \n    }    \n}    </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sine value of a is: -0.9880316240928618\nCosine value of a is: 0.15425144988758405\nTangent value of a is: -6.405331196646276\nSine value of a is: NaN\nCosine value of a is: NaN\nTangent value of a is: 1.5374753309166493\nSine value of a is: 5.343237290762231E12\nCosine value of a is: 5.343237290762231E12\nTangent value of a is: 1.0</code></pre>\n\n\n\n<h2>Java Math Methods</h2>\n\n\n\n<p>The&nbsp;<strong>java.lang.Math</strong>&nbsp;class contains various methods for performing basic numeric operations such as the logarithm, cube root, and trigonometric functions etc. The various java math methods are as follows:</p>\n\n\n\n<h2>Basic Math methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>Math.abs()</td><td>It will return the Absolute value of the given value.</td></tr><tr><td>Math.max()</td><td>It returns the Largest of two values.</td></tr><tr><td>Math.min()</td><td>It is used to return the Smallest of two values.</td></tr><tr><td>Math.round()</td><td>It is used to round of the decimal numbers to the nearest value.</td></tr><tr><td>Math.sqrt()</td><td>It is used to return the square root of a&nbsp;number.</td></tr><tr><td>Math.cbrt()</td><td>It is used to return the cube root of a&nbsp;number.</td></tr><tr><td>Math.pow()</td><td>It returns the value of first argument raised to the power to second argument.</td></tr><tr><td>Math.signum()</td><td>It is used to find the sign of a given value.</td></tr><tr><td>Math.ceil()</td><td>It is used to find the smallest integer value that is greater than or equal to the argument or mathematical integer.</td></tr><tr><td>Math.copySign()</td><td>It is used to find the Absolute value of first argument along with sign specified in second argument.</td></tr><tr><td>Math.nextAfter()</td><td>It is used to return the floating-point number adjacent to the first argument in the direction of the second argument.</td></tr><tr><td>Math.nextUp()</td><td>It returns the floating-point value adjacent to&nbsp;d&nbsp;in the direction of positive infinity.</td></tr><tr><td>Math.nextDown()</td><td>It returns the floating-point value adjacent to&nbsp;d&nbsp;in the direction of negative infinity.</td></tr><tr><td>Math.floor()</td><td>It is used to find the&nbsp;largest integer value which is less than or equal to the argument and is equal to the mathematical integer of a double value.</td></tr><tr><td>Math.floorDiv()</td><td>It is used to find the&nbsp;largest integer value that is less than or equal to the algebraic quotient.</td></tr><tr><td>Math.random()</td><td>It returns a&nbsp;double&nbsp;value with a positive sign, greater than or equal to&nbsp;0.0&nbsp;and less than&nbsp;1.0.</td></tr><tr><td>Math.rint()</td><td>It returns the double value that is closest to the given argument and equal to mathematical integer.</td></tr><tr><td>Math.hypot()</td><td>It returns sqrt(x<sup>2</sup>&nbsp;+y<sup>2</sup>) without intermediate overflow or underflow.</td></tr><tr><td>Math.ulp()</td><td>It returns the size of an ulp of the argument.</td></tr><tr><td>Math.getExponent()</td><td>It is used to return the unbiased exponent used in the representation of a&nbsp;value.</td></tr><tr><td>Math.IEEEremainder()</td><td>It is used to calculate the remainder operation on two arguments as prescribed by the IEEE 754 standard and returns value.</td></tr><tr><td>Math.addExact()</td><td>It is used to return the sum of its arguments, throwing an exception if the result overflows an&nbsp;int or long.</td></tr><tr><td>Math.subtractExact()</td><td>It returns the difference of the arguments, throwing an exception if the result overflows an&nbsp;int.</td></tr><tr><td>Math.multiplyExact()</td><td>It is used to return the product of the arguments, throwing an exception if the result overflows an&nbsp;int or long.</td></tr><tr><td>Math.incrementExact()</td><td>It returns the argument incremented by one, throwing an exception if the result overflows an&nbsp;int.</td></tr><tr><td>Math.decrementExact()</td><td>It is used to return the argument decremented by one, throwing an exception if the result overflows an&nbsp;int or long.</td></tr><tr><td>Math.negateExact()</td><td>It is used to return the negation of the argument, throwing an exception if the result overflows an&nbsp;int or long.</td></tr><tr><td>Math.toIntExact()</td><td>It returns the value of the&nbsp;long&nbsp;argument, throwing an exception if the value overflows an&nbsp;int.</td></tr></tbody></table></figure>\n\n\n\n<h2>Logarithmic Math Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>Math.log()</td><td>It returns the natural logarithm of a&nbsp;double&nbsp;value.</td></tr><tr><td>Math.log10()</td><td>It is used to return the base 10 logarithm of a&nbsp;double&nbsp;value.</td></tr><tr><td>Math.log1p()</td><td>It returns the natural logarithm of the sum of the argument and 1.</td></tr><tr><td>Math.exp()</td><td>It returns E raised to the power of a&nbsp;double&nbsp;value, where E is Euler&#8217;s number and it is approximately equal to 2.71828.</td></tr><tr><td>Math.expm1()</td><td>It is used to calculate the power of E and subtract one from it.</td></tr></tbody></table></figure>\n\n\n\n<h2>Trigonometric Math Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>Math.sin()</td><td>It is used to return the trigonometric Sine value of a Given double value.</td></tr><tr><td>Math.cos()</td><td>It is used to return the trigonometric Cosine value of a Given double value.</td></tr><tr><td>Math.tan()</td><td>It is used to return the trigonometric Tangent value of a Given double value.</td></tr><tr><td>Math.asin()</td><td>It is used to return the trigonometric Arc Sine value of a Given double value</td></tr><tr><td>Math.acos()</td><td>It is used to return the trigonometric Arc Cosine value of a Given double value.</td></tr><tr><td>Math.atan()</td><td>It is used to return the trigonometric Arc Tangent value of a Given double value.</td></tr></tbody></table></figure>\n\n\n\n<h2>Hyperbolic Math Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>Math.sinh()</td><td>It is used to return the trigonometric Hyperbolic Cosine value of a Given double value.</td></tr><tr><td>Math.cosh()</td><td>It is used to return the trigonometric Hyperbolic Sine value of a Given double value.</td></tr><tr><td>Math.tanh()</td><td>It is used to return the trigonometric Hyperbolic Tangent value of a Given double value.</td></tr></tbody></table></figure>\n\n\n\n<h2>Angular Math Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>Math.toDegrees</td><td>It is used to convert the specified Radians angle to equivalent angle measured in Degrees.</td></tr><tr><td>Math.toRadians</td><td>It is used to convert the specified Degrees angle to equivalent angle measured in Radians.</td></tr></tbody></table></figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java Math class provides several methods to work on math calculations like min(), max(), avg(), sin(), cos(), tan(), round(), ceil(), floor(), abs() etc. Unlike some of the StrictMath class numeric methods, all implementations of the equivalent function of Math class can&#8217;t define to return the bit-for-bit same results. This relaxation permits implementation with better-performance where [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4435"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4435"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4435/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4435"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4435"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4435"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4431,
        "date": "2020-06-19T07:11:39",
        "date_gmt": "2020-06-19T07:11:39",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=191"
        },
        "modified": "2020-06-19T07:11:39",
        "modified_gmt": "2020-06-19T07:11:39",
        "slug": "wrapper-classes",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/wrapper-classes/",
        "title": {
            "rendered": "Wrapper classes"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>wrapper class in Java</strong>&nbsp;provides the mechanism&nbsp;<em>to convert primitive into object and object into primitive</em>.</p>\n\n\n\n<p>Since J2SE 5.0,&nbsp;<strong>autoboxing</strong>&nbsp;and&nbsp;<strong>unboxing</strong>&nbsp;feature convert primitives into objects and objects into primitives automatically. The automatic conversion of primitive into an object is known as autoboxing and vice-versa unboxing.</p>\n\n\n\n<h2>Use of Wrapper classes in Java</h2>\n\n\n\n<p>Java is an object-oriented programming language, so we need to deal with objects many times like in Collections, Serialization, Synchronization, etc. Let us see the different scenarios, where we need to use the wrapper classes.</p>\n\n\n\n<ul><li><strong>Change the value in Method:</strong>&nbsp;Java supports only call by value. So, if we pass a primitive value, it will not change the original value. But, if we convert the primitive value in an object, it will change the original value.</li><li><strong>Serialization:</strong>&nbsp;We need to convert the objects into streams to perform the serialization. If we have a primitive value, we can convert it in objects through the wrapper classes.</li><li><strong>Synchronization:</strong>&nbsp;Java synchronization works with objects in Multithreading.</li><li><strong>java.util package:</strong>&nbsp;The java.util package provides the utility classes to deal with objects.</li><li><strong>Collection Framework:</strong>&nbsp;Java collection framework works with objects only. All classes of the collection framework (ArrayList, LinkedList, Vector, HashSet, LinkedHashSet, TreeSet, PriorityQueue, ArrayDeque, etc.) deal with objects only.</li></ul>\n\n\n\n<p>The eight classes of the&nbsp;<em>java.lang</em>&nbsp;package are known as wrapper classes in Java. The list of eight wrapper classes are given below:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Primitive Type</th><th>Wrapper class</th></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr></tbody></table></figure>\n\n\n\n<h2>Autoboxing</h2>\n\n\n\n<p>The automatic conversion of primitive data type into its corresponding wrapper class is known as autoboxing, for example, byte to Byte, char to Character, int to Integer, long to Long, float to Float, boolean to Boolean, double to Double, and short to Short.</p>\n\n\n\n<p>Since Java 5, we do not need to use the valueOf() method of wrapper classes to convert the primitive into objects.</p>\n\n\n\n<p><strong>Wrapper class Example: Primitive to Wrapper</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java program to convert primitive into objects  \n//Autoboxing example of int to Integer  \npublic class WrapperExample1{  \npublic static void main(String args&#91;]){  \n//Converting int into Integer  \nint a=20;  \nInteger i=Integer.valueOf(a);//converting int into Integer explicitly  \nInteger j=a;//autoboxing, now compiler will write Integer.valueOf(a) internally  \n  \nSystem.out.println(a+\" \"+i+\" \"+j);  \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20 20 20\n</code></pre>\n\n\n\n<h2>Unboxing</h2>\n\n\n\n<p>The automatic conversion of wrapper type into its corresponding primitive type is known as unboxing. It is the reverse process of autoboxing. Since Java 5, we do not need to use the intValue() method of wrapper classes to convert the wrapper type into primitives.</p>\n\n\n\n<p><strong>Wrapper class Example: Wrapper to Primitive</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java program to convert object into primitives  \n//Unboxing example of Integer to int  \npublic class WrapperExample2{    \npublic static void main(String args&#91;]){    \n//Converting Integer to int    \nInteger a=new Integer(3);    \nint i=a.intValue();//converting Integer to int explicitly  \nint j=a;//unboxing, now compiler will write a.intValue() internally    \n    \nSystem.out.println(a+\" \"+i+\" \"+j);    \n}}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>3 3 3\n</code></pre>\n\n\n\n<h2>Java Wrapper classes Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>//Java Program to convert all primitives into its corresponding   \n//wrapper objects and vice-versa  \npublic class WrapperExample3{  \npublic static void main(String args&#91;]){  \nbyte b=10;  \nshort s=20;  \nint i=30;  \nlong l=40;  \nfloat f=50.0F;  \ndouble d=60.0D;  \nchar c='a';  \nboolean b2=true;  \n  \n//Autoboxing: Converting primitives into objects  \nByte byteobj=b;  \nShort shortobj=s;  \nInteger intobj=i;  \nLong longobj=l;  \nFloat floatobj=f;  \nDouble doubleobj=d;  \nCharacter charobj=c;  \nBoolean boolobj=b2;  \n  \n//Printing objects  \nSystem.out.println(\"---Printing object values---\");  \nSystem.out.println(\"Byte object: \"+byteobj);  \nSystem.out.println(\"Short object: \"+shortobj);  \nSystem.out.println(\"Integer object: \"+intobj);  \nSystem.out.println(\"Long object: \"+longobj);  \nSystem.out.println(\"Float object: \"+floatobj);  \nSystem.out.println(\"Double object: \"+doubleobj);  \nSystem.out.println(\"Character object: \"+charobj);  \nSystem.out.println(\"Boolean object: \"+boolobj);  \n  \n//Unboxing: Converting Objects to Primitives  \nbyte bytevalue=byteobj;  \nshort shortvalue=shortobj;  \nint intvalue=intobj;  \nlong longvalue=longobj;  \nfloat floatvalue=floatobj;  \ndouble doublevalue=doubleobj;  \nchar charvalue=charobj;  \nboolean boolvalue=boolobj;  \n  \n//Printing primitives  \nSystem.out.println(\"---Printing primitive values---\");  \nSystem.out.println(\"byte value: \"+bytevalue);  \nSystem.out.println(\"short value: \"+shortvalue);  \nSystem.out.println(\"int value: \"+intvalue);  \nSystem.out.println(\"long value: \"+longvalue);  \nSystem.out.println(\"float value: \"+floatvalue);  \nSystem.out.println(\"double value: \"+doublevalue);  \nSystem.out.println(\"char value: \"+charvalue);  \nSystem.out.println(\"boolean value: \"+boolvalue);  \n}}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>---Printing object values---\nByte object: 10\nShort object: 20\nInteger object: 30\nLong object: 40\nFloat object: 50.0\nDouble object: 60.0\nCharacter object: a\nBoolean object: true\n---Printing primitive values---\nbyte value: 10\nshort value: 20\nint value: 30\nlong value: 40\nfloat value: 50.0\ndouble value: 60.0\nchar value: a\nboolean value: true</code></pre>\n\n\n\n<h2>Custom Wrapper class in Java</h2>\n\n\n\n<p>Java Wrapper classes wrap the primitive data types, that is why it is known as wrapper classes. We can also create a class which wraps a primitive data type. So, we can create a custom wrapper class in Java.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Creating the custom wrapper class  \nclass codemeals{  \nprivate int i;  \ncodemeals(){}  \ncodemeals(int i){  \nthis.i=i;  \n}  \npublic int getValue(){  \nreturn i;  \n}  \npublic void setValue(int i){  \nthis.i=i;  \n}  \n@Override  \npublic String toString() {  \n  return Integer.toString(i);  \n}  \n}  \n//Testing the custom wrapper class  \npublic class Testcodemeals{  \npublic static void main(String&#91;] args){  \ncodemeals j=new codemeals(10);  \nSystem.out.println(j);  \n}}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;wrapper class in Java&nbsp;provides the mechanism&nbsp;to convert primitive into object and object into primitive. Since J2SE 5.0,&nbsp;autoboxing&nbsp;and&nbsp;unboxing&nbsp;feature convert primitives into objects and objects into primitives automatically. The automatic conversion of primitive into an object is known as autoboxing and vice-versa unboxing. Use of Wrapper classes in Java Java is an object-oriented programming language, so we [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4431"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4431"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4431/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4431"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4431"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4431"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4434,
        "date": "2020-06-19T07:13:39",
        "date_gmt": "2020-06-19T07:13:39",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=195"
        },
        "modified": "2020-06-19T07:13:39",
        "modified_gmt": "2020-06-19T07:13:39",
        "slug": "recursion",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/recursion/",
        "title": {
            "rendered": "Recursion"
        },
        "content": {
            "rendered": "\n<p>Recursion in java is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method.</p>\n\n\n\n<p>It makes the code compact but complex to understand.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>returntype methodname(){  \n//code to be executed  \nmethodname();//calling same method  \n}  </code></pre>\n\n\n\n<h2>Java Recursion Example 1: Infinite times</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RecursionExample1 {  \nstatic void p(){  \nSystem.out.println(\"hello\");  \np();  \n}  \n  \npublic static void main(String&#91;] args) {  \np();  \n}  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>hello\nhello\n...\njava.lang.StackOverflowError</code></pre>\n\n\n\n<h2>Java Recursion Example 2: Finite times</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RecursionExample2 {  \nstatic int count=0;  \nstatic void p(){  \ncount++;  \nif(count&lt;=5){  \nSystem.out.println(\"hello \"+count);  \np();  \n}  \n}  \npublic static void main(String&#91;] args) {  \np();  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>hello 1\nhello 2\nhello 3\nhello 4\nhello 5</code></pre>\n\n\n\n<h2>Java Recursion Example 3: Factorial Number</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RecursionExample3 {  \n    static int factorial(int n){      \n          if (n == 1)      \n            return 1;      \n          else      \n            return(n * factorial(n-1));      \n    }      \n  \npublic static void main(String&#91;] args) {  \nSystem.out.println(\"Factorial of 5 is: \"+factorial(5));  \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Factorial of 5 is: 120\n</code></pre>\n\n\n\n<p><strong>Working of above program:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>factorial(5) \n   factorial(4) \n      factorial(3) \n         factorial(2) \n            factorial(1) \n               return 1 \n            return 2*1 = 2 \n         return 3*2 = 6 \n      return 4*6 = 24 \n   return 5*24 = 120</code></pre>\n\n\n\n<h2>Java Recursion Example 4: Fibonacci Series</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class RecursionExample4 {  \n    static int n1=0,n2=1,n3=0;      \n     static void printFibo(int count){      \n        if(count>0){      \n             n3 = n1 + n2;      \n             n1 = n2;      \n             n2 = n3;      \n             System.out.print(\" \"+n3);     \n             printFibo(count-1);      \n         }      \n     }        \n  \npublic static void main(String&#91;] args) {  \n    int count=15;      \n      System.out.print(n1+\" \"+n2);//printing 0 and 1      \n      printFibo(count-2);//n-2 because 2 numbers are already printed     \n}  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 1 1 2 3 5 8 13 21 34 55 89 144 233 377</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Recursion in java is a process in which a method calls itself continuously. A method in java that calls itself is called recursive method. It makes the code compact but complex to understand. Syntax: Java Recursion Example 1: Infinite times Output: Java Recursion Example 2: Finite times Output: Java Recursion Example 3: Factorial Number Output: [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4434"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4434"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4434/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4434"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4434"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4434"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4433,
        "date": "2020-06-19T07:15:17",
        "date_gmt": "2020-06-19T07:15:17",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=193"
        },
        "modified": "2020-06-19T07:15:17",
        "modified_gmt": "2020-06-19T07:15:17",
        "slug": "call-by-value-and-call-by-reference",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/call-by-value-and-call-by-reference/",
        "title": {
            "rendered": "Call by Value and Call by Reference"
        },
        "content": {
            "rendered": "\n<figure class=\"wp-block-table\"><table><tbody><tr><td>There is only call by value in java, not call by reference. If we call a method passing a value, it is known as call by value. The changes being done in the called method, is not affected in the calling method.</td></tr><tr><td></td></tr></tbody></table></figure>\n\n\n\n<h3>Example of call by value in java</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>In case of call by value original value is not changed. Let&#8217;s take a simple example:</td></tr></tbody></table><figcaption><br><br><br></figcaption></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>class Operation{  \n int data=50;  \n  \n void change(int data){  \n data=data+100;//changes will be in the local variable only  \n }  \n     \n public static void main(String args&#91;]){  \n   Operation op=new Operation();  \n  \n   System.out.println(\"before change \"+op.data);  \n   op.change(500);  \n   System.out.println(\"after change \"+op.data);  \n  \n }  \n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:before change 50\n       after change 50\t</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Another Example of call by value in java</h3>\n\n\n\n<p>In case of call by reference original value is changed if we made changes in the called method. If we pass object in place of any primitive value, original value will be changed. In this example we are passing object as a value. Let&#8217;s take a simple example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Operation2{  \n int data=50;  \n  \n void change(Operation2 op){  \n op.data=op.data+100;//changes will be in the instance variable  \n }  \n     \n    \n public static void main(String args&#91;]){  \n   Operation2 op=new Operation2();  \n  \n   System.out.println(\"before change \"+op.data);  \n   op.change(op);//passing object  \n   System.out.println(\"after change \"+op.data);  \n  \n }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:before change 50\n       after change 150\t</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There is only call by value in java, not call by reference. If we call a method passing a value, it is known as call by value. The changes being done in the called method, is not affected in the calling method. Example of call by value in java In case of call by value [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4433"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4433"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4433/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4433"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4433"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4433"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4432,
        "date": "2020-06-19T07:16:20",
        "date_gmt": "2020-06-19T07:16:20",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=192"
        },
        "modified": "2020-06-19T07:16:20",
        "modified_gmt": "2020-06-19T07:16:20",
        "slug": "java-strictfp",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/java-strictfp/",
        "title": {
            "rendered": "Java Strictfp"
        },
        "content": {
            "rendered": "\n<p>Java strictfp keyword ensures that you will get the same result on every platform if you perform operations in the floating-point variable. The precision may differ from platform to platform that is why java programming language have provided the strictfp keyword, so that you get same result on every platform. So, now you have better control over the floating-point arithmetic.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Legal code for strictfp keyword</h3>\n\n\n\n<p>The strictfp keyword can be applied on methods, classes and interfaces.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>strictfp class A{}//strictfp applied on class  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>strictfp interface M{}//strictfp applied on interface  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \nstrictfp void m(){}//strictfp applied on method  \n}</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Illegal code for strictfp keyword</h3>\n\n\n\n<p>The strictfp keyword&nbsp;<strong>cannot</strong>&nbsp;be applied on abstract methods, variables or constructors.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class B{  \nstrictfp abstract void m();//Illegal combination of modifiers  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>class B{  \nstrictfp int data=10;//modifier strictfp not allowed here  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>class B{  \nstrictfp B(){}//modifier strictfp not allowed here  \n}  </code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java strictfp keyword ensures that you will get the same result on every platform if you perform operations in the floating-point variable. The precision may differ from platform to platform that is why java programming language have provided the strictfp keyword, so that you get same result on every platform. So, now you have better [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4432"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4432"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4432/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4432"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4432"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4432"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4430,
        "date": "2020-06-19T07:16:52",
        "date_gmt": "2020-06-19T07:16:52",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=190"
        },
        "modified": "2020-06-19T07:16:52",
        "modified_gmt": "2020-06-19T07:16:52",
        "slug": "creating-api-document",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/creating-api-document/",
        "title": {
            "rendered": "Creating API Document"
        },
        "content": {
            "rendered": "\n<p>We can create document api in java by the help of&nbsp;<strong>javadoc</strong>&nbsp;tool. In the java file, we must use the documentation comment /**&#8230; */ to post information for the class, method, constructor, fields etc.</p>\n\n\n\n<p>Let&#8217;s see the simple class that contains documentation comment.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.abc;  \n/** This class is a user-defined class that contains one methods cube.*/  \npublic class M{  \n  \n/** The cube method prints cube of the given number */  \npublic static void  cube(int n){System.out.println(n*n*n);}  \n}  </code></pre>\n\n\n\n<p>To create the document API, you need to use the javadoc tool followed by java file name. There is no need to compile the javafile.</p>\n\n\n\n<p>On the command prompt, you need to write:javadoc M.java</p>\n\n\n\n<p>to generate the document api. Now, there will be created a lot of html files. Open the index.html file to get the information about the classes.</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We can create document api in java by the help of&nbsp;javadoc&nbsp;tool. In the java file, we must use the documentation comment /**&#8230; */ to post information for the class, method, constructor, fields etc. Let&#8217;s see the simple class that contains documentation comment. To create the document API, you need to use the javadoc tool followed [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4430"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4430"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4430/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4430"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4430"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4430"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4429,
        "date": "2020-06-19T07:18:16",
        "date_gmt": "2020-06-19T07:18:16",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=189"
        },
        "modified": "2020-06-19T07:18:16",
        "modified_gmt": "2020-06-19T07:18:16",
        "slug": "command-line",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/command-line/",
        "title": {
            "rendered": "Command Line"
        },
        "content": {
            "rendered": "\n<p>The java command-line argument is an argument i.e. passed at the time of running the java program.</p>\n\n\n\n<p>The arguments passed from the console can be received in the java program and it can be used as an input.</p>\n\n\n\n<p>So, it provides a convenient way to check the behavior of the program for the different values. You can pass&nbsp;<strong>N</strong>&nbsp;(1,2,3 and so on) numbers of arguments from the command prompt.</p>\n\n\n\n<h3>Simple example of command-line argument in java</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>In this example, we are receiving only one argument and printing it. To run this java program, you must pass at least one argument from the command prompt.</td></tr></tbody></table><figcaption><br><br></figcaption></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>class CommandLineExample{  \npublic static void main(String args&#91;]){  \nSystem.out.println(\"Your first argument is: \"+args&#91;0]);  \n}  \n}</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>compile by > javac CommandLineExample.java  \nrun by > java CommandLineExample sonoo </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output: Your first argument is: sonoo\n</code></pre>\n\n\n\n<h3>Example of command-line argument that prints all the values</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>In this example, we are printing all the arguments passed from the command-line. For this purpose, we have traversed the array using for loop.</td></tr></tbody></table><figcaption><br><br></figcaption></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \npublic static void main(String args&#91;]){  \n  \nfor(int i=0;i&lt;args.length;i++)  \nSystem.out.println(args&#91;i]);  \n  \n}  \n} </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>compile by > javac A.java  \nrun by > java A sonoo jaiswal 1 3 abc  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output: sonoo\n       jaiswal\n       1\n       3\n       abc</code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The java command-line argument is an argument i.e. passed at the time of running the java program. The arguments passed from the console can be received in the java program and it can be used as an input. So, it provides a convenient way to check the behavior of the program for the different values. [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4429"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4429"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4429/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4429"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4429"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4429"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4428,
        "date": "2020-06-19T07:19:04",
        "date_gmt": "2020-06-19T07:19:04",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=188"
        },
        "modified": "2020-06-19T07:19:04",
        "modified_gmt": "2020-06-19T07:19:04",
        "slug": "object-and-class",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/object-and-class/",
        "title": {
            "rendered": "object and class"
        },
        "content": {
            "rendered": "\n<p>There are many differences between object and class. A list of differences between object and class are given below:</p>\n\n\n\n<pre class=\"wp-block-table\"><table><tbody><tr><th>No.</th><th>Object</th><th>Class</th></tr><tr><td>1)</td><td>Object is an&nbsp;<strong>instance</strong>&nbsp;of a class.</td><td>Class is a&nbsp;<strong>blueprint or template</strong>from which objects are created.</td></tr><tr><td>2)</td><td>Object is a&nbsp;<strong>real world entity</strong>&nbsp;such as pen, laptop, mobile, bed, keyboard, mouse, chair etc.</td><td>Class is a&nbsp;<strong>group of similar objects</strong>.</td></tr><tr><td>3)</td><td>Object is a&nbsp;<strong>physical</strong>&nbsp;entity.</td><td>Class is a&nbsp;<strong>logical</strong>&nbsp;entity.</td></tr><tr><td>4)</td><td>Object is created through&nbsp;<strong>new keyword</strong>&nbsp;mainly e.g.<br>Student s1=new Student();</td><td>Class is declared using&nbsp;<strong>class keyword</strong>&nbsp;e.g.<br>class Student{}</td></tr><tr><td>5)</td><td>Object is created&nbsp;<strong>many times</strong>&nbsp;as per requirement.</td><td>Class is declared&nbsp;<strong>once</strong>.</td></tr><tr><td>6)</td><td>Object&nbsp;<strong>allocates memory when it is created</strong>.</td><td>Class&nbsp;<strong>doesn't allocated memory when it is created</strong>.</td></tr><tr><td>7)</td><td>There are&nbsp;<strong>many ways to create object</strong>&nbsp;in java such as new keyword, newInstance() method, clone() method, factory method and deserialization.</td><td>There is only&nbsp;<strong>one way to define class</strong>&nbsp;in java using class keyword.</td></tr></tbody></table></pre>\n\n\n\n<p>Let&#8217;s see some real life example of class and object in java to understand the difference well:</p>\n\n\n\n<p><strong>Class:</strong>&nbsp;Human&nbsp;<strong>Object:</strong>&nbsp;Man, Woman</p>\n\n\n\n<p><strong>Class:</strong>&nbsp;Fruit&nbsp;<strong>Object:</strong>&nbsp;Apple, Banana, Mango, Guava wtc.</p>\n\n\n\n<p><strong>Class:</strong>&nbsp;Mobile phone&nbsp;<strong>Object:</strong>&nbsp;iPhone, Samsung, Moto</p>\n\n\n\n<p><strong>Class:</strong>&nbsp;Food&nbsp;<strong>Object:</strong>&nbsp;Pizza, Burger, Samosa</p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There are many differences between object and class. A list of differences between object and class are given below: No.ObjectClass1)Object is an&nbsp;instance&nbsp;of a class.Class is a&nbsp;blueprint or templatefrom which objects are created.2)Object is a&nbsp;real world entity&nbsp;such as pen, laptop, mobile, bed, keyboard, mouse, chair etc.Class is a&nbsp;group of similar objects.3)Object is a&nbsp;physical&nbsp;entity.Class is a&nbsp;logical&nbsp;entity.4)Object is [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4428"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4428"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4428/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4428"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4428"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4428"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 4427,
        "date": "2020-06-19T07:20:21",
        "date_gmt": "2020-06-19T07:20:21",
        "guid": {
            "rendered": "http://java.foobrdigital.com/?p=187"
        },
        "modified": "2020-06-19T07:20:21",
        "modified_gmt": "2020-06-19T07:20:21",
        "slug": "overloading-and-overridding",
        "status": "publish",
        "type": "post",
        "link": "https://computerprogramming.foobrdigital.com/overloading-and-overridding/",
        "title": {
            "rendered": "Overloading and Overridding"
        },
        "content": {
            "rendered": "\n<p>There are many differences between method overloading and method overriding in java. A list of differences between method overloading and method overriding are given below:</p>\n\n\n\n<pre class=\"wp-block-table\"><table><tbody><tr><th>No.</th><th>Method Overloading</th><th>Method Overriding</th></tr><tr><td>1)</td><td>Method overloading is used&nbsp;<em>to increase the readability</em>&nbsp;of the program.</td><td>Method overriding is used&nbsp;<em>to provide the specific implementation</em>&nbsp;of the method that is already provided by its super class.</td></tr><tr><td>2)</td><td>Method overloading is performed&nbsp;<em>within class</em>.</td><td>Method overriding occurs&nbsp;<em>in two classes</em>&nbsp;that have IS-A (inheritance) relationship.</td></tr><tr><td>3)</td><td>In case of method overloading,&nbsp;<em>parameter must be different</em>.</td><td>In case of method overriding,&nbsp;<em>parameter must be same</em>.</td></tr><tr><td>4)</td><td>Method overloading is the example of&nbsp;<em>compile time polymorphism</em>.</td><td>Method overriding is the example of&nbsp;<em>run time polymorphism</em>.</td></tr><tr><td>5)</td><td>In java, method overloading can't be performed by changing return type of the method only.&nbsp;<em>Return type can be same or different</em>&nbsp;in method overloading. But you must have to change the parameter.</td><td><em>Return type must be same or covariant</em>&nbsp;in method overriding.</td></tr></tbody></table></pre>\n\n\n\n<h2>Java Method Overloading example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class OverloadingExample{  \nstatic int add(int a,int b){return a+b;}  \nstatic int add(int a,int b,int c){return a+b+c;}  \n}  </code></pre>\n\n\n\n<h2>Java Method Overriding example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Animal{  \nvoid eat(){System.out.println(\"eating...\");}  \n}  \nclass Dog extends Animal{  \nvoid eat(){System.out.println(\"eating bread...\");}  \n}  </code></pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There are many differences between method overloading and method overriding in java. A list of differences between method overloading and method overriding are given below: No.Method OverloadingMethod Overriding1)Method overloading is used&nbsp;to increase the readability&nbsp;of the program.Method overriding is used&nbsp;to provide the specific implementation&nbsp;of the method that is already provided by its super class.2)Method overloading is [&hellip;]</p>\n",
            "protected": false
        },
        "author": 1,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            18
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4427"
                }
            ],
            "collection": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
                }
            ],
            "about": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4427"
                }
            ],
            "version-history": [
                {
                    "count": 0,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4427/revisions"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4427"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4427"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4427"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https://api.w.org/{rel}",
                    "templated": true
                }
            ]
        }
    }
]