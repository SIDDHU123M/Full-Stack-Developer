[{"id":257,"date":"2020-07-02T10:13:51","date_gmt":"2020-07-02T10:13:51","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=257"},"modified":"2020-12-16T16:56:44","modified_gmt":"2020-12-16T16:56:44","slug":"overview-4","status":"publish","type":"post","link":"https://python3.foobrdigital.com/overview-4/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p>Jython is the JVM implementation of the Python programming language. It is designed to run on the Java platform. A Jython program can import and use any Java class. Just as Java, Jython program compiles to&nbsp;<strong>bytecode</strong>. One of the main advantages is that a user interface designed in Python can use GUI elements of&nbsp;<strong>AWT</strong>,&nbsp;<strong>Swing</strong>&nbsp;or&nbsp;<strong>SWT Package</strong>.</p>\n\n\n\n<p>Jython, which started as JPython and was later renamed, follows closely the standard Python implementation called&nbsp;<strong>CPython</strong>&nbsp;as created by&nbsp;<strong>Guido Van Rossum</strong>. Jython was created in 1997 by&nbsp;<strong>Jim Hugunin</strong>. Jython 2.0 was released in 1999. Since then, Jython 2.x releases correspond to equivalent CPython releases. Jython 2.7.0 released in May 2015, corresponds to CPython 2.7. Development of Jython 3.x is under progress.</p>\n\n\n\n<h2>Difference between Python and Java</h2>\n\n\n\n<p>Following are the differences between Python and Java −</p>\n\n\n\n<ul><li>Python is a dynamically typed language. Hence, the type declaration of variable is not needed. Java on the other hand is a statically typed language, which means that the type declaration of variable is mandatory and cannot be changed.</li><li>Python has only unchecked exceptions, whereas Java has both checked and unchecked exceptions.</li><li>Python uses indents for scoping, while Java uses matching curly brackets.</li><li>Since Python is an interpreter-based language, it has no separate compilation steps. A Java program however needs to be compiled to bytecode and is in turn executed by a JVM.</li><li>Python supports multiple inheritance, but in Java, multiple inheritance is not possible. It however has implementation of an interface.</li><li>Compared to Java, Python has a richer built-in data structures (lists, dicts, tuples, everything is an object).</li></ul>\n\n\n\n<h2>Difference between Python and Jython</h2>\n\n\n\n<p>Following are the differences between Python and Jython −</p>\n\n\n\n<ul><li>Reference implementation of Python, called CPython, is written in C language. Jython on the other hand is completely written in Java and is a JVM implementation.</li><li>Standard Python is available on multiple platforms. Jython is available for any platform with a JVM installed on it.</li><li>Standard Python code compiles to a&nbsp;<strong>.pyc</strong>&nbsp;file, while Jython program compiles to a&nbsp;<strong>.class</strong>&nbsp;file.</li><li>Python extensions can be written in C language. Extensions for Jython are written in Java.</li><li>Jython is truly multi-threaded in nature. Python however uses the&nbsp;<strong>Global Interpreter Lock</strong>&nbsp;(GIL) mechanism for the purpose.</li><li>Both implementations have different garbage collection mechanisms.</li></ul>\n\n\n\n<p>In the next chapter, we will learn how to import the Java libraries in Jython.</p>\n","protected":false},"excerpt":{"rendered":"<p>Jython is the JVM implementation of the Python programming language. It is designed to run on the Java platform. A Jython program can import and use any Java class. Just as Java, Jython program compiles to&nbsp;bytecode. One of the main advantages is that a user interface designed in Python can use GUI elements of&nbsp;AWT,&nbsp;Swing&nbsp;or&nbsp;SWT Package. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/257"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=257"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/257/revisions"}],"predecessor-version":[{"id":3013,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/257/revisions/3013"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=257"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=257"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=257"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":259,"date":"2020-07-02T10:14:49","date_gmt":"2020-07-02T10:14:49","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=259"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"installation-4-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/installation-4-2/","title":{"rendered":"Installation"},"content":{"rendered":"\n<p>Before installation of Jython 2.7, ensure that the system has <strong>JDK 7</strong> or more installed. Jython is available in the form of an executable jar file. Download it from &#8211; http://www.jython.org/downloads.html and either double click on its icon or run the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java -jar jython_installer-2.7.0.jar\n</code></pre>\n\n\n\n<p>An installation wizard will commence with which installation options have to be given. Here is the systematic installation procedure.</p>\n\n\n\n<p>The first step in the wizard asks you to select the language.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/wizard.jpg\" alt=\"Wizard\"/></figure>\n\n\n\n<p>The second step prompts you to accept the licence agreement.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/licence_agreement.jpg\" alt=\"License Agreement\"/></figure>\n\n\n\n<p>In the next step, choose the installation type. It is recommended to choose the Standard installation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/installation_type.jpg\" alt=\"Installation Type\"/></figure>\n\n\n\n<p>The next screen asks your confirmation about your options and proceeds to complete the installation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/overview.jpg\" alt=\"Overview\"/></figure>\n\n\n\n<p>The installation procedure might take some time to complete.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/installation_in_process.jpg\" alt=\"Installation in Process\"/></figure>\n\n\n\n<p>After the installation is complete, invoke <strong>jython.exe</strong> from the bin directory inside the destination directory. Assuming that Jython is installed in <strong>C:\\jython27</strong>, execute the following from the command line.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jython27\\bin\\jython\n</code></pre>\n\n\n\n<p>A Python prompt (&gt;&gt;&gt;) will appear, in front of which any Python statement or Python script can be executed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/python_prompt.jpg\" alt=\"Python Prompt\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Before installation of Jython 2.7, ensure that the system has JDK 7 or more installed. Jython is available in the form of an executable jar file. Download it from &#8211; http://www.jython.org/downloads.html and either double click on its icon or run the following command − An installation wizard will commence with which installation options have to be given. Here is [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/259"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=259"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/259/revisions"}],"predecessor-version":[{"id":3005,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/259/revisions/3005"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=259"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=259"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=259"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":258,"date":"2020-07-02T10:19:22","date_gmt":"2020-07-02T10:19:22","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=258"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"variables-and-data-types","status":"publish","type":"post","link":"https://python3.foobrdigital.com/variables-and-data-types/","title":{"rendered":"Variables and Data Types"},"content":{"rendered":"\n<p>Variables are named locations in computer’s memory. Each variable can hold one piece of data in it. Unlike Java, Python is a dynamically typed language. Hence while using Jython also; prior declaration of data type of variable is not done. Rather than the type of variable deciding which data can be stored in it, the data decides the type of variable.</p>\n\n\n\n<p>In the following example, a variable is assigned an integer value. Using the type() built-in function, we can verify that the type of variable is an integer. But, if the same variable is assigned a string, the type() function will string as the type of same variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>> x = 10\n>>> type(x)\n&lt;class 'int'>\n\n>>> x = \"hello\"\n>>> type(x)\n&lt;class 'str'></code></pre>\n\n\n\n<p>This explains why Python is called a dynamically typed language.</p>\n\n\n\n<p>The following Python built-in data types can also be used in Jython −</p>\n\n\n\n<ul><li>Number</li><li>String</li><li>List</li><li>Tuple</li><li>Dictionary</li></ul>\n\n\n\n<p>Python recognizes numeric data as a number, which may be an integer, a real number with floating point or a complex number. String, List and Tuple data types are called sequences.</p>\n\n\n\n<h2>Jython Numbers</h2>\n\n\n\n<p>In Python, any signed integer is said to be of type ‘int’. To express a long integer, letter ‘L’ is attached to it. A number with a decimal point separating the integer part from a fractional component is called ‘float’. The fractional part may contain an exponent expressed in the scientific notation using ‘E’ or ‘e’.</p>\n\n\n\n<p>A Complex number is also defined as numeric data type in Python. A complex number contains a real part (a floating-point number) and an imaginary part having ‘j’ attached to it.</p>\n\n\n\n<p>In order to express a number in the Octal or the Hexadecimal representation, <strong>0O</strong> or <strong>0X</strong> is prefixed to it. The following code block gives examples of different representations of numbers in Python.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int     -> 10, 100, -786, 80\nlong    -> 51924361L, -0112L, 47329487234L\nfloat   -> 15.2, -21.9, 32.3+e18, -3.25E+101\ncomplex -> 3.14j, 45.j, 3e+26J, 9.322e-36j</code></pre>\n\n\n\n<h2>Jython Strings</h2>\n\n\n\n<p>A string is any sequence of characters enclosed in single (e.g. ‘hello’), double (e.g. “hello”) or triple (e.g. ‘“hello’” o “““hello”””) quotation marks. Triple quotes are especially useful if content of the string spans over multiple lines.</p>\n\n\n\n<p>The Escape sequence characters can be included verbatim in triple quoted string. The following examples show different ways to declare a string in Python.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>str = ’hello how are you?’\nstr = ”Hello how are you?”\nstr = \"\"\"this is a long string that is made up of several lines and non-printable\ncharacters such as TAB ( \\t ) and they will show up that way when displayed. NEWLINEs\nwithin the string, whether explicitly given like this within the brackets &#91; \\n ], or just\na NEWLINE within the variable assignment will also show up.\n\"\"\"</code></pre>\n\n\n\n<p>The third string when printed, will give the following output.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this is a long string that is made up of\nseveral lines and non-printable characters such as\nTAB ( \t ) and they will show up that way when displayed.\nNEWLINEs within the string, whether explicitly given like\nthis within the brackets &#91;\n], or just a NEWLINE within\nthe variable assignment will also show up.</code></pre>\n\n\n\n<h2>Jython Lists</h2>\n\n\n\n<p>A List is a sequence data type. It is a collection of comma-separated items, not necessarily of the same type, stored in square brackets. Individual item from the List can be accessed using the zero based index.</p>\n\n\n\n<p>The following code block summarizes the usage of a List in Python.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>list1 = &#91;'physics', 'chemistry', 1997, 2000];\nlist2 = &#91;1, 2, 3, 4, 5, 6, 7 ];\nprint \"list1&#91;0]: \", list1&#91;0]\nprint \"list2&#91;1:5]: \", list2&#91;1:5]</code></pre>\n\n\n\n<p>The following table describes some of the most common Jython Expressions related to Jython Lists.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Jython Expression</th><th>Description</th></tr><tr><td>len(List)</td><td>Length</td></tr><tr><td>List[2]=10</td><td>Updation</td></tr><tr><td>Del List[1]</td><td>Deletion</td></tr><tr><td>List.append(20)</td><td>Append</td></tr><tr><td>List.insert(1,15)</td><td>Insertion</td></tr><tr><td>List.sort()</td><td>Sorting</td></tr></tbody></table></figure>\n\n\n\n<h2>Jython Tuples</h2>\n\n\n\n<p>A tuple is an immutable collection of comma-separated data items stored in parentheses. It is not possible to delete or modify an element in tuple, nor is it possible to add an element to the tuple collection. The following code block shows Tuple operations.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tup1 = ('physics','chemistry‘,1997,2000);\ntup2 = (1, 2, 3, 4, 5, 6, 7 );\nprint \"tup1&#91;0]: \", tup1&#91;0]\nprint \"tup2&#91;1:5]: \", tup2&#91;1:5]</code></pre>\n\n\n\n<h2>Jython Dictionary</h2>\n\n\n\n<p>The Jython Dictionary is similar to Map class in Java Collection framework. It is a collection of key-value pairs. Pairs separated by comma are enclosed in curly brackets. A Dictionary object does not follow zero based index to retrieve element inside it as they are stored by hashing technique.</p>\n\n\n\n<p>The same key cannot appear more than once in a dictionary object. However, more than one key can have same associated values. Different functions available with Dictionary object are explained below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>dict = {'011':'New Delhi','022':'Mumbai','033':'Kolkata'}\nprint \"dict&#91;‘011’]: \",dict&#91;'011']\nprint \"dict&#91;'Age']: \", dict&#91;'Age']</code></pre>\n\n\n\n<p>The following table describes some of the most common Jython Expressions related to Dictionary.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Jython Expression</th><th>Description</th></tr><tr><td>dict.get(‘011’)</td><td>Search</td></tr><tr><td>len(dict)</td><td>Length</td></tr><tr><td>dict[‘044’] = ‘Chennai’</td><td>Append</td></tr><tr><td>del dict[‘022’]</td><td>Delete</td></tr><tr><td>dict.keys()</td><td>list of keys</td></tr><tr><td>dict.values()</td><td>List of values</td></tr><tr><td>dict.clear()</td><td>Removes all elements</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Variables are named locations in computer’s memory. Each variable can hold one piece of data in it. Unlike Java, Python is a dynamically typed language. Hence while using Jython also; prior declaration of data type of variable is not done. Rather than the type of variable deciding which data can be stored in it, the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/258"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=258"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/258/revisions"}],"predecessor-version":[{"id":3017,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/258/revisions/3017"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=258"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=258"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=258"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":255,"date":"2020-07-02T10:21:48","date_gmt":"2020-07-02T10:21:48","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=255"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"using-java-collection","status":"publish","type":"post","link":"https://python3.foobrdigital.com/using-java-collection/","title":{"rendered":"Using Java Collection"},"content":{"rendered":"\n<p>In addition to Python’s built-in data types, Jython has the benefit of using Java collection classes by importing the&nbsp;<strong>java.util package</strong>. The following code describes the classes given below −</p>\n\n\n\n<ul><li>Java ArrayList object with add()</li><li>remove()</li><li>get() and set() methods of the ArrayList class.</li></ul>\n\n\n\n<p></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList as ArrayList\narr = ArrayList()\narr.add(10)\narr.add(20)\nprint \"ArrayList:\",arr\narr.remove(10) #remove 10 from arraylist\narr.add(0,5) #add 5 at 0th index\nprint \"ArrayList:\",arr\nprint \"element at index 1:\",arr.get(1) #retrieve item at index 1\narr.set(0,100) #set item at 0th index to 100\nprint \"ArrayList:\",arr</code></pre>\n\n\n\n<p>The above Jython script produces the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jython27\\bin>jython arrlist.py\nArrayList: &#91;10, 20]\nArrayList: &#91;5, 20]\nelement at index 1: 20\nArrayList: &#91;100, 20]</code></pre>\n\n\n\n<h2>Jarray Class</h2>\n\n\n\n<p>Jython also implements the&nbsp;<strong>Jarray Object</strong>, which allows construction of a Java array in Python. In order to work with a jarray, simply define a sequence type in Jython and pass it to the jarrayobject along with the type of object contained within the sequence. All values within a jarray must be of the same type.</p>\n\n\n\n<p>The following table shows the character typecodes used with a jarray.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Character Typecode</th><th>Corresponding Java Type</th></tr><tr><td>Z</td><td>Boolean</td></tr><tr><td>C</td><td>char</td></tr><tr><td>B</td><td>byte</td></tr><tr><td>H</td><td>short</td></tr><tr><td>I</td><td>int</td></tr><tr><td>L</td><td>long</td></tr><tr><td>F</td><td>float</td></tr><tr><td>D</td><td>double</td></tr></tbody></table></figure>\n\n\n\n<p>The following example shows construction of jarray.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>my_seq = (1,2,3,4,5)\nfrom jarray import array\narr1 = array(my_seq,'i')\nprint arr1\nmyStr = \"Hello Jython\"\narr2 = array(myStr,'c')\nprint arr2</code></pre>\n\n\n\n<p>Here <strong>my_seq</strong> is defined as a tuple of integers. It is converted to Jarray arr1. The second example shows that Jarray arr2 is constructed from <strong>mySttr string</strong> sequence. The output of the above script <strong>jarray.py</strong> is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>array('i', &#91;1, 2, 3, 4, 5])\narray('c', 'Hello Jython')</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In addition to Python’s built-in data types, Jython has the benefit of using Java collection classes by importing the&nbsp;java.util package. The following code describes the classes given below − Java ArrayList object with add() remove() get() and set() methods of the ArrayList class. The above Jython script produces the following output − Jarray Class Jython [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/255"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=255"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/255/revisions"}],"predecessor-version":[{"id":3015,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/255/revisions/3015"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=255"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=255"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=255"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":253,"date":"2020-07-02T10:29:53","date_gmt":"2020-07-02T10:29:53","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=253"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"decision-control","status":"publish","type":"post","link":"https://python3.foobrdigital.com/decision-control/","title":{"rendered":"Decision Control"},"content":{"rendered":"\n<p>Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed, if the condition is determined to be true, and optionally, other statements to be executed, if the condition is determined to be false.</p>\n\n\n\n<p>The following illustration shows the general form of a typical decision making structure found in most of the programming languages −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/decision_control.jpg\" alt=\"Decision Control\"/></figure>\n\n\n\n<p>Jython does not use curly brackets to indicate blocks of statements to be executed when the condition is true or false (as is the case in Java). Instead, uniform indent (white space from left margin) is used to form block of statements. Such a uniformly indented block makes the conditional code to be executed when a condition given in ‘if’ statement is true.</p>\n\n\n\n<p>A similar block may be present after an optional ‘else’ statement. Jython also provides the <strong>elif statement</strong> using which successive conditions can be tested. Here, the <strong>else clause</strong> will appear last and will be executed only when all the preceding conditions fail. The general syntax of using <strong>if..elif..else</strong> is as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if expression1:\n   statement(s)\nelif expression2:\n   statement(s)\nelif expression3:\n   statement(s)\nelse:\n   statement(s)</code></pre>\n\n\n\n<p>In the following example, if <strong>..elif ..else</strong> construct is used to calculate discount on different values of amount input by user.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>discount = 0\namount = input(\"enter Amount\")\nif amount>1000:\n   discount = amount*0.10\nelif amount>500:\n   discount = amount*0.05\nelse:\n   discount = 0\nprint 'Discount = ',discount\nprint 'Net amount = ',amount-discount</code></pre>\n\n\n\n<p>The output of above code will be as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>enter Amount1500\nDiscount = 150.0\nNet amount = 1350.0\nenter Amount600\nDiscount = 30.0\nNet amount = 570.0\nenter Amount200\nDiscount = 0\nNet amount = 200</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed, if the condition is determined to be true, and optionally, other statements to be executed, if the condition is determined to be false. The following illustration shows the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/253"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=253"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/253/revisions"}],"predecessor-version":[{"id":3001,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/253/revisions/3001"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=253"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=253"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=253"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":254,"date":"2020-07-02T10:32:48","date_gmt":"2020-07-02T10:32:48","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=254"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"loops-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/loops-2/","title":{"rendered":"Loops"},"content":{"rendered":"\n<p>In general, statements in a program are executed sequentially: The first statement in a function is executed first, followed by the second, and so on. There may be a situation when you need to execute a block of code several number of times. Statements that provide such repetition capability are called&nbsp;<strong>looping statements</strong>.</p>\n\n\n\n<p>In Jython, a loop can be formed by two statements, which are −</p>\n\n\n\n<ul><li>The&nbsp;<strong>while</strong>&nbsp;statement and</li><li>The&nbsp;<strong>for</strong>&nbsp;statement</li></ul>\n\n\n\n<h2>The WHILE Loop</h2>\n\n\n\n<p>A while loop statement in Jython is similar to that in Java. It repeatedly executes a block of statements as long as a given condition is true. The following flowchart describes the behavior of a&nbsp;<strong>while</strong>&nbsp;loop.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/while_loop.jpg\" alt=\"While Loop\"/></figure>\n\n\n\n<p>The general syntax of the while statement is given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>while expression:\n   statement(s)</code></pre>\n\n\n\n<p>The following Jython code uses the while loop to repeatedly increment and print value of a variable until it is less than zero.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>count = 0\nwhile count&lt;10:\n   count = count+1\n   print \"count = \",count\nprint \"Good Bye!\"</code></pre>\n\n\n\n<p><strong>Output</strong> − The output would be as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>count =  1\ncount =  2\ncount =  3\ncount =  4\ncount =  5\ncount =  6\ncount =  7\ncount =  8\ncount =  9\ncount =  10\nGood Bye!</code></pre>\n\n\n\n<h2>The FOR Loop</h2>\n\n\n\n<p>The FOR loop in Jython is not a counted loop as in Java. Instead, it has the ability to traverse elements in a sequence data type such as string, list or tuple. The general syntax of the FOR statement in Jython is as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for iterating_var in sequence:\n   statements(s)</code></pre>\n\n\n\n<p>We can display each character in a string, as well as each item in a List or Tuple by using the FOR statement as shown below </p>\n\n\n\n<pre class=\"wp-block-code\"><code>#each letter in string\nfor letter in 'Python':\n   print 'Current Letter :', letter</code></pre>\n\n\n\n<p><strong>Output</strong> − The output would be as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Current Letter : P\nCurrent Letter : y\nCurrent Letter : t\nCurrent Letter : h\nCurrent Letter : o\nCurrent Letter : n\n﻿</code></pre>\n\n\n\n<p>Let us consider another instance as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#each item in list\nlibs = &#91;‘PyQt’, 'WxPython',  'Tkinter']\nfor lib in libs:        # Second Example\n   print 'Current library :', lib</code></pre>\n\n\n\n<p><strong>Output</strong> − The output will be as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Current library : PyQt\nCurrent library : WxPython\nCurrent library : Tkinter</code></pre>\n\n\n\n<p>Here is another instance to consider.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#each item in tuple\nlibs = (‘PyQt’, 'WxPython',  'Tkinter')\nfor lib in libs:        # Second Example\n   print 'Current library :', lib</code></pre>\n\n\n\n<p><strong>Output</strong> − The output of the above program is as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Current library : PyQt\nCurrent library : WxPython\nCurrent library : Tkinter</code></pre>\n\n\n\n<p>In Jython, the <strong>for</strong> statement is also used to iterate over a list of numbers generated by range() function. The range() function takes following form −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>range&#91;(&#91;start],stop,&#91;step])\n</code></pre>\n\n\n\n<p>The start and step parameters are 0 and 1 by default. The last number generated is stop step. The FOR statement traverses the list formed by the <strong>range() function</strong>. For example </p>\n\n\n\n<pre class=\"wp-block-code\"><code>for num in range(5):\n   print num</code></pre>\n\n\n\n<p>It produces the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n1\n2\n3\n4</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In general, statements in a program are executed sequentially: The first statement in a function is executed first, followed by the second, and so on. There may be a situation when you need to execute a block of code several number of times. Statements that provide such repetition capability are called&nbsp;looping statements. In Jython, a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/254"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=254"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/254/revisions"}],"predecessor-version":[{"id":3009,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/254/revisions/3009"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=254"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=254"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=254"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":251,"date":"2020-07-02T10:34:02","date_gmt":"2020-07-02T10:34:02","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=251"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"functions-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/functions-2/","title":{"rendered":"Functions"},"content":{"rendered":"\n<p>A complex programming logic is broken into one or more independent and reusable blocks of statements called as functions. Python’s standard library contains large numbers of built-in functions. One can also define their own function using the&nbsp;<strong>def</strong>&nbsp;keyword. User defined name of the function is followed by a block of statements that forms its body, which ends with the return statement.</p>\n\n\n\n<p>Once defined, it can be called from any environment any number of times. Let us consider the following code to make the point clear.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#definition of function\ndefSayHello():\n   \"optional documentation string\"\n   print \"Hello World\"\n   return\n\n#calling the function\nSayHello()</code></pre>\n\n\n\n<p>A function can be designed to receive one or more parameters / arguments from the calling environment. While calling such a parameterized function, you need to provide the same number of parameters with similar data types used in the function definition, otherwise Jython interpreter throws a&nbsp;<strong>TypeError</strong>&nbsp;exception.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#defining function with two arguments\ndef area(l,b):\n   area = l*b\n   print \"area = \",area\n   return\n\n#calling function\nlength = 10\nbreadth = 20\n#with two arguments. This is OK\narea(length, breadth)\n#only one argument provided. This will throw TypeError\narea(length)</code></pre>\n\n\n\n<p>The <strong>output</strong> will be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>area = 200\nTraceback (most recent call last):\n   File \"area.py\", line 11, in &lt;module>\n   area(length)\nTypeError: area() takes exactly 2 arguments (1 given)</code></pre>\n\n\n\n<p>After performing the steps defined in it, the called function returns to the calling environment. It can return the data, if an expression is mentioned in front of the return keyword inside the definition of the function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#defining function\ndef area(l,b):\n   area = l*b\n   print \"area = \",area\n   return area\n\n#calling function\nlength = 10\nbreadth = 20\n#calling function and obtaining its reurned value\nresult = area(length, breadth)\nprint \"value returned by function : \", result</code></pre>\n\n\n\n<p>The following output is obtained if the above script is executed from the Jython prompt.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>area = 200\nvalue returned by function : 200</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>A complex programming logic is broken into one or more independent and reusable blocks of statements called as functions. Python’s standard library contains large numbers of built-in functions. One can also define their own function using the&nbsp;def&nbsp;keyword. User defined name of the function is followed by a block of statements that forms its body, which [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/251"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=251"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/251/revisions"}],"predecessor-version":[{"id":3004,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/251/revisions/3004"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=251"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=251"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=251"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":252,"date":"2020-07-02T10:36:07","date_gmt":"2020-07-02T10:36:07","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=252"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"modules","status":"publish","type":"post","link":"https://python3.foobrdigital.com/modules/","title":{"rendered":"Modules"},"content":{"rendered":"\n<p>A module is a Jython script in which one or more related functions, classes or variables are defined. This allows a logical organization of the Jython code. The Program elements defined in a module can be used in another Jython script by importing either the module or the specific element (function/class) from it.</p>\n\n\n\n<p>In the following code (hello.py) a function <strong>SayHello()</strong> is defined.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#definition of function\ndefSayHello(str):\n   print \"Hello \", str\n   return</code></pre>\n\n\n\n<p>To use the SayHello() function from another script, import the <strong>hello.py module</strong> in it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import hello\nhello.SayHello(\"Codemeals\")</code></pre>\n\n\n\n<p>However, this will import all functions defined in the module. In order to import specific function from module use following syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from modname import name1&#91;, name2&#91;,... nameN]\n</code></pre>\n\n\n\n<p>For example, to import only the SayHello() function, change the above script as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from hello import SayHello\nSayHello(\"Codemeals\")</code></pre>\n\n\n\n<p>There is no need to prefix the name of the module while calling the function.</p>\n","protected":false},"excerpt":{"rendered":"<p>A module is a Jython script in which one or more related functions, classes or variables are defined. This allows a logical organization of the Jython code. The Program elements defined in a module can be used in another Jython script by importing either the module or the specific element (function/class) from it. In the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/252"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=252"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/252/revisions"}],"predecessor-version":[{"id":3011,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/252/revisions/3011"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=252"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=252"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=252"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":250,"date":"2020-07-02T10:37:40","date_gmt":"2020-07-02T10:37:40","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=250"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"package","status":"publish","type":"post","link":"https://python3.foobrdigital.com/package/","title":{"rendered":"Package"},"content":{"rendered":"\n<p>Any folder containing one or more Jython modules is recognized as a package. However, it must have a special file called&nbsp;<strong>__init__.py</strong>, which provides the index of functions to be used.</p>\n\n\n\n<p>Let us now understand, how to create and import package.</p>\n\n\n\n<p><strong>Step 1</strong> − Create a folder called <strong>package1</strong>, then create and save the following <strong>g</strong> modules in it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#fact.py\ndef factorial(n):\n   f = 1\n   for x in range(1,n+1):\n      f = f*x\n   return f</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>#sum.py\ndef add(x,y):\n   s = x+y\n   return s\n\n#mult.py\ndef multiply(x,y):\ns = x*y\nreturn s</code></pre>\n\n\n\n<p><strong>Step 2</strong> − In the package1 folder create and save the <strong>__init__.py</strong> file with the following content.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#__init__.py\nfrom fact import factorial\nfrom sum import add\nfrom mult import multiply</code></pre>\n\n\n\n<p><strong>Step 3</strong> − Create the following Jython script outside the package1 folder as <strong>test.py</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code># Import your Package.\nimport package1\n\nf = package1.factorial(5)\nprint \"factorial = \",f\ns = package1.add(10,20)\nprint \"addition = \",s\nm = package1.multiply(10,20)\nprint \"multiplication = \",m</code></pre>\n\n\n\n<p><strong>Step 4</strong> − Execute test.py from Jython prompt. The following output will be obtained.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>factorial = 120\naddition = 30\nmultiplication = 200</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Any folder containing one or more Jython modules is recognized as a package. However, it must have a special file called&nbsp;__init__.py, which provides the index of functions to be used. Let us now understand, how to create and import package. Step 1 − Create a folder called package1, then create and save the following g modules in it. Step [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/250"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=250"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/250/revisions"}],"predecessor-version":[{"id":3014,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/250/revisions/3014"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=250"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=250"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=250"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":249,"date":"2020-07-02T10:40:53","date_gmt":"2020-07-02T10:40:53","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=249"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"java-application","status":"publish","type":"post","link":"https://python3.foobrdigital.com/java-application/","title":{"rendered":"Java Application"},"content":{"rendered":"\n<p>Download <strong>jython-standalone-2.7.0.jar</strong> &#8211; For embedding Jython in Java applications from their official downloads page: http://www.jython.org/downloads.html and include this jar file in Java CLASSPATH environment variable.</p>\n\n\n\n<p>This library contains the&nbsp;<strong>PythonInterpreter</strong>&nbsp;class. Using the object of this class, any Python script can be executed using the&nbsp;<strong>execfile()</strong>&nbsp;method. The PythonInterpreter enables you to make use of&nbsp;<strong>PyObjects</strong>&nbsp;directly. All objects known to the Jython runtime system are represented by an instance of the class PyObject or one of its subclasses.</p>\n\n\n\n<p>The PythonInterpreter class has some regularly used methods, which are explained in the table given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method &amp; Description</th></tr><tr><td>1</td><td><strong>setIn(PyObject)</strong>Set the Python object to use for the standard input stream</td></tr><tr><td>2</td><td><strong>setIn(java.io.Reader)</strong>Set a java.io.Reader to use for the standard input stream</td></tr><tr><td>3</td><td><strong>setIn(java.io.InputStream)</strong>Set a java.io.InputStream to use for the standard input stream</td></tr><tr><td>4</td><td><strong>setOut(PyObject)</strong>Set the Python object to use for the standard output stream</td></tr><tr><td>5</td><td><strong>setOut(java.io.Writer)</strong>Set the java.io.Writer to use for the standard output stream</td></tr><tr><td>6</td><td><strong>setOut(java,io.OutputStream)</strong>Set the java.io.OutputStream to use for the standard output stream</td></tr><tr><td>7</td><td><strong>setErr(PyObject)</strong>Set a Python error object to use for the standard error stream</td></tr><tr><td>8</td><td><strong>setErr(java.io.Writer</strong>Set a java.io.Writer to use for the standard error stream</td></tr><tr><td>9</td><td><strong>setErr(java.io.OutputStream)</strong>Set a java.io.OutputStream to use for the standard error stream</td></tr><tr><td>10</td><td><strong>eval(String)</strong>Evaluate a string as Python source and return the result</td></tr><tr><td>11</td><td><strong>eval(PyObject)</strong>Evaluate a Python code object and return the result</td></tr><tr><td>12</td><td><strong>exec(String)</strong>Execute a Python source string in the local namespace</td></tr><tr><td>13</td><td><strong>exec(PyObject)</strong>Execute a Python code object in the local namespace</td></tr><tr><td>14</td><td><strong>execfile(String filename)</strong>Execute a file of Python source in the local namespace</td></tr><tr><td>15</td><td><strong>execfile(java.io.InputStream)</strong>Execute an input stream of Python source in the local namespace</td></tr><tr><td>16</td><td><strong>compile(String)</strong>Compile a Python source string as an expression or module</td></tr><tr><td>17</td><td><strong>compile(script, filename)</strong>Compile a script of Python source as an expression or module</td></tr><tr><td>18</td><td><strong>set(String name, Object value)</strong>Set a variable of Object type in the local namespace</td></tr><tr><td>19</td><td><strong>set(String name, PyObject value)</strong>Set a variable of PyObject type in the local namespace</td></tr><tr><td>20</td><td><strong>get(String)</strong>Get the value of a variable in the local namespace</td></tr><tr><td>21</td><td><strong>get(String name, Classjavaclass</strong>Get the value of a variable in the local namespace. The value will be returned as an instance of the given Java class.</td></tr></tbody></table></figure>\n\n\n\n<p>The following code block is a Java program having an embedded Jython script <strong>“hello.py”.usingexecfile()</strong> method of the PythonInterpreter object. It also shows how a Python variable can be set or read using set() and get() methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.python.util.PythonInterpreter;\nimport org.python.core.*;\n\npublic class SimpleEmbedded {\n   public static void main(String &#91;]args) throws PyException {\n      PythonInterpreter interp = new PythonInterpreter();\n      System.out.println(\"Hello, world from Java\");\n      interp.execfile(\"hello.py\");\n      interp.set(\"a\", new PyInteger(42));\n      interp.exec(\"print a\");\n      interp.exec(\"x = 2+2\");\n      PyObject x = interp.get(\"x\");\n      System.out.println(\"x: \"+x);\n      System.out.println(\"Goodbye \");\n   }\n}</code></pre>\n\n\n\n<p>Compile and run the above Java program to obtain the following output.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello, world from Java\nhello world from Python\n42\nx: 4\nGoodbye</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Download jython-standalone-2.7.0.jar &#8211; For embedding Jython in Java applications from their official downloads page: http://www.jython.org/downloads.html and include this jar file in Java CLASSPATH environment variable. This library contains the&nbsp;PythonInterpreter&nbsp;class. Using the object of this class, any Python script can be executed using the&nbsp;execfile()&nbsp;method. The PythonInterpreter enables you to make use of&nbsp;PyObjects&nbsp;directly. All objects known to the Jython runtime system [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/249"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=249"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/249/revisions"}],"predecessor-version":[{"id":3006,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/249/revisions/3006"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=249"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=249"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=249"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":248,"date":"2020-07-02T10:41:21","date_gmt":"2020-07-02T10:41:21","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=248"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"eclipse-plugin","status":"publish","type":"post","link":"https://python3.foobrdigital.com/eclipse-plugin/","title":{"rendered":"Eclipse Plugin"},"content":{"rendered":"\n<p>PyDev is an open source plugin for Eclipse IDE to enable development of projects in Python, Jython as well as IronPython. It is hosted at https://pydev.org. A step-by-step procedure to install PyDev plugin in Eclipse IDE is given below.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open Eclipse IDE and choose the&nbsp;<strong>Install New Software</strong>&nbsp;option from the Help menu.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/install_new_software.jpg\" alt=\"Install New Software\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Enter&nbsp;<strong>http://pydev.org/updates</strong>&nbsp;in the textbox in front of work with label and click add. Choose all available entries in the list and click on Next. The Wizard will take a few minutes to complete the installation and it will prompt the IDE to be restarted.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/available_software.jpg\" alt=\"Available Software\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Now choose the preferences option from the Window menu. The Preferences dialog will open as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/preferences.jpg\" alt=\"Preferences\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Expand the Interpreters node and select Jython Interpreter in the left pane. On the right pane, click on new to give path to the&nbsp;<strong>jython.jar file</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jython_jar.jpg\" alt=\"Jython Jar\"/></figure>\n\n\n\n<p>We are now ready to start a Jython project using Eclipse.</p>\n","protected":false},"excerpt":{"rendered":"<p>PyDev is an open source plugin for Eclipse IDE to enable development of projects in Python, Jython as well as IronPython. It is hosted at https://pydev.org. A step-by-step procedure to install PyDev plugin in Eclipse IDE is given below. Step 1&nbsp;− Open Eclipse IDE and choose the&nbsp;Install New Software&nbsp;option from the Help menu. Step 2&nbsp;− Enter&nbsp;http://pydev.org/updates&nbsp;in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/248"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=248"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/248/revisions"}],"predecessor-version":[{"id":3002,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/248/revisions/3002"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=248"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=248"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=248"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":246,"date":"2020-07-02T10:46:49","date_gmt":"2020-07-02T10:46:49","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=246"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"a-project-in-eclipse","status":"publish","type":"post","link":"https://python3.foobrdigital.com/a-project-in-eclipse/","title":{"rendered":"A Project in Eclipse"},"content":{"rendered":"\n<p>To make a project in eclipse, we should follow the steps given below.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Choose File ? New ? Project. Choose&nbsp;<strong>PyDev</strong>&nbsp;from the filter dialog. Give project name, project type and click on Finish.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/pydev.jpg\" alt=\"PyDev\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Hello project will now appear in the project explorer on the left. Right click to add hello.py in it.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/hellopy.jpg\" alt=\"Hellopy\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− An empty hello.py will appear in the editor. Write the Jython code and save.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/empty_hellopy.jpg\" alt=\"Empty Hellopy\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Click on the Run button on the menu bar. The output will appear in the console window as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/run_button.jpg\" alt=\"Run Button\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>To make a project in eclipse, we should follow the steps given below. Step 1&nbsp;− Choose File ? New ? Project. Choose&nbsp;PyDev&nbsp;from the filter dialog. Give project name, project type and click on Finish. Step 2&nbsp;− Hello project will now appear in the project explorer on the left. Right click to add hello.py in it. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/246"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=246"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/246/revisions"}],"predecessor-version":[{"id":3000,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/246/revisions/3000"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=246"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=246"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=246"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":247,"date":"2020-07-02T10:47:13","date_gmt":"2020-07-02T10:47:13","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=247"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"netbeans-plugin","status":"publish","type":"post","link":"https://python3.foobrdigital.com/netbeans-plugin/","title":{"rendered":"NetBeans Plugin"},"content":{"rendered":"\n<p>Python and Jython support for NetBeans is available via the&nbsp;<strong>nbPython plugin</strong>. Download the plugin from following URL &#8211;&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http://plugins.netbeans.org/plugin/56795\">http://plugins.netbeans.org/plugin/56795</a>. Unzip the downloaded archive in some folder. For example &#8211;&nbsp;<strong>d:\\nbplugin</strong>. To install the NetBeans Plugin, let us follow the steps given below.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Start the&nbsp;<strong>Netbeans IDE</strong>&nbsp;and then go to Tools/Plugin to open the Plugin Manager. Choose ‘Downloaded’ tab and browse to the folder in which the downloaded file has been unzipped. The NetBeans window will appear as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/netbeans_ide.jpg\" alt=\"Netbeans IDE\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− The next step is to select all the&nbsp;<strong>.nbm</strong>&nbsp;files and click open.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/nbm.jpg\" alt=\"nbm\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Click on the Install button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/install_button.jpg\" alt=\"Install Button\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Accept the following license agreement to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/agreement.jpg\" alt=\"Agreement\"/></figure>\n\n\n\n<p>Ignore the warning about untrusted source of plugins and restart the IDE to proceed.</p>\n\n\n\n<h2>Jython Project in NetBeans</h2>\n\n\n\n<p>Once restarted, start a new project by choosing File/New. Python category will now be available in the categories list. Choose it to proceed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/category.jpg\" alt=\"Category\"/></figure>\n\n\n\n<p>If the system has Python installed, its version/versions will be automatically detected and shown in the Python platform dropdown list. However, Jython will not be listed. Click on the Manage button to add it.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/python.jpg\" alt=\"Python\"/></figure>\n\n\n\n<p>Click on the ‘New’ button to add a platform name and path to Jython executable.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jython_executable.jpg\" alt=\"Jython Executable\"/></figure>\n\n\n\n<p>Jython will now be available in the platform list. Select from the dropdown list as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/dropdown_list.jpg\" alt=\"Dropdown List\"/></figure>\n\n\n\n<p>We can now fill in the project name, location and main file in the next window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/project_name.jpg\" alt=\"Project Name\"/></figure>\n\n\n\n<p>The project structure will appear in the projects window of the NetBeans IDE and a template Python code in the editor window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/projects_window.jpg\" alt=\"Projects Window\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/template_python_code.jpg\" alt=\"Template Python Code\"/></figure>\n\n\n\n<p>Build and execute the Jython project to obtain the following result in the output window of the NetBeans IDE.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/output_window.jpg\" alt=\"Output Window\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Python and Jython support for NetBeans is available via the&nbsp;nbPython plugin. Download the plugin from following URL &#8211;&nbsp;http://plugins.netbeans.org/plugin/56795. Unzip the downloaded archive in some folder. For example &#8211;&nbsp;d:\\nbplugin. To install the NetBeans Plugin, let us follow the steps given below. Step 1&nbsp;− Start the&nbsp;Netbeans IDE&nbsp;and then go to Tools/Plugin to open the Plugin Manager. Choose [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/247"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=247"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/247/revisions"}],"predecessor-version":[{"id":3012,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/247/revisions/3012"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=247"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=247"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=247"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":244,"date":"2020-07-02T10:51:07","date_gmt":"2020-07-02T10:51:07","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=244"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"jdbc","status":"publish","type":"post","link":"https://python3.foobrdigital.com/jdbc/","title":{"rendered":"JDBC"},"content":{"rendered":"\n<p>Jython uses the&nbsp;<strong>zxJDBC package</strong>&nbsp;that provides an easy-to-use Python wrapper around JDBC. zxJDBC bridges two standards:&nbsp;<strong>JDBC</strong>&nbsp;is the standard platform for database access in Java, and&nbsp;<strong>DBI</strong>&nbsp;is the standard database API for Python apps.</p>\n\n\n\n<p>ZxJDBC provides a DBI 2.0 standard compliant interface to JDBC. Over 200 drivers are available for JDBC and they all work with zxJDBC. High performance drivers are available for all major relational databases, including −</p>\n\n\n\n<ul><li>DB2</li><li>Derby</li><li>MySQL</li><li>Oracle</li><li>PostgreSQL</li><li>SQLite</li><li>SQL Server and</li><li>Sybase.</li></ul>\n\n\n\n<p>The ZxJDBC package can be downloaded from https://sourceforge.net/projects/zxjdbc/ or http://www.ziclix.com/zxjdbc/. The downloaded archive contains the ZxJDBC.jar, which should be added to the CLASSPATH environment variable.</p>\n\n\n\n<p>We intend to establish database connectivity with MySQL database. For this purpose, the JDBC driver for MySQL is required. Download the <strong>MySQL J connector</strong> from the following link &#8211; https://dev.mysql.com/downloads/connector/j/ and include the mysql connector java-5.1.42-bin.jar in the CLASSPATH.</p>\n\n\n\n<p>Login to the MySQL server and create a student table in the test database with the following structure −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Field</th><th>Type</th><th>Width</th></tr><tr><td>Name</td><td>Varchar</td><td>10</td></tr><tr><td>Age</td><td>Int</td><td>3</td></tr><tr><td>Marks</td><td>Int</td><td>3</td></tr></tbody></table></figure>\n\n\n\n<p>Add a few records in it.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Name</th><th>Age</th><th>Marks</th></tr><tr><td>Ravi</td><td>21</td><td>78</td></tr><tr><td>Ashok</td><td>20</td><td>65</td></tr><tr><td>Anil</td><td>22</td><td>71</td></tr></tbody></table></figure>\n\n\n\n<p>Create the following Jython script as <strong>dbconnect.py</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>url = \"jdbc:mysql://localhost/test\"\nuser = \"root\"\npassword = \"password\"\ndriver = \"com.mysql.jdbc.Driver\"\nmysqlConn = zxJDBC.connect(url, user, password, driver)\nmysqlConn = con.cursor()\nmysqlConn.execute(“select * from student)\nfor a in mysql.fetchall():\n   print a</code></pre>\n\n\n\n<p>Execute the above script from the Jython prompt. Records in the student table will be listed as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>(“Saqib”, 21, 78)\n(“Mubeen”, 20, 65)\n(“Shahbaz”,22,71)</code></pre>\n\n\n\n<p>This explains the procedure of establishing JDBC in Jython.</p>\n","protected":false},"excerpt":{"rendered":"<p>Jython uses the&nbsp;zxJDBC package&nbsp;that provides an easy-to-use Python wrapper around JDBC. zxJDBC bridges two standards:&nbsp;JDBC&nbsp;is the standard platform for database access in Java, and&nbsp;DBI&nbsp;is the standard database API for Python apps. ZxJDBC provides a DBI 2.0 standard compliant interface to JDBC. Over 200 drivers are available for JDBC and they all work with zxJDBC. High [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/244"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=244"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/244/revisions"}],"predecessor-version":[{"id":3007,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/244/revisions/3007"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=244"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=244"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=244"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":242,"date":"2020-07-02T10:52:20","date_gmt":"2020-07-02T10:52:20","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=242"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"using-the-swing","status":"publish","type":"post","link":"https://python3.foobrdigital.com/using-the-swing/","title":{"rendered":"Using the Swing"},"content":{"rendered":"\n<p>One of the major features of Jython is its ability to use the Swing GUI library in JDK. The Standard Python distribution (often called as CPython) has the&nbsp;<strong>Tkinter GUI library</strong>&nbsp;shipped with it. Other GUI libraries like&nbsp;<strong>PyQt</strong>&nbsp;and&nbsp;<strong>WxPython</strong>&nbsp;are also available for use with it, but the swing library offers a platform independent GUI toolkit.</p>\n\n\n\n<p>Using the swing library in Jython is much easier compared to using it in Java. In Java the anonymous classes have to be used to create event binding. In Jython, we can simply pass a function for the same purpose.</p>\n\n\n\n<p>The basic top-level window is created by declaring an object of the <strong>JFrame class</strong> and set its visible property to true. For that, the Jframe class needs to be imported from the swing package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame</code></pre>\n\n\n\n<p>The JFrame class has multiple constructors with varying number of arguments. We shall use the one, which takes a string as argument and sets it as the title.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame = JFrame(“Hello”)</code></pre>\n\n\n\n<p>Set the frame’s size and location properties before setting its visible property to true. Store the following code as <strong>frame.py</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame\n\nframe = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(300,200)\nframe.setVisible(True)</code></pre>\n\n\n\n<p>Run the above script from the command prompt. It will display the following output showing a window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/window.jpg\" alt=\"Window\"/></figure>\n\n\n\n<p>The swing GUI library is provided in the form of&nbsp;<strong>javax.swing</strong>&nbsp;package in Java. Its main container classes,&nbsp;<strong>JFrame</strong>&nbsp;and&nbsp;<strong>JDialog</strong>&nbsp;are respectively derived from Frame and Dialog classes, which are in the AWT library. Other GUI controls like&nbsp;<strong>JLabel, JButton, JTextField,</strong>etc., are derived from the JComponent class.</p>\n\n\n\n<p>The following illustration shows the Swing Package Class hierarchy.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/swing_package_class_hierarchy.jpg\" alt=\"Swing Package Class Hierarchy\"/></figure>\n\n\n\n<p>The following table summarizes different GUI control classes in a swing library −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Class &amp; Description</th></tr><tr><td>1</td><td><strong>JLabel</strong>A JLabel object is a component for placing text in a container.</td></tr><tr><td>2</td><td><strong>JButton</strong>This class creates a labeled button.</td></tr><tr><td>3</td><td><strong>JColorChooser</strong>A JColorChooser provides a pane of controls designed to allow a user to manipulate and select a color.</td></tr><tr><td>4</td><td><strong>JCheckBox</strong>A JCheckBox is a graphical component that can be in either an&nbsp;<strong>on</strong>&nbsp;(true) or&nbsp;<strong>off</strong>(false) state.</td></tr><tr><td>5</td><td><strong>JRadioButton</strong>The JRadioButton class is a graphical component that can be either in an on (true) or off (false) state. in a group.</td></tr><tr><td>6</td><td><strong>JList</strong>A JList component presents the user with a scrolling list of text items.</td></tr><tr><td>7</td><td><strong>JComboBox</strong>A JComboBox component presents the user with drop down list of items</td></tr><tr><td>8</td><td><strong>JTextField</strong>A JTextField object is a text component that allows for the editing of a single line of text.</td></tr><tr><td>9</td><td><strong>JPasswordField</strong>A JPasswordField object is a text component specialized for password entry.</td></tr><tr><td>10</td><td><strong>JTextArea</strong>A JTextArea object is a text component that allows editing of a multiple lines of text.</td></tr><tr><td>11</td><td><strong>ImageIcon</strong>A ImageIcon control is an implementation of the Icon interface that paints Icons from Images</td></tr><tr><td>12</td><td><strong>JScrollbar</strong>A Scrollbar control represents a scroll bar component in order to enable the user to select from range of values.</td></tr><tr><td>13</td><td><strong>JOptionPane</strong>JOptionPane provides set of standard dialog boxes that prompt users for a value or informs them of something.</td></tr><tr><td>14</td><td><strong>JFileChooser</strong>A JFileChooser control represents a dialog window from which the user can select a file.</td></tr><tr><td>15</td><td><strong>JProgressBar</strong>As the task progresses towards completion, the progress bar displays the task&#8217;s percentage of completion.</td></tr><tr><td>16</td><td><strong>JSlider</strong>A JSlider lets the user graphically select a value by sliding a knob within a bounded interval.</td></tr><tr><td>17</td><td><strong>JSpinner</strong>A JSpinner is a single line input field that lets the user select a number or an object value from an ordered sequence.</td></tr></tbody></table></figure>\n\n\n\n<p>We would be using some of these controls in subsequent examples.</p>\n","protected":false},"excerpt":{"rendered":"<p>One of the major features of Jython is its ability to use the Swing GUI library in JDK. The Standard Python distribution (often called as CPython) has the&nbsp;Tkinter GUI library&nbsp;shipped with it. Other GUI libraries like&nbsp;PyQt&nbsp;and&nbsp;WxPython&nbsp;are also available for use with it, but the swing library offers a platform independent GUI toolkit. Using the swing [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/242"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=242"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/242/revisions"}],"predecessor-version":[{"id":3016,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/242/revisions/3016"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=242"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=242"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=242"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":245,"date":"2020-07-02T11:32:00","date_gmt":"2020-07-02T11:32:00","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=245"},"modified":"2020-12-16T16:56:43","modified_gmt":"2020-12-16T16:56:43","slug":"layout-management","status":"publish","type":"post","link":"https://python3.foobrdigital.com/layout-management/","title":{"rendered":"Layout Management"},"content":{"rendered":"\n<p>Layout managers in Java are classes those, which manage the placement of controls in the container objects like&nbsp;<strong>Frame, Dialog</strong>&nbsp;or&nbsp;<strong>Panel</strong>. Layout managers maintain the relative positioning of controls in a frame, even if the resolution changes or the frame itself is resized.</p>\n\n\n\n<p>These classes implement the&nbsp;<strong>Layout interface</strong>. The following Layout managers are defined in the&nbsp;<strong>AWT library</strong>&nbsp;−</p>\n\n\n\n<ul><li>BorderLayout</li><li>FlowLayout</li><li>GridLayout</li><li>CardLayout</li><li>GridBagLayout</li></ul>\n\n\n\n<p>The following Layout Managers are defined in the&nbsp;<strong>Swing library</strong>&nbsp;−</p>\n\n\n\n<ul><li>BoxLayout</li><li>GroupLayout</li><li>ScrollPaneLayout</li><li>SpringLayout</li></ul>\n\n\n\n<p>We shall use AWT layout managers as well as swing layout managers in the following examples.</p>\n\n\n\n<ul><li>Absolute Layout</li><li>Flow Layout</li><li>Grid Layout</li><li>Border Layout</li><li>Box Layout</li><li>Group Layout</li></ul>\n\n\n\n<p>Let us now discuss each of these in detail.</p>\n\n\n\n<h2>Absolute Layout</h2>\n\n\n\n<p>Before we explore all the above Layout managers, we must look at absolute positioning of the controls in a container. We have to set the layout method of the frame object to ‘None’.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame.setLayout(None)</code></pre>\n\n\n\n<p>Then place the control by calling the&nbsp;<strong>setBounds()</strong>&nbsp;method. It takes four arguments &#8211; x position, y position, width and height.</p>\n\n\n\n<p>For example &#8211; To place a button object at the absolute position and with the absolute size.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>btn = JButton(\"Add\")\nbtn.setBounds(60,80,60,20)</code></pre>\n\n\n\n<p>Similarly, all controls can be placed by properly allocating position and size. This layout is relatively easy to use, but fails to retain its appearance when the window either is resized, or if the program is executed when screen resolution changes.</p>\n\n\n\n<p>In the following Jython script, three Jlabel objects are used to display text “phy”, “maths” and “Total” respectively. In front of these three &#8211; JTextField objects are placed. A Button object is placed above the “Total” label.</p>\n\n\n\n<p>First of all the JFrame window is created with a layout set to none.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(300,200)\nframe.setLayout(None)</code></pre>\n\n\n\n<p>Then different controls are added according to their absolute position and size. The complete code is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JLabel, JButton, JTextField\n\nframe = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(300,200)\nframe.setLayout(None)\n\nlbl1 = JLabel(\"Phy\")\nlbl1.setBounds(60,20,40,20)\ntxt1 = JTextField(10)\ntxt1.setBounds(120,20,60,20)\nlbl2 = JLabel(\"Maths\")\nlbl2.setBounds(60,50,40,20)\ntxt2 = JTextField(10)\ntxt2.setBounds(120, 50, 60,20)\nbtn = JButton(\"Add\")\nbtn.setBounds(60,80,60,20)\nlbl3 = JLabel(\"Total\")\nlbl3.setBounds(60,110,40,20)\ntxt3 = JTextField(10)\ntxt3.setBounds(120, 110, 60,20)\n\nframe.add(lbl1)\nframe.add(txt1)\nframe.add(lbl2)\nframe.add(txt2)\nframe.add(btn)\nframe.add(lbl3)\nframe.add(txt3)\nframe.setVisible(True)</code></pre>\n\n\n\n<p>The output for the above code is as follows.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/add.jpg\" alt=\"Add\"/></figure>\n\n\n\n<h2>Jython FlowLayout</h2>\n\n\n\n<p>The FlowLayout is the default layout manager for container classes. It arranges control from left to right and then from top to bottom direction.</p>\n\n\n\n<p>In following example, a Jlabel object, a JTextField object and a JButton object are to be displayed in a JFrame using FlowLayout manager. To start with, let us import the required classes from the <strong>javax.swing</strong> package and the <strong>java.awt</strong> package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JLabel, JButton, JTextField\nfrom java.awt import FlowLayout</code></pre>\n\n\n\n<p>Then create a JFrame object and set its Location as well as the size properties.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(200,200)\nSet the layout manager for the frame as FlowLayout.\nframe.setLayout(FlowLayout())</code></pre>\n\n\n\n<p>Now declare objects for JLabel, JTextfield and JButton classes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>label = JLabel(\"Welcome to Jython Swing\")\ntxt = JTextField(30)\nbtn = JButton(\"ok\")</code></pre>\n\n\n\n<p>Finally add these controls in the frame by calling the <strong>add()</strong> method of the JFrame class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame.add(label)\nframe.add(txt)\nframe.add(btn)</code></pre>\n\n\n\n<p>To display the frame, set its visible property to true. The complete Jython script and its output is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JLabel, JButton, JTextField\nfrom java.awt import FlowLayout\n\nframe = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(200,200)\n\nframe.setLayout(FlowLayout())\n\nlabel = JLabel(\"Welcome to Jython Swing\")\ntxt = JTextField(30)\nbtn = JButton(\"ok\")\n\nframe.add(label)\nframe.add(txt)\nframe.add(btn)\nframe.setVisible(True)</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/welcome_to_jython_swing.jpg\" alt=\"Welcome to Jython Swing\"/></figure>\n\n\n\n<h2>Jython GridLayout</h2>\n\n\n\n<p>The Gridlayout manager allows placement of controls in a rectangular grid. One control is placed in each cell of the grid.</p>\n\n\n\n<p>In following example, the GridLayout is applied to a JFrame object dividing it in to 4 rows and 4 columns. A JButton object is to be placed in each cell of the grid.</p>\n\n\n\n<p>Let us first import the required libraries −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JButton\nfrom java.awt import GridLayout</code></pre>\n\n\n\n<p>Then create the JFrame container −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(400,400)</code></pre>\n\n\n\n<p>Now, apply GridLayout by specifying its dimensions as 4 by 4.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame.setLayout(GridLayout(4,4))</code></pre>\n\n\n\n<p>We should now use two FOR loops, each going from 1 to 4, so sixteen JButton objects are placed in subsequent cells.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>k = 0\nframe.setLayout(GridLayout(4,4))\nfor i in range(1,5):\n   for j in range(1,5):\n      k = k+1\n      frame.add(JButton(str(k)))</code></pre>\n\n\n\n<p>Finally set visibility of frame to true. The complete Jython code is given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JButton\nfrom java.awt import GridLayout\n\nframe = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(400,400)\n\nframe.setLayout(GridLayout(4,4))\n\nk = 0\nfor i in range(1,5):\n   for j in range(1,5):\n      k = k+1\n      frame.add(JButton(str(k)))\n\nframe.setVisible(True)</code></pre>\n\n\n\n<p>The output of the above code is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jython_code.jpg\" alt=\"Jython Code\"/></figure>\n\n\n\n<h2>Jython BorderLayout</h2>\n\n\n\n<p>The BorderLayout manager divides the container in five geographical regions and places with one component in each region. These regions are represented by defined constants as follows −</p>\n\n\n\n<ul><li>BorderLayout.NORTH</li><li>BorderLayout.SOUTH</li><li>BorderLayout.EAST</li><li>BorderLayout.WEST</li><li>BorderLayout.CENTER</li></ul>\n\n\n\n<p>Let us consider the following example −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jython_borderlayout.jpg\" alt=\"Jython BorderLayout\"/></figure>\n\n\n\n<h2>Jython BoxLayout</h2>\n\n\n\n<p>The BoxLayout class is defined in the&nbsp;<strong>javax.swing package</strong>. It is used to arrange components in the container either vertically or horizontally. The direction is determined by the following constants −</p>\n\n\n\n<ul><li>X_AXIS</li><li>Y_AXIS</li><li>LINE_AXIS</li><li>PAGE_AXIS</li></ul>\n\n\n\n<p>The integer constant specifies the axis along which the container&#8217;s components should be laid out. When the container has the default component orientation, LINE_AXIS specifies that the components be laid out from left to right, and PAGE_AXIS specifies that the components be laid out from top to bottom.</p>\n\n\n\n<p>In the following example, panel (of JPanel class) is added in a JFrame object. Vertical BoxLayout is applied to it and two more panels, top and bottom, are added to it. These two internal panels have two buttons each added in the horizontal Boxlayout.</p>\n\n\n\n<p>Let us first create the top-level JFrame window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame = JFrame()\nframe.setTitle(\"Buttons\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setSize(300, 150)</code></pre>\n\n\n\n<p>The JPanel object is declared having a vertical BoxLayout. Add it in top-level frame.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>panel = JPanel()\npanel.setLayout(BoxLayout(panel, BoxLayout.Y_AXIS))\nframe.add(panel)</code></pre>\n\n\n\n<p>In this panel, two more panels top and bottom are added to it. Each of them have two JButton objects added to them horizontally with a space holder of 25 pixels separating them.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>###top panel\ntop = JPanel()\ntop.setLayout(BoxLayout(top, BoxLayout.X_AXIS))\nb1 = JButton(\"OK\")\nb2 = JButton(\"Close\")\ntop.add(Box.createVerticalGlue())\ntop.add(b1)\ntop.add(Box.createRigidArea(Dimension(25, 0)))\ntop.add(b2)</code></pre>\n\n\n\n<p>Similarly, the bottom panel is constructed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>###bottom panel\nbottom = JPanel()\nbottom.setLayout(BoxLayout(bottom, BoxLayout.X_AXIS))\nb3 = JButton(\"Open\")\nb4 = JButton(\"Save\")\nbottom.add(b3)\nbottom.add(Box.createRigidArea(Dimension(25, 0)))\nbottom.add(b4)\nbottom.add(Box.createVerticalGlue())</code></pre>\n\n\n\n<p>Note that the&nbsp;<strong>createRigidArea()</strong>&nbsp;function is used to create a space of 25 pixels between two buttons. Also the&nbsp;<strong>createVerticalGlue()</strong>&nbsp;function occupies the leading or the trailing space in the layout.</p>\n\n\n\n<p>To start with, add the top and bottom panels and set the visibility property of the frame to true. The complete code is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from java.awt import Dimension\nfrom javax.swing import JButton, JFrame,JPanel,BoxLayout,Box\n\nframe = JFrame()\nframe.setTitle(\"Buttons\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setSize(300, 150)\n\npanel = JPanel()\npanel.setLayout(BoxLayout(panel, BoxLayout.Y_AXIS))\nframe.add(panel)\n\n###top panel\ntop = JPanel()\ntop.setLayout(BoxLayout(top, BoxLayout.X_AXIS))\nb1 = JButton(\"OK\")\nb2 = JButton(\"Close\")\ntop.add(Box.createVerticalGlue())\ntop.add(b1)\ntop.add(Box.createRigidArea(Dimension(25, 0)))\ntop.add(b2)\n\n###bottom panel\nbottom = JPanel()\nbottom.setLayout(BoxLayout(bottom, BoxLayout.X_AXIS))\nb3 = JButton(\"Open\")\nb4 = JButton(\"Save\")\nbottom.add(b3)\nbottom.add(Box.createRigidArea(Dimension(25, 0)))\nbottom.add(b4)\nbottom.add(Box.createVerticalGlue())\n\npanel.add(bottom)\npanel.add(top)\nframe.setVisible(True)</code></pre>\n\n\n\n<p>The above code will generate the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jython_boxlayout.jpg\" alt=\"Jython BoxLayout\"/></figure>\n\n\n\n<h2>Jython GroupLayout</h2>\n\n\n\n<p>The GroupLayout manager groups the components in a hierarchical manner. The grouping is done by two classes,&nbsp;<strong>SequentialGroup</strong>&nbsp;and&nbsp;<strong>ParallelGroup</strong>, both implement Group interface in Java.</p>\n\n\n\n<p>The layout procedure is divided in two steps. In one-step, components are placed along with the horizontal axis, and in second along vertical axis. Each component must be defined twice in the layout.</p>\n\n\n\n<p>There are two types of arrangements, sequential and parallel. In both, we can arrange components sequentially or in parallel. In horizontal arrangement, row is called sequential group and column is called parallel group. On the other hand, in parallel arrangement, row of element is a parallel group and a column, which is called sequential.</p>\n\n\n\n<p>In following example, five buttons are arranged in such a way that three each appear in row and column. To start with, Add a Jpanel object in a JFrame window and set its layout as Grouplayout.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame =  JFrame()\npanel =  JPanel()\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nlayout =  GroupLayout(panel)\npanel.setLayout(layout)</code></pre>\n\n\n\n<p>Then construct the JButton objects −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>buttonD = JButton(\"D\")\nbuttonR = JButton(\"R\")\nbuttonY = JButton(\"Y\")\nbuttonO = JButton(\"O\")\nbuttonT = JButton(\"T\")</code></pre>\n\n\n\n<p>Next, we create a <strong>SequentialGroup</strong> named <strong>LeftToRight</strong> to which buttonD and buttonY are added. In between them, a ParallelGroup ColumnMiddle (with other three buttons added vertically) is placed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>leftToRight = layout.createSequentialGroup()\nleftToRight.addComponent(buttonD)\ncolumnMiddle = layout.createParallelGroup()\ncolumnMiddle.addComponent(buttonR)\ncolumnMiddle.addComponent(buttonO)\ncolumnMiddle.addComponent(buttonT)\nleftToRight.addGroup(columnMiddle)\nleftToRight.addComponent(buttonY)</code></pre>\n\n\n\n<p>Now comes the definition of vertical SequentialGroup called TopToBottom. Add a ParallelGroup row of three buttons and then rest two buttons vertically.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>topToBottom = layout.createSequentialGroup()\nrowTop = layout.createParallelGroup()\nrowTop.addComponent(buttonD)\nrowTop.addComponent(buttonR)\nrowTop.addComponent(buttonY)\ntopToBottom.addGroup(rowTop)\ntopToBottom.addComponent(buttonO)\ntopToBottom.addComponent(buttonT)</code></pre>\n\n\n\n<p>Finally, set LeftToRight group horizontally and TopToBottom group vertically to the layout object. The complete code is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JButton, JFrame,JPanel,GroupLayout\n\nframe = JFrame()\npanel = JPanel()\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nlayout = GroupLayout(panel)\npanel.setLayout(layout)\n\nbuttonD = JButton(\"D\")\nbuttonR = JButton(\"R\")\nbuttonY = JButton(\"Y\")\nbuttonO = JButton(\"O\")\nbuttonT = JButton(\"T\")\n\nleftToRight = layout.createSequentialGroup()\nleftToRight.addComponent(buttonD)\ncolumnMiddle = layout.createParallelGroup()\ncolumnMiddle.addComponent(buttonR)\ncolumnMiddle.addComponent(buttonO)\ncolumnMiddle.addComponent(buttonT)\nleftToRight.addGroup(columnMiddle)\nleftToRight.addComponent(buttonY)\n\ntopToBottom = layout.createSequentialGroup()\nrowTop = layout.createParallelGroup()\nrowTop.addComponent(buttonD)\nrowTop.addComponent(buttonR)\nrowTop.addComponent(buttonY)\ntopToBottom.addGroup(rowTop)\ntopToBottom.addComponent(buttonO)\ntopToBottom.addComponent(buttonT)\n\nlayout.setHorizontalGroup(leftToRight)\nlayout.setVerticalGroup(topToBottom)\n\nframe.add(panel)\nframe.pack()\nframe.setVisible(True)</code></pre>\n\n\n\n<p>The output of the above code is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jython_grouplayout.jpg\" alt=\"Jython GroupLayout\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>Layout managers in Java are classes those, which manage the placement of controls in the container objects like&nbsp;Frame, Dialog&nbsp;or&nbsp;Panel. Layout managers maintain the relative positioning of controls in a frame, even if the resolution changes or the frame itself is resized. These classes implement the&nbsp;Layout interface. The following Layout managers are defined in the&nbsp;AWT library&nbsp;− [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/245"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=245"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/245/revisions"}],"predecessor-version":[{"id":3008,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/245/revisions/3008"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=245"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=245"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=245"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":243,"date":"2020-07-02T11:37:20","date_gmt":"2020-07-02T11:37:20","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=243"},"modified":"2020-12-16T16:56:42","modified_gmt":"2020-12-16T16:56:42","slug":"event-handling","status":"publish","type":"post","link":"https://python3.foobrdigital.com/event-handling/","title":{"rendered":"Event Handling"},"content":{"rendered":"\n<p>Event handling in Java swing requires that the control (like JButton or JList etc.) should be registered with the respective event listener. The event listener interface or corresponding Adapter class needs to be either implemented or subclassed with its event handling method overridden. In Jython, the event handling is very simple. We can pass any function as property of event handling function corresponding to the control.</p>\n\n\n\n<p>Let us first see how a click event is handled in Java.</p>\n\n\n\n<p>To begin with, we have to import the&nbsp;<strong>java.awt.event package</strong>. Next, the class extending JFrame must implement ActionListener interface.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">public class btnclick extends JFrame implements ActionListener</pre>\n\n\n\n<p>Then, we have to declare the JButton object, add it to the ContentPane of frame and then register it with ActionListener by the addActionListener() method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>JButton b1 = new JButton(\"Click here\");\n   getContentPane().add(b1);\n   b1.addActionListener(this);</code></pre>\n\n\n\n<p>Now, the actionPerformed() method of the ActionListener interface must be overridden to handle the ActionEvent.</p>\n\n\n\n<p>Following is entire Java code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.awt.event.*;\nimport javax.swing.*;\npublic class btnclick extends JFrame implements ActionListener {\n   btnclick() {\n      JButton b1 = new JButton(\"Click here\");\n      getContentPane().add(b1);\n      b1.addActionListener(this);\n   }\n   \n   public void actionPerformed(ActionEvent e) {\n      System.out.println(\"Clicked\");\n   }\n   \n   public static void main(String args&#91;]) {\n      btnclick b = new btnclick();\n      b.setSize(300,200);\n      b.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n      b.setVisible(true);\n   }\n}</code></pre>\n\n\n\n<p>Now, we will write the Jython code equivalent to the same code.</p>\n\n\n\n<p>To start with, we do not need to import the ActionEvent or the ActionListener, since Jython’s dynamic typing allows us to avoid mentioning these classes in our code.</p>\n\n\n\n<p>Secondly, there is no need to implement or subclass ActionListener. Instead, any user defined function is straightaway provided to the JButton constructor as a value of <strong>actionPerformed</strong> bean property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>button = JButton('Click here!', actionPerformed = clickhere)</code></pre>\n\n\n\n<p>The <strong>clickhere()</strong> function is defined as a regular Jython function, which handles the click event on the button.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def change_text(event):\nprint clicked!'</code></pre>\n\n\n\n<p>Here is the Jython equivalent code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JButton\n\nframe = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(300,200)\n\ndef clickhere(event):\n   print \"clicked\"\n\nbtn = JButton(\"Add\", actionPerformed = clickhere)\nframe.add(btn)\n\nframe.setVisible(True)</code></pre>\n\n\n\n<p>The Output of Java and Jython code is identical. When the button is clicked, it will print the ‘clicked’ message on the console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/java_and_jython.jpg\" alt=\"Java and Jython\"/></figure>\n\n\n\n<p>In the following Jython code, two JTextField objects are provided on the JFrame window to enter marks in ‘phy’ and ‘maths’. The JButton object executes the add() function when clicked.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>btn = JButton(\"Add\", actionPerformed = add)</code></pre>\n\n\n\n<p>The add() function reads the contents of two text fields by the getText() method and parses them to integers, so that, addition can be performed. The result is then put in the third text field by the setText() method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def add(event):\n   print \"add\"\n   ttl = int(txt1.getText())+int(txt2.getText())\n   txt3.setText(str(ttl))</code></pre>\n\n\n\n<p>The complete code is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JLabel, JButton, JTextField\nfrom java.awt import Dimension\n\nframe = JFrame(\"Hello\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(300,200)\nframe.setLayout(None)\n\ndef add(event):\n   print \"add\"\n   ttl = int(txt1.getText())+int(txt2.getText())\n   txt3.setText(str(ttl))\n\nlbl1 = JLabel(\"Phy\")\nlbl1.setBounds(60,20,40,20)\ntxt1 = JTextField(10)\ntxt1.setBounds(120,20,60,20)\nlbl2 = JLabel(\"Maths\")\nlbl2.setBounds(60,50,40,20)\ntxt2 = JTextField(10)\ntxt2.setBounds(120, 50, 60,20)\nbtn = JButton(\"Add\", actionPerformed = add)\nbtn.setBounds(60,80,60,20)\nlbl3 = JLabel(\"Total\")\nlbl3.setBounds(60,110,40,20)\ntxt3 = JTextField(10)\ntxt3.setBounds(120, 110, 60,20)\n\nframe.add(lbl1)\nframe.add(txt1)\nframe.add(lbl2)\nframe.add(txt2)\nframe.add(btn)\nframe.add(lbl3)\nframe.add(txt3)\nframe.setVisible(True)</code></pre>\n\n\n\n<p>When the above code is executed from the command prompt, the following window appears. Enter marks for ‘Phy’, Maths’, and click on the ‘Add’ button. The result will be displayed accordingly.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/phy_maths.jpg\" alt=\"Phy Maths\"/></figure>\n\n\n\n<h2>Jython JRadioButton Event</h2>\n\n\n\n<p>The JRadioButton class is defined in the&nbsp;<strong>javax.swing package</strong>. It creates a selectable toggle button with on or off states. If multiple radio buttons are added in a ButtonGroup, their selection is mutually exclusive.</p>\n\n\n\n<p>In the following example, two objects of the JRadioButton class and two JLabels are added to a Jpanel container in a vertical BoxLayout. In the constructor of the JRadioButton objects, the <strong>OnCheck()</strong> function is set as the value of the actionPerformed property. This function is executed when the radio button is clicked to change its state.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rb1 = JRadioButton(\"Male\", True,actionPerformed = OnCheck)\nrb2 = JRadioButton(\"Female\", actionPerformed = OnCheck)</code></pre>\n\n\n\n<p>Note that the default state of Radio Button is false (not selected). The button rb1 is created with its starting state as True (selected).</p>\n\n\n\n<p>The two radio buttons are added to a radio ButtonGroup to make them mutually exclusive, so that if one is selected, other is deselected automatically.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>grp = ButtonGroup()\ngrp.add(rb1)\ngrp.add(rb2)</code></pre>\n\n\n\n<p>These two radio buttons along with two labels are added to a panel object in the vertical layout with a separator area of 25 pixels in heights between rb2 and lbl2.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>panel = JPanel()\npanel.setLayout(BoxLayout(panel, BoxLayout.Y_AXIS))\n\npanel.add(Box.createVerticalGlue())\npanel.add(lbl)\npanel.add(rb1)\npanel.add(rb2)\npanel.add(Box.createRigidArea(Dimension(0,25)))\npanel.add(lbl1)</code></pre>\n\n\n\n<p>This panel is added to a top-level JFrame object, whose visible property is set to ‘True’ in the end.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame = JFrame(\"JRadioButton Example\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(250,200)\nframe.setVisible(True)\nThe complete code of radio.py is given below:\nfrom javax.swing import JFrame, JPanel, JLabel, BoxLayout, Box\n\nfrom java.awt import Dimension\nfrom javax.swing import JRadioButton,ButtonGroup\nframe = JFrame(\"JRadioButton Example\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(250,200)\npanel = JPanel()\npanel.setLayout(BoxLayout(panel, BoxLayout.Y_AXIS))\nframe.add(panel)\n\ndef OnCheck(event):\n   lbl1.text = \"\"\n   if rb1.isSelected():\n      lbl1.text = lbl1.text+\"Gender selection : Male\"\n   else:\n      lbl1.text = lbl1.text+\"Gender selection : Female \"\n      lbl = JLabel(\"Select Gender\")\n\nrb1 = JRadioButton(\"Male\", True,actionPerformed = OnCheck)\nrb2 = JRadioButton(\"Female\", actionPerformed = OnCheck)\ngrp = ButtonGroup()\ngrp.add(rb1)\ngrp.add(rb2)\n\nlbl1 = JLabel(\"Gender Selection :\")\n\npanel.add(Box.createVerticalGlue())\npanel.add(lbl)\npanel.add(rb1)\npanel.add(rb2)\npanel.add(Box.createRigidArea(Dimension(0,25)))\npanel.add(lbl1)\n\nframe.setVisible(True)</code></pre>\n\n\n\n<p>Run the above Jython script and change the radio button selection. The selection will appear in the label at the bottom.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jradiobutton.jpg\" alt=\"JRadioButton\"/></figure>\n\n\n\n<h2>Jython JCheckBox Event</h2>\n\n\n\n<p>Like the&nbsp;<strong>JRadioButton</strong>, JCheckBox object is also a selectable button with a rectangular checkable box besides its caption. This is generally used to provide user opportunity to select multiple options from the list of items.</p>\n\n\n\n<p>In the following example, two check boxes and a label from swing package are added to a JPanel in vertical BoxLayout. The label at bottom displays the instantaneous selection state of two check boxes.</p>\n\n\n\n<p>Both checkboxes are declared with the constructor having the actionPerformed property set to the <strong>OnCheck()</strong> function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>box1 = JCheckBox(\"Check1\", actionPerformed = OnCheck)\nbox2 = JCheckBox(\"Check2\", actionPerformed = OnCheck)</code></pre>\n\n\n\n<p>The OnCheck() function verifies selection state of each check box and displays corresponding message on the label at the bottom.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def OnCheck(event):\n   lbl1.text = \"\"\n   if box1.isSelected():\n      lbl1.text = lbl1.text + \"box1 selected \"\n   else:\n      lbl1.text = lbl1.text + \"box1 not selected \"\n   if box2.isSelected():\n      lbl1.text = lbl1.text + \"box2 selected\"\n   else:\n      lbl1.text = lbl1.text + \"box2 not selected\"</code></pre>\n\n\n\n<p>These boxes and a JLabel object are added to a JPanel with a spaceholder of 50 pixels in height added between them.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>panel = JPanel()\npanel.setLayout(BoxLayout(panel, BoxLayout.Y_AXIS))\npanel.add(Box.createVerticalGlue())\npanel.add(box1)\npanel.add(box2)\npanel.add(Box.createRigidArea(Dimension(0,50)))\npanel.add(lbl1)</code></pre>\n\n\n\n<p>The panel itself is added to a top-level JFrame window, whose visible property is set to true in the end.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame = JFrame(\"JCheckBox Example\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(250,150)\nframe.add(panel)\n\nframe.setVisible(True)</code></pre>\n\n\n\n<p>Run the above code and experiment with the selection of check boxes. The instantaneous state of both check boxes is displayed at the bottom.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/check_box.jpg\" alt=\"Check Box\"/></figure>\n\n\n\n<h2>Jython JList Event</h2>\n\n\n\n<p>The JList control in the swing package provides the user with a scrollable list of items to choose. The JComboBox provides a drop down list of items. In Java, the selection event is processed by implementing the valueChanged() method in the ListSelectionListener. In Jython, an event handler is assigned to the valueChanged property of the JList object.</p>\n\n\n\n<p>In the following example, a JList object and a label are added to a JFrame in the BorderLayout. The JList is populated with a collection of items in a tuple. Its valueChanged property is set to listSelect() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>lang = (\"C\", \"C++\", \"Java\", \"Python\", \"Perl\", \"C#\", \"VB\", \"PHP\", \"Javascript\", \"Ruby\")\nlst = JList(lang, valueChanged = listSelect)</code></pre>\n\n\n\n<p>The event handler function obtains the index of the selected item and fetches the corresponding item from the JList object to be displayed on the label at the bottom.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def listSelect(event):\n   index = lst.selectedIndex\n   lbl1.text = \"Hello\" + lang&#91;index]</code></pre>\n\n\n\n<p>The JList and JLabel object are added to the JFrame using BorderLayout.</p>\n\n\n\n<p>The entire code is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JPanel, JLabel, JList\nfrom java.awt import BorderLayout\n\nframe = JFrame(\"JList Example\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(300,250)\n\nframe.setLayout(BorderLayout())\n\ndef listSelect(event):\n   index = lst.selectedIndex\n   lbl1.text = \"Hello\" + lang&#91;index]\n\nlang = (\"C\", \"C++\", \"Java\", \"Python\", \"Perl\", \"C#\", \"VB\", \"PHP\", \"Javascript\", \"Ruby\")\nlst = JList(lang, valueChanged = listSelect)\nlbl1 = JLabel(\"box1 not selected box2 not selected\")\nframe.add(lst, BorderLayout.NORTH)\nframe.add(lbl1, BorderLayout.SOUTH)\n\nframe.setVisible(True)</code></pre>\n\n\n\n<p>The output of the following code is as follows.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jlist_and_jlabel_object.jpg\" alt=\"JList and JLabel Object\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Event handling in Java swing requires that the control (like JButton or JList etc.) should be registered with the respective event listener. The event listener interface or corresponding Adapter class needs to be either implemented or subclassed with its event handling method overridden. In Jython, the event handling is very simple. We can pass any [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/243"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=243"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/243/revisions"}],"predecessor-version":[{"id":3003,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/243/revisions/3003"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=243"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=243"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=243"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":241,"date":"2020-07-02T11:38:59","date_gmt":"2020-07-02T11:38:59","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=241"},"modified":"2020-12-16T16:56:42","modified_gmt":"2020-12-16T16:56:42","slug":"menus","status":"publish","type":"post","link":"https://python3.foobrdigital.com/menus/","title":{"rendered":"Menus"},"content":{"rendered":"\n<p>Most of the GUI based applications have a Menu bar at the top. It is found just below the title bar of the top-level window. The javax.swing package has elaborate facility to build an efficient menu system. It is constructed with the help of&nbsp;<strong>JMenuBar, JMenu</strong>&nbsp;and&nbsp;<strong>JMenuItem</strong>classes.</p>\n\n\n\n<p>In following example, a menu bar is provided in the top-level window. A File menu consisting of three menu item buttons is added to the menu bar. Let us now prepare a JFrame object with the layout set to BorderLayout.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>frame = JFrame(\"JMenuBar example\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(400,300)\nframe.setLayout(BorderLayout())</code></pre>\n\n\n\n<p>Now, a JMenuBar object is activated by the SetJMenuBar() method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bar = JMenuBar()\nframe.setJMenuBar(bar)</code></pre>\n\n\n\n<p>Next, a JMenu object having ‘File’ caption is declared. Three JMenuItem buttons are added to the File menu. When any of the menu items are clicked, the ActionEvent handler OnClick() function is executed. It is defined with the actionPerformed property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>file = JMenu(\"File\")\nnewfile = JMenuItem(\"New\",actionPerformed = OnClick)\nopenfile = JMenuItem(\"Open\",actionPerformed = OnClick)\nsavefile = JMenuItem(\"Save\",actionPerformed = OnClick)\nfile.add(newfile)\nfile.add(openfile)\nfile.add(savefile)\nbar.add(file)</code></pre>\n\n\n\n<p>The OnClick() event handler retrieves the name of the JMenuItem button by the gwtActionCommand() function and displays it in the text box at the bottom of the window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def OnClick(event):\n   txt.text = event.getActionCommand()</code></pre>\n\n\n\n<p>The File menu object is added to menu bar. Finally, a JTextField control is added at the bottom of the JFrame object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>txt = JTextField(10)\nframe.add(txt, BorderLayout.SOUTH)</code></pre>\n\n\n\n<p>The entire code of menu.py is given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from javax.swing import JFrame, JMenuBar, JMenu, JMenuItem, JTextField\nfrom java.awt import BorderLayout\n\nframe = JFrame(\"JMenuBar example\")\nframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)\nframe.setLocation(100,100)\nframe.setSize(400,300)\nframe.setLayout(BorderLayout())\n\ndef OnClick(event):\n   txt.text = event.getActionCommand()\n\nbar = JMenuBar()\nframe.setJMenuBar(bar)\n\nfile = JMenu(\"File\")\nnewfile = JMenuItem(\"New\",actionPerformed = OnClick)\nopenfile = JMenuItem(\"Open\",actionPerformed = OnClick)\nsavefile = JMenuItem(\"Save\",actionPerformed = OnClick)\nfile.add(newfile)\nfile.add(openfile)\nfile.add(savefile)\nbar.add(file)\n\ntxt = JTextField(10)\nframe.add(txt, BorderLayout.SOUTH)\n\nframe.setVisible(True)</code></pre>\n\n\n\n<p>When the above script is executed using the Jython interpreter, a window with the File menu appears. Click on it and its three menu items will drop down. If any button is clicked, its name will be displayed in the text box control.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/jython/images/jython_interpreter.jpg\" alt=\"Jython Interpreter\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Most of the GUI based applications have a Menu bar at the top. It is found just below the title bar of the top-level window. The javax.swing package has elaborate facility to build an efficient menu system. It is constructed with the help of&nbsp;JMenuBar, JMenu&nbsp;and&nbsp;JMenuItemclasses. In following example, a menu bar is provided in the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[34,78,155],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/241"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=241"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/241/revisions"}],"predecessor-version":[{"id":3010,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/241/revisions/3010"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=241"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=241"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=241"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]