[{"id":2903,"date":"2020-11-23T10:27:14","date_gmt":"2020-11-23T10:27:14","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2903"},"modified":"2020-11-23T10:27:14","modified_gmt":"2020-11-23T10:27:14","slug":"aurelia-overview","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-overview/","title":{"rendered":"Aurelia &#8211; Overview"},"content":{"rendered":"\n<p>The best definition of the framework can be found in Aurelia official docs −</p>\n\n\n\n<p>Well, it&#8217;s actually simple. Aurelia is just JavaScript. However, it&#8217;s not yesterday&#8217;s JavaScript, but the JavaScript of tomorrow. By using modern tooling we&#8217;ve been able to write Aurelia from the ground up in ECMAScript 2016. This means we have native modules, classes, decorators and more at our disposal&#8230;and you have them too.</p>\n\n\n\n<p>Not only is Aurelia written in modern and future JavaScript, but it also takes a modern approach to architecture. In the past, frameworks have been monolithic beasts. Not Aurelia though. It&#8217;s built as a series of collaborating libraries. Taken together, they form a powerful and robust framework for building Single Page Apps (SPAs). However, Aurelia&#8217;s libraries can often be used individually, in traditional web sites or even on the server-side through technologies such as NodeJS.</p>\n\n\n\n<h2>Aurelia &#8211; Features</h2>\n\n\n\n<ul><li><strong>Components</strong>&nbsp;− Components are building blocks of Aurelia framework. It is composed of HTML view and JavaScript view-model pairs.</li><li><strong>Web Standards</strong>&nbsp;− This is one of the cleanest modern frameworks, completely focused on web standards without unnecessary abstractions.</li><li><strong>Extensible</strong>&nbsp;− The framework offers an easy way to integrate with the other needed tools.</li><li><strong>Commercial Support</strong>&nbsp;− Aurelia offers commercial and enterprise support. It is an official product of Durandal Inc.</li><li><strong>License</strong>&nbsp;− Aurelia is open sourced and licensed under MIT license.</li></ul>\n\n\n\n<h2>Aurelia &#8211; Advantages</h2>\n\n\n\n<ul><li>Aurelia is very clean. If you follow the frameworks conventions, you can focus on your app without the framework getting in your way.</li><li>It is also easily extensible. You can add or remove any tools that the framework offers and you can also add any other tools that aren&#8217;t part of the framework.</li><li>Aurelia is very easy to work with. It is directed towards developers’ experience. It saves you lots of time.</li><li>The framework itself is directed towards web standards so you will always stay up to date with modern concepts.</li><li>Aurelia doesn’t have the largest community out there, but it is very agile, knowledgeable and willing to help within short notice.</li></ul>\n\n\n\n<h2>Limitations</h2>\n\n\n\n<ul><li>There are no major limitations. The Framework is powerful and easy to work with.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>The best definition of the framework can be found in Aurelia official docs − Well, it&#8217;s actually simple. Aurelia is just JavaScript. However, it&#8217;s not yesterday&#8217;s JavaScript, but the JavaScript of tomorrow. By using modern tooling we&#8217;ve been able to write Aurelia from the ground up in ECMAScript 2016. This means we have native modules, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2903"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2903"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2903/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2903"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2903"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2903"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2905,"date":"2020-11-23T10:27:45","date_gmt":"2020-11-23T10:27:45","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2905"},"modified":"2020-11-23T10:27:45","modified_gmt":"2020-11-23T10:27:45","slug":"aurelia-environment-setup","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-environment-setup/","title":{"rendered":"Aurelia &#8211; Environment Setup"},"content":{"rendered":"\n<p>In this chapter, you will learn how to get started with Aurelia framework. Before you do that, you will need&nbsp;<strong>NodeJS</strong>&nbsp;installed on your system.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Software &amp; Description</th></tr><tr><td>1</td><td><strong>NodeJS and NPM</strong>NodeJS is the platform needed for Aurelia development. Checkout our NodeJS Environment Setup.</td></tr></tbody></table></figure>\n\n\n\n<h2>Step 1 &#8211; Download Aurelia Package</h2>\n\n\n\n<p>Before we download Aurelia package, let&#8217;s create a folder on desktop where our app will be placed.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">C:\\Users\\username\\Desktop&gt;mkdir aureliaApp\n</pre>\n\n\n\n<p>Now we can download the package from official&nbsp;<a rel=\"noreferrer noopener\" href=\"https://aurelia.io/docs/build-systems/aurelia-cli/\" target=\"_blank\">Aurelia website</a>.</p>\n\n\n\n<p>Aurelia supports&nbsp;<strong>ES2016</strong>&nbsp;and&nbsp;<strong>TypeScript</strong>. We will use&nbsp;<strong>ES2016</strong>. Extract the downloaded files inside the&nbsp;<strong>aureliaApp</strong>&nbsp;folder that we created above.</p>\n\n\n\n<h2>Step 2 &#8211; Install the Web Server</h2>\n\n\n\n<p>First we need to install the web server from&nbsp;<strong>command prompt</strong>&nbsp;window.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">C:\\Users\\username\\Desktop\\aureliaApp&gt;npm install http-server -g\n</pre>\n\n\n\n<h2>Step 3 &#8211; Start the Web Server</h2>\n\n\n\n<p>To start the web server, we need to run the following code in&nbsp;<strong>command prompt</strong>.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">C:\\Users\\username\\Desktop\\aureliaApp&gt;http-server -o -c-1\n</pre>\n\n\n\n<p>We can see our first Aurelia app in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-environment-setup-start.jpg\" alt=\"Aurelia Environment Setup Start\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to get started with Aurelia framework. Before you do that, you will need&nbsp;NodeJS&nbsp;installed on your system. Sr.No Software &amp; Description 1 NodeJS and NPMNodeJS is the platform needed for Aurelia development. Checkout our NodeJS Environment Setup. Step 1 &#8211; Download Aurelia Package Before we download Aurelia package, let&#8217;s create [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2905"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2905"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2905/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2905"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2905"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2905"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2907,"date":"2020-11-23T10:28:09","date_gmt":"2020-11-23T10:28:09","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2907"},"modified":"2020-11-23T10:28:09","modified_gmt":"2020-11-23T10:28:09","slug":"aurelia-first-application","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-first-application/","title":{"rendered":"Aurelia &#8211; First Application"},"content":{"rendered":"\n<p>In this chapter, we will explain Aurelia starting app created in our last chapter. We will also guide you through the folder structure, so you can grasp the core concepts behind Aurelia framework.</p>\n\n\n\n<h2>Folder Structure</h2>\n\n\n\n<ul><li><strong>package.json</strong>&nbsp;represents documentation about&nbsp;<strong>npm</strong>&nbsp;packages installed. It also shows the version of those packages and provides an easy way to add, delete, change version or automatically install all packages when the app needs to be shared between developers.</li><li><strong>index.html</strong>&nbsp;is the default page of the app like in most of the HTML based apps. It is a place where scripts and stylesheets are loaded.</li><li><strong>config.js</strong>&nbsp;is Aurelia loader configuration file. You will not spend much time working with this file.</li><li><strong>jspm_packages</strong>&nbsp;is the directory for the&nbsp;<strong>SystemJS</strong>&nbsp;loaded modules.</li><li><strong>styles</strong>&nbsp;is the default styling directory. You can always change the place where you keep your styling files.</li><li><strong>src</strong>&nbsp;folder is a place where you will spend most of your development time. It keeps&nbsp;<strong>HTML</strong>&nbsp;and&nbsp;<strong>js</strong>&nbsp;files.</li></ul>\n\n\n\n<h2>Source Files</h2>\n\n\n\n<p>As we already stated, the&nbsp;<strong>src</strong>&nbsp;directory is the place where your app logic will be held. If you look at the default app you can see that&nbsp;<strong>app.js</strong>&nbsp;and&nbsp;<strong>app.html</strong>&nbsp;are very simple.</p>\n\n\n\n<p>Aurelia allows us to use JavaScript core language for class definitions. Following default example shows EC6 class.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-preformatted\">export class App {\n   message = 'Welcome to Aurelia!';\n}</pre>\n\n\n\n<p>The&nbsp;<strong>message</strong>&nbsp;property is bound to the HTML template using&nbsp;<strong>${message}</strong>syntax. This syntax represents one-way binding converted into string and showed inside the template view.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;template&gt;\n   &lt;h1&gt;${message}&lt;/h1&gt;\n&lt;/template&gt;</pre>\n\n\n\n<p>As we already discussed in the last chapter, we can start the server by running the following command in the&nbsp;<strong>command prompt</strong>&nbsp;window.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">C:\\Users\\username\\Desktop\\aureliaApp&gt;http-server -o -c-1\n</pre>\n\n\n\n<p>Application will be rendered on the screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-first-app-start.jpg\" alt=\"Aurelia First App Start\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will explain Aurelia starting app created in our last chapter. We will also guide you through the folder structure, so you can grasp the core concepts behind Aurelia framework. Folder Structure package.json&nbsp;represents documentation about&nbsp;npm&nbsp;packages installed. It also shows the version of those packages and provides an easy way to add, delete, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2907"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2907"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2907/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2907"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2907"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2907"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2909,"date":"2020-11-23T10:28:58","date_gmt":"2020-11-23T10:28:58","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2909"},"modified":"2020-11-23T10:28:58","modified_gmt":"2020-11-23T10:28:58","slug":"aurelia-components","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-components/","title":{"rendered":"Aurelia &#8211; Components"},"content":{"rendered":"\n<p>Components are the main building blocks of Aurelia framework. In this chapter, you will learn how to create simple components.</p>\n\n\n\n<h2>Simple Component</h2>\n\n\n\n<p>As already discussed in the previous chapter, each component contains&nbsp;<strong>view-model</strong>&nbsp;which is written in&nbsp;<strong>JavaScript</strong>, and&nbsp;<strong>view</strong>&nbsp;written in&nbsp;<strong>HTML</strong>. You can see the following&nbsp;<strong>view-model</strong>&nbsp;definition. It is an&nbsp;<strong>ES6</strong>&nbsp;example but you can also use&nbsp;<strong>TypeScript</strong>.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class MyComponent {\n   header = \"This is Header\";\n   content = \"This is content\";\n}</code></pre>\n\n\n\n<p>We can bind our values to the view as shown in the following example.&nbsp;<strong>${header}</strong>syntax will bind the defined&nbsp;<strong>header</strong>&nbsp;value from&nbsp;<strong>MyComponent</strong>. The same concept is applied for&nbsp;<strong>content</strong>.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;h1>${header}&lt;/h1>\n   &lt;p>${content}&lt;/p>\n&lt;/template></code></pre>\n\n\n\n<p>The above code will produce the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-components-simple.jpg\" alt=\"Aurelia Components Simple\"/></figure>\n\n\n\n<h2>Component Functions</h2>\n\n\n\n<p>If you want to update the header and footer when the user clicks the button, you can use the following example. This time we are defining&nbsp;<strong>header</strong>&nbsp;and&nbsp;<strong>footer</strong>&nbsp;inside&nbsp;<strong>EC6</strong>&nbsp;class constructor.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App{  \n   constructor() {\n      this.header = 'This is Header';\n      this.content = 'This is content';\n   }\n   updateContent() {\n      this.header = 'This is NEW header...'\n      this.content = 'This is NEW content...';\n   }\n}</code></pre>\n\n\n\n<p>We can add&nbsp;<strong>click.delegate()</strong>&nbsp;to connect&nbsp;<strong>updateContent()</strong>&nbsp;function with the button. More on this in one of our subsequent chapters.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;h1>${header}&lt;/h1>\n   &lt;p>${content}&lt;/p>\n   &lt;button click.delegate = \"updateContent()\">Update Content&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<p>When the button is clicked, the header and content will be updated.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-components-method.jpg\" alt=\"Aurelia Components Method\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Components are the main building blocks of Aurelia framework. In this chapter, you will learn how to create simple components. Simple Component As already discussed in the previous chapter, each component contains&nbsp;view-model&nbsp;which is written in&nbsp;JavaScript, and&nbsp;view&nbsp;written in&nbsp;HTML. You can see the following&nbsp;view-model&nbsp;definition. It is an&nbsp;ES6&nbsp;example but you can also use&nbsp;TypeScript. app.js We can bind our [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2909"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2909"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2909/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2909"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2909"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2909"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2911,"date":"2020-11-23T10:29:44","date_gmt":"2020-11-23T10:29:44","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2911"},"modified":"2020-11-23T10:29:44","modified_gmt":"2020-11-23T10:29:44","slug":"aurelia-component-lifecycle","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-component-lifecycle/","title":{"rendered":"Aurelia &#8211; Component Lifecycle"},"content":{"rendered":"\n<p>Aurelia uses component lifecycle methods to manipulate the component lifecycle. In this chapter, we will show you those methods and explain the component lifecycle.</p>\n\n\n\n<ul><li><strong>constructor()</strong>&nbsp;− Constructor method is used for initializing an object created with a class. This method is called first. If you don&#8217;t specify this method, the default constructor will be used.</li><li><strong>created(owningView, myView)</strong>&nbsp;− This is called once the view and view-model are created and connected to the controller. This method takes two arguments. The first one is the view where the component is declared&nbsp;<strong>(owningView)</strong>. The second one is the component view&nbsp;<strong>(myView)</strong>.</li><li><strong>bind(bindingContext, overrideContext)</strong>&nbsp;− At this point of time, the binding has started. The first argument represents the binding context of the component. The second one is&nbsp;<strong>overrideContext</strong>. This argument is used for adding additional contextual properties.</li><li><strong>attached()</strong>&nbsp;− Attached method is invoked once the component is attached to the DOM.</li><li><strong>detached()</strong>&nbsp;− This method is opposite to&nbsp;<strong>attached</strong>. It is invoked when the component is removed from the DOM.</li><li><strong>unbind()</strong>&nbsp;− The last lifecycle method is&nbsp;<strong>unbind</strong>. It is called when the component is unbound.</li></ul>\n\n\n\n<p>The lifecycle methods are useful when you want to have higher control over your component. You can use them when you need to trigger some functionalities at certain point of component lifecycle.</p>\n\n\n\n<p>All lifecycle methods are shown below.</p>\n\n\n\n<h2>app.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {\n   constructor(argument) {\n      // Create and initialize your class object here...\n   }\n\n   created(owningView, myView) {\n      // Invoked once the component is created...\n   }\n\n   bind(bindingContext, overrideContext) {\n      // Invoked once the databinding is activated...\n   }\n\n   attached(argument) {\n      // Invoked once the component is attached to the DOM...\n   }\n\n   detached(argument) {\n      // Invoked when component is detached from the dom\n   }\n\n   unbind(argument) {\n      // Invoked when component is unbound...\n   }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Aurelia uses component lifecycle methods to manipulate the component lifecycle. In this chapter, we will show you those methods and explain the component lifecycle. constructor()&nbsp;− Constructor method is used for initializing an object created with a class. This method is called first. If you don&#8217;t specify this method, the default constructor will be used. created(owningView, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2911"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2911"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2911/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2911"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2911"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2911"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2913,"date":"2020-11-23T10:30:45","date_gmt":"2020-11-23T10:30:45","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2913"},"modified":"2020-11-23T10:30:45","modified_gmt":"2020-11-23T10:30:45","slug":"aurelia-custom-elements","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-custom-elements/","title":{"rendered":"Aurelia &#8211; Custom Elements"},"content":{"rendered":"\n<p>Aurelia offers a way to add components dynamically. You can reuse a single component on different parts of your app without the need to include HTML multiple times. In this chapter, you will learn how to achieve this.</p>\n\n\n\n<h2>Step 1 &#8211; Create the Custom Component</h2>\n\n\n\n<p>Let&#8217;s create new&nbsp;<strong>components</strong>&nbsp;directory inside&nbsp;<strong>src</strong>&nbsp;folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\src>mkdir components\n</code></pre>\n\n\n\n<p>Inside this directory, we will create&nbsp;<strong>custom-component.html</strong>. This component will be inserted later in the HTML page.</p>\n\n\n\n<h3>custom-component.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;p>This is some text from dynamic component...&lt;/p>\n&lt;/template></code></pre>\n\n\n\n<h2>Step 2 &#8211; Create the Main Component</h2>\n\n\n\n<p>We will create simple component in&nbsp;<strong>app.js</strong>. It will be used to render&nbsp;<strong>header</strong>&nbsp;and&nbsp;<strong>footer</strong>&nbsp;text on screen.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class MyComponent {\n   header = \"This is Header\";\n   content = \"This is content\";\n}</code></pre>\n\n\n\n<h2>Step 3 &#8211; Add the Custom Component</h2>\n\n\n\n<p>Inside our&nbsp;<strong>app.html</strong>&nbsp;file, we need to&nbsp;<strong>require</strong>&nbsp;the&nbsp;<strong>custom-component.html</strong>&nbsp;to be able to insert it dynamically. Once we do that, we can add a new element&nbsp;<strong>custom-component</strong>.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;require from = \"./components/custom-component.html\">&lt;/require>\n\n   &lt;h1>${header}&lt;/h1>\n   &lt;p>${content}&lt;/p>\n   &lt;custom-component>&lt;/custom-component>\n&lt;/template></code></pre>\n\n\n\n<p>Following is the output.&nbsp;<strong>Header</strong>&nbsp;and&nbsp;<strong>Footer</strong>&nbsp;text is rendered from&nbsp;<strong>myComponent</strong>&nbsp;inside&nbsp;<strong>app.js</strong>. The additional text is rendered from the&nbsp;<strong>custom-component.js</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-custom-elements-example.jpg\" alt=\"Aurelia Custom Elements Example\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>Aurelia offers a way to add components dynamically. You can reuse a single component on different parts of your app without the need to include HTML multiple times. In this chapter, you will learn how to achieve this. Step 1 &#8211; Create the Custom Component Let&#8217;s create new&nbsp;components&nbsp;directory inside&nbsp;src&nbsp;folder. Inside this directory, we will create&nbsp;custom-component.html. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2913"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2913"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2913/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2913"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2913"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2913"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2915,"date":"2020-11-23T10:31:29","date_gmt":"2020-11-23T10:31:29","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2915"},"modified":"2020-11-23T10:31:29","modified_gmt":"2020-11-23T10:31:29","slug":"aurelia-dependency-injections","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-dependency-injections/","title":{"rendered":"Aurelia &#8211; Dependency Injections"},"content":{"rendered":"\n<p>In this chapter, you will learn how to use Aurelia dependency injection library.</p>\n\n\n\n<p>First, we need to create new file&nbsp;<strong>dependency-test.js</strong>&nbsp;inside&nbsp;<strong>src</strong>&nbsp;folder. In this file, we will create a simple class&nbsp;<strong>DependencyTest</strong>. This class will be later injected as a dependency.</p>\n\n\n\n<h2>src/dependency-test.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>export class DependencyTest {\n   constructor() {\n      this.test = \"Test is succesfull!!!\";\n   }\n}</code></pre>\n\n\n\n<h2>Inject</h2>\n\n\n\n<p>In our&nbsp;<strong>app.js</strong>&nbsp;file, we are importing&nbsp;<strong>inject</strong>&nbsp;library and&nbsp;<strong>DependencyTest</strong>&nbsp;class that we created above. To inject the class we are using&nbsp;<strong>@inject()</strong>&nbsp;function. Our&nbsp;<strong>App</strong>&nbsp;class will just log it to the developer console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import {inject} from 'aurelia-framework';\nimport {DependencyTest} from './dependency-test';\n\n@inject(DependencyTest)\n\nexport class App {\n   constructor(DependencyTest) {\n      console.log(DependencyTest);\n   }\n}</code></pre>\n\n\n\n<p>We can check the console to see that the&nbsp;<strong>DependencyTest</strong>&nbsp;class is injected.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-dependency-injection-log.jpg\" alt=\"Aurelia Dependency Injection Log\"/></figure>\n\n\n\n<p>There will more examples of Aurelia dependency injection in the next chapters.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to use Aurelia dependency injection library. First, we need to create new file&nbsp;dependency-test.js&nbsp;inside&nbsp;src&nbsp;folder. In this file, we will create a simple class&nbsp;DependencyTest. This class will be later injected as a dependency. src/dependency-test.js Inject In our&nbsp;app.js&nbsp;file, we are importing&nbsp;inject&nbsp;library and&nbsp;DependencyTest&nbsp;class that we created above. To inject the class we [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2915"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2915"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2915/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2915"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2915"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2915"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2917,"date":"2020-11-23T10:34:47","date_gmt":"2020-11-23T10:34:47","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2917"},"modified":"2020-11-23T10:34:47","modified_gmt":"2020-11-23T10:34:47","slug":"aurelia-configuration","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-configuration/","title":{"rendered":"Aurelia &#8211; Configuration"},"content":{"rendered":"\n<p>In this chapter, we will show you how to configure Aurelia framework for your needs. Sometimes you will need to set an initial configuration or run some code before the app is rendered to the users.</p>\n\n\n\n<h2>Step 1 &#8211; Create main.js</h2>\n\n\n\n<p>Let&#8217;s create&nbsp;<strong>main.js</strong>&nbsp;file inside&nbsp;<strong>src</strong>&nbsp;folder. Inside this file we will configure Aurelia.</p>\n\n\n\n<p>You also need to tell Aurelia to load configuration module. You can see the commented part in the following example.</p>\n\n\n\n<h3>index.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>Aurelia&lt;/title>\n      &lt;link rel = \"stylesheet\" href = \"styles/styles.css\">\n      &lt;meta name = \"viewport\" content = \"width=device-width, initial-scale = 1\">\n   &lt;/head>\n\n   &lt;body aurelia-app = \"main\"> \n      &lt;!--Add \"main\" value to \"aurelia-app\" attribute... -->\n      &lt;script src = \"jspm_packages/system.js\">&lt;/script>\n      &lt;script src = \"config.js\">&lt;/script>\n\t\t\n      &lt;script>\n         SystemJS.import('aurelia-bootstrapper');\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h2>Step 2 &#8211; Default Configuration</h2>\n\n\n\n<p>The code below shows how to use default configuration.&nbsp;<strong>configure</strong>&nbsp;function allows to set the configuration manually. We are setting&nbsp;<strong>use</strong>&nbsp;property to specify what we need.</p>\n\n\n\n<h3>main.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export function configure(aurelia) {\n   aurelia.use\n   .standardConfiguration()\n   .developmentLogging();\n\n   aurelia.start().then(() => aurelia.setRoot());\n}</code></pre>\n\n\n\n<h2>Step 3 &#8211; Advanced Configuration</h2>\n\n\n\n<p>There are lots of configuration options we could use. It is out of the scope of this article to show you all of it so we will explain how the configuration works on the following example. We are basically telling Aurelia to use&nbsp;<strong>default data binding language, default resources, development logging, router, history</strong>&nbsp;and&nbsp;<strong>event aggregator</strong>. These are standard set of plugins.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export function configure(aurelia) {\n   aurelia.use\n   .defaultBindingLanguage()\n   .defaultResources()\n   .developmentLogging()\n   .router()\n   .history()\n   .eventAggregator();\n\n   aurelia.start().then(() => aurelia.setRoot());\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will show you how to configure Aurelia framework for your needs. Sometimes you will need to set an initial configuration or run some code before the app is rendered to the users. Step 1 &#8211; Create main.js Let&#8217;s create&nbsp;main.js&nbsp;file inside&nbsp;src&nbsp;folder. Inside this file we will configure Aurelia. You also need to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2917"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2917"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2917/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2917"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2917"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2917"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2919,"date":"2020-11-23T10:35:27","date_gmt":"2020-11-23T10:35:27","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2919"},"modified":"2020-11-23T10:35:27","modified_gmt":"2020-11-23T10:35:27","slug":"aurelia-plugins","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-plugins/","title":{"rendered":"Aurelia &#8211; Plugins"},"content":{"rendered":"\n<p>When you start building your app, most of the time you will want to use some additional plugins. In this chapter, you will learn how to use plugins in Aurelia framework.</p>\n\n\n\n<h2>Standard Plugins</h2>\n\n\n\n<p>In the last chapter, we saw how to use default configuration in Aurelia framework. If you are using default configuration, standard set of plugins will be available.</p>\n\n\n\n<ul><li><strong>defaultBindingLanguage()</strong>&nbsp;− This plugin offers an easy way to connect&nbsp;<strong>view-model</strong>&nbsp;with&nbsp;<strong>view</strong>. You already saw one-way data-binding syntax&nbsp;<strong>(${someValue})</strong>. Even though you could use some other binding language, it is a recommended practice to use default binding language.</li><li><strong>defaultResources()</strong>&nbsp;− Default resources give us some primitive constructs such as&nbsp;<strong>if, repeat, compose</strong>, etc. You can even build these constructs on your own, but since they are so commonly used, Aurelia already created it inside this library.</li><li><strong>Router()</strong>&nbsp;− Most of the applications use some kind of routing. Hence,&nbsp;<strong>Router</strong>&nbsp;is a part of the standard plugins. You can check more about routing in a subsequent chapter.</li><li><strong>History()</strong>&nbsp;− History plugin is usually used together with&nbsp;<strong>router</strong>.</li><li><strong>eventAggregator()</strong>&nbsp;− This plugin is used for cross-component communication. It handles publishing and subscribing to messages or channels inside your app.</li></ul>\n\n\n\n<h2>Official Plugins</h2>\n\n\n\n<p>These plugins aren&#8217;t part of the default configuration but are frequently used.</p>\n\n\n\n<ul><li><strong>fetch()</strong>&nbsp;− Fetch plugin is used for handling HTTP requests. You can use some other AJAX library if you want.</li><li><strong>animatorCSS()</strong>&nbsp;− This plugin offers a way of handling CSS animations.</li><li><strong>animator-velocity()</strong>&nbsp;− Instead of CSS animations, you can use Velocity animation library. These plugins enable us to use Velocity inside Aurelia apps.</li><li><strong>dialog()</strong>&nbsp;− Dialog plugin offers a highly customizable modal window.</li><li><strong>i18n()</strong>&nbsp;− This is the plugin for internalization and localization.</li><li><strong>ui-virtualization()</strong>&nbsp;− Virtualization is a useful library for handling large performance heavy UI tasks.</li><li><strong>validation()</strong>&nbsp;− Use this plugin when you need to validate your data.</li></ul>\n\n\n\n<p>All plugins explained above are officially maintained by the Aurelia Core Team at the moment of writing this tutorial. There will be some other useful plugins added in future. Following example shows how to configure your app to use plugins.</p>\n\n\n\n<h2>Installing Plugins</h2>\n\n\n\n<p>If, for example, we want to use&nbsp;<strong>animator-css</strong>&nbsp;and&nbsp;<strong>animator-velocity</strong>, we need to install it first.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>jspm install aurelia-animator-css\nC:\\Users\\username\\Desktop\\aureliaApp>jspm install aurelia-animator-velocity\n</code></pre>\n\n\n\n<p>In the last chapter, you learnt how to use manual configuration. We can add our plugins in&nbsp;<strong>main.js</strong>&nbsp;file.</p>\n\n\n\n<h3>main.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export function configure(aurelia) {\n   aurelia.use\n   .defaultBindingLanguage()\n   .defaultResources()\n   .developmentLogging()\n   .router()\n   .history()\n   .eventAggregator()\n   .plugin('aurelia-animatorCSS')\n   .plugin('aurelia-animator-velocity')\n\n   aurelia.start().then(() => aurelia.setRoot());\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>When you start building your app, most of the time you will want to use some additional plugins. In this chapter, you will learn how to use plugins in Aurelia framework. Standard Plugins In the last chapter, we saw how to use default configuration in Aurelia framework. If you are using default configuration, standard set [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2919"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2919"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2919/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2919"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2919"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2919"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2921,"date":"2020-11-23T10:36:12","date_gmt":"2020-11-23T10:36:12","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2921"},"modified":"2020-11-23T10:36:12","modified_gmt":"2020-11-23T10:36:12","slug":"aurelia-data-binding","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-data-binding/","title":{"rendered":"Aurelia &#8211; Data Binding"},"content":{"rendered":"\n<p>Aurelia has its own data-binding system. In this chapter, you will learn how to bind data with Aurelia, and also explain the different binding mechanics.</p>\n\n\n\n<h2>Simple Binding</h2>\n\n\n\n<p>You already saw simple binding in some of our previous chapters.&nbsp;<strong>${&#8230;}</strong>syntax is used to link veiw-model and view.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {  \n   constructor() {\n      this.myData = 'Welcome to Aurelia app!';\n   }\n}</code></pre>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;h3>${myData}&lt;/h3>\n&lt;/template></code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-data-binding-simple.jpg\" alt=\"Aurelia Data Binding Simple\"/></figure>\n\n\n\n<h2>Two-Way Binding</h2>\n\n\n\n<p>The beauty of Aurelia is in its simplicity. The two-way data binding is automatically set, when we bind to&nbsp;<strong>input</strong>&nbsp;fields</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {  \n   constructor() {\n      this.myData = 'Enter some text!';\n   }\n}</code></pre>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;input id = \"name\" type = \"text\" value.bind = \"myData\" />\n   &lt;h3>${myData}&lt;/h3>\n&lt;/template></code></pre>\n\n\n\n<p>Now, we have our view-model and view linked. Whenever we enter some text inside the&nbsp;<strong>input</strong>&nbsp;field, the view will be updated.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-data-binding-two-way.jpg\" alt=\"Aurelia Data Binding Two Way\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Aurelia has its own data-binding system. In this chapter, you will learn how to bind data with Aurelia, and also explain the different binding mechanics. Simple Binding You already saw simple binding in some of our previous chapters.&nbsp;${&#8230;}syntax is used to link veiw-model and view. app.js app.html Two-Way Binding The beauty of Aurelia is in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2921"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2921"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2921/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2921"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2921"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2921"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2923,"date":"2020-11-23T10:37:07","date_gmt":"2020-11-23T10:37:07","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2923"},"modified":"2020-11-23T10:37:07","modified_gmt":"2020-11-23T10:37:07","slug":"aurelia-binding-behavior","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-binding-behavior/","title":{"rendered":"Aurelia &#8211; Binding Behavior"},"content":{"rendered":"\n<p>In this chapter, you will learn how to use&nbsp;<strong>behaviors</strong>. You can think of binding behavior as a filter that can change the binding data and display it in a different format.</p>\n\n\n\n<h2>Throttle</h2>\n\n\n\n<p>This behavior is used to set how often should some binding update take place. We can use&nbsp;<strong>throttle</strong>&nbsp;to slow down the rate of updating input view-model. Consider the example from the last chapter. The default rate is&nbsp;<strong>200 ms</strong>. We can change that to&nbsp;<strong>2 sec</strong>&nbsp;by adding&nbsp;<strong>&amp; throttle:2000</strong>&nbsp;to our input.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {  \n   constructor() {\n      this.myData = 'Enter some text!';\n   }\n}</code></pre>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;input id = \"name\" type = \"text\" value.bind = \"myData &amp; throttle:2000\" />\n   &lt;h3>${myData}&lt;/h3>\n&lt;/template></code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-binding-behavior-throttle.jpg\" alt=\"Aurelia Binding Behavior Throttle\"/></figure>\n\n\n\n<h2>Debounce</h2>\n\n\n\n<p><strong>debounce</strong>&nbsp;is almost the same as&nbsp;<strong>throttle</strong>. The difference being, debounce will update the binding after the user has stopped typing. The following example will update the binding if the user stops typing for two seconds.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {  \n   constructor() {\n      this.myData = 'Enter some text!';\n   }\n}</code></pre>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;input id = \"name\" type = \"text\" value.bind = \"myData &amp; debounce:2000\" />\n   &lt;h3>${myData}&lt;/h3>\n&lt;/template></code></pre>\n\n\n\n<h2>oneTime</h2>\n\n\n\n<p><strong>oneTime</strong>&nbsp;is the most efficient behavior performance wise. You should always use it when you know that data should be bound only once.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {  \n   constructor() {\n      this.myData = 'Enter some text!';\n   }\n}</code></pre>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;input id = \"name\" type = \"text\" value.bind = \"myData &amp; oneTime\" />\n   &lt;h3>${myData}&lt;/h3>\n&lt;/template></code></pre>\n\n\n\n<p>The above example will bind the text to the view. However, if we change the default text, nothing will happen since it is bound only once.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to use&nbsp;behaviors. You can think of binding behavior as a filter that can change the binding data and display it in a different format. Throttle This behavior is used to set how often should some binding update take place. We can use&nbsp;throttle&nbsp;to slow down the rate of updating [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2923"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2923"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2923/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2923"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2923"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2923"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2925,"date":"2020-11-23T10:42:40","date_gmt":"2020-11-23T10:42:40","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2925"},"modified":"2020-11-23T10:42:40","modified_gmt":"2020-11-23T10:42:40","slug":"aurelia-converters","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-converters/","title":{"rendered":"Aurelia &#8211; Converters"},"content":{"rendered":"\n<p>If you need to convert some values in Aurelia app, you can use&nbsp;<strong>converters</strong>&nbsp;instead of manually converting values to a desired format.</p>\n\n\n\n<h2>Convert Date</h2>\n\n\n\n<p>When we want to convert the default date value to some specific format, we can use&nbsp;<strong>momentJS</strong>&nbsp;library. This is a small library used for manipulating dates.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>jspm install moment\n</code></pre>\n\n\n\n<p>Let&#8217;s create a new file&nbsp;<strong>converters.js</strong>. We will use this file to add converter specific code. Use the following command or create the file manually.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>touch converters.js\n</code></pre>\n\n\n\n<h3>converter.js</h3>\n\n\n\n<p>Inside this file, we will import&nbsp;<strong>moment</strong>&nbsp;library and set&nbsp;<strong>DateFormatValueConverter</strong>&nbsp;to return only month, day and year values without additional data. Important thing to note is that Aurelia can recognize any class that ends with&nbsp;<strong>ValueConverter</strong>. This is why our class name is&nbsp;<strong>DateFormatValueConverter</strong>. This class will be registered as&nbsp;<strong>dateFormat</strong>&nbsp;and we can later use it inside view.</p>\n\n\n\n<h3>converters.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import moment from 'moment';\n\nexport class DateFormatValueConverter {\n   toView(value) {\n      return moment(value).format('M/D/YYYY');\n   }\n}</code></pre>\n\n\n\n<p>In&nbsp;<strong>app.js</strong>, we will just use the current date. This will be our view-model.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {\n   constructor() {\n      this.currentDate = new Date();\n   }\n}</code></pre>\n\n\n\n<p>We already discussed&nbsp;<strong>require</strong>&nbsp;in&nbsp;<strong>custom-elements</strong>&nbsp;chapter. The pipe symbol | is used to apply the converter. We are only using&nbsp;<strong>dateFormat</strong>&nbsp;since this is how Aurelia is registering&nbsp;<strong>DateFormatValueConverter</strong>.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;require from = \"./converters\">&lt;/require>\n\n   &lt;h3>${currentDate | dateFormat}&lt;/h3>\n&lt;/template></code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-converters-date.jpg\" alt=\"Aurelia Converters Date\"/></figure>\n\n\n\n<h2>Convert Currency</h2>\n\n\n\n<p>This is an example of currency formatting. You will notice that the concept is the same as in the above example. First, we need to install&nbsp;<strong>numeral</strong>&nbsp;library from the&nbsp;<strong>command prompt</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>jspm install numeral\n</code></pre>\n\n\n\n<p>The Converter will set the currency format.</p>\n\n\n\n<h3>converters.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import numeral from 'numeral';\n\nexport class CurrencyFormatValueConverter {\n   toView(value) {\n      return numeral(value).format('($0,0.00)');\n   }\n}</code></pre>\n\n\n\n<p>View-model will just generate a random number. We will use this as currency value and update it every second.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {\n   constructor() {\n      this.update();\n      setInterval(() => this.update(), 1000);\n   }\n   update() {\n      this.myCurrency = Math.random() * 1000;\n   }\n}</code></pre>\n\n\n\n<p>Our view will show the randomly generated number transformed as a currency.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;require from = \"./converters\">&lt;/require>\n\n   &lt;h3>${myCurrency | currencyFormat}&lt;/h3>\n&lt;/template></code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-converters-currency.jpg\" alt=\"Aurelia Converters Currency\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>If you need to convert some values in Aurelia app, you can use&nbsp;converters&nbsp;instead of manually converting values to a desired format. Convert Date When we want to convert the default date value to some specific format, we can use&nbsp;momentJS&nbsp;library. This is a small library used for manipulating dates. Let&#8217;s create a new file&nbsp;converters.js. We will [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2925"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2925"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2925/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2925"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2925"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2925"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2927,"date":"2020-11-23T10:43:28","date_gmt":"2020-11-23T10:43:28","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2927"},"modified":"2020-11-23T10:43:28","modified_gmt":"2020-11-23T10:43:28","slug":"aurelia-events","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-events/","title":{"rendered":"Aurelia &#8211; Events"},"content":{"rendered":"\n<p>In this chapter, you will learn about Aurelia events.</p>\n\n\n\n<h2>Event Delegate</h2>\n\n\n\n<p>Even delegation is a useful concept where the event handler is attached to one top level element instead of multiple elements on the DOM. This will improve the application memory efficiency and should be used whenever possible.</p>\n\n\n\n<p>This is a simple example of using event delegation with Aurelia framework. Our view will have a button with&nbsp;<strong>click.delegate</strong>&nbsp;event attached.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;button click.delegate = \"myFunction()\">CLICK ME&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<p>Once the button is clicked,&nbsp;<strong>myFunction()</strong>&nbsp;will be called.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {\n   myFunction() {\n      console.log('The function is triggered...');\n   }\n}</code></pre>\n\n\n\n<p>We will get the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-events-delegate.jpg\" alt=\"Aurelia Events Delegate\"/></figure>\n\n\n\n<h2>Event Trigger</h2>\n\n\n\n<p>There are some cases when you can&#8217;t use delegation. Some JavaScript events don’t support delegation; IOS supports it for some elements. To find out which events allow delegation, you can search for a <strong>bubble</strong> property of any event here. In these cases, you can use <strong>trigger()</strong> method.</p>\n\n\n\n<p>The same functionality from the above example can be created with&nbsp;<strong>click.trigger</strong>.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;button click.trigger = \"myFunction()\">CLICK ME&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {\n   myFunction() {\n      console.log('The function is triggered...');\n   }\n}</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn about Aurelia events. Event Delegate Even delegation is a useful concept where the event handler is attached to one top level element instead of multiple elements on the DOM. This will improve the application memory efficiency and should be used whenever possible. This is a simple example of using [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2927"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2927"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2927/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2927"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2927"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2927"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2929,"date":"2020-11-23T10:43:59","date_gmt":"2020-11-23T10:43:59","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2929"},"modified":"2020-11-23T10:43:59","modified_gmt":"2020-11-23T10:43:59","slug":"aurelia-event-aggregator","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-event-aggregator/","title":{"rendered":"Aurelia &#8211; Event Aggregator"},"content":{"rendered":"\n<p>Event aggregator should be used when your events need to be attached to more listeners or when you need to observe some functionality of your app and wait for the data update.</p>\n\n\n\n<p>Aurelia event aggregator has three methods. The&nbsp;<strong>publish</strong>&nbsp;method will fire off events and can be used by multiple subscribers. For subscribing to an event, we can use the&nbsp;<strong>subscribe</strong>&nbsp;method. And finally, we can use the&nbsp;<strong>dispose</strong>&nbsp;method to detach the subscribers. The following example demonstrates this.</p>\n\n\n\n<p>Our view will just have three buttons for each of the three functionalities.</p>\n\n\n\n<h2>app.html</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;button click.delegate = \"publish()\">PUBLISH&lt;/button>&lt;br/>\n   &lt;button click.delegate = \"subscribe()\">SUBSCRIBE&lt;/button>&lt;br/>\n   &lt;button click.delegate = \"dispose()\">DISPOSE&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<p>We need to import&nbsp;<strong>eventAggregator</strong>&nbsp;and inject it before we are able to use it.</p>\n\n\n\n<h2>app.js</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import {inject} from 'aurelia-framework';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\n@inject(EventAggregator)\nexport class App {\n   constructor(eventAggregator) {\n      this.eventAggregator = eventAggregator;\n   }\n   publish() {\n      var payload = 'This is some data...';\n      this.eventAggregator.publish('myEventName', payload);\n   }\n   subscribe() {\n      this.subscriber = this.eventAggregator.subscribe('myEventName', payload => {\n         console.log(payload);\n      });\n   }\n   dispose() {\n      this.subscriber.dispose();\n      console.log('Disposed!!!');\n   }\n}</code></pre>\n\n\n\n<p>We need to click the&nbsp;<strong>SUBSCRIBE</strong>&nbsp;button to listen for data that will be published in future. Once the subscriber is attached, whenever new data is sent, the console will log it. If we click the&nbsp;<strong>PUBLISH</strong>&nbsp;button five times, we will see that it is logged every time.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-event-aggregator-example.jpg\" alt=\"Aurelia Event Aggregator Example\"/></figure>\n\n\n\n<p>We can also detach our subscriber by clicking the&nbsp;<strong>DISPOSE</strong>&nbsp;button.</p>\n","protected":false},"excerpt":{"rendered":"<p>Event aggregator should be used when your events need to be attached to more listeners or when you need to observe some functionality of your app and wait for the data update. Aurelia event aggregator has three methods. The&nbsp;publish&nbsp;method will fire off events and can be used by multiple subscribers. For subscribing to an event, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2929"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2929"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2929/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2929"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2929"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2929"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2931,"date":"2020-11-23T10:45:01","date_gmt":"2020-11-23T10:45:01","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2931"},"modified":"2020-11-23T10:45:01","modified_gmt":"2020-11-23T10:45:01","slug":"aurelia-forms","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-forms/","title":{"rendered":"Aurelia &#8211; Forms"},"content":{"rendered":"\n<p>In this chapter, you will learn how to use forms in Aurelia framework.</p>\n\n\n\n<h2>Text Input</h2>\n\n\n\n<p>First, we will see how to submit an&nbsp;<strong>input</strong>&nbsp;form. The view will have two input forms for username and password. We will use&nbsp;<strong>value.bind</strong>&nbsp;for data binding.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>  \n   &lt;form role = \"form\" submit.delegate = \"signup()\">\n      \n      &lt;label for = \"email\">Email&lt;/label>\n      &lt;input type = \"text\" value.bind = \"email\" placeholder = \"Email\">\n\n      &lt;label for = \"password\">Password&lt;/label>\n      &lt;input type = \"password\" value.bind = \"password\" placeholder = \"Password\">\n\n      &lt;button type = \"submit\">Signup&lt;/button>\n   &lt;/form>\n&lt;/template></code></pre>\n\n\n\n<p>The signup function will just take the username and password values from the inputs and log it in the developer’s console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {\n   email = '';\n   password = '';\n\n   signup() {\n      var myUser = { email: this.email, password: this.password }\n      console.log(myUser);\n   };\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-forms-input.jpg\" alt=\"Aurelia Forms Input\"/></figure>\n\n\n\n<h2>Checkbox</h2>\n\n\n\n<p>The following example will demonstrate how to submit a checkbox with Aurelia framework. We will create one checkbox and bind the&nbsp;<strong>checked</strong>&nbsp;value to our view-model.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;form role = \"form\" submit.delegate = \"submit()\">\n   \n      &lt;label for = \"checkbox\">Checkbox&lt;/label>\n      &lt;input type = \"checkbox\" id = \"checkbox\" checked.bind = \"isChecked\">&lt;br/>\n      &lt;button type = \"submit\">SUBMIT&lt;/button>\n      \n   &lt;/form>\n&lt;/template></code></pre>\n\n\n\n<p>Form submitting will just log the&nbsp;<strong>checked</strong>&nbsp;value in the console.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App  {\n   constructor() {\n      this.isChecked = false;\n   }\n   submit() {\n      console.log(\"isChecked: \" + this.isChecked);\n   }\n}</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-forms-checkbox.jpg\" alt=\"Aurelia Forms Checkbox\"/></figure>\n\n\n\n<h2>Radio Buttons</h2>\n\n\n\n<p>The following example will demonstrate how to submit&nbsp;<strong>radio buttons</strong>. The syntax&nbsp;<strong>repeat.for = &#8220;option of options&#8221;</strong>&nbsp;will repeat through an array of objects and create a radio button for each object. This is a neat way of dynamically creating elements in Aurelia framework. Rest is the same as in the previous examples. We are binding the&nbsp;<strong>model</strong>&nbsp;and the&nbsp;<strong>checked</strong>&nbsp;values.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;form role = \"form\" submit.delegate = \"submit()\">\n\t\n      &lt;label repeat.for = \"option of options\">\n         &lt;input type = \"radio\" name = \"myOptions\" \n            model.bind = \"option\" checked.bind = \"$parent.selectedOption\"/>\n            ${option.text}\n      &lt;/label>\n      &lt;br/>\n\t\t\n      &lt;button type = \"submit\">SUBMIT&lt;/button>\n   &lt;/form>\n&lt;/template></code></pre>\n\n\n\n<p>In our view-model, we will create an array of objects&nbsp;<strong>this.options</strong>&nbsp;and specify that the first radio button is checked. Again, the&nbsp;<strong>SUBMIT</strong>&nbsp;button will just log in the console which radio button is checked.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class PeriodPanel {\n   options = &#91;];\n   selectedOption = {};\n\n   constructor() {\n      this.options = &#91;\n         {id:1, text:'First'}, \n         {id:2, text:'Second'}, \n         {id:3, text:'Third'}\n      ]; \n      this.selectedOption = this.options&#91;0];\n   }\n   submit() {\n      console.log('checked: ' + this.selectedOption.id);\n   }\n}</code></pre>\n\n\n\n<p>If we check the third radio button and submit our form, the console will show it.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-forms-radio.jpg\" alt=\"Aurelia Forms Radio\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to use forms in Aurelia framework. Text Input First, we will see how to submit an&nbsp;input&nbsp;form. The view will have two input forms for username and password. We will use&nbsp;value.bind&nbsp;for data binding. app.html The signup function will just take the username and password values from the inputs and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2931"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2931"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2931/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2931"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2931"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2931"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2933,"date":"2020-11-23T10:45:36","date_gmt":"2020-11-23T10:45:36","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2933"},"modified":"2020-11-23T10:45:36","modified_gmt":"2020-11-23T10:45:36","slug":"aurelia-http","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-http/","title":{"rendered":"Aurelia &#8211; HTTP"},"content":{"rendered":"\n<p>In this chapter, you will learn how to work with HTTP requests in Aurelia framework.</p>\n\n\n\n<h2>Step 1 &#8211; Create a View</h2>\n\n\n\n<p>Let&#8217;s create four buttons that will be used for sending requests to our API.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;button click.delegate = \"getData()\">GET&lt;/button>\n   &lt;button click.delegate = \"postData()\">POST&lt;/button>\n   &lt;button click.delegate = \"updateData()\">PUT&lt;/button>\n   &lt;button click.delegate = \"deleteData()\">DEL&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<h2>Step 2 &#8211; Create a View-model</h2>\n\n\n\n<p>For sending requests to the server, Aurelia recommends&nbsp;<strong>fetch</strong>&nbsp;client. We are creating functions for every requests we need (GET, POST, PUT and DELETE).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'fetch';\nimport {HttpClient, json} from 'aurelia-fetch-client';\n\nlet httpClient = new HttpClient();\n\nexport class App {\n   getData() {\n      httpClient.fetch('http://jsonplaceholder.typicode.com/posts/1')\n      .then(response => response.json())\n      .then(data => {\n         console.log(data);\n      });\n   }\n   myPostData = { \n      id: 101\n   }\n\tpostData(myPostData) {\n      httpClient.fetch('http://jsonplaceholder.typicode.com/posts', {\n         method: \"POST\",\n         body: JSON.stringify(myPostData)\n      })\n\t\t\n      .then(response => response.json())\n      .then(data => {\n         console.log(data);\n      });\n   }\n   myUpdateData = {\n      id: 1\n   }\n\tupdateData(myUpdateData) {\n      httpClient.fetch('http://jsonplaceholder.typicode.com/posts/1', {\n         method: \"PUT\",\n         body: JSON.stringify(myUpdateData)\n      })\n\t\t\n      .then(response => response.json())\n      .then(data => {\n         console.log(data);\n      });\n   }\n   deleteData() {\n      httpClient.fetch('http://jsonplaceholder.typicode.com/posts/1', {\n         method: \"DELETE\"\n      })\n      .then(response => response.json())\n      .then(data => {\n         console.log(data);\n      });\n   }\n}</code></pre>\n\n\n\n<p>We can run the app and click&nbsp;<strong>GET</strong>,&nbsp;<strong>POST</strong>,&nbsp;<strong>PUT</strong>&nbsp;and&nbsp;<strong>DEL</strong>&nbsp;buttons, respectively. We can see in the console that every request is successful, and the result is logged.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-http-example.jpg\" alt=\"Aurelia HTTP Example\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to work with HTTP requests in Aurelia framework. Step 1 &#8211; Create a View Let&#8217;s create four buttons that will be used for sending requests to our API. app.html Step 2 &#8211; Create a View-model For sending requests to the server, Aurelia recommends&nbsp;fetch&nbsp;client. We are creating functions for [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2933"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2933"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2933/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2933"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2933"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2933"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2935,"date":"2020-11-23T10:46:07","date_gmt":"2020-11-23T10:46:07","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2935"},"modified":"2020-11-23T10:46:07","modified_gmt":"2020-11-23T10:46:07","slug":"aurelia-refs","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-refs/","title":{"rendered":"Aurelia &#8211; Refs"},"content":{"rendered":"\n<p>In this chapter, you will see some simple examples of Aurelia refs. You can use it to create a reference to a particular object. You can create a reference to elements or attributes, as seen in the following table.</p>\n\n\n\n<h2>Reference Table</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Example &amp; Description</th></tr><tr><td>1</td><td><strong>ref = &#8220;myRef&#8221;</strong>Used for creating a reference to DOM element.</td></tr><tr><td>2</td><td><strong>attribute-name.ref = &#8220;myRef&#8221;</strong>Used for creating a reference to custom attribute&#8217;s view-model.</td></tr><tr><td>3</td><td><strong>view-model.ref = &#8220;myRef</strong>Used for creating a reference to custom element&#8217;s view-model.</td></tr><tr><td>4</td><td><strong>view.ref = &#8220;myRef&#8221;</strong>Used for creating a reference to custom elements view instance.</td></tr><tr><td>5</td><td><strong>rcontroller.ref = &#8220;myRef&#8221;</strong>Used for creating a reference to custom element&#8217;s controller instance.</td></tr></tbody></table></figure>\n\n\n\n<p>In the following example, we will create a reference to the&nbsp;<strong>input</strong>&nbsp;element. We will use the default class syntax as a&nbsp;<strong>view-model</strong>.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App { }    </code></pre>\n\n\n\n<p>We are creating a reference to the&nbsp;<strong>input</strong>&nbsp;element by adding the&nbsp;<strong>ref = &#8220;name&#8221;</strong>&nbsp;attribute.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;input type = \"text\" ref = \"name\">&lt;br/>\n   &lt;h3>${name.value}&lt;/h3>\n&lt;/template>    </code></pre>\n\n\n\n<p>When we run the app, we will see that the text entered into the input field is rendered on the screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-refs-example.jpg\" alt=\"Aurelia Refs Example\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will see some simple examples of Aurelia refs. You can use it to create a reference to a particular object. You can create a reference to elements or attributes, as seen in the following table. Reference Table Sr.No Example &amp; Description 1 ref = &#8220;myRef&#8221;Used for creating a reference to DOM [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2935"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2935"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2935/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2935"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2935"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2935"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2937,"date":"2020-11-23T10:47:24","date_gmt":"2020-11-23T10:47:24","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2937"},"modified":"2020-11-23T10:47:24","modified_gmt":"2020-11-23T10:47:24","slug":"aurelia-routing","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-routing/","title":{"rendered":"Aurelia &#8211; Routing"},"content":{"rendered":"\n<p>Routing is an important part of every application. In this chapter, you will learn how to use the router in Aurelia framework.</p>\n\n\n\n<h2>Step 1 &#8211; Create Pages</h2>\n\n\n\n<p>We have already created a components folder in one of the former chapters. If you don&#8217;t have it created already, you should place it inside the&nbsp;<strong>src</strong>&nbsp;folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\src>mkdir components\n</code></pre>\n\n\n\n<p>Inside this folder, we will create&nbsp;<strong>home</strong>&nbsp;and&nbsp;<strong>about</strong>&nbsp;directories.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\src\\components>mkdir home\nC:\\Users\\username\\Desktop\\aureliaApp\\src\\components>mkdir about\n</code></pre>\n\n\n\n<p>Inside the&nbsp;<strong>home</strong>&nbsp;folder, we need to create&nbsp;<strong>view</strong>&nbsp;and&nbsp;<strong>view-model</strong>&nbsp;files.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\src\\components\\home>touch home.js\nC:\\Users\\username\\Desktop\\aureliaApp\\src\\components\\home>touch home.html\n</code></pre>\n\n\n\n<p>We also need&nbsp;<strong>view</strong>&nbsp;and&nbsp;<strong>view-model</strong>&nbsp;for&nbsp;<strong>about</strong>&nbsp;page.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\src\\components\\about>touch about.js\nC:\\Users\\username\\Desktop\\aureliaApp\\src\\components\\about>touch about.html\n</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− You can also create all the above folders manually.</p>\n\n\n\n<h2>Step 2 &#8211; Pages</h2>\n\n\n\n<p>Next, we need to add some default code to the files we created.</p>\n\n\n\n<h3>home.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;h1>HOME&lt;/h1>\n&lt;/template></code></pre>\n\n\n\n<h3>home.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class Home {}</code></pre>\n\n\n\n<h3>about.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;h1>ABOUT&lt;/h1>\n&lt;/template></code></pre>\n\n\n\n<h3>about.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class About {}</code></pre>\n\n\n\n<h2>Step 3 &#8211; Router</h2>\n\n\n\n<p>We will create&nbsp;<strong>view-model</strong>&nbsp;for&nbsp;<strong>router</strong>&nbsp;inside&nbsp;<strong>app.js</strong>&nbsp;file.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {\n   configureRouter(config, router) {\n      config.title = 'Aurelia';\n\t\t\n      config.map(&#91;\n         { route: &#91;'','home'],  name: 'home',  \n            moduleId: './components/home/home',  nav: true, title:'Home' },\n         { route: 'about',  name: 'about',\n            moduleId: './components/about/about',    nav: true, title:'About' }\n      ]);\n\n      this.router = router;\n   }\n}</code></pre>\n\n\n\n<p>Our router&nbsp;<strong>view</strong>&nbsp;will be placed in&nbsp;<strong>app.html</strong>.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;nav>\n      &lt;ul>\n         &lt;li repeat.for = \"row of router.navigation\">\n            &lt;a href.bind = \"row.href\">${row.title}&lt;/a>\n         &lt;/li>\n      &lt;/ul>\n   &lt;/nav>\t\n   &lt;router-view>&lt;/router-view>\n&lt;/template></code></pre>\n\n\n\n<p>When we run the app, we will can change the routes by clicking&nbsp;<strong>home</strong>&nbsp;or about links.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-routing-example.jpg\" alt=\"Aurelia Routing Example\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Routing is an important part of every application. In this chapter, you will learn how to use the router in Aurelia framework. Step 1 &#8211; Create Pages We have already created a components folder in one of the former chapters. If you don&#8217;t have it created already, you should place it inside the&nbsp;src&nbsp;folder. Inside this [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2937"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2937"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2937/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2937"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2937"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2937"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2939,"date":"2020-11-23T10:48:17","date_gmt":"2020-11-23T10:48:17","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2939"},"modified":"2020-11-23T10:48:17","modified_gmt":"2020-11-23T10:48:17","slug":"aurelia-history","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-history/","title":{"rendered":"Aurelia &#8211; History"},"content":{"rendered":"\n<p><br>In this chapter, you will learn how to use&nbsp;<strong>aurelia-history</strong>&nbsp;plugin.</p>\n\n\n\n<h2>Step 1 &#8211; Install the Plugin</h2>\n\n\n\n<p>This plugin is already available as a part of the standard configuration. If you have set&nbsp;<strong>aurelia.use.standardConfiguration()</strong>&nbsp;as a part of a manual configuration, you are ready to go.</p>\n\n\n\n<h3>main.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export function configure(aurelia) {\n   aurelia.use\n   .standardConfiguration()\n   .developmentLogging();\n\n   aurelia.start().then(() => aurelia.setRoot());\n}</code></pre>\n\n\n\n<h2>Step 2 &#8211; Using the History</h2>\n\n\n\n<p>We will use an example from the last chapter (<strong>Aurelia &#8211; Routing</strong>). If we want to set the functionality for navigating back or forward, we can use the&nbsp;<strong>history</strong>&nbsp;object with&nbsp;<strong>back()</strong>&nbsp;and&nbsp;<strong>forward()</strong>&nbsp;methods. We will add this after a router configuration.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export class App {\n   configureRouter(config, router) {\n      config.title = 'Aurelia';\n      config.map(&#91;\n         { route: &#91;'','home'],  name: 'home',  \n            moduleId: './pages/home/home',  nav: true, title:'Home' },\n         { route: 'about',  name: 'about',    \n            moduleId: './pages/about/about',    nav: true, title:'About' }\n      ]);\n      this.router = router;\n   }\n   goBack() {\n      history.back();\n   }\n\tgoForward() {\n      history.forward();\n   }\n}</code></pre>\n\n\n\n<p>Now, let&#8217;s add two buttons to our&nbsp;<strong>view</strong>.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;nav>\n      &lt;ul>\n         &lt;li repeat.for = \"row of router.navigation\">      \n            &lt;a href.bind = \"row.href\">${row.title}&lt;/a>\n         &lt;/li>\n      &lt;/ul>\n   &lt;/nav>\n\t\n   &lt;button click.delegate = \"goBack()\">&lt;/button> \n   //The button used for navigationg back...\n\t\n   &lt;button click.delegate = \"goForward()\">&lt;/button> \n   //The button used for navigationg forward...\n\t\n   &lt;router-view>&lt;/router-view>\n&lt;/template></code></pre>\n\n\n\n<p>The users can navigate back and forward by clicking the buttons we added.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-history-example.jpg\" alt=\"Aurelia History Example\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to use&nbsp;aurelia-history&nbsp;plugin. Step 1 &#8211; Install the Plugin This plugin is already available as a part of the standard configuration. If you have set&nbsp;aurelia.use.standardConfiguration()&nbsp;as a part of a manual configuration, you are ready to go. main.js Step 2 &#8211; Using the History We will use an example from [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2939"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2939"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2939/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2939"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2939"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2939"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2941,"date":"2020-11-23T10:49:01","date_gmt":"2020-11-23T10:49:01","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2941"},"modified":"2020-11-23T10:49:01","modified_gmt":"2020-11-23T10:49:01","slug":"aurelia-animations","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-animations/","title":{"rendered":"Aurelia &#8211; Animations"},"content":{"rendered":"\n<p>In this chapter, you will learn how to use CSS animations in Aurelia framework.</p>\n\n\n\n<h2>Step 1 &#8211; View</h2>\n\n\n\n<p>Our view will have one element that will be animated and a button to trigger the&nbsp;<strong>animateElement()</strong>&nbsp;function.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;div class = \"myElement\">&lt;/div>\n   &lt;button click.delegate = \"animateElement()\">ANIMATE&lt;/button>\n&lt;/template></code></pre>\n\n\n\n<h2>Step 2 &#8211; View-model</h2>\n\n\n\n<p>Inside our JavaScript file, we will import&nbsp;<strong>CssAnimator</strong>&nbsp;plugin and inject it as a dependency. The&nbsp;<strong>animateElement</strong>&nbsp;function will call the animator to start animation. The animation will be created in the next step.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import {CssAnimator} from 'aurelia-animator-css';\nimport {inject} from 'aurelia-framework';\n\n@inject(CssAnimator, Element)\nexport class App {\n   constructor(animator, element) {\n      this.animator = animator;\n      this.element = element;\n   }\n\n   animateElement() {\n      var myElement = this.element.querySelector('.myElement');\n      this.animator.animate(myElement, 'myAnimation');\n   }\n}</code></pre>\n\n\n\n<h2>Step 3 − Style</h2>\n\n\n\n<p>We will write CSS inside&nbsp;<strong>styles/styles.css</strong>&nbsp;file.&nbsp;<strong>.myAnimation-add</strong>&nbsp;is the starting point of an animation while&nbsp;<strong>.myAnimation-remove</strong>&nbsp;is called when the animation is complete.</p>\n\n\n\n<h3>styles.css</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>.myElement {\n   width:100px;\n   height: 100px;\n   border:1px solid blue;\n}\n\n.myAnimation-add {\n   -webkit-animation: changeBack 3s;\n   animation: changeBack 3s;\n}\n\n.myAnimation-remove {\n   -webkit-animation: fadeIn 3s;\n   animation: fadeIn 3s;\n}\n\n@-webkit-keyframes changeBack {\n   0% { background-color: #e6efff; }\n   25% { background-color: #4d91ff; }\n   50% { background-color: #0058e6; }\n   75% { background-color: #003180; }\n   100% { background-color: #000a1a; }\n}\n\n@keyframes changeBack {\n   0% { background-color: #000a1a; }\n   25% { background-color: #003180; }\n   50% { background-color: #0058e6; }\n   75% { background-color: #4d91ff; }\n   100% { background-color: #e6efff; }\n}</code></pre>\n\n\n\n<p>Once the&nbsp;<strong>ANIMATE</strong>&nbsp;button is clicked, the background color will be changed from light blue to a dark shade. When this animation is complete after three seconds, the element will fade to its starting state.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-animations-example.jpg\" alt=\"Aurelia Animations Example\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to use CSS animations in Aurelia framework. Step 1 &#8211; View Our view will have one element that will be animated and a button to trigger the&nbsp;animateElement()&nbsp;function. app.html Step 2 &#8211; View-model Inside our JavaScript file, we will import&nbsp;CssAnimator&nbsp;plugin and inject it as a dependency. The&nbsp;animateElement&nbsp;function will call [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2941"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2941"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2941/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2941"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2941"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2941"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2943,"date":"2020-11-23T10:50:05","date_gmt":"2020-11-23T10:50:05","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2943"},"modified":"2020-11-23T10:50:05","modified_gmt":"2020-11-23T10:50:05","slug":"aurelia-dialog","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-dialog/","title":{"rendered":"Aurelia &#8211; Dialog"},"content":{"rendered":"\n<p>Aurelia offers a way to implement dialog (modal) window. In this chapter, we will show you how to use it.</p>\n\n\n\n<h2>Step 1 &#8211; Install a Dialog Plugin</h2>\n\n\n\n<p>Dialog plugin can be installed from the&nbsp;<strong>command prompt</strong>&nbsp;window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>jspm install aurelia-dialog\n</code></pre>\n\n\n\n<p>For this plugin to work, we need to use manual bootstrapping. We covered this in the Configuration chapter. Inside&nbsp;<strong>main.js</strong>&nbsp;file, we need to add the&nbsp;<strong>aurelia-dialog</strong>&nbsp;plugin.</p>\n\n\n\n<h3>main.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>export function configure(aurelia) {\n   aurelia.use\n   .standardConfiguration()\n   .developmentLogging()\n   .plugin('aurelia-dialog'); \n\n   aurelia.start().then(() => aurelia.setRoot());\n}</code></pre>\n\n\n\n<h2>Step 2 &#8211; Create Folders and Files</h2>\n\n\n\n<p>First, we will make a new directory called&nbsp;<strong>modal</strong>. Let&#8217;s place it inside the&nbsp;<strong>components</strong>&nbsp;folder. Open the&nbsp;<strong>command prompt</strong>&nbsp;and run the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\src\\components>mkdir modal\n</code></pre>\n\n\n\n<p>In this folder, we will create two new files. These files will represent&nbsp;<strong>view</strong>&nbsp;and&nbsp;<strong>view-model</strong>&nbsp;for our modal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\src\\components\\modal>touch my-modal.html\nC:\\Users\\username\\Desktop\\aureliaApp\\src\\components\\modal>touch my-modal.js\n</code></pre>\n\n\n\n<h2>Step 3 &#8211; Create a Modal</h2>\n\n\n\n<p>First, let&#8217;s add&nbsp;<strong>view-model</strong>&nbsp;code. We need to import and inject&nbsp;<strong>dialog-controller</strong>. This controller is used for handling modal specific functionalities. In the following example, we are using it to centralize a modal horizontally.</p>\n\n\n\n<h3>my-modal.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import {inject} from 'aurelia-framework';\nimport {DialogController} from 'aurelia-dialog';\n\n@inject(DialogController)\n\nexport class Prompt {\n   constructor(controller) {\n      this.controller = controller;\n      this.answer = null;\n\n      controller.settings.centerHorizontalOnly = true;\n   }\n   activate(message) {\n      this.message = message;\n   }\n}</code></pre>\n\n\n\n<p>The&nbsp;<strong>view</strong>&nbsp;code will look like this. The buttons when clicked will open or close the modal.</p>\n\n\n\n<h3>my-modal.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;ai-dialog>\n      &lt;ai-dialog-body>\n         &lt;h2>${message}&lt;/h2>\n      &lt;/ai-dialog-body>\n\n      &lt;ai-dialog-footer>\n         &lt;button click.trigger = \"controller.cancel()\">Cancel&lt;/button>\n         &lt;button click.trigger = \"controller.ok(message)\">Ok&lt;/button>\n      &lt;/ai-dialog-footer>\t\n   &lt;/ai-dialog>\t\n&lt;/template></code></pre>\n\n\n\n<h2>Step 4 &#8211; Trigger a Modal</h2>\n\n\n\n<p>The last step is a function for triggering our modal. We need to import and inject&nbsp;<strong>DialogService</strong>. This service has method&nbsp;<strong>open</strong>, where we can pass&nbsp;<strong>view-model</strong>&nbsp;from&nbsp;<strong>my-modal</strong>&nbsp;file and&nbsp;<strong>model</strong>, so we can dynamically bind the data.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import {DialogService} from 'aurelia-dialog';\nimport {inject} from 'aurelia-framework';\nimport {Prompt} from './components/modal/my-modal';\n\n@inject(DialogService)\n\nexport class App {\n   constructor(dialogService) {\n      this.dialogService = dialogService;\n   }\n   openModal() {\n      this.dialogService.open( {viewModel: Prompt, model: 'Are you sure?' }).then(response => {\n         console.log(response);\n\t\t\t\n         if (!response.wasCancelled) {\n            console.log('OK');\n         } else {\n            console.log('cancelled');\n         }\n         console.log(response.output);\n      });\n   }\n};</code></pre>\n\n\n\n<p>Finally, we will create a button so we can call&nbsp;<strong>openModal</strong>&nbsp;function.</p>\n\n\n\n<h3>app.html</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;button click.trigger = \"openModal()\">OPEN MODAL&lt;/button>\n&lt;template></code></pre>\n\n\n\n<p>If we run the app, we can click the&nbsp;<strong>OPEN MODAL</strong>&nbsp;button to trigger a new modal window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-dialog-modal.jpg\" alt=\"Aurelia Dialog Modal\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Aurelia offers a way to implement dialog (modal) window. In this chapter, we will show you how to use it. Step 1 &#8211; Install a Dialog Plugin Dialog plugin can be installed from the&nbsp;command prompt&nbsp;window. For this plugin to work, we need to use manual bootstrapping. We covered this in the Configuration chapter. Inside&nbsp;main.js&nbsp;file, we [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2943"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2943"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2943/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2943"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2943"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2943"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2945,"date":"2020-11-23T10:52:24","date_gmt":"2020-11-23T10:52:24","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2945"},"modified":"2020-11-23T10:52:24","modified_gmt":"2020-11-23T10:52:24","slug":"aurelia-localization","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-localization/","title":{"rendered":"Aurelia &#8211; Localization"},"content":{"rendered":"\n<p>Aurelia offers&nbsp;<strong>i18n</strong>&nbsp;plugin. In this chapter, you will learn how to localize your app using this plugin.</p>\n\n\n\n<h2>Step 1 &#8211; Install a Plugin</h2>\n\n\n\n<p>Open the&nbsp;<strong>command prompt</strong>&nbsp;window and run the following code to install&nbsp;<strong>i18n</strong>&nbsp;plugin.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>jspm install aurelia-i18n\n</code></pre>\n\n\n\n<p>We also need to install backend plugin.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>jspm install npm:i18next-xhr-backend\n</code></pre>\n\n\n\n<h2>Step 2 &#8211; Create Folders and Files</h2>\n\n\n\n<p>In the project root folder, we need to create a&nbsp;<strong>locale</strong>&nbsp;directory.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>mkdir locale\n</code></pre>\n\n\n\n<p>In this folder, you need to add new folders for any language you want. We will create&nbsp;<strong>en</strong>&nbsp;with&nbsp;<strong>translation.js</strong>&nbsp;file inside.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\locale>mkdir en\nC:\\Users\\username\\Desktop\\aureliaApp\\locale\\en>touch translation.json    \n</code></pre>\n\n\n\n<h2>Step 3 &#8211; Use a Plugin</h2>\n\n\n\n<p>You need to use manual bootstrapping to be able to use this plugin. Check the Configuration chapter for more information. We need to add&nbsp;<strong>i18n</strong>&nbsp;plugin to the&nbsp;<strong>main.js</strong>&nbsp;file.</p>\n\n\n\n<h3>main.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import {I18N} from 'aurelia-i18n';\nimport XHR from 'i18next-xhr-backend';\n\nexport function configure(aurelia) {\n   aurelia.use\n   .standardConfiguration()\n   .developmentLogging()\n\t\n   .plugin('aurelia-i18n', (instance) => {\n      // register backend plugin\n      instance.i18next.use(XHR);\n\n      // adapt options to your needs (see http://i18next.com/docs/options/)\n      instance.setup({\n         backend: {                                  \n            loadPath: '/locales/{{lng}}/{{ns}}.json',\n         },\n\t\t\t\t\n         lng : 'de',\n         attributes : &#91;'t','i18n'],\n         fallbackLng : 'en',\n         debug : false\n      });\n   });\n\n   aurelia.start().then(a => a.setRoot());\n}</code></pre>\n\n\n\n<h2>Step 4 &#8211; Translation JSON File</h2>\n\n\n\n<p>This is the file where you can set translation values. We will use an example from an official documentation. The&nbsp;<strong>de-DE</strong>&nbsp;folder should actually be used for translating to German language, however we will use English phrases instead, for easier understanding.</p>\n\n\n\n<h3>translation.json</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"score\": \"Score: {{score}}\",\n   \"lives\": \"{{count}} life remaining\",\n   \"lives_plural\": \"{{count}} lives remaining\",\n   \"lives_indefinite\": \"a life remaining\",\n   \"lives_plural_indefinite\": \"some lives remaining\",\n   \"friend\": \"A friend\",\n   \"friend_male\": \"A boyfriend\",\n   \"friend_female\": \"A girlfriend\"\n}</code></pre>\n\n\n\n<h2>Step 5 &#8211; Set Locale</h2>\n\n\n\n<p>We just need to import&nbsp;<strong>i18n</strong>&nbsp;plugin and set it to use JSON code from&nbsp;<strong>de-DE</strong>&nbsp;folder.</p>\n\n\n\n<h3>app.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import {I18N} from 'aurelia-i18n';\n\nexport class App {\n   static inject = &#91;I18N];\n\t\n   constructor(i18n) {\n      this.i18n = i18n;\n      this.i18n\n      .setLocale('de-DE')\n\t\t\n      .then( () =&amp;gt; {\n         console.log('Locale is ready!');\n      });\n   }\n}</code></pre>\n\n\n\n<h2>Step 6 &#8211; View</h2>\n\n\n\n<p>There are couple of ways to translate data. We will use a custom ValueConverter named&nbsp;<strong>t</strong>. You can see in the following example various ways of formatting data. Compare this with the&nbsp;<strong>translation.json</strong>&nbsp;file and you will notice the patterns used for formatting.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n   &lt;p>\n      Translation with Variables: &lt;br />\n      ${ 'score' | t: {'score': 13}}\n   &lt;/p>\n\n   &lt;p>\n      Translation singular: &lt;br />\n      ${ 'lives' | t: { 'count': 1 } }\n   &lt;/p>\n\n   &lt;p>\n      Translation plural: &lt;br />\n      ${ 'lives' | t: { 'count': 2 } }\n   &lt;/p>\n\n   &lt;p>  \n      Translation singular indefinite: &lt;br />\n      ${ 'lives' | t: { 'count': 1, indefinite_article: true  } }\n   &lt;/p>\n\n   &lt;p>\n      Translation plural indefinite: &lt;br />\n      ${ 'lives' | t: { 'count': 2, indefinite_article: true } }\n   &lt;/p>\n\n   &lt;p>\n      Translation without/with context: &lt;br />\n      ${ 'friend' | t } &lt;br />\n      ${ 'friend' | t: { context: 'male' } } &lt;br />\n      ${ 'friend' | t: { context: 'female' } }\n   &lt;/p>\n\t\n&lt;/template></code></pre>\n\n\n\n<p>When we run the app, we will get the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-localization-example.jpg\" alt=\"Aurelia Localization Example\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Aurelia offers&nbsp;i18n&nbsp;plugin. In this chapter, you will learn how to localize your app using this plugin. Step 1 &#8211; Install a Plugin Open the&nbsp;command prompt&nbsp;window and run the following code to install&nbsp;i18n&nbsp;plugin. We also need to install backend plugin. Step 2 &#8211; Create Folders and Files In the project root folder, we need to create [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2945"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2945"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2945/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2945"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2945"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2945"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2947,"date":"2020-11-23T10:54:13","date_gmt":"2020-11-23T10:54:13","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2947"},"modified":"2020-11-23T10:54:13","modified_gmt":"2020-11-23T10:54:13","slug":"aurelia-tools","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-tools/","title":{"rendered":"Aurelia &#8211; Tools"},"content":{"rendered":"\n<p>In this chapter, you will learn how to set up and use&nbsp;<strong>aurelia-tools</strong>.</p>\n\n\n\n<h2>Step 1 &#8211; Root Folder</h2>\n\n\n\n<p>Let&#8217;s create a root folder where we will keep all Aurelia apps.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop>mkdir aurelia-projects\n</code></pre>\n\n\n\n<h2>Step 2 &#8211; Aurelia Tools</h2>\n\n\n\n<p>Inside&nbsp;<strong>aurelia-projects</strong>&nbsp;folder, we will clone&nbsp;<strong>aurelia-tools</strong>&nbsp;repository from github.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aurelia-projects>git clone https://github.com/aurelia/tools.git\n</code></pre>\n\n\n\n<h2>Step 3 &#8211; Create a New Project</h2>\n\n\n\n<p>To start a new Aurelia project, the recommended way is to use one of the&nbsp;<strong>aurelia-skeletons</strong>. Let&#8217;s clone Aurelia skeletons from git.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aurelia-projects>git clone https://github.com/aurelia/skeleton-navigation.git\n</code></pre>\n\n\n\n<p>We also need to install packages, modules, and dependencies. You can choose between various skeleton apps. We will use&nbsp;<strong>skeleton-es2016</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aurelia-projects\\skeleton-navigation\\skeleton-es2016>npm install\nC:\\Users\\username\\Desktop\\aurelia-projects\\skeleton-navigation\\skeleton-es2016>jspm install\n</code></pre>\n\n\n\n<p>Finally, we need to run the following code to build the development environment.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aurelia-projects\\skeleton-navigation\\skeleton-es2016>gulp build-dev-env\n</code></pre>\n\n\n\n<h2>Step 4 &#8211; Update</h2>\n\n\n\n<p>Update local repositories using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aurelia-projects\\skeleton-navigation\\skeleton-es2016&amp;gt;gulp update-own-deps\n</code></pre>\n\n\n\n<h2>Step 5 &#8211; Pull</h2>\n\n\n\n<p>We can also pull Aurelia dependency without building.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aurelia-projects\\skeleton-navigation\\skeleton-es2016>gulp pull-dev-env</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to set up and use&nbsp;aurelia-tools. Step 1 &#8211; Root Folder Let&#8217;s create a root folder where we will keep all Aurelia apps. Step 2 &#8211; Aurelia Tools Inside&nbsp;aurelia-projects&nbsp;folder, we will clone&nbsp;aurelia-tools&nbsp;repository from github. Step 3 &#8211; Create a New Project To start a new Aurelia project, the recommended [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2947"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2947"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2947/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2947"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2947"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2947"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2949,"date":"2020-11-23T10:55:22","date_gmt":"2020-11-23T10:55:22","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2949"},"modified":"2020-11-23T10:55:22","modified_gmt":"2020-11-23T10:55:22","slug":"aurelia-bundling","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-bundling/","title":{"rendered":"Aurelia &#8211; Bundling"},"content":{"rendered":"\n<p>In this chapter, you will learn how to use bundling in Aurelia framework.</p>\n\n\n\n<h2>Step 1 &#8211; Installing Prerequisites</h2>\n\n\n\n<p>You can install&nbsp;<strong>aurelia-bundler</strong>&nbsp;by running the following command in the&nbsp;<strong>command prompt</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>npm install aurelia-bundler --save-dev\n</code></pre>\n\n\n\n<p>If you don&#8217;t have gulp installed, you can install it by running this code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>npm install gulp\n</code></pre>\n\n\n\n<p>You can also install&nbsp;<strong>require-dir</strong>&nbsp;package from&nbsp;<strong>npm</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>npm install require-dir\n</code></pre>\n\n\n\n<h2>Step 2 &#8211; Create Folders and Files</h2>\n\n\n\n<p>First, create&nbsp;<strong>gulpfile.js</strong>&nbsp;file in apps root directory.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>touch gulpfile.js\n</code></pre>\n\n\n\n<p>You will need the&nbsp;<strong>build</strong>&nbsp;folder. In this directory, add another folder named&nbsp;<strong>tasks</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp>mkdir build\nC:\\Users\\username\\Desktop\\aureliaApp\\build>mkdir tasks\n</code></pre>\n\n\n\n<p>You need to create&nbsp;<strong>bundle.js</strong>&nbsp;file inside&nbsp;<strong>tasks</strong>&nbsp;folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\username\\Desktop\\aureliaApp\\build\\tasks>touch bundle.js\n</code></pre>\n\n\n\n<h2>Step 3 &#8211; Gulp</h2>\n\n\n\n<p>Use&nbsp;<strong>gulp</strong>&nbsp;as the task runner. You need to tell it to run the code from&nbsp;<strong>build\\tasks\\bundle.js</strong>.</p>\n\n\n\n<h3>gulpfile.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>require('require-dir')('build/tasks');\n</code></pre>\n\n\n\n<p>Now, create the task that you need. This task will take the app, create&nbsp;<strong>dist/appbuild.js</strong>&nbsp;and&nbsp;<strong>dist/vendor-build.js</strong>&nbsp;files. After the bundling process is complete, the&nbsp;<strong>config.js</strong>&nbsp;file will also be updated. You can include all files and plugins you want to inject and minify.</p>\n\n\n\n<h3>bundle.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var gulp = require('gulp');\nvar bundle = require('aurelia-bundler').bundle;\n\nvar config = {\n   force: true,\n   baseURL: '.',\n   configPath: './config.js',\n\t\n   bundles: {\n      \"dist/app-build\": {\n         includes: &#91;\n            '&#91;*.js]',\n            '*.html!text',\n            '*.css!text',\n         ],\n         options: {\n            inject: true,\n            minify: true\n         }\n      },\n\t\t\"dist/vendor-build\": {\n         includes: &#91;\n            'aurelia-bootstrapper',\n            'aurelia-fetch-client',\n            'aurelia-router',\n            'aurelia-animator-css',\n         ],\n         options: {\n            inject: true,\n            minify: true\n         }\n      }\n   }\n};\n\ngulp.task('bundle', function() {\n   return bundle(config);\n});  </code></pre>\n\n\n\n<p>The&nbsp;<strong>command prompt</strong>&nbsp;will inform us when bundling is complete.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-bundling-cmd.jpg\" alt=\"Aurelia Bundling CMD\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to use bundling in Aurelia framework. Step 1 &#8211; Installing Prerequisites You can install&nbsp;aurelia-bundler&nbsp;by running the following command in the&nbsp;command prompt. If you don&#8217;t have gulp installed, you can install it by running this code. You can also install&nbsp;require-dir&nbsp;package from&nbsp;npm. Step 2 &#8211; Create Folders and Files First, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2949"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2949"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2949/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2949"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2949"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2949"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2951,"date":"2020-11-23T10:55:47","date_gmt":"2020-11-23T10:55:47","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2951"},"modified":"2020-11-23T10:55:47","modified_gmt":"2020-11-23T10:55:47","slug":"aurelia-debugging","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-debugging/","title":{"rendered":"Aurelia &#8211; Debugging"},"content":{"rendered":"\n<p>In this chapter, you will learn how to add Aurelia context debugger as a chrome extension.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− Before adding the extension, you need to have&nbsp;<strong>aurelia-tools</strong>&nbsp;files. If you don&#8217;t have it, you can check Tools chapter.</p>\n\n\n\n<h2>Step 1 &#8211; Open Chrome Extensions</h2>\n\n\n\n<p>The easiest way to open chrome extensions is to run the following code in browser’s URL bar.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">chrome://extensions\n</pre>\n\n\n\n<h2>Step 2 &#8211; Add Extension</h2>\n\n\n\n<p>Since this extension isn&#8217;t yet available from Chrome store, check&nbsp;<strong>developermode</strong>&nbsp;checkbox and click&nbsp;<strong>Load Unpacked Extensions</strong>. This will open a small window where you can choose the extension to add.</p>\n\n\n\n<p>For this example, let us choose Desktop/aurelia-projects/tools/context-debugger folder and open it.</p>\n\n\n\n<p>Now, we can see that the extension is loaded in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-debugging-context-debugger.jpg\" alt=\"Aurelia Debugging Context Debugger\"/></figure>\n\n\n\n<p>We can also check the developers console. When we click&nbsp;<strong>elements</strong>&nbsp;tab, we will see&nbsp;<strong>aurelia-properties</strong>&nbsp;at the bottom right corner.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-debugging-console.jpg\" alt=\"Aurelia Debugging Console\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, you will learn how to add Aurelia context debugger as a chrome extension. Note&nbsp;− Before adding the extension, you need to have&nbsp;aurelia-tools&nbsp;files. If you don&#8217;t have it, you can check Tools chapter. Step 1 &#8211; Open Chrome Extensions The easiest way to open chrome extensions is to run the following code in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2951"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2951"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2951/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2951"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2951"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2951"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2953,"date":"2020-11-23T10:57:03","date_gmt":"2020-11-23T10:57:03","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2953"},"modified":"2020-11-23T10:57:03","modified_gmt":"2020-11-23T10:57:03","slug":"aurelia-community","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-community/","title":{"rendered":"Aurelia &#8211; Community"},"content":{"rendered":"\n<p>Community is one of the most important factors to consider when choosing a framework. Aurelia offers fantastic support for its customers. In this chapter, you will learn how you can get help when you are stuck.</p>\n\n\n\n<h2>Aurelia &#8211; Official Documentation</h2>\n\n\n\n<p>You can find Aurelia docs on this link </p>\n\n\n\n<h2>Aurelia Gitter &#8211; Channel</h2>\n\n\n\n<p>If you need a fast answer, you can always submit a question to aurelia gitter channel. This channel can be found on the following </p>\n\n\n\n<h2>Aurelia &#8211; Github</h2>\n\n\n\n<p>You can also submit an issue to official Aurelia github repository </p>\n\n\n\n<h2>Aurelia &#8211; Blog</h2>\n\n\n\n<p>If you want to keep track of any updates and changes of Aurelia, you can follow Durandal&#8217;s official blog </p>\n\n\n\n<h2>Aurelia &#8211; Rob Eisenberg Blog</h2>\n\n\n\n<p>You can also follow the official blog of Rob Eisenberg, creator of Aurelia framework </p>\n\n\n\n<h2>Aurelia &#8211; Enterprise Support</h2>\n\n\n\n<p>Aurelia offers enterprise support for teams and individuals. If you are interested, send an email to the following address −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>support@durandal.io\n</code></pre>\n\n\n\n<h2>Aurelia &#8211; Hire Dev Team</h2>\n\n\n\n<p>You can hire Aurelia Expert Developers by sending an email to this address.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>consulting@durandal.io\n</code></pre>\n\n\n\n<h2>Aurelia &#8211; Training</h2>\n\n\n\n<p>If you want Aurelia official training for your team, you can send an email to this address.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>training@durandal.io</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Community is one of the most important factors to consider when choosing a framework. Aurelia offers fantastic support for its customers. In this chapter, you will learn how you can get help when you are stuck. Aurelia &#8211; Official Documentation You can find Aurelia docs on this link Aurelia Gitter &#8211; Channel If you need [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2953"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2953"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2953/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2953"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2953"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2953"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2955,"date":"2020-11-23T10:57:31","date_gmt":"2020-11-23T10:57:31","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2955"},"modified":"2020-11-23T10:57:31","modified_gmt":"2020-11-23T10:57:31","slug":"aurelia-best-practices","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/aurelia-best-practices/","title":{"rendered":"Aurelia &#8211; Best Practices"},"content":{"rendered":"\n<p>Aurelia is a new framework hence, the best practices are yet to be established. In this chapter, you will find some useful guidelines to follow.</p>\n\n\n\n<h2>Starting a New Project</h2>\n\n\n\n<p>Aurelia offers&nbsp;<strong>aurelia-skeletons</strong>. There are a couple of skeletons to choose from. The team behind Aurelia is actively supporting the skeletons, and they are always up-to-date with the newest version of the framework.</p>\n\n\n\n<h3>Aurelia Skeletons</h3>\n\n\n\n<ul><li><strong>skeleton-es2016-webpack</strong>&nbsp;allows you to write&nbsp;<strong>ES2016</strong>&nbsp;code and use&nbsp;<strong>npm</strong>&nbsp;for package management and&nbsp;<strong>webpack</strong>&nbsp;for bundling.</li><li><strong>skeleton-es2016</strong>&nbsp;allows you to write&nbsp;<strong>ES2016</strong>&nbsp;code and use&nbsp;<strong>jspm</strong>&nbsp;for package management and&nbsp;<strong>SystemJS</strong>&nbsp;for loading and bundling.</li><li><strong>skeleton-typescript-webpack</strong>&nbsp;allows you to write&nbsp;<strong>TypeScript</strong>&nbsp;code and use&nbsp;<strong>npm</strong>&nbsp;for package management and&nbsp;<strong>webpack</strong>&nbsp;for bundling.</li><li><strong>skeleton-typescript</strong>&nbsp;allows you to write&nbsp;<strong>TypeScript</strong>&nbsp;code and use&nbsp;<strong>jspm</strong>&nbsp;for package management and&nbsp;<strong>SystemJS</strong>&nbsp;for loading and bundling.</li><li><strong>skeleton-typescript-asp.net5</strong>&nbsp;allows you to write&nbsp;<strong>TypeScript</strong>&nbsp;code and use&nbsp;<strong>jspm</strong>&nbsp;for package management and&nbsp;<strong>SystemJS</strong>&nbsp;for loading and bundling. The&nbsp;<strong>ASP.NET</strong>&nbsp;backend is also integrated.</li><li><strong>skeleton-es2016-asp.net5</strong>&nbsp;allows you to write&nbsp;<strong>ES2016</strong>&nbsp;code and use&nbsp;<strong>jspm</strong>&nbsp;for package management and&nbsp;<strong>SystemJS</strong>&nbsp;for loading and bundling. The&nbsp;<strong>ASP.NET</strong>&nbsp;backend is integrated.</li></ul>\n\n\n\n<p>You can clone all skeletons from&nbsp;<strong>GitHub</strong>. The installation instructions can be found inside&nbsp;<strong>README.md</strong>&nbsp;files for each skeleton.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">C:\\Users\\username\\Desktop&gt;git clone https://github.com/aurelia/skeleton-navigation.git\n</pre>\n\n\n\n<h2>Folder Structure</h2>\n\n\n\n<p>You are free to use any folder structure you want. If you are not sure where to start, you can use the following folder structure. The image represents files and folder in the&nbsp;<strong>src</strong>&nbsp;directory.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/aurelia/images/aurelia-best-practices-folder-structure.jpg\" alt=\"Aurelia Best Practices\"/></figure>\n\n\n\n<h2>Web Standards</h2>\n\n\n\n<p>Aurelia is a framework oriented to web standards. This was one of the main goals of the team behind it. They will make sure that the framework always follows modern web. This is extremely good for the developers, since we can rely on the usability of the framework in the future. It also helps us be up-to-date with the browsers and the web.</p>\n\n\n\n<h2>EcmaScript 6</h2>\n\n\n\n<p>This is a good practice not just for Aurelia but for any other JavaScript framework.&nbsp;<strong>ES6</strong>&nbsp;offers new functionalities that can help in the development process. You can also use&nbsp;<strong>TypeScript</strong>, if you like strongly typed languages.</p>\n","protected":false},"excerpt":{"rendered":"<p>Aurelia is a new framework hence, the best practices are yet to be established. In this chapter, you will find some useful guidelines to follow. Starting a New Project Aurelia offers&nbsp;aurelia-skeletons. There are a couple of skeletons to choose from. The team behind Aurelia is actively supporting the skeletons, and they are always up-to-date with [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[55],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2955"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2955"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2955/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2955"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2955"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2955"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]