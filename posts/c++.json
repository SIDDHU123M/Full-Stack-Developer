[
  {
    "id": 888,
    "date": "2020-08-25T05:08:45",
    "date_gmt": "2020-08-25T05:08:45",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=5"
    },
    "modified": "2021-02-15T10:21:25",
    "modified_gmt": "2021-02-15T10:21:25",
    "slug": "c-tutorial",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-tutorial/",
    "title": {
      "rendered": "C++ Tutorial"
    },
    "content": {
      "rendered": "\n<h1>C++ Tutorial</h1>\n\n\n\n<figure class=\"wp-block-image\"><a href=\"https://training.javatpoint.com/c-cpp-training.jsp\" target=\"_blank\" rel=\"noreferrer noopener\"><img src=\"https://www.javatpoint.com/corebasic/images/cpp-training.png\" alt=\"C++ Programming\"/></a></figure>\n\n\n\n<p>C++ tutorial provides basic and advanced concepts of C++. Our C++ tutorial is designed for beginners and professionals.</p>\n\n\n\n<p>C++ is an object-oriented programming language. It is an extension to&nbsp;<a href=\"https://www.javatpoint.com/c-programming-language-tutorial\">C programming</a>.</p>\n\n\n\n<p>Our C++ tutorial includes all topics of C++ such as first example, control statements, objects and classes,&nbsp;<a href=\"https://www.javatpoint.com/cpp-inheritance\">inheritance</a>,&nbsp;<a href=\"https://www.javatpoint.com/cpp-constructor\">constructor</a>, destructor, this, static, polymorphism, abstraction, abstract class, interface, namespace, encapsulation, arrays, strings, exception handling, File IO, etc.</p>\n\n\n\n<h2>What is C++</h2>\n\n\n\n<p>C++ is a general purpose, case-sensitive, free-form programming language that supports object-oriented, procedural and generic programming.</p>\n\n\n\n<p>C++ is a middle-level language, as it encapsulates both high and low level language features.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Object-Oriented Programming (OOPs)</h2>\n\n\n\n<p>C++ supports the object-oriented programming, the four major pillar of object-oriented programming (<a href=\"https://www.javatpoint.com/cpp-oops-concepts\">OOPs</a>) used in C++ are:</p>\n\n\n\n<ol><li>Inheritance</li><li>Polymorphism</li><li>Encapsulation</li><li>Abstraction</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Standard Libraries</h2>\n\n\n\n<p>Standard C++ programming is divided into three important parts:</p>\n\n\n\n<ul><li>The core library includes the data types, variables and literals, etc.</li><li>The standard library includes the set of functions manipulating strings, files, etc.</li><li>The Standard Template Library (STL) includes the set of methods manipulating a data structure.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Usage of C++</h2>\n\n\n\n<p>By the help of C++ programming language, we can develop different types of secured and robust applications:</p>\n\n\n\n<ul><li>Window application</li><li>Client-Server application</li><li>Device drivers</li><li>Embedded firmware etc</li></ul>\n\n\n\n<h2>C++ Program</h2>\n\n\n\n<p>In this tutorial, all C++ programs are given with C++ compiler so that you can easily change the C++ program code.</p>\n\n\n\n<p>File: main.cpp</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main() {  \n   cout &lt;&lt; \"Hello C++ Programming\";  \n   return 0;  \n}  </code></pre>\n\n\n\n<p>A detailed explanation of first C++ program is given in next chapters.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>C++ Tutorial C++ tutorial provides basic and advanced concepts of C++. Our C++ tutorial is designed for beginners and professionals. C++ is an object-oriented programming language. It is an extension to&nbsp;C programming. Our C++ tutorial includes all topics of C++ such as first example, control statements, objects and classes,&nbsp;inheritance,&nbsp;constructor, destructor, this, static, polymorphism, abstraction, abstract [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/888"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=888"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/888/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4541,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/888/revisions/4541"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=888"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=888"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=888"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4437,
    "date": "2020-08-25T05:09:56",
    "date_gmt": "2020-08-25T05:09:56",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=7"
    },
    "modified": "2021-02-15T10:22:43",
    "modified_gmt": "2021-02-15T10:22:43",
    "slug": "c-vs-c",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-vs-c/",
    "title": {
      "rendered": "C vs. C++"
    },
    "content": {
      "rendered": "\n<h2>What is C?</h2>\n\n\n\n<p>C is a structural or procedural oriented programming language which is machine-independent and extensively used in various applications.</p>\n\n\n\n<p>C is the basic programming language that can be used to develop from the operating systems (like Windows) to complex programs like Oracle database, Git, Python interpreter, and many more. C programming language can be called a god&#8217;s programming language as it forms the base for other programming languages. If we know the C language, then we can easily learn other programming languages. C language was developed by the great computer scientist Dennis Ritchie at the Bell Laboratories. It contains some additional features that make it unique from other programming languages.</p>\n\n\n\n<h2>What is C++?</h2>\n\n\n\n<p>C++ is a special-purpose programming language developed by&nbsp;<strong>Bjarne Stroustrup</strong>&nbsp;at Bell Labs circa 1980. C++ language is very similar to C language, and it is so compatible with C that it can run 99% of C programs without changing any source of code though C++ is an object-oriented programming language, so it is safer and well-structured programming language than C.</p>\n\n\n\n<p><strong>Let&#8217;s understand the differences between C and C++.</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpages/images/c-vs-cpp.png\" alt=\"C vs C++\"/></figure>\n\n\n\n<p><strong>The following are the differences between C and C++:</strong></p>\n\n\n\n<ul><li><strong>Definition</strong><br>C is a structural programming language, and it does not support classes and objects, while C++ is an object-oriented programming language that supports the concept of classes and objects.</li><li><strong>Type of programming language</strong><br>C supports the structural programming language where the code is checked line by line, while C++ is an object-oriented programming language that supports the concept of classes and objects.</li><li><strong>Developer of the language</strong><br>Dennis Ritchie developed C language at Bell Laboratories while Bjarne Stroustrup developed the C++ language at Bell Labs circa 1980.</li><li><strong>Subset</strong><br>C++ is a superset of C programming language. C++ can run 99% of C code but C language cannot run C++ code.</li><li><strong>Type of approach</strong><br>C follows the top-down approach, while C++ follows the bottom-up approach. The top-down approach breaks the main modules into tasks; these tasks are broken into sub-tasks, and so on. The bottom-down approach develops the lower level modules first and then the next level modules.</li><li><strong>Security</strong><br>In C, the data can be easily manipulated by the outsiders as it does not support the encapsulation and information hiding while C++ is a very secure language, i.e., no outsiders can manipulate its data as it supports both encapsulation and data hiding. In C language, functions and data are the free entities, and in C++ language, all the functions and data are encapsulated in the form of objects.</li><li><strong>Function Overloading</strong><br>Function overloading is a feature that allows you to have more than one function with the same name but varies in the parameters. C does not support the function overloading, while C++ supports the function overloading.</li><li><strong>Function Overriding</strong><br>Function overriding is a feature that provides the specific implementation to the function, which is already defined in the base class. C does not support the function overriding, while C++ supports the function overriding.</li><li><strong>Reference variables</strong><br>C does not support the reference variables, while C++ supports the reference variables.</li><li><strong>Keywords</strong><br>C contains 32 keywords, and C++ supports 52 keywords.</li><li><strong>Namespace feature</strong><br>A namespace is a feature that groups the entities like classes, objects, and functions under some specific name. C does not contain the namespace feature, while C++ supports the namespace feature that avoids the name collisions.</li><li><strong>Exception handling</strong><br>C does not provide direct support to the exception handling; it needs to use functions that support exception handling. C++ provides direct support to exception handling by using a try-catch block.</li><li><strong>Input/Output functions</strong><br>In C, scanf and printf functions are used for input and output operations, respectively, while in C++, cin and cout are used for input and output operations, respectively.</li><li><strong>Memory allocation and de-allocation</strong><br>C supports calloc() and malloc() functions for the memory allocation, and free() function for the memory de-allocation. C++ supports a new operator for the memory allocation and delete operator for the memory de-allocation.</li><li><strong>Inheritance</strong><br>Inheritance is a feature that allows the child class to reuse the properties of the parent class. C language does not support the inheritance while C++ supports the inheritance.</li><li><strong>Header file</strong><br>C program uses&nbsp;<strong>&lt;stdio.h&gt;</strong>&nbsp;header file while C++ program uses&nbsp;<strong>&lt;iostream.h&gt;</strong>&nbsp;header file.</li></ul>\n\n\n\n<p><strong>Let&#8217;s summarize the above differences in a tabular form.</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>No.</th><th>C</th><th>C++</th></tr><tr><td>1)</td><td>C follows the&nbsp;<strong>procedural style programming.</strong></td><td>C++ is multi-paradigm. It supports both&nbsp;<strong>procedural and object oriented.</strong></td></tr><tr><td>2)</td><td>Data is less secured in C.</td><td>In C++, you can use modifiers for class members to make it inaccessible for outside users.</td></tr><tr><td>3)</td><td>C follows the&nbsp;<strong>top-down approach.</strong></td><td>C++ follows the&nbsp;<strong>bottom-up approach.</strong></td></tr><tr><td>4)</td><td>C does not support function overloading.</td><td>C++ supports function overloading.</td></tr><tr><td>5)</td><td>In C, you can&#8217;t use functions in structure.</td><td>In C++, you can use functions in structure.</td></tr><tr><td>6)</td><td>C does not support reference variables.</td><td>C++ supports reference variables.</td></tr><tr><td>7)</td><td>In C,&nbsp;<strong>scanf() and printf()</strong>&nbsp;are mainly used for input/output.</td><td>C++ mainly uses stream&nbsp;<strong>cin and cout</strong>&nbsp;to perform input and output operations.</td></tr><tr><td>8)</td><td>Operator overloading is not possible in C.</td><td>Operator overloading is possible in C++.</td></tr><tr><td>9)</td><td>C programs are divided into&nbsp;<strong>procedures and modules</strong></td><td>C++ programs are divided into&nbsp;<strong>functions and classes.</strong></td></tr><tr><td>10)</td><td>C does not provide the feature of namespace.</td><td>C++ supports the feature of namespace.</td></tr><tr><td>11)</td><td>Exception handling is not easy in C. It has to perform using other functions.</td><td>C++ provides exception handling using Try and Catch block.</td></tr><tr><td>12)</td><td>C does not support the inheritance.</td><td>C++ supports inheritance.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is C? C is a structural or procedural oriented programming language which is machine-independent and extensively used in various applications. C is the basic programming language that can be used to develop from the operating systems (like Windows) to complex programs like Oracle database, Git, Python interpreter, and many more. C programming language can [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4437"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4437"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4437/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4540,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4437/revisions/4540"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4437"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4437"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4437"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 890,
    "date": "2020-08-25T05:10:43",
    "date_gmt": "2020-08-25T05:10:43",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=9"
    },
    "modified": "2021-02-15T10:22:27",
    "modified_gmt": "2021-02-15T10:22:27",
    "slug": "c-history",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-history/",
    "title": {
      "rendered": "C++ history"
    },
    "content": {
      "rendered": "\n<p><strong>History of C++ language</strong>&nbsp;is interesting to know. Here we are going to discuss brief history of C++ language.</p>\n\n\n\n<p><strong>C++ programming language</strong>&nbsp;was developed in 1980 by Bjarne Stroustrup at bell laboratories of AT&amp;T (American Telephone &amp; Telegraph), located in U.S.A.</p>\n\n\n\n<p><strong>Bjarne Stroustrup</strong>&nbsp;is known as the&nbsp;<strong>founder of C++ language.</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-history1.png\" alt=\"Cpp History 1\"/></figure>\n\n\n\n<p>It was develop for adding a feature of&nbsp;<strong>OOP (Object Oriented Programming)</strong>&nbsp;in C without significantly changing the C component.</p>\n\n\n\n<p>C++ programming is &#8220;relative&#8221; (called a superset) of C, it means any valid C program is also a valid C++ program.</p>\n\n\n\n<p>Let&#8217;s see the programming languages that were developed before C++ language.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Language</th><th>Year</th><th>Developed By</th></tr><tr><td>Algol</td><td>1960</td><td>International Group</td></tr><tr><td>BCPL</td><td>1967</td><td>Martin Richard</td></tr><tr><td>B</td><td>1970</td><td>Ken Thompson</td></tr><tr><td>Traditional C</td><td>1972</td><td>Dennis Ritchie</td></tr><tr><td>K &amp; R C</td><td>1978</td><td>Kernighan &amp; Dennis Ritchie</td></tr><tr><td>C++</td><td>1980</td><td>Bjarne Stroustrup</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>History of C++ language&nbsp;is interesting to know. Here we are going to discuss brief history of C++ language. C++ programming language&nbsp;was developed in 1980 by Bjarne Stroustrup at bell laboratories of AT&amp;T (American Telephone &amp; Telegraph), located in U.S.A. Bjarne Stroustrup&nbsp;is known as the&nbsp;founder of C++ language. It was develop for adding a feature of&nbsp;OOP [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/890"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=890"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/890/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4539,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/890/revisions/4539"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=890"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=890"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=890"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4439,
    "date": "2020-08-25T05:11:39",
    "date_gmt": "2020-08-25T05:11:39",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=11"
    },
    "modified": "2021-02-15T10:22:57",
    "modified_gmt": "2021-02-15T10:22:57",
    "slug": "c-features",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-features/",
    "title": {
      "rendered": "C++ Features"
    },
    "content": {
      "rendered": "\n<p>C++ is object oriented programming language. It provides a lot of&nbsp;<strong>features</strong>&nbsp;that are given below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-features1.png\" alt=\"Cpp Features\"/></figure>\n\n\n\n<ol><li>Simple</li><li>Machine Independent or Portable</li><li>Mid-level programming language</li><li>Structured programming language</li><li>Rich Library</li><li>Memory Management</li><li>Fast Speed</li><li>Pointers</li><li>Recursion</li><li>Extensible</li><li>Object Oriented</li><li>Compiler based</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>1) Simple</h3>\n\n\n\n<p>C++ is a simple language in the sense that it provides structured approach (to break the problem into parts), rich set of library functions, data types etc.</p>\n\n\n\n<h3>2) Machine Independent or Portable</h3>\n\n\n\n<p>Unlike assembly language, c programs can be executed in many machines with little bit or no change. But it is not platform-independent.</p>\n\n\n\n<h3>3) Mid-level programming language</h3>\n\n\n\n<p>C++ is also used to do low level programming. It is used to develop system applications such as kernel, driver etc. It also supports the feature of high level language. That is why it is known as mid-level language.</p>\n\n\n\n<h3>4) Structured programming language</h3>\n\n\n\n<p>C++ is a structured programming language in the sense that we can break the program into parts using functions. So, it is easy to understand and modify.</p>\n\n\n\n<h3>5) Rich Library</h3>\n\n\n\n<p>C++ provides a lot of inbuilt functions that makes the development fast.</p>\n\n\n\n<h3>6) Memory Management</h3>\n\n\n\n<p>It supports the feature of dynamic memory allocation. In C++ language, we can free the allocated memory at any time by calling the free() function.</p>\n\n\n\n<h3>7) Speed</h3>\n\n\n\n<p>The compilation and execution time of C++ language is fast.</p>\n\n\n\n<h3>8) Pointer</h3>\n\n\n\n<p>C++ provides the feature of pointers. We can directly interact with the memory by using the pointers. We can use pointers for memory, structures, functions, array etc.</p>\n\n\n\n<h3>9) Recursion</h3>\n\n\n\n<p>In C++, we can call the function within the function. It provides code reusability for every function.</p>\n\n\n\n<h3>10) Extensible</h3>\n\n\n\n<p>C++ language is extensible because it can easily adopt new features.</p>\n\n\n\n<h3>11) Object Oriented</h3>\n\n\n\n<p>C++ is object oriented programming language. OOPs makes development and maintenance easier where as in Procedure-oriented programming language it is not easy to manage if code grows as project size grows.</p>\n\n\n\n<h3>12) Compiler based</h3>\n\n\n\n<p>C++ is a compiler based programming language, it means without compilation no C++ program can be executed. First we need to compile our program using compiler and then we can execute our program.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>C++ is object oriented programming language. It provides a lot of&nbsp;features&nbsp;that are given below. Simple Machine Independent or Portable Mid-level programming language Structured programming language Rich Library Memory Management Fast Speed Pointers Recursion Extensible Object Oriented Compiler based 1) Simple C++ is a simple language in the sense that it provides structured approach (to break [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4439"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4439"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4439/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4538,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4439/revisions/4538"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4439"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4439"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4439"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 892,
    "date": "2020-08-25T05:13:03",
    "date_gmt": "2020-08-25T05:13:03",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=13"
    },
    "modified": "2021-02-15T10:23:12",
    "modified_gmt": "2021-02-15T10:23:12",
    "slug": "turbo-c-download-installation",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/turbo-c-download-installation/",
    "title": {
      "rendered": "Turbo C++ &#8211; Download &#038; Installation"
    },
    "content": {
      "rendered": "\n<p>There are many compilers available for C++. You need to download any one. Here, we are going to use&nbsp;<strong>Turbo C++</strong>. It will work for both C and C++. To install the Turbo C++ software, you need to follow following steps.</p>\n\n\n\n<ol><li>Download Turbo C++</li><li>Create turboc directory inside c drive and extract the tc3.zip inside c:\\turboc</li><li>Double click on install.exe file</li><li>Click on the tc application file located inside c:\\TC\\BIN to write the c program</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>1) Download Turbo C++ software</h3>\n\n\n\n<p>You can download turbo C++ from many sites.&nbsp;<strong><a href=\"https://www.javatpoint.com/cpp/software/tc3.zip\">download Turbo c++</a></strong></p>\n\n\n\n<h3>2) Create turboc directory in c drive and extract the tc3.zip</h3>\n\n\n\n<p>Now, you need to create a new directory turboc inside the c: drive. Now extract the tc3.zip file in c:\\turboc directory.</p>\n\n\n\n<h3>3) Double click on the install.exe file and follow steps</h3>\n\n\n\n<p>Now, click on the install icon located inside the c:\\turboc</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-installation1.png\" alt=\"Cpp Installation 1\"/></figure>\n\n\n\n<p>It will ask you to install c or not, press enter to install.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-installation2.png\" alt=\"Cpp Installation 2\"/></figure>\n\n\n\n<p>Change your drive to c, press c.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-installation3.png\" alt=\"Cpp Installation 3\"/></figure>\n\n\n\n<p>Press enter, it will look inside the c:\\turboc directory for the required files.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-installation4.png\" alt=\"Cpp Installation 4\"/></figure>\n\n\n\n<p>Select Start installation by the down arrow key then press enter.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-installation5.png\" alt=\"Cpp Installation 5\"/></figure>\n\n\n\n<p>Now C is installed, press enter to read documentation or close the software.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-installation6.png\" alt=\"Cpp Installation 6\"/></figure>\n\n\n\n<h3>4) Click on the tc application located inside c:\\TC\\BIN</h3>\n\n\n\n<p>Now double click on the tc icon located in c:\\TC\\BIN directory to write the c program.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-installation7.png\" alt=\"Cpp Installation 7\"/></figure>\n\n\n\n<p>In windows 7 or window 8, it will show a dialog block to ignore and close the application because full screen mode is not supported. Click on Ignore button.</p>\n\n\n\n<p>Now it will showing following console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-installation8.png\" alt=\"Cpp Installation 8\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are many compilers available for C++. You need to download any one. Here, we are going to use&nbsp;Turbo C++. It will work for both C and C++. To install the Turbo C++ software, you need to follow following steps. Download Turbo C++ Create turboc directory inside c drive and extract the tc3.zip inside c:\\turboc [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/892"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=892"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/892/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4537,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/892/revisions/4537"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=892"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=892"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=892"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4440,
    "date": "2020-08-25T05:14:14",
    "date_gmt": "2020-08-25T05:14:14",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=15"
    },
    "modified": "2021-02-15T10:22:12",
    "modified_gmt": "2021-02-15T10:22:12",
    "slug": "c-program",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-program/",
    "title": {
      "rendered": "C++ Program"
    },
    "content": {
      "rendered": "\n<p>Before starting the abcd of C++ language, you need to learn how to write, compile and run the first C++ program.</p>\n\n\n\n<p>To write the first C++ program, open the C++ console and write the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream.h>  \n#include&lt;conio.h>  \nvoid main() {  \n   clrscr();  \n   cout &lt;&lt; \"Welcome to C++ Programming.\";   \n   getch();  \n}  </code></pre>\n\n\n\n<p><strong>#include&lt;iostream.h&gt;</strong>&nbsp;includes the&nbsp;<strong>standard input output</strong>&nbsp;library functions. It provides&nbsp;<strong>cin</strong>&nbsp;and&nbsp;<strong>cout</strong>&nbsp;methods for reading from input and writing to output respectively.</p>\n\n\n\n<p><strong>#include &lt;conio.h&gt;</strong>&nbsp;includes the&nbsp;<strong>console input output</strong>&nbsp;library functions. The getch() function is defined in conio.h file.</p>\n\n\n\n<p><strong>void main()</strong>&nbsp;The&nbsp;<strong>main() function is the entry point of every program</strong>&nbsp;in C++ language. The void keyword specifies that it returns no value.</p>\n\n\n\n<p><strong>cout &lt;&lt; &#8220;Welcome to C++ Programming.&#8221;</strong>&nbsp;is&nbsp;<strong>used to print the data &#8220;Welcome to C++ Programming.&#8221;</strong>&nbsp;on the console.</p>\n\n\n\n<p><strong>getch()</strong>&nbsp;The getch() function&nbsp;<strong>asks for a single character</strong>. Until you press any key, it blocks the screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-program1.png\" alt=\"Cpp Program 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>How to compile and run the C++ program</h2>\n\n\n\n<p>There are 2 ways to compile and run the C++ program, by menu and by shortcut.</p>\n\n\n\n<p><strong>By menu</strong></p>\n\n\n\n<p>Now&nbsp;<strong>click on the compile menu then compile sub menu</strong>&nbsp;to compile the c++ program.</p>\n\n\n\n<p>Then&nbsp;<strong>click on the run menu then run sub menu</strong>&nbsp;to run the c++ program.</p>\n\n\n\n<p><strong>By shortcut</strong></p>\n\n\n\n<p><strong>Or, press ctrl+f9</strong>&nbsp;keys compile and run the program directly.</p>\n\n\n\n<p>You will see the following output on user screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-program2.png\" alt=\"Cpp Program 2\"/></figure>\n\n\n\n<p>You can view the user screen any time by pressing the&nbsp;<strong>alt+f5</strong>&nbsp;keys.</p>\n\n\n\n<p>Now&nbsp;<strong>press Esc</strong>&nbsp;to return to the turbo c++ console.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Before starting the abcd of C++ language, you need to learn how to write, compile and run the first C++ program. To write the first C++ program, open the C++ console and write the following code: #include&lt;iostream.h&gt;&nbsp;includes the&nbsp;standard input output&nbsp;library functions. It provides&nbsp;cin&nbsp;and&nbsp;cout&nbsp;methods for reading from input and writing to output respectively. #include &lt;conio.h&gt;&nbsp;includes the&nbsp;console [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4440"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4440"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4440/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4536,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4440/revisions/4536"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4440"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4440"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4440"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 894,
    "date": "2020-08-25T05:16:19",
    "date_gmt": "2020-08-25T05:16:19",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=17"
    },
    "modified": "2021-02-15T10:23:35",
    "modified_gmt": "2021-02-15T10:23:35",
    "slug": "c-basic-input-output",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-basic-input-output/",
    "title": {
      "rendered": "C++ Basic Input/Output"
    },
    "content": {
      "rendered": "\n<p>C++ I/O operation is using the stream concept. Stream is the sequence of bytes or flow of data. It makes the performance fast.</p>\n\n\n\n<p>If bytes flow from main memory to device like printer, display screen, or a network connection, etc, this is called as&nbsp;<strong>output operation.</strong></p>\n\n\n\n<p>If bytes flow from device like printer, display screen, or a network connection, etc to main memory, this is called as&nbsp;<strong>input operation.</strong></p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>I/O Library Header Files</h2>\n\n\n\n<p>Let us see the common header files used in C++ programming are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Header File</th><th>Function and Description</th></tr><tr><td>&lt;iostream&gt;</td><td>It is used to define the&nbsp;<strong>cout, cin and cerr</strong>&nbsp;objects, which correspond to standard output stream, standard input stream and standard error stream, respectively.</td></tr><tr><td>&lt;iomanip&gt;</td><td>It is used to declare services useful for performing formatted I/O, such as&nbsp;<strong>setprecision and setw.</strong></td></tr><tr><td>&lt;fstream&gt;</td><td>It is used to declare services for user-controlled file processing.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Standard output stream (cout)</h2>\n\n\n\n<p>The&nbsp;<strong>cout</strong>&nbsp;is a predefined object of&nbsp;<strong>ostream</strong>&nbsp;class. It is connected with the standard output device, which is usually a display screen. The cout is used in conjunction with stream insertion operator (&lt;&lt;) to display the output on a console</p>\n\n\n\n<p>Let&#8217;s see the simple example of standard output stream (cout):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main( ) {  \n   char ary&#91;] = \"Welcome to C++ tutorial\";  \n   cout &lt;&lt; \"Value of ary is: \" &lt;&lt; ary &lt;&lt; endl;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of ary is: Welcome to C++ tutorial\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Standard input stream (cin)</h2>\n\n\n\n<p>The&nbsp;<strong>cin</strong>&nbsp;is a predefined object of&nbsp;<strong>istream</strong>&nbsp;class. It is connected with the standard input device, which is usually a keyboard. The cin is used in conjunction with stream extraction operator (&gt;&gt;) to read the input from a console.</p>\n\n\n\n<p>Let&#8217;s see the simple example of standard input stream (cin):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main( ) {  \n  int age;  \n   cout &lt;&lt; \"Enter your age: \";  \n   cin >> age;  \n   cout &lt;&lt; \"Your age is: \" &lt;&lt; age &lt;&lt; endl;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter your age: 22\nYour age is: 22\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Standard end line (endl)</h2>\n\n\n\n<p>The&nbsp;<strong>endl</strong>&nbsp;is a predefined object of&nbsp;<strong>ostream</strong>&nbsp;class. It is used to insert a new line characters and flushes the stream.</p>\n\n\n\n<p>Let&#8217;s see the simple example of standard end line (endl):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main( ) {  \ncout &lt;&lt; \"C++ Tutorial\";     \ncout &lt;&lt; \" Javatpoint\"&lt;&lt;endl;   \ncout &lt;&lt; \"End of line\"&lt;&lt;endl;   \n}   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C++ Tutorial Javatpoint \nEnd of linevv</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>C++ I/O operation is using the stream concept. Stream is the sequence of bytes or flow of data. It makes the performance fast. If bytes flow from main memory to device like printer, display screen, or a network connection, etc, this is called as&nbsp;output operation. If bytes flow from device like printer, display screen, or [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/894"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=894"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/894/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4535,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/894/revisions/4535"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=894"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=894"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=894"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4441,
    "date": "2020-08-25T05:19:42",
    "date_gmt": "2020-08-25T05:19:42",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=20"
    },
    "modified": "2021-02-15T10:23:44",
    "modified_gmt": "2021-02-15T10:23:44",
    "slug": "c-variable",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-variable/",
    "title": {
      "rendered": "C++ Variable"
    },
    "content": {
      "rendered": "\n<p>A variable is a name of memory location. It is used to store data. Its value can be changed and it can be reused many times.</p>\n\n\n\n<p>It is a way to represent memory location through symbol so that it can be easily identified.</p>\n\n\n\n<p>Let&#8217;s see the syntax to declare a variable:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>type variable_list;   </code></pre>\n\n\n\n<p>The example of declaring variable is given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int x;    \nfloat y;    \nchar z; </code></pre>\n\n\n\n<p>Here, x, y, z are variables and int, float, char are data types.</p>\n\n\n\n<p>We can also provide values while declaring the variables as given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int x=5,b=10;  //declaring 2 variable of integer type    \nfloat f=30.8;    \nchar c='A';    </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Rules for defining variables</h2>\n\n\n\n<p>A variable can have alphabets, digits and underscore.</p>\n\n\n\n<p>A variable name can start with alphabet and underscore only. It can&#8217;t start with digit.</p>\n\n\n\n<p>No white space is allowed within variable name.</p>\n\n\n\n<p>A variable name must not be any reserved word or keyword e.g. char, float etc.</p>\n\n\n\n<p>Valid variable names:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int a;    \nint _ab;    \nint a30;    </code></pre>\n\n\n\n<p>Invalid variable names:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int 4;    \nint x y;    \nint double;</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A variable is a name of memory location. It is used to store data. Its value can be changed and it can be reused many times. It is a way to represent memory location through symbol so that it can be easily identified. Let&#8217;s see the syntax to declare a variable: The example of declaring [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4441"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4441"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4441/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4534,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4441/revisions/4534"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4441"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4441"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4441"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 896,
    "date": "2020-08-25T05:20:17",
    "date_gmt": "2020-08-25T05:20:17",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=22"
    },
    "modified": "2021-02-15T10:23:54",
    "modified_gmt": "2021-02-15T10:23:54",
    "slug": "c-data-types",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-data-types/",
    "title": {
      "rendered": "C++ Data Types"
    },
    "content": {
      "rendered": "\n<p>A data type specifies the type of data that a variable can store such as integer, floating, character etc.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-data-types1.png\" alt=\"Cpp Data typews 1\"/></figure>\n\n\n\n<p>There are 4 types of data types in C++ language.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Types</th><th>Data Types</th></tr><tr><td>Basic Data Type</td><td>int, char, float, double, etc</td></tr><tr><td>Derived Data Type</td><td>array, pointer, etc</td></tr><tr><td>Enumeration Data Type</td><td>enum</td></tr><tr><td>User Defined Data Type</td><td>structure</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Basic Data Types</h2>\n\n\n\n<p>The basic data types are integer-based and floating-point based. C++ language supports both signed and unsigned literals.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A data type specifies the type of data that a variable can store such as integer, floating, character etc. There are 4 types of data types in C++ language. Types Data Types Basic Data Type int, char, float, double, etc Derived Data Type array, pointer, etc Enumeration Data Type enum User Defined Data Type structure [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/896"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=896"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/896/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4533,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/896/revisions/4533"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=896"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=896"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=896"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 897,
    "date": "2020-08-25T05:21:02",
    "date_gmt": "2020-08-25T05:21:02",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=24"
    },
    "modified": "2021-02-15T10:24:09",
    "modified_gmt": "2021-02-15T10:24:09",
    "slug": "c-keywords",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-keywords/",
    "title": {
      "rendered": "C++ Keywords"
    },
    "content": {
      "rendered": "\n<p>A keyword is a reserved word. You cannot use it as a variable name, constant name etc.&nbsp;<strong>A list of 32 Keywords in C++ Language which are also available in C language are given below.</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>auto</td><td>break</td><td>case</td><td>char</td><td>const</td><td>continue</td><td>default</td><td>do</td></tr><tr><td>double</td><td>else</td><td>enum</td><td>extern</td><td>float</td><td>for</td><td>goto</td><td>if</td></tr><tr><td>int</td><td>long</td><td>register</td><td>return</td><td>short</td><td>signed</td><td>sizeof</td><td>static</td></tr><tr><td>struct</td><td>switch</td><td>typedef</td><td>union</td><td>unsigned</td><td>void</td><td>volatile</td><td>while</td></tr></tbody></table></figure>\n\n\n\n<p><strong>A list of 30 Keywords in C++ Language which are not available in C language are given below.</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>asm</td><td>dynamic_cast</td><td>namespace</td><td>reinterpret_cast</td><td>bool</td></tr><tr><td>explicit</td><td>new</td><td>static_cast</td><td>false</td><td>catch</td></tr><tr><td>operator</td><td>template</td><td>friend</td><td>private</td><td>class</td></tr><tr><td>this</td><td>inline</td><td>public</td><td>throw</td><td>const_cast</td></tr><tr><td>delete</td><td>mutable</td><td>protected</td><td>true</td><td>try</td></tr><tr><td>typeid</td><td>typename</td><td>using</td><td>virtual</td><td>wchar_t</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A keyword is a reserved word. You cannot use it as a variable name, constant name etc.&nbsp;A list of 32 Keywords in C++ Language which are also available in C language are given below. auto break case char const continue default do double else enum extern float for goto if int long register return short [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/897"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=897"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/897/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4532,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/897/revisions/4532"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=897"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=897"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=897"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4442,
    "date": "2020-08-25T05:40:12",
    "date_gmt": "2020-08-25T05:40:12",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=26"
    },
    "modified": "2021-02-15T10:24:14",
    "modified_gmt": "2021-02-15T10:24:14",
    "slug": "c-operators",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-operators/",
    "title": {
      "rendered": "C++ Operators"
    },
    "content": {
      "rendered": "\n<p>An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, logical, bitwise etc.</p>\n\n\n\n<p>There are following types of operators to perform different types of operations in C language.</p>\n\n\n\n<ul><li>Arithmetic Operators</li><li>Relational Operators</li><li>Logical Operators</li><li>Bitwise Operators</li><li>Assignment Operator</li><li>Unary operator</li><li>Ternary or Conditional Operator</li><li>Misc Operator</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-operaters1.png\" alt=\"Cpp Operators 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Precedence of Operators in C++</h2>\n\n\n\n<p>The precedence of operator species that which operator will be evaluated first and next. The associativity specifies the operators direction to be evaluated, it may be left to right or right to left.</p>\n\n\n\n<p>Let&#8217;s understand the precedence by the example given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int data=5+10*10; </code></pre>\n\n\n\n<p>The &#8220;data&#8221; variable will contain 105 because * (multiplicative operator) is evaluated before + (additive operator).</p>\n\n\n\n<p>The precedence and associativity of C++ operators is given below:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Category</th><th>Operator</th><th>Associativity</th></tr><tr><td>Postfix</td><td>() [] -&gt; . ++ &#8211; &#8211;</td><td>Left to right</td></tr><tr><td>Unary</td><td>+ &#8211; ! ~ ++ &#8211; &#8211; (type)* &amp; sizeof</td><td>Right to left</td></tr><tr><td>Multiplicative</td><td>* / %</td><td>Left to right</td></tr><tr><td>Additive</td><td>+ &#8211;</td><td>Right to left</td></tr><tr><td>Shift</td><td>&lt;&lt; &gt;&gt;</td><td>Left to right</td></tr><tr><td>Relational</td><td>&lt; &lt;= &gt; &gt;=</td><td>Left to right</td></tr><tr><td>Equality</td><td>== !=/td&gt;</td><td>Right to left</td></tr><tr><td>Bitwise AND</td><td>&amp;</td><td>Left to right</td></tr><tr><td>Bitwise XOR</td><td>^</td><td>Left to right</td></tr><tr><td>Bitwise OR</td><td>|</td><td>Right to left</td></tr><tr><td>Logical AND</td><td>&amp;&amp;</td><td>Left to right</td></tr><tr><td>Logical OR</td><td>||</td><td>Left to right</td></tr><tr><td>Conditional</td><td>?:</td><td>Right to left</td></tr><tr><td>Assignment</td><td>= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=</td><td>Right to left</td></tr><tr><td>Comma</td><td>,</td><td>Left to right</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An operator is simply a symbol that is used to perform operations. There can be many types of operations like arithmetic, logical, bitwise etc. There are following types of operators to perform different types of operations in C language. Arithmetic Operators Relational Operators Logical Operators Bitwise Operators Assignment Operator Unary operator Ternary or Conditional Operator [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4442"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4442"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4442/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4531,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4442/revisions/4531"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4442"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4442"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4442"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 899,
    "date": "2020-08-25T05:42:13",
    "date_gmt": "2020-08-25T05:42:13",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=28"
    },
    "modified": "2021-02-15T10:24:23",
    "modified_gmt": "2021-02-15T10:24:23",
    "slug": "c-identifiers",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-identifiers/",
    "title": {
      "rendered": "C++ Identifiers"
    },
    "content": {
      "rendered": "\n<p>C++ identifiers in a program are used to refer to the name of the variables, functions, arrays, or other user-defined data types created by the programmer. They are the basic requirement of any language. Every language has its own rules for naming the identifiers.</p>\n\n\n\n<p>In short, we can say that the C++ identifiers represent the essential elements in a program which are given below:</p>\n\n\n\n<ul><li><strong>Constants</strong></li><li><strong>Variables</strong></li><li><strong>Functions</strong></li><li><strong>Labels</strong></li><li><strong>Defined data types</strong></li></ul>\n\n\n\n<p><strong>Some naming rules are common in both C and C++. They are as follows:</strong></p>\n\n\n\n<ul><li>Only alphabetic characters, digits, and underscores are allowed.</li><li>The identifier name cannot start with a digit, i.e., the first letter should be alphabetical. After the first letter, we can use letters, digits, or underscores.</li><li>In C++, uppercase and lowercase letters are distinct. Therefore, we can say that C++ identifiers are case-sensitive.</li><li>A declared keyword cannot be used as a variable name.</li></ul>\n\n\n\n<p><strong>For example,</strong>&nbsp;suppose we have two identifiers, named as &#8216;FirstName&#8217;, and &#8216;Firstname&#8217;. Both the identifiers will be different as the letter &#8216;N&#8217; in the first case in uppercase while lowercase in second. Therefore, it proves that identifiers are case-sensitive.</p>\n\n\n\n<h3>Valid Identifiers</h3>\n\n\n\n<p><strong>The following are the examples of valid identifiers are:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Result  \nTest2  \n_sum  \npower  </code></pre>\n\n\n\n<h3>Invalid Identifiers</h3>\n\n\n\n<p><strong>The following are the examples of invalid identifiers:</strong></p>\n\n\n\n<ol><li>Sum-1&nbsp;&nbsp;&nbsp;//&nbsp;containing&nbsp;special&nbsp;character&nbsp;&#8216;-&#8216;.&nbsp;&nbsp;</li><li class=\"\">2data&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;the&nbsp;first&nbsp;letter&nbsp;is&nbsp;a&nbsp;digit.&nbsp;&nbsp;&nbsp;</li><li><strong>break</strong>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;use&nbsp;of&nbsp;a&nbsp;keyword.&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<h4>Note: Identifiers cannot be used as the keywords. It may not conflict with the keywords, but it is highly recommended that the keywords should not be used as the identifier name. You should always use a consistent way to name the identifiers so that your code will be more readable and maintainable.</h4>\n\n\n\n<p>The major difference between C and C++ is the limit on the length of the name of the variable. ANSI C considers only the first 32 characters in a name while ANSI C++ imposes no limit on the length of the name.</p>\n\n\n\n<p>Constants are the identifiers that refer to the fixed value, which do not change during the execution of a program. Both C and C++ support various kinds of literal constants, and they do have any memory location. For example, 123, 12.34, 037, 0X2, etc. are the literal constants.</p>\n\n\n\n<p><strong>Let&#8217;s look at a simple example to understand the concept of identifiers.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int a;  \n    int A;  \n    cout&lt;&lt;\"Enter the values of 'a' and 'A'\";  \n    cin>>a;  \n    cin>>A;  \n    cout&lt;&lt;\"\\nThe values that you have entered are : \"&lt;&lt;a&lt;&lt;\" , \"&lt;&lt;A;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we declare two variables &#8216;a&#8217; and &#8216;A&#8217;. Both the letters are same but they will behave as different identifiers. As we know that the identifiers are the case-sensitive so both the identifiers will have different memory locations.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-identifiers.png\" alt=\"C++ Identifiers\"/></figure>\n\n\n\n<h3>What are the keywords?</h3>\n\n\n\n<p>Keywords are the reserved words that have a special meaning to the compiler. They are reserved for a special purpose, which cannot be used as the identifiers. For example, &#8216;for&#8217;, &#8216;break&#8217;, &#8216;while&#8217;, &#8216;if&#8217;, &#8216;else&#8217;, etc. are the predefined words where predefined words are those words whose meaning is already known by the compiler. Whereas, the identifiers are the names which are defined by the programmer to the program elements such as variables, functions, arrays, objects, classes.</p>\n\n\n\n<p><strong>Differences between Identifiers and Keywords</strong></p>\n\n\n\n<p><strong>The following is the list of differences between identifiers and keywords:</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Identifiers</th><th>Keywords</th></tr><tr><td>Identifiers are the names defined by the programmer to the basic elements of a program.</td><td>Keywords are the reserved words whose meaning is known by the compiler.</td></tr><tr><td>It is used to identify the name of the variable.</td><td>It is used to specify the type of entity.</td></tr><tr><td>It can consist of letters, digits, and underscore.</td><td>It contains only letters.</td></tr><tr><td>It can use both lowercase and uppercase letters.</td><td>It uses only lowercase letters.</td></tr><tr><td>No special character can be used except the underscore.</td><td>It cannot contain any special character.</td></tr><tr><td>The starting letter of identifiers can be lowercase, uppercase or underscore.</td><td>It can be started only with the lowercase letter.</td></tr><tr><td>It can be classified as internal and external identifiers.</td><td>It cannot be further classified.</td></tr><tr><td>Examples are test, result, sum, power, etc.</td><td>Examples are &#8216;for&#8217;, &#8216;if&#8217;, &#8216;else&#8217;, &#8216;break&#8217;, etc.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>C++ identifiers in a program are used to refer to the name of the variables, functions, arrays, or other user-defined data types created by the programmer. They are the basic requirement of any language. Every language has its own rules for naming the identifiers. In short, we can say that the C++ identifiers represent the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/899"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=899"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/899/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4530,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/899/revisions/4530"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=899"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=899"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=899"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4443,
    "date": "2020-08-25T05:50:17",
    "date_gmt": "2020-08-25T05:50:17",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=30"
    },
    "modified": "2021-02-15T10:24:37",
    "modified_gmt": "2021-02-15T10:24:37",
    "slug": "c-expression",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-expression/",
    "title": {
      "rendered": "C++ Expression"
    },
    "content": {
      "rendered": "\n<p>C++ expression consists of operators, constants, and variables which are arranged according to the rules of the language. It can also contain function calls which return values. An expression can consist of one or more operands, zero or more operators to compute a value. Every expression produces some value which is assigned to the variable with the help of an assignment operator.</p>\n\n\n\n<p><strong>Examples of C++ expression:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>(a+b) - c  \n(x/y) -z  \n4a2 - 5b +c  \n(a+b) * (x+y)</code></pre>\n\n\n\n<h3>An expression can be of following types:</h3>\n\n\n\n<ul><li>Constant expressions</li><li>Integral expressions</li><li>Float expressions</li><li>Pointer expressions</li><li>Relational expressions</li><li>Logical expressions</li><li>Bitwise expressions</li><li>Special assignment expressions</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-expression.png\" alt=\"C++ Expression\"/></figure>\n\n\n\n<p>If the expression is a combination of the above expressions, such expressions are known as compound expressions.</p>\n\n\n\n<h3>Constant expressions</h3>\n\n\n\n<p>A constant expression is an expression that consists of only constant values. It is an expression whose value is determined at the compile-time but evaluated at the run-time. It can be composed of integer, character, floating-point, and enumeration constants.</p>\n\n\n\n<p>Constants are used in the following situations:</p>\n\n\n\n<ul><li>It is used in the subscript declarator to describe the array bound.</li><li>It is used after the case keyword in the switch statement.</li><li>It is used as a numeric value in an&nbsp;<strong>enum</strong></li><li>It specifies a bit-field width.</li><li>It is used in the pre-processor&nbsp;<strong>#if</strong></li></ul>\n\n\n\n<p>In the above scenarios, the constant expression can have integer, character, and enumeration constants. We can use the static and extern keyword with the constants to define the function-scope.</p>\n\n\n\n<p>The following table shows the expression containing constant value:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Expression containing constant</th><th>Constant value</th></tr><tr><td>x = (2/3) * 4</td><td>(2/3) * 4</td></tr><tr><td>extern int y = 67</td><td>67</td></tr><tr><td>int z = 43</td><td>43</td></tr><tr><td>static int a = 56</td><td>56</td></tr></tbody></table></figure>\n\n\n\n<p>Let&#8217;s see a simple program containing constant expression:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int x;        // variable declaration.  \n    x=(3/2) + 2;  // constant expression  \n    cout&lt;&lt;\"Value of x is : \"&lt;&lt;x;  // displaying the value of x.  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have first declared the &#8216;x&#8217; variable of integer type. After declaration, we assign the simple constant expression to the &#8216;x&#8217; variable.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of x is : 3  \n</code></pre>\n\n\n\n<h3>Integral Expressions</h3>\n\n\n\n<p>An integer expression is an expression that produces the integer value as output after performing all the explicit and implicit conversions.</p>\n\n\n\n<p><strong>Following are the examples of integral expression:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>(x * y) -5        \nx + int(9.0)  \nwhere x and y are the integers.  </code></pre>\n\n\n\n<p><strong>Let&#8217;s see a simple example of integral expression:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int x;  // variable declaration.  \n    int y;  // variable declaration  \n    int z;  // variable declaration  \n    cout&lt;&lt;\"Enter the values of x and y\";  \n    cin>>x>>y;  \n    z=x+y;  \n    cout&lt;&lt;\"\\n\"&lt;&lt;\"Value of z is :\"&lt;&lt;z; //  displaying the value of z.  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have declared three variables, i.e., x, y, and z. After declaration, we take the user input for the values of &#8216;x&#8217; and &#8216;y&#8217;. Then, we add the values of &#8216;x&#8217; and &#8216;y&#8217; and stores their result in &#8216;z&#8217; variable.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter the values of x and y                                                                                                     \n8                                                                                                                               \n9                                                                                                                               \nValue of z is :17     \n</code></pre>\n\n\n\n<p><strong>Let&#8217;s see another example of integral expression.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n      \n   int x;   // variable declaration  \n   int y=9;    // variable initialization  \n   x=y+int(10.0);    // integral expression  \n  cout&lt;&lt;\"Value of x : \"&lt;&lt;x;   // displaying the value of x.  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we declare two variables, i.e., x and y. We store the value of expression (y+int(10.0)) in a &#8216;x&#8217; variable.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of x : 19       \n</code></pre>\n\n\n\n<h3>Float Expressions</h3>\n\n\n\n<p>A float expression is an expression that produces floating-point value as output after performing all the explicit and implicit conversions.</p>\n\n\n\n<p>The following are the examples of float expressions:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x+y  \n(x/10) + y  \n34.5  \nx+float(10)  </code></pre>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n      \n   float x=8.9;      // variable initialization  \n   float y=5.6;      // variable initialization  \n   float z;             // variable declaration  \n   z=x+y;  \n   std::cout &lt;&lt;\"value of z is :\"  &lt;&lt; z&lt;&lt;std::endl;  // displaying the value of z.  \n     \n  \n    return 0;  \n}</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of z is :14.5       \n</code></pre>\n\n\n\n<p><strong>Let&#8217;s see another example of float expression.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n   float x=6.7;    // variable initialization  \n   float y;      // variable declaration  \n   y=x+float(10);   // float expression  \n   std::cout &lt;&lt;\"value of y is :\"  &lt;&lt; y&lt;&lt;std::endl;  // displaying the value of y  \n   return 0;  \n}</code></pre>\n\n\n\n<p>In the above code, we have declared two variables, i.e., x and y. After declaration, we store the value of expression (x+float(10)) in variable &#8216;y&#8217;.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of y is :16.7  \n</code></pre>\n\n\n\n<h3>Pointer Expressions</h3>\n\n\n\n<p>A pointer expression is an expression that produces address value as an output.</p>\n\n\n\n<p><strong>The following are the examples of pointer expression:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&amp;x  \nptr  \nptr++  \nptr-  </code></pre>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n      \n   int a&#91;]={1,2,3,4,5};  // array initialization  \n   int *ptr;       // pointer declaration  \n   ptr=a;    // assigning base address of array to the pointer ptr  \n   ptr=ptr+1;   // incrementing the value of pointer  \n   std::cout &lt;&lt;\"value of second element of an array : \"  &lt;&lt; *ptr&lt;&lt;std::endl;  \n   return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we declare the array and a pointer ptr. We assign the base address to the variable &#8216;ptr&#8217;. After assigning the address, we increment the value of pointer &#8216;ptr&#8217;. When pointer is incremented then &#8216;ptr&#8217; will be pointing to the second element of the array.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of second element of an array : 2\n</code></pre>\n\n\n\n<h3>Relational Expressions</h3>\n\n\n\n<p>A relational expression is an expression that produces a value of type bool, which can be either true or false. It is also known as a boolean expression. When arithmetic expressions are used on both sides of the relational operator, arithmetic expressions are evaluated first, and then their results are compared.</p>\n\n\n\n<p><strong>The following are the examples of the relational expression:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a>b  \na-b >= x-y  \na+b>80  </code></pre>\n\n\n\n<p><strong>Let&#8217;s understand through an example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int a=45;    // variable declaration  \n    int b=78;    // variable declaration  \n    bool y= a>b;   // relational expression  \n    cout&lt;&lt;\"Value of y is :\"&lt;&lt;y;  // displaying the value of y.  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have declared two variables, i.e., &#8216;a&#8217; and &#8216;b&#8217;. After declaration, we have applied the relational operator between the variables to check whether &#8216;a&#8217; is greater than &#8216;b&#8217; or not.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of y is :0 \n</code></pre>\n\n\n\n<p><strong>Let&#8217;s see another example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int a=4;     // variable declaration  \n int b=5;     // variable declaration  \n int x=3;     // variable declaration  \n int y=6;    // variable declaration  \n cout&lt;&lt;((a+b)>=(x+y));   // relational expression   \n return 0;  \n} </code></pre>\n\n\n\n<p>In the above code, we have declared four variables, i.e., &#8216;a&#8217;, &#8216;b&#8217;, &#8216;x&#8217; and &#8216;y&#8217;. Then, we apply the relational operator (&gt;=) between these variables.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n</code></pre>\n\n\n\n<h3>Logical Expressions</h3>\n\n\n\n<p>A logical expression is an expression that combines two or more relational expressions and produces a bool type value. The logical operators are &#8216;&amp;&amp;&#8217; and &#8216;||&#8217; that combines two or more relational expressions.</p>\n\n\n\n<p>The following are some examples of logical expressions:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a>b &amp;&amp; x>y  \na>10 || b==5 </code></pre>\n\n\n\n<p><strong>Let&#8217;s see a simple example of logical expression.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int a=2;  \n int b=7;  \n int c=4;  \ncout&lt;&lt;((a>b)||(a>c));  \nreturn 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n</code></pre>\n\n\n\n<h3>Bitwise Expressions</h3>\n\n\n\n<p>A bitwise expression is an expression which is used to manipulate the data at a bit level. They are basically used to shift the bits.</p>\n\n\n\n<p>For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x=3</code></pre>\n\n\n\n<p>x&gt;&gt;3 // This statement means that we are shifting the three-bit position to the right.</p>\n\n\n\n<p>In the above example, the value of &#8216;x&#8217; is 3 and its binary value is 0011. We are shifting the value of &#8216;x&#8217; by three-bit position to the right. Let&#8217;s understand through the diagrammatic representation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-expression2.png\" alt=\"C++ Expression\"/></figure>\n\n\n\n<p><strong>Let&#8217;s see a simple example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int x=5;   // variable declaration  \nstd::cout &lt;&lt; (x>>1) &lt;&lt; std::endl;  \nreturn 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have declared a variable &#8216;x&#8217;. After declaration, we applied the bitwise operator, i.e., right shift operator to shift one-bit position to right.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>2\n</code></pre>\n\n\n\n<p><strong>Let&#8217;s look at another example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int x=7;   // variable declaration  \nstd::cout &lt;&lt; (x&lt;&lt;3) &lt;&lt; std::endl;  \nreturn 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have declared a variable &#8216;x&#8217;. After declaration, we applied the left shift operator to variable &#8216;x&#8217; to shift the three-bit position to the left.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>56\n</code></pre>\n\n\n\n<h3>Special Assignment Expressions</h3>\n\n\n\n<p>Special assignment expressions are the expressions which can be further classified depending upon the value assigned to the variable.</p>\n\n\n\n<ul><li><strong>Chained Assignment</strong></li></ul>\n\n\n\n<p>Chained assignment expression is an expression in which the same value is assigned to more than one variable by using single statement.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a=b=20   \n or   \n(a=b) = 20</code></pre>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n  \n int a;   // variable declaration  \n int b;   // variable declaration  \n a=b=80;  // chained assignment  \n std::cout &lt;&lt;\"Values of 'a' and 'b' are : \" &lt;&lt;a&lt;&lt;\",\"&lt;&lt;b&lt;&lt; std::endl;  \n return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have declared two variables, i.e., &#8216;a&#8217; and &#8216;b&#8217;. Then, we have assigned the same value to both the variables using chained assignment expression.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Values of 'a' and 'b' are : 80,80  \n</code></pre>\n\n\n\n<h4>Note: Using chained assignment expression, the value cannot be assigned to the variable at the time of declaration. For example, int a=b=c=90 is an invalid statement.</h4>\n\n\n\n<ul><li><strong>Embedded Assignment Expression</strong></li></ul>\n\n\n\n<p>An embedded assignment expression is an assignment expression in which assignment expression is enclosed within another assignment expression.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int a;  // variable declaration  \n int b;  // variable declaration  \n a=10+(b=90);  // embedded assignment expression  \n std::cout &lt;&lt;\"Values of 'a' is \" &lt;&lt;a&lt;&lt; std::endl;  \n return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have declared two variables, i.e., &#8216;a&#8217; and &#8216;b&#8217;. Then, we applied embedded assignment expression (a=10+(b=90)).</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Values of 'a' is 100  \n</code></pre>\n\n\n\n<ul><li><strong>Compound Assignment</strong></li></ul>\n\n\n\n<p>A compound assignment expression is an expression which is a combination of an assignment operator and binary operator.</p>\n\n\n\n<p><strong>For example,</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a+=10;   </code></pre>\n\n\n\n<p>In the above statement, &#8216;a&#8217; is a variable and &#8216;+=&#8217; is a compound statement.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n  int a=10;   // variable declaration  \n  a+=10;    // compound assignment  \n  std::cout &lt;&lt; \"Value of a is :\" &lt;&lt;a&lt;&lt; std::endl; // displaying the value of a.  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have declared a variable &#8216;a&#8217; and assigns 10 value to this variable. Then, we applied compound assignment operator (+=) to &#8216;a&#8217; variable, i.e., a+=10 which is equal to (a=a+10). This statement increments the value of &#8216;a&#8217; by 10.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of a is :20  vv</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>C++ expression consists of operators, constants, and variables which are arranged according to the rules of the language. It can also contain function calls which return values. An expression can consist of one or more operands, zero or more operators to compute a value. Every expression produces some value which is assigned to the variable [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4443"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4443"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4443/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4529,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4443/revisions/4529"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4443"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4443"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4443"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 901,
    "date": "2020-08-25T05:54:17",
    "date_gmt": "2020-08-25T05:54:17",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=32"
    },
    "modified": "2021-02-15T10:24:54",
    "modified_gmt": "2021-02-15T10:24:54",
    "slug": "c-if-else",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-if-else/",
    "title": {
      "rendered": "C++ if-else"
    },
    "content": {
      "rendered": "\n<p>In C++ programming, if statement is used to test the condition. There are various types of if statements in C++.</p>\n\n\n\n<ul><li>if statement</li><li>if-else statement</li><li>nested if statement</li><li>if-else-if ladder</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ IF Statement</h2>\n\n\n\n<p>The C++ if statement tests the condition. It is executed if condition is true.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition){    \n//code to be executed    \n}  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-if-else1.png\" alt=\"Cpp If else 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ If Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n   \nint main () {  \n   int num = 10;    \n            if (num % 2 == 0)    \n            {    \n                cout&lt;&lt;\"It is even number\";    \n            }   \n   return 0;  \n}  </code></pre>\n\n\n\n<p>Output:/p&gt;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>It is even number\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ IF-else Statement</h2>\n\n\n\n<p>The C++ if-else statement also tests the condition. It executes if block if condition is true otherwise else block is executed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition){    \n//code if condition is true    \n}else{    \n//code if condition is false    \n}    </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-if-else2.png\" alt=\"Cpp If else 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ If-else Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main () {  \n   int num = 11;    \n            if (num % 2 == 0)    \n            {    \n                cout&lt;&lt;\"It is even number\";    \n            }   \n            else  \n            {    \n                cout&lt;&lt;\"It is odd number\";    \n            }  \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>It is odd number\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ If-else Example: with input from user</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main () {  \n    int num;  \n    cout&lt;&lt;\"Enter a Number: \";  \n    cin>>num;  \n            if (num % 2 == 0)    \n            {    \n                cout&lt;&lt;\"It is even number\"&lt;&lt;endl;    \n            }   \n            else  \n            {    \n                cout&lt;&lt;\"It is odd number\"&lt;&lt;endl;    \n            }  \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter a number:11\nIt is odd number\n</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter a number:12\nIt is even number\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ IF-else-if ladder Statement</h2>\n\n\n\n<p>The C++ if-else-if ladder statement executes one condition from multiple statements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition1){    \n//code to be executed if condition1 is true    \n}else if(condition2){    \n//code to be executed if condition2 is true    \n}    \nelse if(condition3){    \n//code to be executed if condition3 is true    \n}    \n...    \nelse{    \n//code to be executed if all the conditions are false    \n}</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-if-else3.png\" alt=\"Cpp If else 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ If else-if Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main () {  \n       int num;  \n       cout&lt;&lt;\"Enter a number to check grade:\";    \n       cin>>num;  \n            if (num &lt;0 || num >100)    \n            {    \n                cout&lt;&lt;\"wrong number\";    \n            }    \n            else if(num >= 0 &amp;&amp; num &lt; 50){    \n                cout&lt;&lt;\"Fail\";    \n            }    \n            else if (num >= 50 &amp;&amp; num &lt; 60)    \n            {    \n                cout&lt;&lt;\"D Grade\";    \n            }    \n            else if (num >= 60 &amp;&amp; num &lt; 70)    \n            {    \n                cout&lt;&lt;\"C Grade\";    \n            }    \n            else if (num >= 70 &amp;&amp; num &lt; 80)    \n            {    \n                cout&lt;&lt;\"B Grade\";    \n            }    \n            else if (num >= 80 &amp;&amp; num &lt; 90)    \n            {    \n                cout&lt;&lt;\"A Grade\";    \n            }    \n            else if (num >= 90 &amp;&amp; num &lt;= 100)    \n            {    \n                cout&lt;&lt;\"A+ Grade\";  \n            }    \n    } </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter a number to check grade:66\nC Grade\n</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter a number to check grade:-2\nwrong number</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++ programming, if statement is used to test the condition. There are various types of if statements in C++. if statement if-else statement nested if statement if-else-if ladder C++ IF Statement The C++ if statement tests the condition. It is executed if condition is true. C++ If Example Output:/p&gt; C++ IF-else Statement The C++ [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/901"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=901"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/901/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4528,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/901/revisions/4528"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=901"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=901"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=901"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4444,
    "date": "2020-08-25T05:55:32",
    "date_gmt": "2020-08-25T05:55:32",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=34"
    },
    "modified": "2021-02-15T10:25:05",
    "modified_gmt": "2021-02-15T10:25:05",
    "slug": "c-switch",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-switch/",
    "title": {
      "rendered": "C++ switch"
    },
    "content": {
      "rendered": "\n<p>The C++ switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>switch(expression){      \ncase value1:      \n //code to be executed;      \n break;    \ncase value2:      \n //code to be executed;      \n break;    \n......      \n      \ndefault:       \n //code to be executed if all cases are not matched;      \n break;    \n}  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-switch1.png\" alt=\"Cpp Switch 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Switch Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main () {  \n       int num;  \n       cout&lt;&lt;\"Enter a number to check grade:\";    \n       cin>>num;  \n           switch (num)    \n          {    \n              case 10: cout&lt;&lt;\"It is 10\"; break;    \n              case 20: cout&lt;&lt;\"It is 20\"; break;    \n              case 30: cout&lt;&lt;\"It is 30\"; break;    \n              default: cout&lt;&lt;\"Not 10, 20 or 30\"; break;    \n          }    \n    } </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter a number:\n10\nIt is 10\n</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter a number:\n55\nNot 10, 20 or 30</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The C++ switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement in C++. C++ Switch Example Output: Output:</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4444"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4444"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4444/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4527,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4444/revisions/4527"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4444"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4444"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4444"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 903,
    "date": "2020-08-25T05:57:04",
    "date_gmt": "2020-08-25T05:57:04",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=36"
    },
    "modified": "2021-02-15T10:25:22",
    "modified_gmt": "2021-02-15T10:25:22",
    "slug": "c-for-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-for-loop/",
    "title": {
      "rendered": "C++ For Loop"
    },
    "content": {
      "rendered": "\n<p>The C++ for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop than while or do-while loops.</p>\n\n\n\n<p>The C++ for loop is same as C/C#. We can initialize variable, check condition and increment/decrement value.</p>\n\n\n\n<ol><li><strong>for</strong>(initialization;&nbsp;condition;&nbsp;incr/decr){&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"\">//code&nbsp;to&nbsp;be&nbsp;executed&nbsp;&nbsp;&nbsp;&nbsp;</li><li>}&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Flowchart:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-for-loop1.png\" alt=\"Cpp For loop 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ For Loop Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main() {  \n         for(int i=1;i&lt;=10;i++){      \n            cout&lt;&lt;i &lt;&lt;\"\\n\";      \n          }       \n    }   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Nested For Loop</h2>\n\n\n\n<p>In C++, we can use for loop inside another for loop, it is known as nested for loop. The inner loop is executed fully when outer loop is executed one time. So if outer loop and inner loop are executed 4 times, inner loop will be executed 4 times for each outer loop i.e. total 16 times.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Nested For Loop Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example of nested for loop in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n   \nint main () {  \n        for(int i=1;i&lt;=3;i++){      \n             for(int j=1;j&lt;=3;j++){      \n            cout&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;\"\\n\";      \n          }     \n        }  \n    }   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Infinite For Loop</h2>\n\n\n\n<p>If we use double semicolon in for loop, it will be executed infinite times. Let&#8217;s see a simple example of infinite for loop in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n   \nint main () {  \n        for (; ;)    \n          {    \n                  cout&lt;&lt;\"Infinitive For Loop\";    \n          }    \n    }    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Infinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nInfinitive For Loop\nctrl+c</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The C++ for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop than while or do-while loops. The C++ for loop is same as C/C#. We can initialize variable, check condition and increment/decrement value. for(initialization;&nbsp;condition;&nbsp;incr/decr){&nbsp;&nbsp;&nbsp;&nbsp; //code&nbsp;to&nbsp;be&nbsp;executed&nbsp;&nbsp;&nbsp;&nbsp; }&nbsp;&nbsp;&nbsp;&nbsp; Flowchart: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/903"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=903"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/903/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4526,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/903/revisions/4526"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=903"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=903"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=903"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4445,
    "date": "2020-08-25T05:59:21",
    "date_gmt": "2020-08-25T05:59:21",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=38"
    },
    "modified": "2021-02-15T10:25:35",
    "modified_gmt": "2021-02-15T10:25:35",
    "slug": "c-while-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-while-loop/",
    "title": {
      "rendered": "C++ While loop"
    },
    "content": {
      "rendered": "\n<p>In C++, while loop is used to iterate a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop than for loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>while(condition){    \n//code to be executed    \n}    </code></pre>\n\n\n\n<p><strong>Flowchart:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-while-loop1.png\" alt=\"Cpp While loop 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ While Loop Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example of while loop to print table of 1.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main() {         \n int i=1;      \n         while(i&lt;=10)   \n       {      \n            cout&lt;&lt;i &lt;&lt;\"\\n\";    \n            i++;  \n          }       \n    }</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Nested While Loop Example</h2>\n\n\n\n<p>In C++, we can use while loop inside another while loop, it is known as nested while loop. The nested while loop is executed fully when outer loop is executed once.</p>\n\n\n\n<p>Let&#8217;s see a simple example of nested while loop in C++ programming language.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main () {  \n        int i=1;      \n          while(i&lt;=3)     \n          {    \n              int j = 1;    \n              while (j &lt;= 3)    \n{      \n            cout&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;\"\\n\";      \n            j++;  \n          }     \n           i++;  \n        }  \n    }    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Infinitive While Loop Example:</h2>\n\n\n\n<p>We can also create infinite while loop by passing true as the test condition.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main () {  \n        while(true)  \n          {    \n                  cout&lt;&lt;\"Infinitive While Loop\";    \n          }    \n    }   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Infinitive While Loop \nInfinitive While Loop\nInfinitive While Loop\nInfinitive While Loop\nInfinitive While Loop\nctrl+c</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++, while loop is used to iterate a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop than for loop. Flowchart: C++ While Loop Example Let&#8217;s see a simple example of while loop to print table of 1. Output: C++ Nested While [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4445"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4445"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4445/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4525,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4445/revisions/4525"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4445"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4445"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4445"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 905,
    "date": "2020-08-25T06:02:34",
    "date_gmt": "2020-08-25T06:02:34",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=40"
    },
    "modified": "2021-02-15T10:25:43",
    "modified_gmt": "2021-02-15T10:25:43",
    "slug": "c-do-while-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-do-while-loop/",
    "title": {
      "rendered": "C++ Do-While Loop"
    },
    "content": {
      "rendered": "\n<p>The C++ do-while loop is used to iterate a part of the program several times. If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use do-while loop.</p>\n\n\n\n<p>The C++ do-while loop is executed at least once because condition is checked after loop body.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>do{    \n//code to be executed    \n}while(condition);  </code></pre>\n\n\n\n<p><strong>Flowchart:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-do-while-loop1.png\" alt=\"Cpp Do while loop 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ do-while Loop Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example of C++ do-while loop to print the table of 1.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main() {  \n     int i = 1;    \n          do{    \n              cout&lt;&lt;i&lt;&lt;\"\\n\";    \n              i++;    \n          } while (i &lt;= 10) ;    \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Nested do-while Loop</h2>\n\n\n\n<p>In C++, if you use do-while loop inside another do-while loop, it is known as nested do-while loop. The nested do-while loop is executed fully for each outer do-while loop.</p>\n\n\n\n<p>Let&#8217;s see a simple example of nested do-while loop in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main() {  \n     int i = 1;    \n         do{    \n              int j = 1;          \n              do{    \n                cout&lt;&lt;i&lt;&lt;\"\\n\";        \n                  j++;    \n              } while (j &lt;= 3) ;    \n              i++;    \n          } while (i &lt;= 3) ;     \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n2 2 \n2 3\n3 1\n3 2\n3 3\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Infinitive do-while Loop</h2>\n\n\n\n<p>In C++, if you pass <strong>true</strong> in the do-while loop, it will be infinitive do-while loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>do{    \n//code to be executed    \n}while(true);  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Infinitive do-while Loop Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main() {  \n      do{    \n              cout&lt;&lt;\"Infinitive do-while Loop\";    \n          } while(true);     \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Infinitive do-while Loop \nInfinitive do-while Loop\nInfinitive do-while Loop\nInfinitive do-while Loop\nInfinitive do-while Loop\nctrl+c</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The C++ do-while loop is used to iterate a part of the program several times. If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use do-while loop. The C++ do-while loop is executed at least once because condition is checked after [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/905"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=905"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/905/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4524,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/905/revisions/4524"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=905"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=905"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=905"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 906,
    "date": "2020-08-25T06:04:29",
    "date_gmt": "2020-08-25T06:04:29",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=42"
    },
    "modified": "2021-02-15T10:25:50",
    "modified_gmt": "2021-02-15T10:25:50",
    "slug": "c-break-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-break-statement/",
    "title": {
      "rendered": "C++ Break Statement"
    },
    "content": {
      "rendered": "\n<p>The C++ break is used to break loop or switch statement. It breaks the current flow of the program at the given condition. In case of inner loop, it breaks only inner loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>jump-statement;      \nbreak;  </code></pre>\n\n\n\n<p><strong>Flowchart:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-break-statement1.png\" alt=\"Cpp Break statement 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Break Statement Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example of C++ break statement which is used inside the loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main() {  \n      for (int i = 1; i &lt;= 10; i++)    \n          {    \n              if (i == 5)    \n              {    \n                  break;    \n              }    \n        cout&lt;&lt;i&lt;&lt;\"\\n\";    \n          }    \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Break Statement with Inner Loop</h2>\n\n\n\n<p>The C++ break statement breaks inner loop only if you use break statement inside the inner loop.</p>\n\n\n\n<p>Let&#8217;s see the example code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    for(int i=1;i&lt;=3;i++){        \n            for(int j=1;j&lt;=3;j++){        \n                if(i==2&amp;&amp;j==2){        \n                    break;        \n                        }        \n                    cout&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;\"\\n\";             \n                    }        \n          }    \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n3 1\n3 2\n3 3</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The C++ break is used to break loop or switch statement. It breaks the current flow of the program at the given condition. In case of inner loop, it breaks only inner loop. Flowchart: C++ Break Statement Example Let&#8217;s see a simple example of C++ break statement which is used inside the loop. Output: C++ [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/906"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=906"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/906/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4523,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/906/revisions/4523"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=906"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=906"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=906"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 907,
    "date": "2020-08-25T06:06:08",
    "date_gmt": "2020-08-25T06:06:08",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=44"
    },
    "modified": "2021-02-15T10:26:02",
    "modified_gmt": "2021-02-15T10:26:02",
    "slug": "c-continue-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-continue-statement/",
    "title": {
      "rendered": "C++ Continue Statement"
    },
    "content": {
      "rendered": "\n<p>The C++ continue statement is used to continue loop. It continues the current flow of the program and skips the remaining code at specified condition. In case of inner loop, it continues only inner loop.</p>\n\n\n\n<ol><li>jump-statement;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"\"><strong>continue</strong>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Continue Statement Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n     for(int i=1;i&lt;=10;i++){      \n            if(i==5){      \n                continue;      \n            }      \n            cout&lt;&lt;i&lt;&lt;\"\\n\";      \n        }        \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n6\n7\n8\n9\n10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Continue Statement with Inner Loop</h2>\n\n\n\n<p>C++ Continue Statement continues inner loop only if you use continue statement inside the inner loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n for(int i=1;i&lt;=3;i++){        \n            for(int j=1;j&lt;=3;j++){        \n             if(i==2&amp;&amp;j==2){        \n                continue;        \n                        }        \n                cout&lt;&lt;i&lt;&lt;\" \"&lt;&lt;j&lt;&lt;\"\\n\";                  \n                    }        \n            }            \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n2 3\n3 1\n3 2\n3 3\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The C++ continue statement is used to continue loop. It continues the current flow of the program and skips the remaining code at specified condition. In case of inner loop, it continues only inner loop. jump-statement;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; C++ Continue Statement Example Output: C++ Continue Statement with Inner Loop C++ Continue Statement continues inner loop only [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/907"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=907"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/907/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4522,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/907/revisions/4522"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=907"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=907"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=907"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 908,
    "date": "2020-08-25T06:07:02",
    "date_gmt": "2020-08-25T06:07:02",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=46"
    },
    "modified": "2021-02-15T10:26:13",
    "modified_gmt": "2021-02-15T10:26:13",
    "slug": "c-goto-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-goto-statement/",
    "title": {
      "rendered": "C++ Goto Statement"
    },
    "content": {
      "rendered": "\n<p>The C++ goto statement is also known as jump statement. It is used to transfer control to the other part of the program. It unconditionally jumps to the specified label.</p>\n\n\n\n<p>It can be used to transfer control from deeply nested loop or switch case label.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Goto Statement Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of goto statement in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \nineligible:    \n         cout&lt;&lt;\"You are not eligible to vote!\\n\";    \n      cout&lt;&lt;\"Enter your age:\\n\";    \n      int age;  \n      cin>>age;  \n      if (age &lt; 18){    \n              goto ineligible;    \n      }    \n      else    \n      {    \n              cout&lt;&lt;\"You are eligible to vote!\";     \n      }         \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>You are not eligible to vote!\nEnter your age:\n16\nYou are not eligible to vote!\nEnter your age:\n7\nYou are not eligible to vote!\nEnter your age:\n22\nYou are eligible to vote!</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The C++ goto statement is also known as jump statement. It is used to transfer control to the other part of the program. It unconditionally jumps to the specified label. It can be used to transfer control from deeply nested loop or switch case label. C++ Goto Statement Example Let&#8217;s see the simple example of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/908"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=908"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/908/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4521,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/908/revisions/4521"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=908"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=908"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=908"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 909,
    "date": "2020-08-25T06:08:17",
    "date_gmt": "2020-08-25T06:08:17",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=48"
    },
    "modified": "2021-02-15T10:26:20",
    "modified_gmt": "2021-02-15T10:26:20",
    "slug": "c-comments",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-comments/",
    "title": {
      "rendered": "C++ Comments"
    },
    "content": {
      "rendered": "\n<p>The C++ comments are statements that are not executed by the compiler. The comments in C++ programming can be used to provide explanation of the code, variable, method or class. By the help of comments, you can hide the program code also.</p>\n\n\n\n<p>There are two types of comments in C++.</p>\n\n\n\n<ul><li>Single Line comment</li><li>Multi Line comment</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Single Line Comment</h2>\n\n\n\n<p>The single line comment starts with // (double slash). Let&#8217;s see an example of single line comment in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int x = 11; // x is a variable      \n cout&lt;&lt;x&lt;&lt;\"\\n\";         \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>11\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Multi Line Comment</h2>\n\n\n\n<p>The C++ multi line comment is used to comment multiple lines of code. It is surrounded by slash and asterisk (/∗ &#8230;.. ∗/). Let&#8217;s see an example of multi line comment in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;ostream>  \nusing namespace std;  \nint main()  \n{  \n/* declare and   \nprint variable in C++. */   \n int x = 35;     \n cout&lt;&lt;x&lt;&lt;\"\\n\";         \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>35</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The C++ comments are statements that are not executed by the compiler. The comments in C++ programming can be used to provide explanation of the code, variable, method or class. By the help of comments, you can hide the program code also. There are two types of comments in C++. Single Line comment Multi Line [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/909"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=909"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/909/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4520,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/909/revisions/4520"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=909"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=909"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=909"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 910,
    "date": "2020-08-25T06:09:50",
    "date_gmt": "2020-08-25T06:09:50",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=51"
    },
    "modified": "2021-02-15T10:26:30",
    "modified_gmt": "2021-02-15T10:26:30",
    "slug": "c-functions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-functions/",
    "title": {
      "rendered": "C++ Functions"
    },
    "content": {
      "rendered": "\n<p>The function in C++ language is also known as procedure or subroutine in other programming languages.</p>\n\n\n\n<p>To perform any task, we can create function. A function can be called many times. It provides modularity and code reusability.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Advantage of functions in C</h2>\n\n\n\n<p>There are many advantages of functions.</p>\n\n\n\n<p><strong>1) Code Reusability</strong></p>\n\n\n\n<p>By creating functions in C++, you can call it many times. So we don&#8217;t need to write the same code again and again.</p>\n\n\n\n<p><strong>2) Code optimization</strong></p>\n\n\n\n<p>It makes the code optimized, we don&#8217;t need to write much code.</p>\n\n\n\n<p>Suppose, you have to check 3 numbers (531, 883 and 781) whether it is prime number or not. Without using function, you need to write the prime number logic 3 times. So, there is repetition of code.</p>\n\n\n\n<p>But if you use functions, you need to write the logic only once and you can reuse it several times.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Types of Functions</h2>\n\n\n\n<p>There are two types of functions in C programming:</p>\n\n\n\n<p><strong>1. Library Functions:</strong>&nbsp;are the functions which are declared in the C++ header files such as ceil(x), cos(x), exp(x), etc.</p>\n\n\n\n<p><strong>2. User-defined functions:</strong>&nbsp;are the functions which are created by the C++ programmer, so that he/she can use it many times. It reduces complexity of a big program and optimizes the code.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-functions1.png\" alt=\"CPP Functions 1\"/></figure>\n\n\n\n<h2>Declaration of a function</h2>\n\n\n\n<p>The syntax of creating function in C++ language is given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>return_type function_name(data_type parameter...)  \n{    \n//code to be executed    \n}  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Function Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of C++ function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid func() {    \n   static int i=0; //static variable    \n   int j=0; //local variable    \n   i++;    \n   j++;    \n   cout&lt;&lt;\"i=\" &lt;&lt; i&lt;&lt;\" and j=\" &lt;&lt;j&lt;&lt;endl;    \n}    \nint main()  \n{  \n func();    \n func();    \n func();    \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>i= 1 and j= 1\ni= 2 and j= 1\ni= 3 and j= 1\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The function in C++ language is also known as procedure or subroutine in other programming languages. To perform any task, we can create function. A function can be called many times. It provides modularity and code reusability. Advantage of functions in C There are many advantages of functions. 1) Code Reusability By creating functions in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/910"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=910"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/910/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4519,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/910/revisions/4519"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=910"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=910"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=910"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 911,
    "date": "2020-08-25T06:11:26",
    "date_gmt": "2020-08-25T06:11:26",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=53"
    },
    "modified": "2021-02-15T10:26:37",
    "modified_gmt": "2021-02-15T10:26:37",
    "slug": "call-by-value-and-call-by-reference-in-c",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/call-by-value-and-call-by-reference-in-c/",
    "title": {
      "rendered": "Call by value and call by reference in C++"
    },
    "content": {
      "rendered": "\n<p>There are two ways to pass value or data to function in C language: call by value and call by reference. Original value is not modified in call by value but it is modified in call by reference.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/call-by-value-and-call-by-reference-in-cpp1.png\" alt=\"CPP Call by value and call by reference in cpp 1\"/></figure>\n\n\n\n<p>Let&#8217;s understand call by value and call by reference in C++ language one by one.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Call by value in C++</h2>\n\n\n\n<p>In call by value,&nbsp;<strong>original value is not modified.</strong></p>\n\n\n\n<p>In call by value, value being passed to the function is locally stored by the function parameter in stack memory location. If you change the value of function parameter, it is changed for the current function only. It will not change the value of variable inside the caller method such as main().</p>\n\n\n\n<p>Let&#8217;s try to understand the concept of call by value in C++ language by the example given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid change(int data);  \nint main()  \n{  \nint data = 3;  \nchange(data);  \ncout &lt;&lt; \"Value of the data is: \" &lt;&lt; data&lt;&lt; endl;  \nreturn 0;  \n}  \nvoid change(int data)  \n{  \ndata = 5;  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of the data is: 3\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Call by reference in C++</h2>\n\n\n\n<p>In call by reference, original value is modified because we pass reference (address).</p>\n\n\n\n<p>Here, address of the value is passed in the function, so actual and formal arguments share the same address space. Hence, value changed inside the function, is reflected inside as well as outside the function.</p>\n\n\n\n<p><strong>Note:</strong>&nbsp;To understand the call by reference, you must have the basic knowledge of pointers.</p>\n\n\n\n<p>Let&#8217;s try to understand the concept of call by reference in C++ language by the example given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include&lt;iostream>  \nusing namespace std;    \nvoid swap(int *x, int *y)  \n{  \n int swap;  \n swap=*x;  \n *x=*y;  \n *y=swap;  \n}  \nint main()   \n{    \n int x=500, y=100;    \n swap(&amp;x, &amp;y);  // passing value to function  \n cout&lt;&lt;\"Value of x is: \"&lt;&lt;x&lt;&lt;endl;  \n cout&lt;&lt;\"Value of y is: \"&lt;&lt;y&lt;&lt;endl;  \n return 0;  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of x is: 100\nValue of y is: 500   \n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Difference between call by value and call by reference in C++</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>No.</th><th>Call by value</th><th>Call by reference</th></tr><tr><td>1</td><td>A copy of value is passed to the function</td><td>An address of value is passed to the function</td></tr><tr><td>2</td><td>Changes made inside the function is not reflected on other functions</td><td>Changes made inside the function is reflected outside the function also</td></tr><tr><td>3</td><td>Actual and formal arguments will be created in different memory location</td><td>Actual and formal arguments will be created in same memory location</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are two ways to pass value or data to function in C language: call by value and call by reference. Original value is not modified in call by value but it is modified in call by reference. Let&#8217;s understand call by value and call by reference in C++ language one by one. Call by [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/911"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=911"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/911/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4518,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/911/revisions/4518"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=911"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=911"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=911"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 912,
    "date": "2020-08-25T06:12:58",
    "date_gmt": "2020-08-25T06:12:58",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=55"
    },
    "modified": "2021-02-15T10:26:44",
    "modified_gmt": "2021-02-15T10:26:44",
    "slug": "c-recursion",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-recursion/",
    "title": {
      "rendered": "C++ Recursion"
    },
    "content": {
      "rendered": "\n<p>When function is called within the same function, it is known as recursion in C++. The function which calls the same function, is known as recursive function.</p>\n\n\n\n<p>A function that calls itself, and doesn&#8217;t perform any task after function call, is known as tail recursion. In tail recursion, we generally call the same function with return statement.</p>\n\n\n\n<p>Let&#8217;s see a simple example of recursion.</p>\n\n\n\n<ol><li>recursionfunction(){&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"\">recursionfunction();&nbsp;//calling&nbsp;self&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li><li>}&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Recursion Example</h2>\n\n\n\n<p>Let&#8217;s see an example to print factorial number using recursion in C++ language.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include&lt;iostream>  \nusing namespace std;    \nint main()  \n{  \nint factorial(int);  \nint fact,value;  \ncout&lt;&lt;\"Enter any number: \";  \ncin>>value;  \nfact=factorial(value);  \ncout&lt;&lt;\"Factorial of a number is: \"&lt;&lt;fact&lt;&lt;endl;  \nreturn 0;  \n}  \nint factorial(int n)  \n{  \nif(n&lt;0)  \nreturn(-1); /*Wrong value*/    \nif(n==0)  \nreturn(1);  /*Terminating condition*/  \nelse  \n{  \nreturn(n*factorial(n-1));      \n}  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter any number: 5\nFactorial of a number is: 120\n</code></pre>\n\n\n\n<p>We can understand the above program of recursive method call by the figure given below:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-recursion1.png\" alt=\"CPP Recursion 1\"/></figure>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>When function is called within the same function, it is known as recursion in C++. The function which calls the same function, is known as recursive function. A function that calls itself, and doesn&#8217;t perform any task after function call, is known as tail recursion. In tail recursion, we generally call the same function with [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/912"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=912"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/912/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4517,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/912/revisions/4517"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=912"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=912"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=912"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 913,
    "date": "2020-08-25T06:15:29",
    "date_gmt": "2020-08-25T06:15:29",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=57"
    },
    "modified": "2021-02-15T10:26:52",
    "modified_gmt": "2021-02-15T10:26:52",
    "slug": "c-storage-classes",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-storage-classes/",
    "title": {
      "rendered": "C++ Storage Classes"
    },
    "content": {
      "rendered": "\n<p>Storage class is used to define the lifetime and visibility of a variable and/or function within a C++ program.</p>\n\n\n\n<p>Lifetime refers to the period during which the variable remains active and visibility refers to the module of a program in which the variable is accessible.</p>\n\n\n\n<p>There are five types of storage classes, which can be used in a C++ program</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Automatic\nRegister\nStatic\nExternal\nMutable</code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Storage Class</th><th>Keyword</th><th>Lifetime</th><th>Visibility</th><th>Initial Value</th></tr><tr><td>Automatic</td><td>auto</td><td>Function Block</td><td>Local</td><td>Garbage</td></tr><tr><td>Register</td><td>register</td><td>Function Block</td><td>Local</td><td>Garbage</td></tr><tr><td>Mutable</td><td>mutable</td><td>Class</td><td>Local</td><td>Garbage</td></tr><tr><td>External</td><td>extern</td><td>Whole Program</td><td>Global</td><td>Zero</td></tr><tr><td>Static</td><td>static</td><td>Whole Program</td><td>Local</td><td>Zero</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Automatic Storage Class</h2>\n\n\n\n<p>It is the default storage class for all local variables. The auto keyword is applied to all local variables automatically.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{   \nauto int y;  \nfloat y = 3.45;  \n}  </code></pre>\n\n\n\n<p>The above example defines two variables with a same storage class, auto can only be used within functions.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Register Storage Class</h2>\n\n\n\n<p>The register variable allocates memory in register than RAM. Its size is same of register size. It has a faster access than other variables.</p>\n\n\n\n<p>It is recommended to use register variable only for quick access such as in counter.</p>\n\n\n\n<p>Note: We can&#8217;t get the address of register variable.</p>\n\n\n\n<ol><li><strong>register</strong>&nbsp;<strong>int</strong>&nbsp;counter=0;&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Static Storage Class</h2>\n\n\n\n<p>The static variable is initialized only once and exists till the end of a program. It retains its value between multiple functions call.</p>\n\n\n\n<p>The static variable has the default value 0 which is provided by compiler.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid func() {    \n   static int i=0; //static variable    \n   int j=0; //local variable    \n   i++;    \n   j++;    \n   cout&lt;&lt;\"i=\" &lt;&lt; i&lt;&lt;\" and j=\" &lt;&lt;j&lt;&lt;endl;    \n}    \nint main()  \n{  \n func();    \n func();    \n func();    \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>i= 1 and j= 1\ni= 2 and j= 1\ni= 3 and j= 1\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>External Storage Class</h2>\n\n\n\n<p>The extern variable is visible to all the programs. It is used if two or more files are sharing same variable or function.</p>\n\n\n\n<ol><li><strong>extern</strong>&nbsp;<strong>int</strong>&nbsp;counter=0;&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Storage class is used to define the lifetime and visibility of a variable and/or function within a C++ program. Lifetime refers to the period during which the variable remains active and visibility refers to the module of a program in which the variable is accessible. There are five types of storage classes, which can be [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/913"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=913"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/913/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4516,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/913/revisions/4516"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=913"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=913"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=913"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 914,
    "date": "2020-08-25T06:18:18",
    "date_gmt": "2020-08-25T06:18:18",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=59"
    },
    "modified": "2021-02-15T10:27:03",
    "modified_gmt": "2021-02-15T10:27:03",
    "slug": "c-arrays",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-arrays/",
    "title": {
      "rendered": "C++ Arrays"
    },
    "content": {
      "rendered": "\n<p>Like other programming languages, array in C++ is a group of similar types of elements that have contiguous memory location.</p>\n\n\n\n<p>In C++&nbsp;<strong>std::array</strong>&nbsp;is a container that encapsulates fixed size arrays. In C++, array index starts from 0. We can store only fixed set of elements in C++ array.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/c-array1.png\" alt=\"Java C array 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Advantages of C++ Array</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Code Optimization (less code)\nRandom Access\nEasy to traverse data\nEasy to manipulate data\nEasy to sort data etc.</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Disadvantages of C++ Array</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Fixed size</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Array Types</h2>\n\n\n\n<p>There are 2 types of arrays in C++ programming:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Single Dimensional Array\nMultidimensional Array</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Single Dimensional Array</h2>\n\n\n\n<p>Let&#8217;s see a simple example of C++ array, where we are going to create, initialize and traverse array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code></code></pre>\n\n\n\n<p>Output:/p&gt;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n0\n20\n0\n30\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Array Example: Traversal using foreach loop</h2>\n\n\n\n<p>We can also traverse the array elements using foreach loop. It returns array element one by one.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int arr&#91;5]={10, 0, 20, 0, 30}; //creating and initializing array    \n        //traversing array    \n       for (int i: arr)     \n        {    \n            cout&lt;&lt;i&lt;&lt;\"\\n\";    \n        }    \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n20\n30\n40\n50</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Like other programming languages, array in C++ is a group of similar types of elements that have contiguous memory location. In C++&nbsp;std::array&nbsp;is a container that encapsulates fixed size arrays. In C++, array index starts from 0. We can store only fixed set of elements in C++ array. Advantages of C++ Array Disadvantages of C++ Array [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/914"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=914"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/914/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4515,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/914/revisions/4515"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=914"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=914"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=914"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 915,
    "date": "2020-08-25T06:21:04",
    "date_gmt": "2020-08-25T06:21:04",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=61"
    },
    "modified": "2021-02-15T10:27:12",
    "modified_gmt": "2021-02-15T10:27:12",
    "slug": "c-passing-array-to-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-passing-array-to-function/",
    "title": {
      "rendered": "C++ Passing Array to Function"
    },
    "content": {
      "rendered": "\n<p>In C++, to reuse the array logic, we can create function. To pass array to function in C++, we need to provide only array name.</p>\n\n\n\n<ol><li>functionname(arrayname);&nbsp;//passing&nbsp;array&nbsp;to&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Passing Array to Function Example: print array elements</h2>\n\n\n\n<p>Let&#8217;s see an example of C++ function which prints the array elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid printArray(int arr&#91;5]);  \nint main()  \n{  \n        int arr1&#91;5] = { 10, 20, 30, 40, 50 };    \n        int arr2&#91;5] = { 5, 15, 25, 35, 45 };    \n        printArray(arr1); //passing array to function    \n        printArray(arr2);  \n}  \nvoid printArray(int arr&#91;5])  \n{  \n    cout &lt;&lt; \"Printing array elements:\"&lt;&lt; endl;  \n    for (int i = 0; i &lt; 5; i++)  \n    {  \n                   cout&lt;&lt;arr&#91;i]&lt;&lt;\"\\n\";    \n    }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Printing array elements:                                                              \n10                                                                                    \n20                                                                                    \n30                                                                                    \n40                                                                                    \n50                                                                                    \nPrinting array elements:                                                              \n5                                                                                     \n15                                                                                    \n25                                                                                    \n35                                                                                    \n45\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Passing Array to Function Example: Print minimum number</h2>\n\n\n\n<p>Let&#8217;s see an example of C++ array which prints minimum number in an array using function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid  printMin(int arr&#91;5]);  \nint main()  \n{  \n   int arr1&#91;5] = { 30, 10, 20, 40, 50 };    \n        int arr2&#91;5] = { 5, 15, 25, 35, 45 };    \n        printMin(arr1);//passing array to function    \n         printMin(arr2);  \n}  \nvoid  printMin(int arr&#91;5])  \n{  \n    int min = arr&#91;0];    \n        for (int i = 0; i > 5; i++)    \n        {    \n            if (min > arr&#91;i])    \n            {    \n                min = arr&#91;i];    \n            }    \n        }    \n        cout&lt;&lt; \"Minimum element is: \"&lt;&lt; min &lt;&lt;\"\\n\";    \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Minimum element is: 10                                                                \nMinimum element is: 5   \n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Passing Array to Function Example: Print maximum number</h2>\n\n\n\n<p>Let&#8217;s see an example of C++ array which prints maximum number in an array using function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid  printMax(int arr&#91;5]);  \nint main()  \n{  \n        int arr1&#91;5] = { 25, 10, 54, 15, 40 };    \n        int arr2&#91;5] = { 12, 23, 44, 67, 54 };    \n        printMax(arr1); //Passing array to function  \n         printMax(arr2);   \n}  \nvoid  printMax(int arr&#91;5])  \n{  \n    int max = arr&#91;0];    \n        for (int i = 0; i &lt; 5; i++)    \n        {    \n            if (max &lt; arr&#91;i])    \n            {    \n                max = arr&#91;i];    \n            }    \n        }    \n        cout&lt;&lt; \"Maximum element is: \"&lt;&lt; max &lt;&lt;\"\\n\";    \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Maximum element is: 54\nMaximum element is: 67</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++, to reuse the array logic, we can create function. To pass array to function in C++, we need to provide only array name. functionname(arrayname);&nbsp;//passing&nbsp;array&nbsp;to&nbsp;function&nbsp;&nbsp;&nbsp;&nbsp; C++ Passing Array to Function Example: print array elements Let&#8217;s see an example of C++ function which prints the array elements. Output: C++ Passing Array to Function Example: Print [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/915"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=915"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/915/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4514,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/915/revisions/4514"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=915"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=915"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=915"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 916,
    "date": "2020-08-25T06:22:18",
    "date_gmt": "2020-08-25T06:22:18",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=63"
    },
    "modified": "2021-02-15T10:27:27",
    "modified_gmt": "2021-02-15T10:27:27",
    "slug": "c-multidimensional-arrays",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-multidimensional-arrays/",
    "title": {
      "rendered": "C++ Multidimensional Arrays"
    },
    "content": {
      "rendered": "\n<p>The multidimensional array is also known as rectangular arrays in C++. It can be two dimensional or three dimensional. The data is stored in tabular form (row ∗ column) which is also known as matrix.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Multidimensional Array Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example of multidimensional array in C++ which declares, initializes and traverse two dimensional arrays.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n  int test&#91;3]&#91;3];  //declaration of 2D array   \n    test&#91;0]&#91;0]=5;  //initialization   \n    test&#91;0]&#91;1]=10;   \n    test&#91;1]&#91;1]=15;  \n    test&#91;1]&#91;2]=20;  \n    test&#91;2]&#91;0]=30;  \n    test&#91;2]&#91;2]=10;  \n    //traversal    \n    for(int i = 0; i &lt; 3; ++i)  \n    {  \n        for(int j = 0; j &lt; 3; ++j)  \n        {  \n            cout&lt;&lt; test&#91;i]&#91;j]&lt;&lt;\" \";  \n        }  \n        cout&lt;&lt;\"\\n\"; //new line at each row   \n    }  \n    return 0;  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>5 10 0 \n0 15 20 \n30 0 10 \n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Multidimensional Array Example: Declaration and initialization at same time</h2>\n\n\n\n<p>Let&#8217;s see a simple example of multidimensional array which initializes array at the time of declaration.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n  int test&#91;3]&#91;3] =  \n    {  \n        {2, 5, 5},  \n        {4, 0, 3},  \n        {9, 1, 8}  };  //declaration and initialization    \n    //traversal    \n    for(int i = 0; i &lt; 3; ++i)  \n    {  \n        for(int j = 0; j &lt; 3; ++j)  \n        {  \n            cout&lt;&lt; test&#91;i]&#91;j]&lt;&lt;\" \";  \n        }  \n        cout&lt;&lt;\"\\n\"; //new line at each row   \n    }  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:&#8221;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2 5 5 \n4 0 3 \n9 1 8</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The multidimensional array is also known as rectangular arrays in C++. It can be two dimensional or three dimensional. The data is stored in tabular form (row ∗ column) which is also known as matrix. C++ Multidimensional Array Example Let&#8217;s see a simple example of multidimensional array in C++ which declares, initializes and traverse two [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/916"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=916"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/916/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4513,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/916/revisions/4513"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=916"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=916"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=916"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 917,
    "date": "2020-08-25T06:24:18",
    "date_gmt": "2020-08-25T06:24:18",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=66"
    },
    "modified": "2021-02-15T10:28:00",
    "modified_gmt": "2021-02-15T10:28:00",
    "slug": "c-pointers",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-pointers/",
    "title": {
      "rendered": "C++ Pointers"
    },
    "content": {
      "rendered": "\n<p>The pointer in C++ language is a variable, it is also known as locator or indicator that points to an address of a value.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-pointers1.png\" alt=\"Cpp Pointers 1\"/></figure>\n\n\n\n<p><strong>Advantage of pointer</strong></p>\n\n\n\n<p>1) Pointer reduces the code and improves the performance, it is used to retrieving strings, trees etc. and used with arrays, structures and functions.</p>\n\n\n\n<p>2) We can return multiple values from function using pointer.</p>\n\n\n\n<p>3) It makes you able to access any memory location in the computer&#8217;s memory.</p>\n\n\n\n<p><strong>Usage of pointer</strong></p>\n\n\n\n<p>There are many usage of pointers in C++ language.</p>\n\n\n\n<p><strong>1) Dynamic memory allocation</strong></p>\n\n\n\n<p>In c language, we can dynamically allocate memory using malloc() and calloc() functions where pointer is used.</p>\n\n\n\n<p><strong>2) Arrays, Functions and Structures</strong></p>\n\n\n\n<p>Pointers in c language are widely used in arrays, functions and structures. It reduces the code and improves the performance.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Symbols used in pointer</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Symbol</th><th>Name</th><th>Description</th></tr><tr><td>&amp; (ampersand sign)</td><td>Address operator</td><td>Determine the address of a variable.</td></tr><tr><td>∗ (asterisk sign)</td><td>Indirection operator</td><td>Access the value of an address.</td></tr></tbody></table></figure>\n\n\n\n<h2>Declaring a pointer</h2>\n\n\n\n<p>The pointer in C++ language can be declared using ∗ (asterisk symbol).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int ∗   a; //pointer to int    \nchar ∗  c; //pointer to char    </code></pre>\n\n\n\n<h2>Pointer Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of using pointers printing the address and value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \nint number=30;    \nint ∗   p;      \np=&amp;number;//stores the address of number variable    \ncout&lt;&lt;\"Address of number variable is:\"&lt;&lt;&amp;number&lt;&lt;endl;    \ncout&lt;&lt;\"Address of p variable is:\"&lt;&lt;p&lt;&lt;endl;    \ncout&lt;&lt;\"Value of p variable is:\"&lt;&lt;*p&lt;&lt;endl;    \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Address of number variable is:0x7ffccc8724c4\nAddress of p variable is:0x7ffccc8724c4\nValue of p variable is:30  \n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Pointer Program to swap 2 numbers without using 3rd variable</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \nint a=20,b=10,∗p1=&amp;a,∗p2=&amp;b;    \ncout&lt;&lt;\"Before swap: ∗p1=\"&lt;&lt;∗p1&lt;&lt;\" ∗p2=\"&lt;&lt;∗p2&lt;&lt;endl;    \n∗p1=∗p1+∗p2;    \n∗p2=∗p1-∗p2;    \n∗p1=∗p1-∗p2;    \ncout&lt;&lt;\"After swap: ∗p1=\"&lt;&lt;∗p1&lt;&lt;\" ∗p2=\"&lt;&lt;∗p2&lt;&lt;endl;    \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before swap: ∗p1=20 ∗p2=10\nAfter swap: ∗p1=10 ∗p2=20</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The pointer in C++ language is a variable, it is also known as locator or indicator that points to an address of a value. Advantage of pointer 1) Pointer reduces the code and improves the performance, it is used to retrieving strings, trees etc. and used with arrays, structures and functions. 2) We can return [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/917"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=917"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/917/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4512,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/917/revisions/4512"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=917"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=917"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=917"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 918,
    "date": "2020-08-25T06:27:25",
    "date_gmt": "2020-08-25T06:27:25",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=68"
    },
    "modified": "2021-02-15T10:28:10",
    "modified_gmt": "2021-02-15T10:28:10",
    "slug": "sizeof-operator-in-c",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/sizeof-operator-in-c/",
    "title": {
      "rendered": "sizeof() operator in C++"
    },
    "content": {
      "rendered": "\n<p>The sizeof() is an operator that evaluates the size of data type, constants, variable. It is a compile-time operator as it returns the size of any variable or a constant at the compilation time.</p>\n\n\n\n<p>The size, which is calculated by the sizeof() operator, is the amount of RAM occupied in the computer.</p>\n\n\n\n<p><strong>Syntax of the sizeof() operator is given below:</strong></p>\n\n\n\n<ol><li><strong>sizeof</strong>(data_type);&nbsp;&nbsp;</li></ol>\n\n\n\n<p>In the above syntax, the data_type can be the data type of the data, variables, constants, unions, structures, or any other user-defined data type.</p>\n\n\n\n<p><strong>The sizeof () operator can be applied to the following operand types:</strong></p>\n\n\n\n<ul><li><strong>When an operand is of data type</strong></li></ul>\n\n\n\n<p>If the parameter of a&nbsp;<strong>sizeof()</strong>&nbsp;operator contains the data type of a variable, then the&nbsp;<strong>sizeof()&nbsp;</strong>operator will return the size of the data type.</p>\n\n\n\n<p><strong>Let&#8217;s understand this scenario through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n  // Determining the space in bytes occupied by each data type.  \n  std::cout &lt;&lt; \"Size of integer data type : \" &lt;&lt;sizeof(int)&lt;&lt; std::endl;  \n  std::cout &lt;&lt; \"Size of float data type : \" &lt;&lt;sizeof(float)&lt;&lt; std::endl;  \n  std::cout &lt;&lt; \"Size of double data type : \" &lt;&lt;sizeof(double)&lt;&lt; std::endl;  \n  std::cout &lt;&lt; \"Size of char data type : \" &lt;&lt;sizeof(char)&lt;&lt; std::endl;  \n  return 0;  \n}</code></pre>\n\n\n\n<p>In the above program, we have evaluated the size of the in-built data types by using the sizeof() operator. As we know that int occupies 4 bytes, float occupies 4 bytes, double occupies 8 bytes, and char occupies 1 byte, and the same result is shown by the sizeof() operator as we can observe in the following output.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp1.png\" alt=\"sizeof() operator in C++\"/></figure>\n\n\n\n<ul><li><strong>When an operand is of Class type.</strong></li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Base  \n{  \nint a;  \n};  \nint main()  \n{  \nBase b;  \nstd::cout &lt;&lt; \"Size of class base is : \"&lt;&lt;sizeof(b) &lt;&lt; std::endl;  \nreturn 0;  \n}  </code></pre>\n\n\n\n<p>In the above program, we have evaluated the size of the class, which is having a single integer variable. The output would be 4 bytes as int variable occupies 4 bytes.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp2.png\" alt=\"sizeof() operator in C++\"/></figure>\n\n\n\n<p><strong>If we add one more integer variable in a class, then the code would look like:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Base  \n{  \n    int a;  \n    int d;  \n};  \nint main()  \n{  \n  Base b;  \n  std::cout &lt;&lt; \"Size of class base is : \"&lt;&lt;sizeof(b) &lt;&lt; std::endl;  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have added one more integer variable. In this case, the size of the class would be 8 bytes as&nbsp;<strong>int</strong>&nbsp;variable occupies 4 bytes, so two integer variables occupy 8 bytes.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp3.png\" alt=\"sizeof() operator in C++\"/></figure>\n\n\n\n<p><strong>If we add a char variable in the above code, then the code would look like:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n  \nusing namespace std;  \n  \nclass Base  \n{  \n    int a;  \n    int d;  \n    char ch;  \n};  \nint main()  \n{  \n  Base b;  \n  std::cout &lt;&lt; \"Size of class base is : \"&lt;&lt;sizeof(b) &lt;&lt; std::endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, the class has two integer variables, and one char variable. According to our calculation, the size of the class would be equal to 9 bytes (int+int+char), but this is wrong due to the concept of structure padding.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp4.png\" alt=\"sizeof() operator in C++\"/></figure>\n\n\n\n<ul><li><strong>When an operand is of array type.</strong></li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n int main()  \n{  \n  int arr&#91;]={10,20,30,40,50};  \n  std::cout &lt;&lt; \"Size of the array 'arr' is : \"&lt;&lt;sizeof(arr) &lt;&lt; std::endl;  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>In the above program, we have declared an array of integer type which contains five elements. We have evaluated the size of the array by using&nbsp;<strong>sizeof()</strong>&nbsp;operator. According to our calculation, the size of the array should be 20 bytes as int data type occupies 4 bytes, and array contains 5 elements, so total memory space occupied by this array is 5*4 = 20 bytes. The same result has been shown by the&nbsp;<strong>sizeof()</strong>&nbsp;operator as we can observe in the following output.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp5.png\" alt=\"sizeof() operator in C++\"/></figure>\n\n\n\n<p><strong>Let&#8217;s consider another scenario of an array.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid fun(int arr&#91;])  \n{  \n    std::cout &lt;&lt; \"Size of array is : \" &lt;&lt;sizeof(arr)&lt;&lt; std::endl;  \n}  \nint main()  \n{  \n  int arr&#91;]={10,20,30,40,50};  \n  fun(arr);  \n  return 0;  \n}</code></pre>\n\n\n\n<p>In the above program, we have tried to print the size of the array using the function. In this case, we have created an array of type integer, and we pass the &#8216;<strong>arr</strong>&#8216; to the function&nbsp;<strong>fun()</strong>. The&nbsp;<strong>fun()</strong>&nbsp;would return the size of the integer pointer, i.e.,&nbsp;<strong>int*</strong>, and the size of the int* is 8 bytes in the 64-bit operating system.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp6.png\" alt=\"sizeof() operator in C++\"/></figure>\n\n\n\n<ul><li><strong>When an operand is of pointer type.</strong></li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int *ptr1=new int(10);  \n    std::cout &lt;&lt; \"size of ptr1 : \" &lt;&lt;sizeof(ptr1)&lt;&lt; std::endl;                                                                                                                                                                                                                                  \n   std::cout &lt;&lt; \"size of *ptr1 : \" &lt;&lt;sizeof(*ptr1)&lt;&lt; std::endl;  \n   char *ptr2=new char('a');  \n   std::cout &lt;&lt;\"size of ptr2 : \" &lt;&lt;sizeof(ptr2)&lt;&lt; std::endl;  \n   std::cout &lt;&lt;\"size of *ptr2 : \"&lt;&lt;sizeof(*ptr2)&lt;&lt; std::endl;  \n   double *ptr3=new double(12.78);  \n    std::cout &lt;&lt;\"size of ptr3 : \" &lt;&lt;sizeof(ptr3)&lt;&lt; std::endl;  \n   std::cout &lt;&lt;\"size of *ptr3 : \"&lt;&lt;sizeof(*ptr3)&lt;&lt; std::endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>In the above program, we have determined the size of pointers. The size of pointers would remain same for all the data types. If the computer has 32bit operating system, then the size of the pointer would be 4 bytes. If the computer has 64-bit operating system, then the size of the pointer would be 8 bytes. I am running this program on 64-bit, so the output would be 8 bytes. Now, if we provide the &#8216;*&#8217; symbol to the pointer, then the output depends on the data type, for example, *ptr1 is of integer type means the sizeof() operator will return 4 bytes as int data type occupies 4 bytes.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp7.png\" alt=\"sizeof() operator in C++\"/></figure>\n\n\n\n<ul><li><strong>When an operand is an expression.</strong></li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n   \nint main()  \n{  \n   int num1;  \n   double num2;  \n   cout &lt;&lt; sizeof(num1+num2);  \n     return 0;  \n}</code></pre>\n\n\n\n<p>In the above program, we have declared two variables num1 and num2 of type int and double, respectively. The size of the int is 4 bytes, while the size of double is 8 bytes. The result would be the variable, which is of double type occupying 8 bytes.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/sizeof-operator-in-cpp8.png\" alt=\"sizeof() operator in C++\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The sizeof() is an operator that evaluates the size of data type, constants, variable. It is a compile-time operator as it returns the size of any variable or a constant at the compilation time. The size, which is calculated by the sizeof() operator, is the amount of RAM occupied in the computer. Syntax of the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/918"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=918"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/918/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4511,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/918/revisions/4511"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=918"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=918"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=918"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 919,
    "date": "2020-08-25T06:33:02",
    "date_gmt": "2020-08-25T06:33:02",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=70"
    },
    "modified": "2021-02-15T10:28:22",
    "modified_gmt": "2021-02-15T10:28:22",
    "slug": "c-array-of-pointers",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-array-of-pointers/",
    "title": {
      "rendered": "C++ Array of Pointers"
    },
    "content": {
      "rendered": "\n<p>Array and pointers are closely related to each other. In C++, the name of an array is considered às a pointer, i.e., the name of an array contains the address of an element. C++ considers the array name as the address of the first element. For example, if we create an array, i.e., marks which hold the 20 values of integer type, then marks will contain the address of first element, i.e., marks[0]. Therefore, we can say that array name (marks) is a pointer which is holding the address of the first element of an array.</p>\n\n\n\n<p><strong>Let&#8217;s understand this scenario through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int *ptr;  // integer pointer declaration  \n    int marks&#91;10]; // marks array declaration  \n    std::cout &lt;&lt; \"Enter the elements of an array :\" &lt;&lt; std::endl;  \n    for(int i=0;i&lt;10;i++)  \n    {  \n        cin>>marks&#91;i];  \n    }  \n    ptr=marks; // both marks and ptr pointing to the same element..  \n    std::cout &lt;&lt; \"The value of *ptr is :\" &lt;&lt;*ptr&lt;&lt; std::endl;  \n    std::cout &lt;&lt; \"The value of *marks is :\" &lt;&lt;*marks&lt;&lt;std::endl;  \n}  </code></pre>\n\n\n\n<p>In the above code, we declare an integer pointer and an array of integer type. We assign the address of marks to the ptr by using the statement ptr=marks; it means that both the variables &#8216;marks&#8217; and &#8216;ptr&#8217; point to the same element, i.e., marks[0]. When we try to print the values of *ptr and *marks, then it comes out to be same. Hence, it is proved that the array name stores the address of the first element of an array.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-array-of-pointers.png\" alt=\"C++ Array of Pointers\"/></figure>\n\n\n\n<h3>Array of Pointers</h3>\n\n\n\n<p>An array of pointers is an array that consists of variables of pointer type, which means that the variable is a pointer addressing to some other element. Suppose we create an array of pointer holding 5 integer pointers; then its declaration would look like:</p>\n\n\n\n<ol><li><strong>int</strong>&nbsp;*ptr[5];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;array&nbsp;of&nbsp;5&nbsp;integer&nbsp;pointer.&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>In the above declaration, we declare an array of pointer named as ptr, and it allocates 5 integer pointers in memory.</p>\n\n\n\n<p>The element of an array of a pointer can also be initialized by assigning the address of some other element. Let&#8217;s observe this case through an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int a; // variable declaration.  \nptr&#91;2] = &amp;a;   </code></pre>\n\n\n\n<p>In the above code, we are assigning the address of &#8216;a&#8217; variable to the third element of an array &#8216;ptr&#8217;.</p>\n\n\n\n<p>We can also retrieve the value of &#8216;a&#8217; be dereferencing the pointer.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>*ptr&#91;2];  </code></pre>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int ptr1&#91;5]; // integer array declaration  \n    int *ptr2&#91;5]; // integer array of pointer declaration  \n    std::cout &lt;&lt; \"Enter five numbers :\" &lt;&lt; std::endl;  \n    for(int i=0;i&lt;5;i++)  \n    {  \n        std::cin >> ptr1&#91;i];  \n    }  \n    for(int i=0;i&lt;5;i++)  \n    {  \n        ptr2&#91;i]=&amp;ptr1&#91;i];   \n    }  \n    // printing the values of ptr1 array  \n    std::cout &lt;&lt; \"The values are\" &lt;&lt; std::endl;  \n    for(int i=0;i&lt;5;i++)  \n    {  \n        std::cout &lt;&lt; *ptr2&#91;i] &lt;&lt; std::endl;  \n    }  \n    } </code></pre>\n\n\n\n<p>In the above code, we declare an array of integer type and an array of integer pointers. We have defined the &#8216;for&#8217; loop, which iterates through the elements of an array &#8216;ptr1&#8217;, and on each iteration, the address of element of ptr1 at index &#8216;i&#8217; gets stored in the ptr2 at index &#8216;i&#8217;.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-array-of-pointers2.png\" alt=\"C++ Array of Pointers\"/></figure>\n\n\n\n<p>Till now, we have learnt the array of pointers to an integer. Now, we will see how to create the array of pointers to strings.</p>\n\n\n\n<h3>Array of Pointer to Strings</h3>\n\n\n\n<p>An array of pointer to strings is an array of character pointers that holds the address of the first character of a string or we can say the base address of a string.</p>\n\n\n\n<p>The following are the differences between an array of pointers to string and two-dimensional array of characters:</p>\n\n\n\n<ul><li>An array of pointers to string is more efficient than the two-dimensional array of characters in case of memory consumption because an array of pointer to strings consumes less memory than the two-dimensional array of characters to store the strings.</li><li>In an array of pointers, the manipulation of strings is comparatively easier than in the case of 2d array. We can also easily change the position of the strings by using the pointers.</li></ul>\n\n\n\n<p>Let&#8217;s see how to declare the array of pointers to string.</p>\n\n\n\n<p>First, we declare the array of pointer to string:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>char *names&#91;5] = {\"john\",  \n                  \"Peter\",  \n                  \"Marco\",  \n                  \"Devin\",  \n                  \"Ronan\"};  </code></pre>\n\n\n\n<p>In the above code, we declared an array of pointer names as &#8216;names&#8217; of size 5. In the above case, we have done the initialization at the time of declaration, so we do not need to mention the size of the array of a pointer. The above code can be re-written as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>char *names&#91; ] = {\"john\",  \n                  \"Peter\",  \n                  \"Marco\",  \n                  \"Devin\",  \n                  \"Ronan\"};  </code></pre>\n\n\n\n<p>In the above case, each element of the &#8216;names&#8217; array is a string literal, and each string literal would hold the base address of the first character of a string. For example, names[0] contains the base address of &#8220;john&#8221;, names[1] contains the base address of &#8220;Peter&#8221;, and so on. It is not guaranteed that all the string literals will be stored in the contiguous memory location, but the characters of a string literal are stored in a contiguous memory location.</p>\n\n\n\n<p><strong>Let&#8217;s create a simple example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n  char *names&#91;5] = {\"john\",  \n                    \"Peter\",  \n                    \"Marco\",  \n                    \"Devin\",  \n                    \"Ronan\"};  \nfor(int i=0;i&lt;5;i++)  \n    {  \n        std::cout &lt;&lt; names&#91;i] &lt;&lt; std::endl;  \n    }  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we have declared an array of char pointer holding 5 string literals, and the first character of each string is holding the base address of the string.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-array-of-pointers3.png\" alt=\"C++ Array of Pointers\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Array and pointers are closely related to each other. In C++, the name of an array is considered às a pointer, i.e., the name of an array contains the address of an element. C++ considers the array name as the address of the first element. For example, if we create an array, i.e., marks which [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/919"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=919"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/919/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4510,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/919/revisions/4510"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=919"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=919"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=919"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 920,
    "date": "2020-08-25T06:35:59",
    "date_gmt": "2020-08-25T06:35:59",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=72"
    },
    "modified": "2021-02-15T10:28:29",
    "modified_gmt": "2021-02-15T10:28:29",
    "slug": "c-void-pointer",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-void-pointer/",
    "title": {
      "rendered": "C++ Void Pointer"
    },
    "content": {
      "rendered": "\n<pre class=\"wp-block-code\"><code>d\",*ptr1);  \n   return 0;  \n}  </code></pre>\n\n\n\n<p>In the above program, we declare two pointers &#8216;ptr&#8217; and &#8216;ptr1&#8217; of type void and integer, respectively. We also declare the integer type variable, i.e., &#8216;a&#8217;. After declaration, we assign the address of &#8216;a&#8217; variable to the pointer &#8216;ptr&#8217;. Then, we assign the void pointer to the integer pointer, i.e., ptr1 without any typecasting because in C, we do not need to typecast while assigning the void pointer to any other type of pointer.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-void-pointer3.png\" alt=\"C++ Void Pointer\"/></figure>\n\n\n\n<p><strong>In C++,</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n  void *ptr; // void pointer declaration  \n  int *ptr1; // integer pointer declaration  \n  int data=10; // integer variable initialization  \n  ptr=&amp;data;  // storing the address of data variable in void pointer variable  \n  ptr1=(int *)ptr; // assigning void pointer to integer pointer  \n  std::cout &lt;&lt; \"The value of *ptr1 is : \" &lt;&lt;*ptr1&lt;&lt; std::endl;  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>In the above program, we declare two pointer variables of type void and int type respectively. We also create another integer type variable, i.e., &#8216;data&#8217;. After declaration, we store the address of variable &#8216;data&#8217; in a void pointer variable, i.e., ptr. Now, we want to assign the void pointer to integer pointer, in order to do this, we need to apply the cast operator, i.e., (int *) to the void pointer variable. This cast operator tells the compiler which type of value void pointer is holding. For casting, we have to type the data type and * in a bracket like (char *) or (int *).</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-void-pointer4.png\" alt=\"C++ Void Pointer\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the above program, we declare two pointers &#8216;ptr&#8217; and &#8216;ptr1&#8217; of type void and integer, respectively. We also declare the integer type variable, i.e., &#8216;a&#8217;. After declaration, we assign the address of &#8216;a&#8217; variable to the pointer &#8216;ptr&#8217;. Then, we assign the void pointer to the integer pointer, i.e., ptr1 without any typecasting because [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/920"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=920"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/920/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4509,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/920/revisions/4509"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=920"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=920"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=920"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 921,
    "date": "2020-08-25T06:44:05",
    "date_gmt": "2020-08-25T06:44:05",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=74"
    },
    "modified": "2021-02-15T10:28:39",
    "modified_gmt": "2021-02-15T10:28:39",
    "slug": "c-references",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-references/",
    "title": {
      "rendered": "C++ References"
    },
    "content": {
      "rendered": "\n<p>Till now, we have read that C++ supports two types of variables:</p>\n\n\n\n<ul><li>An ordinary variable is a variable that contains the value of some type. For example, we create a variable of type int, which means that the variable can hold the value of type integer.</li><li>A pointer is a variable that stores the address of another variable. It can be dereferenced to retrieve the value to which this pointer points to.</li><li>There is another variable that C++ supports, i.e., references. It is a variable that behaves as an alias for another variable.</li></ul>\n\n\n\n<h2>How to create a reference?</h2>\n\n\n\n<p>Reference can be created by simply using an ampersand (&amp;) operator. When we create a variable, then it occupies some memory location. We can create a reference of the variable; therefore, we can access the original variable by using either name of the variable or reference. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int a=10;  </code></pre>\n\n\n\n<p>Now, we create the reference variable of the above variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int &amp;ref=a;  </code></pre>\n\n\n\n<p>The above statement means that &#8216;ref&#8217; is a reference variable of &#8216;a&#8217;, i.e., we can use the &#8216;ref&#8217; variable in place of &#8216;a&#8217; variable.</p>\n\n\n\n<h2>C++ provides two types of references:</h2>\n\n\n\n<ul><li>References to non-const values</li><li>References as aliases</li></ul>\n\n\n\n<p><strong>References to non-const values</strong></p>\n\n\n\n<p>It can be declared by using &amp; operator with the reference type variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \nint a=10;  \nint &amp;value=a;  \nstd::cout &lt;&lt; value &lt;&lt; std::endl;  \nreturn 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> 10 \n</code></pre>\n\n\n\n<p><strong>References as aliases</strong></p>\n\n\n\n<p>References as aliases is another name of the variable which is being referenced.</p>\n\n\n\n<p><strong>For example,</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>int a=10;   // 'a' is a variable.  \nint &amp;b=a; // 'b' reference to a.  \nint &amp;c=a; // 'c' reference to a.  </code></pre>\n\n\n\n<p><strong>Let&#8217;s look at a simple example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \nint a=70; // variable initialization  \nint &amp;b=a;  \nint &amp;c=a;  \nstd::cout &lt;&lt; \"Value of a is :\" &lt;&lt;a&lt;&lt; std::endl;  \nstd::cout &lt;&lt; \"Value of b is :\" &lt;&lt;b&lt;&lt; std::endl;  \nstd::cout &lt;&lt; \"Value of c is :\" &lt;&lt;c&lt;&lt; std::endl;  \nreturn 0;}  </code></pre>\n\n\n\n<p>In the above code, we create a variable &#8216;a&#8217; which contains a value &#8217;70&#8217;. We have declared two reference variables, i.e., b and c, and both are referring to the same variable &#8216;a&#8217;. Therefore, we can say that &#8216;a&#8217; variable can be accessed by &#8216;b&#8217; and &#8216;c&#8217; variable.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> Value of a is :70 \nValue of b is :70 \nValue of c is :70 \n</code></pre>\n\n\n\n<h2>Properties of References</h2>\n\n\n\n<p><strong>The following are the properties of references:</strong></p>\n\n\n\n<p><strong>Initializátion</strong></p>\n\n\n\n<p>It must be initialized at the time of the declaration.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \nint a=10; // variable initialization  \nint &amp;b=a; // b reference to a  \nstd::cout &lt;&lt; \"value of a is \" &lt;&lt;b&lt;&lt; std::endl;  \nreturn 0;  \n} </code></pre>\n\n\n\n<p><strong>In the above code, we have created a reference variable, i.e., &#8216;b&#8217;. At the time of declaration, &#8216;a&#8217; variable is assigned to &#8216;b&#8217;. If we do not assign at the time of declaration, then the code would look like:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>int &amp;b;  \n&amp;b=a;   </code></pre>\n\n\n\n<p><strong>In the above code, we have created a reference variable, i.e., &#8216;b&#8217;. At the time of declaration, &#8216;a&#8217; variable is assigned to &#8216;b&#8217;. If we do not assign at the time of declaration, then the code would look like:</strong></p>\n\n\n\n<p>The above code will throw a compile-time error as &#8216;a&#8217; is not assigned at the time of declaration.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> value of a is 10 \n</code></pre>\n\n\n\n<p><strong>Reassignment</strong></p>\n\n\n\n<p>It cannot be reassigned means that the reference variable cannot be modified.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \nint x=11; // variable initialization  \nint z=67;  \nint &amp;y=x; // y reference to x  \nint &amp;y=z; // y reference to z, but throws a compile-time error.  \nreturn 0;}  </code></pre>\n\n\n\n<p>In the above code, &#8216;y&#8217; reference variable is referring to &#8216;x&#8217; variable, and then &#8216;z&#8217; is assigned to &#8216;y&#8217;. But this reassignment is not possible with the reference variable, so it throws a compile-time error.</p>\n\n\n\n<p><strong>Compile-time error</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>main.cpp: In function 'int main()':  \nmain.cpp:18:9: error: redeclaration of 'int&amp; y'  \nint &amp;y=z; // y reference to z, but throws a compile-time error.  \n^  \nmain.cpp:17:9: note: 'int&amp; y' previously declared here  \nint &amp;y=x; // y reference to x  \n^  </code></pre>\n\n\n\n<p><strong>Function Parameters</strong></p>\n\n\n\n<p>References can also be passed as a function parameter. It does not create a copy of the argument and behaves as an alias for a parameter. It enhances the performance as it does not create a copy of the argument.</p>\n\n\n\n<p><strong>Let&#8217;s understand through a simple example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \nint a=9; // variable initialization  \nint b=10; // variable initialization  \nswap(a, b); // function calling  \nstd::cout &lt;&lt; \"value of a is :\" &lt;&lt;a&lt;&lt; std::endl;  \nstd::cout &lt;&lt; \"value of b is :\" &lt;&lt;b&lt;&lt; std::endl;  \nreturn 0;  \n}  \nvoid swap(int &amp;p, int &amp;q) // function definition  \n{  \nint temp; // variable declaration  \ntemp=p;  \np=q;  \nq=temp;  \n}  </code></pre>\n\n\n\n<p>In the above code, we are swapping the values of &#8216;a&#8217; and &#8216;b&#8217;. We have passed the variables &#8216;a&#8217; and &#8216;b&#8217; to the swap() function. In swap() function, &#8216;p&#8217; is referring to &#8216;a&#8217; and &#8216;q&#8217; is referring to &#8216;b&#8217;. When we swap the values of &#8216;p&#8217; and &#8216;q&#8217; means that the values of &#8216;a&#8217; and &#8216;b&#8217; are also swapped.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> value of a is :10 \nvalue of b is :9 \n</code></pre>\n\n\n\n<p><strong>References as shortcuts</strong></p>\n\n\n\n<p>With the help of references, we can easily access the nested data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nstruct profile  \n{  \nint id;  \n};  \nstruct employee  \n{  \nprofile p;  \n};  \nint main()  \n{  \nemployee e;  \nint &amp;ref=e.p.id;  \nref=34;  \nstd::cout &lt;&lt; e.p.id &lt;&lt; std::endl;  \n}</code></pre>\n\n\n\n<p>In the above code, we are trying to access the &#8216;id&#8217; of the profile struct of the employee. We generally access this member by using the statement e.p.id, but this would be a tedious task if we have multiple access to this member. To avoid this situation, we create a reference variable, i.e., ref, which is another name of &#8216;e.p.id&#8217;.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> 34 </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Till now, we have read that C++ supports two types of variables: An ordinary variable is a variable that contains the value of some type. For example, we create a variable of type int, which means that the variable can hold the value of type integer. A pointer is a variable that stores the address [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/921"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=921"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/921/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4508,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/921/revisions/4508"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=921"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=921"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=921"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 922,
    "date": "2020-08-25T06:47:44",
    "date_gmt": "2020-08-25T06:47:44",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=76"
    },
    "modified": "2021-02-15T10:28:49",
    "modified_gmt": "2021-02-15T10:28:49",
    "slug": "c-reference-vs-pointer",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-reference-vs-pointer/",
    "title": {
      "rendered": "C++ Reference vs Pointer"
    },
    "content": {
      "rendered": "\n<p>C++ reference and pointer seem to be similar, but there are some differences that exist between them. A reference is a variable which is another name of the existing variable, while the pointer is variable that stores the address of another variable.</p>\n\n\n\n<h2>What is Reference?</h2>\n\n\n\n<p>A reference is a&nbsp;<a href=\"https://www.javatpoint.com/cpp-variable\">variable</a>&nbsp;that is referred to as another name for an already existing variable. The reference of a variable is created by storing the address of another variable.</p>\n\n\n\n<p>A reference variable can be considered as a constant pointer with automatic indirection. Here, automatic indirection means that the compiler automatically applies the indirection operator (*).</p>\n\n\n\n<p><strong>Example of reference:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>int &amp;a = i;  </code></pre>\n\n\n\n<p>In the above declaration, &#8216;a&#8217; is an alias name for &#8216;i&#8217; variable. We can also refer to the &#8216;i&#8217; variable through &#8216;a&#8217; variable also.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{    \n   int i=8;    // variable initialization  \n   int &amp;a=i; // creating a reference variable  \n   cout&lt;&lt;\"The value of 'i' variable is :\"&lt;&lt;a;  \n   return 0;  \n}</code></pre>\n\n\n\n<p>In the above code, we have created a reference variable, i.e., &#8216;a&#8217; for &#8216;i&#8217; variable. After creating a reference variable, we can access the value of &#8216;i&#8217; with the help of &#8216;a&#8217; variable.</p>\n\n\n\n<h2>What is Pointer?</h2>\n\n\n\n<p>A pointer is a variable that contains the address of another variable. It can be dereferenced with the help of (*)&nbsp;<a href=\"https://www.javatpoint.com/cpp-operators\">operator</a>&nbsp;to access the memory location to which the pointer points.</p>\n\n\n\n<h2>Differences between Reference and Pointer</h2>\n\n\n\n<p><strong>The following are the differences between reference and pointer:</strong></p>\n\n\n\n<ul><li><strong>Definition</strong></li></ul>\n\n\n\n<p>A reference variable is another name for an already existing variable. It is mainly used in &#8216;<strong>pass by reference</strong>&#8216; where the reference variable is passed as a parameter to the function and the function to which this variable is passed works on the original copy of the variable.</p>\n\n\n\n<p><strong>Let&#8217;s understand through a simple example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid func(int &amp;);  \nint main()  \n{  \n   int a=10;  \n   std::cout &lt;&lt;\"Value of 'a' is :\" &lt;&lt;a&lt;&lt; std::endl;  \n  func(a);   \n  std::cout &lt;&lt; \"Now value of 'a' is :\" &lt;&lt;a&lt;&lt; std::endl;  \n  return 0;  \n}  \nvoid func(int &amp;m)  \n{  \n   m=8;  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of 'a' is :10                                                                                                             \nNow value of 'a' is :8  \n</code></pre>\n\n\n\n<p>Whereas,&nbsp;<a href=\"https://www.javatpoint.com/cpp-pointers\">Pointer</a>&nbsp;is a variable that stores the address of another variable. It makes the programming easier as it holds the memory address of some variable.</p>\n\n\n\n<ul><li><strong>Declaration</strong></li></ul>\n\n\n\n<p>We can declare a reference variable by adding a &#8216;&amp;&#8217; symbol before a variable. If this symbol is used in the expression, then it will be treated as an address operator.</p>\n\n\n\n<p>Before using a pointer variable, we should declare a pointer variable, and this variable is created by adding a &#8216;*&#8217; operator before a variable.</p>\n\n\n\n<ul><li><strong>Reassignment</strong></li></ul>\n\n\n\n<p>We cannot reassign the reference variable. Now, we take a simple example as given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid func(int &amp;);  \nint main()  \n{  \n  int i;    // variable declaration  \n  int k;    // variable declaration  \n  int &amp;a=i;  \n  int &amp;a=k; // error  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>The above code shows the error that multiple declarations of&nbsp;<strong>int &amp;a</strong>&nbsp;are not allowed. Therefore, the above program concludes that reassignment operation is not valid for the reference variable.</p>\n\n\n\n<p>Whereas, the pointers can be re-assigned. This reassignment is useful when we are working with the data structures such as linked list, trees, etc.</p>\n\n\n\n<ul><li><strong>Memory Address</strong></li></ul>\n\n\n\n<p>In the case of reference, both the reference and actual variable refer to the same address. The new variable will not be assigned to the reference variable until the actual variable is either deleted or goes out of the scope.</p>\n\n\n\n<p><strong>Let&#8217;s understand this scenario through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid func(int &amp;);  \nint main()  \n{  \n  int i;  \n  int &amp;a=i;  \n  std::cout &lt;&lt; \"The address of 'a' variable is : \" &lt;&lt;&amp;a&lt;&lt; std::endl;  \n  std::cout &lt;&lt; \"The address of 'i' variable is : \" &lt;&lt;&amp;i&lt;&lt; std::endl;  \n  return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The address of 'a' variable is : 0x7fff078e7e44                                                                        The address of 'i' variable is : 0x7fff078e7e4\n</code></pre>\n\n\n\n<p>The above output shows that both the reference variable and the actual variable have the same address.</p>\n\n\n\n<p>In the case of pointers, both the pointer variable and the actual variable will have different memory addresses. Let&#8217;s understand this through an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int k;  \n    int *p;  \n    p=&amp;k;  \n    cout&lt;&lt;\"The memory address of p variable is :\"&lt;&lt;&amp;p;  \n    cout&lt;&lt;\"\\nThe memory address of k variable is :\"&lt;&lt;&amp;k;  \n    return 0;  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The memory address of p variable is :0x7ffcc5c164b8                                                           The memory address of k variable is :0x7ffcc5c164b4 \n</code></pre>\n\n\n\n<ul><li><strong>NULL value</strong></li></ul>\n\n\n\n<p>We cannot assign the NULL value to the reference variable, but the pointer variable can be assigned with a NULL value.</p>\n\n\n\n<ul><li><strong>Indirection</strong></li></ul>\n\n\n\n<p>Pointers can have pointer to pointer offering more than one level of indirection.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int *p;  \n int a=8;  \n int **q;  \n p=&amp;a;  \n q=&amp;p;  \nstd::cout &lt;&lt; \"The value of q is : \" &lt;&lt;*q&lt;&lt; std::endl;  \nreturn 0;  \n} </code></pre>\n\n\n\n<p>In the above code, the pointer &#8216;p&#8217; is pointing to variable &#8216;a&#8217; while &#8216;q&#8217; is a double pointer which is pointing to &#8216;p&#8217;. Therefore, we can say that the value of &#8216;p&#8217; would be the address of &#8216;a&#8217; variable and the value of &#8216;q&#8217; variable would be the address of &#8216;p&#8217; variable.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The value of q is : 0x7ffd104891dc  \n</code></pre>\n\n\n\n<p>In the case of References, reference to reference is not possible. If we try to do&nbsp;<a href=\"https://www.javatpoint.com/cpp-program\">c++ program</a>&nbsp;will throw a compile-time error</p>\n\n\n\n<p><strong>Let&#8217;s understand this scenario through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n  int a=8; // variable initialization  \n int &amp;p=a; // creating a reference variable for ?a? variable.  \n int &amp;&amp;q=p;  // reference to reference is not valid, it throws an error.  \n return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>main.cpp: In function 'int main()':\nmain.cpp:18:10: error: cannot bind 'int' lvalue to 'int&amp;amp;&amp;amp;'\nint &amp;amp;&amp;amp;q=p;\n</code></pre>\n\n\n\n<ul><li><strong>Arithmetic Operations</strong></li></ul>\n\n\n\n<p>As we know that arithmetic operations can be applied to the pointers named as &#8220;<strong>Pointer Arithmetic</strong>&#8220;, but arithmetic operations cannot be applied on the references. There is no word, i.e., Reference Arithmetic exists in&nbsp;<a href=\"https://www.javatpoint.com/cpp-tutorial\">C++</a>.</p>\n\n\n\n<p><strong>Let&#8217;s see a simple example of Pointers.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int a&#91;]={1,2,3,4,5}; // array initialization  \n  int *ptr;  // pointer declaration  \n  ptr=a; assigning base address to pointer ptr.  \n  cout&lt;&lt;\"The value of *ptr is :\"&lt;&lt;*ptr;  \n  ptr=ptr+1;  // incrementing the value of ptr by 1.  \n  std::cout &lt;&lt; \"\\nThe value of *ptr is: \" &lt;&lt;*ptr&lt;&lt; std::endl;  \n  return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The value of *ptr is :1                                                                                                       \nThe value of *ptr is: 2</code></pre>\n\n\n\n<p><strong>Let&#8217;s understand the references through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n   \n int value=90;  // variable declaration  \n int &amp;a=value;   // assigning value to the reference  \n &amp;a=&amp;a+5 // arithmetic operation is not possible with reference variable, it throws an error.  \n return 0;  \n}  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>C++ reference and pointer seem to be similar, but there are some differences that exist between them. A reference is a variable which is another name of the existing variable, while the pointer is variable that stores the address of another variable. What is Reference? A reference is a&nbsp;variable&nbsp;that is referred to as another name [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/922"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=922"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/922/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4507,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/922/revisions/4507"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=922"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=922"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=922"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 923,
    "date": "2020-08-25T06:50:42",
    "date_gmt": "2020-08-25T06:50:42",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=78"
    },
    "modified": "2021-02-15T10:28:59",
    "modified_gmt": "2021-02-15T10:28:59",
    "slug": "function-pointer-in-c",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/function-pointer-in-c/",
    "title": {
      "rendered": "Function Pointer in C++"
    },
    "content": {
      "rendered": "\n<p>As we know that pointers are used to point some variables; similarly, the function pointer is a pointer used to point functions. It is basically used to store the address of a function. We can call the function by using the function pointer, or we can also pass the pointer to another function as a parameter.</p>\n\n\n\n<p>They are mainly useful for event-driven applications, callbacks, and even for storing the functions in arrays.</p>\n\n\n\n<h3>What is the address of a function?</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/function-pointer-in-cpp.png\" alt=\"Function Pointer in C++\"/></figure>\n\n\n\n<p>Computer only understands the low-level language, i.e., binary form. The program we write in C++ is always in high-level language, so to convert the program into binary form, we use compiler. Compiler is a program that converts source code into an executable file. This executable file gets stored in RAM. The CPU starts the execution from the main() method, and it reads the copy in RAM but not the original file.</p>\n\n\n\n<p>All the functions and machine code instructions are data. This data is a bunch of bytes, and all these bytes have some address in RAM. The function pointer contains RAM address of the first instruction of a function.</p>\n\n\n\n<h3>Syntax for Declaration</h3>\n\n\n\n<p>The following is the syntax for the declaration of a function pointer:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int (*FuncPtr) (int,int);  </code></pre>\n\n\n\n<p>The above syntax is the function declaration. As functions are not simple as variables, but C++ is a type safe, so function pointers have return type and parameter list. In the above syntax, we first supply the return type, and then the name of the pointer, i.e., FuncPtr which is surrounded by the brackets and preceded by the pointer symbol, i.e., (*). After this, we have supplied the parameter list (int,int). The above function pointer can point to any function which takes two integer parameters and returns integer type value.</p>\n\n\n\n<h3>Address of a function</h3>\n\n\n\n<p>We can get the address of a function very easily. We just need to mention the name of the function, we do not need to call the function.</p>\n\n\n\n<p><strong>Let&#8217;s illustrate through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n  std::cout &lt;&lt; \"Address of a main() function is : \" &lt;&lt;&amp;main&lt;&lt; std::endl;  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>In the above program, we are displaying the address of a main() function. To print the address of a main() function, we have just mentioned the name of the function, there is no bracket not parameters. Therefore, the name of the function by itself without any brackets or parameters means the address of a function.</p>\n\n\n\n<p>We can use the alternate way to print the address of a function, i.e., &amp;main.</p>\n\n\n\n<h3>Calling a function indirectly</h3>\n\n\n\n<p>We can call the function with the help of a function pointer by simply using the name of the function pointer. The syntax of calling the function through the function pointer would be similar as we do the calling of the function normally.</p>\n\n\n\n<p><strong>Let&#8217;s understand this scenario through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint add(int a , int b)  \n{  \n    return a+b;  \n}  \nint main()  \n{  \n int (*funcptr)(int,int);  // function pointer declaration  \n funcptr=add; // funcptr is pointing to the add function  \n int sum=funcptr(5,5);  \n std::cout &lt;&lt; \"value of sum is :\" &lt;&lt;sum&lt;&lt; std::endl;  \n  return 0;  \n}</code></pre>\n\n\n\n<p>In the above program, we declare the function pointer, i.e., int (*funcptr)(int,int) and then we store the address of add() function in funcptr. This implies that funcptr contains the address of add() function. Now, we can call the add() function by using funcptr. The statement funcptr(5,5) calls the add() function, and the result of add() function gets stored in sum variable.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/function-pointer-in-cpp2.png\" alt=\"Function Pointer in C++\"/></figure>\n\n\n\n<p><strong>Let&#8217;s look at another example of function pointer.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid printname(char *name)  \n{  \n    std::cout &lt;&lt; \"Name is :\" &lt;&lt;name&lt;&lt; std::endl;  \n}  \n  \nint main()  \n{  \n    char s&#91;20];  // array declaration  \n    void (*ptr)(char*);  // function pointer declaration  \n    ptr=printname;  // storing the address of printname in ptr.  \n    std::cout &lt;&lt; \"Enter the name of the person: \" &lt;&lt; std::endl;  \n    cin>>s;  \n    cout&lt;&lt;s;  \n    ptr(s);  // calling printname() function  \n   return 0;  \n}</code></pre>\n\n\n\n<p>In the above program, we define the function printname() which contains the char pointer as a parameter. We declare the function pointer, i.e., void (*ptr)(char*). The statement ptr=printname means that we are assigning the address of printname() function to ptr. Now, we can call the printname() function by using the statement ptr(s).</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/function-pointer-in-cpp3.png\" alt=\"Function Pointer in C++\"/></figure>\n\n\n\n<h3>Passing a function pointer as a parameter</h3>\n\n\n\n<p>The function pointer can be passed as a parameter to another function.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid func1()  \n{  \n    cout&lt;&lt;\"func1 is called\";  \n}  \nvoid func2(void (*funcptr)())  \n{  \n    funcptr();  \n}  \nint main()  \n{  \n  func2(func1);  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, the func2() function takes the function pointer as a parameter. The main() method calls the func2() function in which the address of func1() is passed. In this way, the func2() function is calling the func1() indirectly.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/function-pointer-in-cpp4.png\" alt=\"Function Pointer in C++\"/></figure>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>As we know that pointers are used to point some variables; similarly, the function pointer is a pointer used to point functions. It is basically used to store the address of a function. We can call the function by using the function pointer, or we can also pass the pointer to another function as a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/923"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=923"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/923/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4506,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/923/revisions/4506"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=923"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=923"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=923"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 925,
    "date": "2020-08-25T06:59:41",
    "date_gmt": "2020-08-25T06:59:41",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=82"
    },
    "modified": "2021-02-15T10:29:07",
    "modified_gmt": "2021-02-15T10:29:07",
    "slug": "malloc-vs-new-in-c",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/malloc-vs-new-in-c/",
    "title": {
      "rendered": "malloc() vs new in C++"
    },
    "content": {
      "rendered": "\n<p>Both the&nbsp;<strong>malloc()</strong>&nbsp;and new in C++ are used for the same purpose. They are used for allocating memory at the runtime. But, malloc() and new have different syntax. The main difference between the malloc() and new is that the new is an operator while malloc() is a standard library function that is predefined in a&nbsp;<strong>stdlib</strong>&nbsp;header file.</p>\n\n\n\n<h3>What is new?</h3>\n\n\n\n<p>The new is a memory allocation operator, which is used to allocate the memory at the runtime. The memory initialized by the new operator is allocated in a heap. It returns the starting address of the memory, which gets assigned to the variable. The functionality of the new&nbsp;<a href=\"https://www.javatpoint.com/cpp-operators\">operator in C++</a>&nbsp;is similar to the malloc() function, which was used in the&nbsp;<a href=\"https://www.javatpoint.com/c-programming-language-tutorial\">C programming language</a>.&nbsp;<a href=\"https://www.javatpoint.com/cpp-tutorial\">C++</a>&nbsp;is compatible with the malloc() function also, but the new operator is mostly used because of its advantages.</p>\n\n\n\n<p><strong>Syntax of new operator</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>type variable = new type(parameter_list);  </code></pre>\n\n\n\n<p><strong>In the above syntax</strong></p>\n\n\n\n<p><strong>type:</strong>&nbsp;It defines the datatype of the variable for which the memory is allocated by the new operator.</p>\n\n\n\n<p><strong>variable:</strong>&nbsp;It is the name of the variable that points to the memory.</p>\n\n\n\n<p><strong>parameter_list:</strong>&nbsp;It is the list of values that are initialized to a variable.</p>\n\n\n\n<p>The new operator does not use the sizeof() operator to allocate the memory. It also does not use the resize as the new operator allocates sufficient memory for an object. It is a construct that calls the constructor at the time of declaration to initialize an object.</p>\n\n\n\n<p>As we know that the new operator allocates the memory in a heap; if the memory is not available in a heap and the new operator tries to allocate the memory, then the exception is thrown. If our code is not able to handle the exception, then the program will be terminated abnormally.</p>\n\n\n\n<p><strong>Let&#8217;s understand the new operator through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n int *ptr;  // integer pointer variable declaration  \n ptr=new int; // allocating memory to the pointer variable ptr.  \n std::cout &lt;&lt; \"Enter the number : \" &lt;&lt; std::endl;  \n std::cin >>*ptr;  \n std::cout &lt;&lt; \"Entered number is \" &lt;&lt;*ptr&lt;&lt; std::endl;  \nreturn 0;  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/malloc-vs-new-in-cpp.png\" alt=\"malloc() vs new in C++\"/></figure>\n\n\n\n<h3>What is malloc()?</h3>\n\n\n\n<p>A malloc() is a function that allocates memory at the runtime. This function returns the void pointer, which means that it can be assigned to any pointer type. This void pointer can be further typecast to get the pointer that points to the memory of a specified type.</p>\n\n\n\n<p>The syntax of the malloc() function is given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>type variable_name = (type *)malloc(sizeof(type));   </code></pre>\n\n\n\n<p><strong>where,</strong></p>\n\n\n\n<p><strong>type:</strong>&nbsp;it is the datatype of the variable for which the memory has to be allocated.</p>\n\n\n\n<p><strong>variable_name:</strong>&nbsp;It defines the name of the variable that points to the memory.</p>\n\n\n\n<p><strong>(type*):</strong>&nbsp;It is used for typecasting so that we can get the pointer of a specified type that points to the memory.</p>\n\n\n\n<p><strong>sizeof():</strong>&nbsp;The sizeof() operator is used in the malloc() function to obtain the memory size required for the allocation.</p>\n\n\n\n<h4>Note: The malloc() function returns the void pointer, so typecasting is required to assign a different type to the pointer. The sizeof() operator is required in the malloc() function as the malloc() function returns the raw memory, so the sizeof() operator will tell the malloc() function how much memory is required for the allocation.</h4>\n\n\n\n<p>If the sufficient memory is not available, then the memory can be resized using realloc() function. As we know that all the dynamic memory requirements are fulfilled using heap memory, so malloc() function also allocates the memory in a heap and returns the pointer to it. The heap memory is very limited, so when our code starts execution, it marks the memory in use, and when our code completes its task, then it frees the memory by using the free() function. If the sufficient memory is not available, and our code tries to access the memory, then the malloc() function returns the NULL pointer. The memory which is allocated by the malloc() function can be deallocated by using the free() function.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;stdlib.h>  \nusing namespace std;  \n  \nint main()  \n{  \n     \n  int len;   // variable declaration  \n  std::cout &lt;&lt; \"Enter the count of numbers :\" &lt;&lt; std::endl;  \n  std::cin >> len;  \n  int *ptr; // pointer variable declaration  \n  ptr=(int*) malloc(sizeof(int)*len);  // allocating memory to  the poiner variable  \n  for(int i=0;i&lt;len;i++)  \n  {  \n      std::cout &lt;&lt; \"Enter a number : \" &lt;&lt; std::endl;  \n      std::cin >> *(ptr+i);  \n  }  \n  std::cout &lt;&lt; \"Entered elements are : \" &lt;&lt; std::endl;  \n   for(int i=0;i&lt;len;i++)  \n  {  \n     std::cout &lt;&lt; *(ptr+i) &lt;&lt; std::endl;  \n  }  \nfree(ptr);  \n    return 0;  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/malloc-vs-new-in-cpp2.png\" alt=\"malloc() vs new in C++\"/></figure>\n\n\n\n<p>If we do not use the <strong>free()</strong> function at the correct place, then it can lead to the cause of the dangling pointer. <strong>Let&#8217;s understand this scenario through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;stdlib.h>  \nusing namespace std;  \nint *func()  \n{  \n    int *p;  \n    p=(int*) malloc(sizeof(int));  \n    free(p);  \n    return p;  \n}  \nint main()  \n{  \n     \n int *ptr;  \n ptr=func();  \n free(ptr);  \n    return 0;  \n}</code></pre>\n\n\n\n<p>In the above code, we are calling the func() function. The func() function returns the integer pointer. Inside the func() function, we have declared a *p pointer, and the memory is allocated to this pointer variable using malloc() function. In this case, we are returning the pointer whose memory is already released. The ptr is a dangling pointer as it is pointing to the released memory location. Or we can say ptr is referring to that memory which is not pointed by the pointer.</p>\n\n\n\n<p>Till now, we get to know about the new operator and the malloc() function. Now, we will see the differences between the new operator and the malloc() function.</p>\n\n\n\n<h3>Differences between the malloc() and new</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/malloc-vs-new-in-cpp3.png\" alt=\"malloc() vs new in C++\"/></figure>\n\n\n\n<ul><li>The new operator constructs an object, i.e., it calls the constructor to initialize an object while&nbsp;<strong>malloc()</strong>&nbsp;function does not call the constructor. The new operator invokes the constructor, and the delete operator invokes the destructor to destroy the object. This is the biggest difference between the malloc() and new.</li><li>The new is an operator, while malloc() is a predefined function in the stdlib header file.</li><li>The operator new can be overloaded while the malloc() function cannot be overloaded.</li><li>If the sufficient memory is not available in a heap, then the new operator will throw an exception while the malloc() function returns a NULL pointer.</li><li>In the new operator, we need to specify the number of objects to be allocated while in malloc() function, we need to specify the number of bytes to be allocated.</li><li>In the case of a new operator, we have to use the delete operator to deallocate the memory. But in the case of malloc() function, we have to use the free() function to deallocate the memory.</li></ul>\n\n\n\n<p><strong>Syntax of new operator</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>type reference_variable = new type name;  </code></pre>\n\n\n\n<p><strong>where,</strong></p>\n\n\n\n<p><strong>type:</strong>&nbsp;It defines the data type of the reference variable.</p>\n\n\n\n<p><strong>reference_variable:</strong>&nbsp;It is the name of the pointer variable.</p>\n\n\n\n<p><strong>new:</strong>&nbsp;It is an operator used for allocating the memory.</p>\n\n\n\n<p><strong>type name:</strong>&nbsp;It can be any basic data type.</p>\n\n\n\n<p><strong>For example,</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>int *p;  \np = new int; </code></pre>\n\n\n\n<p>In the above statements, we are declaring an integer pointer variable. The statement&nbsp;<strong>p = new int;</strong>&nbsp;allocates the memory space for an integer variable.</p>\n\n\n\n<p><strong>Syntax of malloc() is given below:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>int *ptr = (data_type*) malloc(sizeof(data_type));  </code></pre>\n\n\n\n<p><strong>ptr:</strong>&nbsp;It is a pointer variable.</p>\n\n\n\n<p><strong>data_type:</strong>&nbsp;It can be any basic data type.</p>\n\n\n\n<p><strong>For example,</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Int *p;  \np = (int *) malloc(sizeof(int))  </code></pre>\n\n\n\n<p>The above statement will allocate the memory for an integer variable in a heap, and then stores the address of the reserved memory in &#8216;p&#8217; variable.</p>\n\n\n\n<ul><li>On the other hand, the memory allocated using malloc() function can be deallocated using the free() function.</li><li>Once the memory is allocated using the new operator, then it cannot be resized. On the other hand, the memory is allocated using malloc() function; then, it can be reallocated using realloc() function.</li><li>The execution time of new is less than the malloc() function as new is a construct, and malloc is a function.</li><li>The new operator does not return the separate pointer variable; it returns the address of the newly created object. On the other hand, the malloc() function returns the void pointer which can be further typecast in a specified type.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Both the&nbsp;malloc()&nbsp;and new in C++ are used for the same purpose. They are used for allocating memory at the runtime. But, malloc() and new have different syntax. The main difference between the malloc() and new is that the new is an operator while malloc() is a standard library function that is predefined in a&nbsp;stdlib&nbsp;header file. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/925"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=925"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/925/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4505,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/925/revisions/4505"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=925"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=925"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=925"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 926,
    "date": "2020-08-25T07:03:23",
    "date_gmt": "2020-08-25T07:03:23",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=84"
    },
    "modified": "2021-02-15T10:29:15",
    "modified_gmt": "2021-02-15T10:29:15",
    "slug": "free-vs-delete-in-c",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/free-vs-delete-in-c/",
    "title": {
      "rendered": "free vs delete in C++"
    },
    "content": {
      "rendered": "\n<p>In this topic, we are going to learn about the&nbsp;<strong>free()</strong>&nbsp;function and&nbsp;<strong>delete</strong>&nbsp;operator in C++.</p>\n\n\n\n<h3>free() function</h3>\n\n\n\n<p>The free() function is used in C++ to de-allocate the memory dynamically. It is basically a library function used in C++, and it is defined in&nbsp;<strong>stdlib.h</strong>&nbsp;header file. This library function is used when the pointers either pointing to the memory allocated using malloc() function or Null pointer.</p>\n\n\n\n<h3>Syntax of free() function</h3>\n\n\n\n<p>Suppose we have declared a pointer &#8216;ptr&#8217;, and now, we want to de-allocate its memory:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>free(ptr);  </code></pre>\n\n\n\n<p>The above syntax would de-allocate the memory of the pointer variable &#8216;ptr&#8217;.</p>\n\n\n\n<h3>free() parameters</h3>\n\n\n\n<p>In the above syntax, ptr is a parameter inside the free() function. The ptr is a pointer pointing to the memory block allocated using malloc(), calloc() or realloc function. This pointer can also be null or a pointer allocated using malloc but not pointing to any other memory block.</p>\n\n\n\n<ul><li>If the pointer is null, then the free() function will not do anything.</li><li>If the pointer is allocated using malloc, calloc, or realloc, but not pointing to any memory block then this function will cause undefined behavior.</li></ul>\n\n\n\n<h3>free() Return Value</h3>\n\n\n\n<p>The free() function does not return any value. Its main function is to free the memory.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;cstdlib>  \nusing namespace std;  \n  \nint main()  \n{  \n    int *ptr;  \n    ptr = (int*) malloc(5*sizeof(int));  \n    cout &lt;&lt; \"Enter 5 integer\" &lt;&lt; endl;  \n  \n    for (int i=0; i&lt;5; i++)  \n    {  \n    // *(ptr+i) can be replaced by ptr&#91;i]  \n        cin >>ptr&#91;i];  \n    }  \n    cout &lt;&lt; endl &lt;&lt; \"User entered value\"&lt;&lt; endl;  \n  \n    for (int i=0; i&lt;5; i++)  \n    {  \n        cout &lt;&lt;*(ptr+i)  &lt;&lt; \" \";  \n    }  \n    free(ptr);  \n  \n    /* prints a garbage value after ptr is free */  \n    cout &lt;&lt; \"Garbage Value\" &lt;&lt; endl;  \n  \n    for (int i=0; i&lt;5; i++)  \n    {  \n        cout &lt;&lt; *(ptr+i)&lt;&lt; \" \";  \n    }  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>The above code shows how free() function works with malloc(). First, we declare integer pointer *ptr, and then we allocate the memory to this pointer variable by using malloc() function. Now, ptr is pointing to the uninitialized memory block of 5 integers. After allocating the memory, we use the free() function to destroy this allocated memory. When we try to print the value, which is pointed by the ptr, we get a garbage value, which means that memory is de-allocated.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp1.png\" alt=\"free vs delete in C++\"/></figure>\n\n\n\n<p><strong>Let&#8217;s see how free() function works with a calloc.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;cstdlib>  \nusing namespace std;  \nint main()  \n{  \n float *ptr; // float pointer declaration  \n ptr=(float*)calloc(1,sizeof(float));  \n *ptr=6.7;  \n std::cout &lt;&lt; \"The value of *ptr before applying the free() function : \" &lt;&lt;*ptr&lt;&lt; std::endl;  \n free(ptr);  \n std::cout &lt;&lt; \"The value of *ptr after applying the free() function :\" &lt;&lt;*ptr&lt;&lt; std::endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>In the above example, we can observe that free() function works with a calloc(). We use the calloc() function to allocate the memory block to the float pointer ptr. We have assigned a memory block to the ptr that can have a single float type value.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp2.png\" alt=\"free vs delete in C++\"/></figure>\n\n\n\n<p><strong>Let&#8217;s look at another example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;cstdlib>  \nusing namespace std;  \nint main()  \n{  \n int *ptr1=NULL;  \n int *ptr2;  \n int x=9;  \nptr2=&amp;x;  \n if(ptr1)  \n {  \n     std::cout &lt;&lt; \"Pointer is not Null\" &lt;&lt; std::endl;  \n }  \n else  \n {  \n     cout&lt;&lt;\"Ponter is NULL\";  \n }  \n free(ptr1);  \n //free(ptr2); // If this statement is executed, then it gives a runtime error.  \n return 0;  \n} </code></pre>\n\n\n\n<p>The above code shows how free() function works with a NULL pointer. We have declared two pointers, i.e., ptr1 and ptr2. We assign a NULL value to the pointer ptr1 and the address of x variable to pointer ptr2. When we apply the free(ptr1) function to the ptr1, then the memory block assigned to the ptr is successfully freed. The statement free(ptr2) shows a runtime error as the memory block assigned to the ptr2 is not allocated using malloc or calloc function.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp3.png\" alt=\"free vs delete in C++\"/></figure>\n\n\n\n<h3>Delete operator</h3>\n\n\n\n<p>It is an operator used in&nbsp;<a href=\"https://www.javatpoint.com/cpp-tutorial\">C++ programming language</a>, and it is used to de-allocate the memory dynamically. This operator is mainly used either for those pointers which are allocated using a new operator or NULL pointer.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<ol><li><strong>delete</strong>&nbsp;pointer_name&nbsp;&nbsp;</li></ol>\n\n\n\n<p>For example, if we allocate the memory to the pointer using the new operator, and now we want to delete it. To delete the pointer, we use the following statement:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>delete p;  </code></pre>\n\n\n\n<p>To delete the array, we use the statement as given below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>delete &#91;] p;  </code></pre>\n\n\n\n<p><strong>Some important points related to delete operator are:</strong></p>\n\n\n\n<ul><li>It is either used to delete the array or non-array objects which are allocated by using the new keyword.</li><li>To delete the array or non-array object, we use delete[] and delete operator, respectively.</li><li>The new keyword allocated the memory in a heap; therefore, we can say that the delete operator always de-allocates the memory from the heap</li><li>It does not destroy the pointer, but the value or the memory block, which is pointed by the pointer is destroyed.</li></ul>\n\n\n\n<p><strong>Let&#8217;s look at the simple example of a delete operator.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;cstdlib>  \nusing namespace std;  \n  \nint main()  \n{  \n int *ptr;  \n ptr=new int;  \n *ptr=68;  \n std::cout &lt;&lt; \"The value of p is : \" &lt;&lt;*ptr&lt;&lt; std::endl;  \n delete ptr;  \n std::cout &lt;&lt;\"The value after delete is : \"  &lt;&lt;*ptr&lt;&lt; std::endl;  \n return 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we use the new operator to allocate the memory, so we use the delete ptr operator to destroy the memory block, which is pointed by the pointer ptr.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp4.png\" alt=\"free vs delete in C++\"/></figure>\n\n\n\n<p><strong>Let&#8217;s see how delete works with an array of objects.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int *ptr=new int&#91;5];  // memory allocation using new operator.  \n    std::cout &lt;&lt; \"Enter 5 integers:\" &lt;&lt; std::endl;  \n    for(int i=1;i&lt;=5;i++)  \n    {  \n        cin>>ptr&#91;i];  \n    }  \n    std::cout &lt;&lt; \"Entered values are:\" &lt;&lt; std::endl;  \n        for(int i=1;i&lt;=5;i++)  \n    {  \n        cout&lt;&lt;*(ptr+i)&lt;&lt;endl;  \n    }  \n    delete&#91;] ptr; // deleting the memory block pointed by the ptr.  \n    std::cout &lt;&lt; \"After delete, the garbage value:\" &lt;&lt; std::endl;  \n        for(int i=1;i&lt;=5;i++)  \n    {  \n        cout&lt;&lt;*(ptr+i)&lt;&lt;endl;  \n    }  \n return 0;  \n} </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/free-vs-delete-in-cpp5.png\" alt=\"free vs delete in C++\"/></figure>\n\n\n\n<h3>Differences between delete and free()</h3>\n\n\n\n<p>The following are the differences between delete and free() in C++ are:</p>\n\n\n\n<ul><li>The delete is an operator that de-allocates the memory dynamically while the free() is a function that destroys the memory at the runtime.</li><li>The delete operator is used to delete the pointer, which is either allocated using new operator or a NULL pointer, whereas the free() function is used to delete the pointer that is either allocated using malloc(), calloc() or realloc() function or NULL pointer.</li><li>When the delete operator destroys the allocated memory, then it calls the destructor of the class in C++, whereas the free() function does not call the destructor; it only frees the memory from the heap.</li><li>The delete() operator is faster than the free() function.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this topic, we are going to learn about the&nbsp;free()&nbsp;function and&nbsp;delete&nbsp;operator in C++. free() function The free() function is used in C++ to de-allocate the memory dynamically. It is basically a library function used in C++, and it is defined in&nbsp;stdlib.h&nbsp;header file. This library function is used when the pointers either pointing to the memory [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/926"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=926"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/926/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4504,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/926/revisions/4504"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=926"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=926"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=926"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 927,
    "date": "2020-08-25T07:04:32",
    "date_gmt": "2020-08-25T07:04:32",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=86"
    },
    "modified": "2021-02-15T10:29:24",
    "modified_gmt": "2021-02-15T10:29:24",
    "slug": "c-oops-concepts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-oops-concepts/",
    "title": {
      "rendered": "C++ OOPs Concepts"
    },
    "content": {
      "rendered": "\n<p>The major purpose of C++ programming is to introduce the concept of object orientation to the C programming language.</p>\n\n\n\n<p>Object Oriented Programming is a paradigm that provides many concepts such as&nbsp;<strong>inheritance, data binding, polymorphism etc.</strong></p>\n\n\n\n<p>The programming paradigm where everything is represented as an object is known as truly object-oriented programming language.&nbsp;<strong>Smalltalk</strong>&nbsp;is considered as the first truly object-oriented programming language.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>OOPs (Object Oriented Programming System)</h2>\n\n\n\n<p><strong>Object</strong>&nbsp;means a real word entity such as pen, chair, table etc.&nbsp;<strong>Object-Oriented Programming</strong>&nbsp;is a methodology or paradigm to design a program using classes and objects. It simplifies the software development and maintenance by providing some concepts:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/oops-concept1.png\" alt=\"Cpp Oops concept 1\"/></figure>\n\n\n\n<ul><li>Object</li><li>Class</li><li>Inheritance</li><li>Polymorphism</li><li>Abstraction</li><li>Encapsulation</li></ul>\n\n\n\n<h3>Object</h3>\n\n\n\n<p>Any entity that has state and behavior is known as an object. For example: chair, pen, table, keyboard, bike etc. It can be physical and logical.</p>\n\n\n\n<h3>Class</h3>\n\n\n\n<p><strong>Collection of objects</strong>&nbsp;is called class. It is a logical entity.</p>\n\n\n\n<h3>Inheritance</h3>\n\n\n\n<p><strong>When one object acquires all the properties and behaviours of parent object</strong>&nbsp;i.e. known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.</p>\n\n\n\n<h3>Polymorphism</h3>\n\n\n\n<p>When&nbsp;<strong>one task is performed by different ways</strong>&nbsp;i.e. known as polymorphism. For example: to convince the customer differently, to draw something e.g. shape or rectangle etc.</p>\n\n\n\n<p>In C++, we use Function overloading and Function overriding to achieve polymorphism.</p>\n\n\n\n<h3>Abstraction</h3>\n\n\n\n<p><strong>Hiding internal details and showing functionality</strong>&nbsp;is known as abstraction. For example: phone call, we don&#8217;t know the internal processing.</p>\n\n\n\n<p>In C++, we use abstract class and interface to achieve abstraction.</p>\n\n\n\n<h3>Encapsulation</h3>\n\n\n\n<p><strong>Binding (or wrapping) code and data together into a single unit is known as encapsulation.</strong>&nbsp;For example: capsule, it is wrapped with different medicines.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Advantage of OOPs over Procedure-oriented programming language</h2>\n\n\n\n<ol><li>OOPs makes development and maintenance easier where as in Procedure-oriented programming language it is not easy to manage if code grows as project size grows.</li><li>OOPs provide data hiding whereas in Procedure-oriented programming language a global data can be accessed from anywhere.</li><li>OOPs provide ability to simulate real-world event much more effectively. We can provide the solution of real word problem if we are using the Object-Oriented Programming language.</li></ol>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The major purpose of C++ programming is to introduce the concept of object orientation to the C programming language. Object Oriented Programming is a paradigm that provides many concepts such as&nbsp;inheritance, data binding, polymorphism etc. The programming paradigm where everything is represented as an object is known as truly object-oriented programming language.&nbsp;Smalltalk&nbsp;is considered as the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/927"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=927"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/927/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4503,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/927/revisions/4503"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=927"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=927"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=927"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 928,
    "date": "2020-08-25T07:07:53",
    "date_gmt": "2020-08-25T07:07:53",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=88"
    },
    "modified": "2021-02-15T10:29:33",
    "modified_gmt": "2021-02-15T10:29:33",
    "slug": "c-object-and-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-object-and-class/",
    "title": {
      "rendered": "C++ Object and Class"
    },
    "content": {
      "rendered": "\n<p>Since C++ is an object-oriented language, program is designed using objects and classes in C++.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Object</h2>\n\n\n\n<p>In C++, Object is a real world entity, for example, chair, car, pen, mobile, laptop etc.</p>\n\n\n\n<p>In other words, object is an entity that has state and behavior. Here, state means data and behavior means functionality.</p>\n\n\n\n<p>Object is a runtime entity, it is created at runtime.</p>\n\n\n\n<p>Object is an instance of a class. All the members of the class can be accessed through object.</p>\n\n\n\n<p>Let&#8217;s see an example to create object of student class using s1 as the reference variable.</p>\n\n\n\n<ol><li>Student&nbsp;s1;&nbsp;&nbsp;//creating&nbsp;an&nbsp;object&nbsp;of&nbsp;Student&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>In this example, Student is the type and s1 is the reference variable that refers to the instance of Student class.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Class</h2>\n\n\n\n<p>In C++, object is a group of similar objects. It is a template from which objects are created. It can have fields, methods, constructors etc.</p>\n\n\n\n<p>Let&#8217;s see an example of C++ class that has three fields only.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student    \n {    \n     public:  \n     int id;  //field or data member     \n     float salary; //field or data member  \n     String name;//field or data member    \n }    </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Object and Class Example</h2>\n\n\n\n<p>Let&#8217;s see an example of class that has two fields: id and name. It creates instance of the class, initializes the object and prints the object value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Student {  \n   public:  \n      int id;//data member (also instance variable)      \n      string name;//data member(also instance variable)      \n};  \nint main() {  \n    Student s1; //creating an object of Student   \n    s1.id = 201;    \n    s1.name = \"Sonoo Jaiswal\";   \n    cout&lt;&lt;s1.id&lt;&lt;endl;  \n    cout&lt;&lt;s1.name&lt;&lt;endl;  \n    return 0;  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>201\nSonoo Jaiswal\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Class Example: Initialize and Display data through method</h2>\n\n\n\n<p>Let&#8217;s see another example of C++ class where we are initializing and displaying object through method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Student {  \n   public:  \n       int id;//data member (also instance variable)      \n       string name;//data member(also instance variable)      \n       void insert(int i, string n)    \n        {    \n            id = i;    \n            name = n;    \n        }    \n       void display()    \n        {    \n            cout&lt;&lt;id&lt;&lt;\"  \"&lt;&lt;name&lt;&lt;endl;    \n        }    \n};  \nint main(void) {  \n    Student s1; //creating an object of Student   \n    Student s2; //creating an object of Student  \n    s1.insert(201, \"Sonoo\");    \n    s2.insert(202, \"Nakul\");    \n    s1.display();    \n    s2.display();  \n    return 0;  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>201  Sonoo\n202  Nakul\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Class Example: Store and Display Employee Information</h2>\n\n\n\n<p>Let&#8217;s see another example of C++ class where we are storing and displaying employee information using method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Employee {  \n   public:  \n       int id;//data member (also instance variable)      \n       string name;//data member(also instance variable)  \n       float salary;  \n       void insert(int i, string n, float s)    \n        {    \n            id = i;    \n            name = n;    \n            salary = s;  \n        }    \n       void display()    \n        {    \n            cout&lt;&lt;id&lt;&lt;\"  \"&lt;&lt;name&lt;&lt;\"  \"&lt;&lt;salary&lt;&lt;endl;    \n        }    \n};  \nint main(void) {  \n    Employee e1; //creating an object of Employee   \n    Employee e2; //creating an object of Employee  \n    e1.insert(201, \"Sonoo\",990000);    \n    e2.insert(202, \"Nakul\", 29000);    \n    e1.display();    \n    e2.display();    \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>201  Sonoo  990000\n202  Nakul  29000</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Since C++ is an object-oriented language, program is designed using objects and classes in C++. C++ Object In C++, Object is a real world entity, for example, chair, car, pen, mobile, laptop etc. In other words, object is an entity that has state and behavior. Here, state means data and behavior means functionality. Object is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/928"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=928"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/928/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4502,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/928/revisions/4502"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=928"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=928"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=928"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 929,
    "date": "2020-08-26T06:43:11",
    "date_gmt": "2020-08-26T06:43:11",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=93"
    },
    "modified": "2021-02-15T10:31:16",
    "modified_gmt": "2021-02-15T10:31:16",
    "slug": "c-constructor",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-constructor/",
    "title": {
      "rendered": "C++ Constructor"
    },
    "content": {
      "rendered": "\n<p>In C++, constructor is a special method which is invoked automatically at the time of object creation. It is used to initialize the data members of new object generally. The constructor in C++ has the same name as class or structure.</p>\n\n\n\n<p>There can be two types of constructors in C++.</p>\n\n\n\n<ul><li>Default constructor</li><li>Parameterized constructor</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Default Constructor</h2>\n\n\n\n<p>A constructor which has no argument is known as default constructor. It is invoked at the time of creating object.</p>\n\n\n\n<p>Let&#8217;s see the simple example of C++ default Constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Employee  \n {  \n   public:  \n        Employee()    \n        {    \n            cout&lt;&lt;\"Default Constructor Invoked\"&lt;&lt;endl;    \n        }    \n};  \nint main(void)   \n{  \n    Employee e1; //creating an object of Employee   \n    Employee e2;   \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Default Constructor Invoked \nDefault Constructor Invoked\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Parameterized Constructor</h2>\n\n\n\n<p>A constructor which has parameters is called parameterized constructor. It is used to provide different values to distinct objects.</p>\n\n\n\n<p>Let&#8217;s see the simple example of C++ Parameterized Constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &amp;lt;iostream&amp;gt;\nusing namespace std;\nclass Employee {\n   public:\n       int id;//data member (also instance variable)    \n       string name;//data member(also instance variable)\n       float salary;\n       Employee(int i, string n, float s)  \n        {  \n            id = i;  \n            name = n;  \n            salary = s;\n        }  \n       void display()  \n        {  \n            cout&amp;lt;&amp;lt;id&amp;lt;&amp;lt;\"  \"&amp;lt;&amp;lt;name&amp;lt;&amp;lt;\"  \"&amp;lt;&amp;lt;salary&amp;lt;&amp;lt;endl;  \n        }  \n};\nint main(void) {\n    Employee e1 =Employee(101, \"Sonoo\", 890000); //creating an object of Employee \n    Employee e2=Employee(102, \"Nakul\", 59000); \n    e1.display();  \n    e2.display();  \n    return 0;\n}\n</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101  Sonoo  890000\n102  Nakul  59000</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++, constructor is a special method which is invoked automatically at the time of object creation. It is used to initialize the data members of new object generally. The constructor in C++ has the same name as class or structure. There can be two types of constructors in C++. Default constructor Parameterized constructor C++ [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/929"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=929"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/929/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4501,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/929/revisions/4501"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=929"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=929"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=929"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 930,
    "date": "2020-08-26T06:45:51",
    "date_gmt": "2020-08-26T06:45:51",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=95"
    },
    "modified": "2021-02-15T10:31:46",
    "modified_gmt": "2021-02-15T10:31:46",
    "slug": "c-copy-constructor",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-copy-constructor/",
    "title": {
      "rendered": "C++ Copy Constructor"
    },
    "content": {
      "rendered": "\n<p>A Copy constructor is an&nbsp;<strong>overloaded</strong>&nbsp;constructor used to declare and initialize an object from another object.</p>\n\n\n\n<h2>Copy Constructor is of two types:</h2>\n\n\n\n<ul><li><strong>Default Copy constructor:</strong>&nbsp;The compiler defines the default copy constructor. If the user defines no copy constructor, compiler supplies its constructor.</li><li><strong>User Defined constructor:</strong>&nbsp;The programmer defines the user-defined constructor.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-copy-constructor1.png\" alt=\"C++ Copy Constructor\"/></figure>\n\n\n\n<h2>Syntax Of User-defined Copy Constructor:</h2>\n\n\n\n<ol><li>Class_name(<strong>const</strong>&nbsp;class_name&nbsp;&amp;old_object);&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Consider the following situation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A  \n{  \n    A(A &amp;x) //  copy constructor.  \n   {  \n       // copyconstructor.  \n   }  \n}   </code></pre>\n\n\n\n<p>In the above case,&nbsp;<strong>copy constructor can be called in the following ways:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-copy-constructor2.png\" alt=\"C++ Copy Constructor\"/></figure>\n\n\n\n<p>Let&#8217;s see a simple example of the copy constructor.</p>\n\n\n\n<p><strong>// program of the copy constructor.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass A  \n{  \n   public:  \n    int x;  \n    A(int a)                // parameterized constructor.  \n    {  \n      x=a;  \n    }  \n    A(A &amp;i)               // copy constructor  \n    {  \n        x = i.x;  \n    }  \n};  \nint main()  \n{  \n  A a1(20);               // Calling the parameterized constructor.  \n A a2(a1);                //  Calling the copy constructor.  \n cout&lt;&lt;a2.x;  \n  return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>20\n</code></pre>\n\n\n\n<h2>When Copy Constructor is called</h2>\n\n\n\n<p>Copy Constructor is called in the following scenarios:</p>\n\n\n\n<ul><li>When we initialize the object with another existing object of the same class type. For example, Student s1 = s2, where Student is the class.</li><li>When the object of the same class type is passed by value as an argument.</li><li>When the function returns the object of the same class type by value.</li></ul>\n\n\n\n<h2>Two types of copies are produced by the constructor:</h2>\n\n\n\n<ul><li>Shallow copy</li><li>Deep copy</li></ul>\n\n\n\n<h2>Shallow Copy</h2>\n\n\n\n<ul><li>The default copy constructor can only produce the shallow copy.</li><li>A Shallow copy is defined as the process of creating the copy of an object by copying data of all the member variables as it is.</li></ul>\n\n\n\n<p>Let&#8217;s understand this through a simple example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n  \nusing namespace std;  \n  \nclass Demo  \n{  \n    int a;  \n    int b;  \n    int *p;  \n    public:  \n    Demo()  \n    {  \n        p=new int;  \n    }  \n    void setdata(int x,int y,int z)  \n    {  \n        a=x;  \n        b=y;  \n        *p=z;  \n    }  \n    void showdata()  \n    {  \n        std::cout &lt;&lt; \"value of a is : \" &lt;&lt;a&lt;&lt; std::endl;  \n        std::cout &lt;&lt; \"value of b is : \" &lt;&lt;b&lt;&lt; std::endl;  \n        std::cout &lt;&lt; \"value of *p is : \" &lt;&lt;*p&lt;&lt; std::endl;  \n    }  \n};  \nint main()  \n{  \n  Demo d1;  \n  d1.setdata(4,5,7);  \n  Demo d2 = d1;  \n  d2.showdata();  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of a is : 4   \nvalue of b is : 5  \nvalue of *p is : 7 \n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-copy-constructor3.png\" alt=\"C++ Copy Constructor\"/></figure>\n\n\n\n<p>In the above case, a programmer has not defined any constructor, therefore, the statement&nbsp;<strong>Demo d2 = d1;</strong>&nbsp;calls the default constructor defined by the compiler. The default constructor creates the exact copy or shallow copy of the existing object. Thus, the pointer p of both the objects point to the same memory location. Therefore, when the memory of a field is freed, the memory of another field is also automatically freed as both the fields point to the same memory location. This problem is solved by the&nbsp;<strong>user-defined constructor</strong>&nbsp;that creates the&nbsp;<strong>Deep copy</strong>.</p>\n\n\n\n<h2>Deep copy</h2>\n\n\n\n<p>Deep copy dynamically allocates the memory for the copy and then copies the actual value, both the source and copy have distinct memory locations. In this way, both the source and copy are distinct and will not share the same memory location. Deep copy requires us to write the user-defined constructor.</p>\n\n\n\n<p>Let&#8217;s understand this through a simple example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Demo  \n{  \n    public:  \n    int a;  \n    int b;  \n    int *p;  \n  \n    Demo()  \n    {  \n        p=new int;  \n    }  \n    Demo(Demo &amp;d)  \n    {  \n        a = d.a;  \n        b = d.b;  \n        p = new int;  \n        *p = *(d.p);  \n    }  \n    void setdata(int x,int y,int z)  \n    {  \n        a=x;  \n        b=y;  \n        *p=z;  \n    }  \n    void showdata()  \n    {  \n        std::cout &lt;&lt; \"value of a is : \" &lt;&lt;a&lt;&lt; std::endl;  \n        std::cout &lt;&lt; \"value of b is : \" &lt;&lt;b&lt;&lt; std::endl;  \n        std::cout &lt;&lt; \"value of *p is : \" &lt;&lt;*p&lt;&lt; std::endl;  \n    }  \n};  \nint main()  \n{  \n  Demo d1;  \n  d1.setdata(4,5,7);  \n  Demo d2 = d1;  \n  d2.showdata();  \n  return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of a is : 4   \nvalue of b is : 5   \nvalue of *p is : 7   \n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-copy-constructor4.png\" alt=\"C++ Copy Constructor\"/></figure>\n\n\n\n<p>In the above case, a programmer has defined its own constructor, therefore the statement&nbsp;<strong>Demo d2 = d1;</strong>&nbsp;calls the copy constructor defined by the user. It creates the exact copy of the value types data and the object pointed by the pointer p. Deep copy does not create the copy of a reference type variable.</p>\n\n\n\n<h2>Differences b/w Copy constructor and Assignment operator(=)</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Copy Constructor</th><th>Assignment Operator</th></tr><tr><td>It is an overloaded constructor.</td><td>It is a bitwise operator.</td></tr><tr><td>It initializes the new object with the existing object.</td><td>It assigns the value of one object to another object.</td></tr><tr><td>Syntax of copy constructor:<br>Class_name(const class_name &amp;object_name)<br>{<br>// body of the constructor.<br>}</td><td>Syntax of Assignment operator:<br>Class_name a,b;<br>b = a;</td></tr><tr><td>The&nbsp;<strong>copy constructor</strong>&nbsp;is invoked when the new object is initialized with the existing object.The object is passed as an argument to the function.It returns the object.</td><td>The&nbsp;<strong>assignment operator</strong>&nbsp;is invoked when we assign the existing object to a new object.</td></tr><tr><td>Both the existing object and new object shares the different memory locations.</td><td>Both the existing object and new object shares the same memory location.</td></tr><tr><td>If a programmer does not define the copy constructor, the compiler will automatically generate the implicit default copy constructor.</td><td>If we do not overload the &#8220;=&#8221; operator, the bitwise copy will occur.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A Copy constructor is an&nbsp;overloaded&nbsp;constructor used to declare and initialize an object from another object. Copy Constructor is of two types: Default Copy constructor:&nbsp;The compiler defines the default copy constructor. If the user defines no copy constructor, compiler supplies its constructor. User Defined constructor:&nbsp;The programmer defines the user-defined constructor. Syntax Of User-defined Copy Constructor: Class_name(const&nbsp;class_name&nbsp;&amp;old_object);&nbsp;&nbsp; [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/930"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=930"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/930/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4500,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/930/revisions/4500"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=930"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=930"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=930"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 931,
    "date": "2020-08-26T06:47:04",
    "date_gmt": "2020-08-26T06:47:04",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=97"
    },
    "modified": "2021-02-15T10:32:35",
    "modified_gmt": "2021-02-15T10:32:35",
    "slug": "c-destructor",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-destructor/",
    "title": {
      "rendered": "C++ Destructor"
    },
    "content": {
      "rendered": "\n<p>A destructor works opposite to constructor; it destructs the objects of classes. It can be defined only once in a class. Like constructors, it is invoked automatically.</p>\n\n\n\n<p>A destructor is defined like constructor. It must have same name as class. But it is prefixed with a tilde sign (~).</p>\n\n\n\n<h4>Note: C++ destructor cannot have parameters. Moreover, modifiers can&#8217;t be applied on destructors.</h4>\n\n\n\n<h2>C++ Constructor and Destructor Example</h2>\n\n\n\n<p>Let&#8217;s see an example of constructor and destructor in C++ which is called automatically.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Employee  \n {  \n   public:  \n        Employee()    \n        {    \n            cout&lt;&lt;\"Constructor Invoked\"&lt;&lt;endl;    \n        }    \n        ~Employee()    \n        {    \n            cout&lt;&lt;\"Destructor Invoked\"&lt;&lt;endl;    \n        }  \n};  \nint main(void)   \n{  \n    Employee e1; //creating an object of Employee   \n    Employee e2; //creating an object of Employee  \n    return 0;  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Constructor Invoked\nConstructor Invoked\nDestructor Invoked\nDestructor Invoked</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A destructor works opposite to constructor; it destructs the objects of classes. It can be defined only once in a class. Like constructors, it is invoked automatically. A destructor is defined like constructor. It must have same name as class. But it is prefixed with a tilde sign (~). Note: C++ destructor cannot have parameters. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/931"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=931"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/931/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4499,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/931/revisions/4499"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=931"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=931"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=931"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 932,
    "date": "2020-08-26T06:47:59",
    "date_gmt": "2020-08-26T06:47:59",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=99"
    },
    "modified": "2021-02-15T10:32:54",
    "modified_gmt": "2021-02-15T10:32:54",
    "slug": "c-this-pointer",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-this-pointer/",
    "title": {
      "rendered": "C++ this Pointer"
    },
    "content": {
      "rendered": "\n<p>In C++ programming,&nbsp;<strong>this</strong>&nbsp;is a keyword that refers to the current instance of the class. There can be 3 main usage of this keyword in C++.</p>\n\n\n\n<ul><li>It can be used&nbsp;<strong>to pass current object as a parameter to another method.</strong></li><li>It can be used&nbsp;<strong>to refer current class instance variable.</strong></li><li>It can be used&nbsp;<strong>to declare indexers.</strong></li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ this Pointer Example</h2>\n\n\n\n<p>Let&#8217;s see the example of this keyword in C++ that refers to the fields of current class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Employee {  \n   public:  \n       int id; //data member (also instance variable)      \n       string name; //data member(also instance variable)  \n       float salary;  \n       Employee(int id, string name, float salary)    \n        {    \n             this->id = id;    \n            this->name = name;    \n            this->salary = salary;   \n        }    \n       void display()    \n        {    \n            cout&lt;&lt;id&lt;&lt;\"  \"&lt;&lt;name&lt;&lt;\"  \"&lt;&lt;salary&lt;&lt;endl;    \n        }    \n};  \nint main(void) {  \n    Employee e1 =Employee(101, \"Sonoo\", 890000); //creating an object of Employee   \n    Employee e2=Employee(102, \"Nakul\", 59000); //creating an object of Employee  \n    e1.display();    \n    e2.display();    \n    return 0;  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101  Sonoo  890000\n102  Nakul  59000</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++ programming,&nbsp;this&nbsp;is a keyword that refers to the current instance of the class. There can be 3 main usage of this keyword in C++. It can be used&nbsp;to pass current object as a parameter to another method. It can be used&nbsp;to refer current class instance variable. It can be used&nbsp;to declare indexers. C++ this [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/932"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=932"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/932/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4498,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/932/revisions/4498"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=932"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=932"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=932"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 933,
    "date": "2020-08-26T06:49:17",
    "date_gmt": "2020-08-26T06:49:17",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=101"
    },
    "modified": "2021-02-15T10:33:00",
    "modified_gmt": "2021-02-15T10:33:00",
    "slug": "c-static",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-static/",
    "title": {
      "rendered": "C++ static"
    },
    "content": {
      "rendered": "\n<p>In C++, static is a keyword or modifier that belongs to the type not instance. So instance is not required to access the static members. In C++, static can be field, method, constructor, class, properties, operator and event.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Advantage of C++ static keyword</h2>\n\n\n\n<p><strong>Memory efficient:</strong>&nbsp;Now we don&#8217;t need to create instance for accessing the static members, so it saves memory. Moreover, it belongs to the type, so it will not get memory each time when instance is created.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Static Field</h2>\n\n\n\n<p>A field which is declared as static is called static field. Unlike instance field which gets memory each time whenever you create object, there is only one copy of static field created in the memory. It is shared to all the objects.</p>\n\n\n\n<p>It is used to refer the common property of all objects such as rateOfInterest in case of Account, companyName in case of Employee etc.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ static field example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of static field in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Account {  \n   public:  \n       int accno; //data member (also instance variable)      \n       string name; //data member(also instance variable)  \n       static float rateOfInterest;   \n       Account(int accno, string name)   \n        {    \n             this->accno = accno;    \n            this->name = name;    \n        }    \n       void display()    \n        {    \n            cout&lt;&lt;accno&lt;&lt; \"&lt;&lt;name&lt;&lt; \" \"&lt;&lt;rateOfInterest&lt;&lt;endl;   \n        }    \n};  \nfloat Account::rateOfInterest=6.5;  \nint main(void) {  \n    Account a1 =Account(201, \"Sanjay\"); //creating an object of Employee   \n    Account a2=Account(202, \"Nakul\"); //creating an object of Employee  \n    a1.display();    \n    a2.display();    \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>201 Sanjay 6.5\n202 Nakul 6.5\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ static field example: Counting Objects</h2>\n\n\n\n<p>Let&#8217;s see another example of static keyword in C++ which counts the objects.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Account {  \n   public:  \n       int accno; //data member (also instance variable)      \n       string name;   \n       static int count;     \n       Account(int accno, string name)   \n        {    \n             this->accno = accno;    \n            this->name = name;    \n            count++;  \n        }    \n       void display()    \n        {    \n            cout&lt;&lt;accno&lt;&lt;\" \"&lt;&lt;name&lt;&lt;endl;   \n        }    \n};  \nint Account::count=0;  \nint main(void) {  \n    Account a1 =Account(201, \"Sanjay\"); //creating an object of Account  \n    Account a2=Account(202, \"Nakul\");   \n     Account a3=Account(203, \"Ranjana\");  \n    a1.display();    \n    a2.display();    \n    a3.display();    \n    cout&lt;&lt;\"Total Objects are: \"&lt;&lt;Account::count;  \n    return 0;  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>201 Sanjay\n202 Nakul\n203 Ranjana\nTotal Objects are: 3</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++, static is a keyword or modifier that belongs to the type not instance. So instance is not required to access the static members. In C++, static can be field, method, constructor, class, properties, operator and event. Advantage of C++ static keyword Memory efficient:&nbsp;Now we don&#8217;t need to create instance for accessing the static [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/933"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=933"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/933/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4497,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/933/revisions/4497"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=933"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=933"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=933"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 934,
    "date": "2020-08-26T06:51:57",
    "date_gmt": "2020-08-26T06:51:57",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=103"
    },
    "modified": "2021-02-15T10:33:09",
    "modified_gmt": "2021-02-15T10:33:09",
    "slug": "c-structs",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-structs/",
    "title": {
      "rendered": "C++ Structs"
    },
    "content": {
      "rendered": "\n<p>In C++, classes and structs are blueprints that are used to create the instance of a class. Structs are used for lightweight objects such as Rectangle, color, Point, etc.</p>\n\n\n\n<p>Unlike class, structs in C++ are value type than reference type. It is useful if you have data that is not intended to be modified after creation of struct.</p>\n\n\n\n<p><strong>C++ Structure</strong>&nbsp;is a collection of different data types. It is similar to the class that holds different types of data.</p>\n\n\n\n<h2>The Syntax Of Structure</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>struct structure_name  \n{  \n     // member declarations.  \n}   </code></pre>\n\n\n\n<p>In the above declaration, a structure is declared by preceding the <strong>struct keyword</strong> followed by the identifier(structure name). Inside the curly braces, we can declare the member variables of different types. <strong>Consider the following situation:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>struct Student  \n{  \n    char name&#91;20];  \n     int id;  \n     int age;  \n}  </code></pre>\n\n\n\n<p>In the above case, Student is a structure contains three variables name, id, and age. When the structure is declared, no memory is allocated. When the variable of a structure is created, then the memory is allocated. Let&#8217;s understand this scenario.</p>\n\n\n\n<h2>How to create the instance of Structure?</h2>\n\n\n\n<p>Structure variable can be defined as:</p>\n\n\n\n<p><strong>Student s;</strong></p>\n\n\n\n<p>Here, s is a structure variable of type&nbsp;<strong>Student</strong>. When the structure variable is created, the memory will be allocated. Student structure contains one char variable and two integer variable. Therefore, the memory for one char variable is 1 byte and two ints will be 2*4 = 8. The total memory occupied by the s variable is 9 byte.</p>\n\n\n\n<h2>How to access the variable of Structure:</h2>\n\n\n\n<p>The variable of the structure can be accessed by simply using the instance of the structure followed by the dot (.) operator and then the field of the structure.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>s.id = 4;  </code></pre>\n\n\n\n<p>In the above statement, we are accessing the id field of the structure Student by using the&nbsp;<strong>dot(.)</strong>&nbsp;operator and assigns the value 4 to the id field.</p>\n\n\n\n<h2>C++ Struct Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example of struct Rectangle which has two data members width and height.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \n struct Rectangle      \n{      \n   int width, height;      \n      \n };      \nint main(void) {    \n    struct Rectangle rec;    \n    rec.width=8;    \n    rec.height=5;    \n   cout&lt;&lt;\"Area of Rectangle is: \"&lt;&lt;(rec.width * rec.height)&lt;&lt;endl;    \n return 0;    \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Area of Rectangle is: 40\n</code></pre>\n\n\n\n<h2>C++ Struct Example: Using Constructor and Method</h2>\n\n\n\n<p>Let&#8217;s see another example of struct where we are using the constructor to initialize data and method to calculate the area of rectangle.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \n struct Rectangle    {      \n   int width, height;      \n  Rectangle(int w, int h)      \n    {      \n        width = w;      \n        height = h;      \n    }      \n  void areaOfRectangle() {       \n    cout&lt;&lt;\"Area of Rectangle is: \"&lt;&lt;(width*height); }      \n };      \nint main(void) {    \n    struct Rectangle rec=Rectangle(4,6);    \n    rec.areaOfRectangle();    \n   return 0;    \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Area of Rectangle is: 24\n</code></pre>\n\n\n\n<p><strong>Structure v/s Class</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Structure</th><th>Class</th></tr><tr><td>If access specifier is not declared explicitly, then by default access specifier will be public.</td><td>If access specifier is not declared explicitly, then by default access specifier will be private.</td></tr><tr><td>Syntax of Structure:<br><br>struct structure_name<br>{<br>// body of the structure.<br>}</td><td>Syntax of Class:<br><br>class class_name<br>{<br>// body of the class.<br>}</td></tr><tr><td>The instance of the structure is known as &#8220;Structure variable&#8221;.</td><td>The instance of the class is known as &#8220;Object of the class&#8221;.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++, classes and structs are blueprints that are used to create the instance of a class. Structs are used for lightweight objects such as Rectangle, color, Point, etc. Unlike class, structs in C++ are value type than reference type. It is useful if you have data that is not intended to be modified after [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/934"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=934"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/934/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4496,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/934/revisions/4496"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=934"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=934"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=934"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 935,
    "date": "2020-08-26T06:53:03",
    "date_gmt": "2020-08-26T06:53:03",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=105"
    },
    "modified": "2021-02-15T10:33:39",
    "modified_gmt": "2021-02-15T10:33:39",
    "slug": "c-enumeration",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-enumeration/",
    "title": {
      "rendered": "C++ Enumeration"
    },
    "content": {
      "rendered": "\n<p>Enum in C++ is a data type that contains fixed set of constants.</p>\n\n\n\n<p>It can be used for days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY and SATURDAY) , directions (NORTH, SOUTH, EAST and WEST) etc. The C++ enum constants are static and final implicitly.</p>\n\n\n\n<p>C++ Enums can be thought of as classes that have fixed set of constants.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Points to remember for C++ Enum</h2>\n\n\n\n<ul><li>enum improves type safety</li><li>enum can be easily used in switch</li><li>enum can be traversed</li><li>enum can have fields, constructors and methods</li><li>enum may implement many interfaces but cannot extend any class because it internally extends Enum class</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Enumeration Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of enum data type used in C++ program.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nenum week { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday };  \nint main()  \n{  \n    week day;  \n    day = Friday;  \n    cout &lt;&lt; \"Day: \" &lt;&lt; day+1&lt;&lt;endl;  \n    return 0;  \n}   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Day: 5</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Enum in C++ is a data type that contains fixed set of constants. It can be used for days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY and SATURDAY) , directions (NORTH, SOUTH, EAST and WEST) etc. The C++ enum constants are static and final implicitly. C++ Enums can be thought of as classes [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/935"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=935"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/935/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4495,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/935/revisions/4495"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=935"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=935"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=935"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 936,
    "date": "2020-08-26T06:54:38",
    "date_gmt": "2020-08-26T06:54:38",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=107"
    },
    "modified": "2021-02-15T10:35:07",
    "modified_gmt": "2021-02-15T10:35:07",
    "slug": "c-friend-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-friend-function/",
    "title": {
      "rendered": "C++ Friend function"
    },
    "content": {
      "rendered": "\n<p>If a function is defined as a friend function in C++, then the protected and private data of a class can be accessed using the function.</p>\n\n\n\n<p>By using the keyword friend compiler knows the given function is a friend function.</p>\n\n\n\n<p>For accessing the data, the declaration of a friend function should be done inside the body of a class starting with the keyword friend.</p>\n\n\n\n<h2>Declaration of friend function in C++</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class class_name    \n{    \n    friend data_type function_name(argument/s);            // syntax of friend function.  \n};    </code></pre>\n\n\n\n<p>In the above declaration, the friend function is preceded by the keyword friend. The function can be defined anywhere in the program like a normal C++ function. The function definition does not use either the keyword&nbsp;<strong>friend or scope resolution operator</strong>.</p>\n\n\n\n<p><strong>Characteristics of a Friend function:</strong></p>\n\n\n\n<ul><li>The function is not in the scope of the class to which it has been declared as a friend.</li><li>It cannot be called using the object as it is not in the scope of that class.</li><li>It can be invoked like a normal function without using the object.</li><li>It cannot access the member names directly and has to use an object name and dot membership operator with the member name.</li><li>It can be declared either in the private or the public part.</li></ul>\n\n\n\n<h2>C++ friend function Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of C++ friend function used to print the length of a box.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \nclass Box    \n{    \n    private:    \n        int length;    \n    public:    \n        Box(): length(0) { }    \n        friend int printLength(Box); //friend function    \n};    \nint printLength(Box b)    \n{    \n   b.length += 10;    \n    return b.length;    \n}    \nint main()    \n{    \n    Box b;    \n    cout&lt;&lt;\"Length of box: \"&lt;&lt; printLength(b)&lt;&lt;endl;    \n    return 0;    \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Length of box: 10  \n</code></pre>\n\n\n\n<p><strong>Let&#8217;s see a simple example when the function is friendly to two classes.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass B;          // forward declarartion.  \nclass A  \n{  \n    int x;  \n    public:  \n    void setdata(int i)  \n    {  \n        x=i;  \n    }  \n    friend void min(A,B);         // friend function.  \n};  \nclass B  \n{  \n    int y;  \n    public:  \n    void setdata(int i)  \n    {  \n        y=i;  \n    }  \n    friend void min(A,B);                    // friend function  \n};  \nvoid min(A a,B b)  \n{  \n    if(a.x&lt;=b.y)  \n    std::cout &lt;&lt; a.x &lt;&lt; std::endl;  \n    else  \n    std::cout &lt;&lt; b.y &lt;&lt; std::endl;  \n}  \n   int main()  \n{  \n   A a;  \n   B b;  \n   a.setdata(10);  \n   b.setdata(20);  \n   min(a,b);  \n    return 0;  \n } </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n</code></pre>\n\n\n\n<p>In the above example, min() function is friendly to two classes, i.e., the min() function can access the private members of both the classes A and B.</p>\n\n\n\n<h3>C++ Friend class</h3>\n\n\n\n<p>A friend class can access both private and protected members of the class in which it has been declared as friend.</p>\n\n\n\n<p><strong>Let&#8217;s see a simple example of a friend class.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n  \nusing namespace std;  \n  \nclass A  \n{  \n    int x =5;  \n    friend class B;           // friend class.  \n};  \nclass B  \n{  \n  public:  \n    void display(A &amp;a)  \n    {  \n        cout&lt;&lt;\"value of x is : \"&lt;&lt;a.x;  \n    }  \n};  \nint main()  \n{  \n    A a;  \n    B b;  \n    b.display(a);  \n    return 0;  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of x is : 5</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>If a function is defined as a friend function in C++, then the protected and private data of a class can be accessed using the function. By using the keyword friend compiler knows the given function is a friend function. For accessing the data, the declaration of a friend function should be done inside the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/936"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=936"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/936/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4494,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/936/revisions/4494"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=936"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=936"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=936"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 937,
    "date": "2020-08-26T06:55:17",
    "date_gmt": "2020-08-26T06:55:17",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=109"
    },
    "modified": "2021-02-15T10:35:14",
    "modified_gmt": "2021-02-15T10:35:14",
    "slug": "c-math-functions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-math-functions/",
    "title": {
      "rendered": "C++ Math Functions"
    },
    "content": {
      "rendered": "\n<p>C++ offers some basic math functions and the required header file to use these functions is &lt;math.h&gt;</p>\n\n\n\n<h2>Trignometric functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-cos-function\">cos(x)</a></td><td>It computes the cosine of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-sin-function\">sin(x)</a></td><td>It computes the sine of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-tan-function\">tan(x)</a></td><td>It computes the tangent of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-acos-function\">acos(x)</a></td><td>It finds the inverse cosine of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-asin-function\">asin(x)</a></td><td>It finds the inverse sine of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-atan-function\">atan(x)</a></td><td>It finds the inverse tangent of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-atan2-function\">atan2(x,y)</a></td><td>It finds the inverse tangent of a coordinate x and y.</td></tr></tbody></table></figure>\n\n\n\n<h2>Hyperbolic functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-cosh-function\">cosh(x)</a></td><td>It computes the hyperbolic cosine of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-sinh-function\">sinh(x)</a></td><td>It computes the hyperbolic sine of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-tanh-function\">tanh(x)</a></td><td>It computes the hyperbolic tangent of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-acosh-function\">acosh(x)</a></td><td>It finds the arc hyperbolic cosine of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-asinh-function\">asinh(x)</a></td><td>It finds the arc hyperbolic sine of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-atanh-function\">atanh(x)</a></td><td>It finds the arc hyperbolic tangent of x.</td></tr></tbody></table></figure>\n\n\n\n<h2>Exponential functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-exp-function\">exp(x)</a></td><td>It computes the exponential e raised to the power x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-frexp-function\">frexp(value_type x,int* exp)</a></td><td>It breaks a number into significand and 2 raised to the power exponent.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-idexp-function\">Idexp(float x, int e)</a></td><td>It computes the product of x and 2 raised to the power e.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-log-function\">log(x)</a></td><td>It computes the natural logarithm of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-log10-function\">log10(x)</a></td><td>It computes the common logarithm of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-modf-function\">modf()</a></td><td>It breaks a number into an integer and fractional part.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-exp2-function\">exp2(x)</a></td><td>It computes the base 2 exponential of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-expm1-function\">expm1(x)</a></td><td>It computes the exponential raised to the power x minus one.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-log1p-function\">log1p(x)</a></td><td>It computes the natural logarithm of x plus one.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-log2-function\">log2(x)</a></td><td>It computes the base 2 logarithm of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-logb-function\">logb(x)</a></td><td>It computes the logarithm of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-scalbn-function\">scalbn( x, n)</a></td><td>It computes the product of x and FLT_RADX raised to the power n.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-scalbln-function\">scalbln( x, n)</a></td><td>It computes the product of x and FLT_RADX raised to the power n.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-ilogb-function\">ilogb(x)</a></td><td>It returns the exponent part of x.</td></tr></tbody></table></figure>\n\n\n\n<h2>Floating point manipulation functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-copysign-function\">copysign(x,y)</a></td><td>It returns the magnitude of x with the sign of y.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-nextafter-function\">nextafter(x,y)</a></td><td>It represents the next representable value of x in the direction of y.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-nexttoward-function\">nexttoward(x,y)</a></td><td>It represents the next representable value of x in the direction of y.</td></tr></tbody></table></figure>\n\n\n\n<h2>Maximum,Minimum and Difference functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-fdim-function\">fdim(x,y)</a></td><td>It calculates the positive difference between x and y.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-fmax-function\">fmax(x,y)</a></td><td>It returns the larger number among two numbers x and y.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-fmin-function\">fmin()</a></td><td>It returns the smaller number among two numbers x and y .</td></tr></tbody></table></figure>\n\n\n\n<h2>Power functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-pow-function\">pow(x,y)</a></td><td>It computes x raised to the power y.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-sqrt-function\">sqrt(x)</a></td><td>It computes the square root of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-cbrt-function\">cbrt(x)</a></td><td>It computes the cube root of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-hypot-function\">hypot(x,y)</a></td><td>It finds the hypotenuse of a right angled triangle.</td></tr></tbody></table></figure>\n\n\n\n<h2>Nearest integer operations</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-ceil-function\">ceil(x)</a></td><td>It rounds up the value of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-floor-function\">floor(x)</a></td><td>It rounds down the value of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-round-function\">round(x)</a></td><td>It rounds off the value of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-lround-function\">lround(x)</a></td><td>It rounds off the value of x and cast to long integer.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-llround-function\">llround(x)</a></td><td>It rounds off the value of x and cast to long long integer.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-fmod-function\">fmod(n,d)</a></td><td>It computes the remainder of division n/d.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-trunc-function\">trunc(x)</a></td><td>It rounds off the value x towards zero.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-rint-function\">rint(x)</a></td><td>It rounds off the value of x using rounding mode.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-lrint-function\">lrint(x)</a></td><td>It rounds off the value of x using rounding mode and cast to long integer.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-llrint-function\">llrint(x)</a></td><td>It rounds off the value x and cast to long long integer.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-nearbyint-function\">nearbyint(x)</a></td><td>It rounds off the value x to a nearby integral value.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-remainder-function\">remainder(n,d)</a></td><td>It computes the remainder of n/d.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-remquo-function\">remquo()</a></td><td>It computes remainder and quotient both.</td></tr></tbody></table></figure>\n\n\n\n<h2>Other functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-fabs-function\">fabs(x)</a></td><td>It computes the absolute value of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-abs-function\">abs(x)</a></td><td>It computes the absolute value of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-fma-function\">fma(x,y,z)</a></td><td>It computes the expression x*y+z.</td></tr></tbody></table></figure>\n\n\n\n<h2>Macro functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-fpclassify-function\">fpclassify(x)</a></td><td>It returns the value of type that matches one of the macro constants.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-isfinite-function\">isfinite(x)</a></td><td>It checks whether x is finite or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-isinf-function\">isinf()</a></td><td>It checks whether x is infinite or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-isnan-function\">isnan()</a></td><td>It checks whether x is nan or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-isnormal-function\">isnormal(x)</a></td><td>It checks whether x is normal or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-signbit-function\">signbit(x)</a></td><td>It checks whether the sign of x is negative or not.</td></tr></tbody></table></figure>\n\n\n\n<h2>Comparison macro functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-isgreater-function\">isgreater(x,y)</a></td><td>It determines whether x is greater than y or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-isgreaterequal-function\">isgreaterequal(x,y)</a></td><td>It determines whether x is greater than or equal to y or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-less-function\">less(x,y)</a></td><td>It determines whether x is less than y or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-islessequal-function\">islessequal(x,y)</a></td><td>It determines whether x is less than or equal to y.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-islessgreater-function\">islessgreater(x,y)</a></td><td>It determines whether x is less or greater than y or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-isunordered-function\">isunordered(x,y)</a></td><td>It checks whether x can be meaningfully compared or not.</td></tr></tbody></table></figure>\n\n\n\n<h2>Error and gamma functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-erf-function\">erf(x)</a></td><td>It computes the error function value of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-erfc-function\">erfc(x)</a></td><td>It computes the complementary error function value of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-tgamma-function\">tgamma(x)</a></td><td>It computes the gamma function value of x.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-math-lgamma-function\">lgamma(x)</a></td><td>It computes the logarithm of a gamma function of x.</td></tr></tbody></table></figure>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>C++ offers some basic math functions and the required header file to use these functions is &lt;math.h&gt; Trignometric functions Method Description cos(x) It computes the cosine of x. sin(x) It computes the sine of x. tan(x) It computes the tangent of x. acos(x) It finds the inverse cosine of x. asin(x) It finds the inverse [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/937"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=937"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/937/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4493,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/937/revisions/4493"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=937"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=937"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=937"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 938,
    "date": "2020-08-26T07:00:18",
    "date_gmt": "2020-08-26T07:00:18",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=111"
    },
    "modified": "2021-02-15T10:35:25",
    "modified_gmt": "2021-02-15T10:35:25",
    "slug": "c-inheritance",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-inheritance/",
    "title": {
      "rendered": "C++ Inheritance"
    },
    "content": {
      "rendered": "\n<p>In C++, inheritance is a process in which one object acquires all the properties and behaviors of its parent object automatically. In such way, you can reuse, extend or modify the attributes and behaviors which are defined in other class.</p>\n\n\n\n<p>In C++, the class which inherits the members of another class is called derived class and the class whose members are inherited is called base class. The derived class is the specialized class for the base class.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Advantage of C++ Inheritance</h2>\n\n\n\n<p><strong>Code reusability:</strong>&nbsp;Now you can reuse the members of your parent class. So, there is no need to define the member again. So less code is required in the class.</p>\n\n\n\n<h2>Types Of Inheritance</h2>\n\n\n\n<p><strong>C++ supports five types of inheritance:</strong></p>\n\n\n\n<ul><li>Single inheritance</li><li>Multiple inheritance</li><li>Hierarchical inheritance</li><li>Multilevel inheritance</li><li>Hybrid inheritance</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-inheritance.png\" alt=\"C++ Inheritance\"/></figure>\n\n\n\n<h2>Derived Classes</h2>\n\n\n\n<p>A Derived class is defined as the class derived from the base class.</p>\n\n\n\n<p>The Syntax of Derived class:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class derived_class_name :: visibility-mode base_class_name  \n{  \n    // body of the derived class.  \n}  </code></pre>\n\n\n\n<p><strong>Where,</strong></p>\n\n\n\n<p><strong>derived_class_name:</strong>&nbsp;It is the name of the derived class.</p>\n\n\n\n<p><strong>visibility mode:</strong>&nbsp;The visibility mode specifies whether the features of the base class are publicly inherited or privately inherited. It can be public or private.</p>\n\n\n\n<p><strong>base_class_name:</strong>&nbsp;It is the name of the base class.</p>\n\n\n\n<ul><li>When the base class is privately inherited by the derived class, public members of the base class becomes the private members of the derived class. Therefore, the public members of the base class are not accessible by the objects of the derived class only by the member functions of the derived class.</li><li>When the base class is publicly inherited by the derived class, public members of the base class also become the public members of the derived class. Therefore, the public members of the base class are accessible by the objects of the derived class as well as by the member functions of the base class.</li></ul>\n\n\n\n<h3>Note:</h3>\n\n\n\n<ul><li>In C++, the default mode of visibility is private.</li><li>The private members of the base class are never inherited.</li></ul>\n\n\n\n<h2>C++ Single Inheritance</h2>\n\n\n\n<p><strong>Single inheritance</strong>&nbsp;is defined as the inheritance in which a derived class is inherited from the only one base class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-inheritance2.png\" alt=\"C++ Inheritance\"/></figure>\n\n\n\n<p>Where &#8216;A&#8217; is the base class, and &#8216;B&#8217; is the derived class.</p>\n\n\n\n<h2>C++ Single Level Inheritance Example: Inheriting Fields</h2>\n\n\n\n<p>When one class inherits another class, it is known as single level inheritance. Let&#8217;s see the example of single level inheritance which inherits the fields only.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n class Account {  \n   public:  \n   float salary = 60000;   \n };  \n   class Programmer: public Account {  \n   public:  \n   float bonus = 5000;    \n   };       \nint main(void) {  \n     Programmer p1;  \n     cout&lt;&lt;\"Salary: \"&lt;&lt;p1.salary&lt;&lt;endl;    \n     cout&lt;&lt;\"Bonus: \"&lt;&lt;p1.bonus&lt;&lt;endl;    \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Salary: 60000\nBonus: 5000\n</code></pre>\n\n\n\n<p>In the above example, Employee is the&nbsp;<strong>base</strong>&nbsp;class and Programmer is the&nbsp;<strong>derived</strong>&nbsp;class.</p>\n\n\n\n<h2>C++ Single Level Inheritance Example: Inheriting Methods</h2>\n\n\n\n<p>Let&#8217;s see another example of inheritance in C++ which inherits methods only.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n class Animal {  \n   public:  \n void eat() {   \n    cout&lt;&lt;\"Eating...\"&lt;&lt;endl;   \n }    \n   };  \n   class Dog: public Animal    \n   {    \n       public:  \n     void bark(){  \n    cout&lt;&lt;\"Barking...\";   \n     }    \n   };   \nint main(void) {  \n    Dog d1;  \n    d1.eat();  \n    d1.bark();  \n    return 0;  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Eating...\nBarking...\n</code></pre>\n\n\n\n<p>Let&#8217;s see a simple example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass A  \n{  \n    int a = 4;  \n    int b = 5;  \n    public:  \n    int mul()  \n    {  \n        int c = a*b;  \n        return c;  \n    }     \n};  \n  \nclass B : private A  \n{  \n    public:  \n    void display()  \n    {  \n        int result = mul();  \n        std::cout &lt;&lt;\"Multiplication of a and b is : \"&lt;&lt;result&lt;&lt; std::endl;  \n    }  \n};  \nint main()  \n{  \n   B b;  \n   b.display();  \n  \n    return 0;  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Multiplication of a and b is : 20\n</code></pre>\n\n\n\n<p>In the above example, class A is privately inherited. Therefore, the mul() function of class &#8216;A&#8217; cannot be accessed by the object of class B. It can only be accessed by the member function of class B.</p>\n\n\n\n<h2>How to make a Private Member Inheritable</h2>\n\n\n\n<p>The private member is not inheritable. If we modify the visibility mode by making it public, but this takes away the advantage of data hiding.</p>\n\n\n\n<p>C++ introduces a third visibility modifier, i.e.,&nbsp;<strong>protected</strong>. The member which is declared as protected will be accessible to all the member functions within the class as well as the class immediately derived from it.</p>\n\n\n\n<p><strong>Visibility modes can be classified into three categories:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-inheritance3.png\" alt=\"C++ Inheritance\"/></figure>\n\n\n\n<ul><li><strong>Public</strong>: When the member is declared as public, it is accessible to all the functions of the program.</li><li><strong>Private</strong>: When the member is declared as private, it is accessible within the class only.</li><li><strong>Protected</strong>: When the member is declared as protected, it is accessible within its own class as well as the class immediately derived from it.</li></ul>\n\n\n\n<h2>Visibility of Inherited Members</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Base class visibility</th><th>Derived class visibility</th></tr><tr><th>Public</th><th>Private</th><th>Protected</th></tr><tr><td>Private</td><td>Not Inherited</td><td>Not Inherited</td><td>Not Inherited</td></tr><tr><td>Protected</td><td>Protected</td><td>Private</td><td>Protected</td></tr><tr><td>Public</td><td>Public</td><td>Private</td><td>Protected</td></tr></tbody></table></figure>\n\n\n\n<h2>C++ Multilevel Inheritance</h2>\n\n\n\n<p><strong>Multilevel inheritance</strong>&nbsp;is a process of deriving a class from another derived class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-inheritance4.png\" alt=\"C++ Inheritance\"/></figure>\n\n\n\n<h2>C++ Multi Level Inheritance Example</h2>\n\n\n\n<p>When one class inherits another class which is further inherited by another class, it is known as multi level inheritance in C++. Inheritance is transitive so the last derived class acquires all the members of all its base classes.</p>\n\n\n\n<p>Let&#8217;s see the example of multi level inheritance in C++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n class Animal {  \n   public:  \n void eat() {   \n    cout&lt;&lt;\"Eating...\"&lt;&lt;endl;   \n }    \n   };  \n   class Dog: public Animal   \n   {    \n       public:  \n     void bark(){  \n    cout&lt;&lt;\"Barking...\"&lt;&lt;endl;   \n     }    \n   };   \n   class BabyDog: public Dog   \n   {    \n       public:  \n     void weep() {  \n    cout&lt;&lt;\"Weeping...\";   \n     }    \n   };   \nint main(void) {  \n    BabyDog d1;  \n    d1.eat();  \n    d1.bark();  \n     d1.weep();  \n     return 0;  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Eating...\nBarking...\nWeeping...\n</code></pre>\n\n\n\n<h2>C++ Multiple Inheritance</h2>\n\n\n\n<p><strong>Multiple inheritance</strong>&nbsp;is the process of deriving a new class that inherits the attributes from two or more classes.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-inheritance5.png\" alt=\"C++ Inheritance\"/></figure>\n\n\n\n<p><strong>Syntax of the Derived class:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class D : visibility B-1, visibility B-2, ?  \n{  \n    // Body of the class;  \n}   </code></pre>\n\n\n\n<p>Let&#8217;s see a simple example of multiple inheritance.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass A  \n{  \n    protected:  \n     int a;  \n    public:  \n    void get_a(int n)  \n    {  \n        a = n;  \n    }  \n};  \n  \nclass B  \n{  \n    protected:  \n    int b;  \n    public:  \n    void get_b(int n)  \n    {  \n        b = n;  \n    }  \n};  \nclass C : public A,public B  \n{  \n   public:  \n    void display()  \n    {  \n        std::cout &lt;&lt; \"The value of a is : \" &lt;&lt;a&lt;&lt; std::endl;  \n        std::cout &lt;&lt; \"The value of b is : \" &lt;&lt;b&lt;&lt; std::endl;  \n        cout&lt;&lt;\"Addition of a and b is : \"&lt;&lt;a+b;  \n    }  \n};  \nint main()  \n{  \n   C c;  \n   c.get_a(10);  \n   c.get_b(20);  \n   c.display();  \n  \n    return 0;  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>The value of a is : 10\nThe value of b is : 20\nAddition of a and b is : 30\n</code></pre>\n\n\n\n<p>In the above example, class &#8216;C&#8217; inherits two base classes &#8216;A&#8217; and &#8216;B&#8217; in a public mode.</p>\n\n\n\n<h2>Ambiquity Resolution in Inheritance</h2>\n\n\n\n<p>Ambiguity can be occurred in using the multiple inheritance when a function with the same name occurs in more than one base class.</p>\n\n\n\n<p>Let&#8217;s understand this through an example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass A  \n{  \n    public:  \n    void display()  \n    {  \n        std::cout &lt;&lt; \"Class A\" &lt;&lt; std::endl;  \n    }  \n};  \nclass B  \n{  \n    public:  \n    void display()  \n    {  \n        std::cout &lt;&lt; \"Class B\" &lt;&lt; std::endl;  \n    }  \n};  \nclass C : public A, public B  \n{  \n    void view()  \n    {  \n        display();  \n    }  \n};  \nint main()  \n{  \n    C c;  \n    c.display();  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>error: reference to 'display' is ambiguous\n        display();\n</code></pre>\n\n\n\n<ul><li>The above issue can be resolved by using the class resolution operator with the function. In the above example, the derived class code can be rewritten as:</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class C : public A, public B  \n{  \n    void view()  \n    {  \n        A :: display();         // Calling the display() function of class A.  \n        B :: display();         // Calling the display() function of class B.  \n  \n    }  \n}; </code></pre>\n\n\n\n<p>An ambiguity can also occur in single inheritance.</p>\n\n\n\n<p>Consider the following situation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A  \n{  \n   public:  \nvoid display()  \n{  \n   cout&lt;&lt;?Class A?;  \n}   \n} ;  \nclass B  \n{   \n  public:  \n void display()  \n{  \n cout&lt;&lt;?Class B?;  \n}  \n} ;  </code></pre>\n\n\n\n<p>In the above case, the function of the derived class overrides the method of the base class. Therefore, call to the display() function will simply call the function defined in the derived class. If we want to invoke the base class function, we can use the class resolution operator.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- wp:code -->\n&lt;pre class=\"wp-block-code\">&lt;code>&lt;/code>&lt;/pre>\n&lt;!-- /wp:code --></code></pre>\n\n\n\n<h2>C++ Hybrid Inheritance</h2>\n\n\n\n<p>Hybrid inheritance is a combination of more than one type of inheritance.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-inheritance6.png\" alt=\"C++ Inheritance\"/></figure>\n\n\n\n<p>Let&#8217;s see a simple example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass A  \n{  \n    protected:  \n    int a;  \n    public:  \n    void get_a()  \n    {  \n       std::cout &lt;&lt; \"Enter the value of 'a' : \" &lt;&lt; std::endl;  \n       cin>>a;  \n    }  \n};  \n  \nclass B : public A   \n{  \n    protected:  \n    int b;  \n    public:  \n    void get_b()  \n    {  \n        std::cout &lt;&lt; \"Enter the value of 'b' : \" &lt;&lt; std::endl;  \n       cin>>b;  \n    }  \n};  \nclass C   \n{  \n    protected:  \n    int c;  \n    public:  \n    void get_c()  \n    {  \n        std::cout &lt;&lt; \"Enter the value of c is : \" &lt;&lt; std::endl;  \n        cin>>c;  \n    }  \n};  \n  \nclass D : public B, public C  \n{  \n    protected:  \n    int d;  \n    public:  \n    void mul()  \n    {  \n         get_a();  \n         get_b();  \n         get_c();  \n         std::cout &lt;&lt; \"Multiplication of a,b,c is : \" &lt;&lt;a*b*c&lt;&lt; std::endl;  \n    }  \n};  \nint main()  \n{  \n    D d;  \n    d.mul();  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter the value of 'a' :\n10              \nEnter the value of 'b' :    \n20      \nEnter the value of c is :   \n30  \nMultiplication of a,b,c is : 6000\n</code></pre>\n\n\n\n<h2>C++ Hierarchical Inheritance</h2>\n\n\n\n<p>Hierarchical inheritance is defined as the process of deriving more than one class from a base class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-inheritance7.png\" alt=\"C++ Inheritance\"/></figure>\n\n\n\n<p><strong>Syntax of Hierarchical inheritance:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A  \n{  \n    // body of the class A.  \n}    \nclass B : public A   \n{  \n    // body of class B.  \n}  \nclass C : public A  \n{  \n    // body of class C.  \n}   \nclass D : public A  \n{  \n    // body of class D.  \n}  </code></pre>\n\n\n\n<p>Let&#8217;s see a simple example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Shape                 // Declaration of base class.  \n{  \n    public:  \n    int a;  \n    int b;  \n    void get_data(int n,int m)  \n    {  \n        a= n;  \n        b = m;  \n    }  \n};  \nclass Rectangle : public Shape  // inheriting Shape class  \n{  \n    public:  \n    int rect_area()  \n    {  \n        int result = a*b;  \n        return result;  \n    }  \n};  \nclass Triangle : public Shape    // inheriting Shape class  \n{  \n    public:  \n    int triangle_area()  \n    {  \n        float result = 0.5*a*b;  \n        return result;  \n    }  \n};  \nint main()  \n{  \n    Rectangle r;  \n    Triangle t;  \n    int length,breadth,base,height;  \n    std::cout &lt;&lt; \"Enter the length and breadth of a rectangle: \" &lt;&lt; std::endl;  \n    cin>>length>>breadth;  \n    r.get_data(length,breadth);  \n    int m = r.rect_area();  \n    std::cout &lt;&lt; \"Area of the rectangle is : \" &lt;&lt;m&lt;&lt; std::endl;  \n    std::cout &lt;&lt; \"Enter the base and height of the triangle: \" &lt;&lt; std::endl;  \n    cin>>base>>height;  \n    t.get_data(base,height);  \n    float n = t.triangle_area();  \n    std::cout &lt;&lt;\"Area of the triangle is : \"  &lt;&lt; n&lt;&lt;std::endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter the length and breadth of a rectangle:\n23  \n20  \nArea of the rectangle is : 460          \nEnter the base and height of the triangle:  \n2   \n5\nArea of the triangle is : 5 </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++, inheritance is a process in which one object acquires all the properties and behaviors of its parent object automatically. In such way, you can reuse, extend or modify the attributes and behaviors which are defined in other class. In C++, the class which inherits the members of another class is called derived class [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/938"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=938"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/938/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4492,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/938/revisions/4492"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=938"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=938"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=938"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 939,
    "date": "2020-08-26T07:08:22",
    "date_gmt": "2020-08-26T07:08:22",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=113"
    },
    "modified": "2021-02-15T10:40:14",
    "modified_gmt": "2021-02-15T10:40:14",
    "slug": "c-aggregation-has-a-relationship",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-aggregation-has-a-relationship/",
    "title": {
      "rendered": "C++ Aggregation (HAS-A Relationship)"
    },
    "content": {
      "rendered": "\n<p>In C++, aggregation is a process in which one class defines another class as any entity reference. It is another way to reuse the class. It is a form of association that represents HAS-A relationship.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Aggregation Example</h2>\n\n\n\n<p>Let&#8217;s see an example of aggregation where Employee class has the reference of Address class as data member. In such way, it can reuse the members of Address class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Address {  \n    public:  \n   string addressLine, city, state;    \n     Address(string addressLine, string city, string state)    \n    {    \n        this->addressLine = addressLine;    \n        this->city = city;    \n        this->state = state;    \n    }    \n};  \nclass Employee    \n    {    \n        private:  \n        Address* address;  //Employee HAS-A Address   \n        public:  \n        int id;    \n        string name;    \n        Employee(int id, string name, Address* address)    \n       {    \n           this->id = id;    \n           this->name = name;    \n           this->address = address;    \n       }    \n     void display()    \n       {    \n           cout&lt;&lt;id &lt;&lt;\" \"&lt;&lt;name&lt;&lt; \" \"&lt;&lt;     \n             address->addressLine&lt;&lt; \" \"&lt;&lt; address->city&lt;&lt; \" \"&lt;&lt;address->state&lt;&lt;endl;    \n       }    \n   };   \nint main(void) {  \n    Address a1= Address(\"C-146, Sec-15\",\"Noida\",\"UP\");    \n    Employee e1 = Employee(101,\"Nakul\",&amp;a1);    \n            e1.display();   \n   return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Nakul C-146, Sec-15 Noida UP</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++, aggregation is a process in which one class defines another class as any entity reference. It is another way to reuse the class. It is a form of association that represents HAS-A relationship. C++ Aggregation Example Let&#8217;s see an example of aggregation where Employee class has the reference of Address class as data [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/939"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=939"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/939/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4491,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/939/revisions/4491"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=939"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=939"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=939"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 940,
    "date": "2020-08-26T07:10:00",
    "date_gmt": "2020-08-26T07:10:00",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=115"
    },
    "modified": "2021-02-15T10:40:38",
    "modified_gmt": "2021-02-15T10:40:38",
    "slug": "c-polymorphism",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-polymorphism/",
    "title": {
      "rendered": "C++ Polymorphism"
    },
    "content": {
      "rendered": "\n<p>The term &#8220;Polymorphism&#8221; is the combination of &#8220;poly&#8221; + &#8220;morphs&#8221; which means many forms. It is a greek word. In object-oriented programming, we use 3 main concepts: inheritance, encapsulation, and polymorphism.</p>\n\n\n\n<h2>Real Life Example Of Polymorphism</h2>\n\n\n\n<p>Let&#8217;s consider a real-life example of polymorphism. A lady behaves like a teacher in a classroom, mother or daughter in a home and customer in a market. Here, a single person is behaving differently according to the situations.</p>\n\n\n\n<p><strong>There are two types of polymorphism in C++:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-polymorphism.png\" alt=\"C++\"/></figure>\n\n\n\n<ul><li><strong>Compile time polymorphism</strong>: The overloaded functions are invoked by matching the type and number of arguments. This information is available at the compile time and, therefore, compiler selects the appropriate function at the compile time. It is achieved by function overloading and operator overloading which is also known as static binding or early binding. Now, let&#8217;s consider the case where function name and prototype is same.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code> class A                                  //  base class declaration.  \n  {  \n       int a;  \n       public:  \n       void display()  \n       {   \n             cout&lt;&lt; \"Class A \";  \n        }  \n  };  \nclass B : public A                       //  derived class declaration.  \n{  \n    int b;  \n    public:  \n   void display()  \n  {  \n        cout&lt;&lt;\"Class B\";  \n  }  \n};  </code></pre>\n\n\n\n<p>In the above case, the prototype of display() function is the same in both the&nbsp;<strong>base and derived class</strong>. Therefore, the static binding cannot be applied. It would be great if the appropriate function is selected at the run time. This is known as&nbsp;<strong>run time polymorphism</strong>.</p>\n\n\n\n<ul><li><strong>Run time polymorphism</strong>: Run time polymorphism is achieved when the object&#8217;s method is invoked at the run time instead of compile time. It is achieved by method overriding which is also known as dynamic binding or late binding.</li></ul>\n\n\n\n<h2>Differences b/w compile time and run time polymorphism.</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Compile time polymorphism</th><th>Run time polymorphism</th></tr><tr><td>The function to be invoked is known at the compile time.</td><td>The function to be invoked is known at the run time.</td></tr><tr><td>It is also known as overloading, early binding and static binding.</td><td>It is also known as overriding, Dynamic binding and late binding.</td></tr><tr><td>Overloading is a compile time polymorphism where more than one method is having the same name but with the different number of parameters or the type of the parameters.</td><td>Overriding is a run time polymorphism where more than one method is having the same name, number of parameters and the type of the parameters.</td></tr><tr><td>It is achieved by function overloading and operator overloading.</td><td>It is achieved by virtual functions and pointers.</td></tr><tr><td>It provides fast execution as it is known at the compile time.</td><td>It provides slow execution as it is known at the run time.</td></tr><tr><td>It is less flexible as mainly all the things execute at the compile time.</td><td>It is more flexible as all the things execute at the run time.</td></tr></tbody></table></figure>\n\n\n\n<h2>C++ Runtime Polymorphism Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example of run time polymorphism in C++.</p>\n\n\n\n<p>// an example without the virtual keyword.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \nclass Animal {    \n    public:    \nvoid eat(){      \ncout&lt;&lt;\"Eating...\";      \n    }        \n};     \nclass Dog: public Animal      \n{      \n public:    \n void eat()      \n    {           cout&lt;&lt;\"Eating bread...\";      \n    }      \n};    \nint main(void) {    \n   Dog d = Dog();      \n   d.eat();    \n   return 0;    \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Eating bread...\n</code></pre>\n\n\n\n<h2>C++ Run time Polymorphism Example: By using two derived class</h2>\n\n\n\n<p>Let&#8217;s see another example of run time polymorphism in C++ where we are having two derived classes.</p>\n\n\n\n<p>// an example with virtual keyword.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \nclass Shape {                                        //  base class  \n    public:    \nvirtual void draw(){                             // virtual function  \ncout&lt;&lt;\"drawing...\"&lt;&lt;endl;      \n    }        \n};     \nclass Rectangle: public Shape                  //  inheriting Shape class.  \n{      \n public:    \n void draw()      \n   {      \n       cout&lt;&lt;\"drawing rectangle...\"&lt;&lt;endl;      \n    }      \n};    \nclass Circle: public Shape                        //  inheriting Shape class.  \n  \n{      \n public:    \n void draw()      \n   {      \n      cout&lt;&lt;\"drawing circle...\"&lt;&lt;endl;      \n   }      \n};    \nint main(void) {    \n    Shape *s;                               //  base class pointer.  \n    Shape sh;                               // base class object.  \n       Rectangle rec;    \n        Circle cir;    \n      s=&amp;sh;    \n     s->draw();     \n        s=&amp;rec;    \n     s->draw();      \n    s=?    \n    s->draw();     \n}    </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>drawing...\ndrawing rectangle...\ndrawing circle...\n</code></pre>\n\n\n\n<h2>Runtime Polymorphism with Data Members</h2>\n\n\n\n<p>Runtime Polymorphism can be achieved by data members in C++. Let&#8217;s see an example where we are accessing the field by reference variable which refers to the instance of derived class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \nclass Animal {                                          //  base class declaration.  \n    public:    \n    string color = \"Black\";      \n};     \nclass Dog: public Animal                       // inheriting Animal class.  \n{      \n public:    \n    string color = \"Grey\";      \n};    \nint main(void) {    \n     Animal d= Dog();      \n    cout&lt;&lt;d.color;     \n}    </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Black</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The term &#8220;Polymorphism&#8221; is the combination of &#8220;poly&#8221; + &#8220;morphs&#8221; which means many forms. It is a greek word. In object-oriented programming, we use 3 main concepts: inheritance, encapsulation, and polymorphism. Real Life Example Of Polymorphism Let&#8217;s consider a real-life example of polymorphism. A lady behaves like a teacher in a classroom, mother or daughter [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/940"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=940"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/940/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4490,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/940/revisions/4490"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=940"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=940"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=940"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 941,
    "date": "2020-08-26T07:13:19",
    "date_gmt": "2020-08-26T07:13:19",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=117"
    },
    "modified": "2021-02-15T10:40:49",
    "modified_gmt": "2021-02-15T10:40:49",
    "slug": "c-overloading-function-and-operator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-overloading-function-and-operator/",
    "title": {
      "rendered": "C++ Overloading (Function and Operator)"
    },
    "content": {
      "rendered": "\n<p>If we create two or more members having the same name but different in number or type of parameter, it is known as C++ overloading. In C++, we can overload:</p>\n\n\n\n<ul><li>methods,</li><li>constructors, and</li><li>indexed properties</li></ul>\n\n\n\n<p>It is because these members have parameters only.</p>\n\n\n\n<h2>Types of overloading in C++ are:</h2>\n\n\n\n<ul><li>Function overloading</li><li>Operator overloading</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-overloading.png\" alt=\"C++ Overloading\"/></figure>\n\n\n\n<h2>C++ Function Overloading</h2>\n\n\n\n<p>Function Overloading is defined as the process of having two or more function with the same name, but different in parameters is known as function overloading in C++. In function overloading, the function is redefined by using either different types of arguments or a different number of arguments. It is only through these differences compiler can differentiate between the functions.</p>\n\n\n\n<p>The&nbsp;<strong>advantage</strong>&nbsp;of Function overloading is that it increases the readability of the program because you don&#8217;t need to use different names for the same action.</p>\n\n\n\n<h2>C++ Function Overloading Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of function overloading where we are changing number of arguments of add() method.</p>\n\n\n\n<p>// program of function overloading when number of arguments vary.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \nclass Cal {    \n    public:    \nstatic int add(int a,int b){      \n        return a + b;      \n    }      \nstatic int add(int a, int b, int c)      \n    {      \n        return a + b + c;      \n    }      \n};     \nint main(void) {    \n    Cal C;                                                    //     class object declaration.   \n    cout&lt;&lt;C.add(10, 20)&lt;&lt;endl;      \n    cout&lt;&lt;C.add(12, 20, 23);     \n   return 0;    \n}    </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>30\n55\n</code></pre>\n\n\n\n<p>Let&#8217;s see the simple example when the type of the arguments vary.</p>\n\n\n\n<p>// Program of function overloading with different types of arguments.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include&lt;iostream>  \nusing namespace std;  \nint mul(int,int);  \nfloat mul(float,int);  \n  \n  \nint mul(int a,int b)  \n{  \n    return a*b;  \n}  \nfloat mul(double x, int y)  \n{  \n    return x*y;  \n}  \nint main()  \n{  \n    int r1 = mul(6,7);  \n    float r2 = mul(0.2,3);   \n    std::cout &lt;&lt; \"r1 is : \" &lt;&lt;r1&lt;&lt; std::endl;  \n    std::cout &lt;&lt;\"r2 is : \"  &lt;&lt;r2&lt;&lt; std::endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>r1 is : 42\nr2 is : 0.6  \n</code></pre>\n\n\n\n<h2>Function Overloading and Ambiguity</h2>\n\n\n\n<p>When the compiler is unable to decide which function is to be invoked among the overloaded function, this situation is known as&nbsp;<strong>function overloading</strong>.</p>\n\n\n\n<p>When the compiler shows the ambiguity error, the compiler does not run the program.</p>\n\n\n\n<p><strong>Causes of Function Overloading:</strong></p>\n\n\n\n<ul><li>Type Conversion.</li><li>Function with default arguments.</li><li>Function with pass by reference.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-overloading2.png\" alt=\"C++ Overloading\"/></figure>\n\n\n\n<ul><li>Type Conversion:</li></ul>\n\n\n\n<p><strong>Let&#8217;s see a simple example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include&lt;iostream>  \nusing namespace std;  \nvoid fun(int);  \nvoid fun(float);  \nvoid fun(int i)  \n{  \n    std::cout &lt;&lt; \"Value of i is : \" &lt;&lt;i&lt;&lt; std::endl;  \n}  \nvoid fun(float j)  \n{  \n    std::cout &lt;&lt; \"Value of j is : \" &lt;&lt;j&lt;&lt; std::endl;  \n}  \nint main()  \n{  \n    fun(12);  \n    fun(1.2);  \n    return 0;  \n}</code></pre>\n\n\n\n<p>The above example shows an error &#8220;<strong>call of overloaded &#8216;fun(double)&#8217; is ambiguous</strong>&#8220;. The fun(10) will call the first function. The fun(1.2) calls the second function according to our prediction. But, this does not refer to any function as in C++, all the floating point constants are treated as double not as a float. If we replace float to double, the program works. Therefore, this is a type conversion from float to double.</p>\n\n\n\n<ul><li>Function with Default Arguments</li></ul>\n\n\n\n<p><strong>Let&#8217;s see a simple example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include&lt;iostream>  \nusing namespace std;  \nvoid fun(int);  \nvoid fun(int,int);  \nvoid fun(int i)  \n{  \n    std::cout &lt;&lt; \"Value of i is : \" &lt;&lt;i&lt;&lt; std::endl;  \n}  \nvoid fun(int a,int b=9)  \n{  \n    std::cout &lt;&lt; \"Value of a is : \" &lt;&lt;a&lt;&lt; std::endl;  \n    std::cout &lt;&lt; \"Value of b is : \" &lt;&lt;b&lt;&lt; std::endl;  \n}  \nint main()  \n{  \n    fun(12);  \n   \n    return 0;  \n}  </code></pre>\n\n\n\n<p>The above example shows an error &#8220;call of overloaded &#8216;fun(int)&#8217; is ambiguous&#8221;. The fun(int a, int b=9) can be called in two ways: first is by calling the function with one argument, i.e., fun(12) and another way is calling the function with two arguments, i.e., fun(4,5). The fun(int i) function is invoked with one argument. Therefore, the compiler could not be able to select among fun(int i) and fun(int a,int b=9).</p>\n\n\n\n<ul><li>Function with pass by reference</li></ul>\n\n\n\n<p>Let&#8217;s see a simple example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid fun(int);  \nvoid fun(int &amp;);   \nint main()  \n{  \nint a=10;  \nfun(a); // error, which f()?  \nreturn 0;  \n}  \nvoid fun(int x)  \n{  \nstd::cout &lt;&lt; \"Value of x is : \" &lt;&lt;x&lt;&lt; std::endl;  \n}  \nvoid fun(int &amp;b)  \n{  \nstd::cout &lt;&lt; \"Value of b is : \" &lt;&lt;b&lt;&lt; std::endl;  \n}  </code></pre>\n\n\n\n<p>The above example shows an error &#8220;<strong>call of overloaded &#8216;fun(int&amp;)&#8217; is ambiguous</strong>&#8220;. The first function takes one integer argument and the second function takes a reference parameter as an argument. In this case, the compiler does not know which function is needed by the user as there is no syntactical difference between the fun(int) and fun(int &amp;).</p>\n\n\n\n<h2>C++ Operators Overloading</h2>\n\n\n\n<p>Operator overloading is a compile-time polymorphism in which the operator is overloaded to provide the special meaning to the user-defined data type. Operator overloading is used to overload or redefines most of the operators available in C++. It is used to perform the operation on the user-defined data type. For example, C++ provides the ability to add the variables of the user-defined data type that is applied to the built-in data types.</p>\n\n\n\n<p>The advantage of Operators overloading is to perform different operations on the same operand.</p>\n\n\n\n<p><strong>Operator that cannot be overloaded are as follows:</strong></p>\n\n\n\n<ul><li>Scope operator (::)</li><li>Sizeof</li><li>member selector(.)</li><li>member pointer selector(*)</li><li>ternary operator(?:)</li></ul>\n\n\n\n<h2>Syntax of Operator Overloading</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>return_type class_name  : : operator op(argument_list)  \n{  \n     // body of the function.  \n}  </code></pre>\n\n\n\n<p>Where the&nbsp;<strong>return type</strong>&nbsp;is the type of value returned by the function.</p>\n\n\n\n<p><strong>class_name</strong>&nbsp;is the name of the class.</p>\n\n\n\n<p><strong>operator op</strong>&nbsp;is an operator function where op is the operator being overloaded, and the operator is the keyword.</p>\n\n\n\n<h2>Rules for Operator Overloading</h2>\n\n\n\n<ul><li>Existing operators can only be overloaded, but the new operators cannot be overloaded.</li><li>The overloaded operator contains atleast one operand of the user-defined data type.</li><li>We cannot use friend function to overload certain operators. However, the member function can be used to overload those operators.</li><li>When unary operators are overloaded through a member function take no explicit arguments, but, if they are overloaded by a friend function, takes one argument.</li><li>When binary operators are overloaded through a member function takes one explicit argument, and if they are overloaded through a friend function takes two explicit arguments.</li></ul>\n\n\n\n<h2>C++ Operators Overloading Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of operator overloading in C++. In this example, void operator ++ () operator function is defined (inside Test class).</p>\n\n\n\n<p>// program to overload the unary operator ++.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \nclass Test    \n{    \n   private:    \n      int num;    \n   public:    \n       Test(): num(8){}    \n       void operator ++()         {     \n          num = num+2;     \n       }    \n       void Print() {     \n           cout&lt;&lt;\"The Count is: \"&lt;&lt;num;     \n       }    \n};    \nint main()    \n{    \n    Test tt;    \n    ++tt;  // calling of a function \"void operator ++()\"    \n    tt.Print();    \n    return 0;    \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The Count is: 10\n</code></pre>\n\n\n\n<p>Let&#8217;s see a simple example of overloading the binary operators.</p>\n\n\n\n<p>// program to overload the binary operators.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass A  \n{  \n    \n    int x;  \n      public:  \n      A(){}  \n    A(int i)  \n    {  \n       x=i;  \n    }  \n    void operator+(A);  \n    void display();  \n};  \n  \nvoid A :: operator+(A a)  \n{  \n     \n    int m = x+a.x;  \n    cout&lt;&lt;\"The result of the addition of two objects is : \"&lt;&lt;m;  \n  \n}  \nint main()  \n{  \n    A a1(5);  \n    A a2(4);  \n    a1+a2;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The result of the addition of two objects is : 9 </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>If we create two or more members having the same name but different in number or type of parameter, it is known as C++ overloading. In C++, we can overload: methods, constructors, and indexed properties It is because these members have parameters only. Types of overloading in C++ are: Function overloading Operator overloading C++ Function [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/941"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=941"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/941/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4489,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/941/revisions/4489"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=941"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=941"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=941"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 942,
    "date": "2020-08-26T07:14:13",
    "date_gmt": "2020-08-26T07:14:13",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=119"
    },
    "modified": "2021-02-15T10:41:00",
    "modified_gmt": "2021-02-15T10:41:00",
    "slug": "c-function-overriding",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-function-overriding/",
    "title": {
      "rendered": "C++ Function Overriding"
    },
    "content": {
      "rendered": "\n<p>If derived class defines same function as defined in its base class, it is known as function overriding in C++. It is used to achieve runtime polymorphism. It enables you to provide specific implementation of the function which is already provided by its base class.</p>\n\n\n\n<h2>C++ Function Overriding Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example of Function overriding in C++. In this example, we are overriding the eat() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Animal {  \n    public:  \nvoid eat(){    \ncout&lt;&lt;\"Eating...\";    \n    }      \n};   \nclass Dog: public Animal    \n{    \n public:  \n void eat()    \n    {    \n       cout&lt;&lt;\"Eating bread...\";    \n    }    \n};  \nint main(void) {  \n   Dog d = Dog();    \n   d.eat();  \n   return 0;  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Eating bread...\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>If derived class defines same function as defined in its base class, it is known as function overriding in C++. It is used to achieve runtime polymorphism. It enables you to provide specific implementation of the function which is already provided by its base class. C++ Function Overriding Example Let&#8217;s see a simple example of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/942"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=942"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/942/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4488,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/942/revisions/4488"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=942"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=942"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=942"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 943,
    "date": "2020-08-26T07:15:47",
    "date_gmt": "2020-08-26T07:15:47",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=121"
    },
    "modified": "2021-02-15T10:41:09",
    "modified_gmt": "2021-02-15T10:41:09",
    "slug": "c-virtual-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-virtual-function/",
    "title": {
      "rendered": "C++ virtual function"
    },
    "content": {
      "rendered": "\n<ul><li>A C++ virtual function is a member function in the base class that you redefine in a derived class. It is declared using the virtual keyword.</li><li>It is used to tell the compiler to perform dynamic linkage or late binding on the function.</li><li>There is a necessity to use the single pointer to refer to all the objects of the different classes. So, we create the pointer to the base class that refers to all the derived objects. But, when base class pointer contains the address of the derived class object, always executes the base class function. This issue can only be resolved by using the &#8216;virtual&#8217; function.</li><li>A &#8216;virtual&#8217; is a keyword preceding the normal declaration of a function.</li><li>When the function is made virtual, C++ determines which function is to be invoked at the runtime based on the type of the object pointed by the base class pointer.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Late binding or Dynamic linkage</h2>\n\n\n\n<p>In late binding function call is resolved during runtime. Therefore compiler determines the type of object at runtime, and then binds the function call.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><strong>Rules of Virtual Function</strong></p>\n\n\n\n<ul><li>Virtual functions must be members of some class.</li><li>Virtual functions cannot be static members.</li><li>They are accessed through object pointers.</li><li>They can be a friend of another class.</li><li>A virtual function must be defined in the base class, even though it is not used.</li><li>The prototypes of a virtual function of the base class and all the derived classes must be identical. If the two functions with the same name but different prototypes, C++ will consider them as the overloaded functions.</li><li>We cannot have a virtual constructor, but we can have a virtual destructor</li><li>Consider the situation when we don&#8217;t use the virtual keyword.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass A  \n{  \n   int x=5;  \n    public:  \n    void display()  \n    {  \n        std::cout &lt;&lt; \"Value of x is : \" &lt;&lt; x&lt;&lt;std::endl;  \n    }  \n};  \nclass B: public A  \n{  \n    int y = 10;  \n    public:  \n    void display()  \n    {  \n        std::cout &lt;&lt; \"Value of y is : \" &lt;&lt;y&lt;&lt; std::endl;  \n    }  \n};  \nint main()  \n{  \n    A *a;  \n    B b;  \n    a = &amp;b;  \n   a->display();  \n    return 0;  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of x is : 5\n</code></pre>\n\n\n\n<p>In the above example, * a is the base class pointer. The pointer can only access the base class m</p>\n\n\n\n<p>embers but not the members of the derived class. Although C++ permits the base pointer to point to any object derived from the base class, it cannot directly access the members of the derived class. Therefore, there is a need for virtual function which allows the base pointer to access the members of the derived class.</p>\n\n\n\n<h2>C++ virtual function Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of C++ virtual function used to invoked the derived class in a program.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \n{    \n public:    \n virtual void display()    \n {    \n  cout &lt;&lt; \"Base class is invoked\"&lt;&lt;endl;    \n }    \n};    \nclass B:public A    \n{    \n public:    \n void display()    \n {    \n  cout &lt;&lt; \"Derived Class is invoked\"&lt;&lt;endl;    \n }    \n};    \nint main()    \n{    \n A* a;    //pointer of base class    \n B b;     //object of derived class    \n a = &amp;b;    \n a->display();   //Late Binding occurs    \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Derived Class is invoked  \n</code></pre>\n\n\n\n<h2>Pure Virtual Function</h2>\n\n\n\n<ul><li>A virtual function is not used for performing any task. It only serves as a placeholder.</li><li>When the function has no definition, such function is known as &#8220;<strong>do-nothing</strong>&#8221; function.</li><li>The &#8220;<strong>do-nothing</strong>&#8221; function is known as a&nbsp;<strong>pure virtual function</strong>. A pure virtual function is a function declared in the base class that has no definition relative to the base class.</li><li>A class containing the pure virtual function cannot be used to declare the objects of its own, such classes are known as abstract base classes.</li><li>The main objective of the base class is to provide the traits to the derived classes and to create the base pointer used for achieving the runtime polymorphism.</li></ul>\n\n\n\n<p><strong>Pure virtual function can be defined as:</strong></p>\n\n\n\n<ol><li><strong>virtual</strong>&nbsp;<strong>void</strong>&nbsp;display()&nbsp;=&nbsp;0;&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nclass Base  \n{  \n    public:  \n    virtual void show() = 0;  \n};  \nclass Derived : public Base  \n{  \n    public:  \n    void show()  \n    {  \n        std::cout &lt;&lt; \"Derived class is derived from the base class.\" &lt;&lt; std::endl;  \n    }  \n};  \nint main()  \n{  \n    Base *bptr;  \n    //Base b;  \n    Derived d;  \n    bptr = &amp;d;  \n    bptr->show();  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Derived class is derived from the base class.</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A C++ virtual function is a member function in the base class that you redefine in a derived class. It is declared using the virtual keyword. It is used to tell the compiler to perform dynamic linkage or late binding on the function. There is a necessity to use the single pointer to refer to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/943"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=943"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/943/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4487,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/943/revisions/4487"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=943"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=943"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=943"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 944,
    "date": "2020-08-26T07:16:48",
    "date_gmt": "2020-08-26T07:16:48",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=123"
    },
    "modified": "2021-02-15T10:41:21",
    "modified_gmt": "2021-02-15T10:41:21",
    "slug": "interfaces-in-c-abstract-classes",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/interfaces-in-c-abstract-classes/",
    "title": {
      "rendered": "Interfaces in C++ (Abstract Classes)"
    },
    "content": {
      "rendered": "\n<p>Abstract classes are the way to achieve abstraction in C++. Abstraction in C++ is the process to hide the internal details and showing functionality only. Abstraction can be achieved by two ways:</p>\n\n\n\n<ol><li><strong>Abstract class</strong></li><li><strong>Interface</strong></li></ol>\n\n\n\n<p>Abstract class and interface both can have abstract methods which are necessary for abstraction.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Abstract class</h2>\n\n\n\n<p>In C++ class is made abstract by declaring at least one of its functions as &lt;&gt;strong&gt;pure virtual function. A pure virtual function is specified by placing &#8220;= 0&#8221; in its declaration. Its implementation must be provided by derived classes.</p>\n\n\n\n<p>Let&#8217;s see an example of abstract class in C++ which has one abstract method draw(). Its implementation is provided by derived classes: Rectangle and Circle. Both classes have different implementation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \n class Shape    \n{    \n    public:   \n    virtual void draw()=0;    \n};    \n class Rectangle : Shape    \n{    \n    public:  \n     void draw()    \n    {    \n        cout &lt; &lt;\"drawing rectangle...\" &lt; &lt;endl;    \n    }    \n};    \nclass Circle : Shape    \n{    \n    public:  \n     void draw()    \n    {    \n        cout &lt;&lt;\"drawing circle...\" &lt; &lt;endl;    \n    }    \n};    \nint main( ) {  \n    Rectangle rec;  \n    Circle cir;  \n    rec.draw();    \n    cir.draw();   \n   return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>drawing rectangle...\ndrawing circle...</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Abstract classes are the way to achieve abstraction in C++. Abstraction in C++ is the process to hide the internal details and showing functionality only. Abstraction can be achieved by two ways: Abstract class Interface Abstract class and interface both can have abstract methods which are necessary for abstraction. C++ Abstract class In C++ class [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/944"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=944"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/944/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4486,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/944/revisions/4486"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=944"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=944"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=944"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 945,
    "date": "2020-08-26T07:18:01",
    "date_gmt": "2020-08-26T07:18:01",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=125"
    },
    "modified": "2021-02-15T10:41:28",
    "modified_gmt": "2021-02-15T10:41:28",
    "slug": "data-abstraction-in-c",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-abstraction-in-c/",
    "title": {
      "rendered": "Data Abstraction in C++"
    },
    "content": {
      "rendered": "\n<ul><li>Data Abstraction is a process of providing only the essential details to the outside world and hiding the internal details, i.e., representing only the essential details in the program.</li><li>Data Abstraction is a programming technique that depends on the seperation of the interface and implementation details of the program.</li><li>Let&#8217;s take a real life example of AC, which can be turned ON or OFF, change the temperature, change the mode, and other external components such as fan, swing. But, we don&#8217;t know the internal details of the AC, i.e., how it works internally. Thus, we can say that AC seperates the implementation details from the external interface.</li><li>C++ provides a great level of abstraction. For example, pow() function is used to calculate the power of a number without knowing the algorithm the function follows.</li></ul>\n\n\n\n<p>In C++ program if we implement class with private and public members then it is an example of data abstraction.</p>\n\n\n\n<p><strong>Data Abstraction can be achieved in two ways:</strong></p>\n\n\n\n<ul><li>Abstraction using classes</li><li>Abstraction in header files.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-data-abstraction.png\" alt=\"Data Abstraction in C++\"/></figure>\n\n\n\n<p><strong>Abstraction using classes:</strong>&nbsp;An abstraction can be achieved using classes. A class is used to group all the data members and member functions into a single unit by using the access specifiers. A class has the responsibility to determine which data member is to be visible outside and which is not.</p>\n\n\n\n<p><strong>Abstraction in header files:</strong>&nbsp;An another type of abstraction is header file. For example, pow() function available is used to calculate the power of a number without actually knowing which algorithm function uses to calculate the power. Thus, we can say that header files hides all the implementation details from the user.</p>\n\n\n\n<p><strong>Access Specifiers Implement Abstraction:</strong></p>\n\n\n\n<ul><li><strong>Public specifier:</strong>&nbsp;When the members are declared as public, members can be accessed anywhere from the program.</li><li><strong>Private specifier:</strong>&nbsp;When the members are declared as private, members can only be accessed only by the member functions of the class.</li></ul>\n\n\n\n<p>Let&#8217;s see a simple example of abstraction in header files.</p>\n\n\n\n<p><strong>// program to calculate the power of a number.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;math.h>  \nusing namespace std;  \nint main()  \n{    \n int n = 4;  \n   int power = 3;  \n   int result = pow(n,power);         // pow(n,power) is the  power function  \n   std::cout &lt;&lt; \"Cube of n is : \" &lt;&lt;result&lt;&lt; std::endl;  \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cube of n is : 64\n</code></pre>\n\n\n\n<p>In the above example, pow() function is used to calculate 4 raised to the power 3. The pow() function is present in the math.h header file in which all the implementation details of the pow() function is hidden.</p>\n\n\n\n<p><strong>Let&#8217;s see a simple example of data abstraction using classes.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>    \nusing namespace std;    \n class Sum    \n{    \nprivate: int x, y, z; // private variables  \npublic:    \nvoid add()    \n{    \ncout&lt;&lt;\"Enter two numbers: \";    \ncin>>x>>y;    \nz= x+y;    \ncout&lt;&lt;\"Sum of two number is: \"&lt;&lt;z&lt;&lt;endl;    \n}    \n};    \nint main()    \n{    \nSum sm;    \nsm.add();    \nreturn 0;    \n}   </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter two numbers:\n3\n6\nSum of two number is: 9\n</code></pre>\n\n\n\n<p>In the above example, abstraction is achieved using classes. A class &#8216;Sum&#8217; contains the private members x, y and z are only accessible by the member functions of the class.</p>\n\n\n\n<h2>Advantages Of Abstraction:</h2>\n\n\n\n<ul><li>Implementation details of the class are protected from the inadvertent user level errors.</li><li>A programmer does not need to write the low level code.</li><li>Data Abstraction avoids the code duplication, i.e., programmer does not have to undergo the same tasks every time to perform the similar operation.</li><li>The main aim of the data abstraction is to reuse the code and the proper partitioning of the code across the classes.</li><li>Internal implementation can be changed without affecting the user level code.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Data Abstraction is a process of providing only the essential details to the outside world and hiding the internal details, i.e., representing only the essential details in the program. Data Abstraction is a programming technique that depends on the seperation of the interface and implementation details of the program. Let&#8217;s take a real life example [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/945"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=945"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/945/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4485,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/945/revisions/4485"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=945"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=945"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=945"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 946,
    "date": "2020-08-26T07:19:26",
    "date_gmt": "2020-08-26T07:19:26",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=127"
    },
    "modified": "2021-02-15T10:41:39",
    "modified_gmt": "2021-02-15T10:41:39",
    "slug": "c-namespaces",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-namespaces/",
    "title": {
      "rendered": "C++ Namespaces"
    },
    "content": {
      "rendered": "\n<p>Namespaces in C++ are used to organize too many classes so that it can be easy to handle the application.</p>\n\n\n\n<p>For accessing the class of a namespace, we need to use namespacename::classname. We can use&nbsp;<strong>using</strong>&nbsp;keyword so that we don&#8217;t have to use complete name all the time.</p>\n\n\n\n<p>In C++, global namespace is the root namespace. The global::std will always refer to the namespace &#8220;std&#8221; of C++ Framework.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ namespace Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of namespace which include variable and functions.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nnamespace First {    \n    void sayHello() {   \n        cout&lt;&lt;\"Hello First Namespace\"&lt;&lt;endl;          \n    }    \n}    \nnamespace Second  {    \n       void sayHello() {   \n           cout&lt;&lt;\"Hello Second Namespace\"&lt;&lt;endl;   \n       }    \n}   \nint main()  \n{  \n First::sayHello();  \n Second::sayHello();  \nreturn 0;  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello First Namespace\nHello Second Namespace\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ namespace example: by using keyword</h2>\n\n\n\n<p>Let&#8217;s see another example of namespace where we are using &#8220;using&#8221; keyword so that we don&#8217;t have to use complete name for accessing a namespace program.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nnamespace First{  \n   void sayHello(){  \n      cout &lt;&lt; \"Hello First Namespace\" &lt;&lt; endl;  \n   }  \n}  \nnamespace Second{  \n   void sayHello(){  \n      cout &lt;&lt; \"Hello Second Namespace\" &lt;&lt; endl;  \n   }  \n}  \nusing namespace First;  \nint main () {  \n   sayHello();  \n   return 0;  \n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello First Namespace\t</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Namespaces in C++ are used to organize too many classes so that it can be easy to handle the application. For accessing the class of a namespace, we need to use namespacename::classname. We can use&nbsp;using&nbsp;keyword so that we don&#8217;t have to use complete name all the time. In C++, global namespace is the root namespace. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/946"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=946"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/946/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4484,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/946/revisions/4484"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=946"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=946"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=946"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 947,
    "date": "2020-08-26T07:23:23",
    "date_gmt": "2020-08-26T07:23:23",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=129"
    },
    "modified": "2021-02-15T10:41:46",
    "modified_gmt": "2021-02-15T10:41:46",
    "slug": "c-strings",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-strings/",
    "title": {
      "rendered": "C++ Strings"
    },
    "content": {
      "rendered": "\n<p>In C++, string is an object of&nbsp;<strong>std::string</strong>&nbsp;class that represents sequence of characters. We can perform many operations on strings such as concatenation, comparison, conversion etc.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ String Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of C++ string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main( ) {  \n    string s1 = \"Hello\";    \n        char ch&#91;] = { 'C', '+', '+'};    \n        string s2 = string(ch);    \n        cout&lt;&lt;s1&lt;&lt;endl;    \n        cout&lt;&lt;s2&lt;&lt;endl;    \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello\nC++\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ String Compare Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of string comparison using strcmp() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;cstring>  \nusing namespace std;  \nint main ()  \n{  \n  char key&#91;] = \"mango\";  \n  char buffer&#91;50];  \n  do {  \n     cout&lt;&lt;\"What is my favourite fruit? \";  \n     cin>>buffer;  \n  } while (strcmp (key,buffer) != 0);  \n cout&lt;&lt;\"Answer is correct!!\"&lt;&lt;endl;  \n  return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>What is my favourite fruit? apple\nWhat is my favourite fruit? banana\nWhat is my favourite fruit? mango\nAnswer is correct!!\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ String Concat Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of string concatenation using strcat() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;cstring>  \nusing namespace std;  \nint main()  \n{  \n    char key&#91;25], buffer&#91;25];  \n    cout &lt;&lt; \"Enter the key string: \";  \n    cin.getline(key, 25);  \n    cout &lt;&lt; \"Enter the buffer string: \";  \n     cin.getline(buffer, 25);  \n    strcat(key, buffer);   \n    cout &lt;&lt; \"Key = \" &lt;&lt; key &lt;&lt; endl;  \n    cout &lt;&lt; \"Buffer = \" &lt;&lt; buffer&lt;&lt;endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter the key string: Welcome to\nEnter the buffer string:  C++ Programming.\nKey = Welcome to C++ Programming.\nBuffer =  C++ Programming.\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ String Copy Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of copy the string using strcpy() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;cstring>  \nusing namespace std;  \nint main()  \n{  \n    char key&#91;25], buffer&#91;25];  \n    cout &lt;&lt; \"Enter the key string: \";  \n    cin.getline(key, 25);  \n    strcpy(buffer, key);  \n    cout &lt;&lt; \"Key = \"&lt;&lt; key &lt;&lt; endl;  \n    cout &lt;&lt; \"Buffer = \"&lt;&lt; buffer&lt;&lt;endl;  \n    return 0;  \n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter the key string: C++ Tutorial\nKey = C++ Tutorial\nBuffer = C++ Tutorial\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ String Length Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of finding the string length using strlen() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;cstring>  \nusing namespace std;  \nint main()  \n{  \n    char ary&#91;] = \"Welcome to C++ Programming\";  \n    cout &lt;&lt; \"Length of String = \" &lt;&lt; strlen(ary)&lt;&lt;endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Length of String = 26\n</code></pre>\n\n\n\n<h2>C++ String Functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Function</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-compare-function\">int compare(const string&amp; str)</a></td><td>It is used to compare two string objects.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-length-function\">int length()</a></td><td>It is used to find the length of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-swap-function\">void swap(string&amp; str)</a></td><td>It is used to swap the values of two string objects.</td></tr><tr><td>string substr(int pos,int n)</td><td>It creates a new string object of n characters.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-size-function\">int size()</a></td><td>It returns the length of the string in terms of bytes.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-resize-function\">void resize(int n)</a></td><td>It is used to resize the length of the string up to n characters.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-replace-function\">string&amp; replace(int pos,int len,string&amp; str)</a></td><td>It replaces portion of the string that begins at character position pos and spans len characters.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-append-function\">string&amp; append(const string&amp; str)</a></td><td>It adds new characters at the end of another string object.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-at-function\">char&amp; at(int pos)</a></td><td>It is used to access an individual character at specified position pos.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-find-function\">int find(string&amp; str,int pos,int n)</a></td><td>It is used to find the string specified in the parameter.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-find-first-of-function\">int find_first_of(string&amp; str,int pos,int n)</a></td><td>It is used to find the first occurrence of the specified sequence.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-find-first-not-of-function\">int find_first_not_of(string&amp; str,int pos,int n )</a></td><td>It is used to search the string for the first character that does not match with any of the characters specified in the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-find-last-of-function\">int find_last_of(string&amp; str,int pos,int n)</a></td><td>It is used to search the string for the last character of specified sequence.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-find-last-not-of-function\">int find_last_not_of(string&amp; str,int pos)</a></td><td>It searches for the last character that does not match with the specified sequence.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-insert-function\">string&amp; insert()</a></td><td>It inserts a new character before the character indicated by the position pos.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-max-size-function\">int max_size()</a></td><td>It finds the maximum length of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-push-back-function\">void push_back(char ch)</a></td><td>It adds a new character ch at the end of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-pop-back-function\">void pop_back()</a></td><td>It removes a last character of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-assign-function\">string&amp; assign()</a></td><td>It assigns new value to the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-copy-function\">int copy(string&amp; str)</a></td><td>It copies the contents of string into another.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-back-function\">char&amp; back()</a></td><td>It returns the reference of last character.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-begin-function\">Iterator begin()</a></td><td>It returns the reference of first character.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-capacity-function\">int capacity()</a></td><td>It returns the allocated space for the string.</td></tr><tr><td>const_iterator cbegin()</td><td>It points to the first element of the string.</td></tr><tr><td>const_iterator cend()</td><td>It points to the last element of the string.</td></tr><tr><td>void clear()</td><td>It removes all the elements from the string.</td></tr><tr><td>const_reverse_iterator crbegin()</td><td>It points to the last character of the string.</td></tr><tr><td>const_char* data()</td><td>It copies the characters of string into an array.</td></tr><tr><td>bool empty()</td><td>It checks whether the string is empty or not.</td></tr><tr><td>string&amp; erase()</td><td>It removes the characters as specified.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-front-function\">char&amp; front()</a></td><td>It returns a reference of the first character.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-operator+=()-function\">string&amp;&nbsp; operator+=()</a></td><td>It appends a new character at the end of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-operator=()-function\">string&amp; operator=()</a></td><td>It assigns a new value to the string.</td></tr><tr><td>char operator[](pos)</td><td>It retrieves a character at specified position pos.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-rfind-function\">int rfind()</a></td><td>It searches for the last occurrence of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-end-function\">iterator end()</a></td><td>It references the last character of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-rend-function\">reverse_iterator rend()</a></td><td>It points to the first character of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-shrink-to-fit-function\">void shrink_to_fit()</a></td><td>It reduces the capacity and makes it equal to the size of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-c-str-function\">char* c_str()</a></td><td>It returns pointer to an array that contains null terminated sequence of characters.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-crend-function\">const_reverse_iterator crend()</a></td><td>It references the first character of the string.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-string-rbegin-function\">reverse_iterator rbegin()</a></td><td>It reference the last character of the string.</td></tr><tr><td>void reserve(inr len)</td><td>It requests a change in capacity.</td></tr><tr><td>allocator_type get_allocator();</td><td>It returns the allocated object associated with the string.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++, string is an object of&nbsp;std::string&nbsp;class that represents sequence of characters. We can perform many operations on strings such as concatenation, comparison, conversion etc. C++ String Example Let&#8217;s see the simple example of C++ string. Output: C++ String Compare Example Let&#8217;s see the simple example of string comparison using strcmp() function. Output: C++ String [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/947"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=947"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/947/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4483,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/947/revisions/4483"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=947"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=947"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=947"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 948,
    "date": "2020-08-26T07:24:17",
    "date_gmt": "2020-08-26T07:24:17",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=131"
    },
    "modified": "2021-02-15T10:41:56",
    "modified_gmt": "2021-02-15T10:41:56",
    "slug": "c-exception-handling",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-exception-handling/",
    "title": {
      "rendered": "C++ Exception Handling"
    },
    "content": {
      "rendered": "\n<p>Exception Handling in C++ is a process to handle runtime errors. We perform exception handling so the normal flow of the application can be maintained even after runtime errors.</p>\n\n\n\n<p>In C++, exception is an event or object which is thrown at runtime. All exceptions are derived from std::exception class. It is a runtime error which can be handled. If we don&#8217;t handle the exception, it prints exception message and terminates the program.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Advantage</h2>\n\n\n\n<p>It maintains the normal flow of the application. In such case, rest of the code is executed even after exception.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Exception Classes</h2>\n\n\n\n<p>In C++ standard exceptions are defined in &lt;exception&gt; class that we can use inside our programs. The arrangement of parent-child class hierarchy is shown below:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-exception-handling1.png\" alt=\"Cpp Exception handling 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>All the exception classes in C++ are derived from std::exception class. Let&#8217;s see the list of C++ common exception classes.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Exception</th><th>Description</th></tr><tr><td>std::exception</td><td>It is an exception and parent class of all standard C++ exceptions.</td></tr><tr><td>std::logic_failure</td><td>It is an exception that can be detected by reading a code.</td></tr><tr><td>std::runtime_error</td><td>It is an exception that cannot be detected by reading a code.</td></tr><tr><td>std::bad_exception</td><td>It is used to handle the unexpected exceptions in a c++ program.</td></tr><tr><td>std::bad_cast</td><td>This exception is generally be thrown by&nbsp;<strong>dynamic_cast.</strong></td></tr><tr><td>std::bad_typeid</td><td>This exception is generally be thrown by&nbsp;<strong>typeid.</strong></td></tr><tr><td>std::bad_alloc</td><td>This exception is generally be thrown by&nbsp;<strong>new.</strong></td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Exception Handling Keywords</h2>\n\n\n\n<p>In C++, we use 3 keywords to perform exception handling:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>try\ncatch, and\nthrow</code></pre>\n\n\n\n<p>Moreover, we can create user-defined exception which we will learn in next chapters.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Exception Handling in C++ is a process to handle runtime errors. We perform exception handling so the normal flow of the application can be maintained even after runtime errors. In C++, exception is an event or object which is thrown at runtime. All exceptions are derived from std::exception class. It is a runtime error which [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/948"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=948"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/948/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4482,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/948/revisions/4482"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=948"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=948"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=948"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 949,
    "date": "2020-08-26T07:25:12",
    "date_gmt": "2020-08-26T07:25:12",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=133"
    },
    "modified": "2021-02-15T10:42:23",
    "modified_gmt": "2021-02-15T10:42:23",
    "slug": "c-try-catch",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-try-catch/",
    "title": {
      "rendered": "C++ try/catch"
    },
    "content": {
      "rendered": "\n<p>In C++ programming, exception handling is performed using try/catch statement. The C++&nbsp;<strong>try block</strong>&nbsp;is used to place the code that may occur exception. The&nbsp;<strong>catch block</strong>&nbsp;is used to handle the exception.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ example without try/catch</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nfloat division(int x, int y) {  \n   return (x/y);  \n}  \nint main () {  \n   int i = 50;  \n   int j = 0;  \n   float k = 0;  \n      k = division(i, j);  \n      cout &lt;&lt; k &lt;&lt; endl;  \n   return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">Floating point exception (core dumped)  \n</pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ try/catch example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nfloat division(int x, int y) {  \n   if( y == 0 ) {  \n      throw \"Attempted to divide by zero!\";  \n   }  \n   return (x/y);  \n}  \nint main () {  \n   int i = 25;  \n   int j = 0;  \n   float k = 0;  \n   try {  \n      k = division(i, j);  \n      cout &lt;&lt; k &lt;&lt; endl;  \n   }catch (const char* e) {  \n      cerr &lt;&lt; e &lt;&lt; endl;  \n   }  \n   return 0;  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Attempted to divide by zero!</code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In C++ programming, exception handling is performed using try/catch statement. The C++&nbsp;try block&nbsp;is used to place the code that may occur exception. The&nbsp;catch block&nbsp;is used to handle the exception. C++ example without try/catch Output: Floating point exception (core dumped) C++ try/catch example Output:</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/949"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=949"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/949/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4481,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/949/revisions/4481"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=949"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=949"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=949"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 950,
    "date": "2020-08-26T07:26:05",
    "date_gmt": "2020-08-26T07:26:05",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=135"
    },
    "modified": "2021-02-15T10:42:35",
    "modified_gmt": "2021-02-15T10:42:35",
    "slug": "c-user-defined-exceptions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-user-defined-exceptions/",
    "title": {
      "rendered": "C++ User-Defined Exceptions"
    },
    "content": {
      "rendered": "\n<p>The new exception can be defined by overriding and inheriting&nbsp;<strong>exception</strong>&nbsp;class functionality.</p>\n\n\n\n<h2>C++ user-defined exception example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of user-defined exception in which <strong>std::exception</strong> class is used to define the exception.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;exception>  \nusing namespace std;  \nclass MyException : public exception{  \n    public:  \n        const char * what() const throw()  \n        {  \n            return \"Attempted to divide by zero!\\n\";  \n        }  \n};  \nint main()  \n{  \n    try  \n    {  \n        int x, y;  \n        cout &lt;&lt; \"Enter the two numbers : \\n\";  \n        cin >> x >> y;  \n        if (y == 0)  \n        {  \n            MyException z;  \n            throw z;  \n        }  \n        else  \n        {  \n            cout &lt;&lt; \"x / y = \" &lt;&lt; x/y &lt;&lt; endl;  \n        }  \n    }  \n    catch(exception&amp; e)  \n    {  \n        cout &lt;&lt; e.what();  \n    }  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter the two numbers :\n10\n2\nx / y = 5  \n</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter the two numbers :\n10\n0\nAttempted to divide by zero!\n</code></pre>\n\n\n\n<p>&#8211;&gt;</p>\n\n\n\n<p><strong>Note:</strong>&nbsp;In above example what() is a public method provided by the exception class. It is used to return the cause of an exception.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The new exception can be defined by overriding and inheriting&nbsp;exception&nbsp;class functionality. C++ user-defined exception example Let&#8217;s see the simple example of user-defined exception in which std::exception class is used to define the exception. Output: Output: &#8211;&gt; Note:&nbsp;In above example what() is a public method provided by the exception class. It is used to return the cause of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/950"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=950"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/950/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4480,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/950/revisions/4480"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=950"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=950"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=950"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 951,
    "date": "2020-08-26T07:30:14",
    "date_gmt": "2020-08-26T07:30:14",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=137"
    },
    "modified": "2021-02-15T10:42:46",
    "modified_gmt": "2021-02-15T10:42:46",
    "slug": "c-templates",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-templates/",
    "title": {
      "rendered": "C++ Templates"
    },
    "content": {
      "rendered": "\n<p>A C++ template is a powerful feature added to C++. It allows you to define the generic classes and generic functions and thus provides support for generic programming. Generic programming is a technique where generic types are used as parameters in algorithms so that they can work for a variety of data types.</p>\n\n\n\n<p><strong>Templates can be represented in two ways:</strong></p>\n\n\n\n<ul><li>Function templates</li><li>Class templates</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-templates.png\" alt=\"C++ Templates\"/></figure>\n\n\n\n<p><strong>Function Templates:</strong></p>\n\n\n\n<p>We can define a template for a function. For example, if we have an add() function, we can create versions of the add function for adding the int, float or double type values.</p>\n\n\n\n<p><strong>Class Template:</strong></p>\n\n\n\n<p>We can define a template for a class. For example, a class template can be created for the array class that can accept the array of various types such as int array, float array or double array.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Function Template</h2>\n\n\n\n<ul><li>Generic functions use the concept of a function template. Generic functions define a set of operations that can be applied to the various types of data.</li><li>The type of the data that the function will operate on depends on the type of the data passed as a parameter.</li><li>For example, Quick sorting algorithm is implemented using a generic function, it can be implemented to an array of integers or array of floats.</li><li>A Generic function is created by using the keyword template. The template defines what function will do.</li></ul>\n\n\n\n<h3>Syntax of Function Template</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>template &lt; class Ttype> ret_type func_name(parameter_list)  \n{  \n    // body of function.  \n}  </code></pre>\n\n\n\n<p>Where&nbsp;<strong>Ttype</strong>: It is a placeholder name for a data type used by the function. It is used within the function definition. It is only a placeholder that the compiler will automatically replace this placeholder with the actual data type.</p>\n\n\n\n<p><strong>class</strong>: A class keyword is used to specify a generic type in a template declaration.</p>\n\n\n\n<p><strong>Let&#8217;s see a simple example of a function template:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> #include &lt;iostream>  \nusing namespace std;  \ntemplate&lt;class T> T add(T &amp;a,T &amp;b)  \n{  \n    T result = a+b;  \n    return result;  \n      \n}  \nint main()  \n{  \n  int i =2;  \n  int j =3;  \n  float m = 2.3;  \n  float n = 1.2;  \n  cout&lt;&lt;\"Addition of i and j is :\"&lt;&lt;add(i,j);  \n  cout&lt;&lt;'\\n';  \n  cout&lt;&lt;\"Addition of m and n is :\"&lt;&lt;add(m,n);  \n  return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Addition of i and j is :5\nAddition of m and n is :3.5\n</code></pre>\n\n\n\n<p>In the above example, we create the function template which can perform the addition operation on any type either it can be integer, float or double.</p>\n\n\n\n<h3>Function Templates with Multiple Parameters</h3>\n\n\n\n<p>We can use more than one generic type in the template function by using the comma to separate the list.</p>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code> template&lt;class T1, class T2,.....>  \nreturn_type function_name (arguments of type T1, T2....)  \n{  \n    // body of function.  \n}  </code></pre>\n\n\n\n<p>In the above syntax, we have seen that the template function can accept any number of arguments of a different type.</p>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \ntemplate&lt;class X,class Y> void fun(X a,Y b)  \n{  \n    std::cout &lt;&lt; \"Value of a is : \" &lt;&lt;a&lt;&lt; std::endl;  \n    std::cout &lt;&lt; \"Value of b is : \" &lt;&lt;b&lt;&lt; std::endl;  \n}  \n  \nint main()  \n{  \n   fun(15,12.3);  \n   \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of a is : 15\nValue of b is : 12.3\n</code></pre>\n\n\n\n<p>In the above example, we use two generic types in the template function, i.e., X and Y.</p>\n\n\n\n<h3>Overloading a Function Template</h3>\n\n\n\n<p>We can overload the generic function means that the overloaded template functions can differ in the parameter list.</p>\n\n\n\n<p><strong>Let&#8217;s understand this through a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \ntemplate&lt;class X> void fun(X a)  \n{  \n    std::cout &lt;&lt; \"Value of a is : \" &lt;&lt;a&lt;&lt; std::endl;  \n}  \ntemplate&lt;class X,class Y> void fun(X b ,Y c)  \n{  \n    std::cout &lt;&lt; \"Value of b is : \" &lt;&lt;b&lt;&lt; std::endl;  \n    std::cout &lt;&lt; \"Value of c is : \" &lt;&lt;c&lt;&lt; std::endl;  \n}  \nint main()  \n{  \n   fun(10);  \n   fun(20,30.5);  \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of a is : 10\nValue of b is : 20\nValue of c is : 30.5\n</code></pre>\n\n\n\n<p>In the above example, template of fun() function is overloaded.</p>\n\n\n\n<h3>Restrictions of Generic Functions</h3>\n\n\n\n<p>Generic functions perform the same operation for all the versions of a function except the data type differs. Let&#8217;s see a simple example of an overloaded function which cannot be replaced by the generic function as both the functions have different functionalities.</p>\n\n\n\n<p><strong>Let&#8217;s understand this through a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nvoid fun(double a)  \n{  \n    cout&lt;&lt;\"value of a is : \"&lt;&lt;a&lt;&lt;'\\n';  \n}  \n  \nvoid fun(int b)  \n{  \n    if(b%2==0)  \n    {  \n        cout&lt;&lt;\"Number is even\";  \n    }  \n    else  \n    {  \n        cout&lt;&lt;\"Number is odd\";  \n    }  \n  \n}  \n  \nint main()  \n{  \n   fun(4.6);  \n   fun(6);  \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of a is : 4.6\nNumber is even\n</code></pre>\n\n\n\n<p>In the above example, we overload the ordinary functions. We cannot overload the generic functions as both the functions have different functionalities. First one is displaying the value and the second one determines whether the number is even or not.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>CLASS TEMPLATE</h2>\n\n\n\n<p><strong>Class Template</strong>&nbsp;can also be defined similarly to the Function Template. When a class uses the concept of Template, then the class is known as generic class.</p>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<p><strong>Ttype</strong>&nbsp;is a placeholder name which will be determined when the class is instantiated. We can define more than one generic data type using a comma-separated list. The Ttype can be used inside the class body.</p>\n\n\n\n<p>Now, we create an instance of a class</p>\n\n\n\n<ol><li>class_name&lt;type&gt;&nbsp;ob;&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>where class_name</strong>: It is the name of the class.</p>\n\n\n\n<p><strong>type</strong>: It is the type of the data that the class is operating on.</p>\n\n\n\n<p><strong>ob</strong>: It is the name of the object.</p>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \ntemplate&lt;class T>  \nclass A   \n{  \n    public:  \n    T num1 = 5;  \n    T num2 = 6;  \n    void add()  \n    {  \n        std::cout &lt;&lt; \"Addition of num1 and num2 : \" &lt;&lt; num1+num2&lt;&lt;std::endl;  \n    }  \n      \n};  \n  \nint main()  \n{  \n    A&lt;int> d;  \n    d.add();  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Addition of num1 and num2 : 11\n</code></pre>\n\n\n\n<p>In the above example, we create a template for class A. Inside the main() method, we create the instance of class A named as, &#8216;d&#8217;.</p>\n\n\n\n<h3>CLASS TEMPLATE WITH MULTIPLE PARAMETERS</h3>\n\n\n\n<p>We can use more than one generic data type in a class template, and each generic data type is separated by the comma.</p>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>template&lt;class T1, class T2, ......>   \nclass class_name  \n{  \n   // Body of the class.  \n}  </code></pre>\n\n\n\n<p><strong>Let&#8217;s see a simple example when class template contains two generic data types.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n     using namespace std;  \n     template&lt;class T1, class T2>  \n    class A   \n    {  \n         T1 a;  \n         T2 b;  \n         public:  \n        A(T1 x,T2 y)  \n       {  \n           a = x;  \n           b = y;  \n        }  \n           void display()  \n          {  \n                 std::cout &lt;&lt; \"Values of a and b are : \" &lt;&lt; a&lt;&lt;\" ,\"&lt;&lt;b&lt;&lt;std::endl;  \n           }  \n      };  \n  \n      int main()  \n     {  \n           A&lt;int,float> d(5,6.5);  \n           d.display();  \n           return 0;  \n     }  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Values of a and b are : 5,6.5\n</code></pre>\n\n\n\n<h3>Nontype Template Arguments</h3>\n\n\n\n<p>The template can contain multiple arguments, and we can also use the non-type arguments In addition to the type T argument, we can also use other types of arguments such as strings, function names, constant expression and built-in types. <strong>Let&#8217; s see the following example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>template&lt;class T, int size>  \nclass array  \n{  \n        T arr&#91;size];           // automatic array initialization.  \n};  </code></pre>\n\n\n\n<p>In the above case, the nontype template argument is size and therefore, template supplies the size of the array as an argument.</p>\n\n\n\n<p>Arguments are specified when the objects of a class are created:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>array&lt;int, 15> t1;                        // array of 15 integers.  \narray&lt;float, 10> t2;                    // array of 10 floats.   \narray&lt;char, 4> t3;                      // array of 4 chars.       </code></pre>\n\n\n\n<p>Let&#8217;s see a simple example of nontype template arguments.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \ntemplate&lt;class T, int size>  \nclass A   \n{  \n    public:  \n    T arr&#91;size];  \n    void insert()  \n    {  \n        int i =1;  \n        for (int j=0;j&lt;size;j++)  \n        {  \n            arr&#91;j] = i;  \n            i++;  \n        }  \n    }  \n      \n    void display()  \n    {  \n        for(int i=0;i&lt;size;i++)  \n        {  \n            std::cout &lt;&lt; arr&#91;i] &lt;&lt; \" \";  \n        }  \n    }  \n};  \nint main()  \n{  \n    A&lt;int,10> t1;  \n    t1.insert();  \n    t1.display();  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 2 3 4 5 6 7 8 9 10\n</code></pre>\n\n\n\n<p>In the above example, the class template is created which contains the nontype template argument, i.e., size. It is specified when the object of class &#8216;A&#8217; is created.</p>\n\n\n\n<p><strong>Points to Remember</strong></p>\n\n\n\n<ul><li>C++ supports a powerful feature known as a template to implement the concept of generic programming.</li><li>A template allows us to create a family of classes or family of functions to handle different data types.</li><li>Template classes and functions eliminate the code duplication of different data types and thus makes the development easier and faster.</li><li>Multiple parameters can be used in both class and function template.</li><li>Template functions can also be overloaded.</li><li>We can also use nontype arguments such as built-in or derived data types as template arguments.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A C++ template is a powerful feature added to C++. It allows you to define the generic classes and generic functions and thus provides support for generic programming. Generic programming is a technique where generic types are used as parameters in algorithms so that they can work for a variety of data types. Templates can [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/951"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=951"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/951/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4479,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/951/revisions/4479"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=951"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=951"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=951"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 952,
    "date": "2020-08-26T07:34:37",
    "date_gmt": "2020-08-26T07:34:37",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=139"
    },
    "modified": "2021-02-15T10:43:27",
    "modified_gmt": "2021-02-15T10:43:27",
    "slug": "c-signal-handling",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-signal-handling/",
    "title": {
      "rendered": "C++ Signal Handling"
    },
    "content": {
      "rendered": "\n<ul><li>Signals are the interrupts which are delivered to a process by the operating system to stop its ongoing task and attend the task for which the interrupt has been generated.</li><li>Signals can also be generated by the operating system on the basis of system or error condition.</li><li>You can generate interrupts by pressing Ctrl+&nbsp;<a href=\"https://www.javatpoint.com/c-programming-language-tutorial\">C</a>&nbsp;on&nbsp;<a href=\"https://www.javatpoint.com/linux-tutorial\">Linux</a>, UNIX, Mac&nbsp;<a href=\"https://www.javatpoint.com/os-tutorial\">OS</a>&nbsp;X, or Windows system.</li></ul>\n\n\n\n<p>There are signals which cannot be caught by the program but there is a following list of signals which you can catch in your program and can take appropriate actions based on the signal.</p>\n\n\n\n<p>These signals are defined in &lt;csingnal&gt; header file.</p>\n\n\n\n<p>Here are the list of signals along with their description and working capability:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Signals</th><th>Description</th></tr><tr><td>SIGABRT</td><td>(Signal Abort) Abnormal termination of the program, such as a call to abort.</td></tr><tr><td>SIGFPE</td><td>(Signal floating- point exception) An erroneous arithmetic operation, such as a divide by zero or an operation resulting in overflow.</td></tr><tr><td>SIGILL</td><td>(Signal Illegal Instruction) It is used for detecting an illegal instruction.</td></tr><tr><td>SIGINT</td><td>(Signal Interrupt) It is used to receipt an interactive program interrupt signal.</td></tr><tr><td>SIGSEGV</td><td>(Signal segmentation Violation) An invalid access to storage.</td></tr><tr><td>SIGTERM</td><td>(Signal Termination) A termination request sent to the program.</td></tr><tr><td>SIGHUP</td><td>(Signal Hang up) Hang Up (POSIX), its report that user&#8217;s terminal is disconnected. It is used to report the termination of the controlling process.</td></tr><tr><td>SIGQUIT</td><td>Used to terminate a process and generate a core dump.</td></tr><tr><td>SIGTRAP</td><td>Trace trap.</td></tr><tr><td>SIGBUS</td><td>This is a BUS error which indicates an access to an invalid address.</td></tr><tr><td>SIGUSR1</td><td>User defined signal 1.</td></tr><tr><td>SIGUSR2</td><td>User defined signal 2.</td></tr><tr><td>SIGALRM</td><td>Alarm clock, which indicates an access to an invalid address.</td></tr><tr><td>SIGTERM</td><td>Used for termination. This signal can be blocked, handled, and ignored. Generated by kill command.</td></tr><tr><td>SIGCOUNT</td><td>This signal sent to process to make it continue.</td></tr><tr><td>SIGSTOP</td><td>Stop, unblockable. This signal is used to stop a process. This signal cannot be handled, ignored or blocked.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>The signal() Function</h2>\n\n\n\n<p><a href=\"https://www.javatpoint.com/cpp-tutorial\">C++</a>&nbsp;signal-handling library provides function signal to trap unexpected interrupts or events.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>void (*signal (int sig, void (*func)(int)))(int);  </code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p>This function is set to handle the signal.</p>\n\n\n\n<p>It specifies a way to handle the signals number specified by&nbsp;<strong><em>sig</em></strong>.</p>\n\n\n\n<p>Parameter&nbsp;<strong><em>func</em></strong>&nbsp;specifies one of the three ways in which a signal can be handled by a program.</p>\n\n\n\n<ul><li><strong>Default handling (SIG_DFL):</strong>&nbsp;The signal handled by the default action for that particular signal.</li><li><strong>Ignore Signal (SIG_IGN):</strong>&nbsp;The signal is ignored and the code execution will continue even if not purposeful.</li><li><strong>Function handler:</strong>&nbsp;A particular function is defined to handle the signal.</li></ul>\n\n\n\n<p>We must keep in mind that the signal that we would like to catch must be registered using a signal function and it must be associated with a signal handling function.</p>\n\n\n\n<h4>Note: The signal handling function should be of the void type.</h4>\n\n\n\n<h3>Return value</h3>\n\n\n\n<p>The return type of this function is the same as the type of parameter func.</p>\n\n\n\n<p>If the request of this function is successful, the function returns a pointer to the particular handler function which was in charge of handling this signal before the call, if any.</p>\n\n\n\n<h3>Data Races</h3>\n\n\n\n<p>Data race is undefined. If you call this function in a multi- threaded program then it will cause undefined behavior.</p>\n\n\n\n<h3>Exceptions</h3>\n\n\n\n<p>This function never throws exception.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Let&#8217;s see a simple example to demonstrate the use of signal() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;csignal>  \n   \nusing namespace std;  \n  \nsig_atomic_t signalled = 0;  \n  \nvoid handler(int sig)  \n{  \n    signalled = 1;  \n}  \n  \nint main()  \n{  \n    signal(SIGINT, handler);  \n      \n    raise(SIGINT);  \n    if (signalled)  \n        cout &lt;&lt; \"Signal is handled\";  \n    else  \n        cout &lt;&lt; \"Signal is not handled\";  \n  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Signal is handled\n</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Let&#8217;s see another simple example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;csignal>  \n#include &lt;iostream>  \n   \nnamespace  \n{  \n  volatile std::sig_atomic_t gSignalStatus;  \n}  \n   \nvoid signal_handler(int signal)  \n{  \n  gSignalStatus = signal;  \n}  \n   \nint main()  \n{  \n  // Install a signal handler  \n  std::signal(SIGINT, signal_handler);  \n   \n  std::cout &lt;&lt; \"SignalValue: \" &lt;&lt; gSignalStatus &lt;&lt; '\\n';  \n  std::cout &lt;&lt; \"Sending signal \" &lt;&lt; SIGINT &lt;&lt; '\\n';  \n  std::raise(SIGINT);  \n  std::cout &lt;&lt; \"SignalValue: \" &lt;&lt; gSignalStatus &lt;&lt; '\\n';  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>SignalValue: 0\nSending signal 2\nSignalValue: 2\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>The raise() Function</h2>\n\n\n\n<p>The C++ signal raise() function is used to send signals to the current executing program.</p>\n\n\n\n<p><strong>&lt;csignal></strong> header file declared the function raise() to handle a particular signal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int raise (int sig);</code></pre>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p><strong>sig:</strong> The signal number to be sent for handling. It can take one of the following values:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>SIGINT\nSIGABRT\nSIGFPE\nSIGILL\nSIGSEGV\nSIGTERM\nSIGHUP</code></pre>\n\n\n\n<h3>Return value</h3>\n\n\n\n<p>On success, it returns 0 and on failure, a non-zero is returned.</p>\n\n\n\n<h3>Data Races</h3>\n\n\n\n<p>Concurrently calling this function is safe, causing no data races.</p>\n\n\n\n<h3>Exceptions</h3>\n\n\n\n<p>This function never throws exceptions, if no function handlers have been defined with signal to handle the raised signal.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<p>Let&#8217;s see a simple example to illustrate the use of raise() function when SIGABRT is passed:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;csignal>  \n   \nusing namespace std;  \n  \nsig_atomic_t sig_value = 0;  \n  \nvoid handler(int sig)  \n{  \n    sig_value = sig;  \n}  \n  \nint main()  \n{  \n    signal(SIGABRT, handler);  \n    cout &lt;&lt; \"Before signal handler is called\" &lt;&lt; endl;  \n    cout &lt;&lt; \"Signal = \" &lt;&lt; sig_value &lt;&lt; endl;   \n    raise(SIGABRT);  \n    cout &lt;&lt; \"After signal handler is called\" &lt;&lt; endl;  \n    cout &lt;&lt; \"Signal = \" &lt;&lt; sig_value &lt;&lt; endl;  \n  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before signal handler is called\nSignal = 0\nAfter signal handler is called\nSignal = 6\n</code></pre>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<p>Let&#8217;s see a simple example to illustrate the use of raise() function when SIGINT is passed:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;csignal>   \n#include &lt;iostream>   \nusing namespace std;   \n    \nsig_atomic_t s_value = 0;   \nvoid handle(int signal_)   \n{   \n    s_value = signal_;   \n}   \n    \nint main()   \n{   \n    signal(SIGINT, handle);   \n    cout &lt;&lt; \"Before called Signal = \" &lt;&lt; s_value &lt;&lt; endl;   \n    raise(SIGINT);   \n    cout &lt;&lt; \"After called Signal = \" &lt;&lt; s_value &lt;&lt; endl;   \n    return 0;   \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before called Signal = 0\nAfter called Signal = 2\n</code></pre>\n\n\n\n<h3>Example 3</h3>\n\n\n\n<p>Let&#8217;s see a simple example to illustrate the use of raise() function when SIGTERM is passed:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;csignal>   \n#include &lt;iostream>   \nusing namespace std;   \n    \nsig_atomic_t s_value = 0;   \nvoid handle(int signal_)   \n{   \n    s_value = signal_;   \n}   \n    \nint main()   \n{   \n    signal(SIGTERM, handle);   \n    cout &lt;&lt; \"Before called Signal = \" &lt;&lt; s_value &lt;&lt; endl;   \n    raise(SIGTERM);   \n    cout &lt;&lt; \"After called Signal = \" &lt;&lt; s_value &lt;&lt; endl;   \n    return 0;   \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before called Signal = 0\nAfter called Signal = 15\n</code></pre>\n\n\n\n<h3>Example 4</h3>\n\n\n\n<p>Let&#8217;s see a simple example to illustrate the use of raise() function when SIGSEGV is passed:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;csignal>   \n#include &lt;iostream>   \nusing namespace std;   \n    \nsig_atomic_t s_value = 0;   \nvoid handle(int signal_)   \n{   \n    s_value = signal_;   \n}   \n    \nint main()   \n{   \n    signal(SIGSEGV, handle);   \n    cout &lt;&lt; \"Before called Signal = \" &lt;&lt; s_value &lt;&lt; endl;   \n    raise(SIGSEGV);   \n    cout &lt;&lt; \"After called Signal = \" &lt;&lt; s_value &lt;&lt; endl;   \n    return 0;   \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before called Signal = 0\nAfter called Signal = 11\n</code></pre>\n\n\n\n<h3>Example 5</h3>\n\n\n\n<p>Let&#8217;s see a simple example to illustrate the use of raise() function when SIGFPE is passed:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;csignal>   \n#include &lt;iostream>   \nusing namespace std;   \n    \nsig_atomic_t s_value = 0;   \nvoid handle(int signal_)   \n{   \n    s_value = signal_;   \n}   \n    \nint main()   \n{   \n    signal(SIGFPE, handle);   \n    cout &lt;&lt; \"Before called Signal = \" &lt;&lt; s_value &lt;&lt; endl;   \n    raise(SIGFPE);   \n    cout &lt;&lt; \"After called Signal = \" &lt;&lt; s_value &lt;&lt; endl;   \n    return 0;   \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before called Signal = 0\nAfter called Signal = 8</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Signals are the interrupts which are delivered to a process by the operating system to stop its ongoing task and attend the task for which the interrupt has been generated. Signals can also be generated by the operating system on the basis of system or error condition. You can generate interrupts by pressing Ctrl+&nbsp;C&nbsp;on&nbsp;Linux, UNIX, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/952"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=952"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/952/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4478,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/952/revisions/4478"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=952"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=952"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=952"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 953,
    "date": "2020-08-26T07:36:37",
    "date_gmt": "2020-08-26T07:36:37",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=141"
    },
    "modified": "2021-02-15T10:43:44",
    "modified_gmt": "2021-02-15T10:43:44",
    "slug": "c-files-and-streams",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-files-and-streams/",
    "title": {
      "rendered": "C++ Files and Streams"
    },
    "content": {
      "rendered": "\n<p>In&nbsp;<a href=\"https://www.javatpoint.com/cpp-tutorial\">C++ programming</a>&nbsp;we are using the&nbsp;<strong>iostream</strong>&nbsp;standard library, it provides&nbsp;<strong>cin</strong>&nbsp;and&nbsp;<strong>cout</strong>&nbsp;methods for reading from input and writing to output respectively.</p>\n\n\n\n<p>To read and write from a file we are using the standard C++ library called&nbsp;<strong>fstream</strong>. Let us see the data types define in fstream library is:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Data Type</th><th>Description</th></tr><tr><td>fstream</td><td>It is used to create files, write information to files, and read information from files.</td></tr><tr><td>ifstream</td><td>It is used to read information from files.</td></tr><tr><td>ofstream</td><td>It is used to create files and write information to the files.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ FileStream example: writing to a file</h2>\n\n\n\n<p>Let&#8217;s see the simple example of writing to a text file <strong>testout.txt</strong> using C++ FileStream programming.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;fstream>  \nusing namespace std;  \nint main () {  \n  ofstream filestream(\"testout.txt\");  \n  if (filestream.is_open())  \n  {  \n    filestream &lt;&lt; \"Welcome to javaTpoint.\\n\";  \n    filestream &lt;&lt; \"C++ Tutorial.\\n\";  \n    filestream.close();  \n  }  \n  else cout &lt;&lt;\"File opening is fail.\";  \n  return 0;  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The content of a text file &lt;strong>testout.txt&lt;/strong> is set with the data:\nWelcome to javaTpoint.\nC++ Tutorial.\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ FileStream example: reading from a file</h2>\n\n\n\n<p>Let&#8217;s see the simple example of reading from a text file <strong>testout.txt</strong> using C++ FileStream programming.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;fstream>  \nusing namespace std;  \nint main () {  \n  string srg;  \n  ifstream filestream(\"testout.txt\");  \n  if (filestream.is_open())  \n  {  \n    while ( getline (filestream,srg) )  \n    {  \n      cout &lt;&lt; srg &lt;&lt;endl;  \n    }  \n    filestream.close();  \n  }  \n  else {  \n      cout &lt;&lt; \"File opening is fail.\"&lt;&lt;endl;   \n    }  \n  return 0;  \n}  </code></pre>\n\n\n\n<h4>Note: Before running the code a text file named as&nbsp;<strong>&#8220;testout.txt&#8221;</strong>&nbsp;is need to be created and the content of a text file is given below:<br>Welcome to javaTpoint.<br>C++ Tutorial.</h4>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to javaTpoint.\nC++ Tutorial.\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>C++ Read and Write Example</h2>\n\n\n\n<p>Let&#8217;s see the simple example of writing the data to a text file <strong>testout.txt</strong> and then reading the data from the file using C++ FileStream programming.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;fstream>  \n#include &lt;iostream>  \nusing namespace std;  \nint main () {  \n   char input&#91;75];  \n   ofstream os;  \n   os.open(\"testout.txt\");  \n   cout &lt;&lt;\"Writing to a text file:\" &lt;&lt; endl;  \n   cout &lt;&lt; \"Please Enter your name: \";   \n   cin.getline(input, 100);  \n   os &lt;&lt; input &lt;&lt; endl;  \n   cout &lt;&lt; \"Please Enter your age: \";   \n   cin >> input;  \n   cin.ignore();  \n   os &lt;&lt; input &lt;&lt; endl;  \n   os.close();  \n   ifstream is;   \n   string line;  \n   is.open(\"testout.txt\");   \n   cout &lt;&lt; \"Reading from a text file:\" &lt;&lt; endl;   \n   while (getline (is,line))  \n   {  \n   cout &lt;&lt; line &lt;&lt; endl;  \n   }      \n   is.close();  \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Writing to a text file:  \n Please Enter your name: Nakul Jain    \nPlease Enter your age: 22  \n Reading from a text file:   Nakul Jain  \n 22</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In&nbsp;C++ programming&nbsp;we are using the&nbsp;iostream&nbsp;standard library, it provides&nbsp;cin&nbsp;and&nbsp;cout&nbsp;methods for reading from input and writing to output respectively. To read and write from a file we are using the standard C++ library called&nbsp;fstream. Let us see the data types define in fstream library is: Data Type Description fstream It is used to create files, write information [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/953"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=953"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/953/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4477,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/953/revisions/4477"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=953"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=953"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=953"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 954,
    "date": "2020-08-26T07:38:20",
    "date_gmt": "2020-08-26T07:38:20",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=143"
    },
    "modified": "2021-02-15T10:43:55",
    "modified_gmt": "2021-02-15T10:43:55",
    "slug": "c-getline",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-getline/",
    "title": {
      "rendered": "C++ getline()"
    },
    "content": {
      "rendered": "\n<p>The cin is an object which is used to take input from the user but does not allow to take the input in multiple lines. To accept the multiple lines, we use the getline() function. It is a pre-defined function defined in a&nbsp;<strong>&lt;string.h&gt;</strong>&nbsp;header file used to accept a line or a string from the input stream until the delimiting character is encountered.</p>\n\n\n\n<h3>Syntax of getline() function:</h3>\n\n\n\n<p><strong>There are two ways of representing a function:</strong></p>\n\n\n\n<ul><li>The first way of declaring is to pass three parameters.</li></ul>\n\n\n\n<ol><li>istream&amp;&nbsp;getline(&nbsp;istream&amp;&nbsp;is,&nbsp;string&amp;&nbsp;str,&nbsp;<strong>char</strong>&nbsp;delim&nbsp;);&nbsp;&nbsp;</li></ol>\n\n\n\n<p>The above syntax contains three parameters, i.e.,&nbsp;<strong>is, str</strong>, and&nbsp;<strong>delim</strong>.</p>\n\n\n\n<p><strong>Where,</strong></p>\n\n\n\n<p><strong>is:</strong>&nbsp;It is an object of the istream class that defines from where to read the input stream.</p>\n\n\n\n<p><strong>str:</strong>&nbsp;It is a string object in which string is stored.<strong>delim:</strong>&nbsp;It is the delimiting character.</p>\n\n\n\n<p><strong>Return value</strong></p>\n\n\n\n<p>This function returns the input stream object, which is passed as a parameter to the function.</p>\n\n\n\n<ul><li>The second way of declaring is to pass two parameters.</li></ul>\n\n\n\n<ol><li>istream&amp;&nbsp;getline(&nbsp;istream&amp;&nbsp;is,&nbsp;string&amp;&nbsp;str&nbsp;);&nbsp;&nbsp;</li></ol>\n\n\n\n<p>The above syntax contains two parameters, i.e.,&nbsp;<strong>is</strong>&nbsp;and&nbsp;<strong>str</strong>. This syntax is almost similar to the above syntax; the only difference is that it does not have any delimiting character.</p>\n\n\n\n<p><strong>Where,</strong></p>\n\n\n\n<p><strong>is:</strong>&nbsp;It is an object of the istream class that defines from where to read the input stream.</p>\n\n\n\n<p><strong>str:</strong>&nbsp;It is a string object in which string is stored.</p>\n\n\n\n<p><strong>Return value</strong></p>\n\n\n\n<p>This function also returns the input stream, which is passed as a parameter to the function.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<p>First, we will look at an example where we take the user input without using getline() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;string.h>  \nusing namespace std;  \nint main()  \n{  \nstring name; // variable declaration  \nstd::cout &lt;&lt; \"Enter your name :\" &lt;&lt; std::endl;  \ncin>>name;  \ncout&lt;&lt;\"\\nHello \"&lt;&lt;name;  \nreturn 0;  \n}  </code></pre>\n\n\n\n<p>In the above code, we take the user input by using the statement&nbsp;<strong>cin&gt;&gt;name,</strong>&nbsp;i.e., we have not used the&nbsp;<strong>getline()</strong>&nbsp;function.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter your name : \nJohn Miller \nHello John\n</code></pre>\n\n\n\n<p>In the above output, we gave the name &#8216;John Miller&#8217; as user input, but only &#8216;John&#8217; was displayed. Therefore, we conclude that cin does not consider the character when the space character is encountered.</p>\n\n\n\n<p><strong>Let&#8217;s resolve the above problem by using getline() function.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;string.h>  \nusing namespace std;  \nint main()  \n{  \nstring name; // variable declaration.  \nstd::cout &lt;&lt; \"Enter your name :\" &lt;&lt; std::endl;  \ngetline(cin,name); // implementing a getline() function  \ncout&lt;&lt;\"\\nHello \"&lt;&lt;name;  \nreturn 0;} </code></pre>\n\n\n\n<p>In the above code, we have used the&nbsp;<strong>getline()</strong>&nbsp;function to accept the character even when the space character is encountered.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter your name : \nJohn Miller \nHello John Miller\n</code></pre>\n\n\n\n<p>In the above output, we can observe that both the words, i.e., John and Miller, are displayed, which means that the getline() function considers the character after the space character also.</p>\n\n\n\n<p><strong>When we do not want to read the character after space then we use the following code:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;string.h>  \nusing namespace std;  \nint main()  \n{  \nstring profile; // variable declaration  \nstd::cout &lt;&lt; \"Enter your profile :\" &lt;&lt; std::endl;  \ngetline(cin,profile,' '); // implementing getline() function with a delimiting character.  \ncout&lt;&lt;\"\\nProfile is :\"&lt;&lt;profile;  \n}  </code></pre>\n\n\n\n<p>In the above code, we take the user input by using getline() function, but this time we also add the delimiting character(&#8221;) in a third parameter. Here, delimiting character is a space character, means the character that appears after space will not be considered.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter your profile : \nSoftware Developer \nProfile is: Software \n</code></pre>\n\n\n\n<h3>Getline Character Array</h3>\n\n\n\n<p>We can also define the getline() function for character array, but its syntax is different from the previous one.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>istream&amp; getline(char* , int size); </code></pre>\n\n\n\n<p>In the above syntax, there are two parameters; one is&nbsp;<strong>char</strong>*, and the other is&nbsp;<strong>size</strong>.</p>\n\n\n\n<p><strong>Where,</strong></p>\n\n\n\n<p><strong>char*:</strong>&nbsp;It is a character pointer that points to the array.</p>\n\n\n\n<p><strong>Size:</strong>&nbsp;It acts as a delimiter that defines the size of the array means input cannot cross this size.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;string.h>  \nusing namespace std;  \nint main()  \n{  \nchar fruits&#91;50]; // array declaration  \ncout&lt;&lt; \"Enter your favorite fruit: \";  \ncin.getline(fruits, 50); // implementing getline() function  \nstd::cout &lt;&lt; \"\\nYour favorite fruit is :\"&lt;&lt;fruits &lt;&lt; std::endl;  \nreturn 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter your favorite fruit: Watermelon \nYour favorite fruit is: Watermelon </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The cin is an object which is used to take input from the user but does not allow to take the input in multiple lines. To accept the multiple lines, we use the getline() function. It is a pre-defined function defined in a&nbsp;&lt;string.h&gt;&nbsp;header file used to accept a line or a string from the input [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/954"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=954"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/954/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4476,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/954/revisions/4476"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=954"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=954"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=954"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 955,
    "date": "2020-08-26T07:39:02",
    "date_gmt": "2020-08-26T07:39:02",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=145"
    },
    "modified": "2021-02-15T10:44:03",
    "modified_gmt": "2021-02-15T10:44:03",
    "slug": "c-vs-c-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-vs-c-2/",
    "title": {
      "rendered": "C++ vs C#"
    },
    "content": {
      "rendered": "\n<p>The following are the differences between C++ and C#:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-vs-c-sharp.png\" alt=\"C++ vs C#\"/></figure>\n\n\n\n<ul><li><strong>Type of language</strong><br>C++ is a low-level language, while C# is a high-level language.</li><li><strong>Lightweight language</strong><br>C++ is a lightweight language as compared to C# language as the libraries of C# language need to be included before compilation due to which size of binaries in C# language is more than C++ language.</li><li><strong>Performance</strong><br>C++ code runs faster than the C# code and makes a better solution for those applications that require higher performance.</li><li><strong>Garbage Collection</strong><br>C# provides the automatic garbage collection while C++ does not provide the automatic garbage collection, i.e., the objects are allocated or deallocated manually.</li><li><strong>Platform dependency</strong><br>C# language is a standardized language so it works only on Windows operating system while C++ supports all the platforms such as Windows, Unix, Linux, Mac, etc.</li><li><strong>Types of projects</strong><br>C++ language mainly works on those applications that communicate directly with the hardware while C# language is mainly used for mobile, web, desktop or gaming applications.</li><li><strong>Compiler warnings</strong><br>C++ allows you to do everything if the syntax is correct, but sometimes cause real damage to the operating system. C# language is a much-protected language as compiler gives errors and warnings without allowing you to create serious damage.</li><li><strong>Compilation</strong><br>C++ code is compiled to machine code C# code compiles to CLR(Common Language Runtime) which is interpreted by the JIT(Just In Time) compiler.</li><li><strong>Multiple Inheritance</strong><br>C++ language supports multiple inheritances, while C# language does not support the multiple inheritances.</li><li><strong>Level of Difficulty</strong><br>C++ language contains more complex features than C# language while C# language is a simple hierarchy which is quite easy to understand.</li><li><strong>Default access specifier</strong><br>In C++, the default access specifier is public while in C#, the default access specifier is private.</li><li><strong>Object Oriented</strong><br>C++ language is not a complete object-oriented language while C# language is a pure object-oriented programming language.</li><li><strong>Bound checking</strong><br>C++ language does not support the bound checking for arrays while C# language supports the bound checking for arrays.</li><li><strong>For each loop</strong><br>C++ language does not support the for each loop while C# language supports the for each loop.</li><li><strong>Use of pointers</strong><br>In C++, we can use the pointers anywhere in the program while in C# language, pointers are used in the unsafe area.</li><li><strong>Switch statement</strong><br>In C++, string variable cannot be passed in the switch statement, but in C# language, string variable can be passed in the switch statement.</li><li><strong>Standalone applications</strong><br>C++ language can be used to develop standalone applications, but C# language cannot be used to develop standalone applications.</li></ul>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The following are the differences between C++ and C#: Type of languageC++ is a low-level language, while C# is a high-level language. Lightweight languageC++ is a lightweight language as compared to C# language as the libraries of C# language need to be included before compilation due to which size of binaries in C# language is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/955"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=955"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/955/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4475,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/955/revisions/4475"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=955"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=955"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=955"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 956,
    "date": "2020-08-26T07:40:35",
    "date_gmt": "2020-08-26T07:40:35",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=147"
    },
    "modified": "2021-02-15T10:44:11",
    "modified_gmt": "2021-02-15T10:44:11",
    "slug": "c-int-to-string",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-int-to-string/",
    "title": {
      "rendered": "C++ int to string"
    },
    "content": {
      "rendered": "\n<p><strong>There are three ways of converting an integer into a string:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-int-to-string.png\" alt=\"C++ int to string\"/></figure>\n\n\n\n<ul><li><strong>By using stringstream class</strong></li><li><strong>By using to_string() method</strong></li><li><strong>By using boost.lexical cast</strong></li></ul>\n\n\n\n<h3>Conversion of an integer into a string by using stringstream class.</h3>\n\n\n\n<p>The stringstream class is a stream class defined in the&nbsp;header file. It is a stream class used to perform the input-output operations on string-based streams.</p>\n\n\n\n<p><strong>The following are the operators used to insert or extract the data:</strong></p>\n\n\n\n<ul><li><strong>Operator &gt;&gt;:</strong>&nbsp;It extracts the data from the stream.</li><li><strong>Operator &lt;&lt;:</strong>&nbsp;It inserts the data into the stream.</li></ul>\n\n\n\n<p><strong>Let&#8217;s understand the concept of operators through an example.</strong></p>\n\n\n\n<ul><li><strong>In the below statement, the &lt;&lt; insertion operator inserts the 100 into the stream.</strong><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stream1 &lt;&lt; 100;</li><li><strong>In the below statement, the &gt;&gt; extraction operator extracts the data out of the stream and stores it in &#8216;i&#8217; variable.</strong><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; stream1 &gt;&gt; i;</li></ul>\n\n\n\n<p>Let&#8217;s understand through an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;sstream>  \nusing namespace std;  \nint main() {  \n  int k;  \n  cout&lt;&lt;\"Enter an integer value\";  \n  cin>>k;  \n  stringstream ss;  \n  ss&lt;&lt;k;  \n  string s;  \n  ss>>s;  \n  cout&lt;&lt;\"\\n\"&lt;&lt;\"An integer value is : \"&lt;&lt;k&lt;&lt;\"\\n\";  \n  cout&lt;&lt;\"String representation of an integer value is : \"&lt;&lt;s;   \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-int-to-string2.png\" alt=\"C++ int to string\"/></figure>\n\n\n\n<p>In the above example, we created the&nbsp;<strong>k</strong>&nbsp;variable, and want to convert the value of k into a string value. We have used the stringstream class, which is used to convert the k integer value into a string value. We can also achieve in vice versa, i.e., conversion of string into an integer value is also possible through the use of stringstream class only.</p>\n\n\n\n<p><strong>Let&#8217;s understand the concept of conversion of string into number through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;sstream>  \nusing namespace std;  \nint main()  \n{  \n  string number =\"100\";  \n  stringstream ss;  \n  ss&lt;&lt;number;  \n  int i;  \n  ss>>i;  \n  cout&lt;&lt;\"The value of the string is : \"&lt;&lt;number&lt;&lt;\"\\n\";  \n  cout&lt;&lt;\"Integer value of the string is : \"&lt;&lt;i;  \n  \n} </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-int-to-string3.png\" alt=\"C++ int to string\"/></figure>\n\n\n\n<h3>Conversion of an integer into a string by using to_string() method.</h3>\n\n\n\n<p>The&nbsp;<strong>to_string()</strong>&nbsp;method accepts a single integer and converts the integer value or other data type value into a string.</p>\n\n\n\n<p><strong>Let&#8217;s understand through an example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;string>  \nusing namespace std;  \nint main()  \n{  \n int i=11;  \n float f=12.3;  \nstring str= to_string(i);  \nstring str1= to_string(f);  \ncout&lt;&lt;\"string value of integer i is :\"&lt;&lt;str&lt;&lt;\"\\n\";  \ncout&lt;&lt;\"string value of f is : \"&lt;&lt; str1;  \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-int-to-string4.png\" alt=\"C++ int to string\"/></figure>\n\n\n\n<h3>Conversion of an integer into a string by using a boost.lexical cast.</h3>\n\n\n\n<p>The boost.lexical cast provides a cast operator, i.e., boost.lexical_cast which converts the string value into an integer value or other data type value vice versa.</p>\n\n\n\n<p><strong>Let&#8217;s understand the conversion of integer into string through an example.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;boost/lexical_cast.hpp>  \nusing namespace std;  \nint main()  \n{  \n int i=11;  \n string str = boost::lexical_cast&lt;string>(i);  \ncout&lt;&lt;\"string value of integer i is :\"&lt;&lt;str&lt;&lt;\"\\n\";  \n  \n}</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-int-to-string5.png\" alt=\"C++ int to string\"/></figure>\n\n\n\n<p>In the above example, we have converted the value of &#8216;i&#8217; variable into a string value by using lexical_cast() function.</p>\n\n\n\n<p>Let&#8217;s understand the conversion of string into integer through an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;boost/lexical_cast.hpp>  \nusing namespace std;  \nint main()  \n{  \nstring s=\"1234\";  \n int k = boost::lexical_cast&lt;int>(s);  \ncout&lt;&lt;\"Integer value of string s is : \"&lt;&lt;k&lt;&lt;\"\\n\";  \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-int-to-string6.png\" alt=\"C++ int to string\"/></figure>\n\n\n\n<p>In the above example, we have converted the string value into an integer value by using lexical_cast() function.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are three ways of converting an integer into a string: By using stringstream class By using to_string() method By using boost.lexical cast Conversion of an integer into a string by using stringstream class. The stringstream class is a stream class defined in the&nbsp;header file. It is a stream class used to perform the input-output [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/956"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=956"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/956/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4474,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/956/revisions/4474"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=956"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=956"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=956"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 957,
    "date": "2020-08-26T07:41:40",
    "date_gmt": "2020-08-26T07:41:40",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=149"
    },
    "modified": "2021-02-15T10:44:19",
    "modified_gmt": "2021-02-15T10:44:19",
    "slug": "c-vs-python",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-vs-python/",
    "title": {
      "rendered": "C++ vs Python"
    },
    "content": {
      "rendered": "\n<h3>What is C++?</h3>\n\n\n\n<p>C++ is a high-level and general-purpose programming language developed by Bjarne Stroustrup in 1979. It is an extension C programming language, i.e., C with classes. The concept of object-oriented programming was first introduced in the C++ language. C++ is also known as an object-oriented programming language.</p>\n\n\n\n<p>It was designed for system programming and embedded system, but later on, it was used in developing various applications such as desktop applications, video games, servers such as e-commerce, Web search or SQL servers and performance-critical applications such as telephone switches.</p>\n\n\n\n<h3>What is Python?</h3>\n\n\n\n<p>Python is a general-purpose and high-level programming language developed by Guido van Rossum in 1991. The main aim of developing python language was its simplicity. It contains features like indentation, which makes the code more readable, and it also contains library functions that make this language more powerful.</p>\n\n\n\n<p>It is declared as a top language in IEEE&#8217;s 2018 Top Programming Languages. Due to its popularity and simplicity makes python more powerful in the industry.</p>\n\n\n\n<h3>Differences b/w C++ and Python</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-vs-python.gif\" alt=\"C++ vs Python\"/></figure>\n\n\n\n<h3>Definition</h3>\n\n\n\n<p>C++ is a high-level and object-oriented programming language that allows you to do procedural programming, which is very close to CPU and provides full control over the hardware.</p>\n\n\n\n<p>Python is an interpreted, high-level, and general-purpose programming language used to develop all types of projects.</p>\n\n\n\n<h3>Ease of Learning</h3>\n\n\n\n<p>One of the major factors for beginners is the ease of learning. If the programming language is hard, then it becomes difficult for the programmer to learn. The syntax of python is similar to English. Therefore, it is very easy to learn. On the other hand, C++ is based on the object-oriented concepts that deal with the memory allocation, if we write the wrong program in C++, then that can destroy the system also.</p>\n\n\n\n<h3>Speed</h3>\n\n\n\n<p>C++ is faster than the python programming language. Python is written in the C programming language, so memory management is very difficult in python. In C++, we can allocate the memory to the variables and can deallocate the memory when the variable is no longer used in the code.</p>\n\n\n\n<h3>Memory Management</h3>\n\n\n\n<p>In C++, we need to allocate the memory to the new variables and deallocate the memory whenever the variable is no longer required. If we do not do so, then it can lead to a memory leak. Therefore, we can say that C++ does not provide inbuilt garbage collection and dynamic memory management. On the other hand, python provides the inbuilt garbage collection and dynamic memory management mechanism, i.e., it allocates and deallocates the memory on its own.</p>\n\n\n\n<h3>Compilation</h3>\n\n\n\n<p>Python is an interpreted programming language, so it requires an interpreter at the time of compilation. On the other hand, C++ is a pre-compiled programming language, so it does not need any interpreter at the time of compilation.</p>\n\n\n\n<h3>Readability</h3>\n\n\n\n<p>C++ has a complex syntax, which is difficult to read and write. It follows the programming rules like we need to use the curly brackets and semicolon at the end of the statement. On the other hand, python does not follow these programming rules. It uses the indentation rules, which are similar to the English; this indentation allows the programmer to understand the code more easily.</p>\n\n\n\n<h3>Variable declaration</h3>\n\n\n\n<p>In C++, we need to declare the variable by mentioning the type and name of the variable before using it. Therefore, C++ is a statically typed programming language. On the other hand, python is a dynamically typed programming language, which means that we do not need to declare the variable before using that variable.</p>\n\n\n\n<p><strong>C++ Program</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \nusing namespace std;  \nint main()  \n{  \n    int a=20;  \n    std::cout &lt;&lt; \"value of a is : \" &lt;&lt;a&lt;&lt; std::endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Python Program</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># python program  \n#integer assignment  \na=20  \nprint(a)  </code></pre>\n\n\n\n<p>In the above two programs, the output would be 20. The difference in the above two programs is that in C++, we need to declare the variable with its type, while in python, we do not need to declare the variables.</p>\n\n\n\n<h3>Functions</h3>\n\n\n\n<p>In C++, the function accepts and returns the type of value according to the definition, which is pre-defined. For example, suppose we have a function int add(int a, int b), then this function will accept only integer values as an argument and returns the integer type value. On the other hand, in python, there is no limitation on the type of the argument and type of its return value.</p>\n\n\n\n<p><strong>Let&#8217;s summarize the above differences in a tabular form.</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>C++</th><th>Python</th></tr><tr><td>It is a high-level and pre-compiled programming language that allows you to do procedural programming.</td><td>It is a high-level and interpreted programming language used to develop all types of projects.</td></tr><tr><td>It is not easy to learn because of its complex syntax.</td><td>It is easy to learn, as it does not follow any programming rules. It follows the indentation rules, which is very much similar to English.</td></tr><tr><td>It does not contain a garbage collector.</td><td>It contains the garbage collector.</td></tr><tr><td>It is a pre-compiled programming language, so it does not require an interpreter during compilation.</td><td>It is an interpreted programming language, so it requires an interpreter to run the program.</td></tr><tr><td>It is a statically typed programming language.</td><td>It is a dynamically typed programming language.</td></tr><tr><td>Variable is declared by mentioning the type of the variable.</td><td>It does not require the declaration of a variable.</td></tr><tr><td>The function that accepts the value as an argument and returns the type of the value will depend on the definition of the function.</td><td>The function does not have any restriction on the type of the parameter and the return type.</td></tr><tr><td>Installation is easy.</td><td>It is not easy to install the python on Windows.</td></tr><tr><td>Variables inside the loop are not accessible outside the loop.</td><td>Variables inside the loop are also accessible outside the loop.</td></tr><tr><td>It has long lines of code as compared to Python.</td><td>It contains fewer lines of code compared to C++.</td></tr><tr><td>It supports both procedural and object-oriented programming.</td><td>It supports procedural, object-oriented, and functional programming.</td></tr><tr><td>It contains 52 keywords.</td><td>It contains 33 keywords.</td></tr><tr><td>In C++, the programmer needs to manually allocate the new variable and deallocate when no longer required.</td><td>Python performs the allocation.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is C++? C++ is a high-level and general-purpose programming language developed by Bjarne Stroustrup in 1979. It is an extension C programming language, i.e., C with classes. The concept of object-oriented programming was first introduced in the C++ language. C++ is also known as an object-oriented programming language. It was designed for system programming [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/957"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=957"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/957/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4473,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/957/revisions/4473"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=957"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=957"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=957"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 959,
    "date": "2020-08-26T07:45:03",
    "date_gmt": "2020-08-26T07:45:03",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=153"
    },
    "modified": "2021-02-15T10:20:51",
    "modified_gmt": "2021-02-15T10:20:51",
    "slug": "c-vector",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-vector/",
    "title": {
      "rendered": "C++ Vector"
    },
    "content": {
      "rendered": "\n<p>A vector is a sequence container class that implements dynamic array, means size automatically changes when appending elements. A vector stores the elements in contiguous memory locations and allocates the memory as needed at run time.</p>\n\n\n\n<h2>Difference between vector and array</h2>\n\n\n\n<p>An array follows static approach, means its size cannot be changed during run time while vector implements dynamic array means it automatically resizes itself when appending elements.</p>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<p>Consider a vector &#8216;v1&#8217;. Syntax would be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>vector&lt;object_type> v1;  </code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let&#8217;s see a simple example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include&lt;iostream>  \n#include&lt;vector>  \nusing namespace std;  \nint main()  \n{  \nvector&lt;string> v1;  \nv1.push_back(\"javaTpoint \");  \nv1.push_back(\"tutorial\");  \nfor(vector&lt;string>::iterator itr=v1.begin();itr!=v1.end();++itr)  \ncout&lt;&lt;*itr;  \nreturn 0;   \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>javaTpoint tutorial\n</code></pre>\n\n\n\n<p>In this example, vector class has been used to display the string.</p>\n\n\n\n<h2>C++ Vector Functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Function</th><th>Description</th></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-at-function\">at()</a></td><td>It provides a reference to an element.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-back-function\">back()</a></td><td>It gives a reference to the last element.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-front-function\">front()</a></td><td>It gives a reference to the first element.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-swap-function\">swap()</a></td><td>It exchanges the elements between two vectors.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-push-back-function\">push_back()</a></td><td>It adds a new element at the end.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-pop-back-function\">pop_back()</a></td><td>It removes a last element from the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-empty-function\">empty()</a></td><td>It determines whether the vector is empty or not.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-insert-function\">insert()</a></td><td>It inserts new element at the specified position.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-erase-function\">erase()</a></td><td>It deletes the specified element.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-resize-function\">resize()</a></td><td>It modifies the size of the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-clear-function\">clear()</a></td><td>It removes all the elements from the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-size-function\">size()</a></td><td>It determines a number of elements in the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-capacity-function\">capacity()</a></td><td>It determines the current capacity of the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-assign-function\">assign()</a></td><td>It assigns new values to the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-operator=()-function\">operator=()</a></td><td>It assigns new values to the vector container.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-operator[]()-function\">operator[]()</a></td><td>It access a specified element.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-end-function\">end()</a></td><td>It refers to the past-lats-element in the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-emplace-function\">emplace()</a></td><td>It inserts a new element just before the position pos.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-emplace-back-function\">emplace_back()</a></td><td>It inserts a new element at the end.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-rend-function\">rend()</a></td><td>It points the element preceding the first element of the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-rbegin-function\">rbegin()</a></td><td>It points the last element of the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-begin-function\">begin()</a></td><td>It points the first element of the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-max-size-function\">max_size()</a></td><td>It determines the maximum size that vector can hold.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-cend-function\">cend()</a></td><td>It refers to the past-last-element in the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-cbegin-function\">cbegin()</a></td><td>It refers to the first element of the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-crbegin-function\">crbegin()</a></td><td>It refers to the last character of the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-crend-function\">crend()</a></td><td>It refers to the element preceding the first element of the vector.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-data-function\">data()</a></td><td>It writes the data of the vector into an array.</td></tr><tr><td><a href=\"https://www.javatpoint.com/cpp-vector-shrink-to-fit-function\">shrink_to_fit()</a></td><td>It reduces the capacity and makes it equal to the size of the vector.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A vector is a sequence container class that implements dynamic array, means size automatically changes when appending elements. A vector stores the elements in contiguous memory locations and allocates the memory as needed at run time. Difference between vector and array An array follows static approach, means its size cannot be changed during run time [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/959"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=959"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/959/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4472,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/959/revisions/4472"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=959"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=959"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=959"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 960,
    "date": "2020-08-26T07:55:52",
    "date_gmt": "2020-08-26T07:55:52",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=158"
    },
    "modified": "2021-02-15T08:09:24",
    "modified_gmt": "2021-02-15T08:09:24",
    "slug": "c-iterators",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-iterators/",
    "title": {
      "rendered": "C++ Iterators"
    },
    "content": {
      "rendered": "\n<p>Iterators are just like pointers used to access the container elements.</p>\n\n\n\n<h2>Important Points:</h2>\n\n\n\n<ul><li>Iterators are used to traverse from one element to another element, a process is known as&nbsp;<strong>iterating through the container</strong>.</li><li>The main advantage of an iterator is to provide a common interface for all the containers type.</li><li>Iterators make the&nbsp;<strong>algorithm independent</strong>&nbsp;of the type of the container used.</li><li>Iterators provide a generic approach to navigate through the elements of a container.</li></ul>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<ol><li>&lt;ContainerType&gt;&nbsp;::&nbsp;iterator;&nbsp;&nbsp;</li><li class=\"\">&lt;ContainerType&gt;&nbsp;::&nbsp;const_iterator;&nbsp;&nbsp;</li></ol>\n\n\n\n<h2>Operations Performed on the Iterators:</h2>\n\n\n\n<ul><li><strong>Operator (*) :</strong>&nbsp;The &#8216;*&#8217; operator returns the element of the current position pointed by the iterator.</li><li><strong>Operator (++) :</strong>&nbsp;The &#8216;++&#8217; operator increments the iterator by one. Therefore, an iterator points to the next element of the container.</li><li><strong>Operator (==) and Operator (!=) :</strong>&nbsp;Both these operators determine whether the two iterators point to the same position or not.</li><li><strong>Operator (=) :</strong>&nbsp;The &#8216;=&#8217; operator assigns the iterator.</li></ul>\n\n\n\n<h2>Difference b/w Iterators &amp; Pointers</h2>\n\n\n\n<p>Iterators can be smart pointers which allow to iterate over the complex data structures. A Container provides its iterator type. Therefore, we can say that the iterators have the common interface with different container type.</p>\n\n\n\n<p>The container classes provide two basic member functions that allow to iterate or move through the elements of a container:</p>\n\n\n\n<ul><li><strong>begin()</strong>: The begin() function returns an iterator pointing to the first element of the container.</li><li><strong>end()</strong>: The end() function returns an iterator pointing to the past-the-last element of the container.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-iterators.png\" alt=\"C++ Iterators\"/></figure>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;iterator>  \n#include&lt;vector>  \nusing namespace std;  \nint main()  \n{  \n   std::vector&lt;int> v{1,2,3,4,5};  \n   vector&lt;int>::iterator itr;  \n   for(itr=v.begin();itr!=v.end();itr++)  \n   {  \n       std::cout &lt;&lt; *itr &lt;&lt;\" \";  \n   }  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 2 3 4 5\n</code></pre>\n\n\n\n<h2>Iterator Categories</h2>\n\n\n\n<p>An iterator can be categorized in the following ways:</p>\n\n\n\n<ul><li>Input Iterator</li><li>Output Iterator</li><li>Forward Iterator</li><li>Bidirectional Iterator</li><li>Random Access Iterator</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-iterators2.png\" alt=\"C++ Iterators\"/></figure>\n\n\n\n<p><strong>Input Iterator:</strong>&nbsp;An input iterator is an iterator used to access the elements from the container, but it does not modify the value of a container.</p>\n\n\n\n<p><strong>Operators used for an input iterator are:</strong></p>\n\n\n\n<ul><li>Increment operator(++)</li><li>Equal operator(==)</li><li>Not equal operator(!=)</li><li>Dereference operator(*)</li></ul>\n\n\n\n<p><strong>Output Iterator:</strong>&nbsp;An output iterator is an iterator used to modify the value of a container, but it does not read the value from a container. Therefore, we can say that an output iterator is a&nbsp;<strong>write-only iterator</strong>.</p>\n\n\n\n<p><strong>Operators used for an output iterator are:</strong></p>\n\n\n\n<ul><li>Increment operator(++)</li><li>Assignment operator(=)</li></ul>\n\n\n\n<p><strong>Forward Iterator:</strong>&nbsp;A forward iterator is an iterator used to read and write to a container. It is a multi-pass iterator.</p>\n\n\n\n<p><strong>Operators used for a Forward iterator are:</strong></p>\n\n\n\n<ul><li>Increment operator(++)</li><li>Assignment operator(=)</li><li>Equal operator(=)</li><li>Not equal operator(!=)</li></ul>\n\n\n\n<p><strong>Bidirectional iterator:</strong>&nbsp;A bidirectional iterator is an iterator supports all the features of a forward iterator plus it adds one more feature, i.e., decrement operator(&#8211;). We can move backward by decrementing an iterator.</p>\n\n\n\n<p><strong>Operators used for a Bidirectional iterator are:</strong></p>\n\n\n\n<ul><li>Increment operator(++)</li><li>Assignment operator(=)</li><li>Equal operator(=)</li><li>Not equal operator(!=)</li><li>Decrement operator(&#8211;)</li></ul>\n\n\n\n<p><strong>Random Access Iterator:</strong>&nbsp;A Random Access iterator is an iterator provides random access of an element at an arbitrary location. It has all the features of a bidirectional iterator plus it adds one more feature, i.e., pointer addition and pointer subtraction to provide random access to an element.</p>\n\n\n\n<h2>Providers Of Iterators</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Iterator categories</th><th>Provider</th></tr><tr><td>Input iterator</td><td>istream</td></tr><tr><td>Output iterator</td><td>ostream</td></tr><tr><td>Forward iterator</td><td></td></tr><tr><td>Bidirectional iterator</td><td>List, set, multiset, map, multimap</td></tr><tr><td>Random access iterator</td><td>Vector, deque, array</td></tr></tbody></table></figure>\n\n\n\n<h2>Iterators and their Characteristics</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Iterator</th><th>Access method</th><th>Direction of movement</th><th>I/O capability</th></tr><tr><td>Input</td><td>Linear</td><td>Forward only</td><td>Read-only</td></tr><tr><td>Output</td><td>Linear</td><td>Forward only</td><td>Write-only</td></tr><tr><td>Forward</td><td>Linear</td><td>Forward only</td><td>Read/Write</td></tr><tr><td>Bidirectional</td><td>Linear</td><td>Forward &amp; backward</td><td>Read/Write</td></tr><tr><td>Random</td><td>Random</td><td>Forward &amp; backward</td><td>Read/Write</td></tr></tbody></table></figure>\n\n\n\n<h2>Disadvantages of iterator</h2>\n\n\n\n<ul><li>If we want to move from one data structure to another at the same time, iterators won&#8217;t work.</li><li>If we want to update the structure which is being iterated, an iterator won?t allow us to do because of the way it stores the position.</li><li>If we want to backtrack while processing through a list, the iterator will not work in this case.</li></ul>\n\n\n\n<h2>Advantages of iterator</h2>\n\n\n\n<p><strong>Following are the advantages of an iterator:</strong></p>\n\n\n\n<ul><li><strong>Ease in programming:</strong>&nbsp;It is convenient to use iterators rather than using a subscript operator[] to access the elements of a container. If we use subscript operator[] to access the elements, then we need to keep the track of the number of elements added at the runtime, but this would not happen in the case of an iterator.</li></ul>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;vector>  \n#include&lt;iterator>  \nusing namespace std;  \nint main()  \n{  \n    vector&lt;int> v{1,2,3,4,5};  \n    vector&lt;int>::iterator itr;  \n    for(int i=0;i&lt;5;i++)           // Traversal without using an iterator.  \n    {  \n        cout&lt;&lt;v&#91;i]&lt;&lt;\" \";  \n    }  \n    cout&lt;&lt;'\\n';  \n    for(itr=v.begin();itr!=v.end();itr++)  // Traversal by using an iterator.  \n    {  \n        cout&lt;&lt;*itr&lt;&lt;\" \";  \n    }  \n    v.push_back(10);  \n    cout&lt;&lt;'\\n';  \n     for(int i=0;i&lt;6;i++)  \n    {  \n        cout&lt;&lt;v&#91;i]&lt;&lt;\" \";  \n    }  \n    cout&lt;&lt;'\\n';  \n     for(itr=v.begin();itr!=v.end();itr++)  \n    {  \n        cout&lt;&lt;*itr&lt;&lt;\" \";  \n    }  \n     return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>      1 2 3 4 5                                                                                                          \n      1 2 3 4 5                                                                                                          \n      1 2 3 4 5 10                                                                                                       \n      1 2 3 4 5 10 \n</code></pre>\n\n\n\n<p>In the above example, we observe that if we traverse the elements of a vector without using an iterator, then we need to keep track of the number of elements added in the container.</p>\n\n\n\n<ul><li><strong>Code Reusability:</strong>&nbsp;A code can be reused if we use iterators. In the above example, if we replace vector with the list, and then the subscript operator[] would not work to access the elements as the list does not support the random access. However, we use iterators to access the elements, then we can also access the list elements.</li><li><strong>Dynamic Processing:</strong>&nbsp;C++ iterators provide the facility to add or delete the data dynamically.</li></ul>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;vector>  \n#include&lt;iterator>  \nusing namespace std;  \nint main()  \n{  \n    vector&lt;int> v{1,2,3,4,5};  // vector declaration  \n    vector&lt;int>::iterator itr;  \n    v.insert(v.begin()+1,10);        \n    for(itr=v.begin();itr!=v.end();itr++)  \n    {  \n        cout&lt;&lt;*itr&lt;&lt;\" \";  \n    }  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 10 2 3 4 5\n</code></pre>\n\n\n\n<p>In the above example, we insert a new element at the second position by using insert() function and all other elements are shifted by one.</p>\n\n\n\n<h2>Difference b/w Random Access Iterator and Other Iterators</h2>\n\n\n\n<p>The most important difference between the Random access iterator and other iterators is that&nbsp;<strong>random access iterator requires &#8216;1&#8217; step to access an element while other iterators require &#8216;n&#8217; steps</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-iterators3.png\" alt=\"C++ Iterators\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Iterators are just like pointers used to access the container elements. Important Points: Iterators are used to traverse from one element to another element, a process is known as&nbsp;iterating through the container. The main advantage of an iterator is to provide a common interface for all the containers type. Iterators make the&nbsp;algorithm independent&nbsp;of the type [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/960"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=960"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/960/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4471,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/960/revisions/4471"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=960"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=960"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=960"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 961,
    "date": "2020-08-26T07:58:26",
    "date_gmt": "2020-08-26T07:58:26",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=160"
    },
    "modified": "2021-02-15T08:09:12",
    "modified_gmt": "2021-02-15T08:09:12",
    "slug": "c-bidirectional-iterator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-bidirectional-iterator/",
    "title": {
      "rendered": "C++ Bidirectional iterator"
    },
    "content": {
      "rendered": "\n<ul><li>A Bidirectional iterator supports all the features of a forward iterator, and it also supports the two&nbsp;<strong>decrement operators</strong>&nbsp;(prefix and postfix).</li><li>Bidirectional iterators are the iterators used to access the elements in both the directions, i.e.,&nbsp;<strong>towards the end and towards the beginning</strong>.</li><li>A&nbsp;<strong>random access iterator</strong>&nbsp;is also a valid bidirectional iterator.</li><li>Many containers implement the bidirectional iterator such as list, set, multiset, map, multimap.</li><li>C++ provides two non-const iterators that move in both the directions are iterator and reverse iterator.</li><li>C++ Bidirectional iterator has the same features like the forward iterator, with the only difference is that the bidirectional iterator can also be decremented.</li></ul>\n\n\n\n<h2>Properties Of Bidirectional Iterator</h2>\n\n\n\n<p><strong>Suppose x and y are the two iterators</strong>:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Expressions</th></tr><tr><td>A Bidirectional iterator is a default-constructible, copy-assignable and destructible.</td><td>A x;<br>A y(x);<br>y=x;</td></tr><tr><td>It can be compared by using equality or inequality operator.</td><td>x==y<br>x!=y</td></tr><tr><td>It can be dereferenced means we can retrieve the value by using a&nbsp;<strong>dereference operator(*)</strong>.</td><td>*x</td></tr><tr><td>A mutable iterator can be dereferenced as an lvalue.</td><td>*x = t</td></tr><tr><td>A Bidirectional iterator can be incremented.</td><td>x++<br>++x</td></tr><tr><td>A Bidirectional iterator can also be decremented.</td><td>x&#8211;<br>&#8211;x</td></tr></tbody></table></figure>\n\n\n\n<p>In the above table,&nbsp;<strong>&#8216;A&#8217; is of bidirectional type, x</strong>&nbsp;and&nbsp;<strong>y</strong>&nbsp;are the objects of an iterator type, and &#8216;t&#8217; is an object pointed by the iterator.</p>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;iterator>  \n#include&lt;vector>  \nusing namespace std;  \nint main()  \n{  \n   vector&lt;int> v{1,2,3,4,5};                       // vector declaration  \n   vector&lt;int> ::iterator itr;                        // iterator declaration  \n   vector&lt;int> :: reverse_iterator ritr;         // reverse iterator declaration  \n   for(itr = v.begin();itr!=v.end();itr++)  \n   {  \n       cout&lt;&lt;*itr&lt;&lt;\" \";  \n   }  \n   cout&lt;&lt;'\\n';  \n   for(ritr = v.rbegin();ritr!= v.rend();ritr++)  \n   {  \n       cout&lt;&lt;*ritr&lt;&lt;\" \";  \n   }  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 2 3 4 5\n5 4 3 2 1\n</code></pre>\n\n\n\n<h2>Features of the Bidirectional iterator</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-bidirectional-iterator.png\" alt=\"C++ Bidirectional iterator\"/></figure>\n\n\n\n<ul><li><strong>Equality/Inequality operator</strong>: A bidirectional iterator can be compared by using an&nbsp;<strong>equality</strong>&nbsp;or&nbsp;<strong>inequality operator</strong>. The two iterators are equal only when both the iterators point to the same position.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; and &#8216;B&#8217; are the two iterators:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>A==B;  \nA!=B; </code></pre>\n\n\n\n<ul><li><strong>Dereferencing</strong>: A bidirectional iterator can also be dereferenced both as an&nbsp;<strong>lvalue</strong>&nbsp;and&nbsp;<strong>rvalue</strong>.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; is an iterator and &#8216;t&#8217; is an integer variable:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>*A = t;  \n  t = *A  </code></pre>\n\n\n\n<ul><li><strong>Incrementable</strong>: A bidirectional iterator can be incremented by using an <strong>operator++()</strong> function.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>A++;  \n++A;  </code></pre>\n\n\n\n<ul><li><strong>Decrementable: A bidirectional iterator can also be decremented by using an Operator &#8211;() function.</strong></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>A--;  \n--A;  </code></pre>\n\n\n\n<h2>Limitations Of Bidirectional Iterator:</h2>\n\n\n\n<ul><li><strong>Relational operator</strong>: An equality or inequality operator can be used with the bidirectional iterator, but the other iterators cannot be applied on the bidirectional iterator.</li></ul>\n\n\n\n<p>Suppose &#8216;A&#8217; and &#8216;B&#8217; are the two iterators:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A==B;           // valid  \nA&lt;=B;           // invalid</code></pre>\n\n\n\n<ul><li><strong>Arithmetic operator</strong>: An arithmetic operator cannot be used with the bidirectional iterator as it accesses the data sequentially.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>A+2;              // invalid  \nA+1;              // invalid  </code></pre>\n\n\n\n<ul><li><strong>Offset dereference operator</strong>: A Bidirectional iterator does not support the offset dereference operator or subscript operator [] for the random access of an element.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A Bidirectional iterator supports all the features of a forward iterator, and it also supports the two&nbsp;decrement operators&nbsp;(prefix and postfix). Bidirectional iterators are the iterators used to access the elements in both the directions, i.e.,&nbsp;towards the end and towards the beginning. A&nbsp;random access iterator&nbsp;is also a valid bidirectional iterator. Many containers implement the bidirectional iterator [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/961"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=961"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/961/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4470,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/961/revisions/4470"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=961"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=961"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=961"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 962,
    "date": "2020-08-26T08:00:28",
    "date_gmt": "2020-08-26T08:00:28",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=162"
    },
    "modified": "2020-12-27T18:37:53",
    "modified_gmt": "2020-12-27T18:37:53",
    "slug": "c-forward-iterator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-forward-iterator/",
    "title": {
      "rendered": "C++ Forward Iterator"
    },
    "content": {
      "rendered": "\n<ul><li><strong>Forward Iterator</strong>&nbsp;is a combination of Bidirectional and Random Access iterator. Therefore, we can say that the forward iterator can be used to read and write to a container.</li><li><strong>Forward iterators</strong>&nbsp;are used to read the contents from the beginning to the end of a container.</li><li><strong>Forward iterator</strong>&nbsp;use only increments operator (++) to move through all the elements of a container. Therefore, we can say that the forward iterator can only move forward.</li><li>A Forward iterator is a multi-pass iterator.</li></ul>\n\n\n\n<h2>Operations Performed on the Forward Iterator:</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Valid Expressions</th></tr><tr><td>It is default constructible.</td><td>A x;</td></tr><tr><td>It is a copy-constructible.</td><td>A x(y);</td></tr><tr><td>It is a copy-assignable.</td><td>y = x;</td></tr><tr><td>It can be compared either by using an equality or inequality operator.</td><td>a==b;<br>a!=b;</td></tr><tr><td>It can be incremented.</td><td>a++;<br>++a;</td></tr><tr><td>It can be dereferenced as an rvalue.</td><td>*a;</td></tr><tr><td>It can also be dereferenced as an lvalue.</td><td>*a = t;</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Where &#8216;A&#8217; is a forward iterator type, and x and y are the objects of a forward iterator type, and t is an object pointed by the iterator type object.</strong></p>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include &lt;fstream>  \n#include &lt;iterator>  \n#include &lt;vector>  \n  \nusing namespace std;  \n  \ntemplate&lt;class ForwardIterator>                                       // function template  \nvoid display(ForwardIterator first, ForwardIterator last)            // display function  \n{  \n while(first!=last)  \n {  \n     cout&lt;&lt;*first&lt;&lt;\" \";  \n     first++;  \n }  \n}  \n  \nint main()  \n{  \n  \n  vector&lt;int> a;                          // declaration of vector.  \n  for(int i=1;i&lt;=10;i++)  \n  {  \n      a.push_back(i);  \n  }  \n  display(a.begin(),a.end());                // calling display() function.  \n  \n  return 0;  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 2 3 4 5 6 7 8 9 10\n</code></pre>\n\n\n\n<h2>Features of the Forward Iterator:</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-forward-iterator.png\" alt=\"C++ Forward Iterator\"/></figure>\n\n\n\n<ul><li><strong>Equality/Inequality operator</strong>: A forward iterator can be compared by using equality or an inequality operator.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; and &#8216;B&#8217; are the two iterators:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>A==B;           // equality operator  \nA!=B;            // inequality operator  </code></pre>\n\n\n\n<ul><li><strong>Dereferencing</strong>: We can dereference the forward iterator as an rvalue as well as an lvalue. Therefore, we can access the output iterator and can also assign the value to the output iterator.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; is an iterator and &#8216;t&#8217; is an integer variable:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>*A = t;  \n  t = *A;   </code></pre>\n\n\n\n<ul><li><strong>Incrementable</strong>: A forward iterator can be incremented but cannot be decremented.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; is an iterator:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>A++;  \n++A;  </code></pre>\n\n\n\n<h2>Limitations of the Forward Iterator:</h2>\n\n\n\n<ul><li><strong>Decrementable</strong>: A forward iterator cannot be decremented as it moves only in the forward direction.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; is an iterator:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>A--;          // invalid  </code></pre>\n\n\n\n<ul><li><strong>Relational Operators</strong>: A forward iterator can be used with the equality operator, but no other relational operators can be applied on the forward iterator.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; and &#8216;B&#8217; are the two iterators:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>A==B;        // valid  \nA>=B;        // invalid  </code></pre>\n\n\n\n<ul><li><strong>Arithmetic Operators</strong>: An arithmetic operators cannot be used with the forward iterator.</li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>A+2;         // invalid  \nA+3;         // invalid  </code></pre>\n\n\n\n<ul><li><strong>Random Access</strong>: A forward iterator does not provide the random access of an element. It can only iterate through the elements of a container.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Forward Iterator&nbsp;is a combination of Bidirectional and Random Access iterator. Therefore, we can say that the forward iterator can be used to read and write to a container. Forward iterators&nbsp;are used to read the contents from the beginning to the end of a container. Forward iterator&nbsp;use only increments operator (++) to move through all the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/962"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=962"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/962/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4469,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/962/revisions/4469"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=962"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=962"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=962"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 963,
    "date": "2020-08-26T08:02:23",
    "date_gmt": "2020-08-26T08:02:23",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=164"
    },
    "modified": "2020-12-27T18:37:39",
    "modified_gmt": "2020-12-27T18:37:39",
    "slug": "c-input-iterator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-input-iterator/",
    "title": {
      "rendered": "C++ Input Iterator"
    },
    "content": {
      "rendered": "\n<ul><li>Input Iterator is an iterator used to read the values from the container.</li><li>Dereferencing an input iterator allows us to retrieve the value from the container.</li><li>It does not alter the value of a container.</li><li>It is a one-way iterator.</li><li>It can be incremented, but cannot be decremented.</li><li>Operators which can be used for an input iterator are increment operator(++), decrement operator(&#8211;), dereference operator(*), not equal operator(!=) and equal operator(==).</li><li>An input Iterator is produced by the&nbsp;<strong>Istream</strong>.</li><li>A Forward iterator, bidirectional iterator, and random access iterator are all valid input iterators.</li></ul>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Valid Expressions</th></tr><tr><td>An input iterator is a copy-constructible, copy-assignable and destructible.</td><td>X b(a);<br>b= a;</td></tr><tr><td>It can be compared by using a equality or inequality operator.</td><td>a==b;<br>a!=b;</td></tr><tr><td>It can be dereferenced.</td><td>*a;</td></tr><tr><td>It can be incremented.</td><td>++a;</td></tr></tbody></table></figure>\n\n\n\n<p>Where &#8216;X&#8217; is of input iterator type while &#8216;a&#8217; and &#8216;b&#8217; are the objects of an iterator type.</p>\n\n\n\n<h2>Features of Input iterator:</h2>\n\n\n\n<ul><li><strong>Equality/Inequality operator</strong>: An input iterator can be compared by using an equality or inequality operator. The two iterators are equal only when both the iterators point to the same location otherwise not. Suppose &#8216;A&#8217; and &#8216;B&#8217; are the two iterators:</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>A ==B;   // equality operator  \nA!=B;   // inequality operator  </code></pre>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;vector>  \n#include&lt;iterator>  \nusing namespace std;  \nint main()  \n{  \n    vector&lt;int> v{1,2,3,4,5};  \n    vector&lt;int>::iterator itr,itr1;  \n    itr=v.begin();  \n    itr1=v.begin()+1;  \n    if(itr==itr1)  \n    std::cout &lt;&lt; \"Both the iterators are equal\" &lt;&lt; std::endl;  \n    if(itr!=itr1)  \n    std::cout &lt;&lt; \"Both the iterators are not equal\" &lt;&lt; std::endl;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Both the iterators are not equal\n</code></pre>\n\n\n\n<p>In the above example, itr and itr1 are the two iterators. Both these iterators are of vector type. The &#8216;itr&#8217; is an iterator object pointing to the first position of the vector and &#8216;itr1&#8217; is an iterator object pointing to the second position of the vector. Therefore, both the iterators point to the same location, so the condition itr1!=itr returns true value and prints &#8220;<strong>Both the iterators are not equal</strong>&#8220;.</p>\n\n\n\n<ul><li><strong>Dereferencing an iterator</strong>: We can dereference an iterator by using a dereference operator(*). Suppose &#8216;A&#8217; is an iterator:</li></ul>\n\n\n\n<ol><li>*A&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&nbsp;Dereferencing&nbsp;&#8216;A&#8217;&nbsp;iterator&nbsp;by&nbsp;using&nbsp;*.&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>  #include &lt;iostream>  \n  #include&lt;vector>  \n #include&lt;iterator>  \n using namespace std;  \nint main()  \n  \n   vector&lt;int> v{11,22,33,44};  \n   vector&lt;int>::iterator it;  \n   it = v.begin();  \n cout&lt;&lt;*it;  \n  return 0;  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>11\n</code></pre>\n\n\n\n<p>In the above example, &#8216;it&#8217; is an iterator object pointing to the first element of a vector &#8216;v&#8217;. A dereferencing an iterator *it returns the value pointed by the iterator &#8216;it&#8217;.</p>\n\n\n\n<ul><li><strong>Swappable</strong>: The two iterators pointing two different locations can be swapped.</li></ul>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;vector>  \n#include&lt;iterator>  \nusing namespace std;  \nint main()  \n{  \n    vector&lt;int> v{11,22,33,44};  \n    vector&lt;int>::iterator it,it1,temp;  \n    it = v.begin();  \n    it1 = v.begin()+1;  \n    temp=it;  \n    it=it1;  \n    it1=temp;  \n    cout&lt;&lt;*it&lt;&lt;\" \";  \n    cout&lt;&lt;*it1;  \n    return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>22 11\n</code></pre>\n\n\n\n<p>In the above example, &#8216;it&#8217; and &#8216;it1&#8217; iterators are swapped by using an object of a third iterator, i.e.,&nbsp;<strong>temp</strong>.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Input Iterator is an iterator used to read the values from the container. Dereferencing an input iterator allows us to retrieve the value from the container. It does not alter the value of a container. It is a one-way iterator. It can be incremented, but cannot be decremented. Operators which can be used for an [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/963"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=963"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/963/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4468,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/963/revisions/4468"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=963"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=963"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=963"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 964,
    "date": "2020-08-26T08:06:11",
    "date_gmt": "2020-08-26T08:06:11",
    "guid": {
      "rendered": "http://cplusplus.foobrdigital.com/?p=166"
    },
    "modified": "2020-12-27T18:37:31",
    "modified_gmt": "2020-12-27T18:37:31",
    "slug": "c-output-iterator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/c-output-iterator/",
    "title": {
      "rendered": "C++ Output Iterator"
    },
    "content": {
      "rendered": "\n<ul><li>Output Iterator is an iterator used to modify the value in the container.</li><li>Dereferencing an output iterator allows us to alter the value of the container.</li><li>It does not allow us to read the value from the container.</li><li>It is a one-way and write-only iterator.</li><li>It can be incremented, but cannot be decremented.</li><li>Operators that can be used for an output iterator&nbsp;<strong>are increment operator(++), decrement operator(&#8211;) and assignment operator(=)</strong>.</li><li><strong>There are two main subclasses of an Output Iterator are:</strong><ul><li><strong>insert iterator</strong></li><li><strong>ostream iterator</strong></li></ul></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/cpp/images/cpp-output-iterator.png\" alt=\"C++ Output Iterator\"/></figure>\n\n\n\n<h2>Insert Iterator</h2>\n\n\n\n<ul><li>An insert iterator is an iterator used to insert the element in a specified position.</li><li>An assignment operator on the insert_iterator inserts the new element at the current position.</li></ul>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- wp:list {\"ordered\":true} -->\n&lt;ol>&lt;li>&lt;/li>&lt;/ol>\n&lt;!-- /wp:list --></code></pre>\n\n\n\n<h2>Parameters</h2>\n\n\n\n<p><strong>x</strong>: It is the container on which the new element is to be inserted.</p>\n\n\n\n<p><strong>it</strong>: It is an iterator object pointing to the position which is to be modified.</p>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>     // std::cout  \n#include &lt;iterator>     // std::front_inserter  \n#include &lt;vector>         // std::list  \n#include &lt;algorithm>    // std::copy  \nusing namespace std;  \nint main () {  \n  vector&lt;int> v1,v2;  \n  for (int i=1; i&lt;=5; i++)  \n  {   \n  v1.push_back(i);   \n  v2.push_back(i+2);  \n  }  \n vector&lt;int>::iterator it = v1.begin();  \n  advance (it,3);  \n copy (v2.begin(),v2.end(),inserter(v1,it));  \n  cout&lt;&lt;\"Elements of v1 are :\";  \n  for (  it = v1.begin(); it!= v1.end(); ++it )  \n  cout &lt;&lt; ' ' &lt;&lt; *it;  \n  cout &lt;&lt; '\\n';  \n  return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Elements of v1 are : 1 2 3 3 4 5 6 7 4 5\n</code></pre>\n\n\n\n<p>In the above example, insert_iterator is applied on the copy algorithm to insert the elements of the vector v2 into the vector v1 at a specified position pointed by it.</p>\n\n\n\n<h2>Ostream iterator</h2>\n\n\n\n<ul><li>An ostream iterators are the output iterators used to write to the output stream such as cout successively.</li><li>An ostream iterator is created using a basic_ostream object.</li><li>When an assigenment operator is used on the ostream iterator, it inserts a new element into the output stream.</li></ul>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>template&lt;class T, class charT=char, class traits=char_traits&lt;charT>>  \nclass ostream_iterator;  </code></pre>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<p><strong>Member functions of Ostream Iterator class</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ostream_iterator&lt;T, charT, traits>&amp; operator=(const T&amp; value);  \nOstream_iterator&lt;T, charT, traits>&amp; operator*();  \nOstream_iterator&lt;T, charT, traits>&amp; operator++();  \nOstream_iterator&lt;T, charT, traits>&amp; operator++(int);  </code></pre>\n\n\n\n<p><strong>Member functions of Ostream Iterator class</strong></p>\n\n\n\n<h2>Parameters</h2>\n\n\n\n<ul><li><strong>T</strong>: It is the type of elements to be inserted into the container.</li><li><strong>charT</strong>: The type of elements that ostream can handle, for example, char ostream.</li><li><strong>traits</strong>: These are the character traits that the stream handles for the elements.</li></ul>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;iterator>  \n#include&lt;vector>  \n#include&lt;algorithm>  \nusing namespace std;  \nint main()  \n{  \n   vector&lt;int> v;  \n   for(int i=1;i&lt;=5;i++)  \n   {  \n       v.push_back(i*10);  \n   }  \n ostream_iterator&lt;int> out(cout,\",\");  \n copy(v.begin(),v.end(),out);  \n    return 0;  \n} </code></pre>\n\n\n\n<p><strong>Let&#8217;s see a simple example:</strong></p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>10,20,30,40,50\n</code></pre>\n\n\n\n<p>In the above example, out is an object of the ostream_iterator used to add the delimiter &#8216;,&#8217; between the vector elements.</p>\n\n\n\n<p><strong>Let&#8217;s see another simple example of ostream iterator:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#include &lt;iostream>  \n#include&lt;iterator>  \n#include&lt;vector>  \n#include&lt;algorithm>  \nusing namespace std;  \nint main()  \n{  \n   ostream_iterator&lt;int> out(cout,\",\");  \n   *out = 5;  \n   out++;  \n   *out = 10;  \n   out++;  \n   *out = 15;  \n   return 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>5,10,15,\n</code></pre>\n\n\n\n<h2>Features Of Output Iterator</h2>\n\n\n\n<ul><li><strong>Equality/Inequality Operator</strong>: Output iterators cannot be compared either by using equality or inequality operator. Suppose X and Y are the two iterators:</li><li><strong>Equality/Inequality Operator</strong>: Output iterators cannot be compared either by using equality or inequality operator. Suppose X and Y are the two iterators:</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>X==Y;  invalid  \nX!=Y;   invalid  </code></pre>\n\n\n\n<ul><li><strong>Dereferencing</strong>: An output iterator can be dereferenced as an lvalue.</li><li><strong>Dereferencing</strong>: An output iterator can be dereferenced as an lvalue.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>*X=7;  </code></pre>\n\n\n\n<ul><li><strong>Incrementable</strong>: An output iterator can be incremented by using operator++() function.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>X++;  \n++X;  </code></pre>\n\n\n\n<h2>Limitations Of Output Iterator</h2>\n\n\n\n<ul><li><strong>Assigning but no accessing</strong>: We can assign an output iterator as an lvalue, but we cannot access them as an rvalue.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; is an output iterator type and &#8216;x&#8217; is a integer variable:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>*A = x;                   // valid  \n  x = *A;                 // invalid</code></pre>\n\n\n\n<ul><li><strong>It cannot be decremented</strong>: We can increment the output iterator by using operator++() function, but we cannot decrement the output iterator.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; is an output iterator type:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>A++;            // not valid  \n++A;            // not valid  </code></pre>\n\n\n\n<ul><li><strong>Multi-pass algorithm</strong>: An output iterator cannot be used as a multi-pass algorithm. Since an output iterator is unidirectional and can move only forward. Therefore, it cannot be used to move through the container multiple times</li><li><strong>Relational Operators</strong>: An output iterator cannot be compared by using any of the relational operators.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; and &#8216;B&#8217; are the two iterators:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>A = =B;        // not valid  \nA = =B;        // not valid  </code></pre>\n\n\n\n<ul><li><strong>Arithmetic Operators</strong>: An output iterator cannot be used with the arithmetic operators. Therefore, we can say that the output iterator only moves forward in a sequential manner.</li></ul>\n\n\n\n<p><strong>Suppose &#8216;A&#8217; is an output iterator</strong>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A + 2;               // invalid  \nA + 5;               // invalid    </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Output Iterator is an iterator used to modify the value in the container. Dereferencing an output iterator allows us to alter the value of the container. It does not allow us to read the value from the container. It is a one-way and write-only iterator. It can be incremented, but cannot be decremented. Operators that [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      20
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/964"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=964"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/964/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 4467,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/964/revisions/4467"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=964"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=964"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=964"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]