[
  {
    "id": 689,
    "date": "2020-08-22T05:38:50",
    "date_gmt": "2020-08-22T05:38:50",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=689"
    },
    "modified": "2020-08-22T05:38:50",
    "modified_gmt": "2020-08-22T05:38:50",
    "slug": "kotlin-tutorial",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-tutorial/",
    "title": {
      "rendered": "Kotlin Tutorial"
    },
    "content": {
      "rendered": "\n<p>Kotlin tutorial provides basic and advanced concepts of Kotlin programming language. Our Kotlin tutorial is designed for beginners and professionals both.</p>\n\n\n\n<p>Kotlin is a statically-typed, general-purpose programming language. It is widely used to develop android applications.</p>\n\n\n\n<p>Our Kotlin Tutorial includes all topics of Kotlin such as introduction, architecture, class, object, inheritance, interface, generics, delegation, functions, mixing Java and Kotlin, Java vs. Kotlin, etc.</p>\n\n\n\n<h2>What is Kotlin</h2>\n\n\n\n<p><strong>Kotlin</strong>&nbsp;is a general-purpose, statically typed, and open-source programming language. It runs on JVM and can be used anywhere Java is used today. It can be used to develop Android apps, server-side apps and much more.</p>\n\n\n\n<h2>History of Kotlin</h2>\n\n\n\n<p><strong>Kotlin</strong>&nbsp;was developed by JetBrains team. A project was started in 2010 to develop the language and officially, first released in February 2016. Kotlin was developed under the Apache 2.0 license.</p>\n\n\n\n<h2>Features of Kotlin</h2>\n\n\n\n<ul><li><strong>Concise:&nbsp;</strong>Kotlin reduces writing the extra codes. This makes Kotlin more concise.</li><li><strong>Null safety:&nbsp;</strong>Kotlin is null safety language. Kotlin aimed to eliminate the NullPointerException (null reference) from the code.Interoperable.</li><li><strong>Interoperable:&nbsp;</strong>Kotlin easily calls the Java code in a natural way as well as Kotlin code can be used by Java.</li><li><strong>Smart cast:&nbsp;</strong>It explicitly typecasts the immutable values and inserts the value in its safe cast automatically.</li><li><strong>Compilation Time:&nbsp;</strong>It has better performance and fast compilation time.</li><li><strong>Tool-friendly:&nbsp;</strong>Kotlin programs are build using the command line as well as any of Java IDE.</li><li><strong>Extension function:&nbsp;</strong>Kotlin supports extension functions and extension properties which means it helps to extend the functionality of classes without touching their code.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin tutorial provides basic and advanced concepts of Kotlin programming language. Our Kotlin tutorial is designed for beginners and professionals both. Kotlin is a statically-typed, general-purpose programming language. It is widely used to develop android applications. Our Kotlin Tutorial includes all topics of Kotlin such as introduction, architecture, class, object, inheritance, interface, generics, delegation, functions, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/689"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=689"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/689/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=689"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=689"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=689"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 691,
    "date": "2020-08-22T05:40:08",
    "date_gmt": "2020-08-22T05:40:08",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=691"
    },
    "modified": "2020-08-22T05:40:08",
    "modified_gmt": "2020-08-22T05:40:08",
    "slug": "kotlin-environment-setup-command-line",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-environment-setup-command-line/",
    "title": {
      "rendered": "Kotlin Environment"
    },
    "content": {
      "rendered": "\n<h3>Prerequisite</h3>\n\n\n\n<p>Since Kotlin runs on JVM, it is necessary to install JDK and setup the JDK and JRE path in local system environment variable.</p>\n\n\n\n<p>To setup Kotlin for command line, you have to pre install JDK 1.6+ or above. To install JDK and set path of JDK and JRE refer link&nbsp;<strong>Set Path in Java</strong>&nbsp;.</p>\n\n\n\n<h2>Setup Kotlin for Command Line</h2>\n\n\n\n<p>To setup Kotlin for command line, we need to go through following steps:</p>\n\n\n\n<p>1. Download the Kotlin Compiler from GitHub Releases&nbsp;<strong>https://github.com/JetBrains/kotlin/releases/tag/v1.2.21</strong>&nbsp;.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup.png\" alt=\"Kotlin Environment Setup Command line\"/></figure>\n\n\n\n<p>2. Extract downloaded zip in any of system location (in my case it is in C drive).</p>\n\n\n\n<p>3. Copy the path up to bin directory of kotlinc.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup1.png\" alt=\"Kotlin Environment Setup Command line 1\"/></figure>\n\n\n\n<p>4. Open Computer properties and click Environment variables.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup2.png\" alt=\"Kotlin Environment Setup Command line 2\"/></figure>\n\n\n\n<p>5. Click on edit path</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup3.png\" alt=\"Kotlin Environment Setup Command line 3\"/></figure>\n\n\n\n<p>6. Past the path of kotlinc bin directory in variable value.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup4.png\" alt=\"Kotlin Environment Setup Command line 4\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Prerequisite Since Kotlin runs on JVM, it is necessary to install JDK and setup the JDK and JRE path in local system environment variable. To setup Kotlin for command line, you have to pre install JDK 1.6+ or above. To install JDK and set path of JDK and JRE refer link&nbsp;Set Path in Java&nbsp;. Setup [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/691"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=691"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/691/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=691"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=691"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=691"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 693,
    "date": "2020-08-22T05:42:19",
    "date_gmt": "2020-08-22T05:42:19",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=693"
    },
    "modified": "2020-08-22T05:42:19",
    "modified_gmt": "2020-08-22T05:42:19",
    "slug": "kotlin-hello-world-program-in-command-line",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-hello-world-program-in-command-line/",
    "title": {
      "rendered": "Hello World Program"
    },
    "content": {
      "rendered": "\n<p>To write Kotlin program, we can use any text editor like: Notepad++. Put the following code into any text file and save.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    println(\"Hello World!\")  \n}  </code></pre>\n\n\n\n<p>Save the file with name hello.kt,&nbsp;<strong>.kt</strong>&nbsp;extension is used for Kotlin file.</p>\n\n\n\n<h2>Compile Kotlin File</h2>\n\n\n\n<p>Open command prompt and go to directory location where file is stored. Compile&nbsp;<strong>hello.kt</strong>&nbsp;file with following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>kotlinc hello.kt -include-runtime -d hello.jar </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-hello-world-program-command-line1.png\" alt=\"Kotlin Hello World Program in Command line 1\"/></figure>\n\n\n\n<h2>Run Kotlin File</h2>\n\n\n\n<p>To run the Kotlin .jar (hello.jar) file run the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java -jar hello.jar  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-hello-world-program-command-line2.png\" alt=\"Kotlin Hello World Program in Command line 2\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>To write Kotlin program, we can use any text editor like: Notepad++. Put the following code into any text file and save. Save the file with name hello.kt,&nbsp;.kt&nbsp;extension is used for Kotlin file. Compile Kotlin File Open command prompt and go to directory location where file is stored. Compile&nbsp;hello.kt&nbsp;file with following command. Run Kotlin File [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/693"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=693"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/693/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=693"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=693"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=693"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 695,
    "date": "2020-08-22T05:43:49",
    "date_gmt": "2020-08-22T05:43:49",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=695"
    },
    "modified": "2020-08-22T05:43:49",
    "modified_gmt": "2020-08-22T05:43:49",
    "slug": "kotlin-first-program-concept",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-first-program-concept/",
    "title": {
      "rendered": "First Program Concept"
    },
    "content": {
      "rendered": "\n<p>Let&#8217;s understand the concepts and keywords of Kotlin program &#8216;Hello World.kt&#8217;.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    println(\"Hello World!\")  \n}  </code></pre>\n\n\n\n<p><strong>1.</strong>&nbsp;The first line of program defines a function called&nbsp;<strong>main()</strong>. In Kotlin, function is a group of statements that performs a group of tasks. Functions start with a keyword&nbsp;<strong>fun</strong>&nbsp;followed by function name (main in this case).</p>\n\n\n\n<p>The main () function takes an array of string&nbsp;<strong>(Array&lt;String&gt;)</strong>&nbsp;as a parameter and returns Unit. Unit is used to indicate the function and does not return any value (void as in Java). Declaring Unit is an optional, we do not declare it explicitly.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>): Unit {  \n//  \n}  </code></pre>\n\n\n\n<p>The main() function is the entry point of the program, it is called first when Kotlin program starts execution.</p>\n\n\n\n<p><strong>2.</strong>&nbsp;The second line used to print a String &#8220;Hello World!&#8221;. To print standard output we use wrapper println() over standard Java library functions (System.out.println()).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>println(\"Hello World!\")  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Let&#8217;s understand the concepts and keywords of Kotlin program &#8216;Hello World.kt&#8217;. 1.&nbsp;The first line of program defines a function called&nbsp;main(). In Kotlin, function is a group of statements that performs a group of tasks. Functions start with a keyword&nbsp;fun&nbsp;followed by function name (main in this case). The main () function takes an array of string&nbsp;(Array&lt;String&gt;)&nbsp;as [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/695"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=695"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/695/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=695"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=695"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=695"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 697,
    "date": "2020-08-22T05:45:01",
    "date_gmt": "2020-08-22T05:45:01",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=697"
    },
    "modified": "2020-08-22T05:45:01",
    "modified_gmt": "2020-08-22T05:45:01",
    "slug": "kotlin-environment-setup-ide",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-environment-setup-ide/",
    "title": {
      "rendered": "Environment Setup (IDE)"
    },
    "content": {
      "rendered": "\n<h2>Install JDK and Setup JDK path</h2>\n\n\n\n<p>Since, Kotlin runs on JVM, it is necessary to install JDK and setup the JDK and JRE path in local system environment variable. Use this link&nbsp;<strong>https://www.codemeals.com/how-to-set-path-in-java</strong>&nbsp;to setup JDK path.</p>\n\n\n\n<h2>Install IDE for Kotlin</h2>\n\n\n\n<p>There are various Java IDE available which supports Kotlin project development. We can choose these IDE according to our compatibility. The download links of these IDE&#8217;s are given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>IDE Name</th><th>Download links</th></tr><tr><td>IntelliJ IDEA</td><td>https://www.jetbrains.com/idea/download/</td></tr><tr><td>Android Studio</td><td>https://developer.android.com/studio/preview/index.html</td></tr><tr><td>Eclipse</td><td>https://www.eclipse.org/downloads/</td></tr></tbody></table></figure>\n\n\n\n<p>In this tutorial, we are going to use IntelliJ IDEA for our Kotlin program development.</p>\n\n\n\n<h2>Steps to Setup IntelliJ IDEA</h2>\n\n\n\n<h3>1. Download IntelliJ IDEA.</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup-ide.png\" alt=\"Kotlin Environment Setup IDE\"/></figure>\n\n\n\n<h3>2. Run the downloaded setup.</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup-ide1.png\" alt=\"Kotlin Environment Setup IDE 1\"/></figure>\n\n\n\n<h3>3. Click next to continue.</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup-ide2.png\" alt=\"Kotlin Environment Setup IDE 2\"/></figure>\n\n\n\n<h3>4. Choose installation location.</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup-ide3.png\" alt=\"Kotlin Environment Setup IDE 3\"/></figure>\n\n\n\n<h3>5. Choose start menu folder and click Install.</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup-ide4.png\" alt=\"Kotlin Environment Setup IDE 4\"/></figure>\n\n\n\n<h3>6. Click Finish to complete Installation.</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-environment-setup-ide5.png\" alt=\"Kotlin Environment Setup IDE 5\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Install JDK and Setup JDK path Since, Kotlin runs on JVM, it is necessary to install JDK and setup the JDK and JRE path in local system environment variable. Use this link&nbsp;https://www.codemeals.com/how-to-set-path-in-java&nbsp;to setup JDK path. Install IDE for Kotlin There are various Java IDE available which supports Kotlin project development. We can choose these IDE [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/697"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=697"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/697/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=697"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=697"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=697"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 699,
    "date": "2020-08-22T05:46:29",
    "date_gmt": "2020-08-22T05:46:29",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=699"
    },
    "modified": "2020-08-22T05:46:29",
    "modified_gmt": "2020-08-22T05:46:29",
    "slug": "kotlin-first-program-printing-helloworld",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-first-program-printing-helloworld/",
    "title": {
      "rendered": "First Program"
    },
    "content": {
      "rendered": "\n<p>Let&#8217;s create a Kotlin first example using IntelliJ IDEA IDE.</p>\n\n\n\n<h2>Steps to Create First Example</h2>\n\n\n\n<p><strong>1.</strong>&nbsp;Open IntelliJ IDEA and click on Create New Project&#8217;.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-first-program-on-ide.png\" alt=\"Kotlin First Program IDE\"/></figure>\n\n\n\n<p><strong>2.</strong>&nbsp;Select Java option, provide project SDK path and mark check on Kotlin/JVM frameworks.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-first-program-on-ide1.png\" alt=\"Kotlin First Program IDE 1\"/></figure>\n\n\n\n<p><strong>3.</strong>&nbsp;Provide the project details in new frame and click &#8216;Finish&#8217;.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-first-program-on-ide2.png\" alt=\"Kotlin First Program IDE 2\"/></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>4. Create a new Kotlin file to run Kotlin first example. Go to src ->New->Kotlin File/Class.</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-first-program-on-ide3.png\" alt=\"Kotlin First Program IDE 3\"/></figure>\n\n\n\n<p><strong>5.</strong>&nbsp;Enter the file name &#8216;HelloWorld&#8217; and click &#8216;OK&#8217;.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-first-program-on-ide4.png\" alt=\"Kotlin First Program IDE 4\"/></figure>\n\n\n\n<p><strong>6.</strong>&nbsp;Write the following code in &#8216;HelloWorld.kt&#8217; file. Kotlin files and classes are saved with &#8220;.kt&#8221; extension.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    println(\"Hello World!\")  \n}  </code></pre>\n\n\n\n<p>We will discuss the detail of this code later in upcoming tutorial.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-first-program-on-ide5.png\" alt=\"Kotlin First Program IDE 5\"/></figure>\n\n\n\n<p><strong>7.</strong>&nbsp;Now we can run this program by right clicking on file and select Run option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-first-program-on-ide6.png\" alt=\"Kotlin First Program IDE 6\"/></figure>\n\n\n\n<p><strong>8.</strong>&nbsp;Finally, we got the output of program on console, displaying &#8216;HelloWorld&#8217; message.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/kotlin/images/kotlin-first-program-on-ide7.png\" alt=\"Kotlin First Program IDE 7\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Let&#8217;s create a Kotlin first example using IntelliJ IDEA IDE. Steps to Create First Example 1.&nbsp;Open IntelliJ IDEA and click on Create New Project&#8217;. 2.&nbsp;Select Java option, provide project SDK path and mark check on Kotlin/JVM frameworks. 3.&nbsp;Provide the project details in new frame and click &#8216;Finish&#8217;. 5.&nbsp;Enter the file name &#8216;HelloWorld&#8217; and click &#8216;OK&#8217;. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/699"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=699"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/699/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=699"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=699"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=699"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 701,
    "date": "2020-08-22T05:48:26",
    "date_gmt": "2020-08-22T05:48:26",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=701"
    },
    "modified": "2020-08-22T05:48:26",
    "modified_gmt": "2020-08-22T05:48:26",
    "slug": "kotlin-variable",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-variable/",
    "title": {
      "rendered": "Variable"
    },
    "content": {
      "rendered": "\n<p>Variable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program.</p>\n\n\n\n<h2>Variable Declaration</h2>\n\n\n\n<p>Kotlin variable is declared using keyword&nbsp;<strong>var</strong>&nbsp;and&nbsp;<strong>val</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var language =\"Java\"  \nval salary = 30000  </code></pre>\n\n\n\n<p>The difference between var and val is specified later on this page.</p>\n\n\n\n<p>Here, variable language is String type and variable salary is Int type. We don&#8217;t require specifying the type of variable explicitly. Kotlin complier knows this by initilizer expression (&#8220;Java&#8221; is a String and 30000 is an Int value). This is called type inference in programming.</p>\n\n\n\n<p>We can also explicitly specify the type of variable while declaring it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var language: String =\"Java\"  \nval salary: Int = 30000  </code></pre>\n\n\n\n<p>It is not necessary to initialize variable at the time of its declaration. Variable can be initialized later on when the program is executed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var language: String  \n... ... ...  \nlanguage = \"Java\"  \nval salary: Int  \n... ... ...  \nsalary = 30000  </code></pre>\n\n\n\n<h3>Difference between var and val</h3>\n\n\n\n<ul><li><strong>var</strong>&nbsp;(Mutable variable): We can change the value of variable declared using&nbsp;<strong>var</strong>&nbsp;keyword later in the program.</li><li><strong>val</strong>&nbsp;(Immutable variable): We cannot change the value of variable which is declared using&nbsp;<strong>val</strong>&nbsp;keyword.</li></ul>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>var salary = 30000  \nsalary = 40000 //execute  </code></pre>\n\n\n\n<p>Here, the value of variable salary can be changed (from 30000 to 40000) because variable salary is declared using&nbsp;<strong>var</strong>&nbsp;keyword.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val language = \"Java\"  \nlanguage = \"Kotlin\" //Error  </code></pre>\n\n\n\n<p>Here, we cannot re-assign the variable language from &#8220;Java&#8221; to &#8220;Kotlin&#8221; because the variable is declared using&nbsp;<strong>val</strong>&nbsp;keyword.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Variable refers to a memory location. It is used to store data. The data of variable can be changed and reused depending on condition or on information passed to the program. Variable Declaration Kotlin variable is declared using keyword&nbsp;var&nbsp;and&nbsp;val. The difference between var and val is specified later on this page. Here, variable language is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/701"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=701"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/701/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=701"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=701"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=701"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 703,
    "date": "2020-08-22T05:50:55",
    "date_gmt": "2020-08-22T05:50:55",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=703"
    },
    "modified": "2020-08-22T05:50:55",
    "modified_gmt": "2020-08-22T05:50:55",
    "slug": "kotlin-data-type",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-data-type/",
    "title": {
      "rendered": "Data Type"
    },
    "content": {
      "rendered": "\n<p><strong>Data type</strong>&nbsp;(basic type) refers to type and size of data associated with variables and functions. Data type is used for declaration of memory location of variable which determines the features of data.</p>\n\n\n\n<p>In Kotlin, everything is an object, which means we can call member function and properties on any variable.</p>\n\n\n\n<p>Kotlin built in data type are categorized as following different categories:</p>\n\n\n\n<ul><li>Number</li><li>Character</li><li>Boolean</li><li>Array</li><li>String</li></ul>\n\n\n\n<h2>Number Types</h2>\n\n\n\n<p>Number types of data are those which hold only number type data variables. It is further categorized into different Integer and Floating point.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Data Type</th><th>Bit Width (Size)</th><th>Data Range</th></tr><tr><td>Byte</td><td>8 bit</td><td>-128 to 127</td></tr><tr><td>Short</td><td>16 bit</td><td>-32768 to 32767</td></tr><tr><td>Int</td><td>32 bit</td><td>-2,147,483,648 to 2,147,483,647</td></tr><tr><td>Long</td><td>64 bit</td><td>-9,223,372,036,854,775,808 to +9,223,372,036,854,775,807</td></tr><tr><td>Float</td><td>32 bit</td><td>1.40129846432481707e-45 to 3.40282346638528860e+38</td></tr><tr><td>Double</td><td>64 bit</td><td>4.94065645841246544e-324 to 1.79769313486231570e+308</td></tr></tbody></table></figure>\n\n\n\n<h2>Character (Char) Data Type</h2>\n\n\n\n<p>Characters are represented using the keyword&nbsp;<strong>Char</strong>. Char types are declared using single quotes (&#8221;).</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Data Type</th><th>Bit Width (Size)</th><th>Data Range</th></tr><tr><td>Char</td><td>4 bit</td><td>-128 to 127</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>val value1 = 'A'  \n//or  \nval  value2: Char  \nvalue2= 'A'  </code></pre>\n\n\n\n<h2>Boolean Data Types</h2>\n\n\n\n<p>Boolean data is represented using the type&nbsp;<strong>Boolean</strong>. It contains values either true or false.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Data Type</th><th>Bit Width (Size)</th><th>Data Value</th></tr><tr><td>Boolean</td><td>1 bit</td><td>true or false</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>val flag = true  </code></pre>\n\n\n\n<h2>Array</h2>\n\n\n\n<p>Arrays in Kotlin are represented by the Array class. Arrays are created using library function arrayOf() and Array() constructor. Array has get (), set() function, size property as well as some other useful member functions.</p>\n\n\n\n<h3>Creating Array using library function arrayOf()</h3>\n\n\n\n<p>The arrayOf() function creates array of wrapper types. The item value are passed inside arrayOf() function like arrayOf(1,2,3) which creates an array[1,2,3].</p>\n\n\n\n<p>The elements of array are accessed through their index values (array[index]). Array index are start from zero.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val id = arrayOf(1,2,3,4,5)  \nval firstId = id&#91;0]  \nval lasted = id&#91;id.size-1]  </code></pre>\n\n\n\n<h3>Creating Array using Array() constructor</h3>\n\n\n\n<p>Creating array using Array() constructor takes two arguments in Array() constructor:</p>\n\n\n\n<ol><li>First argument as a size of array, and</li><li>Second argument as the function, which is used to initialize and return the value of array element given its index.</li><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>val asc = Array(5, { i -> i * 2 }) //asc&#91;0,2,4,6,8]  </code></pre>\n\n\n\n<h2>String</h2>\n\n\n\n<p>String in Kotlin is represented by String class. String is immutable, which means we cannot change the elements in String.</p>\n\n\n\n<p><strong>String declaration:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>val text =\"Hello, codemeals\"  </code></pre>\n\n\n\n<h3>Types of String</h3>\n\n\n\n<p>String are categorize into two types. These are:</p>\n\n\n\n<p>1.&nbsp;<strong>Escaped String:&nbsp;</strong>Escape String is declared within double quote (&#8221; &#8220;) and may contain escape characters like &#8216;\\n&#8217;, &#8216;\\t&#8217;, &#8216;\\b&#8217; etc.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val text1 =\"Hello, codemeals\"  \n//or  \nval text2 =\"Hello, codemeals\\n\"  \n//or  \nval text3 =\"Hello, \\ncodemeals\"  </code></pre>\n\n\n\n<p>2.&nbsp;<strong>Raw String:&nbsp;</strong>Row String is declared within triple quote (&#8220;&#8221;&#8221; &#8220;&#8221;&#8221;). It provides facility to declare String in new lines and contain multiple lines. Row String cannot contain any escape character.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val text1 =\"\"\"  \n             Welcome   \n                 To  \n           codemeals \n    \"\"\"  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Data type&nbsp;(basic type) refers to type and size of data associated with variables and functions. Data type is used for declaration of memory location of variable which determines the features of data. In Kotlin, everything is an object, which means we can call member function and properties on any variable. Kotlin built in data type [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/703"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=703"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/703/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=703"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=703"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=703"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 705,
    "date": "2020-08-22T05:52:30",
    "date_gmt": "2020-08-22T05:52:30",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=705"
    },
    "modified": "2020-08-22T05:52:30",
    "modified_gmt": "2020-08-22T05:52:30",
    "slug": "kotlin-type-conversion",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-type-conversion/",
    "title": {
      "rendered": "Type Conversion"
    },
    "content": {
      "rendered": "\n<p>Type conversion is a process in which one data type variable is converted into another data type. In Kotlin, implicit conversion of smaller data type into larger data type is not supported (as it supports in java). For example Int cannot be assigned into Long or Double.</p>\n\n\n\n<h2>In Java</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>int value1 = 10;  \nlong value2 = value1;  //Valid code   </code></pre>\n\n\n\n<h2>In Kotlin</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var value1 = 10  \nval value2: Long = value1  //Compile error, type mismatch  </code></pre>\n\n\n\n<p>However in Kotlin, conversion is done by explicit in which smaller data type is converted into larger data type and vice-versa. This is done by using helper function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n    var value1 = 100  \n    val value2: Long =value1.toLong()  \n    println(value2)  \n}  </code></pre>\n\n\n\n<p>The list of helper functions used for numeric conversion in Kotlin is given below:</p>\n\n\n\n<ul><li>toByte()</li><li>toShort()</li><li>toInt()</li><li>toLong()</li><li>toFloat()</li><li>toDouble()</li><li>toChar()</li></ul>\n\n\n\n<h3>Kotlin Type Conversion Example</h3>\n\n\n\n<p>Let see an example to convert from Int to Long.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n    var value1 = 100  \n    val value2: Long =value1.toLong()  \n    println(value2)  \n}  </code></pre>\n\n\n\n<p>We can also converse from larger data type to smaller data type.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>n main(args : Array&lt;String>) {  \n    var value1: Long = 200  \n    val value2: Int =value1.toInt()  \n    println(value2)  \n}  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Type conversion is a process in which one data type variable is converted into another data type. In Kotlin, implicit conversion of smaller data type into larger data type is not supported (as it supports in java). For example Int cannot be assigned into Long or Double. In Java In Kotlin However in Kotlin, conversion [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/705"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=705"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/705/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=705"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=705"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=705"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 707,
    "date": "2020-08-22T05:55:16",
    "date_gmt": "2020-08-22T05:55:16",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=707"
    },
    "modified": "2020-08-22T05:55:16",
    "modified_gmt": "2020-08-22T05:55:16",
    "slug": "kotlin-operator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-operator/",
    "title": {
      "rendered": "Kotlin Operator"
    },
    "content": {
      "rendered": "\n<p><strong>Operators</strong>&nbsp;are special characters which perform operation on operands (values or variable).There are various kind of operators available in Kotlin.</p>\n\n\n\n<ul><li>Arithmetic operator</li><li>Relation operator</li><li>Assignment operator</li><li>Unary operator</li><li>Bitwise operation</li><li>Logical operator</li></ul>\n\n\n\n<h2>Arithmetic Operator</h2>\n\n\n\n<p>Arithmetic operators are used to perform basic mathematical operations such as addition (+), subtraction (-), multiplication (*), division (/) etc.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th><th>Expression</th><th>Translate to</th></tr><tr><td>+</td><td>Addition</td><td>a+b</td><td>a.plus(b)</td></tr><tr><td>&#8211;</td><td>Subtraction</td><td>a-b</td><td>a.minus(b)</td></tr><tr><td>*</td><td>Multiply</td><td>a*b</td><td>a.times(b)</td></tr><tr><td>/</td><td>Division</td><td>a/b</td><td>a.div(b)</td></tr><tr><td>%</td><td>Modulus</td><td>a%b</td><td>a.rem(b)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example of Arithmetic Operator</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \nvar a=10;  \nvar b=5;  \nprintln(a+b);  \nprintln(a-b);  \nprintln(a*b);  \nprintln(a/b);  \nprintln(a%b);  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>15\n5\n50\n2\n0\n﻿</code></pre>\n\n\n\n<h2>Relation Operator</h2>\n\n\n\n<p>Relation operator shows the relation and compares between operands. Following are the different relational operators:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th><th>Expression</th><th>Translate to</th></tr><tr><td>&gt;</td><td>greater than</td><td>a&gt;b</td><td>a.compateTo(b)&gt;0</td></tr><tr><td>&lt;</td><td>Less than</td><td>a&lt;b</td><td>a.compateTo(b)&lt;0</td></tr><tr><td>&gt;=</td><td>greater than or equal to</td><td>a&gt;=b</td><td>a.compateTo(b)&gt;=0</td></tr><tr><td>&lt;=</td><td>less than or equal to</td><td>a&lt;=b</td><td>a?.equals(b)?:(b===null)</td></tr><tr><td>==</td><td>is equal to</td><td>a==b</td><td>a?.equals(b)?:(b===null)</td></tr><tr><td>!=</td><td>not equal to</td><td>a!=b</td><td>!(a?.equals(b)?:(b===null))</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example of Relation Operator</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n    val a = 5  \n    val b = 10  \n    val max = if (a > b) {  \n        println(\"a is greater than b.\")  \n        a  \n    } else{  \n        println(\"b is greater than a.\")  \n        b  \n    }  \n    println(\"max = $max\")  \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>b is greater than a.\nmax = 10</code></pre>\n\n\n\n<h2>Assignment operator</h2>\n\n\n\n<p>Assignment operator&nbsp;<strong>&#8220;=&#8221;</strong>&nbsp;is used to assign a value to another variable. The assignment of value takes from right to left.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th><th>Expression</th><th>Convert to</th></tr><tr><td>+=</td><td>add and assign</td><td>a+=b</td><td>a.plusAssign(b)</td></tr><tr><td>-=</td><td>subtract and assign</td><td>a-=b</td><td>a.minusAssign(b)</td></tr><tr><td>*=</td><td>multiply and assign</td><td>a*=b</td><td>a.timesAssign(b)</td></tr><tr><td>/=</td><td>divide and assign</td><td>a/=b</td><td>a.divAssign(b)</td></tr><tr><td>%=</td><td>mod and assign</td><td>a%=b</td><td>a.remAssign(b)</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example of Assignment operator</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n  \n    var a =20;var b=5  \n    a+=b  \n    println(\"a+=b :\"+ a)  \n    a-=b  \n    println(\"a-=b :\"+ a)  \n    a*=b  \n    println(\"a*=b :\"+ a)  \n    a/=b  \n    println(\"a/=b :\"+ a)  \n    a%=b  \n    println(\"a%=b :\"+ a)  \n  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a+=b :25\na-=b :20\na*=b :100\na/=b :20\na%=b :0\n﻿</code></pre>\n\n\n\n<h2>Unary Operator</h2>\n\n\n\n<p>Unary operator is used with only single operand. Following are some unary operator given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th><th>Expression</th><th>Convert to</th></tr><tr><td>+</td><td>unary plus</td><td>+a</td><td>a.unaryPlus()</td></tr><tr><td>&#8211;</td><td>unary minus</td><td>-a</td><td>a.unaryMinus()</td></tr><tr><td>++</td><td>increment by 1</td><td>++a</td><td>a.inc()</td></tr><tr><td>&#8212;</td><td>decrement by 1</td><td>&#8211;a</td><td>a.dec()</td></tr><tr><td>!</td><td>not</td><td>!a</td><td>a.not()</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example of Unary Operator</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var a=10  \n    var b=5  \n    var flag = true  \n    println(\"+a :\"+ +a)  \n    println(\"-b :\"+ -b)  \n    println(\"++a :\"+ ++a)  \n    println(\"--b :\"+ --b)  \n    println(\"!flag :\"+ !flag)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>+a :10\n-b :-5\n++a :11\n--b :4\n!flag :false</code></pre>\n\n\n\n<h2>Logical Operator</h2>\n\n\n\n<p>Logical operators are used to check conditions between operands. List of logical operators are given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th><th>Expression</th><th>Convert to</th></tr><tr><td>&amp;&amp;</td><td>return true if all expression are true</td><td>(a&gt;b) &amp;&amp; (a&gt;c)</td><td>(a&gt;b) and (a&gt;c)</td></tr><tr><td>||</td><td>return true if any expression are true</td><td>(a&gt;b) || (a&gt;c)</td><td>(a&gt;b) or(a&gt;c)</td></tr><tr><td>!</td><td>return complement of expression</td><td>!a</td><td>a.not()</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example of Logical Operator</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var a=10  \n    var b=5  \n    var c=15  \n    var flag = false  \n    var result: Boolean  \n    result = (a>b) &amp;&amp; (a>c)  \n    println(\"(a>b) &amp;&amp; (a>c) :\"+ result)  \n    result = (a>b) || (a>c)  \n    println(\"(a>b) || (a>c) :\"+ result)  \n    result = !flag  \n    println(\"!flag :\"+ result)  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>(a>b) &amp;&amp; (a>c) :false\n(a>b) || (a>c) :true\n!flag :true</code></pre>\n\n\n\n<h2>Bitwise Operation</h2>\n\n\n\n<p>In Kotlin, there is not any special bitwise operator. Bitwise operation is done using named function.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Named Function</th><th>Description</th><th>Expression</th></tr><tr><td>shl (bits)</td><td>signed shift left</td><td>a.shl(b)</td></tr><tr><td>shr (bits)</td><td>signed shift right</td><td>a.shr(b)</td></tr><tr><td>ushr (bits)</td><td>unsigned shift right</td><td>a.ushr(b)</td></tr><tr><td>and (bits)</td><td>bitwise and</td><td>a.and(b)</td></tr><tr><td>or (bits)</td><td>bitwise or</td><td>a.or(b)</td></tr><tr><td>xor (bits)</td><td>bitwise xor</td><td>a.xor(b)</td></tr><tr><td>inv()</td><td>bitwise inverse</td><td>a.inv()</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example of Bitwise Operation</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var a=10  \n    var b=2  \n  \n    println(\"a.shl(b): \"+a.shl(b))  \n    println(\"a.shr(b): \"+a.shr(b))  \n    println(\"a.ushr(b:) \"+a.ushr(b))  \n    println(\"a.and(b): \"+a.and(b))  \n    println(\"a.or(b): \"+a.or(b))  \n    println(\"a.xor(b): \"+a.xor(b))  \n    println(\"a.inv(): \"+a.inv())  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a.shl(b): 40\na.shr(b): 2\na.ushr(b:) 2\na.and(b): 2\na.or(b): 10\na.xor(b): 8\na.inv(): -11</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Operators&nbsp;are special characters which perform operation on operands (values or variable).There are various kind of operators available in Kotlin. Arithmetic operator Relation operator Assignment operator Unary operator Bitwise operation Logical operator Arithmetic Operator Arithmetic operators are used to perform basic mathematical operations such as addition (+), subtraction (-), multiplication (*), division (/) etc. Operator Description [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/707"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=707"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/707/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=707"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=707"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=707"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 709,
    "date": "2020-08-22T05:57:06",
    "date_gmt": "2020-08-22T05:57:06",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=709"
    },
    "modified": "2020-08-22T05:57:06",
    "modified_gmt": "2020-08-22T05:57:06",
    "slug": "kotlin-standard-input-output",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-standard-input-output/",
    "title": {
      "rendered": "Standard Input/Output"
    },
    "content": {
      "rendered": "\n<p>Kotlin standard input output operations are performed to flow byte stream from input device (keyboard) to main memory and from main memory to output device (screen).</p>\n\n\n\n<h2>Kotlin Output</h2>\n\n\n\n<p>Kotlin output operation is performed using the standard methods&nbsp;<strong>print()</strong>&nbsp;and&nbsp;<strong>println()</strong>. Let&#8217;s see an example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World!\nWelcome to  codemeals</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World!\nWelcome to  codemeals</code></pre>\n\n\n\n<p>The methods print() and println() are internally call System.out.print() and System.out.println() respectively.</p>\n\n\n\n<h3>Difference between print() and println() methods:</h3>\n\n\n\n<ul><li><strong>print():</strong>&nbsp;print() method is used to print values provided inside the method &#8220;()&#8221;.</li><li><strong>println():</strong>&nbsp;println() method is used to print values provided inside the method &#8220;()&#8221; and moves cursor to the beginning of next line.</li></ul>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    println(10)  \n    println(\"Welcome to  codemeals\")  \n    print(20)  \n    print(\"Hello\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\nWelcome to  codemeals\n20Hello</code></pre>\n\n\n\n<h2>Kotlin Input</h2>\n\n\n\n<p>Kotlin has standard library function&nbsp;<strong>readLine()</strong>&nbsp;which is used for reads line of string input from standard input stream. It returns the line read or null. Let&#8217;s see an example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    println(\"Enter your name\")  \n    val name = readLine()  \n    println(\"Enter your age\")  \n    var age: Int =Integer.valueOf(readLine())  \n    println(\"Your name is $name and your age is $age\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Scanner  \nfun main(args: Array&lt;String>) {  \n    val read = Scanner(System.`in`)  \n    println(\"Enter your age\")  \n    var age = read.nextInt()  \n    println(\"Your input age is \"+age)  \n} </code></pre>\n\n\n\n<p>While using the readLine() function, input lines other than String are explicitly converted into their corresponding types.</p>\n\n\n\n<p>To input other data type rather than String, we need to use Scanner object of java.util.Scanner class from Java standard library.</p>\n\n\n\n<p><strong>Example Getting Integer Input</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Scanner  \nfun main(args: Array&lt;String>) {  \n    val read = Scanner(System.`in`)  \n    println(\"Enter your age\")  \n    var age = read.nextInt()  \n    println(\"Your input age is \"+age)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter your age\n25\nYour input age is 25</code></pre>\n\n\n\n<p>Here nextInt() is a method which takes integer input and stores in integer variable. The other data types Boolean, Float, Long and Double uses nextBoolean(), nextFloat(), nextLong() and nextDouble() to get input from user.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin standard input output operations are performed to flow byte stream from input device (keyboard) to main memory and from main memory to output device (screen). Kotlin Output Kotlin output operation is performed using the standard methods&nbsp;print()&nbsp;and&nbsp;println(). Let&#8217;s see an example: Output The methods print() and println() are internally call System.out.print() and System.out.println() respectively. Difference [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/709"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=709"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/709/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=709"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=709"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=709"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 711,
    "date": "2020-08-22T05:58:10",
    "date_gmt": "2020-08-22T05:58:10",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=711"
    },
    "modified": "2020-08-22T05:58:10",
    "modified_gmt": "2020-08-22T05:58:10",
    "slug": "kotlin-comment",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-comment/",
    "title": {
      "rendered": "Kotlin Comment"
    },
    "content": {
      "rendered": "\n<p>Comments are the statements that are used for documentation purpose. Comments are ignored by compiler so that don&#8217;t execute. We can also used it for providing information about the line of code. There are two types of comments in Kotlin.</p>\n\n\n\n<ol><li>Single line comment.</li><li>Multi line comment.</li></ol>\n\n\n\n<h2>Single line comment</h2>\n\n\n\n<p>Single line comment is used for commenting single line of statement. It is done by using &#8216;//&#8217; (double slash). For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n// this statement used for print   \n    println(\"Hello World!\")  \n} </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World!</code></pre>\n\n\n\n<h2>Multi line comment</h2>\n\n\n\n<p>Multi line comment is used for commenting multiple line of statement. It is done by using /* */ (start with slash strict and end with star slash). For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n/* this statement \n   is used \n   for print */  \n    println(\"Hello World!\")  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World!</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Comments are the statements that are used for documentation purpose. Comments are ignored by compiler so that don&#8217;t execute. We can also used it for providing information about the line of code. There are two types of comments in Kotlin. Single line comment. Multi line comment. Single line comment Single line comment is used for [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/711"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=711"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/711/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=711"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=711"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=711"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 713,
    "date": "2020-08-22T06:00:51",
    "date_gmt": "2020-08-22T06:00:51",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=713"
    },
    "modified": "2020-08-22T06:00:51",
    "modified_gmt": "2020-08-22T06:00:51",
    "slug": "kotlin-if-expression",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-if-expression/",
    "title": {
      "rendered": "Kotlin if Expression"
    },
    "content": {
      "rendered": "\n<p>In Kotlin,&nbsp;<strong>if</strong>&nbsp;is an expression is which returns a value. It is used for control the flow of program structure. There is various type of if expression in Kotlin.</p>\n\n\n\n<ul><li>if-else expression</li><li>if-else if-else ladder expression</li><li>nested if expression</li></ul>\n\n\n\n<h2>Traditional if Statement</h2>\n\n\n\n<p>Syntax of traditional <strong>if</strong> statement</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condation){  \n//code statement  \n}  </code></pre>\n\n\n\n<p>Syntax of traditional <strong>if else</strong> statement</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condation){  \n//code statement  \n}  \nelse{  \n//code statement  \n}</code></pre>\n\n\n\n<h2>Kotlin if-else Expression</h2>\n\n\n\n<p>As if is an expression it is not used as standalone, it is used with if-else expression and the result of an if-else expression is assign into a variable.</p>\n\n\n\n<p>Syntax of if-else expression</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val returnValue = if (condation) {  \n     //code statement  \n    } else {  \n     // code statement  \n    }  \n    println(returnValue)  </code></pre>\n\n\n\n<p><strong>Kotlin if-else Expression Example</strong></p>\n\n\n\n<p>Let&#8217;s see an example of if-else expression.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n        val num1 = 10  \n        val num2 =20  \n        val result = if (num1 > num2) {  \n            \"$num1 is greater than $num2\"  \n        } else {  \n            \"$num1 is smaller than $num2\"  \n        }  \n        println(result)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>10 is smaller than 20</code></pre>\n\n\n\n<p>We can remove the curly braces of if-else body by writing if expression in only one statement.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n        val num1 = 10  \n        val num2 =20  \n        val result = if (num1 > num2) \"$num1 is greater than $num2\" else \"$num1 is smaller than $num2\"  \n        println(result)  \n}  </code></pre>\n\n\n\n<p>Using if-else expression in one single line statement is like ternary operator in Java. Kotlin does not support any ternary operator.</p>\n\n\n\n<h2>Kotlin if-else if-else Ladder Expression</h2>\n\n\n\n<p>Let&#8217;s see an example of if-else if-else ladder expression.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val num = 10  \n    val result = if (num > 0){  \n        \"$num is positive\"  \n    }else if(num &lt; 0){  \n        \"$num is negative\"  \n    }else{  \n        \"$num is zero\"  \n    }  \n    println(result)  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>10 is positive</code></pre>\n\n\n\n<h2>Kotlin Nested if Expression</h2>\n\n\n\n<p>Let&#8217;s see an example of nested if expression.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val num1 = 25  \n    val num2 = 20  \n    val num3 = 30  \n    val result = if (num1 > num2){  \n  \n        val max = if(num1 > num3){  \n            num1  \n        }else{  \n            num3  \n        }  \n        \"body of if \"+max  \n    }else if(num2 > num3){  \n        \"body of else if\"+num2  \n    }else{  \n        \"body of else \"+num3  \n    }  \n    println(\"$result\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>body of if 30</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Kotlin,&nbsp;if&nbsp;is an expression is which returns a value. It is used for control the flow of program structure. There is various type of if expression in Kotlin. if-else expression if-else if-else ladder expression nested if expression Traditional if Statement Syntax of traditional if statement Syntax of traditional if else statement Kotlin if-else Expression As if is an expression [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/713"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=713"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/713/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=713"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=713"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=713"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 715,
    "date": "2020-08-22T06:03:44",
    "date_gmt": "2020-08-22T06:03:44",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=715"
    },
    "modified": "2020-08-22T06:03:44",
    "modified_gmt": "2020-08-22T06:03:44",
    "slug": "kotlin-when-expression",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-when-expression/",
    "title": {
      "rendered": "Kotlin when Expression"
    },
    "content": {
      "rendered": "\n<p>Kotlin, when expression is a conditional expression which returns the value. Kotlin, when expression is replacement of switch statement. Kotlin, when expression works as a switch statement of other language (Java, C++, C).</p>\n\n\n\n<h3>Using when as an Expression</h3>\n\n\n\n<p>Let&#8217;s see a simple example of when expression.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var number = 4  \n    var numberProvided = when(number) {  \n        1 -> \"One\"  \n        2 -> \"Two\"  \n        3 -> \"Three\"  \n        4 -> \"Four\"  \n        5 -> \"Five\"  \n        else -> \"invalid number\"  \n    }  \n    println(\"You provide $numberProvided\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>You provide Four</code></pre>\n\n\n\n<h3>Using when Without Expression</h3>\n\n\n\n<p>It is not mandatory to use when as an expression, it can be used as normally as it used in other language.</p>\n\n\n\n<p><strong>For Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    var number = 4  \n    when(number) {  \n        1 -> println(\"One\")  \n        2 -> println(\"Two\")  \n        3 -> println(\"Three\")  \n        4 -> println(\"Four\")  \n        5 -> println(\"Five\")  \n        else -> println(\"invalid number\")  \n    }  \n  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Four\n﻿</code></pre>\n\n\n\n<h3>Multiple Statement of when Using Braces</h3>\n\n\n\n<p>We can use multiple statement enclosed within block of condition.</p>\n\n\n\n<p><strong>For Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Monday\nFirst day of the week</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Monday\nFirst day of the week</code></pre>\n\n\n\n<h3>Multiple branches of when</h3>\n\n\n\n<p>We can use multiple branches of condition separated with a comma. It is used, when we need to run a same logic for multiple choices.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var number = 8  \n    when(number) {  \n        3, 4, 5, 6 ->  \n            println(\"It is summer season\")  \n        7, 8, 9 ->  \n            println(\"It is rainy season\")  \n        10, 11 ->  \n            println(\"It is autumn season\")  \n        12, 1, 2 ->  \n            println(\"It is winter season\")  \n        else -> println(\"invalid input\")  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>It is rainy season</code></pre>\n\n\n\n<h3>Using when in the range</h3>\n\n\n\n<p>The when expression also check the ranges of input provided in when condition. A range is created using .. (double dot) operator. The in operator is used to check if a value belongs to a range.</p>\n\n\n\n<p><strong>For Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var number = 7  \n    when(number) {  \n        in 1..5 -> println(\"Input is provided in the range 1 to 5\")  \n        in 6..10 -> println(\"Input is provided in the range 6 to 10\")  \n        else -> println(\"none of the above\")  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Input is provided in the range 6 to 10</code></pre>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin, when expression is a conditional expression which returns the value. Kotlin, when expression is replacement of switch statement. Kotlin, when expression works as a switch statement of other language (Java, C++, C). Using when as an Expression Let&#8217;s see a simple example of when expression. Output: Using when Without Expression It is not mandatory [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/715"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=715"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/715/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=715"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=715"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=715"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 717,
    "date": "2020-08-22T06:06:18",
    "date_gmt": "2020-08-22T06:06:18",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=717"
    },
    "modified": "2020-08-22T06:06:18",
    "modified_gmt": "2020-08-22T06:06:18",
    "slug": "kotlin-for-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-for-loop/",
    "title": {
      "rendered": "Kotlin for Loop"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>for</strong>&nbsp;loop is used to&nbsp;<em>iterate</em>&nbsp;a part of program several times. It iterates through arrays, ranges, collections, or anything that provides for iterate. Kotlin for loop is equivalent to the&nbsp;<strong>foreach</strong>&nbsp;loop in languages like C#.</p>\n\n\n\n<p><strong>Syntax of for loop in Kotlin:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n    val marks = arrayOf(80,85,60,90,70)  \n    for(item in marks){  \n        println(item)  \n    }  \n}  </code></pre>\n\n\n\n<h3>Iterate through array</h3>\n\n\n\n<p>Let&#8217;s see a simple example of iterating the elements of array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n    val marks = arrayOf(80,85,60,90,70)  \n    for(item in marks){  \n        println(item)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>80\n85\n60\n90\n70</code></pre>\n\n\n\n<p>If the body of for loop contains only one single line of statement, it is not necessary to enclose within curly braces <strong>{}.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n    val marks = arrayOf(80,85,60,90,70)  \n    for(item in marks)  \n        println(item)  \n}  </code></pre>\n\n\n\n<p>The elements of an array are iterated on the basis of <em>indices</em> (index) of array. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n     \n    val marks = arrayOf(80,85,60,90,70)  \n    for(item in marks.indices)  \n       println(\"marks&#91;$item]: \"+ marks&#91;item])  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>marks&#91;0]: 80\nmarks&#91;1]: 85\nmarks&#91;2]: 60\nmarks&#91;3]: 90\nmarks&#91;4]: 70</code></pre>\n\n\n\n<h3>Iterate through range</h3>\n\n\n\n<p>Let&#8217;s see an example of iterating the elements of range.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args : Array&lt;String>) {  \n  \n    print(\"for (i in 1..5) print(i) = \")  \n    for (i in 1..5) print(i)  \n    println()  \n    print(\"for (i in 5..1) print(i) = \")  \n    for (i in 5..1) print(i)             // prints nothing  \n    println()  \n    print(\"for (i in 5 downTo 1) print(i) = \")  \n    for (i in 5 downTo 1) print(i)  \n    println()  \n    print(\"for (i in 5 downTo 2) print(i) = \")  \n    for (i in 5 downTo 2) print(i)  \n    println()  \n    print(\"for (i in 1..5 step 2) print(i) = \")  \n    for (i in 1..5 step 2) print(i)  \n    println()  \n    print(\"for (i in 5 downTo 1 step 2) print(i) = \")  \n    for (i in 5 downTo 1 step 2) print(i)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for (i in 1..5) print(i) = 12345\nfor (i in 5..1) print(i) = \nfor (i in 5 downTo 1) print(i) = 54321\nfor (i in 5 downTo 2) print(i) = 5432\nfor (i in 1..5 step 2) print(i) = 135\nfor (i in 5 downTo 1 step 2) print(i) = 531</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;for&nbsp;loop is used to&nbsp;iterate&nbsp;a part of program several times. It iterates through arrays, ranges, collections, or anything that provides for iterate. Kotlin for loop is equivalent to the&nbsp;foreach&nbsp;loop in languages like C#. Syntax of for loop in Kotlin: Iterate through array Let&#8217;s see a simple example of iterating the elements of array. Output: If the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/717"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=717"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/717/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=717"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=717"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=717"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 719,
    "date": "2020-08-22T06:08:37",
    "date_gmt": "2020-08-22T06:08:37",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=719"
    },
    "modified": "2020-08-22T06:08:37",
    "modified_gmt": "2020-08-22T06:08:37",
    "slug": "kotlin-while-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-while-loop/",
    "title": {
      "rendered": "Kotlin while Loop"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<strong>while loop</strong>&nbsp;is used to iterate a part of program several time. Loop executed the block of code until the condition has true. Kotlin while loop is similar to Java while loop.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>while(condition){  \n//body of loop  \n} </code></pre>\n\n\n\n<h3>Example of while Loop</h3>\n\n\n\n<p>Let&#8217;s see a simple example of while loop printing value from 1 to 5.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var i = 1  \n    while (i&lt;=5){  \n        println(i)  \n        i++  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<h3>Kotlin Infinite while Loop</h3>\n\n\n\n<p>The while loop executes a block of code to infinite times, if while condition remain true.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n        while (true){  \n        println(\"infinite loop\")  \n        }  \n}  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>infinite loop\ninfinite loop\ninfinite loop\n.\n.\n.\n.\ninfinite loop\ninfinite loop\n\n \ninfinite loop\ninfinite loop\ninfinite loop\ninfinite loop</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;while loop&nbsp;is used to iterate a part of program several time. Loop executed the block of code until the condition has true. Kotlin while loop is similar to Java while loop. Syntax Example of while Loop Let&#8217;s see a simple example of while loop printing value from 1 to 5. Output: Kotlin Infinite while Loop [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/719"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=719"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/719/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=719"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=719"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=719"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 721,
    "date": "2020-08-22T06:10:36",
    "date_gmt": "2020-08-22T06:10:36",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=721"
    },
    "modified": "2020-08-22T06:10:36",
    "modified_gmt": "2020-08-22T06:10:36",
    "slug": "kotlin-do-while-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-do-while-loop/",
    "title": {
      "rendered": "do-while Loop"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<strong>do-while</strong>&nbsp;loop is similar to&nbsp;<strong>while</strong>&nbsp;loop except one key difference. A&nbsp;<em>do-while</em>&nbsp;loop first execute the body of&nbsp;<strong>do</strong>&nbsp;block after that it check the condition of while.</p>\n\n\n\n<p>As a do block of&nbsp;<em>do-while</em>&nbsp;loop executed first before checking the condition,&nbsp;<em>do-while</em>&nbsp;loop execute at least once even the condition within&nbsp;<em>while</em>&nbsp;is false. The&nbsp;<em>while</em>&nbsp;statement of do-while loop end with &#8220;;&#8221; (semicolon).</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>do{  \n//body of do block  \n}  \nwhile(condition); </code></pre>\n\n\n\n<p><strong>Example of do -while loop</strong></p>\n\n\n\n<p>Let&#8217;s see a simple example of do-while loop printing value 1 to 5.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var i = 1  \n    do {  \n        println(i)  \n        i++  \n    }  \n    while (i&lt;=5);  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5</code></pre>\n\n\n\n<p><strong>Example of do -while loop even condition of while if false</strong></p>\n\n\n\n<p>In this example do-while loop execute at once time even the condition of&nbsp;<em>while</em>&nbsp;is false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var i = 6  \n    do {  \n        println(i)  \n        i++  \n    }  \n    while (i&lt;=5);  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>6</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;do-while&nbsp;loop is similar to&nbsp;while&nbsp;loop except one key difference. A&nbsp;do-while&nbsp;loop first execute the body of&nbsp;do&nbsp;block after that it check the condition of while. As a do block of&nbsp;do-while&nbsp;loop executed first before checking the condition,&nbsp;do-while&nbsp;loop execute at least once even the condition within&nbsp;while&nbsp;is false. The&nbsp;while&nbsp;statement of do-while loop end with &#8220;;&#8221; (semicolon). Syntax Example of do -while [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/721"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=721"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/721/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=721"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=721"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=721"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 723,
    "date": "2020-08-22T06:15:05",
    "date_gmt": "2020-08-22T06:15:05",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=723"
    },
    "modified": "2020-08-22T06:15:05",
    "modified_gmt": "2020-08-22T06:15:05",
    "slug": "kotlin-return-and-jump",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-return-and-jump/",
    "title": {
      "rendered": "Return and Jump"
    },
    "content": {
      "rendered": "\n<p>There are three jump expressions in Kotlin. These jump expressions are used for control the flow of program execution. These jump structures are:</p>\n\n\n\n<ul><li>break</li><li>continue</li><li>return</li></ul>\n\n\n\n<h2>Break Expression</h2>\n\n\n\n<p>A&nbsp;<strong>break</strong>&nbsp;expression is used for terminate the nearest enclosing loop. It is almost used with if-else condition.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(..){  \n       //body of for  \n       if(checkCondition){  \n           break;  \n       }  \n} </code></pre>\n\n\n\n<p>In the above example,&nbsp;<strong>for</strong>&nbsp;loop terminates its loop when&nbsp;<strong>if</strong>&nbsp;condition execute break expression.</p>\n\n\n\n<p><strong>Kotlin break example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    for (i in 1..5) {  \n        if (i == 3) {  \n            break  \n        }  \n        println(i)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2</code></pre>\n\n\n\n<p>In the above example, when the value of&nbsp;<strong>i</strong>&nbsp;became equal to 3 and satisfy the&nbsp;<strong>if</strong>&nbsp;condition(i==3) than the break expression execute and terminate&nbsp;<strong>for</strong>&nbsp;loop.</p>\n\n\n\n<h2>Kotlin Labeled break Expression</h2>\n\n\n\n<p>Labeled is the form of identifier followed by the&nbsp;<strong>@</strong>&nbsp;sign, for example&nbsp;<strong>abc@</strong>,&nbsp;<strong>test@</strong>. To make an expression as label, we just put a label in front of expression.</p>\n\n\n\n<p>Kotlin labeled break expression is used to terminate the specific loop. This is done by using break expression with&nbsp;<strong>@</strong>&nbsp;sign followed by label name (break@loop).</p>\n\n\n\n<p><strong>Kotlin labeled break example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    loop@ for (i in 1..3) {  \n        for (j in 1..3) {  \n            println(\"i = $i and j = $j\")  \n            if (i == 2)  \n                break@loop  \n        }  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>i = 1 and j = 1\ni = 1 and j = 2\ni = 1 and j = 3\ni = 2 and j = 1</code></pre>\n\n\n\n<p>There are three jump expressions in Kotlin. These jump expressions are used for control the flow of program execution. These jump structures are:</p>\n\n\n\n<ul><li>break</li><li>continue</li><li>return</li></ul>\n\n\n\n<h2>Break Expression</h2>\n\n\n\n<p>A&nbsp;<strong>break</strong>&nbsp;expression is used for terminate the nearest enclosing loop. It is almost used with if-else condition.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(..){  \n       //body of for  \n       if(checkCondition){  \n           break;  \n       }  \n} </code></pre>\n\n\n\n<p>In the above example,&nbsp;<strong>for</strong>&nbsp;loop terminates its loop when&nbsp;<strong>if</strong>&nbsp;condition execute break expression.</p>\n\n\n\n<p><strong>Kotlin break example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    for (i in 1..5) {  \n        if (i == 3) {  \n            break  \n        }  \n        println(i)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2</code></pre>\n\n\n\n<p>In the above example, when the value of&nbsp;<strong>i</strong>&nbsp;became equal to 3 and satisfy the&nbsp;<strong>if</strong>&nbsp;condition(i==3) than the break expression execute and terminate&nbsp;<strong>for</strong>&nbsp;loop.</p>\n\n\n\n<h2>Kotlin Labeled break Expression</h2>\n\n\n\n<p>Labeled is the form of identifier followed by the&nbsp;<strong>@</strong>&nbsp;sign, for example&nbsp;<strong>abc@</strong>,&nbsp;<strong>test@</strong>. To make an expression as label, we just put a label in front of expression.</p>\n\n\n\n<p>Kotlin labeled break expression is used to terminate the specific loop. This is done by using break expression with&nbsp;<strong>@</strong>&nbsp;sign followed by label name (break@loop).</p>\n\n\n\n<p>In the above example, when the value of i became 2 and satisfy the&nbsp;<strong>if</strong>&nbsp;condition which execute break expression followed by labeled name. The&nbsp;<em>break</em>&nbsp;expression followed by labeled name terminates the body of label identifier.</p>\n\n\n\n<p>In the above example, when the value of i became 2 and satisfy the&nbsp;<strong>if</strong>&nbsp;condition which execute break expression followed by labeled name. The&nbsp;<em>break</em>&nbsp;expression followed by labeled name terminates the body of label identifier.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are three jump expressions in Kotlin. These jump expressions are used for control the flow of program execution. These jump structures are: break continue return Break Expression A&nbsp;break&nbsp;expression is used for terminate the nearest enclosing loop. It is almost used with if-else condition. For example: In the above example,&nbsp;for&nbsp;loop terminates its loop when&nbsp;if&nbsp;condition execute [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/723"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=723"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/723/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=723"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=723"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=723"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 725,
    "date": "2020-08-22T06:32:18",
    "date_gmt": "2020-08-22T06:32:18",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=725"
    },
    "modified": "2020-08-22T06:32:18",
    "modified_gmt": "2020-08-22T06:32:18",
    "slug": "kotlin-continue-jump-structure",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-continue-jump-structure/",
    "title": {
      "rendered": "continue Jump Structure"
    },
    "content": {
      "rendered": "\n<p>Kotlin,&nbsp;<strong>continue</strong>&nbsp;statement is used to repeat the loop. It continues the current flow of the program and skips the remaining code at specified condition.</p>\n\n\n\n<p>The&nbsp;<em>continue</em>&nbsp;statement within a nested loop only affects the inner loop.</p>\n\n\n\n<p><strong>For example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for(..){  \n       //body of for above if  \n       if(checkCondition){  \n           continue  \n       }  \n//body of for below if  \n}</code></pre>\n\n\n\n<p>In the above example,&nbsp;<strong>for</strong>&nbsp;loop repeat its loop when&nbsp;<strong>if</strong>&nbsp;condition execute continue. The&nbsp;<em>continue</em>&nbsp;statement makes repetition of loop without executing the below code of if condition.</p>\n\n\n\n<p><strong>Kotlin continue example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n        for (i in 1..3) {  \n            println(\"i = $i\")  \n            if (j == 2) {  \n                continue  \n            }  \n            println(\"this is below if\")  \n        }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>i = 1\nthis is below if\ni = 2\ni = 3\nthis is below if</code></pre>\n\n\n\n<h3>Kotlin Labeled continue Expression</h3>\n\n\n\n<p>Labeled is the form of identifier followed by the&nbsp;<strong>@</strong>&nbsp;sign, for example&nbsp;<strong>abc@, test@.</strong>&nbsp;To make an expression as label, we just put a label in front of expression.</p>\n\n\n\n<p>Kotlin, labeled&nbsp;<em>continue</em>&nbsp;expression is used for repetition of specific loop (labeled loop). This is done by using continue expression with&nbsp;<strong>@</strong>&nbsp;sign followed by label name (continue@labelname).</p>\n\n\n\n<p><strong>Kotlin labeled continue example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    labelname@ for (i in 1..3) {  \n    for (j in 1..3) {  \n        println(\"i = $i and j = $j\")  \n        if (i == 2) {  \n            continue@labelname  \n        }  \n        println(\"this is below if\")  \n    }  \n }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">i = 1 and j = 1\nthis is below if\ni = 1 and j = 2\nthis is below if\ni = 1 and j = 3\nthis is below if\ni = 2 and j = 1\ni = 3 and j = 1\nthis is below if\ni = 3 and j = 2\nthis is below if\ni = 3 and j = 3\nthis is below if\n</pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin,&nbsp;continue&nbsp;statement is used to repeat the loop. It continues the current flow of the program and skips the remaining code at specified condition. The&nbsp;continue&nbsp;statement within a nested loop only affects the inner loop. For example In the above example,&nbsp;for&nbsp;loop repeat its loop when&nbsp;if&nbsp;condition execute continue. The&nbsp;continue&nbsp;statement makes repetition of loop without executing the below code [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/725"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=725"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/725/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=725"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=725"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=725"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 727,
    "date": "2020-08-22T06:35:23",
    "date_gmt": "2020-08-22T06:35:23",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=727"
    },
    "modified": "2020-08-22T06:35:23",
    "modified_gmt": "2020-08-22T06:35:23",
    "slug": "kotlin-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-function/",
    "title": {
      "rendered": "Function"
    },
    "content": {
      "rendered": "\n<p><strong>Function</strong>&nbsp;is a group of inter related block of code which performs a specific task. Function is used to break a program into different sub module. It makes reusability of code and makes program more manageable.</p>\n\n\n\n<p>In Kotlin, functions are declared using&nbsp;<strong>fun</strong>&nbsp;keyword. There are two types of functions depending on whether it is available in standard library or defined by user.</p>\n\n\n\n<ul><li><strong>Standard library function</strong></li><li><strong>User defined function</strong></li></ul>\n\n\n\n<h2>Standard Library Function</h2>\n\n\n\n<p>Kotlin Standard library function is built-in library functions which are implicitly present in library and available for use.</p>\n\n\n\n<p><strong>For example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var number = 25  \n    var result = Math.sqrt(number.toDouble())  \n    print(\"Square root of $number is $result\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Square root of 25 is 5.0</code></pre>\n\n\n\n<ul><li>Here,&nbsp;<strong>sqrt()</strong>&nbsp;is a library function which returns square root of a number (Double value).</li><li><strong>print()</strong>&nbsp;library function which prints a message to standard output stream.</li></ul>\n\n\n\n<h2>User defined Function</h2>\n\n\n\n<p><em>User defined function</em>&nbsp;is a function which is created by user. User defined function takes the parameter(s), perform an action and return the result of that action as a value.</p>\n\n\n\n<p>Kotlin functions are declared using the fun keyword. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun functionName(){  \n// body of function  \n} </code></pre>\n\n\n\n<p>We have to call the function to run codes inside the body of the function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>functionName()  </code></pre>\n\n\n\n<h3>Kotlin simple function example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    sum()  \n    print(\"code after sum\")  \n}  \nfun sum(){  \n    var num1 =5  \n    var num2 = 6  \n    println(\"sum = \"+(num1+num2))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>sum = 11\ncode after s</code></pre>\n\n\n\n<h3>Kotlin Parameterize Function and Return Value</h3>\n\n\n\n<p>Functions are also takes parameter as arguments and return value. Kotlin functions are defined using Pascal notation, i.e.&nbsp;<em>name:type</em>&nbsp;(name of parameter and its type). Parameters in function are separated using commas.</p>\n\n\n\n<p>If a function does not returns any value than its return type is&nbsp;<em>Unit</em>. It is optional to specify the return type of function definition which does not returns any value.</p>\n\n\n\n<h3>Kotlin parameterize function example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n   val result = sum(5, 6)  \n    print(result)  \n}  \nfun sum(number1: Int, number2:Int): Int{  \n    val add = number1+number2  \n    return add  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>11</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Function&nbsp;is a group of inter related block of code which performs a specific task. Function is used to break a program into different sub module. It makes reusability of code and makes program more manageable. In Kotlin, functions are declared using&nbsp;fun&nbsp;keyword. There are two types of functions depending on whether it is available in standard [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/727"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=727"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/727/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=727"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=727"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=727"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 729,
    "date": "2020-08-22T06:39:59",
    "date_gmt": "2020-08-22T06:39:59",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=729"
    },
    "modified": "2020-08-22T06:39:59",
    "modified_gmt": "2020-08-22T06:39:59",
    "slug": "kotlin-recursion-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-recursion-function/",
    "title": {
      "rendered": "Recursion Function"
    },
    "content": {
      "rendered": "\n<p><em>Recursion function</em>&nbsp;is a function which calls itself continuously. This technique is called recursion.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun functionName(){    \n.. .. ..  \nfunctionName() //calling same function  \n}</code></pre>\n\n\n\n<h3>Kotlin recursion function example 1: Finite times</h3>\n\n\n\n<p>Let&#8217;s see an example of recursion function printing count.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var count = 0  \nfun rec(){  \n    count++;  \n    if(count&lt;=5){  \n        println(\"hello \"+count);  \n        rec();  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \n    rec();  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>hello 1\nhello 2\nhello 3\nhello 4\nhello 5</code></pre>\n\n\n\n<h3>Kotlin recursion function example 2: Factorial Number</h3>\n\n\n\n<p>Let&#8217;s see an example of recursion function calculating factorial of number.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val number = 5  \n    val result: Long  \n    result = factorial(number)  \n    println(\"Factorial of $number = $result\")  \n}  \n  \nfun factorial(n: Int): Long {  \n    return if(n == 1){  \n          n.toLong()  \n    }  \n    else{  \n        n*factorial(n-1)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Factorial of 5 = 120\n﻿</code></pre>\n\n\n\n<p>Working process of above factorial example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>factorial(5)   \n   factorial(4)   \n      factorial(3)   \n         factorial(2)   \n            factorial(1)   \n               return 1   \n            return 2*1 = 2   \n         return 3*2 = 6   \n      return 4*6 = 24   \n   return 5*24 = 120</code></pre>\n\n\n\n<h2>Kotlin Tail Recursion</h2>\n\n\n\n<p>Before we will discuss about the tail recursion, let&#8217;s try to make an example which calculate sum of nth (100000 larger number) using general (normal) recursion.</p>\n\n\n\n<h3>General Recursion</h3>\n\n\n\n<p>Let&#8217;s see an example of calculating sum of nth (100000 larger number) using general (normal) recursion.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    var result = recursiveSum(100000)  \n    println(result)  \n}  \nfun recursiveSum(n: Long) : Long {  \n    return if (n &lt;= 1) {  \n        n  \n    } else {  \n        n + recursiveSum(n - 1)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" java.lang.StackOverflowError</code></pre>\n\n\n\n<p>The above example throws an exception of&nbsp;<em>&#8220;java.lang.StackOverflowError&#8221;</em>. This is because the compiler is unable to call large number of recursive function call.</p>\n\n\n\n<h3>Tail Recursion</h3>\n\n\n\n<p><strong>Tail recursion</strong>&nbsp;is a recursion which performs the calculation first, then makes the recursive call. The result of current step is passed into the next recursive call.</p>\n\n\n\n<p>Tail recursion follows one rule for implementation. This rule is as follow:</p>\n\n\n\n<p><strong>The recursive call must be the last call of the method</strong>. To declare a recursion as tail recursion we need to use&nbsp;<strong>tailrec</strong>&nbsp;modifier before the recursive function.</p>\n\n\n\n<h3>Kotlin Tail Recursion Example 1: calculating sun of nth(100000) number</h3>\n\n\n\n<p>Let&#8217;s see an example of calculating sum of nth (100000 larger number) using tail recursion.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    var number = 100000.toLong()  \n    var result = recursiveSum(number)  \n    println(\"sun of upto $number number = $result\")  \n}  \ntailrec fun recursiveSum(n: Long, semiresult: Long = 0) : Long {  \n    return if (n &lt;= 0) {  \n        semiresult  \n    } else {  \n        recursiveSum( (n - 1), n+semiresult)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>sun of upto 100000 number = 5000050000</code></pre>\n\n\n\n<h3>Kotlin Tail Recursion Example 2: calculating factorial of number</h3>\n\n\n\n<p>Let&#8217;s see an example of calculating factorial of number using tail recursion.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val number = 4  \n    val result: Long  \n    result = factorial(number)  \n    println(\"Factorial of $number = $result\")  \n}  \n  \ntailrec fun factorial(n: Int, run: Int = 1): Long {  \n    return if (n == 1){  \n        run.toLong()  \n    } else {  \n        factorial(n-1, run*n)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Factorial of 4 = 24</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Recursion function&nbsp;is a function which calls itself continuously. This technique is called recursion. Syntax Kotlin recursion function example 1: Finite times Let&#8217;s see an example of recursion function printing count. Output: Kotlin recursion function example 2: Factorial Number Let&#8217;s see an example of recursion function calculating factorial of number. Output: Working process of above factorial [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/729"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=729"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/729/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=729"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=729"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=729"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 731,
    "date": "2020-08-22T06:44:12",
    "date_gmt": "2020-08-22T06:44:12",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=731"
    },
    "modified": "2020-08-22T06:44:12",
    "modified_gmt": "2020-08-22T06:44:12",
    "slug": "kotlin-default-and-named-argument",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-default-and-named-argument/",
    "title": {
      "rendered": "Default and Named Argument"
    },
    "content": {
      "rendered": "\n<h2>Kotlin Default Argument</h2>\n\n\n\n<p>Kotlin provides a facility to assign&nbsp;<em>default argument</em>&nbsp;(parameter) in a function definition.</p>\n\n\n\n<p>If a function is called without passing any argument than default argument are used as parameter of function definition. And when a function is called using argument, than the passing argument is used as parameter in function definition.</p>\n\n\n\n<h3>Default argument example 1: passing no argument in function call</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    run()  \n}  \nfun run(num:Int= 5, latter: Char ='x'){  \n    print(\"parameter in function definition $num and $latter\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>parameter in function definition 5 and x</code></pre>\n\n\n\n<p>In the above program, run() function calls with no argument, the default parameter are used in function definition.</p>\n\n\n\n<h3>Default argument example 2: passing some argument in function call</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    run(3)  \n}  \nfun run(num:Int= 5, latter: Char ='x'){  \n    print(\"parameter in function definition $num and $latter\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>parameter in function definition 3 and x</code></pre>\n\n\n\n<p>In the above program, run() function calls with one (first) argument, the first parameter of the function definition is uses the value passed to the function. And the second parameter is uses as a default argument.</p>\n\n\n\n<h3>Default argument example 3: passing all argument in function call</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    run(3,'a')  \n}  \nfun run(num:Int= 5, latter: Char ='x'){  \n    print(\"parameter in function definition $num and $latter\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>parameter in function definition 3 and a\n﻿</code></pre>\n\n\n\n<p>As all the arguments are passed in run() function call, the parameters of function definition uses the argument passed in function call.</p>\n\n\n\n<h2>Kotlin Named Argument</h2>\n\n\n\n<p>Before we will discuss about the named parameter, let&#8217;s do some modify in the above program.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    run('a')  \n}  \nfun run(num:Int= 5, latter: Char ='x'){  \n    print(\"parameter in function definition $num and $latter\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Error: Kotlin: The character literal does not conform to the expected type Int</code></pre>\n\n\n\n<p>Here, we are try to pass parameter &#8216;a&#8217; from function call to function definition in the second argument. But compiler assumes that the parameter &#8216;a&#8217; (Char type) passed for first argument (Int type) this causes error in program.</p>\n\n\n\n<h3>Named Argument</h3>\n\n\n\n<p>To solve the above problem a named argument is used.</p>\n\n\n\n<p>A named argument is an argument in which we define the name of argument in the function call. The name defined to argument of function call checks the name in the function definition and assign to it.</p>\n\n\n\n<p><strong>Kotlin Named Argument Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    run(latter='a')  \n}  \nfun run(num:Int= 5, latter: Char ='x'){  \n    print(\"parameter in function definition $num and $latter\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>parameter in function definition 5 and a</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin Default Argument Kotlin provides a facility to assign&nbsp;default argument&nbsp;(parameter) in a function definition. If a function is called without passing any argument than default argument are used as parameter of function definition. And when a function is called using argument, than the passing argument is used as parameter in function definition. Default argument example [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/731"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=731"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/731/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=731"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=731"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=731"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 733,
    "date": "2020-08-22T06:46:26",
    "date_gmt": "2020-08-22T06:46:26",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=733"
    },
    "modified": "2020-08-22T06:46:26",
    "modified_gmt": "2020-08-22T06:46:26",
    "slug": "kotlin-lambda-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-lambda-function/",
    "title": {
      "rendered": "Lambda Function"
    },
    "content": {
      "rendered": "\n<p>Lambda is a function which has no name. Lambda is defined with a curly braces&nbsp;<strong>{}</strong>&nbsp;which takes&nbsp;<em>variable as a parameter</em>&nbsp;(if any) and body of function. The&nbsp;<em>body of function</em>&nbsp;is written after variable (if any) followed by&nbsp;<strong>-&gt;</strong>&nbsp;operator.</p>\n\n\n\n<h3>Syntax of lambda</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>{ variable -> body_of_function}  </code></pre>\n\n\n\n<p>Before we talk about lambda, let&#8217;s see a simple example of addition of two numbers using normal function.</p>\n\n\n\n<h3>Normal function: addition of two numbers</h3>\n\n\n\n<p>In this example, we create a function&nbsp;<em>addNumber()</em>&nbsp;passing two arguments&nbsp;<em>(a,b)</em>&nbsp;calling from the main function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    addNumber(5,10)  \n}  \nfun addNumber(a: Int, b: Int){  \n    val add = a + b  \n    println(add)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>15</code></pre>\n\n\n\n<h3>Lambda function: addition of two numbers</h3>\n\n\n\n<p>The above program will be rewritten using lambda function as follow:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val myLambda: (Int) -> Unit= {s: Int -> println(s) } //lambda function  \n    addNumber(5,10,myLambda)  \n}  \nfun addNumber(a: Int, b: Int, mylambda: (Int) -> Unit ){   //high level function lambda as parameter  \n    val add = a + b  \n    mylambda(add) // println(add)  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>15</code></pre>\n\n\n\n<p>In the above program we create a lambda expression&nbsp;<em>{s: Int -&gt; println(s) }</em>&nbsp;with its return type Unit. The lambda function is padded as an parameter in high level function&nbsp;<em>addNumber(5,10,myLambda).</em>&nbsp;The variable&nbsp;<em>mylambda</em>&nbsp;in function definition is actually a lambda function. The functionality (body) of&nbsp;<em>mylambda</em>&nbsp;is already given in lambda function.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Lambda is a function which has no name. Lambda is defined with a curly braces&nbsp;{}&nbsp;which takes&nbsp;variable as a parameter&nbsp;(if any) and body of function. The&nbsp;body of function&nbsp;is written after variable (if any) followed by&nbsp;-&gt;&nbsp;operator. Syntax of lambda Before we talk about lambda, let&#8217;s see a simple example of addition of two numbers using normal function. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/733"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=733"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/733/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=733"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=733"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=733"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 737,
    "date": "2020-08-22T06:52:29",
    "date_gmt": "2020-08-22T06:52:29",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=737"
    },
    "modified": "2020-08-22T06:52:29",
    "modified_gmt": "2020-08-22T06:52:29",
    "slug": "higher-order-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/higher-order-function/",
    "title": {
      "rendered": "Higher order function"
    },
    "content": {
      "rendered": "\n<p><strong>igh order function (Higher level function)</strong>&nbsp;is a function which accepts function as a parameter or returns a function or can do both. Means, instead of passing Int, String, or other types as a parameter in a function we can pass a function as a parameter in other function.</p>\n\n\n\n<p><strong>Let&#8217;s see the following example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun myFun(org: String,portal: String, fn: (String,String) -> String): Unit {  \n    val result = fn(org,portal)  \n    println(result)  \n}</code></pre>\n\n\n\n<p>In this above example, we defined a function myFun() with three parameters. The first and second parameter take String and the third parameter as a type of function from String to String. The parameter String to String type means function takes string as an input and returns output as string types.</p>\n\n\n\n<p>To call this above function, we can pass function literal or lambda. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun myFun(org: String,portal: String, fn: (String,String) -> String): Unit {  \n    val result = fn(org,portal)  \n    println(result)  \n}  \n  \nfun main(args: Array&lt;String>){  \n    val fn:(String,String)->String={org,portal->\"$org develop $portal\"}  \n    myFun(\"sssit.org\",\"codemeals.com\",fn)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>sssit.org develop codemeals.com</code></pre>\n\n\n\n<p>The above higher order function can also be called in another ways as below mention code in main() function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>myFun(\"sssit.org\",\"codemeals.com\",{org,portal->\"$org develop $portal\"})</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>igh order function (Higher level function)&nbsp;is a function which accepts function as a parameter or returns a function or can do both. Means, instead of passing Int, String, or other types as a parameter in a function we can pass a function as a parameter in other function. Let&#8217;s see the following example: In this [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/737"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=737"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/737/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=737"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=737"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=737"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 739,
    "date": "2020-08-22T06:55:40",
    "date_gmt": "2020-08-22T06:55:40",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=739"
    },
    "modified": "2020-08-22T06:55:40",
    "modified_gmt": "2020-08-22T06:55:40",
    "slug": "inline-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/inline-function/",
    "title": {
      "rendered": "Inline Function"
    },
    "content": {
      "rendered": "\n<p>An&nbsp;<strong>inline function</strong>&nbsp;is declare with a keyword inline. The use of inline function enhances the performance of higher order function. The inline function tells the compiler to copy parameters and functions to the call site.</p>\n\n\n\n<p>The&nbsp;<em>virtual</em>&nbsp;function or&nbsp;<em>local</em>&nbsp;function cannot be declared as&nbsp;<strong>inline</strong>. Following are some expressions and declarations which are not supported anywhere inside the inline functions:</p>\n\n\n\n<ul><li>Declaration of local classes</li><li>Declaration of inner nested classes</li><li>Function expressions</li><li>Declarations of local function</li><li>Default value for optional parameters</li></ul>\n\n\n\n<p>Let&#8217;s see the basic example of inline function:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \ninlineFunction({ println(\"calling inline functions\")})  \n}  \n  \ninline fun inlineFunction(myFun: () -> Unit ) {  \nmyFun()  \n    print(\"code inside inline function\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>calling inline functions\ncode inside inline function</code></pre>\n\n\n\n<h3>Non local control flow</h3>\n\n\n\n<p>From inline function, we can return from lambda expression itself. This will also lead to exit from the function in which inline function was called. The function literal is allowed to have non local return statements in such case.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \ninlineFunction({ println(\"calling inline functions\")  \n        return},{ println(\"next parameter in inline functions\")})  \n}  \n  \ninline fun inlineFunction(myFun: () -> Unit, nxtFun: () -> Unit) {  \nmyFun()  \nnxtFun()  \n    print(\"code inside inline function\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>calling inline functions</code></pre>\n\n\n\n<h3>crossinline annotation</h3>\n\n\n\n<p>To prevent return from lambda expression and inline function itself, we can mark the lambda expression as&nbsp;<strong>crossinline</strong>. This will throw a compiler error if it found a return statement inside that lambda expression.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \ninlineFunction({ println(\"calling inline functions\")  \n        return // compile time error  \n},{ println(\"next parameter in inline functions\")})  \n}  \n  \ninline fun inlineFunction(crossline myFun: () -> Unit, nxtFun: () -> Unit) {  \nmyFun()  \nnxtFun()  \n    print(\"code inside inline function\")  \n}</code></pre>\n\n\n\n<h3>noinline modifier</h3>\n\n\n\n<p>In inline function, when we want some of lambdas passed in inline function to be an inlined, mark other function parameter with noinline modifier. This is used to set expressions not to be inlined in the call.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \ninlineFunctionExample({  println(\"calling inline functions\")},  \n            {  println(\"next parameter in inline functions\")} )  \n  \nprintln(\"this is main function closing\")  \n}  \n  \ninline fun inlineFunctionExample(myFun: () -> Unit, noinline nxtFun: () -> Unit  ) {  \nmyFun()  \nnxtFun()  \nprintln(\"code inside inline function\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>calling inline functions\nnext parameter in inline functions\ncode inside inline function\nthis is main function closing</code></pre>\n\n\n\n<p>If an inline function does not contain any noinline function parameter and no reified type parameters then compiler will generate a warning.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An&nbsp;inline function&nbsp;is declare with a keyword inline. The use of inline function enhances the performance of higher order function. The inline function tells the compiler to copy parameters and functions to the call site. The&nbsp;virtual&nbsp;function or&nbsp;local&nbsp;function cannot be declared as&nbsp;inline. Following are some expressions and declarations which are not supported anywhere inside the inline functions: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/739"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=739"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/739/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=739"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=739"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=739"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 741,
    "date": "2020-08-22T07:00:34",
    "date_gmt": "2020-08-22T07:00:34",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=741"
    },
    "modified": "2020-08-22T07:00:34",
    "modified_gmt": "2020-08-22T07:00:34",
    "slug": "kotlin-array",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-array/",
    "title": {
      "rendered": "Kotlin Array"
    },
    "content": {
      "rendered": "\n<p>Array is collection of similar data types either of Int, String etc. Array in Kotlinis mutable in nature with fixed size which means we can perform both read and write operations on elements of array.</p>\n\n\n\n<h2>Constructor of array:</h2>\n\n\n\n<p>Array constructor is declared with specified <strong>size</strong> and <strong>init</strong> function. The init function is used to returns the elements of array with their index.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Array(size: Int, init: (Int) -> T)  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Kotlin Array can be created using arrayOf(), intArrayOf(), charArrayOf(), booleanArrayOf(), longArrayOf(), shortArrayOf(), byteArrayOf() functions.</code></pre>\n\n\n\n<h2>Kotlin array declaration &#8211; using arrayOf() function</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var myArray1 = arrayOf(1,10,4,6,15)  \nvar myArray2 = arrayOf&lt;Int>(1,10,4,6,15)  \nval myArray3 = arrayOf&lt;String>(\"Ajay\",\"Prakesh\",\"Michel\",\"John\",\"Sumit\")  \nvar myArray4= arrayOf(1,10,4, \"Ajay\",\"Prakesh\")  </code></pre>\n\n\n\n<h2>Kotlin array declaration &#8211; using intArrayOf() function</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var myArray5: IntArray = intArrayOf(5,10,20,12,15) </code></pre>\n\n\n\n<h2>Modify and access elements of array</h2>\n\n\n\n<p>Kotlin has&nbsp;<strong>set()</strong>&nbsp;and&nbsp;<strong>get()</strong>&nbsp;functions that can direct modify and access the particular element of array respectively.</p>\n\n\n\n<p>The set() function is used to set element at particular index location. This is also done with assigning element at array index. Array get() function is used to get element from specified index.</p>\n\n\n\n<h3>Kotlin array set() function example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval array1 = arrayOf(1,2,3,4)  \nval array2 = arrayOf&lt;Long>(11,12,13,14)  \n    array1.set(0,5)  \n    array1&#91;2] = 6  \n  \n    array2.set(2,10)  \n    array2&#91;3] = 8  \n  \n    for(element in array1){  \nprintln(element)  \n    }  \nprintln()  \n    for(element in array2){  \nprintln(element)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n2\n6\n4\n\n11\n12\n10\n8</code></pre>\n\n\n\n<h2>Kotlin array get() function example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval array1 = arrayOf(1,2,3,4)  \nval array2 = arrayOf&lt;Long>(11,12,13,14)  \nprintln(array1.get(0))  \nprintln(array1&#91;2])  \nprintln()  \nprintln(array2.get(2))  \nprintln(array2&#91;3])  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n3\n\n13\n14</code></pre>\n\n\n\n<h3>Kotlin Array Example 1:</h3>\n\n\n\n<p>In this example, we are simply initialize an array of size 5 with default value as 0 and traverse its elements. The index value of array starts from 0. First element of array is placed at index value 0 and last element at one less than the size of array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nvar myArray = Array&lt;Int>(5){0}  \n  \n    for(element in myArray){  \nprintln(element)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<h3>Kotlin Array Example 2:</h3>\n\n\n\n<p>We can also rewrite the value of array using its index value. Since, we can able to modify the value of array, so array is called as&nbsp;<strong>mutable</strong>&nbsp;property.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nvar myArray = Array&lt;Int>(5){0}  \n  \nmyArray&#91;1]= 10  \nmyArray&#91;3]= 15  \n  \n    for(element in myArray){  \nprintln(element)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n10\n0\n15\n0</code></pre>\n\n\n\n<h3>Kotlin Array Example 3 &#8211; using arrayOf() and intArrayOf() function:</h3>\n\n\n\n<p>Array in Kotlin can also be declared using library functions such as arrayOf(), intArrayOf(), etc. Let&#8217;s see the example of array using arrayOf() and intArrayOf() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval name = arrayOf&lt;String>(\"Ajay\",\"Prakesh\",\"Michel\",\"John\",\"Sumit\")  \nvar myArray2 = arrayOf&lt;Int>(1,10,4,6,15)  \nvar myArray3 = arrayOf(5,10,20,12,15)  \nvar myArray4= arrayOf(1,10,4, \"Ajay\",\"Prakesh\")  \nvar myArray5: IntArray = intArrayOf(5,10,20,12,15)  \n  \n    for(element in name){  \nprintln(element)  \n    }  \n  \nprintln()  \n    for(element in myArray2){  \nprintln(element)  \n    }  \nprintln()  \n    for(element in myArray3){  \nprintln(element)  \n    }  \nprintln()  \n    for(element in myArray4){  \nprintln(element)  \n    }  \nprintln()  \n    for(element in myArray5){  \nprintln(element)  \n    }  \n  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ajay\nPrakesh\nMichel\nJohn\nSumit\n\n1\n10\n4\n6\n15\n\n5\n10\n20\n12\n15\n\n1\n10\n4\nAjay\nPrakesh\n\n5\n10\n15\n20\n25</code></pre>\n\n\n\n<h3>Kotlin Array Example 4</h3>\n\n\n\n<p>Suppose when we try to insert an element at index position greater than array size then what will happen?</p>\n\n\n\n<p>It will throw an <em>ArrayIndexOutOfBoundException</em>. This is because the index value is not present at which we tried to insert element. Due to this, array is called <strong>fixed size</strong> length. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nvar myArray5: IntArray = intArrayOf(5,10,20,12,15)  \n  \n    myArray5&#91;6]=18 // ArrayIndexOutOfBoundsException  \n    for(element in myArray5){  \nprintln(element)    \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 6\n\tat ArrayListKt.main(Array.kt:4)</code></pre>\n\n\n\n<h3>Kotlin Array Example 5 &#8211; traversing using range:</h3>\n\n\n\n<p>The Kotlin&#8217;s array elements are also traversed using index range (minValue..maxValue) or (maxValue..minValue). Let&#8217;s see an example of array traversing using range.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nvar myArray5: IntArray = intArrayOf(5,10,20,12,15)  \n  \n    for (index in 0..4){  \nprintln(myArray5&#91;index])  \n    }  \nprintln()  \n    for (index in 0..myArray5.size-1){  \nprintln(myArray5&#91;index])  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n10\n20\n12\n15\n\n5\n10\n20\n12\n15</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Array is collection of similar data types either of Int, String etc. Array in Kotlinis mutable in nature with fixed size which means we can perform both read and write operations on elements of array. Constructor of array: Array constructor is declared with specified size and init function. The init function is used to returns the elements of array [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/741"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=741"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/741/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=741"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=741"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=741"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 743,
    "date": "2020-08-22T07:06:37",
    "date_gmt": "2020-08-22T07:06:37",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=743"
    },
    "modified": "2020-08-22T07:06:37",
    "modified_gmt": "2020-08-22T07:06:37",
    "slug": "kotlin-string",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-string/",
    "title": {
      "rendered": "Kotlin String"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<strong>String class</strong>&nbsp;represents an array of char types. Strings are immutable which means the length and elements cannot be changed after their creation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val ch = charArrayOf('h', 'e', 'l', 'l', 'o')  \n    val st = String(ch)  </code></pre>\n\n\n\n<p>Unlike Java, Kotlin does not require a new keyword to instantiate an object of a String class. A String can be simply declared within double quote (&#8221; &#8220;) known as&nbsp;<strong>escaped</strong>&nbsp;string or triple quote(&#8220;&#8221;&#8221; &#8220;&#8221;&#8221;) known as&nbsp;<strong>raw</strong>&nbsp;string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val str1 = \"Hello, codemeals\"  \nval str2 = \"\"\"Welcome To codemeals\"\"\"  </code></pre>\n\n\n\n<h2>Kotlin String Property</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>length: Int</td><td>It returns the length of string sequence.</td></tr><tr><td>indices: IntRange</td><td>It returns the ranges of valid character indices from current char sequence.</td></tr><tr><td>lastIndex: Int</td><td>It returns the index of last character from char sequence.</td></tr></tbody></table></figure>\n\n\n\n<h2>String Function</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Functions</th><th>Description</th></tr><tr><td>compareTo(other: String): Int</td><td>It compares the current object with specified object for order. It returns zero if current is equals to specified other object.</td></tr><tr><td>get(index: Int): Char</td><td>It returns the character at given index from the current character sequence.</td></tr><tr><td>plus(other: Any?): String</td><td>It returns the concatenate string with the string representation of the given other string.</td></tr><tr><td>subSequence(startIndex: Int,endIndex: Int): CharSequence</td><td>It returns the new character sequence from current character sequence, starting from startIndex to endIndex.</td></tr><tr><td>CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false):Boolean</td><td>It returns true if the character sequence contains the other specified character sequence.</td></tr><tr><td>CharSequence.count(): Int</td><td>It returns the length of char sequence.</td></tr><tr><td>String.drop(n: Int): String</td><td>It returns a string after removing the first n character.</td></tr><tr><td>String.dropLast(n: Int): String</td><td>It returns a string after removing the last n character.</td></tr><tr><td>String.dropWhile<br>(predicate: (Char) -&gt; Boolean<br>): String</td><td>It returns a character sequence which contains all the characters, except first characters which satisfy the given predicate.</td></tr><tr><td>CharSequence.elementAt(index: Int): Char</td><td>It returns a character at the given index or throws an&nbsp;<em>IndexOutOfBoundsException</em>&nbsp;if the index does not exist in character sequence.</td></tr><tr><td>CharSequence.indexOf(char: Char, startIndex: Int = 0,<br>ignoreCase: Boolean = false<br>): Int</td><td>It returns the index of first occurrence of the given character, starting from the given index value.</td></tr><tr><td>CharSequence.indexOfFirst(<br>predicate: (Char) -&gt; Boolean<br>): Int</td><td>It returns the index of first character which match the given predicate, or -1 if the character sequence not contains any such character.</td></tr><tr><td>CharSequence.indexOfLast(<br>predicate: (Char) -&gt; Boolean<br>): Int</td><td>It returns the index of last character which match the given predicate, or -1 if the character sequence not contains any such character.</td></tr><tr><td>CharSequence.getOrElse(index: Int, defaultValue: (Int) -&gt;Char): Char</td><td>It returns the character at specified index or the result of calling the defaultValue function if the index is out of bound of current character sequence.</td></tr><tr><td>CharSequence.getOrNull(index: Int): Char?</td><td>It returns a character at the given index or returns null if the index is out of bound from character sequence.</td></tr></tbody></table></figure>\n\n\n\n<h2>String elements and templates</h2>\n\n\n\n<h3>String elements</h3>\n\n\n\n<p>The characters which are present in string are known as elements of string. Element of string are accessed by indexing operation string[index]. String&#8217;s index value starts from 0 and ends at one less than the size of string string[string.length-1]. Index 0 represent first element, index 1 represent second element and so on.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val str =\"Hello, codemeals\"  \nprintln(str&#91;0]) //prints H  </code></pre>\n\n\n\n<p><strong>Example of accessing string element</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \nval str = \"Hello, codemeals!\"  \nprintln(str&#91;0])  \nprintln(str&#91;1])  \nprintln(str&#91;str.length-1])  \n}  </code></pre>\n\n\n\n<h3>String templates</h3>\n\n\n\n<p>String template expression is a piece of code which is evaluated and its result is returned into string. Both string types (escaped and raw string) contain template expressions. String templates starts with a dollar sign $ which consists either a variable name or an arbitrary expression in curly braces.</p>\n\n\n\n<p><strong>String template as variable name:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>val i =10  \nprint(\"i = $i\") //i=10  \n  \nfun main(args: Array&lt;String>) {  \nval i =10  \n    print(\"i = $i\")//i=10  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>i=10</code></pre>\n\n\n\n<p><strong>String template as arbitrary expression in curly braces:</strong></p>\n\n\n\n<p>String template is also used in arbitrary expression in curly braces to evaluate a string expression. This is done by using dollar sign $.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval str = \"abc\"  \nprintln(\"$str is a string which length is ${str.length}\")  \n} </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>abc is a string which length is 3</code></pre>\n\n\n\n<p><strong>String template in raw string:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval a = 10  \nval b = 5  \n  \nval myString = \"\"\"value $a  \n        |is greater than value $b  \n    \"\"\".trimMargin()  \nprintln(\"${myString.trimMargin()}\")  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>value 10\nis greater than value 5</code></pre>\n\n\n\n<h2>Kotlin String Literals</h2>\n\n\n\n<p>Kotlin has two types of string literals:</p>\n\n\n\n<ul><li>Escaped String</li><li>Raw String</li></ul>\n\n\n\n<h3>Escaped String</h3>\n\n\n\n<p>Escape String is declared within double quote (&#8221; &#8220;) and may contain escape characters like &#8216;\\n&#8217;, &#8216;\\t&#8217;, &#8216;\\b&#8217; ,&#8217;\\r&#8217;,&#8217;\\$&#8217;etc.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val text1 =\"Hello, codemeals\"  \n//or  \nval text2 =\"Hello, codemeals\\n\"  \n//or  \nval text3 =\"Hello, \\ncodemeals\" </code></pre>\n\n\n\n<h3>Raw String</h3>\n\n\n\n<p>Row String is declared within triple quote (&#8220;&#8221;&#8221; &#8220;&#8221;&#8221;).It provides facility to declare String in new lines and contain multiple lines. Row String cannot contain any escape character.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val text1 =\"\"\"  \n             Welcome   \n                 To  \ncodemeals  \n    \"\"\"  </code></pre>\n\n\n\n<p>While using raw string with new line, it generates a | as margin prefix. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \nval text = \"\"\"Kotlin is official language  \n        |announce by Google for  \n        |android application development  \n    \"\"\"  \nprintln(text)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Kotlin is official language\n        |announce by Google for\n        |android application development</code></pre>\n\n\n\n<h2>String trimMargin() function</h2>\n\n\n\n<p>Leading whitespace can be removed with trimMargin() function. By default, trimMargin() function uses | as margin prefix.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \nval text = \"\"\"Kotlin is official language  \n        |announce by Google for  \n        |android application development  \n    \"\"\".trimMargin()  \n  \nprintln(text)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Kotlin is official language\nannounce by Google for\nandroid application development</code></pre>\n\n\n\n<p>However, it can be change by passing a new string inside trimMargin() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \nval text = \"\"\"Kotlin is official language  \n        #announce by Google for  \n        #android application development  \n    \"\"\".trimMargin(\"#\")  \nprintln(text)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Kotlin is official language\nannounce by Google for\nandroid application development</code></pre>\n\n\n\n<h2>Kotlin String Equality</h2>\n\n\n\n<p>In Kotlin, strings equality comparisons are done on the basis of&nbsp;<strong>structural equality</strong>&nbsp;(==) and&nbsp;<strong>referential equality</strong>&nbsp;(===).</p>\n\n\n\n<p>In structural equality two objects have separate instances in memory but contain same value.</p>\n\n\n\n<p>Referential equality specifies that two different references point the same instance in memory.</p>\n\n\n\n<h3>Structural equality (==)</h3>\n\n\n\n<p>To check the two objects containing the same value, we use == operator or != operator for negation. It is equivalent to&nbsp;<em>equals()</em>&nbsp;in java.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval str1 = \"Hello, World!\"  \nval str2 = \"Hello, World!\"  \nprintln(str1==str2) //true  \nprintln(str1!=str2) //false  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\nfalse</code></pre>\n\n\n\n<h3>Referential equality (===)</h3>\n\n\n\n<p>To check the two different references point to the same instance, we use === operator. The !== operator is used for negation. a === b specifies true if and only if a and b both point to the same object.</p>\n\n\n\n<p>Let&#8217;s see an example of referential equality to check different reference contains same instance or not. For creating string we are using a helper method buildString rather than using quotes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval str1 = buildString { \"string value\" }  \nval str2 = buildString { \"string value\" }  \nprintln(str1===str2)  \nprintln(str1!==str2)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\ntrue</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;String class&nbsp;represents an array of char types. Strings are immutable which means the length and elements cannot be changed after their creation. Unlike Java, Kotlin does not require a new keyword to instantiate an object of a String class. A String can be simply declared within double quote (&#8221; &#8220;) known as&nbsp;escaped&nbsp;string or triple quote(&#8220;&#8221;&#8221; [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/743"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=743"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/743/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=743"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=743"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=743"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 745,
    "date": "2020-08-22T07:07:47",
    "date_gmt": "2020-08-22T07:07:47",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=745"
    },
    "modified": "2020-08-22T07:07:47",
    "modified_gmt": "2020-08-22T07:07:47",
    "slug": "kotlin-exception-handling",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-exception-handling/",
    "title": {
      "rendered": "Exception Handling"
    },
    "content": {
      "rendered": "\n<p><strong>Exception</strong>&nbsp;is a runtime problem which occurs in the program and leads to program termination. This may be occure due to running out of memory space, array out of bond, condition like divided by zero. To handle this type of problem during program execution the technique of exception handling is used.</p>\n\n\n\n<p><strong>Exception handling</strong>&nbsp;is a technique which handles the runtime problems and maintains the flow of program execution.</p>\n\n\n\n<p>In Kotlin, all exception classes are descendants of class&nbsp;<strong>Throwable.</strong>&nbsp;To throw an exception object, Kotlin uses the&nbsp;<em>throw</em>&nbsp;expression.</p>\n\n\n\n<ol><li><strong>throw</strong>&nbsp;MyException(&#8220;this&nbsp;throws&nbsp;an&nbsp;exception&#8221;)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>There are four different keywords used in exception handling. These are:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>try\ncatch\nfinally\nthrow</code></pre>\n\n\n\n<p><strong>try:</strong>&nbsp;try block contains set of statements which might generate an exception. It must be followed by either catch or finally or both.</p>\n\n\n\n<p><strong>catch:</strong>&nbsp;catch block is used to catch the exception thrown from try block.</p>\n\n\n\n<p><strong>finally:</strong>&nbsp;finally block always execute whether exception is handled or not. So it is used to execute important code statement.</p>\n\n\n\n<p><strong>throw:</strong>&nbsp;throw keyword is used to throw an exception explicitly.</p>\n\n\n\n<h2>Kotlin Unchecked Exception</h2>\n\n\n\n<p>Unchecked exception is that exception which is thrown due to mistakes in our code. This exception type extends&nbsp;<strong>RuntimeException</strong>&nbsp;class. The Unchecked exception is checked at run time. Following are some example of unchecked exception:</p>\n\n\n\n<ul><li><strong>ArithmeticException:</strong>&nbsp;thrown when we divide a number by zero.</li><li><strong>ArrayIndexOutOfBoundExceptions:</strong>&nbsp;thrown when an array has been tried to access with incorrect index value.</li><li><strong>SecurityException:</strong>&nbsp;thrown by the security manager to indicate a security violation.</li><li><strong>NullPointerException:</strong>&nbsp;thrown when invoking a method or property on a null object.</li></ul>\n\n\n\n<h2>Checked Exception in Java</h2>\n\n\n\n<p>Checked exception is checked at compile time. This exception type extends the&nbsp;<strong>Throwable</strong>&nbsp;class.</p>\n\n\n\n<p>Following are some example of unchecked exception:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>IOException.\nSQLException etc</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Exception&nbsp;is a runtime problem which occurs in the program and leads to program termination. This may be occure due to running out of memory space, array out of bond, condition like divided by zero. To handle this type of problem during program execution the technique of exception handling is used. Exception handling&nbsp;is a technique which [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/745"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=745"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/745/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=745"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=745"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=745"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 749,
    "date": "2020-08-22T07:14:06",
    "date_gmt": "2020-08-22T07:14:06",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=749"
    },
    "modified": "2020-08-22T07:14:06",
    "modified_gmt": "2020-08-22T07:14:06",
    "slug": "kotlin-try-catch",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-try-catch/",
    "title": {
      "rendered": "try catch"
    },
    "content": {
      "rendered": "\n<p><strong>Kotlin try-catch</strong>&nbsp;block is used for exception handling in the code. The try block encloses the code which may throw an exception and the catch block is used to handle the exception. This block must be written within the method. Kotlin&nbsp;<em>try</em>&nbsp;block must be followed by either&nbsp;<em>catch</em>&nbsp;block or&nbsp;<em>finally</em>&nbsp;block or both.</p>\n\n\n\n<h3>Syntax of try with catch block</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>try{    \n//code that may throw exception    \n}catch(e: SomeException){  \n//code that handles exception  \n} </code></pre>\n\n\n\n<p>Syntax of try with finally block</p>\n\n\n\n<pre class=\"wp-block-code\"><code>try{    \n//code that may throw exception    \n}finally{  \n// code finally block  \n}</code></pre>\n\n\n\n<h3>Syntax of try catch with finally block</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>try {  \n    // some code  \n}  \ncatch (e: SomeException) {  \n    // handler  \n}  \nfinally {  \n    // optional finally block  \n} </code></pre>\n\n\n\n<h2>Problem without Exception Handling</h2>\n\n\n\n<p>Lets&#8217;s see an example which causes exception which is not handled.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val data = 20 / 0   //may throw exception  \n    println(\"code below exception ...\")  \n} </code></pre>\n\n\n\n<p>This above program generates an exception, which causes rest of code below the exception not executable.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\tat ExceptionHandlingKt.main(ExceptionHandling.kt:2)\n﻿</code></pre>\n\n\n\n<h2>Solution by exception handling</h2>\n\n\n\n<p>Let&#8217;s see the solution of above problem by using try-catch block.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    try {  \n        val data = 20 / 0  //may throw exception  \n    } catch (e: ArithmeticException) {  \n        println(e)  \n    }  \n    println(\"code below exception...\")  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>java.lang.ArithmeticException: / by zero\ncode below exception...</code></pre>\n\n\n\n<p>In the above program after implementing try &#8211; catch block, rest of code below exception executes.</p>\n\n\n\n<h2>Kotlin try block as an Expression</h2>\n\n\n\n<p>We can use&nbsp;<em>try</em>&nbsp;block as an&nbsp;<em>expression</em>&nbsp;which returns a value. The value returned by try expression is either the last expression of try block or the last expression of catch. Contents of the finally block do not affect the result of the expression.</p>\n\n\n\n<h3>Kotlin try as an expression example</h3>\n\n\n\n<p>Let&#8217;s see an example of try-catch block as an expression which returns a value. In this example String value to Int which does not generate any exception and returns last statement of try block.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval str = getNumber(\"10\")  \n    println(str)  \n}  \nfun getNumber(str: String): Int{  \n    return try {  \n        Integer.parseInt(str)  \n    } catch (e: ArithmeticException) {  \n        0  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>10</code></pre>\n\n\n\n<p>Let&#8217;s modify the above code which generate an exception and return the last statement of catch block.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval str = getNumber(\"10.5\")  \n    println(str)  \n}  \nfun getNumber(str: String): Int{  \n    return try {  \n        Integer.parseInt(str)  \n    } catch (e: NumberFormatException) {  \n        0  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>0</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin try-catch&nbsp;block is used for exception handling in the code. The try block encloses the code which may throw an exception and the catch block is used to handle the exception. This block must be written within the method. Kotlin&nbsp;try&nbsp;block must be followed by either&nbsp;catch&nbsp;block or&nbsp;finally&nbsp;block or both. Syntax of try with catch block Syntax [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/749"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=749"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/749/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=749"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=749"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=749"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 751,
    "date": "2020-08-22T07:16:07",
    "date_gmt": "2020-08-22T07:16:07",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=751"
    },
    "modified": "2020-08-22T07:16:07",
    "modified_gmt": "2020-08-22T07:16:07",
    "slug": "kotlin-multiple-catch-block",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-multiple-catch-block/",
    "title": {
      "rendered": "Multiple catch Block"
    },
    "content": {
      "rendered": "\n<p>We can use multiple catch block in our code. Kotlin multiple catch blocks are used when we are using different types of operation in try block which may causes different exceptions in try block.</p>\n\n\n\n<h3>Kotlin multiple catch block example 1</h3>\n\n\n\n<p>Let&#8217;s see an example of multiple catch blocks. In this example we will are performing different types of operation. These different types of operation may generate different types of exceptions.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> fun main(args: Array&lt;String>){  \n    try {  \n        val a = IntArray(5)  \n        a&#91;5] = 10 / 0  \n    } catch (e: ArithmeticException) {  \n        println(\"arithmetic exception catch\")  \n    } catch (e: ArrayIndexOutOfBoundsException) {  \n        println(\"array index outofbounds exception\")  \n    } catch (e: Exception) {  \n        println(\"parent exception class\")  \n    }  \n    println(\"code after try catch...\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>arithmetic exception catch\ncode after try catch...\n﻿</code></pre>\n\n\n\n<h4>Note: At a time only one exception is occured and at a time only one catch block is executed.</h4>\n\n\n\n<p><strong>Rule:</strong>&nbsp;All catch blocks must be placed from most specific to general i.e. catch for ArithmeticException must come before catch for Exception.</p>\n\n\n\n<h3>What happen when we catch from general exception to specific exception?</h3>\n\n\n\n<p>It will generate warning. For example:</p>\n\n\n\n<p>Let&#8217;s modify above code and place catch block from general exception to specific exception.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    try {  \n        val a = IntArray(5)  \n        a&#91;5] = 10 / 0  \n    }  \n    catch (e: Exception) {  \n        println(\"parent exception catch\")  \n    }  \n    catch (e: ArithmeticException) {  \n        println(\"arithmetic exception catch\")  \n    } catch (e: ArrayIndexOutOfBoundsException) {  \n        println(\"array index outofbounds exception\")  \n    }  \n      \n    println(\"code after try catch...\")  \n}  </code></pre>\n\n\n\n<p><strong>Output at compile time</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>warning : division by zero\na&#91;5] = 10/0</code></pre>\n\n\n\n<p><strong>Output at run time</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>parent exception catch\ncode after try catch...</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>We can use multiple catch block in our code. Kotlin multiple catch blocks are used when we are using different types of operation in try block which may causes different exceptions in try block. Kotlin multiple catch block example 1 Let&#8217;s see an example of multiple catch blocks. In this example we will are performing [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/751"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=751"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/751/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=751"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=751"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=751"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 753,
    "date": "2020-08-22T07:17:21",
    "date_gmt": "2020-08-22T07:17:21",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=753"
    },
    "modified": "2020-08-22T07:17:21",
    "modified_gmt": "2020-08-22T07:17:21",
    "slug": "kotlin-nested-try-catch-block",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-nested-try-catch-block/",
    "title": {
      "rendered": "Nested try-catch block"
    },
    "content": {
      "rendered": "\n<p>We can also able to use nested try block whenever required. Nested try catch block is such block in which one try catch block is implemented into another try block.</p>\n\n\n\n<p>The requirement of nested try catch block is arises when a block of code generates an exception and within that block another code statements also generates another exception.</p>\n\n\n\n<h3>Syntax of nested try block</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>..   \ntry    \n{    \n    // code block   \n    try    \n    {    \n        // code block   \n    }    \n    catch(e: SomeException)    \n    {    \n    }    \n}    \ncatch(e: SomeException)    \n{    \n}    \n..  </code></pre>\n\n\n\n<p><strong>Kotlin nested try block example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val nume = intArrayOf(4, 8, 16, 32, 64, 128, 256, 512)  \n    val deno = intArrayOf(2, 0, 4, 4, 0, 8)  \n    try {  \n        for (i in nume.indices) {  \n            try {  \n                println(nume&#91;i].toString() + \" / \" + deno&#91;i] + \" is \" + nume&#91;i] / deno&#91;i])  \n            } catch (exc: ArithmeticException) {  \n                println(\"Can't divided by Zero!\")  \n            }  \n  \n        }  \n    } catch (exc: ArrayIndexOutOfBoundsException) {  \n        println(\"Element not found.\")  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>4 / 2 is 2\nCan't divided by Zero!\n16 / 4 is 4\n32 / 4 is 8\nCan't divided by Zero!\n128 / 8 is 16\nElement not found.</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>We can also able to use nested try block whenever required. Nested try catch block is such block in which one try catch block is implemented into another try block. The requirement of nested try catch block is arises when a block of code generates an exception and within that block another code statements also [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/753"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=753"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/753/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=753"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=753"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=753"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 755,
    "date": "2020-08-22T07:20:23",
    "date_gmt": "2020-08-22T07:20:23",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=755"
    },
    "modified": "2020-08-22T07:20:23",
    "modified_gmt": "2020-08-22T07:20:23",
    "slug": "kotlin-finally-block",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-finally-block/",
    "title": {
      "rendered": "Kotlin finally Block"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>finally</strong>&nbsp;block such block which is always executes whether exception is handled or not. So it is used to execute important code statement.</p>\n\n\n\n<h3>Kotlin finally Block Example 1</h3>\n\n\n\n<p>Let&#8217;s see an example of exception handling in which exception does not occur.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main (args: Array&lt;String>){  \n    try {  \n        val data = 10 / 5  \n        println(data)  \n    } catch (e: NullPointerException) {  \n        println(e)  \n    } finally {  \n        println(\"finally block always executes\")  \n    }  \n    println(\"below codes...\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>2\nfinally block always executes\nbelow codes...</code></pre>\n\n\n\n<h3>Kotlin finally Block Example 2</h3>\n\n\n\n<p>Let&#8217;s see an example of exception handling in which <em>exception occurs but not handled.</em></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main (args: Array&lt;String>){  \n    try {  \n        val data = 5 / 0  \n        println(data)  \n    } catch (e: NullPointerException) {  \n        println(e)  \n    } finally {  \n        println(\"finally block always executes\")  \n    }  \n    println(\"below codes...\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>finally block always executes\nException in thread \"main\" java.lang.ArithmeticException: / by zero</code></pre>\n\n\n\n<h3>Kotlin finally Block Example 3</h3>\n\n\n\n<p>Let&#8217;s see an example of exception handling in which <em>exception occurs and handled.</em></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main (args: Array&lt;String>){  \n    try {  \n        val data = 5 / 0  \n        println(data)  \n    } catch (e: ArithmeticException) {  \n        println(e)  \n    } finally {  \n        println(\"finally block always executes\")  \n    }  \n    println(\"below codes...\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>java.lang.ArithmeticException: / by zero\nfinally block always executes\nbelow codes...</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;finally&nbsp;block such block which is always executes whether exception is handled or not. So it is used to execute important code statement. Kotlin finally Block Example 1 Let&#8217;s see an example of exception handling in which exception does not occur. Output: Kotlin finally Block Example 2 Let&#8217;s see an example of exception handling in which exception [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/755"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=755"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/755/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=755"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=755"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=755"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 757,
    "date": "2020-08-22T07:21:45",
    "date_gmt": "2020-08-22T07:21:45",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=757"
    },
    "modified": "2020-08-22T07:21:45",
    "modified_gmt": "2020-08-22T07:21:45",
    "slug": "kotlin-throw-keyword",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-throw-keyword/",
    "title": {
      "rendered": "Throw keyword"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>throw</strong>&nbsp;keyword is used to throw an explicit exception. It is used to throw a custom exception.</p>\n\n\n\n<p>To throw an exception object we will use the throw-expression.</p>\n\n\n\n<h3>Syntax of throw keyword</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>throw SomeException()  </code></pre>\n\n\n\n<p><strong>Kotlin throw example</strong></p>\n\n\n\n<p>Let&#8217;s see an example of throw keyword in which we are validating age limit for driving license.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    validate(15)  \n    println(\"code after validation check...\")  \n}  \nfun validate(age: Int) {  \n    if (age &lt; 18)  \n        throw ArithmeticException(\"under age\")  \n    else  \n        println(\"eligible for drive\")  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" java.lang.ArithmeticException: under age</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;throw&nbsp;keyword is used to throw an explicit exception. It is used to throw a custom exception. To throw an exception object we will use the throw-expression. Syntax of throw keyword Kotlin throw example Let&#8217;s see an example of throw keyword in which we are validating age limit for driving license. Output:</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/757"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=757"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/757/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=757"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=757"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=757"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 830,
    "date": "2020-08-25T05:02:22",
    "date_gmt": "2020-08-25T05:02:22",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=830"
    },
    "modified": "2020-08-25T05:02:22",
    "modified_gmt": "2020-08-25T05:02:22",
    "slug": "kotlin-null-safety",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-null-safety/",
    "title": {
      "rendered": "Null Safety"
    },
    "content": {
      "rendered": "\n<p>Kotlin null safety is a procedure to eliminate the risk of null reference from the code. Kotlin compiler throws NullPointerException immediately if it found any null argument is passed without executing any other statements.</p>\n\n\n\n<p>Kotlin&#8217;s type system is aimed to eliminate NullPointerException form the code. NullPointerException can only possible on following causes:</p>\n\n\n\n<ul><li>An forcefully call to throw NullPointerException();</li><li>An uninitialized of this operator which is available in a constructor passed and used somewhere.</li><li>Use of external java code as Kotlin is Java interoperability.</li></ul>\n\n\n\n<h2>Kotlin Nullable Types and Non-Nullable Types</h2>\n\n\n\n<p>Kotlin types system differentiates between references which can hold null (nullable reference) and which cannot hold null (non null reference). Normally,types of String are not nullable. To make string which holds null value, we have to explicitly define them by putting a ? behind the String as:&nbsp;<strong>String?</strong></p>\n\n\n\n<h3>Nullable Types</h3>\n\n\n\n<p>Nullable types are declared by putting a ? behind the String as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var str1: String? = \"hello\"  \nstr1 = null // ok  </code></pre>\n\n\n\n<p><strong>Kotlin example of nullable types</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nvar str: String? = \"Hello\" // variable is declared as nullable  \nstr = null  \n    print(str)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>null</code></pre>\n\n\n\n<h3>Non Nullable Types</h3>\n\n\n\n<p>Non nullable types are normal strings which are declared as String types as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val str: String = null // compile error  \nstr = \"hello\" // compile error Val cannot be reassign  \nvar str2: String = \"hello\"  \nstr2 = null // compile error  </code></pre>\n\n\n\n<p>What happens when we assign null value to non nullable string?</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nvar str: String = \"Hello\"  \nstr = null // compile error  \n    print(str)  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>It will generate a compile time error.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Error:(3, 11) Kotlin: Null can not be a value of a non-null type String</code></pre>\n\n\n\n<h3>Checking for null in conditions</h3>\n\n\n\n<p>Kotlin&#8217;s If expression is used for checking condition and returns value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nvar str: String? = \"Hello\"     // variable is declared as nullable  \nvar len = if(str!=null) str.length else -1  \nprintln(\"str is : $str\")  \nprintln(\"str length is : $len\")  \n  \nstr = null  \nprintln(\"str is : $str\")  \nlen = if(str!=null) str.length else -1  \nprintln(\"b length is : $len\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>str is : Hello\nstr length is : 5\nstr is : null\nb length is : -1\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin null safety is a procedure to eliminate the risk of null reference from the code. Kotlin compiler throws NullPointerException immediately if it found any null argument is passed without executing any other statements. Kotlin&#8217;s type system is aimed to eliminate NullPointerException form the code. NullPointerException can only possible on following causes: An forcefully call [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/830"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=830"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/830/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=830"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=830"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=830"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 832,
    "date": "2020-08-25T05:04:13",
    "date_gmt": "2020-08-25T05:04:13",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=832"
    },
    "modified": "2020-08-25T05:04:13",
    "modified_gmt": "2020-08-25T05:04:13",
    "slug": "smart-cast",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/smart-cast/",
    "title": {
      "rendered": "Smart cast"
    },
    "content": {
      "rendered": "\n<p>We have seen in previous tutorial&nbsp;<strong>Kotlin Nullable Types and Non-Nullable Types</strong>&nbsp;how nullable type is declared. To use this nullable types we have an option to use smart casts.&nbsp;<strong>Smart cast</strong>&nbsp;is a feature in which Kotlin compiler tracks conditions inside&nbsp;<em>if expression</em>. If compiler founds a variable is not null of type nullable then the compiler will allow to access the variable.</p>\n\n\n\n<h3>For example:</h3>\n\n\n\n<p>When we try to access a nullable type of String without safe cast it will generate a compile error.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var string: String? = \"Hello!\"  \n    print(string.length) // Compile error  </code></pre>\n\n\n\n<p>To solve the above expression we use a safe cast as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nvar string: String? = \"Hello!\"  \n    if(string != null) { // smart cast  \nprint(string.length) // It works now!  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>6\n</code></pre>\n\n\n\n<p>While using&nbsp;<strong>is</strong>&nbsp;or&nbsp;<strong>!is</strong>&nbsp;for checking the variable, the compiler tracks this information and internally cast the variable to target type. This is done inside the scope if&nbsp;<strong>is</strong>&nbsp;or&nbsp;<strong>!is</strong>&nbsp;returns true.</p>\n\n\n\n<h2>Use of is for smart cast</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval obj: Any = \"The variable obj is automatically cast to a String in this scope\"  \n    if(obj is String) {  \n                // No Explicit Casting needed.  \nprintln(\"String length is ${obj.length}\")  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String length is 64\n</code></pre>\n\n\n\n<h2>Use of !is for smart cast</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval obj: Any = \"The variable obj is automatically cast to a String in this scope\"  \n    if(obj !is String) {  \nprintln(\"obj is not string\")  \n  \n    } else  \n    // No Explicit Casting needed.  \nprintln(\"String length is ${obj.length}\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String length is 64\n</code></pre>\n\n\n\n<p>Smart cast work according to the following conditions:</p>\n\n\n\n<ul><li>A&nbsp;<strong>val</strong>&nbsp;variable always aspect for local properties.</li><li>If a&nbsp;<strong>val</strong>&nbsp;property is private or internal the check is performed in the same module where the property is declared.</li><li>If the local&nbsp;<strong>var</strong>&nbsp;variable is not modified between the check and the usage, is not captured in a lambda that modifies it.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>We have seen in previous tutorial&nbsp;Kotlin Nullable Types and Non-Nullable Types&nbsp;how nullable type is declared. To use this nullable types we have an option to use smart casts.&nbsp;Smart cast&nbsp;is a feature in which Kotlin compiler tracks conditions inside&nbsp;if expression. If compiler founds a variable is not null of type nullable then the compiler will allow [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/832"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=832"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/832/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=832"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=832"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=832"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 834,
    "date": "2020-08-25T05:06:13",
    "date_gmt": "2020-08-25T05:06:13",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=834"
    },
    "modified": "2020-08-25T05:06:13",
    "modified_gmt": "2020-08-25T05:06:13",
    "slug": "unsafe-and-safe-cast-operator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/unsafe-and-safe-cast-operator/",
    "title": {
      "rendered": "Unsafe and Safe Cast Operator"
    },
    "content": {
      "rendered": "\n<h2>Unsafe cast operator: as</h2>\n\n\n\n<p>Sometime it is not possible to cast variable and it throws an exception, this is called as&nbsp;<strong>unsafe cast</strong>. The unsafe cast is performed by the infix operator&nbsp;<strong>as.</strong></p>\n\n\n\n<p>A nullable string (String?) cannot be cast to non nullabe string (String), this throw an exception.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval obj: Any? = null  \nval str: String = obj as String  \nprintln(str)  \n }  </code></pre>\n\n\n\n<p>The above program throw an exception:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" kotlin.TypeCastException: null cannot be cast to non-null type kotlin.String  \n at TestKt.main(Test.kt:3)  </code></pre>\n\n\n\n<p>While try to cast integer value of Any type into string type lead to generate a ClassCastException.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val obj: Any = 123  \nval str: String = obj as String   \n// Throws java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String  </code></pre>\n\n\n\n<p>Source and target variable need to nullable for casting to work:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval obj: String? = \"String unsafe cast\"  \nval str: String? = obj as String? // Works  \nprintln(str)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>String unsafe cast\n</code></pre>\n\n\n\n<h2>Kotlin Safe cast operator: as?</h2>\n\n\n\n<p>Kotlin provides a safe cast operator&nbsp;<strong>as?</strong>&nbsp;for safely cast to a type. It returns a null if casting is not possible rather than throwing an ClassCastException exception.</p>\n\n\n\n<p>Let&#8217;s see an example, trying to cast <strong>Any</strong> type of string value which is initially known by programmer not by compiler into nullable string and nullable int. It cast the value if possible or return null instead of throwing exception even casting is not possible.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \nval location: Any = \"Kotlin\"  \nval safeString: String? = location as? String  \nval safeInt: Int? = location as? Int  \nprintln(safeString)  \nprintln(safeInt)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Kotlin\nnull</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Unsafe cast operator: as Sometime it is not possible to cast variable and it throws an exception, this is called as&nbsp;unsafe cast. The unsafe cast is performed by the infix operator&nbsp;as. A nullable string (String?) cannot be cast to non nullabe string (String), this throw an exception. The above program throw an exception: While try [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/834"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=834"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/834/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=834"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=834"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=834"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 836,
    "date": "2020-08-25T05:10:20",
    "date_gmt": "2020-08-25T05:10:20",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=836"
    },
    "modified": "2020-08-25T05:10:20",
    "modified_gmt": "2020-08-25T05:10:20",
    "slug": "elvis-operator",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/elvis-operator/",
    "title": {
      "rendered": "Elvis Operator"
    },
    "content": {
      "rendered": "\n<p>Elvis operator&nbsp;<strong>(?:)</strong>&nbsp;is used to return the not null value even the conditional expression is null. It is also used to check the null safety of values.</p>\n\n\n\n<p>In some cases, we can declare a variable which can hold a null reference. Suppose that a variable&nbsp;<em>str</em>&nbsp;which contains null reference, before using&nbsp;<em>str</em>&nbsp;in program we will check it nullability. If variable str found as not null then its property will use otherwise use some other non-null value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var str: String? = null   \nvar str2: String? = \"May be declare nullable string\"  </code></pre>\n\n\n\n<p>In above code, the String&nbsp;<em>str</em>&nbsp;contains a null value, before accessing the value of str we need to perform safety check, whether string contain value or not. In conventional method we perform this safety check using&nbsp;<strong>if &#8230; else</strong>&nbsp;statement.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var len1: Int = if (str != null) str.length else -1  \nvar len2:  Int = if (str2 != null) str.length else -1  </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \nvar str: String? = null  \nvar str2: String? = \"May be declare nullable string\"  \nvar len1:  Int = if (str != null) str.length else -1  \nvar len2:  Int = if (str2 != null) str2.length else -1  \nprintln(\"Length of str is ${len1}\")  \nprintln(\"Length of str2 is ${len2}\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Length of str is -1\nLength of str2 is 30\n</code></pre>\n\n\n\n<p>Kotlin provides advance operator known as Elvis operator<strong>(?:)</strong>&nbsp;which return the not null value even the conditional expression is null. The above&nbsp;<strong>if . . . else</strong>&nbsp;operator can be expressed using&nbsp;<strong>Elvis operator</strong>&nbsp;as bellow:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var len1:  Int = str?.length ?: -1  \nvar len2:  Int = str2?.length ?:  -1  </code></pre>\n\n\n\n<p>Elvis operator returns expression left to&nbsp;<strong>?:</strong>&nbsp;i.e -1. (str?. length) if it is not null otherwise it returns expression right to&nbsp;<strong>(?:)</strong>i.e(-1). The expression right side of Elvis operator evaluated only if the left side returns null.</p>\n\n\n\n<h3>Kotlin Elvis Operator example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \nvar str: String? = null  \nvar str2: String? = \"May be declare nullable string\"  \nvar len1:  Int = str ?.length ?: -1  \nvar len2:  Int = str2 ?.length ?:  -1  \n  \nprintln(\"Length of str is ${len1}\")  \nprintln(\"Length of str2 is ${len2}\")  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Length of str is -1\nLength of str2 is 30\n</code></pre>\n\n\n\n<p>As Kotlin throw and return an expression, they can also be used on the right side of the Elvis operator. This can be used for checking functional arguments:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>funfunctionName(node: Node): String? {  \nval parent = node.getParent() ?: return null  \nval name = node.getName() ?: throw IllegalArgumentException(\"name expected\")  \n // ...  \n}  </code></pre>\n\n\n\n<h2>Kotlin Elvis Operatorusing throw and return expression</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval fruitName: String = fruits()  \nprintln(fruitName)  \n}  \nfun fruits(): String{  \nval str: String? =\"abc\"  \nval strLength: Int = if(str!= null) str.length else -1  \nval strLength2: Int = str?.length ?: -1  \nvar string = \"str = $str\\n\"+  \n            \"strLength = $strLength\\n\"+  \n            \"strLength2 = $strLength2\\n\\n\"  \n  \nfun check(textOne: String?, textTwo: String?): String?{  \nval textOne = textOne ?: return null  \nval textTwo = textTwo ?: IllegalArgumentException(\"text exception\")  \n  \n        return \"\\ntextOne = $textOne\\n\"+  \n                \"textTwo = $textTwo\\n\"  \n    }  \n    string += \"check(null,\\\"mango\\\") = ${check(null,\"mango\")}\\n\" +  \n            \"check(\\\"apple\\\",\\\"orange\\\") = ${check(\"apple\",\"orange\")}\\n\"  \n    return string  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>str = abc\nstrLength = 3\nstrLength2 = 3\n\ncheck(null,\"mango\") = null\ncheck(\"apple\",\"orange\") = \ntextOne = apple\ntextTwo = orange</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Elvis operator&nbsp;(?:)&nbsp;is used to return the not null value even the conditional expression is null. It is also used to check the null safety of values. In some cases, we can declare a variable which can hold a null reference. Suppose that a variable&nbsp;str&nbsp;which contains null reference, before using&nbsp;str&nbsp;in program we will check it nullability. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/836"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=836"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/836/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=836"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=836"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=836"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 838,
    "date": "2020-08-25T05:14:07",
    "date_gmt": "2020-08-25T05:14:07",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=838"
    },
    "modified": "2020-08-25T05:14:07",
    "modified_gmt": "2020-08-25T05:14:07",
    "slug": "kotlin-array-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-array-2/",
    "title": {
      "rendered": "Kotlin Array"
    },
    "content": {
      "rendered": "\n<p>Array is a collection of similar data either of types Int, String etc. Array in Kotlin has mutable in nature with fixed size. Which means we can perform both read and writes operations on elements of array.</p>\n\n\n\n<h3>Syntax of array decleration:</h3>\n\n\n\n<p>It initializes the element of array of int type with size 5 with all elements as 0 (zero).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var myArray = Array&lt;Int>(5){0}  </code></pre>\n\n\n\n<h3>Kotlin array declaration &#8211; using arrayOf function</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var myArray1 = arrayOf(1,10,4,6,15)  \nvar myArray2 = arrayOf&lt;Int>(1,10,4,6,15)  \nval myArray3 = arrayOf&lt;String>(\"Ajay\",\"Prakesh\",\"Michel\",\"John\",\"Sumit\")  \nvar myArray4= arrayOf(1,10,4, \"Ajay\",\"Prakesh\")  </code></pre>\n\n\n\n<h3>Kotlin array declaration &#8211; using arrayOf function</h3>\n\n\n\n<ol><li>var&nbsp;myArray5:&nbsp;IntArray&nbsp;=&nbsp;intArrayOf(5,10,20,12,15)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Let&#8217;s see an example of array in Kotlin. In this example we will see how to initialize and traverse its elements.</p>\n\n\n\n<h3>Kotlin Array Example 1:</h3>\n\n\n\n<p>In this example, we are simply initialize an array of size 5 with default value as 0. The index value of array starts with 0. First element of array is placed at index 0 and last element at one less than the size of array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var myArray = Array&lt;Int>(5){0}  \n  \n    for(element in myArray){  \n        println(element)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n0\n0\n0\n0\n</code></pre>\n\n\n\n<h3>Kotlin Array Example 2:</h3>\n\n\n\n<p>We can also able to rewrite the value of array using its index value. Since we can able to modify the value of array, so it is called as <strong>mutable</strong> in nature. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var myArray = Array&lt;Int>(5){0}  \n  \n    myArray&#91;1]= 10  \n    myArray&#91;3]= 15  \n  \n    for(element in myArray){  \n        println(element)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n10\n0\n15\n0</code></pre>\n\n\n\n<h3>Kotlin Array Example 3 &#8211; using arrayOf() and intArrayOf() function:</h3>\n\n\n\n<p>Array in Kotlin also declare using different functions such as arrayOf(), intArrayOf(), etc. Let&#8217;s see the example arrayOf() and intArrayOf() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val name = arrayOf&lt;String>(\"Ajay\",\"Prakesh\",\"Michel\",\"John\",\"Sumit\")  \n    var myArray2 = arrayOf&lt;Int>(1,10,4,6,15)  \n    var myArray3 = arrayOf(5,10,20,12,15)  \n    var myArray4= arrayOf(1,10,4, \"Ajay\",\"Prakesh\")  \n    var myArray5: IntArray = intArrayOf(5,10,20,12,15)  \n  \n    for(element in name){  \n        println(element)  \n    }  \n  \n    println()  \n    for(element in myArray2){  \n        println(element)  \n    }  \n    println()  \n    for(element in myArray3){  \n        println(element)  \n    }  \n    println()  \n    for(element in myArray4){  \n        println(element)  \n    }  \n    println()  \n    for(element in myArray5){  \n        println(element)  \n    }  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ajay\nPrakesh\nMichel\nJohn\nSumit\n\n1\n10\n4\n6\n15\n\n5\n10\n20\n12\n15\n\n1\n10\n4\nAjay\nPrakesh\n\n5\n10\n15\n20\n25\n</code></pre>\n\n\n\n<h3>Kotlin Array Example 4</h3>\n\n\n\n<p>Suppose that when we try to insert an element at index position greater than array size than what happen? It will throw an <em>ArrayIndexOutOfBoundException</em>. This is because the index value is not present where we want to insert the element. Due to this array is called <strong>fixed size</strong> length. Let&#8217;s see the example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var myArray5: IntArray = intArrayOf(5,10,20,12,15)  \n  \n    myArray5&#91;6]=18 // ArrayIndexOutOfBoundsException  \n    for(element in myArray5){  \n        println(element)    \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 6\n\tat ArrayListKt.main(Array.kt:4)\n</code></pre>\n\n\n\n<h3>Kotlin Array Example 5 &#8211; traversing using range:</h3>\n\n\n\n<p>The Kotlin&#8217;s array elements are also traverse using index range (minValue..maxValue) or (maxValue..minvalue). Let&#8217;s see an example of array traversing using range.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var myArray5: IntArray = intArrayOf(5,10,20,12,15)  \n  \n    for (index in 0..4){  \n        println(myArray5&#91;index])  \n    }  \n    println()  \n    for (index in 0..myArray5.size-1){  \n        println(myArray5&#91;index])  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n10\n20\n12\n15\n\n5\n10\n20\n12\n15</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Array is a collection of similar data either of types Int, String etc. Array in Kotlin has mutable in nature with fixed size. Which means we can perform both read and writes operations on elements of array. Syntax of array decleration: It initializes the element of array of int type with size 5 with all [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/838"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=838"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/838/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=838"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=838"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=838"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 840,
    "date": "2020-08-25T05:15:07",
    "date_gmt": "2020-08-25T05:15:07",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=840"
    },
    "modified": "2020-08-25T05:15:07",
    "modified_gmt": "2020-08-25T05:15:07",
    "slug": "kotlin-collections",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-collections/",
    "title": {
      "rendered": "Kotlin Collections"
    },
    "content": {
      "rendered": "\n<p>Collections in Kotlin are used to store group of related objects in a single unit. By using collection, we can store, retrieve manipulate and aggregate data.</p>\n\n\n\n<h2>Types of Kotlin Collections</h2>\n\n\n\n<p>Kotlin collections are broadly categories into two different forms. These are:</p>\n\n\n\n<ol><li><strong>Immutable Collection</strong>&nbsp;(or&nbsp;<strong>Collection</strong>)</li><li><strong>Mutable Collection</strong></li></ol>\n\n\n\n<h3>Immutable Collection:</h3>\n\n\n\n<p>Immutable collection also called Collection supports read only functionalities. Methods of immutable collection that supports read functionalities are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Collection Types</th><th>Methods of Immutable Collection</th></tr><tr><td>List</td><td>listOf()<br>listOf&lt;T&gt;()</td></tr><tr><td>Map</td><td>mapOf()</td></tr><tr><td>Set</td><td>setOf()</td></tr></tbody></table></figure>\n\n\n\n<h3>Mutable Collection:</h3>\n\n\n\n<p>Mutable collections supports both read and write functionalities. Methods of mutable collections that supports read and write functionalities are:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Collection Types</th><th>Methods of Mutable Collection</th></tr><tr><td>List</td><td>ArrayList&lt;T&gt;()<br>arrayListOf()<br>mutableListOf()</td></tr><tr><td>Map</td><td>HashMap<br>hashMapOf()<br>mutableMapOf()</td></tr><tr><td>Set</td><td>hashSetOf()<br>mutableSetOf()</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Collections in Kotlin are used to store group of related objects in a single unit. By using collection, we can store, retrieve manipulate and aggregate data. Types of Kotlin Collections Kotlin collections are broadly categories into two different forms. These are: Immutable Collection&nbsp;(or&nbsp;Collection) Mutable Collection Immutable Collection: Immutable collection also called Collection supports read only [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/840"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=840"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/840/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=840"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=840"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=840"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 842,
    "date": "2020-08-25T05:17:56",
    "date_gmt": "2020-08-25T05:17:56",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=842"
    },
    "modified": "2020-08-25T05:17:56",
    "modified_gmt": "2020-08-25T05:17:56",
    "slug": "kotlin-list-interface",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-list-interface/",
    "title": {
      "rendered": "List Interface"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>List</strong>&nbsp;is an interface and generic collection of elements. The List interface inherits form Collection&lt;T&gt; class. It is immutable and its methods supports only read functionalities.</p>\n\n\n\n<p>To use the List interface we need to use its function called&nbsp;<strong>listOf(), listOf&lt;E&gt;().</strong></p>\n\n\n\n<p>The elements of list follow the sequence of insertion order and contains index number same as array.</p>\n\n\n\n<h2>List Interface Declaration</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface List&lt;out E> : Collection&lt;E> (source)</code></pre>\n\n\n\n<h2>Function of Kotlin List Interface</h2>\n\n\n\n<p>There are several functions are available in the List interface. Some functions of List interface are mention below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Functions</th><th>Descriptions</th></tr><tr><td>abstract fun contains(element: E): Boolean</td><td>It checks specified element is contained in this collection.</td></tr><tr><td>abstract fun containsAll(elements: Collection&lt;E&gt;): Boolean</td><td>It checks all elements specified are contained in this collection.</td></tr><tr><td>abstract operator fun get(index: Int): E</td><td>It returns the element at given index from the list.</td></tr><tr><td>abstract fun indexOf(element: E): Int</td><td>Returns the index of first occurrence of specified element in the list, or -1 if specified element is not present in list.</td></tr><tr><td>abstract fun isEmpty(): Boolean</td><td>It returns the true if list is empty, otherwise false.</td></tr><tr><td>abstract fun iterator(): Iterator&lt;E&gt;</td><td>It returns an iterator over the elements of this list.</td></tr><tr><td>abstract fun lastIndexOf(element: E): Int</td><td>It returns the index of last occurrence of specified element in the list, or return -1 if specified element is not present in list.</td></tr><tr><td>abstract fun listIterator(): ListIterator&lt;E&gt;</td><td>It returns a list iterator over the elements in proper sequence in current list.</td></tr><tr><td>abstract fun listIterator(index: Int): ListIterator&lt;E&gt;</td><td>It returns a list iterator over the elements in proper sequence in current list, starting at specified index.</td></tr><tr><td>abstract fun subList(fromIndex: Int, toIndex: Int): List</td><td>It returns a part of list between fromIndex (inclusive) to toIndex (exclusive).</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin List Example 1</h3>\n\n\n\n<p>Let&#8217;s see an example of list using&nbsp;<em>listOf()</em>&nbsp;function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var list = listOf(\"Ajay\",\"Vijay\",\"Prakash\")//read only, fix-size  \n    for(element in list){  \n        println(element)  \n    }</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ajay\nVijay\nPrakash\n</code></pre>\n\n\n\n<h3>Kotlin List Example 2</h3>\n\n\n\n<p>In the&nbsp;<em>listOf()</em>&nbsp;function we can pass the different types of data at the same time. List can also traverse the list using index range.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var list = listOf(1,2,3,\"Ajay\",\"Vijay\",\"Prakash\")//read only, fix-size  \n    for(element in list){  \n        println(element)  \n    }  \n    println()  \n    for(index in 0..list.size-1){  \n        println(list&#91;index])  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\nAjay\nVijay\nPrakash\n\n1\n2\n3\nAjay\nVijay\nPrakash\n</code></pre>\n\n\n\n<h3>Kotlin List Example 3</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>For more specific we can provide the generic types of list such as listOf&lt;Int>(), listOf&lt;String>(), listOf&lt;Any>() Let's see the example.</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var intList: List&lt;Int> = listOf&lt;Int>(1,2,3)  \n    var stringList: List&lt;String> = listOf&lt;String>(\"Ajay\",\"Vijay\",\"Prakash\")  \n    var anyList: List&lt;Any> = listOf&lt;Any>(1,2,3,\"Ajay\",\"Vijay\",\"Prakash\")  \n    println(\"print int list\")  \n    for(element in intList){  \n        println(element)  \n    }  \n    println()  \n    println(\"print string list\")  \n    for(element in stringList){  \n        println(element)  \n    }  \n    println()  \n    println(\"print any list\")  \n    for(element in anyList){  \n        println(element)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>print int list\n1\n2\n3\n\nprint string list\nAjay\nVijay\nPrakash\n\nprint any list\n1\n2\n3\nAjay\nVijay\nPrakash\n</code></pre>\n\n\n\n<h3>Kotlin List Example 4</h3>\n\n\n\n<p>Let&#8217;s see the use of different function of Kotlin list interface using&nbsp;<em>listOf&lt;T&gt;()</em>&nbsp;function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var stringList: List&lt;String> = listOf&lt;String>(\"Ajay\",\"Vijay\",\"Prakash\",\"Vijay\",\"Rohan\")  \n    var list: List&lt;String> = listOf&lt;String>(\"Ajay\",\"Vijay\",\"Prakash\")  \n    for(element in stringList){  \n        print(element+\" \")  \n    }  \n    println()  \n    println(stringList.get(0))  \n    println(stringList.indexOf(\"Vijay\"))  \n    println(stringList.lastIndexOf(\"Vijay\"))  \n    println(stringList.size)  \n    println(stringList.contains(\"Prakash\"))  \n    println(stringList.containsAll(list))  \n    println(stringList.subList(2,4))  \n    println(stringList.isEmpty())  \n    println(stringList.drop(1))  \n    println(stringList.dropLast(2))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ajay Vijay Prakash Vijay Rohan \nAjay\n1\n3\n5\ntrue\ntrue\n&#91;Prakash, Vijay]\nfalse\n&#91;Vijay, Prakash, Vijay, Rohan]\n&#91;Ajay, Vijay, Prakash]</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;List&nbsp;is an interface and generic collection of elements. The List interface inherits form Collection&lt;T&gt; class. It is immutable and its methods supports only read functionalities. To use the List interface we need to use its function called&nbsp;listOf(), listOf&lt;E&gt;(). The elements of list follow the sequence of insertion order and contains index number same as array. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/842"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=842"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/842/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=842"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=842"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=842"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 844,
    "date": "2020-08-25T05:22:22",
    "date_gmt": "2020-08-25T05:22:22",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=844"
    },
    "modified": "2020-08-25T05:22:22",
    "modified_gmt": "2020-08-25T05:22:22",
    "slug": "kotlin-arraylist-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-arraylist-class/",
    "title": {
      "rendered": "ArrayList class"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>ArrayList</strong>&nbsp;class is used to create a dynamic array. Which means the size of ArrayList class can be increased or decreased according to requirement. ArrayList class provides both read and write functionalities.</p>\n\n\n\n<p>Kotlin ArrayList class follows the sequence of insertion order. ArrayList class is non synchronized and it may contains duplicate elements. The elements of ArrayList class are accessed randomly as it works on index basis.</p>\n\n\n\n<h2>Constructor of Kotlin ArrayList</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor</th><th>Description</th></tr><tr><td>ArrayList&lt;E&gt;()</td><td>It is used to create an empty ArrayList</td></tr><tr><td>ArrayList(capacity: Int)</td><td>It is used to create an ArrayList of specified capacity.</td></tr><tr><td>ArrayList(elements: Collection&lt;E&gt;)</td><td>It is used to create an ArrayList filled from the elements of collection.</td></tr></tbody></table></figure>\n\n\n\n<h3>Functions of Kotlin ArrayList</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Function</th><th>Description</th></tr><tr><td>open fun add(element: E): Boolean</td><td>It is used to add the specific element into the collection.</td></tr><tr><td>open fun add(index: Int, element: E)</td><td>It is used to insert an element at specific index.</td></tr><tr><td>open fun addAll(elements: Collection&lt;E&gt;): Boolean</td><td>It is used to add all the elements in the specified collection to current collection.</td></tr><tr><td>open fun addAll(index: Int, elements: Collection&lt;E&gt;): Boolean</td><td>It is used to add all the elements of specified collection into the current list at the specified index.</td></tr><tr><td>open fun clear()</td><td>It is used to removes all elements from the collection.</td></tr><tr><td>open fun get(index: Int): E</td><td>It is used to return the element at specified index in the list.</td></tr><tr><td>open fun indexOf(element: E): Int</td><td>It is used to return the index of first occurrence of specified element in the list or return -1 if the specified element in not present in the list.</td></tr><tr><td>open fun lastIndexOf(element: E): Int</td><td>It is used to return the last occurrence of given element from the list or it returns -1 if the given element is not present in the list.</td></tr><tr><td>open fun remove(element: E): Boolean</td><td>It is used to remove a single instance of the specific element from current collection, if it is available.</td></tr><tr><td>open fun removeAt(index: Int): E</td><td>It is used to remove the specific index element from the list.</td></tr><tr><td>open fun removeRange(startIndex: Int, endIndex: Int)</td><td>Its remove the range of elements starting from startIndex to endIndex in which endIndex is not includes.</td></tr><tr><td>open fun set(index: Int, element: E): E</td><td>It is used to replaces the element from the specified position from current list with the specified element.</td></tr><tr><td>open fun toArray(): Array&lt;Any?&gt;</td><td>It is used to return new array of type Array&lt;Any?&gt; with the elements of this collection.</td></tr><tr><td>open fun toString(): String</td><td>It is used to returns a string representation of the object.</td></tr><tr><td>fun trimToSize()</td><td>It does nothing in this ArrayList implementation.</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin ArrayList Example 1- empty ArrayList</h3>\n\n\n\n<p>Let&#8217;s create a simple example of ArrayList class define with empty ArrayList of String and add elements later.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList = ArrayList&lt;String>()//Creating an empty arraylist  \n    arrayList.add(\"Ajay\")//Adding object in arraylist  \n    arrayList.add(\"Vijay\")  \n    arrayList.add(\"Prakash\")  \n    arrayList.add(\"Rohan\")  \n    arrayList.add(\"Vijay\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......print ArrayList......\nAjay\nVijay\nPrakash\nRohan\nVijay\n</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 2- initialize ArrayList capacity</h3>\n\n\n\n<p>Let&#8217;s create an ArrayList class with initialize its initial capacity. The capacity of ArrayList class is not fixed and it can be change later in program according to requirement.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList1 = ArrayList&lt;String>(5)  \n    arrayList1.add(\"Ajay\")//Adding object in arraylist  \n    arrayList1.add(\"Vijay\")  \n    arrayList1.add(\"Prakash\")  \n    arrayList1.add(\"Rohan\")  \n    arrayList1.add(\"Vijay\")  \n    println(\".......print ArrayList1......\")  \n    for (i in arrayList1) {  \n        println(i)  \n    }  \n    println(\"size of arrayList1 = \"+arrayList1.size)  \n    val arrayList2 = ArrayList&lt;Int>(5)  \n    arrayList2.add(14)  \n    arrayList2.add(20)  \n    arrayList2.add(80)  \n    println(\"......print ArrayList2......\")  \n    for (i in arrayList2) {  \n        println(i)  \n    }  \n    println(\"size of arrayList2 = \"+arrayList2.size)  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList1......\nAjay\nVijay\nPrakash\nRohan\nVijay\nsize of arrayList1 = 5\n......print ArrayList2......\n14\n20\n80\nsize of arrayList2 = 3\n</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 3- filled elements in ArrayList using collection</h3>\n\n\n\n<p>The elements in Kotlin ArratList class can also be added using other collection. For more specific in ArrayList class it is declared by its generic types. Elements of ArrayList class also be traverse using iterator() function. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList: ArrayList&lt;String> = ArrayList&lt;String>(5)  \n    var list: MutableList&lt;String> = mutableListOf&lt;String>()  \n  \n    list.add(\"Ajay\")  \n    list.add(\"Vijay\")  \n    list.add(\"Prakash\")  \n  \n    arrayList.addAll(list)  \n    println(\"......print ArrayList......\")  \n    val itr = arrayList.iterator()  \n    while(itr.hasNext()) {  \n        println(itr.next())  \n    }  \n    println(\"size of arrayList = \"+arrayList.size)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\nsize of arrayList = 3\n</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 4 &#8211; get()</h3>\n\n\n\n<p>The get() function of ArrayList class is used to retrieve the element present at given specified index. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList: ArrayList&lt;String> = ArrayList&lt;String>(5)  \n  \n    arrayList.add(\"Ajay\")  \n    arrayList.add(\"Vijay\")  \n    arrayList.add(\"Prakash\")  \n    arrayList.add(\"Rohan\")  \n    arrayList.add(\"Vijay\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n    println(\".......arrayList.get(2).......\")  \n    println( arrayList.get(2))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\nRohan\nVijay\n.......arrayList.get(2).......\nPrakash</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 5 &#8211; set()</h3>\n\n\n\n<p>The set() function of ArrayList class is used to set the given element at specified index and replace if any element present at specified index. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList: ArrayList&lt;String> = ArrayList&lt;String>(5)  \n  \n    arrayList.add(\"Ajay\")  \n    arrayList.add(\"Vijay\")  \n    arrayList.add(\"Prakash\")  \n    arrayList.add(\"Rohan\")  \n    arrayList.add(\"Vijay\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n    println(\".......arrayList.set(2,\\\"Ashu\\\").......\")  \n    arrayList.set(2,\"Ashu\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\nRohan\nVijay\n.......arrayList.set(2,\"Ashu\").......\n.......print ArrayList.......\nAjay\nVijay\nAshu\nRohan\nVijay\n</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 6 &#8211; indexOf()</h3>\n\n\n\n<p>The indexOf() function of ArrayList class is used to retrieve the index value of first occurrence of element or return -1 if the specified element in not present in the list. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList: ArrayList&lt;String> = ArrayList&lt;String>(5)  \n  \n    arrayList.add(\"Ajay\")  \n    arrayList.add(\"Vijay\")  \n    arrayList.add(\"Prakash\")  \n    arrayList.add(\"Rohan\")  \n    arrayList.add(\"Vijay\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n        println(\".......arrayList.indexOf(\\\"Vijay\\\").......\")  \n    println(arrayList.indexOf(\"Vijay\"))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\nRohan\nVijay\n.......arrayList.indexOf(\"Vijay\").......\n1\n</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 7 &#8211; lastIndexOf()</h3>\n\n\n\n<p>The lastindexOf() function of ArrayList class is used to retrieve the index value of last occurrence of element or return -1 if the specified element in not present in the list. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList: ArrayList&lt;String> = ArrayList&lt;String>(5)  \n  \n    arrayList.add(\"Ajay\")  \n    arrayList.add(\"Vijay\")  \n    arrayList.add(\"Prakash\")  \n    arrayList.add(\"Rohan\")  \n    arrayList.add(\"Vijay\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n    println(\".......arrayList.lastIndexOf(\\\"Vijay\\\").......\")  \n    println(arrayList.lastIndexOf(\"Vijay\"))  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\nRohan\nVijay\n.......arrayList.lastIndexOf(\"Vijay\").......\n4</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 8 &#8211; remove()</h3>\n\n\n\n<p>The remove () function of ArrayList class is used to remove the first occurrence of element if it is present in the list. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList: ArrayList&lt;String> = ArrayList&lt;String>(5)  \n  \n    arrayList.add(\"Ajay\")  \n    arrayList.add(\"Vijay\")  \n    arrayList.add(\"Prakash\")  \n    arrayList.add(\"Rohan\")  \n    arrayList.add(\"Vijay\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n    println(\".......arrayList.remove(\\\"Vijay\\\").......\")  \n    arrayList.remove(\"Vijay\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\nRohan\nVijay\n.......arrayList.remove(\"Vijay\").......\nAjay\nPrakash\nRohan\nVijay\n</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 9 &#8211; removeAt()</h3>\n\n\n\n<p>The removeAt() function of ArrayList class is used to remove the element of specified index from the list. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList: ArrayList&lt;String> = ArrayList&lt;String>(5)  \n  \n    arrayList.add(\"Ajay\")  \n    arrayList.add(\"Vijay\")  \n    arrayList.add(\"Prakash\")  \n    arrayList.add(\"Rohan\")  \n    arrayList.add(\"Vijay\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n    println(\".......arrayList.remove(3).......\")  \n    arrayList.removeAt(3)  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\nRohan\nVijay\n.......arrayList.remove(3).......\nAjay\nVijay\nPrakash\nVijay</code></pre>\n\n\n\n<h3>Kotlin ArrayList Example 10 &#8211; clear()</h3>\n\n\n\n<p>The clear() function of ArrayList class is used to remove (clear) all the elements of list. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val arrayList: ArrayList&lt;String> = ArrayList&lt;String>(5)  \n  \n    arrayList.add(\"Ajay\")  \n    arrayList.add(\"Vijay\")  \n    arrayList.add(\"Prakash\")  \n    arrayList.add(\"Rohan\")  \n    arrayList.add(\"Vijay\")  \n    println(\".......print ArrayList.......\")  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n    println(\".......arrayList.clear().......\")  \n    arrayList.clear()  \n  \n    for (i in arrayList) {  \n        println(i)  \n    }  \n    println(\".......arrayList.......\")  \n    println(arrayList)  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\nRohan\nVijay\n.......arrayList.clear().......\n.......arrayList.......\n&#91;]</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;ArrayList&nbsp;class is used to create a dynamic array. Which means the size of ArrayList class can be increased or decreased according to requirement. ArrayList class provides both read and write functionalities. Kotlin ArrayList class follows the sequence of insertion order. ArrayList class is non synchronized and it may contains duplicate elements. The elements of ArrayList [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/844"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=844"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/844/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=844"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=844"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=844"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 847,
    "date": "2020-08-25T05:40:58",
    "date_gmt": "2020-08-25T05:40:58",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=847"
    },
    "modified": "2020-08-25T05:40:58",
    "modified_gmt": "2020-08-25T05:40:58",
    "slug": "kotlin-arraylist-arraylistof",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-arraylist-arraylistof/",
    "title": {
      "rendered": "ArrayList arrayListOf()"
    },
    "content": {
      "rendered": "\n<p>An&nbsp;<strong>arrayListOf()</strong>&nbsp;is a function of&nbsp;<strong>ArrayList</strong>&nbsp;class. ArrayList is mutable which means it provides both read am write functionalities. The arrayListOf() function returns an ArrayList type.</p>\n\n\n\n<h2>Syntax of arrayListOf() function</h2>\n\n\n\n<ol><li>inline&nbsp;<strong>fun</strong>&nbsp;&lt;T&gt;&nbsp;arrayListOf():&nbsp;ArrayList&lt;T&gt;&nbsp;(source)&nbsp;&nbsp;</li></ol>\n\n\n\n<ol><li><strong>fun</strong>&nbsp;&lt;T&gt;&nbsp;arrayListOf(vararg&nbsp;elements:&nbsp;T):&nbsp;ArrayList&lt;T&gt;&nbsp;(source)&nbsp;&nbsp;</li></ol>\n\n\n\n<h3>Function of Kotlin ArrayList</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Function</th><th>Description</th></tr><tr><td>open fun add(element: E): Boolean</td><td>It is used to add the specific element into the collection.</td></tr><tr><td>open fun add(index: Int, element: E)</td><td>It is used to insert an element at specific index.</td></tr><tr><td>open fun addAll(elements: Collection&lt;E&gt;): Boolean</td><td>It is used to add all the elements in the specified collection to current collection.</td></tr><tr><td>open fun addAll(index: Int, elements: Collection&lt;E&gt;): Boolean</td><td>It is used to add all the elements of specified collection into the current list at the specified index.</td></tr><tr><td>open fun clear()</td><td>It is used to removes all elements from the collection.</td></tr><tr><td>open fun get(index: Int): E</td><td>It is used to return the element at specified index in the list.</td></tr><tr><td>open fun indexOf(element: E): Int</td><td>It is used to return the index of first occurrence of specified element in the list or return -1 if the specified element in not present in the list.</td></tr><tr><td>open fun lastIndexOf(element: E): Int</td><td>It is used to return the last occurrence of given element from the list or it returns -1 if the given element is not present in the list.</td></tr><tr><td>open fun remove(element: E): Boolean</td><td>It is used to remove a single instance of the specific element from current collection, if it is available.</td></tr><tr><td>open fun removeAt(index: Int): E</td><td>It is used to remove the specific index element from the list.</td></tr><tr><td>open fun removeRange(startIndex: Int, endIndex: Int)</td><td>Its remove the range of elements starting from startIndex to endIndex in which endIndex is not includes.</td></tr><tr><td>open fun set(index: Int, element: E): E</td><td>It is used to replaces the element from the specified position from current list with the specified element.</td></tr><tr><td>open fun toArray(): Array&lt;Any?&gt;</td><td>It is used to return new array of type Array&lt;Any?&gt; with the elements of this collection.</td></tr><tr><td>open fun toString(): String</td><td>It is used to returns a string representation of the object.</td></tr><tr><td>fun trimToSize()</td><td>It does nothing in this ArrayList implementation.</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin arrayListOf() Example 1</h3>\n\n\n\n<p>Let&#8217;s create a simple example of arrayListOf() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n     var arrayList = arrayListOf&lt;Int>(4,7,12)  \n      for(element in arrayList){  \n        println(element)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>4\n7\n12\n</code></pre>\n\n\n\n<h3>Kotlin arrayListOf() Example 2</h3>\n\n\n\n<p>For more specific we can define the generic types of arrayListOf() function such as arrayListOf&lt;Int&gt;(), arrqayListOf&lt;String&gt;(),arrayListOf&lt;Any&gt;(). Let&#8217;s see the example.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>print int ArrayList\n1\n2\n3\n\nprint string ArrayList\nAjay\nVijay\nPrakash\n\nprint any ArrayList\n1\n2\n3\nAjay\nVijay\nPrakash\n</code></pre>\n\n\n\n<h3>Kotlin arrayListOf() Example 3- iterator() function</h3>\n\n\n\n<p>The elements of ArrayList class is also be traverse using inbuilt&nbsp;<em>iterator()</em>&nbsp;function. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val list: ArrayList&lt;String> = arrayListOf&lt;String>()  \n  \n    list.add(\"Ajay\")  \n    list.add(\"Vijay\")  \n    list.add(\"Prakash\")  \n  \n    println(\".......print ArrayList.......\")  \n    val itr = list.iterator()  \n    while(itr.hasNext()) {  \n        println(itr.next())  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print ArrayList.......\nAjay\nVijay\nPrakash\n</code></pre>\n\n\n\n<h3>Kotlin arrayListOf() Example 4 &#8211; get()</h3>\n\n\n\n<p>The&nbsp;<em>get()</em>&nbsp;function of arrayListOf() is used to retrieve the element present at specified index. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val list: ArrayList&lt;String> = arrayListOf&lt;String>()  \n  \n    list.add(\"Ajay\")  \n    list.add(\"Vijay\")  \n    list.add(\"Prakash\")  \n    list.add(\"Rohan\")  \n    list.add(\"Vijay\")  \n    println(\".......print list.......\")  \n    for (i in list) {  \n        println(i)  \n    }  \n    println(\".......list.get(2).......\")  \n    println( list.get(2))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print list.......\nAjay\nVijay\nPrakash\nRohan\nVijay\n.......list.get(2).......\nPrakash\n</code></pre>\n\n\n\n<h3>Kotlin arrayListOf() Example 5 &#8211; set()</h3>\n\n\n\n<p>The&nbsp;<em>set()</em>&nbsp;function of arrayListOf() is used to set the given element at specified index and replace if any element already present at that index. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val list: ArrayList&lt;String> = arrayListOf&lt;String>()  \n  \n    list.add(\"Ajay\")  \n    list.add(\"Vijay\")  \n    list.add(\"Prakash\")  \n  \n    println(\".......print list.......\")  \n    for (i in list) {  \n        println(i)  \n    }  \n    println(\".......arrayList.set(2,\\\"Rohan\\\").......\")  \n    list.set(2,\"Rohan\")  \n    println(\".......print ArrayList.......\")  \n    for (i in list) {  \n        println(i)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print list.......\nAjay\nVijay\nPrakash\n.......list.set(2,\"Rohan\").......\n.......print list.......\nAjay\nVijay\nRohan\n</code></pre>\n\n\n\n<h3>Kotlin arrayListOf() Example &#8211; add and print Employee data</h3>\n\n\n\n<p>Let&#8217;s create an another example of arrayListOf() function of ArrayList class. In this example we are adding and traversing Employee class data. Here Employee class is bean class which defines the property of Employee.</p>\n\n\n\n<ol><li><strong>class</strong>&nbsp;Employee(var&nbsp;id:&nbsp;Int,&nbsp;var&nbsp;name:&nbsp;String,&nbsp;var&nbsp;phone:&nbsp;Int,&nbsp;var&nbsp;city:&nbsp;String)&nbsp;&nbsp;</li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val arrayList: ArrayList&lt;Employee> = arrayListOf&lt;Employee>()  \n    val e1 = Employee(101, \"Ajay\", 55555, \"Delhi\")  \n    val e2 = Employee(102, \"Rahul\", 44443, \"Mumbai\")  \n    val e3 = Employee(103, \"Sanjay\", 45422, \"Noida\")  \n    arrayList.add(e1)  \n    arrayList.add(e2)  \n    arrayList.add(e3)  \n  \n    for (e in arrayList) {  \n        println(\"${e.id} ${e.name} ${e.phone} ${e.city}\")  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Ajay 55555 Delhi\n102 Rahul 44443 Mumbai\n103 Sanjay 45422 Noida</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An&nbsp;arrayListOf()&nbsp;is a function of&nbsp;ArrayList&nbsp;class. ArrayList is mutable which means it provides both read am write functionalities. The arrayListOf() function returns an ArrayList type. Syntax of arrayListOf() function inline&nbsp;fun&nbsp;&lt;T&gt;&nbsp;arrayListOf():&nbsp;ArrayList&lt;T&gt;&nbsp;(source)&nbsp;&nbsp; fun&nbsp;&lt;T&gt;&nbsp;arrayListOf(vararg&nbsp;elements:&nbsp;T):&nbsp;ArrayList&lt;T&gt;&nbsp;(source)&nbsp;&nbsp; Function of Kotlin ArrayList Function Description open fun add(element: E): Boolean It is used to add the specific element into the collection. open fun add(index: Int, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/847"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=847"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/847/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=847"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=847"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=847"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 849,
    "date": "2020-08-25T05:45:38",
    "date_gmt": "2020-08-25T05:45:38",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=849"
    },
    "modified": "2020-08-25T05:45:38",
    "modified_gmt": "2020-08-25T05:45:38",
    "slug": "kotlin-map-interface",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-map-interface/",
    "title": {
      "rendered": "Map Interface"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>Map</strong>&nbsp;is an interface and generic collection of elements. Map interface holds data in the form of key and value pair. Map key are unique and holds only one value for each key. The key and value may be of different pairs such as &lt;Int, Int&gt;,&lt;Int, String&gt;, &lt;Char, String&gt;etc. This interface is immutable, fixed size and its methods support read only access.</p>\n\n\n\n<p>To use the Map interface we need to use its function called&nbsp;<strong>mapOf() or mapOf&lt;k,v&gt;().</strong></p>\n\n\n\n<h3>Map Interface Declaration</h3>\n\n\n\n<ol><li><strong>interface</strong>&nbsp;Map&lt;K,&nbsp;out&nbsp;V&gt;&nbsp;(source)&nbsp;&nbsp;</li></ol>\n\n\n\n<h3>Properties of Map Interface</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>abstract val entries: Set&lt;Entry&lt;K, V&gt;&gt;</td><td>It returns only read all key and value pair of Set Interface in current map.</td></tr><tr><td>abstract val keys: Set&lt;K&gt;</td><td>It returns only read all key of Set Interface in current map.</td></tr><tr><td>abstract val keys: Set&lt;K&gt;</td><td>It returns the number of key and value pair in current map.</td></tr><tr><td>abstract val values: Collection&lt;V&gt;</td><td>It returns only read Collection of all valued in current map. This collection may contain duplicate values.</td></tr></tbody></table></figure>\n\n\n\n<h3>Functions of Map Interface</h3>\n\n\n\n<p>There are several functions are available in Map interface. Some functions of Map interface are mention below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Functions</th><th>Description</th></tr><tr><td>fun &lt;K, V&gt; Map&lt;key, value&gt;.getValue(key: K): V</td><td>It returns a value of given key or throws an exception if no such key is available in the map.</td></tr><tr><td>operator fun &lt;V, V1 : V&gt; Map&lt;in String,<br>V&gt;.getValue(<br>thisRef: Any?,<br>property: KProperty&lt;*&gt;<br>): V1</td><td>It returns the value of the property for the given object from current read- only map.</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.contains(key: K): Boolean</td><td>It checks is the given key contains in map.</td></tr><tr><td>fun &lt;K&gt; Map&lt;out K, *&gt;.containsKey(key: K): Boolean</td><td>If map contains the specified key it returns true.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;K, V&gt;.containsValue(value: V): Boolean</td><td>If map maps one or more keys to specified value it returns true.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;out K, V&gt;.getOrDefault(<br>key: K,<br>defaultValue: V<br>): V</td><td>It returns the value which is given by key in mapped, or returns default value if map dose not contains mapping for the given key.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;out K, V&gt;.asIterable(): Iterable&lt;Entry&lt;K, V&gt;&gt;</td><td>It creates an instance of Iterable interface which wraps the original map returning its entries when being iterated.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;out K, V&gt;.asIterable(): Iterable&lt;Entry&lt;K, V&gt;&gt;</td><td>It creates an instance of Iterable interface which wraps the original map returning its entries when being iterated.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;out K, V&gt;.asSequence(): Sequence&lt;Entry&lt;K, V&gt;&gt;</td><td>It creates a Sequence interface instance which wraps the current map and returning its entries when it has iterated.</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.iterator(): Iterator&lt;Entry&lt;K, V&gt;&gt;</td><td>It returns an Iterator over the entries in the Map.</td></tr><tr><td>operator fun&nbsp;Map.minus(key: K): Map</td><td>It returns a map which contains all the entries of original map except the entry of mention key.</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.minus(<br>keys: Iterable&lt;K&gt;<br>): Map&lt;K, V&gt;</td><td>It returns a map which contains all the entries of original map except those entries key which are contained in the mention key collection.</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.minus(<br>keys: Sequence&lt;K&gt;<br>): Map&lt;K, V&gt;</td><td>It returns a map which contains all the entries of original map except those entries key which are contained in the given key sequence.</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.plus(<br>pair: Pair&lt;K, V&gt;<br>): Map&lt;K, V&gt;</td><td>It creates a new read only map by adding or replacing an entry to current map from a given key-value pair.</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.plus(<br>pairs: Iterable&lt;Pair&lt;K, V&gt;&gt;<br>): Map&lt;K, V&gt;</td><td>It creates a new read only map by adding or replacing entries to current map from a given collection of key-value pairs.</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.plus(<br>pairs: Sequence&lt;Pair&lt;K, V&gt;&gt;<br>): Map&lt;K, V&gt;</td><td>It creates a new read only map by adding or replacing entries to current map from a given sequence of key-value pairs.</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin Map Interface Example 1</h3>\n\n\n\n<p>Let&#8217;s create an example of declaring and traversing the value of map using mapOf&lt;k,v&gt;() function. In this example, we create key of Int and value of String types.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap = mapOf&lt;Int,String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n    for(key in myMap.keys){  \n        println(myMap&#91;key])  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ajay\nVijay\nPrakash\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 2 &#8211; generic</h3>\n\n\n\n<p>For more specific we can provide generic type Map such as myMap: Map&lt;k, v&gt; = mapOf&lt;k,v&gt;().</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int, String> = mapOf&lt;Int,String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 3 &#8211; non generic</h3>\n\n\n\n<p>If we cannot specify any types of key and value of Map Interface then it can take different types of key and value. This is because all class internally uses &lt;Any, Any&gt; types. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap = mapOf(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\",\"ram\" to \"Ram\", \"two\" to 2)  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\nElement at key ram = Ram\nElement at key two = 2\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 4 &#8211; mapOf().getValue()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n    println(\".....myMap.getValue(4).......\")  \n    println(myMap.getValue(4))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n.....myMap.getValue(4).......\nVijay\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 5 &#8211; mapOf().contains()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n  \n      println(\".....myMap.contains(3).......\")  \n      println( myMap.contains(3))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n.....myMap.contains(3).......\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 6 &#8211; mapOf().containsKey()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n  \n      println(\"......myMap.containsKey(2)......\")  \n      println(myMap.containsKey(2))  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<h3>Kotlin Map Interface Example 7 &#8211; mapOf().containsValue ()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n......myMap.containsKey(2)......\nfalse\n</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n......myMap.containsValue(\"Ajay\")......\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 8 &#8211; mapOf().get()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n        println(\".....myMap.get(1).......\")  \n        println(myMap.get(1))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n.....myMap.get(1).......\nAjay\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 9 &#8211; mapOf().getOrDefault ()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n    \n        println(\"......myMap.getOrDefault(3, \\\"Vijay\\\")......\")  \n        println(myMap.getOrDefault(3, \"Vijay\"))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n......myMap.getOrDefault(3, \"Vijay\")......\nPrakash</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 10 &#8211; mapOf().asIterable ()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n      println(\".......myMap.asIterable().....\")  \n      for(itr in myMap.asIterable()){  \n          println(\"key = ${itr.key} value = ${itr.value}\")  \n      }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n.......myMap.asIterable().....\nkey = 1 value = Ajay\nkey = 4 value = Vijay\nkey = 3 value = Prakash</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 11 &#8211; mapOf().iterator()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n      println(\"......myMap.iterator()......\")  \n      for(itr1 in myMap.iterator()){  \n          println(\"key = ${itr1.key} value = ${itr1.value}\")  \n      }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n......myMap.iterator()......\nkey = 1 value = Ajay\nkey = 4 value = Vijay\nkey = 3 value = Prakash\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 12 &#8211; mapOf().minus()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n      println(\"......myMap.minus(4)......\")  \n      for(m in myMap.minus(4)){  \n          println(myMap&#91;m.key])  \n      }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n......myMap.minus(4)......\nAjay\nPrakash\n</code></pre>\n\n\n\n<h3>Kotlin Map Interface Example 13 &#8211; mapOf().plus()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val myMap: Map&lt;Int,String> = mapOf&lt;Int, String>(1 to \"Ajay\", 4 to \"Vijay\", 3 to \"Prakash\")  \n  \n    for(key in myMap.keys){  \n        println(\"Element at key $key = ${myMap.get(key)}\")  \n    }  \n      println(\"......myMap.plus(Pair(5, \\\"Rohan\\\"))......\")  \n      for(p in myMap.plus(Pair(5, \"Rohan\"))){  \n          println(\"Element at key ${p.key} = ${p.value}\")  \n      }  \n    \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Element at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\n......myMap.plus(Pair(5, \"Rohan\"))......\nElement at key 1 = Ajay\nElement at key 4 = Vijay\nElement at key 3 = Prakash\nElement at key 5 = Rohan</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;Map&nbsp;is an interface and generic collection of elements. Map interface holds data in the form of key and value pair. Map key are unique and holds only one value for each key. The key and value may be of different pairs such as &lt;Int, Int&gt;,&lt;Int, String&gt;, &lt;Char, String&gt;etc. This interface is immutable, fixed size and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/849"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=849"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/849/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=849"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=849"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=849"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 852,
    "date": "2020-08-25T05:49:17",
    "date_gmt": "2020-08-25T05:49:17",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=852"
    },
    "modified": "2020-08-25T05:49:17",
    "modified_gmt": "2020-08-25T05:49:17",
    "slug": "kotlin-hashmap-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-hashmap-class/",
    "title": {
      "rendered": "HashMap class"
    },
    "content": {
      "rendered": "\n<p>Kotlin HashMap is class of collection based on MutableMap interface. Kotlin HashMap class implements the MutableMap interface using Hash table. It store the data in the form of key and value pair. It is represented as HashMap&lt;key, value&gt; or HashMap&lt;K, V&gt;.</p>\n\n\n\n<p>The implementation of HashMap class does not make guarantees about the order of data of key, value and entries of collections.</p>\n\n\n\n<h3>Constructor of Kotlin HashMap class</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor</th><th>Description</th></tr><tr><td>HashMap()</td><td>It constructs an empty HashMap instance</td></tr><tr><td>HashMap(initialCapacity: Int, loadFactor: Float = 0f)</td><td>It is used to constructs a HashMap of specified capacity.</td></tr><tr><td>HashMap(original: Map&lt;out K, V&gt;)</td><td>It constructs a HashMap instance filled with contents of specified original map.</td></tr></tbody></table></figure>\n\n\n\n<h3>Functions of Kotlin HashMap class</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Functions</th><th>Description</th></tr><tr><td>open fun put(key: K, value: V): V?</td><td>It puts the specified key and value in the map</td></tr><tr><td>open operator fun get(key: K): V?</td><td>It returns the value of specified key, or null if no such specified key is available in map.</td></tr><tr><td>open fun containsKey(key: K): Boolean</td><td>It returns true if map contains specifies key.</td></tr><tr><td>open fun containsValue(value: V): Boolean</td><td>It returns true if map maps one of more keys to specified value.</td></tr><tr><td>open fun clear()</td><td>It removes all elements from map.</td></tr><tr><td>open fun remove(key: K): V?</td><td>It removes the specified key and its corresponding value from map</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin HashMap Example 1- empty HashMap</h3>\n\n\n\n<p>Let&#8217;s create a simple example of HashMap class define with empty HashMap of &lt;Int, String&gt; and add elements later. To print the value of HashMap we will either use&nbsp;<em>HashMap[key]</em>&nbsp;or&nbsp;<em>HashMap.get(key)</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val hashMap:HashMap&lt;Int,String> = HashMap&lt;Int,String>() //define empty hashmap  \n    hashMap.put(1,\"Ajay\")  \n    hashMap.put(3,\"Vijay\")  \n    hashMap.put(4,\"Praveen\")  \n    hashMap.put(2,\"Ajay\")  \n    println(\".....traversing hashmap.......\")  \n    for(key in hashMap.keys){  \n        println(\"Element at key $key = ${hashMap&#91;key]}\")  \n    }} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.....traversing hashmap.......\nElement at key 1 = Ajay\nElement at key 2 = Ajay\nElement at key 3 = Vijay\nElement at key 4 = Praveen\n</code></pre>\n\n\n\n<h3>Kotlin HashMap Example 2- HashMap initial capacity</h3>\n\n\n\n<p>HashMap can also be initialize with its initial capacity. The capacity can be changed by adding and replacing its element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val hashMap:HashMap&lt;String,String> = HashMap&lt;String,String>(3)  \n    hashMap.put(\"name\",\"Ajay\")  \n    hashMap.put(\"city\",\"Delhi\")  \n    hashMap.put(\"department\",\"Software Development\")  \n    println(\".....traversing hashmap.......\")  \n    for(key in hashMap.keys){  \n        println(\"Element at key $key = ${hashMap&#91;key]}\")  \n    }  \n    println(\".....hashMap.size.......\")  \n    println(hashMap.size)  \n    hashMap.put(\"hobby\",\"Travelling\")  \n    println(\".....hashMap.size  after adding hobby.......\")  \n    println(hashMap.size)  \n    println(\".....traversing hashmap.......\")  \n    for(key in hashMap.keys){  \n        println(\"Element at key $key = ${hashMap.get(key)}\")  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.....traversing hashmap.......\nElement at key name = Ajay\nElement at key department = Software Development\nElement at key city = Delhi\n.....hashMap.size.......\n3\n.....hashMap.size  after adding hobby.......\n4\n.....traversing hashmap.......\nElement at key name = Ajay\nElement at key department = Software Development\nElement at key city = Delhi\nElement at key hobby = Travelling\n</code></pre>\n\n\n\n<h3>Kotlin HashMap Example 3- remove() and put()</h3>\n\n\n\n<p>The function&nbsp;<em>remove()</em>&nbsp;is used to replace the existing value at specified key with specified value. The&nbsp;<em>put()</em>&nbsp;function add a new value at specified key and replace the old value. If&nbsp;<em>put()</em>&nbsp;function does not found any specified key, it put a new value at specified key.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val hashMap:HashMap&lt;Int,String> = HashMap&lt;Int,String>()  \n    hashMap.put(1,\"Ajay\")  \n    hashMap.put(3,\"Vijay\")  \n    hashMap.put(4,\"Prakash\")  \n    hashMap.put(2,\"Rohan\")  \n  \n    println(\".....traversing hashmap.......\")  \n    for(key in hashMap.keys){  \n        println(\"Element at key $key = ${hashMap&#91;key]}\")  \n    }  \n  \n    hashMap.replace(3,\"Ashu\")  \n    hashMap.put(2,\"Raj\")  \n    println(\".....hashMap.replace(3,\\\"Ashu\\\")... hashMap.replace(2,\\\"Raj\\\").......\")....\")  \n    for(key in hashMap.keys){  \n        println(\"Element at key $key = ${hashMap&#91;key]}\")  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.....traversing hashmap.......\nElement at key 1 = Ajay\nElement at key 2 = Rohan\nElement at key 3 = Vijay\nElement at key 4 = Prakash\n.....hashMap.replace(3,\"Ashu\")...hashMap.put(2,\"Raj\")....\nElement at key 1 = Ajay\nElement at key 2 = Raj\nElement at key 3 = Ashu\nElement at key 4 = Prakash</code></pre>\n\n\n\n<h3>Kotlin HashMap Example 4 &#8211; containsKey(key) and containsValue(value)</h3>\n\n\n\n<p>The Function&nbsp;<em>containsKey()</em>&nbsp;returns true if the specified key is present in HashMap or returns false if no such key exist.</p>\n\n\n\n<p>The Function&nbsp;<em>containsValue()</em>&nbsp;is used to check whether the specified value is exist in HashMap or not. If value exists in HashMap, it will returns true else returns false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val hashMap:HashMap&lt;Int,String> = HashMap&lt;Int,String>()  \n    hashMap.put(1,\"Ajay\")  \n    hashMap.put(3,\"Vijay\")  \n    hashMap.put(4,\"Prakash\")  \n    hashMap.put(2,\"Rohan\")  \n  \n    println(\".....traversing hashmap.......\")  \n    for(key in hashMap.keys){  \n        println(\"Element at key $key = ${hashMap&#91;key]}\")  \n    }  \n  \n  \n    println(\".....hashMap.containsKey(3).......\")  \n    println(hashMap.containsKey(3))  \n    println(\".....hashMap.containsValue(\\\"Rohan\\\").......\")  \n    println(hashMap.containsValue(\"Rohan\"))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.....traversing hashmap.......\nElement at key 1 = Ajay\nElement at key 2 = Rohan\nElement at key 3 = Vijay\nElement at key 4 = Prakash\n.....hashMap.containsKey(3).......\ntrue\n.....hashMap.containsValue(\"Rohan\").......\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin HashMap Example 5 &#8211; clear()</h3>\n\n\n\n<p>The&nbsp;<em>clear()</em>&nbsp;function is used to clear all the data from the HashMap.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val hashMap:HashMap&lt;Int,String> = HashMap&lt;Int,String>()  \n    hashMap.put(1,\"Ajay\")  \n    hashMap.put(3,\"Vijay\")  \n    hashMap.put(4,\"Prakash\")  \n    hashMap.put(2,\"Rohan\")  \n  \n    println(\".....traversing hashmap.......\")  \n    for(key in hashMap.keys){  \n        println(\"Element at key $key = ${hashMap&#91;key]}\")  \n    }  \n  \n  \n    println(\".....hashMap.clear().......\")  \n    hashMap.clear()  \n    println(\".....print hashMap after clear().......\")  \n    println(hashMap)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.....traversing hashmap.......\nElement at key 1 = Ajay\nElement at key 2 = Rohan\nElement at key 3 = Vijay\nElement at key 4 = Prakash\n.....hashMap.clear().......\n.....print hashMap after clear().......\n{}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin HashMap is class of collection based on MutableMap interface. Kotlin HashMap class implements the MutableMap interface using Hash table. It store the data in the form of key and value pair. It is represented as HashMap&lt;key, value&gt; or HashMap&lt;K, V&gt;. The implementation of HashMap class does not make guarantees about the order of data [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/852"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=852"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/852/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=852"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=852"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=852"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 854,
    "date": "2020-08-25T05:53:15",
    "date_gmt": "2020-08-25T05:53:15",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=854"
    },
    "modified": "2020-08-25T05:53:15",
    "modified_gmt": "2020-08-25T05:53:15",
    "slug": "kotlin-hashmap-hashmapof",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-hashmap-hashmapof/",
    "title": {
      "rendered": "HashMap: hashMapOf()"
    },
    "content": {
      "rendered": "\n<p>A&nbsp;<strong>hashMapOf()</strong>&nbsp;is a function of&nbsp;<strong>HashMap</strong>&nbsp;class. It returns a new HashMap with the specified contents. It contains pairs of data in the form of key and value. HashMap is mutable collection which provides both read am write functionalities.</p>\n\n\n\n<h2>Syntax of hashMapOf() function</h2>\n\n\n\n<ol><li>inline&nbsp;<strong>fun</strong>&nbsp;&lt;K,&nbsp;V&gt;&nbsp;hashMapOf():&nbsp;HashMap&lt;K,&nbsp;V&gt;&nbsp;(source)&nbsp;&nbsp;</li></ol>\n\n\n\n<ol><li><strong>fun</strong>&nbsp;&lt;K,&nbsp;V&gt;&nbsp;hashMapOf(vararg&nbsp;pairs:&nbsp;Pair&lt;K,&nbsp;V&gt;):&nbsp;HashMap&lt;K,&nbsp;V&gt;&nbsp;(source)&nbsp;&nbsp;</li></ol>\n\n\n\n<h3>Functions of Kotlin HashMap class</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Function</th><th>Description</th></tr><tr><td>open fun put(key: K, value: V): V?</td><td>It puts the specified key and value in the map</td></tr><tr><td>open operator fun get(key: K): V?</td><td>It returns the value of specified key, or null if no such specified key is available in map.</td></tr><tr><td>open fun containsKey(key: K): Boolean</td><td>It returns true if map contains specifies key.</td></tr><tr><td>open fun containsValue(value: V): Boolean</td><td>It returns true if map maps one of more keys to specified value.</td></tr><tr><td>open fun clear()</td><td>It removes all elements from map.</td></tr><tr><td>open fun remove(key: K): V?</td><td>It removes the specified key and its corresponding value from map</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin hashMapOf() Example 1</h3>\n\n\n\n<p>The hashMapOf() function of HashMap can be declared as different generic types such as hashMapOf&lt;Int, String&gt;(), hashMapOf&lt;String, String&gt;(), hashMapOf&lt;Any, Any&gt;() etc.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val intMap: HashMap&lt;Int, String> = hashMapOf&lt;Int,String>(1 to \"Ashu\",4 to \"Rohan\", 2 to \"Ajeet\", 3 to \"Vijay\")  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>(\"name\" to \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n    val anyMap: HashMap&lt;Any, Any> = hashMapOf&lt;Any, Any>(1 to \"Ashu\", \"name\" to \"Rohsan\", 2 to 200)  \n    println(\".....traverse intMap........\")  \n    for(key in intMap.keys){  \n        println(intMap&#91;key])  \n    }  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(stringMap&#91;key])  \n    }  \n    println(\"......traverse anyMap.......\")  \n    for(key in anyMap.keys){  \n        println(anyMap&#91;key])  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.....traverse intMap........\nAshu\nAjeet\nVijay\nRohan\n......traverse stringMap.......\nAshu\nDevelopment\nDelhi\nPlaying\n......traverse anyMap.......\nRohsan\nAshu\n200\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 2 &#8211; containsKey()</h3>\n\n\n\n<p>The containsKey() function returns true if it contains the mention key in the HashMap, otherwise it returns false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n    println(\"......stringMap.containsKey(\\\"name\\\").......\")  \n    println(stringMap.containsKey(\"name\"))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n......stringMap.containsKey(\"name\").......\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 3 &#8211; containsValue()</h3>\n\n\n\n<p>The containsValue() function returns true if it contains the mention value in the HashMap, otherwise it returns false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n    println(\".......stringMap.containsValue(\\\"Delhi\\\")......\")  \n    println(stringMap.containsValue(\"Delhi\"))  \n    println(stringMap.containsValue(\"Mumbai\"))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n.......stringMap.containsValue(\"Delhi\")......\ntrue\nfalse\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 4 &#8211; contains()</h3>\n\n\n\n<p>The contains() function returns true if it contains the mention key in the HashMap, otherwise it returns false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n    println(\"......stringMap.contains(\\\"city\\\").......\")  \n    println(stringMap.contains(\"city\"))  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n......stringMap.contains(\"city\").......\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 5 &#8211; replace(key, value)</h3>\n\n\n\n<p>The replace(key, value) function is used to replace the existing value at specified key with new specified value. The replace(key, value) function returns the replaced value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n    println(\"......stringMap.replace(\\\"city\\\",\\\"Mumbai\\\").......\")  \n    println(stringMap.replace(\"city\",\"Mumbai\"))  \n    println(\"......traverse stringMap after stringMap.replace(\\\"city\\\",\\\"Mumbai\\\").......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n......stringMap.replace(\"city\",\"Mumbai\").......\nDelhi\n......traverse stringMap after stringMap.replace(\"city\",\"Mumbai\").......\nKey = city , value = Mumbai\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 6 &#8211; replace(key, oldValue, newValue)</h3>\n\n\n\n<p>The replace(key, oldValue, newValue) function is used to replace the existing old value at specified key with new specified value. The replace(key, newValue, oldValue) function returns true if it replace old value with new else it returns false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n    println(\".......stringMap.replace(\\\"department\\\", \\\"Development\\\",\\\"Management\\\")......\")  \n    println(stringMap.replace(\"department\", \"Development\",\"Management\"))  \n    println(\"......traverse stringMap after stringMap.replace(\\\"department\\\", \\\"Development\\\",\\\"Management\\\").......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n.......stringMap.replace(\"department\", \"Development\",\"Management\")......\ntrue\n......traverse stringMap after stringMap.replace(\"department\", \"Development\",\"Management\").......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Management\nKey = hobby , value = Playing\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 7 &#8211; hashMapOf().size, hashMapOf().key</h3>\n\n\n\n<p>The&nbsp;<em>size</em>&nbsp;property of hashMapOf() function returns total size of HashMap and the&nbsp;<em>key</em>&nbsp;property returns all keys of HashMap.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n    println(\".....stringMap.size........\")  \n    println(stringMap.size)  \n  \n    println(\".......stringMap.keys......\")  \n    println(stringMap.keys)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n.....stringMap.size........\n4\n.......stringMap.keys......\n</code></pre>\n\n\n<p>[city, name, department, hobby]</p>\n\n\n\n<h3>Kotlin hashMapOf() Example 8 &#8211; getValue(key), getOrDefault(key, defaultValue)</h3>\n\n\n\n<p>The getValue() function returns value of specified key of the HashMap. Whereas getOrDefault() function returns corresponding value of specified key if it exist in the HashMap or it returns mentioned default value if no such key exists in HashMap.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n    println(\".......stringMap.getValue(\\\"department\\\")......\")  \n    println(stringMap.getValue(\"department\"))  \n  \n    println(\".......stringMap.getOrDefault(\\\"name\\\", \\\"Default Value\\\")......\")  \n    println(stringMap.getOrDefault(\"name\", \"Default Value\"))  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n.......stringMap.getValue(\"department\")......\nDevelopment\n.......stringMap.getOrDefault(\"name\", \"Default Value\")......\nAshu\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 9 &#8211; remove(key)</h3>\n\n\n\n<p>The remove(key) function is used to remove the specified key along with its corresponding value. The remove(key) function returns the removed value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n        println(\"......stringMap.remove(\\\"city\\\").......\")  \n        println(stringMap.remove(\"city\"))  \n        println(\"......traverse stringMap after stringMap.remove(\\\"city\\\").......\")  \n        for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n......stringMap.remove(\"city\").......\nDelhi\n......traverse stringMap after stringMap.remove(\"city\").......\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 10 &#8211; remove(key, value)</h3>\n\n\n\n<p>The remove(key, value) function is used to remove the specified key along with its corresponding value. The remove(key, value) function returns true if it remove the specified key along with its value else it returns false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n        println(\".......stringMap.remove(\\\"hobby\\\",\\\"Playing\\\")......\")  \n        println(stringMap.remove(\"hobby\",\"Playing\"))  \n    println(\"......traverse stringMap after stringMap.remove(\\\"hobby\\\",\\\"Playing\\\").......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n.......stringMap.remove(\"hobby\",\"Playing\")......\ntrue\n......traverse stringMap after stringMap.remove(\"hobby\",\"Playing\").......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 11 &#8211; set(key, value)</h3>\n\n\n\n<p>The set(key, value) function is used to set the given value at specified key if it exist. If the key does not exist in the HashMap it will add new key and set the given value corresponding to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n    stringMap.set(\"name\",\"Ashutosh\")  \n    stringMap.set(\"skill\",\"Kotlin\")  \n    println(\"......traverse stringMap after stringMap.set(\\\"name\\\",\\\"Ashutosh\\\") and   stringMap.set(\\\"skill\\\",\\\"Kotlin\\\").......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n......stringMap.set(\"name\",\"Ashutosh\").......\n......traverse stringMap after stringMap.set(\"name\",\"Ashutosh\") and stringMap.set(\"skill\",\"Kotlin\").......\nKey = city , value = Delhi\nKey = skill , value = Kotlin\nKey = name , value = Ashutosh\nKey = department , value = Development\nKey = hobby , value = Playing\n</code></pre>\n\n\n\n<h3>Kotlin hashMapOf() Example 12 &#8211; clear()</h3>\n\n\n\n<p>The clear() function is used to clear (or remove) all the key, value pair from the HashMap.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \n    val stringMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    stringMap.put(\"name\", \"Ashu\")  \n    stringMap.put(\"city\", \"Delhi\")  \n    stringMap.put(\"department\", \"Development\")  \n    stringMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse stringMap.......\")  \n    for(key in stringMap.keys){  \n        println(\"Key = ${key} , value = ${stringMap&#91;key]}\")  \n    }  \n  \n        println(\"......stringMap.clear().......\")  \n        println(stringMap.clear())  \n        println(stringMap)  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse stringMap.......\nKey = city , value = Delhi\nKey = name , value = Ashu\nKey = department , value = Development\nKey = hobby , value = Playing\n......stringMap.clear().......\nkotlin.Unit\n{}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A&nbsp;hashMapOf()&nbsp;is a function of&nbsp;HashMap&nbsp;class. It returns a new HashMap with the specified contents. It contains pairs of data in the form of key and value. HashMap is mutable collection which provides both read am write functionalities. Syntax of hashMapOf() function inline&nbsp;fun&nbsp;&lt;K,&nbsp;V&gt;&nbsp;hashMapOf():&nbsp;HashMap&lt;K,&nbsp;V&gt;&nbsp;(source)&nbsp;&nbsp; fun&nbsp;&lt;K,&nbsp;V&gt;&nbsp;hashMapOf(vararg&nbsp;pairs:&nbsp;Pair&lt;K,&nbsp;V&gt;):&nbsp;HashMap&lt;K,&nbsp;V&gt;&nbsp;(source)&nbsp;&nbsp; Functions of Kotlin HashMap class Function Description open fun put(key: K, value: V): [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/854"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=854"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/854/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=854"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=854"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=854"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 856,
    "date": "2020-08-25T05:57:19",
    "date_gmt": "2020-08-25T05:57:19",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=856"
    },
    "modified": "2020-08-25T05:57:19",
    "modified_gmt": "2020-08-25T05:57:19",
    "slug": "kotlin-mutablemap-interface",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-mutablemap-interface/",
    "title": {
      "rendered": "MutableMap Interface"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>MutableMap</strong>&nbsp;is an interface of collection framework that holds the object in the form of key and value pair. The values of MutableMap interface are retrieved by using their corresponding keys. The key and value may be of different pairs such as &lt;Int, Int&gt;,&lt;Int, String&gt;, &lt;Char, String&gt; etc. Each key of MutableMap holds only one value.</p>\n\n\n\n<p>To use the MutableMap interface we need to use its function called&nbsp;<strong>mutableMapOf()</strong>&nbsp;or&nbsp;<strong>mutableMapOf &lt;k,v&gt;()</strong>.</p>\n\n\n\n<h3>Kotlin MutableMap Interface Declaration</h3>\n\n\n\n<ol><li><strong>interface</strong>&nbsp;MutableMap&lt;K,&nbsp;V&gt;&nbsp;:&nbsp;Map&lt;K,&nbsp;V&gt;&nbsp;(source)&nbsp;&nbsp;</li></ol>\n\n\n\n<h3>Properties of MutableMap</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>abstract val entries: MutableSet&lt;MutableEntry&lt;K, V&gt;&gt;</td><td>This returns a MutableSet of all its key and value pairs in the map.</td></tr><tr><td>abstract val keys: MutableSet&lt;K&gt;</td><td>This returns all the keys of MutableSet in this map.</td></tr><tr><td>abstract val values: MutableCollection&lt;V&gt;</td><td>This returns all the values of MutableCollection in the current map. This collection may contain duplicate values.</td></tr></tbody></table></figure>\n\n\n\n<h3>Function of Kotlin MutableMap</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Function</th><th>Description</th></tr><tr><td>abstract fun put(key: K, value: V): V?</td><td>It adds the given value with the specified key in the map.</td></tr><tr><td>abstract fun putAll(from: Map&lt;out K, V&gt;)</td><td>This updates the current map with key/value pairs from the mentioned map.</td></tr><tr><td>abstract fun remove(key: K): V?</td><td>It removes the specified key with its corresponding value from the map.</td></tr><tr><td>open fun remove(key: K, value: V): Boolean</td><td>It removes the key and value entities from the map only if it exist in the map.</td></tr><tr><td>abstract fun clear()</td><td>This function is used to removes all the elements from the map.</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.contains(key: K): Boolean</td><td>It checks the given key in the map.</td></tr><tr><td>abstract fun containsKey(key: K): Boolean</td><td>It returns the true if map contains the specified key.</td></tr><tr><td>fun &lt;K&gt; Map&lt;out K, *&gt;.containsKey(key: K): Boolean</td><td>It returns the true if map contains the specified key.</td></tr><tr><td>abstract fun containsValue(value: V): Boolean</td><td>It returns true if the map maps one or more keys for the given value.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;K, V&gt;.containsValue(value: V): Boolean</td><td>It returns true if the map maps one or more keys for the given value.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;out K, V&gt;.count(): Int</td><td>It returns the total number of entities of the map</td></tr><tr><td>operator fun &lt;K, V&gt; Map&lt;out K, V&gt;.get(key: K): V?</td><td>It returns the value corresponding to mention key, or null if no such key found in the map.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;out K, V&gt;.getOrDefault(<br>key: K,<br>defaultValue: V<br>): V</td><td>It returns the value with corresponding mention key, or it returns default value if no such mapping for the key in the map.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;K, V&gt;.getOrElse(<br>key: K,<br>defaultValue: () -&gt; V<br>): V</td><td>It returns the value for the mention key in the map, or it returns the default value function if no such entry found for the given key.</td></tr><tr><td>fun &lt;K, V&gt; Map&lt;K, V&gt;.getValue(key: K): V</td><td>It returns the value corresponding to given key, or it throws an exception if no key found in the map.</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 1 traversing MutableMap</h3>\n\n\n\n<p>Let&#8217;s create an example to create a MutableMap using mutablemapOf() function and traverse it. In this example we create three different types (MutableMap&lt;Int, String&gt;, MutableMap&lt;String, String&gt; and MutableMap&lt;Any, Any&gt;) of MutableMap with different ways.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap1: MutableMap&lt;Int, String> = mutableMapOf&lt;Int, String>(1 to \"Ashu\", 4 to \"Rohan\", 2 to \"Ajeet\", 3 to \"Vijay\")  \n  \n    val mutableMap2: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap2.put(\"name\", \"Ashu\")  \n    mutableMap2.put(\"city\", \"Delhi\")  \n    mutableMap2.put(\"department\", \"Development\")  \n    mutableMap2.put(\"hobby\", \"Playing\")  \n    val mutableMap3: MutableMap&lt;Any, Any> = mutableMapOf&lt;Any, Any>(1 to \"Ashu\", \"name\" to \"Rohsan\", 2 to 200)  \n    println(\".....traverse mutableMap1........\")  \n    for (key in mutableMap1.keys) {  \n        println(\"Key = ${key}, Value = ${mutableMap1&#91;key]}\")  \n    }  \n    println(\"......traverse mutableMap2.......\")  \n    for (key in mutableMap2.keys) {  \n        println(\"Key = \"+key +\", \"+\"Value = \"+mutableMap2&#91;key])  \n    }  \n    println(\"......traverse mutableMap3......\")  \n    for (key in mutableMap3.keys) {  \n        println(\"Key = ${key}, Value = ${mutableMap3&#91;key]}\")  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.....traverse mutableMap1........\nKey = 1, Value = Ashu\nKey = 4, Value = Rohan\nKey = 2, Value = Ajeet\nKey = 3, Value = Vijay\n......traverse mutableMap2.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n......traverse mutableMap3......\nKey = 1, Value = Ashu\nKey = name, Value = Rohsan\nKey = 2, Value = 200\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 2 put() and putAll()</h3>\n\n\n\n<p>The function&nbsp;<em>put()</em>&nbsp;and&nbsp;<em>putAll()</em>&nbsp;are used to add the elements in the MutableMap.&nbsp;<em>put()</em>&nbsp;function adds the single element at a time where as&nbsp;<em>putAll()</em>&nbsp;function adds the collection type elements in the MutableMap. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n  \n  \n    val hashMap: HashMap&lt;String,String> = hashMapOf&lt;String,String>()  \n    hashMap.put(\"department\", \"Development\")  \n    hashMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n    for (key in mutableMap.keys) {  \n        println(\"Key = \"+key +\", \"+\"Value = \"+mutableMap&#91;key])  \n    }  \n    mutableMap.putAll(hashMap)  \n    println(\"......traverse mutableMap after mutableMap.putAll(hashMap).......\")  \n    for (key in mutableMap.keys) {  \n        println(\"Key = \"+key +\", \"+\"Value = \"+mutableMap&#91;key])  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\n......traverse mutableMap after mutableMap.putAll(hashMap).......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 3 containsKey()</h3>\n\n\n\n<p>The containsKey() function is used to check the specified key is present in MutableMap or not. If it contains the specified key, it returns true otherwise it returns false. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n        println(\"Key = \"+key +\", \"+\"Value = \"+mutableMap&#91;key])  \n    }  \n  \n    println(\"......mutableMap.containsKey(\\\"city\\\").......\")  \n    println(mutableMap.containsKey(\"city\"))  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n......mutableMap.containsKey(\"city\").......\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 4 containsValue()</h3>\n\n\n\n<p>The containsValue() function is used to check the specified value is present in MutableMap or not. This function returns true if the map maps one or more keys for the given value else it returns false. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n        println(\"Key = \"+key +\", \"+\"Value = \"+mutableMap&#91;key])  \n    }  \n  \n     println(\".......mutableMap.containsValue(\\\"Delhi\\\")......\")  \n     println(mutableMap.containsValue(\"Delhi\"))  \n    println(\".......mutableMap.containsValue(\\\"Mumbai\\\")......\")  \n    println(mutableMap.containsValue(\"Mumbai\"))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n.......mutableMap.containsValue(\"Delhi\")......\ntrue\n.......mutableMap.containsValue(\"Mumbai\")......\nfalse\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 5 contains()</h3>\n\n\n\n<p>The contains() function is used to check either specified key of value is present in the MutableMap or not. If the specified key or value is present in the MutableMap then it will returns true else it returns false. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n        println(\"Key = \"+key +\", \"+\"Value = \"+mutableMap&#91;key])  \n    }  \n  \n     println(\"......mutableMap.contains(\\\"city\\\").......\")  \n     println(mutableMap.contains(\"city\"))  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n......mutableMap.contains(\"city\").......\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 6 get(key)</h3>\n\n\n\n<p>The get(key) function is used to retrieve the corresponding value of specified key in the MutableMap. If no such key is present in the MutableMap it returns null. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n        println(\"Key = \"+key +\", \"+\"Value = \"+mutableMap&#91;key])  \n    }  \n  \n    println(\".......mutableMap.get(\\\"department\\\")......\")  \n    println(mutableMap.get(\"department\"))  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n.......mutableMap.get(\"department\")......\nDevelopment\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 7 getValue(key)</h3>\n\n\n\n<p>The getValue() function used to returns corresponding value of specified key of the MutableMap or it throws an exception if no key found in map. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n         println(\"Key = ${key}, Value = ${mutableMap&#91;key]}\")  \n    }  \n  \n    println(\".......mutableMap.getValue(\\\"department\\\")......\")  \n    println(mutableMap.getValue(\"department\"))  \n  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n.......mutableMap.getValue(\"department\")......\nDevelopment\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 8 getOrDefault()</h3>\n\n\n\n<p>The getOrDefault() function returns corresponding value of specified key of MutableMap. If no such key exists in the MutableMap then it returns default mention value. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n       println(\"Key = ${key}, Value = ${mutableMap&#91;key]}\")  \n    }  \n  \n    println(\".......mutableMap.getOrDefault(\\\"name\\\", \\\"Default Value\\\")......\")  \n    println(mutableMap.getOrDefault(\"name\", \"default value\"))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n.......mutableMap.getOrDefault(\"name\", \"Default Value\")......\nAshu\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 9 count()</h3>\n\n\n\n<p>The count() function is used to returns the total number of elements present in the MutableMap. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n       println(\"Key = ${key}, Value = ${mutableMap&#91;key]}\")  \n    }  \n  \n    println(\".....mutableMap.count()........\")  \n    println(mutableMap.count())  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n.....mutableMap.count()........\n4\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 10 remove(key) and remove(key, value)</h3>\n\n\n\n<p>The remove(key) function is used to remove value corresponding to its mention key. Whereas remove(key,value) function removes element containing key and value. The remove(key, value) function returns true if it remove the specified key along with its value else it returns false. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n       println(\"Key = ${key}, Value = ${mutableMap&#91;key]}\")  \n    }  \n  \n    println(\"......mutableMap.remove(\\\"city\\\").......\")  \n    println(mutableMap.remove(\"city\"))  \n  \n    println(\".......mutableMap.remove(\\\"hobby\\\",\\\"Playing\\\")......\")  \n    println(mutableMap.remove(\"hobby\",\"Playing\"))  \n  \n    println(\"......traverse mutableMap.......\")  \n    for (key in mutableMap.keys) {  \n        println(\"Key = ${key}, Value = ${mutableMap&#91;key]}\")  \n    }  \n  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n......mutableMap.remove(\"city\").......\nDelhi\n.......mutableMap.remove(\"hobby\",\"Playing\")......\ntrue\n......traverse mutableMap after remove.......\nKey = name, Value = Ashu\nKey = department, Value = Development\n</code></pre>\n\n\n\n<h3>Kotlin MutableMap Example &#8211; 11 clear()</h3>\n\n\n\n<p>The clear() function is used to removes all the elements from the MutableMap. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n    val mutableMap: MutableMap&lt;String, String> = mutableMapOf&lt;String, String>()  \n    mutableMap.put(\"name\", \"Ashu\")  \n    mutableMap.put(\"city\", \"Delhi\")  \n    mutableMap.put(\"department\", \"Development\")  \n    mutableMap.put(\"hobby\", \"Playing\")  \n  \n    println(\"......traverse mutableMap.......\")  \n  \n   for (key in mutableMap.keys) {  \n       println(\"Key = ${key}, Value = ${mutableMap&#91;key]}\")  \n    }  \n  \n    println(\"......mutableMap.clear().......\")  \n    println(mutableMap.clear())  \n    println(mutableMap)  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traverse mutableMap.......\nKey = name, Value = Ashu\nKey = city, Value = Delhi\nKey = department, Value = Development\nKey = hobby, Value = Playing\n......mutableMap.clear().......\nkotlin.Unit\n{}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;MutableMap&nbsp;is an interface of collection framework that holds the object in the form of key and value pair. The values of MutableMap interface are retrieved by using their corresponding keys. The key and value may be of different pairs such as &lt;Int, Int&gt;,&lt;Int, String&gt;, &lt;Char, String&gt; etc. Each key of MutableMap holds only one value. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/856"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=856"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/856/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=856"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=856"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=856"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 858,
    "date": "2020-08-25T05:59:56",
    "date_gmt": "2020-08-25T05:59:56",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=858"
    },
    "modified": "2020-08-25T05:59:56",
    "modified_gmt": "2020-08-25T05:59:56",
    "slug": "kotlin-set-interface",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-set-interface/",
    "title": {
      "rendered": "Set Interface"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>Set</strong>&nbsp;<em>interface</em>&nbsp;is a generic unordered collection of elements. Set interface does not support duplicate elements. This interface is immutable in nature its methods supports read-only functionality of the set.</p>\n\n\n\n<p>Set interface uses&nbsp;<em>setOf()</em>&nbsp;function to create the list of object of set interface which contains list of elements.</p>\n\n\n\n<h3>Set Interface declaration</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Set&lt;out E> : Collection&lt;E> (source)  </code></pre>\n\n\n\n<h3>Properties of Set Interface</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>abstract val size: Int</td><td>It returns the size of collection.</td></tr></tbody></table></figure>\n\n\n\n<h3>Functions of Set Interface</h3>\n\n\n\n<p>Kotlin&nbsp;<strong>Set</strong>&nbsp;interface has several functions. Some of its functions are mention below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Functions</th><th>Description</th></tr><tr><td>abstract fun contains(element: E): Boolean</td><td>It checks the mention element is present in this collection. If it contains element, it returns true else returns false.</td></tr><tr><td>abstract fun containsAll(elements: Collection&lt;E&gt;): Boolean</td><td>It checks all the mention elements of specified collection are present in this collection. If it contains element, it returns true else returns false.</td></tr><tr><td>abstract fun isEmpty(): Boolean</td><td>It returns true if the collection is empty (contains no elements) otherwise it returns false.</td></tr><tr><td>abstract fun iterator(): Iterator&lt;E&gt;</td><td>It returns an iterator over the elements of set object.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.all(predicate: (T) -&gt; Boolean): Boolean</td><td>It returns true if all the elements matches with given predicate.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.any(): Boolean</td><td>It returns true if the collection contains at least one element.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.count(predicate: (T) -&gt; Boolean): Int</td><td>It returns the total number of elements matching with given predicate.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.distinct(): List&lt;T&gt;</td><td>It returns a list which contains only distinct elements from the given collection.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.drop(n: Int): List&lt;T&gt;</td><td>It returns a list which contains all elements except first n elements.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.elementAtOrElse(<br>index: Int,<br>defaultValue: (Int) -&gt; T<br>): T</td><td>It returns an element at given index or result of calling the defaultValue function if the index is out bounds in current collection.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.filter(<br>predicate: (T) -&gt; Boolean<br>): List&lt;T&gt;</td><td>It returns a list which contains only those elements matches with given predicate.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.filterIndexed(<br>predicate: (index: Int, T) -&gt; Boolean<br>): List&lt;T&gt;</td><td>It returns a list which contains only those elements matches with given predicate.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.filterNot(<br>predicate: (T) -&gt; Boolean<br>): List&lt;T&gt;</td><td>It returns a list which contains only those elements which does not matches with given predicate.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.find(predicate: (T) -&gt; Boolean): T?</td><td>It returns the first element which matches with given predicate, or&nbsp;<em>null</em>&nbsp;if no such element was found.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.findLast(predicate: (T) -&gt; Boolean): T?</td><td>It returns the last element which matches with given predicate, or&nbsp;<em>null</em>&nbsp;if no such element was found.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.first(): T</td><td>It returns the first element.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.first(predicate: (T) -&gt; Boolean): T</td><td>It returns the first element which matches the given predicate.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.firstOrnull(): T?</td><td>It returns the first element or&nbsp;<em>null</em>&nbsp;if collection is empty.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.indexOf(element: T): Int</td><td>It returns the first index of given element, or -1 if element does not contains in collection.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.indexOfFirst(<br>predicate: (T) -&gt; Boolean<br>): Int</td><td>It returns the index of first element which matches the given predicate, or -1 if the element does not contains in collection.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.indexOfLast(<br>predicate: (T) -&gt; Boolean<br>): Int</td><td>It returns the index of last element which matches the given predicate, or -1 if the element does not contains in collection.</td></tr><tr><td>infix fun &lt;T&gt; Iterable&lt;T&gt;.intersect(<br>other: Iterable&lt;T&gt;<br>): Set&lt;T&gt;</td><td>It returns a set which contains all elements present in both this set and given collection.</td></tr><tr><td>fun &lt;T&gt; Collection&lt;T&gt;.isNotEmpty(): Boolean</td><td>It returns true if is not empty.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.last(): T</td><td>It returns the last element.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.last(predicate: (T) -&gt; Boolean): T</td><td>It returns the last element which matches with given predicate.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.lastIndexOf(element: T): Int</td><td>It returns the last index of given element, or -1 if element does not exist in collection.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.lastOrnull(): T?</td><td>It returns the last element of collection, or&nbsp;<em>null</em>&nbsp;if collection is empty.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.lastOrnull(predicate: (T) -&gt; Boolean): T?</td><td>It returns the last element after matching the given predicate, or returns&nbsp;<em>null</em>&nbsp;if no such element found in collection.</td></tr><tr><td>fun &lt;T : Comparable&lt;T&gt;&gt; Iterable&lt;T&gt;.max(): T?</td><td>It returns the largest element or&nbsp;<em>null</em>&nbsp;if no elements in collection.</td></tr><tr><td>fun &lt;T, R : Comparable&lt;R&gt;&gt; Iterable&lt;T&gt;.maxBy(<br>selector: (T) -&gt; R<br>): T?</td><td>It returns the first element yielding the largest value of the given function, or it returns&nbsp;<em>null</em>&nbsp;if there are no elements in collection.</td></tr><tr><td>fun &lt;T : Comparable&lt;T&gt;&gt; Iterable&lt;T&gt;.min(): T?</td><td>It returns the smallest element or&nbsp;<em>null</em>&nbsp;if there is no element in the collection.</td></tr><tr><td>fun &lt;T, R : Comparable&lt;R&gt;&gt; Iterable&lt;T&gt;.minBy(<br>selector: (T) -&gt; R<br>): T?</td><td>It returns the first element which gives the smallest value of the given function or&nbsp;<em>null</em>&nbsp;if there are no elements.</td></tr><tr><td>operator fun &lt;T&gt; Set&lt;T&gt;.minus(element: T): Set&lt;T&gt;</td><td>It returns a set which contains all the elements of original set except those given element.</td></tr><tr><td>operator fun &lt;T&gt; Set&lt;T&gt;.minus(elements: Iterable&lt;T&gt;): Set&lt;T&gt;</td><td>It returns a set which contains all the elements of original set except those given elements collection.</td></tr><tr><td>operator fun &lt;T&gt; Iterable&lt;T&gt;.minus(element: T): List&lt;T&gt;</td><td>It returns a list which contains all the elements of original collection except those contained in the given elements array.</td></tr><tr><td>fun &lt;T&gt; Set&lt;T&gt;.minusElement(element: T): Set&lt;T&gt;</td><td>It returns a set which contains all the elements of original set except those given element.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.minusElement(element: T): List&lt;T&gt;</td><td>It returns a list which contains all the elements of original collection except the first occurrence of the given element.</td></tr><tr><td>operator fun &lt;T&gt; Set&lt;T&gt;.plus(element: T): Set&lt;T&gt;</td><td>It returns a set of all elements of original set as well as the given element if it is not already present in the set.</td></tr><tr><td>operator fun &lt;T&gt; Set&lt;T&gt;.plus(elements: Iterable&lt;T&gt;): Set&lt;T&gt;</td><td>It returns a set which contains all the elements of original set as well as the given elements collection which are not already present in the set. The returned set preserves the iteration of element in the same order of the original set.</td></tr><tr><td>operator fun &lt;T&gt; Iterable&lt;T&gt;.plus(element: T): List&lt;T&gt;</td><td>It returns a list which contains all the elements of the original collection as well as the given element.</td></tr><tr><td>fun &lt;T&gt; Set&lt;T&gt;.plusElement(element: T): Set&lt;T&gt;</td><td>It returns a set which contains all the elements of the original set as well as the given element.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.plusElement(element: T): List&lt;T&gt;</td><td>It returns a list which contains all the elements of the original collection as well as the given element.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.reversed(): List&lt;T&gt;</td><td>It returns a list with elements in the reverse order.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.single(): T</td><td>It returns the single element, or it throws an exception if the collection has more than one elements or empty.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.singleOrnull(): T?</td><td>It returns a single element, or&nbsp;<em>null</em>&nbsp;if the collection has more than one element or it is empty.</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin Set Interface Example 1</h3>\n\n\n\n<p>Let create an example of declaring and traversing set element using&nbsp;<em>setOf()</em>&nbsp;function. In this example we create a set of Int type non generic and another generic set of&nbsp;<em>Any</em>&nbsp;type.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val intSet = setOf(2,6,4,29,4,5)  \n    val mySet: Set&lt;Any> = setOf(2,6,4,29,4,5,\"Ashu\",\"Ajay\")  \n    println(\".......print Int set.........\")  \n    for(element in intSet){  \n        println(element)  \n    }  \n    println(\".......print Any set.........\")  \n    for(element in mySet){  \n        println(element)  \n    }  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print Int set.........\n2\n6\n4\n29\n5\n.......print Any set.........\n2\n6\n4\n29\n5\nAshu\nAjay\n</code></pre>\n\n\n\n<p>In the above example we declare element 4 twice in both&nbsp;<em>intSet</em>&nbsp;and&nbsp;<em>mySet</em>&nbsp;but while traversing them they print the element 4 only once. This is because the set interface does not support duplicate elements.</p>\n\n\n\n<h3>Kotlin Set Interface Example 2 &#8211; contains() and containsAll()</h3>\n\n\n\n<p>The&nbsp;<em>contains()</em>&nbsp;function checks the given element is present in current set or not. If it is contains in the set, the set returns true else returns false. Whereas&nbsp;<em>containsAll()</em>&nbsp;function checks all the elements of collection type are present in the current set or not. If the set contains all elements of collection type it returns true else false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val mySet: Set&lt;Any> = setOf(2,6,4,29,5,\"Ashu\",\"Ajay\")  \n    val intSet = setOf(6,4,29)  \n    println(\".......print Any set.........\")  \n    for(element in mySet){  \n        println(element)  \n    }  \n    println(\"...mySet.contains\\\"Ashu\\\"...\")  \n    println(mySet.contains(\"Ashu\"))  \n    println(\"...mySet.contains(20)...\")  \n    println(mySet.contains(20))  \n    println(\"...mySet.containsAll(intSet)...\")  \n    println(mySet.containsAll(intSet))  \n  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print Any set.........\n2\n6\n4\n29\n5\nAshu\nAjay\n...mySet.contains\"Ashu\"...\ntrue\n...mySet.contains(20)...\nfalse\n...mySet.containsAll(intSet)...\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin Set Interface Example 3 &#8211; isEmpty() and isNotEmpty()</h3>\n\n\n\n<p>The isEmpty() function checks the current set is empty. If the set is empty the isEmpty() function returns true otherwise it returns false. And isNotEmpty() checks the current set is not empty. If the set is not empty the isNotEmpty() function returns true else return false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val mySet: Set&lt;Any> = setOf(2,6,4,29,5,\"Ashu\",\"Ajay\")  \n    println(\".......print Any set.........\")  \n    for(element in mySet){  \n        println(element)  \n    }  \n  \n    println(\"...mySet.isEmpty()...\")  \n    println(mySet.isEmpty())  \n  \n    println(\"...mySet.isNotEmpty()...\")  \n    println(mySet.isNotEmpty())  \n  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print Any set.........\n2\n6\n4\n29\n5\nAshu\nAjay\n...mySet.isEmpty()...\nfalse\n...mySet.isNotEmpty()...\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin Set Interface Example 4 &#8211; drop()</h3>\n\n\n\n<p>The drop() function returns all the element except the first n elements of collection.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val mySet: Set&lt;Any> = setOf(2,6,4,29,4,5,\"Ajay\",\"Ashu\",\"Ajay\")  \n    println(\".......print Any set.........\")  \n    for(element in mySet){  \n        println(element)  \n    }  \n    val remainList= mySet.drop(4)  \n    println(\".......print Set after mySet.drop(4).........\")  \n    for(element in remainList){  \n        println(element)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print Any set.........\n2\n6\n4\n29\n5\nAjay\nAshu\n.......print Set after mySet.drop(4).........\n5\nAjay\nAshu\n</code></pre>\n\n\n\n<h3>Kotlin Set Interface Example 5 &#8211; elementAt() and elementAtOrNull()</h3>\n\n\n\n<p>The elementAt() function return element at given index and elementAtOrNull() function also return the element at given index , but if specified index does not contain element it returns null.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    val mySet: Set&lt;Any> = setOf(2,6,4,29,4,5,\"Ajay\",\"Ashu\",\"Ajay\")  \n  \n    println(\".......print Any set.........\")  \n    for(element in mySet){  \n        println(element)  \n    }  \n  \n    println(\".......print mySet.elementAt(3).........\")  \n    println(mySet.elementAt(3))  \n  \n    println(\".......print mySet.elementAtOrNull(5).........\")  \n    println(mySet.elementAtOrNull(5))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>.......print Any set.........\n2\n6\n4\n29\n5\nAjay\nAshu\n.......print mySet.elementAt(3).........\n29\n.......print mySet.elementAtOrNull(5).........\nAjay</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;Set&nbsp;interface&nbsp;is a generic unordered collection of elements. Set interface does not support duplicate elements. This interface is immutable in nature its methods supports read-only functionality of the set. Set interface uses&nbsp;setOf()&nbsp;function to create the list of object of set interface which contains list of elements. Set Interface declaration Properties of Set Interface Properties Description abstract [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/858"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=858"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/858/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=858"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=858"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=858"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 860,
    "date": "2020-08-25T06:02:33",
    "date_gmt": "2020-08-25T06:02:33",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=860"
    },
    "modified": "2020-08-25T06:02:33",
    "modified_gmt": "2020-08-25T06:02:33",
    "slug": "kotlin-mutableset-interface",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-mutableset-interface/",
    "title": {
      "rendered": "MutableSet Interface"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>MutableSet</strong>&nbsp;interface is a generic unordered collection of elements. MutableSet interface does not support duplicate elements. This interface is mutable so its methods support read-write functionality supports adding and removing elements.</p>\n\n\n\n<p>Set interface uses&nbsp;<strong>mutableSetOf()</strong>&nbsp;function to create the list of object of set interface which contains list of elements.</p>\n\n\n\n<h3>MutableSet Interface declaration</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>interface MutableSet&lt;E> : Set&lt;E>, MutableCollection&lt;E> (source)</code></pre>\n\n\n\n<h3>Inherited Properties of MutableSet Interface</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Properties</th><th>Description</th></tr><tr><td>abstract val size: Int</td><td>It returns the size of collection.</td></tr></tbody></table></figure>\n\n\n\n<h3>Functions of MutableSet Interface</h3>\n\n\n\n<p>Kotlin&nbsp;<strong>MutableSet</strong>&nbsp;interface has several functions. Some of its functions are mention below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Functions</th><th>Description</th></tr><tr><td>abstract fun add(element: E): Boolean</td><td>It adds the given element to the collection.</td></tr><tr><td>abstract fun addAll(elements: Collection&lt;E&gt;): Boolean</td><td>It adds all the elements given collection to the current collection.</td></tr><tr><td>abstract fun clear()</td><td>It removes all the elements from this collection.</td></tr><tr><td>abstract fun iterator(): MutableIterator&lt;E&gt;</td><td>It returns an iterator over the elements of this object.</td></tr><tr><td>abstract fun remove(element: E): Boolean</td><td>It removes a single specified element from this collection, if it is present in collection.</td></tr><tr><td>abstract fun removeAll(elements: Collection&lt;E&gt;): Boolean</td><td>It removes all the elements from current collection which are given in collection.</td></tr><tr><td>abstract fun retainAll(elements: Collection&lt;E&gt;): Boolean</td><td>It retains only those elements in current collection which are present in specified collection.</td></tr><tr><td>abstract fun contains(element: E): Boolean</td><td>It checks the specified element is contained in current collection.</td></tr><tr><td>abstract fun containsAll(elements: Collection&lt;E&gt;): Boolean</td><td>It checks all the elements of specified collection are present in current collection.</td></tr><tr><td>abstract fun isEmpty(): Boolean</td><td>If collection is empty (not containing any element) it returns true, otherwise it returns false.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.any(): Boolean</td><td>It returns true if collection contains at least one element.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.any(predicate: (T) -&gt; Boolean): Boolean</td><td>It returns true if at least element matches the given the given predicate.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.distinct(): List&lt;T&gt;</td><td>It returns a list which contains only distinct elements from the given collection.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.drop(n: Int): List&lt;T&gt;</td><td>It returns a list which contains all elements except first n elements.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.elementAt(index: Int): T</td><td>It returns an element at given index or throw an IndexOutOfBoundException if given index is not present in collection.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.elementAtOrElse(<br>index: Int,<br>defaultValue: (Int) -&gt; T<br>): T</td><td>It returns an element at given index or result of calling the defaultValue function if the index is out bounds in current collection.</td></tr><tr><td>fun &lt;T : Comparable&lt;T&gt;&gt; Iterable&lt;T&gt;.max(): T?</td><td>It returns the largest element or null if there is no element in the collection.</td></tr><tr><td>fun &lt;T : Comparable&lt;T&gt;&gt; Iterable&lt;T&gt;.min(): T?</td><td>It returns the smallest element or null if there is no element in the collection.</td></tr><tr><td>fun &lt;T&gt; MutableCollection&lt;out T&gt;.remove(element: T): Boolean</td><td>It removes the single specified element if it in present in current collection.</td></tr><tr><td>fun &lt;T&gt; MutableCollection&lt;out T&gt;.removeAll(<br>elements: Collection&lt;T&gt;<br>): Boolean</td><td>It removes all the elements of current collection which are contained in specified collection.</td></tr><tr><td>fun &lt;T&gt; MutableCollection&lt;out T&gt;.retainAll(<br>elements: Collection&lt;T&gt;<br>): Boolean</td><td>It retains all the elements in current collection which are contained in specified collection.</td></tr><tr><td>fun &lt;T&gt; Iterable&lt;T&gt;.reversed(): List&lt;T&gt;</td><td>It returns the elements in reversed order.</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin MutableSet Interface Example 1</h3>\n\n\n\n<p>Let&#8217;s create an example of MutableSet declaring and traversing its elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val intmutableSet = mutableSetOf&lt;Int>(2, 6, 4, 29, 4, 5)  \n    val anymutableSet: Set&lt;Any> = setOf(2, 6, 4, 29, 4, 5, \"Ajay\", \"Ashu\", \"Ajay\")  \n    println(\"....intmutableSet....\")  \n    for(element in intmutableSet){  \n        println(element)  \n    }  \n    println(\"....anymutableSet......\")  \n    for(element in anymutableSet){  \n        println(element)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>....intmutableSet....\n2\n6\n4\n29\n5\n....anymutableSet......\n2\n6\n4\n29\n5\nAjay\nAshu\n</code></pre>\n\n\n\n<p>In the above example, elements &#8220;4&#8221; and &#8220;Ajay&#8221; are declared twice. But while traversing these MutableSet they are printed only once, this is because MutableSet interface does not support duplicate elements.</p>\n\n\n\n<h3>Kotlin MutableSet Interface Example 2 &#8211; add() and addAll()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val intmutableSet = mutableSetOf&lt;Int>(2, 6, 4, 29, 4, 5)  \n    val mutableSet: MutableSet&lt;Int> = mutableSetOf&lt;Int>(6,8,11,22)  \n  \n    println(\"....intmutableSet....\")  \n    for(element in intmutableSet){  \n        println(element)  \n    }  \n    intmutableSet.add(10)  \n    println(\"....intmutableSet.add(10)....\")  \n    for(element in intmutableSet){  \n        println(element)  \n    }  \n  \n    intmutableSet.addAll(mutableSet)  \n    println(\"....intmutableSet.addAll(mutableSet)....\")  \n    for(element in intmutableSet){  \n        println(element)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>....intmutableSet....\n2\n6\n4\n29\n5\n....intmutableSet.add(10)....\n2\n6\n4\n29\n5\n10\n....intmutableSet.addAll(mutableSet)....\n2\n6\n4\n29\n5\n10\n8\n11\n22\n</code></pre>\n\n\n\n<h3>Kotlin MutableSet Interface Example 3 &#8211; remove() and removeAll()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val intmutableSet = mutableSetOf&lt;Int>(2, 6, 4, 29, 4, 5)  \n    val mutableSet: MutableSet&lt;Int> = mutableSetOf&lt;Int>(6,8,11,22)  \n  \n    println(\"....intmutableSet....\")  \n    for(element in intmutableSet){  \n        println(element)  \n    }  \n    intmutableSet.remove(29)  \n    println(\"....intmutableSet.remove(29)....\")  \n    for(element in intmutableSet){  \n        println(element)  \n    }  \n    intmutableSet.removeAll(mutableSet)  \n    println(\"....intmutableSet.removeAll(mutableSet)....\")  \n    for(element in intmutableSet){  \n        println(element)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>....intmutableSet....\n2\n6\n4\n29\n5\n....intmutableSet.remove(29)....\n2\n6\n4\n5\n....intmutableSet.removeAll(mutableSet)....\n2\n4\n5\n</code></pre>\n\n\n\n<h3>Kotlin MutableSet Interface Example 4 &#8211; contains() and containsAll()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val mutableSet1 = mutableSetOf&lt;Int>(2, 6, 4, 29, 4, 5)  \n    val mutableSet2: MutableSet&lt;Int> = mutableSetOf&lt;Int>(6,8,11,22)  \n    val mutableSet3: MutableSet&lt;Int> = mutableSetOf&lt;Int>(2,4,6)  \n  \n    println(\"....mutableSet1....\")  \n    for(element in mutableSet1){  \n        println(element)  \n    }  \n    println(\"....mutableSet2....\")  \n        println(mutableSet2)  \n    println(\"....mutableSet3....\")  \n        println(mutableSet3)  \n    println(\"....mutableSet1.contains(29)....\")  \n    println(mutableSet1.contains(29))  \n  \n    println(\"....mutableSet1.containsAll(mutableSet2))....\")  \n    println(mutableSet1.containsAll(mutableSet2))  \n    println(\"....mutableSet1.containsAll(mutableSet3))....\")  \n    println(mutableSet1.containsAll(mutableSet3))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>....mutableSet1....\n2\n6\n4\n29\n5\n....mutableSet2....\n&#91;6, 8, 11, 22]\n....mutableSet3....\n&#91;2, 4, 6]\n....mutableSet1.contains(29)....\ntrue\n....mutableSet1.containsAll(mutableSet2))....\nfalse\n....mutableSet1.containsAll(mutableSet3))....\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin MutableSet Interface Example 5 &#8211; isEmpty() and any().</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val mutableSet1 = mutableSetOf&lt;Int>(2, 6, 4, 29, 4, 5)  \n  \n    println(\"....mutableSet1....\")  \n    for(element in mutableSet1){  \n        println(element)  \n    }  \n    println(\"....mutableSet1.isEmpty()....\")  \n    if(mutableSet1.isEmpty())  \n        println(\"mutableSet1 is empty, not contain any element\")  \n    else  \n        println(\"mutableSet1 is not empty, contains element\")  \n  \n    println(\"....mutableSet1.any()....\")  \n    if(mutableSet1.any())  \n        println(\"mutableSet1 contain at least one or more elements\")  \n    else  \n        println(\"mutableSet1 not contain any element\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>....mutableSet1....\n2\n6\n4\n29\n5\n....mutableSet1.isEmpty()....\nmutableSet1 is not empty, contains element\n....mutableSet1.any()....\nmutableSet1 contain at least one or more elements\n</code></pre>\n\n\n\n<h3>Kotlin MutableSet Interface Example 6 &#8211; first(), indexOf() and drop()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    val mutableSet1 = mutableSetOf&lt;Int>(2, 6, 4, 29, 4, 5)  \n  \n    println(\"....mutableSet1....\")  \n    for(element in mutableSet1){  \n        println(element)  \n    }  \n    println(\"....mutableSet1.first()....\")  \n    println(mutableSet1.first())  \n  \n    println(\"...mutableSet1.indexOf(4)...\")  \n    println(mutableSet1.indexOf(4))  \n  \n    println(\"...mutableSet1.drop(3)...\")  \n    println(mutableSet1.drop(3))  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>....mutableSet1....\n2\n6\n4\n29\n5\n....mutableSet1.first()....\n2\n...mutableSet1.indexOf(4)...\n2\n...mutableSet1.drop(3)...\n&#91;29, 5]</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;MutableSet&nbsp;interface is a generic unordered collection of elements. MutableSet interface does not support duplicate elements. This interface is mutable so its methods support read-write functionality supports adding and removing elements. Set interface uses&nbsp;mutableSetOf()&nbsp;function to create the list of object of set interface which contains list of elements. MutableSet Interface declaration Inherited Properties of MutableSet Interface [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/860"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=860"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/860/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=860"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=860"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=860"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 862,
    "date": "2020-08-25T06:05:32",
    "date_gmt": "2020-08-25T06:05:32",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=862"
    },
    "modified": "2020-08-25T06:05:32",
    "modified_gmt": "2020-08-25T06:05:32",
    "slug": "kotlin-hashset-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-hashset-class/",
    "title": {
      "rendered": "HashSet class"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>HashSet</strong>&nbsp;is class of collection which extends AbstractMutableSet class and implements Set interface. The HashSet class store elements using hashing mechanism. It support both read and write functionality. It does not support duplicate value and does not make guarantees about the order sequence of element.</p>\n\n\n\n<h2>HashSet class declaration</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>open class HashSet&lt;E> : AbstractMutableSet&lt;E> (source) </code></pre>\n\n\n\n<h3>Constructor of Kotlin HashSet class</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor</th><th>Description</th></tr><tr><td>HashSet()</td><td>It constructs an empty HashSet instance</td></tr><tr><td>HashSet(initialCapacity: Int, loadFactor: Float = 0f)</td><td>It is used to constructs a HashSet of specified capacity.</td></tr><tr><td>HashSet(elements: Collection&lt;E&gt;)</td><td>It constructs a HashSet instance using elements of specified collection.</td></tr></tbody></table></figure>\n\n\n\n<h3>Functions of Kotlin HashSet class</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Functions</th><th>Description</th></tr><tr><td>open fun add(element: E): Boolean</td><td>It adds the given element to the collection.</td></tr><tr><td>open operator fun contains(element: E): Boolean</td><td>It checks the specified element is present in current collection.</td></tr><tr><td>open fun isEmpty(): Boolean</td><td>It checks the current collection is empty (not contain any element). If found collection is empty returns&nbsp;<em>true</em>&nbsp;otherwise&nbsp;<em>false</em>.</td></tr><tr><td>open fun iterator(): MutableIterator&lt;E&gt;</td><td>It returns an iterator over the elements of current object.</td></tr><tr><td>open fun remove(element: E): Boolean</td><td>It removes the mention element if present in current collection. It returns true if it removes otherwise false.</td></tr><tr><td>open fun clear()</td><td>It deletes all the elements from this collection.</td></tr></tbody></table></figure>\n\n\n\n<h3>Property of Kotlin HashSet class</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Property</th><th>Description</th></tr><tr><td>open val size: Int</td><td>This property is used to return the size of HashSet collection.</td></tr></tbody></table></figure>\n\n\n\n<h3>Kotlin HashSet Example 1- capacity</h3>\n\n\n\n<p>Let&#8217;s create an example of HashSet defining it capacity. Capacity defines the total number of element to be added in the HashSet. It can be increase of decrease later according to need.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var hashSet = HashSet&lt;Int>(6)  \n    hashSet.add(2)  \n    hashSet.add(13)  \n    hashSet.add(6)  \n    hashSet.add(5)  \n    hashSet.add(2)  \n    hashSet.add(8)  \n    println(\"......traversing hashSet......\")  \n    for (element in hashSet){  \n        println(element)  \n    }      \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traversing hashSet......\n8\n2\n13\n5\n6\n</code></pre>\n\n\n\n<h3>Kotlin HashSet Example 2 &#8211; generic</h3>\n\n\n\n<p>For more specific we can provide the generic types of HashSet class using its method hashSetOf&lt;T&gt;().</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var hashSetOf1 = hashSetOf&lt;Int>(2,13,6,5,2,8)  \n    var hashSetOf2: HashSet&lt;String> = hashSetOf&lt;String>(\"Vijay\",\"Ashu\" ,\"Vijay\",\"Roshan\")  \n    println(\"......traversing hashSetOf1......\")  \n    for (element in hashSetOf1){  \n        println(element)  \n    }  \n    println(\"......traversing hashSetOf2......\")  \n    for (element in hashSetOf2){  \n        println(element)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traversing hashSetOf1......\n8\n2\n13\n5\n6\n......traversing hashSetOf2......\nAshu\nRoshan\nVijay\n</code></pre>\n\n\n\n<h3>Kotlin HashSet Example 3 &#8211; add() and addAll()</h3>\n\n\n\n<p>The add() function is used to add the element in the HashSet instance whereas addAll() function add all the elements of specified collection to HashSet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var hashSet = HashSet&lt;Int>(3)  \n    val intSet = setOf(6,4,29)  \n    hashSet.add(2)  \n    hashSet.add(13)  \n    hashSet.add(6)  \n    hashSet.add(5)  \n    hashSet.add(2)  \n    hashSet.add(8)  \n    println(\"......traversing hashSet......\")  \n    for (element in hashSet){  \n        println(element)  \n    }  \n    hashSet.addAll(intSet)  \n    println(\"......traversing hashSet after hashSet.addAll(intSet)......\")  \n    for (element in hashSet){  \n        println(element)  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traversing hashSet......\n8\n2\n13\n5\n6\n......traversing hashSet after hashSet.addAll(intSet)......\n2\n4\n5\n6\n8\n13\n29\n</code></pre>\n\n\n\n<h3>Kotlin HashSet Example 4 &#8211; size, contains() and containsAll()</h3>\n\n\n\n<p>The size property returns a total elements present in HashMap. The&nbsp;<strong>contains()</strong>&nbsp;function returns true if the mention element in it is contained in collection whereas&nbsp;<strong>containsAll()</strong>&nbsp;function checks all the elements of specified collection is contained in this collection.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var hashSetOf1: HashSet&lt;Int> = hashSetOf&lt;Int>(2,6,13,4,29,15)  \n    val mySet = setOf(6,4,29)  \n  \n    println(\"......traversing hashSetOf1......\")  \n    for (element in hashSetOf1){  \n        println(element)  \n    }  \n    println(\".....hashSetOf1.size.....\")  \n    println(hashSetOf1.size)  \n    println(\".....hashSetOf1.contains(13).....\")  \n    println(hashSetOf1.contains(13))  \n    println(\"....hashSetOf1.containsAll(mySet)...\")  \n    println(hashSetOf1.containsAll(mySet))  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traversing hashSetOf1......\n2\n4\n13\n29\n6\n15\n.....hashSetOf1.size.....\n6\n.....hashSetOf1.contains(13).....\ntrue\n....hashSetOf1.containsAll(mySet)...\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin HashSet Example 5 &#8211; remove() and removeAll()</h3>\n\n\n\n<p>The remove() function removes the specified element from the collection if it is present whereas removeAll() function removes all the specified elements from current collection if they are present.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var hashSetOf1: HashSet&lt;Int> = hashSetOf&lt;Int>(2,6,13,4,29,15)  \n    val mySet = setOf(6,4,29)  \n    \n    println(\"......traversing hashSetOf1......\")  \n    for (element in hashSetOf1){  \n        println(element)  \n    }  \n    println(\".....hashSetOf1.remove(6)......\")  \n    println(hashSetOf1.remove(6))  \n    println(\"......traversing hashSetOf1 after remove(6)......\")  \n    for (element in hashSetOf1){  \n        println(element)  \n    }  \n    println(\"......hashSetOf1.removeAll(mySet)......\")  \n    println(hashSetOf1.removeAll(mySet))  \n    println(\"......traversing hashSetOf1 after removeAll(mySet)......\")  \n    for (element in hashSetOf1){  \n        println(element)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traversing hashSetOf1......\n2\n4\n13\n29\n6\n15\n.....hashSetOf1.remove(6)......\ntrue\n......traversing hashSetOf1 after remove(6)......\n2\n4\n13\n29\n15\n......hashSetOf1.removeAll(mySet)......\ntrue\n......traversing hashSetOf1 after removeAll(mySet)......\n2\n13\n15\n</code></pre>\n\n\n\n<h3>Kotlin HashSet Example 6 &#8211; isEmpty() and isNotEmpty()</h3>\n\n\n\n<p>The isEmpty() function checks the current collection is empty whereas isNotEmpty() function checks the current collection is not empty.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n    var hashSetOf1: HashSet&lt;Int> = hashSetOf&lt;Int>(2,6,13,4,29,15)  \n      \n    println(\"......traversing hashSetOf1......\")  \n    for (element in hashSetOf1){  \n        println(element)  \n    }  \n    println(\".....hashSetOf1.isEmpty()....\")  \n    if(hashSetOf1.isEmpty()){  \n        println(\"hash set is empty\")  \n    }  \n    else{  \n        println(\"hash set is not empty\")  \n    }  \n    println(\".....hashSetOf1.isNotEmpty()....\")  \n    if(hashSetOf1.isNotEmpty()){  \n        println(\"hash set is not empty\")  \n    }  \n    else{  \n        println(\"hash set is empty\")  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>......traversing hashSetOf1......\n2\n4\n13\n29\n6\n15\n.....hashSetOf1.isEmpty()....\nhash set is not empty\n.....hashSetOf1.isNotEmpty()....\nhash set is not empty</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;HashSet&nbsp;is class of collection which extends AbstractMutableSet class and implements Set interface. The HashSet class store elements using hashing mechanism. It support both read and write functionality. It does not support duplicate value and does not make guarantees about the order sequence of element. HashSet class declaration Constructor of Kotlin HashSet class Constructor Description HashSet() [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/862"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=862"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/862/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=862"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=862"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=862"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 865,
    "date": "2020-08-25T06:09:17",
    "date_gmt": "2020-08-25T06:09:17",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=865"
    },
    "modified": "2020-08-25T06:09:17",
    "modified_gmt": "2020-08-25T06:09:17",
    "slug": "kotlin-annotations",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-annotations/",
    "title": {
      "rendered": "Kotlin Annotations"
    },
    "content": {
      "rendered": "\n<p>Annotations are used to attach metadata to classes, interface, parameters, and so on at compile time. Annotation can be used by compiler which reflects at runtime. We can change the meaning of the data or program according to annotation values.</p>\n\n\n\n<h2>Kotlin Meta-annotations</h2>\n\n\n\n<p>We can add meta-info while declaring annotation. Following are some meta-annotations:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Annotation Name</th><th>Usage</th></tr><tr><td>@Target</td><td>It targets all the possible kinds of elements which can be annotated with the annotation.</td></tr><tr><td>@Retention</td><td>It specifies whether the annotation is stored in the compiled class files or whether it is visible through reflection at run time.</td></tr><tr><td>@Repeatable</td><td>This meta-annotation determines that an annotation is applicable twice or more on a single code element.</td></tr><tr><td>@MustBeDocumented</td><td>This meta-document specifies that the annotation is the part of the public API and should be included in the class or method.</td></tr></tbody></table></figure>\n\n\n\n<h2>Example of using annotation</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>@Target(AnnotationTarget.CLASS, AnnotationTarget.FUNCTION,  \nAnnotationTarget.VALUE_PARAMETER, AnnotationTarget.EXPRESSION)  \n@Retention(AnnotationRetention.SOURCE)  \n@MustBeDocumented  \nannotation class MyClass  </code></pre>\n\n\n\n<h2>Declaring an annotation</h2>\n\n\n\n<p>Annotation is declared by placing <strong>annotation</strong> modifier in front of a class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>annotation class MyClass  </code></pre>\n\n\n\n<h2>Annotate a constructor</h2>\n\n\n\n<p>It is also possible to annotate the constructor of a class. This is done by adding the <strong>constructor</strong> keyword for constructor declaration and placing the annotation before it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyClass@Inject constructor( dependency: MyDependency){  \n//. . .   \n} </code></pre>\n\n\n\n<h2>Annotate property assessors</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- wp:code -->\n&lt;pre class=\"wp-block-code\">&lt;code>&lt;/code>&lt;/pre>\n&lt;!-- /wp:code --></code></pre>\n\n\n\n<h2>Using constructor as annotation</h2>\n\n\n\n<p>We can also use constructor as an annotation. Using constructor as annotation takes parameters.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>annotation class MyClass(val why: String)  \n@MyClass(\"parameter\") class Foo{  \n}  </code></pre>\n\n\n\n<p>The parameters which are used as an annotation cannot be nullable types. This is because the JVM does not support null as a value for an annotation attribute.</p>\n\n\n\n<p>We can also use one annotation as a parameter to another annotation, at such situation it cannot takes the prefix @ character. Forexample:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>annotation class ReplaceWith(val expression: String)  \nannotation class Deprecated(  \nval message: String,  \nval replaceWith: ReplaceWith = ReplaceWith(\"\"))  \n@Deprecated(\"This function is deprecated, use === instead\", ReplaceWith(\"this === other\"))  </code></pre>\n\n\n\n<p>Kotlin also specifies that a class can takean argument of an annotation by using a <strong>KClass</strong>. The Kotlin compiler automatically converts it into java class, which leads to see the annotations and arguments normally.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import kotlin.reflect.KClass  \nannotation class MyClass(val arg1: KClass&lt;*>, val arg2: KClass&lt;out Any>)  \n@MyClass(String::class, Int::class) class Foo  </code></pre>\n\n\n\n<h2>Example of using TYPE annotation</h2>\n\n\n\n<p>Creating a java annotation interface Ann.java</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.lang.annotation.ElementType;  \nimport java.lang.annotation.Retention;  \nimport java.lang.annotation.RetentionPolicy;  \nimport java.lang.annotation.Target;  \n@Target(ElementType.TYPE)  \n@Retention(RetentionPolicy.RUNTIME)  \n@interface  Ann{  \nint value();  \n} </code></pre>\n\n\n\n<p>Create a MyClass.kt class which uses the annotation interface Ann.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Ann(value = 10)  \nclass MyClass{  \n  \n}  \nfun main (args: Array&lt;String>){  \nvar c = MyClass()  \nvar x = c.javaClass.getAnnotation(Ann::class.java)  \n    if(x!=null){  \nprintln(\"Value:\"+x?.value)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value: 10</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Annotations are used to attach metadata to classes, interface, parameters, and so on at compile time. Annotation can be used by compiler which reflects at runtime. We can change the meaning of the data or program according to annotation values. Kotlin Meta-annotations We can add meta-info while declaring annotation. Following are some meta-annotations: Annotation Name [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/865"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=865"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/865/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=865"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=865"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=865"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 867,
    "date": "2020-08-25T06:13:29",
    "date_gmt": "2020-08-25T06:13:29",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=867"
    },
    "modified": "2020-08-25T06:13:29",
    "modified_gmt": "2020-08-25T06:13:29",
    "slug": "kotlin-reflection",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-reflection/",
    "title": {
      "rendered": "Kotlin Reflection"
    },
    "content": {
      "rendered": "\n<p><strong>Reflection</strong>&nbsp;is a set of language and library features that examines the structure of program at runtime. Kotlin makes functions and properties as first-class citizen in the language and examine these functions and properties at runtime.</p>\n\n\n\n<h2>Class Reference</h2>\n\n\n\n<p>Class reference is used to obtain the reference of&nbsp;<em>KClass</em>&nbsp;object. To obtain the reference of statically Kclass, we should use the&nbsp;<em>class literal</em>(i.e. use double colons).</p>\n\n\n\n<p><strong>Syntax of class reference:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>val c1 = String::class  \nval c2 = MyClass::class </code></pre>\n\n\n\n<p>The reference value is a class type of&nbsp;<em>KClass. KClass</em>&nbsp;class reference is not the same as a Java class reference. We obtain the Java class reference by using .java property on a KClass instance.</p>\n\n\n\n<h4>Note: KClass represents a class and provides examination capabilities. To obtain the instance of this class use syntax ::class.</h4>\n\n\n\n<h2>Functional Reference</h2>\n\n\n\n<p>Kotlin&nbsp;<strong>functional</strong>&nbsp;is used to obtain the reference of function using double colons. The reference of function can be used in another function as a parameter. To use this reference in another function we use the :: operator:</p>\n\n\n\n<ol><li><strong>fun</strong>&nbsp;isPositive(x:&nbsp;Int)&nbsp;=&nbsp;x&gt;&nbsp;0&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<ol><li><strong>fun</strong>&nbsp;isPositive(x:&nbsp;Int)&nbsp;=&nbsp;x&gt;&nbsp;0&nbsp;&nbsp;</li><li class=\"\">val&nbsp;number&nbsp;=&nbsp;listOf(-10,-5,0,5,10)&nbsp;&nbsp;</li><li>print(number.filter(::isPositive))&nbsp;&nbsp;</li></ol>\n\n\n\n<h3>Kotlin functional reference example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    fun isPositive(x: Int) = x > 0  \nval numbers = listOf(-10, -5, 0, 5, 10)  \nprintln(numbers.filter(::isPositive))   \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;5,10]\n</code></pre>\n\n\n\n<p>In the above program ::isPositive is a value of function type (Int) -&gt; Boolean.</p>\n\n\n\n<h2>Overloaded function reference operator (::)</h2>\n\n\n\n<p>The operator :: can be used with overload function when the expected type is known from the context. For example:</p>\n\n\n\n<p>Create a function isPositive() which takes two different types Int and String and call this function with different type parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n    fun isPositive(x: Int) = x > 0  \n    fun isPositive(s: String) = s== \"kotlin\" || s == \"Kotlin\"  \n  \nval numbers = listOf(-10,-5,0,5,10)  \nval strings = listOf(\"kotlin\", \"program\")  \n  \nprintln(numbers.filter(::isPositive))  \nprintln(strings.filter(::isPositive))  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;5, 10]</code></pre>\n\n\n<p>[kotlin]</p>\n\n\n\n<h2>Property Reference</h2>\n\n\n\n<p>We can also access the properties as first-class object in Kotlin, to access object property we can use :: operator:</p>\n\n\n\n<p>To evaluate the property object of type&nbsp;<em>KProperty&lt;Int&gt;</em>&nbsp;we use the expression ::variableName. The expression ::variableName allow to retrieve its property name by using&nbsp;<strong>name</strong>&nbsp;and readits value using&nbsp;<strong>get()</strong>&nbsp;function.</p>\n\n\n\n<p>To reset the value of mutable type property, reference property has <strong>set()</strong> method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nprintln(::x.get())  \nprintln(::x.name)  \nprintln(::y.set(10))  \n}  \nval x = 5  \nvar y = 5 </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>5\nx\n10\n</code></pre>\n\n\n\n<h2>Access the property of member class:</h2>\n\n\n\n<p>Property reference also access the property of other member of class. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A(val x: Int)  \nfun main(args: Array&lt;String>) {  \nval prop = A::x  \nprintln(prop.get(A(5)))  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Reflection&nbsp;is a set of language and library features that examines the structure of program at runtime. Kotlin makes functions and properties as first-class citizen in the language and examine these functions and properties at runtime. Class Reference Class reference is used to obtain the reference of&nbsp;KClass&nbsp;object. To obtain the reference of statically Kclass, we should [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/867"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=867"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/867/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=867"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=867"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=867"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 869,
    "date": "2020-08-25T06:15:50",
    "date_gmt": "2020-08-25T06:15:50",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=869"
    },
    "modified": "2020-08-25T06:15:50",
    "modified_gmt": "2020-08-25T06:15:50",
    "slug": "kotlin-class-and-object",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-class-and-object/",
    "title": {
      "rendered": "Class and Object"
    },
    "content": {
      "rendered": "\n<p>Kotlin supports both object oriented programming (OOP) as well as functional programming. Object oriented programming is based on real time&nbsp;<em>objects</em>&nbsp;and&nbsp;<em>classes</em>. Kotlin also support pillars of OOP language such as encapsulation, inheritance and polymorphism.</p>\n\n\n\n<h2>Kotlin Class</h2>\n\n\n\n<p>Kotlin&nbsp;<strong>class</strong>&nbsp;is similar to Java class, a class is a blueprint for the objects which have common properties. Kotlin classes are declared using keyword&nbsp;<strong>class</strong>. Kotlin class has a class header which specifies its type parameters, constructor etc. and the class body which is surrounded by curly braces.</p>\n\n\n\n<h3>Syntax of Kotlin class declaration</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class className{   // class header  \n      // property  \n      // member function  \n} </code></pre>\n\n\n\n<p>In above example, class className is an empty constructor. It is generated by compiler automatically but if we want to provide a constructor, we need to write a constructor keyword followed by class name as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class className constructor(){   // class header  \n      // property  \n      // member function  \n} </code></pre>\n\n\n\n<h3>Example of Kotlin class</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class account {  \nvar acc_no: Int = 0  \nvar name: String? = null  \nvar amount: Float = 0f  \n  \n    fun deposit() {  \n        //deposite code  \n    }  \n  \n    fun withdraw() {  \n       // withdraw code  \n    }  \n  \n    fun checkBalance() {  \n        //balance check code  \n     }  \n  \n}  </code></pre>\n\n\n\n<p>The account class has three properties acc_no, name, amount and three member functions deposit(), withdraw(),checkBalance().</p>\n\n\n\n<p>In Kotlin, property must be initialize or declare as abstract. In above class, properties acc_no initialize as 0, name as null and amount as 0f.</p>\n\n\n\n<h2>Kotlin Object</h2>\n\n\n\n<p><strong>Object</strong>&nbsp;is real time entity or may be a logical entity which has state and behavior. It has the characteristics:</p>\n\n\n\n<ul><li><strong>state:</strong>&nbsp;it represents value of an object.</li><li><strong>behavior:</strong>&nbsp;it represent the functionality of an object.</li></ul>\n\n\n\n<p>Object is used to access the properties and member function of a class. Kotlin allows to create multiple object of a class.</p>\n\n\n\n<h3>Create an object</h3>\n\n\n\n<p>Kotlin object is created in two steps, the first is to create reference and then create an object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var obj1 = className()  </code></pre>\n\n\n\n<p>Creating multiple object</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var obj1 = className()  \nvar obj2 = className()  </code></pre>\n\n\n\n<p>Here obj1 and obj2 are reference and className() is an object.</p>\n\n\n\n<h3>Access class property and member function</h3>\n\n\n\n<p>Properties and member function of class are accessed by . operator using object. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>obj.deopsit()  \nobj.name = Ajay   </code></pre>\n\n\n\n<p>Let&#8217;s create an example, which access the class property and member function using . operator.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Account {  \n    var acc_no: Int = 0  \n    var name: String =  \"\"  \n    var amount: Float = 0.toFloat()  \n    fun insert(ac: Int,n: String, am: Float ) {  \n        acc_no=ac  \n        name=n  \n        amount=am  \n        println(\"Account no: ${acc_no} holder :${name} amount :${amount}\")  \n    }  \n  \n    fun deposit() {  \n        //deposite code  \n    }  \n  \n    fun withdraw() {  \n       // withdraw code  \n    }  \n  \n    fun checkBalance() {  \n        //balance check code  \n     }  \n  \n}  \nfun main(args: Array&lt;String>){  \n    Account()  \n    var acc= Account()  \n    acc.insert(832345,\"Ankit\",1000f) //accessing member function  \n    println(\"${acc.name}\") //accessing class property  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Account no: 832345 holder :Ankit amount :1000.0\nAnkit</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin supports both object oriented programming (OOP) as well as functional programming. Object oriented programming is based on real time&nbsp;objects&nbsp;and&nbsp;classes. Kotlin also support pillars of OOP language such as encapsulation, inheritance and polymorphism. Kotlin Class Kotlin&nbsp;class&nbsp;is similar to Java class, a class is a blueprint for the objects which have common properties. Kotlin classes are [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/869"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=869"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/869/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=869"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=869"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=869"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 871,
    "date": "2020-08-25T06:17:36",
    "date_gmt": "2020-08-25T06:17:36",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=871"
    },
    "modified": "2020-08-25T06:17:36",
    "modified_gmt": "2020-08-25T06:17:36",
    "slug": "kotlin-nested-class-and-inner-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-nested-class-and-inner-class/",
    "title": {
      "rendered": "Nested class and Inner class"
    },
    "content": {
      "rendered": "\n<h2>Kotlin Nested class</h2>\n\n\n\n<p><strong>Nested class</strong>&nbsp;is such class which is created inside another class. In Kotlin, nested class is by default&nbsp;<strong>static</strong>, so its data member and member function can be accessed without creating an object of class. Nested class cannot be able to access the data member of outer class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class outerClass{  \n   //outer class code  \n    class nestedClass{  \n      //nested class code  \n    }  \n}</code></pre>\n\n\n\n<h3>Kotlin Nested Class Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class outerClass{  \n    private var name: String = \"Ashu\"  \n    class nestedClass{  \nvar description: String = \"code inside nested class\"  \n        private var id: Int = 101  \n        fun foo(){  \n          //  print(\"name is ${name}\") // cannot access the outer class member  \nprintln(\"Id is ${id}\")  \n        }  \n    }  \n}  \nfun main(args: Array&lt;String>){  \n// nested class must be initialize  \nprintln(outerClass.nestedClass().description) // accessing property  \nvar obj = outerClass.nestedClass() // object creation  \n    obj.foo() // access member function  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>code inside nested class\nId is 101\n</code></pre>\n\n\n\n<h2>Kotlin Inner class</h2>\n\n\n\n<p><strong>Inner class</strong>&nbsp;is a class which is created inside another class with keyword&nbsp;<strong>inner</strong>. In other words, we can say that a nested class which is marked as&nbsp;<strong>&#8220;inner&#8221;</strong>&nbsp;is called inner class.</p>\n\n\n\n<p>Inner class cannot be declared inside interfaces or non-inner nested classes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class outerClass{  \n   //outer class code  \n    inner class innerClass{  \n      //nested class code  \n    }  \n}  </code></pre>\n\n\n\n<p>The advantage of inner class over nested class is that, it is able to access members of outer class even it is private. Inner class keeps a reference to an object of outer class.</p>\n\n\n\n<h3>Kotlin Inner Class Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class outerClass{  \n     private  var name: String = \"Ashu\"  \n     inner class  innerClass{  \nvar description: String = \"code inside inner class\"  \n        private var id: Int = 101  \n       fun foo(){  \nprintln(\"name is ${name}\") // access the outer class member even private  \nprintln(\"Id is ${id}\")  \n        }  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nprintln(outerClass().innerClass().description) // accessing property  \nvar obj = outerClass().innerClass() // object creation  \n    obj.foo() // access member function  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>code inside inner class\nname is Ashu\nId is 101\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin Nested class Nested class&nbsp;is such class which is created inside another class. In Kotlin, nested class is by default&nbsp;static, so its data member and member function can be accessed without creating an object of class. Nested class cannot be able to access the data member of outer class. Kotlin Nested Class Example Output: Kotlin [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/871"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=871"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/871/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=871"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=871"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=871"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 873,
    "date": "2020-08-25T06:20:53",
    "date_gmt": "2020-08-25T06:20:53",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=873"
    },
    "modified": "2020-08-25T06:20:53",
    "modified_gmt": "2020-08-25T06:20:53",
    "slug": "kotlin-constructor",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-constructor/",
    "title": {
      "rendered": "Constructor"
    },
    "content": {
      "rendered": "\n<p>In Kotlin, constructor is a block of code similar to method.&nbsp;<strong>Constructor</strong>&nbsp;is declared with the same name as the class followed by parenthesis &#8216;()&#8217;. Constructor is used to initialize the variables at the time of object creation.</p>\n\n\n\n<h3>Types of Kotlin constructors</h3>\n\n\n\n<p>There are two types of constructors in Kotlin:</p>\n\n\n\n<ol><li>Primary constructor</li><li>Secondary constructor</li></ol>\n\n\n\n<p>There is only one primary constructor in a Kotlin class whereas secondary constructor may be one or more.</p>\n\n\n\n<h2>Kotlin primary constructor</h2>\n\n\n\n<p>Primary constructor is used to initialize the class. It is declared at class header. Primary constructor code is surrounded by parentheses with optional parameter.</p>\n\n\n\n<p>Let&#8217;s see an example of declaration of primary constructor. In the below code, we declare a constructor myClass with two parameter name and id. Parameter name is only read property whereas id is read and write property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class myClass(valname: String,varid: Int) {  \n    // class body  \n} </code></pre>\n\n\n\n<p>When the object of myClasss is created, it initializes name and id with &#8220;Ashu&#8221; and &#8220;101&#8221; respectively.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class myClass(val name: String, var id: Int) {  \n}  \nfun main(args: Array&lt;String>){  \nval myclass = myClass (\"Ashu\", 101)  \n  \nprintln(\"Name = ${ myclass.name}\")  \nprintln(\"Id = ${ myclass.id}\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name = Ashu\nId = 101\n</code></pre>\n\n\n\n<h3>Primary constructor with initializer block</h3>\n\n\n\n<p>The primary constructor does not contain any code. Initializer blocks are used to initialization of code. This block is prefixed with&nbsp;<strong>init</strong>&nbsp;keyword. At the period of instance initialization, the initialized blocks are executed in the same order as they appear in class body.</p>\n\n\n\n<p>Let&#8217;s rewrite the above code using initialize block:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class myClass(name: String, id: Int) {  \nval e_name: String  \nvar e_id: Int  \ninit{  \ne_name = name.capitalize()  \ne_id = id  \n  \nprintln(\"Name = ${e_name}\")  \nprintln(\"Id = ${e_id}\")  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval myclass = myClass (\"Ashu\", 101)  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name = Ashu\nId = 101\n</code></pre>\n\n\n\n<p>In above code, parameters&nbsp;<em>name</em>&nbsp;and&nbsp;<em>id</em>&nbsp;accept values &#8220;Ashu&#8221; and &#8220;101&#8221; when myclass object is created. The properties&nbsp;<em>name</em>&nbsp;and&nbsp;<em>id</em>&nbsp;are used without &#8220;val&#8221; or &#8220;var&#8221;, so they are not properties of myClass class.</p>\n\n\n\n<p>When object of myClass class is created, it executes initializer block which initializese_name and e_id.</p>\n\n\n\n<h2>Kotlin secondary constructor</h2>\n\n\n\n<p>In Kotlin, secondary constructor can be created one or more in class. The secondary constructor is created using &#8220;constructor&#8221; keyword.</p>\n\n\n\n<p>Let&#8217;s see an example of declaration of secondary constructor. In the below code, we declare two constructor of myClass with two parameter&nbsp;<em>name</em>&nbsp;and&nbsp;<em>id</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class myClass{  \n  \n    constructor(id: Int){  \n        //code   \n    }  \n    constructor(name: String, id: Int){  \n        //code   \n    }  \n}</code></pre>\n\n\n\n<p>Let&#8217;s see an example of secondary constructor assigning the value while object of class is created.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class myClass{  \n  \n    constructor(name: String, id: Int){  \nprintln(\"Name = ${name}\")  \nprintln(\"Id = ${id}\")  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval myclass = myClass (\"Ashu\", 101)  \n  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name = Ashu\nId = 101\n</code></pre>\n\n\n\n<p>We can also use both primary as well as secondary constructor in a same class. By using primary as well secondary constructor in same class, secondary constructor needs to authorize to primary constructor. Authorization to another constructor in same class is done using&nbsp;<strong>this()</strong>&nbsp;keyword.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class myClass(password: String){  \n  \n    constructor(name: String, id: Int, password: String): this(password){  \nprintln(\"Name = ${name}\")  \nprintln(\"Id = ${id}\")  \nprintln(\"Password = ${password}\")  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval myclass = myClass (\"Ashu\", 101, \"mypassword\")  \n  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name = Ashu\nId = 101\nPassword = mypassword\n</code></pre>\n\n\n\n<h2>Calling one secondary constructor from another secondary constructor of same class</h2>\n\n\n\n<p>In Kotlin, one secondary constructor can call another secondary constructor of same class. This is done by using&nbsp;<strong>this()</strong>&nbsp;keyword.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class myClass{  \n  \n    constructor(name: String, id: Int): this(name,id, \"mypassword\"){  \nprintln(\"this executes next\")  \nprintln(\"Name = ${name}\")  \nprintln(\"Id = ${id}\")  \n    }  \n  \n    constructor(name: String, id: Int,pass: String){  \nprintln(\"this executes first\")  \nprintln(\"Name = ${name}\")  \nprintln(\"Id = ${id}\")  \nprintln(\"Password = ${pass}\")  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval myclass = myClass (\"Ashu\", 101)  \n  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>this executes first\nName = Ashu\nId = 101\nPassword = mypassword\nthis executes next\nName = Ashu\nId = 101\n</code></pre>\n\n\n\n<h2>Calling supper class secondary constructor from derived class secondary constructor</h2>\n\n\n\n<p>In Kotlin, one derived class secondary constructor can call the base class secondary constructor. This is done using&nbsp;<strong>super</strong>&nbsp;keyword, this is the concept of inheritance.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Parent{  \n  \n    constructor(name: String, id: Int){  \nprintln(\"this executes first\")  \nprintln(\"Name = ${name}\")  \nprintln(\"Id = ${id}\")  \n    }  \n  \n    constructor(name: String, id: Int,pass: String){  \nprintln(\"this executes third\")  \nprintln(\"Name = ${name}\")  \nprintln(\"Id = ${id}\")  \nprintln(\"Password = ${pass}\")  \n    }  \n}  \nclass Child: Parent{  \n    constructor(name: String, id: Int): super(name,id){  \nprintln(\"this executes second\")  \nprintln(\"Name = ${name}\")  \nprintln(\"Id = ${id}\")  \n    }  \n  \n   constructor(name: String, id: Int,pass: String):super(name,id,\"password\"){  \nprintln(\"this executes forth\")  \nprintln(\"Name = ${name}\")  \nprintln(\"Id = ${id}\")  \nprintln(\"Password = ${pass}\")  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval obj1 = Child(\"Ashu\", 101)  \nval obj2 = Child(\"Ashu\", 101,\"mypassword\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>this executes first\nName = Ashu\nId = 101\nthis executes second\nName = Ashu\nId = 101\nthis executes third\nName = Ashu\nId = 101\nPassword = password\nthis executes forth\nName = Ashu\nId = 101\nPassword = mypassword</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Kotlin, constructor is a block of code similar to method.&nbsp;Constructor&nbsp;is declared with the same name as the class followed by parenthesis &#8216;()&#8217;. Constructor is used to initialize the variables at the time of object creation. Types of Kotlin constructors There are two types of constructors in Kotlin: Primary constructor Secondary constructor There is only [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/873"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=873"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/873/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=873"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=873"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=873"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 875,
    "date": "2020-08-25T06:23:05",
    "date_gmt": "2020-08-25T06:23:05",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=875"
    },
    "modified": "2020-08-25T06:23:05",
    "modified_gmt": "2020-08-25T06:23:05",
    "slug": "kotlin-visibility-modifier",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-visibility-modifier/",
    "title": {
      "rendered": "Visibility Modifier"
    },
    "content": {
      "rendered": "\n<p><strong>Visibility modifiers</strong>&nbsp;are the keywords which are used to restrict the use of class, interface, methods, and property of Kotlin in the application. These modifiers are used at multiple places such as class header or method body.</p>\n\n\n\n<p>In Kotlin, visibility modifiers are categorized into four different types:</p>\n\n\n\n<ul><li>public</li><li>protected</li><li>internal</li><li>private</li></ul>\n\n\n\n<h2>public modifier</h2>\n\n\n\n<p>A&nbsp;<strong>public</strong>&nbsp;modifier is accessible from everywhere in the project. It is a default modifier in Kotlin. If any class, interface etc. are not specified with any access modifier then that class, interface etc. are used in public scope.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Example{  \n}  \nclass Demo{  \n}  \npublic fun hello()  \nfun demo()  \npublic val x = 5  \nval y = 10 </code></pre>\n\n\n\n<p>All public declaration can be placed at top of the file. If a member of class is not specified then it is by default public.</p>\n\n\n\n<h2>protected modifier</h2>\n\n\n\n<p>A&nbsp;<strong>protected</strong>&nbsp;modifier with class or interface allows visibility to its class or subclass only. A protected declaration (when overridden) in its subclass is also protected modifier unless it is explicitly changed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Base{  \n    protected val i = 0  \n}  \n  \nclass Derived : Base(){  \n  \n    fun getValue() : Int  \n    {  \n        return i  \n    }  \n} </code></pre>\n\n\n\n<p>In Kotlin, protected modifier cannot be declared at top level.</p>\n\n\n\n<h3>Overriding of protected types</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Base{  \n  open protected val i = 5  \n}  \nclass Another : Base(){  \n    fun getValue() : Int  \n    {  \n        return i  \n    }  \n    override val i =10  \n} </code></pre>\n\n\n\n<h2>internal modifier</h2>\n\n\n\n<p>The&nbsp;<strong>internal</strong>&nbsp;modifiers are newly added in Kotlin, it is not available in Java. Declaring anything makes that field marked as internal field. The internal modifier makes the field visible only inside the module in which it is implemented.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>internal class Example{  \n    internal val x = 5  \n    internal fun getValue(){  \n  \n    }  \n}  \ninternal val y = 10  </code></pre>\n\n\n\n<p>In above, all the fields are declared as internal which are accessible only inside the module in which they are implemented.</p>\n\n\n\n<h2>private modifier</h2>\n\n\n\n<p>A&nbsp;<strong>private</strong>&nbsp;modifier allows the declaration to be accessible only within the block in which properties, fields, etc. are declare. The private modifier declaration does not allow to access the outside the scope. A private package can be accessible within that specific file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>private class Example {  \n    private val x = 1  \n     private valdoSomething() {  \n    }  \n}  </code></pre>\n\n\n\n<p>In above class Example,val x and function doSomthing() are declared as private. The class &#8220;Example&#8221; is accessible from the same source file, &#8220;val x&#8221; and &#8220;fun doSomthing()&#8221; are accessible within Example class.</p>\n\n\n\n<h3>Example of Visibility Modifier</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Base() {  \nvar a = 1 // public by default  \n    private var b = 2 // private to Base class  \n    protected open val c = 3  // visible to the Base and the Derived class  \n    internal val d = 4 // visible inside the same module  \n    protected fun e() { } // visible to the Base and the Derived class  \n}  \n  \nclass Derived: Base() {  \n    // a, c, d, and e() of the Base class are visible  \n    // b is not visible  \n    override val c = 9 // c is protected  \n}  \n  \nfun main(args: Array&lt;String>) {  \nval base = Base()  \n    // base.a and base.d are visible  \n    // base.b, base.c and base.e() are not visible  \nval derived = Derived()  \n    // derived.c is not visible  \n}  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Visibility modifiers&nbsp;are the keywords which are used to restrict the use of class, interface, methods, and property of Kotlin in the application. These modifiers are used at multiple places such as class header or method body. In Kotlin, visibility modifiers are categorized into four different types: public protected internal private public modifier A&nbsp;public&nbsp;modifier is accessible [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/875"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=875"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/875/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=875"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=875"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=875"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 877,
    "date": "2020-08-25T06:28:41",
    "date_gmt": "2020-08-25T06:28:41",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=877"
    },
    "modified": "2020-08-25T06:28:41",
    "modified_gmt": "2020-08-25T06:28:41",
    "slug": "kotlin-inheritance",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-inheritance/",
    "title": {
      "rendered": "Inheritance"
    },
    "content": {
      "rendered": "\n<p>Inheritance is an important feature of object oriented programming language. Inheritance allows to inherit the feature of existing class (or base or parent class) to new class (or derived class or child class).</p>\n\n\n\n<p>The main class is called super class (or parent class) and the class which inherits the superclass is called subclass (or child class). The subclass contains features of superclass as well as its own.</p>\n\n\n\n<p>The concept of inheritance is allowed when two or more classes have same properties. It allows code reusability. A derived class has only one base class but may have multiple interfaces whereas a base class may have one or more derived classes.</p>\n\n\n\n<p>In Kotlin, the derived class inherits a base class using: operator in the class header (after the derive class name or constructor)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Base(p: Int){  \n  \n}  \nclass Derived(p: Int) : Base(p){  \n  \n} </code></pre>\n\n\n\n<p>Suppose that,we have two different classes &#8220;Programmer&#8221; and &#8220;Salesman&#8221; having the common properties &#8216;name&#8217;,&#8217;age&#8217;, and &#8216;salary&#8217; as well as their own separate functionalitiesdoProgram() and fieldWork(). The feature of inheritance allows that we can inherit (Employee) containing the common features.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Employee(name: String, age: Int, salary: Float) {  \n    // code of employee  \n}  \n  \nclass Programmer(name: String, age: Int, salary: Float): Employee(name,age,salary) {  \n    // code of programmer  \n}  \n  \nclass Salesman(name: String, age: Int, salary: Float): Employee(name,age,salary) {  \n    // code of salesman  \n}  </code></pre>\n\n\n\n<p>All Kotlin classes have a common superclass &#8220;Any&#8221;. It is a default superclass for a class with no supertypes explicitly specified.</p>\n\n\n\n<p>For example, a class Example is implicitly inherited from Any.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Example  </code></pre>\n\n\n\n<h2>Kotlin open keyword</h2>\n\n\n\n<p>As Kotlin classes are&nbsp;<strong>final</strong>&nbsp;by default, they cannot be inherited simply. We use the&nbsp;<strong>open</strong>&nbsp;keyword before the class to inherit a class and make it to non-final,</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Example{  \n// I can now be extended!  \n}  </code></pre>\n\n\n\n<h2>Kotlin Inheriting fields from a class</h2>\n\n\n\n<p>When we inherit a class to derive class, all the fields and functionalities are inherited. We can use these fields and functionalities in derived class.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Base{  \nval x = 10  \n}  \nclass Derived: Base() {  \n    fun foo() {  \nprintln(\"x is equal to \" + x)  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval derived = Derived()  \n    derived.foo()   \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>x is equal to 10\n</code></pre>\n\n\n\n<h2>Kotlin Inheriting methods from a class</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Bird {  \n    fun fly() {  \nprintln(\"flying...\")  \n    }  \n}  \nclass Duck: Bird() {  \n    fun swim() {  \nprintln(\"swimming...\")  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval duck = Duck()  \n    duck.fly()   \nduck.swim()  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>flying...\nswimming...\n</code></pre>\n\n\n\n<h3>Kotlin Inheritance Example</h3>\n\n\n\n<p>Here, we declare a class Employee is superclass and Programmer and Salesman are their subclasses. The subclasses inherit properties name, age and salary as well as subclasses containtheir own functionalitieslike doProgram() and fieldWork().</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Employee(name: String, age: Int, salary: Float) {  \ninit {  \nprintln(\"Name is $name.\")  \nprintln(\"Age is $age\")  \nprintln(\"Salary is $salary\")  \n    }  \n}  \nclass Programmer(name: String, age: Int, salary: Float):Employee(name,age,salary){  \n    fun doProgram() {  \nprintln(\"programming is my passion.\")  \n    }  \n}  \nclass Salesman(name: String, age: Int, salary: Float):Employee(name,age,salary){  \n    fun fieldWork() {  \nprintln(\"travelling is my hobby.\")  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval obj1 = Programmer(\"Ashu\", 25, 40000f)  \n    obj1.doProgram()  \nval obj2 = Salesman(\"Ajay\", 24, 30000f)  \n    obj2.fieldWork()  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name is Ashu.\nAge is 25\nSalary is 40000.0\nprogramming is my passion.\nName is Ajay.\nAge is 24\nSalary is 30000.0\ntravelling is my hobby.\n</code></pre>\n\n\n\n<h2>Kotlin Inheritance and primary constructor</h2>\n\n\n\n<p>If the base and derived class both having primary constructor in that case the parameters are initialized in the primary constructor of base class. In above example of inheritance, all classes contain three parameters &#8220;name&#8221;, &#8220;age&#8221; and &#8220;salary&#8221; and all these parameters are initialized in primary constructor of base class.</p>\n\n\n\n<p>When a base and derived class both contains different numbers of parameters in their primary constructor then base class parameters are initialized form derived class object.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Employee(name: String,salary: Float) {  \ninit {  \nprintln(\"Name is $name.\")  \nprintln(\"Salary is $salary\")  \n    }  \n}  \nclass Programmer(name: String, dept: String, salary: Float):Employee(name,salary){  \ninit {  \nprintln(\"Name $name of department $dept with salary $salary.\")  \n    }  \n    fun doProgram() {  \nprintln(\"Programming is my passion.\")  \n  \n    }  \n}  \nclass Salesman(name: String, dept: String, salary: Float):Employee(name,salary){  \ninit {  \nprintln(\"Name $name of department $dept with salary $salary.\")  \n    }  \n    fun fieldWork() {  \nprintln(\"Travelling is my hobby.\")  \n  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval obj1 = Programmer(\"Ashu\", \"Development\", 40000f)  \n    obj1.doProgram()  \nprintln()  \nval obj2 = Salesman(\"Ajay\", \"Marketing\", 30000f)  \n    obj2.fieldWork()  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Name is Ashu.\nSalary is 40000.0\nName Ashu of department Development with salary 40000.0.\nProgramming is my passion.\n\nName is Ajay.\nSalary is 30000.0\nName Ajay of department Marketing with salary 30000.0.\nTravelling is my hobby.\n</code></pre>\n\n\n\n<p>When an object of derived class is created, it calls its superclass first and executes init block of base class followed by its own.</p>\n\n\n\n<h2>Kotlin Inheritance and secondary constructor</h2>\n\n\n\n<p>If derived class does not contain any primary constructor then it is required to call the base class secondary constructor from derived class using&nbsp;<strong>super</strong>&nbsp;keyword.</p>\n\n\n\n<p><strong>For example,</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Patent {  \n  \n    constructor(name: String, id: Int) {  \nprintln(\"execute super constructor $name: $id\")  \n    }  \n}  \n  \nclass Child: Patent {  \n  \n    constructor(name: String, id: Int, dept: String): super(name, id) {  \n        print(\"execute child class constructor with property $name, $id, $dept\")  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval child = Child(\"Ashu\",101, \"Developer\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>execute super constructor Ashu: 101\nexecute child class constructor with property Ashu, 101, Developer\n</code></pre>\n\n\n\n<p>In above example, when object of Child class is created, it calls its constructor and initializes its parameters with values &#8220;Ashu&#8221;, &#8220;101&#8221; and &#8220;Developer&#8221;. At the same time Child class constructor calling its supper class constructor using super keyword with values of name and id. Due to the presence of super keyword thebody of superclass constructor executes first and returns to Child class constructor.</p>\n\n\n\n<h2>Kotlin Method Overriding</h2>\n\n\n\n<p>Method overriding means providing the specific implementation of method of super (parent) class into its subclass (child) class.</p>\n\n\n\n<p>In other words, when subclass redefines or modifies the method of its superclass into subclass, it is known as method overriding. Method overriding is only possible in inheritance.</p>\n\n\n\n<p><strong>KotlinRules of method overriding</strong></p>\n\n\n\n<ul><li>Parent class and its method or property which is to be overridden must be open (non-final).</li><li>Method name of base class and derived class must have same.</li><li>Method must have same parameter as in base class.</li></ul>\n\n\n\n<h3>Example of inheritance without overriding</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Bird {  \n    open fun fly() {  \nprintln(\"Bird is flying...\")  \n    }  \n}  \nclass Parrot: Bird() {  \n  \n}  \nclass Duck: Bird() {  \n  \n}  \nfun main(args: Array&lt;String>) {  \nval p = Parrot()  \n    p.fly()  \nval d = Duck()  \n    d.fly()  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Bird is flying...\nBird is flying...\n</code></pre>\n\n\n\n<p>In above example, a program without overriding the method of base class we found that both derived classes Parrot and Duck perform the same common operation. To overcome with this problem we use the concept of method overriding.</p>\n\n\n\n<h3>Example of Kotlin method overriding</h3>\n\n\n\n<p>In this example, the method&nbsp;<em>fly()</em>&nbsp;of parent class Bird is overridden in its subclass&nbsp;<em>Parrot</em>&nbsp;and&nbsp;<em>Duck</em>. To override the method of parent class, the parent class and its method which is going to override must be declare as&nbsp;<em>open</em>. At the same time method which is overridden in child class must be prefaced with keyword&nbsp;<em>override</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Bird {  \n    open fun fly() {  \nprintln(\"Bird is flying...\")  \n    }  \n}  \nclass Parrot: Bird() {  \n    override fun fly() {  \nprintln(\"Parrot is flying...\")  \n    }  \n}  \nclass Duck: Bird() {  \n    override fun fly() {  \nprintln(\"Duck is flying...\")  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval p = Parrot()  \n    p.fly()  \nval d = Duck()  \n    d.fly()  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Parrot is flying...\nDuck is flying...\n</code></pre>\n\n\n\n<h3>Example of Kotlin property overriding</h3>\n\n\n\n<p>Property of superclass can also be overridden in its subclass as similar to method. A color property of&nbsp;<em>Bird</em>&nbsp;class is overridden in its subclass&nbsp;<em>Parrot</em>&nbsp;and&nbsp;<em>Duck</em>&nbsp;and modified.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Bird {  \n    open var color = \"Black\"  \n    open fun fly() {  \nprintln(\"Bird is flying...\")  \n    }  \n}  \nclass Parrot: Bird() {  \n    override var color = \"Green\"  \n    override fun fly() {  \nprintln(\"Parrot is flying...\")  \n    }  \n}  \nclass Duck: Bird() {  \n    override var color = \"White\"  \n    override fun fly() {  \nprintln(\"Duck is flying...\")  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval p = Parrot()  \n    p.fly()  \nprintln(p.color)  \nval d = Duck()  \n    d.fly()  \nprintln(d.color)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Parrot is flying...\nGreen\nDuck is flying...\nWhite\n</code></pre>\n\n\n\n<p>We can override the val property with var property in inheritance but vice-versa is not true.</p>\n\n\n\n<h2>Kotlin superclass implementation</h2>\n\n\n\n<p>Derived class can also call its superclass methods and property using&nbsp;<strong>super</strong>&nbsp;keyword.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Bird {  \n    open var color = \"Black\"  \n    open fun fly() {  \nprintln(\"Bird is flying...\")  \n    }  \n}  \nclass Parrot: Bird() {  \n    override var color = \"Green\"  \n    override fun fly() {  \n        super.fly()  \nprintln(\"Parrot is flying...\")  \n  \n    }  \n}  \n  \nfun main(args: Array&lt;String>) {  \nval p = Parrot()  \n    p.fly()  \nprintln(p.color)  \n  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Bird is flying...\nParrot is flying...\nGreen\n</code></pre>\n\n\n\n<h2>Kotlin multiple class implementation</h2>\n\n\n\n<p>In Kotlin, derived class uses a supertype name in angle brackets, e.gsuper&lt;Base&gt; when it implements same function name provided in multiple classes.</p>\n\n\n\n<p>For example, a derived class Parrotextends its superclass Bird and implement&nbsp;<em>Duck</em>&nbsp;interface containing same function&nbsp;<em>fly()</em>. To call particular method of each class and interface we must be mention supertype name in angle brackets as super&lt;Bird&gt;.fly() and super&lt;Duck&gt;.fly() for each method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Bird {  \n    open var color = \"Black\"  \n    open fun fly() {  \nprintln(\"Bird is flying...\")  \n    }  \n}  \ninterface Duck {  \n     fun fly() {  \nprintln(\"Duck is flying...\")  \n    }  \n}  \nclass Parrot: Bird(),Duck {  \n    override var color = \"Green\"  \n    override fun fly() {  \n        super&lt;Bird>.fly()  \n        super&lt;Duck>.fly()  \nprintln(\"Parrot is flying...\")  \n  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval p = Parrot()  \n    p.fly()  \nprintln(p.color)  \n  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Bird is flying...\nDuck is flying...\nParrot is flying...\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Inheritance is an important feature of object oriented programming language. Inheritance allows to inherit the feature of existing class (or base or parent class) to new class (or derived class or child class). The main class is called super class (or parent class) and the class which inherits the superclass is called subclass (or child [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/877"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=877"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/877/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=877"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=877"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=877"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 879,
    "date": "2020-08-25T06:30:42",
    "date_gmt": "2020-08-25T06:30:42",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=879"
    },
    "modified": "2020-08-25T06:30:42",
    "modified_gmt": "2020-08-25T06:30:42",
    "slug": "kotlin-abstract-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-abstract-class/",
    "title": {
      "rendered": "Abstract class"
    },
    "content": {
      "rendered": "\n<p>A class which is declared with&nbsp;<strong>abstract</strong>&nbsp;keyword is known as&nbsp;<em>abstract class</em>. An abstract class cannot be instantiated. Means, we cannot create object of abstract class. The method and properties of abstract class are non-abstract unless they are explicitly declared as abstract.</p>\n\n\n\n<h2>Declaration of abstract class</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class A {  \nvar x = 0  \n    abstract fun doSomething()  \n}</code></pre>\n\n\n\n<p>Abstract classes are partially defined classes, methods and properties which are no implementation but must be implemented into derived class. If the derived class does not implement the properties of base class then is also meant to be an abstract class.</p>\n\n\n\n<p>Abstract class or abstract function does not need to annotate with open keyword as they are&nbsp;<em>open by default</em>. Abstract member function does not contain its body. The member function cannot be declared as abstract if it contains in body in abstract class.</p>\n\n\n\n<h3>Example of abstract class that has abstract method</h3>\n\n\n\n<p>In this example, there is an abstract class&nbsp;<strong>Car</strong>&nbsp;that contains an abstract function run(). The implementation of run() function is provided by its subclass Honda.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Car{  \n    abstract fun run()  \n}  \nclass Honda: Car(){  \n   override fun run(){  \nprintln(\"Honda is running safely..\")  \n   }  \n}  \nfun main(args: Array&lt;String>){  \nval obj = Honda()  \nobj.run();  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Honda is running safely..</code></pre>\n\n\n\n<p>A non-abstract open member function can be over ridden in an abstract class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>open class Car {  \n    open fun run() {  \nprintln(\"Car is running..\")  \n    }  \n}  \nabstract class Honda : Car() {  \n    override abstract fun run()  \n}  \nclass City: Honda(){  \n    override fun run() {  \n      //  TODO(\"not implemented\") //To change body of created functions use File | Settings | File Templates.  \nprintln(\"Honda City is running..\")  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval car = Car()  \ncar.run()  \nval city = City()  \ncity.run()  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Car is running..\nHonda City is running..\n</code></pre>\n\n\n\n<p>In above example, An abstract class Honda extends the class&nbsp;<em>Car</em>&nbsp;and its function&nbsp;<em>run()</em>. Honda class override the&nbsp;<em>run()</em>&nbsp;function of Car class. The&nbsp;<em>Honda</em>&nbsp;class did not give the implementation of&nbsp;<em>run()</em>&nbsp;function as it is also declared as abstract. The implementation of abstract function&nbsp;<em>run()</em>&nbsp;of Honda class is provided by City class.</p>\n\n\n\n<h3>Example of real scenario of abstract class</h3>\n\n\n\n<p>In this example, an abstract class&nbsp;<em>Bank</em>&nbsp;that contains an abstract function&nbsp;<em>simpleInterest()</em>&nbsp;accepts three parameters p,r,and t. The class&nbsp;<em>SBI</em>&nbsp;and&nbsp;<em>PNB</em>&nbsp;provides the implementation of simpleInterest() function and returns the result.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Bank {  \n    abstract fun simpleInterest(p: Int, r: Double, t: Int) :Double  \n}  \n  \nclass SBI : Bank() {  \n    override fun simpleInterest(p: Int, r: Double, t: Int): Double{  \n        return (p*r*t)/100  \n    }  \n}  \nclass PNB : Bank() {  \n    override fun simpleInterest(p: Int, r: Double, t: Int): Double{  \n        return (p*r*t)/100  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nvar sbi: Bank = SBI()  \nval sbiint = sbi.simpleInterest(1000,5.0,3)  \nprintln(\"SBI interest is $sbiint\")  \nvar pnb: Bank = PNB()  \nval pnbint = pnb.simpleInterest(1000,4.5,3)  \nprintln(\"PNB interest is $pnbint\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>SBI interest is 150.0\nPNB interest is 135.0</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A class which is declared with&nbsp;abstract&nbsp;keyword is known as&nbsp;abstract class. An abstract class cannot be instantiated. Means, we cannot create object of abstract class. The method and properties of abstract class are non-abstract unless they are explicitly declared as abstract. Declaration of abstract class Abstract classes are partially defined classes, methods and properties which are [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/879"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=879"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/879/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=879"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=879"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=879"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 881,
    "date": "2020-08-25T06:35:30",
    "date_gmt": "2020-08-25T06:35:30",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=881"
    },
    "modified": "2020-08-25T06:35:30",
    "modified_gmt": "2020-08-25T06:35:30",
    "slug": "kotlin-interface",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-interface/",
    "title": {
      "rendered": "Interface"
    },
    "content": {
      "rendered": "\n<p>An interface is a blueprint of class.Kotlin interface is similar to Java 8. It contains abstract method declarations as well as implementation of method.</p>\n\n\n\n<h2>Defining Interface</h2>\n\n\n\n<p>An interface is defined using the keyword&nbsp;<strong>interface</strong>. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface MyInterface {  \nval id: Int // abstract property  \n    fun absMethod()// abstract method  \n    fun doSomthing() {  \n      // optional body  \n    }  \n}  </code></pre>\n\n\n\n<p>The methods which are only declared without their method body are&nbsp;<strong>abstract</strong>&nbsp;by default.</p>\n\n\n\n<h2>Why use Kotlin interface?</h2>\n\n\n\n<p>Following are the reasons to use interface:</p>\n\n\n\n<ul><li>Using interface supports functionality of multiple inheritance.</li><li>It can be used achieve to loose coupling.</li><li>It is used to achieve abstraction.</li></ul>\n\n\n\n<p>Subclass extends only one super class but implements multiple interfaces. Extension of parent class or interface implementation are done using (:) operator in their subclass.</p>\n\n\n\n<h2>Implementing Interfaces</h2>\n\n\n\n<p>In this example, we are implementing the interface&nbsp;<em>MyInterface</em>&nbsp;in&nbsp;<em>InterfaceImp</em>&nbsp;class. InterfaceImp class provides the implementation of property&nbsp;<em>id</em>&nbsp;and&nbsp;<em>abstract</em>&nbsp;method&nbsp;<em>absMethod()</em>&nbsp;declared in MyInterface interface.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface MyInterface  {  \nvar id: Int            // abstract property  \n    fun absMethod():String    // abstract method  \n    fun doSomthing() {  \nprintln(\"MyInterface doing some work\")  \n    }  \n}  \nclass InterfaceImp : MyInterface {  \n    override var id: Int = 101  \n    override fun absMethod(): String{  \nreturn \"Implementing abstract method..\"  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval obj = InterfaceImp()  \nprintln(\"Calling overriding id value = ${obj.id}\")  \nobj.doSomthing()  \nprintln(obj.absMethod())  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Calling overriding id value = 101\nMyInterface doing some work\nImplementing abstract method..\n</code></pre>\n\n\n\n<h2>Implementing multiple interface</h2>\n\n\n\n<p>We can implement multiple abstract methods of different interfaces in same class. All the abstract methods must be implemented in subclass. The other non-abstract methods of interface can be called from derived class.</p>\n\n\n\n<p>For example, creating two interface&nbsp;<em>MyInterface1</em>&nbsp;and&nbsp;<em>MyInterface2</em>&nbsp;with abstract methods&nbsp;<em>doSomthing()</em>&nbsp;and&nbsp;<em>absMethod()</em>&nbsp;respectively. These abstract methods are overridden in derive class&nbsp;<em>MyClass</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface MyInterface1 {  \n    fun doSomthing()  \n}  \ninterface MyInterface2 {  \n    fun absMethod()  \n}  \nclass MyClass : MyInterface1, MyInterface2 {  \n    override fun doSomthing() {  \nprintln(\"overriding doSomthing() of MyInterface1\")  \n    }  \n  \n    override fun absMethod() {  \nprintln(\"overriding absMethod() of MyInterface2\")  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval myClass = MyClass()  \nmyClass.doSomthing()  \nmyClass.absMethod()  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>overriding doSomthing() of MyInterface1\noverriding absMethod() of MyInterface2\n</code></pre>\n\n\n\n<h2>Resolving different Interfaces having same method overriding conflicts</h2>\n\n\n\n<p>Let&#8217;s see an example in which interface MyInterface1 and interface MyInterface2 both contains same non-abstract method. A class MyClass provides the implementation of these interfaces. Calling the method of interface using object of MyClass generates an error.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface MyInterface1 {  \n    fun doSomthing(){  \nprintln(\"overriding doSomthing() of MyInterface1\")  \n    }  \n}  \ninterface MyInterface2 {  \n    fun doSomthing(){  \nprintln(\"overriding doSomthing() of MyInterface2\")  \n    }  \n}  \nclass MyClass : MyInterface1, MyInterface2 {  \n  \n}  \nfun main(args: Array&lt;String>) {  \nval myClass = MyClass()  \nmyClass.doSomthing()  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Kotlin: Class 'MyClass' must override public open fun doSomthing(): Unit defined in MyInterface1 because it \ninherits multiple interface methods of it\n</code></pre>\n\n\n\n<p>To solve the above problem we need to specify particular method of interface which we are calling. Let&#8217;s see an example below.</p>\n\n\n\n<p>In below example, two interfaces&nbsp;<em>MyInterface1</em>&nbsp;and&nbsp;<em>MyInterface2</em>&nbsp;contain two abstract&nbsp;<em>methodsadsMethod()</em>&nbsp;and&nbsp;<em>absMethod(name: String)&nbsp;</em>and non-abstract method&nbsp;<em>doSomthing()</em>&nbsp;in both respectively. A class&nbsp;<em>MyClass implements</em>&nbsp;both interface and override abstract method&nbsp;<em>absMethod()</em>&nbsp;and&nbsp;<em>absMethod(name: String)&nbsp;</em>. To override the non-abstract method&nbsp;<em>doSomthing()</em>&nbsp;we need to specify interface name with method using&nbsp;<strong>super keyword</strong>&nbsp;as&nbsp;<em>super&lt;interface_name&gt;.methodName()</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface MyInterface1 {  \n    fun doSomthing() {  \nprintln(\"MyInterface 1 doing some work\")  \n    }  \n        fun absMethod()  \n}  \ninterface MyInterface2 {  \n    fun doSomthing(){  \nprintln(\"MyInterface 2 doing some work\")  \n    }  \n    fun absMethod(name: String)  \n}  \nclass MyClass : MyInterface1, MyInterface2 {  \n    override fun doSomthing() {  \n        super&lt;MyInterface2>.doSomthing()  \n    }  \n  \n    override fun absMethod() {  \nprintln(\"Implements absMethod() of MyInterface1\")  \n    }  \n    override fun absMethod(n: String) {  \nprintln(\"Implements absMethod(name) of MyInterface2 name is  $n\")  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval myClass = MyClass()  \nmyClass.doSomthing()  \nmyClass.absMethod()  \nmyClass.absMethod(\"Ashu\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>MyInterface 2 doing some work\nImplements absMethod() of MyInterface1\nImplements absMethod(name) of MyInterface2 name is  Ashu\ninterface MyInterface1 {  \n    fun doSomthing() {  \nprintln(\"MyInterface 1 doing some work\")  \n    }  \n    fun absMethod()  \n}  \n  \ninterface MyInterface2 {  \n    fun doSomthing() {  \nprintln(\"MyInterface 2 doing some work\")  \n    }  \n   fun absMethod() {  \nprintln(\"MyInterface 2 absMethod\")  \n    }  \n  \n}  \n  \nclass C : MyInterface1 {  \n    override fun absMethod() {  \nprintln(\"MyInterface1 absMethod implementation\")  \n    }  \n}  \n  \nclass D : MyInterface1, MyInterface2 {  \n    override fun doSomthing() {  \n        super&lt;MyInterface1>.doSomthing()  \n        super&lt;MyInterface2>.doSomthing()  \n    }  \n  \n    override fun absMethod() {  \n  \n        super&lt;MyInterface2>.absMethod()  \n    }  \n}  \n  \nfun main(args: Array&lt;String>) {  \nval d = D()  \nval c = C()  \nd.doSomthing()  \nd.absMethod()  \nc.doSomthing()  \nc.absMethod()  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>MyInterface 1 doing some work\nMyInterface 2 doing some work\nMyInterface 2 absMethod\nMyInterface 1 doing some work\nMyInterface1 absMethod implementation</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An interface is a blueprint of class.Kotlin interface is similar to Java 8. It contains abstract method declarations as well as implementation of method. Defining Interface An interface is defined using the keyword&nbsp;interface. For example: The methods which are only declared without their method body are&nbsp;abstract&nbsp;by default. Why use Kotlin interface? Following are the reasons [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/881"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=881"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/881/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=881"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=881"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=881"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 883,
    "date": "2020-08-25T06:39:29",
    "date_gmt": "2020-08-25T06:39:29",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=883"
    },
    "modified": "2020-08-25T06:39:29",
    "modified_gmt": "2020-08-25T06:39:29",
    "slug": "kotlin-data-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-data-class/",
    "title": {
      "rendered": "Data class"
    },
    "content": {
      "rendered": "\n<p>Data class is a simple class which is used to hold data/state and contains standard functionality. A&nbsp;<strong>data</strong>&nbsp;keyword is used to declare a class as a data class.</p>\n\n\n\n<ol><li>data&nbsp;<strong>class</strong>&nbsp;User(val&nbsp;name:&nbsp;String,&nbsp;val&nbsp;age:&nbsp;Int)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Declaring a data class must contains at least one primary constructor with property argument (val or var).</p>\n\n\n\n<p>Data class internally contains the following functions:</p>\n\n\n\n<ul><li>equals(): Boolean</li><li>hashCode(): Int</li><li>toString(): String</li><li>component() functions corresponding to the properties</li><li>copy()</li></ul>\n\n\n\n<p>Due to presence of above functions internally in data class, the data class eliminates the boilerplate code.</p>\n\n\n\n<h3>A compression between Java data class and Kotlin data class</h3>\n\n\n\n<p>If we want to create a User entry in Java using data class, it require lots of boilerplate code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Objects;  \n  \npublic class User {  \n    private String name;  \n    private int id;  \n    private String email;  \n  \n    public User(String name, int id, String email) {  \n        this.name = name;  \n        this.id = id;  \nthis.email = email;  \n    }  \n  \n    public String getName() {  \n        return name;  \n    }  \n  \n    public void setName(String name) {  \n        this.name = name;  \n    }  \n  \n    public intgetId() {  \n        return id;  \n    }  \n  \n    public void setId(int id) {  \n        this.id = id;  \n    }  \n  \n    public String getEmail() {  \n        return email;  \n    }  \n  \n    public void setEmail(String email) {  \nthis.email = email;  \n    }  \n  \n    @Override  \n    public boolean equals(Object o) {  \n        if (this == o) return true;  \n        if (!(o instanceof User)) return false;  \n        User user = (User) o;  \n        return getId() == user.getId() &amp;&amp;  \nObjects.equals(getName(), user.getName()) &amp;&amp;  \nObjects.equals(getEmail(), user.getEmail());  \n    }  \n  \n    @Override  \n    public inthashCode() {  \n  \n        return Objects.hash(getName(), getId(), getEmail());  \n    }  \n  \n    @Override  \n    public String toString() {  \n        return \"User{\" +  \n                \"name='\" + name + '\\'' +  \n                \", id=\" + id +  \n                \", email='\" + email + '\\'' +  \n                '}';  \n    }  \n}  </code></pre>\n\n\n\n<p>Calling the constructor of above Java data class using the object of User class as</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyClass{  \n    public static void main(String agrs&#91;]){  \n        User u = new User(\"Ashu\",101,\"mymail@mail.com\");  \nSystem.out.println(u);  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>User{name='Ashu', id=101, email='mymail@mail.com'}\n</code></pre>\n\n\n\n<p>The above Java data class code is rewritten in Kotlin data code in single line as</p>\n\n\n\n<ol><li>data&nbsp;<strong>class</strong>&nbsp;User(var&nbsp;name:&nbsp;String,&nbsp;var&nbsp;id:&nbsp;Int,&nbsp;var&nbsp;email:&nbsp;String)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Calling the constructor of above Kotlin data class using the object of User class as</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(agrs: Array&lt;String>) {  \nval u = User(\"Ashu\", 101, \"mymail@mail.com\")  \nprintln(u)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>User(name=Ashu, id=101, email=mymail@mail.com)\n</code></pre>\n\n\n\n<h2>Requirements of data class</h2>\n\n\n\n<p>In order to create a data class, we need to fulfill the following requirements:</p>\n\n\n\n<ul><li>Contain primary constructor with at least one parameter.</li><li>Parameters of primary constructor marked as&nbsp;<em>val</em>&nbsp;or&nbsp;<em>var</em>.</li><li>Data class cannot be abstract, inner, open or sealed.</li><li>Before 1.1,data class may only implements interface. After that data classes may extend other classes.</li></ul>\n\n\n\n<h3>Kotlin data class toString() methods</h3>\n\n\n\n<p>Kotlin data class only focuses on data rather than code implementation.</p>\n\n\n\n<p>Let&#8217;s see a simple program without data class. In this class, we are trying to print the reference of Product class using its object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Product(varitem: String, var price: Int)  \n  \nfun main(agrs: Array&lt;String>) {  \nval p = Product(\"laptop\", 25000)  \nprintln(p)  \n}</code></pre>\n\n\n\n<p>While printing the reference of Product class, it displays the hashCode() with class name of Product. It does not print the data.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Product@266474c2\n</code></pre>\n\n\n\n<p>The above program is rewritten using&nbsp;<strong>data class</strong>&nbsp;and printing the reference of Product class and displaying the data of object. It happens because the data class internally contains the&nbsp;<em>toString()</em>&nbsp;which display the string representation of object .</p>\n\n\n\n<pre class=\"wp-block-code\"><code>data class Product(varitem: String, var price: Int)  \n  \nfun main(agrs: Array&lt;String>) {  \nval p = Product(\"laptop\", 25000)  \nprintln(p)  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Product(name=laptop, price=25000)</code></pre>\n\n\n\n<h3>Kotlin data classequals() and hashCode()</h3>\n\n\n\n<p>The equal() method is used to check other object is &#8220;equal to&#8221; current object. While doing comparison between two or more hashCode(), equals() method returns true if the hashCode() are equal, else it returns a false.</p>\n\n\n\n<p>For example, let&#8217;s see an example in which a normal class comparing the two references of same class Product having same data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Product(varitem: String, var price: Int)  \n  \nfun main(agrs: Array&lt;String>) {  \nval p1 = Product(\"laptop\", 25000)  \nval p2 = Product(\"laptop\", 25000)  \nprintln(p1==p2)  \nprintln(p1.equals(p2))  \n}  </code></pre>\n\n\n\n<p>In above program, reference p1 and reference p2 has different references. Due to different reference values in p1 and p2, doing comparison displays false.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\nfalse\n</code></pre>\n\n\n\n<p>The above program is rewritten using&nbsp;<strong>data class</strong>, printing the reference of Product class and displaying the data of object.</p>\n\n\n\n<p>The&nbsp;<strong>hashCode()</strong>&nbsp;method returns hash code for the object. The hashCode() produce same integer result, if two objects are equal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>data class Product(varitem: String, var price: Int)  \n  \nfun main(agrs: Array&lt;String>) {  \nval p1 = Product(\"laptop\", 25000)  \nval p2 = Product(\"laptop\", 25000)  \nprintln(p1==p2)  \nprintln(p1.equals(p2))  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\ntrue\n</code></pre>\n\n\n\n<h3>Kotlin data class copy() method</h3>\n\n\n\n<p>The data class provides a copy() method which is used to create a copy (or colon) of object. Using copy() method, some or all properties of object can be altered.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>data class Product(var item: String, var price: Int)  \n  \nfun main(agrs: Array&lt;String>) {  \nval p1 = Product(\"laptop\", 25000)  \nprintln(\"p1 object contain data : $p1\")  \nval p2 = p1.copy()  \nprintln(\"p2 copied object contains default data of p1: $p2\")  \nval p3 = p1.copy(price = 20000)  \nprintln(\"p3 contain altered data of p1 : $p3\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>p1 object contain data : Product(item=laptop, price=25000)\np2 copied object contains default data of p1: Product(item=laptop, price=25000)\np3 contain altered data of p1 : Product(item=laptop, price=20000)\n</code></pre>\n\n\n\n<h2>Default and named arguments in data class</h2>\n\n\n\n<p>We can also assign the default arguments in primary constructor of data class. These default values can be changed later on program if required.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>data class Product(var item: String = \"laptop\", var price: Int = 25000)  \n  \nfun main(agrs: Array&lt;String>) {  \nval p1 = Product(price = 20000)  \nprintln(p1)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Product(item=laptop, price=20000)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Data class is a simple class which is used to hold data/state and contains standard functionality. A&nbsp;data&nbsp;keyword is used to declare a class as a data class. data&nbsp;class&nbsp;User(val&nbsp;name:&nbsp;String,&nbsp;val&nbsp;age:&nbsp;Int)&nbsp;&nbsp; Declaring a data class must contains at least one primary constructor with property argument (val or var). Data class internally contains the following functions: equals(): Boolean hashCode(): [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/883"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=883"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/883/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=883"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=883"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=883"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 885,
    "date": "2020-08-25T06:42:42",
    "date_gmt": "2020-08-25T06:42:42",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=885"
    },
    "modified": "2020-08-25T06:42:42",
    "modified_gmt": "2020-08-25T06:42:42",
    "slug": "kotlin-sealed-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-sealed-class/",
    "title": {
      "rendered": "Sealed Class"
    },
    "content": {
      "rendered": "\n<p>Sealed class is a class which restricts the class hierarchy. A class can be declared as sealed class using &#8220;sealed&#8221; keyword before the class name. It is used to represent restricted class hierarchy.</p>\n\n\n\n<p>Sealed class is used when the object have one of the types from limited set, but cannot have any other type.</p>\n\n\n\n<p>The constructors of sealed classes are private in default and cannot be allowed as non-private.</p>\n\n\n\n<h2>Declaration of sealed class</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>sealed class MyClass  </code></pre>\n\n\n\n<p>The subclasses of sealed classes must be declared in the same file in which sealed class itself.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sealed class Shape{  \n    class Circle(var radius: Float): Shape()  \n    class Square(var length: Int): Shape()  \n    class Rectangle(var length: Int, var breadth: Int): Shape()  \n object NotAShape : Shape()  \n}  </code></pre>\n\n\n\n<p>Sealed class ensures the important of type-safety by restricting the set of types at compile time only.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sealed class A{  \n    class B : A()  \n    {  \nclass E : A() //this works.  \n    }  \n    class C : A()  \ninit {  \nprintln(\"sealed class A\")  \n    }  \n}  \n  \nclass D : A() //this works  \n{  \nclass F: A() //This won't work,because sealed class is defined in another scope.  \n}  </code></pre>\n\n\n\n<p>A sealed class is implicitly an abstract class which cannot be instantiated.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sealed class MyClass  \nfun main(args: Array&lt;String>)  \n{  \nvar myClass = MyClass() //compiler error. sealed types cannot be instantiated.  \n} </code></pre>\n\n\n\n<h2>Sealed class with when</h2>\n\n\n\n<p>Sealed classes are commonly used with when expression. As the sub classes of sealed classes have their own types act as a case. Due to this,&nbsp;<strong>when expression</strong>&nbsp;in sealed class covers all the cases and avoid to add&nbsp;<em>else</em>&nbsp;clause.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>sealed class Shape{  \n    class Circle(var radius: Float): Shape()  \n    class Square(var length: Int): Shape()  \n    class Rectangle(var length: Int, var breadth: Int): Shape()  \n  //  object NotAShape : Shape()  \n}  \n  \nfun eval(e: Shape) =  \n        when (e) {  \n            is Shape.Circle ->println(\"Circle area is ${3.14*e.radius*e.radius}\")  \n            is Shape.Square ->println(\"Square area is ${e.length*e.length}\")  \n            is Shape.Rectangle ->println(\"Rectagle area is ${e.length*e.breadth}\")  \n            //else -> \"else case is not require as all case is covered above\"  \n          //  Shape.NotAShape ->Double.NaN  \n        }  \nfun main(args: Array&lt;String>) {  \n  \nvar circle = Shape.Circle(5.0f)  \nvar square = Shape.Square(5)  \nvar rectangle = Shape.Rectangle(4,5)  \n  \neval(circle)  \neval(square)  \neval(rectangle)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Circle area is 78.5\nSquare area is 25\nRectagle area is 20</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Sealed class is a class which restricts the class hierarchy. A class can be declared as sealed class using &#8220;sealed&#8221; keyword before the class name. It is used to represent restricted class hierarchy. Sealed class is used when the object have one of the types from limited set, but cannot have any other type. The [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/885"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=885"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/885/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=885"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=885"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=885"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 887,
    "date": "2020-08-25T06:44:49",
    "date_gmt": "2020-08-25T06:44:49",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=887"
    },
    "modified": "2020-08-25T06:44:49",
    "modified_gmt": "2020-08-25T06:44:49",
    "slug": "kotlin-extension-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-extension-function/",
    "title": {
      "rendered": "Extension Function"
    },
    "content": {
      "rendered": "\n<p>Kotlin&nbsp;<strong>extension function</strong>&nbsp;provides a facility to&nbsp;<strong>&#8220;add&#8221;</strong>&nbsp;methods to class without inheriting a class or using any type of design pattern. The created extension functions are used as a regular function inside that class.</p>\n\n\n\n<p>The extension function is declared with a prefix&nbsp;<em>receiver type</em>&nbsp;with method name.</p>\n\n\n\n<ol><li><strong>fun</strong>&nbsp;&lt;class_name&gt;.&lt;method_name&gt;()&nbsp;&nbsp;</li></ol>\n\n\n\n<p>In the above declaration, &lt;class_name&gt; is a receiver type and the &lt;method_name&gt;() is an extension function.</p>\n\n\n\n<h3>Example of extension function declaration and its use</h3>\n\n\n\n<p>In general, we call all methods from outside the class which are already defined inside the class.In below example, a Student class declares a method is&nbsp;<em>Passed()</em>&nbsp;which is called from&nbsp;<em>main()</em>&nbsp;function by creating the object student of Student class.</p>\n\n\n\n<p>Suppose that we want to call a method (say&nbsp;<em>isExcellent()</em>) of Student class which is not defined in class. In such situation, we create a function (isExcellent()) outside the Student class as Student.isExcellent() and call it from the main() function. The declare Student.isExcellent() function is known as&nbsp;<strong>extension function</strong>, where Student class is known as&nbsp;<em>receiver type</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \n    fun isPassed(mark: Int): Boolean{  \n        return mark>40  \n    }  \n}  \nfun Student.isExcellent(mark: Int): Boolean{  \n    return mark > 90  \n}  \nfun main(args: Array&lt;String>){  \nval student = Student()  \nval passingStatus = student.isPassed(55)  \nprintln(\"student passing status is $passingStatus\")  \n  \nval excellentStatus = student.isExcellent(95)  \nprintln(\"student excellent status is $excellentStatus\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>student passing status is true\nstudent excellent status is true\n</code></pre>\n\n\n\n<p>The above example only demonstrates about how to declare an extension function.</p>\n\n\n\n<h3>Kotlin extension function example</h3>\n\n\n\n<p>Let&#8217;s see the real example of extension function. In this example, we are swapping the elements of MutableList&lt;&gt; using swap() method. However, MutableList&lt;&gt;class does not provide the swap() method internally which swap the elements of it. For doing this we create an extension function for MutableList&lt;&gt; with swap() function.</p>\n\n\n\n<p>The list object call the extension function (MutableList&lt;Int&gt;.swap(index1: Int, index2: Int):MutableList&lt;Int&gt;) using list.swap(0,2) function call. The swap(0,2) function pass the index value of list inside MutableList&lt;Int&gt;.swap(index1: Int, index2: Int):MutableList&lt;Int&gt;) sxtension function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun MutableList&lt;Int>.swap(index1: Int, index2: Int):MutableList&lt;Int> {  \nval tmp = this&#91;index1] // 'this' represents to the list  \n    this&#91;index1] = this&#91;index2]  \n    this&#91;index2] = tmp  \n    return this  \n}  \nfun main(args: Array&lt;String>) {  \nval list = mutableListOf(5,10,15)  \nprintln(\"before swapping the list :$list\")  \nval result = list.swap(0, 2)  \nprintln(\"after swapping the list :$result\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>before swapping the list :&#91;5, 10, 15]\nafter swapping the list :&#91;15, 10, 5]\n</code></pre>\n\n\n\n<h2>Extension Function as Nullable Receiver</h2>\n\n\n\n<p>The extension function can be defined as nullable receiver type. This nullable extension function is called through object variable even the object value is null. The nullability of object is checked using&nbsp;<strong>this == null</strong>&nbsp;inside the body.</p>\n\n\n\n<p>Let&#8217;s rewrite the above program using extension function as nullable receiver.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>funMutableList&lt;Int>?.swap(index1: Int, index2: Int): Any {  \nif (this == null) return \"null\"  \nelse  {  \nval tmp = this&#91;index1] // 'this' represents to the list  \nthis&#91;index1] = this&#91;index2]  \nthis&#91;index2] = tmp  \nreturn this  \n    }  \n}  \nfun main(args: Array&lt;String>) {  \nval list = mutableListOf(5,10,15)  \nprintln(\"before swapping the list :$list\")  \nval result = list.swap(0, 2)  \nprintln(\"after swapping the list :$result\")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>before swapping the list :&#91;5, 10, 15]\nafter swapping the list :&#91;15, 10, 5]\n</code></pre>\n\n\n\n<h2>Companion Object Extensions</h2>\n\n\n\n<p>A&nbsp;<strong>companion</strong>&nbsp;object is an object which is declared inside a class and marked with the&nbsp;<strong>companion</strong>&nbsp;keyword. Companion object is used to call the member function of class directly using the class name (like static in java).</p>\n\n\n\n<p>A class which contains companion object can also be defined as extension function and property for the companion object.</p>\n\n\n\n<h3>Example of companion object</h3>\n\n\n\n<p>In this example, we call a create() function declared inside companion object using class name (MyClass) as qualifier.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyClass {  \n    companion object {  \n        fun create():String{  \n            return \"calls create method of companion object\"  \n        }  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nval instance = MyClass.create()  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>calls create method of companion object\n</code></pre>\n\n\n\n<h3>Companion object extensions example</h3>\n\n\n\n<p>Let&#8217;s see an example of companion object extensions. The companion object extension is also being called using the&nbsp;<em>class name</em>&nbsp;as the qualifier.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyClass {  \n    companion object {  \n        fun create(): String {  \n            return \"calling create method of companion object\"  \n        }  \n    }  \n}  \nfun MyClass.Companion.helloWorld() {  \nprintln(\"executing extension of companion object\")  \n}  \nfun main(args: Array&lt;String>) {  \nMyClass.helloWorld() //extension function declared upon the companion object  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>executing extension of companion object</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin&nbsp;extension function&nbsp;provides a facility to&nbsp;&#8220;add&#8221;&nbsp;methods to class without inheriting a class or using any type of design pattern. The created extension functions are used as a regular function inside that class. The extension function is declared with a prefix&nbsp;receiver type&nbsp;with method name. fun&nbsp;&lt;class_name&gt;.&lt;method_name&gt;()&nbsp;&nbsp; In the above declaration, &lt;class_name&gt; is a receiver type and the &lt;method_name&gt;() [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/887"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=887"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/887/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=887"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=887"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=887"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 889,
    "date": "2020-08-25T06:48:02",
    "date_gmt": "2020-08-25T06:48:02",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=889"
    },
    "modified": "2020-08-25T06:48:02",
    "modified_gmt": "2020-08-25T06:48:02",
    "slug": "kotlin-generics",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-generics/",
    "title": {
      "rendered": "Generics"
    },
    "content": {
      "rendered": "\n<p><strong>Generics</strong>&nbsp;are the powerful features that allow to define classes, methods, and properties etc. which can be accessed using different types. The type differences of classes, methods, etc. are checked at compile-time.</p>\n\n\n\n<p>The generic type class or method is declared as parameterized type. A parameterized type is an instance of generic type with actual type arguments. The parameterized types are declared using angle brackets&nbsp;<strong>&lt;&gt;</strong>&nbsp;Generics are mostly used in collections.</p>\n\n\n\n<h2>Advantage of Generics</h2>\n\n\n\n<p>Following are the key advantages of using generics:</p>\n\n\n\n<ul><li><strong>Type-safety:</strong>&nbsp;Generic allows to hold only single type of object. Generic does not allow to store other object.</li><li><strong>Type casting is not required:</strong>&nbsp;There is no need to typecast the object.</li><li><strong>Compile time checking:</strong>&nbsp;Generics code is checked at compile time so that it can avoid any problems at runtime.</li></ul>\n\n\n\n<p>Let&#8217;s see a problem without using the generics.</p>\n\n\n\n<p>In this example, we create a Person class with primary constructor having single parameter. Now, we want to pass the different type of data in object of Person class (say Int type as Person(30) and String type as Person(&#8220;40&#8221;)). The primary constructor of Person class accept Int type Person(30) and regrets String type Person(&#8220;40&#8221;). It generates a compile time error as type mismatch.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Person (age:Int){  \nvar age: Int = age  \ninit {  \nthis.age= age  \nprintln(age)  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nvar ageInt: Person = Person(30)  \nvar ageString: Person = Person(\"30\")// compile time error  \n}  </code></pre>\n\n\n\n<p>To solve the above problem, we use a generic type class which is a user defined class that accepts different type of parametersin single class.</p>\n\n\n\n<p>Let&#8217;s rewrite the above code using generic type. A class Person of type &lt;T&gt; is a general type class that accepts both Int and String types of parameter.</p>\n\n\n\n<p>In other words, the type parameter &lt;T&gt; is a place holder that will be replaced by type argument. It will be replaced when the generic type is instantiated.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Person&lt;T>(age: T){  \nvar age: T = age  \ninit {  \nthis.age= age  \nprintln(age)  \n    }  \n}  \nfun main(args: Array&lt;String>){  \nvar ageInt: Person&lt;Int> = Person&lt;Int>(30)  \nvar ageString: Person&lt;String> = Person&lt;String>(\"40\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>30\n40\n</code></pre>\n\n\n\n<p>In above example, when the object of Person class is created using type Int as Person&lt;Int&gt;(30) and Person&lt;String&gt;(&#8220;40&#8221;), it replaces the Person class of type&nbsp;<strong>T</strong>&nbsp;with Int and String respectively.</p>\n\n\n\n<p><strong>Syntax of generic class</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class_or_interface&lt;Type>  </code></pre>\n\n\n\n<p><strong>Syntax of generic method</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;Type>methodName(parameter: classType&lt;Type>)  </code></pre>\n\n\n\n<h3>Kotlin generic example</h3>\n\n\n\n<p>Let&#8217;s see an example of generic method. In this example, we are accessing the generic method of collection type (ArrayList). For doing this, we create two different objectsof ArrayList class arrayListOf&lt;String&gt;(&#8220;Ashu&#8221;,&#8221;Ajay&#8221;) and arrayListOf&lt;Float&gt;(10.5f,5.0f,25.5f) of String and Float types respectively. When we call the generic method &lt;T&gt;printValue(list: ArrayList&lt;T&gt;) using printValue(stringList), the type&nbsp;<strong>T</strong>&nbsp;of method &lt;T&gt;printValue(list: ArrayList&lt;T&gt;)will be replaced by String type. Similarly, when we call the generic method using printValue(floatList), the type&nbsp;<strong>T</strong>&nbsp;of method &lt;T&gt;printValue(list: ArrayList&lt;T&gt;) will replace by Float type.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval stringList: ArrayList&lt;String> = arrayListOf&lt;String>(\"Ashu\",\"Ajay\")  \nval s: String = stringList&#91;0]  \nprintln(\"printing the string value of stringList: $s\")  \nprintValue(stringList)  \nval floatList: ArrayList&lt;Float> = arrayListOf&lt;Float>(10.5f,5.0f,25.5f)  \nprintValue(floatList)     \n}  \nfun &lt;T>printValue(list: ArrayList&lt;T>){  \n    for(element in list){  \nprintln(element)  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>printing the string value of stringList: Ashu\nAshu\nAjay\n10.5\n5.0\n25.5\n</code></pre>\n\n\n\n<h3>Kotlin generic extension function example</h3>\n\n\n\n<p>As extension function allows to add methods to class without inherit a class or any design pattern.</p>\n\n\n\n<p>In this example, we add a method printValue()to ArrayList class of generic type. This method is called form stringList.printValue() and floatList.printValue()of String and Float types respectively. As&nbsp;<strong>&#8220;this&#8221;</strong>&nbsp;keyword in extension function represent the current calling instance. When we call the extension function using stringList.printValue(), the&nbsp;<strong>this</strong>&nbsp;represents stringList instance containing String type values. Similarly, calling the extension function using floatList.printValue(), the&nbsp;<strong>this</strong>&nbsp;represents floatList instance containing Float type values.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval stringList: ArrayList&lt;String> = arrayListOf&lt;String>(\"Ashu\",\"Ajay\")  \nstringList.printValue()  \nval floatList: ArrayList&lt;Float> = arrayListOf&lt;Float>(10.5f,5.0f,25.5f)  \nfloatList.printValue()  \n}  \nfun &lt;T>ArrayList&lt;T>.printValue(){  \n    for(element in this){  \nprintln(element)  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ashu Ajay 10.5 5.0 25.5</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Generics&nbsp;are the powerful features that allow to define classes, methods, and properties etc. which can be accessed using different types. The type differences of classes, methods, etc. are checked at compile-time. The generic type class or method is declared as parameterized type. A parameterized type is an instance of generic type with actual type arguments. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/889"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=889"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/889/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=889"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=889"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=889"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 891,
    "date": "2020-08-25T06:51:01",
    "date_gmt": "2020-08-25T06:51:01",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=891"
    },
    "modified": "2020-08-25T06:51:01",
    "modified_gmt": "2020-08-25T06:51:01",
    "slug": "kotlin-ranges",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-ranges/",
    "title": {
      "rendered": "Ranges"
    },
    "content": {
      "rendered": "\n<p>Kotlin range is defined as an interval from start value to the end value. Range expressions are created with operator&nbsp;<strong>(. .)</strong>&nbsp;which is complemented by&nbsp;<strong>in</strong>&nbsp;and&nbsp;<strong>!in</strong>. The value which is equal or greater than start value and smaller or equal to end value comes inside the defined range..</p>\n\n\n\n<pre class=\"wp-block-code\"><code>val aToZ = 'a'..'z'  \nval oneToNine = 1..9  </code></pre>\n\n\n\n<p>While evaluating the above code&nbsp;<em>val aToZ = &#8216;a&#8217;..&#8217;z&#8217;as &#8216;a&#8217;in aToZ</em>&nbsp;returns true,&nbsp;<em>&#8216;b&#8217; in aToZ</em>&nbsp;returns true and so on. The code&nbsp;<em>val oneToNine = 1..9 evaluates as 1 in oneToNine</em>&nbsp;returns&nbsp;<em>true</em>, but the evaluation&nbsp;<em>10 in oneToNine</em>&nbsp;returns&nbsp;<em>false</em>.</p>\n\n\n\n<h2>Integral Type Ranges</h2>\n\n\n\n<p>Integral type ranges (IntRange, LongRange, CharRange) are the ability to use in for loop. The compiler converts this integral type in simple analogue of Java&#8217;s index for-loop.</p>\n\n\n\n<h3>Example of Kotlin range</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \n   for (a in 1..5){  \n        print(a )  \n    }  \nprintln()  \nfor(x in 'a'..'f'){  \n        print(x )  \n    }  \nprintln()  \nval range = 1.0..5.0  \nprintln(range)  \nprintln(\"3.14 in range is ${3.14 in range}\")  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>12345\nabcdef\n1.0..5.0\n3.14 in range is true\n</code></pre>\n\n\n\n<p>What happened when we try to iterate a r range in decreasing order using . . operator ? This will print nothing.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   for (a in 5..1){\n        print(a )// print nothing\n    }\n</code></pre>\n\n\n\n<p>To iterate the element in decreasing order, use the standard library&nbsp;<strong>downTo()</strong>&nbsp;function or&nbsp;<strong>downTo</strong>&nbsp;keyword.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for (a in 5 downTo 1){  \n        print(a )// 54321  \n    }  </code></pre>\n\n\n\n<h3>until range</h3>\n\n\n\n<p>The&nbsp;<strong>until()</strong>&nbsp;function or&nbsp;<strong>until</strong>&nbsp;keyword in range is used to exclude the last element. It iterates range from start to 1 less than end.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for (a in 1 until 5){  \n        print(a ) // print 1234  \n    }  </code></pre>\n\n\n\n<p>The above range excludes 5 and iterate from 1 to 4.</p>\n\n\n\n<h2>Kotlin range of integer</h2>\n\n\n\n<p>Let&#8217;s see an example of integer range using&nbsp;<em>downTo()</em>,&nbsp;<em>downTo</em>, and&nbsp;<em>rangeTo()</em>&nbsp;methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n        for (x in 1..5)  \n            print(x)  \nprintln()  \n        for (x in 5 downTo 1)  \n            print(x)  \nprintln()  \n        for (x in 1.rangeTo(5))  \n            print(x)  \nprintln()  \n        for (x in 5.downTo(1))  \n            print(x)  \nprintln()  \n    }  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>12345\n54321\n12345\n54321\n</code></pre>\n\n\n\n<h2>Kotlin range of characters</h2>\n\n\n\n<p>Example of Kotlin ranges using char data types.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n (x in 'a'..'e')  \n        print(\"$x \")  \nntln()  \n    for (x in 'e' downTo 'a')  \n        print(\"$x \")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a bcde\nedcba\n</code></pre>\n\n\n\n<h2>Kotlin range step</h2>\n\n\n\n<p>Kotlin&nbsp;<strong>step</strong>&nbsp;keyword in range is used to iterate the range in the interval of given step value (int value).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n        for (x in 1..10 step 2)  \n            print(\"$x \")  \nprintln()  \n        for (x in 10 downTo 1 step 3)  \n            print(\"$x \")  \n    }  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-code\"><code>1 3 5 7 9 \n10 7 4 1\n</code></pre>\n</div></div>\n\n\n\n<h2>Kotlin range iterator</h2>\n\n\n\n<p>An&nbsp;<strong>iterator()</strong>&nbsp;method is also be used to iterate the range value. It uses&nbsp;<em>hasNext()</em>&nbsp;method which checks the next element in the range and next() method returns the next element of the range.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \n  \nval chars = ('a'..'e')  \nval it = chars.iterator()  \n    while (it.hasNext()) {  \nval x = it.next()  \n        print(\"$x \")  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a b c d e</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin range is defined as an interval from start value to the end value. Range expressions are created with operator&nbsp;(. .)&nbsp;which is complemented by&nbsp;in&nbsp;and&nbsp;!in. The value which is equal or greater than start value and smaller or equal to end value comes inside the defined range.. While evaluating the above code&nbsp;val aToZ = &#8216;a&#8217;..&#8217;z&#8217;as &#8216;a&#8217;in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/891"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=891"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/891/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=891"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=891"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=891"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 893,
    "date": "2020-08-25T06:51:33",
    "date_gmt": "2020-08-25T06:51:33",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=893"
    },
    "modified": "2020-08-25T06:51:33",
    "modified_gmt": "2020-08-25T06:51:33",
    "slug": "working-of-ranges",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/working-of-ranges/",
    "title": {
      "rendered": "Working of ranges"
    },
    "content": {
      "rendered": "\n<p>Ranges implement&nbsp;<strong>ClosedRange&lt;T&gt;</strong>&nbsp;a common interface in the library. It represents a closed mathematical interval defined for comparable types. It contains two endpoints as start and end (endInclusive)points. The operation performed in range is to check whether the element is contained in it or not. This is done by using&nbsp;<strong>in</strong>&nbsp;or&nbsp;<strong>!in</strong>&nbsp;operators.</p>\n\n\n\n<p>An arithmetic progression is represented by integral type progressions such as CharProgression, IntProgression, Long Progression. Progressions represent the first element, the last element and the step which is non-zero. The first element is first, sub-sequent elements represent previous element plus step and the last element is the last element unless progression is completed.</p>\n\n\n\n<p>Progression refers to subtype of Iterable&lt;N&gt;, where N is Char, Int or Long. As progression is Iterable&lt;N&gt; type it can be used in for-loop and function such as filter, map etc.</p>\n\n\n\n<p>The . .operator creates an object for integral type which implements both ClosedRange&lt;T&gt; and Progression. For example, a range type LongRange implements ClosedRange&lt;Int&gt; and extends Long Progression, it means all the operation which are defined for LongProgression is also available for LongRange. The output generated by downTo() and step() functions is always a Progression.</p>\n\n\n\n<p>The last element of the Progression is largest value not greater than the end value for positive step. The minimum value of progression is not less than the end value for negative step. The last value is checked by using (last-first) %step == 0.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Ranges implement&nbsp;ClosedRange&lt;T&gt;&nbsp;a common interface in the library. It represents a closed mathematical interval defined for comparable types. It contains two endpoints as start and end (endInclusive)points. The operation performed in range is to check whether the element is contained in it or not. This is done by using&nbsp;in&nbsp;or&nbsp;!in&nbsp;operators. An arithmetic progression is represented by integral [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/893"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=893"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/893/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=893"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=893"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=893"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 895,
    "date": "2020-08-25T06:55:48",
    "date_gmt": "2020-08-25T06:55:48",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=895"
    },
    "modified": "2020-08-25T06:55:48",
    "modified_gmt": "2020-08-25T06:55:48",
    "slug": "kotlin-utility-functions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-utility-functions/",
    "title": {
      "rendered": "Utility Functions"
    },
    "content": {
      "rendered": "\n<p>Kotlin range utility functions have several standard library functions which are used in Kotlin ranges. These utility functions are as follow:</p>\n\n\n\n<ul><li>rangeTo()</li><li>downTo()</li><li>reversed()</li><li>step()</li></ul>\n\n\n\n<h2>Kotlin rangeTo()</h2>\n\n\n\n<p>The&nbsp;<strong>rangeTo()</strong>&nbsp;function is used to return the value from start to end in increasing order mentioned in a range. The&nbsp;<em>rangeTo()</em>&nbsp;function is integral types which calls the constructors of&nbsp;<strong>Range</strong>&nbsp;class.</p>\n\n\n\n<h3>Example of rangeTo() function</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nvar range: IntRange = 1.rangeTo(5)  \nprintln(\"Printing value: 1.rangeTo(5)\")  \n    for (x in range){  \n        print(\"$x \")  \n    }  \nprintln(\"\")  \nvar range2: IntRange = IntRange(1,5)  \nprintln(\"Printing value: IntRange(1,5)\")  \n    for (x in range2){  \n        print(\"$x \")  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Printing value: 1.rangeTo(5)\n1 2 3 4 5 \nPrinting value: IntRange(1,5)\n1 2 3 4 5\n</code></pre>\n\n\n\n<p>The data types (or types) which are floating point like Double, Float are not define in rangeTo operator.</p>\n\n\n\n<h2>Kotlin downTo()</h2>\n\n\n\n<p>The&nbsp;<strong>downTo()</strong>&nbsp;extension function is used to return the value in decreasing order mention from higher order to lower order. The downTo() function is defined for pair of integral types.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun Long.downTo(other: Int): LongProgression {  \nreturn LongProgression.fromClosedRange(this, other.toLong(), -1L)  \n}  \n  \nfun Byte.downTo(other: Int): IntProgression {  \nreturn IntProgression.fromClosedRange(this.toInt(), other, -1)  \n}</code></pre>\n\n\n\n<p><strong>Example of downTo() function</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nprintln(\"Range 1\")  \nvar range1 = 5 downTo 1  \n    for (x in range1){  \n        print(\"$x \")  \n    }  \nprintln()  \nprintln(\"Range 2\")  \nvar range2: IntProgression = 5.downTo(1)  \n    for (x in range2){  \n        print(\"$x \")  \n    }  \nprintln()  \nprintln(\"Range 3\")  \nvar range3: IntProgression = IntProgression.fromClosedRange(5,1,-1)  \n    for (x in range3){  \n        print(\"$x \")  \n    }  \n  \n}  </code></pre>\n\n\n\n<h3>Example of reversed() function</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nprintln(\"Reversed 1\")  \nvar range1 = 1..5  \n    for (x in range1.reversed()){  \n        print(\"$x \")  \n    }  \nprintln()  \nprintln(\"Reversed 2\")  \nvar range2: IntRange = IntRange(1,5)  \n    for (x in range2.reversed()){  \n        print(\"$x \")  \n    }  \nprintln()  \nprintln(\"Reversed 3\")  \nvar range3 = IntProgression.fromClosedRange(5,1,-1)  \n    for (x in range3.reversed()){  \n        print(\"$x \")  \n    }  \nprintln()  \nprintln(\"Reversed 4\")  \nvar range4: IntProgression = IntProgression.fromClosedRange(5,1,-2)  \n    for (x in range4.reversed()){  \n        print(\"$x \")  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Reversed 1\n5 4 3 2 1 \nReversed 2\n5 4 3 2 1 \nReversed 3\n1 2 3 4 5 \nReversed 4\n1 3 5\n</code></pre>\n\n\n\n<h2>Kotlin step()</h2>\n\n\n\n<p>The&nbsp;<strong>step()</strong>&nbsp;function ( or&nbsp;<strong>step</strong>&nbsp;operator) is used to return the range value in interval of given step value. A step value always takes a positive parameter. The negative step value generates the IllegalArgumentException exception.</p>\n\n\n\n<h3>Example of step() function</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval range: IntRange = 1..10  \nprintln(\"Print range value with step 2:\")  \n    for(x in range step (2)){  \n        print(\"$x \")  \n    }  \nprintln(\"\")  \nprintln(\"Print range value with step 3:\")  \n    for(x in range step 3){  \n        print(\"$x \")  \n    }  \nval first=((range step 2).first)  \nval last=((range step 2).last)  \nprintln(\"\")  \nprintln(\"First value of interval: $first\")  \nprintln(\"Last value of interval: $last \")  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Print range value with step 2:\n1 3 5 7 9 \nPrint range value with step 3:\n1 4 7 10 \nFirst value of interval: 1\nLast value of interval: 9\n</code></pre>\n\n\n\n<p>If we provide step value as a negative integer it throws an exception.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval range: IntRange = IntRange(1,10)  \n    for (x in range step -2){  \n        print(\"$x \")  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception in thread \"main\" java.lang.IllegalArgumentException: Step must be positive, was: -2.\n\tat kotlin.ranges.RangesKt__RangesKt.checkStepIsPositive(Ranges.kt:130)\n\tat kotlin.ranges.RangesKt___RangesKt.step(_Ranges.kt:432)\n\tat TestKt.main(Test.kt:63)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin range utility functions have several standard library functions which are used in Kotlin ranges. These utility functions are as follow: rangeTo() downTo() reversed() step() Kotlin rangeTo() The&nbsp;rangeTo()&nbsp;function is used to return the value from start to end in increasing order mentioned in a range. The&nbsp;rangeTo()&nbsp;function is integral types which calls the constructors of&nbsp;Range&nbsp;class. Example [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/895"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=895"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/895/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=895"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=895"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=895"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 898,
    "date": "2020-08-25T07:00:32",
    "date_gmt": "2020-08-25T07:00:32",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=898"
    },
    "modified": "2020-08-25T07:00:32",
    "modified_gmt": "2020-08-25T07:00:32",
    "slug": "java-interoperability",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/java-interoperability/",
    "title": {
      "rendered": "Java Interoperability"
    },
    "content": {
      "rendered": "\n<p>Kotlin code is fully compatible with Java code. The existing Java code can be easily called form Kotlin code and Kotlin code is also called from Java code in normal way.</p>\n\n\n\n<h2>Calling Java code from Kotlin</h2>\n\n\n\n<h3>Calling Java void method form Kotlin file</h3>\n\n\n\n<p>While calling a java code from Kotlin whose return types is&nbsp;<strong>void</strong>, it will return Unit in Kotlin file. If someone wants to return that value, it will assign to Kotlin file by Kotlin compiler and return Unit. For example:</p>\n\n\n\n<p><strong>MyKotlinFile.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval sum= MyJavaClass.add(5, 10)  \nprintln(\"printing sum inside Kotlin file: \"+sum)  \n }  </code></pre>\n\n\n\n<p><strong>MyJavaClass.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyJavaClass {  \n    public static void main(String&#91;] args){  \n  \n    }  \n    public static void add(inta,int b){  \nint result = a + b;  \nSystem.out.println(\"printing inside Java class :\"+result);  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>printing inside Java class :15\nprinting sum inside Kotlin file: kotlin.Unit\n</code></pre>\n\n\n\n<h3>Calling Java int method from Kotlin file</h3>\n\n\n\n<p>While calling a java code of int type or other (rather than void) from Kotlin file, it returns the result in same types. For example, calling an area() method of Java class from Kotlin file returns result in int type.</p>\n\n\n\n<p><strong>MyKotlinFile.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval area: Int = MyJavaClass.area(3, 4)  \nprintln(\"printing area from java insideKotlin file: \"+area)  \n}</code></pre>\n\n\n\n<p><strong>MyJavaClass.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyJavaClass {  \n    public static void main(String&#91;] args){  \n  \n    }  \n    public static int area(int l, int b){  \nint result = l * b;  \n        return result;  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>printing area from java insideKotlinfile: 12\n</code></pre>\n\n\n\n<h2>Kotlin code calling Java class present inside package</h2>\n\n\n\n<p>If we want to call the Java codes from Kotlin file both present inside the different package, this requires to import the package name with Java class inside Kotlin file.</p>\n\n\n\n<p>For example, a Java class&nbsp;<em>MyJavaClass.java</em>&nbsp;is present inside a package&nbsp;<em>myjavapackageand</em>&nbsp;a Kotlin file&nbsp;<em>MyKotlinFile.kt</em>&nbsp;is present inside&nbsp;<em>mykotlinpackage</em>&nbsp;package. In such case calling Java code from Kotlin file needs to import&nbsp;<em>myjavapackage.MyJavaClass</em>&nbsp;inside Kotlin file.</p>\n\n\n\n<p><strong>MyKotlinFile.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package mykotlinpackage  \nimport myjavapackage.MyJavaClass  \n  \nfun main(args: Array&lt;String>) {  \nval area: Int = MyJavaClass.area(3, 4)  \nprintln(\"printing area from java inside Kotlin file: \"+area)  \n}</code></pre>\n\n\n\n<p><strong>MyJavaClass.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package myjavapackage;  \n  \npublic class MyJavaClass {  \n    public static void main(String&#91;] args){  \n  \n    }  \n    public static int area(int l, int b){  \nint result = l * b;  \n        return result;  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>printing area from java inside Kotlin file: 12\n</code></pre>\n\n\n\n<h2>Kotlin code access Java getter and setter</h2>\n\n\n\n<p>As Kotlin is completely interoperability with Java, we can access the <em>getter</em> and <em>setter</em> functionality of Java class (or POJO class). For example, create a getter and setter method in Java class <em>MyJava.java</em> with properties <em>firstName</em> and <em>lastName</em>. These properties are accessed from a Kotlin file <em>MyKotlin.kt</em> by creation object of <em>MyJava.java</em> in Kotlin </p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyJava{  \n    protected String firstName;  \n    protected String lastName;  \n  \n    public String getfirstName() {  \n        return firstName;  \n    }  \n    public void setfirstName(String firstName) {  \nthis.firstName = firstName;  \n    }  \n    public String getlastName() {  \n        return lastName;  \n    }  \n    public void setlastName(String lastName) {  \nthis.lastName = lastName;  \n    }  \n}</code></pre>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<p><strong>MyKotlin.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>) {  \nval myJava = MyJava()  \n  \nmyJava.lastName = \"Kumar\"  \nmyJava.setfirstName(\"Arjun\")  \n  \nprintln(\"accessing value using property: \"+myJava.firstName)  \nprintln(\"accessing value using property: \"+myJava.lastName)  \n  \nprintln(\"accessing value using method: \"+myJava.getfirstName())  \nprintln(\"accessing value using method: \"+myJava.getlastName())  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>accessing value using property: Arjun\naccessing value using property: Kumar\naccessing value using method: Arjun\naccessing value using method: Kumar\n</code></pre>\n\n\n\n<h2>Kotlin code access Java array</h2>\n\n\n\n<p>We can simply call Java class method which takes array as an argument from Kotlin file. For example, create method sumValue() which takes array element as parameter in Java class&nbsp;<em>MyJava.java</em>&nbsp;calculating addition and returns result. This method is called from Kotlin file&nbsp;<em>MyKotlin.kt</em>&nbsp;by passing array as parameter.</p>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyJava {  \n  \n    public intsumValues(int&#91;] nums) {  \nint result = 0;  \n        for (int x:nums) {  \n            result+=x;  \n        }  \n        return result;  \n    }  \n} </code></pre>\n\n\n\n<p><strong>MyKotlin.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval myJava = MyJava()  \nval numArray = intArrayOf(1, 2, 3,4,5)  \nval sum = myJava.sumValues(numArray)  \nprintln(sum)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>sum of array element is 15\n</code></pre>\n\n\n\n<h2>Kotlin code access Java Varargs</h2>\n\n\n\n<p>In the Java varags functionality, we can pass any number of arguments to a method. Java varargs parameter is defined using ellipsis i.e. three dots (&#8230;) after data type.</p>\n\n\n\n<p>Following points are to be kept while using the varargs parameter:</p>\n\n\n\n<ul><li>There is only one varargs parameter in a method.</li><li>Varargsagrument must be at the last argument.</li></ul>\n\n\n\n<p>While accessing the Java varargs from Kotlin we need to use spread operator * to pass the array.</p>\n\n\n\n<p>Let&#8217;s see an example in which a Java method uses an int type varargs which is called from Kotlin file.</p>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyJava {  \n    public void display(int... values) {  \n        for (int s : values) {  \nSystem.out.println(s);  \n        }  \n    }  \n} </code></pre>\n\n\n\n<p><strong>MyKotlin.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval myJava = MyJava()  \nval array = intArrayOf(0, 1, 2, 3)  \nmyJava.display(*array)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n1\n2\n3\n</code></pre>\n\n\n\n<p>Let&#8217;s see another example which takes two parameter in a Java method uses as parameters of String type and int type varargs called from Kotlin file.</p>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyJava {  \n    public void display(String message,int... values) {  \nSystem.out.println(\"string is \" + message);  \n        for (int s : values) {  \nSystem.out.println(s);  \n        }  \n    }  \n}</code></pre>\n\n\n\n<p><strong>MyKotlin.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval myJava = MyJava()  \nval array = intArrayOf(0, 1, 2, 3)  \nmyJava.display(\"hello\",*array)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>string is hello\n0\n1\n2\n3\n</code></pre>\n\n\n\n<h2>Kotlin and Java Mapped types</h2>\n\n\n\n<p>Kotlin and Java types are mapped differently, however they are mapped to corresponding types. Mapping of these types are matters only at compile time and run time remains unchanged.</p>\n\n\n\n<p>Java&#8217;s primitive types to corresponding Kotlin types</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Java type</th><th>Kotlin type</th></tr><tr><td>byte</td><td>kotlin.Byte</td></tr><tr><td>short</td><td>kotlin.Short</td></tr><tr><td>int</td><td>kotlin.Int</td></tr><tr><td>long</td><td>kotlin.Long</td></tr><tr><td>char</td><td>kotlin.Char</td></tr><tr><td>double</td><td>kotlin.Double</td></tr><tr><td>boolean</td><td>kotlin.Boolean</td></tr></tbody></table></figure>\n\n\n\n<p>Java&#8217;s non-primitive types to corresponding Kotlin types</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Java type</th><th>Kotlin type</th></tr><tr><td>java.lang.Object</td><td>kotlin.Any!</td></tr><tr><td>java.lang.Cloneable</td><td>kotlin.Cloneable!</td></tr><tr><td>java.lang.Comparable</td><td>kotlin.Comparable!</td></tr><tr><td>java.lang.Enum</td><td>kotlin.Enum!</td></tr><tr><td>java.lang.Annotation</td><td>kotlin.Annotation!</td></tr><tr><td>java.lang.Deprecated</td><td>kotlin.Deprecated!</td></tr><tr><td>java.lang.CharSequence</td><td>kotlin.CharSequence!</td></tr><tr><td>java.lang.String</td><td>kotlin.String!</td></tr><tr><td>java.lang.Number</td><td>kotlin.Number!</td></tr><tr><td>java.lang.Throwable</td><td>kotlin.Throwable!</td></tr></tbody></table></figure>\n\n\n\n<p>Java&#8217;s boxed primitive types to corresponding nullableKotlin types</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Java type</th><th>Kotlin type</th></tr><tr><td>java.lang.Byte</td><td>kotlin.Byte?</td></tr><tr><td>java.lang.Short</td><td>kotlin.Short?</td></tr><tr><td>java.lang.Integer</td><td>kotlin.Int?</td></tr><tr><td>java.lang.Long</td><td>kotlin.Long?</td></tr><tr><td>java.lang.Character</td><td>kotlin.Char?</td></tr><tr><td>java.lang.Float</td><td>kotlin.Float?</td></tr><tr><td>java.lang.Double</td><td>kotlin.Double?</td></tr><tr><td>java.lang.Boolean</td><td>kotlin.Boolean?</td></tr></tbody></table></figure>\n\n\n\n<p>Java&#8217;s collection types to corresponding read-only or mutable Kotlin types</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Java type</th><th>Kotlin read-only type</th><th>Kotlin mutable type</th></tr><tr><td>Iterator&lt;T&gt;</td><td>Iterator&lt;T&gt;</td><td>MutableIterator&lt;T&gt;</td></tr><tr><td>Iterable&lt;T&gt;</td><td>Iterable&lt;T&gt;</td><td>MutableIterable&lt;T&gt;</td></tr><tr><td>Collection&lt;T&gt;</td><td>Collection&lt;T&gt;</td><td>MutableCollection&lt;T&gt;</td></tr><tr><td>Set&lt;T&gt;</td><td>MutableSet&lt;T&gt;</td><td>MutableSet&lt;T&gt;</td></tr><tr><td>List&lt;T&gt;</td><td>MutableList&lt;T&gt;</td><td>MutableList&lt;T&gt;</td></tr><tr><td>ListIterator&lt;T&gt;</td><td>ListIterator&lt;T&gt;</td><td>MutableListIterator&lt;T&gt;</td></tr><tr><td>Map&lt;K, V&gt;</td><td>Map&lt;K, V&gt;</td><td>MutableMap&lt;K, V&gt;</td></tr><tr><td>Map.Entry&lt;K, V&gt;</td><td>Map.Entry&lt;K, V&gt;</td><td>MutableMap.MutableEntry&lt;K, V&gt;</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Kotlin code is fully compatible with Java code. The existing Java code can be easily called form Kotlin code and Kotlin code is also called from Java code in normal way. Calling Java code from Kotlin Calling Java void method form Kotlin file While calling a java code from Kotlin whose return types is&nbsp;void, it [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/898"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=898"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/898/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=898"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=898"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=898"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 900,
    "date": "2020-08-25T07:04:23",
    "date_gmt": "2020-08-25T07:04:23",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=900"
    },
    "modified": "2020-08-25T07:04:23",
    "modified_gmt": "2020-08-25T07:04:23",
    "slug": "java-interoperability-calling-kotlin-code-from-java",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/java-interoperability-calling-kotlin-code-from-java/",
    "title": {
      "rendered": "Java Interoperability"
    },
    "content": {
      "rendered": "\n<p>As Kotlin is completely compatible with Java language. It means the application written in Java code can be easily called from Kotlin. In the similar way ,Kotlin code is also called from Java code.</p>\n\n\n\n<p>Before discussing how to call Kotlin code from Java code, let&#8217;s see how Kotlin file internally looks like.</p>\n\n\n\n<h2>How a simple Kotlin program internally looks like.</h2>\n\n\n\n<p>Let&#8217;s create a simple main function in a&nbsp;<strong>MyKotlin.kt</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n//code  \n}  \nfun area(l: Int,b: Int):Int{  \n    return l*b  \n}  </code></pre>\n\n\n\n<p>After compiling the above Kotlin file MyKotlin.kt which internally looks like:</p>\n\n\n\n<p>The Kotlin compiler internally adds a wrapper class with naming convention&nbsp;<em>MyKotlinKt</em>. The Kotlin file&nbsp;<strong>MyKotlin.kt</strong>&nbsp;is converted into&nbsp;<strong>MyKotlinKt</strong>&nbsp;and it is public in default. The default modifier of high level function is&nbsp;<strong>public</strong>&nbsp;and function is converted into&nbsp;<strong>static</strong>&nbsp;as default. As the return type is Unit in&nbsp;<strong>MyKotlin.kt</strong>, it is converted into void in&nbsp;<strong>MyKotlinKt</strong>.</p>\n\n\n\n<h2>Calling Kotlin code from Java code</h2>\n\n\n\n<p><strong>MyKotlin.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n//code  \n}  \nfun area(l: Int,b: Int):Int{  \n    return l*b  \n}</code></pre>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyJava {  \n    public static void main(String&#91;] args) {  \nint area = MyKotlinKt.area(4,5);  \nSystem.out.print(\"printing area inside Java class returning from Kotlin file: \"+area);  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>printing area inside Java class returning from Kotlin file: 20\n</code></pre>\n\n\n\n<h2>Java code calling Kotlin file present inside package</h2>\n\n\n\n<p>If we want to call the Kotlin code from Java class both present inside the different packages, this requires to import the package name with Kotlin file name inside Java class and calling the Kotlin code from Java class. Another way is to give full path as&nbsp;<em>packageName.KotlinFileKt.methodName()</em>.</p>\n\n\n\n<p><strong>MyKotlin.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package mykotlinpackage  \n  \nfun main(args: Array&lt;String>) {  \n  \n}  \nfun area(l: Int,b: Int):Int{  \n       return l*b  \n} </code></pre>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package myjavapackage;  \nimport mykotlinpackage.MyKotlinFileKt;  \n  \npublic class MyJavaClass {  \n    public static void main(String&#91;] args){  \nint area = MyKotlinKt.area(4,5);  \nSystem.out.println(\"printing area inside Java class returning from Kotlin file: \"+area);  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<pre class=\"wp-block-code\"><code>printing area inside Java class returning from Kotlin file: 20\n</code></pre>\n</div></div>\n\n\n\n<h2>Changing the Kotlin file name using annotation @JvmName</h2>\n\n\n\n<p>A Kotlin file name can be changed as wrapper class name using @JvmName annotation.</p>\n\n\n\n<p><strong>MyKotlin.kt</strong></p>\n\n\n\n<p>Write a Kotlin code and place annotation @file: JvmName(&#8220;MyKotlinFileName&#8221;) at the top. After compiling Kotlin code, the file name is changed into the name provided inside annotation (in my&nbsp;<em>caseMyKotlinFileName</em>). While accessing the code of&nbsp;<em>MyKotlin.kt</em>&nbsp;we require to use the file name as&nbsp;<em>MyKotlinFileName</em>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@file: JvmName(\"MyKotlinFileName\")  \npackage mykotlinpackage  \n  \nfun main(args: Array&lt;String>) {  \n  \n}  \nfun area(l: Int,b: Int):Int{  \n       return l*b  \n} </code></pre>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package myjavapackage;  \nimport mykotlinpackage.MyKotlinFileName;  \n  \npublic class MyJavaClass {  \n    public static void main(String&#91;] args){  \nint area = MyKotlinFileName.area(4,5);  \nSystem.out.println(\"printing area inside Java class returning from Kotlin file: \"+area);  \n    }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>printing area inside Java class returning from Kotlin file: 20\n</code></pre>\n\n\n\n<h2>Calling method of multiple file having same generated Java class name using@JvmMultifileClass</h2>\n\n\n\n<p>If the Kotlin&#8217;s multiple files having same generated Java file name using&nbsp;<em>@JvmName</em>&nbsp;annotation, normally give error while calling from Java file. However, Kotlin compiler generates single Java façade class which contains generated Java file and all the declarations of the files which have same names. To active this generation façade, we use&nbsp;<em>@JvmMultifileClass</em>&nbsp;annotation in all the files.</p>\n\n\n\n<p><strong>MyKotlin1.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>@file: JvmName(\"MyKotlinFileName\")  \n@file:JvmMultifileClass  \npackage mykotlinpackage  \n  \nfun main(args: Array&lt;String>) {  \n  \n}  \nfun area(l: Int,b: Int):Int{  \n    return l*b  \n}  </code></pre>\n\n\n\n<p><strong>MyKotlin2.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>@file: JvmName(\"MyKotlinFileName\")  \n@file:JvmMultifileClass  \npackage mykotlinpackage  \n  \n  \nfun volume(l: Int,b: Int,h: Int):Int{  \n    return l*b*h  \n}</code></pre>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package myjavapackage;  \nimport mykotlinpackage.MyKotlinFileName;  \n  \npublic class MyJavaClass {  \n    public static void main(String&#91;] args){  \nint area = MyKotlinFileName.area(4,5);  \nSystem.out.println(\"printing area inside Java class returning from Kotlin file: \"+area);  \nint vol = MyKotlinFileName.volume(4,5,6);  \nSystem.out.println(\"printing volume inside Java class returning from Kotlin file: \"+vol);  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>printing area inside Java class returning from Kotlin file: 20\nprinting volume inside Java class returning from Kotlin file: 120\n</code></pre>\n\n\n\n<h2>Kotlin property access throughconst modifier</h2>\n\n\n\n<p>The Kotlin properties which are annotated with&nbsp;<strong>const</strong>&nbsp;modifier in the top level as well as in class are converted into&nbsp;<em>static</em>&nbsp;fields in Java. These properties are access from Java file as static properties called. For example:</p>\n\n\n\n<p><strong>MyKotlin.kt</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>constval MAX = 239  \nobject Obj {  \nconstval CONST = 1  \n}  \nclass C {  \n    companion object {  \nconstval VERSION = 9  \n    }  \n}</code></pre>\n\n\n\n<p><strong>MyJava.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MyJava {  \n    public static void main(String&#91;] args) {  \nint c = Obj.CONST;  \nint m = MyKotlinKt.MAX;  \nint v = C.VERSION;  \nSystem.out.println(\"const \"+c+\"\\nmax \"+m+\"\\nversion \"+v);  \n    }  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>const 1\nmax 239\nversion 9\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>As Kotlin is completely compatible with Java language. It means the application written in Java code can be easily called from Kotlin. In the similar way ,Kotlin code is also called from Java code. Before discussing how to call Kotlin code from Java code, let&#8217;s see how Kotlin file internally looks like. How a simple [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/900"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=900"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/900/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=900"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=900"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=900"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 902,
    "date": "2020-08-25T07:09:13",
    "date_gmt": "2020-08-25T07:09:13",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=902"
    },
    "modified": "2020-08-25T07:09:13",
    "modified_gmt": "2020-08-25T07:09:13",
    "slug": "kotlin-regex",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-regex/",
    "title": {
      "rendered": "Kotlin Regex"
    },
    "content": {
      "rendered": "\n<p>Regex is generally refers to regular expression which is used to search string or replace on regex object. To use it functionality we need to use&nbsp;<strong>Regex(pattern: String)</strong>&nbsp;class.&nbsp;<strong>Kotlin&#8217;sRegex</strong>&nbsp;class is found in&nbsp;<strong>kotlin.text.regex</strong>&nbsp;package.</p>\n\n\n\n<h2>Kotlin Regex Constructor</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Regex(pattern: String)</td><td>It creates a regular expression from the given string pattern.</td></tr><tr><td>Regex(pattern: String, option: RegexOption)</td><td>It creates a regular expression from the given string pattern and given single option.</td></tr><tr><td>Regex(pattern: String, options: Set&lt;RegexOption&gt;)</td><td>It creates a regular expression from the given string pattern and set of given options.</td></tr></tbody></table></figure>\n\n\n\n<h2>Regex Functions</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Functions</th><th>Descriptions</th></tr><tr><td>fun containsMatchIn(input: CharSequence): Boolean</td><td>It indicates that regular expression contains at least one input character</td></tr><tr><td>fun find(<br>input: CharSequence,<br>startIndex: Int = 0<br>): MatchResult?</td><td>It returns the first match of regular expression in the input character sequence, begins from given startIndex.</td></tr><tr><td>fun findAll(<br>input: CharSequence,<br>startIndex: Int = 0<br>): Sequence&lt;MatchResult&gt;</td><td>It returns all occurrences of regular expression in the input string, starts from the given startIndex.</td></tr><tr><td>funmatchEntire(input: CharSequence): MatchResult?</td><td>It is used to match complete input character from the pattern.</td></tr><tr><td>infix fun matches(input: CharSequence): Boolean</td><td>It indicates whether all input character sequence matches in regular expression.</td></tr><tr><td>fun replace(input: CharSequence, replacement: String): String</td><td>It replaces all the input character sequence of regular expression with given replacement string.</td></tr><tr><td>fun replaceFirst(<br>input: CharSequence,<br>replacement: String<br>): String</td><td>It replaces the first occurrence of regular expression in the given input string with given replacement string.</td></tr><tr><td>fun split(input: CharSequence, limit: Int = 0): List&lt;String&gt;</td><td>It splits the input character sequence of regular expression.</td></tr><tr><td>fun toPattern(): Pattern<br>fun toString(): String</td><td>It returns the regular expression in string.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example of Regex class checking contains of input pattern</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval regex = Regex(pattern = \"ko\")  \nval matched = regex.containsMatchIn(input = \"kotlin\")  \nprintln(matched)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n</code></pre>\n\n\n\n<p>The result of Regex function is based on matching regex pattern and the input string. Some function checks partial match while some checks full match.</p>\n\n\n\n<h3>Regex example of containsMatchIn()</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \nval regex = \"\"\"a(&#91;bc]+)d?\"\"\".toRegex()  \nval matched = regex.containsMatchIn(input = \"xabcdy\")  \nprintln(matched)  \n  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n</code></pre>\n\n\n\n<h3>Regex example of matches(input: CharSequence): Boolean</h3>\n\n\n\n<p>The matches(input: CharSequence): Booleanfunction of regex checksall input character sequence matches in regular expression.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \nval regex = \"\"\"a(&#91;bc]+)d?\"\"\".toRegex()  \nval matched1 = regex.matches(input = \"xabcdy\")  \nval matched2 = regex.matches(input = \"xabcdyabcd\")  \nval matched3 = regex.matches(input = \"abcd\")  \nprintln(matched1)  \nprintln(matched2)  \nprintln(matched3)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\nfalse\ntrue\n</code></pre>\n\n\n\n<h3>Regex example of matchEntire(input: CharSequence): MatchResult?</h3>\n\n\n\n<p>The matchEntire() function is used to match complete input character from the pattern.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \nval regex = Regex(\"abcd\")  \nval matchResult1 = regex.matchEntire(\"abcd\")?.value  \nval matchResult2 = regex.matchEntire(\"abcda\")?.value  \n  \nval matchResult3 = Regex(\"\"\"\\d+\"\"\").matchEntire(\"100\")?.value    \nval matchResult4 = Regex(\"\"\"\\d+\"\"\").matchEntire(\"100 dollars\")?.value  \n  \nprintln(matchResult1)  \nprintln(matchResult2)  \nprintln(matchResult3)  \nprintln(matchResult4)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>abcd\nnull\n100\nnull\n</code></pre>\n\n\n\n<h3>Regex example offind(input: CharSequence, startIndex: Int = 0): MatchResult?</h3>\n\n\n\n<p>The find function is used to find the input character sequence from regex object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \n  \nval emailParttern = Regex(\"\"\"\\w+@&#91;a-zA-Z_]+?\\.&#91;a-zA-Z]{2,6}\"\"\")  \nval email :String? = emailParttern.find(\"this is my email mymail@google.com\")?.value  \nprintln(email)  \nval phoneNumber :String? = Regex(pattern = \"\"\"\\d{3}-\\d{3}-\\d{4}\"\"\")  \n            .find(\"phone: 123-456-7890, e..\")?.value   \nprintln(phoneNumber)  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>mymail@google.com\n123-456-7890\n</code></pre>\n\n\n\n<h3>Regex example offindAll(input: CharSequence, startIndex: Int = 0): Sequence&lt;MatchResult&gt;</h3>\n\n\n\n<p>The findAll() function of regex returns sequence of match result on the basis of pattern provided.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval foundResults = Regex(\"\"\"\\d+\"\"\").findAll(\"ab12cd34ef 56gh7 8i\")  \nval result = StringBuilder()  \n    for (findText in foundResults) {  \nresult.append(findText.value + \" \")  \n    }  \nprintln(result)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>12 34 56 7 8\n</code></pre>\n\n\n\n<h3>Regex example ofreplace(input: CharSequence, replacement: String): String</h3>\n\n\n\n<p>Regex replace() function replaces the all the matching pattern from input character sequence with specified replacement string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval replaceWith = Regex(\"beautiful\")  \nval resultString = replaceWith.replace(\"this picture is beautiful\",\"awesome\")  \nprintln(resultString)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>this picture is awesome\n</code></pre>\n\n\n\n<h3>Regex example ofreplaceFirst(input: CharSequence, replacement: String): String</h3>\n\n\n\n<p>Regex replaceFirst() function replaces the first occurrence of matching pattern from input character sequence with specified replacement string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval replaceWith = Regex(\"beautiful\")  \nval resultString = replaceWith.replaceFirst(\"nature is beautiful, beautiful is nature\",\"awesome\")  \nprintln(resultString)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>nature is awesome, beautiful is nature\n</code></pre>\n\n\n\n<h3>Regex example ofsplit(input: CharSequence, limit: Int = 0): List&lt;String&gt;</h3>\n\n\n\n<p>The regex split() function splits input character sequence according to pattern provided. This splits value are returned in List.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fun main(args: Array&lt;String>){  \nval splitedValue = Regex(\"\"\"\\d+\"\"\").split(\"ab12cd34ef\")  \nval nonsplited= Regex(\"\"\"\\d+\"\"\").split(\"nothing match to split\" )  \nprintln(splitedValue)  \nprintln(nonsplited)  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;ab, cd, ef]\n&#91;nothing match to split]</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Regex is generally refers to regular expression which is used to search string or replace on regex object. To use it functionality we need to use&nbsp;Regex(pattern: String)&nbsp;class.&nbsp;Kotlin&#8217;sRegex&nbsp;class is found in&nbsp;kotlin.text.regex&nbsp;package. Kotlin Regex Constructor Regex(pattern: String) It creates a regular expression from the given string pattern. Regex(pattern: String, option: RegexOption) It creates a regular expression from [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/902"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=902"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/902/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=902"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=902"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=902"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 904,
    "date": "2020-08-25T07:10:06",
    "date_gmt": "2020-08-25T07:10:06",
    "guid": {
      "rendered": "http://androiddev.foobrdigital.com/?p=904"
    },
    "modified": "2020-08-25T07:10:06",
    "modified_gmt": "2020-08-25T07:10:06",
    "slug": "kotlin-regex-pattern",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/kotlin-regex-pattern/",
    "title": {
      "rendered": "Regex Pattern"
    },
    "content": {
      "rendered": "\n<p>Regex uses several symbolic notation (patterns) in its function. Some commonly uses patterns are given below:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Symbol</th><th>Description</th></tr><tr><td>x|y</td><td>Matches either x or y</td></tr><tr><td>xy</td><td>Matches x followed by y</td></tr><tr><td>[xyz]</td><td>Matches either x,y,z</td></tr><tr><td>[x-z]</td><td>Matches any character from x to z</td></tr><tr><td>[^x-z]</td><td>&#8216;^&#8217; as first character negates the pattern. This matches anything outside the range x-z</td></tr><tr><td>^xyz</td><td>Matches expression xyz at beginning of line</td></tr><tr><td>xyz$</td><td>Matches expression xyz at end of line</td></tr><tr><td>.</td><td>Matches any single character</td></tr></tbody></table></figure>\n\n\n\n<h2>Regex Meta Symbols</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Symbol</th><th>Description</th></tr><tr><td>\\d</td><td>Matches digits ([0-9])</td></tr><tr><td>\\D</td><td>Matches non-digits</td></tr><tr><td>\\w</td><td>Matches word characters</td></tr><tr><td>\\W</td><td>Matches non-word characters</td></tr><tr><td>\\s</td><td>Matches whitespaces [\\t\\r\\f\\n]</td></tr><tr><td>\\S</td><td>Matches non-whitespaces</td></tr><tr><td>\\b</td><td>Matches word boundary when outside of a bracket. Matches backslash when placed in a bracket</td></tr><tr><td>\\B</td><td>Matches non-word boundary</td></tr><tr><td>\\A</td><td>Matches beginning of string</td></tr><tr><td>\\Z</td><td>Matches end of String</td></tr></tbody></table></figure>\n\n\n\n<h2>Regex Quantifiers Patterns</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Symbol</th><th>Description</th></tr><tr><td>abcd?</td><td>Matches 0 or 1 occurrence of expression abcd</td></tr><tr><td>abcd*</td><td>Matches 0 or more occurrences of expression abcd</td></tr><tr><td>abcd+</td><td>Matches 1 or more occurrences of expression abcd</td></tr><tr><td>abcd{x}</td><td>Matches exact x occurrences of expression abcd</td></tr><tr><td>abcd{x,}</td><td>Matches x or more occurrences of expression abcd</td></tr><tr><td>abcd{x,y}</td><td>Matches x to y occurrences of expression abcd</td></tr></tbody></table></figure>\n\n\n\n<h2>Regex Sample Patterns</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Pattern</th><th>Description</th></tr><tr><td>([^\\s]+(?=\\.(jpg|gif|png))\\.\\2)</td><td>Matches jpg,gif or png images.</td></tr><tr><td>([A-Za-z0-9-]+)</td><td>Matches latter, number and hyphens.</td></tr><tr><td>(^[1-9]{1}$|^[1-4]{1}[0-9]{1}$|^100$)</td><td>Matches any number from 1 to 100 inclusive.</td></tr><tr><td>(#?([A-Fa-f0-9]){3}(([A-Fa-f0-9]){3})?)</td><td>Matches valid hexa decimal color code.</td></tr><tr><td>((?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,15})</td><td>Matches 8 to 15 character string with at least one upper case, one lower case and one digit.</td></tr><tr><td>(\\w+@[a-zA-Z_]+?\\.[a-zA-Z]{2,6})</td><td>Matches email address.</td></tr><tr><td>(\\&lt;(/?[^\\&gt;]+)\\&gt;)</td><td>Matches HTML tags.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Regex uses several symbolic notation (patterns) in its function. Some commonly uses patterns are given below: Symbol Description x|y Matches either x or y xy Matches x followed by y [xyz] Matches either x,y,z [x-z] Matches any character from x to z [^x-z] &#8216;^&#8217; as first character negates the pattern. This matches anything outside the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      24
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/904"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=904"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/904/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=904"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=904"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=904"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]