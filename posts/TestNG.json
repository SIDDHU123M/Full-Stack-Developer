[
    {
        "id": 1480,
        "date": "2021-02-10T05:47:02",
        "date_gmt": "2021-02-10T05:47:02",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1480"
        },
        "modified": "2021-02-10T05:47:02",
        "modified_gmt": "2021-02-10T05:47:02",
        "slug": "testng-overview",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-overview\/",
        "title": {
            "rendered": "TestNG &#8211; Overview"
        },
        "content": {
            "rendered": "\n<p>Testing is the process of checking the functionality of an application to ensure it works as per requirements. Unit testing comes into picture at the developer level where adequate measures are taken to test every single entity (class or method) to ensure the final product meets the requirements.<\/p>\n\n\n\n<p>JUnit has driven developers to understand the usefulness of tests, especially of unit tests, when compared to any other testing framework. Leveraging a rather simple, pragmatic, and strict architecture, JUnit has been able to &#8220;infect&#8221; great number of developers. Do take a look at our tutorial on JUnit to have a good understanding of its features. JUnit, at the same time, has some shortcomings as well, which are listed below \u2212<\/p>\n\n\n\n<ul><li>Initially designed to enable unit testing only, now used for all kinds of testing.<\/li><li>Cannot do dependency testing.<\/li><li>Poor configuration control (setUp\/tearDown).<\/li><li>Intrusive (forces you to extend classes and name your methods a certain way).<\/li><li>Static programming model (forces you to recompile unnecessarily).<\/li><li>The management of different suites of tests in complex projects can be very tricky.<\/li><\/ul>\n\n\n\n<h2>What is TestNG?<\/h2>\n\n\n\n<p>Definition of TestNG as per its documentation is as follows \u2212<\/p>\n\n\n\n<p><em>TestNG is a testing framework inspired from JUnit and NUnit, but introducing some new functionalities that make it more powerful and easier to use.<\/em><\/p>\n\n\n\n<p>TestNG is an open source automated testing framework; where&nbsp;<strong>NG<\/strong>&nbsp;means&nbsp;<strong>N<\/strong>ext<strong>G<\/strong>eneration. TestNG is similar to JUnit (especially JUnit 4), but it is not a JUnit extension. It is inspired by JUnit. It is designed to be better than JUnit, especially when testing integrated classes. The creator of TestNG is&nbsp;<em>Cedric Beust<\/em>.<\/p>\n\n\n\n<p>Eliminating most of the limitations of the older framework, TestNG gives the developer the ability to write more flexible and powerful tests. As it heavily borrows from Java Annotations (introduced with JDK 5.0) to define tests, it can also show you how to use this new feature of the Java language in a real production environment.<\/p>\n\n\n\n<h2>TestNG Features<\/h2>\n\n\n\n<ul><li>Supports annotations.<\/li><li>TestNG uses more Java and OO features.<\/li><li>Supports testing integrated classes (e.g., by default, no need to create a new test class instance for every test method).<\/li><li>Separates compile-time test code from run-time configuration\/data info.<\/li><li>Flexible runtime configuration.<\/li><li>Introduces \u2018test groups\u2019. Once you have compiled your tests, you can just ask TestNG to run all the &#8220;front-end&#8221; tests, or &#8220;fast&#8221;, &#8220;slow&#8221;, &#8220;database&#8221; tests, etc.<\/li><li>Supports Dependent test methods, parallel testing, load testing, and partial failure.<\/li><li>Flexible plug-in API.<\/li><li>Support for multi threaded testing.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Testing is the process of checking the functionality of an application to ensure it works as per requirements. Unit testing comes into picture at the developer level where adequate measures are taken to test every single entity (class or method) to ensure the final product meets the requirements. JUnit has driven developers to understand the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1480"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1480"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1480\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1481,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1480\/revisions\/1481"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1480"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1480"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1480"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1482,
        "date": "2021-02-10T05:48:39",
        "date_gmt": "2021-02-10T05:48:39",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1482"
        },
        "modified": "2021-02-10T05:48:39",
        "modified_gmt": "2021-02-10T05:48:39",
        "slug": "testng-environment",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-environment\/",
        "title": {
            "rendered": "TestNG &#8211; Environment"
        },
        "content": {
            "rendered": "\n<p>TestNG is a framework for Java, so the very first requirement is to have JDK installed in your machine.<\/p>\n\n\n\n<h2>System Requirement<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>JDK<\/td><td>1.5 or above.<\/td><\/tr><tr><td>Memory<\/td><td>No minimum requirement.<\/td><\/tr><tr><td>Disk Space<\/td><td>No minimum requirement.<\/td><\/tr><tr><td>Operating System<\/td><td>No minimum requirement.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 1 &#8211; Verify Java Installation in Your Machine<\/h2>\n\n\n\n<p>Open the console and execute a java command based on the operating system you have installed on your system.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Task<\/th><th>Command<\/th><\/tr><tr><td>Windows<\/td><td>Open Command Console<\/td><td>c:\\&gt; java -version<\/td><\/tr><tr><td>Linux<\/td><td>Open Command Terminal<\/td><td>$ java -version<\/td><\/tr><tr><td>Mac<\/td><td>Open Terminal<\/td><td>machine:~ joseph$ java -version<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let&#8217;s verify the output for all the operating systems \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>java version &#8220;1.7.0_25&#8243;Java(TM) SE Runtime Environment (build 1.7.0_25-b15)Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)<\/td><\/tr><tr><td>Linux<\/td><td>java version &#8220;1.7.0_25&#8243;Java(TM) SE Runtime Environment (build 1.7.0_25-b15)Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)<\/td><\/tr><tr><td>Mac<\/td><td>java version &#8220;1.7.0_25&#8243;Java(TM) SE Runtime Environment (build 1.7.0_25-b15)Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>If you do not have Java, install the Java Software Development Kit (SDK) from&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html\">https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html<\/a>. We are assuming Java 1.7.0_25 as the installed version for this tutorial.<\/p>\n\n\n\n<h2>Step 2: Set JAVA Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>JAVA_HOME<\/strong>&nbsp;environment variable to point to the base directory location, where Java is installed on your machine. For example,<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable JAVA_HOME to C:\\Program Files\\Java\\jdk1.7.0_25.<\/td><\/tr><tr><td>Linux<\/td><td>Export JAVA_HOME=\/usr\/local\/java-current.<\/td><\/tr><tr><td>Mac<\/td><td>Export JAVA_HOME=\/Library\/Java\/Home.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append Java compiler location to System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Append the string C:\\Program Files\\Java\\jdk1.7.0_25\\bin at the end of the system variable, Path.<\/td><\/tr><tr><td>Linux<\/td><td>Export PATH=$PATH:$JAVA_HOME\/bin\/<\/td><\/tr><tr><td>Mac<\/td><td>Not required<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Verify Java Installation using the command&nbsp;<strong>java -version<\/strong>&nbsp;as explained above.<\/p>\n\n\n\n<h2>Step 3: Download TestNG Archive<\/h2>\n\n\n\n<p>Download the latest version of TestNG jar file from&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http:\/\/testng.org\/doc\/download.html\">http:\/\/www.testng.org<\/a>. At the time of writing this tutorial, we have downloaded&nbsp;<em>testng-6.8.jar<\/em>&nbsp;and copied it onto C:\\&gt; TestNG folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>testng-6.8.jar<\/td><\/tr><tr><td>Linux<\/td><td>testng-6.8.jar<\/td><\/tr><tr><td>Mac<\/td><td>testng-6.8.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 4: Set TestNG Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>TESTNG_HOME<\/strong>&nbsp;environment variable to point to the base directory location, where TestNG jar is stored on your machine. The following table shows how to set the environment variable in Windows, Linux, and Mac, assuming that we&#8217;ve stored testng-6.8.jar at the location C:\\&gt;TestNG.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Description<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable TESTNG_HOME to C:\\TESTNG.<\/td><\/tr><tr><td>Linux<\/td><td>Export TESTNG_HOME=\/usr\/local\/TESTNG<\/td><\/tr><tr><td>Mac<\/td><td>Export TESTNG_HOME=\/Library\/TESTNG<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 5: Set CLASSPATH Variable<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>CLASSPATH<\/strong>&nbsp;environment variable to point to the TestNG jar location.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Description<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable CLASSPATH to %CLASSPATH%;%TESTNG_HOME%\\testng-6.8.jar.<\/td><\/tr><tr><td>Linux<\/td><td>Export CLASSPATH=$CLASSPATH:$TESTNG_HOME\/testng-6.8.jar.<\/td><\/tr><tr><td>Mac<\/td><td>Export CLASSPATH=$CLASSPATH:$TESTNG_HOME\/testng-6.8.jar.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 6: Test TestNG Setup<\/h2>\n\n\n\n<p>Create a java class file named TestNGSimpleTest at&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.annotations.Test;\r\nimport static org.testng.Assert.assertEquals;\r\n\r\npublic class TestNGSimpleTest {\r\n   @Test\r\n   public void testAdd() {\r\n      String str = \"TestNG is working fine\";\r\n      AssertEquals(\"TestNG is working fine\", str);\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>TestNG can be invoked in several different ways \u2212<\/p>\n\n\n\n<ul><li>With a testng.xml file.<\/li><li>With ANT.<\/li><li>From the command line.<\/li><\/ul>\n\n\n\n<p>Let us invoke using the testng.xml file. Create an xml file with the name testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute Test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"TestNGSimpleTest\"\/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite>\t<\/code><\/pre>\n\n\n\n<h2>Step 7: Verify the Result<\/h2>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">C:\\TestNG_WORKSPACE&gt;javac TestNGSimpleTest.java\n<\/pre>\n\n\n\n<p>Now, invoke the testng.xml to see the result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">C:\\TestNG_WORKSPACE&gt;java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\n<\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">===============================================\nSuite1\nTotal tests run: 1, Failures: 0, Skips: 0\n===============================================<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>TestNG is a framework for Java, so the very first requirement is to have JDK installed in your machine. System Requirement JDK 1.5 or above. Memory No minimum requirement. Disk Space No minimum requirement. Operating System No minimum requirement. Step 1 &#8211; Verify Java Installation in Your Machine Open the console and execute a java [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1482"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1482"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1482\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1483,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1482\/revisions\/1483"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1482"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1482"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1482"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1484,
        "date": "2021-02-10T05:50:53",
        "date_gmt": "2021-02-10T05:50:53",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1484"
        },
        "modified": "2021-02-10T05:50:53",
        "modified_gmt": "2021-02-10T05:50:53",
        "slug": "testng-writing-tests",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-writing-tests\/",
        "title": {
            "rendered": "TestNG &#8211; Writing Tests"
        },
        "content": {
            "rendered": "\n<p>Writing a test in TestNG basically involves the following steps \u2212<\/p>\n\n\n\n<ul><li>Write the business logic of your test and insert TestNG annotations in your code.<\/li><li>Add the information about your test (e.g. the class name, the groups you wish to run, etc.) in a testng.xml file or in build.xml.<\/li><li>Run TestNG.<\/li><\/ul>\n\n\n\n<p>Here, we will see one complete example of TestNG testing using POJO class, Business logic class and a test xml, which will be run by TestNG.<\/p>\n\n\n\n<p>Create&nbsp;<strong>EmployeeDetails.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>, which is a POJO class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EmployeeDetails {\r\n\r\n   private String name;\r\n   private double monthlySalary;\r\n   private int age;\r\n   \r\n   \/\/ @return the name\r\n\r\n   public String getName() {\r\n      return name;\r\n   }\r\n   \r\n   \/\/ @param name the name to set\r\n   \r\n   public void setName(String name) {\r\n      this.name = name;\r\n   }\r\n   \r\n   \/\/ @return the monthlySalary\r\n\r\n   public double getMonthlySalary() {\r\n      return monthlySalary;\r\n   }\r\n   \r\n   \/\/ @param monthlySalary the monthlySalary to set\r\n   \r\n   public void setMonthlySalary(double monthlySalary) {\r\n      this.monthlySalary = monthlySalary;\r\n   }\r\n   \r\n   \/\/ @return the age\r\n \r\n   public int getAge() {\r\n      return age;\r\n   }\r\n   \r\n   \/\/ @param age the age to set\r\n \r\n   public void setAge(int age) {\r\n      this.age = age;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p><strong>EmployeeDetails<\/strong>&nbsp;class is used to \u2212<\/p>\n\n\n\n<ul><li>get\/set the value of employee&#8217;s name.<\/li><li>get\/set the value of employee&#8217;s monthly salary.<\/li><li>get\/set the value of employee&#8217;s age.<\/li><\/ul>\n\n\n\n<p>Create an&nbsp;<strong>EmpBusinessLogic.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>, which contains business logic.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EmpBusinessLogic {\r\n\r\n   \/\/ Calculate the yearly salary of employee\r\n   public double calculateYearlySalary(EmployeeDetails employeeDetails) {\r\n      double yearlySalary = 0;\r\n      yearlySalary = employeeDetails.getMonthlySalary() * 12;\r\n      return yearlySalary;\r\n   }\r\n\t\r\n   \/\/ Calculate the appraisal amount of employee\r\n   public double calculateAppraisal(EmployeeDetails employeeDetails) {\r\n   \r\n      double appraisal = 0;\r\n      \r\n      if(employeeDetails.getMonthlySalary() &lt; 10000) {\r\n         appraisal = 500;\r\n         \r\n      } else {\r\n         appraisal = 1000;\r\n      }\r\n      \r\n      return appraisal;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p><strong>EmpBusinessLogic<\/strong>&nbsp;class is used for calculating \u2212<\/p>\n\n\n\n<ul><li>the yearly salary of employee.<\/li><li>the appraisal amount of employee.<\/li><\/ul>\n\n\n\n<p>Now, let&#8217;s create a TestNG class called&nbsp;<strong>TestEmployeeDetails.java<\/strong>&nbsp;in C:\\&gt;TestNG_WORKSPACE. A TestNG class is a Java class that contains at least one TestNG annotation. This class contains test cases to be tested. A TestNG test can be configured by @BeforeXXX and @AfterXXX annotations (we will see this in the chapter&nbsp;<a href=\"https:\/\/www.tutorialspoint.com\/testng\/testng_execution_procedure.htm\">TestNG &#8211; Execution Procedure<\/a>), which allows to perform some Java logic before and after a certain point.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class TestEmployeeDetails {\r\n   EmpBusinessLogic empBusinessLogic = new EmpBusinessLogic();\r\n   EmployeeDetails employee = new EmployeeDetails();\r\n\r\n   @Test\r\n   public void testCalculateAppriasal() {\r\n   \r\n      employee.setName(\"Rajeev\");\r\n      employee.setAge(25);\r\n      employee.setMonthlySalary(8000);\r\n      \r\n      double appraisal = empBusinessLogic.calculateAppraisal(employee);\r\n      Assert.assertEquals(500, appraisal, 0.0, \"500\");\r\n   }\r\n\r\n   \/\/ Test to check yearly salary\r\n   @Test\r\n   public void testCalculateYearlySalary() {\r\n   \r\n      employee.setName(\"Rajeev\");\r\n      employee.setAge(25);\r\n      employee.setMonthlySalary(8000);\r\n      \r\n      double salary = empBusinessLogic.calculateYearlySalary(employee);\r\n      Assert.assertEquals(96000, salary, 0.0, \"8000\");\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p><strong>TestEmployeeDetails<\/strong>&nbsp;class is used for testing the methods of&nbsp;<strong>EmpBusinessLogic<\/strong>&nbsp;class. It does the following \u2212<\/p>\n\n\n\n<ul><li>Tests the yearly salary of the employee.<\/li><li>Tests the appraisal amount of the employee.<\/li><\/ul>\n\n\n\n<p>Before you can run the tests, you must configure TestNG using a special XML file, conventionally named testng.xml. The syntax for this file is very simple, and its contents are as shown below. Create this file in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"TestEmployeeDetails\"\/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>Details of the above file are as follows \u2212<\/p>\n\n\n\n<ul><li>A suite is represented by one XML file. It can contain one or more tests and is defined by the &lt;suite&gt; tag.<\/li><li>Tag &lt;test&gt; represents one test and can contain one or more TestNG classes.<\/li><li>&lt;class&gt; tag represents a TestNG class. It is a Java class that contains at least one TestNG annotation. It can contain one or more test methods.<\/li><\/ul>\n\n\n\n<p>Compile the Test case classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac EmployeeDetails.java EmpBusinessLogic.java TestEmployeeDetails.java\r\n<\/code><\/pre>\n\n\n\n<p>Now TestNG with the following command \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml<\/code><\/pre>\n\n\n\n<p>If all has been done correctly, you should see the results of your tests in the console. Furthermore, TestNG creates a very nice HTML report in a folder called&nbsp;<strong>test-output<\/strong>&nbsp;that is automatically created in the current directory. If you open it and load index.html, you will see a page similar to the one in the image below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/testng\/images\/writing_tests.jpg\" alt=\"Writing Tests\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Writing a test in TestNG basically involves the following steps \u2212 Write the business logic of your test and insert TestNG annotations in your code. Add the information about your test (e.g. the class name, the groups you wish to run, etc.) in a testng.xml file or in build.xml. Run TestNG. Here, we will see [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1484"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1484"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1484\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1485,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1484\/revisions\/1485"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1484"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1484"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1484"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1486,
        "date": "2021-02-10T05:51:38",
        "date_gmt": "2021-02-10T05:51:38",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1486"
        },
        "modified": "2021-02-10T05:51:38",
        "modified_gmt": "2021-02-10T05:51:38",
        "slug": "testng-basic-annotations",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-basic-annotations\/",
        "title": {
            "rendered": "TestNG &#8211; Basic Annotations"
        },
        "content": {
            "rendered": "\n<p>The traditional way to indicate test methods in JUnit 3 is by prefixing their names with test. This is a very effective method for tagging certain methods in a class as having a special meaning, but the naming doesn\u2019t scale very well (what if we want to add more tags for different frameworks?) and is rather inflexible (what if we want to pass additional parameters to the testing framework?).<\/p>\n\n\n\n<p>Annotations were formally added to the Java language in JDK 5, and TestNG made the choice to use annotations to annotate test classes.<\/p>\n\n\n\n<p>Here is the list of annotations that TestNG supports \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Annotation &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>@BeforeSuite<\/strong>The annotated method will be run only once before all tests in this suite have run.<\/td><\/tr><tr><td>2<\/td><td><strong>@AfterSuite<\/strong>The annotated method will be run only once after all tests in this suite have run.<\/td><\/tr><tr><td>3<\/td><td><strong>@BeforeClass<\/strong>The annotated method will be run only once before the first test method in the current class is invoked.<\/td><\/tr><tr><td>4<\/td><td><strong>@AfterClass<\/strong>The annotated method will be run only once after all the test methods in the current class have run.<\/td><\/tr><tr><td>5<\/td><td><strong>@BeforeTest<\/strong>The annotated method will be run before any test method belonging to the classes inside the &lt;test&gt; tag is run.<\/td><\/tr><tr><td>6<\/td><td><strong>@AfterTest<\/strong>The annotated method will be run after all the test methods belonging to the classes inside the &lt;test&gt; tag have run.<\/td><\/tr><tr><td>7<\/td><td><strong>@BeforeGroups<\/strong>The list of groups that this configuration method will run before. This method is guaranteed to run shortly before the first test method that belongs to any of these groups is invoked.<\/td><\/tr><tr><td>8<\/td><td><strong>@AfterGroups<\/strong>The list of groups that this configuration method will run after. This method is guaranteed to run shortly after the last test method that belongs to any of these groups is invoked.<\/td><\/tr><tr><td>9<\/td><td><strong>@BeforeMethod<\/strong>The annotated method will be run before each test method.<\/td><\/tr><tr><td>10<\/td><td><strong>@AfterMethod<\/strong>The annotated method will be run after each test method.<\/td><\/tr><tr><td>11<\/td><td><strong>@DataProvider<\/strong>Marks a method as supplying data for a test method. The annotated method must return an Object[ ][ ], where each Object[ ] can be assigned the parameter list of the test method. The @Test method that wants to receive data from this DataProvider needs to use a dataProvider name equals to the name of this annotation.<\/td><\/tr><tr><td>12<\/td><td><strong>@Factory<\/strong>Marks a method as a factory that returns objects that will be used by TestNG as Test classes. The method must return Object[ ].<\/td><\/tr><tr><td>13<\/td><td><strong>@Listeners<\/strong>Defines listeners on a test class.<\/td><\/tr><tr><td>14<\/td><td><strong>@Parameters<\/strong>Describes how to pass parameters to a @Test method.<\/td><\/tr><tr><td>15<\/td><td><strong>@Test<\/strong>Marks a class or a method as a part of the test.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Benefits of Using Annotations<\/h2>\n\n\n\n<p>Following are some of the benefits of using annotations \u2212<\/p>\n\n\n\n<ul><li>TestNG identifies the methods it is interested in, by looking up annotations. Hence, method names are not restricted to any pattern or format.<\/li><li>We can pass additional parameters to annotations.<\/li><li>Annotations are strongly typed, so the compiler will flag any mistakes right away.<\/li><li>Test classes no longer need to extend anything (such as TestCase, for JUnit 3).<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The traditional way to indicate test methods in JUnit 3 is by prefixing their names with test. This is a very effective method for tagging certain methods in a class as having a special meaning, but the naming doesn\u2019t scale very well (what if we want to add more tags for different frameworks?) and is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1486"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1486"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1486\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1487,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1486\/revisions\/1487"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1486"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1486"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1486"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1488,
        "date": "2021-02-10T05:53:20",
        "date_gmt": "2021-02-10T05:53:20",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1488"
        },
        "modified": "2021-02-10T05:53:20",
        "modified_gmt": "2021-02-10T05:53:20",
        "slug": "testng-execution-procedure",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-execution-procedure\/",
        "title": {
            "rendered": "TestNG &#8211; Execution Procedure"
        },
        "content": {
            "rendered": "\n<p>This chapter explains the execution procedure of methods in TestNG. It explains the order of the methods called. Here is the execution procedure of the TestNG test API methods with an example.<\/p>\n\n\n\n<p>Create a java class file name&nbsp;<strong>TestngAnnotation.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to test annotations.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.annotations.Test;\r\nimport org.testng.annotations.BeforeMethod;\r\nimport org.testng.annotations.AfterMethod;\r\nimport org.testng.annotations.BeforeClass;\r\nimport org.testng.annotations.AfterClass;\r\nimport org.testng.annotations.BeforeTest;\r\nimport org.testng.annotations.AfterTest;\r\nimport org.testng.annotations.BeforeSuite;\r\nimport org.testng.annotations.AfterSuite;\r\n\r\npublic class TestngAnnotation {\r\n   \/\/ test case 1\r\n   @Test\r\n   public void testCase1() {\r\n      System.out.println(\"in test case 1\");\r\n   }\r\n\r\n   \/\/ test case 2\r\n   @Test\r\n   public void testCase2() {\r\n      System.out.println(\"in test case 2\");\r\n   }\r\n\r\n   @BeforeMethod\r\n   public void beforeMethod() {\r\n      System.out.println(\"in beforeMethod\");\r\n   }\r\n\r\n   @AfterMethod\r\n   public void afterMethod() {\r\n      System.out.println(\"in afterMethod\");\r\n   }\r\n\r\n   @BeforeClass\r\n   public void beforeClass() {\r\n      System.out.println(\"in beforeClass\");\r\n   }\r\n\r\n   @AfterClass\r\n   public void afterClass() {\r\n      System.out.println(\"in afterClass\");\r\n   }\r\n\r\n   @BeforeTest\r\n   public void beforeTest() {\r\n      System.out.println(\"in beforeTest\");\r\n   }\r\n\r\n   @AfterTest\r\n   public void afterTest() {\r\n      System.out.println(\"in afterTest\");\r\n   }\r\n\r\n   @BeforeSuite\r\n   public void beforeSuite() {\r\n      System.out.println(\"in beforeSuite\");\r\n   }\r\n\r\n   @AfterSuite\r\n   public void afterSuite() {\r\n      System.out.println(\"in afterSuite\");\r\n   }\r\n\r\n}<\/code><\/pre>\n\n\n\n<p>Next, let&#8217;s create the file&nbsp;<strong>testng.xml<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute annotations.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"TestngAnnotation\"\/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>Compile the Test case class using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac TestngAnnotation.java<\/code><\/pre>\n\n\n\n<p>Now, run the testng.xml, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java org.testng.TestNG testng.xml<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">in beforeSuite\nin beforeTest\nin beforeClass\nin beforeMethod\nin test case 1\nin afterMethod\nin beforeMethod\nin test case 2\nin afterMethod\nin afterClass\nin afterTest\nin afterSuite\n\n===============================================\nSuite\nTotal tests run: 2, Failures: 0, Skips: 0\n===============================================\n<\/pre>\n\n\n\n<p>Based on the above output, the execution procedure is as follows \u2212<\/p>\n\n\n\n<ul><li>First of all, beforeSuite() method is executed only once.<\/li><li>Lastly, the afterSuite() method executes only once.<\/li><li>Even the methods beforeTest(), beforeClass(), afterClass(), and afterTest() methods are executed only once.<\/li><li>beforeMethod() method executes for each test case but before executing the test case.<\/li><li>afterMethod() method executes for each test case but after executing the test case.<\/li><li>In between beforeMethod() and afterMethod(), each test case executes.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This chapter explains the execution procedure of methods in TestNG. It explains the order of the methods called. Here is the execution procedure of the TestNG test API methods with an example. Create a java class file name&nbsp;TestngAnnotation.java&nbsp;in&nbsp;C:\\&gt;TestNG_WORKSPACE&nbsp;to test annotations. Next, let&#8217;s create the file&nbsp;testng.xml&nbsp;in&nbsp;C:\\&gt;TestNG_WORKSPACE&nbsp;to execute annotations. Compile the Test case class using javac. Now, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1488"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1488"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1488\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1489,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1488\/revisions\/1489"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1488"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1488"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1488"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1490,
        "date": "2021-02-10T05:55:10",
        "date_gmt": "2021-02-10T05:55:10",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1490"
        },
        "modified": "2021-02-10T05:55:10",
        "modified_gmt": "2021-02-10T05:55:10",
        "slug": "testng-executing-tests",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-executing-tests\/",
        "title": {
            "rendered": "TestNG &#8211; Executing Tests"
        },
        "content": {
            "rendered": "\n<p>The test cases are executed using&nbsp;<strong>TestNG<\/strong>&nbsp;class. This class is the main entry point for running tests in the TestNG framework. Users can create their own TestNG object and invoke it in many different ways such as \u2212<\/p>\n\n\n\n<ul><li>On an existing testng.xml.<\/li><li>On a synthetic testng.xml, created entirely from Java.<\/li><li>By directly setting the test classes.<\/li><\/ul>\n\n\n\n<p>You can also define which groups to include or exclude, assign parameters, etc. The command line parameters are \u2212<\/p>\n\n\n\n<ul><li>-d outputdir: specify the output directory.<\/li><li>-testclass class_name: specifies one or several class names.<\/li><li>-testjar jar_name: specifies the jar containing the tests.<\/li><li>-sourcedir src1;src2: ; separated list of source directories (used only when javadoc annotations are used).<\/li><li>-target<\/li><li>-groups<\/li><li>-testrunfactory<\/li><li>-listener<\/li><\/ul>\n\n\n\n<p>We will create the TestNG object an existing testng.xml in our example below.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\r\n* This class prints the given message on console.\r\n*\/\r\n\r\npublic class MessageUtil {\r\n\r\n   private String message;\r\n\r\n   \/\/Constructor\r\n   \/\/@param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message;\r\n   }\r\n      \r\n   \/\/ prints the message\r\n   public String printMessage() {\r\n      System.out.println(message);\r\n      return message;\r\n   }   \r\n}  <\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<ul><li>Create a java test class, say,&nbsp;<strong>SampleTest.java<\/strong>.<\/li><li>Add a test method testPrintMessage() to your test class.<\/li><li>Add an Annotation @Test to method testPrintMessage().<\/li><li>Implement the test condition and check the condition using assertEquals API of TestNG.<\/li><\/ul>\n\n\n\n<p>Create a java class file called SampleTest.java in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class SampleTest {\r\n\t\r\n   String message = \"Hello World\";\r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\r\n   @Test\r\n   public void testPrintMessage() {\r\n      Assert.assertEquals(message, messageUtil.printMessage());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h2>Create testng.xml<\/h2>\n\n\n\n<p>Next, let&#8217;s create testng.xml file in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>, to execute test case(s). This file captures your entire testing in XML. This file makes it easy to describe all your test suites and their parameters in one file, which you can check in your code repository or e-mail to coworkers. It also makes it easy to extract subsets of your tests or split several runtime configurations (e.g., testngdatabase.xml would run only tests that exercise your database).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n\r\n&lt;suite name = \"Sample test Suite\">\r\n   &lt;test name = \"Sample test\">\r\n      &lt;classes>\r\n         &lt;class name = \"SampleTest\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite>\t<\/code><\/pre>\n\n\n\n<p>Compile the test case using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac MessageUtil.java SampleTest.java <\/code><\/pre>\n\n\n\n<p>Now, run the testng.xml, which will run the test case defined in &lt;test&gt; tag.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\r\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Hello World\n\n===============================================\nSample test Suite\nTotal tests run: 1, Failures: 0, Skips: 0\n===============================================<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The test cases are executed using&nbsp;TestNG&nbsp;class. This class is the main entry point for running tests in the TestNG framework. Users can create their own TestNG object and invoke it in many different ways such as \u2212 On an existing testng.xml. On a synthetic testng.xml, created entirely from Java. By directly setting the test classes. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1490"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1490"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1490\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1491,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1490\/revisions\/1491"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1490"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1490"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1490"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1492,
        "date": "2021-02-10T05:57:25",
        "date_gmt": "2021-02-10T05:57:25",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1492"
        },
        "modified": "2021-02-10T05:57:25",
        "modified_gmt": "2021-02-10T05:57:25",
        "slug": "testng-suite-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-suite-test\/",
        "title": {
            "rendered": "TestNG &#8211; Suite Test"
        },
        "content": {
            "rendered": "\n<p>A&nbsp;<strong>test suite<\/strong>&nbsp;is a collection of test cases intended to test a behavior or a set of behaviors of software program. In TestNG, we cannot define a suite in testing source code, but it is represented by one XML file, as suite is the feature of execution. It also allows flexible configuration of the&nbsp;<em>tests<\/em>&nbsp;to be run. A suite can contain one or more tests and is defined by the &lt;suite&gt; tag.<\/p>\n\n\n\n<p>&lt;suite&gt; is the root tag of your testng.xml. It describes a test suite, which in turn is made of several &lt;test&gt; sections.<\/p>\n\n\n\n<p>The following table lists all the legal attributes that &lt;suite&gt; accepts.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Attribute &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>name<\/strong>The name of this suite. It is a&nbsp;<strong>mandatory<\/strong>&nbsp;attribute.<\/td><\/tr><tr><td>2<\/td><td><strong>verbose<\/strong>The level or verbosity for this run.<\/td><\/tr><tr><td>3<\/td><td><strong>parallel<\/strong>Whether TestNG should run different threads to run this suite.<\/td><\/tr><tr><td>4<\/td><td><strong>thread-count<\/strong>The number of threads to use, if parallel mode is enabled (ignored other-wise).<\/td><\/tr><tr><td>5<\/td><td><strong>annotations<\/strong>The type of annotations you are using in your tests.<\/td><\/tr><tr><td>6<\/td><td><strong>time-out<\/strong>The default timeout that will be used on all the test methods found in this test.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>In this chapter, we will show you an example having two test classes, Test1 &amp; Test2, to run together using Test Suite.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;JUNIT_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\r\n* This class prints the given message on console.\r\n*\/\r\n\r\npublic class MessageUtil {\r\n   private String message;\r\n\r\n   \/\/ Constructor\r\n   \/\/ @param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message;\r\n   }\r\n\r\n   \/\/ prints the message\r\n   public String printMessage() {\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n\r\n   \/\/ add \"Hi!\" to the message\r\n   public String salutationMessage() {\r\n      message = \"Hi!\" + message;\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Case Classes<\/h2>\n\n\n\n<p>Create a java class file named&nbsp;<strong>Test1.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class Test1 {\r\n   String message = \"Manisha\";\r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\r\n   @Test\r\n   public void testPrintMessage() {\r\n      System.out.println(\"Inside testPrintMessage()\");\r\n      Assert.assertEquals(message, messageUtil.printMessage());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>Create a java class file named&nbsp;<strong>Test2.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class Test2 {\r\n   String message = \"Manisha\";\t\r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\t \r\n   @Test\r\n   public void testSalutationMessage() {\r\n      System.out.println(\"Inside testSalutationMessage()\");\r\n      message = \"Hi!\" + \"Manisha\";\r\n      Assert.assertEquals(message,messageUtil.salutationMessage());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>Now, let&#8217;s write the testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>, which would contain the &lt;suite&gt; tag as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n\r\n   &lt;test name = \"exampletest1\">\r\n      &lt;classes>\r\n         &lt;class name = \"Test1\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n  \r\n   &lt;test name = \"exampletest2\">\r\n      &lt;classes>\r\n         &lt;class name = \"Test2\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n  \r\n&lt;\/suite>  \t<\/code><\/pre>\n\n\n\n<p>Suite1 includes&nbsp;<strong>exampletest1<\/strong>&nbsp;and&nbsp;<strong>exampletest2<\/strong>.<\/p>\n\n\n\n<p>Compile all java classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac MessageUtil.java Test1.java Test2.java<\/code><\/pre>\n\n\n\n<p>Now, run the testng.xml, which will run the test case defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\r\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Inside testPrintMessage()\nManisha\nInside testSalutationMessage()\nHi!Manisha\n\n===============================================\nSuite1\nTotal tests run: 2, Failures: 0, Skips: 0\n===============================================\n<\/pre>\n\n\n\n<p>You can also check the&nbsp;<em>test-output<\/em>&nbsp;folder. Under the&nbsp;<em>Suite1<\/em>&nbsp;folder, you can see two html files created, exampletest1.html and exampletest2.html, which would look as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/testng\/images\/suite_test1.jpg\" alt=\"Writing Tests\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/testng\/images\/suite_test2.jpg\" alt=\"Writing Tests\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A&nbsp;test suite&nbsp;is a collection of test cases intended to test a behavior or a set of behaviors of software program. In TestNG, we cannot define a suite in testing source code, but it is represented by one XML file, as suite is the feature of execution. It also allows flexible configuration of the&nbsp;tests&nbsp;to be run. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1492"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1492"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1492\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1493,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1492\/revisions\/1493"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1492"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1492"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1492"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1494,
        "date": "2021-02-10T05:59:09",
        "date_gmt": "2021-02-10T05:59:09",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1494"
        },
        "modified": "2021-02-10T05:59:09",
        "modified_gmt": "2021-02-10T05:59:09",
        "slug": "testng-ignore-a-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-ignore-a-test\/",
        "title": {
            "rendered": "TestNG &#8211; Ignore a Test"
        },
        "content": {
            "rendered": "\n<p>Sometimes, it happens that our code is not ready and the test case written to test that method\/code fails. In such cases, annotation&nbsp;<strong>@Test(enabled = false)<\/strong>&nbsp;helps to disable this test case.<\/p>\n\n\n\n<p>If a test method is annotated with&nbsp;<em>@Test(enabled = false)<\/em>, then the test case that is not ready to test is bypassed.<\/p>\n\n\n\n<p>Now, let&#8217;s see @Test(enabled = false) in action.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\r\n* This class prints the given message on console.\r\n*\/\r\n\r\npublic class MessageUtil {\r\n\r\n   private String message;\r\n\r\n   \/\/Constructor\r\n   \/\/@param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message; \r\n   }\r\n\r\n   \/\/ prints the message\r\n   public String printMessage() {\r\n      System.out.println(message);\r\n      return message;\r\n   }   \r\n\r\n   \/\/ add \"Hi!\" to the message\r\n   public String salutationMessage() {\r\n      message = \"Hi!\" + message;\r\n      System.out.println(message);\r\n      return message;\r\n   }   \r\n}  <\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<ul><li>Create a java test class, say,&nbsp;<strong>IgnoreTest.java<\/strong>.<\/li><li>Add test methods, testPrintMessage(), and, testSalutationMessage(), to your test class.<\/li><li>Add an Annotation @Test(enabled = false) to the method testPrintMessage().<\/li><\/ul>\n\n\n\n<p>Create a java class file named&nbsp;<strong>IgnoreTest.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class IgnoreTest {\r\n   String message = \"Manisha\";\r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\r\n   @Test(enabled = false)\r\n   public void testPrintMessage() {\r\n      System.out.println(\"Inside testPrintMessage()\");\r\n      message = \"Manisha\";\r\n      Assert.assertEquals(message, messageUtil.printMessage());\r\n   }\r\n\r\n   @Test\r\n   public void testSalutationMessage() {\r\n      System.out.println(\"Inside testSalutationMessage()\");\r\n      message = \"Hi!\" + \"Manisha\";\r\n      Assert.assertEquals(message, messageUtil.salutationMessage());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h2>Create testng.xml<\/h2>\n\n\n\n<p>Create testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"IgnoreTest\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite>\t<\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil and test case classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac MessageUtil.java IgnoreTest.java<\/code><\/pre>\n\n\n\n<p>Now, run the testng.xml, which will not run testPrintMessage() the test case defined in provided the Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\r\n<\/code><\/pre>\n\n\n\n<p>Verify the output. testPrintMessage() test case is not tested.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Inside testSalutationMessage()\nHi!Manisha\n\n===============================================\nSuite1\nTotal tests run: 1, Failures: 0, Skips: 0\n===============================================\n<\/pre>\n\n\n\n<p>You can also ignore a group of tests, which will be discussed in the next chapter.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Sometimes, it happens that our code is not ready and the test case written to test that method\/code fails. In such cases, annotation&nbsp;@Test(enabled = false)&nbsp;helps to disable this test case. If a test method is annotated with&nbsp;@Test(enabled = false), then the test case that is not ready to test is bypassed. Now, let&#8217;s see @Test(enabled [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1494"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1494"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1494\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1495,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1494\/revisions\/1495"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1494"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1494"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1494"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1496,
        "date": "2021-02-10T06:01:26",
        "date_gmt": "2021-02-10T06:01:26",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1496"
        },
        "modified": "2021-02-10T06:01:26",
        "modified_gmt": "2021-02-10T06:01:26",
        "slug": "testng-group-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-group-test\/",
        "title": {
            "rendered": "TestNG &#8211; Group Test"
        },
        "content": {
            "rendered": "\n<p>Group test is a new innovative feature in TestNG, which doesn\u2019t exist in JUnit framework. It permits you to dispatch methods into proper portions and perform sophisticated groupings of test methods.<\/p>\n\n\n\n<p>Not only can you declare those methods that belong to groups, but you can also specify groups that contain other groups. Then, TestNG can be invoked and asked to include a certain set of groups (or regular expressions), while excluding another set.<\/p>\n\n\n\n<p>Group tests provide maximum flexibility in how you partition your tests, and doesn&#8217;t require you to recompile anything if you want to run two different sets of tests back to back.<\/p>\n\n\n\n<p>Groups are specified in your testng.xml file using the &lt;groups&gt; tag. It can be found either under the &lt;test&gt; or &lt;suite&gt; tag. Groups specified in the &lt;suite&gt; tag apply to all the &lt;test&gt; tags underneath.<\/p>\n\n\n\n<p>Now, let&#8217;s take an example to see how group test works.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<ul><li>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt; TestNG_WORKSPACE<\/strong>.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\r\n* This class prints the given message on console.\r\n*\/\r\npublic class MessageUtil {\r\n   private String message;\r\n\r\n   \/\/ Constructor\r\n   \/\/ @param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message;\r\n   }\r\n\r\n   \/\/ prints the message\r\n   public String printMessage() {\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n\r\n   \/\/ add \"tutorialspoint\" to the message\r\n   public String salutationMessage() {\r\n      message = \"tutorialspoint\" + message;\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n\r\n   \/\/ add \"www.\" to the message\r\n   public String exitMessage() {\r\n      message = \"www.\" + message;\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<ul><li>Create a java test class, say, GroupTestExample.java.<\/li><li>Add test methods, testPrintMessage() and testSalutationMessage(), to your test class.<\/li><li>Group the test method in two categories \u2212<ul><li><strong>Check-in tests (checkintest)<\/strong>&nbsp;\u2212 These tests should be run before you submit new code. They should typically be fast and just make sure no basic functionality is broken.<\/li><li><strong>Functional tests (functest)<\/strong>&nbsp;\u2212 These tests should cover all the functionalities of your software and be run at least once a day, although ideally you would want to run them continuously.<\/li><\/ul><\/li><\/ul>\n\n\n\n<p>Create the java class file named&nbsp;<strong>GroupTestExample.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class GroupTestExample {\r\n   String message = \".com\";\r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\r\n   @Test(groups = { \"functest\", \"checkintest\" })\r\n   \r\n   public void testPrintMessage() {\r\n      System.out.println(\"Inside testPrintMessage()\");\r\n      message = \".com\";\r\n      Assert.assertEquals(message, messageUtil.printMessage());\r\n   }\r\n\r\n   @Test(groups = { \"checkintest\" })\r\n   \r\n   public void testSalutationMessage() {\r\n      System.out.println(\"Inside testSalutationMessage()\");\r\n      message = \"tutorialspoint\" + \".com\";\r\n      Assert.assertEquals(message, messageUtil.salutationMessage());\r\n   }\r\n\r\n   @Test(groups = { \"functest\" })\r\n   \r\n   public void testingExitMessage() {\r\n      System.out.println(\"Inside testExitMessage()\");\r\n      message = \"www.\" + \"tutorialspoint\"+\".com\";\r\n      Assert.assertEquals(message, messageUtil.exitMessage());\r\n   }  \r\n}<\/code><\/pre>\n\n\n\n<h2>Create testng.xml<\/h2>\n\n\n\n<p>Create testng.xml in&nbsp;<strong>C:\\&gt; TestNG_WORKSPACE<\/strong>, to execute test case(s). Here, we would be executing only those tests, that belong to the group&nbsp;<em>functest<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n   \r\n      &lt;groups>\r\n         &lt;run>\r\n            &lt;include name = \"functest\" \/>\r\n         &lt;\/run>\r\n      &lt;\/groups>\r\n\r\n      &lt;classes>\r\n         &lt;class name = \"GroupTestExample\" \/>\r\n      &lt;\/classes>\r\n   \r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil, Test case classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac MessageUtil.java GroupTestExample.java<\/code><\/pre>\n\n\n\n<p>Now, run the testng.xml, which will run only the method testPrintMessage(), as it belongs to the group&nbsp;<em>functest<\/em>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml<\/code><\/pre>\n\n\n\n<p>Verify the output. Only the method testPrintMessage() is executed.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Inside testPrintMessage()\n.com\nInside testExitMessage()\nwww..com\n\n===============================================\nSuite1\nTotal tests run: 2, Failures: 1, Skips: 0\n===============================================\n<\/pre>\n\n\n\n<h2>Group of Groups<\/h2>\n\n\n\n<p>Groups can also include other groups. These groups are called&nbsp;<strong>MetaGroups<\/strong>. For example, you might want to define a group&nbsp;<em>all<\/em>&nbsp;that includes&nbsp;<em>checkintest<\/em>&nbsp;and&nbsp;<em>functest<\/em>. Let&#8217;s modify our testng.xml file as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n   \r\n      &lt;groups>\r\n      \r\n         &lt;define name = \"all\">\r\n            &lt;include name = \"functest\"\/>\r\n            &lt;include name = \"checkintest\"\/>\r\n         &lt;\/define>\r\n         \r\n         &lt;run>\r\n            &lt;include name = \"all\"\/>\r\n         &lt;\/run>\r\n         \r\n      &lt;\/groups>\r\n      \r\n      &lt;classes>\r\n         &lt;class name = \"GroupTestExample\" \/>\r\n      &lt;\/classes>\r\n      \r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>Executing the above testng.xml will execute all the three tests and will give you the following result \u2212<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Inside testPrintMessage()\n.com\nInside testSalutationMessage()\ntutorialspoint.com\nInside testExitMessage()\nwww.tutorialspoint.com\n\n===============================================\nSuite1\nTotal tests run: 3, Failures: 0, Skips: 0\n===============================================\n<\/pre>\n\n\n\n<h2>Exclusion Groups<\/h2>\n\n\n\n<p>You can ignore a group by using the &lt;exclude&gt; tag as shown below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n\r\n      &lt;groups>\r\n         &lt;define name = \"all\">\r\n            &lt;exclude name = \"functest\"\/>\r\n            &lt;include name = \"checkintest\"\/>\r\n         &lt;\/define>\r\n\r\n         &lt;run>\r\n            &lt;include name = \"all\"\/>\r\n         &lt;\/run>\r\n      &lt;\/groups>\r\n\r\n      &lt;classes>\r\n         &lt;class name = \"GroupTestExample\" \/>\r\n      &lt;\/classes>\r\n\r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Group test is a new innovative feature in TestNG, which doesn\u2019t exist in JUnit framework. It permits you to dispatch methods into proper portions and perform sophisticated groupings of test methods. Not only can you declare those methods that belong to groups, but you can also specify groups that contain other groups. Then, TestNG can [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1496"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1496"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1496\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1497,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1496\/revisions\/1497"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1496"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1496"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1496"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1499,
        "date": "2021-02-10T06:03:17",
        "date_gmt": "2021-02-10T06:03:17",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1499"
        },
        "modified": "2021-02-10T06:03:17",
        "modified_gmt": "2021-02-10T06:03:17",
        "slug": "testng-exception-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-exception-test\/",
        "title": {
            "rendered": "TestNG &#8211; Exception Test"
        },
        "content": {
            "rendered": "\n<p>TestNG provides an option of tracing the exception handling of code. You can test whether a code throws a desired exception or not. Here the&nbsp;<strong>expectedExceptions<\/strong>&nbsp;parameter is used along with the @Test annotation. Now, let&#8217;s see&nbsp;<strong>@Test(expectedExceptions)<\/strong>&nbsp;in action.<\/p>\n\n\n\n<h2>Create a Class<\/h2>\n\n\n\n<p>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt; TestNG_WORKSPACE<\/strong>. Add an error condition inside the printMessage() method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\r\n* This class prints the given message on console.\r\n*\/\r\npublic class MessageUtil {\r\n\r\n   private String message;\r\n\r\n   \/\/Constructor\r\n   \/\/@param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message; \r\n   }\r\n\r\n   \/\/ prints the message\r\n   public void printMessage() {\r\n      System.out.println(message);\r\n      int a =0;\r\n      int b = 1\/a;\r\n   }   \r\n\r\n   \/\/ add \"Hi!\" to the message\r\n   public String salutationMessage() {\r\n      message = \"Hi!\" + message;\r\n      System.out.println(message);\r\n      return message;\r\n   }   \r\n}  \t<\/code><\/pre>\n\n\n\n<h2>Create Test Case Class<\/h2>\n\n\n\n<ul><li>Create a java test class, say,&nbsp;<strong>ExpectedExceptionTest.java<\/strong>.<\/li><li>Add an expected exception ArithmeticException to the testPrintMessage() test case.<\/li><\/ul>\n\n\n\n<p>Create a java class file named&nbsp;<strong>ExpectedExceptionTest.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt; TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class ExpectedExceptionTest {\r\n   String message = \"Manisha\";\t\r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\t   \r\n   @Test(expectedExceptions = ArithmeticException.class)\r\n   public void testPrintMessage() {\t\r\n      System.out.println(\"Inside testPrintMessage()\");     \r\n      messageUtil.printMessage();     \r\n   }\r\n   \r\n   @Test\r\n   public void testSalutationMessage() {\r\n      System.out.println(\"Inside testSalutationMessage()\");\r\n      message = \"Hi!\" + \"Manisha\";\r\n      Assert.assertEquals(message,messageUtil.salutationMessage());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h2>Create Test Runner<\/h2>\n\n\n\n<p>Create testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"ExpectedExceptionTest\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite>\t<\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil, Test case classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac MessageUtil.java TestJunit.java<\/code><\/pre>\n\n\n\n<p>Now, run the Test Runner, which will run test cases defined in the provided Test Case class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\r\n<\/code><\/pre>\n\n\n\n<p>Verify the output. testPrintMessage() test case will be passed.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Inside testPrintMessage()\nManisha\nInside testSalutationMessage()\nHi!Manisha\n\n===============================================\nSuite1\nTotal tests run: 2, Failures: 0, Skips: 0\n===============================================<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>TestNG provides an option of tracing the exception handling of code. You can test whether a code throws a desired exception or not. Here the&nbsp;expectedExceptions&nbsp;parameter is used along with the @Test annotation. Now, let&#8217;s see&nbsp;@Test(expectedExceptions)&nbsp;in action. Create a Class Create a java class to be tested, say,&nbsp;MessageUtil.java&nbsp;in&nbsp;C:\\&gt; TestNG_WORKSPACE. Add an error condition inside the printMessage() [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1499"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1499"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1499\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1500,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1499\/revisions\/1500"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1499"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1499"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1499"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1502,
        "date": "2021-02-10T06:07:01",
        "date_gmt": "2021-02-10T06:07:01",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1502"
        },
        "modified": "2021-02-10T06:07:01",
        "modified_gmt": "2021-02-10T06:07:01",
        "slug": "testng-dependency-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-dependency-test\/",
        "title": {
            "rendered": "TestNG &#8211; Dependency Test"
        },
        "content": {
            "rendered": "\n<p>Sometimes, you may need to invoke methods in a test case in a particular order, or you may want to share some data and state between methods. This kind of dependency is supported by TestNG, as it supports the declaration of explicit dependencies between test methods.<\/p>\n\n\n\n<p>TestNG allows you to specify dependencies either with \u2212<\/p>\n\n\n\n<ul><li>Using attribute&nbsp;<em>dependsOnMethods<\/em>&nbsp;in @Test annotations, OR.<\/li><li>Using attribute&nbsp;<em>dependsOnGroups<\/em>&nbsp;in @Test annotations.<\/li><\/ul>\n\n\n\n<h2>Example Using&nbsp;<em>dependsOnMethods<\/em><\/h2>\n\n\n\n<h3>Create a Class<\/h3>\n\n\n\n<p>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MessageUtil {\r\n   private String message;\r\n\r\n   \/\/ Constructor\r\n   \/\/ @param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message;\r\n   }\r\n\r\n   \/\/ prints the message\r\n   public String printMessage() {\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n\r\n   \/\/ add \"Hi!\" to the message\r\n   public String salutationMessage() {\r\n      message = \"Hi!\" + message;\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h3>Create Test Case Class<\/h3>\n\n\n\n<ul><li>Create a java test class, say, DependencyTestUsingAnnotation.java.<\/li><li>Add test methods, testPrintMessage() and testSalutationMessage(), and initEnvironmentTest(), to your test class.<\/li><li>Add attribute&nbsp;<strong>dependsOnMethods = {&#8220;initEnvironmentTest&#8221;}<\/strong>&nbsp;to the @Test annotation of&nbsp;<strong>testSalutationMessage()<\/strong>&nbsp;method.<\/li><\/ul>\n\n\n\n<p>Create a java class file name&nbsp;<strong>DependencyTestUsingAnnotation.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class DependencyTestUsingAnnotation {\r\nString message = \"Manisha\";\r\nMessageUtil messageUtil = new MessageUtil(message);\r\n\r\n   @Test\r\n   public void testPrintMessage() {\r\n      System.out.println(\"Inside testPrintMessage()\");\r\n      message = \"Manisha\";\r\n      Assert.assertEquals(message, messageUtil.printMessage());\r\n   }\r\n\r\n   @Test(dependsOnMethods = { \"initEnvironmentTest\" })\r\n   public void testSalutationMessage() {\r\n      System.out.println(\"Inside testSalutationMessage()\");\r\n      message = \"Hi!\" + \"Manisha\";\r\n      Assert.assertEquals(message, messageUtil.salutationMessage());\r\n   }\r\n\r\n   @Test\r\n   public void initEnvironmentTest() {\r\n      System.out.println(\"This is initEnvironmentTest\");\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h3>Create testng.xml<\/h3>\n\n\n\n<p>Create testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"DependencyTestUsingAnnotation\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil, Test case classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac MessageUtil.java DependencyTestUsingAnnotation.java\r\n<\/code><\/pre>\n\n\n\n<p>Now, run the testng.xml, which will run the testSalutationMessage() method only after the execution of initEnvironmentTest() method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\r\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is initEnvironmentTest\r\nInside testPrintMessage()\r\nManisha\r\nInside testSalutationMessage()\r\nHi!Manisha\r\n\r\n===============================================\r\nSuite1\r\nTotal tests run: 3, Failures: 0, Skips: 0\r\n===============================================\r\n<\/code><\/pre>\n\n\n\n<h2>Example Using&nbsp;<em>dependsOnGroups<\/em><\/h2>\n\n\n\n<p>You can also have methods that depend on entire groups. Let&#8217;s have an example to demonstrate this.<\/p>\n\n\n\n<h3>Create a Class<\/h3>\n\n\n\n<p>Create a java class to be tested, say,&nbsp;<strong>MessageUtil.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class MessageUtil {\r\n   private String message;\r\n\r\n   \/\/ Constructor\r\n   \/\/ @param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message;\r\n   }\r\n\r\n   \/\/ prints the message\r\n   public String printMessage() {\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n\r\n   \/\/ add \"Hi!\" to the message\r\n   public String salutationMessage() {\r\n      message = \"Hi!\" + message;\r\n      System.out.println(message);\r\n      return message;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h3>Create Test Case Class<\/h3>\n\n\n\n<ul><li>Create a java test class, say, DependencyTestUsingAnnotation.java.<\/li><li>Add test methods, testPrintMessage() testSalutationMessage(), and initEnvironmentTest() to your test class, and add them to the group &#8220;init&#8221;.<\/li><li>Add the attribute&nbsp;<strong>dependsOnMethods = {&#8220;init.*&#8221;}<\/strong>&nbsp;to the @Test annotation of&nbsp;<strong>testSalutationMessage()<\/strong>&nbsp;method.<\/li><\/ul>\n\n\n\n<p>Create a java class file named&nbsp;<strong>DependencyTestUsingAnnotation.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class DependencyTestUsingAnnotation {\r\n   String message = \"Manisha\";\r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\r\n   @Test(groups = { \"init\" })\r\n   public void testPrintMessage() {\r\n      System.out.println(\"Inside testPrintMessage()\");\r\n      message = \"Manisha\";\r\n      Assert.assertEquals(message, messageUtil.printMessage());\r\n   }\r\n\r\n   @Test(dependsOnGroups = { \"init.*\" })\r\n   public void testSalutationMessage() {\r\n      System.out.println(\"Inside testSalutationMessage()\");\r\n      message = \"Hi!\" + \"Manisha\";\r\n      Assert.assertEquals(message, messageUtil.salutationMessage());\r\n   }\r\n\r\n   @Test(groups = { \"init\" })\r\n   public void initEnvironmentTest() {\r\n      System.out.println(\"This is initEnvironmentTest\");\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>In this example, testSalutationMessage() is declared as depending on any group, matching the regular expression &#8220;init.*&#8221;, which guarantees that the methods testPrintMessage() and initEnvironmentTest() will always be invoked before testSalutationMessage().<\/p>\n\n\n\n<p>If a method depended upon fails, and you have a hard dependency on it (alwaysRun=false, which is the default), the methods that depend on it are not marked as FAIL but as SKIP. Skipped methods will be reported as such in the final report (in a color that is neither Red nor Green in HTML), which is important since skipped methods are not necessarily failures.<\/p>\n\n\n\n<h3>Create testng.xml<\/h3>\n\n\n\n<p>Create testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"DependencyTestUsingAnnotation\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>Compile the MessageUtil, Test case classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac MessageUtil.java DependencyTestUsingAnnotation.java\r\n<\/code><\/pre>\n\n\n\n<p>Now, run the testng.xml, which will run the&nbsp;<em>testSalutationMessage()<\/em>&nbsp;method only after the execution of&nbsp;<em>initEnvironmentTest()<\/em>&nbsp;method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\r\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is initEnvironmentTest\r\nInside testPrintMessage()\r\nManisha\r\nInside testSalutationMessage()\r\nHi!Manisha\r\n\r\n===============================================\r\nSuite1\r\nTotal tests run: 3, Failures: 0, Skips: 0\r\n===============================================\r\n<\/code><\/pre>\n\n\n\n<h2><em>dependsOnGroups<\/em>&nbsp;Vs&nbsp;<em>dependsOnMethods<\/em><\/h2>\n\n\n\n<ul><li>On using groups, we are no longer exposed to refactoring problems. As long as we don\u2019t modify the dependsOnGroups or groups attributes, our tests will keep running with the proper dependencies set up.<\/li><li>Whenever a new method needs to be added in the dependency graph, all we need to do is put it in the right group and make sure it depends on the correct group. We don\u2019t need to modify any other method.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Sometimes, you may need to invoke methods in a test case in a particular order, or you may want to share some data and state between methods. This kind of dependency is supported by TestNG, as it supports the declaration of explicit dependencies between test methods. TestNG allows you to specify dependencies either with \u2212 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1502"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1502"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1502\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1503,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1502\/revisions\/1503"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1502"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1502"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1502"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1504,
        "date": "2021-02-10T06:10:31",
        "date_gmt": "2021-02-10T06:10:31",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1504"
        },
        "modified": "2021-02-10T06:10:31",
        "modified_gmt": "2021-02-10T06:10:31",
        "slug": "testng-parameterized-test",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-parameterized-test\/",
        "title": {
            "rendered": "TestNG &#8211; Parameterized Test"
        },
        "content": {
            "rendered": "\n<p>Another interesting feature available in TestNG is&nbsp;<strong>parametric testing<\/strong>. In most cases, you&#8217;ll come across a scenario where the business logic requires a hugely varying number of tests.&nbsp;<strong>Parameterized tests<\/strong>&nbsp;allow developers to run the same test over and over again using different values.<\/p>\n\n\n\n<p>TestNG lets you pass parameters directly to your test methods in two different ways \u2212<\/p>\n\n\n\n<ul><li>With testng.xml<\/li><li>With Data Providers<\/li><\/ul>\n\n\n\n<h2>Passing Parameters with&nbsp;<em>testng.xml<\/em><\/h2>\n\n\n\n<p>With this technique, you define the simple parameters in the&nbsp;<em>testng.xml<\/em>&nbsp;file and then reference those parameters in the source files. Let us have an example to demonstrate how to use this technique to pass parameters.<\/p>\n\n\n\n<h3>Create Test Case Class<\/h3>\n\n\n\n<ul><li>Create a java test class, say, ParameterizedTest1.java.<\/li><li>Add test method parameterTest() to your test class. This method takes a string as input parameter.<\/li><li>Add the annotation&nbsp;<em>@Parameters(&#8220;myName&#8221;)<\/em>&nbsp;to this method. The parameter would be passed a value from testng.xml, which we will see in the next step.<\/li><\/ul>\n\n\n\n<p>Create a java class file named&nbsp;<strong>ParameterizedTest1.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.annotations.Parameters;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class ParameterizedTest1 {\r\n   @Test\r\n   @Parameters(\"myName\")\r\n   public void parameterTest(String myName) {\r\n      System.out.println(\"Parameterized value is : \" + myName);\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<h3>Create testng.xml<\/h3>\n\n\n\n<p>Create testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n   \r\n      &lt;parameter name = \"myName\" value=\"manisha\"\/> \r\n      \r\n      &lt;classes>\r\n         &lt;class name = \"ParameterizedTest1\" \/>\r\n      &lt;\/classes>\r\n      \r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>We can also define the parameters at the &lt;suite&gt; level. Suppose we have defined&nbsp;<em>myName<\/em>&nbsp;at both &lt;suite&gt; and &lt;test&gt; levels. In such cases, regular scoping rules apply. It means that any class inside &lt;test&gt; tag will see the value of parameter defined in &lt;test&gt;, while the classes in the rest of the testng.xml file will see the value defined in &lt;suite&gt;.<\/p>\n\n\n\n<p>Compile the test case class using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac ParameterizedTest1.java<\/code><\/pre>\n\n\n\n<p>Now, run testng.xml, which will run the&nbsp;<em>parameterTest<\/em>&nbsp;method. TestNG will try to find a parameter named&nbsp;<em>myName<\/em>&nbsp;first in the &lt;test&gt; tag, and then, if it can\u2019t find it, it searches in the &lt;suit&gt; tag that encloses it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Parameterized value is : manisha\n\n===============================================\nSuite1\nTotal tests run: 1, Failures: 0, Skips: 0\n===============================================\n<\/pre>\n\n\n\n<p>TestNG will automatically try to convert the value specified in testng.xml to the type of your parameter. Here are the types supported \u2212<\/p>\n\n\n\n<ul><li>String<\/li><li>int\/Integer<\/li><li>boolean\/Boolean<\/li><li>byte\/Byte<\/li><li>char\/Character<\/li><li>double\/Double<\/li><li>float\/Float<\/li><li>long\/Long<\/li><li>short\/Short<\/li><\/ul>\n\n\n\n<h2>Passing Parameters with&nbsp;<em>Dataproviders<\/em><\/h2>\n\n\n\n<p>When you need to pass complex parameters or parameters that need to be created from Java (complex objects, objects read from a property file or a database, etc.), parameters can be passed using Dataproviders.<\/p>\n\n\n\n<p>A Data Provider is a method annotated with&nbsp;<strong>@DataProvider<\/strong>. This annotation has only one string attribute: its name. If the name is not supplied, the data provider\u2019s name automatically defaults to the method\u2019s name. A data provider returns an array of objects.<\/p>\n\n\n\n<p>The following examples demonstrate how to use data providers. The first example is about @DataProvider using Vector, String, or Integer as parameter, and the second example is about @DataProvider using object as parameter.<\/p>\n\n\n\n<h3>Example 1<\/h3>\n\n\n\n<p>Here, the @DataProvider passes Integer and Boolean as parameter.<\/p>\n\n\n\n<p><strong>Create Java class<\/strong><\/p>\n\n\n\n<p>Create a java class called PrimeNumberChecker.java. This class checks if the number is prime. Create this class in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PrimeNumberChecker {\r\n   public Boolean validate(final Integer primeNumber) {\r\n   \r\n      for (int i = 2; i &lt; (primeNumber \/ 2); i++) {\r\n         if (primeNumber % i == 0) {\r\n            return false;\r\n         }\r\n      }\r\n      return true;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p><strong>Create Test Case Class<\/strong><\/p>\n\n\n\n<ul><li>Create a java test class, say, ParamTestWithDataProvider1.java.<\/li><li>Define the method primeNumbers(), which is defined as a Data provider using the annotation. This method returns an array of objects.<\/li><li>Add the test method testPrimeNumberChecker() to your test class. This method takes an Integer and Boolean as input parameters. This method validates if the parameter passed is a prime number.<\/li><li>Add the annotation&nbsp;<em>@Test(dataProvider = &#8220;test1&#8221;)<\/em>&nbsp;to this method. The attribute dataProvider is mapped to &#8220;test1&#8221;.<\/li><\/ul>\n\n\n\n<p>Create a java class file named&nbsp;<strong>ParamTestWithDataProvider1.java<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.BeforeMethod;\r\nimport org.testng.annotations.DataProvider;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class ParamTestWithDataProvider1 {\r\n   private PrimeNumberChecker primeNumberChecker;\r\n\r\n   @BeforeMethod\r\n   public void initialize() {\r\n      primeNumberChecker = new PrimeNumberChecker();\r\n   }\r\n\r\n   @DataProvider(name = \"test1\")\r\n   public static Object&#91;]&#91;] primeNumbers() {\r\n      return new Object&#91;]&#91;] {{2, true}, {6, false}, {19, true}, {22, false}, {23, true}};\r\n   }\r\n\r\n   \/\/ This test will run 4 times since we have 5 parameters defined\r\n   @Test(dataProvider = \"test1\")\r\n   public void testPrimeNumberChecker(Integer inputNumber, Boolean expectedResult) {\r\n      System.out.println(inputNumber + \" \" + expectedResult);\r\n      Assert.assertEquals(expectedResult, primeNumberChecker.validate(inputNumber));\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p><strong>Create testng.xml<\/strong><\/p>\n\n\n\n<p>Create a testng.xml&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute Test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"ParamTestWithDataProvider1\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>Compile the Test case class using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>.javac ParamTestWithDataProvider1.java PrimeNumberChecker.java\r\n<\/code><\/pre>\n\n\n\n<p>Now, run testng.xml.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\r\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>   2 true\r\n   6 false\r\n   19 true\r\n   22 false\r\n   23 true\r\n\r\n===============================================\r\n   Suite1\r\n   Total tests run: 5, Failures: 0, Skips: 0\r\n===============================================\r\n<\/code><\/pre>\n\n\n\n<h3>Example 2<\/h3>\n\n\n\n<p>Here, the @DataProvider passes Object as parameter.<\/p>\n\n\n\n<p><strong>Create Java class<\/strong><\/p>\n\n\n\n<p>Create a java class Bean.java, which is a simple object with get\/set methods, in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Bean {\r\n   private String val;\r\n   private int i;\r\n   \r\n   public Bean(String val, int i) {\r\n      this.val = val;\r\n      this.i = i;\r\n   }\r\n   \r\n   public String getVal() {\r\n      return val;\r\n   }\r\n   \r\n   public void setVal(String val) {\r\n      this.val = val;\r\n   }\r\n   \r\n   public int getI() {\r\n      return i;\r\n   }\r\n   \r\n   public void setI(int i) {\r\n      this.i = i;\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p><strong>Create Test Case Class<\/strong><\/p>\n\n\n\n<ul><li>Create a java test class, say, ParamTestWithDataProvider2.java.<\/li><li>Define the method primeNumbers(), which is defined as a data provider using annotation. This method returns an array of object.<\/li><li>Add the test method testMethod() to your test class. This method takes an object bean as parameter.<\/li><li>Add the annotation&nbsp;<em>@Test(dataProvider = &#8220;test1&#8221;)<\/em>&nbsp;to this method. The attribute dataProvider is mapped to &#8220;test1&#8221;.<\/li><\/ul>\n\n\n\n<p>Create a java class file named ParamTestWithDataProvider2.java in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.annotations.DataProvider;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class ParamTestWithDataProvider2 {\r\n   @DataProvider(name = \"test1\")\r\n   public static Object&#91;]&#91;] primeNumbers() {\r\n      return new Object&#91;]&#91;] { { new Bean(\"hi I am the bean\", 111) } };\r\n   }\r\n\r\n   @Test(dataProvider = \"test1\")\r\n   public void testMethod(Bean myBean) {\r\n      System.out.println(myBean.getVal() + \" \" + myBean.getI());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p><strong>Create testng.xml<\/strong><\/p>\n\n\n\n<p>Create testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>&nbsp;to execute test case(s).<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\" >\r\n\r\n&lt;suite name = \"Suite1\">\r\n   &lt;test name = \"test1\">\r\n      &lt;classes>\r\n         &lt;class name = \"ParamTestWithDataProvider2\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>Compile the test case class using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac ParamTestWithDataProvider2.java Bean.java\r\n<\/code><\/pre>\n\n\n\n<p>Now, run testng.xml.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE\" org.testng.TestNG testng.xml\r\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>   hi I am the bean 111\r\n\r\n===============================================\r\n   Suite1\r\n   Total tests run: 1, Failures: 0, Skips: 0\r\n===============================================<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Another interesting feature available in TestNG is&nbsp;parametric testing. In most cases, you&#8217;ll come across a scenario where the business logic requires a hugely varying number of tests.&nbsp;Parameterized tests&nbsp;allow developers to run the same test over and over again using different values. TestNG lets you pass parameters directly to your test methods in two different ways [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1504"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1504"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1504\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1505,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1504\/revisions\/1505"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1504"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1504"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1504"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1506,
        "date": "2021-02-10T06:11:57",
        "date_gmt": "2021-02-10T06:11:57",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1506"
        },
        "modified": "2021-02-10T06:11:57",
        "modified_gmt": "2021-02-10T06:11:57",
        "slug": "testng-run-junit-tests",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-run-junit-tests\/",
        "title": {
            "rendered": "TestNG &#8211; Run JUnit Tests"
        },
        "content": {
            "rendered": "\n<p>Now that you have understood TestNG and its various tests, you must be worried by now as to how to refactor your existing JUnit code. There&#8217;s no need to worry, as TestNG provides a way to shift from JUnit to TestNG at your own pace. You can execute your existing JUnit test cases using TestNG.<\/p>\n\n\n\n<p>TestNG can automatically recognize and run JUnit tests, so that you can use TestNG as a runner for all your existing tests and write new tests using TestNG. All you have to do is to put JUnit library on the TestNG classpath, so it can find and use JUnit classes, change your test runner from JUnit to TestNG in Ant, and then run TestNG in &#8220;mixed&#8221; mode. This way, you can have all your tests in the same project, even in the same package, and start using TestNG. This approach also allows you to convert your existing JUnit tests to TestNG incrementally.<\/p>\n\n\n\n<p>Let us have an example to demonstrate this amazing ability of TestNG.<\/p>\n\n\n\n<h2>Create JUnit Test Case Class<\/h2>\n\n\n\n<p>Create a java class, which is a JUnit test class, TestJunit.java in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.junit.Test;\r\nimport static org.testng.AssertJUnit.assertEquals;\r\n\r\npublic class TestJunit {\r\n   @Test\r\n   public void testAdd() {\r\n      String str = \"Junit testing using TestNG\";\r\n      AssertEquals(\"Junit testing using TestNG\",str);\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>Now, let&#8217;s write the testng.xml in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>, which would contain the &lt;suite&gt; tag as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE suite SYSTEM \"http:\/\/testng.org\/testng-1.0.dtd\">\r\n\r\n&lt;suite name = \"Converted JUnit suite\" >\r\n   &lt;test name = \"JUnitTests\" junit=\"true\">\r\n      &lt;classes>\r\n         &lt;class name = \"TestJunit\" \/>\r\n      &lt;\/classes>\r\n   &lt;\/test>\r\n&lt;\/suite><\/code><\/pre>\n\n\n\n<p>To execute the JUnit test cases, define the property&nbsp;<em>junit=&#8221;true&#8221;<\/em>&nbsp;as in the xml above. The JUnit test case class TestJunit is defined in class name.<\/p>\n\n\n\n<p>For JUnit 4, TestNG will use the&nbsp;<em>org.junit.runner.JUnitCore<\/em>&nbsp;runner to run your tests.<\/p>\n\n\n\n<p>Compile all java classes using javac.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>javac TestJunit.java<\/code><\/pre>\n\n\n\n<p>Now, run testng.xml, which will run the JUnit test case as TestNG.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE>java -cp \"C:\\TestNG_WORKSPACE:C:\\TestNG_WORKSPACE\\lib\\junit-4.11.jar\" org.testng.TestNG testng.xml<\/code><\/pre>\n\n\n\n<p>Here, we have placed the junit-4.11.jar under C:\\TestNG_WORKSPACE\\lib\\junit-4.11.jar.<\/p>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">===============================================\n   Converted JUnit suite\n\n   Total tests run: 1, Failures: 0, Skips: 0\n===============================================<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Now that you have understood TestNG and its various tests, you must be worried by now as to how to refactor your existing JUnit code. There&#8217;s no need to worry, as TestNG provides a way to shift from JUnit to TestNG at your own pace. You can execute your existing JUnit test cases using TestNG. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1506"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1506"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1506\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1507,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1506\/revisions\/1507"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1506"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1506"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1506"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1508,
        "date": "2021-02-10T06:12:36",
        "date_gmt": "2021-02-10T06:12:36",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1508"
        },
        "modified": "2021-02-10T06:12:36",
        "modified_gmt": "2021-02-10T06:12:36",
        "slug": "testng-test-results",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-test-results\/",
        "title": {
            "rendered": "TestNG &#8211; Test Results"
        },
        "content": {
            "rendered": "\n<p>Reporting is the most important part of any test execution, as it helps the user understand the result of the test execution, point of failure, and the reasons for failure. Logging, on the other hand, is important to keep an eye on the execution flow or for debugging in case of any failures.<\/p>\n\n\n\n<p>TestNG, by default, generates a different type of report for its test execution. This includes an HTML and an XML report output. TestNG also allows its users to write their own reporter and use it with TestNG. There is also an option to write your own loggers, which are notified at runtime by TestNG.<\/p>\n\n\n\n<p>There are two ways to generate a report with TestNG \u2212<\/p>\n\n\n\n<ul><li><strong>Listeners<\/strong>&nbsp;\u2212 For implementing a listener class, the class has to implement the&nbsp;<em>org.testng.ITestListener<\/em>&nbsp;interface. These classes are notified at runtime by TestNG when the test starts, finishes, fails, skips, or passes.<\/li><li><strong>Reporters<\/strong>&nbsp;\u2212 For implementing a reporting class, the class has to implement an&nbsp;<em>org.testng.IReporter<\/em>&nbsp;interface. These classes are called when the whole suite run ends. The object containing the information of the whole test run is passed to this class when called.<\/li><\/ul>\n\n\n\n<p>In this chapter, we will have four different examples to demonstrate four different cases of reporting and logging \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Case &amp; Example<\/th><\/tr><tr><td>1<\/td><td><a href=\"https:\/\/www.tutorialspoint.com\/testng\/testng_custom_logger.htm\">Custom Logging<\/a>This example illustrates how to write your own logger.<\/td><\/tr><tr><td>2<\/td><td><a href=\"https:\/\/www.tutorialspoint.com\/testng\/testng_custom_reporter.htm\">Custom Reporter<\/a>This example illustrates how to write your own reporter.<\/td><\/tr><tr><td>3<\/td><td><a href=\"https:\/\/www.tutorialspoint.com\/testng\/testng_html_xml_report.htm\">HTML and XML report<\/a>This example illustrates the default HTML and XML report generated by TestNG.<\/td><\/tr><tr><td>4<\/td><td><a href=\"https:\/\/www.tutorialspoint.com\/testng\/testng_junitreports.htm\">JUnit Reports<\/a>This example illustrates how to generate JUnit reports from TestNG reports.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Reporting is the most important part of any test execution, as it helps the user understand the result of the test execution, point of failure, and the reasons for failure. Logging, on the other hand, is important to keep an eye on the execution flow or for debugging in case of any failures. TestNG, by [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1508"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1508"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1508\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1509,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1508\/revisions\/1509"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1508"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1508"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1508"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1510,
        "date": "2021-02-10T06:14:46",
        "date_gmt": "2021-02-10T06:14:46",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1510"
        },
        "modified": "2021-02-10T06:14:46",
        "modified_gmt": "2021-02-10T06:14:46",
        "slug": "testng-plug-with-ant",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-plug-with-ant\/",
        "title": {
            "rendered": "TestNG &#8211; Plug with ANT"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will demonstrate how to run TestNG using ANT. Let&#8217;s follow the steps given below \u2212<\/p>\n\n\n\n<h2>Step 1: Download Apache Ant<\/h2>\n\n\n\n<p>Download the latest version of&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/ant.apache.org\/bindownload.cgi\">Apache Ant<\/a><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive Name<\/th><\/tr><tr><td>Windows<\/td><td>apache-ant-1.8.4-bin.zip<\/td><\/tr><tr><td>Linux<\/td><td>apache-ant-1.8.4-bin.tar.gz<\/td><\/tr><tr><td>Mac<\/td><td>apache-ant-1.8.4-bin.tar.gz<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 2: Set Ant Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>ANT_HOME<\/strong>&nbsp;environment variable to point to the base directory location, where ANT libraries are stored on your machine. Let\u2019s assume we&#8217;ve stored the Ant libraries in the folder apache-ant-1.8.4 folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable ANT_HOME to C:\\Program Files\\Apache Software Foundation\\apache-ant-1.8.4<\/td><\/tr><tr><td>Linux<\/td><td>Export ANT_HOME=\/usr\/local\/apache-ant-1.8.4<\/td><\/tr><tr><td>Mac<\/td><td>Export ANT_HOME=\/Library\/apache-ant-1.8.4<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append Ant compiler location to System Path as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Description<\/th><\/tr><tr><td>Windows<\/td><td>Append the string %ANT_HOME\\bin at the end of the system variable, Path.<\/td><\/tr><tr><td>Linux<\/td><td>Export PATH=$PATH:$ANT_HOME\/bin\/<\/td><\/tr><tr><td>Mac<\/td><td>Not required.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 3: Download TestNG Archive<\/h2>\n\n\n\n<p>Download the required jar files&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http:\/\/www.testng.org\/\">http:\/\/www.testng.org.<\/a><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>testng-6.8.jar<\/td><\/tr><tr><td>Linux<\/td><td>testng-6.8.jar<\/td><\/tr><tr><td>Mac<\/td><td>testng-6.8.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 4: Create Project Structure<\/h2>\n\n\n\n<ul><li>Create a folder&nbsp;<strong>TestNGWithAnt<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE<\/strong>.<\/li><li>Create a folder&nbsp;<strong>src<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE&gt;TestNGWithAnt<\/strong>.<\/li><li>Create a folder&nbsp;<strong>test<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE&gt;TestNGWithAnt<\/strong>.<\/li><li>Create a folder&nbsp;<strong>lib<\/strong>&nbsp;in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE&gt;TestNGWithAnt<\/strong>.<\/li><li>Create&nbsp;<strong>MessageUtil<\/strong>&nbsp;class in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE&gt;TestNGWithAnt&gt;src<\/strong>&nbsp;folder.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\r\n* This class prints the given message on console.\r\n*\/\r\n\r\npublic class MessageUtil {\r\n\r\n   private String message;\r\n\r\n   \/\/Constructor\r\n   \/\/@param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message; \r\n   }\r\n\r\n   \/\/ prints the message\r\n   public void printMessage() {\r\n      System.out.println(message);\r\n      return message;\r\n   }   \r\n\r\n   \/\/ add \"Hi!\" to the message\r\n   public String salutationMessage() {\r\n      message = \"Hi!\" + message;\r\n      System.out.println(message);\r\n      return message;\r\n   }   \r\n}  \t<\/code><\/pre>\n\n\n\n<ul><li>Create TestMessageUtil class in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE&gt;TestNGWithAnt&gt;src<\/strong>&nbsp;folder.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\n\r\npublic class TestMessageUtil {\r\n   String message = \"Manisha\";\t\r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\r\n   @Test\r\n   public void testPrintMessage() {\t\r\n      System.out.println(\"Inside testPrintMessage()\");     \r\n      Assert.assertEquals(message,messageUtil.printMessage());\r\n   }\r\n\r\n   @Test\r\n   public void testSalutationMessage() {\r\n      System.out.println(\"Inside testSalutationMessage()\");\r\n      message = \"Hi!\" + \"Manisha\";\r\n      Assert.assertEquals(message,messageUtil.salutationMessage());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<ul><li>Copy testng-6.8.jar in&nbsp;<strong>C:\\&gt;TestNG_WORKSPACE&gt;TestNGWithAnt&gt;lib<\/strong>&nbsp;folder.<\/li><\/ul>\n\n\n\n<h2>Create ANT build.xml<\/h2>\n\n\n\n<p>First, we need to define the TestNG Ant task as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;taskdef name = \"testng\" classname = \"org.testng.TestNGAntTask\">\r\n   &lt;classpath>\r\n      &lt;pathelement location = \"lib\/testng-6.8.jar\"\/>\r\n   &lt;\/classpath>\r\n&lt;\/taskdef><\/code><\/pre>\n\n\n\n<p>Then, we&#8217;ll be using&nbsp;<strong>&lt;testng&gt;<\/strong>&nbsp;task in Ant to execute our TestNG test cases.<\/p>\n\n\n\n<p>The&nbsp;<strong>build.xml<\/strong>&nbsp;file is as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;project name = \"TestNGTest\" default = \"test\" basedir = \".\">\r\n\r\n   &lt;!-- Define &lt;testng> task -->\r\n\r\n   &lt;taskdef name = \"testng\" classname = \"org.testng.TestNGAntTask\">\r\n      &lt;classpath>\r\n         &lt;pathelement location = \"lib\/testng-6.8.jar\"\/>\r\n      &lt;\/classpath>\r\n   &lt;\/taskdef>\r\n\r\n   &lt;property name = \"testdir\" location = \"test\" \/>\r\n   &lt;property name = \"srcdir\" location = \"src\" \/>\r\n   &lt;property name = \"libdir\" location = \"lib\" \/>\r\n   &lt;property name = \"full-compile\" value=\"true\" \/>\r\n   \r\n   &lt;path id = \"classpath.base\"\/>\r\n   &lt;path id = \"classpath.test\">\r\n   \r\n   &lt;fileset dir = \"${libdir}\">\r\n      &lt;include name = \"**\/*.jar\" \/>\r\n   &lt;\/fileset>\r\n   \r\n   &lt;pathelement location = \"${testdir}\" \/>\r\n   &lt;pathelement location = \"${srcdir}\" \/>\r\n   \r\n   &lt;path refid = \"classpath.base\" \/>\r\n   &lt;\/path>\r\n   \r\n   &lt;target name = \"clean\" >\r\n      &lt;delete verbose=\"${full-compile}\">\r\n         &lt;fileset dir = \"${testdir}\" includes=\"**\/*.class\" \/>\r\n      &lt;\/delete>\r\n   &lt;\/target>\r\n   \r\n   &lt;target name = \"compile\" depends=\"clean\">\r\n      &lt;javac srcdir = \"${srcdir}\" destdir = \"${testdir}\" verbose=\"${full-compile}\">\r\n         &lt;classpath refid = \"classpath.test\"\/>\r\n      &lt;\/javac>\r\n   &lt;\/target>\r\n   \r\n   &lt;target name = \"test\" depends=\"compile\">\r\n      &lt;testng outputdir = \"${testdir}\" classpathref=\"classpath.test\"> \r\n         &lt;xmlfileset dir = \"${srcdir}\" includes=\"testng.xml\"\/> \r\n      &lt;\/testng>\r\n   &lt;\/target>\r\n   \r\n&lt;\/project><\/code><\/pre>\n\n\n\n<p>Run the following Ant command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\TestNG_WORKSPACE\\TestNGWithAnt>ant<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>test:\r\n   &#91;testng] &#91;TestNG] Running:\r\n   &#91;testng]   C:\\TestNG_WORKSPACE\\TestNGWithAnt\\src\\testng.xml<\/code><\/pre>\n\n\n<p>[testng]<\/p>\n\n\n\n<p>[testng] Inside testPrintMessage() [testng] Manisha [testng] Inside testSalutationMessage() [testng] Hi!Manisha<\/p>\n\n\n<p>[testng]<\/p>\n\n\n\n<p>[testng] =============================================== [testng] Plug ANT test Suite [testng] Total tests run: 2, Failures: 0, Skips: 0 [testng] ===============================================<\/p>\n\n\n<p>[testng]<\/p>\n\n\n\n<p>BUILD SUCCESSFUL Total time: 1 second<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will demonstrate how to run TestNG using ANT. Let&#8217;s follow the steps given below \u2212 Step 1: Download Apache Ant Download the latest version of&nbsp;Apache Ant OS Archive Name Windows apache-ant-1.8.4-bin.zip Linux apache-ant-1.8.4-bin.tar.gz Mac apache-ant-1.8.4-bin.tar.gz Step 2: Set Ant Environment Set the&nbsp;ANT_HOME&nbsp;environment variable to point to the base directory location, where [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1510"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1510"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1510\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1511,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1510\/revisions\/1511"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1510"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1510"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1510"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1512,
        "date": "2021-02-10T06:16:11",
        "date_gmt": "2021-02-10T06:16:11",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1512"
        },
        "modified": "2021-02-10T06:16:11",
        "modified_gmt": "2021-02-10T06:16:11",
        "slug": "testng-plug-with-eclipse",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/testng-plug-with-eclipse\/",
        "title": {
            "rendered": "TestNG &#8211; Plug with Eclipse"
        },
        "content": {
            "rendered": "\n<p>To set up TestNG with Eclipse, follow the steps given below \u2212<\/p>\n\n\n\n<h2>Step 1: Download TestNG Archive<\/h2>\n\n\n\n<p>Download the latest version of TestNG jar file from&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http:\/\/www.testng.org\/\">http:\/\/www.testng.org<\/a><\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>testng-6.8.jar<\/td><\/tr><tr><td>Linux<\/td><td>testng-6.8.jar<\/td><\/tr><tr><td>Mac<\/td><td>testng-6.8.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>We assume you have copied the above JAR file in C:\\&gt;TestNG folder.<\/p>\n\n\n\n<h2>Step 2: Set Eclipse environment<\/h2>\n\n\n\n<ul><li>Open eclipse \u2192 right click on the project and go to property \u2192 Build Path \u2192 Configure Build Path and add the testng-6.8.jar in the libraries using&nbsp;<em>Add External Jar<\/em>&nbsp;button.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/testng\/images\/eclipse_properties.jpg\" alt=\"Add testng-6.8.jar in liraries.\"\/><\/figure>\n\n\n\n<ul><li>We assume that your Eclipse has inbuilt TestNG plug-in; if it is not available, then please get the latest version using the update site.<ul><li>In your Eclipse IDE, select&nbsp;<em>Help \/ Software updates \/ Find and Install<\/em>.<\/li><li><em>Search for new features to install.<\/em><\/li><li><em>New remote site.<\/em><\/li><li>For Eclipse 3.4 and above, enter&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http:\/\/beust.com\/eclipse\">http:\/\/beust.com\/eclipse<\/a>.<\/li><li>For Eclipse 3.3 and below, enter&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http:\/\/beust.com\/eclipse1\">http:\/\/beust.com\/eclipse1<\/a>.<\/li><li>Make sure the check box next to the URL is checked and click&nbsp;<em>Next<\/em>.<\/li><li>Eclipse will then guide you through the process.<\/li><\/ul><\/li><\/ul>\n\n\n\n<p>Now, your Eclipse is ready for the development of TestNG test cases.<\/p>\n\n\n\n<h2>Step 3: Verify TestNG Installation in Eclipse<\/h2>\n\n\n\n<ul><li>Create a project TestNGProject in Eclipse at any location.<\/li><li>Create a class MessageUtil to test in the project.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\/*\r\n* This class prints the given message on console.\r\n*\/\r\n\r\npublic class MessageUtil {\r\n\r\n   private String message;\r\n\r\n   \/\/Constructor\r\n   \/\/@param message to be printed\r\n   public MessageUtil(String message) {\r\n      this.message = message;\r\n   }\r\n\r\n   \/\/ prints the message\r\n   public String printMessage() {\r\n      System.out.println(message);\r\n      return message;\r\n   }   \r\n} <\/code><\/pre>\n\n\n\n<ul><li>Create a test class TestNGExample in the project.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>   \r\nimport org.testng.Assert;\r\nimport org.testng.annotations.Test;\r\n\r\npublic class TestNGExample {\r\n   String message = \"Hello World\"; \r\n   MessageUtil messageUtil = new MessageUtil(message);\r\n\r\n   @Test\r\n   public void testPrintMessage() {   \r\n      Assert.assertEquals(message,messageUtil.printMessage());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>The project structure should be as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/testng\/images\/proj_struct.jpg\" alt=\"Project Structure\"\/><\/figure>\n\n\n\n<p>Finally, verify the output of the program by right-clicking on the program and running as TestNG.<\/p>\n\n\n\n<p>Verify the result.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/testng\/images\/test_run.jpg\" alt=\"TestNG result success.\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>To set up TestNG with Eclipse, follow the steps given below \u2212 Step 1: Download TestNG Archive Download the latest version of TestNG jar file from&nbsp;http:\/\/www.testng.org OS Archive name Windows testng-6.8.jar Linux testng-6.8.jar Mac testng-6.8.jar We assume you have copied the above JAR file in C:\\&gt;TestNG folder. Step 2: Set Eclipse environment Open eclipse \u2192 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            57
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1512"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1512"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1512\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1513,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1512\/revisions\/1513"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1512"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1512"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1512"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]