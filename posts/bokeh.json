[{"id":3886,"date":"2020-07-06T16:55:27","date_gmt":"2020-07-06T16:55:27","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1610"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"introduction-11","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-11/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>Bokeh is a data visualization library for Python. Unlike Matplotlib and Seaborn, they are also Python packages for data visualization, Bokeh renders its plots using HTML and JavaScript. Hence, it proves to be extremely useful for developing web based dashboards.</p>\n\n\n\n<p>The Bokeh project is sponsored by NumFocus https://numfocus.org/. NumFocus also supports PyData, an educational program, involved in development of other important tools such as NumPy, Pandas and more. Bokeh can easily connect with these tools and produce interactive plots, dashboards and data applications.</p>\n\n\n\n<h2>Features</h2>\n\n\n\n<p>Bokeh primarily converts the data source into a JSON file which is used as input for BokehJS, a JavaScript library, which in turn is written in TypeScript and renders the visualizations in modern browsers.</p>\n\n\n\n<p>Some of the&nbsp;<strong>important features of Bokeh</strong>&nbsp;are as follows −</p>\n\n\n\n<h3>Flexibility</h3>\n\n\n\n<p>Bokeh is useful for common plotting requirements as well as custom and complex use-cases.</p>\n\n\n\n<h3>Productivity</h3>\n\n\n\n<p>Bokeh can easily interact with other popular Pydata tools such as Pandas and Jupyter notebook.</p>\n\n\n\n<h3>Interactivity</h3>\n\n\n\n<p>This is an important advantage of Bokeh over Matplotlib and Seaborn, both produce static plots. Bokeh creates interactive plots that change when the user interacts with them. You can give your audience a wide range of options and tools for inferring and looking at data from various angles so that user can perform “what if” analysis.</p>\n\n\n\n<h3>Powerful</h3>\n\n\n\n<p>By adding custom JavaScript, it is possible to generate visualizations for specialised use-cases.</p>\n\n\n\n<h3>Sharable</h3>\n\n\n\n<p>Plots can be embedded in output of&nbsp;<strong>Flask</strong>&nbsp;or&nbsp;<strong>Django</strong>&nbsp;enabled web applications. They can also be rendered in</p>\n\n\n\n<p>Jupyternotebooks.</p>\n","protected":false},"excerpt":{"rendered":"<p>Bokeh is a data visualization library for Python. Unlike Matplotlib and Seaborn, they are also Python packages for data visualization, Bokeh renders its plots using HTML and JavaScript. Hence, it proves to be extremely useful for developing web based dashboards. The Bokeh project is sponsored by NumFocus https://numfocus.org/. NumFocus also supports PyData, an educational program, involved in [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3886"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3886"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3886/revisions"}],"predecessor-version":[{"id":4281,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3886/revisions/4281"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3886"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3886"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3886"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3885,"date":"2020-07-06T16:56:19","date_gmt":"2020-07-06T16:56:19","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1609"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"environment-setup-5","status":"publish","type":"post","link":"https://python3.foobrdigital.com/environment-setup-5/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>Bokeh can be installed on&nbsp;<strong>CPython</strong>&nbsp;versions&nbsp;<strong>2.7</strong>&nbsp;and&nbsp;<strong>3.5+</strong>&nbsp;only both with Standard distribution and Anaconda distribution. Current version of Bokeh at the time of writing this tutorial is ver. 1.3.4. Bokeh package has the following dependencies −</p>\n\n\n\n<ul><li>jinja2 &gt;= 2.7</li><li>numpy &gt;= 1.7.1</li><li>packaging &gt;= 16.8</li><li>pillow &gt;= 4.0</li><li>python-dateutil &gt;= 2.1</li><li>pyyaml &gt;= 3.10</li><li>six &gt;= 1.5.2</li><li>tornado &gt;= 4.3</li></ul>\n\n\n\n<p>Generally, above packages are installed automatically when Bokeh is installed using Python’s built-in Package manager PIP as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip3 install bokeh\n</code></pre>\n\n\n\n<p>If you are using Anaconda distribution, use conda package manager as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>conda install bokeh\n</code></pre>\n\n\n\n<p>In addition to the above dependencies, you may require additional packages such as pandas, psutil, etc., for specific purposes.</p>\n\n\n\n<p>To verify if Bokeh has been successfully installed, import bokeh package in Python terminal and check its version −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>>>> import bokeh\n>>> bokeh.__version__\n'1.3.4'</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Bokeh can be installed on&nbsp;CPython&nbsp;versions&nbsp;2.7&nbsp;and&nbsp;3.5+&nbsp;only both with Standard distribution and Anaconda distribution. Current version of Bokeh at the time of writing this tutorial is ver. 1.3.4. Bokeh package has the following dependencies − jinja2 &gt;= 2.7 numpy &gt;= 1.7.1 packaging &gt;= 16.8 pillow &gt;= 4.0 python-dateutil &gt;= 2.1 pyyaml &gt;= 3.10 six &gt;= 1.5.2 tornado [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3885"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3885"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3885/revisions"}],"predecessor-version":[{"id":4280,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3885/revisions/4280"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3885"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3885"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3885"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3899,"date":"2020-07-06T16:59:15","date_gmt":"2020-07-06T16:59:15","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1623"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"getting-started","status":"publish","type":"post","link":"https://python3.foobrdigital.com/getting-started/","title":{"rendered":"Getting Started"},"content":{"rendered":"\n<p>Creating a simple line plot between two numpy arrays is very simple. To begin with, import following functions from <strong>bokeh.plotting</strong> modules −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\n</code></pre>\n\n\n\n<p>The&nbsp;<strong>figure()</strong>&nbsp;function creates a new figure for plotting.</p>\n\n\n\n<p>The&nbsp;<strong>output_file()</strong>&nbsp;function is used to specify a HTML file to store output.</p>\n\n\n\n<p>The&nbsp;<strong>show()</strong>&nbsp;function displays the Bokeh figure in browser on in notebook.</p>\n\n\n\n<p>Next, set up two numpy arrays where second array is sine value of first.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nimport math\nx = np.arange(0, math.pi*2, 0.05)\ny = np.sin(x)</code></pre>\n\n\n\n<p>To obtain a Bokeh Figure object, specify the title and x and y axis labels as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>p = figure(title = \"sine wave example\", x_axis_label = 'x', y_axis_label = 'y')</code></pre>\n\n\n\n<p>The Figure object contains a line() method that adds a line glyph to the figure. It needs data series for x and y axes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>p.line(x, y, legend = \"sine\", line_width = 2)\n</code></pre>\n\n\n\n<p>Finally, set the output file and call show() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>output_file(\"sine.html\")\nshow(p)\n﻿</code></pre>\n\n\n\n<p>This will render the line plot in ‘sine.html’ and will be displayed in browser.</p>\n\n\n\n<h3>Complete code and its output is as follows</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nimport numpy as np\nimport math\nx = np.arange(0, math.pi*2, 0.05)\ny = np.sin(x)\noutput_file(\"sine.html\")\np = figure(title = \"sine wave example\", x_axis_label = 'x', y_axis_label = 'y')\np.line(x, y, legend = \"sine\", line_width = 2)\nshow(p)</code></pre>\n\n\n\n<h3>Output on browser</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/figure.jpg\" alt=\"Create model\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Creating a simple line plot between two numpy arrays is very simple. To begin with, import following functions from bokeh.plotting modules − The&nbsp;figure()&nbsp;function creates a new figure for plotting. The&nbsp;output_file()&nbsp;function is used to specify a HTML file to store output. The&nbsp;show()&nbsp;function displays the Bokeh figure in browser on in notebook. Next, set up two numpy arrays where [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3899"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3899"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3899/revisions"}],"predecessor-version":[{"id":4279,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3899/revisions/4279"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3899"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3899"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3899"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3891,"date":"2020-07-06T17:00:17","date_gmt":"2020-07-06T17:00:17","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1615"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"jupyter-notebook","status":"publish","type":"post","link":"https://python3.foobrdigital.com/jupyter-notebook/","title":{"rendered":"Jupyter Notebook"},"content":{"rendered":"\n<p>Displaying Bokeh figure in Jupyter notebook is very similar to the above. The only change you need to make is to import output_notebook instead of output_file from bokeh.plotting module.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_notebook, show\n</code></pre>\n\n\n\n<p>Call to output_notebook() function sets Jupyter notebook’s output cell as the destination for show() function as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>output_notebook()\nshow(p)</code></pre>\n\n\n\n<p>Enter the code in a notebook cell and run it. The sine wave will be displayed inside the notebook.</p>\n","protected":false},"excerpt":{"rendered":"<p>Displaying Bokeh figure in Jupyter notebook is very similar to the above. The only change you need to make is to import output_notebook instead of output_file from bokeh.plotting module. Call to output_notebook() function sets Jupyter notebook’s output cell as the destination for show() function as shown below − Enter the code in a notebook cell [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3891"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3891"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3891/revisions"}],"predecessor-version":[{"id":4278,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3891/revisions/4278"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3891"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3891"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3891"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3882,"date":"2020-07-06T17:04:24","date_gmt":"2020-07-06T17:04:24","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1606"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"basic-concepts","status":"publish","type":"post","link":"https://python3.foobrdigital.com/basic-concepts/","title":{"rendered":"Basic Concepts"},"content":{"rendered":"\n<p>Bokeh package offers two interfaces using which various plotting operations can be performed.</p>\n\n\n\n<h3>bokeh.models</h3>\n\n\n\n<p>This module is a low level interface. It provides great deal of flexibility to the application developer in developing visualizations. A Bokeh plot results in an object containing visual and data aspects of a scene which is used by BokehJS library. The low-level objects that comprise a Bokeh scene graph are called Models.</p>\n\n\n\n<h3>bokeh.plotting</h3>\n\n\n\n<p>This is a higher level interface that has functionality for composing visual glyphs. This module contains definition of Figure class. It actually is a subclass of plot class defined in bokeh.models module.</p>\n\n\n\n<p>Figure class simplifies plot creation. It contains various methods to draw different vectorized graphical glyphs. Glyphs are the building blocks of Bokeh plot such as lines, circles, rectangles, and other shapes.</p>\n\n\n\n<h3>bokeh.application</h3>\n\n\n\n<p>Bokeh package Application class which is a lightweight factory for creating Bokeh Documents. A Document is a container for Bokeh Models to be reflected to the client side BokehJS library.</p>\n\n\n\n<h3>bokeh.server</h3>\n\n\n\n<p>It provides customizable Bokeh Server Tornadocore application. Server is used to share and publish interactive plots and apps to an audience of your choice.</p>\n","protected":false},"excerpt":{"rendered":"<p>Bokeh package offers two interfaces using which various plotting operations can be performed. bokeh.models This module is a low level interface. It provides great deal of flexibility to the application developer in developing visualizations. A Bokeh plot results in an object containing visual and data aspects of a scene which is used by BokehJS library. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3882"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3882"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3882/revisions"}],"predecessor-version":[{"id":4277,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3882/revisions/4277"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3882"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3882"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3882"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3897,"date":"2020-07-06T17:06:57","date_gmt":"2020-07-06T17:06:57","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1621"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"plots-with-glyphs","status":"publish","type":"post","link":"https://python3.foobrdigital.com/plots-with-glyphs/","title":{"rendered":"Plots with Glyphs"},"content":{"rendered":"\n<p>Any plot is usually made up of one or many geometrical shapes such as&nbsp;<strong>line, circle, rectangle,</strong>&nbsp;etc. These shapes have visual information about the corresponding set of data. In Bokeh terminology, these geometrical shapes are called gylphs. Bokeh plots constructed using&nbsp;<strong>bokeh.plotting interface</strong>&nbsp;use a default set of tools and styles. However, it is possible to customize the styles using available plotting tools.</p>\n\n\n\n<h2>Types of Plots</h2>\n\n\n\n<p>Different types of plots created using glyphs are as given below −</p>\n\n\n\n<h3>Line plot</h3>\n\n\n\n<p>This type of plot is useful for visualizing the movements of points along the x-and y-axes in the form of a line. It is used to perform time series analytics.</p>\n\n\n\n<h3>Bar plot</h3>\n\n\n\n<p>This is typically useful for indicating the count of each category of a particular column or field in your dataset.</p>\n\n\n\n<h3>Patch plot</h3>\n\n\n\n<p>This plot indicates a region of points in a particular shade of color. This type of plot is used to distinguish different groups within the same dataset.</p>\n\n\n\n<h3>Scatter plot</h3>\n\n\n\n<p>This type of plot is used to visualize relationship between two variables and to indicate the strength of correlation between them.</p>\n\n\n\n<p>Different glyph plots are formed by calling appropriate method of Figure class. The Figure object is obtained by following constructor −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure\nfigure(**kwargs)</code></pre>\n\n\n\n<p>The Figure object can be customised by various keyword arguments.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Title</th><th>Set the title for the plot</th></tr><tr><td>1</td><td>x_axis_label</td><td>Set title of x axis</td></tr><tr><td>2</td><td>y_axis_label</td><td>Set title for y axis</td></tr><tr><td>3</td><td>plot_width</td><td>Set width of figure</td></tr><tr><td>4</td><td>plot_height</td><td>Set height of figure</td></tr></tbody></table></figure>\n\n\n\n<h2>Line plot</h2>\n\n\n\n<p>The <strong>line() method</strong> of Figure object adds a line glyph to the Bokeh figure. It needs x and y parameters as data arrays for showing their linear relationship.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, show\nfig = figure()\nfig.line(x,y)\nshow(fig)</code></pre>\n\n\n\n<p>Following code renders a simple line plot between two sets of values in the form Python list objects −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nx = &#91;1,2,3,4,5]\ny = &#91;2,4,6,8,10]\noutput_file('line.html')\nfig = figure(title = 'Line Plot example', x_axis_label = 'x', y_axis_label = 'y')\nfig.line(x,y)\nshow(fig)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/line_plot.jpg\" alt=\"Line plot\"/></figure>\n\n\n\n<h2>Bar plot</h2>\n\n\n\n<p>The figure object has two different methods for constructing bar plot</p>\n\n\n\n<h3>hbar()</h3>\n\n\n\n<p>The bars are shown horizontally across plot width. The&nbsp;<strong>hbar() method</strong>&nbsp;has the following parameters −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>y</th><th>The y coordinates of the centers of the horizontal bars.</th></tr><tr><td>1</td><td>height</td><td>The heights of the vertical bars.</td></tr><tr><td>2</td><td>right</td><td>The x coordinates of the right edges.</td></tr><tr><td>3</td><td>left</td><td>The x coordinates of the left edges.</td></tr></tbody></table></figure>\n\n\n\n<p>Following code is an example of <strong>horizontal bar</strong> using Bokeh.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfig = figure(plot_width = 400, plot_height = 200)\nfig.hbar(y = &#91;2,4,6], height = 1, left = 0, right = &#91;1,2,3], color = \"Cyan\")\noutput_file('bar.html')\nshow(fig)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/hbar_plot.jpg\" alt=\"HBar plot\"/></figure>\n\n\n\n<h3>vbar()</h3>\n\n\n\n<p>The bars are shown vertically across plot height. The&nbsp;<strong>vbar() method</strong>&nbsp;has following parameters −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>x</th><th>The x-coordinates of the centers of the vertical bars.</th></tr><tr><td>1</td><td>width</td><td>The widths of the vertical bars.</td></tr><tr><td>2</td><td>top</td><td>The y-coordinates of the top edges.</td></tr><tr><td>3</td><td>bottom</td><td>The y-coordinates of the bottom edges.</td></tr></tbody></table></figure>\n\n\n\n<p>Following code displays <strong>vertical bar plot</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfig = figure(plot_width = 200, plot_height = 400)\nfig.vbar(x = &#91;1,2,3], width = 0.5, bottom = 0, top = &#91;2,4,6], color = \"Cyan\")\noutput_file('bar.html')\nshow(fig)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/vbar_plot.jpg\" alt=\"VBar plot\"/></figure>\n\n\n\n<h2>Patch plot</h2>\n\n\n\n<p>A plot which shades a region of space in a specific color to show a region or a group having similar properties is termed as a patch plot in Bokeh. Figure object has patch() and patches() methods for this purpose.</p>\n\n\n\n<h3>patch()</h3>\n\n\n\n<p>This method adds patch glyph to given figure. The method has the following arguments −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>x</td><td>The x-coordinates for the points of the patch.</td></tr><tr><td>2</td><td>y</td><td>The y-coordinates for the points of the patch.</td></tr></tbody></table></figure>\n\n\n\n<p>A simple <strong>patch plot</strong> is obtained by the following Python code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\np = figure(plot_width = 300, plot_height = 300)\np.patch(x = &#91;1, 3,2,4], y = &#91;2,3,5,7], color = \"green\")\noutput_file('patch.html')\nshow(p)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/path.jpg\" alt=\"Path\"/></figure>\n\n\n\n<h3>patches()</h3>\n\n\n\n<p>This method is used to draw multiple polygonal patches. It needs following arguments −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>xs</td><td>The x-coordinates for all the patches, given as a “list of lists”.</td></tr><tr><td>2</td><td>ys</td><td>The y-coordinates for all the patches, given as a “list of lists”.</td></tr></tbody></table></figure>\n\n\n\n<p>As an example of patches() method, run the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nxs = &#91;&#91;5,3,4], &#91;2,4,3], &#91;2,3,5,4]]\nys = &#91;&#91;6,4,2], &#91;3,6,7], &#91;2,4,7,8]]\nfig = figure()\nfig.patches(xs, ys, fill_color = &#91;'red', 'blue', 'black'], line_color = 'white')\noutput_file('patch_plot.html')\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/patches.jpg\" alt=\"Patches\"/></figure>\n\n\n\n<h2>Scatter Markers</h2>\n\n\n\n<p>Scatter plots are very commonly used to determine the bi-variate relationship between two variables. The enhanced interactivity is added to them using Bokeh. Scatter plot is obtained by calling scatter() method of Figure object. It uses the following parameters −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>x</td><td>values or field names of center x coordinates</td></tr><tr><td>2</td><td>y</td><td>values or field names of center y coordinates</td></tr><tr><td>3</td><td>size</td><td>values or field names of sizes in screen units</td></tr><tr><td>4</td><td>marker</td><td>values or field names of marker types</td></tr><tr><td>5</td><td>color</td><td>set fill and line color</td></tr></tbody></table></figure>\n\n\n\n<p>Following marker type constants are defined in Bokeh: −</p>\n\n\n\n<ul><li>Asterisk</li><li>Circle</li><li>CircleCross</li><li>CircleX</li><li>Cross</li><li>Dash</li><li>Diamond</li><li>DiamondCross</li><li>Hex</li><li>InvertedTriangle</li><li>Square</li><li>SquareCross</li><li>SquareX</li><li>Triangle</li><li>X</li></ul>\n\n\n\n<p>Following Python code generates scatter plot with circle marks.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfig = figure()\nfig.scatter(&#91;1, 4, 3, 2, 5], &#91;6, 5, 2, 4, 7], marker = \"circle\", size = 20, fill_color = \"grey\")\noutput_file('scatter.html')\nshow(fig)</code></pre>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>Any plot is usually made up of one or many geometrical shapes such as&nbsp;line, circle, rectangle,&nbsp;etc. These shapes have visual information about the corresponding set of data. In Bokeh terminology, these geometrical shapes are called gylphs. Bokeh plots constructed using&nbsp;bokeh.plotting interface&nbsp;use a default set of tools and styles. However, it is possible to customize the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3897"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3897"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3897/revisions"}],"predecessor-version":[{"id":4276,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3897/revisions/4276"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3897"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3897"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3897"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3892,"date":"2020-07-06T17:08:15","date_gmt":"2020-07-06T17:08:15","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1616"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"area-plots","status":"publish","type":"post","link":"https://python3.foobrdigital.com/area-plots/","title":{"rendered":"Area Plots"},"content":{"rendered":"\n<p>Area plots are filled regions between two series that share a common index. Bokeh&#8217;s Figure class has two methods as follows −</p>\n\n\n\n<h2>varea()</h2>\n\n\n\n<p>Output of the varea() method is a vertical directed area that has one x coordinate array, and two y coordinate arrays, y1 and y2, which will be filled between.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>x</td><td>The x-coordinates for the points of the area.</td></tr><tr><td>2</td><td>y1</td><td>The y-coordinates for the points of one side of the area.</td></tr><tr><td>3</td><td>y2</td><td>The y-coordinates for the points of the other side of the area.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfig = figure()\nx = &#91;1, 2, 3, 4, 5]\ny1 = &#91;2, 6, 4, 3, 5]\ny2 = &#91;1, 4, 2, 2, 3]\nfig.varea(x = x,y1 = y1,y2 = y2)\noutput_file('area.html')\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/varea.jpg\" alt=\"varea\"/></figure>\n\n\n\n<h2>harea()</h2>\n\n\n\n<p>The harea() method on the other hand needs x1, x2 and y parameters.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>x1</td><td>The x-coordinates for the points of one side of the area.</td></tr><tr><td>2</td><td>x2</td><td>The x-coordinates for the points of the other side of the area.</td></tr><tr><td>3</td><td>y</td><td>The y-coordinates for the points of the area.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfig = figure()\ny = &#91;1, 2, 3, 4, 5]\nx1 = &#91;2, 6, 4, 3, 5]\nx2 = &#91;1, 4, 2, 2, 3]\nfig.harea(x1 = x1,x2 = x2,y = y)\noutput_file('area.html')\nshow(fig)</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Area plots are filled regions between two series that share a common index. Bokeh&#8217;s Figure class has two methods as follows − varea() Output of the varea() method is a vertical directed area that has one x coordinate array, and two y coordinate arrays, y1 and y2, which will be filled between. 1 x The [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3892"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3892"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3892/revisions"}],"predecessor-version":[{"id":4275,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3892/revisions/4275"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3892"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3892"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3892"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3900,"date":"2020-07-06T17:08:51","date_gmt":"2020-07-06T17:08:51","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1624"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"circle-glyphs","status":"publish","type":"post","link":"https://python3.foobrdigital.com/circle-glyphs/","title":{"rendered":"Circle Glyphs"},"content":{"rendered":"\n<p>The figure object has many methods using which vectorised glyphs of different shapes such as&nbsp;<strong>circle, rectangle, polygon,</strong>&nbsp;etc. can, be drawn.</p>\n\n\n\n<p>Following methods are available for drawing&nbsp;<strong>circle glyphs</strong>&nbsp;−</p>\n\n\n\n<h2>circle()</h2>\n\n\n\n<p>The&nbsp;<strong>circle()</strong>&nbsp;method adds a circle glyph to the figure and needs x and&nbsp;<strong>y</strong>&nbsp;coordinates of its center. Additionally, it can be configured with the help of parameters such as&nbsp;<strong>fill_color, line-color, line_width</strong>&nbsp;etc.</p>\n\n\n\n<h2>circle_cross()</h2>\n\n\n\n<p>The circle_cross() method adds circle glyph with a ‘+’ cross through the center.</p>\n\n\n\n<h2>circle_x()</h2>\n\n\n\n<p>The circle_x() method adds circle with an ‘X’ cross through the center.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Following example shows use of various circle glyphs added to Bokeh figure −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nplot = figure(plot_width = 300, plot_height = 300)\nplot.circle(x = &#91;1, 2, 3], y = &#91;3,7,5], size = 20, fill_color = 'red')\nplot.circle_cross(x = &#91;2,4,6], y = &#91;5,8,9], size = 20, fill_color = 'blue',fill_alpha = 0.2, line_width = 2)\nplot.circle_x(x = &#91;5,7,2], y = &#91;2,4,9], size = 20, fill_color = 'green',fill_alpha = 0.6, line_width = 2)\nshow(plot)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/circle_cross.jpg\" alt=\"circle cross\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The figure object has many methods using which vectorised glyphs of different shapes such as&nbsp;circle, rectangle, polygon,&nbsp;etc. can, be drawn. Following methods are available for drawing&nbsp;circle glyphs&nbsp;− circle() The&nbsp;circle()&nbsp;method adds a circle glyph to the figure and needs x and&nbsp;y&nbsp;coordinates of its center. Additionally, it can be configured with the help of parameters such as&nbsp;fill_color, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3900"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3900"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3900/revisions"}],"predecessor-version":[{"id":4274,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3900/revisions/4274"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3900"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3900"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3900"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3895,"date":"2020-07-06T17:10:07","date_gmt":"2020-07-06T17:10:07","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1619"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"oval-and-polygon","status":"publish","type":"post","link":"https://python3.foobrdigital.com/oval-and-polygon/","title":{"rendered":"Oval and Polygon"},"content":{"rendered":"\n<p>It is possible to render&nbsp;<strong>rectangle, ellipse and polygons</strong>&nbsp;in a Bokeh figure. The&nbsp;<strong>rect() method</strong>&nbsp;of Figure class adds a rectangle glyph based on x and y coordinates of center, width and height. The square() method on the other hand has size parameter to decide dimensions.</p>\n\n\n\n<p>The ellipse() and oval() methods adds an ellipse and oval glyph. They use similar signature to that of rect() having x, y,w and h parameters. Additionally, angle parameter determines rotation from horizontal.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following code shows use of different <strong>shape glyph methods</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfig = figure(plot_width = 300, plot_height = 300)\nfig.rect(x = 10,y = 10,width = 100, height = 50, width_units = 'screen', height_units = 'screen')\nfig.square(x = 2,y = 3,size = 80, color = 'red')\nfig.ellipse(x = 7,y = 6, width = 30, height = 10, fill_color = None, line_width = 2)\nfig.oval(x = 6,y = 6,width = 2, height = 1, angle = -0.4)\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/polygons.jpg\" alt=\"polygons\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>It is possible to render&nbsp;rectangle, ellipse and polygons&nbsp;in a Bokeh figure. The&nbsp;rect() method&nbsp;of Figure class adds a rectangle glyph based on x and y coordinates of center, width and height. The square() method on the other hand has size parameter to decide dimensions. The ellipse() and oval() methods adds an ellipse and oval glyph. They [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3895"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3895"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3895/revisions"}],"predecessor-version":[{"id":4273,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3895/revisions/4273"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3895"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3895"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3895"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3883,"date":"2020-07-06T17:11:25","date_gmt":"2020-07-06T17:11:25","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1607"},"modified":"2020-12-16T17:07:54","modified_gmt":"2020-12-16T17:07:54","slug":"wedges-and-arcs","status":"publish","type":"post","link":"https://python3.foobrdigital.com/wedges-and-arcs/","title":{"rendered":"Wedges and Arcs"},"content":{"rendered":"\n<p>The&nbsp;<strong>arc() method</strong>&nbsp;draws a simple line arc based on x and y coordinates, start and end angles and radius. Angles are given in radians whereas radius may be in screen units or data units. The wedge is a filled arc.</p>\n\n\n\n<p>The&nbsp;<strong>wedge() method</strong>&nbsp;has same properties as arc() method. Both methods have provision of optional direction property which may be clock or anticlock that determines the direction of arc/wedge rendering. The annular_wedge() function renders a filled area between to arcs of inner and outer radius.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Here is an example of <strong>arc</strong> and <strong>wedge glyphs</strong> added to Bokeh figure −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nimport math\nfig = figure(plot_width = 300, plot_height = 300)\nfig.arc(x = 3, y = 3, radius = 50, radius_units = 'screen', start_angle = 0.0, end_angle = math.pi/2)\nfig.wedge(x = 3, y = 3, radius = 30, radius_units = 'screen',\nstart_angle = 0, end_angle = math.pi, direction = 'clock')\nfig.annular_wedge(x = 3,y = 3, inner_radius = 100, outer_radius = 75,outer_radius_units = 'screen',\ninner_radius_units = 'screen',start_angle = 0.4, end_angle = 4.5,color = \"green\", alpha = 0.6)\nshow(fig)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/wedge_glyphs.jpg\" alt=\"wedge glyphs\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The&nbsp;arc() method&nbsp;draws a simple line arc based on x and y coordinates, start and end angles and radius. Angles are given in radians whereas radius may be in screen units or data units. The wedge is a filled arc. The&nbsp;wedge() method&nbsp;has same properties as arc() method. Both methods have provision of optional direction property which [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3883"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3883"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3883/revisions"}],"predecessor-version":[{"id":4272,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3883/revisions/4272"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3883"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3883"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3883"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3889,"date":"2020-07-06T17:12:37","date_gmt":"2020-07-06T17:12:37","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1613"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"specialized-curves","status":"publish","type":"post","link":"https://python3.foobrdigital.com/specialized-curves/","title":{"rendered":"Specialized Curves"},"content":{"rendered":"\n<p>The&nbsp;<strong>bokeh.plotting</strong>&nbsp;API supports methods for rendering following specialised curves −</p>\n\n\n\n<h2>beizer()</h2>\n\n\n\n<p>This method adds a Bézier curve to the figure object. A Bézier curve is a parametric curve used in computer graphics. Other uses include the design of computer fonts and animation, user interface design and for smoothing cursor trajectory.</p>\n\n\n\n<p>In vector graphics, Bézier curves are used to model smooth curves that can be scaled indefinitely. A &#8220;Path&#8221; is combination of linked Bézier curves.</p>\n\n\n\n<p>The beizer() method has following parameters which are defined −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>x0</td><td>The x-coordinates of the starting points.</td></tr><tr><td>2</td><td>y0</td><td>The y-coordinates of the starting points..</td></tr><tr><td>3</td><td>x1</td><td>The x-coordinates of the ending points.</td></tr><tr><td>4</td><td>y1</td><td>The y-coordinates of the ending points.</td></tr><tr><td>5</td><td>cx0</td><td>The x-coordinates of first control points.</td></tr><tr><td>6</td><td>cy0</td><td>The y-coordinates of first control points.</td></tr><tr><td>7</td><td>cx1</td><td>The x-coordinates of second control points.</td></tr><tr><td>8</td><td>cy1</td><td>The y-coordinates of second control points.</td></tr></tbody></table></figure>\n\n\n\n<p>Default value for all parameters is None.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Following code generates a HTML page showing a Bézier curve and parabola in Bokeh plot −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x = 2\ny = 4\nxp02 = x+0.4\nxp01 = x+0.1\nxm01 = x-0.1\nyp01 = y+0.2\nym01 = y-0.2\nfig = figure(plot_width = 300, plot_height = 300)\nfig.bezier(x0 = x, y0 = y, x1 = xp02, y1 = y, cx0 = xp01, cy0 = yp01,\ncx1 = xm01, cy1 = ym01, line_color = \"red\", line_width = 2)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/beizer.jpg\" alt=\"beizer\"/></figure>\n\n\n\n<h2>quadratic()</h2>\n\n\n\n<p>This method adds a&nbsp;<strong>parabola glyph</strong>&nbsp;to bokeh figure. The function has same parameters as beizer(), except&nbsp;<strong>cx0</strong>&nbsp;and&nbsp;<strong>cx1</strong>.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The code given below generates a quadratic curve.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x = 2\ny = 4\nxp02 = x + 0.3\nxp01 = x + 0.2\nxm01 = x - 0.4\nyp01 = y + 0.1\nym01 = y - 0.2\nx = x,\ny = y,\nxp02 = x + 0.4,\nxp01 = x + 0.1,\nyp01 = y + 0.2,\nfig.quadratic(x0 = x, y0 = y, x1 = x + 0.4, y1 = y + 0.01, cx = x + 0.1,\ncy = y + 0.2, line_color = \"blue\", line_width = 3)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/quadratic.jpg\" alt=\"quadratic\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The&nbsp;bokeh.plotting&nbsp;API supports methods for rendering following specialised curves − beizer() This method adds a Bézier curve to the figure object. A Bézier curve is a parametric curve used in computer graphics. Other uses include the design of computer fonts and animation, user interface design and for smoothing cursor trajectory. In vector graphics, Bézier curves are [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3889"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3889"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3889/revisions"}],"predecessor-version":[{"id":4271,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3889/revisions/4271"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3889"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3889"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3889"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3888,"date":"2020-07-06T17:14:39","date_gmt":"2020-07-06T17:14:39","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1612"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"setting-ranges","status":"publish","type":"post","link":"https://python3.foobrdigital.com/setting-ranges/","title":{"rendered":"Setting Ranges"},"content":{"rendered":"\n<p>Numeric ranges of data axes of a plot are automatically set by Bokeh taking into consideration the dataset under process. However, sometimes you may want to define the range of values on x and y axis explicitly. This is done by assigning x_range and y_range properties to a figure() function.</p>\n\n\n\n<p>These ranges are defined with the help of range1d() function.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>xrange = range1d(0,10)\n</code></pre>\n\n\n\n<p>To use this range object as x_range property, use the below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig = figure(x,y,x_range = xrange)</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Numeric ranges of data axes of a plot are automatically set by Bokeh taking into consideration the dataset under process. However, sometimes you may want to define the range of values on x and y axis explicitly. This is done by assigning x_range and y_range properties to a figure() function. These ranges are defined with [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3888"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3888"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3888/revisions"}],"predecessor-version":[{"id":4270,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3888/revisions/4270"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3888"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3888"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3888"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3893,"date":"2020-07-06T17:17:48","date_gmt":"2020-07-06T17:17:48","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1617"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"axes","status":"publish","type":"post","link":"https://python3.foobrdigital.com/axes/","title":{"rendered":"Axes"},"content":{"rendered":"\n<p>In this chapter, we shall discuss about various types of axes.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No</th><th>Axes</th><th>Description</th></tr><tr><td>1</td><td>Categorical Axes</td><td>The bokeh plots show numerical data along both x and y axes. In order to use categorical data along either of axes, we need to specify a FactorRange to specify categorical dimensions for one of them.</td></tr><tr><td>2</td><td>Log Scale Axes</td><td>If there exists a power law relationship between x and y data series, it is desirable to use log scales on both axes.</td></tr><tr><td>3</td><td>Twin Axes</td><td>It may be needed to show multiple axes representing varying ranges on a single plot figure. The figure object can be so configured by defining&nbsp;<strong>extra_x_range</strong>&nbsp;and&nbsp;<strong>extra_y_range</strong>&nbsp;properties</td></tr></tbody></table></figure>\n\n\n\n<h2>Categorical Axes</h2>\n\n\n\n<p>In the examples so far, the Bokeh plots show numerical data along both x and y axes. In order to use categorical data along either of axes, we need to specify a FactorRange to specify categorical dimensions for one of them. For example, to use strings in the given list for x axis −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>langs = &#91;'C', 'C++', 'Java', 'Python', 'PHP']\nfig = figure(x_range = langs, plot_width = 300, plot_height = 300)\n</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>With following example, a simple bar plot is displayed showing number of students enrolled for various courses offered.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nlangs = &#91;'C', 'C++', 'Java', 'Python', 'PHP']\nstudents = &#91;23,17,35,29,12]\nfig = figure(x_range = langs, plot_width = 300, plot_height = 300)\nfig.vbar(x = langs, top = students, width = 0.5)\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/categorical_axes.jpg\" alt=\"Categorical Axes\"/></figure>\n\n\n\n<p>To show each bar in different colour, set color property of vbar() function to list of color values.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cols = &#91;'red','green','orange','navy', 'cyan']\nfig.vbar(x = langs, top = students, color = cols,width=0.5)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/plot.jpg\" alt=\"plot\"/></figure>\n\n\n\n<p>To render a vertical (or horizontal) stacked bar using vbar_stack() or hbar_stack() function, set stackers property to list of fields to stack successively and source property to a dict object containing values corresponding to each field.</p>\n\n\n\n<p>In following example, sales is a dictionary showing sales figures of three products in three months.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nproducts = &#91;'computer','mobile','printer']\nmonths = &#91;'Jan','Feb','Mar']\nsales = {'products':products,\n   'Jan':&#91;10,40,5],\n   'Feb':&#91;8,45,10],\n   'Mar':&#91;25,60,22]}\ncols = &#91;'red','green','blue']#,'navy', 'cyan']\nfig = figure(x_range = products, plot_width = 300, plot_height = 300)\nfig.vbar_stack(months, x = 'products', source = sales, color = cols,width = 0.5)\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/sales_dictionary.jpg\" alt=\"sales dictionary\"/></figure>\n\n\n\n<p>A grouped bar plot is obtained by specifying a visual displacement for the bars with the help of dodge() function in&nbsp;<strong>bokeh.transform</strong>&nbsp;module.</p>\n\n\n\n<p>The <strong>dodge() function</strong> introduces a relative offset for each bar plot thereby achieving a visual impression of group. In following example, <strong>vbar() glyph</strong> is separated by an offset of 0.25 for each group of bars for a particular month.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfrom bokeh.transform import dodge\nproducts = &#91;'computer','mobile','printer']\nmonths = &#91;'Jan','Feb','Mar']\nsales = {'products':products,\n   'Jan':&#91;10,40,5],\n   'Feb':&#91;8,45,10],\n   'Mar':&#91;25,60,22]}\nfig = figure(x_range = products, plot_width = 300, plot_height = 300)\nfig.vbar(x = dodge('products', -0.25, range = fig.x_range), top = 'Jan',\n   width = 0.2,source = sales, color = \"red\")\nfig.vbar(x = dodge('products', 0.0, range = fig.x_range), top = 'Feb',\n   width = 0.2, source = sales,color = \"green\")\nfig.vbar(x = dodge('products', 0.25, range = fig.x_range), top = 'Mar',\n   width = 0.2,source = sales,color = \"blue\")\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/visual_displacement.jpg\" alt=\"visual displacement\"/></figure>\n\n\n\n<h2>Log Scale Axes</h2>\n\n\n\n<p>When values on one of the axes of a plot grow exponentially with linearly increasing values of another, it is often necessary to have the data on former axis be displayed on a log scale. For example, if there exists a power law relationship between x and y data series, it is desirable to use log scales on both axes.</p>\n\n\n\n<p>Bokeh.plotting API&#8217;s figure() function accepts x_axis_type and y_axis_type as arguments which may be specified as log axis by passing &#8220;log&#8221; for the value of either of these parameters.</p>\n\n\n\n<p>First figure shows plot between x and 10x on a linear scale. In second figure y_axis_type is set to &#8216;log&#8217;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nx = &#91;0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny = &#91;10**i for i in x]\nfig = figure(title = 'Linear scale example',plot_width = 400, plot_height = 400)\nfig.line(x, y, line_width = 2)\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/log_scale_axes.jpg\" alt=\"Log Scale Axes\"/></figure>\n\n\n\n<p>Now change figure() function to configure y_axis_type=’log’</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig = figure(title = 'Linear scale example',plot_width = 400, plot_height = 400, y_axis_type = \"log\")</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/linear_scale.jpg\" alt=\"Linear scale\"/></figure>\n\n\n\n<h2>Twin Axes</h2>\n\n\n\n<p>In certain situations, it may be needed to show multiple axes representing varying ranges on a single plot figure. The figure object can be so configured by defining&nbsp;<strong>extra_x_range</strong>&nbsp;and&nbsp;<strong>extra_y_range</strong>&nbsp;properties. While adding new glyph to the figure, these named ranges are used.</p>\n\n\n\n<p>We try to display a sine curve and a straight line in same plot. Both glyphs have y axes with different ranges. The x and y data series for sine curve and line are obtained by the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from numpy import pi, arange, sin, linspace\nx = arange(-2*pi, 2*pi, 0.1)\ny = sin(x)\ny2 = linspace(0, 100, len(y))</code></pre>\n\n\n\n<p>Here, plot between x and y represents sine relation and plot between x and y2 is a straight line. The Figure object is defined with explicit y_range and a line glyph representing sine curve is added as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig = figure(title = 'Twin Axis Example', y_range = (-1.1, 1.1))\nfig.line(x, y, color = \"red\")</code></pre>\n\n\n\n<p>We need an extra y range. It is defined as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig.extra_y_ranges = {\"y2\": Range1d(start = 0, end = 100)}</code></pre>\n\n\n\n<p>To add additional y axis on right side, use add_layout() method. Add a new line glyph representing x and y2 to the figure.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig.add_layout(LinearAxis(y_range_name = \"y2\"), 'right')\nfig.line(x, y2, color = \"blue\", y_range_name = \"y2\")</code></pre>\n\n\n\n<p>This will result in a plot with twin y axes. Complete code and the output is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from numpy import pi, arange, sin, linspace\nx = arange(-2*pi, 2*pi, 0.1)\ny = sin(x)\ny2 = linspace(0, 100, len(y))\nfrom bokeh.plotting import output_file, figure, show\nfrom bokeh.models import LinearAxis, Range1d\nfig = figure(title='Twin Axis Example', y_range = (-1.1, 1.1))\nfig.line(x, y, color = \"red\")\nfig.extra_y_ranges = {\"y2\": Range1d(start = 0, end = 100)}\nfig.add_layout(LinearAxis(y_range_name = \"y2\"), 'right')\nfig.line(x, y2, color = \"blue\", y_range_name = \"y2\")\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/twin_axes.jpg\" alt=\"Twin Axes\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we shall discuss about various types of axes. Sr.No Axes Description 1 Categorical Axes The bokeh plots show numerical data along both x and y axes. In order to use categorical data along either of axes, we need to specify a FactorRange to specify categorical dimensions for one of them. 2 Log [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3893"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3893"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3893/revisions"}],"predecessor-version":[{"id":4269,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3893/revisions/4269"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3893"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3893"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3893"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3890,"date":"2020-07-06T17:19:13","date_gmt":"2020-07-06T17:19:13","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1614"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"annotations-and-legends","status":"publish","type":"post","link":"https://python3.foobrdigital.com/annotations-and-legends/","title":{"rendered":"Annotations and Legends"},"content":{"rendered":"\n<p>Annotations are pieces of explanatory text added to the diagram. Bokeh plot can be annotated by way of specifying plot title, labels for x and y axes as well as inserting text labels anywhere in the plot area.</p>\n\n\n\n<p>Plot title as well as x and y axis labels can be provided in the Figure constructor itself.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig = figure(title, x_axis_label, y_axis_label)\n</code></pre>\n\n\n\n<p>In the following plot, these properties are set as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nimport numpy as np\nimport math\nx = np.arange(0, math.pi*2, 0.05)\ny = np.sin(x)\nfig = figure(title = \"sine wave example\", x_axis_label = 'angle', y_axis_label = 'sin')\nfig.line(x, y,line_width = 2)\nshow(p)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/annotations.jpg\" alt=\"Annotations\"/></figure>\n\n\n\n<p>The title’s text and axis labels can also be specified by assigning appropriate string values to corresponding properties of figure object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig.title.text = \"sine wave example\"\nfig.xaxis.axis_label = 'angle'\nfig.yaxis.axis_label = 'sin'</code></pre>\n\n\n\n<p>It is also possible to specify location, alignment, font and color of title.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig.title.align = \"right\"\nfig.title.text_color = \"orange\"\nfig.title.text_font_size = \"25px\"\nfig.title.background_fill_color = \"blue\"</code></pre>\n\n\n\n<p>Adding legends to the plot figure is very easy. We have to use legend property of any glyph method.</p>\n\n\n\n<p>Below we have three glyph curves in the plot with three different legends −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nimport numpy as np\nimport math\nx = np.arange(0, math.pi*2, 0.05)\nfig = figure()\nfig.line(x, np.sin(x),line_width = 2, line_color = 'navy', legend = 'sine')\nfig.circle(x,np.cos(x), line_width = 2, line_color = 'orange', legend = 'cosine')\nfig.square(x,-np.sin(x),line_width = 2, line_color = 'grey', legend = '-sine')\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/legends.jpg\" alt=\"Legends\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Annotations are pieces of explanatory text added to the diagram. Bokeh plot can be annotated by way of specifying plot title, labels for x and y axes as well as inserting text labels anywhere in the plot area. Plot title as well as x and y axis labels can be provided in the Figure constructor [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3890"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3890"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3890/revisions"}],"predecessor-version":[{"id":4268,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3890/revisions/4268"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3890"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3890"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3890"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3894,"date":"2020-07-06T17:20:34","date_gmt":"2020-07-06T17:20:34","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1618"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"pandas-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/pandas-2/","title":{"rendered":"Pandas"},"content":{"rendered":"\n<p>In all the examples above, the data to be plotted has been provided in the form of Python lists or numpy arrays. It is also possible to provide the data source in the form of pandas DataFrame object.</p>\n\n\n\n<p>DataFrame is a two-dimensional data structure. Columns in the dataframe can be of different data types. The Pandas library has functions to create dataframe from various sources such as CSV file, Excel worksheet, SQL table, etc.</p>\n\n\n\n<p>For the purpose of following example, we are using a CSV file consisting of two columns representing a number x and 10x. The test.csv file is as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x,pow\n0.0,1.0\n0.5263157894736842,3.3598182862837818\n1.0526315789473684,11.28837891684689\n1.5789473684210527,37.926901907322495\n2.1052631578947367,127.42749857031335\n2.631578947368421,428.1332398719391\n3.1578947368421053,1438.449888287663\n3.6842105263157894,4832.930238571752\n4.2105263157894735,16237.76739188721\n4.7368421052631575,54555.947811685146</code></pre>\n\n\n\n<p>We shall read this file in a dataframe object using read_csv() function in pandas.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pandas as pd\ndf = pd.read_csv('test.csv')\nprint (df)</code></pre>\n\n\n\n<p>The dataframe appears as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>x        pow\n0 0.000000 1.000000\n1 0.526316 3.359818\n2 1.052632 11.288379\n3 1.578947 37.926902\n4 2.105263 127.427499\n5 2.631579 428.133240\n6 3.157895 1438.449888\n7 3.684211 4832.930239\n8 4.210526 16237.767392\n9 4.736842 54555.947812</code></pre>\n\n\n\n<p>The ‘x’ and ‘pow’ columns are used as data series for line glyph in bokeh plot figure.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\np = figure()\nx = df&#91;'x']\ny = df&#91;'pow']\np.line(x,y,line_width = 2)\np.circle(x, y,size = 20)\nshow(p)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/pandas.jpg\" alt=\"Pandas\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In all the examples above, the data to be plotted has been provided in the form of Python lists or numpy arrays. It is also possible to provide the data source in the form of pandas DataFrame object. DataFrame is a two-dimensional data structure. Columns in the dataframe can be of different data types. The [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3894"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3894"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3894/revisions"}],"predecessor-version":[{"id":4267,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3894/revisions/4267"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3894"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3894"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3894"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3898,"date":"2020-07-06T17:21:39","date_gmt":"2020-07-06T17:21:39","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1622"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"columndatasource","status":"publish","type":"post","link":"https://python3.foobrdigital.com/columndatasource/","title":{"rendered":"ColumnDataSource"},"content":{"rendered":"\n<p>Most of the plotting methods in Bokeh API are able to receive data source parameters through ColumnDatasource object. It makes sharing data between plots and ‘DataTables’.</p>\n\n\n\n<p>A ColumnDatasource can be considered as a mapping between column name and list of data. A Python dict object with one or more string keys and lists or numpy arrays as values is passed to ColumnDataSource constructor.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Below is the example</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.models import ColumnDataSource\ndata = {'x':&#91;1, 4, 3, 2, 5],\n   'y':&#91;6, 5, 2, 4, 7]}\ncds = ColumnDataSource(data = data)</code></pre>\n\n\n\n<p>This object is then used as value of source property in a glyph method. Following code generates a scatter plot using ColumnDataSource.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfrom bokeh.models import ColumnDataSource\ndata = {'x':&#91;1, 4, 3, 2, 5],\n   'y':&#91;6, 5, 2, 4, 7]}\ncds = ColumnDataSource(data = data)\nfig = figure()\nfig.scatter(x = 'x', y = 'y',source = cds, marker = \"circle\", size = 20, fill_color = \"grey\")\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/columndatasource.jpg\" alt=\"ColumnDataSource\"/></figure>\n\n\n\n<p>Instead of assigning a Python dictionary to ColumnDataSource, we can use a Pandas DataFrame for it.</p>\n\n\n\n<p>Let us use ‘test.csv’ (used earlier in this section) to obtain a DataFrame and use it for getting ColumnDataSource and rendering line plot.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nimport pandas as pd\nfrom bokeh.models import ColumnDataSource\ndf = pd.read_csv('test.csv')\ncds = ColumnDataSource(df)\nfig = figure(y_axis_type = 'log')\nfig.line(x = 'x', y = 'pow',source = cds, line_color = \"grey\")\nshow(fig)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/rendering.jpg\" alt=\"rendering\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Most of the plotting methods in Bokeh API are able to receive data source parameters through ColumnDatasource object. It makes sharing data between plots and ‘DataTables’. A ColumnDatasource can be considered as a mapping between column name and list of data. A Python dict object with one or more string keys and lists or numpy [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3898"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3898"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3898/revisions"}],"predecessor-version":[{"id":4266,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3898/revisions/4266"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3898"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3898"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3898"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3884,"date":"2020-07-06T17:23:13","date_gmt":"2020-07-06T17:23:13","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1608"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"filtering-data","status":"publish","type":"post","link":"https://python3.foobrdigital.com/filtering-data/","title":{"rendered":"Filtering Data"},"content":{"rendered":"\n<p>Often, you may want to obtain a plot pertaining to a part of data that satisfies certain conditions instead of the entire dataset. Object of the CDSView class defined in bokeh.models module returns a subset of ColumnDatasource under consideration by applying one or more filters over it.</p>\n\n\n\n<p>IndexFilter is the simplest type of filter. You have to specify indices of only those rows from the dataset that you want to use while plotting the figure.</p>\n\n\n\n<p>Following example demonstrates use of IndexFilter to set up a CDSView. The resultant figure shows a line glyph between x and y data series of the ColumnDataSource. A view object is obtained by applying index filter over it. The view is used to plot circle glyph as a result of IndexFilter.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.models import ColumnDataSource, CDSView, IndexFilter\nfrom bokeh.plotting import figure, output_file, show\nsource = ColumnDataSource(data = dict(x = list(range(1,11)), y = list(range(2,22,2))))\nview = CDSView(source=source, filters = &#91;IndexFilter(&#91;0, 2, 4,6])])\nfig = figure(title = 'Line Plot example', x_axis_label = 'x', y_axis_label = 'y')\nfig.circle(x = \"x\", y = \"y\", size = 10, source = source, view = view, legend = 'filtered')\nfig.line(source.data&#91;'x'],source.data&#91;'y'], legend = 'unfiltered')\nshow(fig)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/indexfilter.jpg\" alt=\"IndexFilter\"/></figure>\n\n\n\n<p>To choose only those rows from the data source, that satisfy a certain Boolean condition, apply a BooleanFilter.</p>\n\n\n\n<p>A typical Bokeh installation consists of a number of sample data sets in sampledata directory. For following example, we use <strong>unemployment1948</strong> dataset provided in the form of unemployment1948.csv. It stores year wise percentage of unemployment in USA since 1948. We want to generate a plot only for year 1980 onwards. For that purpose, a CDSView object is obtained by applying BooleanFilter over the given data source.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.models import ColumnDataSource, CDSView, BooleanFilter\nfrom bokeh.plotting import figure, show\nfrom bokeh.sampledata.unemployment1948 import data\nsource = ColumnDataSource(data)\nbooleans = &#91;True if int(year) >= 1980 else False for year in\nsource.data&#91;'Year']]\nprint (booleans)\nview1 = CDSView(source = source, filters=&#91;BooleanFilter(booleans)])\np = figure(title = \"Unemployment data\", x_range = (1980,2020), x_axis_label = 'Year', y_axis_label='Percentage')\np.line(x = 'Year', y = 'Annual', source = source, view = view1, color = 'red', line_width = 2)\nshow(p)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/booleanfilter.jpg\" alt=\"BooleanFilter\"/></figure>\n\n\n\n<p>To add more flexibility in applying filter, Bokeh provides a CustomJSFilter class with the help of which the data source can be filtered with a user defined JavaScript function.</p>\n\n\n\n<p>The example given below uses the same USA unemployment data. Defining a CustomJSFilter to plot unemployment figures of year 1980 and after.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.models import ColumnDataSource, CDSView, CustomJSFilter\nfrom bokeh.plotting import figure, show\nfrom bokeh.sampledata.unemployment1948 import data\nsource = ColumnDataSource(data)\ncustom_filter = CustomJSFilter(code = '''\n   var indices = &#91;];\n\n   for (var i = 0; i &lt; source.get_length(); i++){\n      if (parseInt(source.data&#91;'Year']&#91;i]) > = 1980){\n         indices.push(true);\n      } else {\n         indices.push(false);\n      }\n   }\n   return indices;\n''')\nview1 = CDSView(source = source, filters = &#91;custom_filter])\np = figure(title = \"Unemployment data\", x_range = (1980,2020), x_axis_label = 'Year', y_axis_label = 'Percentage')\np.line(x = 'Year', y = 'Annual', source = source, view = view1, color = 'red', line_width = 2)\nshow(p)</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Often, you may want to obtain a plot pertaining to a part of data that satisfies certain conditions instead of the entire dataset. Object of the CDSView class defined in bokeh.models module returns a subset of ColumnDatasource under consideration by applying one or more filters over it. IndexFilter is the simplest type of filter. You [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3884"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3884"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3884/revisions"}],"predecessor-version":[{"id":4265,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3884/revisions/4265"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3884"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3884"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3884"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3896,"date":"2020-07-06T17:24:57","date_gmt":"2020-07-06T17:24:57","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1620"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"layouts","status":"publish","type":"post","link":"https://python3.foobrdigital.com/layouts/","title":{"rendered":"Layouts"},"content":{"rendered":"\n<p>Bokeh visualizations can be suitably arranged in different layout options. These layouts as well as sizing modes result in plots and widgets resizing automatically as per the size of browser window. For consistent appearance, all items in a layout must have same sizing mode. The widgets (buttons, menus, etc.) are kept in a separate widget box and not in plot figure.</p>\n\n\n\n<p>First type of layout is Column layout which displays plot figures vertically. The <strong>column() function</strong> is defined in <strong>bokeh.layouts</strong> module and takes following signature −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.layouts import column\ncol = column(children, sizing_mode)</code></pre>\n\n\n\n<p><strong>children</strong>&nbsp;− List of plots and/or widgets.</p>\n\n\n\n<p><strong>sizing_mode</strong>&nbsp;− determines how items in the layout resize. Possible values are &#8220;fixed&#8221;, &#8220;stretch_both&#8221;, &#8220;scale_width&#8221;, &#8220;scale_height&#8221;, &#8220;scale_both&#8221;. Default is “fixed”.</p>\n\n\n\n<p>Following code produces two Bokeh figures and places them in a column layout so that they are displayed vertically. Line glyphs representing sine and cos relationship between x and y data series is displayed in Each figure.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfrom bokeh.layouts import column\nimport numpy as np\nimport math\nx = np.arange(0, math.pi*2, 0.05)\ny1 = np.sin(x)\ny2 = np.cos(x)\nfig1 = figure(plot_width = 200, plot_height = 200)\nfig1.line(x, y1,line_width = 2, line_color = 'blue')\nfig2 = figure(plot_width = 200, plot_height = 200)\nfig2.line(x, y2,line_width = 2, line_color = 'red')\nc = column(children = &#91;fig1, fig2], sizing_mode = 'stretch_both')\nshow(c)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/sizing_mode.jpg\" alt=\"sizing mode\"/></figure>\n\n\n\n<p>Similarly, Row layout arranges plots horizontally, for which&nbsp;<strong>row() function</strong>&nbsp;as defined in bokeh.layouts module is used. As you would think, it also takes two arguments (similar to&nbsp;<strong>column() function</strong>) – children and sizing_mode.</p>\n\n\n\n<p>The sine and cos curves as shown vertically in above diagram are now displayed horizontally in row layout with following code</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfrom bokeh.layouts import row\nimport numpy as np\nimport math\nx = np.arange(0, math.pi*2, 0.05)\ny1 = np.sin(x)\ny2 = np.cos(x)\nfig1 = figure(plot_width = 200, plot_height = 200)\nfig1.line(x, y1,line_width = 2, line_color = 'blue')\nfig2 = figure(plot_width = 200, plot_height = 200)\nfig2.line(x, y2,line_width = 2, line_color = 'red')\nr = row(children = &#91;fig1, fig2], sizing_mode = 'stretch_both')\nshow(r)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/layout_arranges.jpg\" alt=\"layout arranges\"/></figure>\n\n\n\n<p>The Bokeh package also has grid layout. It holds multiple plot figures (as well as widgets) in a two dimensional grid of rows and columns. The&nbsp;<strong>gridplot() function</strong>&nbsp;in bokeh.layouts module returns a grid and a single unified toolbar which may be positioned with the help of toolbar_location property.</p>\n\n\n\n<p>This is unlike row or column layout where each plot shows its own toolbar. The grid() function too uses children and sizing_mode parameters where children is a list of lists. Ensure that each sublist is of same dimensions.</p>\n\n\n\n<p>In the following code, four different relationships between x and y data series are plotted in a grid of two rows and two columns.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfrom bokeh.layouts import gridplot\nimport math\nx = list(range(1,11))\n\ny1 = x\ny2 =&#91;11-i for i in x]\ny3 = &#91;i*i for i in x]\ny4 = &#91;math.log10(i) for i in x]\n\nfig1 = figure(plot_width = 200, plot_height = 200)\nfig1.line(x, y1,line_width = 2, line_color = 'blue')\nfig2 = figure(plot_width = 200, plot_height = 200)\nfig2.circle(x, y2,size = 10, color = 'green')\nfig3 = figure(plot_width = 200, plot_height = 200)\nfig3.circle(x,y3, size = 10, color = 'grey')\nfig4 = figure(plot_width = 200, plot_height = 200, y_axis_type = 'log')\nfig4.line(x,y4, line_width = 2, line_color = 'red')\ngrid = gridplot(children = &#91;&#91;fig1, fig2], &#91;fig3,fig4]], sizing_mode = 'stretch_both')\nshow(grid)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/plotted.jpg\" alt=\"plotted\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Bokeh visualizations can be suitably arranged in different layout options. These layouts as well as sizing modes result in plots and widgets resizing automatically as per the size of browser window. For consistent appearance, all items in a layout must have same sizing mode. The widgets (buttons, menus, etc.) are kept in a separate widget [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3896"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3896"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3896/revisions"}],"predecessor-version":[{"id":4264,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3896/revisions/4264"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3896"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3896"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3896"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3887,"date":"2020-07-06T17:25:46","date_gmt":"2020-07-06T17:25:46","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1611"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"plot-tools","status":"publish","type":"post","link":"https://python3.foobrdigital.com/plot-tools/","title":{"rendered":"Plot Tools"},"content":{"rendered":"\n<p>When a Bokeh plot is rendered, normally a tool bar appears on the right side of the figure. It contains a default set of tools. First of all, the position of toolbar can be configured by toolbar_location property in figure() function. This property can take one of the following values −</p>\n\n\n\n<ul><li>&#8220;above&#8221;</li><li>&#8220;below&#8221;</li><li>&#8220;left&#8221;</li><li>&#8220;right&#8221;</li><li>&#8220;None&#8221;</li></ul>\n\n\n\n<p>For example, following statement will cause toolbar to be displayed below the plot −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Fig = figure(toolbar_location = \"below\")</code></pre>\n\n\n\n<p>This toolbar can be configured according to the requirement by adding required from various tools defined in bokeh.models module. For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Fig.add_tools(WheelZoomTool())</code></pre>\n\n\n\n<p>The tools can be classified under following categories −</p>\n\n\n\n<ul><li>Pan/Drag Tools</li><li>Click/Tap Tools</li><li>Scroll/Pinch Tools</li></ul>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Tool</th><th>Description</th><th>Icon</th></tr><tr><td>BoxSelectToolName : &#8216;box_select&#8217;</td><td>allows the user to define a rectangular selection region by left-dragging a mouse</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/boxselecttool.jpg\" alt=\"BoxSelectTool\"></td></tr><tr><td>LassoSelectToolname: &#8216;lasso_select</td><td>allows the user to define an arbitrary region for selection by left-dragging a mouse</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/lassoselecttool.jpg\" alt=\"LassoSelectTool\"></td></tr><tr><td>PanToolname: &#8216;pan&#8217;, &#8216;xpan&#8217;, &#8216;ypan&#8217;,</td><td>allows the user to pan the plot by left-dragging a mouse</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/pantool.jpg\" alt=\"PanTool\"></td></tr><tr><td>TapToolname: &#8216;tap</td><td>allows the user to select at single points by clicking a left mouse button</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/taptool.jpg\" alt=\"TapTool\"></td></tr><tr><td>WheelZoomToolname: &#8216;wheel_zoom&#8217;, &#8216;xwheel_zoom&#8217;, &#8216;ywheel_zoom&#8217;</td><td>zoom the plot in and out, centered on the current mouse location.</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/wheelzoomtool.jpg\" alt=\"WheelZoomTool\"></td></tr><tr><td>WheelPanToolname: &#8216;xwheel_pan&#8217;, &#8216;ywheel_pan&#8217;</td><td>translate the plot window along the specified dimension without changing the window’s aspect ratio.</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/wheelpantool.jpg\" alt=\"WheelPanTool\"></td></tr><tr><td>ResetToolname: &#8216;reset&#8217;</td><td>restores the plot ranges to their original values.</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/resettool.jpg\" alt=\"ResetTool\"></td></tr><tr><td>SaveToolname: &#8216;save&#8217;</td><td>allows the user to save a PNG image of the plot.</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/savetool.jpg\" alt=\"SaveTool\"></td></tr><tr><td>ZoomInToolname: &#8216;zoom_in&#8217;, &#8216;xzoom_in&#8217;, &#8216;yzoom_in&#8217;</td><td>The zoom-in tool will increase the zoom of the plot in x, y or both coordinates</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/zoomintool.jpg\" alt=\"ZoomInTool\"></td></tr><tr><td>ZoomOutToolname: &#8216;zoom_out&#8217;, &#8216;xzoom_out&#8217;, &#8216;yzoom_out&#8217;</td><td>The zoom-out tool will decrease the zoom of the plot in x, y or both coordinates</td><td><img src=\"https://www.tutorialspoint.com/bokeh/images/zoomouttool.jpg\" alt=\"ZoomInTool\"></td></tr><tr><td>CrosshairToolname: &#8216;crosshair&#8217;</td><td>draws a crosshair annotation over the plot, centered on the current mouse position.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>When a Bokeh plot is rendered, normally a tool bar appears on the right side of the figure. It contains a default set of tools. First of all, the position of toolbar can be configured by toolbar_location property in figure() function. This property can take one of the following values − &#8220;above&#8221; &#8220;below&#8221; &#8220;left&#8221; &#8220;right&#8221; [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3887"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3887"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3887/revisions"}],"predecessor-version":[{"id":4263,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3887/revisions/4263"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3887"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3887"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3887"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3907,"date":"2020-07-06T17:27:23","date_gmt":"2020-07-06T17:27:23","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1605"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"styling-visual-attributes","status":"publish","type":"post","link":"https://python3.foobrdigital.com/styling-visual-attributes/","title":{"rendered":"Styling Visual Attributes"},"content":{"rendered":"\n<p>The default appearance of a Bokeh plot can be customised by setting various properties to desired value. These properties are mainly of three types −</p>\n\n\n\n<h2>Line properties</h2>\n\n\n\n<p>Following table lists various properties related to line glyph.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>line_color</td><td>color is used to stroke lines with</td></tr><tr><td>2</td><td>line_width</td><td>This is used in units of pixels as line stroke width</td></tr><tr><td>3</td><td>line_alpha</td><td>Between 0 (transparent) and 1 (opaque) this acts as a floating point</td></tr><tr><td>4</td><td>line_join</td><td>how to join together the path segments. Defined values are: &#8216;miter&#8217; (miter_join), &#8217;round&#8217; (round_join), &#8216;bevel&#8217; (bevel_join)</td></tr><tr><td>5</td><td>line_cap</td><td>how to terminate the path segments. Defined values are: &#8216;butt&#8217; (butt_cap), &#8217;round&#8217; (round_cap), &#8216;square&#8217; (square_cap)</td></tr><tr><td>6</td><td>line_dash</td><td>BThis is used for a line style. Defined values are: &#8216;solid&#8217;, &#8216;dashed&#8217;, &#8216;dotted&#8217;, &#8216;dotdash&#8217;, &#8216;dashdot&#8217;</td></tr><tr><td>7</td><td>line_dash_offset</td><td>The distance into the line_dash in pixels that the pattern should start from</td></tr></tbody></table></figure>\n\n\n\n<h2>Fill properties</h2>\n\n\n\n<p>Various fill properties are listed below −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>fill_color</td><td>This is used to fill paths with</td></tr><tr><td>2</td><td>fill_alpha</td><td>Between 0 (transparent) and 1 (opaque), this acts as a floating point</td></tr></tbody></table></figure>\n\n\n\n<h2>Text properties</h2>\n\n\n\n<p>There are many text related properties as listed in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>text_font</td><td>font name, e.g., &#8216;times&#8217;, &#8216;helvetica&#8217;</td></tr><tr><td>2</td><td>text_font_size</td><td>font size in px, em, or pt, e.g., &#8217;12pt&#8217;, &#8216;1.5em&#8217;</td></tr><tr><td>3</td><td>text_font_style</td><td>font style to use &#8216;normal&#8217; &#8216;italic&#8217; &#8216;bold&#8217;</td></tr><tr><td>4</td><td>text_color</td><td>This is used to render text with</td></tr><tr><td>5</td><td>text_alpha</td><td>Between 0 (transparent) and 1 (opaque), this is a floating point</td></tr><tr><td>6</td><td>text_align</td><td>horizontal anchor point for text &#8211; &#8216;left&#8217;, &#8216;right&#8217;, &#8216;center&#8217;</td></tr><tr><td>7</td><td>text_baseline</td><td>vertical anchor point for text &#8216;top&#8217;, &#8216;middle&#8217;, &#8216;bottom&#8217;, &#8216;alphabetic&#8217;, &#8216;hanging&#8217;</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>The default appearance of a Bokeh plot can be customised by setting various properties to desired value. These properties are mainly of three types − Line properties Following table lists various properties related to line glyph. 1 line_color color is used to stroke lines with 2 line_width This is used in units of pixels as [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3907"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3907"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3907/revisions"}],"predecessor-version":[{"id":4262,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3907/revisions/4262"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3907"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3907"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3907"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3906,"date":"2020-07-06T17:28:31","date_gmt":"2020-07-06T17:28:31","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1604"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"customising-legends","status":"publish","type":"post","link":"https://python3.foobrdigital.com/customising-legends/","title":{"rendered":"Customising legends"},"content":{"rendered":"\n<p>Various glyphs in a plot can be identified by legend property appear as a label by default at top-right position of the plot area. This legend can be customised by following attributes −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>legend.label_text_font</td><td>change default label font to specified font name</td></tr><tr><td>2</td><td>legend.label_text_font_size</td><td>font size in points</td></tr><tr><td>3</td><td>legend.location</td><td>set the label at specified location.</td></tr><tr><td>4</td><td>legend.title</td><td>set title for legend label</td><td></td></tr><tr><td>5</td><td>legend.orientation</td><td>set to horizontal (default) or vertical</td></tr><tr><td>6</td><td>legend.clicking_policy</td><td>specify what should happen when legend is clicked hide: hides the glyph corresponding to legend mute: mutes the glyph corresponding to legendtd&gt;</td></tr></tbody></table></figure>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Example code for legend customisation is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nimport math\nx2 = list(range(1,11))\ny4 = &#91;math.pow(i,2) for i in x2]\ny2 = &#91;math.log10(pow(10,i)) for i in x2]\nfig = figure(y_axis_type = 'log')\nfig.circle(x2, y2,size = 5, color = 'blue', legend = 'blue circle')\nfig.line(x2,y4, line_width = 2, line_color = 'red', legend = 'red line')\nfig.legend.location = 'top_left'\nfig.legend.title = 'Legend Title'\nfig.legend.title_text_font = 'Arial'\nfig.legend.title_text_font_size = '20pt'\nshow(fig)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/customising_legends.jpg\" alt=\"Customising legends\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Various glyphs in a plot can be identified by legend property appear as a label by default at top-right position of the plot area. This legend can be customised by following attributes − 1 legend.label_text_font change default label font to specified font name 2 legend.label_text_font_size font size in points 3 legend.location set the label at [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3906"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3906"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3906/revisions"}],"predecessor-version":[{"id":4261,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3906/revisions/4261"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3906"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3906"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3906"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3905,"date":"2020-07-06T17:31:33","date_gmt":"2020-07-06T17:31:33","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1603"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"adding-widgets","status":"publish","type":"post","link":"https://python3.foobrdigital.com/adding-widgets/","title":{"rendered":"Adding Widgets"},"content":{"rendered":"\n<p>The bokeh.models.widgets module contains definitions of GUI objects similar to HTML form elements, such as button, slider, checkbox, radio button, etc. These controls provide interactive interface to a plot. Invoking processing such as modifying plot data, changing plot parameters, etc., can be performed by custom JavaScript functions executed on corresponding events.</p>\n\n\n\n<p>Bokeh allows call back functionality to be defined with two methods −</p>\n\n\n\n<ul><li>Use the&nbsp;<strong>CustomJS callback</strong>&nbsp;so that the interactivity will work in standalone HTML documents.</li><li>Use&nbsp;<strong>Bokeh server</strong>&nbsp;and set up event handlers.</li></ul>\n\n\n\n<p>In this section, we shall see how to add Bokeh widgets and assign JavaScript callbacks.</p>\n\n\n\n<h2>Button</h2>\n\n\n\n<p>This widget is a clickable button generally used to invoke a user defined call back handler. The constructor takes following parameters −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Button(label, icon, callback)\n</code></pre>\n\n\n\n<p>The label parameter is a string used as button’s caption and callback is the custom JavaScript function to be called when clicked.</p>\n\n\n\n<p>In the following example, a plot and Button widget are displayed in Column layout. The plot itself renders a line glyph between x and y data series.</p>\n\n\n\n<p>A custom JavaScript function named ‘callback’ has been defined using&nbsp;<strong>CutomJS() function</strong>. It receives reference to the object that triggered callback (in this case the button) in the form variable cb_obj.</p>\n\n\n\n<p>This function alters the source ColumnDataSource data and finally emits this update in source data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.layouts import column\nfrom bokeh.models import CustomJS, ColumnDataSource\nfrom bokeh.plotting import Figure, output_file, show\nfrom bokeh.models.widgets import Button\n\nx = &#91;x*0.05 for x in range(0, 200)]\ny = x\n\nsource = ColumnDataSource(data=dict(x=x, y=y))\nplot = Figure(plot_width=400, plot_height=400)\nplot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)\n\ncallback = CustomJS(args=dict(source=source), code=\"\"\"\n   var data = source.data;\n   x = data&#91;'x']\n   y = data&#91;'y']\n   for (i = 0; i &lt; x.length; i++) {\n      y&#91;i] = Math.pow(x&#91;i], 4)\n   }\n   source.change.emit();\n\"\"\")\n\nbtn = Button(label=\"click here\", callback=callback, name=\"1\")\n\nlayout = column(btn , plot)\nshow(layout)</code></pre>\n\n\n\n<h3>Output (initial)</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/button.jpg\" alt=\"Button\"/></figure>\n\n\n\n<p>Click on the button on top of the plot and see the updated plot figure which looks as follows −</p>\n\n\n\n<h3>Output (after click)</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/button_after.jpg\" alt=\"Button After\"/></figure>\n\n\n\n<h2>Slider</h2>\n\n\n\n<p>With the help of a slider control it is possible to select a number between start and end properties assigned to it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Slider(start, end, step, value)\n</code></pre>\n\n\n\n<p>In the following example, we register a callback function on slider’s on_change event. Slider’s instantaneous numeric value is available to the handler in the form of cb_obj.value which is used to modify the ColumnDatasource data. The plot figure continuously updates as you slide the position.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.layouts import column\nfrom bokeh.models import CustomJS, ColumnDataSource\nfrom bokeh.plotting import Figure, output_file, show\nfrom bokeh.models.widgets import Slider\n\nx = &#91;x*0.05 for x in range(0, 200)]\ny = x\n\nsource = ColumnDataSource(data=dict(x=x, y=y))\nplot = Figure(plot_width=400, plot_height=400)\nplot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)\n\nhandler = CustomJS(args=dict(source=source), code=\"\"\"\n   var data = source.data;\n   var f = cb_obj.value\n   var x = data&#91;'x']\n   var y = data&#91;'y']\n   for (var i = 0; i &lt; x.length; i++) {\n      y&#91;i] = Math.pow(x&#91;i], f)\n   }\n   source.change.emit();\n\"\"\")\n\nslider = Slider(start=0.0, end=5, value=1, step=.25, title=\"Slider Value\")\n\nslider.js_on_change('value', handler)\nlayout = column(slider, plot)\nshow(layout)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/slider.jpg\" alt=\"Slider\"/></figure>\n\n\n\n<h2>RadioGroup</h2>\n\n\n\n<p>This widget presents a collection of mutually exclusive toggle buttons showing circular buttons to the left of caption.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>RadioGroup(labels, active)\n</code></pre>\n\n\n\n<p>Where, labels is a list of captions and active is the index of selected option.</p>\n\n\n\n<h2>Select</h2>\n\n\n\n<p>This widget is a simple dropdown list of string items, one of which can be selected. Selected string appears at the top window and it is the value parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Select(options, value)\n</code></pre>\n\n\n\n<p>The list of string elements in the dropdown is given in the form of options list object.</p>\n\n\n\n<p>Following is a combined example of radio button and select widgets, both providing three different relationships between x and y data series. The <strong>RadioGroup</strong> and <strong>Select widgets</strong>are registered with respective handlers through on_change() method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.layouts import column\nfrom bokeh.models import CustomJS, ColumnDataSource\nfrom bokeh.plotting import Figure, output_file, show\nfrom bokeh.models.widgets import RadioGroup, Select\n\nx = &#91;x*0.05 for x in range(0, 200)]\ny = x\n\nsource = ColumnDataSource(data=dict(x=x, y=y))\n\nplot = Figure(plot_width=400, plot_height=400)\nplot.line('x', 'y', source=source, line_width=3, line_alpha=0.6)\n\nradiohandler = CustomJS(args=dict(source=source), code=\"\"\"\n   var data = source.data;\n   console.log('Tap event occurred at x-position: ' + cb_obj.active);\n   //plot.title.text=cb_obj.value;\n   x = data&#91;'x']\n   y = data&#91;'y']\n   if (cb_obj.active==0){\n      for (i = 0; i &lt; x.length; i++) {\n         y&#91;i] = x&#91;i];\n      }\n   }\n   if (cb_obj.active==1){\n      for (i = 0; i &lt; x.length; i++) {\n         y&#91;i] = Math.pow(x&#91;i], 2)\n      }\n   }\n   if (cb_obj.active==2){\n      for (i = 0; i &lt; x.length; i++) {\n         y&#91;i] = Math.pow(x&#91;i], 4)\n      }\n   }\n   source.change.emit();\n\"\"\")\n\nselecthandler = CustomJS(args=dict(source=source), code=\"\"\"\n   var data = source.data;\n   console.log('Tap event occurred at x-position: ' + cb_obj.value);\n   //plot.title.text=cb_obj.value;\n   x = data&#91;'x']\n   y = data&#91;'y']\n   if (cb_obj.value==\"line\"){\n      for (i = 0; i &lt; x.length; i++) {\n         y&#91;i] = x&#91;i];\n      }\n   }\n   if (cb_obj.value==\"SquareCurve\"){\n      for (i = 0; i &lt; x.length; i++) {\n         y&#91;i] = Math.pow(x&#91;i], 2)\n      }\n   }\n   if (cb_obj.value==\"CubeCurve\"){\n      for (i = 0; i &lt; x.length; i++) {\n         y&#91;i] = Math.pow(x&#91;i], 4)\n      }\n   }\n   source.change.emit();\n\"\"\")\n\nradio = RadioGroup(\n   labels=&#91;\"line\", \"SqureCurve\", \"CubeCurve\"], active=0)\nradio.js_on_change('active', radiohandler)\nselect = Select(title=\"Select:\", value='line', options=&#91;\"line\", \"SquareCurve\", \"CubeCurve\"])\nselect.js_on_change('value', selecthandler)\n\nlayout = column(radio, select, plot)\nshow(layout)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/select.jpg\" alt=\"Select\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/select_op.jpg\" alt=\"Select\"/></figure>\n\n\n\n<h2>Tab widget</h2>\n\n\n\n<p>Just as in a browser, each tab can show different web page, the Tab widget is Bokeh model providing different view to each figure. In the following example, two plot figures of sine and cosine curves are rendered in two different tabs −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure, output_file, show\nfrom bokeh.models import Panel, Tabs\nimport numpy as np\nimport math\nx=np.arange(0, math.pi*2, 0.05)\nfig1=figure(plot_width=300, plot_height=300)\n\nfig1.line(x, np.sin(x),line_width=2, line_color='navy')\n\ntab1 = Panel(child=fig1, title=\"sine\")\nfig2=figure(plot_width=300, plot_height=300)\nfig2.line(x,np.cos(x), line_width=2, line_color='orange')\ntab2 = Panel(child=fig2, title=\"cos\")\n\ntabs = Tabs(tabs=&#91; tab1, tab2 ])\n\nshow(tabs)</code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/tab_widget.jpg\" alt=\"Tab widget\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The bokeh.models.widgets module contains definitions of GUI objects similar to HTML form elements, such as button, slider, checkbox, radio button, etc. These controls provide interactive interface to a plot. Invoking processing such as modifying plot data, changing plot parameters, etc., can be performed by custom JavaScript functions executed on corresponding events. Bokeh allows call back [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3905"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3905"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3905/revisions"}],"predecessor-version":[{"id":4260,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3905/revisions/4260"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3905"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3905"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3905"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3904,"date":"2020-07-06T17:33:06","date_gmt":"2020-07-06T17:33:06","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1602"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"server","status":"publish","type":"post","link":"https://python3.foobrdigital.com/server/","title":{"rendered":"Server"},"content":{"rendered":"\n<p>Bokeh architecture has a decouple design in which objects such as plots and glyphs are created using Python and converted in JSON to be consumed by&nbsp;<strong>BokehJS client library</strong>.</p>\n\n\n\n<p>However, it is possible to keep the objects in python and in the browser in sync with one another with the help of&nbsp;<strong>Bokeh Server</strong>. It enables response to User Interface (UI) events generated in a browser with the full power of python. It also helps automatically push server-side updates to the widgets or plots in a browser.</p>\n\n\n\n<p>A Bokeh server uses Application code written in Python to create Bokeh Documents. Every new connection from a client browser results in the Bokeh server creating a new document, just for that session.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/server.jpg\" alt=\"Server\"/></figure>\n\n\n\n<p>First, we have to develop an application code to be served to client browser. Following code renders a sine wave line glyph. Along with the plot, a slider control is also rendered to control the frequency of sine wave. The callback function <strong>update_data()</strong> updates <strong>ColumnDataSource</strong> data taking the instantaneous value of slider as current frequency.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom bokeh.io import curdoc\nfrom bokeh.layouts import row, column\nfrom bokeh.models import ColumnDataSource\nfrom bokeh.models.widgets import Slider, TextInput\nfrom bokeh.plotting import figure\nN = 200\nx = np.linspace(0, 4*np.pi, N)\ny = np.sin(x)\nsource = ColumnDataSource(data = dict(x = x, y = y))\nplot = figure(plot_height = 400, plot_width = 400, title = \"sine wave\")\nplot.line('x', 'y', source = source, line_width = 3, line_alpha = 0.6)\nfreq = Slider(title = \"frequency\", value = 1.0, start = 0.1, end = 5.1, step = 0.1)\ndef update_data(attrname, old, new):\n   a = 1\n   b = 0\n   w = 0\n   k = freq.value\n   x = np.linspace(0, 4*np.pi, N)\n   y = a*np.sin(k*x + w) + b\n   source.data = dict(x = x, y = y)\nfreq.on_change('value', update_data)\ncurdoc().add_root(row(freq, plot, width = 500))\ncurdoc().title = \"Sliders\"</code></pre>\n\n\n\n<p>Next, start Bokeh server by following command line −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Bokeh serve –show sliders.py\n</code></pre>\n\n\n\n<p>Bokeh server starts running and serving the application at localhost:5006/sliders. The console log shows the following display −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\Users\\User>bokeh serve --show scripts\\sliders.py\n2019-09-29 00:21:35,855 Starting Bokeh server version 1.3.4 (running on Tornado 6.0.3)\n2019-09-29 00:21:35,875 Bokeh app running at: http://localhost:5006/sliders\n2019-09-29 00:21:35,875 Starting Bokeh server with process id: 3776\n2019-09-29 00:21:37,330 200 GET /sliders (::1) 699.99ms\n2019-09-29 00:21:38,033 101 GET /sliders/ws?bokeh-protocol-version=1.0&amp;bokeh-session-id=VDxLKOzI5Ppl9kDvEMRzZgDVyqnXzvDWsAO21bRCKRZZ (::1) 4.00ms\n2019-09-29 00:21:38,045 WebSocket connection opened\n2019-09-29 00:21:38,049 ServerConnection created</code></pre>\n\n\n\n<p>Open your favourite browser and enter above address. The Sine wave plot is displayed as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/serverconnection.jpg\" alt=\"ServerConnection\"/></figure>\n\n\n\n<p>You can try and change the frequency to 2 by rolling the slider.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/frequency.jpg\" alt=\"frequency\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Bokeh architecture has a decouple design in which objects such as plots and glyphs are created using Python and converted in JSON to be consumed by&nbsp;BokehJS client library. However, it is possible to keep the objects in python and in the browser in sync with one another with the help of&nbsp;Bokeh Server. It enables response [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3904"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3904"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3904/revisions"}],"predecessor-version":[{"id":4259,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3904/revisions/4259"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3904"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3904"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3904"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3903,"date":"2020-07-06T17:35:19","date_gmt":"2020-07-06T17:35:19","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1601"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"using-bokeh-subcommands","status":"publish","type":"post","link":"https://python3.foobrdigital.com/using-bokeh-subcommands/","title":{"rendered":"Using Bokeh Subcommands"},"content":{"rendered":"\n<p>The Bokeh application provides a number of subcommands to be executed from command line. Following table shows the subcommands −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>1</td><td>Html</td><td>Create HTML files for one or more applications</td></tr><tr><td>2</td><td>info</td><td>print information of Bokeh server configuration</td></tr><tr><td>3</td><td>json</td><td>Create JSON files for one or more applications</td></tr><tr><td>4</td><td>png</td><td>Create PNG files for one or more applications</td></tr><tr><td>5</td><td>sampledata</td><td>Download the bokeh sample data sets</td></tr><tr><td>6</td><td>secret</td><td>Create a Bokeh secret key for use with Bokeh server</td></tr><tr><td>7</td><td>serve</td><td>Run a Bokeh server hosting one or more applications</td></tr><tr><td>8</td><td>static</td><td>Serve static assets (JavaScript, CSS, images, fonts, etc.) used by BokeJS library</td></tr><tr><td>9</td><td>svg</td><td>Create SVG files for one or more applications</td></tr></tbody></table></figure>\n\n\n\n<p>Following command generates a HTML file for Python script having a Bokeh figure.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\python37>bokeh html -o app.html app.py\n</code></pre>\n\n\n\n<p>Adding show option automatically opens the HTML file in browser. Likewise, Python script is converted to PNG, SVG, JSON files with corresponding subcommand.</p>\n\n\n\n<p>To display information of Bokeh server, use info subcommand as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\python37>bokeh info\nPython version : 3.7.4 (tags/v3.7.4:e09359112e, Jul 8 2019, 20:34:20) &#91;MSC v.1916 64 bit (AMD64)]\nIPython version : (not installed)\nTornado version : 6.0.3\nBokeh version : 1.3.4\nBokehJS static path : c:\\python37\\lib\\site-packages\\bokeh\\server\\static\nnode.js version : (not installed)\nnpm version : (not installed)</code></pre>\n\n\n\n<p>In order to experiment with various types of plots, Bokeh website https://bokeh.pydata.orgmakes available sample datasets. They can be downloaded to local machine by sampledata subcommand.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\python37>bokeh info\n</code></pre>\n\n\n\n<p>Following datasets are downloaded in C:\\Users\\User\\.bokeh\\data folder −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>AAPL.csv                                     airports.csv\nairports.json                                CGM.csv\nFB.csv                                       gapminder_fertility.csv\ngapminder_life_expectancy.csv                gapminder_population.csv\ngapminder_regions.csv                        GOOG.csv\nhaarcascade_frontalface_default.xml          IBM.csv\nmovies.db                                    MSFT.csv\nroutes.csv                                   unemployment09.csv\nus_cities.json                               US_Counties.csv\nworld_cities.csv\nWPP2012_SA_DB03_POPULATION_QUINQUENNIAL.csv</code></pre>\n\n\n\n<p>The secret subcommand generates a secret key to be used along with serve subcommand with SECRET_KEY environment variable</p>\n","protected":false},"excerpt":{"rendered":"<p>The Bokeh application provides a number of subcommands to be executed from command line. Following table shows the subcommands − 1 Html Create HTML files for one or more applications 2 info print information of Bokeh server configuration 3 json Create JSON files for one or more applications 4 png Create PNG files for one [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3903"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3903"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3903/revisions"}],"predecessor-version":[{"id":4258,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3903/revisions/4258"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3903"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3903"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3903"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3902,"date":"2020-07-06T17:36:52","date_gmt":"2020-07-06T17:36:52","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1600"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"exporting-plots","status":"publish","type":"post","link":"https://python3.foobrdigital.com/exporting-plots/","title":{"rendered":"Exporting Plots"},"content":{"rendered":"\n<p>In addition to subcommands described above, Bokeh plots can be exported to PNG and SVG file format using export() function. For that purpose, local Python installation should have following dependency libraries.</p>\n\n\n\n<h2>PhantomJS</h2>\n\n\n\n<p>PhantomJS is a JavaScript API that enables automated navigation, screenshots, user behavior and assertions. It is used to run browser-based unit tests. PhantomJS is based on WebKit providing a similar browsing environment for different browsers and provides fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG. In other words, PhantomJS is a web browser without a graphical user interface.</p>\n\n\n\n<h2>Pillow</h2>\n\n\n\n<p>Pillow, a Python Imaging Library (earlier known as PIL) is a free library for the Python programming language that provides support for opening, manipulating, and saving many different image file formats. (including PPM, PNG, JPEG, GIF, TIFF, and BMP.) Some of its features are per-pixel manipulations, masking and transparency handling, image filtering, image enhancing, etc.</p>\n\n\n\n<p>The export_png() function generates RGBA-format PNG image from layout. This function uses Webkit headless browser to render the layout in memory and then capture a screenshot. The generated image will be of the same dimensions as the source layout. Make sure that the Plot.background_fill_color and Plot.border_fill_color are properties to None.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.io import export_png\nexport_png(plot, filename = \"file.png\")</code></pre>\n\n\n\n<p>It is possible that HTML5 Canvas plot output with a SVG element that can be edited using programs such as Adobe Illustrator. The SVG objects can also be converted to PDFs. Here, canvas2svg, a JavaScript library is used to mock the normal Canvas element and its methods with an SVG element. Like PNGs, in order to create a SVG with a transparent background,the Plot.background_fill_color and Plot.border_fill_color properties should be to None.</p>\n\n\n\n<p>The SVG backend is first activated by setting the Plot.output_backend attribute to &#8220;svg&#8221;.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>plot.output_backend = \"svg\"\n</code></pre>\n\n\n\n<p>For headless export, Bokeh has a utility function, export_svgs(). This function will download all of SVG-enabled plots within a layout as distinct SVG files.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.io import export_svgs\nplot.output_backend = \"svg\"\nexport_svgs(plot, filename = \"plot.svg\")</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In addition to subcommands described above, Bokeh plots can be exported to PNG and SVG file format using export() function. For that purpose, local Python installation should have following dependency libraries. PhantomJS PhantomJS is a JavaScript API that enables automated navigation, screenshots, user behavior and assertions. It is used to run browser-based unit tests. PhantomJS [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3902"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3902"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3902/revisions"}],"predecessor-version":[{"id":4257,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3902/revisions/4257"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3902"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3902"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3902"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3910,"date":"2020-07-06T17:39:23","date_gmt":"2020-07-06T17:39:23","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1653"},"modified":"2020-12-16T17:07:53","modified_gmt":"2020-12-16T17:07:53","slug":"embedding-plots-and-apps","status":"publish","type":"post","link":"https://python3.foobrdigital.com/embedding-plots-and-apps/","title":{"rendered":"Embedding Plots and Apps"},"content":{"rendered":"\n<p>Plots and data in the form of standalone documents as well as Bokeh applications can be embedded in HTML documents.</p>\n\n\n\n<p>Standalone document is a Bokeh plot or document not backed by Bokeh server. The interactions in such a plot is purely in the form of custom JS and not Pure Python callbacks.</p>\n\n\n\n<p>Bokeh plots and documents backed by Bokeh server can also be embedded. Such documents contain Python callbacks that run on the server.</p>\n\n\n\n<p>In case of standalone documents, a raw HTML code representing a Bokeh plot is obtained by file_html() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure\nfrom bokeh.resources import CDN\nfrom bokeh.embed import file_html\nfig = figure()\nfig.line(&#91;1,2,3,4,5], &#91;3,4,5,2,3])\nstring = file_html(plot, CDN, \"my plot\")</code></pre>\n\n\n\n<p>Return value of file_html() function may be saved as HTML file or may be used to render through URL routes in Flask app.</p>\n\n\n\n<p>In case of standalone document, its JSON representation can be obtained by json_item() function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.plotting import figure\nfrom bokeh.embed import file_html\nimport json\nfig = figure()\nfig.line(&#91;1,2,3,4,5], &#91;3,4,5,2,3])\nitem_text = json.dumps(json_item(fig, \"myplot\"))</code></pre>\n\n\n\n<p>This output can be used by the Bokeh.embed.embed_item function on a webpage −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>item = JSON.parse(item_text);\nBokeh.embed.embed_item(item);</code></pre>\n\n\n\n<p>Bokeh applications on Bokeh Server may also be embedded so that a new session and Document is created on every page load so that a specific, existing session is loaded. This can be accomplished with the server_document() function. It accepts the URL to a Bokeh server application, and returns a script that will embed new sessions from that server any time the script is executed.</p>\n\n\n\n<p>The <strong>server_document() function</strong> accepts URL parameter. If it is set to ‘default’, the default URL http://localhost:5006/ will be used.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from bokeh.embed import server_document\nscript = server_document(\"http://localhost:5006/sliders\")</code></pre>\n\n\n\n<p>The server_document() function returns a script tag as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script\n   src=\"http://localhost:5006/sliders/autoload.js?bokeh-autoload-element=1000&amp;bokeh-app-path=/sliders&amp;bokeh-absolute-url=https://localhost:5006/sliders\"\n   id=\"1000\">\n&lt;/script></code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Plots and data in the form of standalone documents as well as Bokeh applications can be embedded in HTML documents. Standalone document is a Bokeh plot or document not backed by Bokeh server. The interactions in such a plot is purely in the form of custom JS and not Pure Python callbacks. Bokeh plots and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3910"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3910"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3910/revisions"}],"predecessor-version":[{"id":4256,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3910/revisions/4256"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3910"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3910"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3910"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3909,"date":"2020-07-06T17:40:12","date_gmt":"2020-07-06T17:40:12","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1652"},"modified":"2020-12-16T17:07:52","modified_gmt":"2020-12-16T17:07:52","slug":"extending-bokeh","status":"publish","type":"post","link":"https://python3.foobrdigital.com/extending-bokeh/","title":{"rendered":"Extending Bokeh"},"content":{"rendered":"\n<p>Bokeh integrates well with a wide variety of other libraries, allowing you to use the most appropriate tool for each task. The fact that Bokeh generates JavaScript, makes it possible to combine Bokeh output with a wide variety of JavaScript libraries, such as PhosphorJS.</p>\n\n\n\n<p>Datashader&nbsp;(https://github.com/bokeh/datashader)&nbsp;is another library with which Bokeh output can be extended. It is a Python library that pre-renders large datasets as a large-sized raster image. This ability overcomes limitation of browser when it comes to very large data. Datashader includes tools to build interactive Bokeh plots that dynamically re-render these images when zooming and panning in Bokeh, making it practical to work with arbitrarily large datasets in a web browser.</p>\n\n\n\n<p>Another library is Holoviews ((http://holoviews.org/)&nbsp;that provides a concise declarative interface for building Bokeh plots, especially in Jupyter notebook. It facilitates quick prototyping of figures for data analysis.</p>\n","protected":false},"excerpt":{"rendered":"<p>Bokeh integrates well with a wide variety of other libraries, allowing you to use the most appropriate tool for each task. The fact that Bokeh generates JavaScript, makes it possible to combine Bokeh output with a wide variety of JavaScript libraries, such as PhosphorJS. Datashader&nbsp;(https://github.com/bokeh/datashader)&nbsp;is another library with which Bokeh output can be extended. It [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3909"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3909"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3909/revisions"}],"predecessor-version":[{"id":4255,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3909/revisions/4255"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3909"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3909"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3909"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3901,"date":"2020-07-06T17:41:04","date_gmt":"2020-07-06T17:41:04","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1651"},"modified":"2020-12-16T17:07:52","modified_gmt":"2020-12-16T17:07:52","slug":"webgl","status":"publish","type":"post","link":"https://python3.foobrdigital.com/webgl/","title":{"rendered":"WebGL"},"content":{"rendered":"\n<p>When one has to use large datasets for creating visualizations with the help of Bokeh, the interaction can be very slow. For that purpose, one can enable Web Graphics Library (WebGL) support.</p>\n\n\n\n<p>WebGL is a JavaScript API that renders content in the browser using GPU (graphics processing unit). This standardized plugin is available in all modern browsers.</p>\n\n\n\n<p>To enable WebGL, all you have to do is set output_backend property of Bokeh Figure object to ‘webgl’.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>fig = figure(output_backend=\"webgl\")\n</code></pre>\n\n\n\n<p>In the following example, we plot a&nbsp;<strong>scatter glyph</strong>&nbsp;consisting of 10,000 points with the help of WebGL support.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import numpy as np\nfrom bokeh.plotting import figure, show, output_file\nN = 10000\nx = np.random.normal(0, np.pi, N)\ny = np.sin(x) + np.random.normal(0, 0.2, N)\noutput_file(\"scatterWebGL.html\")\np = figure(output_backend=\"webgl\")\np.scatter(x, y, alpha=0.1)\nshow(p)</code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/webgl.jpg\" alt=\"WebGL\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>When one has to use large datasets for creating visualizations with the help of Bokeh, the interaction can be very slow. For that purpose, one can enable Web Graphics Library (WebGL) support. WebGL is a JavaScript API that renders content in the browser using GPU (graphics processing unit). This standardized plugin is available in all [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3901"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3901"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3901/revisions"}],"predecessor-version":[{"id":4254,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3901/revisions/4254"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3901"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3901"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3901"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3908,"date":"2020-07-06T17:42:20","date_gmt":"2020-07-06T17:42:20","guid":{"rendered":"http://learnpython.foobrdigital.com/?p=1650"},"modified":"2020-12-16T17:07:52","modified_gmt":"2020-12-16T17:07:52","slug":"developing-with-javascript","status":"publish","type":"post","link":"https://python3.foobrdigital.com/developing-with-javascript/","title":{"rendered":"Developing with JavaScript"},"content":{"rendered":"\n<p>The Bokeh Python library, and libraries for Other Languages such as R, Scala, and Julia, primarily interacts with BokehJS at a high level. A Python programmer does not have to worry about JavaScript or web development. However, one can use BokehJS API, to do pure JavaScript development using BokehJS directly.</p>\n\n\n\n<p>BokehJS objects such as glyphs and widgets are built more or less similarly as in Bokeh Python API. Typically, any Python ClassName is available as&nbsp;<strong>Bokeh.ClassName</strong>&nbsp;from JavaScript. For example, a Range1d object as obtained in Python.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">xrange = Range1d(start=-0.5, end=20.5)</pre>\n\n\n\n<p>It is equivalently obtained with BokehJS as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var xrange = new Bokeh.Range1d({ start: -0.5, end: 20.5 });\n</code></pre>\n\n\n\n<p>Following JavaScript code when embedded in a HTML file renders a simple line plot in the browser.</p>\n\n\n\n<p>First include all BokehJS libraries in &lt;head&gt;..&lt;/head&gt; secion of web page as below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;head>\n&lt;script type=\"text/javascript\" src=\"https://cdn.pydata.org/bokeh/release/bokeh-1.3.4.min.js\">&lt;/script>\n&lt;script type=\"text/javascript\" src=\"https://cdn.pydata.org/bokeh/release/bokeh-widgets-1.3.4.min.js\">&lt;/script>\n&lt;script type=\"text/javascript\" src=\"https://cdn.pydata.org/bokeh/release/bokeh-tables-1.3.4.min.js\">&lt;/script>\n&lt;script type=\"text/javascript\" src=\"https://cdn.pydata.org/bokeh/release/bokeh-gl-1.3.4.min.js\">&lt;/script>\n&lt;script type=\"text/javascript\" src=\"https://cdn.pydata.org/bokeh/release/bokeh-api-1.3.4.min.js\">&lt;/script>\n&lt;script type=\"text/javascript\" src=\"https://cdn.pydata.org/bokeh/release/bokeh-api-1.3.4.min.js\">&lt;/script>\n&lt;/head></code></pre>\n\n\n\n<p>In the body section following snippets of JavaScript construct various parts of a Bokeh Plot.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n// create some data and a ColumnDataSource\nvar x = Bokeh.LinAlg.linspace(-0.5, 20.5, 10);\nvar y = x.map(function (v) { return v * 0.5 + 3.0; });\nvar source = new Bokeh.ColumnDataSource({ data: { x: x, y: y } });\n// make the plot\nvar plot = new Bokeh.Plot({\n   title: \"BokehJS Plot\",\n   plot_width: 400,\n   plot_height: 400\n});\n\n// add axes to the plot\nvar xaxis = new Bokeh.LinearAxis({ axis_line_color: null });\nvar yaxis = new Bokeh.LinearAxis({ axis_line_color: null });\nplot.add_layout(xaxis, \"below\");\nplot.add_layout(yaxis, \"left\");\n\n// add a Line glyph\nvar line = new Bokeh.Line({\n   x: { field: \"x\" },\n   y: { field: \"y\" },\n   line_color: \"#666699\",\n   line_width: 2\n});\nplot.add_glyph(line, source);\n\nBokeh.Plotting.show(plot);\n&lt;/script></code></pre>\n\n\n\n<p>Save above code as a web page and open it in a browser of your choice.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/bokeh/images/bokehjs_libraries.jpg\" alt=\"BokehJS libraries\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Bokeh Python library, and libraries for Other Languages such as R, Scala, and Julia, primarily interacts with BokehJS at a high level. A Python programmer does not have to worry about JavaScript or web development. However, one can use BokehJS API, to do pure JavaScript development using BokehJS directly. BokehJS objects such as glyphs [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[105,174],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3908"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=3908"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3908/revisions"}],"predecessor-version":[{"id":4253,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/3908/revisions/4253"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=3908"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=3908"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=3908"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]