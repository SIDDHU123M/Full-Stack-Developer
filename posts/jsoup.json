[
    {
        "id": 982,
        "date": "2020-07-22T10:48:45",
        "date_gmt": "2020-07-22T10:48:45",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=982"
        },
        "modified": "2020-07-22T10:48:45",
        "modified_gmt": "2020-07-22T10:48:45",
        "slug": "overview-4",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-4\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>jsoup is a Java based library to work with HTML based content. It provides a very convenient API to extract and manipulate data, using the best of DOM, CSS, and jquery-like methods. It implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers do.<\/p>\n\n\n\n<p>jsoup libary implements the WHATWG HTML5 specification, and parses an HTML content to the same DOM as per the modern browsers.<\/p>\n\n\n\n<p>jsonp library provides following functionalities.<\/p>\n\n\n\n<ul><li><strong>Multiple Read Support<\/strong>&nbsp;\u2212 It reads and parses HTML using URL, file, or string.<\/li><li><strong>CSS Selectors<\/strong>&nbsp;\u2212 It can find and extract data, using DOM traversal or CSS selectors.<\/li><li><strong>DOM Manipulation<\/strong>&nbsp;\u2212 It can manipulate the HTML elements, attributes, and text.<\/li><li><strong>Prevent XSS attacks<\/strong>&nbsp;\u2212 It can clean user-submitted content against a given safe white-list, to prevent XSS attacks.<\/li><li><strong>Tidy<\/strong>&nbsp;\u2212 It outputs tidy HTML.<\/li><li><strong>Handles invalid data<\/strong>&nbsp;\u2212 jsoup can handle unclosed tags, implicit tags and can reliably create the document structure.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>jsoup is a Java based library to work with HTML based content. It provides a very convenient API to extract and manipulate data, using the best of DOM, CSS, and jquery-like methods. It implements the WHATWG HTML5 specification, and parses HTML to the same DOM as modern browsers do. jsoup libary implements the WHATWG HTML5 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/982"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=982"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/982\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 983,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/982\/revisions\/983"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=982"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=982"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=982"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 981,
        "date": "2020-07-22T10:49:16",
        "date_gmt": "2020-07-22T10:49:16",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=981"
        },
        "modified": "2020-07-22T10:49:16",
        "modified_gmt": "2020-07-22T10:49:16",
        "slug": "environment-setup-3",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-3\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<h2>Local Environment Setup<\/h2>\n\n\n\n<p>JUnit is a framework for Java, so the very first requirement is to have JDK installed in your machine.<\/p>\n\n\n\n<h3>System Requirement<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>JDK<\/th><td>1.5 or above.<\/td><\/tr><tr><th>Memory<\/th><td>No minimum requirement.<\/td><\/tr><tr><th>Disk Space<\/th><td>No minimum requirement.<\/td><\/tr><tr><th>Operating System<\/th><td>No minimum requirement.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 1: Verify Java Installation in Your Machine<\/h2>\n\n\n\n<p>First of all, open the console and execute a java command based on the operating system you are working on.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Task<\/th><th>Command<\/th><\/tr><tr><td>Windows<\/td><td>Open Command Console<\/td><td>c:\\&gt; java -version<\/td><\/tr><tr><td>Linux<\/td><td>Open Command Terminal<\/td><td>$ java -version<\/td><\/tr><tr><td>Mac<\/td><td>Open Terminal<\/td><td>machine:&lt; joseph$ java -version<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let&#8217;s verify the output for all the operating systems \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>java version &#8220;1.6.0_21&#8243;Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)<\/td><\/tr><tr><td>Linux<\/td><td>java version &#8220;1.6.0_21&#8243;Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM) Client VM (build 17.0-b17, mixed mode, sharing)<\/td><\/tr><tr><td>Mac<\/td><td>java version &#8220;1.6.0_21&#8243;Java(TM) SE Runtime Environment (build 1.6.0_21-b07)Java HotSpot(TM)64-Bit Server VM (build 17.0-b17, mixed mode, sharing)<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>If you do not have Java installed on your system, then download the Java Software Development Kit (SDK) from the following link\u00a0https:\/\/www.oracle.com. We are assuming Java 1.6.0_21 as the installed version for this tutorial.<\/p>\n\n\n\n<h2>Step 2: Set JAVA Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>JAVA_HOME<\/strong>&nbsp;environment variable to point to the base directory location where Java is installed on your machine. For example.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable JAVA_HOME to C:\\Program Files\\Java\\jdk1.6.0_21<\/td><\/tr><tr><td>Linux<\/td><td>export JAVA_HOME = \/usr\/local\/java-current<\/td><\/tr><tr><td>Mac<\/td><td>export JAVA_HOME = \/Library\/Java\/Home<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append Java compiler location to the System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Append the string&nbsp;<strong>C:\\Program Files\\Java\\jdk1.6.0_21\\bin<\/strong>&nbsp;at the end of the system variable,&nbsp;<strong>Path<\/strong>.<\/td><\/tr><tr><td>Linux<\/td><td>export PATH = $PATH:$JAVA_HOME\/bin\/<\/td><\/tr><tr><td>Mac<\/td><td>not required<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Verify Java installation using the command&nbsp;<strong>java -version<\/strong>&nbsp;as explained above.<\/p>\n\n\n\n<h2>Step 3: Download jsoup Archive<\/h2>\n\n\n\n<p>Download the latest version of jsoup jar file from\u00a0Maven Repository. At the time of writing this tutorial, we have downloaded jsoup-1.8.3.jar and copied it into C:\\>jsoup folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>jsoup-1.8.3.jar<\/td><\/tr><tr><td>Linux<\/td><td>jsoup-1.8.3.jar<\/td><\/tr><tr><td>Mac<\/td><td>jsoup-1.8.3.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 4: Set jsoup Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>JSOUP_HOME<\/strong>&nbsp;environment variable to point to the base directory location where jsoup jar is stored on your machine. Let&#8217;s assuming we&#8217;ve stored jsoup-1.8.3.jar in the JSOUP folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>OS &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Set the environment variable JSOUP_HOME to C:\\JSOUP<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>export JSOUP_HOME = \/usr\/local\/JSOUP<\/td><\/tr><tr><td>3<\/td><td><strong>Mac<\/strong>export JSOUP_HOME = \/Library\/JSOUP<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 5: Set CLASSPATH Variable<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>CLASSPATH<\/strong>&nbsp;environment variable to point to the JSOUP jar location.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>OS &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Set the environment variable CLASSPATH to %CLASSPATH%;%JSOUP_HOME%\\jsoup-1.8.3.jar;.;<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>export CLASSPATH = $CLASSPATH:$JSOUP_HOME\/jsoup-1.8.3.jar:.<\/td><\/tr><tr><td>3<\/td><td><strong>Mac<\/strong>export CLASSPATH = $CLASSPATH:$JSOUP_HOME\/jsoup-1.8.3.jar:.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Local Environment Setup JUnit is a framework for Java, so the very first requirement is to have JDK installed in your machine. System Requirement JDK 1.5 or above. Memory No minimum requirement. Disk Space No minimum requirement. Operating System No minimum requirement. Step 1: Verify Java Installation in Your Machine First of all, open the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/981"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=981"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/981\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 984,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/981\/revisions\/984"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=981"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=981"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=981"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 980,
        "date": "2020-07-22T10:50:43",
        "date_gmt": "2020-07-22T10:50:43",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=980"
        },
        "modified": "2020-07-22T10:50:43",
        "modified_gmt": "2020-07-22T10:50:43",
        "slug": "parsing-string",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/parsing-string\/",
        "title": {
            "rendered": "Parsing String"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase parsing an HTML String into a Document object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\n<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>The parse(String html) method parses the input HTML into a new Document. This document object can be used to traverse and get details of the html dom.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>&lt;p>Sample Content&lt;\/p>&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n      System.out.println(document.title());\n      Elements paragraphs = document.getElementsByTag(\"p\");\n      for (Element paragraph : paragraphs) {\n            System.out.println(paragraph.text());\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sample Title\nSample Content<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase parsing an HTML String into a Document object. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. Description The parse(String html) method parses the input HTML into a new Document. This document object can be used to traverse and [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/980"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=980"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/980\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 985,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/980\/revisions\/985"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=980"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=980"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=980"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 979,
        "date": "2020-07-22T10:52:35",
        "date_gmt": "2020-07-22T10:52:35",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=979"
        },
        "modified": "2020-07-22T10:52:35",
        "modified_gmt": "2020-07-22T10:52:35",
        "slug": "parsing-body",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/parsing-body\/",
        "title": {
            "rendered": "Parsing Body"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase parsing an HTML fragement String into a Element object as html body.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parseBodyFragment(html);\nElement body = document.body();\n\ufeff<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML fragment String.<\/li><li><strong>body<\/strong>&nbsp;\u2212 represents element children of the document&#8217;s body element and is equivalent to document.getElementsByTag(&#8220;body&#8221;).<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>The parseBodyFragment(String html) method parses the input HTML into a new Document. This document object can be used to traverse and get details of the html body fragment.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;div>&lt;p>Sample Content&lt;\/p>\";\n      Document document = Jsoup.parseBodyFragment(html);\n      Element body = document.body();\n      Elements paragraphs = body.getElementsByTag(\"p\");\n      for (Element paragraph : paragraphs) {\n         System.out.println(paragraph.text());\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sample Content<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase parsing an HTML fragement String into a Element object as html body. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML fragment String. body&nbsp;\u2212 represents element children of the document&#8217;s body element and is equivalent to document.getElementsByTag(&#8220;body&#8221;). Description The parseBodyFragment(String [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/979"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=979"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/979\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 986,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/979\/revisions\/986"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=979"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=979"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=979"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 978,
        "date": "2020-07-22T10:53:42",
        "date_gmt": "2020-07-22T10:53:42",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=978"
        },
        "modified": "2020-07-22T10:53:42",
        "modified_gmt": "2020-07-22T10:53:42",
        "slug": "loading-from-url",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/loading-from-url\/",
        "title": {
            "rendered": "Loading from URL"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase fetching an HTML from the web using a url and then find its data.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String url = \"http:\/\/www.google.com\";\nDocument document = Jsoup.connect(url).get();<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to connect the url and get the HTML String.<\/li><li><strong>url<\/strong>&nbsp;\u2212 url of the html page to load.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>The connect(url) method makes a connection to the url and get() method return the html of the requested url.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.IOException;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) throws IOException {\n   \n      String url = \"http:\/\/www.google.com\";\n      Document document = Jsoup.connect(url).get();\n      System.out.println(document.title());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Google<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase fetching an HTML from the web using a url and then find its data. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to connect the url and get the HTML String. url&nbsp;\u2212 url of the html page to load. Description The connect(url) method makes a connection to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/978"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=978"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/978\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 987,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/978\/revisions\/987"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=978"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=978"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=978"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 977,
        "date": "2020-07-22T10:55:53",
        "date_gmt": "2020-07-22T10:55:53",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=977"
        },
        "modified": "2020-07-22T10:55:53",
        "modified_gmt": "2020-07-22T10:55:53",
        "slug": "loading-from-file",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/loading-from-file\/",
        "title": {
            "rendered": "Loading from File"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase fetching an HTML from the disk using a file and then find its data.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String url = \"http:\/\/www.google.com\";\nDocument document = Jsoup.connect(url).get();<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to connect the url and get the HTML String.<\/li><li><strong>url<\/strong>&nbsp;\u2212 url of the html page to load.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>The connect(url) method makes a connection to the url and get() method return the html of the requested url.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.File;\nimport java.io.IOException;\nimport java.net.URISyntaxException;\nimport java.net.URL;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) throws IOException, URISyntaxException {\n      \n      URL path = ClassLoader.getSystemResource(\"test.htm\");\n      File input = new File(path.toURI());\n      Document document = Jsoup.parse(input, \"UTF-8\");\n      System.out.println(document.title());\n   }\n}<\/code><\/pre>\n\n\n\n<p><em>test.htm<\/em><\/p>\n\n\n\n<p>Create following test.htm file in C:\\jsoup folder.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>Sample Title&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;p>Sample Content&lt;\/p>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sample Title<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase fetching an HTML from the disk using a file and then find its data. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to connect the url and get the HTML String. url&nbsp;\u2212 url of the html page to load. Description The connect(url) method makes a connection to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/977"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=977"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/977\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 988,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/977\/revisions\/988"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=977"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=977"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=977"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 976,
        "date": "2020-07-22T10:57:12",
        "date_gmt": "2020-07-22T10:57:12",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=976"
        },
        "modified": "2020-07-22T10:57:12",
        "modified_gmt": "2020-07-22T10:57:12",
        "slug": "using-dom-methods",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/using-dom-methods\/",
        "title": {
            "rendered": "Using DOM Methods"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase use of DOM like methods after parsing an HTML String into a Document object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\nElement sampleDiv = document.getElementById(\"sampleDiv\");\nElements links = sampleDiv.getElementsByTag(\"a\");<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><li><strong>sampleDiv<\/strong>&nbsp;\u2212 Element object represent the html node element identified by id &#8220;sampleDiv&#8221;.<\/li><li><strong>links<\/strong>&nbsp;\u2212 Elements object represents the multiple node elements identified by tag &#8220;a&#8221;.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>The parse(String html) method parses the input HTML into a new Document. This document object can be used to traverse and get details of the html dom.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>\"\n         + \"&lt;p>Sample Content&lt;\/p>\"\n         + \"&lt;div id='sampleDiv'>&lt;a href='www.google.com'>Google&lt;\/a>&lt;\/div>\"\n         +\"&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n      System.out.println(document.title());\n      Elements paragraphs = document.getElementsByTag(\"p\");\n      for (Element paragraph : paragraphs) {\n         System.out.println(paragraph.text());\n      }\n\n      Element sampleDiv = document.getElementById(\"sampleDiv\");\n      System.out.println(\"Data: \" + sampleDiv.text());\n      Elements links = sampleDiv.getElementsByTag(\"a\");\n\n      for (Element link : links) {\n         System.out.println(\"Href: \" + link.attr(\"href\"));\n         System.out.println(\"Text: \" + link.text());\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sample Title\nSample Content\nData: Google\nHref: www.google.com\nText: Google<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase use of DOM like methods after parsing an HTML String into a Document object. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. sampleDiv&nbsp;\u2212 Element object represent the html node element identified by id &#8220;sampleDiv&#8221;. links&nbsp;\u2212 Elements object represents [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/976"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=976"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/976\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 989,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/976\/revisions\/989"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=976"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=976"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=976"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 975,
        "date": "2020-07-22T10:58:29",
        "date_gmt": "2020-07-22T10:58:29",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=975"
        },
        "modified": "2020-07-22T10:58:29",
        "modified_gmt": "2020-07-22T10:58:29",
        "slug": "using-selector-syntax",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/using-selector-syntax\/",
        "title": {
            "rendered": "Using Selector Syntax"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase use of selector methods after parsing an HTML String into a Document object. jsoup supports selectors similar to CSS Selectors.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\nElement sampleDiv = document.getElementById(\"sampleDiv\");\nElements links = sampleDiv.getElementsByTag(\"a\");<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><li><strong>sampleDiv<\/strong>&nbsp;\u2212 Element object represent the html node element identified by id &#8220;sampleDiv&#8221;.<\/li><li><strong>links<\/strong>&nbsp;\u2212 Elements object represents the multiple node elements identified by tag &#8220;a&#8221;.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>The document.select(expression) method parses the given CSS selector expression to select a html dom element.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>\"\n         + \"&lt;p>Sample Content&lt;\/p>\"\n         + \"&lt;div id='sampleDiv'>&lt;a href='www.google.com'>Google&lt;\/a>\"\n         + \"&lt;h3>&lt;a>Sample&lt;\/a>&lt;h3>\"\n         +\"&lt;\/div>\"\n         + \"&lt;div id='imageDiv' class='header'>&lt;img name='google' src='google.png' \/>\"\n         + \"&lt;img name='yahoo' src='yahoo.jpg' \/>\"\n         +\"&lt;\/div>\"\n         +\"&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n\n      \/\/a with href\n      Elements links = document.select(\"a&#91;href]\");\n\n      for (Element link : links) {\n         System.out.println(\"Href: \" + link.attr(\"href\"));\n         System.out.println(\"Text: \" + link.text());\n      }\n\n      \/\/ img with src ending .png\n      Elements pngs = document.select(\"img&#91;src$=.png]\");\n\n      for (Element png : pngs) {\n         System.out.println(\"Name: \" + png.attr(\"name\"));\n      }\n\n      \/\/ div with class=header\n      Element headerDiv = document.select(\"div.header\").first();\n      System.out.println(\"Id: \" + headerDiv.id());\n   \n      \/\/ direct a after h3\n      Elements sampleLinks = document.select(\"h3 > a\"); \n\n      for (Element link : sampleLinks) {\n         System.out.println(\"Text: \" + link.text());\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Href: www.google.com\nText: Google\nName: google\nId: imageDiv\nText: Sample<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase use of selector methods after parsing an HTML String into a Document object. jsoup supports selectors similar to CSS Selectors. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. sampleDiv&nbsp;\u2212 Element object represent the html node element identified by [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/975"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=975"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/975\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 990,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/975\/revisions\/990"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=975"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=975"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=975"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 974,
        "date": "2020-07-22T11:00:03",
        "date_gmt": "2020-07-22T11:00:03",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=974"
        },
        "modified": "2020-07-22T11:00:03",
        "modified_gmt": "2020-07-22T11:00:03",
        "slug": "extract-attributes",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/extract-attributes\/",
        "title": {
            "rendered": "Extract Attributes"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase use of method to get attribute of a dom element after parsing an HTML String into a Document object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\nElement link = document.select(\"a\").first();\nSystem.out.println(\"Href: \" + link.attr(\"href\"));<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><li><strong>link<\/strong>&nbsp;\u2212 Element object represent the html node element representing anchor tag.<\/li><li><strong>link.attr()<\/strong>&nbsp;\u2212 attr(attribute) method retrives the element attribute.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>Element object represent a dom elment and provides various method to get the attribute of a dom element.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>\"\n         + \"&lt;p>Sample Content&lt;\/p>\"\n         + \"&lt;div id='sampleDiv'>&lt;a href='www.google.com'>Google&lt;\/a>\"\n         + \"&lt;h3>&lt;a>Sample&lt;\/a>&lt;h3>\"\n         +\"&lt;\/div>\"\n         +\"&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n\n      \/\/a with href\n      Element link = document.select(\"a\").first();         \n\n      System.out.println(\"Href: \" + link.attr(\"href\"));\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Href: www.google.com<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase use of method to get attribute of a dom element after parsing an HTML String into a Document object. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. link&nbsp;\u2212 Element object represent the html node element representing anchor tag. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/974"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=974"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/974\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 991,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/974\/revisions\/991"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=974"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=974"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=974"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 973,
        "date": "2020-07-22T11:01:32",
        "date_gmt": "2020-07-22T11:01:32",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=973"
        },
        "modified": "2020-07-22T11:01:32",
        "modified_gmt": "2020-07-22T11:01:32",
        "slug": "extract-text",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/extract-text\/",
        "title": {
            "rendered": "Extract Text"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase use of methods to get text after parsing an HTML String into a Document object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\nElement link = document.select(\"a\").first();     \nSystem.out.println(\"Text: \" + link.text());<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><li><strong>link<\/strong>&nbsp;\u2212 Element object represent the html node element representing anchor tag.<\/li><li><strong>link.text()<\/strong>&nbsp;\u2212 text() method retrives the element text.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>Element object represent a dom elment and provides various method to get the text of a dom element.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>\"\n         + \"&lt;p>Sample Content&lt;\/p>\"\n         + \"&lt;div id='sampleDiv'>&lt;a href='www.google.com'>Google&lt;\/a>\"\n         + \"&lt;h3>&lt;a>Sample&lt;\/a>&lt;h3>\"\n         +\"&lt;\/div>\"\n         +\"&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n\n      \/\/a with href\n      Element link = document.select(\"a\").first();         \n\n      System.out.println(\"Text: \" + link.text());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Text: Google<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase use of methods to get text after parsing an HTML String into a Document object. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. link&nbsp;\u2212 Element object represent the html node element representing anchor tag. link.text()&nbsp;\u2212 text() method retrives [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/973"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=973"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/973\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 992,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/973\/revisions\/992"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=973"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=973"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=973"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 972,
        "date": "2020-07-22T11:03:25",
        "date_gmt": "2020-07-22T11:03:25",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=972"
        },
        "modified": "2020-07-22T11:03:25",
        "modified_gmt": "2020-07-22T11:03:25",
        "slug": "extract-html",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/extract-html\/",
        "title": {
            "rendered": "Extract HTML"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase use of methods to get inner html and outer html after parsing an HTML String into a Document object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\nElement link = document.select(\"a\").first();         \n\nSystem.out.println(\"Outer HTML: \" + link.outerHtml());\nSystem.out.println(\"Inner HTML: \" + link.html());<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><li><strong>link<\/strong>&nbsp;\u2212 Element object represent the html node element representing anchor tag.<\/li><li><strong>link.outerHtml()<\/strong>&nbsp;\u2212 outerHtml() method retrives the element complete html.<\/li><li><strong>link.html()<\/strong>&nbsp;\u2212 html() method retrives the element inner html.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>Element object represent a dom elment and provides various method to get the html of a dom element.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>\"\n         + \"&lt;p>Sample Content&lt;\/p>\"\n         + \"&lt;div id='sampleDiv'>&lt;a href='www.google.com'>Google&lt;\/a>\"\n         + \"&lt;h3>&lt;a>Sample&lt;\/a>&lt;h3>\"\n         +\"&lt;\/div>\"\n         +\"&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n\n      \/\/a with href\n      Element link = document.select(\"a\").first();         \n\n      System.out.println(\"Outer HTML: \" + link.outerHtml());\n      System.out.println(\"Inner HTML: \" + link.html());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Outer HTML: &lt;a href=\"www.google.com\">Google&lt;\/a>\nInner HTML: Google<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase use of methods to get inner html and outer html after parsing an HTML String into a Document object. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. link&nbsp;\u2212 Element object represent the html node element representing anchor tag. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/972"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=972"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/972\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 993,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/972\/revisions\/993"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=972"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=972"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=972"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 971,
        "date": "2020-07-22T11:05:24",
        "date_gmt": "2020-07-22T11:05:24",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=971"
        },
        "modified": "2020-07-24T11:43:46",
        "modified_gmt": "2020-07-24T11:43:46",
        "slug": "working-with-urls",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/working-with-urls\/",
        "title": {
            "rendered": "Working with URLs"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase methods which can provide relative as well as absolute URLs present in the html page.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String url = \"http:\/\/www.codemeals.com\/\";\nDocument document = Jsoup.connect(url).get();\nElement link = document.select(\"a\").first();         \n\nSystem.out.println(\"Relative Link: \" + link.attr(\"href\"));\nSystem.out.println(\"Absolute Link: \" + link.attr(\"abs:href\"));\nSystem.out.println(\"Absolute Link: \" + link.absUrl(\"href\"));<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to connect to a url and get the html content.<\/li><li><strong>link<\/strong>&nbsp;\u2212 Element object represent the html node element representing anchor tag.<\/li><li><strong>link.attr(&#8220;href&#8221;)<\/strong>&nbsp;\u2212 provides the value of href present in anchor tag. It may be relative or absolute.<\/li><li><strong>link.attr(&#8220;abs:href&#8221;)<\/strong>&nbsp;\u2212 provides the absolute url after resolving against the document&#8217;s base URI.<\/li><li><strong>link.absUrl(&#8220;href&#8221;)<\/strong>&nbsp;\u2212 provides the absolute url after resolving against the document&#8217;s base URI.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>Element object represent a dom elment and provides methods to get relative as well as absolute URLs present in the html page.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.IOException;\n\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) throws IOException {\n   \n      String url = \"http:\/\/www.codemeals.com\/\";\n      Document document = Jsoup.connect(url).get();\n\n      Element link = document.select(\"a\").first();\n      System.out.println(\"Relative Link: \" + link.attr(\"href\"));\n      System.out.println(\"Absolute Link: \" + link.attr(\"abs:href\"));\n      System.out.println(\"Absolute Link: \" + link.absUrl(\"href\"));\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Relative Link: index.htm\nAbsolute Link: https:\/\/www.codemeals.com\/index.html\nAbsolute Link: https:\/\/www.codemeals.com\/index.html<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase methods which can provide relative as well as absolute URLs present in the html page. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to connect to a url and get the html content. link&nbsp;\u2212 Element object represent the html node element representing anchor tag. link.attr(&#8220;href&#8221;)&nbsp;\u2212 provides the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/971"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=971"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/971\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1191,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/971\/revisions\/1191"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=971"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=971"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=971"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 970,
        "date": "2020-07-22T11:07:10",
        "date_gmt": "2020-07-22T11:07:10",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=970"
        },
        "modified": "2020-07-22T11:07:10",
        "modified_gmt": "2020-07-22T11:07:10",
        "slug": "set-attributes",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/set-attributes\/",
        "title": {
            "rendered": "Set Attributes"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase use of method to set attributes of a dom element, bulk updates and add\/remove class methods after parsing an HTML String into a Document object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\nElement link = document.select(\"a\").first();         \nlink.attr(\"href\",\"www.yahoo.com\");     \nlink.addClass(\"header\"); \nlink.removeClass(\"header\");  <\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><li><strong>link<\/strong>&nbsp;\u2212 Element object represent the html node element representing anchor tag.<\/li><li><strong>link.attr()<\/strong>&nbsp;\u2212 attr(attribute,value) method set the element attribute the corresponding value.<\/li><li><strong>link.addClass()<\/strong>&nbsp;\u2212 addClass(class) method add the class under class attribute.<\/li><li><strong>link.removeClass()<\/strong>&nbsp;\u2212 removeClass(class) method remove the class under class attribute.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>Element object represent a dom elment and provides various method to get the attribute of a dom element.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\nimport org.jsoup.select.Elements;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>\"\n         + \"&lt;p>Sample Content&lt;\/p>\"\n         + \"&lt;div id='sampleDiv'>&lt;a id='googleA' href='www.google.com'>Google&lt;\/a>&lt;\/div>\"\n         + \"&lt;div class='comments'>&lt;a href='www.sample1.com'>Sample1&lt;\/a>\"\n         + \"&lt;a href='www.sample2.com'>Sample2&lt;\/a>\"\n         + \"&lt;a href='www.sample3.com'>Sample3&lt;\/a>&lt;div>\"\n         +\"&lt;\/div>\"\n         + \"&lt;div id='imageDiv' class='header'>&lt;img name='google' src='google.png' \/>\"\n         + \"&lt;img name='yahoo' src='yahoo.jpg' \/>\"\n         +\"&lt;\/div>\"\n         +\"&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n\n      \/\/Example: set attribute\n      Element link = document.getElementById(\"googleA\");\n      System.out.println(\"Outer HTML Before Modification :\"  + link.outerHtml());\n      link.attr(\"href\",\"www.yahoo.com\");      \n      System.out.println(\"Outer HTML After Modification :\"  + link.outerHtml());\n      System.out.println(\"---\");\n      \n      \/\/Example: add class\n      Element div = document.getElementById(\"sampleDiv\");\n      System.out.println(\"Outer HTML Before Modification :\"  + div.outerHtml());\n      link.addClass(\"header\");      \n      System.out.println(\"Outer HTML After Modification :\"  + div.outerHtml());\n      System.out.println(\"---\");\n      \n      \/\/Example: remove class\n      Element div1 = document.getElementById(\"imageDiv\");\n      System.out.println(\"Outer HTML Before Modification :\"  + div1.outerHtml());\n      div1.removeClass(\"header\");      \n      System.out.println(\"Outer HTML After Modification :\"  + div1.outerHtml());\n      System.out.println(\"---\");\n      \n      \/\/Example: bulk update\n      Elements links = document.select(\"div.comments a\");\n      System.out.println(\"Outer HTML Before Modification :\"  + links.outerHtml());\n      links.attr(\"rel\", \"nofollow\");\n      System.out.println(\"Outer HTML Before Modification :\"  + links.outerHtml());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Outer HTML Before Modification :&lt;a id=\"googleA\" href=\"www.google.com\">Google&lt;\/a>\nOuter HTML After Modification :&lt;a id=\"googleA\" href=\"www.yahoo.com\">Google&lt;\/a>\n---\nOuter HTML Before Modification :&lt;div id=\"sampleDiv\">\n &lt;a id=\"googleA\" href=\"www.yahoo.com\">Google&lt;\/a>\n&lt;\/div>\nOuter HTML After Modification :&lt;div id=\"sampleDiv\">\n &lt;a id=\"googleA\" href=\"www.yahoo.com\" class=\"header\">Google&lt;\/a>\n&lt;\/div>\n---\nOuter HTML Before Modification :&lt;div id=\"imageDiv\" class=\"header\">\n &lt;img name=\"google\" src=\"google.png\">\n &lt;img name=\"yahoo\" src=\"yahoo.jpg\">\n&lt;\/div>\nOuter HTML After Modification :&lt;div id=\"imageDiv\" class=\"\">\n &lt;img name=\"google\" src=\"google.png\">\n &lt;img name=\"yahoo\" src=\"yahoo.jpg\">\n&lt;\/div>\n---\nOuter HTML Before Modification :&lt;a href=\"www.sample1.com\">Sample1&lt;\/a>\n&lt;a href=\"www.sample2.com\">Sample2&lt;\/a>\n&lt;a href=\"www.sample3.com\">Sample3&lt;\/a>\nOuter HTML Before Modification :&lt;a href=\"www.sample1.com\" rel=\"nofollow\">Sample1&lt;\/a>\n&lt;a href=\"www.sample2.com\" rel=\"nofollow\">Sample2&lt;\/a>\n&lt;a href=\"www.sample3.com\" rel=\"nofollow\">Sample3&lt;\/a><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase use of method to set attributes of a dom element, bulk updates and add\/remove class methods after parsing an HTML String into a Document object. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. link&nbsp;\u2212 Element object represent the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/970"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=970"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/970\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 995,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/970\/revisions\/995"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=970"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=970"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=970"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 969,
        "date": "2020-07-22T11:10:02",
        "date_gmt": "2020-07-22T11:10:02",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=969"
        },
        "modified": "2020-07-22T11:10:02",
        "modified_gmt": "2020-07-22T11:10:02",
        "slug": "set-html",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/set-html\/",
        "title": {
            "rendered": "Set HTML"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase use of method to set, prepend or append html to a dom element after parsing an HTML String into a Document object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\nElement div = document.getElementById(\"sampleDiv\");     \ndiv.html(\"&lt;p>This is a sample content.&lt;\/p>\");   \ndiv.prepend(\"&lt;p>Initial Text&lt;\/p>\");\ndiv.append(\"&lt;p>End Text&lt;\/p>\");  <\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><li><strong>div<\/strong>&nbsp;\u2212 Element object represent the html node element representing anchor tag.<\/li><li><strong>div.html()<\/strong>&nbsp;\u2212 html(content) method replaces the element&#8217;s outer html with the corresponding value.<\/li><li><strong>div.prepend()<\/strong>&nbsp;\u2212 prepend(content) method adds the content before the outer html.<\/li><li><strong>div.append()<\/strong>&nbsp;\u2212 append(content) method adds the content after the outer html.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>Element object represent a dom elment and provides various method to set, prepend or append html to a dom element.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n   \n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>\"\n         + \"&lt;div id='sampleDiv'>&lt;a id='googleA' href='www.google.com'>Google&lt;\/a>&lt;\/div>\"\n         +\"&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n\n      Element div = document.getElementById(\"sampleDiv\");\n      System.out.println(\"Outer HTML Before Modification :\\n\"  + div.outerHtml());\n      div.html(\"&lt;p>This is a sample content.&lt;\/p>\");\n      System.out.println(\"Outer HTML After Modification :\\n\"  + div.outerHtml());\n      div.prepend(\"&lt;p>Initial Text&lt;\/p>\");\n      System.out.println(\"After Prepend :\\n\"  + div.outerHtml());\n      div.append(\"&lt;p>End Text&lt;\/p>\");\n      System.out.println(\"After Append :\\n\"  + div.outerHtml());          \n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Outer HTML Before Modification :\n&lt;div id=\"sampleDiv\">\n &lt;a id=\"googleA\" href=\"www.google.com\">Google&lt;\/a>\n&lt;\/div>\nOuter HTML After Modification :\n&lt;div id=\"sampleDiv\">\n &lt;p>This is a sample content.&lt;\/p>\n&lt;\/div>\nAfter Prepend :\n&lt;div id=\"sampleDiv\">\n &lt;p>Initial Text&lt;\/p>\n &lt;p>This is a sample content.&lt;\/p>\n&lt;\/div>\nAfter Append :\n&lt;div id=\"sampleDiv\">\n &lt;p>Initial Text&lt;\/p>\n &lt;p>This is a sample content.&lt;\/p>\n &lt;p>End Text&lt;\/p>\n&lt;\/div>\nOuter HTML Before Modification :\n&lt;span>Sample Content&lt;\/span>\nOuter HTML After Modification :\n&lt;span>Sample Content&lt;\/span><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase use of method to set, prepend or append html to a dom element after parsing an HTML String into a Document object. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. div&nbsp;\u2212 Element object represent the html node element [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/969"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=969"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/969\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 996,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/969\/revisions\/996"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=969"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=969"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=969"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 968,
        "date": "2020-07-22T11:13:18",
        "date_gmt": "2020-07-22T11:13:18",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=968"
        },
        "modified": "2020-07-22T11:13:18",
        "modified_gmt": "2020-07-22T11:13:18",
        "slug": "set-text-content",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/set-text-content\/",
        "title": {
            "rendered": "Set Text Content"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase use of method to set, prepend or append text to a dom element after parsing an HTML String into a Document object.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Document document = Jsoup.parse(html);\nElement div = document.getElementById(\"sampleDiv\");     \ndiv.text(\"This is a sample content.\");   \ndiv.prepend(\"Initial Text.\");\ndiv.append(\"End Text.\");   \n\ufeff<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>document<\/strong>&nbsp;\u2212 document object represents the HTML DOM.<\/li><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 HTML String.<\/li><li><strong>div<\/strong>&nbsp;\u2212 Element object represent the html node element representing anchor tag.<\/li><li><strong>div.text()<\/strong>&nbsp;\u2212 text(content) method replaces the element&#8217;s content with the corresponding value.<\/li><li><strong>div.prepend()<\/strong>&nbsp;\u2212 prepend(content) method adds the content before the outer html.<\/li><li><strong>div.append()<\/strong>&nbsp;\u2212 append(content) method adds the content after the outer html.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>Element object represent a dom elment and provides various method to set, prepend or append html to a dom element.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.nodes.Element;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n\n      String html = \"&lt;html>&lt;head>&lt;title>Sample Title&lt;\/title>&lt;\/head>\"\n         + \"&lt;body>\"\n         + \"&lt;div id='sampleDiv'>&lt;a id='googleA' href='www.google.com'>Google&lt;\/a>&lt;\/div>\"\n         +\"&lt;\/body>&lt;\/html>\";\n      Document document = Jsoup.parse(html);\n\n      Element div = document.getElementById(\"sampleDiv\");\n      System.out.println(\"Outer HTML Before Modification :\\n\"  + div.outerHtml());\n      div.text(This is a sample content.\");\n      System.out.println(\"Outer HTML After Modification :\\n\"  + div.outerHtml());\n      div.prepend(\"Initial Text.\");\n      System.out.println(\"After Prepend :\\n\"  + div.outerHtml());\n      div.append(\"End Text.\");\n      System.out.println(\"After Append :\\n\"  + div.outerHtml());\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Outer HTML Before Modification :\n&lt;div id=\"sampleDiv\">\n &lt;a id=\"googleA\" href=\"www.google.com\">Google&lt;\/a>\n&lt;\/div>\nOuter HTML After Modification :\n&lt;div id=\"sampleDiv\">\n This is a sample content.\n&lt;\/div>\nAfter Prepend :\n&lt;div id=\"sampleDiv\">\n Initial Text.This is a sample content.\n&lt;\/div>\nAfter Append :\n&lt;div id=\"sampleDiv\">\n Initial Text.This is a sample content.End Text.\n&lt;\/div><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase use of method to set, prepend or append text to a dom element after parsing an HTML String into a Document object. Syntax Where document&nbsp;\u2212 document object represents the HTML DOM. Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 HTML String. div&nbsp;\u2212 Element object represent the html node element [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/968"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=968"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/968\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 997,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/968\/revisions\/997"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=968"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=968"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=968"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 967,
        "date": "2020-07-22T11:14:28",
        "date_gmt": "2020-07-22T11:14:28",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=967"
        },
        "modified": "2020-07-22T11:14:28",
        "modified_gmt": "2020-07-22T11:14:28",
        "slug": "sanitize-html",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/sanitize-html\/",
        "title": {
            "rendered": "Sanitize HTML"
        },
        "content": {
            "rendered": "\n<p>Following example will showcase prevention of XSS attacks or cross-site scripting attack.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>String safeHtml =  Jsoup.clean(html, Whitelist.basic());  \n<\/code><\/pre>\n\n\n\n<p>Where<\/p>\n\n\n\n<ul><li><strong>Jsoup<\/strong>&nbsp;\u2212 main class to parse the given HTML String.<\/li><li><strong>html<\/strong>&nbsp;\u2212 Initial HTML String.<\/li><li><strong>safeHtml<\/strong>&nbsp;\u2212 Cleaned HTML.<\/li><li><strong>Whitelist<\/strong>&nbsp;\u2212 Object to provide default configurations to safeguard html.<\/li><li><strong>clean()<\/strong>&nbsp;\u2212 cleans the html using Whitelist.<\/li><\/ul>\n\n\n\n<h2>Description<\/h2>\n\n\n\n<p>Jsoup object sanitizes an html using Whitelist configurations.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>Create the following java program using any editor of your choice in say C:\/&gt; jsoup.<\/p>\n\n\n\n<p><em>JsoupTester.java<\/em><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.jsoup.Jsoup;\nimport org.jsoup.safety.Whitelist;\n\npublic class JsoupTester {\n   public static void main(String&#91;] args) {\n\n      String html = \"&lt;p>&lt;a href='http:\/\/example.com\/'\"\n         +\" onclick='checkData()'>Link&lt;\/a>&lt;\/p>\";\n\n      System.out.println(\"Initial HTML: \" + html);\n      String safeHtml =  Jsoup.clean(html, Whitelist.basic());\n\n      System.out.println(\"Cleaned HTML: \" +safeHtml);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Verify the result<\/h2>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>javac JsoupTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the JsoupTester to see the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\jsoup>java JsoupTester\n<\/code><\/pre>\n\n\n\n<p>See the result.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial HTML: &lt;p>&lt;a href='http:\/\/example.com\/' onclick='checkData()'>Link&lt;\/a>&lt;\/p>\nCleaned HTML: &lt;p>&lt;a href=\"http:\/\/example.com\/\" rel=\"nofollow\">Link&lt;\/a>&lt;\/p><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following example will showcase prevention of XSS attacks or cross-site scripting attack. Syntax Where Jsoup&nbsp;\u2212 main class to parse the given HTML String. html&nbsp;\u2212 Initial HTML String. safeHtml&nbsp;\u2212 Cleaned HTML. Whitelist&nbsp;\u2212 Object to provide default configurations to safeguard html. clean()&nbsp;\u2212 cleans the html using Whitelist. Description Jsoup object sanitizes an html using Whitelist configurations. Example [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            23
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/967"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=967"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/967\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 998,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/967\/revisions\/998"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=967"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=967"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=967"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]