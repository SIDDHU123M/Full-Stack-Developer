[{"id":4850,"date":"2021-02-11T11:31:24","date_gmt":"2021-02-11T11:31:24","guid":{"rendered":"http://python3.foobrdigital.com/?p=4850"},"modified":"2021-02-11T11:31:24","modified_gmt":"2021-02-11T11:31:24","slug":"introduction-15","status":"publish","type":"post","link":"https://python3.foobrdigital.com/introduction-15/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p>Pytest is a python based testing framework, which is used to write and execute test codes. In the present days of REST services, pytest is mainly used for API testing even though we can use pytest to write simple to complex tests, i.e., we can write codes to test API, database, UI, etc.</p>\n\n\n\n<h2>Advantages of Pytest</h2>\n\n\n\n<p>The advantages of Pytest are as follows −</p>\n\n\n\n<ul><li>Pytest can run multiple tests in parallel, which reduces the execution time of the test suite.</li><li>Pytest has its own way to detect the test file and test functions automatically, if not mentioned explicitly.</li><li>Pytest allows us to skip a subset of the tests during execution.</li><li>Pytest allows us to run a subset of the entire test suite.</li><li>Pytest is free and open source.</li><li>Because of its simple syntax, pytest is very easy to start with.</li></ul>\n\n\n\n<p>In this tutorial, we will explain the pytest fundamentals with sample programs.</p>\n","protected":false},"excerpt":{"rendered":"<p>Pytest is a python based testing framework, which is used to write and execute test codes. In the present days of REST services, pytest is mainly used for API testing even though we can use pytest to write simple to complex tests, i.e., we can write codes to test API, database, UI, etc. Advantages of [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4850"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4850"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4850/revisions"}],"predecessor-version":[{"id":4851,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4850/revisions/4851"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4850"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4850"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4850"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4852,"date":"2021-02-11T11:32:45","date_gmt":"2021-02-11T11:32:45","guid":{"rendered":"http://python3.foobrdigital.com/?p=4852"},"modified":"2021-02-11T11:32:45","modified_gmt":"2021-02-11T11:32:45","slug":"environment-setup-7","status":"publish","type":"post","link":"https://python3.foobrdigital.com/environment-setup-7/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>To start the installation, execute the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install pytest == 2.9.1\n</code></pre>\n\n\n\n<p>We can install any version of pytest. Here, 2.9.1 is the version we are installing.</p>\n\n\n\n<p>To install the latest version of pytest, execute the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install pytest\n</code></pre>\n\n\n\n<p>Confirm the installation using the following command to display the help section of pytest.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest -h\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>To start the installation, execute the following command − We can install any version of pytest. Here, 2.9.1 is the version we are installing. To install the latest version of pytest, execute the following command − Confirm the installation using the following command to display the help section of pytest.</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4852"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4852"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4852/revisions"}],"predecessor-version":[{"id":4853,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4852/revisions/4853"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4852"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4852"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4852"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4854,"date":"2021-02-11T11:33:39","date_gmt":"2021-02-11T11:33:39","guid":{"rendered":"http://python3.foobrdigital.com/?p=4854"},"modified":"2021-02-11T11:33:39","modified_gmt":"2021-02-11T11:33:39","slug":"identifying-test-files-and-test-functions","status":"publish","type":"post","link":"https://python3.foobrdigital.com/identifying-test-files-and-test-functions/","title":{"rendered":"Identifying Test files and Test Functions"},"content":{"rendered":"\n<pre id=\"block-1dec694d-0170-4592-bccb-fd9c94812f3a\" class=\"wp-block-preformatted\">Running pytest without mentioning a filename will run all files of format <strong>test_*.py</strong> or <strong>*_test.py</strong> in the current directory and subdirectories. Pytest automatically identifies those files as test files. We <strong>can</strong> make pytest run other filenames by explicitly mentioning them.\nPytest requires the test function names to start with <strong>test</strong>. Function names which are not of format <strong>test*</strong> are not considered as test functions by pytest. We <strong>cannot</strong> explicitly make pytest consider any function not starting with <strong>test</strong> as a test function.\nWe will understand the execution of tests in our subsequent chapters.\n\n\n</pre>\n","protected":false},"excerpt":{"rendered":"<p>Running pytest without mentioning a filename will run all files of format test_*.py or *_test.py in the current directory and subdirectories. Pytest automatically identifies those files as test files. We can make pytest run other filenames by explicitly mentioning them. Pytest requires the test function names to start with test. Function names which are not of format test* are not considered as test functions [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4854"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4854"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4854/revisions"}],"predecessor-version":[{"id":4855,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4854/revisions/4855"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4854"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4854"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4854"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4856,"date":"2021-02-11T11:34:58","date_gmt":"2021-02-11T11:34:58","guid":{"rendered":"http://python3.foobrdigital.com/?p=4856"},"modified":"2021-02-11T11:34:58","modified_gmt":"2021-02-11T11:34:58","slug":"starting-with-basic-test","status":"publish","type":"post","link":"https://python3.foobrdigital.com/starting-with-basic-test/","title":{"rendered":"Starting With Basic Test"},"content":{"rendered":"\n<p>Now, we will start with our first pytest program. We will first create a directory and thereby, create our test files in the directory.</p>\n\n\n\n<p>Let us follow the steps shown below −</p>\n\n\n\n<ul><li>Create a new directory named&nbsp;<strong>automation</strong>&nbsp;and navigate into the directory in your command line.</li><li>Create a file named&nbsp;<strong>test_square.py</strong>&nbsp;and add the below code to that file.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import math\r\n\r\ndef test_sqrt():\r\n   num = 25\r\n   assert math.sqrt(num) == 5\r\n\r\ndef testsquare():\r\n   num = 7\r\n   assert 7*7 == 40\r\n\r\ndef tesequality():\r\n   assert 10 == 11</code></pre>\n\n\n\n<p>Run the test using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest\n</code></pre>\n\n\n\n<p>The above command will generate the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test_square.py .F\r\n============================================== FAILURES \r\n==============================================\r\n______________________________________________ testsquare \r\n_____________________________________________\r\n   def testsquare():\r\n   num=7\r\n>  assert 7*7 == 40\r\nE  assert (7 * 7) == 40\r\ntest_square.py:9: AssertionError\r\n================================= 1 failed, 1 passed in 0.06 seconds \r\n=================================\n</code></pre>\n\n\n\n<p>See the first line of the result. It displays the file name and the results. F represents a test failure and dot(.) represents a test success.</p>\n\n\n\n<p>Below that, we can see the details of the failed tests. It will show at which statement the test has failed. In our example, 7*7 is compared for equality against 40, which is wrong. In the end, we can see test execution summary, 1 failed and 1 passed.</p>\n\n\n\n<p>The function tesequality is not executed because pytest will not consider it as a test since its name is not of the format&nbsp;<strong>test*</strong>.</p>\n\n\n\n<p>Now, execute the below command and see the result again −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest -v\n</code></pre>\n\n\n\n<p>-v increases the verbosity.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test_square.py::test_sqrt PASSED\r\ntest_square.py::testsquare FAILED\r\n============================================== FAILURES \r\n==============================================\r\n_____________________________________________ testsquare \r\n_____________________________________________\r\n   def testsquare():\r\n   num = 7\r\n>  assert 7*7 == 40\r\nE  assert (7 * 7) == 40\r\ntest_square.py:9: AssertionError\r\n================================= 1 failed, 1 passed in 0.04 seconds \r\n=================================\n</code></pre>\n\n\n\n<p>Now the result is more explanatory about the test that failed and the test that passed.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− pytest command will execute all the files of format&nbsp;<strong>test_*</strong>&nbsp;or&nbsp;<strong>*_test</strong>&nbsp;in the current directory and subdirectories.</p>\n","protected":false},"excerpt":{"rendered":"<p>Now, we will start with our first pytest program. We will first create a directory and thereby, create our test files in the directory. Let us follow the steps shown below − Create a new directory named&nbsp;automation&nbsp;and navigate into the directory in your command line. Create a file named&nbsp;test_square.py&nbsp;and add the below code to that [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4856"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4856"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4856/revisions"}],"predecessor-version":[{"id":4857,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4856/revisions/4857"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4856"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4856"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4856"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4858,"date":"2021-02-11T11:36:20","date_gmt":"2021-02-11T11:36:20","guid":{"rendered":"http://python3.foobrdigital.com/?p=4858"},"modified":"2021-02-11T11:36:20","modified_gmt":"2021-02-11T11:36:20","slug":"file-execution","status":"publish","type":"post","link":"https://python3.foobrdigital.com/file-execution/","title":{"rendered":"File Execution"},"content":{"rendered":"\n<p>In this chapter, we will learn how to execute single test file and multiple test files. We already have a test file&nbsp;<strong>test_square.py</strong>&nbsp;created. Create a new test file&nbsp;<strong>test_compare.py</strong>&nbsp;with the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def test_greater():\r\n   num = 100\r\n   assert num > 100\r\n\r\ndef test_greater_equal():\r\n   num = 100\r\n   assert num >= 100\r\n\r\ndef test_less():\r\n   num = 100\r\n   assert num &lt; 200</code></pre>\n\n\n\n<p>Now to run all the tests from all the files (2 files here) we need to run the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest -v\n</code></pre>\n\n\n\n<p>The above command will run tests from both&nbsp;<strong>test_square.py</strong>&nbsp;and&nbsp;<strong>test_compare.py</strong>. The output will be generated as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test_compare.py::test_greater FAILED\r\ntest_compare.py::test_greater_equal PASSED\r\ntest_compare.py::test_less PASSED\r\ntest_square.py::test_sqrt PASSED\r\ntest_square.py::testsquare FAILED\r\n================================================ FAILURES \r\n================================================\r\n______________________________________________ test_greater \r\n______________________________________________\r\n   def test_greater():\r\n   num = 100\r\n>  assert num > 100\r\nE  assert 100 > 100\r\n\r\ntest_compare.py:3: AssertionError\r\n_______________________________________________ testsquare \r\n_______________________________________________\r\n   def testsquare():\r\n   num = 7\r\n>  assert 7*7 == 40\r\nE  assert (7 * 7) == 40\r\n\r\ntest_square.py:9: AssertionError\r\n=================================== 2 failed, 3 passed in 0.07 seconds \r\n===================================\n</code></pre>\n\n\n\n<p>To execute the tests from a specific file, use the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest &lt;filename> -v\n</code></pre>\n\n\n\n<p>Now, run the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest test_compare.py -v\n</code></pre>\n\n\n\n<p>The above command will execute the tests only from file&nbsp;<strong>test_compare.py.</strong>&nbsp;Our result will be −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test_compare.py::test_greater FAILED\ntest_compare.py::test_greater_equal PASSED\ntest_compare.py::test_less PASSED\n============================================== FAILURES \n==============================================\n____________________________________________ test_greater \n____________________________________________\n   def test_greater():\n   num = 100\n&gt;  assert num &gt; 100\nE  assert 100 &gt; 100\ntest_compare.py:3: AssertionError\n================================= 1 failed, 2 passed in 0.04 seconds \n=================================\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn how to execute single test file and multiple test files. We already have a test file&nbsp;test_square.py&nbsp;created. Create a new test file&nbsp;test_compare.py&nbsp;with the following code − Now to run all the tests from all the files (2 files here) we need to run the following command − The above command [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4858"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4858"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4858/revisions"}],"predecessor-version":[{"id":4859,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4858/revisions/4859"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4858"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4858"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4858"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4860,"date":"2021-02-11T11:37:01","date_gmt":"2021-02-11T11:37:01","guid":{"rendered":"http://python3.foobrdigital.com/?p=4860"},"modified":"2021-02-11T11:37:01","modified_gmt":"2021-02-11T11:37:01","slug":"execute-a-subset-of-test-suite","status":"publish","type":"post","link":"https://python3.foobrdigital.com/execute-a-subset-of-test-suite/","title":{"rendered":"Execute a Subset of Test Suite"},"content":{"rendered":"\n<p>In a real scenario, we will have multiple test files and each file will have a number of tests. Tests will cover various modules and functionalities. Suppose, we want to run only a specific set of tests; how do we go about it?</p>\n\n\n\n<p>Pytest provides two ways to run the subset of the test suite.</p>\n\n\n\n<ul><li>Select tests to run based on substring matching of test names.</li><li>Select tests groups to run based on the markers applied.</li></ul>\n\n\n\n<p>We will explain these two with examples in subsequent chapters.</p>\n","protected":false},"excerpt":{"rendered":"<p>In a real scenario, we will have multiple test files and each file will have a number of tests. Tests will cover various modules and functionalities. Suppose, we want to run only a specific set of tests; how do we go about it? Pytest provides two ways to run the subset of the test suite. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4860"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4860"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4860/revisions"}],"predecessor-version":[{"id":4861,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4860/revisions/4861"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4860"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4860"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4860"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4862,"date":"2021-02-11T11:37:51","date_gmt":"2021-02-11T11:37:51","guid":{"rendered":"http://python3.foobrdigital.com/?p=4862"},"modified":"2021-02-11T11:37:51","modified_gmt":"2021-02-11T11:37:51","slug":"substring-matching-of-test-names","status":"publish","type":"post","link":"https://python3.foobrdigital.com/substring-matching-of-test-names/","title":{"rendered":"Substring Matching of Test Names"},"content":{"rendered":"\n<p>To execute the tests containing a string in its name we can use the following syntax −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest -k &lt;substring> -v\n</code></pre>\n\n\n\n<p>-k &lt;substring&gt; represents the substring to search for in the test names.</p>\n\n\n\n<p>Now, run the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest -k great -v\n</code></pre>\n\n\n\n<p>This will execute all the test names having the word&nbsp;<strong>‘great’</strong>&nbsp;in its name. In this case, they are&nbsp;<strong>test_greater()</strong>&nbsp;and&nbsp;<strong>test_greater_equal()</strong>. See the result below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test_compare.py::test_greater FAILED\r\ntest_compare.py::test_greater_equal PASSED\r\n============================================== FAILURES \r\n==============================================\r\n____________________________________________ test_greater \r\n____________________________________________\r\ndef test_greater():\r\nnum = 100\r\n>  assert num > 100\r\nE  assert 100 > 100\r\ntest_compare.py:3: AssertionError\r\n========================== 1 failed, 1 passed, 3 deselected in 0.07 seconds \r\n==========================\n</code></pre>\n\n\n\n<p>Here in the result, we can see 3 tests deselected. This is because those test names do not contain the word&nbsp;<strong>great</strong>&nbsp;in them.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− The name of the test function should still start with ‘test’.</p>\n","protected":false},"excerpt":{"rendered":"<p>To execute the tests containing a string in its name we can use the following syntax − -k &lt;substring&gt; represents the substring to search for in the test names. Now, run the following command − This will execute all the test names having the word&nbsp;‘great’&nbsp;in its name. In this case, they are&nbsp;test_greater()&nbsp;and&nbsp;test_greater_equal(). See the result [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4862"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4862"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4862/revisions"}],"predecessor-version":[{"id":4863,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4862/revisions/4863"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4862"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4862"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4862"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4864,"date":"2021-02-11T11:38:47","date_gmt":"2021-02-11T11:38:47","guid":{"rendered":"http://python3.foobrdigital.com/?p=4864"},"modified":"2021-02-11T11:38:47","modified_gmt":"2021-02-11T11:38:47","slug":"grouping-the-tests","status":"publish","type":"post","link":"https://python3.foobrdigital.com/grouping-the-tests/","title":{"rendered":"Grouping the Tests"},"content":{"rendered":"\n<p>Pytest allows us to use markers on test functions. Markers are used to set various features/attributes to test functions. Pytest provides many inbuilt markers such as xfail, skip and parametrize. Apart from that, users can create their own marker names. Markers are applied on the tests using the syntax given below −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">@pytest.mark.&lt;markername&gt;\n</pre>\n\n\n\n<p>To use markers, we have to&nbsp;<strong>import pytest</strong>&nbsp;module in the test file. We can define our own marker names to the tests and run the tests having those marker names.</p>\n\n\n\n<p>To run the marked tests, we can use the following syntax −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">pytest -m &lt;markername&gt; -v\n</pre>\n\n\n\n<p>-m &lt;markername&gt; represents the marker name of the tests to be executed.</p>\n\n\n\n<p>Update our test files&nbsp;<strong>test_compare.py</strong>&nbsp;and&nbsp;<strong>test_square.py</strong>&nbsp;with the following code. We are defining 3 markers&nbsp;<strong>– great, square, others</strong>.</p>\n\n\n\n<h2>test_compare.py</h2>\n\n\n\n<pre class=\"wp-block-preformatted\">import pytest\n@pytest.mark.great\ndef test_greater():\n   num = 100\n   assert num &gt; 100\n\n@pytest.mark.great\ndef test_greater_equal():\n   num = 100\n   assert num &gt;= 100\n\n@pytest.mark.others\ndef test_less():\n   num = 100\n   assert num &lt; 200</pre>\n\n\n\n<h2>test_square.py</h2>\n\n\n\n<pre class=\"wp-block-preformatted\">import pytest\nimport math\n\n@pytest.mark.square\ndef test_sqrt():\n   num = 25\n   assert math.sqrt(num) == 5\n\n@pytest.mark.square\ndef testsquare():\n   num = 7\n   assert 7*7 == 40\n\n@pytest.mark.others\n   def test_equality():\n   assert 10 == 11</pre>\n\n\n\n<p>Now to run the tests marked as&nbsp;<strong>others</strong>, run the following command −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">pytest -m others -v\n</pre>\n\n\n\n<p>See the result below. It ran the 2 tests marked as&nbsp;<strong>others</strong>.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">test_compare.py::test_less PASSED\ntest_square.py::test_equality FAILED\n============================================== FAILURES\n==============================================\n___________________________________________ test_equality\n____________________________________________\n   @pytest.mark.others\n   def test_equality():\n&gt;  assert 10 == 11\nE  assert 10 == 11\ntest_square.py:16: AssertionError\n========================== 1 failed, 1 passed, 4 deselected in 0.08 seconds\n==========================\n</pre>\n\n\n\n<p>Similarly, we can run tests with other markers also – great, compare</p>\n","protected":false},"excerpt":{"rendered":"<p>Pytest allows us to use markers on test functions. Markers are used to set various features/attributes to test functions. Pytest provides many inbuilt markers such as xfail, skip and parametrize. Apart from that, users can create their own marker names. Markers are applied on the tests using the syntax given below − @pytest.mark.&lt;markername&gt; To use [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4864"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4864"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4864/revisions"}],"predecessor-version":[{"id":4865,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4864/revisions/4865"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4864"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4864"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4864"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4866,"date":"2021-02-11T11:39:21","date_gmt":"2021-02-11T11:39:21","guid":{"rendered":"http://python3.foobrdigital.com/?p=4866"},"modified":"2021-02-11T11:39:21","modified_gmt":"2021-02-11T11:39:21","slug":"fixtures","status":"publish","type":"post","link":"https://python3.foobrdigital.com/fixtures/","title":{"rendered":"Fixtures"},"content":{"rendered":"\n<p>Fixtures are functions, which will run before each test function to which it is applied. Fixtures are used to feed some data to the tests such as database connections, URLs to test and some sort of input data. Therefore, instead of running the same code for every test, we can attach fixture function to the tests and it will run and return the data to the test before executing each test.</p>\n\n\n\n<p>A function is marked as a fixture by −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">@pytest.fixture\n</pre>\n\n\n\n<p>A test function can use a fixture by mentioning the fixture name as an input parameter.</p>\n\n\n\n<p>Create a file&nbsp;<strong>test_div_by_3_6.py</strong>&nbsp;and add the below code to it</p>\n\n\n\n<pre class=\"wp-block-preformatted\">import pytest\n\n@pytest.fixture\ndef input_value():\n   input = 39\n   return input\n\ndef test_divisible_by_3(input_value):\n   assert input_value % 3 == 0\n\ndef test_divisible_by_6(input_value):\n   assert input_value % 6 == 0</pre>\n\n\n\n<p>Here, we have a fixture function named&nbsp;<strong>input_value</strong>, which supplies the input to the tests. To access the fixture function, the tests have to mention the fixture name as input parameter.</p>\n\n\n\n<p>Pytest while the test is getting executed, will see the fixture name as input parameter. It then executes the fixture function and the returned value is stored to the input parameter, which can be used by the test.</p>\n\n\n\n<p>Execute the test using the following command −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">pytest -k divisible -v\n</pre>\n\n\n\n<p>The above command will generate the following result −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">test_div_by_3_6.py::test_divisible_by_3 PASSED\ntest_div_by_3_6.py::test_divisible_by_6 FAILED\n============================================== FAILURES\n==============================================\n________________________________________ test_divisible_by_6\n_________________________________________\ninput_value = 39\n   def test_divisible_by_6(input_value):\n&gt;  assert input_value % 6 == 0\nE  assert (39 % 6) == 0\ntest_div_by_3_6.py:12: AssertionError\n========================== 1 failed, 1 passed, 6 deselected in 0.07 seconds\n==========================\n</pre>\n\n\n\n<p>However, the approach comes with its own limitation. A fixture function defined inside a test file has a scope within the test file only. We cannot use that fixture in another test file. To make a fixture available to multiple test files, we have to define the fixture function in a file called conftest.py.&nbsp;<strong>conftest.py</strong>&nbsp;is explained in the next chapter.</p>\n","protected":false},"excerpt":{"rendered":"<p>Fixtures are functions, which will run before each test function to which it is applied. Fixtures are used to feed some data to the tests such as database connections, URLs to test and some sort of input data. Therefore, instead of running the same code for every test, we can attach fixture function to the [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4866"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4866"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4866/revisions"}],"predecessor-version":[{"id":4867,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4866/revisions/4867"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4866"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4866"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4866"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4868,"date":"2021-02-11T11:40:48","date_gmt":"2021-02-11T11:40:48","guid":{"rendered":"http://python3.foobrdigital.com/?p=4868"},"modified":"2021-02-11T11:40:48","modified_gmt":"2021-02-11T11:40:48","slug":"conftest-py","status":"publish","type":"post","link":"https://python3.foobrdigital.com/conftest-py/","title":{"rendered":"Conftest.py"},"content":{"rendered":"\n<p>We can define the fixture functions in this file to make them accessible across multiple test files.</p>\n\n\n\n<p>Create a new file&nbsp;<strong>conftest.py</strong>&nbsp;and add the below code into it −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pytest\r\n\r\n@pytest.fixture\r\ndef input_value():\r\n   input = 39\r\n   return input</code></pre>\n\n\n\n<p>Edit the&nbsp;<strong>test_div_by_3_6.py</strong>&nbsp;to remove the fixture function −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pytest\r\n\r\ndef test_divisible_by_3(input_value):\r\n   assert input_value % 3 == 0\r\n\r\ndef test_divisible_by_6(input_value):\r\n   assert input_value % 6 == 0</code></pre>\n\n\n\n<p>Create a new file&nbsp;<strong>test_div_by_13.py</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pytest\r\n\r\ndef test_divisible_by_13(input_value):\r\n   assert input_value % 13 == 0</code></pre>\n\n\n\n<p>Now, we have the files&nbsp;<strong>test_div_by_3_6.py</strong>&nbsp;and&nbsp;<strong>test_div_by_13.py</strong>&nbsp;making use of the fixture defined in&nbsp;<strong>conftest.py</strong>.</p>\n\n\n\n<p>Run the tests by executing the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest -k divisible -v\n</code></pre>\n\n\n\n<p>The above command will generate the following result −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test_div_by_13.py::test_divisible_by_13 PASSED\r\ntest_div_by_3_6.py::test_divisible_by_3 PASSED\r\ntest_div_by_3_6.py::test_divisible_by_6 FAILED\r\n============================================== FAILURES\r\n==============================================\r\n________________________________________ test_divisible_by_6\r\n_________________________________________\r\ninput_value = 39\r\n   def test_divisible_by_6(input_value):\r\n>  assert input_value % 6 == 0\r\nE  assert (39 % 6) == 0\r\ntest_div_by_3_6.py:7: AssertionError\r\n========================== 1 failed, 2 passed, 6 deselected in 0.09 seconds\r\n==========================\n</code></pre>\n\n\n\n<p>The tests will look for fixture in the same file. As the fixture is not found in the file, it will check for fixture in conftest.py file. On finding it, the fixture method is invoked and the result is returned to the input argument of the test.</p>\n","protected":false},"excerpt":{"rendered":"<p>We can define the fixture functions in this file to make them accessible across multiple test files. Create a new file&nbsp;conftest.py&nbsp;and add the below code into it − Edit the&nbsp;test_div_by_3_6.py&nbsp;to remove the fixture function − Create a new file&nbsp;test_div_by_13.py&nbsp;− Now, we have the files&nbsp;test_div_by_3_6.py&nbsp;and&nbsp;test_div_by_13.py&nbsp;making use of the fixture defined in&nbsp;conftest.py. Run the tests by executing [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4868"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4868"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4868/revisions"}],"predecessor-version":[{"id":4869,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4868/revisions/4869"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4868"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4868"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4868"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4870,"date":"2021-02-11T11:41:35","date_gmt":"2021-02-11T11:41:35","guid":{"rendered":"http://python3.foobrdigital.com/?p=4870"},"modified":"2021-02-11T11:41:35","modified_gmt":"2021-02-11T11:41:35","slug":"parameterizing-tests","status":"publish","type":"post","link":"https://python3.foobrdigital.com/parameterizing-tests/","title":{"rendered":"Parameterizing Tests"},"content":{"rendered":"\n<p>Parameterizing of a test is done to run the test against multiple sets of inputs. We can do this by using the following marker −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@pytest.mark.parametrize\n</code></pre>\n\n\n\n<p>Copy the below code into a file called&nbsp;<strong>test_multiplication.py</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pytest\r\n\r\n@pytest.mark.parametrize(\"num, output\",&#91;(1,11),(2,22),(3,35),(4,44)])\r\ndef test_multiplication_11(num, output):\r\n   assert 11*num == output</code></pre>\n\n\n\n<p>Here the test multiplies an input with 11 and compares the result with the expected output. The test has 4 sets of inputs, each has 2 values – one is the number to be multiplied with 11 and the other is the expected result.</p>\n\n\n\n<p>Execute the test by running the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Pytest -k multiplication -v\n</code></pre>\n\n\n\n<p>The above command will generate the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntest_multiplication.py::test_multiplication_11&#91;1-11] PASSED\r\ntest_multiplication.py::test_multiplication_11&#91;2-22] PASSED\r\ntest_multiplication.py::test_multiplication_11&#91;3-35] FAILED\r\ntest_multiplication.py::test_multiplication_11&#91;4-44] PASSED\r\n============================================== FAILURES\r\n==============================================\r\n_________________ test_multiplication_11&#91;3-35] __________________\r\nnum = 3, output = 35\r\n   @pytest.mark.parametrize(\"num, output\",&#91;(1,11),(2,22),(3,35),(4,44)])\r\n   def test_multiplication_11(num, output):\r\n>  assert 11*num == output\r\nE  assert (11 * 3) == 35\r\ntest_multiplication.py:5: AssertionError\r\n============================== 1 failed, 3 passed, 8 deselected in 0.08 seconds\r\n==============================\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Parameterizing of a test is done to run the test against multiple sets of inputs. We can do this by using the following marker − Copy the below code into a file called&nbsp;test_multiplication.py&nbsp;− Here the test multiplies an input with 11 and compares the result with the expected output. The test has 4 sets of [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4870"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4870"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4870/revisions"}],"predecessor-version":[{"id":4871,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4870/revisions/4871"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4870"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4870"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4870"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4872,"date":"2021-02-11T11:42:43","date_gmt":"2021-02-11T11:42:43","guid":{"rendered":"http://python3.foobrdigital.com/?p=4872"},"modified":"2021-02-11T11:42:43","modified_gmt":"2021-02-11T11:42:43","slug":"xfail-skip-tests","status":"publish","type":"post","link":"https://python3.foobrdigital.com/xfail-skip-tests/","title":{"rendered":"Xfail/Skip Tests"},"content":{"rendered":"\n<p>Now, consider the below situations −</p>\n\n\n\n<ul><li>A test is not relevant for some time due to some reasons.</li><li>A new feature is being implemented and we already added a test for that feature.</li></ul>\n\n\n\n<p>In these situations, we have the option to xfail the test or skip the tests.</p>\n\n\n\n<p>Pytest will execute the xfailed test, but it will not be considered as part failed or passed tests. Details of these tests will not be printed even if the test fails (remember pytest usually prints the failed test details). We can xfail tests using the following marker −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@pytest.mark.xfail\n</code></pre>\n\n\n\n<p>Skipping a test means that the test will not be executed. We can skip tests using the following marker −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@pytest.mark.skip\n</code></pre>\n\n\n\n<p>Later, when the test becomes relevant we can remove the markers.</p>\n\n\n\n<p>Edit the&nbsp;<strong>test_compare.py</strong>&nbsp;we already have to include the xfail and skip markers −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pytest\r\n@pytest.mark.xfail\r\n@pytest.mark.great\r\ndef test_greater():\r\n   num = 100\r\n   assert num > 100\r\n\r\n@pytest.mark.xfail\r\n@pytest.mark.great\r\ndef test_greater_equal():\r\n   num = 100\r\n   assert num >= 100\r\n\r\n@pytest.mark.skip\r\n@pytest.mark.others\r\ndef test_less():\r\n   num = 100\r\n   assert num &lt; 200</code></pre>\n\n\n\n<p>Execute the test using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\npytest test_compare.py -v\n</code></pre>\n\n\n\n<p>Upon execution, the above command will generate the following result −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\ntest_compare.py::test_greater xfail\r\ntest_compare.py::test_greater_equal XPASS\r\ntest_compare.py::test_less SKIPPED\r\n============================ 1 skipped, 1 xfailed, 1 xpassed in 0.06 seconds\r\n============================\n</code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Now, consider the below situations − A test is not relevant for some time due to some reasons. A new feature is being implemented and we already added a test for that feature. In these situations, we have the option to xfail the test or skip the tests. Pytest will execute the xfailed test, but [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4872"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4872"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4872/revisions"}],"predecessor-version":[{"id":4873,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4872/revisions/4873"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4872"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4872"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4872"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4874,"date":"2021-02-11T11:44:03","date_gmt":"2021-02-11T11:44:03","guid":{"rendered":"http://python3.foobrdigital.com/?p=4874"},"modified":"2021-02-11T11:44:03","modified_gmt":"2021-02-11T11:44:03","slug":"stop-test-suite-after-n-test-failures","status":"publish","type":"post","link":"https://python3.foobrdigital.com/stop-test-suite-after-n-test-failures/","title":{"rendered":"Stop Test Suite after N Test Failures"},"content":{"rendered":"\n<p>In a real scenario, once a new version of the code is ready to deploy, it is first deployed into pre-prod/staging environment. Then a test suite runs on it.</p>\n\n\n\n<p>The code is qualified for deploying to production only if the test suite passes. If there is test failure, whether it is one or many, the code is not production ready.</p>\n\n\n\n<p>Therefore, what if we want to stop the execution of test suite soon after n number of test fails. This can be done in pytest using maxfail.</p>\n\n\n\n<p>The syntax to stop the execution of test suite soon after n number of test fails is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest --maxfail = &lt;num>\n</code></pre>\n\n\n\n<p>Create a file test_failure.py with the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import pytest\r\nimport math\r\n\r\ndef test_sqrt_failure():\r\n   num = 25\r\n   assert math.sqrt(num) == 6\r\n\r\ndef test_square_failure():\r\n   num = 7\r\n   assert 7*7 == 40\r\n\r\ndef test_equality_failure():\r\n   assert 10 == 11</code></pre>\n\n\n\n<p>All the 3 tests will fail on executing this test file. Here, we are going to stop the execution of the test after one failure itself by −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest test_failure.py -v --maxfail = 1\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>test_failure.py::test_sqrt_failure FAILED\r\n=================================== FAILURES\r\n=================================== _______________________________________\r\ntest_sqrt_failure __________________________________________\r\n   def test_sqrt_failure():\r\n   num = 25\r\n>  assert math.sqrt(num) == 6\r\nE  assert 5.0 == 6\r\nE  + where 5.0 = &lt;built-in function sqrt>(25)\r\nE  + where &lt;built-in function sqrt>= math.sqrt\r\ntest_failure.py:6: AssertionError\r\n=============================== 1 failed in 0.04 seconds\r\n===============================\r\n</code></pre>\n\n\n\n<p>In the above result, we can see the execution is stopped on one failure.</p>\n","protected":false},"excerpt":{"rendered":"<p>In a real scenario, once a new version of the code is ready to deploy, it is first deployed into pre-prod/staging environment. Then a test suite runs on it. The code is qualified for deploying to production only if the test suite passes. If there is test failure, whether it is one or many, the [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4874"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4874"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4874/revisions"}],"predecessor-version":[{"id":4875,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4874/revisions/4875"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4874"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4874"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4874"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4876,"date":"2021-02-11T11:44:48","date_gmt":"2021-02-11T11:44:48","guid":{"rendered":"http://python3.foobrdigital.com/?p=4876"},"modified":"2021-02-11T11:44:48","modified_gmt":"2021-02-11T11:44:48","slug":"run-tests-in-parallel","status":"publish","type":"post","link":"https://python3.foobrdigital.com/run-tests-in-parallel/","title":{"rendered":"Run Tests in Parallel"},"content":{"rendered":"\n<p>By default, pytest runs tests in sequential order. In a real scenario, a test suite will have a number of test files and each file will have a bunch of tests. This will lead to a large execution time. To overcome this, pytest provides us with an option to run tests in parallel.</p>\n\n\n\n<p>For this, we need to first install the pytest-xdist plugin.</p>\n\n\n\n<p>Install pytest-xdist by running the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\npip install pytest-xdist\n</code></pre>\n\n\n\n<p>Now, we can run tests by using the syntax&nbsp;<strong>pytest -n &lt;num&gt;</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest -n 3\n</code></pre>\n\n\n\n<p>-n &lt;num&gt; runs the tests by using multiple workers, here it is 3.</p>\n\n\n\n<p>We will not be having much time difference when there is only a few tests to run. However, it matters when the test suite is large.</p>\n","protected":false},"excerpt":{"rendered":"<p>By default, pytest runs tests in sequential order. In a real scenario, a test suite will have a number of test files and each file will have a bunch of tests. This will lead to a large execution time. To overcome this, pytest provides us with an option to run tests in parallel. For this, [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4876"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4876"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4876/revisions"}],"predecessor-version":[{"id":4877,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4876/revisions/4877"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4876"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4876"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4876"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4878,"date":"2021-02-11T11:45:59","date_gmt":"2021-02-11T11:45:59","guid":{"rendered":"http://python3.foobrdigital.com/?p=4878"},"modified":"2021-02-11T11:45:59","modified_gmt":"2021-02-11T11:45:59","slug":"test-execution-results-in-xml-format","status":"publish","type":"post","link":"https://python3.foobrdigital.com/test-execution-results-in-xml-format/","title":{"rendered":"Test Execution Results in XML Format"},"content":{"rendered":"\n<p>We can generate the details of the test execution in an xml file. This xml file is mainly useful in cases where we have a dashboard that projects the test results. In such cases, the xml can be parsed to get the details of the execution.</p>\n\n\n\n<p>We will now execute the tests from test_multiplcation.py and generate the xml by running</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pytest test_multiplication.py -v --junitxml=\"result.xml\"</code></pre>\n\n\n\n<p>Now we can see result.xml is generated with the following data −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"utf-8\"?>\r\n&lt;testsuite errors = \"0\" failures = \"1\"\r\nname = \"pytest\" skips = \"0\" tests = \"4\" time = \"0.061\">\r\n   &lt;testcase classname = \"test_multiplication\"          \r\n      file = \"test_multiplication.py\"\r\n      line = \"2\" name = \"test_multiplication_11&#91;1-11]\"\r\n      time = \"0.00117516517639>\r\n   &lt;/testcase>\r\n   \r\n   &lt;testcase classname = \"test_multiplication\"    \r\n      file = \"test_multiplication.py\"\r\n      line = \"2\" name = \"test_multiplication_11&#91;2-22]\"\r\n      time = \"0.00155973434448\">\r\n   &lt;/testcase>\r\n\r\n   &lt;testcase classname = \"test_multiplication\" \r\n      file = \"test_multiplication.py\"\r\n      line = \"2\" name = \"test_multiplication_11&#91;3-35]\" time = \"0.00144290924072\">\r\n      failure message = \"assert (11 * 3) == 35\">num = 3, output = 35\r\n\r\n         @pytest.mark.parametrize(\"num,\r\n         output\",&#91;(1,11),(2,22),(3,35),(4,44)])\r\n            \r\n         def test_multiplication_11(num, output):> \r\n         assert 11*num == output\r\n         E assert (11 * 3) == 35\r\n\r\n         test_multiplication.py:5: AssertionErro\r\n      &lt;/failure>\r\n   &lt;/testcase>\r\n   &lt;testcase classname = \"test_multiplication\" \r\n      file = \"test_multiplication.py\"\r\n      line = \"2\" name = \"test_multiplication_11&#91;4-44]\"\r\n      time = \"0.000945091247559\">\r\n   &lt;/testcase>\r\n&lt;/testsuite>\r\n</code></pre>\n\n\n\n<p>Here, the tag&nbsp;<strong>&lt;testsuit&gt;</strong>&nbsp;summarises there were 4 tests and the number of failures are 1.</p>\n\n\n\n<ul><li>The tag&nbsp;<strong>&lt;testcase&gt;</strong>&nbsp;gives the details of each executed test.</li><li>&lt;failure&gt; tag gives the details of the failed test code.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>We can generate the details of the test execution in an xml file. This xml file is mainly useful in cases where we have a dashboard that projects the test results. In such cases, the xml can be parsed to get the details of the execution. We will now execute the tests from test_multiplcation.py and [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4878"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4878"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4878/revisions"}],"predecessor-version":[{"id":4879,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4878/revisions/4879"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4878"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4878"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4878"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4880,"date":"2021-02-11T11:47:10","date_gmt":"2021-02-11T11:47:10","guid":{"rendered":"http://python3.foobrdigital.com/?p=4880"},"modified":"2021-02-11T11:47:10","modified_gmt":"2021-02-11T11:47:10","slug":"summary","status":"publish","type":"post","link":"https://python3.foobrdigital.com/summary/","title":{"rendered":"Summary"},"content":{"rendered":"\n<p>In this pytest tutorial, we covered the following areas −</p>\n\n\n\n<ul><li>Installing pytest..</li><li>Identifying test files and test functions.</li><li>Executing all test files using pytest –v.</li><li>Executing specific file usimng pytest &lt;filename&gt; -v.</li><li>Execute tests by substring matching pytest -k &lt;substring&gt; -v.</li><li>Execute tests based on markers pytest -m &lt;marker_name&gt; -v.</li><li>Creating fixtures using @pytest.fixture.</li><li>conftest.py allows accessing fixtures from multiple files.</li><li>Parametrizing tests using @pytest.mark.parametrize.</li><li>Xfailing tests using @pytest.mark.xfail.</li><li>Skipping tests using @pytest.mark.skip.</li><li>Stop test execution on n failures using pytest &#8211;maxfail = &lt;num&gt;.</li><li>Running tests in parallel using pytest -n &lt;num&gt;.</li><li>Generating results xml using pytest -v &#8211;junitxml = &#8220;result.xml&#8221;.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>In this pytest tutorial, we covered the following areas − Installing pytest.. Identifying test files and test functions. Executing all test files using pytest –v. Executing specific file usimng pytest &lt;filename&gt; -v. Execute tests by substring matching pytest -k &lt;substring&gt; -v. Execute tests based on markers pytest -m &lt;marker_name&gt; -v. Creating fixtures using @pytest.fixture. conftest.py [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4880"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4880"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4880/revisions"}],"predecessor-version":[{"id":4881,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4880/revisions/4881"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4880"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4880"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4880"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4882,"date":"2021-02-11T11:47:51","date_gmt":"2021-02-11T11:47:51","guid":{"rendered":"http://python3.foobrdigital.com/?p=4882"},"modified":"2021-02-11T11:47:51","modified_gmt":"2021-02-11T11:47:51","slug":"conclusion-2","status":"publish","type":"post","link":"https://python3.foobrdigital.com/conclusion-2/","title":{"rendered":"Conclusion"},"content":{"rendered":"\n<p>This tutorial introduced you to pytest framework. Now you should be able to start writing tests using pytest.</p>\n\n\n\n<p>As a good practice −</p>\n\n\n\n<ul><li>Create different test files based on functionality/module being tested.</li><li>Give meaningful names to test files and methods.</li><li>Have enough markers to group the tests based on various criteria.</li><li>Use fixtures whenever needed.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>This tutorial introduced you to pytest framework. Now you should be able to start writing tests using pytest. As a good practice − Create different test files based on functionality/module being tested. Give meaningful names to test files and methods. Have enough markers to group the tests based on various criteria. Use fixtures whenever needed.</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[197],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4882"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=4882"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4882/revisions"}],"predecessor-version":[{"id":4883,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/4882/revisions/4883"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=4882"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=4882"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=4882"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]