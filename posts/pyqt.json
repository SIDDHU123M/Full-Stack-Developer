[
  {
    "id": 4624,
    "date": "2020-12-21T07:39:05",
    "date_gmt": "2020-12-21T07:39:05",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4293"
    },
    "modified": "2020-12-21T07:39:05",
    "modified_gmt": "2020-12-21T07:39:05",
    "slug": "install-pyqt",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/install-pyqt/",
    "title": {
      "rendered": "Install pyqt"
    },
    "content": {
      "rendered": "\n<p>PyQt is often not installed by default. The PyQt module can be used to create desktop applications with Python. In this article you’ll learn how to install the PyQt module.</p>\n\n\n\n<p>Desktop applications made with PyQt are cross platform, they will work on Microsoft Windows, Apple Mac OS X and Linux computers (including Raspberry Pi).</p>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"How-to-install-PyQt5-on-Windows\">How to install PyQt5 on Windows?</h2>\n\n\n\n<p>To install PyQt on Windows there are a few steps you need to take.<br>First use the installer from the qt-project website, from qt to install PyQt.</p>\n\n\n\n<p>Next you want to install a Python version 3.3 or newer. Check the box to add all of the PyQt5 extras. It’s not necessary to compile everything from source, you can install all the required packages with the installer.</p>\n\n\n\n<p>On Python >= 3.6, you can also try this command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pip install pyqt5</code></pre>\n\n\n\n<p>It should work without problems.</p>\n\n\n\n<h2 id=\"How-to-install-PyQt5-on-Mac-OS-X\">How to install PyQt5 on Mac OS X?</h2>\n\n\n\n<p>On Apple Mac OS X installation is a bit simpler. The first step to take is to install the&nbsp;<a href=\"http://qt-project.org/wiki/PySide_Binaries_MacOSX\" target=\"_blank\" rel=\"noreferrer noopener\">Mac OS X binary</a>. This installs the PyQt GUI library.</p>\n\n\n\n<p>But to use it from Python, you also need Python module. This is where the tool <code>brew</code> comes in.<br>You can use brew to install pyqt (in the terminal):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>brew install pyqt</code></pre>\n\n\n\n<h2 id=\"How-to-install-PyQt5-on-Linux\">How to install PyQt5 on Linux?</h2>\n\n\n\n<p>Python is often installed by default on Linux (in nearly all of the distributions including Ubuntu). But you want to make sure to use Python 3, because of all the features and ease of use. You can verify that you have the newest Python version with the command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>python --version</code></pre>\n\n\n\n<p>On Ubuntu Linux they sometimes include two versions of python,&nbsp;<code>python3</code>&nbsp;and&nbsp;<code>python</code>. In that case use Python 3.</p>\n\n\n\n<p>Once you have Python ready, the next step is to install PyQt.</p>\n\n\n\n<p>This isn’t hard to do if you have some Linux experience. You can install PyQt your software package manager. Which package manager to use depends on which Linux distribution you are using.</p>\n\n\n\n<p>On Ubuntu Linux / Debian Linux you can use the command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install python3-pyqt5</code></pre>\n\n\n\n<p>For CentOS 7 use the command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yum install qt5-qtbase-devel</code></pre>\n\n\n\n<p>For RPM-based systems (Redhat-based)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>yum install PyQt5</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;<a href=\"https://gum.co/pysqtsamples\" rel=\"noreferrer noopener\" target=\"_blank\">then I highly recommend this book.</a></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>PyQt is often not installed by default. The PyQt module can be used to create desktop applications with Python. In this article you’ll learn how to install the PyQt module. Desktop applications made with PyQt are cross platform, they will work on Microsoft Windows, Apple Mac OS X and Linux computers (including Raspberry Pi). Related [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4624"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4624"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4624/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4624"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4624"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4624"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4625,
    "date": "2020-12-21T07:42:06",
    "date_gmt": "2020-12-21T07:42:06",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4295"
    },
    "modified": "2020-12-21T07:42:06",
    "modified_gmt": "2020-12-21T07:42:06",
    "slug": "pyqt-hello-world",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-hello-world/",
    "title": {
      "rendered": "PyQt Hello World"
    },
    "content": {
      "rendered": "\n<p>The program “Hello World” with PyQT, a module for creating desktop apps. In this article you’ll learn how to create the “hello world” app in PyQt.</p>\n\n\n\n<p>If you want to make a desktop app or graphical user interface, PyQT is a good module for that.<br>Before starting this tutorial, make sure you have PyQt5 installed.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"PyQt-Hello-World\">PyQt Hello World</h2>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>The program below creates the “hello world” window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QWidget, QLabel\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import pyqtSlot\n\ndef window():\napp = QApplication(sys.argv)\nwidget = QWidget()\n\ntextLabel = QLabel(widget)\ntextLabel.setText(\"Hello World!\")\ntextLabel.move(110,85)\n\nwidget.setGeometry(50,50,320,200)\nwidget.setWindowTitle(\"PyQt5 Example\")\nwidget.show()\nsys.exit(app.exec_())\n\nif __name__ == '__main__':\nwindow()</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/f8acaf73b814ca1eb95255442c5633be4ee22d00/50313/wp-content/uploads/2019/01/pyqt-hello.png\" alt=\"PyQt hello world\"/></figure>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;<a href=\"https://gum.co/pysqtsamples\" rel=\"noreferrer noopener\" target=\"_blank\">then I highly recommend this book.</a></p>\n\n\n\n<h3 id=\"How-it-works\">How it works</h3>\n\n\n\n<p>PyQT is initialized with the code below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>app = QApplication(sys.argv)\nwidget = QWidget()</code></pre>\n\n\n\n<p>Text cannot be added immediately to a window. It has to be added to a label.</p>\n\n\n\n<p>A label is a widget that can show text or images. These lines create a QLabel, set the labels text and position (horizontal, vertical).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>textLabel = QLabel(widget)\ntextLabel.setText(\"Hello World!\")\ntextLabel.move(110,85)</code></pre>\n\n\n\n<p>Now you should show the window.</p>\n\n\n\n<p>Set the starting position (50,50) and the window size (320,200) with the method setGeometry().</p>\n\n\n\n<pre class=\"wp-block-code\"><code>widget.setGeometry(50,50,320,200)</code></pre>\n\n\n\n<p>Then you want to show the window! Give it a title with setWindowTitle() and display it with show().</p>\n\n\n\n<pre class=\"wp-block-code\"><code>widget.setWindowTitle(\"PyQt5 Example\")\nwidget.show()</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The program “Hello World” with PyQT, a module for creating desktop apps. In this article you’ll learn how to create the “hello world” app in PyQt. If you want to make a desktop app or graphical user interface, PyQT is a good module for that.Before starting this tutorial, make sure you have PyQt5 installed. Related [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4625"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4625"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4625/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4625"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4625"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4625"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4626,
    "date": "2020-12-21T07:45:51",
    "date_gmt": "2020-12-21T07:45:51",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4297"
    },
    "modified": "2020-12-21T07:45:51",
    "modified_gmt": "2020-12-21T07:45:51",
    "slug": "pyqt-buttons",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-buttons/",
    "title": {
      "rendered": "PyQt buttons"
    },
    "content": {
      "rendered": "\n<p>Buttons (QPushButton) can be added to any window. The QPushButton class has the method setText() for its label and move(x,y) for the position.</p>\n\n\n\n<p>In this article you can see how a button can be added to a window, and how you can connect methods to it.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;<a href=\"https://gum.co/pysqtsamples\" rel=\"noreferrer noopener\" target=\"_blank\">Create GUI Apps with Python PyQt5</a></p>\n\n\n\n<h2 id=\"PyQt-Button-Example\">PyQt Button Example</h2>\n\n\n\n<h3 id=\"Signals-and-slots\">Signals and slots</h3>\n\n\n\n<p>You can create a button with a few lines of code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>button1 = QPushButton(widget)\nbutton1.setText(\"Button1\")\nbutton1.move(64,32)</code></pre>\n\n\n\n<p>Then connect it to a method with:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>button1.clicked.connect(button1_clicked)</code></pre>\n\n\n\n<p>The receiving method is called a slot, the clicked.connect (if the button is clicked) is called a signal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def button1_clicked():\nprint(\"Button 1 clicked\")</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/51bf0898c240c55ceaa43796a90d0d75fc2fe310/ff42c/wp-content/uploads/2019/01/pyqt-button.png\" alt=\"pyqt button QPushButton\"/></figure>\n\n\n\n<h3 id=\"Button-example\">Button example</h3>\n\n\n\n<p>Run the code below to see 2 buttons in a window. You can click either one of the buttons and their connected methods will be called.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QWidget, QPushButton\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import pyqtSlot\n\ndef window():\napp = QApplication(sys.argv)\nwidget = QWidget()\n\nbutton1 = QPushButton(widget)\nbutton1.setText(\"Button1\")\nbutton1.move(64,32)\nbutton1.clicked.connect(button1_clicked)\n\nbutton2 = QPushButton(widget)\nbutton2.setText(\"Button2\")\nbutton2.move(64,64)\nbutton2.clicked.connect(button2_clicked)\n\nwidget.setGeometry(50,50,320,200)\nwidget.setWindowTitle(\"PyQt5 Button Click Example\")\nwidget.show()\nsys.exit(app.exec_())\n\n\ndef button1_clicked():\nprint(\"Button 1 clicked\")\n\ndef button2_clicked():\nprint(\"Button 2 clicked\")\n\nif __name__ == '__main__':\nwindow()</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Buttons (QPushButton) can be added to any window. The QPushButton class has the method setText() for its label and move(x,y) for the position. In this article you can see how a button can be added to a window, and how you can connect methods to it. Related Course:&nbsp;Create GUI Apps with Python PyQt5 PyQt Button [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4626"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4626"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4626/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4626"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4626"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4626"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4627,
    "date": "2020-12-21T07:47:30",
    "date_gmt": "2020-12-21T07:47:30",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4300"
    },
    "modified": "2020-12-21T07:47:30",
    "modified_gmt": "2020-12-21T07:47:30",
    "slug": "pyqt-qmessagebox",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-qmessagebox/",
    "title": {
      "rendered": "PyQt QMessageBox"
    },
    "content": {
      "rendered": "\n<p>PyQt&nbsp;<strong>QMessageBox</strong>, you can use to create dialogs. This is a little popup window that you’ve often seen on your desktop.</p>\n\n\n\n<p>It may be a single line message, an “are you sure you want to save?” message or something more advanced.</p>\n\n\n\n<p>This messagebox supports all kinds of variations and buttons. In this lesson you’ll learn how to create a information dialog window.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Dialog\">Dialog</h2>\n\n\n\n<h3 id=\"Initial-window\">Initial window</h3>\n\n\n\n<p>Create a window with a button. If you click the button, the dialog will popup.</p>\n\n\n\n<p>(This is also where PyQt gets initialized.)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def window():\napp = QApplication(sys.argv)\nwin = QWidget()\nbutton1 = QPushButton(win)\nbutton1.setText(\"Show dialog!\")\nbutton1.move(50,50)\nbutton1.clicked.connect(showDialog)\nwin.setWindowTitle(\"Click button\")\nwin.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>So lets take a look at showDialog().</p>\n\n\n\n<h3 id=\"Create-a-dialog\">Create a dialog</h3>\n\n\n\n<p>A dialog is created with&nbsp;<strong>QMessageBox()</strong>. Don’t forget to import this from PyQt5.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import QPushButton</code></pre>\n\n\n\n<p>Then use the methods&nbsp;<strong>setIcon()</strong>,&nbsp;<strong>setText()</strong>,&nbsp;<strong>setWindowTitle()</strong>&nbsp;to set the window decoration.</p>\n\n\n\n<p>You can configure the dialogs buttons with&nbsp;<strong>setStandardButtons()</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def showDialog():\nmsgBox = QMessageBox()\nmsgBox.setIcon(QMessageBox.Information)\nmsgBox.setText(\"Message box pop up window\")\nmsgBox.setWindowTitle(\"QMessageBox Example\")\nmsgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)\nmsgBox.buttonClicked.connect(msgButtonClick)\n\nreturnValue = msgBox.exec()\nif returnValue == QMessageBox.Ok:\nprint('OK clicked')</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/834393e2c787e4ea30975885f6613a0f67d8219f/5ffb9/wp-content/uploads/2019/01/pyqt-qmessagebox.png\" alt=\"pyqt messagebox\"/></figure>\n\n\n\n<h3 id=\"Downloadable-code\">Downloadable code</h3>\n\n\n\n<p>You can copy and paste the code below on your own computer, to test how it works.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import pyqtSlot\n\ndef window():\napp = QApplication(sys.argv)\nwin = QWidget()\nbutton1 = QPushButton(win)\nbutton1.setText(\"Show dialog!\")\nbutton1.move(50,50)\nbutton1.clicked.connect(showDialog)\nwin.setWindowTitle(\"Click button\")\nwin.show()\nsys.exit(app.exec_())\n\ndef showDialog():\nmsgBox = QMessageBox()\nmsgBox.setIcon(QMessageBox.Information)\nmsgBox.setText(\"Message box pop up window\")\nmsgBox.setWindowTitle(\"QMessageBox Example\")\nmsgBox.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)\nmsgBox.buttonClicked.connect(msgButtonClick)\n\nreturnValue = msgBox.exec()\nif returnValue == QMessageBox.Ok:\nprint('OK clicked')\n\ndef msgButtonClick(i):\nprint(\"Button clicked is:\",i.text())\n\nif __name__ == '__main__':\nwindow()</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>PyQt&nbsp;QMessageBox, you can use to create dialogs. This is a little popup window that you’ve often seen on your desktop. It may be a single line message, an “are you sure you want to save?” message or something more advanced. This messagebox supports all kinds of variations and buttons. In this lesson you’ll learn how [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4627"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4627"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4627/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4627"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4627"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4627"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4628,
    "date": "2020-12-21T07:49:39",
    "date_gmt": "2020-12-21T07:49:39",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4302"
    },
    "modified": "2020-12-21T07:49:39",
    "modified_gmt": "2020-12-21T07:49:39",
    "slug": "pyqt-grid",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-grid/",
    "title": {
      "rendered": "PyQt grid"
    },
    "content": {
      "rendered": "\n<p>PyQt&nbsp;<strong>QGridLayout</strong>&nbsp;is another type of layout.<br>Normally you’d position widgets (buttons, labels et al) with&nbsp;<em>.move(x,y)</em>. Not so with a grid.</p>\n\n\n\n<p>It positions widgets in an AxB form. Where A is the number of columns and B the number of rows. Similar to what you’d see in excel.</p>\n\n\n\n<p>The QGridLayout is part of PyQt5.QtWidgets.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Example\">Example</h2>\n\n\n\n<h3 id=\"QGridLayout\">QGridLayout</h3>\n\n\n\n<p>You can create a QGridLayout or grid with a single line of code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>grid = QGridLayout()</code></pre>\n\n\n\n<p>Tell the window to use the grid:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>win.setLayout(grid)</code></pre>\n\n\n\n<p>Widgets can be added to the grid with:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>grid.addWidget(widget,col,row)</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/357be9c7db99881f1c69d309c7838edb9bfa5fab/21c70/wp-content/uploads/2019/01/pyqt-grid.png\" alt=\"pyqt grid\"/></figure>\n\n\n\n<h3 id=\"Grid-Example\">Grid Example</h3>\n\n\n\n<p>The code below creates a layout containing a group of buttons. It adds a group of buttons by using a nested for loop.</p>\n\n\n\n<p>The key part that creates the grid is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>grid = QGridLayout()\n\nfor i in range(0,5):\nfor j in range(0,5):\ngrid.addWidget(QPushButton(str(i)+str(j)),i,j)\n\nwin.setLayout(grid)</code></pre>\n\n\n\n<p>The rest of the code simply creates the window. But it’s easy for copy and paste.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>PyQt QGridLayout is another type of layout.\nNormally you’d position widgets (buttons, labels et al) with .move(x,y). Not so with a grid.\n\nIt positions widgets in an AxB form. Where A is the number of columns and B the number of rows. Similar to what you’d see in excel.\n\nThe QGridLayout is part of PyQt5.QtWidgets.\n\nRelated Course: Create GUI Apps with Python PyQt5\n\nExample\nQGridLayout\nYou can create a QGridLayout or grid with a single line of code:\n\ngrid = QGridLayout()\nTell the window to use the grid:\n\nwin.setLayout(grid)\nWidgets can be added to the grid with:\n\ngrid.addWidget(widget,col,row)\npyqt grid\n\nGrid Example\nThe code below creates a layout containing a group of buttons. It adds a group of buttons by using a nested for loop.\n\nThe key part that creates the grid is:\n\ngrid = QGridLayout()\n\t\nfor i in range(0,5):\n   for j in range(0,5):\n       grid.addWidget(QPushButton(str(i)+str(j)),i,j)\n\t\t\t\nwin.setLayout(grid)\nThe rest of the code simply creates the window. But it’s easy for copy and paste.\n\nimport sys\nfrom PyQt5.QtWidgets import QApplication, QWidget, QLabel, QGridLayout, QPushButton\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import pyqtSlot\n\ndef window():\n   app = QApplication(sys.argv)\n   win = QWidget()\n   grid = QGridLayout()\n\t\n   for i in range(0,5):\n      for j in range(0,5):\n         grid.addWidget(QPushButton(str(i)+str(j)),i,j)\n\t\t\t\n   win.setLayout(grid)\n   win.setWindowTitle(\"PyQt Grid Example\")\n   win.setGeometry(50,50,200,200)\n   win.show()\n   sys.exit(app.exec_())\n\nif __name__ == '__main__':\n   window()\n\nIf you are new to Python PyQt, then I highly recommend this book.\n\n</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>PyQt&nbsp;QGridLayout&nbsp;is another type of layout.Normally you’d position widgets (buttons, labels et al) with&nbsp;.move(x,y). Not so with a grid. It positions widgets in an AxB form. Where A is the number of columns and B the number of rows. Similar to what you’d see in excel. The QGridLayout is part of PyQt5.QtWidgets. Related Course:&nbsp;Create GUI Apps [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4628"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4628"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4628/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4628"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4628"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4628"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4629,
    "date": "2020-12-21T07:51:02",
    "date_gmt": "2020-12-21T07:51:02",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4304"
    },
    "modified": "2020-12-21T07:51:02",
    "modified_gmt": "2020-12-21T07:51:02",
    "slug": "qlineedit",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/qlineedit/",
    "title": {
      "rendered": "QLineEdit"
    },
    "content": {
      "rendered": "\n<p>You can get user input with a QLineEdit widget. In this lesson you’ll make a line edit that changes a labels text when run.</p>\n\n\n\n<p>A window can contain one or more QLineEdit widgets. They do not contain a label themselves, for UX purposes you may want to add a label to the QLineEdit to tell the user what to type in the box.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"QLineEdit\">QLineEdit</h2>\n\n\n\n<h3 id=\"Adding-an-input-box\">Adding an input box</h3>\n\n\n\n<p>The object oriented code below creates a window with the constructor. An input box or line edit is added to the window, this is called a QLineEdit.</p>\n\n\n\n<p>Then it adds a label and a line edit:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.lineEntry = QLineEdit(self)\nself.lineEntry.move(16,16)\nself.lineEntry.resize(200,40)\n\nself.qlabel = QLabel(self)\nself.qlabel.move(16,64)</code></pre>\n\n\n\n<p>You can connect every keypress in the input box (<strong>QLineEdit</strong>) with a method call.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.lineEntry.textChanged.connect(self.onChanged)</code></pre>\n\n\n\n<p>In that method set the labels text and adjust the labels size.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def onChanged(self, text):\nself.qlabel.setText(text)\nself.qlabel.adjustSize()</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/22c6d8f1ec6ab883f1f5d61920e7e94f85bde36c/3f5c5/wp-content/uploads/2019/01/qlineedit.png\" alt=\"pyqt text input qlineedit\"/></figure>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>Copy and paste the example code below to try it yourself:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QLineEdit, QPushButton\n\nclass Example(QMainWindow):\n\ndef __init__(self):\nsuper().__init__()\n\nself.lineEntry = QLineEdit(self)\nself.lineEntry.move(16,16)\nself.lineEntry.resize(200,40)\n\nself.qlabel = QLabel(self)\nself.qlabel.move(16,64)\n\nself.lineEntry.textChanged.connect(self.onChanged)\n\nself.setGeometry(50,50,320,200)\nself.setWindowTitle(\"QLineEdit Example\")\nself.show()\n\ndef onChanged(self, text):\nself.qlabel.setText(text)\nself.qlabel.adjustSize()\n\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nex = Example()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You can get user input with a QLineEdit widget. In this lesson you’ll make a line edit that changes a labels text when run. A window can contain one or more QLineEdit widgets. They do not contain a label themselves, for UX purposes you may want to add a label to the QLineEdit to tell [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4629"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4629"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4629/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4629"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4629"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4629"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4306,
    "date": "2020-12-21T07:52:30",
    "date_gmt": "2020-12-21T07:52:30",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4306"
    },
    "modified": "2020-12-21T07:52:30",
    "modified_gmt": "2020-12-21T07:52:30",
    "slug": "pyqt-qpixmap",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-qpixmap/",
    "title": {
      "rendered": "PyQT QPixmap"
    },
    "content": {
      "rendered": "\n<p>A QPixmap can be used to show an image in a PyQT window. QPixmap() can load an image, as parameter it has the filename. To show the image, add the QPixmap to a QLabel.</p>\n\n\n\n<p>QPixmap supports all the major image formats: BMP,GIF,JPG,JPEG,PNG,PBM,PGM,PPM,XBM and XPM.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"PyQT-image\">PyQT image</h2>\n\n\n\n<h3 id=\"QPixmap\">QPixmap</h3>\n\n\n\n<p>Start by creating a QPixmap and a QLabel. Then you can combine them like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.im = QPixmap(\"./image.jpg\")\nself.label = QLabel()\nself.label.setPixmap(self.im)</code></pre>\n\n\n\n<p>Then add the whole thing to a layout, like a QGridLayout</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.grid = QGridLayout()\nself.grid.addWidget(self.label,1,1)\nself.setLayout(self.grid)</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/cac7a44b808c4b3b02931f23d86cf30b5ce926b0/5f104/wp-content/uploads/2019/01/qpixmap.png\" alt=\"image\"/></figure>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>Copy and paste the code below to load an image from your local computer. The image will be shown in a grid layout.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QGridLayout, QWidget\nfrom PyQt5.QtGui import QPixmap\n\nclass Example(QWidget):\n\ndef __init__(self):\nsuper().__init__()\n\nself.im = QPixmap(\"./image.jpg\")\nself.label = QLabel()\nself.label.setPixmap(self.im)\n\nself.grid = QGridLayout()\nself.grid.addWidget(self.label,1,1)\nself.setLayout(self.grid)\n\nself.setGeometry(50,50,320,200)\nself.setWindowTitle(\"PyQT show image\")\nself.show()\n\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nex = Example()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A QPixmap can be used to show an image in a PyQT window. QPixmap() can load an image, as parameter it has the filename. To show the image, add the QPixmap to a QLabel. QPixmap supports all the major image formats: BMP,GIF,JPG,JPEG,PNG,PBM,PGM,PPM,XBM and XPM. Related Course:&nbsp;Create GUI Apps with Python PyQt5 PyQT image QPixmap Start [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4306"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4306"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4306/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4306"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4306"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4306"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4630,
    "date": "2020-12-21T07:53:46",
    "date_gmt": "2020-12-21T07:53:46",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4308"
    },
    "modified": "2020-12-21T07:53:46",
    "modified_gmt": "2020-12-21T07:53:46",
    "slug": "pyqt-combobox",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-combobox/",
    "title": {
      "rendered": "PyQt combobox"
    },
    "content": {
      "rendered": "\n<p>You can have a listbox, selectbox or combobox with&nbsp;<strong>QComboBox</strong>. To use this widget, import QComboBox from PyQt5.QtWidgets.</p>\n\n\n\n<p>Typically you’d see this widget when a user needs to choose from a select number of items, like country or contract.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"QComboBox\">QComboBox</h2>\n\n\n\n<h3 id=\"Create-a-listbox\">Create a listbox</h3>\n\n\n\n<p>You can create a list box with these lines:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>combo = QComboBox(self)\ncombo.addItem(\"Apple\")</code></pre>\n\n\n\n<p>The method addItem adds an option to the list box. You can call that as many times as you need to with different options.</p>\n\n\n\n<p>To connect a listbox change with a method, you can use this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>combo.activated&#91;str].connect(self.onChanged)</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/f41137db729811eed15a25c5a6bbc093c7ecae52/5d4d9/wp-content/uploads/2019/01/pyqt-combobox.png\" alt=\"pyqt combobox\"/></figure>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>The code below adds a combobox to a window. Once you select one of the options presented in the combo box, the label values changes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QComboBox, QPushButton\n\nclass Example(QMainWindow):\n\ndef __init__(self):\nsuper().__init__()\n\ncombo = QComboBox(self)\ncombo.addItem(\"Apple\")\ncombo.addItem(\"Pear\")\ncombo.addItem(\"Lemon\")\n\ncombo.move(50, 50)\n\nself.qlabel = QLabel(self)\nself.qlabel.move(50,16)\n\ncombo.activated&#91;str].connect(self.onChanged)\n\nself.setGeometry(50,50,320,200)\nself.setWindowTitle(\"QLineEdit Example\")\nself.show()\n\ndef onChanged(self, text):\nself.qlabel.setText(text)\nself.qlabel.adjustSize()\n\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nex = Example()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You can have a listbox, selectbox or combobox with&nbsp;QComboBox. To use this widget, import QComboBox from PyQt5.QtWidgets. Typically you’d see this widget when a user needs to choose from a select number of items, like country or contract. Related Course:&nbsp;Create GUI Apps with Python PyQt5 QComboBox Create a listbox You can create a list box [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4630"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4630"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4630/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4630"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4630"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4630"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4631,
    "date": "2020-12-21T07:55:39",
    "date_gmt": "2020-12-21T07:55:39",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4310"
    },
    "modified": "2020-12-21T07:55:39",
    "modified_gmt": "2020-12-21T07:55:39",
    "slug": "qcheckbox",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/qcheckbox/",
    "title": {
      "rendered": "QCheckBox"
    },
    "content": {
      "rendered": "\n<p>A checkbox is supported by PyQt. The widgets name is&nbsp;<strong>QCheckBox</strong>. If you create a checkbox you can set it to be checked by default using the .toggle() method.</p>\n\n\n\n<p>The first parameter after the QCheckBox call is the label text that’s right next to the checkbox. In this article you’ll learn how to place single checkboxes, but you can just as easy create them in a for loop.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Checkbox\">Checkbox</h2>\n\n\n\n<h3 id=\"QCheckBox\">QCheckBox</h3>\n\n\n\n<p>Import QCheckBox from PyQt5.QtWidgets. Then to create a new checkbox, just call:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cb = QCheckBox('Movie', self)</code></pre>\n\n\n\n<p>Where the first parameter is the label next to the checkbox. Then set the position and if you want it checked</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cb.move(20, 40)\ncb.toggle()</code></pre>\n\n\n\n<p>If you want to call a method if the checkbox is called, you can do that like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cb.stateChanged.connect(self.someMethod)</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/4fb63c4de285b18ac6ff94ad47fa88222b390b48/13041/wp-content/uploads/2019/01/pyqt-checkbox.png\" alt=\"pyqt qcheckbox checkbox\"/></figure>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>The program below creates two check boxes in a window. One of the checkboxes is toggled because the method .toggle() is called.</p>\n\n\n\n<p>Complete code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QCheckBox\n\nclass Example(QMainWindow):\n\ndef __init__(self):\nsuper().__init__()\n\ncb = QCheckBox('Movie', self)\ncb.move(20, 20)\n\ncb2 = QCheckBox('Music', self)\ncb2.move(20, 40)\ncb2.toggle()\n\nself.setGeometry(50,50,320,200)\nself.setWindowTitle(\"Checkbox Example\")\nself.show()\n\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nex = Example()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;<a href=\"https://gum.co/pysqtsamples\" rel=\"noreferrer noopener\" target=\"_blank\">then I highly recommend this book.</a></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A checkbox is supported by PyQt. The widgets name is&nbsp;QCheckBox. If you create a checkbox you can set it to be checked by default using the .toggle() method. The first parameter after the QCheckBox call is the label text that’s right next to the checkbox. In this article you’ll learn how to place single checkboxes, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4631"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4631"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4631/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4631"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4631"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4631"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4632,
    "date": "2020-12-21T07:58:09",
    "date_gmt": "2020-12-21T07:58:09",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4312"
    },
    "modified": "2020-12-21T07:58:09",
    "modified_gmt": "2020-12-21T07:58:09",
    "slug": "qslider",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/qslider/",
    "title": {
      "rendered": "QSlider"
    },
    "content": {
      "rendered": "\n<p>PyQt comes with a slider,&nbsp;<strong>QSlider</strong>. You can use this slider to select a value. A slider can be a great input widget for volume.</p>\n\n\n\n<p>It allows a user to quickly change the value on a widget range, in contrast to a numeric counter. The range of a QSlider is from 0 to 100, where 100 is 100%.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"QSlider\">QSlider</h2>\n\n\n\n<h3 id=\"Create-a-slider\">Create a slider</h3>\n\n\n\n<p>A slider can be horizontal or vertical. You can choose a type, when creating a slider. Either Qt.Horizontal or Qt.Vertical.</p>\n\n\n\n<p>First import QSlider and Qt.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtCore import Qt\nfrom PyQt5.QtWidgets import QSlider</code></pre>\n\n\n\n<p>Then create a slider:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mySlider = QSlider(Qt.Horizontal, self)</code></pre>\n\n\n\n<p>Then set its geometry (position and size):</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mySlider.setGeometry(30, 40, 200, 30)</code></pre>\n\n\n\n<p>And connect a method that’s called when changing its value:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mySlider.valueChanged&#91;int].connect(self.changeValue)</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/4f5b9ff2d7b9734968db9ab02dc2cfedc61b56b8/8d52f/wp-content/uploads/2019/01/pyqt-slider.png\" alt=\"slider pyqt\"/></figure>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>The program below creates an empty window with a horizontal slider. If you want a vertical slider, don’t forget to change the geometry.</p>\n\n\n\n<p>Copy and paste the code below to try a slider:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QSlider\nfrom PyQt5.QtCore import Qt\n\nclass Example(QMainWindow):\n\ndef __init__(self):\nsuper().__init__()\n\nmySlider = QSlider(Qt.Horizontal, self)\nmySlider.setGeometry(30, 40, 200, 30)\nmySlider.valueChanged&#91;int].connect(self.changeValue)\n\nself.setGeometry(50,50,320,200)\nself.setWindowTitle(\"Checkbox Example\")\nself.show()\n\ndef changeValue(self, value):\nprint(value)\n\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nex = Example()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>PyQt comes with a slider,&nbsp;QSlider. You can use this slider to select a value. A slider can be a great input widget for volume. It allows a user to quickly change the value on a widget range, in contrast to a numeric counter. The range of a QSlider is from 0 to 100, where 100 [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4632"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4632"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4632/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4632"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4632"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4632"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4633,
    "date": "2020-12-21T08:00:01",
    "date_gmt": "2020-12-21T08:00:01",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4314"
    },
    "modified": "2020-12-21T08:00:01",
    "modified_gmt": "2020-12-21T08:00:01",
    "slug": "progressbar",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/progressbar/",
    "title": {
      "rendered": "Progressbar"
    },
    "content": {
      "rendered": "\n<p><strong>QProgressBar</strong>&nbsp;is a widget to show process. You’ve likely seen it many times during installations.</p>\n\n\n\n<p>The widget shows a bar and you can see the percentage completed. You can set its value with<br>the method setValue(). Where 50 would set it to 50%.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;<a href=\"https://gum.co/pysqtsamples\" rel=\"noreferrer noopener\" target=\"_blank\">Create GUI Apps with Python PyQt5</a></p>\n\n\n\n<h2 id=\"QProgressBar\">QProgressBar</h2>\n\n\n\n<h3 id=\"Progressbar\">Progressbar</h3>\n\n\n\n<p>Use the code below to create a progressbar:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.pbar = QProgressBar(self)\nself.pbar.setGeometry(30, 40, 200, 25)</code></pre>\n\n\n\n<p>You can set the value with:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.pbar.setValue(50)</code></pre>\n\n\n\n<p>That’s all that’s needed to create a progressbar.</p>\n\n\n\n<p>To update it’s value, you can use a QTimer.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtCore import QBasicTimer</code></pre>\n\n\n\n<p>Call a method every second with these lines:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.timer = QTimer() self.timer.timeout.connect(self.handleTimer)\nself.timer.start(1000)</code></pre>\n\n\n\n<p>Then update the progressbar value:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def handleTimer(self):\nvalue = self.pbar.value()\nif value &lt; 100:\nvalue = value + 1\nself.pbar.setValue(value)\nelse:\nself.timer.stop()</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/4d21e6f50493aeb02ca4548d6fadf90cdc2e9c10/18955/wp-content/uploads/2019/01/pyqt-progressbar.png\" alt=\"progressbar pyqt\"/></figure>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>Copy the code below to see a progressbar counting from 50% to 100%.<br>The progressbar is updated using the method handleTimer() and a QTimer().</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtCore import QTimer\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QProgressBar\nfrom PyQt5.QtCore import Qt\n\nclass Example(QMainWindow):\n\ndef __init__(self):\nsuper().__init__()\n\nself.pbar = QProgressBar(self)\nself.pbar.setGeometry(30, 40, 200, 25)\nself.pbar.setValue(50)\n\nself.setWindowTitle(\"QT Progressbar Example\")\nself.setGeometry(32,32,320,200)\nself.show()\n\nself.timer = QTimer()\nself.timer.timeout.connect(self.handleTimer)\nself.timer.start(1000)\n\ndef handleTimer(self):\nvalue = self.pbar.value()\nif value &lt; 100:\nvalue = value + 1\nself.pbar.setValue(value)\nelse:\nself.timer.stop()\n\n\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nex = Example()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>QProgressBar&nbsp;is a widget to show process. You’ve likely seen it many times during installations. The widget shows a bar and you can see the percentage completed. You can set its value withthe method setValue(). Where 50 would set it to 50%. Related Course:&nbsp;Create GUI Apps with Python PyQt5 QProgressBar Progressbar Use the code below to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4633"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4633"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4633/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4633"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4633"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4633"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4634,
    "date": "2020-12-21T08:01:23",
    "date_gmt": "2020-12-21T08:01:23",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4316"
    },
    "modified": "2020-12-21T08:01:23",
    "modified_gmt": "2020-12-21T08:01:23",
    "slug": "how-to-use-tables-in-pyqtv",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/how-to-use-tables-in-pyqtv/",
    "title": {
      "rendered": "How to use Tables in PyQtv"
    },
    "content": {
      "rendered": "\n<p>Tables can be created with the&nbsp;<strong>QTableWidget</strong>. It is an item-based table view, similar to what you would see in Excel.</p>\n\n\n\n<p>You can include the table widget as part of your gui, or popup a window with an excel like table.</p>\n\n\n\n<p>In this example (<strong>PyQt5</strong>) it’ll show a window with the table, but you can make it part of your window gui with designer.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Tables\">Tables</h2>\n\n\n\n<h3 id=\"QTableWidget\">QTableWidget</h3>\n\n\n\n<p>The QTableWidget is a table widget with rows and columns.</p>\n\n\n\n<p>The object has the methods&nbsp;<code>.setRowCount(x)</code>&nbsp;and&nbsp;<code>.setColumnCount(y)</code>, where x is number of rows and y number of columns. You could use this as&nbsp;<code>self.setRowCount(5)</code>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/331c1321c53bb81f0d9555563f48ccd0d238e993/313c8/wp-content/uploads/2019/01/pyqt-table.png\" alt=\"pyqt table\"/></figure>\n\n\n\n<p>The contents is set with&nbsp;<code>self.setItem(m, n, newitem)</code>, where m and n is the coordinate inside the table.</p>\n\n\n\n<p>The variable&nbsp;<code>newitem</code>&nbsp;is of type&nbsp;<code>QTableWidgetItem</code>, which can take a text value as string. For instance:&nbsp;<code>.setItem(1,2, QTableWidgetItem(\"Table Cell\"))</code></p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h3 id=\"Table-in-PyQT\">Table in PyQT</h3>\n\n\n\n<p>The table is defined with the variable data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>data = {'col1':&#91;'1','2','3','4'],\n'col2':&#91;'1','2','1','3'],\n'col3':&#91;'1','1','2','1']}</code></pre>\n\n\n\n<p>The example below creates a table with 3 columns and a number of rows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import QMainWindow, QApplication, QWidget, QAction, QTableWidget,QTableWidgetItem,QVBoxLayout\nfrom PyQt5.QtGui import QIcon\nfrom PyQt5.QtCore import pyqtSlot\nimport sys\n\ndata = {'col1':&#91;'1','2','3','4'],\n'col2':&#91;'1','2','1','3'],\n'col3':&#91;'1','1','2','1']}\n\nclass TableView(QTableWidget):\ndef __init__(self, data, *args):\nQTableWidget.__init__(self, *args)\nself.data = data\nself.setData()\nself.resizeColumnsToContents()\nself.resizeRowsToContents()\n\ndef setData(self):\nhorHeaders = &#91;]\nfor n, key in enumerate(sorted(self.data.keys())):\nhorHeaders.append(key)\nfor m, item in enumerate(self.data&#91;key]):\nnewitem = QTableWidgetItem(item)\nself.setItem(m, n, newitem)\nself.setHorizontalHeaderLabels(horHeaders)\n\ndef main(args):\napp = QApplication(args)\ntable = TableView(data, 4, 3)\ntable.show()\nsys.exit(app.exec_())\n\nif __name__==\"__main__\":\nmain(sys.argv)</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Tables can be created with the&nbsp;QTableWidget. It is an item-based table view, similar to what you would see in Excel. You can include the table widget as part of your gui, or popup a window with an excel like table. In this example (PyQt5) it’ll show a window with the table, but you can make [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4634"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4634"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4634/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4634"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4634"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4634"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4635,
    "date": "2020-12-21T08:03:33",
    "date_gmt": "2020-12-21T08:03:33",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4318"
    },
    "modified": "2020-12-21T08:03:33",
    "modified_gmt": "2020-12-21T08:03:33",
    "slug": "compile-pyqt-to-exe",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/compile-pyqt-to-exe/",
    "title": {
      "rendered": "Compile PyQt to Exe"
    },
    "content": {
      "rendered": "\n<p>To distribute your app, you want to have a single executable program instead of source code. This is easier than giving users many Python files.</p>\n\n\n\n<p>Why? A user can start your app with a single click. On Windows it’s a&nbsp;<strong>.exe</strong>. On Mac OS X it’s a&nbsp;<strong>.dmg</strong></p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Make-Executable\">Make Executable</h2>\n\n\n\n<h3 id=\"Install-Toolchain\">Install Toolchain</h3>\n\n\n\n<p>You can use&nbsp;<strong>fbs</strong>&nbsp;to create a program that can be run.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt3 install python3-venv\npython3 -m venv venv\nsource bin/activate\npip3 install fbs PyQt5==5.9.2 PyInstaller==3.4\nfbs startproject</code></pre>\n\n\n\n<p>Then you’ll be asked for name of the app and the author.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>App name &#91;MyApp] : hello\nAuthor &#91;Linux] : boss\nMac bundle identifier (eg. com.boss.hello, optional):\n\nCreated the src/ directory.</code></pre>\n\n\n\n<p>Take a look at the file&nbsp;<code>/venv/src/main/python/main.py</code>. That’s the source code for your program.</p>\n\n\n\n<p>Type&nbsp;<code>fbs run</code>&nbsp;to start the program.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/b8381dbdb28b6dd563c25835b3fc46527c0149ab/21685/wp-content/uploads/2019/01/pyqt-to-exe-fbs.png\" alt=\"python pyqt to exe\"/></figure>\n\n\n\n<h3 id=\"Create-the-Executable\">Create the Executable</h3>\n\n\n\n<p>You start apps from a binary. On Windows thats a&nbsp;<em>.exe</em>, on Mac that’s a&nbsp;<em>.dmg</em></p>\n\n\n\n<p>To make a standalone executable type</p>\n\n\n\n<p><code>fbs freeze</code>.</p>\n\n\n\n<p>It then creates the program in&nbsp;<code>target/</code>. If you named the app hello, it’s&nbsp;<code>target/hello/hello</code>.</p>\n\n\n\n<h3 id=\"Setup\">Setup</h3>\n\n\n\n<p>Software is always installed using an installer. You can create your own installer with the command&nbsp;<code>fbs installer</code>.</p>\n\n\n\n<p>On Windows and Mac this will create a graphical setup program (setup wizard).</p>\n\n\n\n<p>On Linux it creates a package file (.deb, .rpm), that can be installed with the package manager.</p>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>To distribute your app, you want to have a single executable program instead of source code. This is easier than giving users many Python files. Why? A user can start your app with a single click. On Windows it’s a&nbsp;.exe. On Mac OS X it’s a&nbsp;.dmg Related Course:&nbsp;Create GUI Apps with Python PyQt5 Make Executable [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4635"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4635"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4635/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4635"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4635"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4635"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4636,
    "date": "2020-12-21T08:04:35",
    "date_gmt": "2020-12-21T08:04:35",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4320"
    },
    "modified": "2020-12-21T08:04:35",
    "modified_gmt": "2020-12-21T08:04:35",
    "slug": "qdial",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/qdial/",
    "title": {
      "rendered": "QDial"
    },
    "content": {
      "rendered": "\n<p>A dial widget (<strong>QDial</strong>) is included in PyQT.. It looks like a volume control you often see on mix panels. It’s part of&nbsp;<em>PyQt5.QtWidgets</em>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/3f3d46deadb28ef6231294bbc4ad86f9fa551145/0d019/wp-content/uploads/2019/01/pyqt-dial.png\" alt=\"pyqt dial QDial\"/></figure>\n\n\n\n<p>The look and feel of the QDial widget may change on operating systems. But the logic is the same on all platforms.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"QDial\">QDial</h2>\n\n\n\n<h3 id=\"Dial-Widget-Example\">Dial Widget Example</h3>\n\n\n\n<p>It has a minimum and maximum which can be set with the methods&nbsp;<code>setMinimum()</code>&nbsp;and&nbsp;<code>setMaximum()</code>.</p>\n\n\n\n<p>You can set the default value with&nbsp;<code>setValue()</code>. If the value is changed you can call a method (<code>.valueChanged.connect(self.sliderMoved)</code>).</p>\n\n\n\n<p>The current value is&nbsp;<code>.value()</code>.</p>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>The example below creates a dial widget window. You can copy and paste the program to test it out. PyQt5 must be installed to run the program.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\nself.dial = QDial()\nself.dial.setMinimum(0)\nself.dial.setMaximum(100)\nself.dial.setValue(40)\nself.dial.valueChanged.connect(self.sliderMoved)\nlayout.addWidget(self.dial)\n\ndef sliderMoved(self):\nprint(\"Dial value = %i\" % (self.dial.value()))\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A dial widget (QDial) is included in PyQT.. It looks like a volume control you often see on mix panels. It’s part of&nbsp;PyQt5.QtWidgets. The look and feel of the QDial widget may change on operating systems. But the logic is the same on all platforms. Related Course:&nbsp;Create GUI Apps with Python PyQt5 QDial Dial Widget [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4636"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4636"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4636/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4636"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4636"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4636"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4637,
    "date": "2020-12-21T08:06:09",
    "date_gmt": "2020-12-21T08:06:09",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4322"
    },
    "modified": "2020-12-21T08:06:09",
    "modified_gmt": "2020-12-21T08:06:09",
    "slug": "qcheckbox-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/qcheckbox-2/",
    "title": {
      "rendered": "QCheckBox"
    },
    "content": {
      "rendered": "\n<p>A checkbox is supported by PyQt. The widgets name is&nbsp;<strong>QCheckBox</strong>. If you create a checkbox you can set it to be checked by default using the .toggle() method.</p>\n\n\n\n<p>The first parameter after the QCheckBox call is the label text that’s right next to the checkbox. In this article you’ll learn how to place single checkboxes, but you can just as easy create them in a for loop.</p>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Checkbox\">Checkbox</h2>\n\n\n\n<h3 id=\"QCheckBox\">QCheckBox</h3>\n\n\n\n<p>Import QCheckBox from PyQt5.QtWidgets. Then to create a new checkbox, just call:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cb = QCheckBox('Movie', self)</code></pre>\n\n\n\n<p>Where the first parameter is the label next to the checkbox. Then set the position and if you want it checked</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cb.move(20, 40)\ncb.toggle()</code></pre>\n\n\n\n<p>If you want to call a method if the checkbox is called, you can do that like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cb.stateChanged.connect(self.someMethod)</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/4fb63c4de285b18ac6ff94ad47fa88222b390b48/13041/wp-content/uploads/2019/01/pyqt-checkbox.png\" alt=\"pyqt qcheckbox checkbox\"/></figure>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>The program below creates two check boxes in a window. One of the checkboxes is toggled because the method .toggle() is called.</p>\n\n\n\n<p>Complete code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import sys\nfrom PyQt5.QtWidgets import QApplication, QMainWindow, QCheckBox\n\nclass Example(QMainWindow):\n\ndef __init__(self):\nsuper().__init__()\n\ncb = QCheckBox('Movie', self)\ncb.move(20, 20)\n\ncb2 = QCheckBox('Music', self)\ncb2.move(20, 40)\ncb2.toggle()\n\nself.setGeometry(50,50,320,200)\nself.setWindowTitle(\"Checkbox Example\")\nself.show()\n\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nex = Example()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt,&nbsp;then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A checkbox is supported by PyQt. The widgets name is&nbsp;QCheckBox. If you create a checkbox you can set it to be checked by default using the .toggle() method. The first parameter after the QCheckBox call is the label text that’s right next to the checkbox. In this article you’ll learn how to place single checkboxes, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4637"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4637"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4637/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4637"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4637"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4637"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4638,
    "date": "2020-12-23T06:02:33",
    "date_gmt": "2020-12-23T06:02:33",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4324"
    },
    "modified": "2020-12-23T06:02:33",
    "modified_gmt": "2020-12-23T06:02:33",
    "slug": "pyqt-radiobutton",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-radiobutton/",
    "title": {
      "rendered": "pyqt radiobutton"
    },
    "content": {
      "rendered": "\n<p>PyQT&nbsp;<code>QRadioButton</code>&nbsp;is a simple radio button. This is typically used when only one option is possible, as opposed to a checkbox.</p>\n\n\n\n<p>In qt the checkbox always has the round button and the label like&nbsp;<code>QRadioButton(\"Australia\")</code>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/bab2e73607ee4f48c4217f79a78309005e763304/90d10/wp-content/uploads/2019/01/radiobutton.png\" alt=\"pyqt radiobutton QRadioButton\"/></figure>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Radio-Button\">Radio Button</h2>\n\n\n\n<h3 id=\"PyQT-radio-button-example\">PyQT radio button example</h3>\n\n\n\n<p>The code below creates 3 radio buttons. It adds 3 radio buttons to a grid.<br>If you click on any of the radio buttons, it calls the method <code>onClicked()</code>. The radio button is connected to that method using <code>radiobutton.toggled.connect(self.onClicked)</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\n\nradiobutton = QRadioButton(\"Australia\")\nradiobutton.setChecked(True)\nradiobutton.country = \"Australia\"\nradiobutton.toggled.connect(self.onClicked)\nlayout.addWidget(radiobutton, 0, 0)\n\nradiobutton = QRadioButton(\"China\")\nradiobutton.country = \"China\"\nradiobutton.toggled.connect(self.onClicked)\nlayout.addWidget(radiobutton, 0, 1)\n\nradiobutton = QRadioButton(\"Japan\")\nradiobutton.country = \"Japan\"\nradiobutton.toggled.connect(self.onClicked)\nlayout.addWidget(radiobutton, 0, 2)\n\ndef onClicked(self):\nradioButton = self.sender()\nif radioButton.isChecked():\nprint(\"Country is %s\" % (radioButton.country))\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>PyQT&nbsp;QRadioButton&nbsp;is a simple radio button. This is typically used when only one option is possible, as opposed to a checkbox. In qt the checkbox always has the round button and the label like&nbsp;QRadioButton(&#8220;Australia&#8221;). Related Course: Create GUI Apps with Python PyQt5 Radio Button PyQT radio button example The code below creates 3 radio buttons. It adds [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4638"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4638"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4638/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4638"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4638"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4638"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4639,
    "date": "2020-12-23T06:04:18",
    "date_gmt": "2020-12-23T06:04:18",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4326"
    },
    "modified": "2020-12-23T06:04:18",
    "modified_gmt": "2020-12-23T06:04:18",
    "slug": "pyqt-groupbox-example",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-groupbox-example/",
    "title": {
      "rendered": "PyQt GroupBox Example"
    },
    "content": {
      "rendered": "\n<p>A groupbox&nbsp;<em><code>QGroupBox</code></em>&nbsp;can group widgets, it provides a frame, title on top and it can display a multiple of widgets inside. It typically has a title and a border. Any PyQt widget can be added into the group box. This can be further used to communciate your UI/UX to your user.</p>\n\n\n\n<p>This example demonstrates how to create the groupbox as shown below:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/b8cae653306025a6268edf37a40d5abd58ea64aa/663e5/wp-content/uploads/2019/01/groupbox.png\" alt=\"pyqt groupbox\"/></figure>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"QGroupBox\">QGroupBox</h2>\n\n\n\n<h3 id=\"PyQt-Groupbox\">PyQt Groupbox</h3>\n\n\n\n<p>The groupbox is initialized with&nbsp;<code>QGroupBox(\"title\")</code>. Using the constructor is the normal way to set the title (you can also set the alignment: top, bottom, left, right, center). A layout is then added to the groupbox. Widgets are added to the layout.</p>\n\n\n\n<p>A QGroupBox doesn’t layout the widgets automatically, so you have to do that yourself. You can use QVBoxLayout or QHBoxLayout for that.</p>\n\n\n\n<p>A groupbox can be checkable. All of that said, that gives us the following initializiation:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>groupbox = QGroupBox(\"GroupBox Example\")\ngroupbox.setCheckable(True)\nlayout.addWidget(groupbox)\n\nvbox = QVBoxLayout()\ngroupbox.setLayout(vbox)</code></pre>\n\n\n\n<p>Individual widgets can then be added to the QVBoxLayout.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>vbox.addWidget(radiobutton)\nvbox.addWidget(radiobutton)\nvbox.addWidget(radiobutton)\n...</code></pre>\n\n\n\n<p>This example below creates a checkable groupbox, title and with several widgets add to it</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass GroupBox(QWidget):\n\ndef __init__(self):\nQWidget.__init__(self)\n\nself.setWindowTitle(\"GroupBox\")\nlayout = QGridLayout()\nself.setLayout(layout)\n\ngroupbox = QGroupBox(\"GroupBox Example\")\ngroupbox.setCheckable(True)\nlayout.addWidget(groupbox)\n\nvbox = QVBoxLayout()\ngroupbox.setLayout(vbox)\n\nradiobutton = QRadioButton(\"RadioButton 1\")\nvbox.addWidget(radiobutton)\n\nradiobutton = QRadioButton(\"RadioButton 2\")\nvbox.addWidget(radiobutton)\n\nradiobutton = QRadioButton(\"RadioButton 3\")\nvbox.addWidget(radiobutton)\n\nradiobutton = QRadioButton(\"RadioButton 4\")\nvbox.addWidget(radiobutton)\n\n\napp = QApplication(sys.argv)\nscreen = GroupBox()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A groupbox&nbsp;QGroupBox&nbsp;can group widgets, it provides a frame, title on top and it can display a multiple of widgets inside. It typically has a title and a border. Any PyQt widget can be added into the group box. This can be further used to communciate your UI/UX to your user. This example demonstrates how to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4639"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4639"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4639/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4639"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4639"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4639"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4640,
    "date": "2020-12-23T06:06:29",
    "date_gmt": "2020-12-23T06:06:29",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4328"
    },
    "modified": "2020-12-23T06:06:29",
    "modified_gmt": "2020-12-23T06:06:29",
    "slug": "pyqt-tooltip",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-tooltip/",
    "title": {
      "rendered": "pyqt tooltip"
    },
    "content": {
      "rendered": "\n<p>A tooltip is a message that is shown when hovering the mouse on a widget. In PyQt you can add tooltips to widgets, which then show small hints when hovering over the widget.</p>\n\n\n\n<p>This can be a plain text message or a formatted message (HTML). You can add a tooltip by calling&nbsp;<code>.setToolTip(\"text\")</code>&nbsp;on a widget. This is often used to assist the user.</p>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Tooltip-example\">Tooltip example</h2>\n\n\n\n<h3 id=\"PyQt-tooltip-example\">PyQt tooltip example</h3>\n\n\n\n<p>The program below adds tooltip messages to the buttons. This can be either plain text or HTML formatted tags (the tags bold and italic work).<br>A simple tooltip would be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>button = QPushButton(\"Button\")\nbutton.setToolTip(\"This is a text\")</code></pre>\n\n\n\n<p>But you can add HTML formatting to your tooltip, making it look like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>button = QPushButton(\"Button\")\nbutton.setToolTip(\"&lt;b>HTML&lt;/b> &lt;i>can&lt;/i> be shown too..\")</code></pre>\n\n\n\n<h2 id=\"Example-tooltip\">Example tooltip</h2>\n\n\n\n<p>You can set any message you want inside the tooltip message. In the program below two buttons are added.<br>Each button has a different tooltip, which is shown when you hover over the button.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\n\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\n\nbutton = QPushButton(\"Button\")\nbutton.setToolTip(\"This is a text\")\nlayout.addWidget(button, 0, 0)\n\nbutton = QPushButton(\"Button\")\nbutton.setToolTip(\"&lt;b>HTML&lt;/b> &lt;i>can&lt;/i> be shown too..\")\nlayout.addWidget(button, 1, 0)\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A tooltip is a message that is shown when hovering the mouse on a widget. In PyQt you can add tooltips to widgets, which then show small hints when hovering over the widget. This can be a plain text message or a formatted message (HTML). You can add a tooltip by calling&nbsp;.setToolTip(&#8220;text&#8221;)&nbsp;on a widget. This [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4640"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4640"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4640/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4640"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4640"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4640"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4641,
    "date": "2020-12-23T06:08:53",
    "date_gmt": "2020-12-23T06:08:53",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4330"
    },
    "modified": "2020-12-23T06:08:53",
    "modified_gmt": "2020-12-23T06:08:53",
    "slug": "pyqt-toolbox-qtoolbox-examples",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-toolbox-qtoolbox-examples/",
    "title": {
      "rendered": "PyQt ToolBox (QToolBox) Examples"
    },
    "content": {
      "rendered": "\n<p>Toolbox (<em>QToolBox</em>) is a container widget in PyQt. The widget can show groups of items separated by tabs. If there are to many items for a toolbar, you may want a toolbox.</p>\n\n\n\n<p>A screenshot of a toolbox&nbsp;<code>QToolBox</code>&nbsp;is shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/f497a2a7fb492687823089317d99b96f14737fd5/fca07/wp-content/uploads/2019/01/pyqt-toolbox.png\" alt=\"toolbox pyqt qtoolbox\"/></figure>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Toolbox-example\">Toolbox example</h2>\n\n\n\n<h3 id=\"QToolBox\">QToolBox</h3>\n\n\n\n<p>A QToolBox widget shows a column of tabs one above the other. The current item is shown below the current tab. Every tab has an index position and every tab’s item is a QWidget. A toolbox (QToolBox) can be created with a single line of code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>toolbox = QToolBox()</code></pre>\n\n\n\n<p>After creationg you can add items to the toolbox with the method <em>addItem()</em>. For example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>toolbox.addItem(label, \"Students\")</code></pre>\n\n\n\n<p>The Python code below creates a toolbox with 3 items. The toolbox&nbsp;<code>QToolBox</code>&nbsp;has a method&nbsp;<code>.addItem()</code>, which is used to add it ems.</p>\n\n\n\n<p>The toolbox itself has to be added to a layout, for instance <code>layout.addWidget(toolbox, 0, 0)</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\n\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\n\n# Add toolbar and items\ntoolbox = QToolBox()\nlayout.addWidget(toolbox, 0, 0)\nlabel = QLabel()\ntoolbox.addItem(label, \"Students\")\nlabel = QLabel()\ntoolbox.addItem(label, \"Teachers\")\nlabel = QLabel()\ntoolbox.addItem(label, \"Directors\")\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>Download Examples</p>\n\n\n\n<h3 id=\"Methods\">Methods</h3>\n\n\n\n<p>The QToolBox has many methods that can be used, you’ve seen <em>.addItem()</em> before but there are many more.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>addItem()\ncount()\ncurrentIndex()\ninsertItem()\nitemToolTip()\nitemText()\nitemIcon()\nisItemEnabled()\nremoveItem()\nsetItemEnabled()\nsetItemIcon()\nsetItemText()\nsetItemToolTip()</code></pre>\n\n\n\n<p>The example below demonstrates the use of some of these methods:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\n\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\n\n# Add toolbar and items\ntoolbox = QToolBox()\nlayout.addWidget(toolbox, 0, 0)\nlabel = QLabel()\ntoolbox.addItem(label, \"Students\")\nlabel = QLabel()\ntoolbox.addItem(label, \"Teachers\")\nlabel = QLabel()\ntoolbox.addItem(label, \"Directors\")\n\n# show number of items\nprint(toolbox.count())\n\n# disable tab\ntoolbox.setItemEnabled(0, False)\n\n# mouseover tooltip\ntoolbox.setItemToolTip(0, \"This is a tooltip\")\n\n# tests if items are enabled\nprint(toolbox.isItemEnabled(0))\nprint(toolbox.isItemEnabled(1))\n\n# insert item\nitem = QLabel()\ntoolbox.insertItem(1, item, \"Python\")\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Toolbox (QToolBox) is a container widget in PyQt. The widget can show groups of items separated by tabs. If there are to many items for a toolbar, you may want a toolbox. A screenshot of a toolbox&nbsp;QToolBox&nbsp;is shown below. Related Course: Create GUI Apps with Python PyQt5 Toolbox example QToolBox A QToolBox widget shows a column [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4641"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4641"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4641/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4641"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4641"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4641"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4642,
    "date": "2020-12-23T06:10:12",
    "date_gmt": "2020-12-23T06:10:12",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4332"
    },
    "modified": "2020-12-23T06:10:12",
    "modified_gmt": "2020-12-23T06:10:12",
    "slug": "pyqt-toolbar",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-toolbar/",
    "title": {
      "rendered": "PyQt Toolbar"
    },
    "content": {
      "rendered": "\n<p>PyQt windows often have a toolbar&nbsp;<code>QToolBar</code>, besides a file menu. The toolbar contains some buttons. In a web browser those buttons may be back, forward, refresh, home. In a text editor open, save and so on.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/9790446a195de26c1367a5a092ef69dbc502f7be/f37bd/wp-content/uploads/2019/01/pyqt-toolbar-qtoolbar.png\" alt=\"qt toolbar pyqt\"/></figure>\n\n\n\n<p>In this article you’ll learn how to add a toolbar to your window.</p>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Toolbar\">Toolbar</h2>\n\n\n\n<h3 id=\"QToolBar-example\">QToolBar example</h3>\n\n\n\n<p>The program below creates a window with a toolbar&nbsp;<code>QToolBar</code>&nbsp;with buttons&nbsp;<code>QToolButton</code>. You can add a toolbar to any PyQt window. It also adds textbox.</p>\n\n\n\n<p>The toolbar is added to a layout <code>QGridLayout</code> and the buttons <code>QToolButton</code> to the <code>QToolBar</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\n\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\n\n# Create pyqt toolbar\ntoolBar = QToolBar()\nlayout.addWidget(toolBar)\n\n# Add buttons to toolbar\ntoolButton = QToolButton()\ntoolButton.setText(\"Apple\")\ntoolButton.setCheckable(True)\ntoolButton.setAutoExclusive(True)\ntoolBar.addWidget(toolButton)\ntoolButton = QToolButton()\ntoolButton.setText(\"Orange\")\ntoolButton.setCheckable(True)\ntoolButton.setAutoExclusive(True)\ntoolBar.addWidget(toolButton)\n\n# Add textfield to window\ntbox = QPlainTextEdit()\nlayout.addWidget(tbox)\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>PyQt windows often have a toolbar&nbsp;QToolBar, besides a file menu. The toolbar contains some buttons. In a web browser those buttons may be back, forward, refresh, home. In a text editor open, save and so on. In this article you’ll learn how to add a toolbar to your window. Related Course: Create GUI Apps with Python [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4642"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4642"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4642/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4642"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4642"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4642"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4643,
    "date": "2020-12-23T06:11:35",
    "date_gmt": "2020-12-23T06:11:35",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4334"
    },
    "modified": "2020-12-23T06:11:35",
    "modified_gmt": "2020-12-23T06:11:35",
    "slug": "pyqt-menubar",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-menubar/",
    "title": {
      "rendered": "pyqt menubar"
    },
    "content": {
      "rendered": "\n<p>A menubar can be added to a PyQt window. Its a horizontal bar with buttons items, typically file menu and others.</p>\n\n\n\n<p>This example adds a menubar and textbox to a PyQt window. As shown in the screenshot below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/886182a7ea2ced60446474cd67ff7af2b3c5ff85/80ca4/wp-content/uploads/2019/01/pyqt-menu.png\" alt=\"menubar in pyqt\"/></figure>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"PyQt-Menubar\">PyQt Menubar</h2>\n\n\n\n<h3 id=\"Menubar-example\">Menubar example</h3>\n\n\n\n<p>A menubar can be constructed with&nbsp;<code>QMenuBar()</code>. You can add menus like so&nbsp;<code>.addMenu(\"File\")</code>. Then add actions to the menu so&nbsp;<code>.addAction(\"Open\")</code>.</p>\n\n\n\n<p>The menubar has to be added to a layout, which is done with this line <code>layout.addWidget(menubar, 0, 0)</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtCore import *\nfrom PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\n\n# create menu\nmenubar = QMenuBar()\nlayout.addWidget(menubar, 0, 0)\nactionFile = menubar.addMenu(\"File\")\nactionFile.addAction(\"New\")\nactionFile.addAction(\"Open\")\nactionFile.addAction(\"Save\")\nactionFile.addSeparator()\nactionFile.addAction(\"Quit\")\nmenubar.addMenu(\"Edit\")\nmenubar.addMenu(\"View\")\nmenubar.addMenu(\"Help\")\n\n# add textbox\ntbox = QPlainTextEdit()\nlayout.addWidget(tbox, 1, 0)\n\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A menubar can be added to a PyQt window. Its a horizontal bar with buttons items, typically file menu and others. This example adds a menubar and textbox to a PyQt window. As shown in the screenshot below. Related Course: Create GUI Apps with Python PyQt5 PyQt Menubar Menubar example A menubar can be constructed with&nbsp;QMenuBar(). [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4643"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4643"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4643/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4643"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4643"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4643"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4644,
    "date": "2020-12-23T06:13:02",
    "date_gmt": "2020-12-23T06:13:02",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4336"
    },
    "modified": "2020-12-23T06:13:02",
    "modified_gmt": "2020-12-23T06:13:02",
    "slug": "pyqt-tabwidget",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-tabwidget/",
    "title": {
      "rendered": "PyQt TabWidget"
    },
    "content": {
      "rendered": "\n<p>Tabs can be added to a&nbsp;<code>QTabWidget</code>. The&nbsp;<code>QTabWidget</code>&nbsp;can be added to a layout and the layout to the window.</p>\n\n\n\n<p>There can be any amount of tabs. The example below shows tabs added ta qt window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/aa3396f0e84814ad6d28f6b8325d3cfee5c4fea1/11f34/wp-content/uploads/2019/01/pyqt-tabs.png\" alt=\"tabs in pyqt window\"/></figure>\n\n\n\n<p><em>image: tabs showing in a pyqt window.</em></p>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Tab-example\">Tab example</h2>\n\n\n\n<h3 id=\"PyQt-tabs-example\">PyQt tabs example</h3>\n\n\n\n<p>Run the code below to see a tab widget in a pyqt window. Navigating between the tabs shows the widgets added to the tab.</p>\n\n\n\n<p>To add a tab to a <code>QTabWidget</code>, call the method <code>.addTab()</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtCore import *\nfrom PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\nlabel1 = QLabel(\"Widget in Tab 1.\")\nlabel2 = QLabel(\"Widget in Tab 2.\")\ntabwidget = QTabWidget()\ntabwidget.addTab(label1, \"Tab 1\")\ntabwidget.addTab(label2, \"Tab 2\")\nlayout.addWidget(tabwidget, 0, 0)\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Tabs can be added to a&nbsp;QTabWidget. The&nbsp;QTabWidget&nbsp;can be added to a layout and the layout to the window. There can be any amount of tabs. The example below shows tabs added ta qt window. image: tabs showing in a pyqt window. Related Course: Create GUI Apps with Python PyQt5 Tab example PyQt tabs example Run the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4644"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4644"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4644/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4644"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4644"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4644"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4338,
    "date": "2020-12-23T06:14:44",
    "date_gmt": "2020-12-23T06:14:44",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4338"
    },
    "modified": "2020-12-23T06:14:44",
    "modified_gmt": "2020-12-23T06:14:44",
    "slug": "pyqt-auto-complete",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-auto-complete/",
    "title": {
      "rendered": "pyqt auto complete"
    },
    "content": {
      "rendered": "\n<p>PyQt supports&nbsp;<em>autocomplete</em>. If you type in a text box (<code>QLineEdit</code>), it can make suggestions. Those suggestions are recommended from a list.</p>\n\n\n\n<p>You may know this from the web, Google search often shows recommendations while you are typing. You can do a similar thing with PyQt.</p>\n\n\n\n<p>This example adds auto complete to a&nbsp;<code>QLineEdit</code>&nbsp;text box.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/c3437e4a9adfb281ccd2176a37c62ad270352704/dcc71/wp-content/uploads/2019/01/pyqt-lineedit-autocomplete.png\" alt=\"auto complete QLineEdit\"/></figure>\n\n\n\n<p><em>image: tabs showing in a pyqt window.</em></p>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Auto-complete\">Auto complete</h2>\n\n\n\n<h3 id=\"QLineEdit-Auto-Complete-Example\">QLineEdit Auto Complete Example</h3>\n\n\n\n<p>Start by creating a list of options (names) / suggestions. Thencreate a QCompleter, a <code>completer = QCompleter(names)</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>names = &#91;\"Apple\", \"Alps\", \"Berry\", \"Cherry\" ]\ncompleter = QCompleter(names)</code></pre>\n\n\n\n<p>The QLineEdit widget is a simpe text box that can be added to your window.<br>You can create a line edit widget with the line <code>self.lineedit = QLineEdit()</code>. The line edit otherwise works as normal.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.lineedit = QLineEdit()</code></pre>\n\n\n\n<p>You can add suggestions (you defined earlier) to the list. The suggestions are added with the line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.lineedit.setCompleter(completer)</code></pre>\n\n\n\n<p>If you forget the last line, the <code>QCompleter</code> and <code>QLineEdit</code> are not connected, meaning there is no <strong>auto completion</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\n\n# auto complete options\nnames = &#91;\"Apple\", \"Alps\", \"Berry\", \"Cherry\" ]\ncompleter = QCompleter(names)\n\n# create line edit and add auto complete\nself.lineedit = QLineEdit()\nself.lineedit.setCompleter(completer)\nlayout.addWidget(self.lineedit, 0, 0)\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>PyQt supports&nbsp;autocomplete. If you type in a text box (QLineEdit), it can make suggestions. Those suggestions are recommended from a list. You may know this from the web, Google search often shows recommendations while you are typing. You can do a similar thing with PyQt. This example adds auto complete to a&nbsp;QLineEdit&nbsp;text box. image: tabs [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4338"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4338"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4338/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4338"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4338"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4338"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4645,
    "date": "2020-12-23T06:19:24",
    "date_gmt": "2020-12-23T06:19:24",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4340"
    },
    "modified": "2020-12-23T06:19:24",
    "modified_gmt": "2020-12-23T06:19:24",
    "slug": "pyqt-list-box",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-list-box/",
    "title": {
      "rendered": "pyqt list box"
    },
    "content": {
      "rendered": "\n<p>A Listbox (<code>QListWidget</code>) presents several options. You can click on an item. An example of a listbox would be a song playlist. Unlike a combobox it shows all possible options.</p>\n\n\n\n<p>The screenshot below shows a PyQt list box in a window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/e8d64cd12c773858101d7c0a2e030b531c7dddde/f3447/wp-content/uploads/2019/01/qlistwidget.png\" alt=\"pyqt listbox\"/></figure>\n\n\n\n<p><strong>Related Course:</strong>&nbsp;<a href=\"https://gum.co/pysqtsamples\" rel=\"noreferrer noopener\" target=\"_blank\">Create GUI Apps with Python PyQt5</a></p>\n\n\n\n<h2 id=\"PyQt-Listbox-example\">PyQt Listbox example</h2>\n\n\n\n<h3 id=\"QListWidget\">QListWidget</h3>\n\n\n\n<p>A listbox widget is created with <code>QListWidget()</code>, it creates an item-based list widget. The <em>QListWidget</em> provides a list view similar to the one supplied by QListView, but with a classic item-based interface. With a single line a listwidget is added to a window:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.listwidget = QListWidget()</code></pre>\n\n\n\n<p>An item is then added with the method <em>.insertItem()</em>. For example: <code>self.listwidget.insertItem(0, \"Red\")</code> where the first parameter is the index. You can add many items that way:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.listwidget.insertItem(0, \"Red\")\nself.listwidget.insertItem(1, \"Orange\")\nself.listwidget.insertItem(2, \"Blue\")\n...</code></pre>\n\n\n\n<p>Now if you click on any of the items it won’t do anything. So you need to event the slot to a function call. You can do that with the line:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>self.listwidget.clicked.connect(self.clicked)</code></pre>\n\n\n\n<p>Where clicked() is a slot or method that is called (a callback method).<br>The click event is added with the method clicked,&nbsp;<code>self.listwidget.clicked.connect(self.clicked)</code></p>\n\n\n\n<p>This example below shows how to use the list widget (<em>QListWidget</em>) in PyQt.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import *\nimport sys\n\nclass Window(QWidget):\ndef __init__(self):\nQWidget.__init__(self)\nlayout = QGridLayout()\nself.setLayout(layout)\nself.listwidget = QListWidget()\nself.listwidget.insertItem(0, \"Red\")\nself.listwidget.insertItem(1, \"Orange\")\nself.listwidget.insertItem(2, \"Blue\")\nself.listwidget.insertItem(3, \"White\")\nself.listwidget.insertItem(4, \"Green\")\nself.listwidget.clicked.connect(self.clicked)\nlayout.addWidget(self.listwidget)\n\ndef clicked(self, qmodelindex):\nitem = self.listwidget.currentItem()\nprint(item.text())\n\napp = QApplication(sys.argv)\nscreen = Window()\nscreen.show()\nsys.exit(app.exec_())</code></pre>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A Listbox (QListWidget) presents several options. You can click on an item. An example of a listbox would be a song playlist. Unlike a combobox it shows all possible options. The screenshot below shows a PyQt list box in a window. Related Course:&nbsp;Create GUI Apps with Python PyQt5 PyQt Listbox example QListWidget A listbox widget [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4645"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4645"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4645/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4645"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4645"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4645"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4646,
    "date": "2020-12-23T06:20:15",
    "date_gmt": "2020-12-23T06:20:15",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4342"
    },
    "modified": "2020-12-23T06:20:15",
    "modified_gmt": "2020-12-23T06:20:15",
    "slug": "pyqt-input-dialog",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pyqt-input-dialog/",
    "title": {
      "rendered": "pyqt input dialog"
    },
    "content": {
      "rendered": "\n<p>Input dialog in PyQt is supported out of the box (<code>QInputDialog</code>). This has an input text, an ok and cancel button.</p>\n\n\n\n<p>In this article you’ll see that works in PyQt. As shown in the screenshot</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/5ec9bc7575a94580d5ea4ceb58e3c4329b1b55cf/16365/wp-content/uploads/2019/01/inputdialog.png\" alt=\"pyqt input dialog\"/></figure>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Input-Dialog\">Input Dialog</h2>\n\n\n\n<h3 id=\"Example\">Example</h3>\n\n\n\n<p>The code below creates a PyQt input dialog. After you click the button, you can enter some text. The text is shown as label.</p>\n\n\n\n<p>The dialog is created in the method <code>showDialog</code> and it’s just a few lines. Input dialig is part of <code>PyQt5.QtWidgets</code>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5.QtWidgets import (QWidget, QPushButton, QLineEdit, QInputDialog, QApplication, QLabel)\nimport sys\n\nclass Example(QWidget):\n\ndef __init__(self):\nsuper().__init__()\nself.initUI()\n\ndef initUI(self):\n# Add button\nself.btn = QPushButton('Show Input Dialog', self)\nself.btn.move(30, 20)\nself.btn.clicked.connect(self.showDialog)\n\n# Add label\nself.le = QLabel(self)\nself.le.move(30, 62)\nself.le.resize(400,22)\n\nself.setGeometry(300, 300, 290, 150)\nself.setWindowTitle('Input dialog')\nself.show()\n\n\ndef showDialog(self):\ntext, ok = QInputDialog.getText(self, 'Input Dialog', 'Enter text:')\nif ok:\nself.le.setText(str(text))\n\nif __name__ == '__main__':\napp = QApplication(sys.argv)\nex = Example()\nsys.exit(app.exec_())</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Input dialog in PyQt is supported out of the box (QInputDialog). This has an input text, an ok and cancel button. In this article you’ll see that works in PyQt. As shown in the screenshot Related Course: Create GUI Apps with Python PyQt5 Input Dialog Example The code below creates a PyQt input dialog. After you [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4646"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4646"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4646/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4646"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4646"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4646"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4647,
    "date": "2020-12-23T06:22:58",
    "date_gmt": "2020-12-23T06:22:58",
    "guid": {
      "rendered": "http://python3.foobrdigital.com/?p=4344"
    },
    "modified": "2020-12-23T06:22:58",
    "modified_gmt": "2020-12-23T06:22:58",
    "slug": "qt-designer-python",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/qt-designer-python/",
    "title": {
      "rendered": "qt designer python"
    },
    "content": {
      "rendered": "\n<p>Qt Designer helps you build a GUI (graphical user interface). You can load a GUI from Python. In this tutorial we’ll show you step by step.</p>\n\n\n\n<p>It covers a very basic example of how to use Qt Designer with PyQt and Python. For more details see the link below.</p>\n\n\n\n<p><strong>Related Course:</strong> Create GUI Apps with Python PyQt5</p>\n\n\n\n<h2 id=\"Qt-Designer-Python\">Qt Designer Python</h2>\n\n\n\n<h3 id=\"Prerequisites\">Prerequisites</h3>\n\n\n\n<p>To start with this tutorial you need these installed:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Python\nPyQt\nQt Designer</code></pre>\n\n\n\n<p>You will need Python 3 or above, because the others are out dated.</p>\n\n\n\n<p><em>If you don’t have PyQt,</em> install PyQt.</p>\n\n\n\n<p>You can install Designer (Ubuntu Linux) with:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install qttools5-dev-tools\nsudo apt-get install qttools5-dev</code></pre>\n\n\n\n<p>On other platforms it’s included in the setup.</p>\n\n\n\n<h3 id=\"How-to-start-Designer\">How to start Designer</h3>\n\n\n\n<p>Start designer by typing&nbsp;<code>designer</code>&nbsp;in the command line. Important: qt creator is another program.</p>\n\n\n\n<p>On Ubuntu Linux:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd /usr/lib/x86_64-linux-gnu/qt5/bin/\n./designer</code></pre>\n\n\n\n<h3 id=\"Basics\">Basics</h3>\n\n\n\n<p>A popup shows up. You can choose what you want to design.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/297495b35a20dfd00d121c5ea187a91dd80e0646/e1927/wp-content/uploads/2019/01/qtdesigner.png\" alt=\"pyqt designer\"/></figure>\n\n\n\n<p>Choose “Main Window” and click create.</p>\n\n\n\n<p>You can then resize the form and drag and drop widgets. It’s pretty simple to design a graphical interface like this.</p>\n\n\n\n<p>If you click on a widget (say a button), you can set its properties like name.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://d33wubrfki0l68.cloudfront.net/bb4048e5c194e87433b9bd1de0cf3f42ac9862d9/0c95c/wp-content/uploads/2019/01/qtdesigner-pyqt.png\" alt=\"qt designer\"/></figure>\n\n\n\n<p>If you are new to Python PyQt, then I highly recommend this book.</p>\n\n\n\n<h3 id=\"Export-Design-to-UI\">Export Design to UI</h3>\n\n\n\n<p>You can export your design to a UI file. Click File &gt; Save As &gt; yourname.ui</p>\n\n\n\n<p>Then you can convert the ui code to a python file.<br>Like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>pyuic5 /home/linux/helloworld.ui -o helloworld.py</code></pre>\n\n\n\n<p>The Python file then contains the gui definition.<br>Create another file that loads the ui file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>from PyQt5 import QtCore, QtGui, QtWidgets\nfrom PyQt5.QtWidgets import QApplication\nimport sys\nimport helloworld\n\nclass ExampleApp(QtWidgets.QMainWindow, helloworld.Ui_MainWindow):\ndef __init__(self, parent=None):\nsuper(ExampleApp, self).__init__(parent)\nself.setupUi(self)\n\ndef main():\napp = QApplication(sys.argv)\nform = ExampleApp()\nform.show()\napp.exec_()\n\nif __name__ == '__main__':\nmain()</code></pre>\n\n\n\n<p>Once you run it your GUI appears.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Qt Designer helps you build a GUI (graphical user interface). You can load a GUI from Python. In this tutorial we’ll show you step by step. It covers a very basic example of how to use Qt Designer with PyQt and Python. For more details see the link below. Related Course: Create GUI Apps with Python [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      77
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4647"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4647"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4647/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4647"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4647"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4647"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]