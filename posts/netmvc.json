[{"id":3713,"date":"2020-09-18T12:21:59","date_gmt":"2020-09-18T12:21:59","guid":{"rendered":"http://backend.foobrdigital.com/?p=3713"},"modified":"2020-09-18T12:21:59","modified_gmt":"2020-09-18T12:21:59","slug":"asp-net-mvc-overview","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-overview/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p>ASP.NET MVC is basically a web development framework from Microsoft, which combines the features of MVC (Model-View-Controller) architecture, the most up-to-date ideas and techniques from Agile development, and the best parts of the existing ASP.NET platform.</p>\n\n\n\n<p>ASP.NET MVC is not something, which is built from ground zero. It is a complete alternative to traditional ASP.NET Web Forms. It is built on the top of ASP.NET, so developers enjoy almost all the ASP.NET features while building the MVC application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/building_mvc_application.jpg\" alt=\"Building MVC Application\"/></figure>\n\n\n\n<h2>History</h2>\n\n\n\n<p>ASP.NET 1.0 was released on January 5, 2002, as part of .Net Framework version 1.0. At that time, it was easy to think of ASP.NET and Web Forms as one and the same thing. ASP.NET has however always supported two layers of abstraction −</p>\n\n\n\n<ul><li><strong>System.Web.UI</strong>&nbsp;− The Web Forms layer, comprising server controls, ViewState, and so on.</li><li><strong>System.Web</strong>&nbsp;− It supplies the basic web stack, including modules, handlers, the HTTP stack, etc.</li></ul>\n\n\n\n<p>By the time ASP.NET MVC was announced in 2007, the MVC pattern was becoming one of the most popular ways of building web frameworks.</p>\n\n\n\n<p>In April 2009, the ASP.NET MVC source code was released under the Microsoft Public License (MS-PL). &#8220;ASP.NET MVC framework is a lightweight, highly testable presentation framework that is integrated with the existing ASP.NET features.</p>\n\n\n\n<p>Some of these integrated features are master pages and membership-based authentication. The MVC framework is defined in the System.Web.Mvc assembly.</p>\n\n\n\n<p>In March 2012, Microsoft had released part of its web stack (including ASP.NET MVC, Razor and Web API) under an open source license (Apache License 2.0). ASP.NET Web Forms was not included in this initiative.</p>\n\n\n\n<h2>Why ASP.NET MVC?</h2>\n\n\n\n<p>Microsoft decided to create their own MVC framework for building web applications. The MVC framework simply builds on top of ASP.NET. When you are building a web application with ASP.NET MVC, there will be no illusions of state, there will not be such a thing as a page load and no page life cycle at all, etc.</p>\n\n\n\n<p>Another design goal for ASP.NET MVC was to be extensible throughout all aspects of the framework. So when we talk about views, views have to be rendered by a particular type of view engine. The default view engine is still something that can take an ASPX file. But if you don&#8217;t like using ASPX files, you can use something else and plug in your own view engine.</p>\n\n\n\n<p>There is a component inside the MVC framework that will instantiate your controllers. You might not like the way that the MVC framework instantiates your controller, you might want to handle that job yourself. So, there are lots of places in MVC where you can inject your own custom logic to handle tasks.</p>\n\n\n\n<p>The whole idea behind using the Model View Controller design pattern is that you maintain a separation of concerns. Your controller is no longer encumbered with a lot of ties to the ASP.NET runtime or ties to the ASPX page, which is very hard to test. You now just have a class with regular methods on it that you can invoke in unit tests to find out if that controller is going to behave correctly.</p>\n\n\n\n<h2>Benefits of ASP.NET MVC</h2>\n\n\n\n<p>Following are the benefits of using ASP.NET MVC −</p>\n\n\n\n<ul><li>Makes it easier to manage complexity by dividing an application into the model, the view, and the controller.</li><li>Enables full control over the rendered HTML and provides a clean separation of concerns.</li><li>Direct control over HTML also means better accessibility for implementing compliance with evolving Web standards.</li><li>Facilitates adding more interactivity and responsiveness to existing apps.</li><li>Provides better support for test-driven development (TDD).</li><li>Works well for Web applications that are supported by large teams of developers and for Web designers who need a high degree of control over the application behavior.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>ASP.NET MVC is basically a web development framework from Microsoft, which combines the features of MVC (Model-View-Controller) architecture, the most up-to-date ideas and techniques from Agile development, and the best parts of the existing ASP.NET platform. ASP.NET MVC is not something, which is built from ground zero. It is a complete alternative to traditional ASP.NET [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3713"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3713"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3713/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3713"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3713"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3713"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3716,"date":"2020-09-18T12:22:21","date_gmt":"2020-09-18T12:22:21","guid":{"rendered":"http://backend.foobrdigital.com/?p=3716"},"modified":"2020-09-18T12:22:21","modified_gmt":"2020-09-18T12:22:21","slug":"asp-net-mvc-pattern","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-pattern/","title":{"rendered":"Pattern"},"content":{"rendered":"\n<p>The MVC (Model-View-Controller) design pattern has actually been around for a few decades, and it&#8217;s been used across many different technologies. Everything from Smalltalk to C++ to Java, and now C Sharp and .NET use this design pattern to build a user interface.</p>\n\n\n\n<p>Following are some salient features of the MVC pattern −</p>\n\n\n\n<ul><li>Originally it was named Thing-Model-View-Editor in 1979, and then it was later simplified to Model- View-Controller.</li><li>It is a powerful and elegant means of separating concerns within an application (for example, separating data access logic from display logic) and applies itself extremely well to web applications.</li><li>Its explicit separation of concerns does add a small amount of extra complexity to an application’s design, but the extraordinary benefits outweigh the extra effort.</li></ul>\n\n\n\n<p>The MVC architectural pattern separates the user interface (UI) of an application into three main parts.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvc_architectural_pattern.jpg\" alt=\"MVC Architectural Pattern\"/></figure>\n\n\n\n<ul><li><strong>The Model</strong>&nbsp;− A set of classes that describes the data you are working with as well as the business logic.</li><li><strong>The View</strong>&nbsp;− Defines how the application’s UI will be displayed. It is a pure HTML, which decides how the UI is going to look like.</li><li><strong>The Controller</strong>&nbsp;− A set of classes that handles communication from the user, overall application flow, and application-specific logic.</li></ul>\n\n\n\n<h2>Idea Behind MVC</h2>\n\n\n\n<p>The idea is that you&#8217;ll have a component called the view, which is solely responsible for rendering this user interface whether that be HTML or whether it actually be UI widgets on a desktop application.</p>\n\n\n\n<p>The view talks to a model, and that model contains all of the data that the view needs to display. Views generally don&#8217;t have much logic inside of them at all.</p>\n\n\n\n<p>In a web application, the view might not have any code associated with it at all. It might just have HTML and then some expressions of where to take pieces of data from the model and plug them into the correct places inside the HTML template that you&#8217;ve built in the view.</p>\n\n\n\n<p>The controller that organizes is everything. When an HTTP request arrives for an MVC application, that request gets routed to a controller, and then it&#8217;s up to the controller to talk to either the database, the file system, or the model.</p>\n","protected":false},"excerpt":{"rendered":"<p>The MVC (Model-View-Controller) design pattern has actually been around for a few decades, and it&#8217;s been used across many different technologies. Everything from Smalltalk to C++ to Java, and now C Sharp and .NET use this design pattern to build a user interface. Following are some salient features of the MVC pattern − Originally it [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3716"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3716"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3716/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3716"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3716"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3716"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3718,"date":"2020-09-18T12:22:46","date_gmt":"2020-09-18T12:22:46","guid":{"rendered":"http://backend.foobrdigital.com/?p=3718"},"modified":"2020-09-18T12:22:46","modified_gmt":"2020-09-18T12:22:46","slug":"asp-net-mvc-environment-setup","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-environment-setup/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>MVC development tool is included with Visual Studio 2012 and onwards. It can also be installed on Visual Studio 2010 SP1/Visual Web Developer 2010 Express SP1. If you are using Visual Studio 2010, you can install MVC 4 using the Web Platform Installer&nbsp;<a href=\"http://www.microsoft.com/web/gallery/install.aspx?appid=MVC4VS2010\">http://www.microsoft.com</a></p>\n\n\n\n<p>Microsoft provides a free version of Visual Studio, which also contains SQL Server and it can be downloaded from&nbsp;<a href=\"https://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx\">https://www.visualstudio.com</a></p>\n\n\n\n<h2>Installation</h2>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Once downloading is complete, run the installer. The following dialog will be displayed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/run_the_installer.jpg\" alt=\"Run the Installer\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Click the ‘Install’ button and it will start the installation process.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/installation_process.jpg\" alt=\"Installation Process\"/></figure>\n\n\n\n<p>Once the installation process is completed successfully, you will see the following dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/installation_process_completed.jpg\" alt=\"Installation Process Completed\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Close this dialog and restart your computer if required.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Open Visual Studio from the Start Menu, which will open the following dialog. It will take a while for the first time only for preparation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/open_visual_studio.jpg\" alt=\"Open Visual Studio\"/></figure>\n\n\n\n<p>Once all is done, you will see the main window of Visual Studio as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/visual_studio_main_window.jpg\" alt=\"Visual Studio Main Window\"/></figure>\n\n\n\n<p>You are now ready to start your application.</p>\n","protected":false},"excerpt":{"rendered":"<p>MVC development tool is included with Visual Studio 2012 and onwards. It can also be installed on Visual Studio 2010 SP1/Visual Web Developer 2010 Express SP1. If you are using Visual Studio 2010, you can install MVC 4 using the Web Platform Installer&nbsp;http://www.microsoft.com Microsoft provides a free version of Visual Studio, which also contains SQL [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3718"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3718"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3718/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3718"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3718"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3718"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3720,"date":"2020-09-18T12:23:17","date_gmt":"2020-09-18T12:23:17","guid":{"rendered":"http://backend.foobrdigital.com/?p=3720"},"modified":"2020-09-18T12:23:17","modified_gmt":"2020-09-18T12:23:17","slug":"asp-net-mvc-getting-started","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-getting-started/","title":{"rendered":"Getting Started"},"content":{"rendered":"\n<p>In this chapter, we will look at a simple working example of ASP.NET MVC. We will be building a simple web app here. To create an ASP.NET MVC application, we will use Visual Studio 2015, which contains all of the features you need to create, test, and deploy an MVC Framework application.</p>\n\n\n\n<h2>Create ASP.Net MVC Application</h2>\n\n\n\n<p>Following are the steps to create a project using project templates available in Visual Studio.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open the Visual Studio. Click File → New → Project menu option.</p>\n\n\n\n<p>A new Project dialog opens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/project_menu_option.jpg\" alt=\"Project Menu Option\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− From the left pane, select Templates → Visual C# → Web.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− In the middle pane, select ASP.NET Web Application.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Enter the project name, MVCFirstApp, in the Name field and click ok to continue. You will see the following dialog which asks you to set the initial content for the ASP.NET project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/enter_project_name.jpg\" alt=\"Enter Project Name\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− To keep things simple, select the ‘Empty’ option and check the MVC checkbox in the Add folders and core references section. Click Ok.</p>\n\n\n\n<p>It will create a basic MVC project with minimal predefined content.</p>\n\n\n\n<p>Once the project is created by Visual Studio, you will see a number of files and folders displayed in the Solution Explorer window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/created_asp.net_mvc_project.jpg\" alt=\"Created ASP.Net MVC Project\"/></figure>\n\n\n\n<p>As you know that we have created ASP.Net MVC project from an empty project template, so for the moment the application does not contain anything to run.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Run this application from Debug → Start Debugging menu option and you will see a&nbsp;<strong>404 Not Found</strong>&nbsp;Error.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/404_not_found_error.jpg\" alt=\"404 Not Found Error\"/></figure>\n\n\n\n<p>The default browser is, Internet Explorer, but you can select any browser that you have installed from the toolbar.</p>\n\n\n\n<h2>Add Controller</h2>\n\n\n\n<p>To remove the 404 Not Found error, we need to add a controller, which handles all the incoming requests.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− To add a controller, right-click on the controller folder in the solution explorer and select Add → Controller.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_controller.jpg\" alt=\"Add Controller\"/></figure>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/controller_scaffold_dialog.jpg\" alt=\"Controller Scaffold Dialog\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Select the MVC 5 Controller – Empty option and click ‘Add’ button.</p>\n\n\n\n<p>The Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_controller_dialog.jpg\" alt=\"Add Controller Dialog\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Set the name to HomeController and click the Add button.</p>\n\n\n\n<p>You will see a new C# file HomeController.cs in the Controllers folder, which is open for editing in Visual Studio as well.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/csharp_homecontroller.jpg\" alt=\"C# HomeController\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− To make this a working example, let’s modify the controller class by changing the action method called&nbsp;<strong>Index</strong>&nbsp;using the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCFirstApp.Controllers {\n   public class HomeController : Controller {\n      // GET: Home\n      public string Index(){\n         return \"Hello World, this is ASP.Net MVC Tutorials\";\n      }\n   }\n}</pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Run this application and you will see that the browser is displaying the result of the Index action method.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/index_action_method.jpg\" alt=\"Index Action Method\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will look at a simple working example of ASP.NET MVC. We will be building a simple web app here. To create an ASP.NET MVC application, we will use Visual Studio 2015, which contains all of the features you need to create, test, and deploy an MVC Framework application. Create ASP.Net MVC [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3720"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3720"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3720/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3720"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3720"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3720"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3722,"date":"2020-09-18T12:23:46","date_gmt":"2020-09-18T12:23:46","guid":{"rendered":"http://backend.foobrdigital.com/?p=3722"},"modified":"2020-09-18T12:23:46","modified_gmt":"2020-09-18T12:23:46","slug":"asp-net-mvc-life-cycle","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-life-cycle/","title":{"rendered":"Life Cycle"},"content":{"rendered":"\n<p>In this chapter, we will discuss the overall MVC pipeline and the life of an HTTP request as it travels through the MVC framework in ASP.NET. At a high level, a life cycle is simply a series of steps or events used to handle some type of request or to change an application state. You may already be familiar with various framework life cycles, the concept is not unique to MVC.</p>\n\n\n\n<p>For example, the ASP.NET webforms platform features a complex page life cycle. Other .NET platforms, like Windows phone apps, have their own application life cycles. One thing that is true for all these platforms regardless of the technology is that understanding the processing pipeline can help you better leverage the features available and MVC is no different.</p>\n\n\n\n<p>MVC has two life cycles −</p>\n\n\n\n<ul><li>The application life cycle</li><li>The request life cycle</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvc_life_cycles.jpg\" alt=\"MVC Life Cycles\"/></figure>\n\n\n\n<h2>The Application Life Cycle</h2>\n\n\n\n<p>The application life cycle refers to the time at which the application process actually begins running IIS until the time it stops. This is marked by the application start and end events in the startup file of your application.</p>\n\n\n\n<h2>The Request Life Cycle</h2>\n\n\n\n<p>It is the sequence of events that happen every time an HTTP request is handled by our application.</p>\n\n\n\n<p>The entry point for every MVC application begins with routing. After the ASP.NET platform has received a request, it figures out how it should be handled through the URL Routing Module.</p>\n\n\n\n<p>Modules are .NET components that can hook into the application life cycle and add functionality. The routing module is responsible for matching the incoming URL to routes that we define in our application.</p>\n\n\n\n<p>All routes have an associated route handler with them and this is the entry point to the MVC framework.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/route_handler.jpg\" alt=\"Route Handler\"/></figure>\n\n\n\n<p>The MVC framework handles converting the route data into a concrete controller that can handle requests. After the controller has been created, the next major step is&nbsp;<strong>Action Execution</strong>. A component called the&nbsp;<strong>action invoker</strong>&nbsp;finds and selects an appropriate Action method to invoke the controller.</p>\n\n\n\n<p>After our action result has been prepared, the next stage triggers, which is&nbsp;<strong>Result Execution</strong>. MVC separates declaring the result from executing the result. If the result is a view type, the View Engine will be called and it&#8217;s responsible for finding and rending our view.</p>\n\n\n\n<p>If the result is not a view, the action result will execute on its own. This Result Execution is what generates an actual response to the original HTTP request</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss the overall MVC pipeline and the life of an HTTP request as it travels through the MVC framework in ASP.NET. At a high level, a life cycle is simply a series of steps or events used to handle some type of request or to change an application state. You [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3722"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3722"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3722/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3722"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3722"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3722"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3724,"date":"2020-09-18T12:25:36","date_gmt":"2020-09-18T12:25:36","guid":{"rendered":"http://backend.foobrdigital.com/?p=3724"},"modified":"2020-09-18T12:25:36","modified_gmt":"2020-09-18T12:25:36","slug":"asp-net-mvc-routing","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-routing/","title":{"rendered":"Routing"},"content":{"rendered":"\n<p>Routing is the process of directing an HTTP request to a controller and the functionality of this processing is implemented in System.Web.Routing. This assembly is not part of ASP.NET MVC. It is actually part of the ASP.NET runtime, and it was officially released with the ASP.NET as a .NET 3.5 SP1.</p>\n\n\n\n<p><strong>System.Web.Routing</strong>&nbsp;is used by the MVC framework, but it&#8217;s also used by ASP.NET Dynamic Data. The MVC framework leverages routing to direct a request to a controller. The Global.asax file is that part of your application, where you will define the route for your application.</p>\n\n\n\n<p>This is the code from the application start event in Global.asax from the MVC App which we created in the previous chapter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\nnamespace MVCFirstApp {\n   public class MvcApplication : System.Web.HttpApplication {\n      protected void Application_Start(){\n         AreaRegistration.RegisterAllAreas();\n         RouteConfig.RegisterRoutes(RouteTable.Routes);\n      }\n   }\n}</code></pre>\n\n\n\n<p>Following is the implementation of RouteConfig class, which contains one method RegisterRoutes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\nnamespace MVCFirstApp {\n   public class RouteConfig {\n      public static void RegisterRoutes(RouteCollection routes){\n         routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n         routes.MapRoute(\n            name: \"Default\",\n            url: \"{controller}/{action}/{id}\",\n            defaults: new{ controller = \"Home\", action = \"Index\", id = UrlParameter.Optional});\n      }\n   }\n}</code></pre>\n\n\n\n<p>You will define the routes and those routes will map URLs to a specific controller action. An action is just a method on the controller. It can also pick parameters out of that URL and pass them as parameters into the method.</p>\n\n\n\n<p>So this route that is defined in the application is the default route. As seen in the above code, when you see a URL arrive in the form of (something)/(something)/(something), then the first piece is the controller name, second piece is the action name, and the third piece is an ID parameter.</p>\n\n\n\n<h2>Understanding Routes</h2>\n\n\n\n<p>MVC applications use the ASP.NET routing system, which decides how URLs map to controllers and actions.</p>\n\n\n\n<p>When Visual Studio creates the MVC project, it adds some default routes to get us started. When you run your application, you will see that Visual Studio has directed the browser to port 63664. You will almost certainly see a different port number in the URL that your browser requests because Visual Studio allocates a random port when the project is created.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_home.jpg\" alt=\"Localhost Home\"/></figure>\n\n\n\n<p>In the last example, we have added a HomeController, so you can also request any of the following URLs, and they will be directed to the Index action on the HomeController.</p>\n\n\n\n<p>When a browser requests http://mysite/ or http://mysite/Home, it gets back the output from HomeController’s Index method.</p>\n\n\n\n<p>You can try this as well by changing the URL in the browser. In this example, it is http://localhost:63664/, except that the port might be different.</p>\n\n\n\n<p>If you append /Home or /Home/Index to the URL and press ‘Enter’ button, you will see the same result from the MVC application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_home_index.jpg\" alt=\"Localhost Home Index\"/></figure>\n\n\n\n<p>As you can see in this case, the convention is that we have a controller called HomeController and this HomeController will be the starting point for our MVC application.</p>\n\n\n\n<p>The default routes that Visual Studio creates for a new project assumes that you will follow this convention. But if you want to follow your own convention then you would need to modify the routes.</p>\n\n\n\n<h2>Custom Convention</h2>\n\n\n\n<p>You can certainly add your own routes. If you don&#8217;t like these action names, if you have different ID parameters or if you just in general have a different URL structure for your site, then you can add your own route entries.</p>\n\n\n\n<p>Let’s take a look at a simple example. Consider we have a page that contains the list of processes. Following is the code, which will route to the process page.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>routes.MapRoute(\n   \"Process\",\n   \"Process/{action}/{id}\",\n   defaults: new{\n      controller = \"Process\", action = \"List \", id = UrlParameter.Optional}\n);</code></pre>\n\n\n\n<p>When someone comes in and looks for a URL with Process/Action/Id, they will go to the Process Controller. We can make the action a little bit different, the default action, we can make that a List instead of Index.</p>\n\n\n\n<p>Now a request that arrives looks like localhosts/process. The routing engine will use this routing configuration to pass that along, so it&#8217;s going to use a default action of List.</p>\n\n\n\n<p>Following is the complete class implementation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\nnamespace MVCFirstApp{\n   public class RouteConfig{\n      public static void RegisterRoutes(RouteCollection routes){\n         routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n\t\t\t\n         routes.MapRoute(\n            \"Process\", \"Process/{action}/{id}\",\n            defaults: new{\n               controller = \" Process\", action = \"List \", id =\n               UrlParameter.Optional});\n\t\t\t\t\t\n         routes.MapRoute(\n            name: \"Default\", url: \"{controller}/{action}/{id}\",\n            defaults: new{\n               controller = \"Home\", action = \"Index\", id =\n               UrlParameter.Optional});\n      }\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Run this and request for a process page with the following URL&nbsp;<strong>http://localhost:63664/Process</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_process.jpg\" alt=\"Localhost Process\"/></figure>\n\n\n\n<p>You will see an HTTP 404, because the routing engine is looking for ProcessController, which is not available.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create ProcessController by right-clicking on Controllers folder in the solution explorer and select Add → Controller.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/create_processcontroller.jpg\" alt=\"Create ProcessController\"/></figure>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/processcontroller_scaffolding_dialog.jpg\" alt=\"ProcessController Scaffolding Dialog\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Select the MVC 5 Controller – Empty option and click ‘Add’ button.</p>\n\n\n\n<p>The Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/empty_option_add_button.jpg\" alt=\"Empty Option Add Button\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Set the name to ProcessController and click ‘Add’ button.</p>\n\n\n\n<p>Now you will see a new C# file ProcessController.cs in the Controllers folder, which is open for editing in Visual Studio as well.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/set_processcontroller.jpg\" alt=\"Set ProcessController\"/></figure>\n\n\n\n<p>Now our default action is going to be List, so we want to have a List action here instead of Index.</p>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Change the return type from ActionResult to string and also return some string from this action method using the following code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCFirstApp.Controllers{\n   public class ProcessController : Controller{\n      // GET: Process\n      public string List(){\n         return \"This is Process page\";\n      }\n   }\n}</pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− When you run this application, again you will see the result from the default route. When you specify the following URL, http://localhost:63664/Process/List, then you will see the result from the ProcessController.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_process_list.jpg\" alt=\"Localhost Process List\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Routing is the process of directing an HTTP request to a controller and the functionality of this processing is implemented in System.Web.Routing. This assembly is not part of ASP.NET MVC. It is actually part of the ASP.NET runtime, and it was officially released with the ASP.NET as a .NET 3.5 SP1. System.Web.Routing&nbsp;is used by the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3724"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3724"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3724/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3724"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3724"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3724"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3726,"date":"2020-09-18T12:26:33","date_gmt":"2020-09-18T12:26:33","guid":{"rendered":"http://backend.foobrdigital.com/?p=3726"},"modified":"2020-09-18T12:26:33","modified_gmt":"2020-09-18T12:26:33","slug":"asp-net-mvc-controllers","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-controllers/","title":{"rendered":"Controllers"},"content":{"rendered":"\n<p>Controllers are essentially the central unit of your ASP.NET MVC application. It is the 1st recipient, which interacts with incoming HTTP Request. So, the controller decides which model will be selected, and then it takes the data from the model and passes the same to the respective view, after that view is rendered. Actually, controllers are controlling the overall flow of the application taking the input and rendering the proper output.</p>\n\n\n\n<p>Controllers are C# classes inheriting from System.Web.Mvc.Controller, which is the builtin controller base class. Each public method in a controller is known as an action method, meaning you can invoke it from the Web via some URL to perform an action.</p>\n\n\n\n<p>The MVC convention is to put controllers in the Controllers folder that Visual Studio created when the project was set up.</p>\n\n\n\n<p>Let’s take a look at a simple example of Controller by creating a new ASP.Net MVC project.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open the Visual Studio and click on File → New → Project menu option.</p>\n\n\n\n<p>A new Project dialog opens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/visual_studio_project_menu.jpg\" alt=\"Visual Studio Project Menu\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− From the left pane, select Templates → Visual C# → Web.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− In the middle pane, select ASP.NET Web Application.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Enter the project name ‘MVCControllerDemo’ in the Name field and click ok to continue. You will see the following dialog, which asks you to set the initial content for the ASP.NET project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvccontrollerdemo.jpg\" alt=\"MVCControllerDemo\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− To keep things simple, select the Empty option and check the MVC checkbox in the ‘Add folders and core references for’ section and click Ok.</p>\n\n\n\n<p>It will create a basic MVC project with minimal predefined content.</p>\n\n\n\n<p>Once the project is created by Visual Studio you will see a number of files and folders displayed in the Solution Explorer window.</p>\n\n\n\n<p>Since we have created ASP.Net MVC project from an empty project template, so at the moment, the application does not contain anything to run.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Add EmployeeController by right-clicking on Controllers folder in the solution explorer. Select Add → Controller.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/employeecontroller.jpg\" alt=\"EmployeeController\"/></figure>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/employeecontroller_scaffolding_dialog.jpg\" alt=\"EmployeeController Scaffolding Dialog\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Select the MVC 5 Controller – Empty option and click ‘Add’ button.</p>\n\n\n\n<p>The Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvc_5_controller.jpg\" alt=\"MVC 5 Controller\"/></figure>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Set the name to EmployeeController and click ‘Add’ button.</p>\n\n\n\n<p>You will see a new C# file EmployeeController.cs in the Controllers folder, which is open for editing in Visual Studio as well.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/custom_route_employee_controller.jpg\" alt=\"Custom Route Employee Controller\"/></figure>\n\n\n\n<p>Now, in this application we will add a custom route for Employee controller with the default Route.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Go to “RouteConfig.cs” file under “App_Start” folder and add the following route.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>routes.MapRoute(\n   \"Employee\", \"Employee/{name}\", new{\n      controller = \"Employee\", action = \"Search\", name =\n      UrlParameter.Optional });</code></pre>\n\n\n\n<p>Following is the complete implementation of RouteConfig.cs file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\nnamespace MVCControllerDemo {\n   public class RouteConfig {\n      public static void RegisterRoutes(RouteCollection routes){\n         routes.IgnoreRoute(\"{resource}.axd/{*pathInfo}\");\n\t\t\t\n         routes.MapRoute(\n            \"Employee\", \"Employee/{name}\", new{\n               controller = \"Employee\", action = \"Search\", name = UrlParameter.Optional });\n\t\t\t\t\t\n         routes.MapRoute(\n            name: \"Default\", url: \"{controller}/{action}/{id}\", defaults: new{\n               controller = \"Home\", action = \"Index\", id = UrlParameter.Optional });\n      }\n   }\n}</code></pre>\n\n\n\n<p>Consider a scenario wherein any user comes and searches for an employee, specifying the URL “Employee/Mark”. In this case, Mark will be treated as a parameter name not like Action method. So in this kind of scenario our default route won’t work significantly.</p>\n\n\n\n<p>To fetch the incoming value from the browser when the parameter is getting passed, MVC framework provides a simple way to address this problem. It is by using the parameter inside the Action method.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Change the EmployeeController class using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCControllerDemo.Controllers  {\n   public class EmployeeController : Controller {\n      // GET: Employee\n      public ActionResult Search(string name){\n         var input = Server.HtmlEncode(name);\n         return Content(input);\n      }\n   }\n}</code></pre>\n\n\n\n<p>If you add a parameter to an action method, then the MVC framework will look for the value that matches the parameter name. It will apply all the possible combination to find out the parameter value. It will search in the Route data, query string, etc.</p>\n\n\n\n<p>Hence, if you request for /Employee/Mark”, then the MVC framework will decide that I need a parameter with “UserInput”, and then Mark will get picked from the URL and that will get automatically passed.</p>\n\n\n\n<p>Server.HtmlEncode will simply convert any kind of malicious script in plain text. When the above code is compiled and executed and requests the following URL&nbsp;<strong>http://localhost:61465/Employee/Mark</strong>, you will get the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_employee_mark.jpg\" alt=\"Localhost Employee Mark\"/></figure>\n\n\n\n<p>As you can see in the above screenshot, Mark is picked from the URL.</p>\n","protected":false},"excerpt":{"rendered":"<p>Controllers are essentially the central unit of your ASP.NET MVC application. It is the 1st recipient, which interacts with incoming HTTP Request. So, the controller decides which model will be selected, and then it takes the data from the model and passes the same to the respective view, after that view is rendered. Actually, controllers [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3726"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3726"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3726/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3726"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3726"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3726"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3728,"date":"2020-09-18T12:28:02","date_gmt":"2020-09-18T12:28:02","guid":{"rendered":"http://backend.foobrdigital.com/?p=3728"},"modified":"2020-09-18T12:28:02","modified_gmt":"2020-09-18T12:28:02","slug":"asp-net-mvc-actions","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-actions/","title":{"rendered":"Actions"},"content":{"rendered":"\n<p>ASP.NET MVC Action Methods are responsible to execute requests and generate responses to it. By default, it generates a response in the form of ActionResult. Actions typically have a one-to-one mapping with user interactions.</p>\n\n\n\n<p>For example, enter a URL into the browser, click on any particular link, and submit a form, etc. Each of these user interactions causes a request to be sent to the server. In each case, the URL of the request includes information that the MVC framework uses to invoke an action method. The one restriction on action method is that they have to be instance method, so they cannot be static methods. Also there is no return value restrictions. So you can return the string, integer, etc.</p>\n\n\n\n<h2>Request Processing</h2>\n\n\n\n<p>Actions are the ultimate request destination in an MVC application and it uses the controller base class. Let&#8217;s take a look at the request processing.</p>\n\n\n\n<ul><li>When a URL arrives, like /Home/index, it is the UrlRoutingModule that inspects and understands that something configured within the routing table knows how to handle that URL.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/request_processing.jpg\" alt=\"Request Processing\"/></figure>\n\n\n\n<ul><li>The UrlRoutingModule puts together the information we&#8217;ve configured in the routing table and hands over control to the MVC route handler.</li><li>The MVC route handler passes the controller over to the MvcHandler which is an HTTP handler.</li><li>MvcHandler uses a controller factory to instantiate the controller and it knows what controller to instantiate because it looks in the RouteData for that controller value.</li><li>Once the MvcHandler has a controller, the only thing that MvcHandler knows about is IController Interface, so it simply tells the controller to execute.</li><li>When it tells the controller to execute, that&#8217;s been derived from the MVC&#8217;s controller base class. The Execute method creates an action invoker and tells that action invoker to go and find a method to invoke, find an action to invoke.</li><li>The action invoker, again, looks in the RouteData and finds that action parameter that&#8217;s been passed along from the routing engine.</li></ul>\n\n\n\n<h2>Types of Action</h2>\n\n\n\n<p>Actions basically return different types of action results. The ActionResult class is the base for all action results. Following is the list of different kind of action results and its behavior.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Name and Behavior</th></tr><tr><td>1</td><td><strong>ContentResult</strong>Returns a string</td></tr><tr><td>2</td><td><strong>FileContentResult</strong>Returns file content</td></tr><tr><td>3</td><td><strong>FilePathResult</strong>Returns file content</td></tr><tr><td>4</td><td><strong>FileStreamResult</strong>Returns file content</td></tr><tr><td>5</td><td><strong>EmptyResult</strong>Returns nothing</td></tr><tr><td>6</td><td><strong>JavaScriptResult</strong>Returns script for execution</td></tr><tr><td>7</td><td><strong>JsonResult</strong>Returns JSON formatted data</td></tr><tr><td>8</td><td><strong>RedirectToResult</strong>Redirects to the specified URL</td></tr><tr><td>9</td><td><strong>HttpUnauthorizedResult</strong>Returns 403 HTTP Status code</td></tr><tr><td>10</td><td><strong>RedirectToRouteResult</strong>Redirects to different action/different controller action</td></tr><tr><td>11</td><td><strong>ViewResult</strong>Received as a response for view engine</td></tr><tr><td>12</td><td><strong>PartialViewResult</strong>Received as a response for view engine</td></tr></tbody></table></figure>\n\n\n\n<p>Let’s have a look at a simple example from the previous chapter in which we have created an EmployeeController.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCControllerDemo.Controllers {\n   public class EmployeeController : Controller{\n      // GET: Employee\n      public ActionResult Search(string name){\n         var input = Server.HtmlEncode(name);\n         return Content(input);\n      }\n   }\n}</code></pre>\n\n\n\n<p>When you request the following URL&nbsp;<strong>http://localhost:61465/Employee/Mark</strong>, then you will receive the following output as an action.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_employee_mark_output.jpg\" alt=\"Localhost Employee Mark Output\"/></figure>\n\n\n\n<h2>Add Controller</h2>\n\n\n\n<p>Let us add one another controller.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Right-click on Controllers folder and select Add → Controller.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_another_controller.jpg\" alt=\"Add Another Controller\"/></figure>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_scaffolding_dialog.jpg\" alt=\"Add Scaffolding Dialog\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Select the MVC 5 Controller – Empty option and click ‘Add’ button.</p>\n\n\n\n<p>The Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/customercontroller.jpg\" alt=\"CustomerController\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Set the name to CustomerController and click ‘Add’ button.</p>\n\n\n\n<p>Now you will see a new C# file ‘CustomerController.cs’ in the Controllers folder, which is open for editing in Visual Studio as well.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/set_name_customercontroller.jpg\" alt=\"set_name CustomerController\"/></figure>\n\n\n\n<p>Similarly, add one more controller with name HomeController. Following is the HomeController.cs class implementation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCControllerDemo.Controllers {\n   public class HomeController : Controller{\n      // GET: Home\n      public string Index(){\n         return \"This is Home Controller\";\n      }\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Run this application and you will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/home_controller_output.jpg\" alt=\"Home Controller Output\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the following code in Customer controller, which we have created above.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Run this application and request for&nbsp;<strong>http://localhost:61465/Customer/GetAllCustomers</strong>. You will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_getallcustomers.jpg\" alt=\"Localhost GetAllCustomers\"/></figure>\n\n\n\n<p>You can also redirect to actions for the same controller or even for a different controller.</p>\n\n\n\n<p>Following is a simple example in which we will redirect from HomeController to Customer Controller by changing the code in HomeController using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCControllerDemo.Controllers{\n   public class HomeController : Controller{\n      // GET: Home\n      public ActionResult Index(){\n         return RedirectToAction(\"GetAllCustomers\",\"Customer\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>As you can see, we have used the RedirectToAction() method ActionResult, which takes two parameters, action name and controller name.</p>\n\n\n\n<p>When you run this application, you will see the default route will redirect it to /Customer/GetAllCustomers</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_customers_getallcustomers.jpg\" alt=\"Localhost Customers GetAllCustomers\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>ASP.NET MVC Action Methods are responsible to execute requests and generate responses to it. By default, it generates a response in the form of ActionResult. Actions typically have a one-to-one mapping with user interactions. For example, enter a URL into the browser, click on any particular link, and submit a form, etc. Each of these [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3728"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3728"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3728/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3728"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3728"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3728"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3730,"date":"2020-09-18T12:29:04","date_gmt":"2020-09-18T12:29:04","guid":{"rendered":"http://backend.foobrdigital.com/?p=3730"},"modified":"2020-09-18T12:29:04","modified_gmt":"2020-09-18T12:29:04","slug":"asp-net-mvc-filters","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-filters/","title":{"rendered":"Filters"},"content":{"rendered":"\n<p>In ASP.NET MVC, controllers define action methods that usually have a one-to-one relationship with possible user interactions, but sometimes you want to perform logic either before an action method is called or after an action method runs.</p>\n\n\n\n<p>To support this, ASP.NET MVC provides filters.&nbsp;<strong>Filters</strong>&nbsp;are custom classes that provide both a declarative and programmatic means to add pre-action and post-action behavior to controller action methods.</p>\n\n\n\n<h2>Action Filters</h2>\n\n\n\n<p>An action filter is an attribute that you can apply to a controller action or an entire controller that modifies the way in which the action is executed. The ASP.NET MVC framework includes several action filters −</p>\n\n\n\n<ul><li><strong>OutputCache</strong>&nbsp;− Caches the output of a controller action for a specified amount of time.</li><li><strong>HandleError</strong>&nbsp;− Handles errors raised when a controller action is executed.</li><li><strong>Authorize</strong>&nbsp;− Enables you to restrict access to a particular user or role.</li></ul>\n\n\n\n<h2>Types of Filters</h2>\n\n\n\n<p>The ASP.NET MVC framework supports four different types of filters −</p>\n\n\n\n<ul><li><strong>Authorization Filters</strong>&nbsp;− Implements the IAuthorizationFilter attribute.</li><li><strong>Action Filters</strong>&nbsp;− Implements the IActionFilter attribute.</li><li><strong>Result Filters</strong>&nbsp;− Implements the IResultFilter attribute.</li><li><strong>Exception Filters</strong>&nbsp;− Implements the IExceptionFilter attribute.</li></ul>\n\n\n\n<p>Filters are executed in the order listed above. For example, authorization filters are always executed before action filters and exception filters are always executed after every other type of filter.</p>\n\n\n\n<p>Authorization filters are used to implement authentication and authorization for controller actions. For example, the Authorize filter is an example of an Authorization filter.</p>\n\n\n\n<p>Let’s take a look at a simple example by creating a new ASP.Net MVC project.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open the Visual Studio and click File → New → Project menu option.</p>\n\n\n\n<p>A new Project dialog opens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_project_menu_option.jpg\" alt=\"New Project Menu Option\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− From the left pane, select Templates → Visual C# → Web.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− In the middle pane, select ASP.NET Web Application.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Enter project name MVCFiltersDemo in the Name field and click ok to continue and you will see the following dialog which asks you to set the initial content for the ASP.NET project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvcfiltersdemo.jpg\" alt=\"MVCFiltersDemo\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− To keep things simple, select the Empty option and check the MVC checkbox in the ‘Add folders and core references for’ section and click Ok.</p>\n\n\n\n<p>It will create a basic MVC project with minimal predefined content.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− To add a controller, right-click on the controller folder in the solution explorer and select Add → Controller.</p>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/controller_add_scaffold_dialog.jpg\" alt=\"Controller Add Scaffold Dialog\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Select the MVC 5 Controller – Empty option and click ‘Add’ button.</p>\n\n\n\n<p>The Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_controller_dialog.jpg\" alt=\"Add Controller Dialog\"/></figure>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Set the name to HomeController and click ‘Add’ button.</p>\n\n\n\n<p>You will see a new C# file ‘HomeController.cs’ in the Controllers folder, which is open for editing in Visual Studio as well.</p>\n\n\n\n<h2>Apply Action Filter</h2>\n\n\n\n<p>An action filter can be applied to either an individual controller action or an entire controller. For example, an action filter&nbsp;<strong>OutputCache</strong>&nbsp;is applied to an action named Index() that returns the string. This filter causes the value returned by the action to be cached for 15 seconds.</p>\n\n\n\n<p>To make this a working example, let’s modify the controller class by changing the action method called&nbsp;<strong>Index</strong>&nbsp;using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCFiltersDemo.Controllers {\n   public class HomeController : Controller{\n      // GET: Home\n      &#91;OutputCache(Duration = 15)]\n\t\t\n      public string Index(){\n         return \"This is ASP.Net MVC Filters Tutorial\";\n      }\n   }\n}</code></pre>\n\n\n\n<p>When you run this application, you will see that the browser is displaying the result of the Index action method.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvc_filters_tutorial.jpg\" alt=\"MVC Filters Tutorial\"/></figure>\n\n\n\n<p>Let’s add another action method, which will display the current time.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>namespace MVCFiltersDemo.Controllers{\n   public class HomeController : Controller{\n      // GET: Home\n\t\t\n      &#91;OutputCache(Duration = 15)]\n      public string Index(){\n         return \"This is ASP.Net MVC Filters Tutorial\";\n      }\n\t\t\n      &#91;OutputCache(Duration = 20)]\n      public string GetCurrentTime(){\n         return DateTime.Now.ToString(\"T\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>Request for the following URL,&nbsp;<strong>http://localhost:62833/Home/GetCurrentTime</strong>, and you will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_getcurrenttime.jpg\" alt=\"Localhost GetCurrentTime\"/></figure>\n\n\n\n<p>If you refresh the browser, you will see the same time because the action is cached for 20 seconds. It will be updated when you refresh it after 20 seconds.</p>\n\n\n\n<h2>Custom Filters</h2>\n\n\n\n<p>To create your own custom filter, ASP.NET MVC framework provides a base class which is known as ActionFilterAttribute. This class implements both IActionFilter and IResultFilter interfaces and both are derived from the Filter class.</p>\n\n\n\n<p>Let’s take a look at a simple example of custom filter by creating a new folder in your project with ActionFilters. Add one class for which right-click on ActionFilters folder and select Add → Class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/custom_filter.jpg\" alt=\"Custom Filter\"/></figure>\n\n\n\n<p>Enter ‘MyLogActionFilter’ in the name field and click ‘Add’ button.</p>\n\n\n\n<p>This class will be derived from the&nbsp;<strong>ActionFilterAttribute</strong>, which is a base class and overrides the following method. Following is the complete implementation of MyLogActionFilter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\n\nnamespace MVCFiltersDemo.ActionFilters {\n   public class MyLogActionFilter : ActionFilterAttribute{\n      public override void OnActionExecuting(ActionExecutingContext filterContext){\n         Log(\"OnActionExecuting\", filterContext.RouteData);\n      }\n\t\t\n      public override void OnActionExecuted(ActionExecutedContext filterContext){\n         Log(\"OnActionExecuted\", filterContext.RouteData);\n      }\n\t\t\n      public override void OnResultExecuting(ResultExecutingContext filterContext){\n         Log(\"OnResultExecuting\", filterContext.RouteData);\n      }\n\t\t\n      public override void OnResultExecuted(ResultExecutedContext filterContext){\n         Log(\"OnResultExecuted\", filterContext.RouteData);\n      }\n\t\t\n      private void Log(string methodName, RouteData routeData){\n         var controllerName = routeData.Values&#91;\"controller\"];\n         var actionName = routeData.Values&#91;\"action\"];\n\t\t\t\n         var message = String.Format(\n            \"{0} controller:{1} action:{2}\", methodName, controllerName, actionName);\n\t\t\t\t\n         Debug.WriteLine(message, \"Action Filter Log\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>Let us now apply the log filter to the HomeController using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using MVCFiltersDemo.ActionFilters;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCFiltersDemo.Controllers {\n   &#91;MyLogActionFilter]\n   public class HomeController : Controller{\n      // GET: Home\n\t\t\n      &#91;OutputCache(Duration = 10)]\n      public string Index(){\n         return \"This is ASP.Net MVC Filters Tutorial\";\n      }\n\t\t\n      &#91;OutputCache(Duration = 10)]\n      public string GetCurrentTime(){\n         return DateTime.Now.ToString(\"T\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>Run the application and then observe the output window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/output_window.jpg\" alt=\"Output Window\"/></figure>\n\n\n\n<p>As seen in the above screenshot, the stages of processing the action are logged to the Visual Studio output window.</p>\n","protected":false},"excerpt":{"rendered":"<p>In ASP.NET MVC, controllers define action methods that usually have a one-to-one relationship with possible user interactions, but sometimes you want to perform logic either before an action method is called or after an action method runs. To support this, ASP.NET MVC provides filters.&nbsp;Filters&nbsp;are custom classes that provide both a declarative and programmatic means to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3730"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3730"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3730/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3730"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3730"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3730"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3732,"date":"2020-09-18T12:30:57","date_gmt":"2020-09-18T12:30:57","guid":{"rendered":"http://backend.foobrdigital.com/?p=3732"},"modified":"2020-09-18T12:30:57","modified_gmt":"2020-09-18T12:30:57","slug":"asp-net-mvc-selectors","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-selectors/","title":{"rendered":"Selectors"},"content":{"rendered":"\n<p>Action selectors are attributes that can be applied to action methods and are used to influence which action method gets invoked in response to a request. It helps the routing engine to select the correct action method to handle a particular request.</p>\n\n\n\n<p>It plays a very crucial role when you are writing your action methods. These selectors will decide the behavior of the method invocation based on the modified name given in front of the action method. It is usually used to alias the name of the action method.</p>\n\n\n\n<p>There are three types of action selector attributes −</p>\n\n\n\n<ul><li>ActionName</li><li>NonAction</li><li>ActionVerbs</li></ul>\n\n\n\n<h2>ActionName</h2>\n\n\n\n<p>This class represents an attribute that is used for the name of an action. It also allows developers to use a different action name than the method name.</p>\n\n\n\n<p>Let’s take a look at a simple example from the last chapter in which we have HomeController containing two action methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCFiltersDemo.Controllers {\n   public class HomeController : Controller{\n      // GET: Home\n      public string Index(){\n         return \"This is ASP.Net MVC Filters Tutorial\";\n      } \n\t\t\n      public string GetCurrentTime(){\n         return DateTime.Now.ToString(\"T\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>Let’s apply the the ActionName selector for GetCurrentTime by writing [ActionName(&#8220;CurrentTime&#8221;)] above the GetCurrentTime() as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCFiltersDemo.Controllers {\n   public class HomeController : Controller{\n      // GET: Home\n      public string Index(){\n         return \"This is ASP.Net MVC Filters Tutorial\";\n      }\n\t\t\n      &#91;ActionName(\"CurrentTime\")]\n      public string GetCurrentTime(){\n         return DateTime.Now.ToString(\"T\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>Now run this application and enter the following URL in the browser&nbsp;<strong>http://localhost:62833/Home/CurrentTime</strong>, you will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_currenttime.jpg\" alt=\"Localhost CurrentTime\"/></figure>\n\n\n\n<p>You can see that we have used the CurrentTime instead of the original action name, which is GetCurrentTime in the above URL.</p>\n\n\n\n<h2>NonAction</h2>\n\n\n\n<p>NonAction is another built-in attribute, which indicates that a public method of a Controller is not an action method. It is used when you want that a method shouldn’t be treated as an action method.</p>\n\n\n\n<p>Let’s take a look at a simple example by adding another method in HomeController and also apply the NonAction attribute using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using MVCFiltersDemo.ActionFilters;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCFiltersDemo.Controllers {\n   public class HomeController : Controller{\n      // GET: Home\n      public string Index(){\n         return \"This is ASP.Net MVC Filters Tutorial\";\n      }\n\t\t\n      &#91;ActionName(\"CurrentTime\")]\n      public string GetCurrentTime(){\n         return TimeString();\n      }\n\t\t\n      &#91;NonAction]\n      public string TimeString(){\n         return \"Time is \" + DateTime.Now.ToString(\"T\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>The new method TimeString is called from the GetCurrentTime() but you can’t use it as action in URL.</p>\n\n\n\n<p>Let’s run this application and specify the following URL&nbsp;<strong>http://localhost:62833/Home/CurrentTime</strong>&nbsp;in the browser. You will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_home_currenttime.jpg\" alt=\"Localhost Home CurrentTime\"/></figure>\n\n\n\n<p>Let us now check the&nbsp;<strong>/TimeString</strong>&nbsp;as action in the URL and see what happens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/timestring.jpg\" alt=\"TimeString\"/></figure>\n\n\n\n<p>You can see that it gives ‘404—Not Found’ error.</p>\n\n\n\n<h2>ActionVerbs</h2>\n\n\n\n<p>Another selector filter that you can apply is the ActionVerbs attributes. So this restricts the indication of a specific action to specific HttpVerbs. You can define two different action methods with the same name but one action method responds to an HTTP Get request and another action method responds to an HTTP Post request.</p>\n\n\n\n<p>MVC framework supports the following ActionVerbs.</p>\n\n\n\n<ul><li>HttpGet</li><li>HttpPost</li><li>HttpPut</li><li>HttpDelete</li><li>HttpOptions</li><li>HttpPatch</li></ul>\n\n\n\n<p>Let’s take a look at a simple example in which we will create EmployeeController.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCControllerDemo.Controllers {\n   public class EmployeeController : Controller{\n      // GET: Employee\n      public ActionResult Search(string name = “No name Entered”){\n         var input = Server.HtmlEncode(name);\n         return Content(input);\n      }\n   }\n}</code></pre>\n\n\n\n<p>Now let’s add another action method with the same name using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCControllerDemo.Controllers {\n   public class EmployeeController : Controller{\n      // GET: Employee\n      //public ActionResult Index()\n      //{\n         // return View();\n      //}\n\t\t\n      public ActionResult Search(string name){\n         var input = Server.HtmlEncode(name);\n         return Content(input);\n      }\n\t\t\n      public ActionResult Search(){\n         var input = \"Another Search action\";\n         return Content(input);\n      }\n   }\n}</code></pre>\n\n\n\n<p>When you run this application, it will give an error because the MVC framework is unable to figure out which action method should be picked up for the request.</p>\n\n\n\n<p>Let us specify the HttpGet ActionVerb with the action you want as response using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCControllerDemo.Controllers {\n   public class EmployeeController : Controller{\n      // GET: Employee\n      //public ActionResult Index()\n      //{\n         // return View();\n      //}\n\t\t\n      public ActionResult Search(string name){\n         var input = Server.HtmlEncode(name);\n         return Content(input);\n      }\n\t\t\n      &#91;HttpGet]\n      public ActionResult Search(){\n         var input = \"Another Search action\";\n         return Content(input);\n      }\n   }\n}</code></pre>\n\n\n\n<p>When you run this application, you will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/another_search_action.jpg\" alt=\"Another Search Action\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Action selectors are attributes that can be applied to action methods and are used to influence which action method gets invoked in response to a request. It helps the routing engine to select the correct action method to handle a particular request. It plays a very crucial role when you are writing your action methods. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3732"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3732"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3732/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3732"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3732"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3732"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3734,"date":"2020-09-18T12:32:12","date_gmt":"2020-09-18T12:32:12","guid":{"rendered":"http://backend.foobrdigital.com/?p=3734"},"modified":"2020-09-18T12:32:12","modified_gmt":"2020-09-18T12:32:12","slug":"asp-net-mvc-views","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-views/","title":{"rendered":"Views"},"content":{"rendered":"\n<p>In an ASP.NET MVC application, there is nothing like a page and it also doesn’t include anything that directly corresponds to a page when you specify a path in URL. The closest thing to a page in an ASP.NET MVC application is known as a&nbsp;<strong>View</strong>.</p>\n\n\n\n<p>In ASP.NET MVC application, all incoming browser requests are handled by the controller and these requests are mapped to controller actions. A controller action might return a view or it might also perform some other type of action such as redirecting to another controller action.</p>\n\n\n\n<p>Let’s take a look at a simple example of View by creating a new ASP.NET MVC project.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open the Visual Studio and click File → New → Project menu option.</p>\n\n\n\n<p>A new Project dialog opens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/visual_studio.jpg\" alt=\"Visual Studio\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− From the left pane, select Templates → Visual C# → Web.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− In the middle pane, select ASP.NET Web Application.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Enter the project name ‘MVCViewDemo’ in the Name field and click Ok to continue. You will see the following dialog which asks you to set the initial content for the ASP.NET project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvcviewdemo.jpg\" alt=\"MVCViewDemo\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− To keep things simple, select the Empty option and check the MVC checkbox in the ‘Add folders and core references for’ section and click Ok.</p>\n\n\n\n<p>It will create a basic MVC project with minimal predefined content. We now need to add controller.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Right-click on the controller folder in the solution explorer and select Add → Controller.</p>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/controller_folder.jpg\" alt=\"Controller Folder\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Select the MVC 5 Controller – Empty option and click ‘Add’ button.</p>\n\n\n\n<p>The Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_controller_dialog.jpg\" alt=\"Add Controller Dialog\"/></figure>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Set the name to HomeController and click ‘Add’ button.</p>\n\n\n\n<p>You will see a new C# file ‘HomeController.cs’ in the Controllers folder which is open for editing in Visual Studio as well.</p>\n\n\n\n<p>Let’s update the HomeController.cs file, which contains two action methods as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCViewDemo.Controllers {\n   public class HomeController : Controller{\n      // GET: Home\n      public ActionResult Index(){\n         return View();\n      }\n\t\t\n      public string Mycontroller(){\n         return \"Hi, I am a controller\";\n      }\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Run this application and apend /Home/MyController to the URL in the browser and press enter. You will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mycontroller.jpg\" alt=\"MyController\"/></figure>\n\n\n\n<p>As MyController action simply returns the string, to return a View from the action we need to add a View first.</p>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− Before adding a view let’s add another action, which will return a default view.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCViewDemo.Controllers {\n   public class HomeController : Controller{\n      // GET: Home\n      public ActionResult Index(){\n         return View();\n      }\n\t\t\n      public string Mycontroller(){\n         return \"Hi, I am a controller\";\n      }\n\t\t\n      public ActionResult MyView(){\n         return View();\n      }\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− Run this application and apend /Home/MyView to the URL in the browser and press enter. You will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/myview_view.jpg\" alt=\"MyView View\"/></figure>\n\n\n\n<p>You can see here that we have an error and this error is actually quite descriptive, which tells us it can&#8217;t find the MyView view.</p>\n\n\n\n<p><strong>Step 12</strong>&nbsp;− To add a view, right-click inside the MyView action and select Add view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/myview_action.jpg\" alt=\"MyView Action\"/></figure>\n\n\n\n<p>It will display the Add View dialog and it is going to add the default name.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_view_dialog.jpg\" alt=\"Add View Dialog\"/></figure>\n\n\n\n<p><strong>Step 13</strong>&nbsp;− Uncheck the ‘Use a layout page’ checkbox and click ‘Add’ button.</p>\n\n\n\n<p>We now have the default code inside view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/use_layout_page.jpg\" alt=\"Use Layout Page\"/></figure>\n\n\n\n<p><strong>Step 14</strong>&nbsp;− Add some text in this view using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@{\n   Layout = null;\n}\n\n&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta name = \"viewport\" content = \"width = device-width\" />\n      &lt;title>MyView&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div>\n         Hi, I am a view\n      &lt;/div>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 15</strong>&nbsp;− Run this application and apend /Home/MyView to the URL in the browser. Press enter and you will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/i_am_view.jpg\" alt=\"I am View\"/></figure>\n\n\n\n<p>You can now see the text from the View.</p>\n","protected":false},"excerpt":{"rendered":"<p>In an ASP.NET MVC application, there is nothing like a page and it also doesn’t include anything that directly corresponds to a page when you specify a path in URL. The closest thing to a page in an ASP.NET MVC application is known as a&nbsp;View. In ASP.NET MVC application, all incoming browser requests are handled [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3734"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3734"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3734/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3734"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3734"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3734"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3736,"date":"2020-09-18T12:34:45","date_gmt":"2020-09-18T12:34:45","guid":{"rendered":"http://backend.foobrdigital.com/?p=3736"},"modified":"2020-09-18T12:34:45","modified_gmt":"2020-09-18T12:34:45","slug":"asp-net-mvc-data-model","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-data-model/","title":{"rendered":"Data Model"},"content":{"rendered":"\n<p>In this chapter, we will discuss about building models in an ASP.NET MVC Framework application. A&nbsp;<strong>model</strong>&nbsp;stores data that is retrieved according to the commands from the Controller and displayed in the View.</p>\n\n\n\n<p>Model is a collection of classes wherein you will be working with data and business logic. Hence, basically models are business domain-specific containers. It is used to interact with database. It can also be used to manipulate the data to implement the business logic.</p>\n\n\n\n<p>Let’s take a look at a simple example of View by creating a new ASP.Net MVC project.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open the Visual Studio. Click File → New → Project menu option.</p>\n\n\n\n<p>A new Project dialog opens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/open_the_visual_studio.jpg\" alt=\"Open the Visual Studio\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− From the left pane, select Templates → Visual C# → Web.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− In the middle pane, select ASP.NET Web Application.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Enter the project name ‘MVCSimpleApp’ in the Name field and click Ok to continue. You will see the following dialog which asks you to set the initial content for the ASP.NET project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvcsimpleapp.jpg\" alt=\"MVCSimpleApp\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− To keep things simple, select the Empty option and check the MVC checkbox in the ‘Add folders and core references for’ section and click Ok.</p>\n\n\n\n<p>It will create a basic MVC project with minimal predefined content.</p>\n\n\n\n<p>We need to add a controller now.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Right-click on the controller folder in the solution explorer and select Add → Controller.</p>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/rightclick_controller_folder.jpg\" alt=\"Right-click Controller Folder\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Select the MVC 5 Controller – with read/write actions option. This template will create an Index method with default action for Controller. This will also list other methods like Edit/Delete/Create as well.</p>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Click ‘Add’ button and Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_employee_controller.jpg\" alt=\"Add Employee Controller\"/></figure>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Set the name to EmployeeController and click the ‘Add’ button.</p>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− You will see a new C# file ‘EmployeeController.cs’ in the Controllers folder, which is open for editing in Visual Studio with some default actions.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCSimpleApp.Controllers {\n   public class EmployeeController : Controller{\n      // GET: Employee\n      public ActionResult Index(){\n         return View();\n      }\n\t\t\n      // GET: Employee/Details/5\n      public ActionResult Details(int id){\n         return View();\n      }\n\t\t\n      // GET: Employee/Create\n      public ActionResult Create(){\n         return View();\n      }\n\t\t\n      // POST: Employee/Create\n      &#91;HttpPost]\n      public ActionResult Create(FormCollection collection){\n         try{\n            // TODO: Add insert logic here\n            return RedirectToAction(\"Index\");\n         }catch{\n            return View();\n         }\n      }\n\t\t\n      // GET: Employee/Edit/5\n      public ActionResult Edit(int id){\n         return View();\n      }\n\t\t\n      // POST: Employee/Edit/5\n      &#91;HttpPost]\n      public ActionResult Edit(int id, FormCollection collection){\n         try{\n            // TODO: Add update logic here\n            return RedirectToAction(\"Index\");\n         }catch{\n            return View();\n         }\n      }\n\t\t\n      // GET: Employee/Delete/5\n      public ActionResult Delete(int id){\n         return View();\n      }\n\t\t\n      // POST: Employee/Delete/5\n      &#91;HttpPost]\n      public ActionResult Delete(int id, FormCollection collection){\n         try{\n            // TODO: Add delete logic here\n            return RedirectToAction(\"Index\");\n         }catch{\n            return View();\n         }\n      }\n   }\n}</code></pre>\n\n\n\n<p>Let’s add a model.</p>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− Right-click on the Models folder in the solution explorer and select Add → Class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/rightclick_models_folder.jpg\" alt=\"Right-click Models Folder\"/></figure>\n\n\n\n<p>You will see the Add New Item dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_new_item_dialog.jpg\" alt=\"Add New Item Dialog\"/></figure>\n\n\n\n<p><strong>Step 12</strong>&nbsp;− Select Class in the middle pan and enter Employee.cs in the name field.</p>\n\n\n\n<p><strong>Step 13</strong>&nbsp;− Add some properties to Employee class using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace MVCSimpleApp.Models {\n   public class Employee{\n      public int ID { get; set; }\n      public string Name { get; set; }\n      public DateTime JoiningDate { get; set; }\n      public int Age { get; set; }\n   }\n}</code></pre>\n\n\n\n<p>Let’s update the EmployeeController.cs file by adding one more method, which will return the list of employee.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;NonAction]\npublic List&lt;Employee> GetEmployeeList(){\n   return new List&lt;Employee>{\n      new Employee{\n         ID = 1,\n         Name = \"Allan\",\n         JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n         Age = 23\n      },\n\t\t\n      new Employee{\n         ID = 2,\n         Name = \"Carson\",\n         JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n         Age = 45\n      },\n\t\t\n      new Employee{\n         ID = 3,\n         Name = \"Carson\",\n         JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n         Age = 37\n      },\n\t\t\n      new Employee{\n         ID = 4,\n         Name = \"Laura\",\n         JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n         Age = 26\n      },\n   };\n}</code></pre>\n\n\n\n<p><strong>Step 14</strong>&nbsp;− Update the index action method as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public ActionResult Index(){\n   var employees = from e in GetEmployeeList()\n   orderby e.ID\n   select e;\n   return View(employees);\n}</code></pre>\n\n\n\n<p><strong>Step 15</strong>&nbsp;− Run this application and append /employee to the URL in the browser and press Enter. You will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/cant_find_index_view.jpg\" alt=\"Can't Find Index View\"/></figure>\n\n\n\n<p>As seen in the above screenshot, there is an error and this error is actually quite descriptive which tells us it can&#8217;t find the Index view.</p>\n\n\n\n<p><strong>Step 16</strong>&nbsp;− Hence to add a view, right-click inside the Index action and select Add view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/rightclick_index_action.jpg\" alt=\"Right-click Index Action\"/></figure>\n\n\n\n<p>It will display the Add View dialog and it is going to add the default name.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_default_name.jpg\" alt=\"Add Default Name\"/></figure>\n\n\n\n<p><strong>Step 17</strong>&nbsp;− Select the List from the Template dropdown and Employee in Model class dropdown and also uncheck the ‘Use a layout page’ checkbox and click ‘Add’ button.</p>\n\n\n\n<p>It will add some default code for you in this view.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@model IEnumerable&lt;MVCSimpleApp.Models.Employee>\n@{\n   Layout = null;\n}\n\n&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta name = \"viewport\" content = \"width = device-width\" />\n      &lt;title>Index&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;p>@Html.ActionLink(\"Create New\", \"Create\")&lt;/p>\n         &lt;table class = \"table\">\n         &lt;tr>\n            &lt;th>\n               @Html.DisplayNameFor(model => model.Name)\n            &lt;/th>\n\t\t\t\t\n            &lt;th>\n               @Html.DisplayNameFor(model => model.JoiningDate)\n            &lt;/th>\n\t\t\t\t\n            &lt;th>\n               @Html.DisplayNameFor(model => model.Age)\n            &lt;/th>\n\t\t\t\t\n            &lt;th>&lt;/th>\n         &lt;/tr>\n\t\t\t\n         @foreach (var item in Model) {\n            &lt;tr>\n               &lt;td>\n                  @Html.DisplayFor(modelItem => item.Name)\n               &lt;/td>\n\t\t\t\t\t\n               &lt;td>\n                  @Html.DisplayFor(modelItem => item.JoiningDate)\n               &lt;/td>\n\t\t\t\t\t\n               &lt;td>\n                  @Html.DisplayFor(modelItem => item.Age)\n               &lt;/td>\n\t\t\t\t\t\n               &lt;td>\n                  @Html.ActionLink(\"Edit\", \"Edit\", new { id = item.ID }) |\n                  @Html.ActionLink(\"Details\", \"Details\", new { id = item.ID }) |\n                  @Html.ActionLink(\"Delete\", \"Delete\", new { id = item.ID })\n               &lt;/td>\n\t\t\t\t\t\n            &lt;/tr>\n         }\n\t\t\t\n      &lt;/table>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 18</strong>&nbsp;− Run this application and you will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/list_of_employees.jpg\" alt=\"List of Employees\"/></figure>\n\n\n\n<p>A list of employees will be displayed.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss about building models in an ASP.NET MVC Framework application. A&nbsp;model&nbsp;stores data that is retrieved according to the commands from the Controller and displayed in the View. Model is a collection of classes wherein you will be working with data and business logic. Hence, basically models are business domain-specific containers. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3736"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3736"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3736/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3736"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3736"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3736"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3738,"date":"2020-09-18T12:36:12","date_gmt":"2020-09-18T12:36:12","guid":{"rendered":"http://backend.foobrdigital.com/?p=3738"},"modified":"2020-09-18T12:36:12","modified_gmt":"2020-09-18T12:36:12","slug":"asp-net-mvc-helpers","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-helpers/","title":{"rendered":"Helpers"},"content":{"rendered":"\n<p>In ASP.Net web forms, developers are using the toolbox for adding controls on any particular page. However, in ASP.NET MVC application there is no toolbox available to drag and drop HTML controls on the view. In ASP.NET MVC application, if you want to create a view it should contain HTML code. So those developers who are new to MVC especially with web forms background finds this a little hard.</p>\n\n\n\n<p>To overcome this problem, ASP.NET MVC provides HtmlHelper class which contains different methods that help you create HTML controls programmatically. All HtmlHelper methods generate HTML and return the result as a string. The final HTML is generated at runtime by these functions. The HtmlHelper class is designed to generate UI and it should not be used in controllers or models.</p>\n\n\n\n<p>There are different types of helper methods.</p>\n\n\n\n<ul><li><strong>Createinputs</strong>&nbsp;− Creates inputs for text boxes and buttons.</li><li><strong>Createlinks</strong>&nbsp;− Creates links that are based on information from the routing tables.</li><li><strong>Createforms</strong>&nbsp;− Create form tags that can post back to our action, or to post back to an action on a different controller.</li></ul>\n\n\n\n<p>Given below is the list of methods in HtmlHelper class.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Method and Description</th></tr><tr><td>1</td><td><strong>Action(String)</strong>Overloaded. Invokes the specified child action method and returns the result as an HTML string. (Defined by ChildActionExtensions)</td></tr><tr><td>2</td><td><strong>Action(String, Object)</strong>Overloaded. Invokes the specified child action method with the specified parameters and returns the result as an HTML string. (Defined by ChildActionExtensions)</td></tr><tr><td>3</td><td><strong>Action(String, RouteValueDictionary)</strong>Overloaded. Invokes the specified child action method using the specified parameters and returns the result as an HTML string. (Defined by ChildActionExtensions)</td></tr><tr><td>4</td><td><strong>Action(String, String)</strong>Overloaded. Invokes the specified child action method using the specified controller name and returns the result as an HTML string. (Defined by ChildActionExtensions)</td></tr><tr><td>5</td><td><strong>Action(String, String, Object)</strong>Overloaded. Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string. (Defined by ChildActionExtensions)</td></tr><tr><td>6</td><td><strong>Action(String, String, RouteValueDictionary)</strong>Overloaded. Invokes the specified child action method using the specified parameters and controller name and returns the result as an HTML string. (Defined by ChildActionExtensions)</td></tr><tr><td>7</td><td><strong>ActionLink(String, String)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>8</td><td><strong>ActionLink(String, String, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>9</td><td><strong>ActionLink(String, String, Object, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>10</td><td><strong>ActionLink(String, String, RouteValueDictionary)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>11</td><td><strong>ActionLink(String, String, RouteValueDictionary, IDictionary&lt;String, Object&gt;)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>12</td><td><strong>ActionLink(String, String, String)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>13</td><td><strong>ActionLink(String, String, String, Object, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>14</td><td><strong>ActionLink(String, String, String, RouteValueDictionary, IDictionary&lt;String, Object&gt;)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>15</td><td><strong>ActionLink(String, String, String, String, String, String, Object, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>16</td><td><strong>ActionLink(String, String, String, String, String, String, RouteValueDictionary, IDictionary&lt;String, Object&gt;)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>17</td><td><strong>BeginForm()</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. The form uses the POST method, and the request is processed by the action method for the view. (Defined by FormExtensions)</td></tr><tr><td>18</td><td><strong>BeginForm(Object)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response and includes the route values in the action attribute. The form uses the POST method, and the request is processed by the action method for the view. (Defined by FormExtensions)</td></tr><tr><td>19</td><td><strong>BeginForm(RouteValueDictionary)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response and includes the route values from the route value dictionary in the action attribute. The form uses the POST method, and the request is processed by the action method for the view. (Defined by FormExtensions.)</td></tr><tr><td>20</td><td><strong>BeginForm(String, String)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response and sets the action tag to the specified controller and action. The form uses the POST method. (Defined by FormExtensions)</td></tr><tr><td>21</td><td><strong>BeginForm(String, String, FormMethod)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response and sets the action tag to the specified controller and action. The form uses the specified HTTP method. (Defined by FormExtensions)</td></tr><tr><td>22</td><td><strong>BeginForm(String, String, FormMethod, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response and sets the action tag to the specified controller and action. The form uses the specified HTTP method and includes the HTML attributes from a dictionary. (Defined by FormExtensions)</td></tr><tr><td>23</td><td><strong>BeginForm(String, String, FormMethod, Object)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response and sets the action tag to the specified controller and action. The form uses the specified HTTP method and includes the HTML attributes. (Defined by FormExtensions)</td></tr><tr><td>24</td><td><strong>BeginForm(String, String, Object)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response, and sets the action tag to the specified controller, action, and route values. The form uses the POST method. (Defined by FormExtensions)</td></tr><tr><td>25</td><td><strong>BeginForm(String, String, Object, FormMethod)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response and sets the action tag to the specified controller, action, and route values. The form uses the specified HTTP method. (Defined by FormExtensions)</td></tr><tr><td>26</td><td><strong>BeginForm(String, String, Object, FormMethod, Object)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response and sets the action tag to the specified controller, action, and route values. The form uses the specified HTTP method and includes the HTML attributes. (Defined by FormExtensions)</td></tr><tr><td>27</td><td><strong>BeginForm(String, String, RouteValueDictionary)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response, and sets the action tag to the specified controller, action, and route values from the route value dictionary. The form uses the POST method. (Defined by FormExtensions)</td></tr><tr><td>28</td><td><strong>BeginForm(String, String, RouteValueDictionary, FormMethod)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response, and sets the action tag to the specified controller, action, and route values from the route value dictionary. The form uses the specified HTTP method. (Defined by FormExtensions)</td></tr><tr><td>29</td><td><strong>BeginForm(String, String, RouteValueDictionary, FormMethod, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response, and sets the action tag to the specified controller, action, and route values from the route value dictionary. The form uses the specified HTTP method, and includes the HTML attributes from the dictionary. (Defined by FormExtensions)</td></tr><tr><td>30</td><td><strong>BeginRouteForm(Object)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>31</td><td><strong>BeginRouteForm(RouteValueDictionary)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>32</td><td><strong>BeginRouteForm(String)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>33</td><td><strong>BeginRouteForm(String, FormMethod)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>34</td><td><strong>BeginRouteForm(String, FormMethod, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>35</td><td><strong>BeginRouteForm(String, FormMethod, Object)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>36</td><td><strong>BeginRouteForm(String, Object)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>37</td><td><strong>BeginRouteForm(String, Object, FormMethod)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>38</td><td><strong>BeginRouteForm(String, Object, FormMethod, Object)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>39</td><td><strong>BeginRouteForm(String, RouteValueDictionary)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>40</td><td><strong>BeginRouteForm(String, RouteValueDictionary, FormMethod)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>41</td><td><strong>BeginRouteForm(String, RouteValueDictionary, FormMethod, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Writes an opening &lt;form&gt; tag to the response. When the user submits the form, the request will be processed by the route target. (Defined by FormExtensions)</td></tr><tr><td>42</td><td><strong>CheckBox(String)</strong>Overloaded. Returns a checkbox input element by using the specified HTML helper and the name of the form field. (Defined by InputExtensions)</td></tr><tr><td>43</td><td><strong>CheckBox(String, Boolean)</strong>Overloaded. Returns a checkbox input element by using the specified HTML helper, the name of the form field, and a value to indicate whether the check box is selected. (Defined by InputExtensions)</td></tr><tr><td>44</td><td><strong>CheckBox(String, Boolean, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a checkbox input element by using the specified HTML helper, the name of the form field, a value to indicate whether the check box is selected, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>45</td><td><strong>CheckBox(String, Boolean, Object)</strong>Overloaded. Returns a checkbox input element by using the specified HTML helper, the name of the form field, a value that indicates whether the check box is selected, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>46</td><td><strong>CheckBox(String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a checkbox input element by using the specified HTML helper, the name of the form field, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>47</td><td><strong>CheckBox(String, Object)</strong>Overloaded. Returns a checkbox input element by using the specified HTML helper, the name of the form field, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>48</td><td><strong>Display(String)</strong>Overloaded. Returns HTML markup for each property in the object that is represented by a string expression. (Defined by DisplayExtensions)</td></tr><tr><td>49</td><td><strong>Display(String, Object)</strong>Overloaded. Returns HTML markup for each property in the object that is represented by a string expression, using additional view data. (Defined by DisplayExtensions)</td></tr><tr><td>50</td><td><strong>Display(String, String)</strong>Overloaded. Returns HTML markup for each property in the object that is represented by the expression, using the specified template. (Defined by DisplayExtensions)</td></tr><tr><td>51</td><td><strong>Display(String, String, Object)</strong>Overloaded. Returns HTML markup for each property in the object that is represented by the expression, using the specified template and additional view data. (Defined by DisplayExtensions)</td></tr><tr><td>52</td><td><strong>Display(String, String, String)</strong>Overloaded. Returns HTML markup for each property in the object that is represented by the expression, using the specified template and an HTML field ID. (Defined by DisplayExtensions)</td></tr><tr><td>53</td><td><strong>Display(String, String, String, Object)</strong>Overloaded. Returns HTML markup for each property in the object that is represented by the expression, using the specified template, HTML field ID, and additional view data. (Defined by DisplayExtensions)</td></tr><tr><td>54</td><td><strong>DisplayForModel()</strong>Overloaded. Returns HTML markup for each property in the model. (Defined by DisplayExtensions)</td></tr><tr><td>55</td><td><strong>DisplayForModel(Object)</strong>Overloaded. Returns HTML markup for each property in the model, using additional view data. (Defined by DisplayExtensions)</td></tr><tr><td>56</td><td><strong>DisplayForModel(String)</strong>Overloaded. Returns HTML markup for each property in the model using the specified template. (Defined by DisplayExtensions)</td></tr><tr><td>57</td><td><strong>DisplayForModel(String, Object)</strong>Overloaded. Returns HTML markup for each property in the model, using the specified template and additional view data. (Defined by DisplayExtensions)</td></tr><tr><td>58</td><td><strong>DisplayForModel(String, String)</strong>Overloaded. Returns HTML markup for each property in the model using the specified template and HTML field ID. (Defined by DisplayExtensions)</td></tr><tr><td>59</td><td><strong>DisplayForModel(String, String, Object)</strong>Overloaded. Returns HTML markup for each property in the model, using the specified template, an HTML field ID, and additional view data. (Defined by DisplayExtensions)</td></tr><tr><td>60</td><td><strong>DisplayName(String)</strong>Gets the display name. (Defined by DisplayNameExtensions)</td></tr><tr><td>61</td><td><strong>DisplayNameForModel()</strong>Gets the display name for the model. (Defined by DisplayNameExtensions)</td></tr><tr><td>62</td><td><strong>DisplayText(String)</strong>Returns HTML markup for each property in the object that is represented by the specified expression. (Defined by DisplayTextExtensions)</td></tr><tr><td>63</td><td><strong>DropDownList(String)</strong>Overloaded. Returns a single-selection select element using the specified HTML helper and the name of the form field. (Defined by SelectExtensions)</td></tr><tr><td>64</td><td><strong>DropDownList(String, IEnumerable&lt;SelectListItem&gt;)</strong>Overloaded. Returns a single-selection select element using the specified HTML helper, the name of the form field, and the specified list items. (Defined by SelectExtensions)</td></tr><tr><td>65</td><td><strong>DropDownList(String, IEnumerable&lt;SelectListItem&gt;, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes. (Defined by SelectExtensions)</td></tr><tr><td>66</td><td><strong>DropDownList(String, IEnumerable&lt;SelectListItem&gt;, Object)</strong>Overloaded. Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HTML attributes. (Defined by SelectExtensions)</td></tr><tr><td>67</td><td><strong>DropDownList(String, IEnumerable&lt;SelectListItem&gt;, String)</strong>Overloaded. Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, and an option label. (Defined by SelectExtensions)</td></tr><tr><td>68</td><td><strong>DropDownList(String, IEnumerable&lt;SelectListItem&gt;, String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes. (Defined by SelectExtensions)</td></tr><tr><td>69</td><td><strong>DropDownList(String, IEnumerable&lt;SelectListItem&gt;, String, Object)</strong>Overloaded. Returns a single-selection select element using the specified HTML helper, the name of the form field, the specified list items, an option label, and the specified HTML attributes. (Defined by SelectExtensions)</td></tr><tr><td>70</td><td><strong>DropDownList(String, String)</strong>Overloaded. Returns a single-selection select element using the specified HTML helper, the name of the form field, and an option label. (Defined by SelectExtensions)</td></tr><tr><td>71</td><td><strong>Editor(String)</strong>Overloaded. Returns an HTML input element for each property in the object that is represented by the expression. (Defined by EditorExtensions)</td></tr><tr><td>72</td><td><strong>Editor(String, Object)</strong>Overloaded. Returns an HTML input element for each property in the object that is represented by the expression, using additional view data. (Defined by EditorExtensions)</td></tr><tr><td>73</td><td><strong>Editor(String, String)</strong>Overloaded. Returns an HTML input element for each property in the object that is represented by the expression, using the specified template. (Defined by EditorExtensions)</td></tr><tr><td>74</td><td><strong>Editor(String, String, Object)</strong>Overloaded. Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and additional view data. (Defined by EditorExtensions)</td></tr><tr><td>75</td><td><strong>Editor(String, String, String)</strong>Overloaded. Returns an HTML input element for each property in the object that is represented by the expression, using the specified template and HTML field name. (Defined by EditorExtensions)</td></tr><tr><td>76</td><td><strong>Editor(String, String, String, Object)</strong>Overloaded. Returns an HTML input element for each property in the object that is represented by the expression, using the specified template, HTML field name, and additional view data. (Defined by EditorExtensions)</td></tr><tr><td>77</td><td><strong>EditorForModel()</strong>Overloaded. Returns an HTML input element for each property in the model. (Defined by EditorExtensions)</td></tr><tr><td>78</td><td><strong>EditorForModel(Object)</strong>Overloaded. Returns an HTML input element for each property in the model, using additional view data. (Defined by EditorExtensions)</td></tr><tr><td>79</td><td><strong>EditorForModel(String)</strong>Overloaded. Returns an HTML input element for each property in the model, using the specified template. (Defined by EditorExtensions)</td></tr><tr><td>80</td><td><strong>EditorForModel(String, Object)</strong>Overloaded. Returns an HTML input element for each property in the model, using the specified template and additional view data. (Defined by EditorExtensions)</td></tr><tr><td>81</td><td><strong>EditorForModel(String, String)</strong>Overloaded. Returns an HTML input element for each property in the model, using the specified template name and HTML field name. (Defined by EditorExtensions)</td></tr><tr><td>82</td><td><strong>EditorForModel(String, String, Object)</strong>Overloaded. Returns an HTML input element for each property in the model, using the template name, HTML field name, and additional view data. (Defined by EditorExtensions)</td></tr><tr><td>83</td><td><strong>EndForm()</strong>Renders the closing &lt;/form&gt; tag to the response. (Defined by FormExtensions)</td></tr><tr><td>84</td><td><strong>Hidden(String)</strong>Overloaded. Returns a hidden input element by using the specified HTML helper and the name of the form field. (Defined by InputExtensions)</td></tr><tr><td>85</td><td><strong>Hidden(String, Object)</strong>Overloaded. Returns a hidden input element by using the specified HTML helper, the name of the form field, and the value. (Defined by InputExtensions)</td></tr><tr><td>86</td><td><strong>Hidden(String, Object, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>87</td><td><strong>Hidden(String, Object, Object)</strong>Overloaded. Returns a hidden input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>88</td><td><strong>Id(String)</strong>Gets the ID of the HtmlHelper string. (Defined by NameExtensions)</td></tr><tr><td>89</td><td><strong>IdForModel()</strong>Gets the ID of the HtmlHelper string. (Defined by NameExtensions)</td></tr><tr><td>90</td><td><strong>Label(String)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>91</td><td><strong>Label(String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>92</td><td><strong>Label(String, Object)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>93</td><td><strong>Label(String, String)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression using the label text. (Defined by LabelExtensions)</td></tr><tr><td>94</td><td><strong>Label(String, String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>95</td><td><strong>Label(String, String, Object)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>96</td><td><strong>LabelForModel()</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the model. (Defined by LabelExtensions)</td></tr><tr><td>97</td><td><strong>LabelForModel(IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>98</td><td><strong>LabelForModel(Object)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>99</td><td><strong>LabelForModel(String)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression using the label text. (Defined by LabelExtensions)</td></tr><tr><td>100</td><td><strong>LabelForModel(String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>101</td><td><strong>LabelForModel(String, Object)</strong>Overloaded. Returns an HTML label element and the property name of the property that is represented by the specified expression. (Defined by LabelExtensions)</td></tr><tr><td>102</td><td><strong>ListBox(String)</strong>Overloaded. Returns a multi-select select element using the specified HTML helper and the name of the form field. (Defined by SelectExtensions)</td></tr><tr><td>103</td><td><strong>ListBox(String, IEnumerable&lt;SelectListItem&gt;)</strong>Overloaded. Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items. (Defined by SelectExtensions)</td></tr><tr><td>104</td><td><strong>ListBox(String, IEnumerable&lt;SelectListItem&gt;, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a multi-select select element using the specified HTML helper, the name of the form field, the specified list items, and the specified HMTL attributes. (Defined by SelectExtensions)</td></tr><tr><td>105</td><td><strong>ListBox(String, IEnumerable&lt;SelectListItem&gt;, Object)</strong>Overloaded. Returns a multi-select select element using the specified HTML helper, the name of the form field, and the specified list items. (Defined by SelectExtensions)</td></tr><tr><td>106</td><td><strong>Name(String)</strong>Gets the full HTML field name for the object that is represented by the expression. (Defined by NameExtensions)</td></tr><tr><td>107</td><td><strong>NameForModel()</strong>Gets the full HTML field name for the object that is represented by the expression. (Defined by NameExtensions.)</td></tr><tr><td>108</td><td><strong>Partial(String)</strong>Overloaded. Renders the specified partial view as an HTMLencoded string. (Defined by PartialExtensions)</td></tr><tr><td>109</td><td><strong>Partial(String, Object)</strong>Overloaded. Renders the specified partial view as an HTMLencoded string. (Defined by PartialExtensions)</td></tr><tr><td>110</td><td><strong>Partial(String, Object, ViewDataDictionary)</strong>Overloaded. Renders the specified partial view as an HTMLencoded string. (Defined by PartialExtensions)</td></tr><tr><td>111</td><td><strong>Partial(String, ViewDataDictionary)</strong>Overloaded. Renders the specified partial view as an HTMLencoded string. (Defined by PartialExtensions)</td></tr><tr><td>112</td><td><strong>Password(String)</strong>Overloaded. Returns a password input element by using the specified HTML helper and the name of the form field. (Defined by InputExtensions)</td></tr><tr><td>113</td><td><strong>Password(String, Object)</strong>Overloaded. Returns a password input element by using the specified HTML helper, the name of the form field, and the value. (Defined by InputExtensions)</td></tr><tr><td>114</td><td><strong>Password(String, Object, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>115</td><td><strong>Password(String, Object, Object)</strong>Overloaded. Returns a password input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>116</td><td><strong>RadioButton(String, Object)</strong>Overloaded. Returns a radio button input element that is used to present mutually exclusive options. (Defined by InputExtensions)</td></tr><tr><td>117</td><td><strong>RadioButton(String, Object, Boolean)</strong>Overloaded. Returns a radio button input element that is used to present mutually exclusive options. (Defined by InputExtensions)</td></tr><tr><td>118</td><td><strong>RadioButton(String, Object, Boolean, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a radio button input element that is used to present mutually exclusive options. (Defined by InputExtensions)</td></tr><tr><td>119</td><td><strong>RadioButton(String, Object, Boolean, Object)</strong>Overloaded. Returns a radio button input element that is used to present mutually exclusive options. (Defined by InputExtensions)</td></tr><tr><td>120</td><td><strong>RadioButton(String, Object, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a radio button input element that is used to present mutually exclusive options. (Defined by InputExtensions)</td></tr><tr><td>121</td><td><strong>RadioButton(String, Object, Object)</strong>Overloaded. Returns a radio button input element that is used to present mutually exclusive options. (Defined by InputExtensions)</td></tr><tr><td>122</td><td><strong>RenderAction(String)</strong>Overloaded. Invokes the specified child action method and renders the result inline in the parent view. (Defined by ChildActionExtensions)</td></tr><tr><td>123</td><td><strong>RenderAction(String, Object)</strong>Overloaded. Invokes the specified child action method using the specified parameters and renders the result inline in the parent view. (Defined by ChildActionExtensions)</td></tr><tr><td>124</td><td><strong>RenderAction(String, RouteValueDictionary)</strong>Overloaded. Invokes the specified child action method using the specified parameters and renders the result inline in the parent view. (Defined by ChildActionExtensions)</td></tr><tr><td>125</td><td><strong>RenderAction(String, String)</strong>Overloaded. Invokes the specified child action method using the specified controller name and renders the result inline in the parent view. (Defined by ChildActionExtensions)</td></tr><tr><td>126</td><td><strong>RenderAction(String, String, Object)</strong>Overloaded. Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view. (Defined by ChildActionExtensions)</td></tr><tr><td>127</td><td><strong>RenderAction(String, String, RouteValueDictionary)</strong>Overloaded. Invokes the specified child action method using the specified parameters and controller name and renders the result inline in the parent view. (Defined by ChildActionExtensions)</td></tr><tr><td>128</td><td><strong>RenderPartial(String)</strong>Overloaded. Renders the specified partial view by using the specified HTML helper. (Defined by RenderPartialExtensions)</td></tr><tr><td>129</td><td><strong>RenderPartial(String, Object)</strong>Overloaded. Renders the specified partial view, passing it a copy of the current ViewDataDictionary object, but with the Model property set to the specified model. (Defined by RenderPartialExtensions)</td></tr><tr><td>130</td><td><strong>RenderPartial(String, Object, ViewDataDictionary)</strong>Overloaded. Renders the specified partial view, replacing the partial view&#8217;s ViewData property with the specified ViewDataDictionary object and setting the Model property of the view data to the specified model. (Defined by RenderPartialExtensions)</td></tr><tr><td>131</td><td><strong>RenderPartial(String, ViewDataDictionary)</strong>Overloaded. Renders the specified partial view, replacing its ViewData property with the specified ViewDataDictionary object. (Defined by RenderPartialExtensions)</td></tr><tr><td>132</td><td><strong>RouteLink(String, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>133</td><td><strong>RouteLink(String, Object, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>134</td><td><strong>RouteLink(String, RouteValueDictionary)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>135</td><td><strong>RouteLink(String, RouteValueDictionary, IDictionary&lt;String, Object&gt;)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>136</td><td><strong>RouteLink(String, String)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>137</td><td><strong>RouteLink(String, String, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>138</td><td><strong>RouteLink(String, String, Object, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>139</td><td><strong>RouteLink(String, String, RouteValueDictionary)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>140</td><td><strong>RouteLink(String, String, RouteValueDictionary, IDictionary&lt;String, Object&gt;)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>141</td><td><strong>RouteLink(String, String, String, String, String, Object, Object)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>142</td><td><strong>RouteLink(String, String, String, String, String, RouteValueDictionary, IDictionary&lt;String, Object&gt;)</strong>Overloaded. (Defined by LinkExtensions)</td></tr><tr><td>143</td><td><strong>TextArea(String)</strong>Overloaded. Returns the specified textarea element by using the specified HTML helper and the name of the form field. (Defined by TextAreaExtensions.)</td></tr><tr><td>144</td><td><strong>TextArea(String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the specified HTML attributes. (Defined by TextAreaExtensions)</td></tr><tr><td>145</td><td><strong>TextArea(String, Object)</strong>Overloaded. Returns the specified textarea element by using the specified HTML helper and HTML attributes. (Defined by TextAreaExtensions)</td></tr><tr><td>146</td><td><strong>TextArea(String, String)</strong>Overloaded. Returns the specified textarea element by using the specified HTML helper, the name of the form field, and the text content. (Defined by TextAreaExtensions)</td></tr><tr><td>147</td><td><strong>TextArea(String, String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes. (Defined by TextAreaExtensions)</td></tr><tr><td>148</td><td><strong>TextArea(String, String, Int32, Int32, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes. (Defined by TextAreaExtensions)</td></tr><tr><td>149</td><td><strong>TextArea(String, String, Int32, Int32, Object)</strong>Overloaded. Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, the number of rows and columns, and the specified HTML attributes. (Defined by TextAreaExtensions)</td></tr><tr><td>150</td><td><strong>TextArea(String, String, Object)</strong>Overloaded. Returns the specified textarea element by using the specified HTML helper, the name of the form field, the text content, and the specified HTML attributes. (Defined by TextAreaExtensions)</td></tr><tr><td>151</td><td><strong>TextBox(String)</strong>Overloaded. Returns a text input element by using the specified HTML helper and the name of the form field. (Defined by InputExtensions)</td></tr><tr><td>152</td><td><strong>TextBox(String, Object)</strong>Overloaded. Returns a text input element by using the specified HTML helper, the name of the form field, and the value. (Defined by InputExtensions)</td></tr><tr><td>153</td><td><strong>TextBox(String, Object, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>154</td><td><strong>TextBox(String, Object, Object)</strong>Overloaded. Returns a text input element by using the specified HTML helper, the name of the form field, the value, and the HTML attributes. (Defined by InputExtensions)</td></tr><tr><td>155</td><td><strong>TextBox(String, Object, String)</strong>Overloaded. Returns a text input element. (Defined by InputExtensions)</td></tr><tr><td>156</td><td><strong>TextBox(String, Object, String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns a text input element. (Defined by InputExtensions)</td></tr><tr><td>157</td><td><strong>TextBox(String, Object, String, Object)</strong>Overloaded. Returns a text input element. (Defined by InputExtensions)</td></tr><tr><td>158</td><td><strong>Validate(String)</strong>Retrieves the validation metadata for the specified model and applies each rule to the data field. (Defined by ValidationExtensions)</td></tr><tr><td>159</td><td><strong>ValidationMessage(String)</strong>Overloaded. Displays a validation message if an error exists for the specified field in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>160</td><td><strong>ValidationMessage(String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Displays a validation message if an error exists for the specified field in the ModelStateDictionary object. (Defined by ValidationExtensions.)</td></tr><tr><td>161</td><td><strong>ValidationMessage(String, IDictionary&lt;String, Object&gt;, String)</strong>Overloaded. Displays a validation message if an error exists for the specified entry in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>162</td><td><strong>ValidationMessage(String, Object)</strong>Overloaded. Displays a validation message if an error exists for the specified field in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>163</td><td><strong>ValidationMessage(String, Object, String)</strong>Overloaded. Displays a validation message if an error exists for the specified entry in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>164</td><td><strong>ValidationMessage(String, String)</strong>Overloaded. Displays a validation message if an error exists for the specified field in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>165</td><td><strong>ValidationMessage(String, String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Displays a validation message if an error exists for the specified field in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>166</td><td><strong>ValidationMessage(String, String, IDictionary&lt;String, Object&gt;, String)</strong>Overloaded. Displays a validation message if an error exists for the specified entry in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>167</td><td><strong>ValidationMessage(String, String, Object)</strong>Overloaded. Displays a validation message if an error exists forthe specified field in the ModelStateDictionary object. (Definedby ValidationExtensions)</td></tr><tr><td>168</td><td><strong>ValidationMessage(String, String, Object, String)</strong>Overloaded. Displays a validation message if an error exists for the specified entry in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>169</td><td><strong>ValidationMessage(String, String, String)</strong>Overloaded. Displays a validation message if an error exists for the specified entry in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>170</td><td><strong>ValidationSummary()</strong>Overloaded. Returns an unordered list (ul element) of validation messages that are in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>171</td><td><strong>ValidationSummary(Boolean)</strong>Overloaded. Returns an unordered list (ul element) of validation messages that are in the ModelStateDictionary object and optionally displays only model-level errors. (Defined by ValidationExtensions)</td></tr><tr><td>172</td><td><strong>ValidationSummary(Boolean, String)</strong>Overloaded. Returns an unordered list (ul element) of validation messages that are in the ModelStateDictionary object and optionally displays only model-level errors. (Defined by ValidationExtensions)</td></tr><tr><td>173</td><td><strong>ValidationSummary(Boolean, String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns an unordered list (ul element) of validation messages that are in the ModelStateDictionary object and optionally displays only model-level errors. (Defined by ValidationExtensions)</td></tr><tr><td>174</td><td><strong>ValidationSummary(Boolean, String, IDictionary&lt;String, Object&gt;, String)</strong>Overloaded. (Defined by ValidationExtensions)</td></tr><tr><td>175</td><td><strong>ValidationSummary(Boolean, String, Object)</strong>Overloaded. Returns an unordered list (ul element) of validation messages that are in the ModelStateDictionary object and optionally displays only model-level errors. (Defined by ValidationExtensions)</td></tr><tr><td>176</td><td><strong>ValidationSummary(Boolean, String, Object, String)</strong>Overloaded. (Defined by ValidationExtensions)</td></tr><tr><td>177</td><td><strong>ValidationSummary(Boolean, String, String)</strong>Overloaded. (Defined by ValidationExtensions)</td></tr><tr><td>178</td><td><strong>ValidationSummary(String)</strong>Overloaded. Returns an unordered list (ul element) of validation messages that are in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>179</td><td><strong>ValidationSummary(String, IDictionary&lt;String, Object&gt;)</strong>Overloaded. Returns an unordered list (ul element) of validation messages that are in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>180</td><td><strong>ValidationSummary(String, IDictionary&lt;String, Object&gt;, String)</strong>Overloaded. (Defined by ValidationExtensions)</td></tr><tr><td>181</td><td><strong>ValidationSummary(String, Object)</strong>Overloaded. Returns an unordered list (ul element) of validation messages in the ModelStateDictionary object. (Defined by ValidationExtensions)</td></tr><tr><td>182</td><td><strong>ValidationSummary(String, Object, String)</strong>Overloaded. (Defined by ValidationExtensions)</td></tr><tr><td>183</td><td><strong>ValidationSummary(String, String)</strong>Overloaded. (Defined by ValidationExtensions)</td></tr><tr><td>184</td><td><strong>Value(String)</strong>Overloaded. Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates. (Defined by ValueExtensions)</td></tr><tr><td>185</td><td><strong>Value(String, String)</strong>Overloaded. Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates. (Defined by ValueExtensions)</td></tr><tr><td>186</td><td><strong>ValueForModel()</strong>Overloaded. Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates. (Defined by ValueExtensions)</td></tr><tr><td>187</td><td><strong>ValueForModel(String)</strong>Overloaded. Provides a mechanism to create custom HTML markup compatible with the ASP.NET MVC model binders and templates. (Defined by ValueExtensions)</td></tr></tbody></table></figure>\n\n\n\n<p>If you look at the view from the last chapter which we have generated from EmployeeController index action, you will see the number of operations that started with Html, like&nbsp;<strong>Html.ActionLink</strong>&nbsp;and&nbsp;<strong>Html.DisplayNameFor</strong>, etc. as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@model IEnumerable&lt;MVCSimpleApp.Models.Employee>\n@{\n   Layout = null;\n} \n\n&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta name = \"viewport\" content = \"width = device-width\" />\n      &lt;title>Index&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;p>\n         @Html.ActionLink(\"Create New\", \"Create\")\n      &lt;/p>\n\t\t\n      &lt;table class = \"table\">\n         &lt;tr>\n            &lt;th>\n               @Html.DisplayNameFor(model => model.Name)\n            &lt;/th>\n\t\t\t\t\n            &lt;th>\n               @Html.DisplayNameFor(model => model.JoiningDate)\n            &lt;/th>\n\t\t\t\t\n            &lt;th>\n               @Html.DisplayNameFor(model => model.Age)\n            &lt;/th>\n\t\t\t\t\n            &lt;th>&lt;/th>\n         &lt;/tr>\n\t\t\t\n         @foreach (var item in Model) {\n            &lt;tr>\n               &lt;td>\n                  @Html.DisplayFor(modelItem => item.Name)\n               &lt;/td>\n\t\t\t\t\t\n               &lt;td>\n                  @Html.DisplayFor(modelItem => item.JoiningDate)\n               &lt;/td>\n\t\t\t\t\t\n               &lt;td>\n                  @Html.DisplayFor(modelItem => item.Age)\n               &lt;/td>\n\t\t\t\t\t\n               &lt;td>\n                  @Html.ActionLink(\"Edit\", \"Edit\", new { id = item.ID }) |\n                  @Html.ActionLink(\"Details\", \"Details\", new { id = item.ID }) |\n                  @Html.ActionLink(\"Delete\", \"Delete\", new { id = item.ID })\n               &lt;/td>\n            &lt;/tr>\n         }\n\t\t\t\n      &lt;/table>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>This HTML is a property that we inherit from the ViewPage base class. So, it&#8217;s available in all of our views and it returns an instance of a type called HTML Helper.</p>\n\n\n\n<p>Let’s take a look at a simple example in which we will enable the user to edit the employee. Hence, this edit action will be using significant numbers of different HTML Helpers.</p>\n\n\n\n<p>If you look at the above code, you will see at the end the following HTML Helper methods</p>\n\n\n\n<pre class=\"wp-block-preformatted\">@Html.ActionLink(\"Edit\", \"Edit\", new { id = item.ID })\n</pre>\n\n\n\n<p>In the ActionLink helper, the first parameter is of the link which is “Edit”, the second parameter is the action method in the Controller, which is also “Edit”, and the third parameter ID is of any particular employee you want to edit.</p>\n\n\n\n<p>Let’s change the EmployeeController class by adding a static list and also change the index action using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static List&lt;Employee> empList = new List&lt;Employee>{\n   new Employee{\n      ID = 1,\n      Name = \"Allan\",\n      JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n      Age = 23\n   },\n\t\n   new Employee{\n      ID = 2,\n      Name = \"Carson\",\n      JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n      Age = 45\n   },\n\t\n   new Employee{\n      ID = 3,\n      Name = \"Carson\",\n      JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n      Age = 37\n   },\n\t\n   new Employee{\n      ID = 4,\n      Name = \"Laura\",\n      JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n      Age = 26\n   },\n\t\n};\n\npublic ActionResult Index(){\n   var employees = from e in empList\n   orderby e.ID\n   select e;\n   return View(employees);\n}</code></pre>\n\n\n\n<p>Let’s update the Edit action. You will see two Edit actions one for&nbsp;<strong>GET</strong>&nbsp;and one for&nbsp;<strong>POST</strong>. Let’s update the Edit action for&nbsp;<strong>Get</strong>, which has only Id in the parameter as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// GET: Employee/Edit/5\npublic ActionResult Edit(int id){\n   List&lt;Employee> empList = GetEmployeeList();\n   var employee = empList.Single(m => m.ID == id);\n   return View(employee);\n}</code></pre>\n\n\n\n<p>Now, we know that we have action for Edit but we don’t have any view for these actions. So we need to add a View as well. To do this, right-click on the Edit action and select Add View.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/rightclick_edit_action.jpg\" alt=\"Right-click Edit Action\"/></figure>\n\n\n\n<p>You will see the default name for view. Select Edit from the Template dropdown and Employee from the Model class dropdown.</p>\n\n\n\n<p>Following is the default implementation in the Edit view.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@model MVCSimpleApp.Models.Employee\n@{\n   Layout = null;\n}\n\n&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta name = \"viewport\" content = \"width = device-width\" />\n      &lt;title>Edit&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      @using (Html.BeginForm()){\n         @Html.AntiForgeryToken()\n         &lt;div class = \"form-horizontal\">\n            &lt;h4>Employee&lt;/h4>\n            &lt;hr />\n            @Html.ValidationSummary(\n               true, \"\", new { @class = \"text-danger\" })\n\t\t\t\t\t\n            @Html.HiddenFor(model => model.ID)\n\t\t\t\t\n            &lt;div class = \"form-group\">\n               @Html.LabelFor(\n                  model => model.Name, htmlAttributes: new{\n                     @class = \"control-label col-md-2\" })\n\t\t\t\t\t\t\t\n               &lt;div class = \"col-md-10\">\n                  @Html.EditorFor(model => model.Name, new{\n                     htmlAttributes = new {\n                        @class = \"form-control\" } })\n\t\t\t\t\t\t\t\t\n                  @Html.ValidationMessageFor(model => model.Name, \"\", new{\n                        @class = \"text-danger\" })\n               &lt;/div>\n\t\t\t\t\t\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"form-group\">\n               @Html.LabelFor(\n                  model => model.JoiningDate, htmlAttributes: new{\n                     @class = \"control-label col-md-2\" })\n\t\t\t\t\t\t\t\n               &lt;div class = \"col-md-10\">\n                  @Html.EditorFor(\n                     model => model.JoiningDate, new{\n                        htmlAttributes = new{ @class = \"form-control\" } })\n\t\t\t\t\t\t\t\t\n                  @Html.ValidationMessageFor(\n                     model => model.JoiningDate, \"\", new{\n                        @class = \"text-danger\" })\n               &lt;/div>\n\t\t\t\t\t\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"form-group\">\n               @Html.LabelFor(\n                  model => model.Age, htmlAttributes: new{\n                     @class = \"control-label col-md-2\" })\n\t\t\t\t\t\t\t\n               &lt;div class = \"col-md-10\">\n                  @Html.EditorFor(\n                     model => model.Age, new{\n                        htmlAttributes = new{ @class = \"form-control\" } })\n\t\t\t\t\t\t\t\t\n                  @Html.ValidationMessageFor(\n                     model => model.Age, \"\", new{\n                        @class = \"text-danger\" })\n               &lt;/div>\n\t\t\t\t\t\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"form-group\">\n               &lt;div class = \"col-md-offset-2 col-md-10\">\n                  &lt;input type = \"submit\" value = \"Save\" class = \"btn btn-default\"/>\n               &lt;/div>\n            &lt;/div>\n\t\t\t\t\n         &lt;/div>\n      }\n\t\t\n      &lt;div>\n         @Html.ActionLink(\"Back to List\", \"Index\")\n      &lt;/div>\n\t\t\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>As you can see that there are many helper methods used. So, here “HTML.BeginForm” writes an opening Form Tag. It also ensures that the method is going to be “Post”, when the user clicks on the “Save” button.</p>\n\n\n\n<p>Html.BeginForm is very useful, because it enables you to change the URL, change the method, etc.</p>\n\n\n\n<p>In the above code, you will see one more HTML helper and that is “@HTML.HiddenFor”, which emits the hidden field.</p>\n\n\n\n<p>MVC Framework is smart enough to figure out that this ID field is mentioned in the model class and hence it needs to be prevented from getting edited, that is why it is marked as hidden.</p>\n\n\n\n<p>The Html.LabelFor HTML Helper creates the labels on the screen. The Html.ValidationMessageFor helper displays proper error message if anything is wrongly entered while making the change.</p>\n\n\n\n<p>We also need to change the Edit action for POST because once you update the employee then it will call this action.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// POST: Employee/Edit/5\n&#91;HttpPost]\npublic ActionResult Edit(int id, FormCollection collection){\n   try{\n      var employee = empList.Single(m => m.ID == id);\n      if (TryUpdateModel(employee)){\n         //To Do:- database code\n         return RedirectToAction(\"Index\");\n      }\n      return View(employee);\n   }catch{\n      return View();\n   }\n}</code></pre>\n\n\n\n<p>Let’s run this application and request for the following URL&nbsp;<strong>http://localhost:63004/employee</strong>. You will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_employee.jpg\" alt=\"Localhost Employee\"/></figure>\n\n\n\n<p>Click on the edit link on any particular employee, let’s say click on Allan edit link. You will see the following view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_particular_employee.jpg\" alt=\"Click Particular Employee\"/></figure>\n\n\n\n<p>Let’s change the age from 23 to 29 and click ‘Save’ button, then you will see the updated age on the Index View.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/updated_age_index_view.jpg\" alt=\"Updated Age Index View\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>In ASP.Net web forms, developers are using the toolbox for adding controls on any particular page. However, in ASP.NET MVC application there is no toolbox available to drag and drop HTML controls on the view. In ASP.NET MVC application, if you want to create a view it should contain HTML code. So those developers who [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3738"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3738"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3738/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3738"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3738"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3738"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3740,"date":"2020-09-18T12:37:50","date_gmt":"2020-09-18T12:37:50","guid":{"rendered":"http://backend.foobrdigital.com/?p=3740"},"modified":"2020-09-18T12:37:50","modified_gmt":"2020-09-18T12:37:50","slug":"asp-net-mvc-model-binding","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-model-binding/","title":{"rendered":"Model Binding"},"content":{"rendered":"\n<p>ASP.NET MVC model binding allows you to map HTTP request data with a model. It is the process of creating .NET objects using the data sent by the browser in an HTTP request. The ASP.NET Web Forms developers who are new to ASP.Net MVC are mostly confused how the values from View get converted to the Model class when it reaches the Action method of the Controller class, so this conversion is done by the Model binder.</p>\n\n\n\n<p>Model binding is a well-designed bridge between the HTTP request and the C# action methods. It makes it easy for developers to work with data on forms (views), because POST and GET is automatically transferred into a data model you specify. ASP.NET MVC uses default binders to complete this behind the scene.</p>\n\n\n\n<p>Let’s take a look at a simple example in which we add a ‘Create View’ in our project from the last chapter and we will see how we get these values from the View to the EmployeeController action method.</p>\n\n\n\n<p>Following is the Create Action method for POST.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// POST: Employee/Create\n&#91;HttpPost]\npublic ActionResult Create(FormCollection collection){\n   try{\n      // TODO: Add insert logic here\n      return RedirectToAction(\"Index\");\n   }catch{\n      return View();\n   }\n}</code></pre>\n\n\n\n<p>Right-click on the Create Action method and select Add View…</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/rightclick_create_action.jpg\" alt=\"Right-click Create Action\"/></figure>\n\n\n\n<p>It will display the Add View dialog.</p>\n\n\n\n<p>As you can see in the above screenshot, the default name is already mentioned. Now select Create from the Template dropdown and Employee from the Model class dropdown.</p>\n\n\n\n<p>You will see the default code in the Create.cshtml view.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@model MVCSimpleApp.Models.Employee\n@{\n   Layout = null;\n}\n\n&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta name = \"viewport\" content = \"width = device-width\" />\n      &lt;title>Create&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      @using (Html.BeginForm()){\n         @Html.AntiForgeryToken()\n         &lt;div class = \"form-horizontal\">\n            &lt;h4>Employee&lt;/h4>\n            &lt;hr />\n            @Html.ValidationSummary(true, \"\", new { @class = \"text-danger\" })\n\t\t\t\t\n            &lt;div class = \"form-group\">\n               @Html.LabelFor(model => model.Name, htmlAttributes:\n                  new{ @class = \"control-label col-md-2\" })\n\t\t\t\t\t\t\n               &lt;div class = \"col-md-10\">\n                  @Html.EditorFor(model => model.Name, new{ htmlAttributes =\n                     new { @class = \"form-control\" } })\n\t\t\t\t\t\t\t\n                  @Html.ValidationMessageFor(model => model.Name, \"\",\n                     new{ @class = \"text-danger\" })\n               &lt;/div>\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"form-group\">\n               @Html.LabelFor(model => model.JoiningDate, htmlAttributes:\n                  new{ @class = \"control-label col-md-2\" })\n\t\t\t\t\t\t\n               &lt;div class = \"col-md-10\">\n                  @Html.EditorFor(model => model.JoiningDate, new{ htmlAttributes =\n                     new { @class = \"form-control\" } })\n\t\t\t\t\t\t\t\n                  @Html.ValidationMessageFor(model => model.JoiningDate, \"\",\n                     new { @class = \"text-danger\" })\n               &lt;/div>\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"form-group\">\n               @Html.LabelFor(model => model.Age, htmlAttributes:\n                  new { @class = \"control-label col-md-2\" })\n\t\t\t\t\t\t\n               &lt;div class = \"col-md-10\">\n                  @Html.EditorFor(model => model.Age, new { htmlAttributes =\n                     new { @class = \"form-control\" } })\n\t\t\t\t\t\t\t\n                  @Html.ValidationMessageFor(model => model.Age, \"\", new{ @class = \"text-danger\" })\n               &lt;/div>\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"form-group\">\n               &lt;div class = \"col-md-offset-2 col-md-10\">\n                  &lt;input type = \"submit\" value = \"Create\" class = \"btn btn-default\"/>\n               &lt;/div>\n            &lt;/div>\n\t\t\t\t\n         &lt;/div>\n      }\n\t\t\n      &lt;div>\n         @Html.ActionLink(\"Back to List\", \"Index\")\n      &lt;/div>\n\t\t\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>When the user enters values on Create View then it is available in FormCollection as well as Request.Form. We can use any of these values to populate the employee info from the view.</p>\n\n\n\n<p>Let’s use the following code to create the Employee using FormCollection.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// POST: Employee/Create\n&#91;HttpPost]\npublic ActionResult Create(FormCollection collection){\n   try {\n      Employee emp = new Employee();\n      emp.Name = collection&#91;\"Name\"];\n      DateTime jDate;\n      DateTime.TryParse(collection&#91;\"DOB\"], out jDate);\n      emp.JoiningDate = jDate;\n      string age = collection&#91;\"Age\"];\n      emp.Age = Int32.Parse(age);\n      empList.Add(emp);\n      return RedirectToAction(\"Index\");\n   }catch {\n      return View();\n   }\n}</code></pre>\n\n\n\n<p>Run this application and request for this URL http://localhost:63004/Employee/. You will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_employee_output.jpg\" alt=\"Localhost Employee Output\"/></figure>\n\n\n\n<p>Click the ‘Create New’ link on top of the page and it will go to the following view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/create_new_link.jpg\" alt=\"Create New Link\"/></figure>\n\n\n\n<p>Let’s enter data for another employee you want to add.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/another_employee_data.jpg\" alt=\"Another Employee Data\"/></figure>\n\n\n\n<p>Click on the create button and you will see that the new employee is added in your list.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_employee_added.jpg\" alt=\"New Employee Added\"/></figure>\n\n\n\n<p>In the above example, we are getting all the posted values from the HTML view and then mapping these values to the Employee properties and assigning them one by one.</p>\n\n\n\n<p>In this case, we will also be doing the type casting wherever the posted values are not of the same format as of the Model property.</p>\n\n\n\n<p>This is also known as manual binding and this type of implementation might not be that bad for simple and small data model. However, if you have huge data models and need a lot of type casting then we can utilize the power and ease-of-use of ASP.NET MVC Model binding.</p>\n\n\n\n<p>Let’s take a look at the same example we did for Model binding.</p>\n\n\n\n<p>We need to change the parameter of Create Method to accept the Employee Model object rather than FormCollection as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// POST: Employee/Create\n&#91;HttpPost]\npublic ActionResult Create(Employee emp){\n   try{\n      empList.Add(emp);\n      return RedirectToAction(\"Index\");\n   }catch{\n      return View();\n   }\n}</code></pre>\n\n\n\n<p>Now the magic of Model Binding depends on the id of HTML variables that are supplying the values.</p>\n\n\n\n<p>For our Employee Model, the id of the HTML input fields should be the same as the Property names of the Employee Model and you can see that Visual Studio is using the same property names of the model while creating a view.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = \"form-control\" } })\n</code></pre>\n\n\n\n<p>The mapping will be based on the Property name by default. This is where we will find HTML helper methods very helpful because these helper methods will generate the HTML, which will have proper Names for the Model Binding to work.</p>\n\n\n\n<p>Run this application and request for the URL&nbsp;<strong>http://localhost:63004/Employee/</strong>. You will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/request_for_url.jpg\" alt=\"Request for URL\"/></figure>\n\n\n\n<p>Let’s click on the Create New link on the top of the page and it will go to the following view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_create_new_link.jpg\" alt=\"Click Create New Link\"/></figure>\n\n\n\n<p>Let’s enter data for another employee that we want to add.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/enter_data_another_employee.jpg\" alt=\"Enter Data Another Employee\"/></figure>\n\n\n\n<p>Now click the create button and you will see that the new employee is added to your list using the ASP.Net MVC model binding.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvc_model_binding.jpg\" alt=\"MVC Model Binding\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>ASP.NET MVC model binding allows you to map HTTP request data with a model. It is the process of creating .NET objects using the data sent by the browser in an HTTP request. The ASP.NET Web Forms developers who are new to ASP.Net MVC are mostly confused how the values from View get converted to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3740"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3740"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3740/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3740"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3740"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3740"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3742,"date":"2020-09-18T12:38:49","date_gmt":"2020-09-18T12:38:49","guid":{"rendered":"http://backend.foobrdigital.com/?p=3742"},"modified":"2020-09-18T12:38:49","modified_gmt":"2020-09-18T12:38:49","slug":"asp-net-mvc-databases","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-databases/","title":{"rendered":"Databases"},"content":{"rendered":"\n<p>In all ASP.NET MVC applications created in this tutorial we have been passing hard-coded data from the Controllers to the View templates. But, in order to build a real Web application, you might want to use a real database. In this chapter, we will see how to use a database engine in order to store and retrieve the data needed for your application.</p>\n\n\n\n<p>To store and retrieve data, we will use a .NET Framework data-access technology known as the Entity Framework to define and work with Models.</p>\n\n\n\n<p>The Entity Framework (EF) supports Code First technique, which allows you to create model objects by writing simple classes and then the database will be created on the fly from your classes, which enables a very clean and rapid development workflow.</p>\n\n\n\n<p>Let’s take a look at a simple example in which we will add support for Entity framework in our example.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− To install the Entity Framework, right-click on your project and select NuGet Package Manager → Manage NuGet Packages for Solution…</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/install_entity_framework.jpg\" alt=\"Install Entity Framework\"/></figure>\n\n\n\n<p>It will open the&nbsp;<strong>NuGet Package Manager</strong>. Search for Entity framework in the search box.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/search_entity_framework.jpg\" alt=\"Search Entity Framework\"/></figure>\n\n\n\n<p>Select the Entity Framework and click ‘Install’ button. It will open the Preview dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/select_entity_framework.jpg\" alt=\"Select Entity Framework\"/></figure>\n\n\n\n<p>Click Ok to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/license_acceptance.jpg\" alt=\"License Acceptance\"/></figure>\n\n\n\n<p>Click the ‘I Accept’ button to start installation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/i_accept_button.jpg\" alt=\"I Accept Button\"/></figure>\n\n\n\n<p>Once the Entity Framework is installed you will see the message in out window as seen in the above screenshot.</p>\n\n\n\n<h3>Add DBContext</h3>\n\n\n\n<p>We need to add another class to the Employee Model, which will communicate with Entity Framework to retrieve and save the data using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Data.Entity;\nusing System.Linq;\n\nusing System.Web;\n\nnamespace MVCSimpleApp.Models{\n   public class Employee{\n      public int ID { get; set; }\n      public string Name { get; set; }\n      public DateTime JoiningDate { get; set; }\n      public int Age { get; set; }\n   }\n\t\n   public class EmpDBContext : DbContext{\n      public EmpDBContext()\n      { }\n      public DbSet&lt;Employee> Employees { get; set; }\n   }\n}</code></pre>\n\n\n\n<p>As seen above,&nbsp;<strong>EmpDBContext</strong>&nbsp;is derived from an EF class known as&nbsp;<strong>DbContext</strong>. In this class, we have one property with the name DbSet, which basically represents the entity you want to query and save.</p>\n\n\n\n<h3>Connection String</h3>\n\n\n\n<p>We need to specify the connection string under &lt;configuration&gt; tag for our database in the Web.config file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;connectionStrings>\n   &lt;add name = \"EmpDBContext\" connectionString = \"Data\n   Source = (LocalDb)\\v14.0;AttachDbFilename = |DataDirectory|\\EmpDB.mdf;Initial\n   Catalog = EmployeeDB;Integrated Security = SSPI;\"\n   providerName = \"System.Data.SqlClient\"/>\n&lt;/connectionStrings></code></pre>\n\n\n\n<p>You don&#8217;t actually need to add the EmpDBContext connection string. If you don&#8217;t specify a connection string, Entity Framework will create localDB database in the user’s directory with the fully qualified name of the DbContext class. For this demo, we will not add the connection string to make things simple.</p>\n\n\n\n<p>Now we need to update the EmployeeController.cs file so that we can actually save and retrieve data from the database instead of using hardcoded data.</p>\n\n\n\n<p>First we add create a private EmpDBContext class object and then update the Index, Create and Edit action methods as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using MVCSimpleApp.Models;\nusing System.Linq;\nusing System.Web.Mvc;\n\nnamespace MVCSimpleApp.Controllers {\n   public class EmployeeController : Controller{\n      private EmpDBContext db = new EmpDBContext();\n      // GET: Employee\n\t\t\n      public ActionResult Index(){\n         var employees = from e in db.Employees\n         orderby e.ID\n         select e;\n         return View(employees);\n      }\n\t\t\n      // GET: Employee/Create\n      public ActionResult Create(){\n         return View();\n      }\n\t\t\n      // POST: Employee/Create\n      &#91;HttpPost]\n      public ActionResult Create(Employee emp){\n         try{\n            db.Employees.Add(emp);\n            db.SaveChanges();\n            return RedirectToAction(\"Index\");\n         }catch{\n            return View();\n         }\n      }\n\t\t\n      // GET: Employee/Edit/5\n      public ActionResult Edit(int id){\n         var employee = db.Employees.Single(m => m.ID == id);\n         return View(employee);\n      }\n\t\t\n      // POST: Employee/Edit/5\n      &#91;HttpPost]\n      public ActionResult Edit(int id, FormCollection collection){\n         try{\n            var employee = db.Employees.Single(m => m.ID == id);\n            if (TryUpdateModel(employee)){\n               //To Do:- database code\n               db.SaveChanges();\n               return RedirectToAction(\"Index\");\n            }\n            return View(employee);\n         }catch{\n            return View();\n         }\n      }\n   }\n}</code></pre>\n\n\n\n<p>Then we run this application with the following URL&nbsp;<strong>http://localhost:63004/Employee</strong>. You will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/name_joiningdate_age.jpg\" alt=\"Name JoiningDate Age\"/></figure>\n\n\n\n<p>As you can see that there is no data on the view, this is because we have not added any records in our database, which is created by Visual Studio.</p>\n\n\n\n<p>Let’s go to the SQL Server Object Explorer, you will see the database is created with the same name as we have in our DBContext class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/dbcontext_class.jpg\" alt=\"DBContext Class\"/></figure>\n\n\n\n<p>Let’s expand this database and you will see that it has one table which contains all the fields we have in our Employee model class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/employee_model_class.jpg\" alt=\"Employee Model Class\"/></figure>\n\n\n\n<p>To see the data in this table, right-click on the Employees table and select View Data.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/employee_table_view_data.jpg\" alt=\"Employee Table View Data\"/></figure>\n\n\n\n<p>You will see that we have no records at the moment.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/no_records_moment.jpg\" alt=\"No Records Moment\"/></figure>\n\n\n\n<p>Let’s add some records in the database directly as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_records_in_database.jpg\" alt=\"Add Records in Database\"/></figure>\n\n\n\n<p>Refresh the browser and you will see that data is now updated to the view from the database.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/updated_view.jpg\" alt=\"Updated View\"/></figure>\n\n\n\n<p>Let’s add one record from the browser by clicking the ‘Create New’ link. It will display the Create view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/create_view.jpg\" alt=\"Create View\"/></figure>\n\n\n\n<p>Let’s add some data in the following field.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_some_data.jpg\" alt=\"Add Some Data\"/></figure>\n\n\n\n<p>Click on the Create button and it will update the Index view as well add this new record to the database.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_record_database.jpg\" alt=\"New Record Database\"/></figure>\n\n\n\n<p>Now let’s go the SQL Server Object Explorer and refresh the database. Right-click on the Employees table and select the View data menu option. You will see that the record is added in the database.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/record_added_in_database.jpg\" alt=\"Record Added in Database\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In all ASP.NET MVC applications created in this tutorial we have been passing hard-coded data from the Controllers to the View templates. But, in order to build a real Web application, you might want to use a real database. In this chapter, we will see how to use a database engine in order to store [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3742"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3742"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3742/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3742"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3742"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3742"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3744,"date":"2020-09-18T12:39:41","date_gmt":"2020-09-18T12:39:41","guid":{"rendered":"http://backend.foobrdigital.com/?p=3744"},"modified":"2020-09-18T12:39:41","modified_gmt":"2020-09-18T12:39:41","slug":"asp-net-mvc-validation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-validation/","title":{"rendered":"Validation"},"content":{"rendered":"\n<p>Validation is an important aspect in ASP.NET MVC applications. It is used to check whether the user input is valid. ASP.NET MVC provides a set of validation that is easy-to-use and at the same time, it is also a powerful way to check for errors and, if necessary, display messages to the user.</p>\n\n\n\n<h2>DRY</h2>\n\n\n\n<p>DRY stands for&nbsp;<strong>Don&#8217;t Repeat Yourself</strong>&nbsp;and is one of the core design principles of ASP.NET MVC. From the development point of view, it is encouraged to specify functionality or behavior only at one place and then it is used in the entire application from that one place.</p>\n\n\n\n<p>This reduces the amount of code you need to write and makes the code you do write less error prone and easier to maintain.</p>\n\n\n\n<h2>Adding Validation to Model</h2>\n\n\n\n<p>Let’s take a look at a simple example of validation in our project from the last chapter. In this example, we will add data annotations to our model class, which provides some builtin set of validation attributes that can be applied to any model class or property directly in your application, such as&nbsp;<strong>Required, StringLength, RegularExpression,</strong>&nbsp;and&nbsp;<strong>Range</strong>&nbsp;validation attributes.</p>\n\n\n\n<p>It also contains formatting attributes like DataType that help with formatting and don&#8217;t provide any validation. The validation attributes specify behavior that you want to enforce on the model properties they are applied to.</p>\n\n\n\n<p>The Required and MinimumLength attributes indicates that a property must have a value; but nothing prevents a user from entering white space to satisfy this validation. The RegularExpression attribute is used to limit what characters can be input.</p>\n\n\n\n<p>Let’s update Employee class by adding different annotation attributes as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.ComponentModel.DataAnnotations;\nusing System.Data.Entity;\n\nnamespace MVCSimpleApp.Models {\n   public class Employee{\n      public int ID { get; set; }\n      &#91;StringLength(60, MinimumLength = 3)]\n\t\t\n      public string Name { get; set; }\n      &#91;Display(Name = \"Joining Date\")]\n      &#91;DataType(DataType.Date)]\n      &#91;DisplayFormat(DataFormatString = \"{0:yyyy-MM-dd}\",\n\t\t\n      ApplyFormatInEditMode = true)]\n      public DateTime JoiningDate { get; set; }\n      &#91;Range(22, 60)]\n      public int Age { get; set; }\n   }\n}</code></pre>\n\n\n\n<p>Now we also need to set limits to the database. However, the database in SQL Server Object Explorer shows the name property is set to NVARCHAR (MAX) as seen in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/nvarchar_max.jpg\" alt=\"NVARCHAR (MAX)\"/></figure>\n\n\n\n<p>To set this limitation on the database, we will use migrations to update the schema.</p>\n\n\n\n<p>Open the Package Manager Console window from Tools → NuGet Package Manager → Package Manager Console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/package_manager_console.jpg\" alt=\"Package Manager Console\"/></figure>\n\n\n\n<p>Enter the following commands one by one in the&nbsp;<strong>Package Manager Console</strong>&nbsp;window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enable-Migrations\nadd-migration DataAnnotations\nupdate-database\n</code></pre>\n\n\n\n<p>Following is the log after executing these commands in Package Manager Console window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/package_manager_console_window.jpg\" alt=\"Package Manager Console Window\"/></figure>\n\n\n\n<p>Visual Studio will also open the class which is derived from the DbMIgration class in which you can see the code that updates the schema constraints in&nbsp;<strong>Up</strong>&nbsp;method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>namespace MVCSimpleApp.Migrations {\n   using System;\n   using System.Data.Entity.Migrations;\n\t\n   public partial class DataAnnotations : DbMigration{\n      public override void Up(){\n         AlterColumn(\"dbo.Employees\", \"Name\", c => c.String(maxLength: 60));\n      }\n\t\t\n      public override void Down(){\n         AlterColumn(\"dbo.Employees\", \"Name\", c => c.String());\n      }\n   }\n}</code></pre>\n\n\n\n<p>The Name field has a maximum length of 60, which is the new length limits in the database as shown in the following snapshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_length_limits.jpg\" alt=\"New Length Limits\"/></figure>\n\n\n\n<p>Run this application and go to Create view by specifying the following URL&nbsp;<strong>http://localhost:63004/Employees/Create</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_employees_create.jpg\" alt=\"Localhost Employees Create\"/></figure>\n\n\n\n<p>Let’s enter some invalid data in these fields and click Create Button as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/enter_invalid_data.jpg\" alt=\"Enter Invalid Data\"/></figure>\n\n\n\n<p>You will see that jQuery client side validation detects the error, and it also displays an error message.</p>\n","protected":false},"excerpt":{"rendered":"<p>Validation is an important aspect in ASP.NET MVC applications. It is used to check whether the user input is valid. ASP.NET MVC provides a set of validation that is easy-to-use and at the same time, it is also a powerful way to check for errors and, if necessary, display messages to the user. DRY DRY [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3744"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3744"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3744/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3744"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3744"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3744"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3746,"date":"2020-09-18T12:41:51","date_gmt":"2020-09-18T12:41:51","guid":{"rendered":"http://backend.foobrdigital.com/?p=3746"},"modified":"2020-09-18T12:41:51","modified_gmt":"2020-09-18T12:41:51","slug":"asp-net-mvc-security","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-security/","title":{"rendered":"Security"},"content":{"rendered":"\n<p>In this chapter, we will discuss how to implement security features in the application. We will also look at the new membership features included with ASP.NET and available for use from ASP.NET MVC. In the latest release of ASP.NET, we can manage user identities with the following −</p>\n\n\n\n<ul><li>Cloud</li><li>SQL database</li><li>Local Windows active directory</li></ul>\n\n\n\n<p>In this chapter, we will also take a look at the new identity components that is a part of ASP.NET and see how to customize membership for our users and roles.</p>\n\n\n\n<h2>Authentication</h2>\n\n\n\n<p>Authentication of user means verifying the identity of the user. This is really important. You might need to present your application only to the authenticated users for obvious reasons.</p>\n\n\n\n<p>Let’s create a new ASP.Net MVC application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_mvc_application.jpg\" alt=\"New MVC Application\"/></figure>\n\n\n\n<p>Click OK to continue.</p>\n\n\n\n<p>When you start a new ASP.NET application, one of the steps in the process is configuring the authentication services for application needs.</p>\n\n\n\n<p>Select MVC template and you will see that the Change Authentication button is now enabled.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/authentication_button_enabled.jpg\" alt=\"Authentication Button Enabled\"/></figure>\n\n\n\n<p>This is done with the Change Authentication button that appears in the New Project dialog. The default authentication is, Individual User Accounts.</p>\n\n\n\n<h2>Authentication Options</h2>\n\n\n\n<p>When you click the Change button, you will see a dialog with four options, which are as follows.</p>\n\n\n\n<h3>No Authentication</h3>\n\n\n\n<p>The first option is No Authentication and this option is used when you want to build a website that doesn&#8217;t care who the visitors are.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/no_authentication.jpg\" alt=\"No Authentication\"/></figure>\n\n\n\n<p>It is open to anyone and every person connects as every single page. You can always change that later, but the No Authentication option means there will not be any features to identify users coming to the website.</p>\n\n\n\n<h3>Individual User Accounts</h3>\n\n\n\n<p>The second option is Individual User Accounts and this is the traditional forms-based authentication where users can visit a website. They can register, create a login, and by default their username is stored in a SQL Server database using some new ASP.NET identity features, which we&#8217;ll look at.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/individual_user_accounts.jpg\" alt=\"Individual User Accounts\"/></figure>\n\n\n\n<p>The password is also stored in the database, but it is hashed first. Since the password is hashed, you don&#8217;t have to worry about plain-text passwords sitting in a database.</p>\n\n\n\n<p>This option is typically used for internet sites where you want to establish the identity of a user. In addition to letting a user create a local login with a password for your site, you can also enable logins from third parties like Microsoft, Google, Facebook, and Twitter.</p>\n\n\n\n<p>This allows a user to log into your site using their Live account or their Twitter account and they can select a local username, but you don&#8217;t need to store any passwords.</p>\n\n\n\n<p>This is the option that we&#8217;ll spend some time with in this module; the individual user accounts option.</p>\n\n\n\n<h3>Work and School Accounts</h3>\n\n\n\n<p>The third option is to use organizational accounts and this is typically used for business applications where you will be using active directory federation services.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/work_school_accounts.jpg\" alt=\"Work School Accounts\"/></figure>\n\n\n\n<p>You will either set up Office 365 or use Azure Active Directory Services, and you have a single sign-on for internal apps and Cloud apps.</p>\n\n\n\n<p>You will also need to provide an app ID so your app will need to be registered with the Windows Azure management portal if this is Azure based, and the app ID will uniquely identify this application amongst all the applications that might be registered.</p>\n\n\n\n<h3>Windows Authentication</h3>\n\n\n\n<p>The fourth option is Windows authentication, which works well for intranet applications.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/windows_authentication.jpg\" alt=\"Windows Authentication\"/></figure>\n\n\n\n<p>A user logs into Windows desktop and can launch a browser to the application that sits inside the same firewall. ASP.NET can automatically pick up the user&#8217;s identity, the one that was established by active directory. This option does not allow any anonymous access to the site, but again that is a configuration setting that can be changed.</p>\n\n\n\n<p>Let&#8217;s take a look into the forms-based authentication, the one that goes by the name, Individual User Accounts. This application will store usernames and passwords, old passwords in a local SQL Server database, and when this project is created, Visual Studio will also add NuGet packages.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/formsbased_authentication.jpg\" alt=\"Forms-based Authentication\"/></figure>\n\n\n\n<p>Now run this application and when you first come to this application you will be an anonymous user.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/anonymous_user.jpg\" alt=\"Anonymous User\"/></figure>\n\n\n\n<p>You won&#8217;t have an account that you can log into yet so you will need to register on this site.</p>\n\n\n\n<p>Click on the Register link and you will see the following view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_register_link.jpg\" alt=\"Click Register Link\"/></figure>\n\n\n\n<p>Enter your email id and password.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/enter_emailid_password.jpg\" alt=\"Enter EmailId Password\"/></figure>\n\n\n\n<p>Click Register. Now, the application will recognize you.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_register.jpg\" alt=\"Click Register\"/></figure>\n\n\n\n<p>It will be able to display your name. In the following screenshot, you can see Hello, muhammad.waqas@outlook.com! is displayed. You can click on that and it&#8217;s a link to a page where you can change the password.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/display_your_name.jpg\" alt=\"Display Your Name\"/></figure>\n\n\n\n<p>You can also log off, shut down, reboot, come back a week later, and you should be able to log in with the credentials that you used earlier. Now click on the log off button and it will display the following page.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_logoff_button.jpg\" alt=\"Click Logoff Button\"/></figure>\n\n\n\n<p>Click again on the Log in link and you will go to the following page.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_login_link.jpg\" alt=\"Click Login Link\"/></figure>\n\n\n\n<p>You can login again with the same credentials.</p>\n\n\n\n<p>A lot of work goes on behind the scene to get to this point. However, what we want to do is examine each of the features and see how this UI is built. What is managing the logoff and the login process? Where is this information sorted in the database?</p>\n\n\n\n<p>Let&#8217;s just start with a couple of simple basics. First we will see how is this username displayed. Open the _Layout.cshtml from the View/Shared folder in the Solution explorer.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\" />\n      &lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\">\n      &lt;title>@ViewBag.Title - My ASP.NET Application&lt;/title>\n      @Styles.Render(\"~/Content/css\")\n      @Scripts.Render(\"~/bundles/modernizr\")\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div class = \"navbar navbar-inverse navbar-fixed-top\">\n         &lt;div class = \"container\">\n\t\t\t\n            &lt;div class = \"navbar-header\">\n               &lt;button type = \"button\" class = \"navbar-toggle\" datatoggle = \"collapse\"\n                  data-target = \".navbar-collapse\">\n                     &lt;span class = \"icon-bar\">&lt;/span>\n                     &lt;span class = \"icon-bar\">&lt;/span>\n                     &lt;span class = \"icon-bar\">&lt;/span>\n               &lt;/button>\n\t\t\t\t\t\n               @Html.ActionLink(\"Application name\", \"Index\", \"Home\", new\n               { area = \"\" }, new { @class = \"navbar-brand\" })\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"navbar-collapse collapse\">\n               &lt;ul class = \"nav navbar-nav\">\n                  &lt;li>@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li>\n                  &lt;li>@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li>\n                  &lt;li>@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li>\n               &lt;/ul>\n\t\t\t\t\t\n               @Html.Partial(\"_LoginPartial\")\n            &lt;/div>\n\t\t\t\t\n         &lt;/div>\n\t\t\t\n      &lt;/div>\n      &lt;div class = \"container body-content\">\n         @RenderBody()\n         &lt;hr />\n         &lt;footer>\n            &lt;p>© @DateTime.Now.Year - My ASP.NET Application&lt;/p>\n         &lt;/footer>\n      &lt;/div>\n\t\t\n      @Scripts.Render(\"~/bundles/jquery\")\n      @Scripts.Render(\"~/bundles/bootstrap\")\n      @RenderSection(\"scripts\", required: false)\n\t\t\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>There is a common navigation bar, the application name, the menu, and there is a partial view that&#8217;s being rendered called _loginpartial. That&#8217;s actually the view that displays the username or the register and login name. So _loginpartial.cshtml is also in the shared folder.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@using Microsoft.AspNet.Identity\n@if (Request.IsAuthenticated) {\n   using (Html.BeginForm(\"LogOff\", \"Account\", FormMethod.Post,\n      new { id = \"logoutForm\", @class = \"navbar-right\" })){\n         @Html.AntiForgeryToken()\n         &lt;ul class = \"nav navbar-nav navbar-right\">\n            &lt;li>\n               @Html.ActionLink(\"Hello \" + User.Identity.GetUserName() + \"!\",\n               \"Index\", \"Manage\", routeValues: null, htmlAttributes: new { title = \"Manage\" })\n            &lt;/li>\n\t\t\t\t\n            &lt;li>\n               &lt;a href = \"javascript:document.getElementById('logoutForm').submit()\">Logoff&lt;/a>\n            &lt;/li>\n\t\t\t\t\n         &lt;/ul>\n      }\n}else{\n   &lt;ul class = \"nav navbar-nav navbar-right\">\n      &lt;li>@Html.ActionLink(\"Register\", \"Register\", \"Account\", routeValues:\n         null, htmlAttributes: new { id = \"registerLink\" })&lt;/li>\n\t\t\t\n      &lt;li>@Html.ActionLink(\"Log in\", \"Login\", \"Account\", routeValues: null,\n         htmlAttributes: new { id = \"loginLink\" })&lt;/li>\n   &lt;/ul>\n}</code></pre>\n\n\n\n<p>As you can see above, there are if/else statements. If we do not know who the user is, because the request is not authenticated, this view will display register and login links. The user can click on the link to log in or register. All this is done by the account controller.</p>\n\n\n\n<p>For now, we want to see how to get the username, and that&#8217;s inside Request.IsAuthenticated. You can see a call to User.Identity.GetUserName. That will retrieve the username, which in this case is ‘muhammad.waqas@outlook.com’</p>\n\n\n\n<h2>Authorization</h2>\n\n\n\n<p>Let&#8217;s suppose that we have some sort of information which we want to protect from unauthenticated users. So let’s create a new controller to display that information, but only when a user is logged in.</p>\n\n\n\n<p>Right-click on the controller folder and select Add → Controller.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/user_logged_in.jpg\" alt=\"User Logged in\"/></figure>\n\n\n\n<p>Select an MVC 5 controller &#8211; Empty controller and click ‘Add’.</p>\n\n\n\n<p>Enter the name SecretController and click ‘Add’ button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/secretcontroller.jpg\" alt=\"SecretController\"/></figure>\n\n\n\n<p>It will have two actions inside as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System.Web.Mvc;\n\nnamespace MVCSecurityDemo.Controllers{\n   public class SecretController : Controller{\n      // GET: Secret\n      public ContentResult Secret(){\n         return Content(\"Secret informations here\");\n      }\n\t\t\n      public ContentResult PublicInfo(){\n         return Content(\"Public informations here\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>When you run this application, you can access this information without any authentication as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/secret_information_here.jpg\" alt=\"Secret Information Here\"/></figure>\n\n\n\n<p>So only authenticated users should be able to get to Secret action method and the PublicInfo can be used by anyone without any authentication.</p>\n\n\n\n<p>To protect this particular action and keep unauthenticated users from arriving here, you can use the Authorize attribute. The Authorize attribute without any other parameters will make sure that the identity of the user is known and they&#8217;re not an anonymous user.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// GET: Secret\n&#91;Authorize]\npublic ContentResult Secret(){\n   return Content(\"Secret informations here\");\n}</code></pre>\n\n\n\n<p>Now run this application again and specify the same URL&nbsp;<strong>http://localhost:54232/Secret/Secret</strong>. The MVC application will detect that you do not have access to that particular area of the application and it will redirect you automatically to the login page, where it will give you a chance to log in and try to get back to that area of the application where you were denied.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/redirect_automatically_login_page.jpg\" alt=\"Redirect Automatically Login Page\"/></figure>\n\n\n\n<p>You can see that it is specified in the return URL, which essentially tells this page that if the user logs in successfully, redirect them back to /secret/secret.</p>\n\n\n\n<p>Enter your credentials and click ‘Log in’ button. You will see that it goes directly to that page.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/secret_information_here.jpg\" alt=\"Secret Information Here\"/></figure>\n\n\n\n<p>If you come back to the home page and log off, you cannot get to the secret page. You will be asked again to log in, but if go to /Secret/PublicInfo, you can see that page, even when you are not authenticated.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/public_information_here.jpg\" alt=\"Public Information Here\"/></figure>\n\n\n\n<p>So, when you don&#8217;t want to be placing authorization on every action when you&#8217;re inside a controller where pretty much everything requires authorization. In that case you can always apply this filter to the controller itself and now every action inside of this controller will require the user to be authenticated.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System.Web.Mvc;\n\nnamespace MVCSecurityDemo.Controllers{\n   &#91;Authorize]\n   public class SecretController : Controller{\n      // GET: Secret\n      public ContentResult Secret(){\n         return Content(\"Secret informations here\");\n      }\n\t\t\n      public ContentResult PublicInfo(){\n         return Content(\"Public informations here\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>But if you really want any action to be open, you can come override this authorization rule with another attribute, which is, AllowAnonymous.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System.Web.Mvc;\n\nnamespace MVCSecurityDemo.Controllers{\n   &#91;Authorize]\n   public class SecretController : Controller{\n      // GET: Secret\n      public ContentResult Secret(){\n         return Content(\"Secret informations here\");\n      }\n\t\t\n      &#91;AllowAnonymous]\n      public ContentResult PublicInfo(){\n         return Content(\"Public informations here\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>Run this application and you can access the /Secret/PublicInfo with logging in but other action will require authentication.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/public_information_here.jpg\" alt=\"Public Information Here\"/></figure>\n\n\n\n<p>It will allow anonymous users into this one action only.</p>\n\n\n\n<p>With the Authorize attribute, you can also specify some parameters, like allow some specific users into this action.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System.Web.Mvc;\n\nnamespace MVCSecurityDemo.Controllers{\n   &#91;Authorize(Users = \"ali.khan@outlook.com\")]\n   public class SecretController : Controller{\n      // GET: Secret\n      public ContentResult Secret(){\n         return Content(\"Secret informations here\");\n      }\n\t\t\n      &#91;AllowAnonymous]\n      public ContentResult PublicInfo(){\n         return Content(\"Public informations here\");\n      }\n   }\n}</code></pre>\n\n\n\n<p>When you run this application and go to /secret/secret, it will ask you to log in because it is not the proper user for this controller.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/go_to_secret.jpg\" alt=\"Go to Secret\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss how to implement security features in the application. We will also look at the new membership features included with ASP.NET and available for use from ASP.NET MVC. In the latest release of ASP.NET, we can manage user identities with the following − Cloud SQL database Local Windows active directory [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3746"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3746"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3746/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3746"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3746"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3746"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3748,"date":"2020-09-18T12:43:05","date_gmt":"2020-09-18T12:43:05","guid":{"rendered":"http://backend.foobrdigital.com/?p=3748"},"modified":"2020-09-18T12:43:05","modified_gmt":"2020-09-18T12:43:05","slug":"asp-net-mvc-caching","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-caching/","title":{"rendered":"Caching"},"content":{"rendered":"\n<p>In this chapter, we will be focusing on one of the most common ASP.NET techniques like Caching to improve the performance of the application. Caching means to store something in memory that is being used frequently to provide better performance. We will see how you can dramatically improve the performance of an ASP.NET MVC application by taking advantage of the output cache.</p>\n\n\n\n<p>In ASP.NET MVC, there is an OutputCache filter attribute that you can apply and this is the same concept as output caching in web forms. The output cache enables you to cache the content returned by a controller action.</p>\n\n\n\n<p>Output caching basically allows you to store the output of a particular controller in the memory. Hence, any future request coming for the same action in that controller will be returned from the cached result. That way, the same content does not need to be generated each and every time the same controller action is invoked.</p>\n\n\n\n<h2>Why Caching?</h2>\n\n\n\n<p>We need caching in many different scenarios to improve the performance of an application. For example, you have an ASP.NET MVC application, which displays a list employees. Now when these records are retrieved from the database by executing a database query each and every time a user invokes the controller action it returns the Index view.</p>\n\n\n\n<p>Hence you can take advantage of the output cache to avoid executing a database query every time a user invokes the same controller action. In this case, the view will be retrieved from the cache instead of being regenerated from the controller action.</p>\n\n\n\n<p>Caching enables you to avoid performing redundant work on the server.</p>\n\n\n\n<p>Let’s take a look at a simple example of caching in our project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;OutputCache(Duration = 60)]\npublic ActionResult Index(){\n   var employees = from e in db.Employees\n   orderby e.ID\n   select e;\n   return View(employees);\n}</code></pre>\n\n\n\n<p>As you can see, we have added “OutputCache” attribute on the index action of the EmployeeController. Now to understand this concept, let us run this application in debugger mode and also insert a breakpoint in the Index action method.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/outputcache.jpg\" alt=\"OutputCache\"/></figure>\n\n\n\n<p>Specify the following URL&nbsp;<strong>http://localhost:63004/employee</strong>, and press ‘Enter’. You will see that the breakpoint is hit in the Index action method.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/breakpoint_is_hit.jpg\" alt=\"Breakpoint is Hit\"/></figure>\n\n\n\n<p>Press ‘F5’ button to continue and you will see the list of employees on your view, which are retrieved from the database.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/list_of_employees_retrieved.jpg\" alt=\"List of Employees Retrieved\"/></figure>\n\n\n\n<p>Refresh the browser again within 60 seconds and you will see that the breakpoint is not hit this time. This is because we have used output cache with duration of seconds. So it will cache this result for 60 seconds and when you refresh the browser, it will get the result from the cache, and it won’t load the content from the database server.</p>\n\n\n\n<p>In addition to duration parameter, there are other settings options as well which you can use with output cache. These settings are not only for MVC framework but it is inherited from ASP.Net Caching.</p>\n\n\n\n<h2>Varying the Output Cache</h2>\n\n\n\n<p>In some cases, you might want different cached versions, such as, when you create a detail page, then when you click on the detailed link you will get details for the selected employee.</p>\n\n\n\n<p>But first we need to create the detail view. For this, right-click on the Details action method from the EmployeeController and select Add View…</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/create_detail_view.jpg\" alt=\"Create Detail View\"/></figure>\n\n\n\n<p>You will see the Details name is selected by default. Now select Details from the Template dropdown and Employee from the Model class dropdown.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/template_dropdown.jpg\" alt=\"Template Dropdown\"/></figure>\n\n\n\n<p>Click ‘Add’ to continue and you will see the Details.cshtml.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@model MVCSimpleApp.Models.Employee\n@{\n   Layout = null;\n}\n\n&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta name = \"viewport\" content = \"width = device-width\" />\n      &lt;title>Details&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div>\n         &lt;h4>Employee&lt;/h4>\n         &lt;hr />\n         &lt;dl class = \"dl-horizontal\">\n            &lt;dt>\n               @Html.DisplayNameFor(model => model.Name)\n            &lt;/dt>\n\t\t\t\t\n            &lt;dd>\n               @Html.DisplayFor(model => model.Name)\n            &lt;/dd>\n\t\t\t\t\n            &lt;dt>\n               @Html.DisplayNameFor(model => model.JoiningDate)\n            &lt;/dt>\n\t\t\t\t\n            &lt;dd>\n               @Html.DisplayFor(model => model.JoiningDate)\n            &lt;/dd>\n\t\t\t\t\n            &lt;dt>\n               @Html.DisplayNameFor(model => model.Age)\n            &lt;/dt>\n\t\t\t\t\n            &lt;dd>\n               @Html.DisplayFor(model => model.Age)\n            &lt;/dd>\n\t\t\t\t\n         &lt;/dl>\n      &lt;/div>\n\t\t\n      &lt;p>\n         @Html.ActionLink(\"Edit\", \"Edit\", new { id = Model.ID }) |\n         @Html.ActionLink(\"Back to List\", \"Index\")\n      &lt;/p>\n\t\t\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>You can take advantage of the VaryByParam property of the [OutputCache] attribute. This property enables you to create different cached versions of the very same content when a form parameter or query string parameter varies. Following is the implementation of Details action.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// GET: Employee/Details/5\n&#91;OutputCache(Duration = int.MaxValue, VaryByParam = \"id\")]\n\npublic ActionResult Details(int id){\n   var employee = db.Employees.SingleOrDefault(e => e.ID == id);\n   return View(employee);\n}</code></pre>\n\n\n\n<p>When the above code is compiled and executed, you will receive the following output by specifying the URL&nbsp;<strong>http://localhost:63004/employee</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/create_new.jpg\" alt=\"Create New\"/></figure>\n\n\n\n<p>Click on the Details link of any link and you will see the details view of that particular employee.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/particular_employee_details.jpg\" alt=\"Particular Employee Details\"/></figure>\n\n\n\n<p>The Details() action includes a VaryByParam property with the value “Id”. When different values of the Id parameter are passed to the controller action, different cached versions of the Details view are generated.</p>\n\n\n\n<p>It is important to understand that using the VaryByParam property results in more caching. A different cached version of the Details view is created for each different version of the Id parameter.</p>\n\n\n\n<h2>Cache Profile</h2>\n\n\n\n<p>You can create a cache profile in the web.config file. It is an alternative to configuring output cache properties by modifying properties of the [OutputCache] attribute. It offers a couple of important advantages which are as follows.</p>\n\n\n\n<ul><li>Controls how controller actions cache content in one central location.</li><li>Creates one cache profile and apply the profile to several controllers or controller actions.</li><li>Modifies the web configuration file without recompiling your application.</li><li>Disables caching for an application that has already been deployed to production.</li></ul>\n\n\n\n<p>Let’s take a look at a simple example of cache profile by creating the cache profile in web.config file. The &lt;caching&gt; section must appear within the &lt;system.web&gt; section.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;caching>\n   &lt;outputCacheSettings>\n      &lt;outputCacheProfiles>\n         &lt;add name = \"Cache10Min\" duration = \"600\" varyByParam = \"none\"/>\n      &lt;/outputCacheProfiles>\n   &lt;/outputCacheSettings>\n&lt;/caching></code></pre>\n\n\n\n<p>You can apply the Cache10Min profile to a controller action with the [OutputCache] attribute which is as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;OutputCache(CacheProfile = \"Cache10Min\")]\n\npublic ActionResult Index(){\n   var employees = from e in db.Employees\n   orderby e.ID\n   select e;\n   return View(employees);\n}</code></pre>\n\n\n\n<p>Run this application and specify the following URL&nbsp;<strong>http://localhost:63004/employee</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/invoke_index_action.jpg\" alt=\"Invoke Index Action\"/></figure>\n\n\n\n<p>If you invoke the Index() action as shown above then the same time will be returned for 10 Min.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will be focusing on one of the most common ASP.NET techniques like Caching to improve the performance of the application. Caching means to store something in memory that is being used frequently to provide better performance. We will see how you can dramatically improve the performance of an ASP.NET MVC application [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3748"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3748"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3748/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3748"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3748"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3748"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3750,"date":"2020-09-18T12:44:00","date_gmt":"2020-09-18T12:44:00","guid":{"rendered":"http://backend.foobrdigital.com/?p=3750"},"modified":"2020-09-18T12:44:00","modified_gmt":"2020-09-18T12:44:00","slug":"asp-net-mvc-razor","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-razor/","title":{"rendered":"Razor"},"content":{"rendered":"\n<p>In this chapter, we will look at the Razor view engine in ASP.NET MVC applications and some of the reasons why Razor exists. Razor is a markup syntax that lets you embed server-based code into web pages using C# and VB.Net. It is not a programming language. It is a server side markup language.</p>\n\n\n\n<p>Razor has no ties to ASP.NET MVC because Razor is a general-purpose templating engine. You can use it anywhere to generate output like HTML. It&#8217;s just that ASP.NET MVC has implemented a view engine that allows us to use Razor inside of an MVC application to produce HTML.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/view_engine.jpg\" alt=\"View Engine\"/></figure>\n\n\n\n<p>You will have a template file that&#8217;s a mix of some literal text and some blocks of code. You combine that template with some data or a specific model where the template specifies where the data is supposed to appear, and then you execute the template to generate your output.</p>\n\n\n\n<h2>Razor Vs ASPX</h2>\n\n\n\n<ul><li>Razor is very similar to how ASPX files work. ASPX files are templates, which contain literal text and some C# code that specifies where your data should appear. We execute those to generate the HTML for our application.</li><li>ASPX files have a dependency on the ASP.NET runtime to be available to parse and execute those ASPX files. Razor has no such dependencies.</li><li>Unlike ASPX files, Razor has some different design goals.</li></ul>\n\n\n\n<h2>Goals</h2>\n\n\n\n<p>Microsoft wanted Razor to be easy to use and easy to learn, and work inside of tools like Visual Studio so that IntelliSense is available, the debugger is available, but they wanted Razor to have no ties to a specific technology, like ASP.NET or ASP.NET MVC.</p>\n\n\n\n<p>If you&#8217;re familiar with the life cycle of an ASPX file, then you&#8217;re probably aware that there&#8217;s a dependency on the ASP.NET runtime to be available to parse and execute those ASPX files. Microsoft wanted Razor to be smart, to make a developer&#8217;s job easier.</p>\n\n\n\n<p>Let’s take a look at a sample code from an ASPX file, which contains some literal text. This is our HTML markup. It also contains little bits of C# code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;% foreach (var item in Model) { %>\n   &lt;tr>\n      &lt;td>\n         &lt;%: Html.ActionLink(\"Edit\", \"Edit\", new { id = item.ID })%> |\n         &lt;%: Html.ActionLink(\"Details\", \"Details\", new { id = item.ID }) %>|\n         &lt;%: Html.ActionLink(\"Delete\", \"Delete\", new { id = item.ID })%>\n      &lt;/td>\n\t\t\n      &lt;td>\n         &lt;%: item.Name %>\n      &lt;/td>\n\t\t\n      &lt;td>\n         &lt;%: String.Format(\"{0,g}\", item.JoiningDate) %>\n      &lt;/td>\n\t\t\n   &lt;/tr>\n&lt;%}%></code></pre>\n\n\n\n<p>But these Web forms were basically repurposed by Microsoft to work with the earlier releases of MVC, meaning ASPX files were never a perfect match for MVC.</p>\n\n\n\n<p>The syntax is a bit clunky when you need to transition from C# code back to HTML and from HTML code back into C# code. You are also prompted by IntelliSense to do things that just don&#8217;t make sense in an MVC project, like add directives for output caching and user controls into an ASPX view.</p>\n\n\n\n<p>Now look at this code which produces the same output, the difference being it is using the Razor syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@foreach (var item in Model) {\n   &lt;tr>\n      &lt;td>\n         @Html.ActionLink(\"Edit\", \"Edit\", new { id = item.ID }) |\n         @Html.ActionLink(\"Details\", \"Details\", new { id = item.ID }) |\n         @Html.ActionLink(\"Delete\", \"Delete\", new { id = item.ID })\n      &lt;/td>\n\t\t\n      &lt;td>\n         @item.Name\n      &lt;/td>\n\t\t\n      &lt;td>\n         @String.Format(\"{0,g}\", item.JoiningDate)\n      &lt;/td>\n   &lt;/tr>\n}</code></pre>\n\n\n\n<p>With Razor syntax you can begin a bit of C# code by using the ‘@’ sign and the Razor parse will automatically switch into parsing this statement, this foreach statement, as a bit of C# code.</p>\n\n\n\n<p>But when we&#8217;re finished with the foreach statement and we have our opening curly brace, we can transition from C# code into HTML without putting an explicit token in there, like the percent in the angle bracket signs.</p>\n\n\n\n<p>The Razor parser is smart enough to switch between C# code and HTML and again, from HTML back into C# code when we need to place our closing curly brace here. If you compare these two blocks of code, I think you&#8217;ll agree that the Razor version is easier to read and easier to write.</p>\n\n\n\n<h2>Creating a View Using Razor</h2>\n\n\n\n<p>Let&#8217;s create a new ASP.Net MVC project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/razor_mvc_project.jpg\" alt=\"Razor MVC Project\"/></figure>\n\n\n\n<p>Enter the name of project in the name field and click Ok.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/project_name.jpg\" alt=\"project_name\"/></figure>\n\n\n\n<p>To keep things simple, select the Empty option and check the MVC checkbox in the ‘Add folders and core references for’ section and click Ok. It will create a basic MVC project with minimal predefined content.</p>\n\n\n\n<p>Once the project is created by Visual Studio, you will see a number of files and folders displayed in the Solution Explorer window. As we have created ASP.Net MVC project from an empty project template, so at the moment the application does not contain anything to run. Since we start with an empty application and don&#8217;t even have a single controller, let’s add a HomeController.</p>\n\n\n\n<p>To add a controller right-click on the controller folder in the solution explorer and select Add → Controller. It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/razor_controller_folder.jpg\" alt=\"Razor Controller Folder\"/></figure>\n\n\n\n<p>Select the&nbsp;<strong>MVC 5 Controller – Empty</strong>&nbsp;option and click Add button and then the Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/homecontroller.jpg\" alt=\"HomeController\"/></figure>\n\n\n\n<p>Set the name to HomeController and click ‘Add’ button. You will see a new C# file ‘HomeController.cs’ in the Controllers folder, which is open for editing in Visual Studio as well.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/editing_in_visual_studio.jpg\" alt=\"Editing in Visual Studio\"/></figure>\n\n\n\n<p>Right-click on the Index action and select Add View…</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/index_action_add_view.jpg\" alt=\"Index Action Add View\"/></figure>\n\n\n\n<p>Select Empty from the Template dropdown and click Add button. Visual Studio will create an Index.cshtml file inside the&nbsp;<strong>View/Home</strong>&nbsp;folder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/create_index_cshtml.jpg\" alt=\"Create Index.cshtml\"/></figure>\n\n\n\n<p>Notice that Razor view has a cshtml extension. If you&#8217;re building your MVC application using Visual Basic it will be a VBHTML extension. At the top of this file is a code block that is explicitly setting this Layout property to null.</p>\n\n\n\n<p>When you run this application you will see the blank webpage because we have created a View from an Empty template.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/blank_webpage.jpg\" alt=\"Blank Webpage\"/></figure>\n\n\n\n<p>Let&#8217;s add some C# code to make things more interesting. To write some C# code inside a Razor view, the first thing we will do is type the ‘@’ symbol that tells the parser that it is going to be doing something in code.</p>\n\n\n\n<p>Let&#8217;s create a FOR loop specify ‘@i’ inside the curly braces, which is essentially telling Razor to put the value of i.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@{\n   Layout = null;\n} \n\n&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta name = \"viewport\" content = \"width = device-width\" />\n      &lt;title>Index&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div>\n         @for (int index = 0; index &lt; 12; index++){\n            &lt;div>@index &lt;/div>\n         }\n      &lt;/div>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Run this application and you will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/razor_output.jpg\" alt=\"Razor Output\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will look at the Razor view engine in ASP.NET MVC applications and some of the reasons why Razor exists. Razor is a markup syntax that lets you embed server-based code into web pages using C# and VB.Net. It is not a programming language. It is a server side markup language. Razor [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3750"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3750"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3750/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3750"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3750"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3750"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3752,"date":"2020-09-18T12:46:58","date_gmt":"2020-09-18T12:46:58","guid":{"rendered":"http://backend.foobrdigital.com/?p=3752"},"modified":"2020-09-18T12:46:58","modified_gmt":"2020-09-18T12:46:58","slug":"asp-net-mvc-data-annotations","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-data-annotations/","title":{"rendered":"Data Annotations"},"content":{"rendered":"\n<p>DataAnnotations is used to configure your model classes, which will highlight the most commonly needed configurations. DataAnnotations are also understood by a number of .NET applications, such as ASP.NET MVC, which allows these applications to leverage the same annotations for client-side validations. DataAnnotation attributes override default Code-First conventions.</p>\n\n\n\n<p><strong>System.ComponentModel.DataAnnotations</strong>&nbsp;includes the following attributes that impacts the nullability or size of the column.</p>\n\n\n\n<ul><li>Key</li><li>Timestamp</li><li>ConcurrencyCheck</li><li>Required</li><li>MinLength</li><li>MaxLength</li><li>StringLength</li></ul>\n\n\n\n<p><strong>System.ComponentModel.DataAnnotations.Schema</strong>&nbsp;namespace includes the following attributes that impacts the schema of the database.</p>\n\n\n\n<ul><li>Table</li><li>Column</li><li>Index</li><li>ForeignKey</li><li>NotMapped</li><li>InverseProperty</li></ul>\n\n\n\n<h2>Key</h2>\n\n\n\n<p>Entity Framework relies on every entity having a key value that it uses for tracking entities. One of the conventions that Code First depends on is how it implies which property is the key in each of the Code First classes.</p>\n\n\n\n<p>The convention is to look for a property named “Id” or one that combines the class name and “Id”, such as “StudentId”. The property will map to a primary key column in the database. The Student, Course and Enrollment classes follow this convention.</p>\n\n\n\n<p>Now let’s suppose Student class used the name StdntID instead of ID. When Code First does not find a property that matches this convention it will throw an exception because of Entity Framework’s requirement that you must have a key property.</p>\n\n\n\n<p>You can use the key annotation to specify which property is to be used as the EntityKey.</p>\n\n\n\n<p>Let’s take a look at the Student class which contains StdntID. It doesn’t follow the default Code First convention so to handle this, Key attribute is added, which will make it a primary key.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Student{\n   &#91;Key]\n   public int StdntID { get; set; }\n   public string LastName { get; set; }\n   public string FirstMidName { get; set; }\n   public DateTime EnrollmentDate { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>When you run the application and look into the database in SQL Server Explorer, you will see that the primary key is now StdntID in Students table.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/primary_key_stdntid.jpg\" alt=\"Primary Key StdntID\"/></figure>\n\n\n\n<p>Entity Framework also supports composite keys. Composite keys are primary keys that consist of more than one property. For example, you have a DrivingLicense class whose primary key is a combination of LicenseNumber and IssuingCountry.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DrivingLicense{\n   &#91;Key, Column(Order = 1)]\n   public int LicenseNumber { get; set; }\n\t\n   &#91;Key, Column(Order = 2)]\n   public string IssuingCountry { get; set; }\n   public DateTime Issued { get; set; }\n   public DateTime Expires { get; set; }\n}</code></pre>\n\n\n\n<p>When you have composite keys, Entity Framework requires you to define an order of the key properties. You can do this using the Column annotation to specify an order.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/composite_keys.jpg\" alt=\"Composite Keys\"/></figure>\n\n\n\n<h2>Timestamp</h2>\n\n\n\n<p>Code First will treat Timestamp properties the same as ConcurrencyCheck properties, but it will also ensure that the database field generated by Code First is non-nullable.</p>\n\n\n\n<p>It&#8217;s more common to use rowversion or timestamp fields for concurrency checking. But rather than using the ConcurrencyCheck annotation, you can use the more specific TimeStamp annotation as long as the type of the property is byte array. You can only have one timestamp property in a given class.</p>\n\n\n\n<p>Let’s take a look at a simple example by adding the TimeStamp property to the Course class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Course{\n   public int CourseID { get; set; }\n   public string Title { get; set; }\n   public int Credits { get; set; }\n   &#91;Timestamp]\n   public byte&#91;] TStamp { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>As you can see in the above example, Timestamp attribute is applied to Byte[] property of the Course class. So, Code First will create a timestamp column TStamp in the Courses table.</p>\n\n\n\n<h2>ConcurrencyCheck</h2>\n\n\n\n<p>The ConcurrencyCheck annotation allows you to flag one or more properties to be used for concurrency checking in the database, when a user edits or deletes an entity. If you&#8217;ve been working with the EF Designer, this aligns with setting a property&#8217;s ConcurrencyMode to Fixed.</p>\n\n\n\n<p>Let’s take a look at a simple example and see how ConcurrencyCheck works by adding it to the Title property in Course class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Course{\n   public int CourseID { get; set; }\n\t\n   &#91;ConcurrencyCheck]\n   public string Title { get; set; }\n   public int Credits { get; set; }\n\t\n   &#91;Timestamp, DataType(\"timestamp\")]\n   public byte&#91;] TimeStamp { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>In the above Course class, ConcurrencyCheck attribute is applied to the existing Title property. Code First will include Title column in update command to check for optimistic concurrency as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>exec sp_executesql N'UPDATE &#91;dbo].&#91;Courses]\n   SET &#91;Title] = @0\n   WHERE ((&#91;CourseID] = @1) AND (&#91;Title] = @2))\n   ',N'@0 nvarchar(max) ,@1 int,@2 nvarchar(max)\n',@0 = N'Maths',@1 = 1,@2 = N'Calculus'\ngo\n</code></pre>\n\n\n\n<h2>Required</h2>\n\n\n\n<p>The Required annotation tells EF that a particular property is required. Let’s have a look at the following Student class in which Required id is added to the FirstMidName property. Required attribute will force EF to ensure that the property has data in it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Student{\n   &#91;Key]\n   public int StdntID { get; set; }\n\t\n   &#91;Required]\n   public string LastName { get; set; }\n\t\n   &#91;Required]\n   public string FirstMidName { get; set; }\n   public DateTime EnrollmentDate { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>You can see in the above example of Student class Required attribute is applied to FirstMidName and LastName. So, Code First will create a NOT NULL FirstMidName and LastName column in the Students table as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/students_table.jpg\" alt=\"Students Table\"/></figure>\n\n\n\n<h2>MaxLength</h2>\n\n\n\n<p>The MaxLength attribute allows you to specify additional property validations. It can be applied to a string or array type property of a domain class. EF Code First will set the size of a column as specified in MaxLength attribute.</p>\n\n\n\n<p>Let’s take a look at the following Course class in which MaxLength(24) attribute is applied to Title property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Course{\n   public int CourseID { get; set; }\n   &#91;ConcurrencyCheck]\n   &#91;MaxLength(24)]\n\t\n   public string Title { get; set; }\n   public int Credits { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>When you run the above application, Code-First will create a nvarchar(24) column Title in the Coursed table as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/column_title_coursed_table.jpg\" alt=\"Column Title Coursed Table\"/></figure>\n\n\n\n<p>Now when the user sets the Title which contains more than 24 characters, EF will throw EntityValidationError.</p>\n\n\n\n<h2>MinLength</h2>\n\n\n\n<p>The MinLength attribute allows you to specify additional property validations, just as you did with MaxLength. MinLength attribute can also be used with MaxLength attribute as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Course{\n   public int CourseID { get; set; }\n   &#91;ConcurrencyCheck]\n   &#91;MaxLength(24) , MinLength(5)]\n   public string Title { get; set; }\n   public int Credits { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>EF will throw EntityValidationError, if you set a value of Title property less than the specified length in MinLength attribute or greater than the specified length in MaxLength attribute.</p>\n\n\n\n<h2>StringLength</h2>\n\n\n\n<p>StringLength also allows you to specify additional property validations like MaxLength. The difference being StringLength attribute can only be applied to a string type property of Domain classes.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Course{\n   public int CourseID { get; set; }\n   &#91;StringLength (24)]\n   public string Title { get; set; }\n   public int Credits { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>Entity Framework also validates the value of a property for StringLength attribute. Now, if the user sets the Title, which contains more than 24 characters, then EF will throw EntityValidationError.</p>\n\n\n\n<h2>Table</h2>\n\n\n\n<p>Default Code First convention creates a table name same as the class name. If you are letting Code First create the database, you can also change the name of the tables it is creating. You can use Code First with an existing database. But it&#8217;s not always the case that the names of the classes match the names of the tables in your database.</p>\n\n\n\n<p>Table attribute overrides this default convention. EF Code First will create a table with a specified name in Table attribute for a given domain class.</p>\n\n\n\n<p>Let’s take a look at an example in which the class is named Student, and by convention, Code First presumes this will map to a table named Students. If that&#8217;s not the case you can specify the name of the table with the Table attribute as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;Table(\"StudentsInfo\")]\npublic class Student{\n   &#91;Key]\n   public int StdntID { get; set; }\n\t\n   &#91;Required]\n   public string LastName { get; set; }\n\t\n   &#91;Required]\n   public string FirstMidName { get; set; }\n   public DateTime EnrollmentDate { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>You can now see that the Table attribute specifies the table as StudentsInfo. When the table is generated, you will see the table name StudentsInfo as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/table_name_studentsinfo.jpg\" alt=\"Table Name StudentsInfo\"/></figure>\n\n\n\n<p>You cannot only specify the table name but you can also specify a schema for the table using the Table attribute using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;Table(\"StudentsInfo\", Schema = \"Admin\")]\n\npublic class Student{\n   &#91;Key]\n   public int StdntID { get; set; }\n\t\n   &#91;Required]\n   public string LastName { get; set; }\n\t\n   &#91;Required]\n   public string FirstMidName { get; set; }\n   public DateTime EnrollmentDate { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>In the above example, the table is specified with admin schema. Now Code First will create StudentsInfo table in Admin schema as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/studentsinfo_table_in_admin_schema.jpg\" alt=\"StudentsInfo Table in Admin Schema\"/></figure>\n\n\n\n<h2>Column</h2>\n\n\n\n<p>It is also the same as Table attribute, but Table attribute overrides the table behavior while Column attribute overrides the column behavior. Default Code First convention creates a column name same as the property name.</p>\n\n\n\n<p>If you are letting Code First create the database, and you also want to change the name of the columns in your tables. Column attribute overrides this default convention. EF Code First will create a column with a specified name in the Column attribute for a given property.</p>\n\n\n\n<p>Let’s take a look at the following example again in which the property is named FirstMidName, and by convention, Code First presumes this will map to a column named FirstMidName. If that&#8217;s not the case, you can specify the name of the column with the Column attribute as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Student{\n   public int ID { get; set; }\n   public string LastName { get; set; }\n\t\n   &#91;Column(\"FirstName\")]\n   public string FirstMidName { get; set; }\n   public DateTime EnrollmentDate { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>You can now see that the Column attribute specifies the column as FirstName. When the table is generated, you will see the column name FirstName as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/column_name_firstname.jpg\" alt=\"Column Name FirstName\"/></figure>\n\n\n\n<h2>Index</h2>\n\n\n\n<p>The Index attribute was introduced in Entity Framework 6.1.&nbsp;<strong>Note</strong>&nbsp;− If you are using an earlier version, the information in this section does not apply.</p>\n\n\n\n<p>You can create an index on one or more columns using the IndexAttribute. Adding the attribute to one or more properties will cause EF to create the corresponding index in the database when it creates the database.</p>\n\n\n\n<p>Indexes make the retrieval of data faster and efficient, in most cases. However, overloading a table or view with indexes could unpleasantly affect the performance of other operations such as inserts or updates.</p>\n\n\n\n<p><strong>Indexing</strong>&nbsp;is the new feature in Entity Framework where you can improve the performance of your Code First application by reducing the time required to query data from the database.</p>\n\n\n\n<p>You can add indexes to your database using the Index attribute, and override the default Unique and Clustered settings to get the index best suited to your scenario. By default, the index will be named IX_&lt;property name&gt;</p>\n\n\n\n<p>Let’s take a look at the following code in which Index attribute is added in Course class for Credits.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Cours{\n   public int CourseID { get; set; }\n   public string Title { get; set; }\n   &#91;Index]\n   public int Credits { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>You can see that the Index attribute is applied to the Credits property. Now when the table is generated, you will see IX_Credits in Indexes.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/ixcredits_in_indexes.jpg\" alt=\"IX_Credits in Indexes\"/></figure>\n\n\n\n<p>By default, indexes are non-unique, but you can use the&nbsp;<strong>IsUnique</strong>&nbsp;named parameter to specify that an index should be unique. The following example introduces a unique index as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Course{\n   public int CourseID { get; set; }\n   &#91;Index(IsUnique = true)]\n\t\n   public string Title { get; set; }\n   &#91;Index]\n\t\n   public int Credits { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<h2>ForeignKey</h2>\n\n\n\n<p>Code First convention will take care of the most common relationships in your model, but there are some cases where it needs help. For example, by changing the name of the key property in the Student class created a problem with its relationship to Enrollment class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Enrollment{\n   public int EnrollmentID { get; set; }\n   public int CourseID { get; set; }\n   public int StudentID { get; set; }\n   public Grade? Grade { get; set; }\n   public virtual Course Course { get; set; }\n   public virtual Student Student { get; set; }\n}\n\npublic class Student{\n   &#91;Key]\n   public int StdntID { get; set; }\n   public string LastName { get; set; }\n   public string FirstMidName { get; set; }\n   public DateTime EnrollmentDate { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>While generating the database, Code First sees the StudentID property in the Enrollment class and recognizes it, by the convention that it matches a class name plus “ID”, as a foreign key to the Student class. But there is no StudentID property in the Student class, rather it is StdntID property in Student class.</p>\n\n\n\n<p>The solution for this is to create a navigation property in the Enrollment and use the ForeignKey DataAnnotation to help Code First understand how to build the relationship between the two classes as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Enrollment{\n   public int EnrollmentID { get; set; }\n   public int CourseID { get; set; }\n   public int StudentID { get; set; }\n   public Grade? Grade { get; set; }\n   public virtual Course Course { get; set; }\n\t\n   &#91;ForeignKey(\"StudentID\")]\n   public virtual Student Student { get; set; }\n}</code></pre>\n\n\n\n<p>You can see now that the ForeignKey attribute is applied to navigation property.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/foreignkey_attribute.jpg\" alt=\"ForeignKey Attribute\"/></figure>\n\n\n\n<h2>NotMapped</h2>\n\n\n\n<p>By default conventions of Code First, every property that is of a supported data type and which includes getters and setters are represented in the database. But this isn’t always the case in applications. NotMapped attribute overrides this default convention. For example, you might have a property in the Student class such as FatherName, but it does not need to be stored. You can apply NotMapped attribute to a FatherName property, which you do not want to create a column in a database. Following is the code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Student{\n   &#91;Key]\n   public int StdntID { get; set; }\n   public string LastName { get; set; }\n   public string FirstMidName { get; set; }\n   public DateTime EnrollmentDate { get; set; }\n   &#91;NotMapped]\n   public int FatherName { get; set; }\n\n   public virtual ICollection&lt;Enrollment> Enrollments { get; set; }\n}</code></pre>\n\n\n\n<p>You can see that NotMapped attribute is applied to the FatherName property. Now when the table is generated, you will see that FatherName column will not be created in a database, but it is present in Student class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/fathername_column_created.jpg\" alt=\"FatherName Column Created\"/></figure>\n\n\n\n<p>Code First will not create a column for a property which does not have either getters or setters.</p>\n\n\n\n<h2>InverseProperty</h2>\n\n\n\n<p>The InverseProperty is used when you have multiple relationships between classes. In the Enrollment class, you may want to keep track of who enrolled a Current Course and who enrolled a Previous Course.</p>\n\n\n\n<p>Let’s add two navigation properties for the Enrollment class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Enrollment{\n   public int EnrollmentID { get; set; }\n   public int CourseID { get; set; }\n   public int StudentID { get; set; }\n   public Grade? Grade { get; set; }\n\t\n   public virtual Course CurrCourse { get; set; }\n   public virtual Course PrevCourse { get; set; }\n   public virtual Student Student { get; set; }\n}</code></pre>\n\n\n\n<p>Similarly, you’ll also need to add in the Course class referenced by these properties. The Course class has navigation properties back to the Enrollment class, which contains all the current and previous enrollments.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Course{\n   public int CourseID { get; set; }\n   public string Title { get; set; }\n   &#91;Index]\n\t\n   public int Credits { get; set; }\n   public virtual ICollection&lt;Enrollment> CurrEnrollments { get; set; }\n   public virtual ICollection&lt;Enrollment> PrevEnrollments { get; set; }\n}</code></pre>\n\n\n\n<p>Code First creates {Class Name}_{Primary Key} foreign key column if the foreign key property is not included in a particular class as shown in the above classes. When the database is generated you will see a number of foreign keys as seen in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/number_of_foreignkeys.jpg\" alt=\"Number of ForeignKeys\"/></figure>\n\n\n\n<p>As you can see that Code First is not able to match up the properties in the two classes on its own. The database table for Enrollments should have one foreign key for the CurrCourse and one for the PrevCourse, but Code First will create four foreign key properties, i.e.</p>\n\n\n\n<ul><li>CurrCourse_CourseID</li><li>PrevCourse_CourseID</li><li>Course_CourseID</li><li>Course_CourseID1</li></ul>\n\n\n\n<p>To fix these problems, you can use the InverseProperty annotation to specify the alignment of the properties.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Course{\n   public int CourseID { get; set; }\n   public string Title { get; set; }\n\t\n   &#91;Index]\n   public int Credits { get; set; }\n\t\n   &#91;InverseProperty(\"CurrCourse\")]\n   public virtual ICollection&lt;Enrollment> CurrEnrollments { get; set; }\n\t\n   &#91;InverseProperty(\"PrevCourse\")]\n   public virtual ICollection&lt;Enrollment> PrevEnrollments { get; set; }\n}</code></pre>\n\n\n\n<p>As you can see now, when InverseProperty attribute is applied in the above Course class by specifying which reference property of Enrollment class it belongs to, Code First will generate database and create only two foreign key columns in Enrollments table as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/foreignkey_enrollments_table.jpg\" alt=\"ForeignKey Enrollments Table\"/></figure>\n\n\n\n<p>We recommend you to execute the above example for better understanding.</p>\n","protected":false},"excerpt":{"rendered":"<p>DataAnnotations is used to configure your model classes, which will highlight the most commonly needed configurations. DataAnnotations are also understood by a number of .NET applications, such as ASP.NET MVC, which allows these applications to leverage the same annotations for client-side validations. DataAnnotation attributes override default Code-First conventions. System.ComponentModel.DataAnnotations&nbsp;includes the following attributes that impacts the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3752"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3752"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3752/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3752"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3752"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3752"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3754,"date":"2020-09-18T12:47:29","date_gmt":"2020-09-18T12:47:29","guid":{"rendered":"http://backend.foobrdigital.com/?p=3754"},"modified":"2020-09-18T12:47:29","modified_gmt":"2020-09-18T12:47:29","slug":"asp-net-mvc-nuget-package-management","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-nuget-package-management/","title":{"rendered":"NuGet Package Management"},"content":{"rendered":"\n<p>In this chapter, we will talk about NuGet which is a package manager for .NET and Visual Studio. NuGet can be used to find and install packages, that is, software pieces and assemblies and things that you want to use in your project.</p>\n\n\n\n<p>NuGet is not a tool that is specific to ASP.NET MVC projects. This is a tool that you can use inside of Visual Studio for console applications, WPF applications, Azure applications, any types of application.</p>\n\n\n\n<h2>Package Management</h2>\n\n\n\n<p>NuGet is a package manager, and is responsible for downloading, installing, updating, and configuring software in your system. From the term software we don’t mean end users software like Microsoft Word or Notepad 2, etc. but pieces of software, which you want to use in your project, assembly references.</p>\n\n\n\n<p>For example, assemblies you want to use might be mock, for mock object unit testing, or NHibernate for data access, and components you use when building your application. The above-mentioned components are open source software, but some NuGet packages you find are closed source software. Some of the packages you&#8217;ll find are even produced by Microsoft.</p>\n\n\n\n<p>The common theme along all the packages mentioned above, like mock and NHibernate, and Microsoft packages like a preview for the Entity Framework, is that they don&#8217;t come with Visual Studio by default.</p>\n\n\n\n<h2>Without NuGet</h2>\n\n\n\n<p>To install any of these components without NuGet, you will need the following steps.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/components_without_nuget.jpg\" alt=\"Components without NuGet\"/></figure>\n\n\n\n<p>If you want to use one of those components, you need to find the home page for some particular project and look for a download link. Then once the project is downloaded, it&#8217;s typically in a ZIP format so you will need to extract it.</p>\n\n\n\n<p>If you didn&#8217;t download binaries, then you will first need to build the software and then reference it in your project. And many components at that point still require some configuration to get up and running.</p>\n\n\n\n<h2>Using NuGet</h2>\n\n\n\n<p>NuGet replaces all of the steps discussed earlier and you just need to say Add Package. NuGet knows where to download the latest version, it knows how to extract it, how to establish a reference to that component, and even configure it. This leaves you more time to just build the software.</p>\n\n\n\n<p>Let’s take a look at a simple example in which we will add support for Entity framework in our ASP.NET MVC project using NuGet.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Install the Entity Framework. Right-click on the project and select NuGet Package Manager → Manage NuGet Packages for Solution…</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/select_nuget_package_manager.jpg\" alt=\"Select NuGet Package Manager\"/></figure>\n\n\n\n<p>It will open the NuGet Package Manager.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Search for Entity framework in the search box.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/search_for_entity_framework.jpg\" alt=\"Search for Entity Framework\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Select the Entity Framework and click ‘Install’ button. It will open the Preview dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/preview_dialog.jpg\" alt=\"Preview Dialog\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Click Ok to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/preview_dialog_click_ok.jpg\" alt=\"Preview Dialog Click Ok\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Click the ‘I Accept’ button to start the installation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/i_accept_installation.jpg\" alt=\"I Accept Installation\"/></figure>\n\n\n\n<p>Once the Entity Framework is installed you will see the message in out window as shown above.</p>\n\n\n\n<p>When you install a package with NuGet, you will see a new packages directory in the same folder as the solution file hosting your project. This package directory contains all the packages that you have installed for any of the projects in that solution.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/all_packages_in_projects.jpg\" alt=\"All Packages in Projects\"/></figure>\n\n\n\n<p>In other words, NuGet is not downloading packages into a central location, it&#8217;s storing them on a per solution basis.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will talk about NuGet which is a package manager for .NET and Visual Studio. NuGet can be used to find and install packages, that is, software pieces and assemblies and things that you want to use in your project. NuGet is not a tool that is specific to ASP.NET MVC projects. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3754"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3754"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3754/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3754"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3754"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3754"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3756,"date":"2020-09-18T12:48:34","date_gmt":"2020-09-18T12:48:34","guid":{"rendered":"http://backend.foobrdigital.com/?p=3756"},"modified":"2020-09-18T12:48:34","modified_gmt":"2020-09-18T12:48:34","slug":"asp-net-mvc-web-api","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-web-api/","title":{"rendered":"Web API"},"content":{"rendered":"\n<p>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework.</p>\n\n\n\n<p>When you&#8217;re building APIs on the Web, there are several ways you can build APIs on the Web. These include HTTP/RPC, and what this means is using HTTP in Remote Procedure Call to call into things, like Methods, across the Web.</p>\n\n\n\n<p>The verbs themselves are included in the APIs, like Get Customers, Insert Invoice, Delete Customer, and that each of these endpoints end up being a separate URI.</p>\n\n\n\n<p>Let’s take a look at a simple example of Web API by creating a new ASP.NET Web Application.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open the Visual Studio and click File → New → Project menu option.</p>\n\n\n\n<p>A new Project dialog opens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/visual_studio_click_file.jpg\" alt=\"Visual Studio Click File\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− From the left pane, select Templates → Visual C# → Web.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− In the middle pane, select ASP.NET Web Application</p>\n\n\n\n<p>Enter project name WebAPIDemo in the Name field and click Ok to continue. You will see the following dialog, which asks you to set the initial content for the ASP.NET project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/webapidemo.jpg\" alt=\"WebAPIDemo\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− To keep things simple, select the Empty option and check the Web API checkbox in the ‘Add folders and core references for’ section and click Ok.</p>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− It will create a basic MVC project with minimal predefined content.</p>\n\n\n\n<p>Once the project is created by Visual Studio, you will see a number of files and folders displayed in the Solution Explorer window.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Now we need to add a model. Right-click on the Models folder in the solution explorer and select Add → Class.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_a_model.jpg\" alt=\"Add a Model\"/></figure>\n\n\n\n<p>You will now see the Add New Item dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_item_dialog.jpg\" alt=\"Add Item Dialog\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Select Class in the middle pan and enter Employee.cs in the name field.</p>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Add some properties to Employee class using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\n\nnamespace WebAPIDemo.Models {\n   public class Employee{\n      public int ID { get; set; }\n      public string Name { get; set; }\n      public DateTime JoiningDate { get; set; }\n      public int Age { get; set; }\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Let’s add the controller. Right-click on the controller folder in the solution explorer and select Add → Controller.</p>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/select_add_controller.jpg\" alt=\"Select Add Controller\"/></figure>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− Select the Web API 2 Controller &#8211; Empty option. This template will create an Index method with default action for controller.</p>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− Click ‘Add’ button and the Add Controller dialog will appear.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_button_controller.jpg\" alt=\" Add Button Controller\"/></figure>\n\n\n\n<p><strong>Step 12</strong>&nbsp;− Set the name to EmployeesController and click ‘Add’ button.</p>\n\n\n\n<p>You will see a new C# file ‘EmployeeController.cs’ in the Controllers folder, which is open for editing in Visual Studio with some default actions.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web.Http;\nusing WebAPIDemo.Models;\n\nnamespace WebAPIDemo.Controllers{\n   public class EmployeesController : ApiController{\n      Employee&#91;] employees = new Employee&#91;]{\n         new Employee { ID = 1, Name = \"Mark\", JoiningDate =\n            DateTime.Parse(DateTime.Today.ToString()), Age = 30 },\n         new Employee { ID = 2, Name = \"Allan\", JoiningDate =\n            DateTime.Parse(DateTime.Today.ToString()), Age = 35 },\n         new Employee { ID = 3, Name = \"Johny\", JoiningDate =\n            DateTime.Parse(DateTime.Today.ToString()), Age = 21 }\n      };\n\t\t\n      public IEnumerable&lt;Employee> GetAllEmployees(){\n         return employees;\n      }\n\t\t\n      public IHttpActionResult GetEmployee(int id){\n         var employee = employees.FirstOrDefault((p) => p.ID == id);\n         if (employee == null){\n            return NotFound();\n         }\n         return Ok(employee);\n      }\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 13</strong>&nbsp;− Run this application and specify /api/employees/ at the end of the URL and press ‘Enter’. You will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/specify_api_employees.jpg\" alt=\"Specify API Employees\"/></figure>\n\n\n\n<p><strong>Step 14</strong>&nbsp;− Let us specify the following URL&nbsp;<strong>http://localhost:63457/api/employees/1</strong>&nbsp;and you will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/localhost_api_employees.jpg\" alt=\"Localhost API Employees\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>ASP.NET Web API is a framework that makes it easy to build HTTP services that reach a broad range of clients, including browsers and mobile devices. ASP.NET Web API is an ideal platform for building RESTful applications on the .NET Framework. When you&#8217;re building APIs on the Web, there are several ways you can build [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3756"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3756"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3756/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3756"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3756"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3756"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3758,"date":"2020-09-18T12:49:38","date_gmt":"2020-09-18T12:49:38","guid":{"rendered":"http://backend.foobrdigital.com/?p=3758"},"modified":"2020-09-18T12:49:38","modified_gmt":"2020-09-18T12:49:38","slug":"asp-net-mvc-scaffolding","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-scaffolding/","title":{"rendered":"Scaffolding"},"content":{"rendered":"\n<p>ASP.NET Scaffolding is a code generation framework for ASP.NET Web applications. Visual Studio 2013 includes pre-installed code generators for MVC and Web API projects. You add scaffolding to your project when you want to quickly add code that interacts with data models. Using scaffolding can reduce the amount of time to develop standard data operations in your project.</p>\n\n\n\n<p>As you have seen that we have created the views for Index, Create, Edit actions and also need to update the actions methods as well. But ASP.Net MVC provides an easier way to create all these Views and action methods using scaffolding.</p>\n\n\n\n<p>Let’s take a look at a simple example. We will create the same example which contains a model class Employee, but this time we will use scaffolding.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open the Visual Studio and click on File → New → Project menu option.</p>\n\n\n\n<p>A new Project dialog opens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_dialog.jpg\" alt=\"New Dialog\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− From the left pane, select Templates → Visual C# → Web.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− In the middle pane, select ASP.NET Web Application.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Enter the project name ‘MVCScaffoldingDemo’ in the Name field and click Ok to continue. You will see the following dialog which asks you to set the initial content for the ASP.NET project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvcscaffoldingdemo.jpg\" alt=\"MVCScaffoldingDemo\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− To keep things simple, select the Empty option and check the MVC checkbox in the ‘Add folders and core references for’section and click Ok.</p>\n\n\n\n<p>It will create a basic MVC project with minimal predefined content.</p>\n\n\n\n<p>Once the project is created by Visual Studio, you will see a number of files and folders displayed in the Solution Explorer window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/project_created_by_visualstudio.jpg\" alt=\"Project Created by Visual Studio\"/></figure>\n\n\n\n<h2>Add Entity Framework Support</h2>\n\n\n\n<p>First step is to install the Entity Framework. Right-click on the project and select NuGet Package Manager → Manage NuGet Packages for Solution…</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/nuget_package_manager.jpg\" alt=\"NuGet Package Manager\"/></figure>\n\n\n\n<p>It will open the ‘NuGet Package Manager’. Search for Entity framework in the search box.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/entity_framework_search_box.jpg\" alt=\"Entity Framework Search Box\"/></figure>\n\n\n\n<p>Select the Entity Framework and click ‘Install’ button. It will open the Preview dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/open_preview_dialog.jpg\" alt=\"Open Preview Dialog\"/></figure>\n\n\n\n<p>Click Ok to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_ok_to_continue.jpg\" alt=\"Click Ok to Continue\"/></figure>\n\n\n\n<p>Click ‘I Accept’ button to start installation.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/i_accept_button_installation.jpg\" alt=\"I Accept Button Installation\"/></figure>\n\n\n\n<p>Once the Entity Framework is installed you will see the message in the out window as shown in the above screenshot.</p>\n\n\n\n<h2>Add Model</h2>\n\n\n\n<p>To add a model, right-click on the Models folder in the solution explorer and select Add → Class. You will see the ‘Add New Item’ dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/item_dialog.jpg\" alt=\"Item Dialog\"/></figure>\n\n\n\n<p>Select Class in the middle pan and enter Employee.cs in the name field.</p>\n\n\n\n<p>Add some properties to Employee class using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\n\nnamespace MVCScaffoldingDemo.Models {\n   public class Employee{\n      public int ID { get; set; }\n      public string Name { get; set; }\n      public DateTime JoiningDate { get; set; }\n      public int Age { get; set; }\n   }\n}</code></pre>\n\n\n\n<h2>Add DBContext</h2>\n\n\n\n<p>We have an Employee Model, now we need to add another class, which will communicate with Entity Framework to retrieve and save the data. Following is the complete code in Employee.cs file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Data.Entity;\n\nnamespace MVCScaffoldingDemo.Models{\n   public class Employee{\n      public int ID { get; set; }\n      public string Name { get; set; }\n      public DateTime JoiningDate { get; set; }\n      public int Age { get; set; }\n   }\n\t\n   public class EmpDBContext : DbContext{\n      public DbSet&lt;Employee> Employees { get; set; }\n   }\n}</code></pre>\n\n\n\n<p>As you can see ‘EmpDBContext’ is derived from an EF class known as ‘DbContext’. In this class, we have one property with the name DbSet, which basically represents the entity which you want to query and save.</p>\n\n\n\n<p>Now let’s build a solution and you will see the message when the project is successfully build.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/project_successfully_build.jpg\" alt=\"Project Successfully Build\"/></figure>\n\n\n\n<h2>Add a Scaffolded Item</h2>\n\n\n\n<p>To add a scaffold, right-click on Controllers folder in the Solution Explorer and select Add → New Scaffolded Item.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_scaffolded_item.jpg\" alt=\"New Scaffolded Item\"/></figure>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/display_scaffold_dialog.jpg\" alt=\"Display Scaffold Dialog\"/></figure>\n\n\n\n<p>Select MVC 5 Controller with views, using Entity Framework in the middle pane and click ‘Add’ button, which will display the Add Controller dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/entity_framework_middle_pane.jpg\" alt=\"Entity Framework Middle Pane\"/></figure>\n\n\n\n<p>Select Employee from the Model class dropdown and EmpDBContext from the Data context class dropdown. You will also see that the controller name is selected by default.</p>\n\n\n\n<p>Click ‘Add’ button to continue and you will see the following code in the EmployeesController, which is created by Visual Studio using Scaffolding.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System.Data.Entity;\nusing System.Linq;\nusing System.Net;\nusing System.Web.Mvc;\nusing MVCScaffoldingDemo.Models;\n\nnamespace MVCScaffoldingDemo.Controllers {\n   public class EmployeesController : Controller{\n      private EmpDBContext db = new EmpDBContext();\n      \n      // GET: Employees\n      public ActionResult Index(){\n         return View(db.Employees.ToList());\n      }\n      \n      // GET: Employees/Details/5\n      public ActionResult Details(int? id){\n         if (id == null){\n            return new HttpStatusCodeResult(HttpStatusCode.BadRequest);\n         }\n\t\t\t\n         Employee employee = db.Employees.Find(id);\n\t\t\t\n         if (employee == null){\n            return HttpNotFound();\n         }\n         return View(employee);\n      }\n      \n      // GET: Employees/Create\n      public ActionResult Create(){\n         return View();\n      }\n      \n      // POST: Employees/Create\n      // To protect from overposting attacks, please enable the specific\n      properties you want to bind to, for\n      // more details see http://go.microsoft.com/fwlink/?LinkId=317598.\n      &#91;HttpPost]\n      &#91;ValidateAntiForgeryToken]\n\t\t\n      public ActionResult Create(&#91;Bind(Include = \"ID,Name,JoiningDate,Age\")]\n      Employee employee){\n         if (ModelState.IsValid){\n            db.Employees.Add(employee);\n            db.SaveChanges();\n            return RedirectToAction(\"Index\");\n         }\n         return View(employee);\n      }\n      \n      // GET: Employees/Edit/5\n      public ActionResult Edit(int? id){\n         if (id == null){\n            return new HttpStatusCodeResult(HttpStatusCode.BadRequest);\n         }\n\t\t\t\n         Employee employee = db.Employees.Find(id);\n\t\t\t\n         if (employee == null){\n            return HttpNotFound();\n         }\n         return View(employee);\n      }\n      \n      // POST: Employees/Edit/5\n      // To protect from overposting attacks, please enable the specific\n      properties you want to bind to, for\n      // more details see http://go.microsoft.com/fwlink/?LinkId=317598.\n      &#91;HttpPost]\n      &#91;ValidateAntiForgeryToken]\n      public ActionResult Edit(&#91;Bind(Include = \"ID,Name,JoiningDate,Age\")]Employee employee){\n         if (ModelState.IsValid){\n            db.Entry(employee).State = EntityState.Modified;\n            db.SaveChanges();\n            return RedirectToAction(\"Index\");\n         }\n         return View(employee);\n      }\n      \n      // GET: Employees/Delete/5\n      public ActionResult Delete(int? id){\n         if (id == null){\n            return new HttpStatusCodeResult(HttpStatusCode.BadRequest);\n         }\n\t\t\t\n         Employee employee = db.Employees.Find(id);\n\t\t\t\n         if (employee == null){\n            return HttpNotFound();\n         }\n         return View(employee);\n      }\n      \n      // POST: Employees/Delete/5\n      &#91;HttpPost, ActionName(\"Delete\")]\n      &#91;ValidateAntiForgeryToken]\n\t\t\n      public ActionResult DeleteConfirmed(int id){\n         Employee employee = db.Employees.Find(id);\n         db.Employees.Remove(employee);\n         db.SaveChanges();\n         return RedirectToAction(\"Index\");\n      }\n      \n      protected override void Dispose(bool disposing){\n         if (disposing){\n            db.Dispose();\n         }\n\t\t\t\n         base.Dispose(disposing);\n      }\n   }\n}</code></pre>\n\n\n\n<p>Run your application and specify the following URL&nbsp;<strong>http://localhost:59359/employees</strong>. You will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/run_your_application.jpg\" alt=\"Run Your Application\"/></figure>\n\n\n\n<p>You can see there is no data in the View, because we have not added any records to the database, which is created by Visual Studio.</p>\n\n\n\n<p>Let’s add one record from the browser by clicking the ‘Create New’ link, it will display the Create view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/clicking_create_new.jpg\" alt=\"Clicking Create New\"/></figure>\n\n\n\n<p>Let’s add some data in the following field.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/adding_data_in_field.jpg\" alt=\"Adding Data in Field\"/></figure>\n\n\n\n<p>Click the ‘Create’ button and it will update the Index view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/update_index_view.jpg\" alt=\"Update Index View\"/></figure>\n\n\n\n<p>You can see that the new record is also added to the database.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_record_added.jpg\" alt=\"New Record Added\"/></figure>\n\n\n\n<p>As you can see that we have implemented the same example by using Scaffolding, which is a much easier way to create your Views and Action methods from your model class.</p>\n","protected":false},"excerpt":{"rendered":"<p>ASP.NET Scaffolding is a code generation framework for ASP.NET Web applications. Visual Studio 2013 includes pre-installed code generators for MVC and Web API projects. You add scaffolding to your project when you want to quickly add code that interacts with data models. Using scaffolding can reduce the amount of time to develop standard data operations [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3758"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3758"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3758/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3758"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3758"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3758"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3786,"date":"2020-09-19T11:14:29","date_gmt":"2020-09-19T11:14:29","guid":{"rendered":"http://backend.foobrdigital.com/?p=3786"},"modified":"2020-09-19T11:14:29","modified_gmt":"2020-09-19T11:14:29","slug":"asp-net-mvc-bootstrap","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-bootstrap/","title":{"rendered":"Bootstrap"},"content":{"rendered":"\n<p>In this chapter, we will look at Bootstrap which is a front-end framework now included with ASP.NET and MVC. It is a popular front-end tool kit for web applications, and will help you build a user interface with HTML, CSS, and JavaScript.</p>\n\n\n\n<p>It was originally created by web developers at Twitter for personal use, however, it is now an open source and has become popular with designers and developers because of its flexiblility and ease of use.</p>\n\n\n\n<p>You can use Bootstrap to create an interface that looks good on everything from large desktop displays to small mobile screens. In this chapter, we will also look at how Bootstrap can work with your layout views to structure the look of an application.</p>\n\n\n\n<p>Bootstrap provides all the pieces you need for layout, buttons, forms, menus, widgets, picture carousels, labels, badges, typography, and all sorts of features. Since Bootstrap is all HTML, CSS and JavaScript, all open standards, you can use it with any framework including ASP.NET MVC. When you start a new MVC project, Bootstrap will be present, meaning you&#8217;ll find Bootstrap.css and Bootstrap.js in your project.</p>\n\n\n\n<p>Let’s create a new ASP.NET Web Application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/asp_net_web_application.jpg\" alt=\"ASP.NET Web Application\"/></figure>\n\n\n\n<p>Enter the name of the project, let’s say ‘MVCBootstrap’ and click Ok. You will see the following dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvcbootstrap.jpg\" alt=\"MVCBootstrap\"/></figure>\n\n\n\n<p>In this dialog, if you select the empty template, you will get an empty web application and there will be no Bootstrap present. There won&#8217;t be any controllers or any other script files either.</p>\n\n\n\n<p>Now select the MVC template and click Ok. When Visual Studio creates this solution, one of the packages that it will download and install into the project will be the Bootstrap NuGet package. You can verify by going to packages.config and you can see the Bootstrap version 3 package.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/bootstrap_version_3_package.jpg\" alt=\"Bootstrap version 3 package\"/></figure>\n\n\n\n<p>You can also see the Content folder which contains different css files.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/content_folder.jpg\" alt=\"Content Folder\"/></figure>\n\n\n\n<p>Run this application and you will see the following page.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/run_this_application.jpg\" alt=\"Run this application\"/></figure>\n\n\n\n<p>When this page appears, most of the layout and styling that you see is layout and styling that has been applied by Bootstrap. It includes the navigation bar at the top with the links as well as the display that is advertising ASP.NET. It also includes all of these pieces down about getting started and getting more libraries and web hosting.</p>\n\n\n\n<p>If you expand the browser just a little bit more, those will actually lay out side by side and that&#8217;s part of Bootstrap&#8217;s responsive design features.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/bootstraps_responsive_design_features.jpg\" alt=\"Bootstrap's responsive design features\"/></figure>\n\n\n\n<p>If you look under the content folder, you will find the Bootstrap.css file.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/bootstrap_css_file.jpg\" alt=\"Bootstrap.css file\"/></figure>\n\n\n\n<p>The NuGet package also gives a minified version of that file that&#8217;s a little bit smaller. Under scripts, you will find Bootstrap.js, that&#8217;s required for some of the components of Bootstrap.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/bootstrap_js.jpg\" alt=\"Bootstrap.js\"/></figure>\n\n\n\n<p>It does have a dependency on jQuery and fortunately jQuery is also installed in this project and there&#8217;s a minified version of the Bootstrap JavaScript file.</p>\n\n\n\n<p>Now the question is, where are all these added in the application? You might expect, that it would be in the layout template, the layout view for this project which is under View/Shared/_layout.cshtml.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/layout_view_controls.jpg\" alt=\"Layout View Controls\"/></figure>\n\n\n\n<p>The layout view controls the structure of the UI. Following is the complete code in _layout.cshtml file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\" />\n      &lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\">\n      &lt;title>@ViewBag.Title - My ASP.NET Application&lt;/title>\n      @Styles.Render(\"~/Content/css\")\n      @Scripts.Render(\"~/bundles/modernizr\")\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div class = \"navbar navbar-inverse navbar-fixed-top\">\n         &lt;div class = \"container\">\n\t\t\t\n            &lt;div class = \"navbar-header\">\n               &lt;button type = \"button\" class = \"navbar-toggle\" datatoggle =\n                  \"collapse\" data-target = \".navbar-collapse\">\n                  &lt;span class = \"icon-bar\">&lt;/span>\n                  &lt;span class = \"icon-bar\">&lt;/span>\n                  &lt;span class = \"icon-bar\">&lt;/span>\n               &lt;/button>\n\t\t\t\t\t\n               @Html.ActionLink(\"Application name\", \"Index\", \"Home\", new\n                  { area = \"\" }, new { @class = \"navbar-brand\" })\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"navbar-collapse collapse\">\n               &lt;ul class = \"nav navbar-nav\">\n                  &lt;li>@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li>\n                  &lt;li>@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li>\n                  &lt;li>@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li>\n               &lt;/ul>\n\t\t\t\t\t\n               @Html.Partial(\"_LoginPartial\")\n            &lt;/div>\n\t\t\t\t\n         &lt;/div>\n\t\t\t\n      &lt;/div>\n      &lt;div class = \"container body-content\">\n         @RenderBody()\n         &lt;hr />\n         &lt;footer>\n            &lt;p>© @DateTime.Now.Year - My ASP.NET Application&lt;/p>\n         &lt;/footer>\n      &lt;/div>\n\t\t\n      @Scripts.Render(\"~/bundles/jquery\")\n      @Scripts.Render(\"~/bundles/bootstrap\")\n      @RenderSection(\"scripts\", required: false)\n\t\t\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above code there are two things to note. First at the top, after &lt;title&gt; you will see the following line of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Styles.Render(\"~/Content/css\")\n</code></pre>\n\n\n\n<p>The Styles.Render for Content/css is actually where the Bootstrap.css file is going to be included, and at the bottom, you will see the following line of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@Scripts.Render(\"~/bundles/bootstrap\")\n</code></pre>\n\n\n\n<p>It is rendering the Bootstrap script. So in order to find out what exactly is inside of these bundles, we&#8217;ll have to go into the BundleConfig file, which is in App_Start folder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/bundleconfig_file.jpg\" alt=\"BundleConfig File\"/></figure>\n\n\n\n<p>In BundleConfig, you can see at the bottom that the CSS bundle includes both Bootstrap.css and our custom site.css.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bundles.Add(new StyleBundle(\"~/Content/css\").Include(\n   \"~/Content/bootstrap.css\",\n   \"~/Content/site.css\"));\n</code></pre>\n\n\n\n<p>It is a place where we can add our own style sheets to customize the look of the application. You can also see the Bootstrap bundle that appears before the CSS bundle that includes Bootstrap.js, and another JavaScript file, respond.js.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bundles.Add(new ScriptBundle(\"~/bundles/bootstrap\").Include(\n   \"~/Scripts/bootstrap.js\",\n   \"~/Scripts/respond.js\"));\n</code></pre>\n\n\n\n<p>Let’s comment Bootstrap.css as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bundles.Add(new StyleBundle(\"~/Content/css\").Include(\n   //\"~/Content/bootstrap.css\",\n   \"~/Content/site.css\"));\n</code></pre>\n\n\n\n<p>Run this application again, just to give you an idea of what Bootstrap is doing, because now the only styles that are available are the styles that are in site.css.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/styles_in_site_css.jpg\" alt=\"Styles in site.css\"/></figure>\n\n\n\n<p>As you can see we lost the layout, the navigation bar at the top of the page. Now everything looks ordinary and boring.</p>\n\n\n\n<p>Let us now see what Bootstrap is all about. There&#8217;s a couple of things that Bootstrap just does automatically and there&#8217;s a couple of things that Bootstrap can do for you when you add classes and have the right HTML structure. If you look at the _layout.cshtml file, you will see the navbar class as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"navbar navbar-inverse navbar-fixed-top\">\n   &lt;div class = \"container\">\n\t\n      &lt;div class = \"navbar-header\">\n         &lt;button type = \"button\" class = \"navbar-toggle\" datatoggle =\n            \"collapse\" data-target = \".navbar-collapse\">\n            &lt;span class = \"icon-bar\">&lt;/span>\n            &lt;span class = \"icon-bar\">&lt;/span>\n            &lt;span class = \"icon-bar\">&lt;/span>\n         &lt;/button>\n         &lt;a class = \"navbar-brand\" href = \"/\">Application name&lt;/a>\n      &lt;/div>\n\t\t\n      &lt;div class = \"navbar-collapse collapse\">\n         &lt;ul class = \"nav navbar-nav\">\n            &lt;li>&lt;a href = \"/\">Home&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"/Home/About\">About&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"/Home/Contact\">Contact&lt;/a>&lt;/li>\n         &lt;/ul>\n\t\t\t\n         &lt;ul class = \"nav navbar-nav navbar-right\">\n            &lt;li>&lt;a href = \"/Account/Register\" id = \"registerLink\">Register&lt;/a>&lt;/li>\n            &lt;li>&lt;a href = \"/Account/Login\" id = \"loginLink\">Log in&lt;/a>&lt;/li>\n         &lt;/ul>\n\t\t\t\n      &lt;/div>\n\t\t\n   &lt;/div>\n\t\n&lt;/div></code></pre>\n\n\n\n<p>It is CSS classes from Bootstrap like navbar, navbar inverse, and navbar fixed top. If you remove a few of these classes like navbar inverse, navbar fixed top and also uncomment the Bootstrap.css and then run your application again, you will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/css_classes.jpg\" alt=\"CSS classes\"/></figure>\n\n\n\n<p>You will see that we still have a navbar, but now it&#8217;s not using inverse colors so it&#8217;s white. It also doesn&#8217;t stick to the top of the page. When you scroll down, the navigation bar scrolls off the top and you can no longer see it again.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/navbar.jpg\" alt=\"Navbar\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will look at Bootstrap which is a front-end framework now included with ASP.NET and MVC. It is a popular front-end tool kit for web applications, and will help you build a user interface with HTML, CSS, and JavaScript. It was originally created by web developers at Twitter for personal use, however, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3786"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3786"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3786/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3786"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3786"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3786"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3788,"date":"2020-09-19T11:16:29","date_gmt":"2020-09-19T11:16:29","guid":{"rendered":"http://backend.foobrdigital.com/?p=3788"},"modified":"2020-09-19T11:16:29","modified_gmt":"2020-09-19T11:16:29","slug":"asp-net-mvc-unit-testing","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-unit-testing/","title":{"rendered":"Unit Testing"},"content":{"rendered":"\n<p>In computer programming, unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit for use. In other words, it is a software development process in which the smallest testable parts of an application, called units, are individually and independently scrutinized for proper operation.</p>\n\n\n\n<p>In procedural programming, a unit could be an entire module, but it is more commonly an individual function or procedure. In object-oriented programming, a unit is often an entire interface, such as a class, but could be an individual method.</p>\n\n\n\n<p>Unit testing is often automated but it can also be done manually.</p>\n\n\n\n<h2>Goals of Unit Testing</h2>\n\n\n\n<p>The primary goal of unit testing is to take the smallest piece of testable software in the application and determine whether it behaves exactly as you expect. Each unit is tested separately before integrating them into modules to test the interfaces between modules.</p>\n\n\n\n<p>Let’s take a look at a simple example of unit testing in which we create a new ASP.NET MVC application with Unit Testing.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open the Visual Studio and click File → New → Project menu option.</p>\n\n\n\n<p>A new Project dialog opens.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_project_dialog.jpg\" alt=\"New Project Dialog\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− From the left pane, select Templates &gt; Visual C# &gt; Web.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− In the middle pane, select ASP.NET Web Application.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Enter the project name ‘MVCUnitTestingDemo’ in the Name field and click Ok to continue. You will see the following dialog which asks you to set the initial content for the ASP.NET project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvcunittestingdemo.jpg\" alt=\"MVCUnitTestingDemo\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Select the MVC as template and don’t forget to check the Add unit tests checkbox which is at the bottom of dialog. You can also change the test project name as well, but in this example we leave it as is since it is the default name.</p>\n\n\n\n<p>Once the project is created by Visual Studio, you will see a number of files and folders displayed in the Solution Explorer window.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− You can see that two projects are there in the solution explorer. One is the ASP.NET Web project and the other is the unit testing project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/web_project.jpg\" alt=\"Web Project\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Run this application and you will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/run_web_project.jpg\" alt=\"Run Web Project\"/></figure>\n\n\n\n<p>As seen in the above screenshot, there are Home, About and Contact buttons on the navigation bar. Let’s select ‘About’ and you will see the following view.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/about_select.jpg\" alt=\"About Select\"/></figure>\n\n\n\n<p>Let’s select Contact and the following screen pops up.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/contact_select.jpg\" alt=\"Contact Select\"/></figure>\n\n\n\n<p>Now let’s expand the ‘MVCUnitTestingDemo’ project and you will see the HomeController.cs file under the Controllers folder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/homecontroller_cs_file.jpg\" alt=\"HomeController.cs file\"/></figure>\n\n\n\n<p>The HomeController contains three action methods as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCUnitTestingDemo.Controllers {\n   public class HomeController : Controller{\n      public ActionResult Index(){\n         return View();\n      } \n\t\t\n      public ActionResult About(){\n         ViewBag.Message = \"Your application description page.\";\n         return View();\n      }\n\t\t\n      public ActionResult Contact(){\n         ViewBag.Message = \"Your contact page.\";\n         return View();\n      }\n   }\n}</code></pre>\n\n\n\n<p>Let’s expand the&nbsp;<strong>MVCUnitTestingDemo.Tests</strong>&nbsp;project and you will see the HomeControllerTest.cs file under the Controllers folder.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/mvcunittestingdemo_test.jpg\" alt=\"MVCUnitTestingDemo.Test\"/></figure>\n\n\n\n<p>In this HomeControllerTest class, you will see three methods as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nusing System.Web.Mvc;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\n\nusing MVCUnitTestingDemo;\nusing MVCUnitTestingDemo.Controllers;\n\nnamespace MVCUnitTestingDemo.Tests.Controllers{\n   &#91;TestClass]\n   public class HomeControllerTest{\n\t\n      &#91;TestMethod]\n      public void Index(){\n         // Arrange\n         HomeController controller = new HomeController();\n         // Act\n         ViewResult result = controller.Index() as ViewResult;\n         // Assert\n         Assert.IsNotNull(result);\n      }\n\t\t\n      &#91;TestMethod]\n      public void About(){\n         // Arrange\n         HomeController controller = new HomeController();\n         // Act\n         ViewResult result = controller.About() as ViewResult;\n         // Assert\n         Assert.AreEqual(\"Your application description page.\", result.ViewBag.Message);\n      }\n\t\t\n      &#91;TestMethod]\n      public void Contact(){\n         // Arrange\n         HomeController controller = new HomeController();\n         // Act\n         ViewResult result = controller.Contact() as ViewResult;\n         // Assert\n         Assert.IsNotNull(result);\n      }\n   }\n}</code></pre>\n\n\n\n<p>These three methods will test whether the Index, About and Contact action methods are working properly. To test these three action methods, go to the Test menu.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/test_menu.jpg\" alt=\"Test Menu\"/></figure>\n\n\n\n<p>Select Run → All Tests to test these action methods.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/action_methods.jpg\" alt=\"Action Methods\"/></figure>\n\n\n\n<p>Now you will see the Test Explorer on the left side in which you can see that all the tests are passed. Let us add one more action method, which will list all the employees. First we need to add an employee class in the Models folder.</p>\n\n\n\n<p>Following is the Employee class implementation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\n\nnamespace MVCUnitTestingDemo.Models{\n   public class Employee{\n      public int ID { get; set; }\n      public string Name { get; set; }\n      public DateTime JoiningDate { get; set; }\n      public int Age { get; set; }\n   }\n}</code></pre>\n\n\n\n<p>We need to add EmployeeController. Right-click on the controller folder in the solution explorer and select Add → Controller.</p>\n\n\n\n<p>It will display the Add Scaffold dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_scaffold.jpg\" alt=\"Add Scaffold\"/></figure>\n\n\n\n<p>Select the MVC 5 Controller – Empty option and click ‘Add’ button and the Add Controller dialog will appear.</p>\n\n\n\n<p>Set the name to EmployeeController and click ‘Add’ button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/add_controller_employeecontroller.jpg\" alt=\"Add Controller EmployeeController\"/></figure>\n\n\n\n<p>You will see a new C# file ‘EmployeeController.cs’ in the Controllers folder which is open for editing in Visual Studio. Let’s update the EmployeeController using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>using MVCUnitTestingDemo.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nusing System.Web;\nusing System.Web.Mvc;\n\nnamespace MVCUnitTestingDemo.Controllers {\n   public class EmployeeController : Controller{\n      &#91;NonAction]\n\t\t\n      public List&lt;Employee> GetEmployeeList(){\n         return new List&lt;Employee>{\n            new Employee{\n               ID = 1,\n               Name = \"Allan\",\n               JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n               Age = 23\n            },\n\t\t\t\t\n            new Employee{\n               ID = 2,\n               Name = \"Carson\",\n               JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n               Age = 45\n            },\n\t\t\t\t\n            new Employee{\n               ID = 3,\n               Name = \"Carson\",\n               JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n               Age = 37\n            },\n\t\t\t\t\n            new Employee{\n               ID = 4,\n               Name = \"Laura\",\n               JoiningDate = DateTime.Parse(DateTime.Today.ToString()),\n               Age = 26\n            },\n         };\n      }\n      \n      // GET: Employee\n      public ActionResult Index(){\n         return View();\n      }\n\t\t\n      public ActionResult Employees(){\n         var employees = from e in GetEmployeeList()\n         orderby e.ID\n         select e;\n         return View(employees);\n      }\n   }\n}</code></pre>\n\n\n\n<p>To add View for Employees action method, right-click on Employees action and select Add View…</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/employee_action.jpg\" alt=\"Employee Action\"/></figure>\n\n\n\n<p>You will see the default name for view. Select ‘List’ from the Template dropdown and ‘Employee’ from the Model class dropdown and click Ok.</p>\n\n\n\n<p>Now we need to add the link Employees list, let’s open the _layout.cshtml file which is under Views/Shared folder and add the link for employees list below the Contact link.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;li&gt;@Html.ActionLink(\"Employees List\", \"Employees\", \"Employee\")&lt;/li&gt;\n</pre>\n\n\n\n<p>Following is the complete implementation of _layout.cshtml.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"utf-8\" />\n      &lt;meta name = \"viewport\" content = \"width = device-width, initial-scale = 1.0\">\n      &lt;title>@ViewBag.Title - My ASP.NET Application&lt;/title>\n      @Styles.Render(\"~/Content/css\")\n      @Scripts.Render(\"~/bundles/modernizr\")\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;div class = \"navbar navbar-inverse navbar-fixed-top\">\n         &lt;div class = \"container\">\n\t\t\t\n            &lt;div class = \"navbar-header\">\n               &lt;button type = \"button\" class = \"navbar-toggle\" datatoggle =\n                  \"collapse\" data-target = \".navbar-collapse\">\n                  &lt;span class = \"icon-bar\">&lt;/span>\n                  &lt;span class = \"icon-bar\">&lt;/span>\n                  &lt;span class = \"icon-bar\">&lt;/span>\n               &lt;/button>\n\t\t\t\t\t\n               @Html.ActionLink(\"Application name\", \"Index\", \"Home\", new\n                  { area = \"\" }, new { @class = \"navbar-brand\" })\n            &lt;/div>\n\t\t\t\t\n            &lt;div class = \"navbar-collapse collapse\">\n               &lt;ul class = \"nav navbar-nav\">\n                  &lt;li>@Html.ActionLink(\"Home\", \"Index\", \"Home\")&lt;/li>\n                  &lt;li>@Html.ActionLink(\"About\", \"About\", \"Home\")&lt;/li>\n                  &lt;li>@Html.ActionLink(\"Contact\", \"Contact\", \"Home\")&lt;/li>\n                  &lt;li>@Html.ActionLink(\"Employees List\", \"Employees\", \"Employee\")&lt;/li>\n               &lt;/ul>\n\t\t\t\t\t\n               @Html.Partial(\"_LoginPartial\")\n            &lt;/div>\n\t\t\t\t\n         &lt;/div>\n\t\t\t\n      &lt;/div>\n\t\t\n      &lt;div class = \"container body-content\">\n         @RenderBody()\n         &lt;hr />\n         &lt;footer>\n            &lt;p>© @DateTime.Now.Year - My ASP.NET Application&lt;/p>\n         &lt;/footer>\n      &lt;/div>\n\t\t\n      @Scripts.Render(\"~/bundles/jquery\")\n      @Scripts.Render(\"~/bundles/bootstrap\")\n      @RenderSection(\"scripts\", required: false)\n\t\t\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>To test Employees action method from the Employee controller, we need to add another test method in our unit testing project. Following s the EmployeeControllerTest class in which we will test the Employees action method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;TestClass]\npublic class EmployeeControllerTest{\n   &#91;TestMethod]\n   public void Employees(){\n      // Arrange\n      EmployeeController controller = new EmployeeController();\n\t\t\n      // Act\n      ViewResult result = controller.Index() as ViewResult;\n\t\t\n      // Assert\n      Assert.IsNotNull(result);\n   }\n}</code></pre>\n\n\n\n<p>Select Run → All Tests from the Test menu to test these action methods.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/employee_test_method.jpg\" alt=\"Employee Test Method\"/></figure>\n\n\n\n<p>You can see that the Employees test method is also passed now. When you run the application, you will see the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/output_employee_test_method.jpg\" alt=\"\"/></figure>\n\n\n\n<p>Click ‘Employees List’ option in the navigation bar and you will see the list of employees.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/employee_list.jpg\" alt=\"Employee List\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In computer programming, unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit for use. In other words, it is a software development process in which the smallest testable parts of an application, called units, are individually and independently scrutinized for proper operation. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3788"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3788"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3788/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3788"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3788"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3788"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3790,"date":"2020-09-19T11:19:27","date_gmt":"2020-09-19T11:19:27","guid":{"rendered":"http://backend.foobrdigital.com/?p=3790"},"modified":"2020-09-19T11:19:27","modified_gmt":"2020-09-19T11:19:27","slug":"asp-net-mvc-deployment","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-deployment/","title":{"rendered":"Deployment"},"content":{"rendered":"\n<p>In this chapter, we will be covering how to deploy ASP.NET MVC application. After understating different concepts in ASP.NET MVC applications, now it’s time to understand the deployment process. So, whenever we are building any MVC application we are basically producing a&nbsp;<strong>dll</strong>&nbsp;file associated for the same with all the application settings and logic inside and these&nbsp;<strong>dlls</strong>&nbsp;are in the bin directory of the project as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/deployment.jpg\" alt=\"Deployment\"/></figure>\n\n\n\n<h2>Publishing to Microsoft Azure</h2>\n\n\n\n<p>Let’s take a look at a simple example in which we will deploy our example to Microsoft Azure.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Right-click on the project in the Solution Explorer and select Publish as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/solution_explorer.jpg\" alt=\"Solution Explorer\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− You will see the Publish Web dialog. Click on the Microsoft Azure Web Apps.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/microsoft_azure_web_apps.jpg\" alt=\"Microsoft Azure Web Apps\"/></figure>\n\n\n\n<p>It will display the ‘Sign in’ page.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Enter credentials for the Microsoft Azure Subscription.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/credentials.jpg\" alt=\"Credentials\"/></figure>\n\n\n\n<p>Once you’re successfully connected to your Azure account, you will see the following dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/azure_account.jpg\" alt=\"Azure account\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Click ‘New’ button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_button.jpg\" alt=\"New Button\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Enter the desired information on the above dialog such as Web App name, which must be a unique name. You will also need to enter App service plan, resource group, and then select your region.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/desired_information.jpg\" alt=\"Desired Information\"/></figure>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Click ‘Next’ button to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_next_button.jpg\" alt=\"Click Next Button\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Click the ellipsis mark ‘…’ to select the connection string.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/ellipsis_mark.jpg\" alt=\"Ellipsis Mark\"/></figure>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Select the server name and then choose the Windows Authentication option. Select the database name as well. Now you will see that the connection string is generated for you.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/generating_connection.jpg\" alt=\"Generating Connection\"/></figure>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Click ‘Next’ to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_publish_web_next.jpg\" alt=\"Click Publish Web Next\"/></figure>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− To check all the files and dlls which we will be publishing to Azure, click the Start Preview. Click ‘Publish’ button to publish your application.</p>\n\n\n\n<p>Once the application is successfully published to Azure, you will see the message in the output window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/publishing_azure.jpg\" alt=\"Publishing Azure\"/></figure>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− Now open your browser and enter the following URL&nbsp;<strong>‘http://mymvcdemoapp.azurewebsites.net/employees’</strong>&nbsp;and you will see the list of employees.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/employees_list.jpg\" alt=\"Employees List\"/></figure>\n\n\n\n<p><strong>Step 12</strong>&nbsp;− Now if you go to your Azure portal and click ‘App Services’, then you see that your application is deployed to Azure.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/app_service.jpg\" alt=\"App Services\"/></figure>\n\n\n\n<p><strong>Step 13</strong>&nbsp;− Click the name of your app and you will see the information related to that application such as URL, Status, Location, etc.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/related_information.jpg\" alt=\"Related Information\"/></figure>\n\n\n\n<p>We have seen so far how to publish a web application to Azure app, after the application is created. You can also create an application, which will be deployed to Azure.</p>\n\n\n\n<p>Let’s create a new ASP.NET MVC application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/asp_dot_net_mvc.jpg\" alt=\"ASP.NET MVC application\"/></figure>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Click Ok and you will see the following dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/asp_dot_net_project.jpg\" alt=\"ASP.NET Project\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Select MVC template and also check Host in the Cloud checkbox. Click Ok.</p>\n\n\n\n<p>When the Configure Microsoft Azure Web App Settings dialog appears, make sure that you are signed in to Azure.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/configure_microsoft_azure.jpg\" alt=\"Configure Microsoft Azure\"/></figure>\n\n\n\n<p>You can see the default name, but you can also change the&nbsp;<strong>Web App name</strong>.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Enter the desired information as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/enter_desired_information.jpg\" alt=\"Enter Desired Information\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Select the ‘Create new server’ from the Database server dropdown and you will see the additional field.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/create_new_server.jpg\" alt=\"Create New Server\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Enter the Database server, username, and password. Click Ok.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Once the project is created, run the application and you will see that it is running on the localhost.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/run_application.jpg\" alt=\"Run Application\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− To deploy these applications to Azure, right-click on the project in the solution explorer and select ‘Publish’.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/deploy_application.jpg\" alt=\"Deploy Application\"/></figure>\n\n\n\n<p>You will see the following dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/select_publish_target.jpg\" alt=\"Select Publish Target\"/></figure>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Click the ‘Microsoft Azure Web Apps’.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_microsoft_azure_web_apps.jpg\" alt=\"Click Microsoft Azure Web Apps\"/></figure>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Select your application name from the Existing Web Apps and click Ok.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/select_application_name.jpg\" alt=\"Select Application Name\"/></figure>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− Click the ‘Validate Connection’ button to check for the connection on Azure.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/validate_connection.jpg\" alt=\"Validate Connection\"/></figure>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− Click ‘Next’ to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_on_next.jpg\" alt=\"Click on Next\"/></figure>\n\n\n\n<p>Now you will see that the connection string is already generated by default.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/generated_connection_string.jpg\" alt=\"Generated Connection String\"/></figure>\n\n\n\n<p><strong>Step 12</strong>&nbsp;− Click ‘Next’ to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/connection_string_next.jpg\" alt=\"Connection String Next\"/></figure>\n\n\n\n<p><strong>Step 13</strong>&nbsp;− To check all the files and dlls which will be published to Azure, click the ‘Start Preview’.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/preview.jpg\" alt=\"Preview\"/></figure>\n\n\n\n<p><strong>Step 14</strong>&nbsp;− Click ‘Publish’ button to publish your application. Once the application is successfully published to Azure, you will see the message in the output window.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/publish_button.jpg\" alt=\"Publish Button\"/></figure>\n\n\n\n<p>You will also see that the application is now running from the cloud.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/cloud.jpg\" alt=\"Cloud\"/></figure>\n\n\n\n<p>Let’s go to Azure portal again. You will see the app here as well.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/azure_portal.jpg\" alt=\"Azure Portal\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will be covering how to deploy ASP.NET MVC application. After understating different concepts in ASP.NET MVC applications, now it’s time to understand the deployment process. So, whenever we are building any MVC application we are basically producing a&nbsp;dll&nbsp;file associated for the same with all the application settings and logic inside and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3790"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3790"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3790/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3790"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3790"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3790"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3792,"date":"2020-09-19T11:20:30","date_gmt":"2020-09-19T11:20:30","guid":{"rendered":"http://backend.foobrdigital.com/?p=3792"},"modified":"2020-09-19T11:20:30","modified_gmt":"2020-09-19T11:20:30","slug":"asp-net-mvc-self-hosting","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/asp-net-mvc-self-hosting/","title":{"rendered":"Self-hosting"},"content":{"rendered":"\n<p>In this chapter, we will cover Self-Hosting. Self-Hosting creates a runtime environment for the application to run in any environment say MAC, or in Linux box, etc. Self-Hosting also means it will have a mini CLR version.</p>\n\n\n\n<h2>Deploy using File System</h2>\n\n\n\n<p>Let’s take a look at a simple example of self-hosting.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Once your ASP.NET MVC application is completed and you want to use selfhosting, right-click on the Project in the solution explorer.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/use_self_hosting.jpg\" alt=\"Use Self-Hosting\"/></figure>\n\n\n\n<p>You will see the following dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/self_hosting_dialog_box.jpg\" alt=\"Self-Hosting Dialog Box\"/></figure>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Click the ‘Custom’ option, which will display the New Custom Profile dialog.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/new_custom_profile_dialog.jpg\" alt=\"New Custom Profile dialog\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Enter the profile name and click Ok.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/enter_profile_name.jpg\" alt=\"Enter Profile Name\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Select the File System from the Publish method dropdown list and also specify the target location. Click ‘Next’ button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/select_file_system.jpg\" alt=\"Select File System\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Expand the File Publish Options.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/file_publish_options.jpg\" alt=\"File Publish Options\"/></figure>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Check the ‘Delete all existing files prior to publish’ and ‘Precompile during publishing’ checkboxes and click ‘Next’ to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/delete_all_existing_files.jpg\" alt=\"Delete all Existing Files\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Click ‘Publish’ button, it will publish the files at the desired location.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/publish_files_desired_location.jpg\" alt=\"Publish Files at Desired Location\"/></figure>\n\n\n\n<p>You will see all the files and folders in the target location on your system.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/target_location.jpg\" alt=\"Target Location\"/></figure>\n\n\n\n<p>It will have all the files required to get deployed on the localhost.</p>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Now open the Turn Windows Feature on or off and Expand Internet Information Services → World Wide Web Services → Application Development Features.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/open_turn_windows_features.jpg\" alt=\"Open Turn Windows Features\"/></figure>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Check the checkboxes as shown in the above screenshot and click Ok.</p>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− Let’s open the IIS Manager as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/iis_manager.jpg\" alt=\"IIS Manager\"/></figure>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− You will see different connections on the left side of the screen, right-click on MyWebSite.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/different_connections.jpg\" alt=\"Different Connections\"/></figure>\n\n\n\n<p><strong>Step 12</strong>&nbsp;− Select the ‘Convert to Application’ option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/convert_application.jpg\" alt=\"Convert to Application\"/></figure>\n\n\n\n<p>As you can see, its physical path is the same as we have mentioned above while publishing, using the File system.</p>\n\n\n\n<p><strong>Step 13</strong>&nbsp;− Click Ok to continue.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/click_ok.jpg\" alt=\"Click OK\"/></figure>\n\n\n\n<p>Now you can see that its icon has changed.</p>\n\n\n\n<p><strong>Step 14</strong>&nbsp;− Open your browser and specify the following URL&nbsp;<strong>http://localhost/MyWebSite</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/asp.net_mvc/images/specify_url.jpg\" alt=\"Specify URL\"/></figure>\n\n\n\n<p>You can see that it is running from the folder which we have specified during deployment.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will cover Self-Hosting. Self-Hosting creates a runtime environment for the application to run in any environment say MAC, or in Linux box, etc. Self-Hosting also means it will have a mini CLR version. Deploy using File System Let’s take a look at a simple example of self-hosting. Step 1&nbsp;− Once your [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[70],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3792"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3792"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3792/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3792"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3792"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3792"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]