[
    {
        "id": 1379,
        "date": "2021-02-09T06:48:17",
        "date_gmt": "2021-02-09T06:48:17",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1379"
        },
        "modified": "2021-02-09T06:48:17",
        "modified_gmt": "2021-02-09T06:48:17",
        "slug": "jmeter-overview",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-overview\/",
        "title": {
            "rendered": "jMeter &#8211; Overview"
        },
        "content": {
            "rendered": "\n<p>Before going into the details of JMeter, let us first understand a few jargons associated with the testing of any application.<\/p>\n\n\n\n<ul><li><strong>Performance Test<\/strong>&nbsp;\u2212 This test sets the best possible performance expectation under a given configuration of infrastructure. It also highlights early in the testing process if any changes need to be made before the application goes into production.<\/li><li><strong>Load Test<\/strong>&nbsp;\u2212 This test is basically used for testing the system under the top load it was designed to operate under.<\/li><li><strong>Stress Test<\/strong>&nbsp;\u2212 This test is an attempt to break the system by overwhelming its resources.<\/li><\/ul>\n\n\n\n<h2>What is JMeter?<\/h2>\n\n\n\n<p>JMeter is a software that can perform load test, performance-oriented business (functional) test, regression test, etc., on different protocols or technologies.<\/p>\n\n\n\n<p><strong>Stefano Mazzocchi<\/strong>&nbsp;of the Apache Software Foundation was the original developer of JMeter. He wrote it primarily to test the performance of Apache JServ (now called as Apache Tomcat project). Apache later redesigned JMeter to enhance the GUI and to add functional testing capabilities.<\/p>\n\n\n\n<p>JMeter is a Java desktop application with a graphical interface that uses the Swing graphical API. It can therefore run on any environment \/ workstation that accepts a Java virtual machine, for example \u2212 Windows, Linux, Mac, etc.<\/p>\n\n\n\n<p>The protocols supported by JMeter are \u2212<\/p>\n\n\n\n<ul><li>Web \u2212 HTTP, HTTPS sites &#8216;web 1.0&#8217; web 2.0 (ajax, flex and flex-ws-amf)<\/li><li>Web Services \u2212 SOAP \/ XML-RPC<\/li><li>Database via JDBC drivers<\/li><li>Directory \u2212 LDAP<\/li><li>Messaging Oriented service via JMS<\/li><li>Service \u2212 POP3, IMAP, SMTP<\/li><li>FTP Service<\/li><\/ul>\n\n\n\n<h2>JMeter Features<\/h2>\n\n\n\n<p>Following are some of the features of JMeter \u2212<\/p>\n\n\n\n<ul><li>Being an open source software, it is freely available.<\/li><li>It has a simple and intuitive GUI.<\/li><li>JMeter can conduct load and performance test for many different server types \u2212 Web &#8211; HTTP, HTTPS, SOAP, Database via JDBC, LDAP, JMS, Mail &#8211; POP3, etc.<\/li><li>It is a platform-independent tool. On Linux\/Unix, JMeter can be invoked by clicking on JMeter shell script. On Windows, it can be invoked by starting the jmeter.bat file.<\/li><li>It has full Swing and lightweight component support (precompiled JAR uses packages javax.swing.* ).<\/li><li>JMeter store its test plans in XML format. This means you can generate a test plan using a text editor.<\/li><li>Its full multi-threading framework allows concurrent sampling by many threads and simultaneous sampling of different functions by separate thread groups.<\/li><li>It is highly extensible.<\/li><li>It can also be used to perform automated and functional testing of the applications.<\/li><\/ul>\n\n\n\n<h2>How JMeter Works?<\/h2>\n\n\n\n<p>JMeter simulates a group of users sending requests to a target server, and returns statistics that show the performance\/functionality of the target server\/application via tables, graphs, etc.<\/p>\n\n\n\n<p>Take a look at the following figure that depicts how JMeter works \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/jmeter_process.jpg\" alt=\"JMeter Process\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Before going into the details of JMeter, let us first understand a few jargons associated with the testing of any application. Performance Test&nbsp;\u2212 This test sets the best possible performance expectation under a given configuration of infrastructure. It also highlights early in the testing process if any changes need to be made before the application [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1379"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1379"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1379\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1380,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1379\/revisions\/1380"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1379"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1379"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1379"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1381,
        "date": "2021-02-09T06:50:03",
        "date_gmt": "2021-02-09T06:50:03",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1381"
        },
        "modified": "2021-02-09T06:50:03",
        "modified_gmt": "2021-02-09T06:50:03",
        "slug": "jmeter-environment",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-environment\/",
        "title": {
            "rendered": "jMeter &#8211; Environment"
        },
        "content": {
            "rendered": "\n<p>JMeter is a framework for Java, so the very first requirement is to have JDK installed in your machine.<\/p>\n\n\n\n<h2>System Requirement<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>JDK<\/th><td>1.6 or above.<\/td><\/tr><tr><th>Memory<\/th><td>No minimum requirement.<\/td><\/tr><tr><th>Disk Space<\/th><td>No minimum requirement.<\/td><\/tr><tr><th>Operating System<\/th><td>No minimum requirement.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Step 1: Verify Java Installation<\/h3>\n\n\n\n<p>First of all, verify whether you have Java installed in your system. Open your console and execute one of the following&nbsp;<strong>java<\/strong>&nbsp;commands based on the operating system you are working on.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Task<\/th><th>Command<\/th><\/tr><tr><td>Windows<\/td><td>Open Command Console<\/td><td>c:\\&gt; java -version<\/td><\/tr><tr><td>Linux<\/td><td>Open Command Terminal<\/td><td>$ java -version<\/td><\/tr><tr><td>Mac<\/td><td>Open Terminal<\/td><td>machine: ~ joseph$ java -version<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>If you have Java installed in your system, you would get an appropriate output based on the OS you are working on.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>java version &#8220;1.7.0_25&#8243;Java(TM) SE Runtime Environment (build 1.7.0_25-b15)Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)<\/td><\/tr><tr><td>Linux<\/td><td>java version &#8220;1.7.0_25&#8243;Java(TM) SE Runtime Environment (build 1.7.0_25-b15)Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)<\/td><\/tr><tr><td>Mac<\/td><td>java version &#8220;1.7.0_25&#8243;Java(TM) SE Runtime Environment (build 1.7.0_25-b15)Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>If you do not have Java installed, install the Java Software Development Kit (SDK) from&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html\">www.oracle.com\/technetwork\/java\/javase\/downloads\/index.html<\/a>. We are assuming Java 1.7.0_25 as the installed version for this tutorial.<\/p>\n\n\n\n<h3>Step 2: Set Java Environment<\/h3>\n\n\n\n<p>Set the&nbsp;<strong>JAVA_HOME<\/strong>&nbsp;environment variable to point to the base directory location, where Java is installed on your machine. For example \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable JAVA_HOME to C:\\Program Files\\Java\\jdk1.7.0_25<\/td><\/tr><tr><td>Linux<\/td><td>export JAVA_HOME=\/usr\/local\/java-current<\/td><\/tr><tr><td>Mac<\/td><td>export JAVA_HOME=\/Library\/Java\/Home<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append Java compiler location to System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Append the string; C:\\Program Files\\Java\\jdk1.7.0_25\\bin to the end of the system variable, Path.<\/td><\/tr><tr><td>Linux<\/td><td>export PATH=$PATH:$JAVA_HOME\/bin\/<\/td><\/tr><tr><td>Mac<\/td><td>not required<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Verify Java Installation using&nbsp;<strong>java -version<\/strong>&nbsp;command as explained above.<\/p>\n\n\n\n<h3>Step 3: Download JMeter<\/h3>\n\n\n\n<p>Download the latest version of JMeter from&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/jmeter.apache.org\/download_jmeter.cgi\">https:\/\/jmeter.apache.org\/download_jmeter.cgi<\/a>. For this tutorial, we downloaded&nbsp;<em>apache-jmeter-2.9<\/em>&nbsp;and copied it into C:\\&gt;JMeter folder.<\/p>\n\n\n\n<p>The directory structure should look like as shown below \u2212<\/p>\n\n\n\n<ul><li>apache-jmeter-2.9<\/li><li>apache-jmeter-2.9\\bin<\/li><li>apache-jmeter-2.9\\docs<\/li><li>apache-jmeter-2.9\\extras<\/li><li>apache-jmeter-2.9\\lib\\<\/li><li>apache-jmeter-2.9\\lib\\ext<\/li><li>apache-jmeter-2.9\\lib\\junit<\/li><li>apache-jmeter-2.9\\printable_docs<\/li><\/ul>\n\n\n\n<p>You can rename the parent directory (i.e. apache-jmeter-2.9) if you want, but do not change any of the sub-directory names.<\/p>\n\n\n\n<h3>Step 4: Run JMeter<\/h3>\n\n\n\n<p>After downloading JMeter, go to the&nbsp;<em>bin<\/em>&nbsp;directory. In this case, it is&nbsp;<strong>\/home\/manisha\/apache-jmeter-2.9\/bin<\/strong>. Now click on the following \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>jmeter.bat<\/td><\/tr><tr><td>Linux<\/td><td>jmeter.sh<\/td><\/tr><tr><td>Mac<\/td><td>jmeter.sh<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>After a short pause, the JMeter GUI should appear, which is a Swing application, as seen in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/gui.jpg\" alt=\"JMeter GUI\"\/><\/figure>\n\n\n\n<p>This is the main page and the default page of the tool.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JMeter is a framework for Java, so the very first requirement is to have JDK installed in your machine. System Requirement JDK 1.6 or above. Memory No minimum requirement. Disk Space No minimum requirement. Operating System No minimum requirement. Step 1: Verify Java Installation First of all, verify whether you have Java installed in your [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1381"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1381"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1381\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1382,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1381\/revisions\/1382"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1381"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1381"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1381"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1383,
        "date": "2021-02-09T06:51:17",
        "date_gmt": "2021-02-09T06:51:17",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1383"
        },
        "modified": "2021-02-09T06:51:17",
        "modified_gmt": "2021-02-09T06:51:17",
        "slug": "jmeter-build-test-plan",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-build-test-plan\/",
        "title": {
            "rendered": "jMeter &#8211; Build Test Plan"
        },
        "content": {
            "rendered": "\n<h2>What is a Test Plan?<\/h2>\n\n\n\n<p>A Test Plan can be viewed as a container for running tests. It defines what to test and how to go about it. A complete test plan consists of one or more elements such as thread groups, logic controllers, sample-generating controllers, listeners, timers, assertions, and configuration elements. A test plan must have at least one thread group.<\/p>\n\n\n\n<h2>Writing a Test Plan<\/h2>\n\n\n\n<p>Follow the steps given below to write a test plan \u2212<\/p>\n\n\n\n<h3>Step 1: Start the JMeter Window<\/h3>\n\n\n\n<p>Open the JMeter window by clicking&nbsp;<strong>\/home\/manisha\/apache-jmeter-2.9\/bin\/jmeter.sh<\/strong>. The JMeter window will appear as below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/gui.jpg\" alt=\"JMeter GUI\"\/><\/figure>\n\n\n\n<p>This is a plain and blank JMeter window without any additional elements added to it. It contains two nodes \u2212<\/p>\n\n\n\n<ul><li><strong>Test Plan node<\/strong>&nbsp;\u2212 is where the real test plan is kept.<\/li><li><strong>Workbench node<\/strong>&nbsp;\u2212 It simply provides a place to temporarily store test elements while not in use, for copy\/paste purposes. When you save your test plan, Workbench items are not saved with it.<\/li><\/ul>\n\n\n\n<h3>Step 2: Add\/Remove Elements<\/h3>\n\n\n\n<p>Elements (which will be discussed in the next chapter&nbsp;<a href=\"https:\/\/www.tutorialspoint.com\/jmeter\/jmeter_test_plan_elements.htm\">Test Plan Elements<\/a>) can be added to a test plan by right-clicking on the Test Plan node and choosing a new element from the &#8220;add&#8221; list.<\/p>\n\n\n\n<p>Alternatively, you can load an element from a file and add it by choosing the &#8220;merge&#8221; or &#8220;open&#8221; option.<\/p>\n\n\n\n<p>For example, let us add a Thread Group element to a Test Plan as shown below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/adding_thread_group.jpg\" alt=\"Add Thread Group\"\/><\/figure>\n\n\n\n<p>To remove an element, make sure the element is selected, right-click on the element, and choose the &#8220;remove&#8221; option.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/remove_element.jpg\" alt=\"Remove Element\"\/><\/figure>\n\n\n\n<h3>Step 3: Load and Save the Elements<\/h3>\n\n\n\n<p>To load an element from file \u2212<\/p>\n\n\n\n<ul><li>Right-click on the existing tree element to which you want to add the loaded element.<\/li><li>Select Merge.<\/li><li>Choose the file where you saved the elements.<\/li><li>JMeter will merge the elements into the tree.<\/li><\/ul>\n\n\n\n<p>By default, JMeter does not save the element, you need to explicitly save it.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/load_element.jpg\" alt=\"Load Element\"\/><\/figure>\n\n\n\n<p>To save tree elements \u2212<\/p>\n\n\n\n<ul><li>Right-click on the element.<\/li><li>Choose the&nbsp;<em>Save Selection As<\/em>&nbsp;&#8230; option.<\/li><\/ul>\n\n\n\n<p>JMeter will save the element selected, plus all the child elements beneath it. By default, JMeter doesn&#8217;t save the elements, you need to explicitly save it as mentioned earlier.<\/p>\n\n\n\n<h3>Step 4: Configuring the Tree Elements<\/h3>\n\n\n\n<p>Any element in the Test Plan can be configured using the controls present in JMeter&#8217;s right-hand side frame. These controls allow you to configure the behavior of that particular test element. For example, the Thread Group can be configured for a number of users, ramp up periods, etc., as shown below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/adding_thread_group.jpg\" alt=\"Add Thread Group\"\/><\/figure>\n\n\n\n<h3>Step 5: Saving the Test Plan<\/h3>\n\n\n\n<p>You can save an entire Test Plan by using either&nbsp;<strong>Save<\/strong>&nbsp;or&nbsp;<strong>&#8220;Save Test Plan As &#8230;&#8221;<\/strong>&nbsp;from the File menu.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/save_test_plan.jpg\" alt=\"Save Test Plan\"\/><\/figure>\n\n\n\n<h3>Step 6: Run the Test Plan<\/h3>\n\n\n\n<p>You can run the Test Plan by clicking&nbsp;<strong>Start<\/strong>(Control + r) from the&nbsp;<strong>Run<\/strong>&nbsp;menu item. When JMeter starts running, it shows a small green box at the right-hand end of the section just under the menubar.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/run_test_plan.jpg\" alt=\"Run Test Plan\"\/><\/figure>\n\n\n\n<p>The numbers to the left of the green box are the number of active threads \/ total number of threads. These only apply to a locally run test; they do not include any threads started on remote systems when using client-server mode.<\/p>\n\n\n\n<h3>Step 7: Stop the Test Plan<\/h3>\n\n\n\n<p>You can stop your test in two ways \u2212<\/p>\n\n\n\n<ul><li>Using&nbsp;<strong>Stop<\/strong>&nbsp;(Control + &#8216;.&#8217;). It stops the threads immediately if possible.<\/li><li>Using&nbsp;<strong>Shutdown<\/strong>&nbsp;(Control + &#8216;,&#8217;). It requests the threads to stop at the end of any current work.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>What is a Test Plan? A Test Plan can be viewed as a container for running tests. It defines what to test and how to go about it. A complete test plan consists of one or more elements such as thread groups, logic controllers, sample-generating controllers, listeners, timers, assertions, and configuration elements. A test plan [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1383"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1383"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1383\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1384,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1383\/revisions\/1384"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1383"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1383"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1383"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1385,
        "date": "2021-02-09T06:52:36",
        "date_gmt": "2021-02-09T06:52:36",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1385"
        },
        "modified": "2021-02-09T06:52:36",
        "modified_gmt": "2021-02-09T06:52:36",
        "slug": "jmeter-test-plan-elements",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-test-plan-elements\/",
        "title": {
            "rendered": "jMeter &#8211; Test Plan Elements"
        },
        "content": {
            "rendered": "\n<p>A JMeter Test Plan comprises of test elements discussed below. A Test Plan comprises of at least one Thread Group. Within each Thread Group, we may place a combination of one or more of other elements \u2212 Sampler, Logic Controller, Configuration Element, Listener, and Timer. Each Sampler can be preceded by one or more Pre-processor element, followed by Post-processor element, and\/or Assertion element. Let us see each of these elements in detail \u2212<\/p>\n\n\n\n<h2>Thread Group<\/h2>\n\n\n\n<p>Thread Group elements are the beginning points of your test plan. As the name suggests, the thread group elements control the number of threads JMeter will use during the test. We can also control the following via the Thread Group \u2212<\/p>\n\n\n\n<ul><li>Setting the number of threads<\/li><li>Setting the ramp-up time<\/li><li>Setting the number of test iterations<\/li><\/ul>\n\n\n\n<p>The Thread Group Control Panel looks like this \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/thread_group_panel.jpg\" alt=\"Thread Group\"\/><\/figure>\n\n\n\n<p>The Thread Group Panel holds the following components \u2212<\/p>\n\n\n\n<ul><li><strong>Action to be taken after a Sampler error<\/strong>&nbsp;\u2212 In case any error occurs during test execution, you may let the test either \u2212<ul><li><strong>Continue<\/strong>&nbsp;to the next element in the test<\/li><li><strong>Stop Thread<\/strong>&nbsp;to stop the current Thread.<\/li><li><strong>Stop Test<\/strong>&nbsp;completely, in case you want to inspect the error before it continues running.<\/li><\/ul><\/li><li><strong>Number of Threads<\/strong>&nbsp;\u2212 Simulates the number of users or connections to your server application.<\/li><li><strong>Ramp-Up Period<\/strong>&nbsp;Defines how long it will take JMeter to get all threads running.<\/li><li><strong>Loop Count<\/strong>&nbsp;\u2212 Defines the number of times to execute the test.<\/li><li><strong>Scheduler checkbox<\/strong>&nbsp;\u2212 Once selected, the Scheduler Configuration section appears at the bottom of the control panel.<\/li><li><strong>Scheduler Configuration<\/strong>&nbsp;\u2212 You can configure the start and end time of running the test.<\/li><\/ul>\n\n\n\n<h2>Controllers<\/h2>\n\n\n\n<p>JMeter has two types of Controllers \u2212&nbsp;<em>Samplers<\/em>&nbsp;and&nbsp;<em>Logic Controllers<\/em>.<\/p>\n\n\n\n<h3>Samplers<\/h3>\n\n\n\n<p>Samplers allow JMeter to send specific types of requests to a server. They simulate a user request for a page from the target server. For example, you can add a HTTP Request sampler if you need to perform a POST, GET, or DELETE on a HTTP service.<\/p>\n\n\n\n<p>Some useful samplers are \u2212<\/p>\n\n\n\n<ul><li>HTTP Request<\/li><li>FTP Request<\/li><li>JDBC Request<\/li><li>Java Request<\/li><li>SOAP\/XML Request<\/li><li>RPC Requests<\/li><\/ul>\n\n\n\n<p>The following screenshot shows an HTTP Request Sampler Control Panel \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/sampler_control_panel.jpg\" alt=\"Sampler Control Panel\"\/><\/figure>\n\n\n\n<h3>Logic Controllers<\/h3>\n\n\n\n<p>Logic Controllers let you control the order of processing of Samplers in a Thread. Logic controllers can change the order of a request coming from any of their child elements. Some examples are \u2212 ForEach Controller, While Controller, Loop Controller, IF Controller, Run Time Controller, Interleave Controller, Throughput Controller, and Run Once Controller.<\/p>\n\n\n\n<p>The following screenshot shows a Loop Controller Control Panel \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/logic_controller.jpg\" alt=\"Logic Controller Panel\"\/><\/figure>\n\n\n\n<p>The following list consists of all the Logic Controllers JMeter provides \u2212<\/p>\n\n\n\n<ul><li>Simple Controller<\/li><li>Loop Controller<\/li><li>Once Only Controller<\/li><li>Interleave Controller<\/li><li>Random Controller<\/li><li>Random Order Controller<\/li><li>Throughput Controller<\/li><li>Runtime Controller<\/li><li>If Controller<\/li><li>While Controller<\/li><li>Switch Controller<\/li><li>ForEach Controller<\/li><li>Module Controller<\/li><li>Include Controller<\/li><li>Transaction Controller<\/li><li>Recording Controller<\/li><\/ul>\n\n\n\n<h3>Test Fragments<\/h3>\n\n\n\n<p>A Test Fragment is a special type of element placed at the same level as the Thread Group element. It is distinguished from a Thread Group in that it is not executed unless it is referenced by either a Module Controller or an Include_Controller. This element is purely for code re-use within Test Plans.<\/p>\n\n\n\n<h2>Listeners<\/h2>\n\n\n\n<p>Listeners let you view the results of Samplers in the form of tables, graphs, trees, or simple text in some log files. They provide visual access to the data gathered by JMeter about the test cases as a Sampler component of JMeter is executed.<\/p>\n\n\n\n<p>Listeners can be added anywhere in the test, including directly under the test plan. They will collect data only from elements at or below their level. The following list consists of all the Listeners JMeter provides \u2212<\/p>\n\n\n\n<ul><li>Sample Result Save Configuration<\/li><li>Graph Full Results<\/li><li>Graph Results<\/li><li>Spline Visualizer<\/li><li>Assertion Results<\/li><li>View Results Tree<\/li><li>Aggregate Report<\/li><li>View Results in Table<\/li><li>Simple Data Writer<\/li><li>Monitor Results<\/li><li>Distribution Graph (alpha)<\/li><li>Aggregate Graph<\/li><li>Mailer Visualizer<\/li><li>BeanShell Listener<\/li><li>Summary Report<\/li><\/ul>\n\n\n\n<h2>Timers<\/h2>\n\n\n\n<p>By default, a JMeter thread sends requests without pausing between each sampler. This may not be what you want. You can add a timer element which allows you to define a period to wait between each request.<\/p>\n\n\n\n<p>The following list shows all the timers that JMeter provides \u2212<\/p>\n\n\n\n<ul><li>Constant Timer<\/li><li>Gaussian Random Timer<\/li><li>Uniform Random Timer<\/li><li>Constant Throughput Timer<\/li><li>Synchronizing Timer<\/li><li>JSR223 Time<\/li><li>BeanShell Time<\/li><li>BSF Time<\/li><li>Poisson Random Time<\/li><\/ul>\n\n\n\n<p>The following screenshot shows a Constant Timer Control Panel \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/constant_timer.jpg\" alt=\"Constant Timer Panel\"\/><\/figure>\n\n\n\n<h2>Assertions<\/h2>\n\n\n\n<p>Assertions allow you to include some validation test on the response of your request made using a Sampler. Using assertions you can prove that your application is returning the correct data. JMeter highlights when an assertion fails.<\/p>\n\n\n\n<p>The following list consists of all the assertions JMeter provides \u2212<\/p>\n\n\n\n<ul><li>Beanshell Assertion<\/li><li>BSF Assertion<\/li><li>Compare Assertion<\/li><li>JSR223 Assertion<\/li><li>Response Assertion<\/li><li>Duration Assertion<\/li><li>Size Assertion<\/li><li>XML Assertion<\/li><li>BeanShell Assertion<\/li><li>MD5Hex Assertion<\/li><li>HTML Assertion<\/li><li>XPath Assertion<\/li><li>XML Schema Assertion<\/li><\/ul>\n\n\n\n<p>The following screenshot shows a Response Assertion Control Panel \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/response_assertion_panel.jpg\" alt=\"Response Assertion Panel\"\/><\/figure>\n\n\n\n<h2>Configuration Elements<\/h2>\n\n\n\n<p>Configuration Elements allow you to create defaults and variables to be used by Samplers. They are used to add or modify requests made by Samplers.<\/p>\n\n\n\n<p>They are executed at the start of the scope of which they are part, before any Samplers that are located in the same scope. Therefore, a Configuration Element is accessed only from inside the branch where it is placed.<\/p>\n\n\n\n<p>The following list consists of all the Configuration Elements that JMeter provides \u2212<\/p>\n\n\n\n<ul><li>Counter<\/li><li>CSV Data Set Config<\/li><li>FTP Request Defaults<\/li><li>HTTP Authorization Manager<\/li><li>HTTP Cache Manager<\/li><li>HTTP Cookie Manager<\/li><li>HTTP Proxy Server<\/li><li>HTTP Request Defaults<\/li><li>HTTP Header Manager<\/li><li>Java Request Defaults<\/li><li>Keystore Configuration<\/li><li>JDBC Connection Configuration<\/li><li>Login Config Element<\/li><li>LDAP Request Defaults<\/li><li>LDAP Extended Request Defaults<\/li><li>TCP Sampler Config<\/li><li>User Defined Variables<\/li><li>Simple Config Element<\/li><li>Random Variable<\/li><\/ul>\n\n\n\n<h2>Pre-processor Elements<\/h2>\n\n\n\n<p>A pre-processor element is something that runs just before a sampler executes. They are often used to modify the settings of a Sample Request just before it runs, or to update variables that are not extracted from response text.<\/p>\n\n\n\n<p>The following list consists of all the pre-processor elements that JMeter provides \u2212<\/p>\n\n\n\n<ul><li>HTML Link Parser<\/li><li>HTTP URL Re-writing Modifier<\/li><li>HTTP User Parameter Modifier<\/li><li>User Parameters<\/li><li>JDBC PreProcessor<\/li><li>JSR223 PreProcessor<\/li><li>RegEx User Parameters<\/li><li>BeanShell PreProcessor<\/li><li>BSF PreProcessor<\/li><\/ul>\n\n\n\n<h2>Post-processor Elements<\/h2>\n\n\n\n<p>A post-processor executes after a sampler finishes its execution. This element is most often used to process the response data, for example, to retrieve a particular value for later use.<\/p>\n\n\n\n<p>The following list consists of all the Post-Processor Elements JMeter provides \u2212<\/p>\n\n\n\n<ul><li>Regular Expression Extractor<\/li><li>XPath Extractor<\/li><li>Result Status Action Handler<\/li><li>JSR223 PostProcessor<\/li><li>JDBC PostProcessor<\/li><li>BSF PostProcessor<\/li><li>CSS\/JQuery Extractor<\/li><li>BeanShell PostProcessor<\/li><li>Debug PostProcessor<\/li><\/ul>\n\n\n\n<h2>Execution Order of Test Elements<\/h2>\n\n\n\n<p>Following is the execution order of the test plan elements \u2212<\/p>\n\n\n\n<ul><li>Configuration elements<\/li><li>Pre-Processors<\/li><li>Timers<\/li><li>Sampler<\/li><li>Post-Processors (unless SampleResult is null)<\/li><li>Assertions (unless SampleResult is null)<\/li><li>Listeners (unless SampleResult is null)<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A JMeter Test Plan comprises of test elements discussed below. A Test Plan comprises of at least one Thread Group. Within each Thread Group, we may place a combination of one or more of other elements \u2212 Sampler, Logic Controller, Configuration Element, Listener, and Timer. Each Sampler can be preceded by one or more Pre-processor [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1385"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1385"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1385\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1386,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1385\/revisions\/1386"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1385"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1385"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1385"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1387,
        "date": "2021-02-09T06:53:59",
        "date_gmt": "2021-02-09T06:53:59",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1387"
        },
        "modified": "2021-02-09T06:53:59",
        "modified_gmt": "2021-02-09T06:53:59",
        "slug": "jmeter-web-test-plan",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-web-test-plan\/",
        "title": {
            "rendered": "jMeter &#8211; Web Test Plan"
        },
        "content": {
            "rendered": "\n<p>Let us build a simple test plan which tests a web page. We write a test plan in Apache JMeter so that we can test the performance of the web page shown by the URL \u2212&nbsp;<a href=\"https:\/\/www.tutorialspoint.com\/\">www.tutorialspoint.com<\/a>.<\/p>\n\n\n\n<h2>Start JMeter<\/h2>\n\n\n\n<p>Open the JMeter window by clicking on&nbsp;<strong>\/home\/manisha\/apache-jmeter-2.9\/bin\/jmeter.sh<\/strong>. The JMeter window appear as below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/gui.jpg\" alt=\"JMeter GUI\"\/><\/figure>\n\n\n\n<h2>Rename the Test Plan<\/h2>\n\n\n\n<p>Change the name of test plan node to&nbsp;<em>Sample Test<\/em>&nbsp;in the&nbsp;<em>Name<\/em>&nbsp;text box. You need to change the focus to workbench node and back to the Test Plan node to see the name getting reflected.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/sample_test.jpg\" alt=\"Sample Test\"\/><\/figure>\n\n\n\n<h2>Add Thread Group<\/h2>\n\n\n\n<p>Now we add our first element in the window. We add one Thread Group, which is a placeholder for all other elements like Samplers, Controllers, and Listeners. We need one so we can configure number of users to simulate.<\/p>\n\n\n\n<p>In JMeter, all the node elements are added by using the context menu.<\/p>\n\n\n\n<ul><li>Right-click the element where you want to add a child element node.<\/li><li>Choose the appropriate option to add.<\/li><li>Right-click on the Sample Test (our Test Plan) \u2192 Add \u2192 Threads (Users) \u2192 Thread Group. Thus, the Thread Group gets added under the Test Plan (Sample Test) node.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/thread_group_added.jpg\" alt=\"Thread Group Added\"\/><\/figure>\n\n\n\n<ul><li>Name the Thread Group as&nbsp;<em>Users<\/em>. For us, this element means users visiting the TutorialsPoint Home Page.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/thread_group_users.jpg\" alt=\"Thread Group User\"\/><\/figure>\n\n\n\n<h2>Add Sampler<\/h2>\n\n\n\n<p>We need to add one Sampler in our Thread Group (Users). As done earlier for adding Thread group, this time we will open the context menu of the Thread Group (Users) node by right-clicking and we will add HTTP Request Sampler by choosing Add \u2192 Sampler \u2192 HTTP request option.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/empty_sampler.jpg\" alt=\"Empty Sampler\"\/><\/figure>\n\n\n\n<p>It will add one empty HTTP Request Sampler under the Thread Group (Users) node. Let us configure this node element \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/sampler_with_data.jpg\" alt=\"Sampler With Data\"\/><\/figure>\n\n\n\n<ul><li><strong>Name<\/strong>&nbsp;\u2212 We will change the name to reflect the action what we want to achieve. We will name it as&nbsp;<strong>Visit TutorialsPoint Home Page<\/strong><\/li><li><strong>Server Name or IP<\/strong>&nbsp;\u2212 Here, we have to type the web server name. In our case it is&nbsp;<strong>www.tutorialspoint.com<\/strong>. (http:\/\/ part is not written this is only the name of the server or its IP)<\/li><li><strong>Protocol<\/strong>&nbsp;\u2212 We will keep this blank, which means we want HTTP as the protocol.<\/li><li><strong>Path<\/strong>&nbsp;\u2212 We will type path as \/ (slash). It means we want the root page of the server.<\/li><\/ul>\n\n\n\n<h2>Add Listener<\/h2>\n\n\n\n<p>We will now add a listener. Let us add View Results Tree Listener under the Thread Group (User) node. It will ensure that the results of the Sampler will be available to view in this Listener node element.<\/p>\n\n\n\n<p>To add a listener \u2212<\/p>\n\n\n\n<ul><li>Open the context menu<\/li><li>Right-click the Thread Group (Users)<\/li><li>Choose Add \u2192 Listener \u2192 View Results Tree option<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/listener.jpg\" alt=\"Listener\"\/><\/figure>\n\n\n\n<h2>Run the Test Plan<\/h2>\n\n\n\n<p>Now with all the setup, let us execute the test plan. With the configuration of the Thread Group (Users), we keep all the default values. It means JMeter will execute the sampler only once. It is similar to a single user, only once.<\/p>\n\n\n\n<p>This is similar to a user visiting a web page through browser, with JMeter sampler. To execute the test plan, Select Run from the menu and select Start option.<\/p>\n\n\n\n<p>Apache JMeter asks us to save the test plan in a disk file before actually starting the test. This is important if you want to run the test plan multiple times. You can opt for running it without saving too.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/save_plan_error.jpg\" alt=\"Save the Test Plan\"\/><\/figure>\n\n\n\n<h2>View the Output<\/h2>\n\n\n\n<p>We have kept the setting of the thread group as single thread (one user only) and loop for 1 time (run only one time), hence we will get the result of one single transaction in the View Result Tree Listener.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/view_result.jpg\" alt=\"View Result\"\/><\/figure>\n\n\n\n<p>Details of the above result are \u2212<\/p>\n\n\n\n<ul><li>Green color against the name&nbsp;<em>Visit TutorialsPoint Home Page<\/em>&nbsp;indicates success.<\/li><li>JMeter has stored all the headers and the responses sent by the web server and ready to show us the result in many ways.<\/li><li>The first tab is Sampler Results. It shows JMeter data as well as data returned by the web server.<\/li><li>The second tab is Request, which shows all the data sent to the web server as part of the request.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/request_tab.jpg\" alt=\"Request Tab\"\/><\/figure>\n\n\n\n<p>The last tab is Response data. In this tab, the listener shows the data received from server in text format.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/response_tab.jpg\" alt=\"Response Tab\"\/><\/figure>\n\n\n\n<p>This is just a simple test plan which executes only one request. But JMeter&#8217;s real strength is in sending the same request, as if many users are sending it. To test the web servers with multiple users, we need to change the Thread Group (Users) settings.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Let us build a simple test plan which tests a web page. We write a test plan in Apache JMeter so that we can test the performance of the web page shown by the URL \u2212&nbsp;www.tutorialspoint.com. Start JMeter Open the JMeter window by clicking on&nbsp;\/home\/manisha\/apache-jmeter-2.9\/bin\/jmeter.sh. The JMeter window appear as below \u2212 Rename the Test [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1387"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1387"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1387\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1389,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1387\/revisions\/1389"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1387"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1387"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1387"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1390,
        "date": "2021-02-09T06:55:08",
        "date_gmt": "2021-02-09T06:55:08",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1390"
        },
        "modified": "2021-02-09T06:55:08",
        "modified_gmt": "2021-02-09T06:55:08",
        "slug": "jmeter-database-test-plan",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-database-test-plan\/",
        "title": {
            "rendered": "jMeter &#8211; Database Test Plan"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will see how to create a simple test plan to test the database server. For our test purpose we use the MYSQL database server. You can use any other database for testing. For installation and table creation in MYSQL please refer&nbsp;<a href=\"https:\/\/www.tutorialspoint.com\/mysql\/index.htm\">MYSQL Tutorial<\/a>.<\/p>\n\n\n\n<p>Once MYSQL is installed, follow the steps below to setup the database \u2212<\/p>\n\n\n\n<ul><li>Create a database with name &#8220;tutorial&#8221;.<\/li><li>Create a table&nbsp;<em>tutorials_tbl<\/em>.<\/li><li>Insert records into&nbsp;<em>tutorials_tbl<\/em>&nbsp;as shown below \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>mysql> use TUTORIALS;\r\nDatabase changed\r\nmysql> INSERT INTO tutorials_tbl \r\n   ->(tutorial_title, tutorial_author, submission_date)\r\n   ->VALUES\r\n   ->(\"Learn PHP\", \"John Poul\", NOW());\r\n  \r\nQuery OK, 1 row affected (0.01 sec)\r\nmysql> INSERT INTO tutorials_tbl\r\n   ->(tutorial_title, tutorial_author, submission_date)\r\n   ->VALUES\r\n   ->(\"Learn MySQL\", \"Abdul S\", NOW());\r\n \r\nQuery OK, 1 row affected (0.01 sec)\r\nmysql> INSERT INTO tutorials_tbl\r\n   ->(tutorial_title, tutorial_author, submission_date)\r\n   ->VALUES\r\n   ->(\"JAVA Tutorial\", \"Sanjay\", '2007-05-06');\r\n\r\nQuery OK, 1 row affected (0.01 sec)\r\nmysql>\r\n<\/code><\/pre>\n\n\n\n<ul><li>Copy the appropriate JDBC driver to&nbsp;<strong>\/home\/manisha\/apache-jmeter-2.9\/lib<\/strong>.<\/li><\/ul>\n\n\n\n<h2>Create JMeter Test Plan<\/h2>\n\n\n\n<p>Let us start the JMeter from&nbsp;<strong>\/home\/manisha\/apache-jmeter-2.9\/bin\/jmeter.sh<\/strong>.<\/p>\n\n\n\n<h3>Add Users<\/h3>\n\n\n\n<p>To create a Thread group,<\/p>\n\n\n\n<ul><li>Right-click on Test Plan.<\/li><li>Select Add \u2192 Threads (Users) \u2192 Thread Group.<\/li><li>Thus, thread group gets added under the Test Plan node.<\/li><li>Rename this Thread Group as&nbsp;<em>JDBC Users<\/em>.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/dbtest_threadgroup.jpg\" alt=\"Thread Group Added\"\/><\/figure>\n\n\n\n<p>We will not change the default properties of the Thread Group.<\/p>\n\n\n\n<h2>Adding JDBC Requests<\/h2>\n\n\n\n<p>Now that we defined our users, it is time to define the tasks that they will be performing. In this section, specify the JDBC requests to perform.<\/p>\n\n\n\n<ul><li>Right-click on the JDBC Users element.<\/li><li>Select&nbsp;<strong>Add \u2192 Config Element \u2192 JDBC Connection Configuration<\/strong>.<\/li><li>Set up the following fields (we are using MySQL database called tutorial) \u2212<ul><li>Variable name bound to pool. This needs to identify the configuration uniquely. It is used by the JDBC Sampler to identify the configuration to be used. We have named it as&nbsp;<em>test<\/em>.<\/li><li>Database URL \u2212 jdbc:mysql:\/\/localhost:3306\/tutorial.<\/li><li>JDBC Driver class: com.mysql.jdbc.Driver.<\/li><li>Username: root.<\/li><li>Password: password for root.<\/li><\/ul><\/li><\/ul>\n\n\n\n<p>The other fields on the screen are left as defaults as shown below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/dbtest_jdbcconfigpool.jpg\" alt=\"JDBC Configuration Pool\"\/><\/figure>\n\n\n\n<p>Now add a JDBC Request which refers to the JDBC Configuration pool defined above. Select JDBC Users element.<\/p>\n\n\n\n<ul><li>Click your right mouse button to get the Add menu<\/li><li>Select&nbsp;<strong>Add \u2192 Sampler \u2192 JDBC Request.<\/strong><\/li><li>Select this new element to view its Control Panel.<\/li><li>Edit the properties as shown below \u2212<ul><li>Variable name bound to pool. This needs to uniquely identify the configuration. It is used by the JDBC Sampler to identify the configuration to be used. Named it as&nbsp;<em>test<\/em>.<\/li><li>Name \u2212 Learn.<\/li><li>Enter the Pool Name \u2212 test (same as in the configuration element).<\/li><li>Query Type \u2212 Select statement.<\/li><li>Enter the SQL Query String field.<\/li><\/ul><\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/dbtest_jdbcrequest.jpg\" alt=\"JDBC Request\"\/><\/figure>\n\n\n\n<h2>Create Listener<\/h2>\n\n\n\n<p>Now add the Listener element. This element is responsible for storing all of the results of your JDBC requests in a file and presenting a visual model of the data.<\/p>\n\n\n\n<ul><li>Select the JDBC Users element<\/li><li>Add a View Results Tree listener (<strong>Add \u2192 Listener \u2192 View Results Tree<\/strong>).<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/dbtest_listener.jpg\" alt=\"JDBC Test Listener\"\/><\/figure>\n\n\n\n<h2>Save and Execute Test Plan<\/h2>\n\n\n\n<p>Now save the above test plan as&nbsp;<em>db_test.jmx<\/em>. Execute this test plan using&nbsp;<strong>Run \u2192 Start<\/strong>&nbsp;option.<\/p>\n\n\n\n<h3>Verify the Output<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/dbtest_output1.jpg\" alt=\"JDBC Test Output1\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/dbtest_output2.jpg\" alt=\"JDBC Test Output2\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/dbtest_output3.jpg\" alt=\"JDBC Test Output3\"\/><\/figure>\n\n\n\n<p>In the last image, you can see that two records are selected.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will see how to create a simple test plan to test the database server. For our test purpose we use the MYSQL database server. You can use any other database for testing. For installation and table creation in MYSQL please refer&nbsp;MYSQL Tutorial. Once MYSQL is installed, follow the steps below to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1390"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1390"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1390\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1391,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1390\/revisions\/1391"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1390"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1390"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1390"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1392,
        "date": "2021-02-09T06:55:58",
        "date_gmt": "2021-02-09T06:55:58",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1392"
        },
        "modified": "2021-02-09T06:55:58",
        "modified_gmt": "2021-02-09T06:55:58",
        "slug": "jmeter-ftp-test-plan",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-ftp-test-plan\/",
        "title": {
            "rendered": "jMeter &#8211; FTP Test Plan"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will see how to test a FTP site using JMeter. Let us create a Test Plan to test the FTP site.<\/p>\n\n\n\n<h2>Rename Test Plan<\/h2>\n\n\n\n<ul><li>Open the JMeter window by clicking \/home\/manisha\/apache-jmeter-2.9\/bin\/jmeter.sh<\/li><li>Click on the Test Plan node.<\/li><li>Rename this Test Plan node as TestFTPSite.<\/li><\/ul>\n\n\n\n<h2>Add Thread Group<\/h2>\n\n\n\n<p>Add one Thread Group, which is placeholder for all other elements like Samplers, Controllers, and Listeners.<\/p>\n\n\n\n<ul><li>Right click on TestFTPSite (our Test Plan)<\/li><li>Select Add \u2192 Threads(Users) \u2192 Thread Group. Thread Group will get added under the Test Plan (TestFTPSite) node.<\/li><li>Modify the default properties of the Thread Group to suit our testing as follows \u2212<ul><li><strong>Name<\/strong>&nbsp;\u2212 FTPusers<\/li><li><strong>Number of Threads (Users)<\/strong>&nbsp;\u2212 4<\/li><li><strong>Ramp-Up Period<\/strong>&nbsp;\u2212 leave the the default value of 0 seconds.<\/li><li><strong>Loop Count<\/strong>&nbsp;\u2212 1<\/li><\/ul><\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ftp_users.jpg\" alt=\"FTP Test Users\"\/><\/figure>\n\n\n\n<h2>Add Sampler \u2212 FTP Request<\/h2>\n\n\n\n<p>Now that we have defined our users, it is time to define the tasks that they will be performing. Add FTP Request elements. We add two FTP request elements, one which retrieves a file and the other which puts a file on the ftp site.<\/p>\n\n\n\n<ul><li>Select the FTP users element.<\/li><li>Right-click the mouse button to get the Add menu<\/li><li>Select Add \u2192 Sampler \u2192 FTP Request.<\/li><li>Select the FTP Request element in the tree.<\/li><li>Edit the following properties as shown below \u2212<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ftp_request_get.jpg\" alt=\"FTP Request Get\"\/><\/figure>\n\n\n\n<p>The following details are entered in this element \u2212<\/p>\n\n\n\n<ul><li><strong>Name<\/strong>&nbsp;\u2212 FTP Request Get<\/li><li><strong>Server Name or IP<\/strong>&nbsp;\u2212 184.168.74.29<\/li><li><strong>Remote File<\/strong>&nbsp;\u2212 \/home\/manisha\/sample_ftp.txt<\/li><li><strong>Local File<\/strong>&nbsp;\u2212 sample_ftp.txt<\/li><li>Select get(RETR)<\/li><li><strong>Username<\/strong>&nbsp;\u2212 manisha<\/li><li><strong>Password<\/strong>&nbsp;\u2212 manisha123<\/li><\/ul>\n\n\n\n<p>Now add another FTP request as above and edit the properties as shown in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ftp_request_put.jpg\" alt=\"FTP Request Put\"\/><\/figure>\n\n\n\n<p>The following details are entered in this element \u2212<\/p>\n\n\n\n<ul><li><strong>Name<\/strong>&nbsp;\u2212 FTP Request Put<\/li><li><strong>Server Name or IP<\/strong>&nbsp;\u2212 184.168.74.29<\/li><li><strong>Remote File<\/strong>&nbsp;\u2212 \/home\/manisha\/examplefile.txt<\/li><li><strong>Local File<\/strong>&nbsp;\u2212 \/home\/manisha\/work\/examplefile.txt<\/li><li>Select put(STOR)<\/li><li><strong>Username<\/strong>&nbsp;\u2212 manisha<\/li><li><strong>Password<\/strong>&nbsp;\u2212 manisha123<\/li><\/ul>\n\n\n\n<h2>Add Listener<\/h2>\n\n\n\n<p>The final element you need to add to your Test Plan is a Listener. This element is responsible for storing all of the results of your FTP requests in a file and presenting a visual model of the data.<\/p>\n\n\n\n<ul><li>Select the FTP users element.<\/li><li>Add a View Results Tree listener by selecting Add &gt; Listener &gt; View Results Tree.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ftp_listener.jpg\" alt=\"FTP Test Listener\"\/><\/figure>\n\n\n\n<h3>Run the Test Plan<\/h3>\n\n\n\n<p>Now save the above test plan as&nbsp;<em>ftpsite_test.jmx<\/em>. Execute this test plan using&nbsp;<strong>Run \u2192 Start<\/strong>&nbsp;option.<\/p>\n\n\n\n<h3>View the Output<\/h3>\n\n\n\n<p>The following output can be seen in the listener.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ftp_result_get_1.jpg\" alt=\"FTP Get Result1\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ftp_result_get_2.jpg\" alt=\"FTP Test Result2\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ftp_result_put_1.jpg\" alt=\"FTP Put Result\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ftp_result_2.jpg\" alt=\"FTP Get Result\"\/><\/figure>\n\n\n\n<p>You can see that four requests are made for each FTP request and the test is successful. The retrieved file for GET request is stored in the \/bin folder. In our case, it is&nbsp;<strong>\/home\/manisha\/apache-jmeter-2.9\/bin\/<\/strong>. For PUT request, the file is uploaded at the path&nbsp;<strong>\/home\/manisha\/<\/strong>.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will see how to test a FTP site using JMeter. Let us create a Test Plan to test the FTP site. Rename Test Plan Open the JMeter window by clicking \/home\/manisha\/apache-jmeter-2.9\/bin\/jmeter.sh Click on the Test Plan node. Rename this Test Plan node as TestFTPSite. Add Thread Group Add one Thread Group, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1392"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1392"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1392\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1393,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1392\/revisions\/1393"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1392"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1392"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1392"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1394,
        "date": "2021-02-09T06:58:19",
        "date_gmt": "2021-02-09T06:58:19",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1394"
        },
        "modified": "2021-02-09T06:58:19",
        "modified_gmt": "2021-02-09T06:58:19",
        "slug": "jmeter-webservice-test-plan",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-webservice-test-plan\/",
        "title": {
            "rendered": "jMeter &#8211; Webservice Test Plan"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will learn how to create a Test Plan to test a WebService. For our test purpose, we have created a simple webservice project and deployed it on the Tomcat server locally.<\/p>\n\n\n\n<h2>Create Webservice Project<\/h2>\n\n\n\n<p>To create a webservice project, we have used Eclipse IDE. First write the Service Endpoint Interface&nbsp;<strong>HelloWorld<\/strong>&nbsp;under the package&nbsp;<strong>com.tutorialspoint.ws<\/strong>. The contents of the HelloWorld.java are as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint.ws;\r\n\r\nimport javax.jws.WebMethod;\r\nimport javax.jws.WebService;\r\nimport javax.jws.soap.SOAPBinding;\r\nimport javax.jws.soap.SOAPBinding.Style;\r\n\r\n\/\/Service Endpoint Interface\r\n@WebService\r\n@SOAPBinding(style = Style.RPC)\r\n\r\npublic interface HelloWorld {\r\n   @WebMethod String getHelloWorldMessage(String string);\r\n}<\/code><\/pre>\n\n\n\n<p>This service has a method&nbsp;<strong>getHelloWorldMessage<\/strong>&nbsp;which takes a String parameter.<\/p>\n\n\n\n<p>Next, create the implementation class&nbsp;<strong>HelloWorldImpl.java<\/strong>&nbsp;under the package&nbsp;<strong>com.tutorialspoint.ws<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint.ws;\r\n\r\nimport javax.jws.WebService;\r\n\r\n@WebService(endpointInterface=\"com.tutorialspoint.ws.HelloWorld\")\r\npublic class HelloWorldImpl  implements HelloWorld  {\r\n   @Override\r\n   public String getHelloWorldMessage(String myName) {\r\n      return(\"Hello \"+myName+\" to JAX WS world\");\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>Let us now publish this web service locally by creating the Endpoint publisher and expose the service on the server.<\/p>\n\n\n\n<p>The publish method takes two parameters \u2212<\/p>\n\n\n\n<ul><li>Endpoint URL String.<\/li><li>Implementor object, in this case the HelloWorld implementation class, which is exposed as a Web Service at the endpoint identified by the URL mentioned in the parameter above.<\/li><\/ul>\n\n\n\n<p>The contents of HelloWorldPublisher.java are as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint.endpoint;\r\n\r\nimport javax.xml.ws.Endpoint;\r\nimport com.tutorialspoint.ws.HelloWorldImpl;\r\n\r\npublic class HelloWorldPublisher {\r\n   public static void main(String&#91;] args) {\r\n      Endpoint.publish(\"http:\/\/localhost:9000\/ws\/hello\", new HelloWorldImpl());\r\n   }\r\n}<\/code><\/pre>\n\n\n\n<p>Modify the web.xml contents as shown below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;!DOCTYPE web-app PUBLIC \"-\/\/Sun Microsystems, \r\n   Inc.\/\/DTD Web Application 2.3\/\/EN\" \"http:\/\/java.sun.com\/j2ee\/dtds\/web-app_2_3.dtd\">\r\n\r\n&lt;web-app>\r\n   &lt;listener>\r\n      &lt;listener-class>\r\n         com.sun.xml.ws.transport.http.servlet.WSServletContextListener\r\n      &lt;\/listener-class>\r\n   &lt;\/listener>\r\n\t\r\n   &lt;servlet>\r\n      &lt;servlet-name>hello&lt;\/servlet-name>\r\n      &lt;servlet-class>com.sun.xml.ws.transport.http.servlet.WSServlet&lt;\/servlet-class>\r\n      &lt;load-on-startup>1&lt;\/load-on-startup>\r\n   &lt;\/servlet>\r\n\t\r\n   &lt;servlet-mapping>\r\n      &lt;servlet-name>hello&lt;\/servlet-name>\r\n      &lt;url-pattern>\/hello&lt;\/url-pattern>\r\n   &lt;\/servlet-mapping>\r\n\t\r\n   &lt;session-config>\r\n      &lt;session-timeout>120&lt;\/session-timeout>\r\n   &lt;\/session-config>\r\n\t\r\n&lt;\/web-app><\/code><\/pre>\n\n\n\n<p>To deploy this application as a webservice, we would need another configuration file&nbsp;<strong>sun-jaxws.xml<\/strong>. The contents of this file are as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\r\n&lt;endpoints\r\n   xmlns = \"http:\/\/java.sun.com\/xml\/ns\/jax-ws\/ri\/runtime\"\r\n   version = \"2.0\">\r\n   \r\n   &lt;endpoint name = \"HelloWorld\" \r\n      implementation = \"com.tutorialspoint.ws.HelloWorldImpl\" \r\n      url-pattern = \"\/hello\"\/>\r\n&lt;\/endpoints><\/code><\/pre>\n\n\n\n<p>Now that all the files are ready, the directory structure would look as shown in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/webservice_dirstruct.jpg\" alt=\"WebService Dir structure\"\/><\/figure>\n\n\n\n<ul><li>Now create a WAR file of this application.<\/li><li>Choose the project \u2192 right click \u2192 Export \u2192 WAR file.<\/li><li>Save this as&nbsp;<strong>hello.war<\/strong>&nbsp;file under the&nbsp;<strong>webapps<\/strong>&nbsp;folder of Tomcat server.<\/li><li>Now start the Tomcat server.<\/li><li>Once the server is started, you should be able to access the webservice with the URL \u2212 http:\/\/localhost:8080\/hello\/hello<\/li><\/ul>\n\n\n\n<h2>Create JMeter Test plan<\/h2>\n\n\n\n<p>Now let us create a test plan to test the above webservice.<\/p>\n\n\n\n<h3>Rename the Test Plan<\/h3>\n\n\n\n<ul><li>Open the JMeter window by clicking \/home\/manisha\/apache-jmeter2.9\/bin\/jmeter.sh.<\/li><li>Click the Test Plan node.<\/li><li>Rename this Test Plan node as WebserviceTest.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ws_test.jpg\" alt=\"WS Test Plan\"\/><\/figure>\n\n\n\n<h3>Add Thread Group<\/h3>\n\n\n\n<p>Add one Thread Group, which is placeholder for all other elements like Samplers, Controllers, and Listeners.<\/p>\n\n\n\n<ul><li>Right click on WebserviceTest (our Test Plan) \u2192 Add \u2192 Threads (Users) \u2192 Thread Group. Thread Group will get added under the Test Plan (WebserviceTest) node.<\/li><li>Next, let us modify the default properties of the Thread Group to suit our testing. Following properties are changed \u2212<ul><li><strong>Name<\/strong>&nbsp;\u2212 webservice user<\/li><li><strong>Number of Threads (Users)<\/strong>&nbsp;\u2212 2<\/li><li><strong>Ramp-Up Period<\/strong>&nbsp;\u2212 leave the the default value of 0 seconds.<\/li><li><strong>Loop Count<\/strong>&nbsp;\u2212 2<\/li><\/ul><\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ws_user.jpg\" alt=\"WS Test Users\"\/><\/figure>\n\n\n\n<h3>Add Sampler &#8211; SOAP\/XML-RPC Request<\/h3>\n\n\n\n<p>Now that we have defined the users, it is time to define the tasks that they will be performing.<\/p>\n\n\n\n<p>We will add SOAP\/XML-RPC Request element \u2212<\/p>\n\n\n\n<ul><li>Right-click mouse button to get the Add menu.<\/li><li>Select Add \u2192 Sampler \u2192 SOAP\/XML-RPC Request.<\/li><li>Select the SOAP\/XML-RPC Request element in the tree<\/li><li>Edit the following properties as in the image below \u2212<\/li><li>The following details are entered in this element \u2212<ul><li><strong>Name \u2212 SOAP\/XML-RPC Request<\/strong><\/li><li><strong>URL<\/strong>&nbsp;\u2212 http:\/\/localhost:8080\/hello\/hello?wsdl<\/li><li><strong>Soap\/XML-RPC Data<\/strong>&nbsp;\u2212 Enter the below contents<\/li><\/ul><\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;soapenv:Envelope xmlns:soapenv = \"http:\/\/schemas.xmlsoap.org\/soap\/envelope\/\" \r\n   xmlns:web = \"http:\/\/ws.tutorialspoint.com\/\">\r\n   &lt;soapenv:Header\/>\r\n\t\r\n   &lt;soapenv:Body>\r\n      &lt;web:getHelloWorldMessage>\r\n         &lt;arg0>Manisha&lt;\/arg0>\r\n      &lt;\/web:getHelloWorldMessage>\r\n   &lt;\/soapenv:Body>\r\n   \r\n&lt;\/soapenv:Envelope><\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ws_request.jpg\" alt=\"WS Test request\"\/><\/figure>\n\n\n\n<h3>Add Listener<\/h3>\n\n\n\n<p>The final element you need to add to your Test Plan is a Listener. This element is responsible for storing all of the results of your HTTP requests in a file and presenting a visual model of the data.<\/p>\n\n\n\n<ul><li>Select the webservice user element.<\/li><li>Add a View Results Tree listener by selecting Add \u2192 Listener \u2192 View Results Tree.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ws_listener.jpg\" alt=\"WS Test request\"\/><\/figure>\n\n\n\n<h3>Run the Test Plan<\/h3>\n\n\n\n<p>Now save the above test plan as&nbsp;<em>test_webservice.jmx<\/em>. Execute this test plan using Run \u2192 Start option.<\/p>\n\n\n\n<h3>View the Output<\/h3>\n\n\n\n<p>The following output can be seen in the listener.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ws_sample_result.jpg\" alt=\"WS Sample Result\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ws_result_request.jpg\" alt=\"WS Result Request\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/ws_response_data.jpg\" alt=\"WS Response Data\"\/><\/figure>\n\n\n\n<p>In the last image, you can see the response message &#8220;Hello Manisha to JAX WS world&#8221;.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will learn how to create a Test Plan to test a WebService. For our test purpose, we have created a simple webservice project and deployed it on the Tomcat server locally. Create Webservice Project To create a webservice project, we have used Eclipse IDE. First write the Service Endpoint Interface&nbsp;HelloWorld&nbsp;under the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1394"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1394"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1394\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1395,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1394\/revisions\/1395"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1394"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1394"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1394"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1396,
        "date": "2021-02-09T06:59:00",
        "date_gmt": "2021-02-09T06:59:00",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1396"
        },
        "modified": "2021-02-09T06:59:00",
        "modified_gmt": "2021-02-09T06:59:00",
        "slug": "jmeter-jms-test-plan",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-jms-test-plan\/",
        "title": {
            "rendered": "jMeter &#8211; JMS Test Plan"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will learn how to write a simple test plan to test Java Messaging Service (JMS). JMS supports two types of messaging \u2212<\/p>\n\n\n\n<ul><li><strong>Point-to-Point messaging<\/strong>&nbsp;\u2212 Queue messaging is generally used for transactions where the sender expects a response. Messaging systems are quite different from normal HTTP requests. In HTTP, a single user sends a request and gets a response.<\/li><li><strong>Topic messaging<\/strong>&nbsp;\u2212 Topic messages are commonly known as pub\/sub messaging. Topic messaging is generally used in cases where a message is published by a producer and consumed by multiple subscribers.<\/li><\/ul>\n\n\n\n<p>Let us see a test example for each of these. The pre-requisites for testing JMS are \u2212<\/p>\n\n\n\n<ul><li>We use Apache ActiveMQ in the example. There are various JMS servers like IBM WebSphere MQ (formerly MQSeries), Tibco, etc. Download it from&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/activemq.apache.org\/download.html\">the binaries from the Apache ActiveMQ website.<\/a><\/li><li>Unzip the archive, go to the decompressed directory, and run the following command from the command console to start the ActiveMQ server \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">.\\bin\\activemq  start\n<\/pre>\n\n\n\n<p>You can verify if the ActiveMQ server has started by visiting the admin interface at the following address&nbsp;<strong>http:\/\/localhost:8161\/admin\/<\/strong>. If it asks for authentication, then enter the userid and password as&nbsp;<em>admin<\/em>. The screen is similar as shown below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/activemq_server.jpg\" alt=\"ActiveMQ Server\"\/><\/figure>\n\n\n\n<ul><li>Now copy the activemq-all-x.x.x.jar (XXX depending on the version) from the ActiveMQ unzipped directory to&nbsp;<strong>\/home\/manisha\/apache-jmeter-2.9\/lib.<\/strong><\/li><\/ul>\n\n\n\n<p>With the above setup, let us build the test plan for \u2212<\/p>\n\n\n\n<ul><li><a href=\"https:\/\/www.tutorialspoint.com\/jmeter\/jmeter_jms_pointtopoint_test_plan.htm\">JMS Point-to-Point Test Plan<\/a><\/li><li><a href=\"https:\/\/www.tutorialspoint.com\/jmeter\/jmeter_jms_topic_test_plan.htm\">JMS Topic Test Plan<\/a><\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will learn how to write a simple test plan to test Java Messaging Service (JMS). JMS supports two types of messaging \u2212 Point-to-Point messaging&nbsp;\u2212 Queue messaging is generally used for transactions where the sender expects a response. Messaging systems are quite different from normal HTTP requests. In HTTP, a single user [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1396"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1396"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1396\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1397,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1396\/revisions\/1397"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1396"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1396"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1396"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1398,
        "date": "2021-02-09T07:00:34",
        "date_gmt": "2021-02-09T07:00:34",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1398"
        },
        "modified": "2021-02-09T07:00:34",
        "modified_gmt": "2021-02-09T07:00:34",
        "slug": "jmeter-monitor-test-plan",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-monitor-test-plan\/",
        "title": {
            "rendered": "jMeter &#8211; Monitor Test Plan"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will discuss how to create a Test Plan using JMeter to monitor webservers. The uses of monitor tests are as follows \u2212<\/p>\n\n\n\n<ul><li>Monitors are useful for a stress testing and system management.<\/li><li>Used with stress testing, the monitor provides additional information about server performance.<\/li><li>Monitors make it easier to see the relationship between server performance and response time on the client side.<\/li><li>As a system administration tool, the monitor provides an easy way to monitor multiple servers from one console.<\/li><\/ul>\n\n\n\n<p>We need Tomcat 5 or above for monitoring. For our test purpose, we will monitor Tomcat 7.0.42 server. You can test any servlet container that supports Java Management Extension (JMX). Let us write a test case to monitor the Tomcat server. Let us first set up our tomcat server.<\/p>\n\n\n\n<h2>Setup Tomcat Server<\/h2>\n\n\n\n<p>We start with opening the Tomcat service status. To do this, edit the configuration file for users,&nbsp;<strong>&lt;TOMCAT_HOME&gt;\/conf\/tomcat-users.xml<\/strong>. This file contains a tomcat-users section (commented) as shown \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tomcat-users>\r\n\r\n&lt;!--\r\n   &lt;role rolename = \"tomcat\"\/>\r\n   &lt;role rolename = \"role1\"\/>\r\n   &lt;user username = \"tomcat\" password = \"tomcat\" roles = \"tomcat\"\/>\r\n   &lt;user username = \"both\" password = \"tomcat\" roles = \"tomcat,role1\"\/>\r\n   &lt;user username = \"role1\" password = \"tomcat\" roles = \"role1\"\/>\r\n-->\r\n\r\n&lt;\/tomcat-users><\/code><\/pre>\n\n\n\n<p>We need to change this section to add the admin roles, manager, manager-gui and assign the user &#8220;admin&#8221;. The revised file is as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;tomcat-users>\r\n\r\n   &lt;role rolename = \"manager-gui\"\/>\r\n   &lt;role rolename = \"manager-script\"\/>\r\n   &lt;role rolename = \"manager-jmx\"\/>\r\n   &lt;role rolename = \"manager-status\"\/>\r\n   &lt;user username = \"admin\" password = \"admin\" roles = \"manager-gui,manager-script,manager-jmx,manager-status\"\/>\r\n\r\n&lt;\/tomcat-users><\/code><\/pre>\n\n\n\n<p>Now start the tomcat server &lt;TOMCAT_HOME&gt;\/bin\/startup.sh for Linux and &lt;TOMCAT_HOME&gt;\/bin\/startup.bat for windows. Once started, check that the Tomcat supervision works by entering the following link in your browser \u2212<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">http:\/\/localhost:8080\/manager\/status?XML=true\n<\/pre>\n\n\n\n<p>An authentication window appears in the browser. Enter the tomcat login and password associated (in our case it is admin). Then, the browser shows the execution status of Tomcat as below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/tomcat_screen.jpg\" alt=\"Tomcat Manager Status\"\/><\/figure>\n\n\n\n<p>From the above screenshot, we can note a few things \u2212<\/p>\n\n\n\n<ul><li>In the URL, note that&nbsp;<em>XML = true<\/em>&nbsp;(note the case sensitivity) allows a clean display of the supervisory Tomcat necessary for the JMeter functioning.<\/li><li>Also note that there are default two connectors. The AJP connector used in general coupled with the mod_jk Apache HTTPD front module and the HTTP connector which is commonly used connector for direct access to Tomcat via port 8080.<\/li><\/ul>\n\n\n\n<h2>Write JMeter Test Plan<\/h2>\n\n\n\n<p>Let us monitor the Tomcat server by writing a test plan \u2212<\/p>\n\n\n\n<h3>Rename Test Plan<\/h3>\n\n\n\n<ul><li>Open the JMeter window by clicking \/home\/manisha\/apache-jmeter2.9\/bin\/jmeter.sh.<\/li><li>Click the Test Plan node.<\/li><li>Add a thread group as explained in the next step.<\/li><\/ul>\n\n\n\n<h3>Add Thread Group<\/h3>\n\n\n\n<ul><li>Right-click on&nbsp;<strong>Test Plan \u2192 Add \u2192 Threads(Users) \u2192 Thread Group<\/strong>. Thread Group will get added under the Test Plan node.<\/li><li>Change the loop count to forever (or some large number) so that enough samples are generated.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/monitor_user.jpg\" alt=\"Monitor Test Users\"\/><\/figure>\n\n\n\n<h3>HTTP Authorization Manager<\/h3>\n\n\n\n<ul><li>Add HTTP Authorization Manager to the Thread Group element by selecting Add \u2192 Config element \u2192 HTTP Authorization Manager. This element manages authentication requested by the browser to see the Tomcat server status.<\/li><li>Select the HTTP Authorization Manager.<\/li><li>Edit the following details \u2212<ul><li><strong>Username<\/strong>&nbsp;\u2212 admin (depending on the configuration in tomcat-users.xml file)<\/li><li><strong>Password<\/strong>&nbsp;\u2212 admin (depending on the configuration in the tomcatusers.xml file)<\/li><li>The other fields are left empty.<\/li><\/ul><\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/http_auth_manager.jpg\" alt=\"HTTP Authorization Manager\"\/><\/figure>\n\n\n\n<h3>Add Sampler-HTTP Request<\/h3>\n\n\n\n<p>Now that we have defined our users, it is time to define the tasks that they will be performing. We add HTTP Request element.<\/p>\n\n\n\n<ul><li>Right click the mouse button to get the Add menu.<\/li><li>Select Add \u2192 Sampler \u2192 HTTP Request.<\/li><li>Then, select the HTTP Request element in the tree.<\/li><li>Edit the following properties as in the image below \u2212<\/li><li>The following details are entered in this element \u2212<ul><li><strong>Name<\/strong>&nbsp;\u2212 Server Status<\/li><li><strong>Server Name or IP<\/strong>&nbsp;\u2212 localhost<\/li><li><strong>Port<\/strong>&nbsp;\u2212 8080<\/li><li><strong>Path<\/strong>&nbsp;\u2212 \/manager\/status<\/li><li><strong>Parameters<\/strong>&nbsp;\u2212 Add a request parameter named &#8220;XML&#8221; in uppercase. Give it a value of &#8220;true&#8221; in lowercase.<\/li><li><strong>Optional Tasks<\/strong>&nbsp;\u2212 Check &#8220;Use as Monitor&#8221; at the bottom of the sampler.<\/li><\/ul><\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/monitor_sampler.jpg\" alt=\"Monitor Test Sampler\"\/><\/figure>\n\n\n\n<h3>Add a Constant Timer<\/h3>\n\n\n\n<p>To request the status of the server periodically, add a Constant Timer which will allow a time interval between each request. Add a timer to this thread group by selecting Add \u2192 Timer \u2192 Constant Timer.<\/p>\n\n\n\n<p>Enter 5000 milliseconds in the&nbsp;<em>Thread Delay<\/em>&nbsp;box. In general, using intervals shorter than 5 seconds may add stress to your server. Find out what is an acceptable interval before you deploy the monitor in your production environment.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/monitor_constant_timer.jpg\" alt=\"Monitor Constant Timer\"\/><\/figure>\n\n\n\n<h3>Add Listener<\/h3>\n\n\n\n<p>The final element you need to add to your Test Plan is a Listener. We add two types of listeners. One that stores results in a file and second that shows the graphical view of the results.<\/p>\n\n\n\n<ul><li>Select the thread group element.<\/li><li>Add a Simple Data Writer listener Add \u2192 Listener \u2192 Simple Data Writer.<\/li><li>Specify a directory and filename of the output file (in our case, it is \/home\/manisha\/work\/sample.csv)<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/monitor_listener1.jpg\" alt=\"Monitor Simple Data Writer\"\/><\/figure>\n\n\n\n<ul><li>Let us add another listener by selecting the test plan element Add \u2192 Listener \u2192 Monitor Results.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/monitor_listener2.jpg\" alt=\"Monitor Results\"\/><\/figure>\n\n\n\n<h3>Run the Test Plan<\/h3>\n\n\n\n<p>Now save the above test plan as&nbsp;<em>monitor_test.jmx<\/em>. Execute this test plan using Run \u2192 Start option.<\/p>\n\n\n\n<h3>View the Output<\/h3>\n\n\n\n<p>Results will be saved in \/home\/manisha\/work\/sample.csv file. You can also see a graphical result in the Monitor result listener as in the image below.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/monitor_test_result1.jpg\" alt=\"Monitor Test Result1\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/monitor_test_result2.jpg\" alt=\"Monitor Test Result2\"\/><\/figure>\n\n\n\n<p>Note the graph has captions on both sides of the graph. On the left is percent and the right is dead\/healthy. If the memory line spikes up and down rapidly, it could indicate memory thrashing. In those situations, it is a good idea to profile the application with Borland OptimizeIt or JProbe. What you want to see is a regular pattern for load, memory and threads. Any erratic behavior usually indicates poor performance or a bug of some sort.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will discuss how to create a Test Plan using JMeter to monitor webservers. The uses of monitor tests are as follows \u2212 Monitors are useful for a stress testing and system management. Used with stress testing, the monitor provides additional information about server performance. Monitors make it easier to see the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1398"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1398"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1398\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1399,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1398\/revisions\/1399"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1398"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1398"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1398"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1400,
        "date": "2021-02-09T07:01:20",
        "date_gmt": "2021-02-09T07:01:20",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1400"
        },
        "modified": "2021-02-09T07:01:20",
        "modified_gmt": "2021-02-09T07:01:20",
        "slug": "jmeter-listeners",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-listeners\/",
        "title": {
            "rendered": "jMeter &#8211; Listeners"
        },
        "content": {
            "rendered": "\n<p>Listeners provide access to the information JMeter gathers about the test cases while JMeter runs. The results or information gathered by listeners can be shown in the form of \u2212<\/p>\n\n\n\n<ul><li>tree<\/li><li>tables<\/li><li>graphs<\/li><li>log file<\/li><\/ul>\n\n\n\n<p>All listeners write the same raw data to the output file when one is specified.<\/p>\n\n\n\n<h2>Default Configuration<\/h2>\n\n\n\n<p>The default items to be saved can be defined in one of the following two ways \u2212<\/p>\n\n\n\n<ul><li>In the&nbsp;<strong>jmeter.properties<\/strong>&nbsp;(or user.properties) file. This file is present in the&nbsp;<strong>\/bin<\/strong>&nbsp;folder of JMeter.To change the default format, find the following line in jmeter.properties \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">jmeter.save.saveservice.output_format=\n<\/pre>\n\n\n\n<ul><li>By using the Config popup as shown in the following screenshot \u2212<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/config_popup.jpg\" alt=\"JMeter Config PopUp\"\/><\/figure>\n\n\n\n<p>JMeter creates results of a test run as JMeter Text Logs(JTL). These are normally called JTL files, as that is the default extension \u2212 but any extension can be used.<\/p>\n\n\n\n<p>If multiple tests are run using the same output file name, then JMeter automatically appends new data at the end of the file.<\/p>\n\n\n\n<p>The listener can record results to a file but not to the UI. It is meant to provide an efficient means of recording data by eliminating GUI overhead.<\/p>\n\n\n\n<p>When running in \u2212<\/p>\n\n\n\n<ul><li><strong>GUI mode<\/strong>&nbsp;\u2212 use the listener Simple Data Writer<\/li><li><strong>non-GUI mode<\/strong>&nbsp;\u2212 the -l flag can be used to create a data file.<\/li><\/ul>\n\n\n\n<p>Listeners can use a lot of memory if there are a lot of samples. To minimize the amount of memory needed, use the Simple Data Write with CSV format.<\/p>\n\n\n\n<h2>CSV Log format<\/h2>\n\n\n\n<p>The CSV log format depends on which data items are selected in the configuration. Only the specified data items are recorded in the file. The order of appearance of columns is fixed, and is as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Field<\/th><th>Description<\/th><th>Value Example<\/th><\/tr><tr><td>timeStamp<\/td><td>in milliseconds since 1\/1\/1970<\/td><td>1354223881017<\/td><\/tr><tr><td>elapsed<\/td><td>in milliseconds<\/td><td>1858<\/td><\/tr><tr><td>label<\/td><td>sampler label<\/td><td>HTTP Request<\/td><\/tr><tr><td>responseCode<\/td><td>e.g. 200, 404<\/td><td>200<\/td><\/tr><tr><td>responseMessage<\/td><td>e.g. OK<\/td><td>OK<\/td><\/tr><tr><td>threadName<\/td><td><\/td><td>Thread Group 1-1<\/td><\/tr><tr><td>dataType<\/td><td>e.g. text<\/td><td>text<\/td><\/tr><tr><td>success<\/td><td>true or false<\/td><td>true<\/td><\/tr><tr><td>failureMessage<\/td><td>if any<\/td><td><\/td><\/tr><tr><td>bytes<\/td><td>number of bytes in the sample<\/td><td>34908<\/td><\/tr><tr><td>grpThreads<\/td><td>number of active threads in this thread group<\/td><td>1<\/td><\/tr><tr><td>allThreads<\/td><td>total number of active threads in all groups<\/td><td>1<\/td><\/tr><tr><td>URL<\/td><td><\/td><td>http:\/\/tutorialspoint.com<\/td><\/tr><tr><td>Filename<\/td><td>if Save Response to File was used<\/td><td><\/td><\/tr><tr><td>latency<\/td><td>time to first response<\/td><td>132<\/td><\/tr><tr><td>encoding<\/td><td><\/td><td>utf-8<\/td><\/tr><tr><td>SampleCount<\/td><td>number of samples (1, unless multiple samples are aggregated)<\/td><td>1<\/td><\/tr><tr><td>ErrorCount<\/td><td>number of errors (0 or 1, unless multiple samples are aggregated)<\/td><td>0<\/td><\/tr><tr><td>Hostname<\/td><td>where the sample was generated<\/td><td>LaptopManisha<\/td><\/tr><tr><td>IdleTime<\/td><td>number of milliseconds of &#8216;Idle&#8217; time (normally 0)<\/td><td><\/td><\/tr><tr><td>Variables<\/td><td>if specified<\/td><td><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Saving Response Data<\/h2>\n\n\n\n<p>The response data can be saved in the XML log file if required. However it does not allow to save large files and images. In such cases, use the Post-Processor Save_Responses_to_a_file. This generates a new file for each sample, and saves the file name with the sample. The file name can then be included in the sample log output. The data will be retrieved from the file if necessary when the sample log file is reloaded.<\/p>\n\n\n\n<h2>Loading (reading) response data<\/h2>\n\n\n\n<p>To view an existing results file, you can use the file &#8220;Browse&#8230;&#8221; button to select a file. If necessary, just create a dummy testplan with the appropriate Listener in it.<\/p>\n\n\n\n<h2>Saving the Listener GUI Data<\/h2>\n\n\n\n<p>JMeter is capable of saving any listener as a PNG file. To do so,<\/p>\n\n\n\n<ul><li>Select the listener in the left panel by selecting Edit \u2192 Save As Image. A file dialog appears.<\/li><li>Enter the desired name.<\/li><li>Save the listener.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Listeners provide access to the information JMeter gathers about the test cases while JMeter runs. The results or information gathered by listeners can be shown in the form of \u2212 tree tables graphs log file All listeners write the same raw data to the output file when one is specified. Default Configuration The default items [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1400"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1400"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1400\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1401,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1400\/revisions\/1401"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1400"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1400"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1400"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1402,
        "date": "2021-02-09T07:04:00",
        "date_gmt": "2021-02-09T07:04:00",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1402"
        },
        "modified": "2021-02-09T07:04:00",
        "modified_gmt": "2021-02-09T07:04:00",
        "slug": "jmeter-functions",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-functions\/",
        "title": {
            "rendered": "jMeter &#8211; Functions"
        },
        "content": {
            "rendered": "\n<h2>JMeter Functions and User Variables<\/h2>\n\n\n\n<p>JMeter functions are special values that can populate fields of any Sampler or other element in a test tree.<\/p>\n\n\n\n<ul><li>A function call looks like this \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>${__functionName(var1,var2,var3)}<\/code><\/pre>\n\n\n\n<ul><li><em>_functionName<\/em>&nbsp;matches the name of a function. For example&nbsp;<strong>${__threadNum}<\/strong>.<\/li><li>If a function parameter contains a comma, then make sure you escape this with &#8220;\\&#8221; as shown below \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>${__time(EEE\\, d MMM yyyy)}<\/code><\/pre>\n\n\n\n<ul><li>Variables are referenced as \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">${VARIABLE}\n<\/pre>\n\n\n\n<h2>List of Functions<\/h2>\n\n\n\n<p>Following table lists a group of functions loosely grouped into types \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Function Type<\/th><th>Name<\/th><th>Comment<\/th><\/tr><tr><td>Information<\/td><td>threadNum<\/td><td>Get thread number.<\/td><\/tr><tr><td>Information<\/td><td>samplerName<\/td><td>Get the sampler name (label).<\/td><\/tr><tr><td>Information<\/td><td>machineIP<\/td><td>Get the local machine IP address.<\/td><\/tr><tr><td>Information<\/td><td>machineName<\/td><td>Get the local machine name.<\/td><\/tr><tr><td>Information<\/td><td>time<\/td><td>Return current time in various formats.<\/td><\/tr><tr><td>Information<\/td><td>log<\/td><td>Log (or display) a message (and return the value).<\/td><\/tr><tr><td>Information<\/td><td>logn<\/td><td>Log (or display) a message (empty return value).<\/td><\/tr><tr><td>Input<\/td><td>StringFromFile<\/td><td>Read a line from a file.<\/td><\/tr><tr><td>Input<\/td><td>FileToString<\/td><td>Read an entire file.<\/td><\/tr><tr><td>Input<\/td><td>CSVRead<\/td><td>Read from CSV delimited file.<\/td><\/tr><tr><td>Input<\/td><td>XPath<\/td><td>Use an XPath expression to read from a file.<\/td><\/tr><tr><td>Calculation<\/td><td>counter<\/td><td>Generate an incrementing number.<\/td><\/tr><tr><td>Calculation<\/td><td>intSum<\/td><td>Add int numbers.<\/td><\/tr><tr><td>Calculation<\/td><td>longSum<\/td><td>Add long numbers.<\/td><\/tr><tr><td>Calculation<\/td><td>Random<\/td><td>Generate a random number.<\/td><\/tr><tr><td>Calculation<\/td><td>RandomString<\/td><td>Generate a random string.<\/td><\/tr><tr><td>Calculation<\/td><td>UUID<\/td><td>Generate a random type 4 UUID.<\/td><\/tr><tr><td>Scripting<\/td><td>BeanShell<\/td><td>Run a BeanShell script.<\/td><\/tr><tr><td>Scripting<\/td><td>javaScript<\/td><td>Process JavaScript (Mozilla Rhino).<\/td><\/tr><tr><td>Scripting<\/td><td>jexl, jexl2<\/td><td>Evaluate a Commons Jexl expression.<\/td><\/tr><tr><td>Properties<\/td><td>property<\/td><td>Read a property.<\/td><\/tr><tr><td>Properties<\/td><td>P<\/td><td>Read a property (shorthand method).<\/td><\/tr><tr><td>Properties<\/td><td>setProperty<\/td><td>Set a JMeter property.<\/td><\/tr><tr><td>Variables<\/td><td>split<\/td><td>Split a string into variables.<\/td><\/tr><tr><td>Variables<\/td><td>V<\/td><td>Evaluate a variable name.<\/td><\/tr><tr><td>Variables<\/td><td>eval<\/td><td>Evaluate a variable expression.<\/td><\/tr><tr><td>Variables<\/td><td>evalVar<\/td><td>Evaluate an expression stored in a variable.<\/td><\/tr><tr><td>String<\/td><td>regexFunction<\/td><td>Parse previous response using a regular expression.<\/td><\/tr><tr><td>String<\/td><td>escapeOroRegexpChars<\/td><td>Quote meta chars used by ORO regular expression.<\/td><\/tr><tr><td>String<\/td><td>char<\/td><td>Generate Unicode char values from a list of numbers.<\/td><\/tr><tr><td>String<\/td><td>unescape<\/td><td>Process strings containing Java escapes (e.g. \\n &amp; \\t).<\/td><\/tr><tr><td>String<\/td><td>unescapeHtml<\/td><td>Decode HTML-encoded strings.<\/td><\/tr><tr><td>String<\/td><td>escapeHtml<\/td><td>Encode strings using HTML encoding.<\/td><\/tr><tr><td>String<\/td><td>TestPlanName<\/td><td>Return name of current test plan.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<ul><li>There are two kinds of functions \u2212<ul><li>User-defined static values (or variables)<\/li><li>Built-in functions<\/li><\/ul><\/li><li>User-defined static values allow the user to define variables to be replaced with their static value when a test tree is compiled and submitted to be run.<\/li><li>The variables cannot be nested; i.e&nbsp;<strong>${Var${N}}<\/strong>&nbsp;does not work.<\/li><li>The __V (variable) function (versions after 2.2) can be used to do this \u2212 ${__V(Var${N})}.<\/li><li>This type of replacement is possible without functions, but it is less convenient and less intuitive.<\/li><\/ul>\n\n\n\n<h2>Where to Use Functions And Variables<\/h2>\n\n\n\n<p>Functions and variables can be written into any field of any test component.<\/p>\n\n\n\n<p>The following functions should work well in a test plan \u2212<\/p>\n\n\n\n<ul><li>intSum<\/li><li>longSum<\/li><li>machineName<\/li><li>BeanShell<\/li><li>javaScript<\/li><li>jexl<\/li><li>random<\/li><li>time<\/li><li>property functions<\/li><li>log functions<\/li><\/ul>\n\n\n\n<p>Functions which are used on the Test Plan have some restrictions. JMeter thread variables will have not been fully set up when the functions are processed, so variable names passed as parameters will not be set up and variable references will not work. Hence,&nbsp;<em>split()<\/em>&nbsp;and&nbsp;<em>regex()<\/em>&nbsp;and the variable evaluation functions will not work. The&nbsp;<em>threadNum()<\/em>&nbsp;function will not work and it does not make sense at test plan level.<\/p>\n\n\n\n<h2>Referencing Variables and Functions<\/h2>\n\n\n\n<ul><li>Referencing a variable in a test element is done by bracketing the variable name with &#8216;${&#8216; and &#8216;}&#8217;.<\/li><li>Functions are referenced in the same manner, but by convention, the names of functions begin with &#8220;__&#8221; to avoid conflict with user value names.<\/li><li>Some functions take arguments to configure them, and these go in parentheses, comma-delimited. If the function takes no arguments, the parentheses can be omitted. For example \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>${__BeanShell(vars.put(\"name\"\\,\"value\"))}<\/code><\/pre>\n\n\n\n<ul><li>Alternatively, you can define your script as a variable, e.g. on the Test Plan \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>SCRIPT     vars.put(\"name\",\"value\")<\/code><\/pre>\n\n\n\n<ul><li>The script can then be referenced as follows \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>${__BeanShell(${SCRIPT})}<\/code><\/pre>\n\n\n\n<h2>The Function Helper Dialog<\/h2>\n\n\n\n<p>The Function Helper Dialog is available from JMeter&#8217;s&nbsp;<strong>Options<\/strong>&nbsp;tab.<\/p>\n\n\n\n<ul><li>Using the Function Helper, you can select a function from the pull down, and assign values for its arguments. The left column in the table provides a brief description of the argument, and the right column is where you write the value for that argument. Different functions take different arguments.<\/li><li>Once you have done this, click the \u201cGenerate&#8221; button, and the appropriate string is generated, which you can copy-paste into the test plan wherever you need to.<\/li><\/ul>\n\n\n\n<h2>Pre-defined Variables<\/h2>\n\n\n\n<p>Some variables are defined internally by JMeter. They are \u2212<\/p>\n\n\n\n<ul><li>COOKIE_cookiename \u2212 contains the cookie value.<\/li><li>JMeterThread.last_sample_ok \u2212 whether or not the last sample was OK \u2212 true\/false. Note \u2212 this is updated after PostProcessors and Assertions have been run.<\/li><li>START variables.<\/li><\/ul>\n\n\n\n<h2>Pre-defined Properties<\/h2>\n\n\n\n<p>Some built-in properties are defined by JMeter. These are listed below. For convenience, the START properties are also copied to variables with the same names.<\/p>\n\n\n\n<ul><li>START.MS \u2212 JMeter start time in milliseconds.<\/li><li>START.YMD \u2212 JMeter start time as yyyyMMdd.<\/li><li>START.HMS \u2212 JMeter start time as HHmmss.<\/li><li>TESTSTART.MS \u2212 test start time in milliseconds.<\/li><\/ul>\n\n\n\n<p>Note that the START variables \/ properties represent JMeter startup time, not the test start time. They are mainly intended for use in file names etc.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JMeter Functions and User Variables JMeter functions are special values that can populate fields of any Sampler or other element in a test tree. A function call looks like this \u2212 _functionName&nbsp;matches the name of a function. For example&nbsp;${__threadNum}. If a function parameter contains a comma, then make sure you escape this with &#8220;\\&#8221; as [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1402"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1402"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1402\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1403,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1402\/revisions\/1403"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1402"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1402"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1402"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1404,
        "date": "2021-02-09T07:05:46",
        "date_gmt": "2021-02-09T07:05:46",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1404"
        },
        "modified": "2021-02-09T07:05:46",
        "modified_gmt": "2021-02-09T07:05:46",
        "slug": "jmeter-regular-expressions",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-regular-expressions\/",
        "title": {
            "rendered": "jMeter &#8211; Regular Expressions"
        },
        "content": {
            "rendered": "\n<p>Regular expressions are used to search and manipulate text, based on patterns. JMeter interprets forms of regular expressions or patterns being used throughout a JMeter test plan, by including the pattern matching software&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/attic.apache.org\/projects\/jakarta-oro.html\">Apache Jakarta ORO<\/a>.<\/p>\n\n\n\n<p>With the use of regular expressions, we can certainly save a lot of time and achieve greater flexibility as we create or enhance a Test Plan. Regular expressions provide a simple method to get information from pages when it is impossible or very hard to predict an outcome.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A standard usage example of using expressions is to get a session ID from the server response. If the server returns a unique session key we can easily get it using expressions in our load script.<\/p><\/blockquote>\n\n\n\n<p>To use regular expressions in your test plan, you need to use the Regular Expression Extractor of JMeter. You can place regular expressions in any component in a Test Plan.<\/p>\n\n\n\n<p>It is worth stressing the difference between&nbsp;<strong>contains<\/strong>&nbsp;and&nbsp;<strong>matches<\/strong>, as used on the Response Assertion test element \u2212<\/p>\n\n\n\n<ul><li><strong>contains<\/strong>&nbsp;means that the regular expression matched at least some part of the target, so &#8216;alphabet&#8217; &#8220;contains&#8221; &#8216;ph.b.&#8217; because the regular expression matches the substring &#8216;phabe&#8217;.<\/li><li><strong>matches<\/strong>&nbsp;means that the regular expression matched the whole target. Hence the &#8216;alphabet&#8217; is &#8220;matched&#8221; by &#8216;al.*t&#8217;.<\/li><\/ul>\n\n\n\n<p>Suppose you want to match the following portion of a web-page \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>name = \"file\" value = \"readme.txt\" <\/code><\/pre>\n\n\n\n<p>And you want to extract readme.txt. A suitable regular expression would be \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>name = \"file\" value = \"(.+?)\"><\/code><\/pre>\n\n\n\n<p>The special characters above are \u2212<\/p>\n\n\n\n<ul><li><strong>(<\/strong>&nbsp;and&nbsp;<strong>)<\/strong>&nbsp;\u2212 these enclose the portion of the match string to be returned<\/li><li><strong>.<\/strong>&nbsp;\u2212 match any character<\/li><li><strong>+<\/strong>&nbsp;\u2212 one or more times<\/li><li><strong>?<\/strong>&nbsp;\u2212 stop when first match succeeds<\/li><\/ul>\n\n\n\n<h2>Create JMeter Test Plan<\/h2>\n\n\n\n<p>Let us understand the use of Regular expressions in the Regular Expression Extractor\u2014a Post-Processor Element by writing a test plan. This element extracts text from the current page using a Regular Expression to identify the text pattern that a desired element conforms with.<\/p>\n\n\n\n<p>First we write an HTML page which a list of people and their email IDs. We deploy it to our tomcat server. The contents of html (index.html) are as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\r\n   &lt;head>\r\n   &lt;\/head>\r\n\t\r\n   &lt;body>\r\n      &lt;table style = \"border: 1px solid #000000;\">\r\n\t\t\r\n         &lt;th style = \"border: 1px solid #000000;\">ID&lt;\/th>\r\n         &lt;th style = \"border: 1px solid #000000;\">name&lt;\/th>\r\n         &lt;th style = \"border: 1px solid #000000;\">Email&lt;\/th>\r\n\t\t\t\r\n         &lt;tr>\r\n            &lt;td id = \"ID\" style = \"border: 1px solid #000000;\">3&lt;\/td>\r\n            &lt;td id = \"Name\" style = \"border: 1px solid #000000;\">Manisha&lt;\/td>\r\n            &lt;td id = \"Email\" style = \"border: 1px solid #000000;\">manisha@domain.com&lt;\/td>\r\n         &lt;\/tr>\r\n\t\t\t\r\n         &lt;tr>\r\n            &lt;td id = \"ID\" style = \"border: 1px solid #000000;\">4&lt;\/td>\r\n            &lt;td id = \"Name\" style = \"border: 1px solid #000000;\">joe&lt;\/td>\r\n            &lt;td id = \"Email\" style = \"border: 1px solid #000000;\">joe@domain.com&lt;\/td>\r\n         &lt;\/tr>\r\n\t\t\t\r\n      &lt;\/table>\r\n   &lt;\/body>\r\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>On deploying it on the tomcat server, this page would look like as shown in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/html_page.jpg\" alt=\"HTML Page\"\/><\/figure>\n\n\n\n<p>In our test plan, we will select the person in the first row of the person table seen in the person list page above. To capture the ID of this person, let us first determine the pattern where we will find the person in the second row.<\/p>\n\n\n\n<p>As can be seen in the following snapshot, the ID of the second person is surrounded by &lt;td id = &#8220;ID&#8221;&gt; and &lt;\/td &gt;, and it is the second row of data having this pattern. We can use this to match the exact pattern that we want to extract information from. As we want to extract two pieces of information from this page, the person ID and the person name, the fields are defined as follows \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/html_page_source.jpg\" alt=\"HTML Page Source code\"\/><\/figure>\n\n\n\n<p>Start JMeter, add a Thread group&nbsp;<strong>Test Plan \u2192 Add\u2192 Threads(Users)\u2192 Thread Group<\/strong>.<\/p>\n\n\n\n<p>Next add a sampler HTTP Request, select the test plan, right click&nbsp;<strong>Add \u2192 Sampler \u2192 HTTP Request<\/strong>&nbsp;and enter the details as shown below \u2212<\/p>\n\n\n\n<ul><li><strong>Name<\/strong>&nbsp;\u2212 Manage<\/li><li><strong>Server Name or IP<\/strong>&nbsp;\u2212 localhost<\/li><li><strong>Port Number<\/strong>&nbsp;\u2212 8080<\/li><li><strong>Protocol<\/strong>&nbsp;\u2212 We will keep this blank, which means we want HTTP as the protocol.<\/li><li><strong>Path<\/strong>&nbsp;\u2212 jmeter\/index.html<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/reg_expr_sampler.jpg\" alt=\"HTTP Request Sampler\"\/><\/figure>\n\n\n\n<p>Next, add a Regular Expression Extractor. Select the HTTP Request Sampler (Manage), right click&nbsp;<strong>Add \u2192 Post Processor \u2192 Regular Expression Extractor<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/reg_expr_extractor.jpg\" alt=\"Regular Expression Extractor\"\/><\/figure>\n\n\n\n<p>The following table provides a description of the fields used in the above screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>Field &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Reference Name<\/strong>The name of the variable in which the extracted test will be stored (refname).<\/td><\/tr><tr><td>2<\/td><td><strong>Regular Expression<\/strong>The pattern against which the text to be extracted will be matched. The text groups that will extracted are enclosed by the characters &#8216;(&#8216; and &#8216;)&#8217;. We use &#8216;.+?&#8217; to indicate a single instance of the text enclosed by the &lt;td..&gt;..&lt;\/td&gt; tags. In our example the expression is \u2212 &lt;td id = &#8220;ID&#8221;&gt;(+?)&lt;\/td&gt;\\s*&lt;td id = &#8220;Name&#8221;&gt;(+?)&lt;\/td&gt;\\s*<\/td><\/tr><tr><td>3<\/td><td><strong>Template<\/strong>Each group of extracted text placed as a member of the variable Person, following the order of each group of pattern enclosed by &#8216;(&#8216; and &#8216;)&#8217;. Each group is stored as refname_g#, where refname is the string you entered as the reference name, and # is the group number. $1$ to refers to group 1, $2$ to refers to group 2, etc. $0$ refers to whatever the entire expression matches. In this example, the ID we extract is maintained in Person_g1, while the Name value is stored in Person_g2.<\/td><\/tr><tr><td>4<\/td><td><strong>Match No.<\/strong>Since we plan to extract only the second occurrence of this pattern, matching the second volunteer, we use value 2. Value 0 would make a random matching, while a negative value needs to be used with the ForEach Controller.<\/td><\/tr><tr><td>5<\/td><td><strong>Default<\/strong>If the item is not found, this will be the default value. This is an optional field. You may leave it blank.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Add a listener to capture the result of this Test Plan. Right-click the Thread Group and select Add \u2192 Listener \u2192 View Results Tree option to add the listener.<\/p>\n\n\n\n<p>Save the test plan as&nbsp;<em>reg_express_test.jmx<\/em>&nbsp;and run the test. The output would be a success as shown in the following screenshot \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/jmeter\/images\/reg_expr_output.jpg\" alt=\"Regular Expression Output\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Regular expressions are used to search and manipulate text, based on patterns. JMeter interprets forms of regular expressions or patterns being used throughout a JMeter test plan, by including the pattern matching software&nbsp;Apache Jakarta ORO. With the use of regular expressions, we can certainly save a lot of time and achieve greater flexibility as we [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1404"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1404"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1404\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1405,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1404\/revisions\/1405"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1404"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1404"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1404"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1406,
        "date": "2021-02-09T07:06:33",
        "date_gmt": "2021-02-09T07:06:33",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1406"
        },
        "modified": "2021-02-09T07:06:33",
        "modified_gmt": "2021-02-09T07:06:33",
        "slug": "jmeter-best-practices",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/jmeter-best-practices\/",
        "title": {
            "rendered": "jMeter &#8211; Best Practices"
        },
        "content": {
            "rendered": "\n<p>JMeter has some limitations especially when it is run in a distributed environment. Following these guidelines will assist in creating a real and continuous load \u2212<\/p>\n\n\n\n<ul><li>Use multiple instances of JMeter in case, the number of threads are more.<\/li><li>Check the Scoping Rules and design accordingly.<\/li><li>Use naming conventions always for all elements.<\/li><li>Check the default browser Connectivity settings, before executing scripts.<\/li><li>Add Listeners appropriately.<\/li><li>Here are some suggestion to reduce resource requirements \u2212<ul><li>Use non-GUI mode: jmeter -n -t test.jmx -l test.jtl.<\/li><li>Use as few Listeners as possible; if using the -l flag as above, they can all be deleted or disabled.<\/li><li>Disable the \u201cView Result Tree\u201d listener as it consumes a lot of memory and can result in the console freezing or JMeter running out of memory. It is, however, safe to use the \u201cView Result Tree\u201d listener with only \u201cErrors\u201d checked.<\/li><li>Rather than using lots of similar samplers, use the same sampler in a loop, and use variables (CSV Data Set) to vary the sample. Or perhaps use the Access Log Sampler.<\/li><li>Do not use functional mode.<\/li><li>Use CSV output rather than XML.<\/li><li>Only save the data that you need.<\/li><li>Use as few Assertions as possible.<\/li><li>Disable all JMeter graphs as they consume a lot of memory. You can view all of the real time graphs using the JTLs tab in your web interface.<\/li><li>Do not forget to erase the local path from CSV Data Set Config if used.<\/li><li>Clean the Files tab prior to every test run.<\/li><\/ul><\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>JMeter has some limitations especially when it is run in a distributed environment. Following these guidelines will assist in creating a real and continuous load \u2212 Use multiple instances of JMeter in case, the number of threads are more. Check the Scoping Rules and design accordingly. Use naming conventions always for all elements. Check the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            56
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1406"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1406"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1406\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1407,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1406\/revisions\/1407"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1406"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1406"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1406"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]