[
    {
        "id": 616,
        "date": "2020-06-25T11:34:33",
        "date_gmt": "2020-06-25T11:34:33",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=616"
        },
        "modified": "2020-07-13T17:45:18",
        "modified_gmt": "2020-07-13T17:45:18",
        "slug": "java-i-o",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/java-i-o\/",
        "title": {
            "rendered": "Java I\/O"
        },
        "content": {
            "rendered": "\n<p><strong>Java I\/O<\/strong>&nbsp;(Input and Output) is used&nbsp;<em>to process the input<\/em>&nbsp;and&nbsp;<em>produce the output<\/em>.<\/p>\n\n\n\n<p>Java uses the concept of a stream to make I\/O operation fast. The java.io package contains all the classes required for input and output operations.<\/p>\n\n\n\n<p>We can perform&nbsp;<strong>file handling in Java<\/strong>&nbsp;by Java I\/O API.<\/p>\n\n\n\n<h2>Stream<\/h2>\n\n\n\n<p>A stream is a sequence of data. In Java, a stream is composed of bytes. It&#8217;s called a stream because it is like a stream of water that continues to flow.<\/p>\n\n\n\n<p>In Java, 3 streams are created for us automatically. All these streams are attached with the console.<\/p>\n\n\n\n<p><strong>1) System.out:&nbsp;<\/strong>standard output stream<\/p>\n\n\n\n<p><strong>2) System.in:&nbsp;<\/strong>standard input stream<\/p>\n\n\n\n<p><strong>3) System.err:&nbsp;<\/strong>standard error stream<\/p>\n\n\n\n<p>Let&#8217;s see the code to print\u00a0<strong>output and an error<\/strong>\u00a0message to the console.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>System.out.println(\"simple message\");  \nSystem.err.println(\"error message\");  <\/code><\/pre>\n\n\n\n<p>Let&#8217;s see the code to get\u00a0<strong>input<\/strong>\u00a0from console.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>int i=System.in.read();\/\/returns ASCII code of 1st character  \nSystem.out.println((char)i);\/\/will print the character  <\/code><\/pre>\n\n\n\n<p><ins><ins><\/ins><\/ins>Do You Know?<\/p>\n\n\n\n<ul><li>How to write a common data to multiple files using a single stream only?<\/li><li>How can we access multiple files by a single stream?<\/li><li>How can we improve the performance of Input and Output operation?<\/li><li>How many ways can we read data from the keyboard?<\/li><li>What does the console class?<\/li><li>How to compress and uncompress the data of a file?<\/li><\/ul>\n\n\n\n<h2>OutputStream vs InputStream<\/h2>\n\n\n\n<p>The explanation of OutputStream and InputStream classes are given below:<\/p>\n\n\n\n<h3>OutputStream<\/h3>\n\n\n\n<p>Java application uses an output stream to write data to a destination; it may be a file, an array, peripheral device or socket.<\/p>\n\n\n\n<h3>InputStream<\/h3>\n\n\n\n<p>Java application uses an input stream to read data from a source; it may be a file, an array, peripheral device or socket.<\/p>\n\n\n\n<p>Let&#8217;s understand the working of Java OutputStream and InputStream by the figure given below.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/java\/javaio\/images\/java-io-flow.png\" alt=\"Java IO\"\/><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>OutputStream class<\/h2>\n\n\n\n<p>OutputStream class is an abstract class. It is the superclass of all classes representing an output stream of bytes. An output stream accepts output bytes and sends them to some sink.<\/p>\n\n\n\n<h3>Useful methods of OutputStream<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>1) public void write(int)throws IOException<\/td><td>is used to write a byte to the current output stream.<\/td><\/tr><tr><td>2) public void write(byte[])throws IOException<\/td><td>is used to write an array of byte to the current output stream.<\/td><\/tr><tr><td>3) public void flush()throws IOException<\/td><td>flushes the current output stream.<\/td><\/tr><tr><td>4) public void close()throws IOException<\/td><td>is used to close the current output stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>OutputStream Hierarchy<\/h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/java\/javaio\/images\/java-outputstream.png\" alt=\"Java output stream hierarchy\"\/><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>InputStream class<\/h2>\n\n\n\n<p>InputStream class is an abstract class. It is the superclass of all classes representing an input stream of bytes.<\/p>\n\n\n\n<h3>Useful methods of InputStream<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>1) public abstract int read()throws IOException<\/td><td>reads the next byte of data from the input stream. It returns -1 at the end of the file.<\/td><\/tr><tr><td>2) public int available()throws IOException<\/td><td>returns an estimate of the number of bytes that can be read from the current input stream.<\/td><\/tr><tr><td>3) public void close()throws IOException<\/td><td>is used to close the current input stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java I\/O&nbsp;(Input and Output) is used&nbsp;to process the input&nbsp;and&nbsp;produce the output. Java uses the concept of a stream to make I\/O operation fast. The java.io package contains all the classes required for input and output operations. We can perform&nbsp;file handling in Java&nbsp;by Java I\/O API. Stream A stream is a sequence of data. In Java, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/616"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=616"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/616\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 863,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/616\/revisions\/863"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=616"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=616"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=616"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 613,
        "date": "2020-06-25T11:36:00",
        "date_gmt": "2020-06-25T11:36:00",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=613"
        },
        "modified": "2020-07-16T10:11:07",
        "modified_gmt": "2020-07-16T10:11:07",
        "slug": "fileoutputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/fileoutputstream\/",
        "title": {
            "rendered": "FileOutputStream"
        },
        "content": {
            "rendered": "\n<p>Java FileOutputStream is an output stream used for writing data to a&nbsp;file.<\/p>\n\n\n\n<p>If you have to write primitive values into a file, use FileOutputStream class. You can write byte-oriented as well as character-oriented data through FileOutputStream class. But, for character-oriented data, it is preferred to use&nbsp;FileWriter&nbsp;than FileOutputStream.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>FileOutputStream class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.FileOutputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;FileOutputStream&nbsp;<strong>extends<\/strong>&nbsp;OutputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>FileOutputStream class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>protected void finalize()<\/td><td>It is used to clean up the connection with the file output stream.<\/td><\/tr><tr><td>void write(byte[] ary)<\/td><td>It is used to write\u00a0<strong>ary.length<\/strong>\u00a0bytes from the byte\u00a0array\u00a0to the file output stream.<\/td><\/tr><tr><td>void write(byte[] ary, int off, int len)<\/td><td>It is used to write&nbsp;<strong>len<\/strong>&nbsp;bytes from the byte array starting at offset&nbsp;<strong>off<\/strong>&nbsp;to the file output stream.<\/td><\/tr><tr><td>void write(int b)<\/td><td>It is used to write the specified byte to the file output stream.<\/td><\/tr><tr><td>FileChannel getChannel()<\/td><td>It is used to return the file channel object associated with the file output stream.<\/td><\/tr><tr><td>FileDescriptor getFD()<\/td><td>It is used to return the file descriptor associated with the stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to closes the file output stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java FileOutputStream Example 1: write byte<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.FileOutputStream;  \npublic class FileOutputStreamExample {  \n    public static void main(String args&#91;]){    \n           try{    \n             FileOutputStream fout=new FileOutputStream(\"D:\\\\testout.txt\");    \n             fout.write(65);    \n             fout.close();    \n             System.out.println(\"success...\");    \n            }catch(Exception e){System.out.println(e);}    \n      }    \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Success...\n<\/pre>\n\n\n\n<p>The content of a text file&nbsp;<strong>testout.txt<\/strong>&nbsp;is set with the data&nbsp;<strong>A<\/strong>.<\/p>\n\n\n\n<p>testout.txt<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">A\n<\/pre>\n\n\n\n<h2>Java FileOutputStream example 2: write string<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.FileOutputStream;  \npublic class FileOutputStreamExample {  \n    public static void main(String args&#91;]){    \n           try{    \n             FileOutputStream fout=new FileOutputStream(\"D:\\\\testout.txt\");    \n             String s=\"Welcome to int i=System.in.read();\/\/returns ASCII code of 1st character  \nSystem.out.println((char)i);\/\/will print the character  codemeals.\";    \n             byte b&#91;]=s.getBytes();\/\/converting string into byte array    \n             fout.write(b);    \n             fout.close();    \n             System.out.println(\"success...\");    \n            }catch(Exception e){System.out.println(e);}    \n      }    \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Success...\n<\/pre>\n\n\n\n<p>The content of a text file&nbsp;<strong>testout.txt<\/strong>&nbsp;is set with the data&nbsp;<strong>Welcome to codemeals.<\/strong><\/p>\n\n\n\n<p>testout.txt<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java FileOutputStream is an output stream used for writing data to a&nbsp;file. If you have to write primitive values into a file, use FileOutputStream class. You can write byte-oriented as well as character-oriented data through FileOutputStream class. But, for character-oriented data, it is preferred to use&nbsp;FileWriter&nbsp;than FileOutputStream. FileOutputStream class declaration Let&#8217;s see the declaration for [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/613"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=613"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/613\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 899,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/613\/revisions\/899"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=613"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=613"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=613"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 614,
        "date": "2020-06-25T11:37:42",
        "date_gmt": "2020-06-25T11:37:42",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=614"
        },
        "modified": "2020-07-13T17:46:07",
        "modified_gmt": "2020-07-13T17:46:07",
        "slug": "fileinputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/fileinputstream\/",
        "title": {
            "rendered": "FileInputStream"
        },
        "content": {
            "rendered": "\n<p>Java FileInputStream class obtains input bytes from a&nbsp;file. It is used for reading byte-oriented data (streams of raw bytes) such as image data, audio, video etc. You can also read character-stream data. But, for reading streams of characters, it is recommended to use&nbsp;FileReader&nbsp;class.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java FileInputStream class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for java.io.FileInputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;FileInputStream&nbsp;<strong>extends<\/strong>&nbsp;InputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java FileInputStream class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int available()<\/td><td>It is used to return the estimated number of bytes that can be read from the input stream.<\/td><\/tr><tr><td>int read()<\/td><td>It is used to read the byte of data from the input stream.<\/td><\/tr><tr><td>int read(byte[] b)<\/td><td>It is used to read up to&nbsp;<strong>b.length<\/strong>&nbsp;bytes of data from the input stream.<\/td><\/tr><tr><td>int read(byte[] b, int off, int len)<\/td><td>It is used to read up to&nbsp;<strong>len<\/strong>&nbsp;bytes of data from the input stream.<\/td><\/tr><tr><td>long skip(long x)<\/td><td>It is used to skip over and discards x bytes of data from the input stream.<\/td><\/tr><tr><td>FileChannel getChannel()<\/td><td>It is used to return the unique FileChannel object associated with the file input stream.<\/td><\/tr><tr><td>FileDescriptor getFD()<\/td><td>It is used to return the&nbsp;FileDescriptor&nbsp;object.<\/td><\/tr><tr><td>protected void finalize()<\/td><td>It is used to ensure that the close method is call when there is no more reference to the file input stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to closes the&nbsp;stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java FileInputStream example 1: read single character<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.FileInputStream;  \npublic class DataStreamExample {  \n     public static void main(String args&#91;]){    \n          try{    \n            FileInputStream fin=new FileInputStream(\"D:\\\\testout.txt\");    \n            int i=fin.read();  \n            System.out.print((char)i);    \n  \n            fin.close();    \n          }catch(Exception e){System.out.println(e);}    \n         }    \n        } <\/code><\/pre>\n\n\n\n<p><strong>Note:<\/strong>&nbsp;Before running the code, a text file named as&nbsp;<strong>&#8220;testout.txt&#8221;&nbsp;<\/strong>is required to be created. In this file, we are having following content:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals.\n<\/code><\/pre>\n\n\n\n<p>After executing the above program, you will get a single character from the file which is 87 (in byte form). To see the text, you need to convert it into character.<\/p>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>W\n<\/code><\/pre>\n\n\n\n<h2>Java FileInputStream example 2: read all characters<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.FileInputStream;  \npublic class DataStreamExample {  \n     public static void main(String args&#91;]){    \n          try{    \n            FileInputStream fin=new FileInputStream(\"D:\\\\testout.txt\");    \n            int i=0;    \n            while((i=fin.read())!=-1){    \n             System.out.print((char)i);    \n            }    \n            fin.close();    \n          }catch(Exception e){System.out.println(e);}    \n         }    \n        }<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java FileInputStream class obtains input bytes from a&nbsp;file. It is used for reading byte-oriented data (streams of raw bytes) such as image data, audio, video etc. You can also read character-stream data. But, for reading streams of characters, it is recommended to use&nbsp;FileReader&nbsp;class. Java FileInputStream class declaration Let&#8217;s see the declaration for java.io.FileInputStream class: public&nbsp;class&nbsp;FileInputStream&nbsp;extends&nbsp;InputStream&nbsp;&nbsp; [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/614"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=614"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/614\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 865,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/614\/revisions\/865"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=614"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=614"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=614"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 615,
        "date": "2020-06-25T11:39:06",
        "date_gmt": "2020-06-25T11:39:06",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=615"
        },
        "modified": "2020-07-13T17:46:26",
        "modified_gmt": "2020-07-13T17:46:26",
        "slug": "bufferedoutputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/bufferedoutputstream\/",
        "title": {
            "rendered": "BufferedOutputStream"
        },
        "content": {
            "rendered": "\n<p>Java BufferedOutputStream&nbsp;class&nbsp;is used for buffering an output stream. It internally uses buffer to store data. It adds more efficiency than to write data directly into a stream. So, it makes the performance fast.<\/p>\n\n\n\n<p>For adding the buffer in an OutputStream, use the BufferedOutputStream class. Let&#8217;s see the syntax for adding the buffer in an OutputStream:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>OutputStream os= new BufferedOutputStream(new FileOutputStream(\"D:\\\\IO Package\\\\testout.txt\"));  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java BufferedOutputStream class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.BufferedOutputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;BufferedOutputStream&nbsp;<strong>extends<\/strong>&nbsp;FilterOutputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java BufferedOutputStream class constructors<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>BufferedOutputStream(OutputStream os)<\/td><td>It creates the new buffered output stream which is used for writing the data to the specified output stream.<\/td><\/tr><tr><td>BufferedOutputStream(OutputStream os, int size)<\/td><td>It creates the new buffered output stream which is used for writing the data to the specified output stream with a specified buffer size.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java BufferedOutputStream class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void write(int b)<\/td><td>It writes the specified byte to the buffered output stream.<\/td><\/tr><tr><td>void write(byte[] b, int off, int len)<\/td><td>It write the bytes from the specified byte-input stream into a specified byte&nbsp;array, starting with the given offset<\/td><\/tr><tr><td>void flush()<\/td><td>It flushes the buffered output stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of BufferedOutputStream class:<\/h2>\n\n\n\n<p>In this example, we are writing the textual information in the BufferedOutputStream object which is connected to the&nbsp;FileOutputStream&nbsp;object. The flush() flushes the data of one stream and send it into another. It is required if you have connected the one stream with another.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \nimport java.io.*;  \npublic class BufferedOutputStreamExample{    \npublic static void main(String args&#91;])throws Exception{    \n     FileOutputStream fout=new FileOutputStream(\"D:\\\\testout.txt\");    \n     BufferedOutputStream bout=new BufferedOutputStream(fout);    \n     String s=\"Welcome to codemeals.\";    \n     byte b&#91;]=s.getBytes();    \n     bout.write(b);    \n     bout.flush();    \n     bout.close();    \n     fout.close();    \n     System.out.println(\"success\");    \n}    \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Success\n<\/code><\/pre>\n\n\n\n<p>testout.txt<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java BufferedOutputStream&nbsp;class&nbsp;is used for buffering an output stream. It internally uses buffer to store data. It adds more efficiency than to write data directly into a stream. So, it makes the performance fast. For adding the buffer in an OutputStream, use the BufferedOutputStream class. Let&#8217;s see the syntax for adding the buffer in an OutputStream: [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/615"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=615"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/615\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 866,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/615\/revisions\/866"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=615"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=615"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=615"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 643,
        "date": "2020-06-25T17:36:23",
        "date_gmt": "2020-06-25T17:36:23",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=643"
        },
        "modified": "2020-07-13T17:46:46",
        "modified_gmt": "2020-07-13T17:46:46",
        "slug": "bufferedinputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/bufferedinputstream\/",
        "title": {
            "rendered": "BufferedInputStream"
        },
        "content": {
            "rendered": "\n<p>Java BufferedInputStream&nbsp;class&nbsp;is used to read information from&nbsp;stream. It internally uses buffer mechanism to make the performance fast.<\/p>\n\n\n\n<p>The important points about BufferedInputStream are:<\/p>\n\n\n\n<ul><li>When the bytes from the stream are skipped or read, the internal buffer automatically refilled from the contained input stream, many bytes at a time.<\/li><li>When a BufferedInputStream is created, an internal buffer\u00a0array\u00a0is created.<\/li><\/ul>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java BufferedInputStream class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.BufferedInputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;BufferedInputStream&nbsp;<strong>extends<\/strong>&nbsp;FilterInputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java BufferedInputStream class constructors<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>BufferedInputStream(InputStream IS)<\/td><td>It creates the BufferedInputStream and saves it argument, the input stream IS, for later use.<\/td><\/tr><tr><td>BufferedInputStream(InputStream IS, int size)<\/td><td>It creates the BufferedInputStream with a specified buffer size and saves it argument, the input stream IS, for later use.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java BufferedInputStream class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int available()<\/td><td>It returns an estimate number of bytes that can be read from the input stream without blocking by the next invocation method for the input stream.<\/td><\/tr><tr><td>int read()<\/td><td>It read the next byte of data from the input stream.<\/td><\/tr><tr><td>int read(byte[] b, int off, int ln)<\/td><td>It read the bytes from the specified byte-input stream into a specified byte array, starting with the given offset.<\/td><\/tr><tr><td>void close()<\/td><td>It closes the input stream and releases any of the system resources associated with the stream.<\/td><\/tr><tr><td>void reset()<\/td><td>It repositions the stream at a position the mark method was last called on this input stream.<\/td><\/tr><tr><td>void mark(int readlimit)<\/td><td>It sees the general contract of the mark method for the input stream.<\/td><\/tr><tr><td>long skip(long x)<\/td><td>It skips over and discards x bytes of data from the input stream.<\/td><\/tr><tr><td>boolean markSupported()<\/td><td>It tests for the input stream to support the mark and reset methods.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>Example of Java BufferedInputStream<\/h3>\n\n\n\n<p>Let&#8217;s see the simple example to read data of\u00a0file\u00a0using BufferedInputStream:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n   \nimport java.io.*;  \npublic class BufferedInputStreamExample{    \n public static void main(String args&#91;]){    \n  try{    \n    FileInputStream fin=new FileInputStream(\"D:\\\\testout.txt\");    \n    BufferedInputStream bin=new BufferedInputStream(fin);    \n    int i;    \n    while((i=bin.read())!=-1){    \n     System.out.print((char)i);    \n    }    \n    bin.close();    \n    fin.close();    \n  }catch(Exception e){System.out.println(e);}    \n }    \n}  <\/code><\/pre>\n\n\n\n<p>Here, we are assuming that you have following data in&nbsp;<strong>&#8220;testout.txt&#8221;<\/strong>&nbsp;file:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Codemeal<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Codemeal<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java BufferedInputStream&nbsp;class&nbsp;is used to read information from&nbsp;stream. It internally uses buffer mechanism to make the performance fast. The important points about BufferedInputStream are: When the bytes from the stream are skipped or read, the internal buffer automatically refilled from the contained input stream, many bytes at a time. When a BufferedInputStream is created, an internal [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/643"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=643"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/643\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 867,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/643\/revisions\/867"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=643"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=643"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=643"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 642,
        "date": "2020-06-25T17:43:43",
        "date_gmt": "2020-06-25T17:43:43",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=642"
        },
        "modified": "2020-07-13T17:47:09",
        "modified_gmt": "2020-07-13T17:47:09",
        "slug": "sequenceinputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/sequenceinputstream\/",
        "title": {
            "rendered": "SequenceInputStream"
        },
        "content": {
            "rendered": "\n<p>Java&nbsp;SequenceInputStream&nbsp;class&nbsp;is used to read data from multiple&nbsp;streams. It reads data sequentially (one by one).<\/p>\n\n\n\n<h2>Java SequenceInputStream Class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.SequenceInputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;SequenceInputStream&nbsp;<strong>extends<\/strong>&nbsp;InputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h2>Constructors of SequenceInputStream class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th><a href=\"https:\/\/www.javatpoint.com\/java-constructor\">Constructor<\/a><\/th><th>Description<\/th><\/tr><tr><td>SequenceInputStream(InputStream s1, InputStream s2)<\/td><td>creates a new input stream by reading the data of two input stream in order, first s1 and then s2.<\/td><\/tr><tr><td>SequenceInputStream(Enumeration e)<\/td><td>creates a new input stream by reading the data of an enumeration whose type is InputStream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Methods of SequenceInputStream class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int read()<\/td><td>It is used to read the next byte of data from the input stream.<\/td><\/tr><tr><td>int read(byte[] ary, int off, int len)<\/td><td>It is used to read len bytes of data from the input stream into the&nbsp;array&nbsp;of bytes.<\/td><\/tr><tr><td>int available()<\/td><td>It is used to return the maximum number of byte that can be read from an input stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the input stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java SequenceInputStream Example<\/h2>\n\n\n\n<p>In this example, we are printing the data of two files testin.txt and testout.txt.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.*;  \nclass InputStreamExample {    \n  public static void main(String args&#91;])throws Exception{    \n   FileInputStream input1=new FileInputStream(\"D:\\\\testin.txt\");    \n   FileInputStream input2=new FileInputStream(\"D:\\\\testout.txt\");    \n   SequenceInputStream inst=new SequenceInputStream(input1, input2);    \n   int j;    \n   while((j=inst.read())!=-1){    \n    System.out.print((char)j);    \n   }    \n   inst.close();    \n   input1.close();    \n   input2.close();    \n  }    \n}    <\/code><\/pre>\n\n\n\n<p>Here, we are assuming that you have two files: testin.txt and testout.txt which have following information:<\/p>\n\n\n\n<p>testin.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to Java IO Programming.\n<\/code><\/pre>\n\n\n\n<p>testout.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>It is the example of Java SequenceInputStream class.\n<\/code><\/pre>\n\n\n\n<p>After executing the program, you will get following output:<\/p>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to Java IO Programming. It is the example of Java SequenceInputStream class.<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example that reads the data from two files and writes into another file<\/h2>\n\n\n\n<p>In this example, we are writing the data of two files&nbsp;<strong>testin1.txt<\/strong>&nbsp;and&nbsp;<strong>testin2.txt<\/strong>&nbsp;into another file named&nbsp;<strong>testout.txt.<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.*;    \nclass Input1{    \n  public static void main(String args&#91;])throws Exception{    \n   FileInputStream fin1=new FileInputStream(\"D:\\\\testin1.txt\");    \n   FileInputStream fin2=new FileInputStream(\"D:\\\\testin2.txt\");    \n   FileOutputStream fout=new FileOutputStream(\"D:\\\\testout.txt\");      \n   SequenceInputStream sis=new SequenceInputStream(fin1,fin2);    \n   int i;    \n   while((i=sis.read())!=-1)    \n   {    \n     fout.write(i);        \n   }    \n   sis.close();    \n   fout.close();      \n   fin1.close();      \n   fin2.close();       \n   System.out.println(\"Success..\");  \n  }    \n}    <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Succeess...\n<\/code><\/pre>\n\n\n\n<p>testout.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to Java IO Programming. It is the example of Java SequenceInputStream class.  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>SequenceInputStream example that reads data using enumeration<\/h2>\n\n\n\n<p>If we need to read the data from more than two files, we need to use&nbsp;Enumeration. Enumeration object can be obtained by calling elements() method of the Vector class. Let&#8217;s see the simple example where we are reading the data from 4 files: a.txt, b.txt, c.txt and d.txt.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \nimport java.io.*;    \nimport java.util.*;    \nclass Input2{    \npublic static void main(String args&#91;])throws IOException{    \n\/\/creating the FileInputStream objects for all the files    \nFileInputStream fin=new FileInputStream(\"D:\\\\a.txt\");    \nFileInputStream fin2=new FileInputStream(\"D:\\\\b.txt\");    \nFileInputStream fin3=new FileInputStream(\"D:\\\\c.txt\");    \nFileInputStream fin4=new FileInputStream(\"D:\\\\d.txt\");    \n\/\/creating Vector object to all the stream    \nVector v=new Vector();    \nv.add(fin);    \nv.add(fin2);    \nv.add(fin3);    \nv.add(fin4);              \n\/\/creating enumeration object by calling the elements method    \nEnumeration e=v.elements();      \n\/\/passing the enumeration object in the constructor    \nSequenceInputStream bin=new SequenceInputStream(e);    \nint i=0;      \nwhile((i=bin.read())!=-1){    \nSystem.out.print((char)i);    \n}     \nbin.close();    \nfin.close();    \nfin2.close();    \n}    \n}    <\/code><\/pre>\n\n\n\n<p>The a.txt, b.txt, c.txt and d.txt have following information:<\/p>\n\n\n\n<p>a.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome\n<\/code><\/pre>\n\n\n\n<p>b.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>to\n<\/code><\/pre>\n\n\n\n<p>c.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>java\n<\/code><\/pre>\n\n\n\n<p>d.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>programming<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcometojavaprogramming<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java&nbsp;SequenceInputStream&nbsp;class&nbsp;is used to read data from multiple&nbsp;streams. It reads data sequentially (one by one). Java SequenceInputStream Class declaration Let&#8217;s see the declaration for Java.io.SequenceInputStream class: public&nbsp;class&nbsp;SequenceInputStream&nbsp;extends&nbsp;InputStream&nbsp;&nbsp; Constructors of SequenceInputStream class Constructor Description SequenceInputStream(InputStream s1, InputStream s2) creates a new input stream by reading the data of two input stream in order, first s1 and then [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/642"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=642"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/642\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 868,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/642\/revisions\/868"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=642"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=642"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=642"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 641,
        "date": "2020-06-25T17:44:59",
        "date_gmt": "2020-06-25T17:44:59",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=641"
        },
        "modified": "2020-07-13T17:47:24",
        "modified_gmt": "2020-07-13T17:47:24",
        "slug": "bytearrayoutputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/bytearrayoutputstream\/",
        "title": {
            "rendered": "ByteArrayOutputStream"
        },
        "content": {
            "rendered": "\n<p>Java ByteArrayOutputStream class is used to&nbsp;<strong>write common data<\/strong>&nbsp;into multiple files. In this stream, the data is written into a byte&nbsp;<a href=\"https:\/\/www.javatpoint.com\/array-in-java\">array<\/a>&nbsp;which can be written to multiple streams later.<\/p>\n\n\n\n<p>The ByteArrayOutputStream holds a copy of data and forwards it to multiple streams.<\/p>\n\n\n\n<p>The buffer of ByteArrayOutputStream automatically grows according to data.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java ByteArrayOutputStream class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.ByteArrayOutputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;ByteArrayOutputStream&nbsp;<strong>extends<\/strong>&nbsp;OutputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java ByteArrayOutputStream class constructors<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>ByteArrayOutputStream()<\/td><td>Creates a new byte array output&nbsp;<a href=\"https:\/\/www.javatpoint.com\/java-8-stream\">stream<\/a>&nbsp;with the initial capacity of 32 bytes, though its size increases if necessary.<\/td><\/tr><tr><td>ByteArrayOutputStream(int size)<\/td><td>Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java ByteArrayOutputStream class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int size()<\/td><td>It is used to returns the current size of a buffer.<\/td><\/tr><tr><td>byte[] toByteArray()<\/td><td>It is used to create a newly allocated byte array.<\/td><\/tr><tr><td>String toString()<\/td><td>It is used for converting the content into a&nbsp;<a href=\"https:\/\/www.javatpoint.com\/java-string\">string<\/a>&nbsp;decoding bytes using a platform default character set.<\/td><\/tr><tr><td>String toString(String charsetName)<\/td><td>It is used for converting the content into a string decoding bytes using a specified charsetName.<\/td><\/tr><tr><td>void write(int b)<\/td><td>It is used for writing the byte specified to the byte array output stream.<\/td><\/tr><tr><td>void write(byte[] b, int off, int len<\/td><td>It is used for writing&nbsp;<strong>len<\/strong>&nbsp;bytes from specified byte array starting from the offset&nbsp;<strong>off<\/strong>&nbsp;to the byte array output stream.<\/td><\/tr><tr><td>void writeTo(OutputStream out)<\/td><td>It is used for writing the complete content of a byte array output stream to the specified output stream.<\/td><\/tr><tr><td>void reset()<\/td><td>It is used to reset the count field of a byte array output stream to zero value.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the ByteArrayOutputStream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of Java ByteArrayOutputStream<\/h2>\n\n\n\n<p>Let&#8217;s see a simple example of&nbsp;java&nbsp;ByteArrayOutputStream class to write common data into 2 files: f1.txt and f2.txt.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \nimport java.io.*;  \npublic class DataStreamExample {  \npublic static void main(String args&#91;])throws Exception{    \n      FileOutputStream fout1=new FileOutputStream(\"D:\\\\f1.txt\");    \n      FileOutputStream fout2=new FileOutputStream(\"D:\\\\f2.txt\");    \n        \n      ByteArrayOutputStream bout=new ByteArrayOutputStream();    \n      bout.write(65);    \n      bout.writeTo(fout1);    \n      bout.writeTo(fout2);    \n        \n      bout.flush();    \n      bout.close();\/\/has no effect    \n      System.out.println(\"Success...\");    \n     }    \n    } <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Success...\n<\/code><\/pre>\n\n\n\n<p>f1.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>A<\/code><\/pre>\n\n\n\n<p>f2.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>A<\/code><\/pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/java\/javaio\/images\/java-byte-array-output-stream-class1.png\" alt=\"Java Byte array output stream class 1\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java ByteArrayOutputStream class is used to&nbsp;write common data&nbsp;into multiple files. In this stream, the data is written into a byte&nbsp;array&nbsp;which can be written to multiple streams later. The ByteArrayOutputStream holds a copy of data and forwards it to multiple streams. The buffer of ByteArrayOutputStream automatically grows according to data. Java ByteArrayOutputStream class declaration Let&#8217;s see [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/641"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=641"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/641\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 869,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/641\/revisions\/869"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=641"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=641"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=641"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 640,
        "date": "2020-06-25T17:46:32",
        "date_gmt": "2020-06-25T17:46:32",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=640"
        },
        "modified": "2020-07-13T17:47:39",
        "modified_gmt": "2020-07-13T17:47:39",
        "slug": "bytearrayinputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/bytearrayinputstream\/",
        "title": {
            "rendered": "ByteArrayInputStream"
        },
        "content": {
            "rendered": "\n<p>The ByteArrayInputStream is composed of two words: ByteArray and InputStream. As the name suggests, it can be used to read byte&nbsp;array&nbsp;as input stream.<\/p>\n\n\n\n<p>Java ByteArrayInputStream&nbsp;class&nbsp;contains an internal buffer which is used to&nbsp;<strong>read byte array<\/strong>&nbsp;as stream. In this stream, the data is read from a byte array.<\/p>\n\n\n\n<p>The buffer of ByteArrayInputStream automatically grows according to data.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java ByteArrayInputStream class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.ByteArrayInputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;ByteArrayInputStream&nbsp;<strong>extends<\/strong>&nbsp;InputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java ByteArrayInputStream class constructors<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>ByteArrayInputStream(byte[] ary)<\/td><td>Creates a new byte array input stream which uses&nbsp;<strong>ary<\/strong>&nbsp;as its buffer array.<\/td><\/tr><tr><td>ByteArrayInputStream(byte[] ary, int offset, int len)<\/td><td>Creates a new byte array input stream which uses&nbsp;<strong>ary<\/strong>&nbsp;as its buffer array that can read up to specified&nbsp;<strong>len<\/strong>&nbsp;bytes of data from an array.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java ByteArrayInputStream class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Methods<\/th><th>Description<\/th><\/tr><tr><td>int available()<\/td><td>It is used to return the number of remaining bytes that can be read from the input stream.<\/td><\/tr><tr><td>int read()<\/td><td>It is used to read the next byte of data from the input stream.<\/td><\/tr><tr><td>int read(byte[] ary, int off, int len)<\/td><td>It is used to read up to len bytes of data from an array of bytes in the input stream.<\/td><\/tr><tr><td>boolean markSupported()<\/td><td>It is used to test the input stream for mark and reset method.<\/td><\/tr><tr><td>long skip(long x)<\/td><td>It is used to skip the x bytes of input from the input stream.<\/td><\/tr><tr><td>void mark(int readAheadLimit)<\/td><td>It is used to set the current marked position in the stream.<\/td><\/tr><tr><td>void reset()<\/td><td>It is used to reset the buffer of a byte array.<\/td><\/tr><tr><td>void close()<\/td><td>It is used for closing a ByteArrayInputStream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of Java ByteArrayInputStream<\/h2>\n\n\n\n<p>Let&#8217;s see a simple example of&nbsp;java&nbsp;ByteArrayInputStream class to read byte array as input stream.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \nimport java.io.*;  \npublic class ReadExample {  \n  public static void main(String&#91;] args) throws IOException {  \n    byte&#91;] buf = { 35, 36, 37, 38 };  \n    \/\/ Create the new byte array input stream  \n    ByteArrayInputStream byt = new ByteArrayInputStream(buf);  \n    int k = 0;  \n    while ((k = byt.read()) != -1) {  \n      \/\/Conversion of a byte into character  \n      char ch = (char) k;  \n      System.out.println(\"ASCII value of Character is:\" + k + \"; Special character is: \" + ch);  \n    }  \n  }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ASCII value of Character is:35; Special character is: #\nASCII value of Character is:36; Special character is: $\nASCII value of Character is:37; Special character is: %\nASCII value of Character is:38; Special character is: &amp;<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The ByteArrayInputStream is composed of two words: ByteArray and InputStream. As the name suggests, it can be used to read byte&nbsp;array&nbsp;as input stream. Java ByteArrayInputStream&nbsp;class&nbsp;contains an internal buffer which is used to&nbsp;read byte array&nbsp;as stream. In this stream, the data is read from a byte array. The buffer of ByteArrayInputStream automatically grows according to data. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/640"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=640"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/640\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 870,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/640\/revisions\/870"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=640"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=640"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=640"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 639,
        "date": "2020-06-25T17:48:17",
        "date_gmt": "2020-06-25T17:48:17",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=639"
        },
        "modified": "2020-07-13T17:47:51",
        "modified_gmt": "2020-07-13T17:47:51",
        "slug": "dataoutputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/dataoutputstream\/",
        "title": {
            "rendered": "DataOutputStream"
        },
        "content": {
            "rendered": "\n<p>Java DataOutputStream&nbsp;class&nbsp;allows an application to write primitive&nbsp;Java&nbsp;data types to the output stream in a machine-independent way.<\/p>\n\n\n\n<p>Java application generally uses the data output stream to write data that can later be read by a data input stream.<\/p>\n\n\n\n<h2>Java DataOutputStream class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for java.io.DataOutputStream class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class DataOutputStream extends FilterOutputStream implements DataOutput  <\/code><\/pre>\n\n\n\n<h2>Java DataOutputStream class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int size()<\/td><td>It is used to return the number of bytes written to the data output stream.<\/td><\/tr><tr><td>void write(int b)<\/td><td>It is used to write the specified byte to the underlying output stream.<\/td><\/tr><tr><td>void write(byte[] b, int off, int len)<\/td><td>It is used to write len bytes of data to the output stream.<\/td><\/tr><tr><td>void writeBoolean(boolean v)<\/td><td>It is used to write Boolean to the output stream as a 1-byte value.<\/td><\/tr><tr><td>void writeChar(int v)<\/td><td>It is used to write char to the output stream as a 2-byte value.<\/td><\/tr><tr><td>void writeChars(String s)<\/td><td>It is used to write&nbsp;<a href=\"https:\/\/www.javatpoint.com\/java-string\">string<\/a>&nbsp;to the output stream as a sequence of characters.<\/td><\/tr><tr><td>void writeByte(int v)<\/td><td>It is used to write a byte to the output stream as a 1-byte value.<\/td><\/tr><tr><td>void writeBytes(String s)<\/td><td>It is used to write string to the output stream as a sequence of bytes.<\/td><\/tr><tr><td>void writeInt(int v)<\/td><td>It is used to write an int to the output stream<\/td><\/tr><tr><td>void writeShort(int v)<\/td><td>It is used to write a short to the output stream.<\/td><\/tr><tr><td>void writeShort(int v)<\/td><td>It is used to write a short to the output stream.<\/td><\/tr><tr><td>void writeLong(long v)<\/td><td>It is used to write a long to the output stream.<\/td><\/tr><tr><td>void writeUTF(String str)<\/td><td>It is used to write a string to the output stream using UTF-8 encoding in portable manner.<\/td><\/tr><tr><td>void flush()<\/td><td>It is used to flushes the data output stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>Example of DataOutputStream class<\/h3>\n\n\n\n<p>In this example, we are writing the data to a text file&nbsp;<strong>testout.txt<\/strong>&nbsp;using DataOutputStream class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.*;  \npublic class OutputExample {  \n    public static void main(String&#91;] args) throws IOException {  \n        FileOutputStream file = new FileOutputStream(D:\\\\testout.txt);  \n        DataOutputStream data = new DataOutputStream(file);  \n        data.writeInt(65);  \n        data.flush();  \n        data.close();  \n        System.out.println(\"Succcess...\");  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Succcess...\n<\/code><\/pre>\n\n\n\n<p>testout.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>A<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java DataOutputStream&nbsp;class&nbsp;allows an application to write primitive&nbsp;Java&nbsp;data types to the output stream in a machine-independent way. Java application generally uses the data output stream to write data that can later be read by a data input stream. Java DataOutputStream class declaration Let&#8217;s see the declaration for java.io.DataOutputStream class: Java DataOutputStream class methods Method Description int [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/639"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=639"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/639\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 871,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/639\/revisions\/871"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=639"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=639"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=639"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 657,
        "date": "2020-06-26T05:01:18",
        "date_gmt": "2020-06-26T05:01:18",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=657"
        },
        "modified": "2020-07-13T17:48:10",
        "modified_gmt": "2020-07-13T17:48:10",
        "slug": "datainputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/datainputstream\/",
        "title": {
            "rendered": "DataInputStream"
        },
        "content": {
            "rendered": "\n<p>Java DataInputStream&nbsp;class&nbsp;allows an application to read primitive data from the input stream in a machine-independent way.<\/p>\n\n\n\n<p>Java application generally uses the data output stream to write data that can later be read by a data input stream.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java DataInputStream class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for java.io.DataInputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;DataInputStream&nbsp;<strong>extends<\/strong>&nbsp;FilterInputStream&nbsp;<strong>implements<\/strong>&nbsp;DataInput&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java DataInputStream class Methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int read(byte[] b)<\/td><td>It is used to read the number of bytes from the input stream.<\/td><\/tr><tr><td>int read(byte[] b, int off, int len)<\/td><td>It is used to read&nbsp;<strong>len<\/strong>&nbsp;bytes of data from the input stream.<\/td><\/tr><tr><td>int readInt()<\/td><td>It is used to read input bytes and return an int value.<\/td><\/tr><tr><td>byte readByte()<\/td><td>It is used to read and return the one input byte.<\/td><\/tr><tr><td>char readChar()<\/td><td>It is used to read two input bytes and returns a char value.<\/td><\/tr><tr><td>double readDouble()<\/td><td>It is used to read eight input bytes and returns a double value.<\/td><\/tr><tr><td>boolean readBoolean()<\/td><td>It is used to read one input byte and return true if byte is non zero, false if byte is zero.<\/td><\/tr><tr><td>int skipBytes(int x)<\/td><td>It is used to skip over x bytes of data from the input stream.<\/td><\/tr><tr><td>String readUTF()<\/td><td>It is used to read a&nbsp;<a href=\"https:\/\/www.javatpoint.com\/java-string\">string<\/a>&nbsp;that has been encoded using the UTF-8 format.<\/td><\/tr><tr><td>void readFully(byte[] b)<\/td><td>It is used to read bytes from the input stream and store them into the buffer&nbsp;<a href=\"https:\/\/www.javatpoint.com\/array-in-java\">array<\/a>.<\/td><\/tr><tr><td>void readFully(byte[] b, int off, int len)<\/td><td>It is used to read&nbsp;<strong>len<\/strong>&nbsp;bytes from the input stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of DataInputStream class<\/h2>\n\n\n\n<p>In this example, we are reading the data from the file testout.txt file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \nimport java.io.*;    \npublic class DataStreamExample {  \n  public static void main(String&#91;] args) throws IOException {  \n    InputStream input = new FileInputStream(\"D:\\\\testout.txt\");  \n    DataInputStream inst = new DataInputStream(input);  \n    int count = input.available();  \n    byte&#91;] ary = new byte&#91;count];  \n    inst.read(ary);  \n    for (byte bt : ary) {  \n      char k = (char) bt;  \n      System.out.print(k+\"-\");  \n    }  \n  }  \n}  <\/code><\/pre>\n\n\n\n<p>Here, we are assuming that you have following data in&nbsp;<strong>&#8220;testout.txt&#8221;<\/strong>&nbsp;file:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>JAVA\n<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>J-A-V-A<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java DataInputStream&nbsp;class&nbsp;allows an application to read primitive data from the input stream in a machine-independent way. Java application generally uses the data output stream to write data that can later be read by a data input stream. Java DataInputStream class declaration Let&#8217;s see the declaration for java.io.DataInputStream class: public&nbsp;class&nbsp;DataInputStream&nbsp;extends&nbsp;FilterInputStream&nbsp;implements&nbsp;DataInput&nbsp;&nbsp; Java DataInputStream class Methods Method Description [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/657"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=657"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/657\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 872,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/657\/revisions\/872"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=657"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=657"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=657"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 658,
        "date": "2020-06-26T05:02:33",
        "date_gmt": "2020-06-26T05:02:33",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=658"
        },
        "modified": "2020-07-13T17:48:24",
        "modified_gmt": "2020-07-13T17:48:24",
        "slug": "filteroutputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filteroutputstream\/",
        "title": {
            "rendered": "FilterOutputStream"
        },
        "content": {
            "rendered": "\n<p>Java FilterOutputStream class implements the OutputStream&nbsp;class. It provides different sub classes such as&nbsp;BufferedOutputStreamand&nbsp;DataOutputStream&nbsp;to provide additional functionality. So it is less used individually.<\/p>\n\n\n\n<h3>Java FilterOutputStream class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.io.FilterOutputStream class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;FilterOutputStream&nbsp;<strong>extends<\/strong>&nbsp;OutputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Java FilterOutputStream class Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void write(int b)<\/td><td>It is used to write the specified byte to the output stream.<\/td><\/tr><tr><td>void write(byte[] ary)<\/td><td>It is used to write ary.length byte to the output stream.<\/td><\/tr><tr><td>void write(byte[] b, int off, int len)<\/td><td>It is used to write len bytes from the offset off to the output stream.<\/td><\/tr><tr><td>void flush()<\/td><td>It is used to flushes the output stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the output stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>Example of FilterOutputStream class<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \npublic class FilterExample {  \n    public static void main(String&#91;] args) throws IOException {  \n        File data = new File(\"D:\\\\testout.txt\");  \n        FileOutputStream file = new FileOutputStream(data);  \n        FilterOutputStream filter = new FilterOutputStream(file);  \n        String s=\"Welcome to codemeals.\";      \n        byte b&#91;]=s.getBytes();      \n        filter.write(b);     \n        filter.flush();  \n        filter.close();  \n        file.close();  \n        System.out.println(\"Success...\");  \n    }  \n}  \n<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Success...\n<\/code><\/pre>\n\n\n\n<p>testout.txt<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java FilterOutputStream class implements the OutputStream&nbsp;class. It provides different sub classes such as&nbsp;BufferedOutputStreamand&nbsp;DataOutputStream&nbsp;to provide additional functionality. So it is less used individually. Java FilterOutputStream class declaration Let&#8217;s see the declaration for java.io.FilterOutputStream class: public&nbsp;class&nbsp;FilterOutputStream&nbsp;extends&nbsp;OutputStream&nbsp;&nbsp; Java FilterOutputStream class Methods Method Description void write(int b) It is used to write the specified byte to the output stream. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/658"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=658"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/658\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 873,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/658\/revisions\/873"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=658"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=658"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=658"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 660,
        "date": "2020-06-26T05:03:55",
        "date_gmt": "2020-06-26T05:03:55",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=660"
        },
        "modified": "2020-07-13T17:49:06",
        "modified_gmt": "2020-07-13T17:49:06",
        "slug": "filterinputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filterinputstream\/",
        "title": {
            "rendered": "FilterInputStream"
        },
        "content": {
            "rendered": "\n<p>Java FilterInputStream class implements the InputStream. It contains different sub classes as&nbsp;BufferedInputStream,&nbsp;DataInputStream&nbsp;for providing additional functionality. So it is less used individually.<\/p>\n\n\n\n<h3>Java FilterInputStream class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.io.FilterInputStream class<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;FilterInputStream&nbsp;<strong>extends<\/strong>&nbsp;InputStream&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Java FilterInputStream class Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int available()<\/td><td>It is used to return an estimate number of bytes that can be read from the input stream.<\/td><\/tr><tr><td>int read()<\/td><td>It is used to read the next byte of data from the input stream.<\/td><\/tr><tr><td>int read(byte[] b)<\/td><td>It is used to read up to byte.length bytes of data from the input stream.<\/td><\/tr><tr><td>long skip(long n)<\/td><td>It is used to skip over and discards n bytes of data from the input stream.<\/td><\/tr><tr><td>boolean markSupported()<\/td><td>It is used to test if the input stream support mark and reset method.<\/td><\/tr><tr><td>void mark(int readlimit)<\/td><td>It is used to mark the current position in the input stream.<\/td><\/tr><tr><td>void reset()<\/td><td>It is used to reset the input stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the input stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>Example of FilterInputStream class<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \npublic class FilterExample {  \n    public static void main(String&#91;] args) throws IOException {  \n        File data = new File(\"D:\\\\testout.txt\");  \n        FileInputStream  file = new FileInputStream(data);  \n        FilterInputStream filter = new BufferedInputStream(file);  \n        int k =0;  \n        while((k=filter.read())!=-1){  \n            System.out.print((char)k);  \n        }  \n        file.close();  \n        filter.close();  \n    }  \n} <\/code><\/pre>\n\n\n\n<p>Here, we are assuming that you have following data in&nbsp;<strong>&#8220;testout.txt&#8221;<\/strong>&nbsp;file:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals\n<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java FilterInputStream class implements the InputStream. It contains different sub classes as&nbsp;BufferedInputStream,&nbsp;DataInputStream&nbsp;for providing additional functionality. So it is less used individually. Java FilterInputStream class declaration Let&#8217;s see the declaration for java.io.FilterInputStream class public&nbsp;class&nbsp;FilterInputStream&nbsp;extends&nbsp;InputStream&nbsp;&nbsp; Java FilterInputStream class Methods Method Description int available() It is used to return an estimate number of bytes that can be read [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/660"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=660"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/660\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 874,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/660\/revisions\/874"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=660"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=660"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=660"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 661,
        "date": "2020-06-26T05:05:21",
        "date_gmt": "2020-06-26T05:05:21",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=661"
        },
        "modified": "2020-06-26T05:05:21",
        "modified_gmt": "2020-06-26T05:05:21",
        "slug": "objectstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/objectstream\/",
        "title": {
            "rendered": "ObjectStream"
        },
        "content": {
            "rendered": "\n<p>ObjectStreamClass act as a\u00a0Serialization\u00a0descriptor for class. This\u00a0class\u00a0contains the name and serialVersionUID of the class.<\/p>\n\n\n\n<h3>Fields<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Field<\/th><th>Description<\/th><\/tr><tr><td>static ObjectStreamField[]<\/td><td>NO_FIELDS<\/td><td>serialPersistentFields value indicating no serializable fields<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>Class&lt;?&gt;<\/td><td>forClass()<\/td><td>It returns the class in the local VM that this version is mapped to.<\/td><\/tr><tr><td>ObjectStreamField<\/td><td>getField(String name)<\/td><td>It gets the field of this class by name.<\/td><\/tr><tr><td>ObjectStreamField[]<\/td><td>getFields()<\/td><td>It returns an&nbsp;<a href=\"https:\/\/www.javatpoint.com\/array-in-java\">array<\/a>&nbsp;of the fields of this serialization class.<\/td><\/tr><tr><td>String<\/td><td>getName()<\/td><td>It returns the name of the class described by this descriptor.<\/td><\/tr><tr><td>long<\/td><td>getSerialVersionUID()<\/td><td>It returns the serialVersionUID for this class.<\/td><\/tr><tr><td>Static ObjectStreamClass<\/td><td>lookup(Class&lt;?&gt; cl)<\/td><td>It finds the descriptor for a class that can be serialized.<\/td><\/tr><tr><td>Static ObjectStreamClass<\/td><td>lookupAny(Class&lt;?&gt; cl)<\/td><td>It returns the descriptor for any class, regardless of whether it implements Serializable.<\/td><\/tr><tr><td>String<\/td><td>toString()<\/td><td>It returns a string describing this ObjectStreamClass.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.ObjectStreamClass;  \nimport java.util.Calendar;  \n  \npublic class ObjectStreamClassExample {  \n    public static void main(String&#91;] args) {  \n  \n        \/\/ create a new object stream class for Integers  \n        ObjectStreamClass osc = ObjectStreamClass.lookup(SmartPhone.class);  \n  \n        \/\/ get the value field from ObjectStreamClass for integers  \n        System.out.println(\"\" + osc.getField(\"price\"));  \n  \n        \/\/ create a new object stream class for Calendar  \n        ObjectStreamClass osc2 = ObjectStreamClass.lookup(String.class);  \n  \n        \/\/ get the Class instance for osc2  \n        System.out.println(\"\" + osc2.getField(\"hash\"));  \n  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>I price\nnull<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>ObjectStreamClass act as a\u00a0Serialization\u00a0descriptor for class. This\u00a0class\u00a0contains the name and serialVersionUID of the class. Fields Modifier and Type Field Description static ObjectStreamField[] NO_FIELDS serialPersistentFields value indicating no serializable fields Methods Modifier and Type Method Description Class&lt;?&gt; forClass() It returns the class in the local VM that this version is mapped to. ObjectStreamField getField(String name) It [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/661"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=661"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/661\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 666,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/661\/revisions\/666"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=661"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=661"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=661"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 659,
        "date": "2020-06-26T05:07:19",
        "date_gmt": "2020-06-26T05:07:19",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=659"
        },
        "modified": "2020-07-13T17:49:50",
        "modified_gmt": "2020-07-13T17:49:50",
        "slug": "console-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/console-class\/",
        "title": {
            "rendered": "Console Class"
        },
        "content": {
            "rendered": "\n<p>The Java Console class is be used to get input from console. It provides methods to read texts and passwords.<\/p>\n\n\n\n<p>If you read password using Console class, it will not be displayed to the user.<\/p>\n\n\n\n<p>The java.io.Console class is attached with system console internally. The Console class is introduced since 1.5.<\/p>\n\n\n\n<p>Let&#8217;s see a simple example to read text from console.<\/p>\n\n\n\n<ol><li>String&nbsp;text=System.console().readLine();&nbsp;&nbsp;&nbsp;&nbsp;<\/li><li class=\"\">System.out.println(&#8220;Text&nbsp;is:&nbsp;&#8220;+text);&nbsp;&nbsp;&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java Console class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.Console class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>final<\/strong>&nbsp;<strong>class<\/strong>&nbsp;Console&nbsp;<strong>extends<\/strong>&nbsp;Object&nbsp;<strong>implements<\/strong>&nbsp;Flushable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java Console class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>Reader reader()<\/td><td>It is used to retrieve the reader\u00a0object\u00a0associated with the console<\/td><\/tr><tr><td>String readLine()<\/td><td>It is used to read a single line of text from the console.<\/td><\/tr><tr><td>String readLine(String fmt, Object&#8230; args)<\/td><td>It provides a formatted prompt then reads the single line of text from the console.<\/td><\/tr><tr><td>char[] readPassword()<\/td><td>It is used to read password that is not being displayed on the console.<\/td><\/tr><tr><td>char[] readPassword(String fmt, Object&#8230; args)<\/td><td>It provides a formatted prompt then reads the password that is not being displayed on the console.<\/td><\/tr><tr><td>Console format(String fmt, Object&#8230; args)<\/td><td>It is used to write a formatted\u00a0string\u00a0to the console output stream.<\/td><\/tr><tr><td>Console printf(String format, Object&#8230; args)<\/td><td>It is used to write a string to the console output stream.<\/td><\/tr><tr><td>PrintWriter writer()<\/td><td>It is used to retrieve the\u00a0PrintWriter\u00a0object associated with the console.<\/td><\/tr><tr><td>void flush()<\/td><td>It is used to flushes the console.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>How to get the object of Console<\/h2>\n\n\n\n<p>System class provides a static method console() that returns the\u00a0singleton\u00a0instance of Console class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public static Console console(){}   <\/code><\/pre>\n\n\n\n<p>Let&#8217;s see the code to get the instance of Console class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Console c=System.console();  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java Console Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.Console;  \nclass ReadStringTest{    \npublic static void main(String args&#91;]){    \nConsole c=System.console();    \nSystem.out.println(\"Enter your name: \");    \nString n=c.readLine();    \nSystem.out.println(\"Welcome \"+n);    \n}    \n} <\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter your name: Nakul Jain\nWelcome Nakul Jain<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java Console Example to read password<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.Console;  \nclass ReadPasswordTest{    \npublic static void main(String args&#91;]){    \nConsole c=System.console();    \nSystem.out.println(\"Enter password: \");    \nchar&#91;] ch=c.readPassword();    \nString pass=String.valueOf(ch);\/\/converting char array into string    \nSystem.out.println(\"Password is: \"+pass);    \n}    \n}  <\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Enter password: \nPassword is: 123<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The Java Console class is be used to get input from console. It provides methods to read texts and passwords. If you read password using Console class, it will not be displayed to the user. The java.io.Console class is attached with system console internally. The Console class is introduced since 1.5. Let&#8217;s see a simple [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/659"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=659"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/659\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 875,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/659\/revisions\/875"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=659"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=659"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=659"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 656,
        "date": "2020-06-26T05:08:48",
        "date_gmt": "2020-06-26T05:08:48",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=656"
        },
        "modified": "2020-07-13T17:50:06",
        "modified_gmt": "2020-07-13T17:50:06",
        "slug": "filepermission",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filepermission\/",
        "title": {
            "rendered": "FilePermission"
        },
        "content": {
            "rendered": "\n<p>Java FilePermission class contains the permission related to a directory or&nbsp;file. All the permissions are related with path. The path can be of two types:<\/p>\n\n\n\n<p>1)&nbsp;<strong>D:\\\\IO\\\\<\/strong>-: It indicates that the permission is associated with all sub directories and files recursively.<\/p>\n\n\n\n<p>2)&nbsp;<strong>D:\\\\IO\\\\*<\/strong>: It indicates that the permission is associated with all directory and files within this directory excluding sub directories.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java FilePermission class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.FilePermission class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>final<\/strong>&nbsp;<strong>class<\/strong>&nbsp;FilePermission&nbsp;<strong>extends<\/strong>&nbsp;Permission&nbsp;<strong>implements<\/strong>&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Methods of FilePermission class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>ByteArrayOutputStream()<\/td><td>Creates a new byte&nbsp;array&nbsp;output stream with the initial capacity of 32 bytes, though its size increases if necessary.<\/td><\/tr><tr><td>ByteArrayOutputStream(int size)<\/td><td>Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java FilePermission class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int hashCode()<\/td><td>It is used to return the hash code value of an&nbsp;object.<\/td><\/tr><tr><td>String getActions()<\/td><td>It is used to return the &#8220;canonical string representation&#8221; of an action.<\/td><\/tr><tr><td>boolean equals(Object obj)<\/td><td>It is used to check the two FilePermission objects for equality.<\/td><\/tr><tr><td>boolean implies(Permission p)<\/td><td>It is used to check the FilePermission object for the specified permission.<\/td><\/tr><tr><td>PermissionCollection newPermissionCollection()<\/td><td>It is used to return the new PermissonCollection object for storing the FilePermission object.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java FilePermission Example<\/h2>\n\n\n\n<p>Let&#8217;s see the simple example in which permission of a directory path is granted with read permission and a file of this directory is granted for write permission.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.*;  \nimport java.security.PermissionCollection;  \npublic class FilePermissionExample{  \n       public static void main(String&#91;] args) throws IOException {  \n        String srg = \"D:\\\\IO Package\\\\java.txt\";  \n        FilePermission file1 = new FilePermission(\"D:\\\\IO Package\\\\-\", \"read\");  \n        PermissionCollection permission = file1.newPermissionCollection();  \n        permission.add(file1);  \n             FilePermission file2 = new FilePermission(srg, \"write\");  \n             permission.add(file2);  \n             if(permission.implies(new FilePermission(srg, \"read,write\"))) {  \n             System.out.println(\"Read, Write permission is granted for the path \"+srg );  \n             }else {  \n            System.out.println(\"No Read, Write permission is granted for the path \"+srg);            }  \n       }   \n} <\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Read, Write permission is granted for the path D:\\IO Package\\java.txt<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java FilePermission class contains the permission related to a directory or&nbsp;file. All the permissions are related with path. The path can be of two types: 1)&nbsp;D:\\\\IO\\\\-: It indicates that the permission is associated with all sub directories and files recursively. 2)&nbsp;D:\\\\IO\\\\*: It indicates that the permission is associated with all directory and files within this [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/656"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=656"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/656\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 876,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/656\/revisions\/876"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=656"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=656"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=656"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 655,
        "date": "2020-06-26T05:15:00",
        "date_gmt": "2020-06-26T05:15:00",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=655"
        },
        "modified": "2020-07-16T10:04:58",
        "modified_gmt": "2020-07-16T10:04:58",
        "slug": "writer",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/writer\/",
        "title": {
            "rendered": "Writer"
        },
        "content": {
            "rendered": "\n<p>It is an&nbsp;abstract&nbsp;class for writing to character streams. The methods that a subclass must implement are write(char[], int, int), flush(), and close(). Most subclasses will override some of the methods defined here to provide higher efficiency, functionality or both.<\/p>\n\n\n\n<h3>Fields<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Field<\/th><th>Description<\/th><\/tr><tr><td>protected Object<\/td><td>lock<\/td><td>The object used to synchronize operations on this stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Constructor<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier<\/th><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>protected<\/td><td>Writer()<\/td><td>It creates a new character-stream writer whose critical sections will synchronize on the writer itself.<\/td><\/tr><tr><td>protected<\/td><td>Writer(Object lock)<\/td><td>It creates a new character-stream writer whose critical sections will synchronize on the given\u00a0object.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Modifier and Type<\/td><th>Method<\/th><th>Description<\/th><\/tr><tr><td>Writer<\/td><td>append(char c)<\/td><td>It appends the specified character to this writer.<\/td><\/tr><tr><td>Writer<\/td><td>append(CharSequence csq)<\/td><td>It appends the specified character sequence to this writer<\/td><\/tr><tr><td>Writer<\/td><td>append(CharSequence csq, int start, int end)<\/td><td>It appends a subsequence of the specified character sequence to this writer.<\/td><\/tr><tr><td>abstract void<\/td><td>close()<\/td><td>It closes the stream, flushing it first.<\/td><\/tr><tr><td>abstract void<\/td><td>flush()<\/td><td>It flushes the stream.<\/td><\/tr><tr><td>void<\/td><td>write(char[] cbuf)<\/td><td>It writes an\u00a0array\u00a0of characters.<\/td><\/tr><tr><td>abstract void<\/td><td>write(char[] cbuf, int off, int len)<\/td><td>It writes a portion of an array of characters.<\/td><\/tr><tr><td>void<\/td><td>write(int c)<\/td><td>It writes a single character.<\/td><\/tr><tr><td>void<\/td><td>write(String str)<\/td><td>It writes a\u00a0string.<\/td><\/tr><tr><td>void<\/td><td>write(String str, int off, int len)<\/td><td>It writes a portion of a string.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java Writer Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \npublic class WriterExample {  \n    public static void main(String&#91;] args) {  \n        try {  \n            Writer w = new FileWriter(\"output.txt\");  \n            String content = \"I love my country\";  \n            w.write(content);  \n            w.close();  \n            System.out.println(\"Done\");  \n        } catch (IOException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Done\n<\/code><\/pre>\n\n\n\n<p>output.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>I love my country<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>It is an&nbsp;abstract&nbsp;class for writing to character streams. The methods that a subclass must implement are write(char[], int, int), flush(), and close(). Most subclasses will override some of the methods defined here to provide higher efficiency, functionality or both. Fields Modifier and Type Field Description protected Object lock The object used to synchronize operations on [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/655"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=655"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/655\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 896,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/655\/revisions\/896"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=655"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=655"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=655"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 654,
        "date": "2020-06-26T05:18:57",
        "date_gmt": "2020-06-26T05:18:57",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=654"
        },
        "modified": "2020-07-16T10:05:30",
        "modified_gmt": "2020-07-16T10:05:30",
        "slug": "reader",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/reader\/",
        "title": {
            "rendered": "Reader"
        },
        "content": {
            "rendered": "\n<p>Java&nbsp;Reader is an&nbsp;abstract class&nbsp;for reading character&nbsp;streams. The only methods that a subclass must implement are read(char[], int, int) and close(). Most subclasses, however, will&nbsp;override&nbsp;some of the methods to provide higher efficiency, additional functionality, or both.<\/p>\n\n\n\n<p>Some of the implementation&nbsp;class&nbsp;are&nbsp;BufferedReader,&nbsp;CharArrayReader,&nbsp;FilterReader,&nbsp;InputStreamReader, PipedReader,&nbsp;StringReader<\/p>\n\n\n\n<h3>Fields<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Field<\/th><th>Description<\/th><\/tr><tr><td>protected Object<\/td><td>lock<\/td><td>The object used to synchronize operations on this stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Constructor<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier<\/th><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>protected<\/td><td>Reader()<\/td><td>It creates a new character-stream reader whose critical sections will synchronize on the reader itself.<\/td><\/tr><tr><td>protected<\/td><td>Reader(Object lock)<\/td><td>It creates a new character-stream reader whose critical sections will synchronize on the given object.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>abstract void<\/td><td>close()<\/td><td>It closes the stream and releases any system resources associated with it.<\/td><\/tr><tr><td>void<\/td><td>mark(int readAheadLimit)<\/td><td>It marks the present position in the stream.<\/td><\/tr><tr><td>boolean<\/td><td>markSupported()<\/td><td>It tells whether this stream supports the mark() operation.<\/td><\/tr><tr><td>int<\/td><td>read()<\/td><td>It reads a single character.<\/td><\/tr><tr><td>int<\/td><td>read(char[] cbuf)<\/td><td>It reads characters into an\u00a0array.<\/td><\/tr><tr><td>abstract int<\/td><td>read(char[] cbuf, int off, int len)<\/td><td>It reads characters into a portion of an array.<\/td><\/tr><tr><td>int<\/td><td>read(CharBuffer target)<\/td><td>It attempts to read characters into the specified character buffer.<\/td><\/tr><tr><td>boolean<\/td><td>ready()<\/td><td>It tells whether this stream is ready to be read.<\/td><\/tr><tr><td>void<\/td><td>reset()<\/td><td>It resets the stream.<\/td><\/tr><tr><td>long<\/td><td>skip(long n)<\/td><td>It skips characters.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \npublic class ReaderExample {  \n    public static void main(String&#91;] args) {  \n        try {  \n            Reader reader = new FileReader(\"file.txt\");  \n            int data = reader.read();  \n            while (data != -1) {  \n                System.out.print((char) data);  \n                data = reader.read();  \n            }  \n            reader.close();  \n        } catch (Exception ex) {  \n            System.out.println(ex.getMessage());  \n        }  \n    }  \n}<\/code><\/pre>\n\n\n\n<p>file.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>I love my country\n<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>I love my country<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java&nbsp;Reader is an&nbsp;abstract class&nbsp;for reading character&nbsp;streams. The only methods that a subclass must implement are read(char[], int, int) and close(). Most subclasses, however, will&nbsp;override&nbsp;some of the methods to provide higher efficiency, additional functionality, or both. Some of the implementation&nbsp;class&nbsp;are&nbsp;BufferedReader,&nbsp;CharArrayReader,&nbsp;FilterReader,&nbsp;InputStreamReader, PipedReader,&nbsp;StringReader Fields Modifier and Type Field Description protected Object lock The object used to synchronize operations [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/654"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=654"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/654\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 897,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/654\/revisions\/897"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=654"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=654"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=654"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 653,
        "date": "2020-06-26T05:20:23",
        "date_gmt": "2020-06-26T05:20:23",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=653"
        },
        "modified": "2020-07-13T17:38:48",
        "modified_gmt": "2020-07-13T17:38:48",
        "slug": "filewriter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filewriter\/",
        "title": {
            "rendered": "FileWriter"
        },
        "content": {
            "rendered": "\n<p>Java FileWriter class is used to write character-oriented data to a&nbsp;file. It is character-oriented class which is used for file handling in&nbsp;java.<\/p>\n\n\n\n<p>Unlike FileOutputStream class, you don&#8217;t need to convert string into byte&nbsp;array&nbsp;because it provides method to write string directly.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java FileWriter class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.FileWriter class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;FileWriter&nbsp;<strong>extends<\/strong>&nbsp;OutputStreamWriter&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Constructors of FileWriter class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>FileWriter(String file)<\/td><td>Creates a new file. It gets file name in&nbsp;string.<\/td><\/tr><tr><td>FileWriter(File file)<\/td><td>Creates a new file. It gets file name in File&nbsp;object.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Methods of FileWriter class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void write(String text)<\/td><td>It is used to write the string into FileWriter.<\/td><\/tr><tr><td>void write(char c)<\/td><td>It is used to write the char into FileWriter.<\/td><\/tr><tr><td>void write(char[] c)<\/td><td>It is used to write char array into FileWriter.<\/td><\/tr><tr><td>void flush()<\/td><td>It is used to flushes the data of FileWriter.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the FileWriter.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java FileWriter Example<\/h2>\n\n\n\n<p>In this example, we are writing the data in the file testout.txt using Java FileWriter class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \nimport java.io.FileWriter;  \npublic class FileWriterExample {  \n    public static void main(String args&#91;]){    \n         try{    \n           FileWriter fw=new FileWriter(\"D:\\\\testout.txt\");    \n           fw.write(\"Welcome to codemeals.\");    \n           fw.close();    \n          }catch(Exception e){System.out.println(e);}    \n          System.out.println(\"Success...\");    \n     }    \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Success...\n<\/code><\/pre>\n\n\n\n<p>testout.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java FileWriter class is used to write character-oriented data to a&nbsp;file. It is character-oriented class which is used for file handling in&nbsp;java. Unlike FileOutputStream class, you don&#8217;t need to convert string into byte&nbsp;array&nbsp;because it provides method to write string directly. Java FileWriter class declaration Let&#8217;s see the declaration for Java.io.FileWriter class: public&nbsp;class&nbsp;FileWriter&nbsp;extends&nbsp;OutputStreamWriter&nbsp;&nbsp; Constructors of FileWriter [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/653"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=653"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/653\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 853,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/653\/revisions\/853"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=653"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=653"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=653"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 652,
        "date": "2020-06-26T05:22:16",
        "date_gmt": "2020-06-26T05:22:16",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=652"
        },
        "modified": "2020-07-13T17:39:14",
        "modified_gmt": "2020-07-13T17:39:14",
        "slug": "filereader",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filereader\/",
        "title": {
            "rendered": "FileReader"
        },
        "content": {
            "rendered": "\n<p>Java FileReader class is used to read data from the file. It returns data in byte format like&nbsp;FileInputStream&nbsp;class.<\/p>\n\n\n\n<p>It is character-oriented class which is used for&nbsp;file&nbsp;handling in&nbsp;java.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java FileReader class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.FileReader class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;FileReader&nbsp;<strong>extends<\/strong>&nbsp;InputStreamReader&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Constructors of FileReader class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>FileReader(String file)<\/td><td>It gets filename in&nbsp;string. It opens the given file in read mode. If file doesn&#8217;t exist, it throws FileNotFoundException.<\/td><\/tr><tr><td>FileReader(File file)<\/td><td>It gets filename in&nbsp;file&nbsp;instance. It opens the given file in read mode. If file doesn&#8217;t exist, it throws FileNotFoundException.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Methods of FileReader class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int read()<\/td><td>It is used to return a character in ASCII form. It returns -1 at the end of file.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the FileReader class.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java FileReader Example<\/h2>\n\n\n\n<p>In this example, we are reading the data from the text file&nbsp;<strong>testout.txt<\/strong>&nbsp;using Java FileReader class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.FileReader;  \npublic class FileReaderExample {  \n    public static void main(String args&#91;])throws Exception{    \n          FileReader fr=new FileReader(\"D:\\\\testout.txt\");    \n          int i;    \n          while((i=fr.read())!=-1)    \n          System.out.print((char)i);    \n          fr.close();    \n    }    \n}  <\/code><\/pre>\n\n\n\n<p>Here, we are assuming that you have following data in &#8220;testout.txt&#8221; file:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals.\n<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java FileReader class is used to read data from the file. It returns data in byte format like&nbsp;FileInputStream&nbsp;class. It is character-oriented class which is used for&nbsp;file&nbsp;handling in&nbsp;java. Java FileReader class declaration Let&#8217;s see the declaration for Java.io.FileReader class: public&nbsp;class&nbsp;FileReader&nbsp;extends&nbsp;InputStreamReader&nbsp;&nbsp; Constructors of FileReader class Constructor Description FileReader(String file) It gets filename in&nbsp;string. It opens the given [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/652"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=652"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/652\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 854,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/652\/revisions\/854"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=652"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=652"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=652"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 651,
        "date": "2020-06-26T05:23:42",
        "date_gmt": "2020-06-26T05:23:42",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=651"
        },
        "modified": "2020-07-13T17:39:35",
        "modified_gmt": "2020-07-13T17:39:35",
        "slug": "bufferedwriter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/bufferedwriter\/",
        "title": {
            "rendered": "BufferedWriter"
        },
        "content": {
            "rendered": "\n<p>Java BufferedWriter class is used to provide buffering for Writer instances. It makes the performance fast. It inherits&nbsp;Writer&nbsp;class. The buffering characters are used for providing the efficient writing of single&nbsp;arrays, characters, and&nbsp;strings.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.BufferedWriter class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;BufferedWriter&nbsp;<strong>extends<\/strong>&nbsp;Writer&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Class constructors<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>BufferedWriter(Writer wrt)<\/td><td>It is used to create a buffered character output stream that uses the default size for an output buffer.<\/td><\/tr><tr><td>BufferedWriter(Writer wrt, int size)<\/td><td>It is used to create a buffered character output stream that uses the specified size for an output buffer.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void newLine()<\/td><td>It is used to add a new line by writing a line separator.<\/td><\/tr><tr><td>void write(int c)<\/td><td>It is used to write a single character.<\/td><\/tr><tr><td>void write(char[] cbuf, int off, int len)<\/td><td>It is used to write a portion of an array of characters.<\/td><\/tr><tr><td>void write(String s, int off, int len)<\/td><td>It is used to write a portion of a string.<\/td><\/tr><tr><td>void flush()<\/td><td>It is used to flushes the input stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to closes the input stream<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of Java BufferedWriter<\/h2>\n\n\n\n<p>Let&#8217;s see the simple example of writing the data to a text file&nbsp;<strong>testout.txt<\/strong>&nbsp;using Java BufferedWriter.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \nimport java.io.*;  \npublic class BufferedWriterExample {  \npublic static void main(String&#91;] args) throws Exception {     \n    FileWriter writer = new FileWriter(\"D:\\\\testout.txt\");  \n    BufferedWriter buffer = new BufferedWriter(writer);  \n    buffer.write(\"Welcome to codemeals.\");  \n    buffer.close();  \n    System.out.println(\"Success\");  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>success\n<\/code><\/pre>\n\n\n\n<p>testout.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java BufferedWriter class is used to provide buffering for Writer instances. It makes the performance fast. It inherits&nbsp;Writer&nbsp;class. The buffering characters are used for providing the efficient writing of single&nbsp;arrays, characters, and&nbsp;strings. Class declaration Let&#8217;s see the declaration for Java.io.BufferedWriter class: public&nbsp;class&nbsp;BufferedWriter&nbsp;extends&nbsp;Writer&nbsp;&nbsp; Class constructors Constructor Description BufferedWriter(Writer wrt) It is used to create a buffered [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/651"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=651"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/651\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 855,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/651\/revisions\/855"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=651"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=651"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=651"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 650,
        "date": "2020-06-26T05:25:17",
        "date_gmt": "2020-06-26T05:25:17",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=650"
        },
        "modified": "2020-07-13T17:39:47",
        "modified_gmt": "2020-07-13T17:39:47",
        "slug": "chararrayreader",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/chararrayreader\/",
        "title": {
            "rendered": "CharArrayReader"
        },
        "content": {
            "rendered": "\n<p>The CharArrayReader is composed of two words: CharArray and Reader. The CharArrayReader class is used to read character&nbsp;arrayas a reader (stream). It inherits&nbsp;Reader&nbsp;class.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java CharArrayReader class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.CharArrayReader&nbsp;class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;CharArrayReader&nbsp;<strong>extends<\/strong>&nbsp;Reader&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java CharArrayReader class methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int read()<\/td><td>It is used to read a single character<\/td><\/tr><tr><td>int read(char[] b, int off, int len)<\/td><td>It is used to read characters into the portion of an array.<\/td><\/tr><tr><td>boolean ready()<\/td><td>It is used to tell whether the stream is ready to read.<\/td><\/tr><tr><td>boolean markSupported()<\/td><td>It is used to tell whether the stream supports mark() operation.<\/td><\/tr><tr><td>long skip(long n)<\/td><td>It is used to skip the character in the input stream.<\/td><\/tr><tr><td>void mark(int readAheadLimit)<\/td><td>It is used to mark the present position in the stream.<\/td><\/tr><tr><td>void reset()<\/td><td>It is used to reset the stream to a most recent mark.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to closes the stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of CharArrayReader Class:<\/h2>\n\n\n\n<p>Let&#8217;s see the simple example to read a character using Java CharArrayReader class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.CharArrayReader;  \npublic class CharArrayExample{  \n  public static void main(String&#91;] ag) throws Exception {  \n    char&#91;] ary = { 'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't' };  \n    CharArrayReader reader = new CharArrayReader(ary);  \n    int k = 0;  \n    \/\/ Read until the end of a file  \n    while ((k = reader.read()) != -1) {  \n      char ch = (char) k;  \n      System.out.print(ch + \" : \");  \n      System.out.println(k);  \n    }  \n  }  \n}<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>j : 106\na : 97\nv : 118\na : 97\nt : 116\np : 112\no : 111\ni : 105\nn : 110\nt : 116<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The CharArrayReader is composed of two words: CharArray and Reader. The CharArrayReader class is used to read character&nbsp;arrayas a reader (stream). It inherits&nbsp;Reader&nbsp;class. Java CharArrayReader class declaration Let&#8217;s see the declaration for Java.io.CharArrayReader&nbsp;class: public&nbsp;class&nbsp;CharArrayReader&nbsp;extends&nbsp;Reader&nbsp;&nbsp; Java CharArrayReader class methods Method Description int read() It is used to read a single character int read(char[] b, int off, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/650"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=650"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/650\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 856,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/650\/revisions\/856"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=650"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=650"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=650"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 649,
        "date": "2020-06-26T05:27:36",
        "date_gmt": "2020-06-26T05:27:36",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=649"
        },
        "modified": "2020-07-13T17:40:19",
        "modified_gmt": "2020-07-13T17:40:19",
        "slug": "chararraywriter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/chararraywriter\/",
        "title": {
            "rendered": "CharArrayWriter"
        },
        "content": {
            "rendered": "\n<p>The CharArrayWriter class can be used to write common data to multiple files. This class inherits&nbsp;Writer&nbsp;class. Its buffer automatically grows when data is written in this stream. Calling the close() method on this&nbsp;object&nbsp;has no effect.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java CharArrayWriter class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.CharArrayWriter class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;CharArrayWriter&nbsp;<strong>extends<\/strong>&nbsp;Writer&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java CharArrayWriter class Methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int size()<\/td><td>It is used to return the current size of the buffer.<\/td><\/tr><tr><td>char[] toCharArray()<\/td><td>It is used to return the copy of an input data.<\/td><\/tr><tr><td>String toString()<\/td><td>It is used for converting an input data to a&nbsp;string.<\/td><\/tr><tr><td>CharArrayWriter append(char c)<\/td><td>It is used to append the specified character to the writer.<\/td><\/tr><tr><td>CharArrayWriter append(CharSequence csq)<\/td><td>It is used to append the specified character sequence to the writer.<\/td><\/tr><tr><td>CharArrayWriter append(CharSequence csq, int start, int end)<\/td><td>It is used to append the subsequence of a specified character to the writer.<\/td><\/tr><tr><td>void write(int c)<\/td><td>It is used to write a character to the buffer.<\/td><\/tr><tr><td>void write(char[] c, int off, int len)<\/td><td>It is used to write a character to the buffer.<\/td><\/tr><tr><td>void write(String str, int off, int len)<\/td><td>It is used to write a portion of string to the buffer.<\/td><\/tr><tr><td>void writeTo(Writer out)<\/td><td>It is used to write the content of buffer to different character stream.<\/td><\/tr><tr><td>void flush()<\/td><td>It is used to flush the stream.<\/td><\/tr><tr><td>void reset()<\/td><td>It is used to reset the buffer.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>Example of CharArrayWriter Class:<\/h3>\n\n\n\n<p>In this example, we are writing a common data to 4 files a.txt, b.txt, c.txt and d.txt.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.CharArrayWriter;  \nimport java.io.FileWriter;  \npublic class CharArrayWriterExample {  \npublic static void main(String args&#91;])throws Exception{    \n          CharArrayWriter out=new CharArrayWriter();    \n          out.write(\"Welcome to codemeals\");    \n          FileWriter f1=new FileWriter(\"D:\\\\a.txt\");    \n          FileWriter f2=new FileWriter(\"D:\\\\b.txt\");    \n          FileWriter f3=new FileWriter(\"D:\\\\c.txt\");    \n          FileWriter f4=new FileWriter(\"D:\\\\d.txt\");    \n          out.writeTo(f1);    \n          out.writeTo(f2);    \n          out.writeTo(f3);    \n          out.writeTo(f4);    \n          f1.close();    \n          f2.close();    \n          f3.close();    \n          f4.close();    \n          System.out.println(\"Success...\");    \n         }    \n        }    <\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Success...\n<\/code><\/pre>\n\n\n\n<p>After executing the program, you can see that all files have common data: Welcome to codemeals.<\/p>\n\n\n\n<p>a.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals\n<\/code><\/pre>\n\n\n\n<p>b.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals\n<\/code><\/pre>\n\n\n\n<p>c.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals\n<\/code><\/pre>\n\n\n\n<p>d.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to codemeals<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The CharArrayWriter class can be used to write common data to multiple files. This class inherits&nbsp;Writer&nbsp;class. Its buffer automatically grows when data is written in this stream. Calling the close() method on this&nbsp;object&nbsp;has no effect. Java CharArrayWriter class declaration Let&#8217;s see the declaration for Java.io.CharArrayWriter class: public&nbsp;class&nbsp;CharArrayWriter&nbsp;extends&nbsp;Writer&nbsp;&nbsp; Java CharArrayWriter class Methods Method Description int size() [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/649"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=649"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/649\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 857,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/649\/revisions\/857"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=649"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=649"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=649"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 682,
        "date": "2020-06-26T11:06:13",
        "date_gmt": "2020-06-26T11:06:13",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=682"
        },
        "modified": "2020-07-13T17:40:31",
        "modified_gmt": "2020-07-13T17:40:31",
        "slug": "printstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/printstream\/",
        "title": {
            "rendered": "PrintStream"
        },
        "content": {
            "rendered": "\n<p>The PrintStream class provides methods to write data to another stream. The PrintStream&nbsp;class&nbsp;automatically flushes the data so there is no need to call flush() method. Moreover, its methods don&#8217;t throw IOException.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.PrintStream class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PrintStream extends FilterOutputStream implements Closeable. Appendable   <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Methods of PrintStream class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void print(boolean b)<\/td><td>It prints the specified boolean value.<\/td><\/tr><tr><td>void print(char c)<\/td><td>It prints the specified char value.<\/td><\/tr><tr><td>void print(char[] c)<\/td><td>It prints the specified character&nbsp;array&nbsp;values.<\/td><\/tr><tr><td>void print(int i)<\/td><td>It prints the specified int value.<\/td><\/tr><tr><td>void print(long l)<\/td><td>It prints the specified long value.<\/td><\/tr><tr><td>void print(float f)<\/td><td>It prints the specified float value.<\/td><\/tr><tr><td>void print(double d)<\/td><td>It prints the specified double value.<\/td><\/tr><tr><td>void print(String s)<\/td><td>It prints the specified&nbsp;string&nbsp;value.<\/td><\/tr><tr><td>void print(Object obj)<\/td><td>It prints the specified object value.<\/td><\/tr><tr><td>void println(boolean b)<\/td><td>It prints the specified boolean value and terminates the line.<\/td><\/tr><tr><td>void println(char c)<\/td><td>It prints the specified char value and terminates the line.<\/td><\/tr><tr><td>void println(char[] c)<\/td><td>It prints the specified character array values and terminates the line.<\/td><\/tr><tr><td>void println(int i)<\/td><td>It prints the specified int value and terminates the line.<\/td><\/tr><tr><td>void println(long l)<\/td><td>It prints the specified long value and terminates the line.<\/td><\/tr><tr><td>void println(float f)<\/td><td>It prints the specified float value and terminates the line.<\/td><\/tr><tr><td>void println(double d)<\/td><td>It prints the specified double value and terminates the line.<\/td><\/tr><tr><td>void println(String s)<\/td><td>It prints the specified string value and terminates the line.<\/td><\/tr><tr><td>void println(Object obj)<\/td><td>It prints the specified object value and terminates the line.<\/td><\/tr><tr><td>void println()<\/td><td>It terminates the line only.<\/td><\/tr><tr><td>void printf(Object format, Object&#8230; args)<\/td><td>It writes the formatted string to the current stream.<\/td><\/tr><tr><td>void printf(Locale l, Object format, Object&#8230; args)<\/td><td>It writes the formatted string to the current stream.<\/td><\/tr><tr><td>void format(Object format, Object&#8230; args)<\/td><td>It writes the formatted string to the current stream using specified format.<\/td><\/tr><tr><td>void format(Locale l, Object format, Object&#8230; args)<\/td><td>It writes the formatted string to the current stream using specified format.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Example of java PrintStream class<\/h2>\n\n\n\n<p>In this example, we are simply printing integer and string value.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.FileOutputStream;  \nimport java.io.PrintStream;  \npublic class PrintStreamTest{    \n public static void main(String args&#91;])throws Exception{    \n   FileOutputStream fout=new FileOutputStream(\"D:\\\\testout.txt \");    \n   PrintStream pout=new PrintStream(fout);    \n   pout.println(2016);    \n   pout.println(\"Hello Java\");    \n   pout.println(\"Welcome to Java\");    \n   pout.close();    \n   fout.close();    \n  System.out.println(\"Success?\");    \n }    \n}    \n <\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Success...\n<\/code><\/pre>\n\n\n\n<p>The content of a text file&nbsp;<strong>testout.txt<\/strong>&nbsp;is set with the below data<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>2016\nHello Java\nWelcome to Java<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example of printf() method using java PrintStream class:<\/h2>\n\n\n\n<p>Let&#8217;s see the simple example of printing integer value by format specifier using&nbsp;<strong>printf()<\/strong>&nbsp;method of&nbsp;<strong>java.io.PrintStream<\/strong>&nbsp;class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class PrintStreamTest{    \n public static void main(String args&#91;]){    \n   int a=19;    \n   System.out.printf(\"%d\",a); \/\/Note: out is the object of printstream       \n }    \n}<\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>19<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The PrintStream class provides methods to write data to another stream. The PrintStream&nbsp;class&nbsp;automatically flushes the data so there is no need to call flush() method. Moreover, its methods don&#8217;t throw IOException. Class declaration Let&#8217;s see the declaration for Java.io.PrintStream class: Methods of PrintStream class Method Description void print(boolean b) It prints the specified boolean value. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/682"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=682"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/682\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 858,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/682\/revisions\/858"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=682"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=682"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=682"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 685,
        "date": "2020-06-26T11:08:38",
        "date_gmt": "2020-06-26T11:08:38",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=685"
        },
        "modified": "2020-07-13T17:40:56",
        "modified_gmt": "2020-07-13T17:40:56",
        "slug": "printwriter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/printwriter\/",
        "title": {
            "rendered": "PrintWriter"
        },
        "content": {
            "rendered": "\n<p>Java PrintWriter class is the implementation of&nbsp;Writer&nbsp;class. It is used to print the formatted representation of&nbsp;objects&nbsp;to the text-output stream.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.PrintWriter class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PrintWriter extends Writer  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Methods of PrintWriter class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void println(boolean x)<\/td><td>It is used to print the boolean value.<\/td><\/tr><tr><td>void println(char[] x)<\/td><td>It is used to print an&nbsp;array&nbsp;of characters.<\/td><\/tr><tr><td>void println(int x)<\/td><td>It is used to print an integer.<\/td><\/tr><tr><td>PrintWriter append(char c)<\/td><td>It is used to append the specified character to the writer.<\/td><\/tr><tr><td>PrintWriter append(CharSequence ch)<\/td><td>It is used to append the specified character sequence to the writer.<\/td><\/tr><tr><td>PrintWriter append(CharSequence ch, int start, int end)<\/td><td>It is used to append a subsequence of specified character to the writer.<\/td><\/tr><tr><td>boolean checkError()<\/td><td>It is used to flushes the stream and check its error state.<\/td><\/tr><tr><td>protected void setError()<\/td><td>It is used to indicate that an error occurs.<\/td><\/tr><tr><td>protected void clearError()<\/td><td>It is used to clear the error state of a stream.<\/td><\/tr><tr><td>PrintWriter format(String format, Object&#8230; args)<\/td><td>It is used to write a formatted&nbsp;string&nbsp;to the writer using specified arguments and format string.<\/td><\/tr><tr><td>void print(Object obj)<\/td><td>It is used to print an object.<\/td><\/tr><tr><td>void flush()<\/td><td>It is used to flushes the stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java PrintWriter Example<\/h2>\n\n\n\n<p>Let&#8217;s see the simple example of writing the data on a&nbsp;<strong>console<\/strong>&nbsp;and in a&nbsp;<strong>text file testout.txt<\/strong>&nbsp;using Java PrintWriter class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;  \n  \nimport java.io.File;  \nimport java.io.PrintWriter;  \npublic class PrintWriterExample {  \n    public static void main(String&#91;] args) throws Exception {  \n             \/\/Data to write on Console using PrintWriter  \n      PrintWriter writer = new PrintWriter(System.out);    \n      writer.write(\"codemeals provides tutorials of all technology.\");        \n writer.flush();  \n      writer.close();  \n\/\/Data to write in File using PrintWriter       \n      PrintWriter writer1 =null;      \n         writer1 = new PrintWriter(new File(\"D:\\\\testout.txt\"));  \n         writer1.write(\"Like Java, Spring, Hibernate, Android, PHP etc.\");                                                   \n                         writer1.flush();  \n         writer1.close();  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Outpt<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals provides tutorials of all technology.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java PrintWriter class is the implementation of&nbsp;Writer&nbsp;class. It is used to print the formatted representation of&nbsp;objects&nbsp;to the text-output stream. Class declaration Let&#8217;s see the declaration for Java.io.PrintWriter class: Methods of PrintWriter class Method Description void println(boolean x) It is used to print the boolean value. void println(char[] x) It is used to print an&nbsp;array&nbsp;of characters. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/685"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=685"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/685\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 859,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/685\/revisions\/859"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=685"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=685"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=685"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 686,
        "date": "2020-06-26T11:09:56",
        "date_gmt": "2020-06-26T11:09:56",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=686"
        },
        "modified": "2020-06-26T11:09:56",
        "modified_gmt": "2020-06-26T11:09:56",
        "slug": "outputstreamwriter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/outputstreamwriter\/",
        "title": {
            "rendered": "OutputStreamWriter"
        },
        "content": {
            "rendered": "\n<p>OutputStreamWriter is a\u00a0class\u00a0which is used to convert character stream to byte stream, the characters are encoded into byte using a specified charset. write() method calls the encoding converter which converts the character into bytes. The resulting bytes are then accumulated in a buffer before being written into the underlying output stream. The characters passed to write() methods are not buffered. We optimize the performance of OutputStreamWriter by using it with in a BufferedWriter so that to avoid frequent converter invocation.<\/p>\n\n\n\n<h3>Constructor<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>OutputStreamWriter(OutputStream out)<\/td><td>It creates an OutputStreamWriter that uses the default character encoding.<\/td><\/tr><tr><td>OutputStreamWriter(OutputStream out, Charset cs)<\/td><td>It creates an OutputStreamWriter that uses the given charset.<\/td><\/tr><tr><td>OutputStreamWriter(OutputStream out, CharsetEncoder enc)<\/td><td>It creates an OutputStreamWriter that uses the given charset encoder.<\/td><\/tr><tr><td>OutputStreamWriter(OutputStream out, String charsetName)<\/td><td>It creates an OutputStreamWriter that uses the named charset.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void<\/td><td>close()<\/td><td>It closes the stream, flushing it first.<\/td><\/tr><tr><td>void<\/td><td>flush()<\/td><td>It flushes the stream.<\/td><\/tr><tr><td>String<\/td><td>getEncoding()<\/td><td>It returns the name of the character encoding being used by this stream.<\/td><\/tr><tr><td>void<\/td><td>write(char[] cbuf, int off, int len)<\/td><td>It writes a portion of an\u00a0array\u00a0of characters.<\/td><\/tr><tr><td>void<\/td><td>write(int c)<\/td><td>It writes a single character.<\/td><\/tr><tr><td>void<\/td><td>write(String str, int off, int len)<\/td><td>It writes a portion of a\u00a0string.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class OutputStreamWriterExample {  \n    public static void main(String&#91;] args) {  \n  \n        try {  \n            OutputStream outputStream = new FileOutputStream(\"output.txt\");  \n            Writer outputStreamWriter = new OutputStreamWriter(outputStream);  \n  \n            outputStreamWriter.write(\"Hello World\");  \n  \n            outputStreamWriter.close();  \n        } catch (Exception e) {  \n            e.getMessage();  \n        }  \n    }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>output.txt file will contains text  \"Hello World\"<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>OutputStreamWriter is a\u00a0class\u00a0which is used to convert character stream to byte stream, the characters are encoded into byte using a specified charset. write() method calls the encoding converter which converts the character into bytes. The resulting bytes are then accumulated in a buffer before being written into the underlying output stream. The characters passed to [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/686"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=686"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/686\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 689,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/686\/revisions\/689"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=686"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=686"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=686"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 683,
        "date": "2020-06-26T11:11:07",
        "date_gmt": "2020-06-26T11:11:07",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=683"
        },
        "modified": "2020-06-26T11:11:07",
        "modified_gmt": "2020-06-26T11:11:07",
        "slug": "inputstreamreader",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/inputstreamreader\/",
        "title": {
            "rendered": "InputStreamReader"
        },
        "content": {
            "rendered": "\n<p>An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset. The charset that it uses may be specified by name or may be given explicitly, or the platform&#8217;s default charset may be accepted.<\/p>\n\n\n\n<h3>Constructor<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor name<\/th><th>Description<\/th><\/tr><tr><td>InputStreamReader(InputStream in)<\/td><td>It creates an InputStreamReader that uses the default charset.<\/td><\/tr><tr><td>InputStreamReader(InputStream in, Charset cs)<\/td><td>It creates an InputStreamReader that uses the given charset.<\/td><\/tr><tr><td>InputStreamReader(InputStream in, CharsetDecoder dec)<\/td><td>It creates an InputStreamReader that uses the given charset decoder.<\/td><\/tr><tr><td>InputStreamReader(InputStream in, String charsetName)<\/td><td>It creates an InputStreamReader that uses the named charset.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Method<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void<\/td><td>close()<\/td><td>It closes the stream and releases any system resources associated with it.<\/td><\/tr><tr><td>String<\/td><td>getEncoding()<\/td><td>It returns the name of the character encoding being used by this stream.<\/td><\/tr><tr><td>int<\/td><td>read()<\/td><td>It reads a single character.<\/td><\/tr><tr><td>int<\/td><td>read(char[] cbuf, int offset, int length)<\/td><td>It reads characters into a portion of an\u00a0array.<\/td><\/tr><tr><td>boolean<\/td><td>ready()<\/td><td>It tells whether this stream is ready to be read.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class InputStreamReaderExample {  \n    public static void main(String&#91;] args) {  \n        try  {  \n            InputStream stream = new FileInputStream(\"file.txt\");  \n            Reader reader = new InputStreamReader(stream);  \n            int data = reader.read();  \n            while (data != -1) {  \n                System.out.print((char) data);  \n                data = reader.read();  \n            }  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>I love my country\n\nThe file.txt contains text \"I love my country\" the InputStreamReader \nreads Character by character from the file<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset. The charset that it uses may be specified by name or may be given explicitly, or the platform&#8217;s default charset may be accepted. Constructor Constructor name Description InputStreamReader(InputStream in) It creates an [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/683"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=683"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/683\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 690,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/683\/revisions\/690"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=683"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=683"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=683"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 681,
        "date": "2020-06-26T11:12:35",
        "date_gmt": "2020-06-26T11:12:35",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=681"
        },
        "modified": "2020-06-26T11:12:35",
        "modified_gmt": "2020-06-26T11:12:35",
        "slug": "pushbackinputstream",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/pushbackinputstream\/",
        "title": {
            "rendered": "PushbackInputStream"
        },
        "content": {
            "rendered": "\n<p>Java PushbackInputStream\u00a0class\u00a0overrides InputStream and provides extra functionality to another input stream. It can unread a byte which is already read and push back one byte.<\/p>\n\n\n\n<h3>Class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.io.PushbackInputStream class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PushbackInputStream extends FilterInputStream  <\/code><\/pre>\n\n\n\n<h3>Class Methods<\/h3>\n\n\n\n<p>It is used to test if the input stream support mark and reset method.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int available()<\/td><td>It is used to return the number of bytes that can be read from the input stream.<\/td><\/tr><tr><td>int read()<\/td><td>It is used to read the next byte of data from the input stream.<\/td><\/tr><tr><td>boolean markSupported()<\/td><td><\/td><\/tr><tr><td>void mark(int readlimit)<\/td><td>It is used to mark the current position in the input stream.<\/td><\/tr><tr><td>long skip(long x)<\/td><td>It is used to skip over and discard x bytes of data.<\/td><\/tr><tr><td>void unread(int b)<\/td><td>It is used to pushes back the byte by copying it to the pushback buffer.<\/td><\/tr><tr><td>void unread(byte[] b)<\/td><td>It is used to pushes back the\u00a0array\u00a0of byte by copying it to the pushback buffer.<\/td><\/tr><tr><td>void reset()<\/td><td>It is used to reset the input stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the input stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>Example of PushbackInputStream class<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \npublic class InputStreamExample {  \npublic static void main(String&#91;] args)throws Exception{  \n          String srg = \"1##2#34###12\";  \n          byte ary&#91;] = srg.getBytes();  \n          ByteArrayInputStream array = new ByteArrayInputStream(ary);  \n          PushbackInputStream push = new PushbackInputStream(array);  \n          int i;        \n              while( (i = push.read())!= -1) {  \n                  if(i == '#') {  \n                      int j;  \n                      if( (j = push.read()) == '#'){  \n                           System.out.print(\"**\");  \n                      }else {  \n                          push.unread(j);  \n                          System.out.print((char)i);  \n                      }  \n                  }else {  \n                              System.out.print((char)i);  \n                  }  \n             }        \n  }   \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>1**2#34**#12  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java PushbackInputStream\u00a0class\u00a0overrides InputStream and provides extra functionality to another input stream. It can unread a byte which is already read and push back one byte. Class declaration Let&#8217;s see the declaration for java.io.PushbackInputStream class: Class Methods It is used to test if the input stream support mark and reset method. Method Description int available() It [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/681"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=681"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/681\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 691,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/681\/revisions\/691"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=681"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=681"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=681"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 684,
        "date": "2020-06-26T11:14:03",
        "date_gmt": "2020-06-26T11:14:03",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=684"
        },
        "modified": "2020-06-26T11:14:03",
        "modified_gmt": "2020-06-26T11:14:03",
        "slug": "pushbackreader",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/pushbackreader\/",
        "title": {
            "rendered": "PushbackReader"
        },
        "content": {
            "rendered": "\n<p>Java\u00a0PushbackReader\u00a0class\u00a0is a character\u00a0stream\u00a0reader. It is used to pushes back a character into stream and\u00a0overrides\u00a0the\u00a0FilterReader\u00a0class.<\/p>\n\n\n\n<h3>Class declaration<\/h3>\n\n\n\n<p>Let&#8217; s see the declaration for java.io.PushbackReader class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class PushbackReader extends FilterReader  <\/code><\/pre>\n\n\n\n<h3>Class Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int read()<\/td><td>It is used to read a single character.<\/td><\/tr><tr><td>void mark(int readAheadLimit)<\/td><td>It is used to mark the present position in a stream.<\/td><\/tr><tr><td>boolean ready()<\/td><td>It is used to tell whether the stream is ready to be read.<\/td><\/tr><tr><td>boolean markSupported()<\/td><td>It is used to tell whether the stream supports mark() operation.<\/td><\/tr><tr><td>long skip(long n)<\/td><td>It is used to skip the character.<\/td><\/tr><tr><td>void unread (int c)<\/td><td>It is used to pushes back the character by copying it to the pushback buffer.<\/td><\/tr><tr><td>void unread (char[] cbuf)<\/td><td>It is used to pushes back an array of character by copying it to the pushback buffer.<\/td><\/tr><tr><td>void reset()<\/td><td>It is used to reset the stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h3>Example of PushbackReader class<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \npublic class ReaderExample{  \n    public static void main(String&#91;] args) throws Exception {  \n        char ary&#91;] = {'1','-','-','2','-','3','4','-','-','-','5','6'};  \n        CharArrayReader reader = new CharArrayReader(ary);   \n        PushbackReader push = new PushbackReader(reader);  \n        int i;  \n            while( (i = push.read())!= -1) {  \n                if(i == '-') {  \n                    int j;  \n                    if( (j = push.read()) == '-'){  \n                         System.out.print(\"#*\");  \n                    }else {  \n                        push.unread(j); \/\/ push back single character  \n                        System.out.print((char)i);  \n                    }  \n                }else {  \n                        System.out.print((char)i);  \n                }  \n           }         \n    }  \n} <\/code><\/pre>\n\n\n\n<p>Output<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>1#*2-34#*-56 <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java\u00a0PushbackReader\u00a0class\u00a0is a character\u00a0stream\u00a0reader. It is used to pushes back a character into stream and\u00a0overrides\u00a0the\u00a0FilterReader\u00a0class. Class declaration Let&#8217; s see the declaration for java.io.PushbackReader class: Class Methods Method Description int read() It is used to read a single character. void mark(int readAheadLimit) It is used to mark the present position in a stream. boolean ready() It [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/684"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=684"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/684\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 692,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/684\/revisions\/692"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=684"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=684"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=684"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 680,
        "date": "2020-06-26T11:15:53",
        "date_gmt": "2020-06-26T11:15:53",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=680"
        },
        "modified": "2020-07-13T17:41:41",
        "modified_gmt": "2020-07-13T17:41:41",
        "slug": "stringwriter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/stringwriter\/",
        "title": {
            "rendered": "StringWriter"
        },
        "content": {
            "rendered": "\n<p>Java StringWriter class is a character stream that collects output from string buffer, which can be used to construct a&nbsp;string. The StringWriter class inherits the&nbsp;Writer&nbsp;class.<\/p>\n\n\n\n<p>In StringWriter class, system resources like&nbsp;network&nbsp;sockets&nbsp;and&nbsp;files&nbsp;are not used, therefore closing the StringWriter is not necessary.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java StringWriter class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.StringWriter class:<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;StringWriter&nbsp;<strong>extends<\/strong>&nbsp;Writer&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Methods of StringWriter class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void write(int c)<\/td><td>It is used to write the single character.<\/td><\/tr><tr><td>void write(String str)<\/td><td>It is used to write the string.<\/td><\/tr><tr><td>void write(String str, int off, int len)<\/td><td>It is used to write the portion of a string.<\/td><\/tr><tr><td>void write(char[] cbuf, int off, int len)<\/td><td>It is used to write the portion of an&nbsp;array&nbsp;of characters.<\/td><\/tr><tr><td>String toString()<\/td><td>It is used to return the buffer current value as a string.<\/td><\/tr><tr><td>StringBuffer getBuffer()<\/td><td>It is used t return the string buffer.<\/td><\/tr><tr><td>StringWriter append(char c)<\/td><td>It is used to append the specified character to the writer.<\/td><\/tr><tr><td>StringWriter append(CharSequence csq)<\/td><td>It is used to append the specified character sequence to the writer.<\/td><\/tr><tr><td>StringWriter append(CharSequence csq, int start, int end)<\/td><td>It is used to append the subsequence of specified character sequence to the writer.<\/td><\/tr><tr><td>void flush()<\/td><td>It is used to flush the stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java StringWriter Example<\/h2>\n\n\n\n<p>Let&#8217;s see the simple example of StringWriter using BufferedReader to read file data from the stream.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \npublic class StringWriterExample {  \n    public static void main(String&#91;] args) throws IOException {  \n        char&#91;] ary = new char&#91;512];  \n        StringWriter writer = new StringWriter();  \n        FileInputStream input = null;  \n        BufferedReader buffer = null;  \n        input = new FileInputStream(\"D:\/\/testout.txt\");  \n        buffer = new BufferedReader(new InputStreamReader(input, \"UTF-8\"));  \n        int x;  \n        while ((x = buffer.read(ary)) != -1) {  \n                   writer.write(ary, 0, x);  \n        }  \n        System.out.println(writer.toString());        \n        writer.close();  \n        buffer.close();  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>testout.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals provides tutorial in Java, Spring, Hibernate, Android, PHP etc.<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals provides tutorial in Java, Spring, Hibernate, Android, PHP etc.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java StringWriter class is a character stream that collects output from string buffer, which can be used to construct a&nbsp;string. The StringWriter class inherits the&nbsp;Writer&nbsp;class. In StringWriter class, system resources like&nbsp;network&nbsp;sockets&nbsp;and&nbsp;files&nbsp;are not used, therefore closing the StringWriter is not necessary. Java StringWriter class declaration Let&#8217;s see the declaration for Java.io.StringWriter class: public&nbsp;class&nbsp;StringWriter&nbsp;extends&nbsp;Writer&nbsp;&nbsp; Methods of StringWriter [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/680"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=680"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/680\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 860,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/680\/revisions\/860"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=680"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=680"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=680"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 679,
        "date": "2020-06-26T11:17:18",
        "date_gmt": "2020-06-26T11:17:18",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=679"
        },
        "modified": "2020-07-13T17:42:27",
        "modified_gmt": "2020-07-13T17:42:27",
        "slug": "stringreader",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/stringreader\/",
        "title": {
            "rendered": "StringReader"
        },
        "content": {
            "rendered": "\n<p>Java&nbsp;StringReader&nbsp;class&nbsp;is a character&nbsp;stream&nbsp;with&nbsp;string&nbsp;as a source. It takes an input string and changes it into character stream. It inherits&nbsp;Reader class.<\/p>\n\n\n\n<p>In StringReader class, system resources like network sockets and files are not used, therefore closing the StringReader is not necessary.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java StringReader class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for Java.io.StringReader class:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class StringReader extends Reader  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Methods of StringReader class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>int read()<\/td><td>It is used to read a single character.<\/td><\/tr><tr><td>int read(char[] cbuf, int off, int len)<\/td><td>It is used to read a character into a portion of an&nbsp;array.<\/td><\/tr><tr><td>boolean ready()<\/td><td>It is used to tell whether the stream is ready to be read.<\/td><\/tr><tr><td>boolean markSupported()<\/td><td>It is used to tell whether the stream support mark() operation.<\/td><\/tr><tr><td>long skip(long ns)<\/td><td>It is used to skip the specified number of character in a stream<\/td><\/tr><tr><td>void mark(int readAheadLimit)<\/td><td>It is used to mark the mark the present position in a stream.<\/td><\/tr><tr><td>void reset()<\/td><td>It is used to reset the stream.<\/td><\/tr><tr><td>void close()<\/td><td>It is used to close the stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><ins><ins><\/ins><\/ins><\/p>\n\n\n\n<h2>Java StringReader Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.StringReader;  \npublic class StringReaderExample {  \n    public static void main(String&#91;] args) throws Exception {  \n        String srg = \"Hello Java!! \\nWelcome to codemeals.\";  \n        StringReader reader = new StringReader(srg);  \n        int k=0;  \n            while((k=reader.read())!=-1){  \n                System.out.print((char)k);  \n            }  \n        }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello Java!! \nWelcome to codemeals.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java&nbsp;StringReader&nbsp;class&nbsp;is a character&nbsp;stream&nbsp;with&nbsp;string&nbsp;as a source. It takes an input string and changes it into character stream. It inherits&nbsp;Reader class. In StringReader class, system resources like network sockets and files are not used, therefore closing the StringReader is not necessary. Java StringReader class declaration Let&#8217;s see the declaration for Java.io.StringReader class: Methods of StringReader class Method [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/679"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=679"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/679\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 861,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/679\/revisions\/861"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=679"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=679"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=679"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 678,
        "date": "2020-06-26T11:18:29",
        "date_gmt": "2020-06-26T11:18:29",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=678"
        },
        "modified": "2020-07-16T10:09:15",
        "modified_gmt": "2020-07-16T10:09:15",
        "slug": "pipedwriter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/pipedwriter\/",
        "title": {
            "rendered": "PipedWriter"
        },
        "content": {
            "rendered": "\n<p>The PipedWriter class is used to write&nbsp;java&nbsp;pipe as a stream of characters. This class is used generally for writing text. Generally PipedWriter is connected to a&nbsp;PipedReader&nbsp;and used by different&nbsp;threads.<\/p>\n\n\n\n<h3>Constructor<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>PipedWriter()<\/td><td>It creates a piped writer that is not yet connected to a piped reader.<\/td><\/tr><tr><td>PipedWriter(PipedReader snk)<\/td><td>It creates a piped writer connected to the specified piped reader.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Method<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Method<\/th><\/tr><tr><td>void<\/td><td>close()<\/td><td>It closes this piped output stream and releases any system resources associated with this stream.<\/td><\/tr><tr><td>void<\/td><td>connect(PipedReader snk)<\/td><td>It connects this piped writer to a receiver.<\/td><\/tr><tr><td>void<\/td><td>flush()<\/td><td>It flushes this output stream and forces any buffered output characters to be written out.<\/td><\/tr><tr><td>void<\/td><td>write(char[] cbuf, int off, int len)<\/td><td>It writes len characters from the specified character\u00a0array\u00a0starting at offset off to this piped output stream.<\/td><\/tr><tr><td>void<\/td><td>write(int c)<\/td><td>It writes the specified char to the piped output stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.PipedReader;  \nimport java.io.PipedWriter;  \n  \npublic class PipeReaderExample2 {  \n    public static void main(String&#91;] args) {  \n        try {  \n  \n            final PipedReader read = new PipedReader();  \n            final PipedWriter write = new PipedWriter(read);  \n  \n            Thread readerThread = new Thread(new Runnable() {  \n                public void run() {  \n                    try {  \n                        int data = read.read();  \n                        while (data != -1) {  \n                            System.out.print((char) data);  \n                            data = read.read();  \n                        }  \n                    } catch (Exception ex) {  \n                    }  \n                }  \n            });  \n  \n            Thread writerThread = new Thread(new Runnable() {  \n                public void run() {  \n                    try {  \n                        write.write(\"I love my country\\n\".toCharArray());  \n                    } catch (Exception ex) {  \n                    }  \n                }  \n            });  \n  \n            readerThread.start();  \n            writerThread.start();  \n  \n        } catch (Exception ex) {  \n            System.out.println(ex.getMessage());  \n        }  \n  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>I love my country<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The PipedWriter class is used to write&nbsp;java&nbsp;pipe as a stream of characters. This class is used generally for writing text. Generally PipedWriter is connected to a&nbsp;PipedReader&nbsp;and used by different&nbsp;threads. Constructor Constructor Description PipedWriter() It creates a piped writer that is not yet connected to a piped reader. PipedWriter(PipedReader snk) It creates a piped writer connected [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/678"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=678"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/678\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 898,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/678\/revisions\/898"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=678"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=678"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=678"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 677,
        "date": "2020-06-26T11:19:48",
        "date_gmt": "2020-06-26T11:19:48",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=677"
        },
        "modified": "2020-06-26T11:19:48",
        "modified_gmt": "2020-06-26T11:19:48",
        "slug": "pipedreader",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/pipedreader\/",
        "title": {
            "rendered": "PipedReader"
        },
        "content": {
            "rendered": "\n<p>The PipedReader class is used to read the contents of a pipe as a stream of characters. This\u00a0class\u00a0is used generally to read text.<\/p>\n\n\n\n<p>PipedReader class must be connected to the same\u00a0PipedWriter\u00a0and are used by different\u00a0threads.<\/p>\n\n\n\n<h3>Constructor<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>PipedReader(int pipeSize)<\/td><td>It creates a PipedReader so that it is not yet connected and uses the specified pipe size for the pipe&#8217;s buffer.<\/td><\/tr><tr><td>PipedReader(PipedWriter src)<\/td><td>It creates a PipedReader so that it is connected to the piped writer src.<\/td><\/tr><tr><td>PipedReader(PipedWriter src, int pipeSize)<\/td><td>It creates a PipedReader so that it is connected to the piped writer src and uses the specified pipe size for the pipe&#8217;s buffer.<\/td><\/tr><tr><td>PipedReader()<\/td><td>It creates a PipedReader so that it is not yet connected.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Method<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Method<\/th><\/tr><tr><td>void<\/td><td>close()<\/td><td>It closes this piped stream and releases any system resources associated with the stream.<\/td><\/tr><tr><td>void<\/td><td>connect(PipedWriter src)<\/td><td>It causes this piped reader to be connected to the piped writer src.<\/td><\/tr><tr><td>int<\/td><td>read()<\/td><td>It reads the next character of data from this piped stream.<\/td><\/tr><tr><td>int<\/td><td>read(char[] cbuf, int off, int len)<\/td><td>It reads up to len characters of data from this piped stream into an\u00a0array\u00a0of characters.<\/td><\/tr><tr><td>boolean<\/td><td>ready()<\/td><td>It tells whether this stream is ready to be read.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.PipedReader;  \nimport java.io.PipedWriter;  \n  \npublic class PipeReaderExample2 {  \n    public static void main(String&#91;] args) {  \n        try {  \n  \n            final PipedReader read = new PipedReader();  \n            final PipedWriter write = new PipedWriter(read);  \n  \n            Thread readerThread = new Thread(new Runnable() {  \n                public void run() {  \n                    try {  \n                        int data = read.read();  \n                        while (data != -1) {  \n                            System.out.print((char) data);  \n                            data = read.read();  \n                        }  \n                    } catch (Exception ex) {  \n                    }  \n                }  \n            });  \n  \n            Thread writerThread = new Thread(new Runnable() {  \n                public void run() {  \n                    try {  \n                        write.write(\"I love my country\\n\".toCharArray());  \n                    } catch (Exception ex) {  \n                    }  \n                }  \n            });  \n  \n            readerThread.start();  \n            writerThread.start();  \n  \n        } catch (Exception ex) {  \n            System.out.println(ex.getMessage());  \n        }  \n  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>I love my country<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The PipedReader class is used to read the contents of a pipe as a stream of characters. This\u00a0class\u00a0is used generally to read text. PipedReader class must be connected to the same\u00a0PipedWriter\u00a0and are used by different\u00a0threads. Constructor Constructor Description PipedReader(int pipeSize) It creates a PipedReader so that it is not yet connected and uses the specified [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/677"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=677"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/677\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 696,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/677\/revisions\/696"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=677"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=677"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=677"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 676,
        "date": "2020-06-26T11:21:54",
        "date_gmt": "2020-06-26T11:21:54",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=676"
        },
        "modified": "2020-06-26T11:21:54",
        "modified_gmt": "2020-06-26T11:21:54",
        "slug": "filterwriter",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filterwriter\/",
        "title": {
            "rendered": "FilterWriter"
        },
        "content": {
            "rendered": "\n<p>Java FilterWriter class is an abstract\u00a0class\u00a0which is used to write filtered character streams.<\/p>\n\n\n\n<p>The sub class of the FilterWriter should override some of its methods and it may provide additional methods and fields also.<\/p>\n\n\n\n<h3>Fields<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier<\/th><th>Type<\/th><th>Field<\/th><th>Description<\/th><\/tr><tr><td>protected<\/td><td>Writer<\/td><td>out<\/td><td>The underlying character-output stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Constructors<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier<\/th><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>protected<\/td><td>FilterWriter(Writer out)<\/td><td>It creates InputStream class Object<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void<\/td><td>close()<\/td><td>It closes the stream, flushing it first.<\/td><\/tr><tr><td>void<\/td><td>flush()<\/td><td>It flushes the stream.<\/td><\/tr><tr><td>void<\/td><td>write(char[] cbuf, int off, int len)<\/td><td>It writes a portion of an\u00a0array\u00a0of characters.<\/td><\/tr><tr><td>void<\/td><td>write(int c)<\/td><td>It writes a single character.<\/td><\/tr><tr><td>void<\/td><td>write(String str, int off, int len)<\/td><td>It writes a portion of a\u00a0string.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>FilterWriter Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \nclass CustomFilterWriter extends FilterWriter {  \n    CustomFilterWriter(Writer out) {  \n        super(out);  \n    }  \n    public void write(String str) throws IOException {  \n        super.write(str.toLowerCase());  \n    }  \n}  \npublic class FilterWriterExample {  \n    public static void main(String&#91;] args) {  \n        try {  \n            FileWriter fw = new FileWriter(\"Record.txt\");   \n            CustomFilterWriter filterWriter = new CustomFilterWriter(fw);             \n            filterWriter.write(\"I LOVE MY COUNTRY\");  \n            filterWriter.close();  \n            FileReader fr = new FileReader(\"record.txt\");  \n            BufferedReader bufferedReader = new BufferedReader(fr);  \n            int k;  \n            while ((k = bufferedReader.read()) != -1) {  \n                System.out.print((char) k);  \n            }  \n            bufferedReader.close();  \n        } catch (IOException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>i love my country<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java FilterWriter class is an abstract\u00a0class\u00a0which is used to write filtered character streams. The sub class of the FilterWriter should override some of its methods and it may provide additional methods and fields also. Fields Modifier Type Field Description protected Writer out The underlying character-output stream. Constructors Modifier Constructor Description protected FilterWriter(Writer out) It creates [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/676"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=676"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/676\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 697,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/676\/revisions\/697"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=676"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=676"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=676"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 707,
        "date": "2020-06-26T11:26:09",
        "date_gmt": "2020-06-26T11:26:09",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=707"
        },
        "modified": "2020-06-26T11:26:09",
        "modified_gmt": "2020-06-26T11:26:09",
        "slug": "filedescriptor",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filedescriptor\/",
        "title": {
            "rendered": "FileDescriptor"
        },
        "content": {
            "rendered": "\n<p>FileDescriptor class serves as an handle to the underlying machine-specific structure representing an open file, an open\u00a0socket, or another source or sink of bytes. The handle can be err, in or out.<\/p>\n\n\n\n<p>The FileDescriptor class is used to create a\u00a0FileInputStream\u00a0or\u00a0FileOutputStream\u00a0to contain it.<\/p>\n\n\n\n<h3>Field<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier<\/th><th>Type<\/th><th>Field<\/th><th>Description<\/th><\/tr><tr><td>static<\/td><td>FileDescriptor<\/td><td>err<\/td><td>A handle to the standard error stream.<\/td><\/tr><tr><td>static<\/td><td>FileDescriptor<\/td><td>in<\/td><td>A handle to the standard input stream.<\/td><\/tr><tr><td>static<\/td><td>FileDescriptor<\/td><td>out<\/td><td>A handle to the standard output stream.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Constructors<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>FileDescriptor()<\/td><td>Constructs an (invalid) FileDescriptor\u00a0object.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Method<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void<\/td><td>sync()<\/td><td>It force all system buffers to synchronize with the underlying device.<\/td><\/tr><tr><td>boolean<\/td><td>valid()<\/td><td>It tests if this file descriptor object is valid.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java FileDescriptor Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \npublic class FileDescriptorExample {  \n    public static void main(String&#91;] args) {  \n        FileDescriptor fd = null;  \n        byte&#91;] b = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 };  \n        try  {  \n            FileOutputStream fos = new FileOutputStream(\"Record.txt\");  \n            FileInputStream fis = new FileInputStream(\"Record.txt\");  \n            fd = fos.getFD();  \n            fos.write(b);  \n            fos.flush();  \n            fd.sync();\/\/ confirms data to be written to the disk  \n            int value = 0;  \n            \/\/ for every available bytes  \n            while ((value = fis.read()) != -1) {  \n                char c = (char) value;\/\/ converts bytes to char  \n                System.out.print(c);  \n            }  \n            System.out.println(\"\\nSync() successfully executed!!\");  \n        } catch (Exception e) {  \n            e.printStackTrace();  \n        }  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>0123456789:\nSync() successfully executed!!<\/code><\/pre>\n\n\n\n<p>Record.txt:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>0123456789:<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>FileDescriptor class serves as an handle to the underlying machine-specific structure representing an open file, an open\u00a0socket, or another source or sink of bytes. The handle can be err, in or out. The FileDescriptor class is used to create a\u00a0FileInputStream\u00a0or\u00a0FileOutputStream\u00a0to contain it. Field Modifier Type Field Description static FileDescriptor err A handle to the standard [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/707"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=707"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/707\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 708,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/707\/revisions\/708"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=707"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=707"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=707"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 706,
        "date": "2020-06-26T11:27:10",
        "date_gmt": "2020-06-26T11:27:10",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=706"
        },
        "modified": "2020-07-13T17:43:10",
        "modified_gmt": "2020-07-13T17:43:10",
        "slug": "randomaccessfile",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/randomaccessfile\/",
        "title": {
            "rendered": "RandomAccessFile"
        },
        "content": {
            "rendered": "\n<p>This&nbsp;class&nbsp;is used for reading and writing to random access file. A random access file behaves like a large&nbsp;array&nbsp;of bytes. There is a cursor implied to the array called file&nbsp;pointer, by moving the cursor we do the read write operations. If end-of-file is reached before the desired number of byte has been read than EOFException is&nbsp;thrown. It is a type of IOException.<\/p>\n\n\n\n<h3>Constructor<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>RandomAccessFile(File file,&nbsp;Stringmode)<\/td><td>Creates a random access file stream to read from, and optionally to write to, the file specified by the File argument.<\/td><\/tr><tr><td>RandomAccessFile(String name, String mode)<\/td><td>Creates a random access file stream to read from, and optionally to write to, a file with the specified name.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Method<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier and Type<\/th><th>Method<\/th><th>Method<\/th><\/tr><tr><td>void<\/td><td>close()<\/td><td>It closes this random access file stream and releases any system resources associated with the stream.<\/td><\/tr><tr><td>FileChannel<\/td><td>getChannel()<\/td><td>It returns the unique&nbsp;FileChannel&nbsp;object associated with this file.<\/td><\/tr><tr><td>int<\/td><td>readInt()<\/td><td>It reads a signed 32-bit integer from this file.<\/td><\/tr><tr><td>String<\/td><td>readUTF()<\/td><td>It reads in a string from this file.<\/td><\/tr><tr><td>void<\/td><td>seek(long pos)<\/td><td>It sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.<\/td><\/tr><tr><td>void<\/td><td>writeDouble(double v)<\/td><td>It converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first.<\/td><\/tr><tr><td>void<\/td><td>writeFloat(float v)<\/td><td>It converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first.<\/td><\/tr><tr><td>void<\/td><td>write(int b)<\/td><td>It writes the specified byte to this file.<\/td><\/tr><tr><td>int<\/td><td>read()<\/td><td>It reads a byte of data from this file.<\/td><\/tr><tr><td>long<\/td><td>length()<\/td><td>It returns the length of this file.<\/td><\/tr><tr><td>void<\/td><td>seek(long pos)<\/td><td>It sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.IOException;  \nimport java.io.RandomAccessFile;  \n  \npublic class RandomAccessFileExample {  \n    static final String FILEPATH =\"myFile.TXT\";  \n    public static void main(String&#91;] args) {  \n        try {  \n            System.out.println(new String(readFromFile(FILEPATH, 0, 18)));  \n            writeToFile(FILEPATH, \"I love my country and my people\", 31);  \n        } catch (IOException e) {  \n            e.printStackTrace();  \n        }  \n    }  \n    private static byte&#91;] readFromFile(String filePath, int position, int size)  \n            throws IOException {  \n        RandomAccessFile file = new RandomAccessFile(filePath, \"r\");  \n        file.seek(position);  \n        byte&#91;] bytes = new byte&#91;size];  \n        file.read(bytes);  \n        file.close();  \n        return bytes;  \n    }  \n    private static void writeToFile(String filePath, String data, int position)  \n            throws IOException {  \n        RandomAccessFile file = new RandomAccessFile(filePath, \"rw\");  \n        file.seek(position);  \n        file.write(data.getBytes());  \n        file.close();  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>The myFile.TXT contains text &#8220;This class is used for reading and writing to random access file.&#8221;<\/p>\n\n\n\n<p>after running the program it will contains<\/p>\n\n\n\n<p>This class is used for reading I love my country and my peoplele.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This&nbsp;class&nbsp;is used for reading and writing to random access file. A random access file behaves like a large&nbsp;array&nbsp;of bytes. There is a cursor implied to the array called file&nbsp;pointer, by moving the cursor we do the read write operations. If end-of-file is reached before the desired number of byte has been read than EOFException is&nbsp;thrown. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            12
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/706"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=706"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/706\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 862,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/706\/revisions\/862"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=706"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=706"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=706"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]