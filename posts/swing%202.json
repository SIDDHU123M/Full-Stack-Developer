[
    {
        "id": 1703,
        "date": "2021-03-15T07:51:27",
        "date_gmt": "2021-03-15T07:51:27",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1703"
        },
        "modified": "2021-03-15T07:51:27",
        "modified_gmt": "2021-03-15T07:51:27",
        "slug": "overview-15",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-15\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>Swing API is a set of extensible GUI Components to ease the developer&#8217;s life to create JAVA based Front End\/GUI Applications. It is build on top of AWT API and acts as a replacement of AWT API, since it has almost every control corresponding to AWT controls. Swing component follows a Model-View-Controller architecture to fulfill the following criterias.<\/p>\n\n\n\n<ul><li>A single API is to be sufficient to support multiple look and feel.<\/li><li>API is to be model driven so that the highest level API is not required to have data.<\/li><li>API is to use the Java Bean model so that Builder Tools and IDE can provide better services to the developers for use.<\/li><\/ul>\n\n\n\n<h2>MVC Architecture<\/h2>\n\n\n\n<p>Swing API architecture follows loosely based MVC architecture in the following manner.<\/p>\n\n\n\n<ul><li>Model represents component&#8217;s data.<\/li><li>View represents visual representation of the component&#8217;s data.<\/li><li>Controller takes the input from the user on the view and reflects the changes in Component&#8217;s data.<\/li><li>Swing component has Model as a seperate element, while the View and Controller part are clubbed in the User Interface elements. Because of which, Swing has a pluggable look-and-feel architecture.<\/li><\/ul>\n\n\n\n<h2>Swing Features<\/h2>\n\n\n\n<ul><li><strong>Light Weight<\/strong>\u00a0\u2212 Swing components are independent of the native Operating System&#8217;s API as Swing API controls are rendered mostly using pure JAVA code instead of underlying operating system calls.<\/li><li>Rich Controls\u00a0\u2212 Swing provides a rich set of advanced controls like Tree, TabbedPane, slider, color picker, and table controls.<\/li><li>Highly Customizable\u00a0\u2212 Swing controls can be customized in a very easy way as visual appearance is independent of internal representation.<\/li><li>Pluggable look-and-feel\u00a0\u2212 Swing-based GUI Application look and feel can be changed at run-time, based on available values.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Swing API is a set of extensible GUI Components to ease the developer&#8217;s life to create JAVA based Front End\/GUI Applications. It is build on top of AWT API and acts as a replacement of AWT API, since it has almost every control corresponding to AWT controls. Swing component follows a Model-View-Controller architecture to fulfill [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1703"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1703"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1703\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1704,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1703\/revisions\/1704"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1703"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1703"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1703"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1705,
        "date": "2021-03-15T07:53:40",
        "date_gmt": "2021-03-15T07:53:40",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1705"
        },
        "modified": "2021-03-15T07:53:40",
        "modified_gmt": "2021-03-15T07:53:40",
        "slug": "environment-setup-11",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-11\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<p>This section guides you on how to download and set up Java on your machine. Please use the following steps to set up the environment.<\/p>\n\n\n\n<p>Java SE is freely available from the link\u00a0Download Java. Hence, you can download a version based on your operating system.<\/p>\n\n\n\n<p>Follow the instructions to download Java and run the&nbsp;<strong>.exe<\/strong>&nbsp;to install Java on your machine. Once you have installed Java on your machine, you would need to set the environment variables to point to the correct installation directories.<\/p>\n\n\n\n<h2>Setting Up the Path for Windows 2000\/XP<\/h2>\n\n\n\n<p>Assuming you have installed Java in&nbsp;<strong>c:\\Program Files\\java\\jdk<\/strong>&nbsp;directory \u2212<\/p>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Right-click on &#8216;My Computer&#8217; and select &#8216;Properties&#8217;.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Click the &#8216;Environment variables&#8217; button under the &#8216;Advanced&#8217; tab.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212 Alter the &#8216;Path&#8217; variable so that it also contains the path to the Java executable. Example, if the path is currently set to&nbsp;<strong>&#8216;C:\\WINDOWS\\SYSTEM32&#8217;<\/strong>, then change your path to read&nbsp;<strong>&#8216;C:\\WINDOWS\\SYSTEM32;c:\\Program Files\\java\\jdk\\bin&#8217;<\/strong>.<\/p>\n\n\n\n<h2>Setting Up the Path for Windows 95\/98\/ME<\/h2>\n\n\n\n<p>Assuming you have installed Java in&nbsp;<strong>c:\\Program Files\\java\\jdk<\/strong>&nbsp;directory \u2212<\/p>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Edit the&nbsp;<strong>&#8216;C:\\autoexec.bat&#8217;<\/strong>&nbsp;file and add the following line at the end:&nbsp;<strong>&#8216;SET PATH=%PATH%;C:\\Program Files\\java\\jdk\\bin&#8217;<\/strong>.<\/p>\n\n\n\n<h2>Setting Up the Path for Linux, UNIX, Solaris, FreeBSD<\/h2>\n\n\n\n<p>Environment variable PATH should be set to point to where the Java binaries have been installed. Refer to your Shell documentation if you have trouble doing this.<\/p>\n\n\n\n<p>Example, if you use&nbsp;<strong><em>bash<\/em><\/strong>&nbsp;as your shell, then you would add the following line to the end&nbsp;<strong>&#8216;.bashrc: export PATH=\/path\/to\/java:$PATH&#8217;<\/strong>.<\/p>\n\n\n\n<h2>Popular Java Editors<\/h2>\n\n\n\n<p>To write your Java programs, you will need a text editor. There are even more sophisticated IDE available in the market. But for now, you can consider one of the following \u2212<\/p>\n\n\n\n<ul><li><strong>Notepad<\/strong>\u00a0\u2212 On a Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad.<\/li><li>Netbeans\u00a0\u2212 Netbeans is a Java IDE that is open-source and free, which can be downloaded from\u00a0https:\/\/www.netbeans.org\/index.html.<\/li><li>Eclipse\u00a0\u2212 Eclipse is also a Java IDE developed by the Eclipse open-source community and can be downloaded from\u00a0https:\/\/www.eclipse.org\/.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This section guides you on how to download and set up Java on your machine. Please use the following steps to set up the environment. Java SE is freely available from the link\u00a0Download Java. Hence, you can download a version based on your operating system. Follow the instructions to download Java and run the&nbsp;.exe&nbsp;to install [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1705"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1705"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1705\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1706,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1705\/revisions\/1706"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1705"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1705"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1705"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1707,
        "date": "2021-03-15T07:57:45",
        "date_gmt": "2021-03-15T07:57:45",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1707"
        },
        "modified": "2021-03-15T07:57:45",
        "modified_gmt": "2021-03-15T07:57:45",
        "slug": "controls",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/controls\/",
        "title": {
            "rendered": "Controls"
        },
        "content": {
            "rendered": "\n<p>Every user interface considers the following three main aspects \u2212<\/p>\n\n\n\n<ul><li><strong>UI Elements<\/strong>&nbsp;\u2212 These are the core visual elements the user eventually sees and interacts with. GWT provides a huge list of widely used and common elements varying from basic to complex, which we will cover in this tutorial.<\/li><li><strong>Layouts<\/strong>&nbsp;\u2212 They define how UI elements should be organized on the screen and provide a final look and feel to the GUI (Graphical User Interface). This part will be covered in the Layout chapter.<\/li><li><strong>Behavior<\/strong>&nbsp;\u2212 These are the events which occur when the user interacts with UI elements. This part will be covered in the Event Handling chapter.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/swing\/images\/swing_class_hierarchy.jpg\" alt=\"UI classes\"\/><\/figure>\n\n\n\n<p>Every SWING controls inherits properties from the following Component class hiearchy.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.<\/th><th>Class &amp; Description<\/th><\/tr><tr><td>1<\/td><td>The component is the abstract base class for the non menu user-interface controls of SWING. A component represents an object with graphical representation<\/td><\/tr><tr><td>2<\/td><td>The container is a component that can contain other SWING components<\/td><\/tr><tr><td>3<\/td><td>JComponentA JComponent is a base class for all SWING UI components. In order to use a SWING component that inherits from JComponent, the component must be in a containment hierarchy whose root is a top-level SWING container<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>SWING UI Elements<\/h2>\n\n\n\n<p>Following is the list of commonly used controls while designing GUI using SWING.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.<\/th><th>Class &amp; Description<\/th><\/tr><tr><td>1<\/td><td>JLabelA JLabel object is a component for placing text in a container.<\/td><\/tr><tr><td>2<\/td><td>JButtonThis class creates a labeled button.<\/td><\/tr><tr><td>3<\/td><td>JColorChooserA JColorChooser provides a pane of controls designed to allow a user to manipulate and select a color.<\/td><\/tr><tr><td>4<\/td><td>check box JCheckBox is a graphical component that can be in either an\u00a0<strong>on<\/strong>\u00a0(true) or\u00a0<strong>off<\/strong>\u00a0(false) state.<\/td><\/tr><tr><td>5<\/td><td>JRadioButtonThe JRadioButton class is a graphical component that can be in either an\u00a0<strong>on<\/strong>\u00a0(true) or\u00a0<strong>off<\/strong>\u00a0(false) state. in a group.<\/td><\/tr><tr><td>6<\/td><td>Liste JList component presents the user with a scrolling list of text items.<\/td><\/tr><tr><td>7<\/td><td>JComboBoxA JComboBox component presents the user with a show-up menu of choices.<\/td><\/tr><tr><td>8<\/td><td>JTextFieldA JTextField object is a text component that allows for the editing of a single line of text.<\/td><\/tr><tr><td>9<\/td><td>JPasswordFieldA JPasswordField object is a text component specialized for password entry.<\/td><\/tr><tr><td>10<\/td><td>JTextAreaA JTextArea object is a text component that allows editing of multiple lines of text.<\/td><\/tr><tr><td>11<\/td><td>ImageIconA ImageIcon control is an implementation of the Icon interface that paints Icons from Images<\/td><\/tr><tr><td>12<\/td><td>JScrollbarA Scrollbar control represents a scroll bar component in order to enable the user to select from a range of values.<\/td><\/tr><tr><td>13<\/td><td>JOptionPaneJOptionPane provides a set of standard dialog boxes that prompt users for a value or informs them of something.<\/td><\/tr><tr><td>14<\/td><td>JFileChooserA JFileChooser control represents a dialog window from which the user can select a file.<\/td><\/tr><tr><td>15<\/td><td>JProgressBarAs the task progresses towards completion, the progress bar displays the task&#8217;s percentage of completion.<\/td><\/tr><tr><td>16<\/td><td>JSliderA JSlider lets the user graphically select a value by sliding a knob within a bounded interval.<\/td><\/tr><tr><td>17<\/td><td>JSpinnerA JSpinner is a single-line input field that lets the user select a number or an object value from an ordered sequence.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Every user interface considers the following three main aspects \u2212 UI Elements&nbsp;\u2212 These are the core visual elements the user eventually sees and interacts with. GWT provides a huge list of widely used and common elements varying from basic to complex, which we will cover in this tutorial. Layouts&nbsp;\u2212 They define how UI elements should [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1707"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1707"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1707\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1708,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1707\/revisions\/1708"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1707"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1707"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1707"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1710,
        "date": "2021-03-15T09:08:33",
        "date_gmt": "2021-03-15T09:08:33",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1710"
        },
        "modified": "2021-03-15T09:08:33",
        "modified_gmt": "2021-03-15T09:08:33",
        "slug": "event-handling-3",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/event-handling-3\/",
        "title": {
            "rendered": "Event Handling"
        },
        "content": {
            "rendered": "\n<p>In this chapter, you will learn about Events, its types, and also learn how to handle an event. Example is provided at the end of the chapter for better understanding.<\/p>\n\n\n\n<h2>What is an Event?<\/h2>\n\n\n\n<p>Change in the state of an object is known as&nbsp;<strong>Event<\/strong>, i.e., event describes the change in the state of the source. Events are generated as a result of user interaction with the graphical user interface components. For example, clicking on a button, moving the mouse, entering a character through keyboard, selecting an item from the list, and scrolling the page are the activities that causes an event to occur.<\/p>\n\n\n\n<h2>Types of Event<\/h2>\n\n\n\n<p>The events can be broadly classified into two categories \u2212<\/p>\n\n\n\n<ul><li><strong>Foreground Events<\/strong>&nbsp;\u2212 These events require direct interaction of the user. They are generated as consequences of a person interacting with the graphical components in the Graphical User Interface. For example, clicking on a button, moving the mouse, entering a character through keyboard, selecting an item from list, scrolling the page, etc.<\/li><li><strong>Background Events<\/strong>&nbsp;\u2212 These events require the interaction of the end user. Operating system interrupts, hardware or software failure, timer expiration, and operation completion are some examples of background events.<\/li><\/ul>\n\n\n\n<h2>What is Event Handling?<\/h2>\n\n\n\n<p>Event Handling is the mechanism that controls the event and decides what should happen if an event occurs. This mechanism has a code which is known as an event handler, that is executed when an event occurs.<\/p>\n\n\n\n<p>Java uses the Delegation Event Model to handle the events. This model defines the standard mechanism to generate and handle the events.<\/p>\n\n\n\n<p>The Delegation Event Model has the following key participants.<\/p>\n\n\n\n<ul><li><strong>Source<\/strong>&nbsp;\u2212 The source is an object on which the event occurs. Source is responsible for providing information of the occurred event to it&#8217;s handler. Java provide us with classes for the source object.<\/li><li><strong>Listener<\/strong>&nbsp;\u2212 It is also known as event handler. The listener is responsible for generating a response to an event. From the point of view of Java implementation, the listener is also an object. The listener waits till it receives an event. Once the event is received, the listener processes the event and then returns.<\/li><\/ul>\n\n\n\n<p>The benefit of this approach is that the user interface logic is completely separated from the logic that generates the event. The user interface element is able to delegate the processing of an event to a separate piece of code.<\/p>\n\n\n\n<p>In this model, the listener needs to be registered with the source object so that the listener can receive the event notification. This is an efficient way of handling the event because the event notifications are sent only to those listeners who want to receive them.<\/p>\n\n\n\n<h2>Steps Involved in Event Handling<\/h2>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 The user clicks the button and the event is generated.<\/p>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 The object of concerned event class is created automatically and information about the source and the event get populated within the same object.<\/p>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212 Event object is forwarded to the method of the registered listener class.<\/p>\n\n\n\n<p><strong>Step 4<\/strong>&nbsp;\u2212 The method is gets executed and returns.<\/p>\n\n\n\n<h2>Points to Remember About the Listener<\/h2>\n\n\n\n<ul><li>In order to design a listener class, you have to develop some listener interfaces. These Listener interfaces forecast some public abstract callback methods, which must be implemented by the listener class.<\/li><li>If you do not implement any of the predefined interfaces, then your class cannot act as a listener class for a source object.<\/li><\/ul>\n\n\n\n<h2>Callback Methods<\/h2>\n\n\n\n<p>These are the methods that are provided by API provider and are defined by the application programmer and invoked by the application developer. Here the callback methods represent an event method. In response to an event, java jre will fire callback method. All such callback methods are provided in listener interfaces.<\/p>\n\n\n\n<p>If a component wants some listener to listen ot its events, the source must register itself to the listener.<\/p>\n\n\n\n<h2>Event Handling Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in say\u00a0<strong>D:\/ > SWING > com > tutorialspoint > gui ><\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint.gui;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\npublic class SwingControlDemo {\n   private JFrame mainFrame;\n   private JLabel headerLabel;\n   private JLabel statusLabel;\n   private JPanel controlPanel;\n\n   public SwingControlDemo(){\n      prepareGUI();\n   }\n   public static void main(String&#91;] args){\n      SwingControlDemo swingControlDemo = new SwingControlDemo();  \n      swingControlDemo.showEventDemo();       \n   }\n   private void prepareGUI(){\n      mainFrame = new JFrame(\"Java SWING Examples\");\n      mainFrame.setSize(400,400);\n      mainFrame.setLayout(new GridLayout(3, 1));\n\n      headerLabel = new JLabel(\"\",JLabel.CENTER );\n      statusLabel = new JLabel(\"\",JLabel.CENTER);        \n      statusLabel.setSize(350,100);\n      \n      mainFrame.addWindowListener(new WindowAdapter() {\n         public void windowClosing(WindowEvent windowEvent){\n            System.exit(0);\n         }        \n      });    \n      controlPanel = new JPanel();\n      controlPanel.setLayout(new FlowLayout());\n\n      mainFrame.add(headerLabel);\n      mainFrame.add(controlPanel);\n      mainFrame.add(statusLabel);\n      mainFrame.setVisible(true);  \n   }\n   private void showEventDemo(){\n      headerLabel.setText(\"Control in action: Button\"); \n\n      JButton okButton = new JButton(\"OK\");\n      JButton submitButton = new JButton(\"Submit\");\n      JButton cancelButton = new JButton(\"Cancel\");\n\n      okButton.setActionCommand(\"OK\");\n      submitButton.setActionCommand(\"Submit\");\n      cancelButton.setActionCommand(\"Cancel\");\n\n      okButton.addActionListener(new ButtonClickListener()); \n      submitButton.addActionListener(new ButtonClickListener()); \n      cancelButton.addActionListener(new ButtonClickListener()); \n\n      controlPanel.add(okButton);\n      controlPanel.add(submitButton);\n      controlPanel.add(cancelButton);       \n\n      mainFrame.setVisible(true);  \n   }\n   private class ButtonClickListener implements ActionListener{\n      public void actionPerformed(ActionEvent e) {\n         String command = e.getActionCommand();  \n         \n         if( command.equals( \"OK\" ))  {\n            statusLabel.setText(\"Ok Button clicked.\");\n         } else if( command.equals( \"Submit\" ) )  {\n            statusLabel.setText(\"Submit Button clicked.\"); \n         } else {\n            statusLabel.setText(\"Cancel Button clicked.\");\n         }  \t\n      }\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<p>Compile the program using the command prompt. Go to&nbsp;<strong>D:\/ &gt; SWING<\/strong>&nbsp;and type the following command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>D:\\AWT&gt;javac com\\tutorialspoint\\gui\\SwingControlDemo.java\n<\/code><\/pre>\n\n\n\n<p>If no error occurs, it means the compilation is successful. Run the program using the following command.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>D:\\AWT&gt;java com.tutorialspoint.gui.SwingControlDemo\n<\/code><\/pre>\n\n\n\n<p>Verify the following output.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/swing\/images\/swing_button.jpg\" alt=\"SWING  Event Handling\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, you will learn about Events, its types, and also learn how to handle an event. Example is provided at the end of the chapter for better understanding. What is an Event? Change in the state of an object is known as&nbsp;Event, i.e., event describes the change in the state of the source. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1710"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1710"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1710\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1711,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1710\/revisions\/1711"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1710"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1710"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1710"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1712,
        "date": "2021-03-15T09:11:48",
        "date_gmt": "2021-03-15T09:11:48",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1712"
        },
        "modified": "2021-03-15T09:11:48",
        "modified_gmt": "2021-03-15T09:11:48",
        "slug": "event-classes",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/event-classes\/",
        "title": {
            "rendered": "Event Classes"
        },
        "content": {
            "rendered": "\n<p>Event classes represent the event. Java provides various Event classes, however, only those which are more frequently used will be discussed.<\/p>\n\n\n\n<h2>EventObject Class<\/h2>\n\n\n\n<p>It is the root class from which all event state objects shall be derived. All Events are constructed with a reference to the object, the&nbsp;<strong>source<\/strong>, that is logically deemed to be the object upon which the Event in question initially occurred upon. This class is defined in&nbsp;<strong>java.util<\/strong>&nbsp;package.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>java.util.EventObject<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class EventObject\n   extends Object\n      implements Serializable\n<\/code><\/pre>\n\n\n\n<h2>Field<\/h2>\n\n\n\n<p>Following are the fields for&nbsp;<strong>java.util.EventObject<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<p><strong>protected Object source<\/strong>&nbsp;\u2212 The object on which the Event initially occurred.<\/p>\n\n\n\n<h2>Class Constructors<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Constructor &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>EventObject(Object source)<\/strong>Constructs a prototypical Event.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Class Methods<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Method &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Object getSource()<\/strong>The object on which the Event initially occurred.<\/td><\/tr><tr><td>2<\/td><td><strong>String toString()<\/strong>Returns a String representation of this EventObject.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Methods Inherited<\/h2>\n\n\n\n<p>This class inherits methods from the following class \u2212<\/p>\n\n\n\n<ul><li>java.lang.Object<\/li><\/ul>\n\n\n\n<h2>SWING Event Classes<\/h2>\n\n\n\n<p>Following is the list of commonly used Event classes.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Class &amp; Description<\/th><\/tr><tr><td>1<\/td><td>AWTEventIt is the root event class for all SWING events. This class and its subclasses supersede the original\u00a0<strong>java.awt.Event<\/strong>\u00a0class.<\/td><\/tr><tr><td>2<\/td><td>ActionEventThe ActionEvent is generated when the button is clicked or the item of a list is double-clicked.<\/td><\/tr><tr><td>3<\/td><td>InputEventThe InputEvent class is the root event class for all component-level input events.<\/td><\/tr><tr><td>4<\/td><td>KeyEventOn entering the character the Key event is generated.<\/td><\/tr><tr><td>5<\/td><td>MouseEventThis event indicates a mouse action occurred in a component.<\/td><\/tr><tr><td>6<\/td><td>WindowEventThe object of this class represents the change in the state of a window.<\/td><\/tr><tr><td>7<\/td><td>AdjustmentEventThe object of this class represents the adjustment event emitted by Adjustable objects.<\/td><\/tr><tr><td>8<\/td><td>ComponentEventThe object of this class represents the change in the state of a window.<\/td><\/tr><tr><td>9<\/td><td>ContainerEventThe object of this class represents the change in the state of a window.<\/td><\/tr><tr><td>10<\/td><td>MouseMotionEventThe object of this class represents the change in the state of a window.<\/td><\/tr><tr><td>11<\/td><td>PaintEventThe object of this class represents the change in the state of a window.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Event classes represent the event. Java provides various Event classes, however, only those which are more frequently used will be discussed. EventObject Class It is the root class from which all event state objects shall be derived. All Events are constructed with a reference to the object, the&nbsp;source, that is logically deemed to be the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1712"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1712"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1712\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1713,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1712\/revisions\/1713"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1712"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1712"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1712"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1714,
        "date": "2021-03-15T09:13:31",
        "date_gmt": "2021-03-15T09:13:31",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1714"
        },
        "modified": "2021-03-15T09:13:31",
        "modified_gmt": "2021-03-15T09:13:31",
        "slug": "event-listeners",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/event-listeners\/",
        "title": {
            "rendered": "Event Listeners"
        },
        "content": {
            "rendered": "\n<p>Event listeners represent the interfaces responsible to handle events. Java provides various Event listener classes, however, only those which are more frequently used will be discussed. Every method of an event listener method has a single argument as an object which is the subclass of EventObject class. For example, mouse event listener methods will accept instance of MouseEvent, where MouseEvent derives from EventObject.<\/p>\n\n\n\n<h2>EventListner Interface<\/h2>\n\n\n\n<p>It is a marker interface which every listener interface has to extend. This class is defined in&nbsp;<strong>java.util<\/strong>&nbsp;package.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>java.util.EventListener<\/strong>&nbsp;interface \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface EventListener\n<\/code><\/pre>\n\n\n\n<h2>SWING Event Listener Interfaces<\/h2>\n\n\n\n<p>Following is the list of commonly used event listeners.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Class &amp; Description<\/th><\/tr><tr><td>1<\/td><td>ActionListenerThis interface is used for receiving the action events.<\/td><\/tr><tr><td>2<\/td><td>ComponentListenerThis interface is used for receiving the component events.<\/td><\/tr><tr><td>3<\/td><td>ItemListenerThis interface is used for receiving the item events.<\/td><\/tr><tr><td>4<\/td><td>KeyListenerThis interface is used for receiving the key events.<\/td><\/tr><tr><td>5<\/td><td>MouseListenerThis interface is used for receiving the mouse events.<\/td><\/tr><tr><td>6<\/td><td>WindowListenerThis interface is used for receiving the window events.<\/td><\/tr><tr><td>7<\/td><td>AdjustmentListenerThis interface is used for receiving the adjustment events.<\/td><\/tr><tr><td>8<\/td><td>ContainerListenerThis interface is used for receiving the container events.<\/td><\/tr><tr><td>9<\/td><td>MouseMotionListenerThis interface is used for receiving the mouse motion events.<\/td><\/tr><tr><td>10<\/td><td>FocusListenerThis interface is used for receiving the focus events.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Event listeners represent the interfaces responsible to handle events. Java provides various Event listener classes, however, only those which are more frequently used will be discussed. Every method of an event listener method has a single argument as an object which is the subclass of EventObject class. For example, mouse event listener methods will accept [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1714"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1714"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1714\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1715,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1714\/revisions\/1715"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1714"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1714"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1714"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1716,
        "date": "2021-03-15T09:15:00",
        "date_gmt": "2021-03-15T09:15:00",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1716"
        },
        "modified": "2021-03-15T09:15:00",
        "modified_gmt": "2021-03-15T09:15:00",
        "slug": "event-adapters",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/event-adapters\/",
        "title": {
            "rendered": "Event Adapters"
        },
        "content": {
            "rendered": "\n<p>Adapters are abstract classes for receiving various events. The methods in these classes are empty. These classes exist as convenience for creating listener objects.<\/p>\n\n\n\n<h2>SWING Adapters<\/h2>\n\n\n\n<p>Following is the list of commonly used adapters while listening GUI events in SWING.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Adapter &amp; Description<\/th><\/tr><tr><td>1<\/td><td>FocusAdapterAn abstract adapter class for receiving focus events.<\/td><\/tr><tr><td>2<\/td><td>KeyAdapterAn abstract adapter class for receiving key events.<\/td><\/tr><tr><td>3<\/td><td>MouseAdapterAn abstract adapter class for receiving mouse events.<\/td><\/tr><tr><td>4<\/td><td>MouseMotionAdapterAn abstract adapter class for receiving mouse motion events.<\/td><\/tr><tr><td>5<\/td><td>WindowAdapterAn abstract adapter class for receiving window events.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Adapters are abstract classes for receiving various events. The methods in these classes are empty. These classes exist as convenience for creating listener objects. SWING Adapters Following is the list of commonly used adapters while listening GUI events in SWING. Sr.No. Adapter &amp; Description 1 FocusAdapterAn abstract adapter class for receiving focus events. 2 KeyAdapterAn [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1716"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1716"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1716\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1717,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1716\/revisions\/1717"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1716"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1716"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1716"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1718,
        "date": "2021-03-15T09:17:01",
        "date_gmt": "2021-03-15T09:17:01",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1718"
        },
        "modified": "2021-03-15T09:17:01",
        "modified_gmt": "2021-03-15T09:17:01",
        "slug": "layouts",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/layouts\/",
        "title": {
            "rendered": "Layouts"
        },
        "content": {
            "rendered": "\n<p>Layout refers to the arrangement of components within the container. In another way, it could be said that layout is placing the components at a particular position within the container. The task of laying out the controls is done automatically by the Layout Manager.<\/p>\n\n\n\n<h2>Layout Manager<\/h2>\n\n\n\n<p>The layout manager automatically positions all the components within the container. Even if you do not use the layout manager, the components are still positioned by the default layout manager. It is possible to lay out the controls by hand, however, it becomes very difficult because of the following two reasons.<\/p>\n\n\n\n<ul><li>It is very tedious to handle a large number of controls within the container.<\/li><li>Usually, the width and height information of a component is not given when we need to arrange them.<\/li><\/ul>\n\n\n\n<p>Java provides various layout managers to position the controls. Properties like size, shape, and arrangement varies from one layout manager to the other. When the size of the applet or the application window changes, the size, shape, and arrangement of the components also changes in response, i.e. the layout managers adapt to the dimensions of the appletviewer or the application window.<\/p>\n\n\n\n<p>The layout manager is associated with every Container object. Each layout manager is an object of the class that implements the LayoutManager interface.<\/p>\n\n\n\n<p>Following are the interfaces defining the functionalities of Layout Managers.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Interface &amp; Description<\/th><\/tr><tr><td>1<\/td><td>LayoutManagerThe LayoutManager interface declares those methods which need to be implemented by the class, whose object will act as a layout manager.<\/td><\/tr><tr><td>2<\/td><td>LayoutManager2The LayoutManager2 is the sub-interface of the LayoutManager. This interface is for those classes that know how to layout containers based on layout constraint objects.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>AWT Layout Manager Classes<\/h2>\n\n\n\n<p>Following is the list of commonly used controls while designing GUI using AWT.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>LayoutManager &amp; Description<\/th><\/tr><tr><td>1<\/td><td>BorderLayout arranges the components to fit in the five regions: east, west, north, south, and center.<\/td><\/tr><tr><td>2<\/td><td>CardLayoutThe CardLayout object treats each component in the container as a card. Only one card is visible at a time.<\/td><\/tr><tr><td>3<\/td><td>FlowLayoutThe FlowLayout is the default layout. It layout the components in a directional flow.<\/td><\/tr><tr><td>4<\/td><td>GridLayoutThe GridLayout manages the components in the form of a rectangular grid.<\/td><\/tr><tr><td>5<\/td><td>GridBagLayoutThis is the most flexible layout manager class. The object of GridBagLayout aligns the component vertically, horizontally, or along their baseline without requiring the components of the same size.<\/td><\/tr><tr><td>6<\/td><td>GroupLayoutThe GroupLayout hierarchically groups the components in order to position them in a Container.<\/td><\/tr><tr><td>7<\/td><td>SpringLayoutA SpringLayout positions the children of its associated container according to a set of constraints.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Layout refers to the arrangement of components within the container. In another way, it could be said that layout is placing the components at a particular position within the container. The task of laying out the controls is done automatically by the Layout Manager. Layout Manager The layout manager automatically positions all the components within [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1718"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1718"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1718\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1719,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1718\/revisions\/1719"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1718"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1718"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1718"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1720,
        "date": "2021-03-15T09:18:23",
        "date_gmt": "2021-03-15T09:18:23",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1720"
        },
        "modified": "2021-03-15T09:18:23",
        "modified_gmt": "2021-03-15T09:18:23",
        "slug": "menu-classes",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/menu-classes\/",
        "title": {
            "rendered": "Menu Classes"
        },
        "content": {
            "rendered": "\n<p>As we know that every top-level window has a menu bar associated with it. This menu bar consists of various menu choices available to the end user. Further, each choice contains a list of options, which is called drop-down menus. Menu and MenuItem controls are subclass of MenuComponent class.<\/p>\n\n\n\n<h2>Menu Hierarchy<\/h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/swing\/images\/swing_menuhiearchy.jpg\" alt=\"Swing Menu Hiearchy\"\/><\/figure>\n\n\n\n<h2>Menu Controls<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Class &amp; Description<\/th><\/tr><tr><td>1<\/td><td>JMenuBarThe JMenuBar object is associated with the top-level window.<\/td><\/tr><tr><td>2<\/td><td>JMenuItemThe items in the menu must belong to the JMenuItem or any of its subclass.<\/td><\/tr><tr><td>3<\/td><td>JMenuThe JMenu object is a pull-down menu component that is displayed from the menu bar.<\/td><\/tr><tr><td>4<\/td><td>JCheckboxMenuItemJCheckboxMenuItem is the subclass of JMenuItem.<\/td><\/tr><tr><td>5<\/td><td>JRadioButtonMenuItemJRadioButtonMenuItem is the subclass of JMenuItem.<\/td><\/tr><tr><td>6<\/td><td>JPopupMenuJPopupMenu can be dynamically popped up at a specified position within a component.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>As we know that every top-level window has a menu bar associated with it. This menu bar consists of various menu choices available to the end user. Further, each choice contains a list of options, which is called drop-down menus. Menu and MenuItem controls are subclass of MenuComponent class. Menu Hierarchy Menu Controls Sr.No. Class [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1720"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1720"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1720\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1721,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1720\/revisions\/1721"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1720"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1720"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1720"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1722,
        "date": "2021-03-15T09:20:17",
        "date_gmt": "2021-03-15T09:20:17",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1722"
        },
        "modified": "2021-03-15T09:20:17",
        "modified_gmt": "2021-03-15T09:20:17",
        "slug": "containers",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/containers\/",
        "title": {
            "rendered": "Containers"
        },
        "content": {
            "rendered": "\n<p>Containers are an integral part of SWING GUI components. A container provides a space where a component can be located. A Container in AWT is a component itself and it provides the capability to add a component to itself. Following are certain noticable points to be considered.<\/p>\n\n\n\n<ul><li>Sub classes of Container are called as Container. For example, JPanel, JFrame and JWindow.<\/li><li>Container can add only a Component to itself.<\/li><li>A default layout is present in each container which can be overridden using&nbsp;<strong>setLayout<\/strong>&nbsp;method.<\/li><\/ul>\n\n\n\n<h2>SWING Containers<\/h2>\n\n\n\n<p>Following is the list of commonly used containers while designed GUI using SWING.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Container &amp; Description<\/th><\/tr><tr><td>1<\/td><td>PanelJPanel is the simplest container. It provides space in which any other component can be placed, including other panels.<\/td><\/tr><tr><td>2<\/td><td>frame JFrame is a top-level window with a title and a border.<\/td><\/tr><tr><td>3<\/td><td>the window object is a top-level window with no borders and no menubar.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Containers are an integral part of SWING GUI components. A container provides a space where a component can be located. A Container in AWT is a component itself and it provides the capability to add a component to itself. Following are certain noticable points to be considered. Sub classes of Container are called as Container. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            72
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1722"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1722"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1722\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1723,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1722\/revisions\/1723"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1722"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1722"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1722"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]