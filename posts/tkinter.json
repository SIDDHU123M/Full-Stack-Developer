[{"id":2836,"date":"2020-09-23T10:34:13","date_gmt":"2020-09-23T10:34:13","guid":{"rendered":"http://python3.foobrdigital.com/?p=2836"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-tutorial","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-tutorial/","title":{"rendered":"Python Tkinter Tutorial"},"content":{"rendered":"\n<p>Tkinter tutorial provides basic and advanced concepts of Python Tkinter. Our Tkinter tutorial is designed for beginners and professionals.</p>\n\n\n\n<p>Python provides the standard library Tkinter for creating the graphical user interface for desktop based applications.</p>\n\n\n\n<p>Developing desktop based applications with python Tkinter is not a complex task. An empty Tkinter top-level window can be created by using the following steps.</p>\n\n\n\n<ol><li>import the Tkinter module.</li><li>Create the main application window.</li><li>Add the widgets like labels, buttons, frames, etc. to the window.</li><li>Call the main event loop so that the actions can take place on the user&#8217;s computer screen.</li></ol>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \nfrom tkinter import *  \n#creating the application main window.   \ntop = Tk()  \n#Entering the event main loop  \ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter.png\" alt=\"Python Tkinter\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Tkinter widgets</h2>\n\n\n\n<p>There are various widgets like button, canvas, checkbutton, entry, etc. that are used to build the python GUI applications.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Widget</th><th>Description</th></tr><tr><td>1</td><td><a href=\"https://www.javatpoint.com/python-tkinter-button\">Button</a></td><td>The Button is used to add various kinds of buttons to the python application.</td></tr><tr><td>2</td><td><a href=\"https://www.javatpoint.com/python-tkinter-canvas\">Canvas</a></td><td>The canvas widget is used to draw the canvas on the window.</td></tr><tr><td>3</td><td><a href=\"https://www.javatpoint.com/python-tkinter-checkbutton\">Checkbutton</a></td><td>The Checkbutton is used to display the CheckButton on the window.</td></tr><tr><td>4</td><td><a href=\"https://www.javatpoint.com/python-tkinter-entry\">Entry</a></td><td>The entry widget is used to display the single-line text field to the user. It is commonly used to accept user values.</td></tr><tr><td>5</td><td><a href=\"https://www.javatpoint.com/python-tkinter-frame\">Frame</a></td><td>It can be defined as a container to which, another widget can be added and organized.</td></tr><tr><td>6</td><td><a href=\"https://www.javatpoint.com/python-tkinter-label\">Label</a></td><td>A label is a text used to display some message or information about the other widgets.</td></tr><tr><td>7</td><td><a href=\"https://www.javatpoint.com/python-tkinter-listbox\">ListBox</a></td><td>The ListBox widget is used to display a list of options to the user.</td></tr><tr><td>8</td><td><a href=\"https://www.javatpoint.com/python-tkinter-menubutton\">Menubutton</a></td><td>The Menubutton is used to display the menu items to the user.</td></tr><tr><td>9</td><td><a href=\"https://www.javatpoint.com/python-tkinter-menu\">Menu</a></td><td>It is used to add menu items to the user.</td></tr><tr><td>10</td><td><a href=\"https://www.javatpoint.com/python-tkinter-message\">Message</a></td><td>The Message widget is used to display the message-box to the user.</td></tr><tr><td>11</td><td><a href=\"https://www.javatpoint.com/python-tkinter-radiobutton\">Radiobutton</a></td><td>The Radiobutton is different from a checkbutton. Here, the user is provided with various options and the user can select only one option among them.</td></tr><tr><td>12</td><td><a href=\"https://www.javatpoint.com/python-tkinter-scale\">Scale</a></td><td>It is used to provide the slider to the user.</td></tr><tr><td>13</td><td><a href=\"https://www.javatpoint.com/python-tkinter-scrollbar\">Scrollbar</a></td><td>It provides the scrollbar to the user so that the user can scroll the window up and down.</td></tr><tr><td>14</td><td><a href=\"https://www.javatpoint.com/python-tkinter-text\">Text</a></td><td>It is different from Entry because it provides a multi-line text field to the user so that the user can write the text and edit the text inside it.</td></tr><tr><td>14</td><td><a href=\"https://www.javatpoint.com/python-tkinter-toplevel\">Toplevel</a></td><td>It is used to create a separate window container.</td></tr><tr><td>15</td><td><a href=\"https://www.javatpoint.com/python-tkinter-spinbox\">Spinbox</a></td><td>It is an entry widget used to select from options of values.</td></tr><tr><td>16</td><td><a href=\"https://www.javatpoint.com/python-tkinter-panedwindow\">PanedWindow</a></td><td>It is like a container widget that contains horizontal or vertical panes.</td></tr><tr><td>17</td><td><a href=\"https://www.javatpoint.com/python-tkinter-labelframe\">LabelFrame</a></td><td>A LabelFrame is a container widget that acts as the container</td></tr><tr><td>18</td><td><a href=\"https://www.javatpoint.com/python-tkinter-messagebox\">MessageBox</a></td><td>This module is used to display the message-box in the desktop based applications.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Python Tkinter Geometry</h2>\n\n\n\n<p>The Tkinter geometry specifies the method by using which, the widgets are represented on display. The python Tkinter provides the following geometry methods.</p>\n\n\n\n<ol><li>The pack() method</li><li>The grid() method</li><li>The place() method</li></ol>\n\n\n\n<p>Let&#8217;s discuss each one of them in detail.</p>\n\n\n\n<h3>Python Tkinter pack() method</h3>\n\n\n\n<p>The pack() widget is used to organize widget in the block. The positions widgets added to the python application using the pack() method can be controlled by using the various options specified in the method call.</p>\n\n\n\n<p>However, the controls are less and widgets are generally added in the less organized manner.</p>\n\n\n\n<p>The syntax to use the pack() is given below.</p>\n\n\n\n<h3>syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>widget.pack(options)  </code></pre>\n\n\n\n<p>A list of possible options that can be passed in pack() is given below.</p>\n\n\n\n<ul><li><strong>expand:</strong>&nbsp;If the expand is set to true, the widget expands to fill any space.</li><li><strong>Fill:</strong>&nbsp;By default, the fill is set to NONE. However, we can set it to X or Y to determine whether the widget contains any extra space.</li><li><strong>size:</strong>&nbsp;it represents the side of the parent to which the widget is to be placed on the window.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \nfrom tkinter import *  \nparent = Tk()  \nredbutton = Button(parent, text = \"Red\", fg = \"red\")  \nredbutton.pack( side = LEFT)  \ngreenbutton = Button(parent, text = \"Black\", fg = \"black\")  \ngreenbutton.pack( side = RIGHT )  \nbluebutton = Button(parent, text = \"Blue\", fg = \"blue\")  \nbluebutton.pack( side = TOP )  \nblackbutton = Button(parent, text = \"Green\", fg = \"red\")  \nblackbutton.pack( side = BOTTOM)  \nparent.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter2.png\" alt=\"Python Tkinter\"/></figure>\n\n\n\n<h3>Python Tkinter grid() method</h3>\n\n\n\n<p>The grid() geometry manager organizes the widgets in the tabular form. We can specify the rows and columns as the options in the method call. We can also specify the column span (width) or rowspan(height) of a widget.</p>\n\n\n\n<p>This is a more organized way to place the widgets to the python application. The syntax to use the grid() is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>widget.grid(options)  </code></pre>\n\n\n\n<p>A list of possible options that can be passed inside the grid() method is given below.</p>\n\n\n\n<ul><li><strong>Column</strong><br>The column number in which the widget is to be placed. The leftmost column is represented by 0.</li><li><strong>Columnspan</strong><br>The width of the widget. It represents the number of columns up to which, the column is expanded.</li><li><strong>ipadx, ipady</strong><br>It represents the number of pixels to pad the widget inside the widget&#8217;s border.</li><li><strong>padx, pady</strong><br>It represents the number of pixels to pad the widget outside the widget&#8217;s border.</li><li><strong>row</strong><br>The row number in which the widget is to be placed. The topmost row is represented by 0.</li><li><strong>rowspan</strong><br>The height of the widget, i.e. the number of the row up to which the widget is expanded.</li><li><strong>Sticky</strong><br>If the cell is larger than a widget, then sticky is used to specify the position of the widget inside the cell. It may be the concatenation of the sticky letters representing the position of the widget. It may be N, E, W, S, NE, NW, NS, EW, ES.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \nfrom tkinter import *  \nparent = Tk()  \nname = Label(parent,text = \"Name\").grid(row = 0, column = 0)  \ne1 = Entry(parent).grid(row = 0, column = 1)  \npassword = Label(parent,text = \"Password\").grid(row = 1, column = 0)  \ne2 = Entry(parent).grid(row = 1, column = 1)  \nsubmit = Button(parent, text = \"Submit\").grid(row = 4, column = 0)  \nparent.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter3.png\" alt=\"Python Tkinter\"/></figure>\n\n\n\n<h3>Python Tkinter place() method</h3>\n\n\n\n<p>The place() geometry manager organizes the widgets to the specific x and y coordinates.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>widget.place(options)  </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<ul><li><strong>Anchor:</strong>&nbsp;It represents the exact position of the widget within the container. The default value (direction) is NW (the upper left corner)</li><li><strong>bordermode:</strong>&nbsp;The default value of the border type is INSIDE that refers to ignore the parent&#8217;s inside the border. The other option is OUTSIDE.</li><li><strong>height, width:</strong>&nbsp;It refers to the height and width in pixels.</li><li><strong>relheight, relwidth:</strong>&nbsp;It is represented as the float between 0.0 and 1.0 indicating the fraction of the parent&#8217;s height and width.</li><li><strong>relx, rely:</strong>&nbsp;It is represented as the float between 0.0 and 1.0 that is the offset in the horizontal and vertical direction.</li><li><strong>x, y:</strong>&nbsp;It refers to the horizontal and vertical offset in the pixels.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \nfrom tkinter import *  \ntop = Tk()  \ntop.geometry(\"400x250\")  \nname = Label(top, text = \"Name\").place(x = 30,y = 50)  \nemail = Label(top, text = \"Email\").place(x = 30, y = 90)  \npassword = Label(top, text = \"Password\").place(x = 30, y = 130)  \ne1 = Entry(top).place(x = 80, y = 50)  \ne2 = Entry(top).place(x = 80, y = 90)  \ne3 = Entry(top).place(x = 95, y = 130)  \ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter4.png\" alt=\"Python Tkinter\"/></figure>\n\n\n\n<h2>Prerequisite</h2>\n\n\n\n<p>Before learning Tkinter, you must have the basic knowledge of Python.</p>\n\n\n\n<h2>Audience</h2>\n\n\n\n<p>Our Python Tkinter tutorial is designed to help beginners and professionals.</p>\n\n\n\n<h2>Problem</h2>\n\n\n\n<p>We assure that you will not find any problem in this Tkinter tutorial. But if there is any mistake, please post the problem in contact form.</p>\n","protected":false},"excerpt":{"rendered":"<p>Tkinter tutorial provides basic and advanced concepts of Python Tkinter. Our Tkinter tutorial is designed for beginners and professionals. Python provides the standard library Tkinter for creating the graphical user interface for desktop based applications. Developing desktop based applications with python Tkinter is not a complex task. An empty Tkinter top-level window can be created [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2836"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2836"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2836/revisions"}],"predecessor-version":[{"id":2837,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2836/revisions/2837"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2836"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2836"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2836"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2840,"date":"2020-09-23T10:42:49","date_gmt":"2020-09-23T10:42:49","guid":{"rendered":"http://python3.foobrdigital.com/?p=2840"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-button","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-button/","title":{"rendered":"Python Tkinter Button"},"content":{"rendered":"\n<p>The button widget is used to add various types of buttons to the python application. Python allows us to configure the look of the button according to our requirements. Various options can be set or reset depending upon the requirements.</p>\n\n\n\n<p>We can also associate a method or function with a button which is called when the button is pressed.</p>\n\n\n\n<p>The syntax to use the button widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>W = Button(parent, options)   </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>activebackground</td><td>It represents the background of the button when the mouse hover the button.</td></tr><tr><td>2</td><td>activeforeground</td><td>It represents the font color of the button when the mouse hover the button.</td></tr><tr><td>3</td><td>Bd</td><td>It represents the border width in pixels.</td></tr><tr><td>4</td><td>Bg</td><td>It represents the background color of the button.</td></tr><tr><td>5</td><td>Command</td><td>It is set to the function call which is scheduled when the function is called.</td></tr><tr><td>6</td><td>Fg</td><td>Foreground color of the button.</td></tr><tr><td>7</td><td>Font</td><td>The font of the button text.</td></tr><tr><td>8</td><td>Height</td><td>The height of the button. The height is represented in the number of text lines for the textual lines or the number of pixels for the images.</td></tr><tr><td>10</td><td>Highlightcolor</td><td>The color of the highlight when the button has the focus.</td></tr><tr><td>11</td><td>Image</td><td>It is set to the image displayed on the button.</td></tr><tr><td>12</td><td>justify</td><td>It illustrates the way by which the multiple text lines are represented. It is set to LEFT for left justification, RIGHT for the right justification, and CENTER for the center.</td></tr><tr><td>13</td><td>Padx</td><td>Additional padding to the button in the horizontal direction.</td></tr><tr><td>14</td><td>pady</td><td>Additional padding to the button in the vertical direction.</td></tr><tr><td>15</td><td>Relief</td><td>It represents the type of the border. It can be SUNKEN, RAISED, GROOVE, and RIDGE.</td></tr><tr><td>17</td><td>State</td><td>This option is set to DISABLED to make the button unresponsive. The ACTIVE represents the active state of the button.</td></tr><tr><td>18</td><td>Underline</td><td>Set this option to make the button text underlined.</td></tr><tr><td>19</td><td>Width</td><td>The width of the button. It exists as a number of letters for textual buttons or pixels for image buttons.</td></tr><tr><td>20</td><td>Wraplength</td><td>If the value is set to a positive number, the text lines will be wrapped to fit within this length.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>#python application to create a simple button  \r\n  \r\nfrom tkinter import *   \r\n  \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x100\")  \r\n  \r\nb = Button(top,text = \"Simple\")  \r\n  \r\nb.pack()  \r\n  \r\ntop.mainaloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-button.png\" alt=\"Python Tkinter Button\"/></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *   \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x100\")  \r\n  \r\ndef fun():  \r\n    messagebox.showinfo(\"Hello\", \"Red Button clicked\")  \r\n  \r\n  \r\nb1 = Button(top,text = \"Red\",command = fun,activeforeground = \"red\",activebackground = \"pink\",pady=10)  \r\n  \r\nb2 = Button(top, text = \"Blue\",activeforeground = \"blue\",activebackground = \"pink\",pady=10)  \r\n  \r\nb3 = Button(top, text = \"Green\",activeforeground = \"green\",activebackground = \"pink\",pady = 10)  \r\n  \r\nb4 = Button(top, text = \"Yellow\",activeforeground = \"yellow\",activebackground = \"pink\",pady = 10)  \r\n  \r\nb1.pack(side = LEFT)  \r\n  \r\nb2.pack(side = RIGHT)  \r\n  \r\nb3.pack(side = TOP)  \r\n  \r\nb4.pack(side = BOTTOM)  \r\n  \r\ntop.mainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-button2.png\" alt=\"Python Tkinter Button\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-button3.png\" alt=\"Python Tkinter Button\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>The button widget is used to add various types of buttons to the python application. Python allows us to configure the look of the button according to our requirements. Various options can be set or reset depending upon the requirements. We can also associate a method or function with a button which is called when [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2840"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2840"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2840/revisions"}],"predecessor-version":[{"id":2841,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2840/revisions/2841"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2840"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2840"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2840"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2849,"date":"2020-09-23T10:55:55","date_gmt":"2020-09-23T10:55:55","guid":{"rendered":"http://python3.foobrdigital.com/?p=2849"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-canvas","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-canvas/","title":{"rendered":"Python Tkinter Canvas"},"content":{"rendered":"\n<p>The canvas widget is used to add the structured graphics to the python application. It is used to draw the graph and plots to the python application. The syntax to use the canvas is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = canvas(parent, options)  </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>bd</td><td>The represents the border width. The default width is 2.</td></tr><tr><td>2</td><td>bg</td><td>It represents the background color of the canvas.</td></tr><tr><td>3</td><td>confine</td><td>It is set to make the canvas unscrollable outside the scroll region.</td></tr><tr><td>4</td><td>cursor</td><td>The cursor is used as the arrow, circle, dot, etc. on the canvas.</td></tr><tr><td>5</td><td>height</td><td>It represents the size of the canvas in the vertical direction.</td></tr><tr><td>6</td><td>highlightcolor</td><td>It represents the highlight color when the widget is focused.</td></tr><tr><td>7</td><td>relief</td><td>It represents the type of the border. The possible values are SUNKEN, RAISED, GROOVE, and RIDGE.</td></tr><tr><td>8</td><td>scrollregion</td><td>It represents the coordinates specified as the tuple containing the area of the canvas.</td></tr><tr><td>9</td><td>width</td><td>It represents the width of the canvas.</td></tr><tr><td>10</td><td>xscrollincrement</td><td>If it is set to a positive value. The canvas is placed only to the multiple of this value.</td></tr><tr><td>11</td><td>xscrollcommand</td><td>If the canvas is scrollable, this attribute should be the .set() method of the horizontal scrollbar.</td></tr><tr><td>12</td><td>yscrollincrement</td><td>Works like xscrollincrement, but governs vertical movement.</td></tr><tr><td>13</td><td>yscrollcommand</td><td>If the canvas is scrollable, this attribute should be the .set() method of the vertical scrollbar.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *   \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x200\")  \r\n  \r\n#creating a simple canvas  \r\nc = Canvas(top,bg = \"pink\",height = \"200\")  \r\n  \r\n  \r\nc.pack()  \r\n  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-canvas.png\" alt=\"Python Tkinter Canvas\"/></figure>\n\n\n\n<h3>Example: Creating an arc</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *   \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x200\")  \r\n  \r\n#creating a simple canvas  \r\nc = Canvas(top,bg = \"pink\",height = \"200\",width = 200)  \r\n  \r\narc = c.create_arc((5,10,150,200),start = 0,extent = 150, fill= \"white\")  \r\n  \r\nc.pack()  \r\n  \r\ntop.mainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-canvas2.png\" alt=\"Python Tkinter Canvas\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>The canvas widget is used to add the structured graphics to the python application. It is used to draw the graph and plots to the python application. The syntax to use the canvas is given below. Syntax A list of possible options is given below. SN Option Description 1 bd The represents the border width. [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2849"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2849"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2849/revisions"}],"predecessor-version":[{"id":2850,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2849/revisions/2850"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2849"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2849"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2849"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2851,"date":"2020-09-23T10:57:06","date_gmt":"2020-09-23T10:57:06","guid":{"rendered":"http://python3.foobrdigital.com/?p=2851"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-checkbutton","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-checkbutton/","title":{"rendered":"Python Tkinter Checkbutton"},"content":{"rendered":"\n<p>The Checkbutton is used to track the user&#8217;s choices provided to the application. In other words, we can say that Checkbutton is used to implement the on/off selections.</p>\n\n\n\n<p>The Checkbutton can contain the text or images. The Checkbutton is mostly used to provide many choices to the user among which, the user needs to choose the one. It generally implements many of many selections.</p>\n\n\n\n<p>The syntax to use the checkbutton is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = checkbutton(master, options)  </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>activebackground</td><td>It represents the background color when the checkbutton is under the cursor.</td></tr><tr><td>2</td><td>activeforeground</td><td>It represents the foreground color of the checkbutton when the checkbutton is under the cursor.</td></tr><tr><td>3</td><td>bg</td><td>The background color of the button.</td></tr><tr><td>4</td><td>bitmap</td><td>It displays an image (monochrome) on the button.</td></tr><tr><td>5</td><td>bd</td><td>The size of the border around the corner.</td></tr><tr><td>6</td><td>command</td><td>It is associated with a function to be called when the state of the checkbutton is changed.</td></tr><tr><td>7</td><td>cursor</td><td>The mouse pointer will be changed to the cursor name when it is over the checkbutton.</td></tr><tr><td>8</td><td>disableforeground</td><td>It is the color which is used to represent the text of a disabled checkbutton.</td></tr><tr><td>9</td><td>font</td><td>It represents the font of the checkbutton.</td></tr><tr><td>10</td><td>fg</td><td>The foreground color (text color) of the checkbutton.</td></tr><tr><td>11</td><td>height</td><td>It represents the height of the checkbutton (number of lines). The default height is 1.</td></tr><tr><td>12</td><td>highlightcolor</td><td>The color of the focus highlight when the checkbutton is under focus.</td></tr><tr><td>13</td><td>image</td><td>The image used to represent the checkbutton.</td></tr><tr><td>14</td><td>justify</td><td>This specifies the justification of the text if the text contains multiple lines.</td></tr><tr><td>15</td><td>offvalue</td><td>The associated control variable is set to 0 by default if the button is unchecked. We can change the state of an unchecked variable to some other one.</td></tr><tr><td>16</td><td>onvalue</td><td>The associated control variable is set to 1 by default if the button is checked. We can change the state of the checked variable to some other one.</td></tr><tr><td>17</td><td>padx</td><td>The horizontal padding of the checkbutton</td></tr><tr><td>18</td><td>pady</td><td>The vertical padding of the checkbutton.</td></tr><tr><td>19</td><td>relief</td><td>The type of the border of the checkbutton. By default, it is set to FLAT.</td></tr><tr><td>20</td><td>selectcolor</td><td>The color of the checkbutton when it is set. By default, it is red.</td></tr><tr><td>21</td><td>selectimage</td><td>The image is shown on the checkbutton when it is set.</td></tr><tr><td>22</td><td>state</td><td>It represents the state of the checkbutton. By default, it is set to normal. We can change it to DISABLED to make the checkbutton unresponsive. The state of the checkbutton is ACTIVE when it is under focus.</td></tr><tr><td>24</td><td>underline</td><td>It represents the index of the character in the text which is to be underlined. The indexing starts with zero in the text.</td></tr><tr><td>25</td><td>variable</td><td>It represents the associated variable that tracks the state of the checkbutton.</td></tr><tr><td>26</td><td>width</td><td>It represents the width of the checkbutton. It is represented in the number of characters that are represented in the form of texts.</td></tr><tr><td>27</td><td>wraplength</td><td>If this option is set to an integer number, the text will be broken into the number of pieces.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The methods that can be called with the Checkbuttons are described in the following table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>deselect()</td><td>It is called to turn off the checkbutton.</td></tr><tr><td>2</td><td>flash()</td><td>The checkbutton is flashed between the active and normal colors.</td></tr><tr><td>3</td><td>invoke()</td><td>This will invoke the method associated with the checkbutton.</td></tr><tr><td>4</td><td>select()</td><td>It is called to turn on the checkbutton.</td></tr><tr><td>5</td><td>toggle()</td><td>It is used to toggle between the different Checkbuttons.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *   \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x200\")  \r\n  \r\ncheckvar1 = IntVar()  \r\n  \r\ncheckvar2 = IntVar()  \r\n  \r\ncheckvar3 = IntVar()  \r\n  \r\nchkbtn1 = Checkbutton(top, text = \"C\", variable = checkvar1, onvalue = 1, offvalue = 0, height = 2, width = 10)  \r\n  \r\nchkbtn2 = Checkbutton(top, text = \"C++\", variable = checkvar2, onvalue = 1, offvalue = 0, height = 2, width = 10)  \r\n  \r\nchkbtn3 = Checkbutton(top, text = \"Java\", variable = checkvar3, onvalue = 1, offvalue = 0, height = 2, width = 10)  \r\n  \r\nchkbtn1.pack()  \r\n  \r\nchkbtn2.pack()  \r\n  \r\nchkbtn3.pack()  \r\n  \r\ntop.mainloop()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-checkbutton.png\" alt=\"Python Tkinter Checkbutton\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Checkbutton is used to track the user&#8217;s choices provided to the application. In other words, we can say that Checkbutton is used to implement the on/off selections. The Checkbutton can contain the text or images. The Checkbutton is mostly used to provide many choices to the user among which, the user needs to choose [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2851"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2851"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2851/revisions"}],"predecessor-version":[{"id":2852,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2851/revisions/2852"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2851"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2851"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2851"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2853,"date":"2020-09-23T10:59:19","date_gmt":"2020-09-23T10:59:19","guid":{"rendered":"http://python3.foobrdigital.com/?p=2853"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-entry","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-entry/","title":{"rendered":"Python Tkinter Entry"},"content":{"rendered":"\n<p>The Entry widget is used to provde the single line text-box to the user to accept a value from the user. We can use the Entry widget to accept the text strings from the user. It can only be used for one line of text from the user. For multiple lines of text, we must use the text widget.</p>\n\n\n\n<p>The syntax to use the Entry widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Entry (parent, options)   </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>2</td><td>bd</td><td>The border width of the widget in pixels.</td></tr><tr><td>3</td><td>cursor</td><td>The mouse pointer will be changed to the cursor type set to the arrow, dot, etc.</td></tr><tr><td>4</td><td>exportselection</td><td>The text written inside the entry box will be automatically copied to the clipboard by default. We can set the exportselection to 0 to not copy this.</td></tr><tr><td>5</td><td>fg</td><td>It represents the color of the text.</td></tr><tr><td>6</td><td>font</td><td>It represents the font type of the text.</td></tr><tr><td>7</td><td>highlightbackground</td><td>It represents the color to display in the traversal highlight region when the widget does not have the input focus.</td></tr><tr><td>8</td><td>highlightcolor</td><td>It represents the color to use for the traversal highlight rectangle that is drawn around the widget when it has the input focus.</td></tr><tr><td>9</td><td>highlightthickness</td><td>It represents a non-negative value indicating the width of the highlight rectangle to draw around the outside of the widget when it has the input focus.</td></tr><tr><td>10</td><td>insertbackground</td><td>It represents the color to use as background in the area covered by the insertion cursor. This color will normally override either the normal background for the widget.</td></tr><tr><td>11</td><td>insertborderwidth</td><td>It represents a non-negative value indicating the width of the 3-D border to draw around the insertion cursor. The value may have any of the forms acceptable to Tk_GetPixels.</td></tr><tr><td>12</td><td>insertofftime</td><td>It represents a non-negative integer value indicating the number of milliseconds the insertion cursor should remain &#8220;off&#8221; in each blink cycle. If this option is zero, then the cursor doesn&#8217;t blink: it is on all the time.</td></tr><tr><td>13</td><td>insertontime</td><td>Specifies a non-negative integer value indicating the number of milliseconds the insertion cursor should remain &#8220;on&#8221; in each blink cycle.</td></tr><tr><td>14</td><td>insertwidth</td><td>It represents the value indicating the total width of the insertion cursor. The value may have any of the forms acceptable to Tk_GetPixels.</td></tr><tr><td>15</td><td>justify</td><td>It specifies how the text is organized if the text contains multiple lines.</td></tr><tr><td>16</td><td>relief</td><td>It specifies the type of the border. Its default value is FLAT.</td></tr><tr><td>17</td><td>selectbackground</td><td>The background color of the selected text.</td></tr><tr><td>18</td><td>selectborderwidth</td><td>The width of the border to display around the selected task.</td></tr><tr><td>19</td><td>selectforeground</td><td>The font color of the selected task.</td></tr><tr><td>20</td><td>show</td><td>It is used to show the entry text of some other type instead of the string. For example, the password is typed using stars (*).</td></tr><tr><td>21</td><td>textvariable</td><td>It is set to the instance of the StringVar to retrieve the text from the entry.</td></tr><tr><td>22</td><td>width</td><td>The width of the displayed text or image.</td></tr><tr><td>23</td><td>xscrollcommand</td><td>The entry widget can be linked to the horizontal scrollbar if we want the user to enter more text then the actual width of the widget.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\n  \r\nfrom tkinter import *  \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"400x250\")  \r\n  \r\nname = Label(top, text = \"Name\").place(x = 30,y = 50)  \r\n  \r\nemail = Label(top, text = \"Email\").place(x = 30, y = 90)  \r\n  \r\npassword = Label(top, text = \"Password\").place(x = 30, y = 130)  \r\n  \r\nsbmitbtn = Button(top, text = \"Submit\",activebackground = \"pink\", activeforeground = \"blue\").place(x = 30, y = 170)  \r\n  \r\ne1 = Entry(top).place(x = 80, y = 50)  \r\n  \r\n  \r\ne2 = Entry(top).place(x = 80, y = 90)  \r\n  \r\n  \r\ne3 = Entry(top).place(x = 95, y = 130)  \r\n  \r\ntop.mainloop()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-entry.png\" alt=\"Python Tkinter Entry\"/></figure>\n\n\n\n<h2>Entry widget methods</h2>\n\n\n\n<p>Python provides various methods to configure the data written inside the widget. There are the following methods provided by the Entry widget.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>delete(first, last = none)</td><td>It is used to delete the specified characters inside the widget.</td></tr><tr><td>2</td><td>get()</td><td>It is used to get the text written inside the widget.</td></tr><tr><td>3</td><td>icursor(index)</td><td>It is used to change the insertion cursor position. We can specify the index of the character before which, the cursor to be placed.</td></tr><tr><td>4</td><td>index(index)</td><td>It is used to place the cursor to the left of the character written at the specified index.</td></tr><tr><td>5</td><td>insert(index,s)</td><td>It is used to insert the specified string before the character placed at the specified index.</td></tr><tr><td>6</td><td>select_adjust(index)</td><td>It includes the selection of the character present at the specified index.</td></tr><tr><td>7</td><td>select_clear()</td><td>It clears the selection if some selection has been done.</td></tr><tr><td>8</td><td>select_form(index)</td><td>It sets the anchor index position to the character specified by the index.</td></tr><tr><td>9</td><td>select_present()</td><td>It returns true if some text in the Entry is selected otherwise returns false.</td></tr><tr><td>10</td><td>select_range(start,end)</td><td>It selects the characters to exist between the specified range.</td></tr><tr><td>11</td><td>select_to(index)</td><td>It selects all the characters from the beginning to the specified index.</td></tr><tr><td>12</td><td>xview(index)</td><td>It is used to link the entry widget to a horizontal scrollbar.</td></tr><tr><td>13</td><td>xview_scroll(number,what)</td><td>It is used to make the entry scrollable horizontally.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example: A simple calculator</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import tkinter as tk  \r\nfrom functools import partial  \r\n   \r\n   \r\ndef call_result(label_result, n1, n2):  \r\n    num1 = (n1.get())  \r\n    num2 = (n2.get())  \r\n    result = int(num1)+int(num2)  \r\n    label_result.config(text=\"Result = %d\" % result)  \r\n    return  \r\n   \r\nroot = tk.Tk()  \r\nroot.geometry('400x200+100+200')  \r\n  \r\nroot.title('Calculator')  \r\n   \r\nnumber1 = tk.StringVar()  \r\nnumber2 = tk.StringVar()  \r\n  \r\nlabelNum1 = tk.Label(root, text=\"A\").grid(row=1, column=0)  \r\n  \r\nlabelNum2 = tk.Label(root, text=\"B\").grid(row=2, column=0)  \r\n  \r\nlabelResult = tk.Label(root)  \r\n  \r\nlabelResult.grid(row=7, column=2)  \r\n  \r\nentryNum1 = tk.Entry(root, textvariable=number1).grid(row=1, column=2)  \r\n  \r\nentryNum2 = tk.Entry(root, textvariable=number2).grid(row=2, column=2)  \r\n  \r\ncall_result = partial(call_result, labelResult, number1, number2)  \r\n  \r\nbuttonCal = tk.Button(root, text=\"Calculate\", command=call_result).grid(row=3, column=0)  \r\n  \r\nroot.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-entry2.png\" alt=\"Python Tkinter Entry\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Entry widget is used to provde the single line text-box to the user to accept a value from the user. We can use the Entry widget to accept the text strings from the user. It can only be used for one line of text from the user. For multiple lines of text, we must [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2853"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2853"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2853/revisions"}],"predecessor-version":[{"id":2854,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2853/revisions/2854"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2853"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2853"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2853"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2855,"date":"2020-09-23T11:00:34","date_gmt":"2020-09-23T11:00:34","guid":{"rendered":"http://python3.foobrdigital.com/?p=2855"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-frame","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-frame/","title":{"rendered":"Python Tkinter Frame"},"content":{"rendered":"\n<p>Python Tkinter Frame widget is used to organize the group of widgets. It acts like a container which can be used to hold the other widgets. The rectangular areas of the screen are used to organize the widgets to the python application.</p>\n\n\n\n<p>The syntax to use the Frame widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Frame(parent,  options)  </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>bd</td><td>It represents the border width.</td></tr><tr><td>2</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>3</td><td>cursor</td><td>The mouse pointer is changed to the cursor type set to different values like an arrow, dot, etc.</td></tr><tr><td>4</td><td>height</td><td>The height of the frame.</td></tr><tr><td>5</td><td>highlightbackground</td><td>The color of the background color when it is under focus.</td></tr><tr><td>6</td><td>highlightcolor</td><td>The text color when the widget is under focus.</td></tr><tr><td>7</td><td>highlightthickness</td><td>It specifies the thickness around the border when the widget is under the focus.</td></tr><tr><td>8</td><td>relief</td><td>It specifies the type of the border. The default value if FLAT.</td></tr><tr><td>9</td><td>width</td><td>It represents the width of the widget.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"140x100\")  \r\nframe = Frame(top)  \r\nframe.pack()  \r\n  \r\nleftframe = Frame(top)  \r\nleftframe.pack(side = LEFT)  \r\n  \r\nrightframe = Frame(top)  \r\nrightframe.pack(side = RIGHT)  \r\n  \r\nbtn1 = Button(frame, text=\"Submit\", fg=\"red\",activebackground = \"red\")  \r\nbtn1.pack(side = LEFT)  \r\n  \r\nbtn2 = Button(frame, text=\"Remove\", fg=\"brown\", activebackground = \"brown\")  \r\nbtn2.pack(side = RIGHT)  \r\n  \r\nbtn3 = Button(rightframe, text=\"Add\", fg=\"blue\", activebackground = \"blue\")  \r\nbtn3.pack(side = LEFT)  \r\n  \r\nbtn4 = Button(leftframe, text=\"Modify\", fg=\"black\", activebackground = \"white\")  \r\nbtn4.pack(side = RIGHT)  \r\n  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-frame.png\" alt=\"Python Tkinter Frame\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Python Tkinter Frame widget is used to organize the group of widgets. It acts like a container which can be used to hold the other widgets. The rectangular areas of the screen are used to organize the widgets to the python application. The syntax to use the Frame widget is given below. Syntax A list [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2855"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2855"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2855/revisions"}],"predecessor-version":[{"id":2856,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2855/revisions/2856"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2855"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2855"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2855"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2857,"date":"2020-09-23T11:01:34","date_gmt":"2020-09-23T11:01:34","guid":{"rendered":"http://python3.foobrdigital.com/?p=2857"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-label","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-label/","title":{"rendered":"Python Tkinter Label"},"content":{"rendered":"\n<p>The Label is used to specify the container box where we can place the text or images. This widget is used to provide the message to the user about other widgets used in the python application.</p>\n\n\n\n<p>There are the various options which can be specified to configure the text or the part of the text shown in the Label.</p>\n\n\n\n<p>The syntax to use the Label is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Label (master, options)  </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>anchor</td><td>It specifies the exact position of the text within the size provided to the widget. The default value is CENTER, which is used to center the text within the specified space.</td></tr><tr><td>2</td><td>bg</td><td>The background color displayed behind the widget.</td></tr><tr><td>3</td><td>bitmap</td><td>It is used to set the bitmap to the graphical object specified so that, the label can represent the graphics instead of text.</td></tr><tr><td>4</td><td>bd</td><td>It represents the width of the border. The default is 2 pixels.</td></tr><tr><td>5</td><td>cursor</td><td>The mouse pointer will be changed to the type of the cursor specified, i.e., arrow, dot, etc.</td></tr><tr><td>6</td><td>font</td><td>The font type of the text written inside the widget.</td></tr><tr><td>7</td><td>fg</td><td>The foreground color of the text written inside the widget.</td></tr><tr><td>8</td><td>height</td><td>The height of the widget.</td></tr><tr><td>9</td><td>image</td><td>The image that is to be shown as the label.</td></tr><tr><td>10</td><td>justify</td><td>It is used to represent the orientation of the text if the text contains multiple lines. It can be set to LEFT for left justification, RIGHT for right justification, and CENTER for center justification.</td></tr><tr><td>11</td><td>padx</td><td>The horizontal padding of the text. The default value is 1.</td></tr><tr><td>12</td><td>pady</td><td>The vertical padding of the text. The default value is 1.</td></tr><tr><td>13</td><td>relief</td><td>The type of the border. The default value is FLAT.</td></tr><tr><td>14</td><td>text</td><td>This is set to the string variable which may contain one or more line of text.</td></tr><tr><td>15</td><td>textvariable</td><td>The text written inside the widget is set to the control variable StringVar so that it can be accessed and changed accordingly.</td></tr><tr><td>16</td><td>underline</td><td>We can display a line under the specified letter of the text. Set this option to the number of the letter under which the line will be displayed.</td></tr><tr><td>17</td><td>width</td><td>The width of the widget. It is specified as the number of characters.</td></tr><tr><td>18</td><td>wraplength</td><td>Instead of having only one line as the label text, we can break it to the number of lines where each line has the number of characters specified to this option.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\n  \r\nfrom tkinter import *  \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"400x250\")  \r\n  \r\n#creating label  \r\nuname = Label(top, text = \"Username\").place(x = 30,y = 50)  \r\n  \r\n#creating label  \r\npassword = Label(top, text = \"Password\").place(x = 30, y = 90)  \r\n  \r\n  \r\nsbmitbtn = Button(top, text = \"Submit\",activebackground = \"pink\", activeforeground = \"blue\").place(x = 30, y = 120)  \r\n  \r\ne1 = Entry(top,width = 20).place(x = 100, y = 50)  \r\n  \r\n  \r\ne2 = Entry(top, width = 20).place(x = 100, y = 90)  \r\n  \r\n  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-label.png\" alt=\"Python Tkinter Label\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Label is used to specify the container box where we can place the text or images. This widget is used to provide the message to the user about other widgets used in the python application. There are the various options which can be specified to configure the text or the part of the text [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2857"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2857"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2857/revisions"}],"predecessor-version":[{"id":2858,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2857/revisions/2858"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2857"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2857"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2857"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2859,"date":"2020-09-23T11:03:54","date_gmt":"2020-09-23T11:03:54","guid":{"rendered":"http://python3.foobrdigital.com/?p=2859"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-listbox","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-listbox/","title":{"rendered":"Python Tkinter Listbox"},"content":{"rendered":"\n<p>The Listbox widget is used to display the list items to the user. We can place only text items in the Listbox and all text items contain the same font and color.</p>\n\n\n\n<p>The user can choose one or more items from the list depending upon the configuration.</p>\n\n\n\n<p>The syntax to use the Listbox is given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Listbox(parent, options)   </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>2</td><td>bd</td><td>It represents the size of the border. Default value is 2 pixel.</td></tr><tr><td>3</td><td>cursor</td><td>The mouse pointer will look like the cursor type like dot, arrow, etc.</td></tr><tr><td>4</td><td>font</td><td>The font type of the Listbox items.</td></tr><tr><td>5</td><td>fg</td><td>The color of the text.</td></tr><tr><td>6</td><td>height</td><td>It represents the count of the lines shown in the Listbox. The default value is 10.</td></tr><tr><td>7</td><td>highlightcolor</td><td>The color of the Listbox items when the widget is under focus.</td></tr><tr><td>8</td><td>highlightthickness</td><td>The thickness of the highlight.</td></tr><tr><td>9</td><td>relief</td><td>The type of the border. The default is SUNKEN.</td></tr><tr><td>10</td><td>selectbackground</td><td>The background color that is used to display the selected text.</td></tr><tr><td>11</td><td>selectmode</td><td>It is used to determine the number of items that can be selected from the list. It can set to BROWSE, SINGLE, MULTIPLE, EXTENDED.</td></tr><tr><td>12</td><td>width</td><td>It represents the width of the widget in characters.</td></tr><tr><td>13</td><td>xscrollcommand</td><td>It is used to let the user scroll the Listbox horizontally.</td></tr><tr><td>14</td><td>yscrollcommand</td><td>It is used to let the user scroll the Listbox vertically.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>There are the following methods associated with the Listbox.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>activate(index)</td><td>It is used to select the lines at the specified index.</td></tr><tr><td>2</td><td>curselection()</td><td>It returns a tuple containing the line numbers of the selected element or elements, counting from 0. If nothing is selected, returns an empty tuple.</td></tr><tr><td>3</td><td>delete(first, last = None)</td><td>It is used to delete the lines which exist in the given range.</td></tr><tr><td>4</td><td>get(first, last = None)</td><td>It is used to get the list items that exist in the given range.</td></tr><tr><td>5</td><td>index(i)</td><td>It is used to place the line with the specified index at the top of the widget.</td></tr><tr><td>6</td><td>insert(index, *elements)</td><td>It is used to insert the new lines with the specified number of elements before the specified index.</td></tr><tr><td>7</td><td>nearest(y)</td><td>It returns the index of the nearest line to the y coordinate of the Listbox widget.</td></tr><tr><td>8</td><td>see(index)</td><td>It is used to adjust the position of the listbox to make the lines specified by the index visible.</td></tr><tr><td>9</td><td>size()</td><td>It returns the number of lines that are present in the Listbox widget.</td></tr><tr><td>10</td><td>xview()</td><td>This is used to make the widget horizontally scrollable.</td></tr><tr><td>11</td><td>xview_moveto(fraction)</td><td>It is used to make the listbox horizontally scrollable by the fraction of width of the longest line present in the listbox.</td></tr><tr><td>12</td><td>xview_scroll(number, what)</td><td>It is used to make the listbox horizontally scrollable by the number of characters specified.</td></tr><tr><td>13</td><td>yview()</td><td>It allows the Listbox to be vertically scrollable.</td></tr><tr><td>14</td><td>yview_moveto(fraction)</td><td>It is used to make the listbox vertically scrollable by the fraction of width of the longest line present in the listbox.</td></tr><tr><td>15</td><td>yview_scroll (number, what)</td><td>It is used to make the listbox vertically scrollable by the number of characters specified.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\n  \r\nfrom tkinter import *  \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x250\")  \r\n  \r\nlbl = Label(top,text = \"A list of favourite countries...\")  \r\n  \r\nlistbox = Listbox(top)  \r\n  \r\nlistbox.insert(1,\"India\")  \r\n  \r\nlistbox.insert(2, \"USA\")  \r\n  \r\nlistbox.insert(3, \"Japan\")  \r\n  \r\nlistbox.insert(4, \"Austrelia\")  \r\n  \r\nlbl.pack()  \r\nlistbox.pack()  \r\n  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-listbox.png\" alt=\"Python Tkinter Listbox\"/></figure>\n\n\n\n<h3>Example 2: Deleting the active items from the list</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\n  \r\nfrom tkinter import *  \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x250\")  \r\n  \r\nlbl = Label(top,text = \"A list of favourite countries...\")  \r\n  \r\nlistbox = Listbox(top)  \r\n  \r\nlistbox.insert(1,\"India\")  \r\n  \r\nlistbox.insert(2, \"USA\")  \r\n  \r\nlistbox.insert(3, \"Japan\")  \r\n  \r\nlistbox.insert(4, \"Austrelia\")  \r\n  \r\n#this button will delete the selected item from the list   \r\n  \r\nbtn = Button(top, text = \"delete\", command = lambda listbox=listbox: listbox.delete(ANCHOR))  \r\n  \r\nlbl.pack()  \r\n  \r\n  \r\nlistbox.pack()  \r\n  \r\nbtn.pack()  \r\ntop.mainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-listbox2.png\" alt=\"Python Tkinter Listbox\"/></figure>\n\n\n\n<p>After pressing the delete button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-listbox3.png\" alt=\"Python Tkinter Listbox\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>The Listbox widget is used to display the list items to the user. We can place only text items in the Listbox and all text items contain the same font and color. The user can choose one or more items from the list depending upon the configuration. The syntax to use the Listbox is given [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2859"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2859"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2859/revisions"}],"predecessor-version":[{"id":2860,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2859/revisions/2860"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2859"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2859"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2859"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2861,"date":"2020-09-23T11:04:47","date_gmt":"2020-09-23T11:04:47","guid":{"rendered":"http://python3.foobrdigital.com/?p=2861"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-menubutton","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-menubutton/","title":{"rendered":"Python Tkinter Menubutton"},"content":{"rendered":"\n<p>The Menubutton widget can be defined as the drop-down menu that is shown to the user all the time. It is used to provide the user a option to select the appropriate choice exist within the application.</p>\n\n\n\n<p>The Menubutton is used to implement various types of menus in the python application. A Menu is associated with the Menubutton that can display the choices of the Menubutton when clicked by the user.</p>\n\n\n\n<p>The syntax to use the python tkinter Menubutton is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<ol><li>w&nbsp;=&nbsp;Menubutton(Top,&nbsp;options)&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>A list of various options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>activebackground</td><td>The background color of the widget when the widget is under focus.</td></tr><tr><td>2</td><td>activeforeground</td><td>The font color of the widget text when the widget is under focus.</td></tr><tr><td>3</td><td>anchor</td><td>It specifies the exact position of the widget content when the widget is assigned more space than needed.</td></tr><tr><td>4</td><td>bg</td><td>It specifies the background color of the widget.</td></tr><tr><td>5</td><td>bitmap</td><td>It is set to the graphical content which is to be displayed to the widget.</td></tr><tr><td>6</td><td>bd</td><td>It represents the size of the border. The default value is 2 pixels.</td></tr><tr><td>7</td><td>cursor</td><td>The mouse pointer will be changed to the cursor type specified when the widget is under the focus. The possible value of the cursor type is arrow, or dot etc.</td></tr><tr><td>8</td><td>direction</td><td>It direction can be specified so that menu can be displayed to the specified direction of the button. Use LEFT, RIGHT, or ABOVE to place the widget accordingly.</td></tr><tr><td>9</td><td>disabledforeground</td><td>The text color of the widget when the widget is disabled.</td></tr><tr><td>10</td><td>fg</td><td>The normal foreground color of the widget.</td></tr><tr><td>11</td><td>height</td><td>The vertical dimension of the Menubutton. It is specified as the number of lines.</td></tr><tr><td>12</td><td>highlightcolor</td><td>The highlight color shown to the widget under focus.</td></tr><tr><td>13</td><td>image</td><td>The image displayed on the widget.</td></tr><tr><td>14</td><td>justify</td><td>This specified the exact position of the text under the widget when the text is unable to fill the width of the widget. We can use the LEFT for the left justification, RIGHT for the right justification, CENTER for the centre justification.</td></tr><tr><td>15</td><td>menu</td><td>It represents the menu specified with the Menubutton.</td></tr><tr><td>16</td><td>padx</td><td>The horizontal padding of the widget.</td></tr><tr><td>17</td><td>pady</td><td>The vertical padding of the widget.</td></tr><tr><td>18</td><td>relief</td><td>This option specifies the type of the border. The default value is RAISED.</td></tr><tr><td>19</td><td>state</td><td>The normal state of the Mousebutton is enabled. We can set it to DISABLED to make it unresponsive.</td></tr><tr><td>20</td><td>text</td><td>The text shown with the widget.</td></tr><tr><td>21</td><td>textvariable</td><td>We can set the control variable of string type to the text variable so that we can control the text of the widget at runtime.</td></tr><tr><td>22</td><td>underline</td><td>The text of the widget is not underlined by default but we can set this option to make the text of the widget underlined.</td></tr><tr><td>23</td><td>width</td><td>It represents the width of the widget in characters. The default value is 20.</td></tr><tr><td>24</td><td>wraplength</td><td>We can break the text of the widget in the number of lines so that the text contains the number of lines not greater than the specified value.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\n  \r\nfrom tkinter import *  \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x250\")  \r\n  \r\nmenubutton = Menubutton(top, text = \"Language\", relief = FLAT)  \r\n  \r\nmenubutton.grid()  \r\n  \r\nmenubutton.menu = Menu(menubutton)  \r\n  \r\nmenubutton&#91;\"menu\"]=menubutton.menu  \r\n  \r\nmenubutton.menu.add_checkbutton(label = \"Hindi\", variable=IntVar())  \r\n  \r\nmenubutton.menu.add_checkbutton(label = \"English\", variable = IntVar())  \r\n  \r\nmenubutton.pack()  \r\n  \r\ntop.mainloop()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-menubutton.png\" alt=\"Python Tkinter Menubutton\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Menubutton widget can be defined as the drop-down menu that is shown to the user all the time. It is used to provide the user a option to select the appropriate choice exist within the application. The Menubutton is used to implement various types of menus in the python application. A Menu is associated [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2861"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2861"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2861/revisions"}],"predecessor-version":[{"id":2862,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2861/revisions/2862"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2861"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2861"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2861"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2863,"date":"2020-09-23T11:06:04","date_gmt":"2020-09-23T11:06:04","guid":{"rendered":"http://python3.foobrdigital.com/?p=2863"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-menu","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-menu/","title":{"rendered":"Python Tkinter Menu"},"content":{"rendered":"\n<p>The Menu widget is used to create various types of menus (top level, pull down, and pop up) in the python application.</p>\n\n\n\n<p>The top-level menus are the one which is displayed just under the title bar of the parent window. We need to create a new instance of the Menu widget and add various commands to it by using the add() method.</p>\n\n\n\n<p>The syntax to use the Menu widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Menu(top, options)   </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>activebackground</td><td>The background color of the widget when the widget is under the focus.</td></tr><tr><td>2</td><td>activeborderwidth</td><td>The width of the border of the widget when it is under the mouse. The default is 1 pixel.</td></tr><tr><td>3</td><td>activeforeground</td><td>The font color of the widget when the widget has the focus.</td></tr><tr><td>4</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>5</td><td>bd</td><td>The border width of the widget.</td></tr><tr><td>6</td><td>cursor</td><td>The mouse pointer is changed to the cursor type when it hovers the widget. The cursor type can be set to arrow or dot.</td></tr><tr><td>7</td><td>disabledforeground</td><td>The font color of the widget when it is disabled.</td></tr><tr><td>8</td><td>font</td><td>The font type of the text of the widget.</td></tr><tr><td>9</td><td>fg</td><td>The foreground color of the widget.</td></tr><tr><td>10</td><td>postcommand</td><td>The postcommand can be set to any of the function which is called when the mourse hovers the menu.</td></tr><tr><td>11</td><td>relief</td><td>The type of the border of the widget. The default type is RAISED.</td></tr><tr><td>12</td><td>image</td><td>It is used to display an image on the menu.</td></tr><tr><td>13</td><td>selectcolor</td><td>The color used to display the checkbutton or radiobutton when they are selected.</td></tr><tr><td>14</td><td>tearoff</td><td>By default, the choices in the menu start taking place from position 1. If we set the tearoff = 1, then it will start taking place from 0th position.</td></tr><tr><td>15</td><td>title</td><td>Set this option to the title of the window if you want to change the title of the window.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The Menu widget contains the following methods.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>add_command(options)</td><td>It is used to add the Menu items to the menu.</td></tr><tr><td>2</td><td>add_radiobutton(options)</td><td>This method adds the radiobutton to the menu.</td></tr><tr><td>3</td><td>add_checkbutton(options)</td><td>This method is used to add the checkbuttons to the menu.</td></tr><tr><td>4</td><td>add_cascade(options)</td><td>It is used to create a hierarchical menu to the parent menu by associating the given menu to the parent menu.</td></tr><tr><td>5</td><td>add_seperator()</td><td>It is used to add the seperator line to the menu.</td></tr><tr><td>6</td><td>add(type, options)</td><td>It is used to add the specific menu item to the menu.</td></tr><tr><td>7</td><td>delete(startindex, endindex)</td><td>It is used to delete the menu items exist in the specified range.</td></tr><tr><td>8</td><td>entryconfig(index, options)</td><td>It is used to configure a menu item identified by the given index.</td></tr><tr><td>9</td><td>index(item)</td><td>It is used to get the index of the specified menu item.</td></tr><tr><td>10</td><td>insert_seperator(index)</td><td>It is used to insert a seperator at the specified index.</td></tr><tr><td>11</td><td>invoke(index)</td><td>It is used to invoke the associated with the choice given at the specified index.</td></tr><tr><td>12</td><td>type(index)</td><td>It is used to get the type of the choice specified by the index.</td></tr></tbody></table></figure>\n\n\n\n<h2>Creating a top level menu</h2>\n\n\n\n<p>A top-level menu can be created by instantiating the Menu widget and adding the menu items to the menu.</p>\n\n\n\n<h3>Example 1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\n  \r\nfrom tkinter import *  \r\n  \r\ntop = Tk()  \r\n  \r\ndef hello():  \r\n    print(\"hello!\")  \r\n  \r\n# create a toplevel menu  \r\nmenubar = Menu(root)  \r\nmenubar.add_command(label=\"Hello!\", command=hello)  \r\nmenubar.add_command(label=\"Quit!\", command=top.quit)  \r\n  \r\n# display the menu  \r\ntop.config(menu=menubar)  \r\n  \r\ntop.mainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-menu-output1.png\" alt=\"Python Tkinter Menu\"/></figure>\n\n\n\n<p>Clicking the hello Menubutton will print the hello on the console while clicking the Quit Menubutton will make an exit from the python application.</p>\n\n\n\n<h3>Example 2</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import Toplevel, Button, Tk, Menu  \r\n  \r\ntop = Tk()  \r\nmenubar = Menu(top)  \r\nfile = Menu(menubar, tearoff=0)  \r\nfile.add_command(label=\"New\")  \r\nfile.add_command(label=\"Open\")  \r\nfile.add_command(label=\"Save\")  \r\nfile.add_command(label=\"Save as...\")  \r\nfile.add_command(label=\"Close\")  \r\n  \r\nfile.add_separator()  \r\n  \r\nfile.add_command(label=\"Exit\", command=top.quit)  \r\n  \r\nmenubar.add_cascade(label=\"File\", menu=file)  \r\nedit = Menu(menubar, tearoff=0)  \r\nedit.add_command(label=\"Undo\")  \r\n  \r\nedit.add_separator()  \r\n  \r\nedit.add_command(label=\"Cut\")  \r\nedit.add_command(label=\"Copy\")  \r\nedit.add_command(label=\"Paste\")  \r\nedit.add_command(label=\"Delete\")  \r\nedit.add_command(label=\"Select All\")  \r\n  \r\nmenubar.add_cascade(label=\"Edit\", menu=edit)  \r\nhelp = Menu(menubar, tearoff=0)  \r\nhelp.add_command(label=\"About\")  \r\nmenubar.add_cascade(label=\"Help\", menu=help)  \r\n  \r\ntop.config(menu=menubar)  \r\ntop.mainloop()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-menu-output2.png\" alt=\"Python Tkinter Menu\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>The Menu widget is used to create various types of menus (top level, pull down, and pop up) in the python application. The top-level menus are the one which is displayed just under the title bar of the parent window. We need to create a new instance of the Menu widget and add various commands [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2863"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2863"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2863/revisions"}],"predecessor-version":[{"id":2864,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2863/revisions/2864"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2863"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2863"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2863"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2865,"date":"2020-09-23T11:07:08","date_gmt":"2020-09-23T11:07:08","guid":{"rendered":"http://python3.foobrdigital.com/?p=2865"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-message","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-message/","title":{"rendered":"Python Tkinter Message"},"content":{"rendered":"\n<p>The Message widget is used to show the message to the user regarding the behaviour of the python application. The message widget shows the text messages to the user which can not be edited.</p>\n\n\n\n<p>The message text contains more than one line. However, the message can only be shown in the single font.</p>\n\n\n\n<p>The syntax to use the Message widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Message(parent, options)  </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>anchor</td><td>It is used to decide the exact position of the text within the space provided to the widget if the widget contains more space than the need of the text. The default is CENTER.</td></tr><tr><td>2</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>3</td><td>bitmap</td><td>It is used to display the graphics on the widget. It can be set to any graphical or image object.</td></tr><tr><td>4</td><td>bd</td><td>It represents the size of the border in the pixel. The default size is 2 pixel.</td></tr><tr><td>5</td><td>cursor</td><td>The mouse pointer is changed to the specified cursor type. The cursor type can be an arrow, dot, etc.</td></tr><tr><td>6</td><td>font</td><td>The font type of the widget text.</td></tr><tr><td>7</td><td>fg</td><td>The font color of the widget text.</td></tr><tr><td>8</td><td>height</td><td>The vertical dimension of the message.</td></tr><tr><td>9</td><td>image</td><td>We can set this option to a static image to show that onto the widget.</td></tr><tr><td>10</td><td>justify</td><td>This option is used to specify the alignment of multiple line of code with respect to each other. The possible values can be LEFT (left alignment), CENTER (default), and RIGHT (right alignment).</td></tr><tr><td>11</td><td>padx</td><td>The horizontal padding of the widget.</td></tr><tr><td>12</td><td>pady</td><td>The vertical padding of the widget.</td></tr><tr><td>13</td><td>relief</td><td>It represents the type of the border. The default type is FLAT.</td></tr><tr><td>14</td><td>text</td><td>We can set this option to the string so that the widget can represent the specified text.</td></tr><tr><td>15</td><td>textvariable</td><td>This is used to control the text represented by the widget. The textvariable can be set to the text that is shown in the widget.</td></tr><tr><td>16</td><td>underline</td><td>The default value of this option is -1 that represents no underline. We can set this option to an existing number to specify that nth letter of the string will be underlined.</td></tr><tr><td>17</td><td>width</td><td>It specifies the horizontal dimension of the widget in the number of characters (not pixel).</td></tr><tr><td>18</td><td>wraplength</td><td>We can wrap the text to the number of lines by setting this option to the desired number so that each line contains only that number of characters.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"100x100\")  \r\nvar = StringVar()  \r\nmsg = Message( top, text = \"Welcome to Javatpoint\")  \r\n  \r\nmsg.pack()  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-message-output.png\" alt=\"Python Tkinter Message\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Message widget is used to show the message to the user regarding the behaviour of the python application. The message widget shows the text messages to the user which can not be edited. The message text contains more than one line. However, the message can only be shown in the single font. The syntax [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2865"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2865"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2865/revisions"}],"predecessor-version":[{"id":2866,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2865/revisions/2866"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2865"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2865"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2865"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2867,"date":"2020-09-23T11:08:57","date_gmt":"2020-09-23T11:08:57","guid":{"rendered":"http://python3.foobrdigital.com/?p=2867"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-radiobutton","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-radiobutton/","title":{"rendered":"Python Tkinter Radiobutton"},"content":{"rendered":"\n<p>The Radiobutton widget is used to implement one-of-many selection in the python application. It shows multiple choices to the user out of which, the user can select only one out of them. We can associate different methods with each of the radiobutton.</p>\n\n\n\n<p>We can display the multiple line text or images on the radiobuttons. To keep track the user&#8217;s selection the radiobutton, it is associated with a single variable. Each button displays a single value for that particular variable.</p>\n\n\n\n<p>The syntax to use the Radiobutton is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Radiobutton(top, options)  </code></pre>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>activebackground</td><td>The background color of the widget when it has the focus.</td></tr><tr><td>2</td><td>activeforeground</td><td>The font color of the widget text when it has the focus.</td></tr><tr><td>3</td><td>anchor</td><td>It represents the exact position of the text within the widget if the widget contains more space than the requirement of the text. The default value is CENTER.</td></tr><tr><td>4</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>5</td><td>bitmap</td><td>It is used to display the graphics on the widget. It can be set to any graphical or image object.</td></tr><tr><td>6</td><td>borderwidth</td><td>It represents the size of the border.</td></tr><tr><td>7</td><td>command</td><td>This option is set to the procedure which must be called every-time when the state of the radiobutton is changed.</td></tr><tr><td>8</td><td>cursor</td><td>The mouse pointer is changed to the specified cursor type. It can be set to the arrow, dot, etc.</td></tr><tr><td>9</td><td>font</td><td>It represents the font type of the widget text.</td></tr><tr><td>10</td><td>fg</td><td>The normal foreground color of the widget text.</td></tr><tr><td>11</td><td>height</td><td>The vertical dimension of the widget. It is specified as the number of lines (not pixel).</td></tr><tr><td>12</td><td>highlightcolor</td><td>It represents the color of the focus highlight when the widget has the focus.</td></tr><tr><td>13</td><td>highlightbackground</td><td>The color of the focus highlight when the widget is not having the focus.</td></tr><tr><td>14</td><td>image</td><td>It can be set to an image object if we want to display an image on the radiobutton instead the text.</td></tr><tr><td>15</td><td>justify</td><td>It represents the justification of the multi-line text. It can be set to CENTER(default), LEFT, or RIGHT.</td></tr><tr><td>16</td><td>padx</td><td>The horizontal padding of the widget.</td></tr><tr><td>17</td><td>pady</td><td>The vertical padding of the widget.</td></tr><tr><td>18</td><td>relief</td><td>The type of the border. The default value is FLAT.</td></tr><tr><td>19</td><td>selectcolor</td><td>The color of the radio button when it is selected.</td></tr><tr><td>20</td><td>selectimage</td><td>The image to be displayed on the radiobutton when it is selected.</td></tr><tr><td>21</td><td>state</td><td>It represents the state of the radio button. The default state of the Radiobutton is NORMAL. However, we can set this to DISABLED to make the radiobutton unresponsive.</td></tr><tr><td>22</td><td>text</td><td>The text to be displayed on the radiobutton.</td></tr><tr><td>23</td><td>textvariable</td><td>It is of String type that represents the text displayed by the widget.</td></tr><tr><td>24</td><td>underline</td><td>The default value of this option is -1, however, we can set this option to the number of character which is to be underlined.</td></tr><tr><td>25</td><td>value</td><td>The value of each radiobutton is assigned to the control variable when it is turned on by the user.</td></tr><tr><td>26</td><td>variable</td><td>It is the control variable which is used to keep track of the user&#8217;s choices. It is shared among all the radiobuttons.</td></tr><tr><td>27</td><td>width</td><td>The horizontal dimension of the widget. It is represented as the number of characters.</td></tr><tr><td>28</td><td>wraplength</td><td>We can wrap the text to the number of lines by setting this option to the desired number so that each line contains only that number of characters.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The radiobutton widget provides the following methods.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>deselect()</td><td>It is used to turn of the radiobutton.</td></tr><tr><td>2</td><td>flash()</td><td>It is used to flash the radiobutton between its active and normal colors few times.</td></tr><tr><td>3</td><td>invoke()</td><td>It is used to call any procedure associated when the state of a Radiobutton is changed.</td></tr><tr><td>4</td><td>select()</td><td>It is used to select the radiobutton.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *  \r\n  \r\ndef selection():  \r\n   selection = \"You selected the option \" + str(radio.get())  \r\n   label.config(text = selection)  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"300x150\")  \r\nradio = IntVar()  \r\nlbl = Label(text = \"Favourite programming language:\")  \r\nlbl.pack()  \r\nR1 = Radiobutton(top, text=\"C\", variable=radio, value=1,  \r\n                  command=selection)  \r\nR1.pack( anchor = W )  \r\n  \r\nR2 = Radiobutton(top, text=\"C++\", variable=radio, value=2,  \r\n                  command=selection)  \r\nR2.pack( anchor = W )  \r\n  \r\nR3 = Radiobutton(top, text=\"Java\", variable=radio, value=3,  \r\n                  command=selection)  \r\nR3.pack( anchor = W)  \r\n  \r\nlabel = Label(top)  \r\nlabel.pack()  \r\ntop.mainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-radiobutton-output.png\" alt=\"Python Tkinter Radiobutton\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Radiobutton widget is used to implement one-of-many selection in the python application. It shows multiple choices to the user out of which, the user can select only one out of them. We can associate different methods with each of the radiobutton. We can display the multiple line text or images on the radiobuttons. To [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2867"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2867"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2867/revisions"}],"predecessor-version":[{"id":2869,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2867/revisions/2869"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2867"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2867"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2867"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2870,"date":"2020-09-23T11:35:34","date_gmt":"2020-09-23T11:35:34","guid":{"rendered":"http://python3.foobrdigital.com/?p=2870"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-scale","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-scale/","title":{"rendered":"Python Tkinter Scale"},"content":{"rendered":"\n<p>The Scale widget is used to implement the graphical slider to the python application so that the user can slide through the range of values shown on the slider and select the one among them.</p>\n\n\n\n<p>We can control the minimum and maximum values along with the resolution of the scale. It provides an alternative to the Entry widget when the user is forced to select only one value from the given range of values.</p>\n\n\n\n<p>The syntax to use the Scale widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Scale(top, options)   </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>activebackground</td><td>The background color of the widget when it has the focus.</td></tr><tr><td>2</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>3</td><td>bd</td><td>The border size of the widget. The default is 2 pixel.</td></tr><tr><td>4</td><td>command</td><td>It is set to the procedure which is called each time when we move the slider. If the slider is moved rapidly, the callback is done when it settles.</td></tr><tr><td>5</td><td>cursor</td><td>The mouse pointer is changed to the cursor type assigned to this option. It can be an arrow, dot, etc.</td></tr><tr><td>6</td><td>digits</td><td>If the control variable used to control the scale data is of string type, this option is used to specify the number of digits when the numeric scale is converted to a string.</td></tr><tr><td>7</td><td>font</td><td>The font type of the widget text.</td></tr><tr><td>8</td><td>fg</td><td>The foreground color of the text.</td></tr><tr><td>9</td><td>from_</td><td>It is used to represent one end of the widget range.</td></tr><tr><td>10</td><td>highlightbackground</td><td>The highlight color when the widget doesn&#8217;t have the focus.</td></tr><tr><td>11</td><td>highlighcolor</td><td>The highlight color when the widget has the focus.</td></tr><tr><td>12</td><td>label</td><td>This can be set to some text which can be shown as a label with the scale. It is shown in the top left corner if the scale is horizontal or the top right corner if the scale is vertical.</td></tr><tr><td>13</td><td>length</td><td>It represents the length of the widget. It represents the X dimension if the scale is horizontal or y dimension if the scale is vertical.</td></tr><tr><td>14</td><td>orient</td><td>It can be set to horizontal or vertical depending upon the type of the scale.</td></tr><tr><td>15</td><td>relief</td><td>It represents the type of the border. The default is FLAT.</td></tr><tr><td>16</td><td>repeatdelay</td><td>This option tells the duration up to which the button is to be pressed before the slider starts moving in that direction repeatedly. The default is 300 ms.</td></tr><tr><td>17</td><td>resolution</td><td>It is set to the smallest change which is to be made to the scale value.</td></tr><tr><td>18</td><td>showvalue</td><td>The value of the scale is shown in the text form by default. We can set this option to 0 to suppress the label.</td></tr><tr><td>19</td><td>sliderlength</td><td>It represents the length of the slider window along the length of the scale. The default is 30 pixels. However, we can change it to the appropriate value.</td></tr><tr><td>20</td><td>state</td><td>The scale widget is active by default. We can set this to DISABLED to make it unresponsive.</td></tr><tr><td>21</td><td>takefocus</td><td>The focus cycles through the scale widgets by default. We can set this option to 0 if we don&#8217;t want this to happen.</td></tr><tr><td>22</td><td>tickinterval</td><td>The scale values are displayed on the multiple of the specified tick interval. The default value of the tickinterval is 0.</td></tr><tr><td>23</td><td>to</td><td>It represents a float or integer value that specifies the other end of the range represented by the scale.</td></tr><tr><td>24</td><td>troughcolor</td><td>It represents the color of the through.</td></tr><tr><td>25</td><td>variable</td><td>It represents the control variable for the scale.</td></tr><tr><td>26</td><td>width</td><td>It represents the width of the through part of the widget.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>get()</td><td>It is used to get the current value of the scale.</td></tr><tr><td>2</td><td>set(value)</td><td>It is used to set the value of the scale.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *  \r\n  \r\ndef select():  \r\n   sel = \"Value = \" + str(v.get())  \r\n   label.config(text = sel)  \r\n     \r\ntop = Tk()  \r\ntop.geometry(\"200x100\")  \r\nv = DoubleVar()  \r\nscale = Scale( top, variable = v, from_ = 1, to = 50, orient = HORIZONTAL)  \r\nscale.pack(anchor=CENTER)  \r\n  \r\nbtn = Button(top, text=\"Value\", command=select)  \r\nbtn.pack(anchor=CENTER)  \r\n  \r\nlabel = Label(top)  \r\nlabel.pack()  \r\n  \r\ntop.mainloop()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-scale-output.png\" alt=\"Python Tkinter Scale\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>The Scale widget is used to implement the graphical slider to the python application so that the user can slide through the range of values shown on the slider and select the one among them. We can control the minimum and maximum values along with the resolution of the scale. It provides an alternative to [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2870"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2870"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2870/revisions"}],"predecessor-version":[{"id":2872,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2870/revisions/2872"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2870"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2870"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2870"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2873,"date":"2020-09-23T11:37:21","date_gmt":"2020-09-23T11:37:21","guid":{"rendered":"http://python3.foobrdigital.com/?p=2873"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-scrollbar","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-scrollbar/","title":{"rendered":"Python Tkinter Scrollbar"},"content":{"rendered":"\n<p>The scrollbar widget is used to scroll down the content of the other widgets like listbox, text, and canvas. However, we can also create the horizontal scrollbars to the Entry widget.</p>\n\n\n\n<p>The syntax to use the Scrollbar widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Scrollbar(top, options)   </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>activebackground</td><td>The background color of the widget when it has the focus.</td></tr><tr><td>2</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>3</td><td>bd</td><td>The border width of the widget.</td></tr><tr><td>4</td><td>command</td><td>It can be set to the procedure associated with the list which can be called each time when the scrollbar is moved.</td></tr><tr><td>5</td><td>cursor</td><td>The mouse pointer is changed to the cursor type set to this option which can be an arrow, dot, etc.</td></tr><tr><td>6</td><td>elementborderwidth</td><td>It represents the border width around the arrow heads and slider. The default value is -1.</td></tr><tr><td>7</td><td>Highlightbackground</td><td>The focus highlighcolor when the widget doesn&#8217;t have the focus.</td></tr><tr><td>8</td><td>highlighcolor</td><td>The focus highlighcolor when the widget has the focus.</td></tr><tr><td>9</td><td>highlightthickness</td><td>It represents the thickness of the focus highlight.</td></tr><tr><td>10</td><td>jump</td><td>It is used to control the behavior of the scroll jump. If it set to 1, then the callback is called when the user releases the mouse button.</td></tr><tr><td>11</td><td>orient</td><td>It can be set to HORIZONTAL or VERTICAL depending upon the orientation of the scrollbar.</td></tr><tr><td>12</td><td>repeatdelay</td><td>This option tells the duration up to which the button is to be pressed before the slider starts moving in that direction repeatedly. The default is 300 ms.</td></tr><tr><td>13</td><td>repeatinterval</td><td>The default value of the repeat interval is 100.</td></tr><tr><td>14</td><td>takefocus</td><td>We can tab the focus through this widget by default. We can set this option to 0 if we don&#8217;t want this behavior.</td></tr><tr><td>15</td><td>troughcolor</td><td>It represents the color of the trough.</td></tr><tr><td>16</td><td>width</td><td>It represents the width of the scrollbar.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The widget provides the following methods.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>get()</td><td>It returns the two numbers a and b which represents the current position of the scrollbar.</td></tr><tr><td>2</td><td>set(first, last)</td><td>It is used to connect the scrollbar to the other widget w. The yscrollcommand or xscrollcommand of the other widget to this method.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *  \r\n  \r\ntop = Tk()  \r\nsb = Scrollbar(top)  \r\nsb.pack(side = RIGHT, fill = Y)  \r\n  \r\nmylist = Listbox(top, yscrollcommand = sb.set )  \r\n  \r\nfor line in range(30):  \r\n    mylist.insert(END, \"Number \" + str(line))  \r\n  \r\nmylist.pack( side = LEFT )  \r\nsb.config( command = mylist.yview )  \r\n  \r\nmainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-scrollbar-output.png\" alt=\"Python Tkinter Scrollbar\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The scrollbar widget is used to scroll down the content of the other widgets like listbox, text, and canvas. However, we can also create the horizontal scrollbars to the Entry widget. The syntax to use the Scrollbar widget is given below. Syntax A list of possible options is given below. SN Option Description 1 activebackground [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2873"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2873"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2873/revisions"}],"predecessor-version":[{"id":2874,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2873/revisions/2874"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2873"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2873"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2873"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2875,"date":"2020-09-23T11:39:55","date_gmt":"2020-09-23T11:39:55","guid":{"rendered":"http://python3.foobrdigital.com/?p=2875"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-text","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-text/","title":{"rendered":"Python Tkinter Text"},"content":{"rendered":"\n<p>The Text widget is used to show the text data on the Python application. However, Tkinter provides us the Entry widget which is used to implement the single line text box.</p>\n\n\n\n<p>The Text widget is used to display the multi-line formatted text with various styles and attributes. The Text widget is mostly used to provide the text editor to the user.</p>\n\n\n\n<p>The Text widget also facilitates us to use the marks and tabs to locate the specific sections of the Text. We can also use the windows and images with the Text as it can also be used to display the formatted text.</p>\n\n\n\n<p>The syntax to use the Text widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Text(top, options)  </code></pre>\n\n\n\n<p>A list of possible options that can be used with the Text widget is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>2</td><td>bd</td><td>It represents the border width of the widget.</td></tr><tr><td>3</td><td>cursor</td><td>The mouse pointer is changed to the specified cursor type, i.e. arrow, dot, etc.</td></tr><tr><td>4</td><td>exportselection</td><td>The selected text is exported to the selection in the window manager. We can set this to 0 if we don&#8217;t want the text to be exported.</td></tr><tr><td>5</td><td>font</td><td>The font type of the text.</td></tr><tr><td>6</td><td>fg</td><td>The text color of the widget.</td></tr><tr><td>7</td><td>height</td><td>The vertical dimension of the widget in lines.</td></tr><tr><td>8</td><td>highlightbackground</td><td>The highlightcolor when the widget doesn&#8217;t has the focus.</td></tr><tr><td>9</td><td>highlightthickness</td><td>The thickness of the focus highlight. The default value is 1.</td></tr><tr><td>10</td><td>highlighcolor</td><td>The color of the focus highlight when the widget has the focus.</td></tr><tr><td>11</td><td>insertbackground</td><td>It represents the color of the insertion cursor.</td></tr><tr><td>12</td><td>insertborderwidth</td><td>It represents the width of the border around the cursor. The default is 0.</td></tr><tr><td>13</td><td>insertofftime</td><td>The time amount in Milliseconds during which the insertion cursor is off in the blink cycle.</td></tr><tr><td>14</td><td>insertontime</td><td>The time amount in Milliseconds during which the insertion cursor is on in the blink cycle.</td></tr><tr><td>15</td><td>insertwidth</td><td>It represents the width of the insertion cursor.</td></tr><tr><td>16</td><td>padx</td><td>The horizontal padding of the widget.</td></tr><tr><td>17</td><td>pady</td><td>The vertical padding of the widget.</td></tr><tr><td>18</td><td>relief</td><td>The type of the border. The default is SUNKEN.</td></tr><tr><td>19</td><td>selectbackground</td><td>The background color of the selected text.</td></tr><tr><td>20</td><td>selectborderwidth</td><td>The width of the border around the selected text.</td></tr><tr><td>21</td><td>spacing1</td><td>It specifies the amount of vertical space given above each line of the text. The default is 0.</td></tr><tr><td>22</td><td>spacing2</td><td>This option specifies how much extra vertical space to add between displayed lines of text when a logical line wraps. The default is 0.</td></tr><tr><td>23</td><td>spacing3</td><td>It specifies the amount of vertical space to insert below each line of the text.</td></tr><tr><td>24</td><td>state</td><td>It the state is set to DISABLED, the widget becomes unresponsive to the mouse and keyboard unresponsive.</td></tr><tr><td>25</td><td>tabs</td><td>This option controls how the tab character is used to position the text.</td></tr><tr><td>26</td><td>width</td><td>It represents the width of the widget in characters.</td></tr><tr><td>27</td><td>wrap</td><td>This option is used to wrap the wider lines into multiple lines. Set this option to the WORD to wrap the lines after the word that fit into the available space. The default value is CHAR which breaks the line which gets too wider at any character.</td></tr><tr><td>28</td><td>xscrollcommand</td><td>To make the Text widget horizontally scrollable, we can set this option to the set() method of Scrollbar widget.</td></tr><tr><td>29</td><td>yscrollcommand</td><td>To make the Text widget vertically scrollable, we can set this option to the set() method of Scrollbar widget.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>We can use the following methods with the Text widget.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>delete(startindex, endindex)</td><td>This method is used to delete the characters of the specified range.</td></tr><tr><td>2</td><td>get(startindex, endindex)</td><td>It returns the characters present in the specified range.</td></tr><tr><td>3</td><td>index(index)</td><td>It is used to get the absolute index of the specified index.</td></tr><tr><td>4</td><td>insert(index, string)</td><td>It is used to insert the specified string at the given index.</td></tr><tr><td>5</td><td>see(index)</td><td>It returns a boolean value true or false depending upon whether the text at the specified index is visible or not.</td></tr></tbody></table></figure>\n\n\n\n<h2>Mark handling methods</h2>\n\n\n\n<p>Marks are used to bookmark the specified position between the characters of the associated text.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>index(mark)</td><td>It is used to get the index of the specified mark.</td></tr><tr><td>2</td><td>mark_gravity(mark, gravity)</td><td>It is used to get the gravity of the given mark.</td></tr><tr><td>3</td><td>mark_names()</td><td>It is used to get all the marks present in the Text widget.</td></tr><tr><td>4</td><td>mark_set(mark, index)</td><td>It is used to inform a new position of the given mark.</td></tr><tr><td>5</td><td>mark_unset(mark)</td><td>It is used to remove the given mark from the text.</td></tr></tbody></table></figure>\n\n\n\n<h2>Tag handling methods</h2>\n\n\n\n<p>The tags are the names given to the separate areas of the text. The tags are used to configure the different areas of the text separately. The list of tag-handling methods along with the description is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>tag_add(tagname, startindex, endindex)</td><td>This method is used to tag the string present in the specified range.</td></tr><tr><td>2</td><td>tag_config</td><td>This method is used to configure the tag properties.</td></tr><tr><td>3</td><td>tag_delete(tagname)</td><td>This method is used to delete a given tag.</td></tr><tr><td>4</td><td>tag_remove(tagname, startindex, endindex)</td><td>This method is used to remove a tag from the specified range.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *  \r\n  \r\ntop = Tk()  \r\ntext = Text(top)  \r\ntext.insert(INSERT, \"Name.....\")  \r\ntext.insert(END, \"Salary.....\")  \r\n  \r\ntext.pack()  \r\n  \r\ntext.tag_add(\"Write Here\", \"1.0\", \"1.4\")  \r\ntext.tag_add(\"Click Here\", \"1.8\", \"1.13\")  \r\n  \r\ntext.tag_config(\"Write Here\", background=\"yellow\", foreground=\"black\")  \r\ntext.tag_config(\"Click Here\", background=\"black\", foreground=\"white\")  \r\n  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-text-output.png\" alt=\"Python Tkinter Text\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Text widget is used to show the text data on the Python application. However, Tkinter provides us the Entry widget which is used to implement the single line text box. The Text widget is used to display the multi-line formatted text with various styles and attributes. The Text widget is mostly used to provide [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2875"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2875"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2875/revisions"}],"predecessor-version":[{"id":2876,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2875/revisions/2876"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2875"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2875"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2875"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2877,"date":"2020-09-23T11:42:14","date_gmt":"2020-09-23T11:42:14","guid":{"rendered":"http://python3.foobrdigital.com/?p=2877"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"tkinter-toplevel","status":"publish","type":"post","link":"https://python3.foobrdigital.com/tkinter-toplevel/","title":{"rendered":"Tkinter Toplevel"},"content":{"rendered":"\n<p>The Toplevel widget is used to create and display the toplevel windows which are directly managed by the window manager. The toplevel widget may or may not have the parent window on the top of them.</p>\n\n\n\n<p>The toplevel widget is used when a python application needs to represent some extra information, pop-up, or the group of widgets on the new window.</p>\n\n\n\n<p>The toplevel windows have the title bars, borders, and other window decorations.</p>\n\n\n\n<p>The syntax to use the Toplevel widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Toplevel(options)   </code></pre>\n\n\n\n<p>A List of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Options</th><th>Description</th></tr><tr><td>1</td><td>bg</td><td>It represents the background color of the window.</td></tr><tr><td>2</td><td>bd</td><td>It represents the border size of the window.</td></tr><tr><td>3</td><td>cursor</td><td>The mouse pointer is changed to the cursor type set to the arrow, dot, etc. when the mouse is in the window.</td></tr><tr><td>4</td><td>class_</td><td>The text selected in the text widget is exported to be selected to the window manager. We can set this to 0 to make this behavior false.</td></tr><tr><td>5</td><td>font</td><td>The font type of the text inserted into the widget.</td></tr><tr><td>6</td><td>fg</td><td>The foreground color of the widget.</td></tr><tr><td>7</td><td>height</td><td>It represents the height of the window.</td></tr><tr><td>8</td><td>relief</td><td>It represents the type of the window.</td></tr><tr><td>9</td><td>width</td><td>It represents the width of the window,</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>The methods associated with the Toplevel widget is given in the following list.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>deiconify()</td><td>This method is used to display the window.</td></tr><tr><td>2</td><td>frame()</td><td>It is used to show a system dependent window identifier.</td></tr><tr><td>3</td><td>group(window)</td><td>It is used to add this window to the specified window group.</td></tr><tr><td>4</td><td>iconify()</td><td>It is used to convert the toplevel window into an icon.</td></tr><tr><td>5</td><td>protocol(name, function)</td><td>It is used to mention a function which will be called for the specific protocol.</td></tr><tr><td>6</td><td>state()</td><td>It is used to get the current state of the window. Possible values are normal, iconic, withdrawn, and icon.</td></tr><tr><td>7</td><td>transient([master])</td><td>It is used to convert this window to a transient window (temporary).</td></tr><tr><td>8</td><td>withdraw()</td><td>It is used to delete the window but doesn&#8217;t destroy it.</td></tr><tr><td>9</td><td>maxsize(width, height)</td><td>It is used to declare the maximum size for the window.</td></tr><tr><td>10</td><td>minsize(width, height)</td><td>It is used to declare the minimum size for the window.</td></tr><tr><td>11</td><td>positionfrom(who)</td><td>It is used to define the position controller.</td></tr><tr><td>12</td><td>resizable(width, height)</td><td>It is used to control whether the window can be resizable or not.</td></tr><tr><td>13</td><td>sizefrom(who)</td><td>It is used to define the size controller.</td></tr><tr><td>14</td><td>title(string)</td><td>It is used to define the title for the window.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *  \r\n  \r\nroot = Tk()  \r\n  \r\nroot.geometry(\"200x200\")  \r\n  \r\ndef open():  \r\n    top = Toplevel(root)  \r\n    top.mainloop()  \r\n  \r\nbtn = Button(root, text = \"open\", command = open)  \r\n  \r\nbtn.place(x=75,y=50)  \r\n  \r\nroot.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-toplevel-output.png\" alt=\"Python Tkinter Toplevel\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Toplevel widget is used to create and display the toplevel windows which are directly managed by the window manager. The toplevel widget may or may not have the parent window on the top of them. The toplevel widget is used when a python application needs to represent some extra information, pop-up, or the group [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2877"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2877"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2877/revisions"}],"predecessor-version":[{"id":2878,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2877/revisions/2878"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2877"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2877"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2877"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2879,"date":"2020-09-23T11:43:21","date_gmt":"2020-09-23T11:43:21","guid":{"rendered":"http://python3.foobrdigital.com/?p=2879"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"python-tkinter-spinbox","status":"publish","type":"post","link":"https://python3.foobrdigital.com/python-tkinter-spinbox/","title":{"rendered":"Python Tkinter Spinbox"},"content":{"rendered":"\n<p>The Spinbox widget is an alternative to the Entry widget. It provides the range of values to the user, out of which, the user can select the one.</p>\n\n\n\n<p>It is used in the case where a user is given some fixed number of values to choose from.</p>\n\n\n\n<p>We can use various options with the Spinbox to decorate the widget. The syntax to use the Spinbox is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = Spinbox(top, options)   </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>activebackground</td><td>The background color of the widget when it has the focus.</td></tr><tr><td>2</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>3</td><td>bd</td><td>The border width of the widget.</td></tr><tr><td>4</td><td>command</td><td>The associated callback with the widget which is called each time the state of the widget is called.</td></tr><tr><td>5</td><td>cursor</td><td>The mouse pointer is changed to the cursor type assigned to this option.</td></tr><tr><td>6</td><td>disabledbackground</td><td>The background color of the widget when it is disabled.</td></tr><tr><td>7</td><td>disabledforeground</td><td>The foreground color of the widget when it is disabled.</td></tr><tr><td>8</td><td>fg</td><td>The normal foreground color of the widget.</td></tr><tr><td>9</td><td>font</td><td>The font type of the widget content.</td></tr><tr><td>10</td><td>format</td><td>This option is used for the format string. It has no default value.</td></tr><tr><td>11</td><td>from_</td><td>It is used to show the starting range of the widget.</td></tr><tr><td>12</td><td>justify</td><td>It is used to specify the justification of the multi-line widget content. The default is LEFT.</td></tr><tr><td>13</td><td>relief</td><td>It is used to specify the type of the border. The default is SUNKEN.</td></tr><tr><td>14</td><td>repeatdelay</td><td>This option is used to control the button auto repeat. The value is given in milliseconds.</td></tr><tr><td>15</td><td>repeatinterval</td><td>It is similar to repeatdelay. The value is given in milliseconds.</td></tr><tr><td>16</td><td>state</td><td>It represents the state of the widget. The default is NORMAL. The possible values are NORMAL, DISABLED, or &#8220;readonly&#8221;.</td></tr><tr><td>17</td><td>textvariable</td><td>It is like a control variable which is used to control the behaviour of the widget text.</td></tr><tr><td>18</td><td>to</td><td>It specify the maximum limit of the widget value. The other is specified by the from_ option.</td></tr><tr><td>19</td><td>validate</td><td>This option controls how the widget value is validated.</td></tr><tr><td>20</td><td>validatecommand</td><td>It is associated to the function callback which is used for the validation of the widget content.</td></tr><tr><td>21</td><td>values</td><td>It represents the tuple containing the values for this widget.</td></tr><tr><td>22</td><td>vcmd</td><td>It is same as validation command.</td></tr><tr><td>23</td><td>width</td><td>It represents the width of the widget.</td></tr><tr><td>24</td><td>wrap</td><td>This option wraps up the up and down button the Spinbox.</td></tr><tr><td>25</td><td>xscrollcommand</td><td>This options is set to the set() method of scrollbar to make this widget horizontally scrollable.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>There are the following methods associated with the widget.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>delete(startindex, endindex)</td><td>This method is used to delete the characters present at the specified range.</td></tr><tr><td>2</td><td>get(startindex, endindex)</td><td>It is used to get the characters present in the specified range.</td></tr><tr><td>3</td><td>identify(x, y)</td><td>It is used to identify the widget&#8217;s element within the specified range.</td></tr><tr><td>4</td><td>index(index)</td><td>It is used to get the absolute value of the given index.</td></tr><tr><td>5</td><td>insert(index, string)</td><td>This method is used to insert the string at the specified index.</td></tr><tr><td>6</td><td>invoke(element)</td><td>It is used to invoke the callback associated with the widget.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>from tkinter import *  \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"200x200\")  \r\n  \r\nspin = Spinbox(top, from_= 0, to = 25)  \r\n  \r\nspin.pack()  \r\n  \r\ntop.mainloop()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-spinbox-output.png\" alt=\"Python Tkinter Spinbox\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>The Spinbox widget is an alternative to the Entry widget. It provides the range of values to the user, out of which, the user can select the one. It is used in the case where a user is given some fixed number of values to choose from. We can use various options with the Spinbox [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2879"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2879"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2879/revisions"}],"predecessor-version":[{"id":2880,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2879/revisions/2880"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2879"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2879"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2879"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2881,"date":"2020-09-23T11:44:17","date_gmt":"2020-09-23T11:44:17","guid":{"rendered":"http://python3.foobrdigital.com/?p=2881"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"tkinter-panedwindow","status":"publish","type":"post","link":"https://python3.foobrdigital.com/tkinter-panedwindow/","title":{"rendered":"Tkinter PanedWindow"},"content":{"rendered":"\n<p>The PanedWindow widget acts like a Container widget which contains one or more child widgets (panes) arranged horizontally or vertically. The child panes can be resized by the user, by moving the separator lines known as sashes by using the mouse.</p>\n\n\n\n<p>Each pane contains only one widget. The PanedWindow is used to implement the different layouts in the python applications.</p>\n\n\n\n<p>The syntax to use the PanedWindow is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w= PanedWindow(master, options)   </code></pre>\n\n\n\n<p>A list of possible options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>bg</td><td>It represents the background color of the widget when it doesn&#8217;t have the focus.</td></tr><tr><td>2</td><td>bd</td><td>It represents the 3D border size of the widget. The default option specifies that the trough contains no border whereas the arrowheads and slider contain the 2-pixel border size.</td></tr><tr><td>3</td><td>borderwidth</td><td>It represents the border width of the widget. The default is 2 pixel.</td></tr><tr><td>4</td><td>cursor</td><td>The mouse pointer is changed to the specified cursor type when it is over the window.</td></tr><tr><td>5</td><td>handlepad</td><td>This option represents the distance between the handle and the end of the sash. For the horizontal orientation, it is the distance between the top of the sash and the handle. The default is 8 pixels.</td></tr><tr><td>6</td><td>handlesize</td><td>It represents the size of the handle. The default size is 8 pixels. However, the handle will always be a square.</td></tr><tr><td>7</td><td>height</td><td>It represents the height of the widget. If we do not specify the height, it will be calculated by the height of the child window.</td></tr><tr><td>8 orient The orient will be set to HORIZONTAL if we want to place the child windows side by side. It can be set to VERTICAL if we want to place the child windows from top to bottom.</td></tr><tr><td>9</td><td>relief</td><td>It represents the type of the border. The default is FLAT.</td></tr><tr><td>10</td><td>sashpad</td><td>It represents the padding to be done around each sash. The default is 0.</td></tr><tr><td>11</td><td>sashrelief</td><td>It represents the type of the border around each of the sash. The default is FLAT.</td></tr><tr><td>12</td><td>sashwidth</td><td>It represents the width of the sash. The default is 2 pixels.</td></tr><tr><td>13</td><td>showhandle</td><td>It is set to True to display the handles. The default value is false.</td></tr><tr><td>14</td><td>Width</td><td>It represents the width of the widget. If we don&#8217;t specify the width of the widget, it will be calculated by the size of the child widgets.</td></tr></tbody></table></figure>\n\n\n\n<h2>Methods</h2>\n\n\n\n<p>There are the following methods that are associated with the PanedWindow.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Method</th><th>Description</th></tr><tr><td>1</td><td>add(child, options)</td><td>It is used to add a window to the parent window.</td></tr><tr><td>2</td><td>get(startindex, endindex)</td><td>This method is used to get the text present at the specified range.</td></tr><tr><td>3</td><td>config(options)</td><td>It is used to configure the widget with the specified options.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\n  \r\ndef add():  \r\n    a = int(e1.get())  \r\n    b = int(e2.get())  \r\n    leftdata = str(a+b)  \r\n    left.insert(1,leftdata)  \r\n  \r\nw1 = PanedWindow()  \r\nw1.pack(fill = BOTH, expand = 1)  \r\n  \r\nleft = Entry(w1, bd = 5)  \r\nw1.add(left)  \r\n  \r\nw2 = PanedWindow(w1, orient = VERTICAL)  \r\nw1.add(w2)  \r\n  \r\ne1 = Entry(w2)  \r\ne2 = Entry(w2)  \r\n  \r\nw2.add(e1)  \r\nw2.add(e2)  \r\n  \r\nbottom = Button(w2, text = \"Add\", command = add)  \r\nw2.add(bottom)  \r\n  \r\nmainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-panedwindow-output.png\" alt=\"Python Tkinter PanedWindow\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The PanedWindow widget acts like a Container widget which contains one or more child widgets (panes) arranged horizontally or vertically. The child panes can be resized by the user, by moving the separator lines known as sashes by using the mouse. Each pane contains only one widget. The PanedWindow is used to implement the different [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2881"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2881"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2881/revisions"}],"predecessor-version":[{"id":2882,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2881/revisions/2882"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2881"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2881"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2881"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2883,"date":"2020-09-23T11:46:40","date_gmt":"2020-09-23T11:46:40","guid":{"rendered":"http://python3.foobrdigital.com/?p=2883"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"tkinter-labelframe","status":"publish","type":"post","link":"https://python3.foobrdigital.com/tkinter-labelframe/","title":{"rendered":"Tkinter LabelFrame"},"content":{"rendered":"\n<p>The LabelFrame widget is used to draw a border around its child widgets. We can also display the title for the LabelFrame widget. It acts like a container which can be used to group the number of interrelated widgets such as Radiobuttons.</p>\n\n\n\n<p>This widget is a variant of the Frame widget which has all the features of a frame. It also can display a label.</p>\n\n\n\n<p>The syntax to use the LabelFrame widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = LabelFrame(top, options)   </code></pre>\n\n\n\n<p>A list of options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>2</td><td>bd</td><td>It represents the size of the border shown around the indicator. The default is 2 pixels.</td></tr><tr><td>3</td><td>Class</td><td>The default value of the class is LabelFrame.</td></tr><tr><td>4</td><td>colormap</td><td>This option is used to specify which colomap is to be used for this widget. By colormap, we mean the 256 colors that are used to form the graphics. With this option, we can reuse the colormap of another window on this widget.</td></tr><tr><td>5</td><td>container</td><td>If this is set to true, the LabelFrame becomes the container widget. The default value is false.</td></tr><tr><td>6</td><td>cursor</td><td>It can be set to a cursor type, i.e. arrow, dot, etc. the mouse pointer is changed to the cursor type when it is over the widget.</td></tr><tr><td>7</td><td>fg</td><td>It represents the foreground color of the widget.</td></tr><tr><td>8</td><td>font</td><td>It represents the font type of the widget text.</td></tr><tr><td>9</td><td>height</td><td>It represents the height of the widget.</td></tr><tr><td>10</td><td>labelAnchor</td><td>It represents the exact position of the text within the widget. The default is NW(north-west)</td></tr><tr><td>11</td><td>labelwidget</td><td>It represents the widget to be used for the label. The frame uses the text for the label if no value specified.</td></tr><tr><td>12</td><td>highlightbackground</td><td>The color of the focus highlight border when the widget doesn&#8217;t have the focus.</td></tr><tr><td>13</td><td>highlightcolor</td><td>The color of the focus highlight when the widget has the focus.</td></tr><tr><td>14</td><td>highlightthickness</td><td>The width of the focus highlight border.</td></tr><tr><td>15</td><td>padx</td><td>The horizontal padding of the widget.</td></tr><tr><td>16</td><td>pady</td><td>The vertical padding of the widget.</td></tr><tr><td>17</td><td>relief</td><td>It represents the border style. The default value is GROOVE.</td></tr><tr><td>18</td><td>text</td><td>It represents the string containing the label text.</td></tr><tr><td>19</td><td>width</td><td>It represents the width of the frame.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"300x200\")  \r\n  \r\nlabelframe1 = LabelFrame(top, text=\"Positive Comments\")  \r\nlabelframe1.pack(fill=\"both\", expand=\"yes\")  \r\n  \r\ntoplabel = Label(labelframe1, text=\"Place to put the positive comments\")  \r\ntoplabel.pack()  \r\n  \r\nlabelframe2 = LabelFrame(top, text = \"Negative Comments\")  \r\nlabelframe2.pack(fill=\"both\", expand = \"yes\")  \r\n  \r\nbottomlabel = Label(labelframe2,text = \"Place to put the negative comments\")  \r\nbottomlabel.pack()  \r\n  \r\ntop.mainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-labelframe-output.png\" alt=\"Python Tkinter LabelFrame\"/></figure>\n\n\n\n<p>This widget is a variant of the Frame widget which has all the features of a frame. It also can display a label.</p>\n\n\n\n<p>The syntax to use the LabelFrame widget is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>w = LabelFrame(top, options)   </code></pre>\n\n\n\n<p>A list of options is given below.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN</th><th>Option</th><th>Description</th></tr><tr><td>1</td><td>bg</td><td>The background color of the widget.</td></tr><tr><td>2</td><td>bd</td><td>It represents the size of the border shown around the indicator. The default is 2 pixels.</td></tr><tr><td>3</td><td>Class</td><td>The default value of the class is LabelFrame.</td></tr><tr><td>4</td><td>colormap</td><td>This option is used to specify which colomap is to be used for this widget. By colormap, we mean the 256 colors that are used to form the graphics. With this option, we can reuse the colormap of another window on this widget.</td></tr><tr><td>5</td><td>container</td><td>If this is set to true, the LabelFrame becomes the container widget. The default value is false.</td></tr><tr><td>6</td><td>cursor</td><td>It can be set to a cursor type, i.e. arrow, dot, etc. the mouse pointer is changed to the cursor type when it is over the widget.</td></tr><tr><td>7</td><td>fg</td><td>It represents the foreground color of the widget.</td></tr><tr><td>8</td><td>font</td><td>It represents the font type of the widget text.</td></tr><tr><td>9</td><td>height</td><td>It represents the height of the widget.</td></tr><tr><td>10</td><td>labelAnchor</td><td>It represents the exact position of the text within the widget. The default is NW(north-west)</td></tr><tr><td>11</td><td>labelwidget</td><td>It represents the widget to be used for the label. The frame uses the text for the label if no value specified.</td></tr><tr><td>12</td><td>highlightbackground</td><td>The color of the focus highlight border when the widget doesn&#8217;t have the focus.</td></tr><tr><td>13</td><td>highlightcolor</td><td>The color of the focus highlight when the widget has the focus.</td></tr><tr><td>14</td><td>highlightthickness</td><td>The width of the focus highlight border.</td></tr><tr><td>15</td><td>padx</td><td>The horizontal padding of the widget.</td></tr><tr><td>16</td><td>pady</td><td>The vertical padding of the widget.</td></tr><tr><td>17</td><td>relief</td><td>It represents the border style. The default value is GROOVE.</td></tr><tr><td>18</td><td>text</td><td>It represents the string containing the label text.</td></tr><tr><td>19</td><td>width</td><td>It represents the width of the frame.</td></tr></tbody></table></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"300x200\")  \r\n  \r\nlabelframe1 = LabelFrame(top, text=\"Positive Comments\")  \r\nlabelframe1.pack(fill=\"both\", expand=\"yes\")  \r\n  \r\ntoplabel = Label(labelframe1, text=\"Place to put the positive comments\")  \r\ntoplabel.pack()  \r\n  \r\nlabelframe2 = LabelFrame(top, text = \"Negative Comments\")  \r\nlabelframe2.pack(fill=\"both\", expand = \"yes\")  \r\n  \r\nbottomlabel = Label(labelframe2,text = \"Place to put the negative comments\")  \r\nbottomlabel.pack()  \r\n  \r\ntop.mainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-labelframe-output.png\" alt=\"Python Tkinter LabelFrame\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>The LabelFrame widget is used to draw a border around its child widgets. We can also display the title for the LabelFrame widget. It acts like a container which can be used to group the number of interrelated widgets such as Radiobuttons. This widget is a variant of the Frame widget which has all the [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2883"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2883"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2883/revisions"}],"predecessor-version":[{"id":2884,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2883/revisions/2884"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2883"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2883"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2883"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2885,"date":"2020-09-23T11:49:13","date_gmt":"2020-09-23T11:49:13","guid":{"rendered":"http://python3.foobrdigital.com/?p=2885"},"modified":"2020-12-16T16:51:26","modified_gmt":"2020-12-16T16:51:26","slug":"tkinter-messagebox","status":"publish","type":"post","link":"https://python3.foobrdigital.com/tkinter-messagebox/","title":{"rendered":"Tkinter messagebox"},"content":{"rendered":"\n<p>The messagebox module is used to display the message boxes in the python applications. There are the various functions which are used to display the relevant messages depending upon the application requirements.</p>\n\n\n\n<p>The syntax to use the messagebox is given below.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<ol><li>messagebox.function_name(title,&nbsp;message&nbsp;[,&nbsp;options])&nbsp;&nbsp;</li></ol>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<ul><li><strong>function_name:</strong>&nbsp;It represents an appropriate message box function.</li><li><strong>title:</strong>&nbsp;It is a string which is shown as a title of a message box.</li><li><strong>message:</strong>&nbsp;It is the string to be displayed as a message on the message box.</li><li><strong>options:</strong>&nbsp;There are various options which can be used to configure the message dialog box.</li></ul>\n\n\n\n<p>The two options that can be used are default and parent.</p>\n\n\n\n<p><strong>1. default</strong></p>\n\n\n\n<p>The default option is used to mention the types of the default button, i.e. ABORT, RETRY, or IGNORE in the message box.</p>\n\n\n\n<p><strong>2. parent</strong></p>\n\n\n\n<p>The parent option specifies the parent window on top of which, the message box is to be displayed.</p>\n\n\n\n<p>There is one of the following functions used to show the appropriate message boxes. All the functions are used with the same syntax but have the specific functionalities.</p>\n\n\n\n<h3>1. showinfo()</h3>\n\n\n\n<p>The showinfo() messagebox is used where we need to show some relevant information to the user.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\n  \r\nfrom tkinter import *  \r\n  \r\nfrom tkinter import messagebox  \r\n  \r\ntop = Tk()  \r\n  \r\ntop.geometry(\"100x100\")      \r\n  \r\nmessagebox.showinfo(\"information\",\"Information\")  \r\n  \r\ntop.mainloop()</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-messagebox-output1.png\" alt=\"Python Tkinter messagebox\"/></figure>\n\n\n\n<h3>2. showwarning()</h3>\n\n\n\n<p>This method is used to display the warning to the user. Consider the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\n  \r\nfrom tkinter import messagebox  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"100x100\")  \r\nmessagebox.showwarning(\"warning\",\"Warning\")  \r\n  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-messagebox-output2.png\" alt=\"Python Tkinter messagebox\"/></figure>\n\n\n\n<h3>3. showerror()</h3>\n\n\n\n<p>This method is used to display the error message to the user. Consider the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\nfrom tkinter import messagebox  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"100x100\")  \r\nmessagebox.showerror(\"error\",\"Error\")  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-messagebox-output3.png\" alt=\"Python Tkinter messagebox\"/></figure>\n\n\n\n<h3>4. askquestion()</h3>\n\n\n\n<p>This method is used to ask some question to the user which can be answered in yes or no. Consider the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\nfrom tkinter import messagebox  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"100x100\")  \r\nmessagebox.askquestion(\"Confirm\",\"Are you sure?\")  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-messagebox-output4.png\" alt=\"Python Tkinter messagebox\"/></figure>\n\n\n\n<h3>5. askokcancel()</h3>\n\n\n\n<p>This method is used to confirm the user&#8217;s action regarding some application activity. Consider the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\nfrom tkinter import messagebox  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"100x100\")  \r\nmessagebox.askokcancel(\"Redirect\",\"Redirecting you to www.javatpoint.com\")  \r\ntop.mainloop() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-messagebox-output5.png\" alt=\"Python Tkinter messagebox\"/></figure>\n\n\n\n<h3>6. askyesno()</h3>\n\n\n\n<p>This method is used to ask the user about some action to which, the user can answer in yes or no. Consider the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\nfrom tkinter import messagebox  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"100x100\")  \r\nmessagebox.askyesno(\"Application\",\"Got It?\")  \r\ntop.mainloop()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-messagebox-output6.png\" alt=\"Python Tkinter messagebox\"/></figure>\n\n\n\n<h3>7. askretrycancel()</h3>\n\n\n\n<p>This method is used to ask the user about doing a particular task again or not. Consider the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code># !/usr/bin/python3  \r\nfrom tkinter import *  \r\nfrom tkinter import messagebox  \r\n  \r\ntop = Tk()  \r\ntop.geometry(\"100x100\")  \r\nmessagebox.askretrycancel(\"Application\",\"try again?\")  \r\n  \r\ntop.mainloop()</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/python/images/python-tkinter-messagebox-output7.png\" alt=\"Python Tkinter messagebox\"/></figure>\n\n\n\n<p></p>\n","protected":false},"excerpt":{"rendered":"<p>The messagebox module is used to display the message boxes in the python applications. There are the various functions which are used to display the relevant messages depending upon the application requirements. The syntax to use the messagebox is given below. Syntax messagebox.function_name(title,&nbsp;message&nbsp;[,&nbsp;options])&nbsp;&nbsp; Parameters function_name:&nbsp;It represents an appropriate message box function. title:&nbsp;It is a string [&hellip;]</p>\n","protected":false},"author":6,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[62,149],"tags":[],"_links":{"self":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2885"}],"collection":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/users/6"}],"replies":[{"embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/comments?post=2885"}],"version-history":[{"count":1,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2885/revisions"}],"predecessor-version":[{"id":2887,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/posts/2885/revisions/2887"}],"wp:attachment":[{"href":"https://python3.foobrdigital.com/wp-json/wp/v2/media?parent=2885"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/categories?post=2885"},{"taxonomy":"post_tag","embeddable":true,"href":"https://python3.foobrdigital.com/wp-json/wp/v2/tags?post=2885"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]