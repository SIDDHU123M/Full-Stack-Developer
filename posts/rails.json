[{"id":3321,"date":"2020-09-13T05:43:29","date_gmt":"2020-09-13T05:43:29","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3321"},"modified":"2020-09-13T05:43:29","modified_gmt":"2020-09-13T05:43:29","slug":"ruby-on-rails-tutorial-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-tutorial-2/","title":{"rendered":"Ruby on Rails Tutorial"},"content":{"rendered":"\n<p>Ruby on Rails tutorial provides basic and advanced concepts of Ruby on Rails. Our Ruby on Rails tutorial is designed for beginners and professionals both.</p>\n\n\n\n<p>Ruby on Rails is a server-side web application development framework. It is written by David Heinemeier Hansson</p>\n\n\n\n<p>Our Ruby on Rails tutorial includes all topics of Ruby on Rails such as features, MVC, Router, Scaffolding, Views, Hello World example, bundlers, migrations, layout, CRUD Example, interview questions etc.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby on Rails Index</h2>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><strong>Ruby Tutorial</strong></p>\n\n\n\n<ul><li>Ruby Tutorial</li></ul>\n\n\n\n<p><strong>Ruby on Rails Tutorial</strong></p>\n\n\n\n<ul><li>Rails Tutorial</li><li>Rails Introduction</li><li>Rails Features</li><li>Rails Installation</li><li>Rails IDE</li><li>Rails Scripts</li><li>Rails Example</li><li>Rails Directory Structure</li><li>Rails Active Record</li><li>Rails MVC</li><li>Rails RVM</li><li>Rails Bundler</li><li>Rails Migrations</li></ul>\n\n\n\n<ul><li>Rails Router</li><li>Rails Scaffolding</li><li>Rails Session</li><li>Rails File Upload</li><li>Rails Layout</li><li>Rails Filters</li><li>Rails Testing</li><li>Rails Caching</li><li>Rails Validation</li><li>Rails AJAX</li></ul>\n\n\n\n<p><strong>Rails Database</strong></p>\n\n\n\n<ul><li>Rails Save Record</li><li>Rails View Record</li><li>Rails CRUD</li></ul>\n\n\n\n<p><strong>Rails Interview</strong></p>\n\n\n\n<ul><li>Interview Questions</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Prerequisite</h2>\n\n\n\n<p>Before learning Ruby on Rails, you must have the basic knowledge of Ruby.</p>\n\n\n\n<h2>Audience</h2>\n\n\n\n<p>Our Ruby on Rails tutorial is designed to help beginners and professionals.</p>\n\n\n\n<h2>Problem</h2>\n\n\n\n<p>We assure that you will not find any problem in this Ruby on Rails programming tutorial. But if there is any mistake, please post the problem in contact form.</p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby on Rails tutorial provides basic and advanced concepts of Ruby on Rails. Our Ruby on Rails tutorial is designed for beginners and professionals both. Ruby on Rails is a server-side web application development framework. It is written by David Heinemeier Hansson Our Ruby on Rails tutorial includes all topics of Ruby on Rails such [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3321"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3321"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3321/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3321"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3321"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3321"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3323,"date":"2020-09-13T05:44:10","date_gmt":"2020-09-13T05:44:10","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3323"},"modified":"2020-09-13T05:44:10","modified_gmt":"2020-09-13T05:44:10","slug":"ruby-on-rails-introduction-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-introduction-2/","title":{"rendered":"Ruby on Rails Introduction"},"content":{"rendered":"\n<p>Ruby on Rails is a server-side web application development framework written in Ruby language by David Heinemeier Hansson. It allows you to write less code than other languages and frameworks. It includes everything needed to create database-backed web applications according to MVC pattern.</p>\n\n\n\n<p>It is opinionated software. There are two major guiding principles:</p>\n\n\n\n<ul><li><strong>Don&#8217;t Repeat Yourself (DRY):</strong>&nbsp;DRY is a principle of software development which states that &#8220;Every piece of knowledge must have an authoritative, unambiguous, single representation within a system. If same piece of code will not repeat again and again, code will be more maintainable, extensible and less buggy.</li><li><strong>Convention Over Configuration (CoC):</strong>&nbsp;It provides different opinions for the best way to do many things in a web application.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby on Rails History</h2>\n\n\n\n<h3>Ruby on Rails creation</h3>\n\n\n\n<p>Ruby on Rails was created by David Heinemeier Hansson (DHH). He was working at 37signals (now Basecamp) company to create a project management application in Ruby. To help speed along the process, he created a custom web framework Ruby on Rails. It is also called Rails.</p>\n\n\n\n<h3>Ruby on Rails release</h3>\n\n\n\n<p>He first released it as open source in July 2004 but did not share the commit rights until February 2005. In August 2006, the Apple company announced that it would ship Ruby on Rails with Mac OS X v10.5 &#8220;Leopard&#8221;.</p>\n\n\n\n<p>In March 15, 2009, Rails version 2.3 was released. It included major new developments in templates, engines, Rack and nested model forms.</p>\n\n\n\n<p>In December 23, 2008, Merb, another web application framework was launched. Rails announced that it would work with the Merb project to the best ideas of Merb into Rails 3. It ended the unnecessary duplication of codes in both the frameworks.</p>\n\n\n\n<h3>Ruby on Rails in present</h3>\n\n\n\n<p>Rails 5.0.1 was released on December 21, 2016. It introduced Action cable, Turbolinks 5 and API mode.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Ruby on Rails Versions</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Version</td><td>Release Date</td><td>Description</td></tr><tr><td>1.0</td><td>December 13, 2005</td><td>It has spit and more polished than its earlier release.</td></tr><tr><td>1.2</td><td>January 19, 2007</td><td></td></tr><tr><td>2.0</td><td>December 7, 2007</td><td>Semicolon methods were dropped instead of regular slash, namespace feature was added.</td></tr><tr><td>2.1</td><td>June 1, 2008</td><td></td></tr><tr><td>2.2</td><td>November 21, 2008</td><td>Includes internationalization framework, better API documents.</td></tr><tr><td>2.3</td><td>March 16, 2008</td><td>Developments in Templates, Racks, Engines and Nested Model forms.</td></tr><tr><td>3.0</td><td>August 29, 2010</td><td>Everything was made better, cleaner and faster.</td></tr><tr><td>3.1</td><td>August 31, 2011</td><td>Features reversible Database migrations, Streaming, Asset Pipeline, JQuery, CoffeeScript and Sass into the satck.</td></tr><tr><td>3.2</td><td>January 20, 2012</td><td>Released with a faster development mode and Routing engine, Automatic query explain and Tagged logging.</td></tr><tr><td>4.0</td><td>June 25, 2013</td><td>Introduces Russian Doll Caching, LiveStreaming, Turbo links as well as making active resource.</td></tr><tr><td>4.1</td><td>April 8, 2014</td><td>Introduces Spring, Variants, Enums, Mailer previews and secrets.yml.</td></tr><tr><td>4.2</td><td>August 20, 2014</td><td>Introduces active job, adequate record, web console and foreign keys.</td></tr><tr><td>5.0</td><td>December 18, 2015</td><td>Introduces API mode, turbolinks 5 and action cable.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby on Rails is a server-side web application development framework written in Ruby language by David Heinemeier Hansson. It allows you to write less code than other languages and frameworks. It includes everything needed to create database-backed web applications according to MVC pattern. It is opinionated software. There are two major guiding principles: Don&#8217;t Repeat [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3323"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3323"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3323/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3323"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3323"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3323"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3325,"date":"2020-09-13T05:44:51","date_gmt":"2020-09-13T05:44:51","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3325"},"modified":"2020-09-13T05:44:51","modified_gmt":"2020-09-13T05:44:51","slug":"ruby-on-rails-features","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-features/","title":{"rendered":"Ruby on Rails Features"},"content":{"rendered":"\n<p>Rails 5 was launched on 18<sup>th</sup>&nbsp;September 2015 by David Heinemeier Hansson in Atlanta. Some new features were implemented in Rails 5 version.</p>\n\n\n\n<p>Some features are listed below:</p>\n\n\n\n<ul><li>Symbol garbage collector</li><li>Module #prepend</li><li>Keyword arguments</li><li>Action Mailer</li><li>Action view</li><li>Turbolinks</li><li>Action cable</li><li>Actionpack Assertions</li><li>Rails API</li><li>Render from anywhere</li><li>Rake command</li><li>Customized library</li><li>AJAX library</li></ul>\n\n\n\n<h3>Symbol Garbage Collector</h3>\n\n\n\n<p>Passing symbols opens the possibility of several attacks in your system. The symbol garbage collector collects the symbols which prevents your system from several attacks.</p>\n\n\n\n<h3>Module #prepend</h3>\n\n\n\n<p>It allows you to insert a module in front of the class it was prepended.</p>\n\n\n\n<h3>Keyword Arguments</h3>\n\n\n\n<p>It supports keyword arguments which helps to reduce memory consumption by Rails application.</p>\n\n\n\n<h3>Action Mailer</h3>\n\n\n\n<p>New methods deliver_now or deliver_later are used instead of #deliver and #deliver!.</p>\n\n\n\n<h3>Action View</h3>\n\n\n\n<p>Helper methods like content_tag_for and div_for were removed from the core and moved out to a separate gem.</p>\n\n\n\n<h3>Turbolinks</h3>\n\n\n\n<p>Sometimes web pages reloads very slow because it loads full page from the server. Turbolinks 3 reloads only the content of the body, it doesn&#8217;t reloads the whole page.</p>\n\n\n\n<h3>Action Cable</h3>\n\n\n\n<p>It is a framework which is used to extend Rails via Websockets to add some functionality. It very smoothly integrates Websockets with the rest of the Rails application. It allows you to easily add some real time features to your app.</p>\n\n\n\n<h3>ActionPack Assertions</h3>\n\n\n\n<p>The assertions assert_template and assigns() are deprecated and moved into its own gem.</p>\n\n\n\n<h3>Rails API</h3>\n\n\n\n<p>It allows you to generate API and cleans all the middleware which is not necessary for an application.</p>\n\n\n\n<h3>Render From Anywhere</h3>\n\n\n\n<p>Earlier we used gem render_anywhere to render views outside controller. In Rails 5, you can render your views from anywhere.</p>\n\n\n\n<h3>Rake Command</h3>\n\n\n\n<p>Rails 5 provides you a feature which allows you to restart all your apps with the&nbsp;<strong>rake restart</strong>&nbsp;command.</p>\n\n\n\n<h3>Customized URL</h3>\n\n\n\n<p>Search engine friendly URLs can be developed in Rails.</p>\n\n\n\n<h3>AJAX Library</h3>\n\n\n\n<p>Rails provide you an extensive library of AJAX functions. The associated java scripting required for AJAX gets generated automatically.</p>\n","protected":false},"excerpt":{"rendered":"<p>Rails 5 was launched on 18th&nbsp;September 2015 by David Heinemeier Hansson in Atlanta. Some new features were implemented in Rails 5 version. Some features are listed below: Symbol garbage collector Module #prepend Keyword arguments Action Mailer Action view Turbolinks Action cable Actionpack Assertions Rails API Render from anywhere Rake command Customized library AJAX library Symbol [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3325"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3325"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3325/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3325"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3325"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3325"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3327,"date":"2020-09-13T05:50:22","date_gmt":"2020-09-13T05:50:22","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3327"},"modified":"2020-09-13T05:50:22","modified_gmt":"2020-09-13T05:50:22","slug":"ruby-on-rails-installation-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-installation-2/","title":{"rendered":"Ruby on Rails Installation"},"content":{"rendered":"\n<p>We will set up Ruby on Rails in Ubuntu 14.04 operating system.</p>\n\n\n\n<p>There are three methods to install Ruby:</p>\n\n\n\n<ul><li>Using rbenv (recommended)</li><li>Using rvm</li><li>From source</li></ul>\n\n\n\n<p>We will install using rbenv as it is the most recommended way.</p>\n\n\n\n<p>First we will install some dependencies for Ruby:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get update  \n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install git-core curl zlib1g-dev build-essential libssl-dev   \nlibreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev   \nlibxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev nodejs  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Install rbenv</h2>\n\n\n\n<p>Installing rbenv is a simple two way process. First rbenv will be installed and then ruby-build.</p>\n\n\n\n<p>Follow the following commands:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd  \ngit clone git://github.com/sstephenson/rbenv.git .rbenv  \necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\\  \necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc  \nexec $SHELL  \n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>git clone git://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build  \necho 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' >> ~/.bashrc  \nexec $SHELL  </code></pre>\n\n\n\n<p>The above command will install rbenv in your home directory and will set the appropriate environment variables.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Install Ruby</h2>\n\n\n\n<p>Install Ruby using following commands:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rbenv install -v 2.2.3  \nrbenv global 2.2.3</code></pre>\n\n\n\n<p>To disable Rubygems which generate local documentation for each gem that you install, use following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>echo \"gem: --no-document\" > ~/.gemrc  </code></pre>\n\n\n\n<p>Now you need to install bundler gem to manage application dependencies with following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem install bundler </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Install Rails</h2>\n\n\n\n<p>Install Rails using following command,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem install rails  </code></pre>\n\n\n\n<p>You can specify the version of Rails which you want to install using -v option in the above command.</p>\n\n\n\n<p>Now we will run <strong>rehash</strong> sub-command. This will install shims for all Ruby executables known to rbenv, which allow you to use executables.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rbenv rehash  </code></pre>\n\n\n\n<p>To verify the installed Rails version, use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails -v  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-installation1.png\" alt=\"Ruby On rails installation 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Install JavaScript Runtime</h2>\n\n\n\n<p>Some Rails features like Asset Pipeline, depends on JavaScript runtime. To get this functionality, we need to install Node.js.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo add-apt-repository ppa:chris-lea/node.js  </code></pre>\n\n\n\n<p>Now update apt-get and install Node.js packet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get update  \nsudo apt-get install nodejs</code></pre>\n\n\n\n<p>Now you have successfully installed Ruby on Rails on your system.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Install Database</h2>\n\n\n\n<p>Rails default database is Sqlite3. If you want to use some other database due to any reason, then you need to install it.</p>\n\n\n\n<p>Here, we will install MySQL server as our database.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sudo apt-get install mysql-server mysql-client libmysqlclient-dev </code></pre>\n\n\n\n<p>After this, install mysql2 gem, with following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem install mysql2 </code></pre>\n\n\n\n<p>Now you can easily use MySQL with Rails in your system.</p>\n","protected":false},"excerpt":{"rendered":"<p>We will set up Ruby on Rails in Ubuntu 14.04 operating system. There are three methods to install Ruby: Using rbenv (recommended) Using rvm From source We will install using rbenv as it is the most recommended way. First we will install some dependencies for Ruby: Install rbenv Installing rbenv is a simple two way [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3327"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3327"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3327/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3327"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3327"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3327"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3329,"date":"2020-09-13T05:51:32","date_gmt":"2020-09-13T05:51:32","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3329"},"modified":"2020-09-13T05:51:32","modified_gmt":"2020-09-13T05:51:32","slug":"rails-ide-or-editor","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rails-ide-or-editor/","title":{"rendered":"Rails IDE or Editor"},"content":{"rendered":"\n<p>Ruby on Rails can be used with either a simple text editor or with an IDE.</p>\n\n\n\n<p>A text editor is a tool that creates and edits a file with only plain text. Once the code is written in the editor, it need to be compiled and run on a command line tool.</p>\n\n\n\n<p>An IDE stands for Integrated Development Environment. It is a more powerful tool providing many features, including text editor features.</p>\n\n\n\n<p>Some of the Rails IDEs are listed below:</p>\n\n\n\n<ul><li>TextMate</li><li>E</li><li>Intellij IDEA</li><li>NetBeans</li><li>Eclipse</li><li>Heroku</li><li>Aptana Studio</li><li>RubyMine</li><li>Kuso IDE</li><li>Komodo</li><li>Redcar</li><li>Arcadia</li><li>Ice Coder</li></ul>\n\n\n\n<h3>TextMate</h3>\n\n\n\n<p>The TextMate is mainly used for Mac operating system. It allows you to write extensions to the base environment. The extensions plug into TextMate to add new features to the base editor. These extensions are called Bundles.</p>\n\n\n\n<h3>E</h3>\n\n\n\n<p>The E text editor is build just like TextMate editor to work on Windows. It replicates many features of the TextMate and even allows to use the TextMate bundles.</p>\n\n\n\n<h3>Intellij IDEA</h3>\n\n\n\n<p>The Intellij IDEA is a commercial IDE made of JetBrains. Earlier, it was also used for Java development. JetBrains version 7.0 has added Rails support to the Intellij IDEA.</p>\n\n\n\n<h3>NetBeans</h3>\n\n\n\n<p>The NetBeans is an IDE from Sun. Earlier, it was used for Java development. Sun version 7.0 has added Rails support to the NetBeans.</p>\n\n\n\n<h3>Eclipse</h3>\n\n\n\n<p>The Eclipse IDE is the most commonly used IDE today. Uisng a plug-in RadRails, you can add fully Rails support to the Eclipse environment.</p>\n\n\n\n<h3>Heroku</h3>\n\n\n\n<p>The Heroku IDE provides a new and unique way of writing Rails application. It is used completely online to develop applications. You do not need to install any software on your system to use Heroku. It does not support Internet Explorer.</p>\n\n\n\n<h3>Aptana Studio</h3>\n\n\n\n<p>A product from Aptana, is a stand-alone desktop IDE based on Eclipse project. It is quite similar to Eclipse. The Rails features are packaged as plug-in to the Aptana Studio environment.</p>\n\n\n\n<h3>RubyMine</h3>\n\n\n\n<p>The RubyMine IDE is the most preferrable choice for Rubyists. It provides many extra features than other IDEs. One feature it includes is click and follow. When you will click on a function, it will take you to the function being called. This feature comes in handy when multiple functions share the same name and resides in different files and folder. The other features are Git annotate and Git compare.</p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby on Rails can be used with either a simple text editor or with an IDE. A text editor is a tool that creates and edits a file with only plain text. Once the code is written in the editor, it need to be compiled and run on a command line tool. An IDE stands [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3329"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3329"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3329/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3329"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3329"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3329"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3331,"date":"2020-09-13T05:52:12","date_gmt":"2020-09-13T05:52:12","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3331"},"modified":"2020-09-13T05:52:12","modified_gmt":"2020-09-13T05:52:12","slug":"rails-scripts","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rails-scripts/","title":{"rendered":"Rails Scripts"},"content":{"rendered":"\n<p>Rails provides us some excellent tools that are used to develop Rails application. These tools are packaged as scripts from command line.</p>\n\n\n\n<p>Following are the most useful Rails scripts used in Rails application:</p>\n\n\n\n<ul><li>Rails Console</li><li>WEBrick Web Server</li><li>Generators</li><li>Migrations</li></ul>\n\n\n\n<h3>Rails Console</h3>\n\n\n\n<p>The Rails console is as command line utility which runs Rails application from the command line. The Rails console is an extension of Ruby irb. It provides all the features of irb along with the ability to auto-load Rails application environment, including all its classes and components. It helps you to walk through your application step-by-step.</p>\n\n\n\n<h3>WEBrick Web server</h3>\n\n\n\n<p>Rails is configured to automatically use WEBrick server. This server is written in pure Ruby and supports almost all platforms like Windows, Mac or Unix. Alternatively, if you have Mongrel or lighttpd server installed in your system, Rails uses either of those servers.</p>\n\n\n\n<p>All the three Rails servers feature automatic reloading of code. It means, when you change your source code, you do not need to restart the server.</p>\n\n\n\n<h3>Generators</h3>\n\n\n\n<p>The Rails include code generation scripts, which are used to automatically generate model and controller classes for an application. Code generation increases your productivity when developing Web applications. By running generator command, skeleton files for all your model and controller classes will be generated. It also generates, database migration files for each model it generates.</p>\n\n\n\n<h3>Migrations</h3>\n\n\n\n<p>Migrations bring Rails DRY feature to life. It is a pure Ruby code that define the structure of a database. You don&#8217;t have to use SQL to write your code while using migration.</p>\n\n\n\n<p>The changes you make to your database schema is isolated in a separate migration file, which has a method to implement or reverse the change.</p>\n","protected":false},"excerpt":{"rendered":"<p>Rails provides us some excellent tools that are used to develop Rails application. These tools are packaged as scripts from command line. Following are the most useful Rails scripts used in Rails application: Rails Console WEBrick Web Server Generators Migrations Rails Console The Rails console is as command line utility which runs Rails application from [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3331"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3331"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3331/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3331"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3331"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3331"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3333,"date":"2020-09-13T05:54:21","date_gmt":"2020-09-13T05:54:21","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3333"},"modified":"2020-09-13T05:54:21","modified_gmt":"2020-09-13T05:54:21","slug":"ruby-on-rails-5-hello-world-example","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-5-hello-world-example/","title":{"rendered":"Ruby on Rails 5 Hello World Example"},"content":{"rendered":"\n<p>We will create a simple Ruby on Rails 5 program displaying Hello World. Ruby on Rails 5 program is quite different from Ruby on Rails 4 program.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<p><strong>Text Editor:</strong>&nbsp;You can use any text editor which is suitable for you. We are using Sublime Text editor which features many plugins.</p>\n\n\n\n<p><strong>Browser:</strong>&nbsp;We are using Ubuntu default browser, Mozilla Firefox.</p>\n\n\n\n<h3>Hello World Example</h3>\n\n\n\n<p><strong>Step 1</strong> Create a directory <strong>jtp</strong> in which all the code will be present and will navigate from the command line.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mkdir jtp  </code></pre>\n\n\n\n<p><strong>Step 2</strong> Change the directory to jtp</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd jtp  </code></pre>\n\n\n\n<p><strong>Step 3</strong> Create a new application with the name <strong>helloWorld.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails new helloWorld  </code></pre>\n\n\n\n<p>You will see something as shown in the below snapshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-5-hello-world-example1.png\" alt=\"Ruby On rails 5 hello world example 1\"/></figure>\n\n\n\n<p>A helloWorld directory will be created in your system. Inside this folder there will be many files and subfolders which is actually the Rails application.</p>\n\n\n\n<p><strong>Step 4</strong> Move in to your above created application directory that is helloWorld.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd helloWorld  </code></pre>\n\n\n\n<p><strong>Step 5</strong> Rails 5 has no longer a static index page in production. There will not be a root page in the production, so we need to create it. First we will create a controller called <strong>hello</strong> for our home page.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails generate controller hello  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-5-hello-world-example2.png\" alt=\"Ruby On rails 5 hello world example 2\"/></figure>\n\n\n\n<p>You will see something as shown in the above snapshot.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;Now we need to add an index page.</p>\n\n\n\n<p>In file app/views/hello/index.html.erb, write</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h2>Hello World&lt;/h2>   \n&lt;p>   \n  Today is 23r March, Thursday.   \n&lt;/p>  </code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;Now we need to route the Rails to this action. Edit the config/routes.rb file to set the index page to our new method.</p>\n\n\n\n<p>Add the following line in the routes.rb file,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>root 'hello#index'  </code></pre>\n\n\n\n<p><strong>Step 8</strong> Now you can verify the page by running your server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails server  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-5-hello-world-example3.png\" alt=\"Ruby On rails 5 hello world example 3\"/></figure>\n\n\n\n<p>By default, Rails server listens to the port 3000. Although you can change it with the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails server -p portNumber  </code></pre>\n\n\n\n<p><strong>Step 9</strong> Visit click here in your browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-5-hello-world-example4.png\" alt=\"Ruby On rails 5 hello world example 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Download</h3>\n\n\n\n<p>Download this example</p>\n","protected":false},"excerpt":{"rendered":"<p>We will create a simple Ruby on Rails 5 program displaying Hello World. Ruby on Rails 5 program is quite different from Ruby on Rails 4 program. Prerequisites Text Editor:&nbsp;You can use any text editor which is suitable for you. We are using Sublime Text editor which features many plugins. Browser:&nbsp;We are using Ubuntu default [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3333"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3333"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3333/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3333"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3333"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3333"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3335,"date":"2020-09-13T05:55:07","date_gmt":"2020-09-13T05:55:07","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3335"},"modified":"2020-09-13T05:55:07","modified_gmt":"2020-09-13T05:55:07","slug":"ruby-on-rails-directory-structure-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-directory-structure-2/","title":{"rendered":"Ruby on Rails Directory Structure"},"content":{"rendered":"\n<p>On creating a Rails application, the entire Rails directory structure is created. We will explain Rails 5 directory structure here.</p>\n\n\n\n<p>The&nbsp;<strong>jtp</strong>&nbsp;directory (shown below) has a number of auto-generated files and folders that comprises the structure of Rails application.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-directory-structure1.png\" alt=\"Ruby On rails directory-structure 1\"/></figure>\n\n\n\n<p>We will explain the function of each of the files and folders present in the above directory.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>File/Folder</th><th>Description</th></tr><tr><td>app</td><td>It works as the remainder of this directory. Basically it organizes our application component. It holds MVC.</td></tr><tr><td>app/assets</td><td>This folder contains static files required for application&#8217;s front-end grouped into folders based on their type.</td></tr><tr><td>app/controllers</td><td>All the controller files are stored here. A controller handles all the web requests from the user.</td></tr><tr><td>app/helpers</td><td>It contains all the helper functions to assist MVC.</td></tr><tr><td>app/mailers</td><td>It contains mail specific functions for the application.</td></tr><tr><td>app/models</td><td>It contains the models and data stored in our application&#8217;s database.</td></tr><tr><td>app/views</td><td>This folder contains the display templates to fill data in our application.</td></tr><tr><td>bin</td><td>It basically contains Rails script that start your app. It can also contain other scripts use to setup, upgrade or run the app.</td></tr><tr><td>config</td><td>It configures our application&#8217;s database, routes and more.</td></tr><tr><td>db</td><td>It contains our current database schema and database migrations.</td></tr><tr><td>lib</td><td>It contains extended module for your application.</td></tr><tr><td>log</td><td>It contains application log files.</td></tr><tr><td>public</td><td>It contains static files and compiled assets. This is the only folder seen by the world.</td></tr><tr><td>test</td><td>It contains unit tests, other test apparatus and fixtures.</td></tr><tr><td>tmp</td><td>It contains temporary files like cache and pid files.</td></tr><tr><td>vendor</td><td>It contains all third-party code like vendor gems.</td></tr><tr><td>Gemfile</td><td>Here all your app&#8217;s gem dependencies are declared. It is mandatory as it includes Rails core gems among other gems.</td></tr><tr><td>Gemfile.lock</td><td>It holds gems dependency tree including all versions for the app.</td></tr><tr><td>README.md</td><td>It is a brief instruction manual for your application.</td></tr><tr><td>Rakefile</td><td>It locates and loads tasks that can be run from the command line.</td></tr><tr><td>config.ru</td><td>Rack configuration for Rack based servers used to start the application.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>On creating a Rails application, the entire Rails directory structure is created. We will explain Rails 5 directory structure here. The&nbsp;jtp&nbsp;directory (shown below) has a number of auto-generated files and folders that comprises the structure of Rails application. We will explain the function of each of the files and folders present in the above directory. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3335"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3335"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3335/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3335"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3335"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3335"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3337,"date":"2020-09-13T05:56:09","date_gmt":"2020-09-13T05:56:09","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3337"},"modified":"2020-09-13T05:56:09","modified_gmt":"2020-09-13T05:56:09","slug":"active-record","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/active-record/","title":{"rendered":"Active Record"},"content":{"rendered":"\n<p>Data structures are represented by a hierarchy of classes. Data is mostly stored in relational database tables. There is an essential mismatch between your program&#8217;s object view and database&#8217;s relational data view. To remove this mismatch, many attempts have been tried. One way to resolve this mismatch was through the use of Object-relational-mapping (ORM) tools. ORM is the mapping of relational database tables to object-oriented classes.</p>\n\n\n\n<p>A perfect ORM hides the details of a database&#8217;s relational data behind the object hierarchy. In Rails, ORM is implemented by Active Record which is one of the most important components of the Rails library.</p>\n\n\n\n<p>An ORM provides a mapping layer between how a database handles its data and how an object-oriented application handles its data. It maps database tables to classes, database table rows to objects, and database tables columns to object attributes. Active Record mainly carries out the mapping process for you. While using Active Record, you have to no longer deal with database constructs like tables, rows or columns. Your application only deals with classes, attributes and objects.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/active-record.png\" alt=\"Ruby Active record\"/></figure>\n\n\n\n<p>Active Record is based on a design pattern created by Martin Fowler. From this design pattern only, the Active Record got its name. Its code works very well even with less number of lines. It is quite easy to use. Active Record Rails application does not need any configuration at all, if proper naming schemes is followed in your database and classes.</p>\n\n\n\n<p>There is one more feature of Active Record that makes your work easy, the implementation of a domain-specific-language (DSL). A DSL is a programming language intended to use in a specific problem domain. It allows you to use dynamically generated methods, like to retrieve a record, method find_by_first_name is used.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Active Record Basics</h2>\n\n\n\n<p>Some of the basics of Active Record are classes, objects and naming conventions.</p>\n\n\n\n<ul><li><strong>Active Record Classes and Objects</strong></li><li><strong>Active Record naming conventions</strong></li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Class and Database</h2>\n\n\n\n<p>Database table should be named in the plural form and in lowercase of your model classes. For example, if a model class name is&nbsp;<strong>Student</strong>, then corresponding table name will be&nbsp;<strong>students</strong>. With the help of this convention, Rails will automatically find the corresponding table to your model class without any configuration code. It even supports plural nouns such as &#8216;people&#8217; as the plural of &#8216;person&#8217;.</p>\n\n\n\n<p>Rails provides a facility where you can add plurals for a model. To define your own pluralization, add code to the config/environment.rb using&nbsp;<strong>Inflector.</strong></p>\n\n\n\n<p>In some case, if you don&#8217;t want to name your database in the plural form, Rails can be configured with singular-named database tables by adding following line to the config/environment.rb :</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ActiveRecord::Base.pluralize_table_names = false  </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Data structures are represented by a hierarchy of classes. Data is mostly stored in relational database tables. There is an essential mismatch between your program&#8217;s object view and database&#8217;s relational data view. To remove this mismatch, many attempts have been tried. One way to resolve this mismatch was through the use of Object-relational-mapping (ORM) tools. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3337"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3337"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3337/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3337"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3337"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3337"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3339,"date":"2020-09-13T05:56:45","date_gmt":"2020-09-13T05:56:45","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3339"},"modified":"2020-09-13T05:56:45","modified_gmt":"2020-09-13T05:56:45","slug":"ruby-on-rails-mvc","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-mvc/","title":{"rendered":"Ruby on Rails MVC"},"content":{"rendered":"\n<p>Like most of the other frameworks, Rails is also based on MVC pattern. It basically works as following:</p>\n\n\n\n<p>Requests first come to the controller, controller finds an appropriate view and interacts with model which in turn interacts with database and send response to controller. Then controller gives the output to the view based on the response.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Model</h3>\n\n\n\n<p>The models are classes in Rails. They interact with database, store data, handles validation, transaction, etc.</p>\n\n\n\n<p>This subsystem is implemented in&nbsp;<strong>ActiveRecord</strong>&nbsp;library. This library provides an interface between database tables and Ruby program code that manipulates database records.</p>\n\n\n\n<p>Ruby method names are automatically generated from database tables field names.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>View</h3>\n\n\n\n<p>View represent data in a particular format in an application for the users. It handles HTML, CSS, JavaScript and XML in an application. They do what controller tells them.</p>\n\n\n\n<p>This subsystem is implemented in&nbsp;<strong>ActionView</strong>&nbsp;library. This library is an Embedded Ruby (Erb) based system which define presentation templates for data presentation.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Controller</h3>\n\n\n\n<p>Controller directs traffic to views and models. It query models for data from the database and display the desired result with the help of view in an application.</p>\n\n\n\n<p>This subsystem is implemented in&nbsp;<strong>ActionController</strong>&nbsp;library. This library is a data broker sitting between ActiveRecord and ActionView.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-mvc1.png\" alt=\"Ruby On rails mvc 1\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Like most of the other frameworks, Rails is also based on MVC pattern. It basically works as following: Requests first come to the controller, controller finds an appropriate view and interacts with model which in turn interacts with database and send response to controller. Then controller gives the output to the view based on the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3339"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3339"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3339/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3339"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3339"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3339"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3341,"date":"2020-09-13T05:58:18","date_gmt":"2020-09-13T05:58:18","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3341"},"modified":"2020-09-13T05:58:18","modified_gmt":"2020-09-13T05:58:18","slug":"ruby-on-rails-rvm","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-rvm/","title":{"rendered":"Ruby on Rails RVM"},"content":{"rendered":"\n<p>RVM stands for Ruby Version Manager. It is a command line tool which allows you to easily install, manage and work with different Ruby environments. With RVM, you can easily install different versions of Ruby and easily switch between them.</p>\n\n\n\n<p>RVM is maintained by the github community through pull requests sent to the project repository.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<p>The basic syntax of RVM is,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rvm command_options command ruby_to_act_on </code></pre>\n\n\n\n<p>The RVM flags allows you to alter the behavior of RVM.</p>\n\n\n\n<p>To get the list of RVM commands, type the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rvm help  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>How to Use Gemsets</h2>\n\n\n\n<p>One way to distribute code in Ruby is to use a format called gems. Gems are installed to extend capabilities of core Ruby distribution. And gems are often installed to get certain programs to function correctly.</p>\n\n\n\n<p>To provide certain Ruby environments, it is also possible to install gems that are only associated with a single Ruby installation. This functionality is called&nbsp;<strong>gemsets.</strong></p>\n\n\n\n<p>It means that you can have two different versions of same gem, or you can make gems unaware of other gems on a system.</p>\n\n\n\n<p>To see the available gemsets for the current Ruby, type the following command,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rvm gemset list  </code></pre>\n\n\n\n<p>If you have more than one Ruby version installed, you can see all of the gemsets by typing,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rvm gemset list_all  </code></pre>\n\n\n\n<p>By default, two gemsets are configured:</p>\n\n\n\n<ul><li><strong>default:</strong>&nbsp;This gemset is applied if no other gemset is specified.</li><li><strong>global:</strong>&nbsp;This gemset is inherited by every other gemset that is used. It does not need to be selected because it will be included automatically.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Gem Dependency</h2>\n\n\n\n<p>With RVM, no gems other than those required are installed. Due to this, working with multiple complex applications which has a long list of dependencies is much more efficient. RVM allows you to easily test gem upgrades by switching to a new clean set of gems to test with, while leaving your original set intact. You can even maitain a set of gems per environment, per development branch or per individual developer&#8217;s taste.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Gem Management</h2>\n\n\n\n<p>RVM provides you most flexible gem management system called Named Gem Sets. It lets you add a small text file to your application&#8217;s repository, instead of checking in tons of gems. Only one downloaded version of each gem resides on disk rather than several copies because RVM&#8217;s gemset management uses a common cache directory.</p>\n\n\n\n<h2>Update RVM</h2>\n\n\n\n<p>RVM installation can be updated easily to a new version from within the utility.</p>\n\n\n\n<p>Run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rvm get stable  </code></pre>\n\n\n\n<p>RVM will fetch and install newest version and then reload it. If your configurations are placed in config/db instead of user/db, it would be wiped out.</p>\n\n\n\n<p>To upgrade RVM to the latest version, type:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rvm get head  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Summary</h2>\n\n\n\n<p>RVM is a versatile tool that can be used to manage projects and entire Ruby environments. RVM can be used to configure server installations, development conditions, etc.</p>\n","protected":false},"excerpt":{"rendered":"<p>RVM stands for Ruby Version Manager. It is a command line tool which allows you to easily install, manage and work with different Ruby environments. With RVM, you can easily install different versions of Ruby and easily switch between them. RVM is maintained by the github community through pull requests sent to the project repository. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3341"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3341"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3341/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3341"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3341"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3341"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3343,"date":"2020-09-13T05:59:17","date_gmt":"2020-09-13T05:59:17","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3343"},"modified":"2020-09-13T05:59:17","modified_gmt":"2020-09-13T05:59:17","slug":"ruby-on-rails-bundler","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-bundler/","title":{"rendered":"Ruby on Rails Bundler"},"content":{"rendered":"\n<p>In Rails, bundler provides a constant environment for Ruby projects by tracking and installing suitable gems that are needed. It manages an application&#8217;s dependencies through its entire life, across many machines, systematically and repeatably.</p>\n\n\n\n<p>To use bundler, you need to install it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem install bundler  </code></pre>\n\n\n\n<p>The gem bundler bundles all the suitable gems your appication is based upon. Bundling Rails and other dependencies increases slug size by a few megabytes. Increased slug size is a worthwhile tradeoff for simplified dependency management, as well as flexibility of being able to use any version of Rails you wish.</p>\n\n\n\n<p>To not install a group of gems, use the BUNDLE_WITHOUT config var.</p>\n\n\n\n<h2>Bundler Version</h2>\n\n\n\n<p>Different versions of bundler have different bugs and behavior. Bundler versions generally take a large amount of verification and Validation and are released infrequently. It needs maximum stability, avoids deprecation and notification cycles on Bundler as it changes.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Bundler Version Issues</h3>\n\n\n\n<p>Different bundler versions have different bugs.</p>\n\n\n\n<h3>Bundler 1.13.6</h3>\n\n\n\n<p>If you are using an older version of bundler, it allows you to have a version of Ruby in your Gemfile.lock file. It is not valid according to the Ruby declaration in your Gemfile.</p>\n\n\n\n<p>You will get the following error:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Your Ruby version is 2.2.5, but your Gemfile specified 2.3.1 </code></pre>\n\n\n\n<p>You need to upgrade to latest bundler.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Bundler 1.13.1</h3>\n\n\n\n<p>You will get the following error:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Bundler Output: requires_greater_than_equal_ruby_two_two-0.1.0 requires ruby version >= 2.2.2, which   \nis incompatible with the current version, ruby 2.1.7p400  </code></pre>\n\n\n\n<p>You need to upgrade your Ruby version to be compatible with minimum Ruby version specified in your gems.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Bundler 1.11.2</h3>\n\n\n\n<p>Some times your application may be running with a gem that currently does not have a valid gemspec.</p>\n","protected":false},"excerpt":{"rendered":"<p>In Rails, bundler provides a constant environment for Ruby projects by tracking and installing suitable gems that are needed. It manages an application&#8217;s dependencies through its entire life, across many machines, systematically and repeatably. To use bundler, you need to install it. The gem bundler bundles all the suitable gems your appication is based upon. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3343"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3343"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3343/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3343"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3343"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3343"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3345,"date":"2020-09-13T06:00:38","date_gmt":"2020-09-13T06:00:38","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3345"},"modified":"2020-09-13T06:00:38","modified_gmt":"2020-09-13T06:00:38","slug":"ruby-on-rails-migrations-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-migrations-2/","title":{"rendered":"Ruby on Rails Migrations"},"content":{"rendered":"\n<p>Migrations are a way to alter database schema over time in a consistent and organized manner. They use a Ruby DSL through which there is no need to write SQL by hand.</p>\n\n\n\n<p>SQL fragments can be edited by hand but then you have to tell other developers about the changes you made and then run them. You need to keep track of changes that need to be run against production machines next time you deploy.</p>\n\n\n\n<p>Each migration is a new version of the database. Each migration modifies database by adding or removing tables, columnns or entries. Active record will update your db/schema.rb file to match up-to-date structure of your database.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Purpose of Migrations</h2>\n\n\n\n<p>It is important to know the purpose of migration before using it. Database is used in all web applications.</p>\n\n\n\n<p>Generally, a SQL statement is used to run database queries to create, modify, read or delete columns of a database.</p>\n\n\n\n<p>Migration file contains a specific set of instructions for how a database should be created. When this file is run, Rails will make changes in the database automatically. Gradually, the migration file will act as a versioned history of how database has changed. It implies that you will be able to recreate the database from the set of instructions file.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating Migration file</h2>\n\n\n\n<p>Syntax to create a migration file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>application_dir> rails generate migration table_name  </code></pre>\n\n\n\n<p>This will create a file with the name db/migrate/001_table_name.rb. A migration file contains basic data structure of a database table.</p>\n\n\n\n<p>It is advisable that before running the migration generator, clean the existing migrations generated by model generators.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Let us create a migration called <strong>java</strong> in the application <strong>tutorials.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails generate migration java  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-migrations1.png\" alt=\"Ruby On rails migrations 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Editing Code</h2>\n\n\n\n<p>Go to db/migrate directory in the tutorials application. Write the followig code in the present file 001_java.rb,</p>\n\n\n\n<p>The method&nbsp;<strong>self.up</strong>&nbsp;is used during migrating to a new version and&nbsp;<strong>self.down</strong>&nbsp;is used to roll back any changes if needed.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Run Migration</h2>\n\n\n\n<p>After creating all the required migration files you need to execute them. To execute migration file against database, run the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate </code></pre>\n\n\n\n<p>It will create a &#8220;schema_info&#8221; table if doesn&#8217;t exist. It tracks the current version of the database.</p>\n\n\n\n<p>If new migration will be created then that will be a new version for the database.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-migrations2.png\" alt=\"Ruby On rails migrations 2\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Migrations are a way to alter database schema over time in a consistent and organized manner. They use a Ruby DSL through which there is no need to write SQL by hand. SQL fragments can be edited by hand but then you have to tell other developers about the changes you made and then run [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3345"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3345"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3345/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3345"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3345"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3345"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3347,"date":"2020-09-13T06:03:03","date_gmt":"2020-09-13T06:03:03","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3347"},"modified":"2020-09-13T06:03:03","modified_gmt":"2020-09-13T06:03:03","slug":"ruby-on-rails-router","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-router/","title":{"rendered":"Ruby on Rails Router"},"content":{"rendered":"\n<p>The Rails router recognizes URLs and dispatches them to a controller&#8217;s action. It also generate paths and URLs. Rails router deals URLs in a different way from other language routers. It determines controller, parameters and action for the request.</p>\n\n\n\n<p>Basically a router is a way to redirect incoming requests to controllers and actions. It replaces mod_rewrite rules. One best thing is that, in Rails routing works with any web server.</p>\n\n\n\n<p>Rails handles routing via config/routes.rb file rather than relying on the web server to control URL routing. This file controls every single aspect of your URLs, like rules that try to match the URL path for a request and decides where to direct that request.</p>\n\n\n\n<p>Main purpose of Rails routers is explained below:</p>\n\n\n\n<ul><li>Connecting URLs to code</li><li>Generating paths and URLs from code</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>RESTful Routes</h2>\n\n\n\n<p>To understand routing, we need to understand REST. Rails uses REST mainly for URL routing. So REST is important to understand Rails routing. It stands for Representational State Transfer.</p>\n\n\n\n<p>There are several HTTP methods that are used with REST to represent the types of actions performed by the user or application.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>HTTP Method</th><th>Purpose</th><th>Example</th></tr><tr><td>GET</td><td>Retrieve a resource</td><td>To navigate directly to a page or by using Google, get HTTP method is used.</td></tr><tr><td>POST</td><td>Create a resource</td><td>POST HTTP method was used for older web applications.</td></tr><tr><td>PUT</td><td>Completely update a resource</td><td>Updating user profile on a website uses patch with web frameworks that support it.</td></tr><tr><td>PATCH</td><td>Partially update a resource</td><td>It is used to only update the password for a user profile on a website.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating a Route</h2>\n\n\n\n<p>To create a route, you need to map a URL to a controller and an action. When router sees a request, it dispatches it to a controller&#8217;s action matching the URL.</p>\n\n\n\n<p>If a URL looks like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/roll/1  </code></pre>\n\n\n\n<p>It will be mapped to a controller&#8217;s action assuming the route is defined as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>get 'roll/:id' => 'roll#branch'  </code></pre>\n\n\n\n<p>This is the shorthand for,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>get 'roll/:id' to: 'roll/branch'  </code></pre>\n\n\n\n<p>The controller will be&nbsp;<strong>RollController</strong>&nbsp;and the method will be&nbsp;<strong>branch</strong>. The # in front of method is a way in Ruby saying that it is an instance method.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Let&#8217;s see it through an example.</p>\n\n\n\n<p>Create a <strong>student</strong> application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails new student  </code></pre>\n\n\n\n<p>Inside this, create a controller named as <strong>RollController </strong>. Routes will be defined for actions which are defined as methods defined in <strong>RollController </strong>class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails generate controller RollController  </code></pre>\n\n\n\n<p>Open library/config/routes.rb file and write the following code in it.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rails.application.routes.draw do   \n   get 'roll/list'   \n   get 'roll/new'   \n   post 'roll/create'   \n   patch 'roll/update'   \n   get 'roll/list'   \n   get 'roll/show'   \n   get 'roll/edit'   \n   get 'roll/delete'   \n   get 'roll/update'   \n   get 'roll/show_subjects'   \nend   </code></pre>\n\n\n\n<p>It defines actions available in the applications and type of actions such as patch, get and post.</p>\n\n\n\n<p>To list defined routes in your application which are used for tracking down routing problems, use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake routes  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-routers1.png\" alt=\"Ruby On rails routers 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Resource Routing</h3>\n\n\n\n<p>The resource routing allows you to declare all of the common routes for a controller. It defines separate routes for index, create, update, read, delete and new actions in a single line of code.</p>\n\n\n\n<h3>Resources on the web</h3>\n\n\n\n<p>Browsers request pages from a URL by certain HTTP methods like GET, POST, PUT, DELETE and PATCH. Each method performs an operation on a request.</p>\n\n\n\n<h3>CRUD, Verbs and Actions</h3>\n\n\n\n<p>A resourceful route provides a mapping between HTTP verbs and URLs to controller actions. By convention, each action maps a specific CRUD operation in a database.</p>\n\n\n\n<h3>Path and URL Helpers</h3>\n\n\n\n<p>A number of helpers to the controllers will be exposed in an application by creating a resourceful route.</p>\n\n\n\n<h3>Defining Multiple Resources at the same time</h3>\n\n\n\n<p>You can create routes for more than one resource by defining them all with a single call to resources.</p>\n\n\n\n<h3>Singular Resources</h3>\n\n\n\n<p>Singular resources are those resources which are requested by users without any referencing ID. For example, you can use singular resource to map /profile (rather than /profile/:id) to show action.</p>\n\n\n\n<h3>Controller Namespaces and Routing</h3>\n\n\n\n<p>Group of controllers are organized under a namespace. Mostly, a number of administrative controllers are named under an Admin:: namespace. These controllers are placed under the app/controllers/admin directory and can be grouped together in router.</p>\n\n\n\n<h3>Nested Resources</h3>\n\n\n\n<p>Some resources are child resources of other resources. Nested routes allow you to capture relationship in your routing.</p>\n\n\n\n<h3>Routing Concerns</h3>\n\n\n\n<p>Routing concerns allow you to declare common routes that can be reused inside other resources and routes.</p>\n\n\n\n<h3>Creating Paths and URLs from objects</h3>\n\n\n\n<p>Rails can also create paths and URLs from an array of parameters.</p>\n\n\n\n<h3>Adding more RESTful Actions</h3>\n\n\n\n<p>You are not limited to the defaults RESTful routing. You can create additional routes to apply on a collection or individual members of the collection.</p>\n\n\n\n<h3>Non-Resourceful Routes</h3>\n\n\n\n<p>Rails provide you a facility to route arbitrary URLs to actions. Here you have to set up each route within your application separately because you will not get groups of routes automatically by resourceful routing.</p>\n","protected":false},"excerpt":{"rendered":"<p>The Rails router recognizes URLs and dispatches them to a controller&#8217;s action. It also generate paths and URLs. Rails router deals URLs in a different way from other language routers. It determines controller, parameters and action for the request. Basically a router is a way to redirect incoming requests to controllers and actions. It replaces [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3347"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3347"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3347/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3347"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3347"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3347"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3349,"date":"2020-09-13T06:05:03","date_gmt":"2020-09-13T06:05:03","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3349"},"modified":"2020-09-13T06:05:03","modified_gmt":"2020-09-13T06:05:03","slug":"ruby-on-rails-scaffolding-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-scaffolding-2/","title":{"rendered":"Ruby on Rails Scaffolding"},"content":{"rendered":"\n<h2>Scaffolding</h2>\n\n\n\n<p>Scaffolding is a quick way to produce some major pieces of an application. For auto generating a set of models, views and controllers for a new resource in a single operation, scaffolding is used.</p>\n\n\n\n<p>Scaffolding is a technique supported by MVC frameworks in which programmers can specify how application database may be used. The framework or compiler uses it together with pre-defined code templates to generate the final code that the application can use to perform CRUD in database entries, effectively treating the templates as a &#8220;scaffold&#8221; on which to build a more powerful application.</p>\n\n\n\n<p>Scaffolding occurs at two different phases of the program lifecycle, design time and run time. Design time scaffolding produces files of code that can later be modified by the programmer. Run time scaffolding produces code on the fly. It allows changes to the design of the templates to be immediately reflected throughout the application.</p>\n\n\n\n<h2>Scaffolding on Rails</h2>\n\n\n\n<p>Scaffolding was made popular by the Rails framework.</p>\n\n\n\n<p>When line scaffold :model_name is added to a controller, Rails will automatically generate all the appropriate data interfaces at run time.</p>\n\n\n\n<p>An external command can also be used to generate Ruby code for the scaffold in advance, which is rails generate scaffold model_name. The generated script will produce files of Ruby code that application can use to interact with database.</p>\n\n\n\n<p>As of Rails 2.0, dynamic scaffolding is no longer supported.</p>\n\n\n\n<h2>Nested Scaffold</h2>\n\n\n\n<p>Nested scaffold is the command that generates a set of perfectly working nested resource for Rails 4.2 and 5.</p>\n\n\n\n<p><strong>Features</strong></p>\n\n\n\n<ul><li>Generates a nested child resource with a single command</li><li>Generates a beautifully working bunch of code</li><li>Automatically generates appropriate model associations for ActiveRecord</li><li>Haml ready</li></ul>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<p>To install nested scaffold, use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem 'nested_scaffold'  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating a Resource</h2>\n\n\n\n<p>To generate a scaffold for the post resource, enter the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails generate scaffold Post name:string title:string content:text  </code></pre>\n\n\n\n<p>The scaffold generator will build several files in your application with some folders.</p>\n\n\n\n<p>Following files will be created with scaffolding.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>File</th><th>Purpose</th></tr><tr><td>db/migrate/20100207214725_create_posts.rb</td><td>Creates the post table in your database</td></tr><tr><td>app/models/post.rb</td><td>The Post model</td></tr><tr><td>test/unit/post_test.rb</td><td>Unit testing harness for posts model</td></tr><tr><td>test/fixtures/posts.yml</td><td>Sample posts for use in testing</td></tr><tr><td>config/routes.rb</td><td>Edited to include routing information for posts</td></tr><tr><td>app/controllers/posts_controller.rb</td><td>The posts controller</td></tr><tr><td>app/views/posts/index.html.erb</td><td>A view to display index of all posts</td></tr><tr><td>app/views/posts/edit.html.erb</td><td>A view to edit an existing post</td></tr><tr><td>app/views/posts/show.html.erb</td><td>A view to display a single post</td></tr><tr><td>app/views/posts/new.html.erb</td><td>A view to create a new post</td></tr><tr><td>app/views/posts/_form.html.erb</td><td>A partial to control the overall look and feel of the form used in edit and new views</td></tr><tr><td>test/functional/post_controller_test.rb</td><td>Functional testing harness for posts controller</td></tr><tr><td>app/helpers/posts_helper.rb</td><td>Helper functions to be used from the post views</td></tr><tr><td>test/unit/helpers/posts_helper_test.rb</td><td>Unit testing harness for the posts helper</td></tr><tr><td>app/assets/javascripts/posts.js.coffee</td><td>Coffee script for post controller</td></tr><tr><td>app/assets/stylesheets/posts.css.scss</td><td>Cascading style sheet for post controller</td></tr><tr><td>app/assets/stylesheets/scaffolds.css.scss</td><td>Cascading style sheet to make scaffolded views look better</td></tr></tbody></table></figure>\n\n\n\n<p>Many experienced developers avoid scaffolding, instead prefer to write all or most of their source code from scratch. Because its automatically generated code may not fit into your application.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scaffold Example</h2>\n\n\n\n<p>Let us generate following example with scaffold.</p>\n\n\n\n<p><strong>Step 1</strong> Create an application</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails new example </code></pre>\n\n\n\n<p><strong>Step 2</strong> In the example application, create MVC components.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd example  \nrails generate scaffold post title:string body:text  \nrails generate scaffold comment post_id:integer bod</code></pre>\n\n\n\n<p>From the above code, first move to the application directory.</p>\n\n\n\n<p><strong>Step 3</strong> Create database tables comments and post_id.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate </code></pre>\n\n\n\n<p><strong>Step 4</strong> Use rake command to run migrations.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake routes  </code></pre>\n\n\n\n<p><strong>Step 5</strong> Start the web server</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails server  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<p>Run&nbsp;<strong>http://localhost:3000/posts</strong>&nbsp;in your browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-scaffolding1.png\" alt=\"Ruby On rails scaffolding 1\"/></figure>\n\n\n\n<p>Go to New Post</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-scaffolding2.png\" alt=\"Ruby On rails scaffolding 2\"/></figure>\n\n\n\n<p>Click on Create.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-scaffolding3.png\" alt=\"Ruby On rails scaffolding 3\"/></figure>\n\n\n\n<p>Click on Edit.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-scaffolding4.png\" alt=\"Ruby On rails scaffolding 4\"/></figure>\n\n\n\n<p>Click on Update.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-on-rails-scaffolding5.png\" alt=\"Ruby On rails scaffolding 5\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Scaffolding Scaffolding is a quick way to produce some major pieces of an application. For auto generating a set of models, views and controllers for a new resource in a single operation, scaffolding is used. Scaffolding is a technique supported by MVC frameworks in which programmers can specify how application database may be used. The [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3349"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3349"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3349/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3349"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3349"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3349"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3351,"date":"2020-09-13T06:09:53","date_gmt":"2020-09-13T06:09:53","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3351"},"modified":"2020-09-13T06:09:53","modified_gmt":"2020-09-13T06:09:53","slug":"rails-session","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rails-session/","title":{"rendered":"Rails Session"},"content":{"rendered":"\n<p>Rails session is only available in controller or view and can use different storage mechanisms. It is a place to store data from first request that can be read from later requests.</p>\n\n\n\n<p>Following are some storage mechanism for sessions in Rails:</p>\n\n\n\n<ul><li>ActionDispatch::Session::CookieStore &#8211; Stores everything on the client.</li><li>ActionDispatch::Session::CacheStore &#8211; Stores data in the Rails cache.</li><li>ActionDispatch::Session::ActiveRecordStore &#8211; Stores data in the database using Active Record.</li><li>ActionDispatch::Session::MemCacheStore &#8211; Stores data in a memcached cluster</li></ul>\n\n\n\n<p>All the storage mechanisms use cookie to store a unique ID for each session. Generally this ID look up the session data on the server like database table. There is one exception, that is the default and recommended session store is the CookieStore which stores all session data in the cookie itself. It is very light-weighted and it requires zero setup in a new application in order to use session. The cookie data is encrypted and cryptographically signed to make it tamper-proof.</p>\n\n\n\n<p>Complex objects should not be stored in the session, as server may not reassemble them between requests which will ultimately results in error.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Accessing the Session</h2>\n\n\n\n<p>The session can be accessed through the session instance method. If sessions will not be accessed in action&#8217;s code, they will not be loaded.</p>\n\n\n\n<p>Session values are stored using key/value pair like a hash. They are usually 32 bit character long string.</p>\n\n\n\n<p>In Rails, data can be save and retrieve using session method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>session&#91;:user_id] = @current_user.id  \nUser.find(session&#91;:user_id])</code></pre>\n\n\n\n<p>To store data in the session, assign it to the key.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class LoginsController &lt; ApplicationController  \n  # \"Create\" a login, aka \"log the user in\"  \n  def create  \n    if user = User.authenticate(params&#91;:username], params&#91;:password])  \n      # Save the user ID in the session so it can be used in  \n      # subsequent requests  \n      session&#91;:current_user_id] = user.id  \n      redirect_to root_url  \n   end  \n  end  \nend  </code></pre>\n\n\n\n<p>To remove data from the session, assign that key to be nil.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class LoginsController &lt; ApplicationController  \n  # \"Delete\" a login, aka \"log the user out\"  \n  def destroy  \n    # Remove the user id from the session  \n    @_current_user = session&#91;:current_user_id] = nil  \n    redirect_to root_url  \n  end  \nend  </code></pre>\n\n\n\n<p>To reset the entire session, use reset_session.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Session Example</h2>\n\n\n\n<p>We will create a simple log in form using session. Once a user is signed in, his credentials will be saved. Only signed in users will be able to log in. You can also view all the sign in users.</p>\n\n\n\n<p><strong>Step 1</strong> Create an application log</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails new log</code></pre>\n\n\n\n<p><strong>Step 2</strong> Change your directory to log</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd log  </code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;Go to the Gemfile of your application. Activate the line gem &#8216;bcrypt&#8217; and deactivate the line gem &#8216;jbuilder&#8217; in the file.</p>\n\n\n\n<p><strong>Step 4</strong> Now run the bundle</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bundle </code></pre>\n\n\n\n<p><strong>Step 5</strong> Create a controller.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g controller Page index  </code></pre>\n\n\n\n<p><strong>Step 6</strong> Change the config/routes.rb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rails.application.routes.draw do  \n  get 'page/index'  \n  root 'page#index'  \nend  </code></pre>\n\n\n\n<p><strong>Step 7</strong> Generate a user scaffold..</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g scaffold User first_name last_name email password:digest  </code></pre>\n\n\n\n<p><strong>Step 8</strong> Migrate your database.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate  </code></pre>\n\n\n\n<p><strong>Step 9</strong> Go to app/models/user.rb file and write following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class User &lt; ActiveRecord::Base  \n  has_secure_password  \n  validates :first_name,  \n            presence: true  \n  validates :last_name,  \n            presence: true  \n  validates :email,  \n            presence: true,  \n            uniqueness: true,  \n            format: {  \n              with: /\\A(&#91;^@\\s]+)@((?:&#91;-a-z0-9]+\\.)+&#91;a-z]{2,})\\z/i  \n            }  \n  def to_s  \n    \"#{first_name} #{last_name}\"  \n  end  \nend  </code></pre>\n\n\n\n<p><strong>Step 10</strong> We need a session mechanism to create a login and logout procedure.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g controller sessions new create destroy </code></pre>\n\n\n\n<p><strong>Step 11</strong> Go to config/routes.rb file and change the following data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rails.application.routes.draw do  \n  resources :sessions, only: &#91;:new, :create, :destroy]  \n  get 'signup', to: 'users#new', as: 'signup'  \n  get 'login', to: 'sessions#new', as: 'login'  \n  get 'logout', to: 'sessions#destroy', as: 'logout'  \n  resources :users  \n  get 'page/index'  \n  root 'page#index'  \nend  </code></pre>\n\n\n\n<p><strong>Step 12</strong> Create a login form in app/views/sessions/new.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Log In&lt;/h1>   \n&lt;%= form_tag sessions_path do %>   \n&lt;div>   \n&lt;%= label_tag :email %>&lt;br>   \n&lt;%= text_field_tag :email %>   \n&lt;/div>   \n  &lt;div>   \n    &lt;%= label_tag :password %>&lt;br>   \n&lt;%= password_field_tag :password %>   \n&lt;/div>   \n  &lt;div>   \n    &lt;%= submit_tag \"Log In\" %>   \n&lt;/div>   \n&lt;% end %>  </code></pre>\n\n\n\n<p><strong>Step 13</strong> Go to app/controllers/sessions_controller.rb file and write the following code.</p>\n\n\n\n<ol id=\"block-272d0160-888e-4fab-bbf9-dcca1ecb343b\"><li>c<strong>lass</strong> SessionsController &lt; ApplicationController   </li><li>  <strong>def</strong> new   </li><li>  <strong>end</strong>   </li><li>  <strong>def</strong> create   </li><li>    user = User.find_by_email(params[:email])   </li><li>    <strong>if</strong> user &amp;&amp; user.authenticate(params[:password])   </li><li>      session[:user_id] = user.id   </li><li>      redirect_to root_url, notice: &#8216;Logged in!&#8217;   </li><li>    <strong>else</strong>   </li><li>      render :new   </li><li>    <strong>end</strong>   </li><li>  <strong>end</strong>   </li><li>  <strong>def</strong> destroy   </li><li>    session[:user_id] = <strong>nil</strong>   </li><li>    redirect_to root_url, notice: &#8216;Logged out!&#8217;   </li><li>  <strong>end</strong>   </li><li><strong>end</strong>  </li></ol>\n\n\n\n<p><strong>Step 14</strong> We need to create a current_user method to access current user in the application. Go to the app/controllers/application_controller.rb file and write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ApplicationController &lt; ActionController::Base   \n  # Prevent CSRF attacks by raising an exception.   \n  # For APIs, you may want to use :null_session instead.   \n  protect_from_forgery with: :exception   \n  private   \n  def current_user   \n    User.where(id: session&#91;:user_id]).first   \n  end   \n  helper_method :current_user   \nend  </code></pre>\n\n\n\n<p><strong>Step 15</strong> Go to the app/views/layouts/application.html.erb file and write the following code in the body.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id=\"user_header\">  \n  &lt;% if current_user %>  \n    Logged in as &lt;%= current_user.email %>.  \n    &lt;%= link_to \"Log Out\", logout_path %>  \n  &lt;% else %>  \n    &lt;%= link_to \"Sign Up\", signup_path %> or  \n    &lt;%= link_to \"Log In\", login_path %>  \n  &lt;% end %>  \n&lt;/div>  \n&lt;% flash.each do |key, value| %>  \n  &lt;%= content_tag(:div, class: \"alert alert-#{key}\") do %>  \n    &lt;p>&lt;%= value %>&lt;/p>  \n  &lt;% end %>  \n&lt;% end %></code></pre>\n\n\n\n<p><strong>Step 16</strong> Delete following line from app/views/users/show.html.erb and app/views/layouts/index.html.erb files.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p id=\"notice\">&lt;%= notice %>&lt;/p>  </code></pre>\n\n\n\n<p><strong>Step 17</strong> When a new user sign up, he/she will be auto login. For this, we need to set session in the app/controllers/users_controller.rb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def create   \n    @user = User.new(user_params)   \n    if @user.save   \n      session&#91;:user_id] = @user.id   \n      redirect_to root_url, notice: 'User successfully created.'   \n    else   \n      render :new   \n    end   \n  end  </code></pre>\n\n\n\n<p><strong>Step 18</strong> Start your Rails server in the console.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails s  </code></pre>\n\n\n\n<p><strong>Step 19</strong> Go to the browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Localhost:3000  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-session1.png\" alt=\"Rails Ruby Session 1 \"/></figure>\n\n\n\n<p>Let us Sign Up for a user&nbsp;<strong>Anna.</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-session2.png\" alt=\"Rails Ruby Session 2 \"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-session3.png\" alt=\"Rails Ruby Session 3 \"/></figure>\n\n\n\n<p>On clicking Back button, you can see all signed in users.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-session4.png\" alt=\"Rails Ruby Session 4 \"/></figure>\n\n\n\n<p>Now let us log in from the user Anna.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-session5.png\" alt=\"Rails Ruby Session 5 \"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-session6.png\" alt=\"Rails Ruby Session 6 \"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Rails session is only available in controller or view and can use different storage mechanisms. It is a place to store data from first request that can be read from later requests. Following are some storage mechanism for sessions in Rails: ActionDispatch::Session::CookieStore &#8211; Stores everything on the client. ActionDispatch::Session::CacheStore &#8211; Stores data in the Rails [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3351"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3351"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3351/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3351"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3351"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3351"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3353,"date":"2020-09-13T06:13:56","date_gmt":"2020-09-13T06:13:56","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3353"},"modified":"2020-09-13T06:13:56","modified_gmt":"2020-09-13T06:13:56","slug":"rails-file-upload","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rails-file-upload/","title":{"rendered":"Rails File Upload"},"content":{"rendered":"\n<p>We can upload a file in Rails through file uploading. We will learn how to upload a file in this tutorial.</p>\n\n\n\n<p>Let us see an example of file uploading through Rails.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<p><strong>Step 1</strong> Create a Rails application called upload.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails new upload </code></pre>\n\n\n\n<p><strong>Step 2</strong> Change your directory to upload.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd upload  </code></pre>\n\n\n\n<p><strong>Step 3</strong> Install the following gems.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem install carrierwave  \ngem install bootstrap-sass  </code></pre>\n\n\n\n<p><strong>Step 4</strong> Go to the Gemfile in your directory and add the following gems.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem 'carrierwave'   \ngem 'bootstrap-sass'  </code></pre>\n\n\n\n<p><strong>Step 5</strong> Run the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bundle install  </code></pre>\n\n\n\n<p><strong>Step 6</strong> Create a model with two strings as name and attachment.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g model Resume name:string attachment:string </code></pre>\n\n\n\n<p><strong>Step 7</strong> Migrate your database.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate  </code></pre>\n\n\n\n<p><strong>Step 8</strong> Generate the controller file in your application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g controller Resumes index new create destroy  </code></pre>\n\n\n\n<p><strong>Step 9</strong> In this step, we will create an uploader through carrierwave gem.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g uploader attachment</code></pre>\n\n\n\n<p><strong>Step 10</strong> Now open the app/models/resume.rb model file and write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Resume &lt; ApplicationRecord   \nmount_uploader :attachment, AttachmentUploader # Tells rails to use this uploader for this model.   \n   validates :name, presence: true # Make sure the owner's name is present.   \nend  </code></pre>\n\n\n\n<p><strong>Step 11</strong> Go to config/routes.rb file and write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>resources :resumes, only: &#91;:index, :new, :create, :destroy]   \n   root \"resumes#index\"  </code></pre>\n\n\n\n<p><strong>Step 12</strong> Go to app/controllers/resumes_controller.rb file and write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ResumesController &lt; ApplicationController   \n   def index   \n      @resumes = Resume.all   \n   end   \n      \n   def new   \n      @resume = Resume.new   \n   end   \n      \n   def create   \n      @resume = Resume.new(resume_params)   \n         \n      if @resume.save   \n         redirect_to resumes_path, notice: \"Successfully uploaded.\"   \n      else   \n         render \"new\"   \n      end   \n         \n   end   \n      \n   def destroy   \n      @resume = Resume.find(params&#91;:id])   \n      @resume.destroy   \n      redirect_to resumes_path, notice:  \"Successfully deleted.\"   \n   end   \n      \n   private   \n      def resume_params   \n      params.require(:resume).permit(:name, :attachment)   \n   end   \n      \nend  </code></pre>\n\n\n\n<p><strong>Step 13</strong> Add bootstrap in app/assets/stylesheets/resumes.scss file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@import \"bootstrap\";  </code></pre>\n\n\n\n<p><strong>Step 14</strong> Go to app/views/layouts/application.html.erb file and write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>   \n&lt;html>   \n &lt;head>   \n      &lt;title>File Uploading&lt;/title>   \n      &lt;%= stylesheet_link_tag \"application\", media: \"all\", \"data-turbolinks-track\" => true %>   \n      &lt;%= javascript_include_tag \"application\", \"data-turbolinks-track\" => true %>   \n      &lt;%= csrf_meta_tags %>   \n   &lt;/head>   \n      \n   &lt;body>   \n      &lt;div>   \n         &lt;%= yield %>   \n      &lt;/div>   \n   &lt;/body>   \n&lt;/html>  </code></pre>\n\n\n\n<p><strong>Step 15</strong> Go to app/views/documents/index.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"container\">   \n&lt;% if !flash&#91;:notice].blank? %>   \n   &lt;div>   \n      &lt;%= flash&#91;:notice] %>   \n   &lt;/div>   \n&lt;% end %>   \n  \n&lt;br>   \n  \n&lt;%= link_to \"New Resume\", new_resume_path %>   \n&lt;br>   \n&lt;br>   \n  \n&lt;table border=\"3\">   \n   &lt;thead>   \n      &lt;tr>   \n         &lt;th>Candidate Name&lt;/th>   \n         &lt;th>Download Link&lt;/th>   \n         &lt;th>Action&lt;/th>   \n      &lt;/tr>   \n   &lt;/thead>   \n      \n   &lt;tbody>   \n      &lt;% @resumes.each do |resume| %>   \n            \n         &lt;tr>   \n            &lt;td>&lt;%= resume.name %>&lt;/td>   \n            &lt;td>&lt;%= link_to \"Download\", resume.attachment_url %>&lt;/td>   \n            &lt;td>&lt;%= link_to \"Delete\",  resume, method: :delete, confirm: \"Are you sure you want to delete #{resume.name}?\" %>&lt;/td>   \n         &lt;/tr>   \n            \n      &lt;% end %>   \n   &lt;/tbody>   \n      \n&lt;/table>   \n&lt;/div> </code></pre>\n\n\n\n<p><strong>Step 16</strong> Go to app/views/documents/new.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class=\"container\">   \n&lt;% if !@resume.errors.empty? %>   \n   &lt;div>   \n         \n      &lt;ul>   \n         &lt;% @resume.errors.full_messages.each do |msg| %>   \n            &lt;li>&lt;%= msg %>&lt;/li>   \n         &lt;% end %>   \n&lt;div class=\"container\">   \n&lt;% if !@resume.errors.empty? %>   \n   &lt;div>   \n         \n      &lt;ul>   \n         &lt;% @resume.errors.full_messages.each do |msg| %>   \n            &lt;li>&lt;%= msg %>&lt;/li>   \n         &lt;% end %>      &lt;/ul>   \n         \n   &lt;/div>   \n&lt;% end %>   \n  \n&lt;div>   \n   &lt;%= form_for @resume, html: { multipart: true } do |f| %>   \n      &lt;%= f.label :name %>   \n      &lt;%= f.text_field :name %>   \n      &lt;br>&lt;br>   \n      &lt;%= f.label :attachment %>   \n      &lt;%= f.file_field :attachment %>   \n      &lt;br>   \n      &lt;%= f.submit \"Save\" %>   \n   &lt;% end %>   \n&lt;/div>   \n&lt;/div>  </code></pre>\n\n\n\n<p><strong>Step 17</strong> Now start the server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails s  </code></pre>\n\n\n\n<p><strong>Step 18</strong>&nbsp;Run this link on your browser&nbsp;<strong>http://localhost:3000/</strong></p>\n\n\n\n<p>The following page will appear in front of you.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-file-uploading1.png\" alt=\"Rails File uploading 1 \"/></figure>\n\n\n\n<p>Click on New Resume.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-file-uploading2.png\" alt=\"Rails File uploading 2 \"/></figure>\n\n\n\n<p>Click on Save button. Your document will be uploaded.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-file-uploading3.png\" alt=\"Rails File uploading 3 \"/></figure>\n\n\n\n<p>To download this document, click on Download link.</p>\n\n\n\n<p>To delete this document, click on Delete link.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-file-uploading4.png\" alt=\"Rails File uploading 4 \"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>We can upload a file in Rails through file uploading. We will learn how to upload a file in this tutorial. Let us see an example of file uploading through Rails. Example: Step 1 Create a Rails application called upload. Step 2 Change your directory to upload. Step 3 Install the following gems. Step 4 Go to the Gemfile [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3353"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3353"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3353/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3353"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3353"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3353"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4543,"date":"2020-09-13T06:27:53","date_gmt":"2020-09-13T06:27:53","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3355"},"modified":"2020-09-13T06:27:53","modified_gmt":"2020-09-13T06:27:53","slug":"rails-layout","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rails-layout/","title":{"rendered":"Rails Layout"},"content":{"rendered":"\n<p>In Rails, layouts are pieces that fit together (for example header, footer, menus, etc) to make a complete view. An application may have as many layouts as you want. Rails use convention over configuration to automatically pair up layouts with respective controllers having same name.</p>\n\n\n\n<p>Rails layouts basically work on Don&#8217;t Repeat Yourself principle (DRY).</p>\n\n\n\n<p>In Rails, layouts are enabled by default. Whenever you generate a new Rails application, a layout is automatically generated for you in app/views/layouts.</p>\n\n\n\n<p>First we need to define a layout template and then define the path for controller to know that layout exists.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating Responses</h2>\n\n\n\n<p>There are three ways to create an HTTP response from the controller&#8217;s point of view:</p>\n\n\n\n<ul><li>Call render to create a full response to send back to the browser</li><li>Call redirect_to to send an HTTP redirect status code to the browser</li><li>Call head to create a response to end back to the browser</li></ul>\n\n\n\n<h3>Importance of yield statement</h3>\n\n\n\n<p>The yield statement in Rails decides where to render the content for the action in layout. If there is no yield statement in the layout, the layout file itself will be rendered but additional content into the action templates will not be correctly placed within the layout.</p>\n\n\n\n<p>Hence, a yield statement is necessory to add in a layout file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%= yield %>   </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Relation between Rails Layouts and Templates</h2>\n\n\n\n<p>When a request is made in an application, following process occur:</p>\n\n\n\n<ul><li>First of all, Rails find a template for corresponding action to render method in your controllers action.</li><li>Then finds correct layout to use.</li><li>It uses action template to generate a content specific to the action.</li><li>Finally it looks for the layout&#8217;s yield statement and insert action&#8217;s template here.</li></ul>\n\n\n\n<h3>Finding correct layout</h3>\n\n\n\n<p>Rails searches for the layout with same name in the app/layouts directory as the controllers name.</p>\n\n\n\n<p>For example, if you have a controller called&nbsp;<strong>GioController</strong>, then rails will search for&nbsp;<strong>layouts/gio.html.erb</strong>&nbsp;layout. It no layout with the same name is present, then it will use the default layout&nbsp;<strong>app/views/layouts/appplication.html.erb</strong></p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<p>Earlier we made an example whose output is as follows:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-layout1.png\" alt=\"Ruby on rails Layout 1\"/></figure>\n\n\n\n<p>Now in this application, we will insert a layout file.</p>\n\n\n\n<p><strong>Step 1</strong> Go to app/layouts/application.html.erb file, remove all the code and write following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>   \n&lt;html>   \n  &lt;head>   \n    &lt;title>Login&lt;/title>   \n      \n  &lt;/head>   \n  \n  &lt;body>   \n           \n    &lt;%= yield %>     \n           \n  &lt;/body>   \n&lt;/html> </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-layout2.png\" alt=\"Ruby on rails Layout 2\"/></figure>\n\n\n\n<p><strong>Step 2</strong> Go to app/layouts directory and create <strong>lay.html.erb</strong> file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>   \n&lt;html>   \n&lt;head>   \n    &lt;title>Layout Example&lt;/title>   \n&lt;/head>   \n&lt;body>   \n        &lt;h1>Layout Example&lt;/h1>   \n    &lt;%= yield %>   \n        &lt;p>www.javatpoint.com&lt;/p>                                             \n&lt;/body>   \n&lt;/html>  </code></pre>\n\n\n\n<p><strong>Step 3</strong> Insert it into app/controllers/users_controller.rb file by writing following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class UsersController &lt; ApplicationController   \n  before_action :set_user, only: &#91;:show, :edit, :update, :destroy]   \n  \n layout \"lay\"   \n     \n  def index  \ncode....  </code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;Run it on browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-layout3.png\" alt=\"Ruby on rails Layout 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Download</h3>\n\n\n\n<p>Download this example</p>\n","protected":false},"excerpt":{"rendered":"<p>In Rails, layouts are pieces that fit together (for example header, footer, menus, etc) to make a complete view. An application may have as many layouts as you want. Rails use convention over configuration to automatically pair up layouts with respective controllers having same name. Rails layouts basically work on Don&#8217;t Repeat Yourself principle (DRY). [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4543"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4543"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4543/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4543"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4543"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4543"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4544,"date":"2020-09-13T06:29:52","date_gmt":"2020-09-13T06:29:52","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3357"},"modified":"2020-09-13T06:29:52","modified_gmt":"2020-09-13T06:29:52","slug":"rails-filters","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rails-filters/","title":{"rendered":"Rails Filters"},"content":{"rendered":"\n<p>Rails filters are methods that run before or after a controller&#8217;s action method is executed. They are helpful when you want to ensure that a given block of code runs with whatever action method is called.</p>\n\n\n\n<p>Rails support three types of filter methods:</p>\n\n\n\n<ul><li>Before filters</li><li>After filters</li><li>Around filters</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Before Filters</h2>\n\n\n\n<p>Rails before filters are executed before the code in action controller is executed. The before filters are defined at the top of a controller class that calls them. To set it up, you need to call before_filter method.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class UserController &lt; ApplicationController   \nbefore_filter :verify_password  \ndef verify_password  \n...   \nend   \nend  </code></pre>\n\n\n\n<p>In this example, method verify_password is applied as a before filter. Before any action method will be called, verify_password method is called.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>After Filters</h2>\n\n\n\n<p>Rails after filters are executed after the code in action controller is executed. Just like before filters, after filters are also defined at the top of a controller class that calls them. To set it up, you need to call after_filter method.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class PhotoController &lt; ApplicationController   \nafter_filter :resize_photo   \ndef resize_photo   \n...   \nend   \nend  </code></pre>\n\n\n\n<p>In this example, method resize_photo is applied as an after filter.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Around Filters</h2>\n\n\n\n<p>Rails around filters contain codes that are executed both before and after controller&#8217;s code is executed. They are generally used when you need both before and after filter. Its implementation is little bit different and more complex than other two filters. It is generally defined by a common class which contains both before and after methods.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ActionLogger   \ndef before(controller)   \n@start_time = Time.new   \nend   \ndef after(controller)   \n@end_time = Time.now   \n@elapsed_time = @end_time.to_f - @start_time.to_f   \n@action = controller.action_name   \n# next save this logging detail to a file or database   \ntable   \nend   \nend </code></pre>\n\n\n\n<p>In the ActionLogger class, before method captures time an action is started and after method captures time an action completes, the elapsed time.</p>\n\n\n\n<p>Let us see how ActionLogger class works as an around filter. In your controller class, simply add around_filter method and pass an instance of ActionLogger as a parameter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class PhotoController &lt; ApplicationController   \naround_filter ActionLogger.new   \nend  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Protecting Filter Methods</h2>\n\n\n\n<p>Any method in your controller class can be routed from a browser. It is done through its ability to protect methods within a class. All Ruby methods have one of these protection levels.</p>\n\n\n\n<ul><li><strong>Public:</strong>&nbsp;These methods are accessible from any external class or method that uses the same class in which they are defined.</li><li><strong>Protected:</strong>&nbsp;These methods are accessible only within the class in which they are defined and in the classes that inherit from the class in which they are defined.</li><li><strong>Private:</strong>&nbsp;These methods are only accessible within the class in which they are defined.</li></ul>\n\n\n\n<p>By default, methods are always public. Means any external class or method can access them. To define protection level, you can declare methods by putting a protected or private keyword before the methods that you want to protect.</p>\n\n\n\n<h4>Note: Protected and private methods are not routable from the browser.</h4>\n\n\n\n<p><strong>Exmaple:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class User  \ndef new_user   \n...   \nend   \nprotected   \ndef sign_in   \n...   \nend   \nprivate   \ndef user_identity   \n...   \nend   \ndef assign_sidekick   \n...   \nend   \nend  </code></pre>\n\n\n\n<p>In the above example, there is one protected method and two private methods. In the User class, the user_identity method is made a private method. Only other methods within User class can call it. The sign_in method can be called only by methods within User class or classes that are inherited from User class.</p>\n","protected":false},"excerpt":{"rendered":"<p>Rails filters are methods that run before or after a controller&#8217;s action method is executed. They are helpful when you want to ensure that a given block of code runs with whatever action method is called. Rails support three types of filter methods: Before filters After filters Around filters Before Filters Rails before filters are [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4544"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4544"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4544/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4544"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4544"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4544"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4545,"date":"2020-09-13T06:32:57","date_gmt":"2020-09-13T06:32:57","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3359"},"modified":"2020-09-13T06:32:57","modified_gmt":"2020-09-13T06:32:57","slug":"testing-in-rails","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/testing-in-rails/","title":{"rendered":"Testing in Rails"},"content":{"rendered":"\n<p>Rails test is very simple to write and run for your application. As Rails script generates models and controllers, in the same way test files are also generated. Rails also uses a separate database for testing. Test database in an application is rebuilt each time the application&#8217;s test run, and hence you always have a consistent database when your tests are run.</p>\n\n\n\n<p>Rails uses Ruby Test::Unit testing library. Rails application test is usually run using Rake utility.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Rails Test Directory</h2>\n\n\n\n<p>The test directory contains all of the test files that Rails generates, which is used to build the tests for your application. Test directory has the following directory structure.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>test/   \n    fixtures/   \n    functional/   \n    integration/   \n    mocks/   \n        development/   \n        test/   \n    unit/  </code></pre>\n\n\n\n<p>Rails basically supports three types of tests:</p>\n\n\n\n<ul><li>functional</li><li>integration</li><li>unit tests</li></ul>\n\n\n\n<p>The fixtures in test directory allows you to set up test data that can be used by your applications. It saves a lot of time and effort while writing Rails tests.</p>\n\n\n\n<p>For writing tests, you have to first write code that will create test data and get database into a known populated state. Rails fixtures do most of that work for you.</p>\n\n\n\n<p>Mocks are classes that allow replacing dependencies that are difficult to deal with.</p>\n\n\n\n<p><strong>Functional tests:</strong>&nbsp;Functional tests are used to test an application&#8217;s controller methods. When a controller class is generated using script/generate command, Rails also generates functional test files that will be used to write functional tests.</p>\n\n\n\n<p><strong>Unit tests:</strong>&nbsp;Unit tests are used to test methods contained in the model classes. These tests are mainly used to test the business logic which are present in models. It is the most popular form of testing supported by Rails.</p>\n\n\n\n<p><strong>Integation tests:</strong>&nbsp;Integration tests allow test interaction between multiple controllers. The allow testing more complete user scenarios or cases from application. Another reason to use it is that it simulate a user clicking around and accessing various pages that make up your application.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Rails Test Lifecycle</h2>\n\n\n\n<p>When Rails application&#8217;s test is run, a standard lifecycle is followed each time. This lifecycle consists of following steps:</p>\n\n\n\n<ul><li>load up test fixtures &#8211; This clears the database tables and loads your fixture data into database.</li><li>If test accesses data, it is read from the database.</li><li>After test run, database is rolled back to its starting state.</li></ul>\n\n\n\n<p>This whole lifecycle is carried out by Rails each time you run your tests using the Rake command.</p>\n","protected":false},"excerpt":{"rendered":"<p>Rails test is very simple to write and run for your application. As Rails script generates models and controllers, in the same way test files are also generated. Rails also uses a separate database for testing. Test database in an application is rebuilt each time the application&#8217;s test run, and hence you always have a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4545"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4545"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4545/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4545"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4545"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4545"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4546,"date":"2020-09-13T06:45:10","date_gmt":"2020-09-13T06:45:10","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3361"},"modified":"2020-09-13T06:45:10","modified_gmt":"2020-09-13T06:45:10","slug":"rails-caching","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rails-caching/","title":{"rendered":"Rails Caching"},"content":{"rendered":"\n<p>Caching is used in any web technologies. It speeds up the performance by storing previous results for subsequent requests. By default, cahcing is disabled in Rails.</p>\n\n\n\n<p>Rails caching is available at three levels of granularity:</p>\n\n\n\n<ul><li>Page</li><li>Action</li><li>Fragment</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Page Caching</h2>\n\n\n\n<p>Rails page caching is a technique where entire action output is stored as an HTML file. Due to this, web server can serve the output without going through Rails to call the action again. As a result, it improves the performance by 100 times by generating content dynamically. But this technique is only helpful for stateless pages that do not differentiate between application users.</p>\n\n\n\n<p>Page caching can be turned on for any mehtod in controller classes by using&nbsp;<strong>caches_ page</strong>&nbsp;method call. Actions are passed that need to be cached as parameters to cache_page. There is no need to include all your controller&#8217;s action.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p><strong>Step 1</strong> Create an application MyCache -T</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails new MyCache -T  </code></pre>\n\n\n\n<p><strong>Step 2</strong> Turn on the cache by running following command. This command creates an empty caching-dev.txt file inside tmp directory.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake dev:cache  </code></pre>\n\n\n\n<p><strong>Step 3</strong> Go to config/environments/development.rb file and write following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if Rails.root.join('tmp/caching-dev.txt').exist?  \n  config.action_controller.perform_caching = true  \n  config.action_mailer.perform_caching = false  \n  config.cache_store = :memory_store  \n  config.public_file_server.headers = {  \n    'Cache-Control' => 'public, max-age=172800'  \n  }  \nelse  \n  config.action_controller.perform_caching = false  \n  config.action_mailer.perform_caching = false  \n  config.cache_store = :null_store  \nend  </code></pre>\n\n\n\n<p><strong>Step 4</strong> Go to Gemfile, add following line.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem 'actionpack-page_caching'  </code></pre>\n\n\n\n<p><strong>Step 5</strong> Run bundle install.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bundle install  </code></pre>\n\n\n\n<p><strong>Step 6</strong> Write following code in config/application.rb file. It will specify the location where you want to save your cached pages.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>config.action_controller.page_cache_directory = \"#{Rails.root.to_s}/public/deploy\"   </code></pre>\n\n\n\n<p><strong>Step 7</strong> We will introduce a controller here. Run following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails generate controller page  </code></pre>\n\n\n\n<p><strong>Step 8</strong> In app/page_controller.rb file, write following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class PageController &lt; ApplicationController   \n  def index   \n  end   \nend   </code></pre>\n\n\n\n<p><strong>Step 9</strong> We will introduce a controller here. Run following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>root 'page#index'</code></pre>\n\n\n\n<p>Step 10 Go to views/page/index.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Welcome to our Cached example tutorial.&lt;/h1>   </code></pre>\n\n\n\n<p><strong>Step 11</strong> Page caching is enabled by caches_page method. Go to controller file and write following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class PageController &lt; ApplicationController   \n  caches_page index   \n  end   </code></pre>\n\n\n\n<p><strong>Step 12</strong> Start the server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails s </code></pre>\n\n\n\n<p><strong>Step 13</strong> Run it on localhost.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>localhost:3000  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-caching1.png\" alt=\"Ruby on rails Caching 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Action Caching</h2>\n\n\n\n<p>Rails action caching saves entire output of an action reponse like page caching. There is only one difference that is with action caching, action calls are still routed to the controller so that any filter can still be applied. Action caching can be turned on for any mehtod in controller classes by using&nbsp;<strong>caches_ action</strong>&nbsp;method call.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>We will continue with the example above.</p>\n\n\n\n<p><strong>Step 14</strong> Go to Gemfile, write following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem 'actionpack-action_caching'</code></pre>\n\n\n\n<p><strong>Step 15</strong> Run bundle install.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bundle install  </code></pre>\n\n\n\n<p><strong>Step 16</strong> To use action caching, let&#8217;s create a new restricted page. Write following code, in controllers file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class PageController &lt; ApplicationController   \nbefore_action :authenticate!, only: &#91;:restricted]    \n  \n  caches_page :index   \n  caches_action :restricted   \n  \n  def index   \n  end   \n  \n  def restricted   \n  end   \n  \n  private   \n  \n  def authenticate!   \n    params&#91;:admin] == 'true'   \n  end   \nend   </code></pre>\n\n\n\n<p><strong>Step 17</strong> Create app/views/page/restricted.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>This is restricted page created for action caching.&lt;/h1>  </code></pre>\n\n\n\n<p><strong>Step 18</strong> Go to config/routes.rb file and write following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>get '/restricted', to: 'pages#restricted'  </code></pre>\n\n\n\n<p><strong>Step 19</strong> Start the server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails s  </code></pre>\n\n\n\n<p><strong>Step 20</strong> Run it on localhost.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Localhost:3000/restricted  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/rails-caching2.png\" alt=\"Ruby On rails Caching 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Fragment Caching</h2>\n\n\n\n<p>Rails fragment caching is used to cache blocks within templates rather than caching entire output of an action method. It is useful where you need to change certain parts of an action frequently which can&#8217;t be cached while other parts need to be cached as they remain static.</p>\n\n\n\n<p>It is done in view templates instead of controller classes. A fragment cache is designated with a cache_do block. The line inside the block enclosed in the cache_do statement will be cached.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>We will continue with the example above.</p>\n\n\n\n<p><strong>Step 21</strong> Create a new model called frag.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g model Frag title:string  </code></pre>\n\n\n\n<p><strong>Step 22</strong> Run migrate command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate  </code></pre>\n\n\n\n<p><strong>Step 23</strong> Go to app/controllers/frags_controller.rb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class FragsController &lt; ApplicationController   \n  def index   \n    @frags = Frag.all   \n  end   \nend  </code></pre>\n\n\n\n<p><strong>Step 24</strong> Go to config/routes.rb file. Add following line.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>resources :frags, only: &#91;:index] </code></pre>\n\n\n\n<p><strong>Step 25</strong> Go to app/views/frags/index.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Fragments&lt;/h1>   \n  \n&lt;% @frags.each do |frag| %>   \n  &lt;%= frag.title %>   \n&lt;% end %>  </code></pre>\n\n\n\n<p><strong>Step 26</strong> Go to db/seeds.rb file to populate fragment table.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20.times {|i| Frag.create!({title: \"Frag #{i + 1}\"})}   </code></pre>\n\n\n\n<p><strong>Step 27</strong> Run the rake command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:seed  </code></pre>\n\n\n\n<p><strong>Step 28</strong>&nbsp;If we want to cache each fragment listed on a page, it will be done using cache method.</p>\n\n\n\n<p>Go to app/views/frags/index.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;% @frags.each do |frag| %>   \n  &lt;% cache frag do %>   \n    &lt;%= frag.title %>   \n      \n  &lt;% end %>   \n&lt;% end %>   </code></pre>\n\n\n\n<p><strong>Step 29</strong>&nbsp;When an object is passed to cache method, it automatically takes its id and generate a proper cache key. The cache will automatically expire if fragment was updated.</p>\n\n\n\n<p>Use <em><strong>render</strong></em> method with <em><strong>cached</strong></em> option in app/views/frags/index.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%= render @frags, cached: true %>   </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Caching is used in any web technologies. It speeds up the performance by storing previous results for subsequent requests. By default, cahcing is disabled in Rails. Rails caching is available at three levels of granularity: Page Action Fragment Page Caching Rails page caching is a technique where entire action output is stored as an HTML [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4546"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4546"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4546/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4546"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4546"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4546"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4547,"date":"2020-09-13T06:47:46","date_gmt":"2020-09-13T06:47:46","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3363"},"modified":"2020-09-13T06:47:46","modified_gmt":"2020-09-13T06:47:46","slug":"rails-validation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rails-validation/","title":{"rendered":"Rails Validation"},"content":{"rendered":"\n<p>Rails validation defines valid states for each of your Active Record model classes. They are used to ensure that only valid details are entered into your database. Rails make it easy to add validations to your model classes and allows you to create your own validation methods as well. Using built-in validation DSL, you can do several kinds of validations.</p>\n\n\n\n<p>When an Active Record model class fails a validation, it is considered an error. Each Active Record model class maintains a collection of errors, which display appropriate error information to the users when validation error occurs.</p>\n\n\n\n<h2>Rails built-in Validation Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>validates_acceptance_of</td><td>This validation is done by the user to accept a terms of service agreement by checking in a check box</td></tr><tr><td>validates_associated</td><td>Validates whether associated objects are all valid themselves. Work with any kind of association.</td></tr><tr><td>validates_confirmation_of</td><td>It validates whether a user has entered matching information like password or email in second entry field.</td></tr><tr><td>validates_each</td><td>Validates each attribute against a block.</td></tr><tr><td>validates_exclusion_of</td><td>Validates that an attribute is not in a particular enumerable object.</td></tr><tr><td>validates_format_of</td><td>Validates value of an attribute using a regular expression to insure it is of correct format.</td></tr><tr><td>validates_inclusion_of</td><td>Validates whether value of an attribute is available in a particular enumerable object.</td></tr><tr><td>validates_length_of</td><td>Validates that length of an attribute matches length restrictions specified.</td></tr><tr><td>validates_numericality_of</td><td>Validates whether an attribute is numeric.</td></tr><tr><td>validates_presence_of</td><td>Validates that attribute is not blank.</td></tr><tr><td>validates_size_of</td><td>This is an alias for validates_length_of</td></tr><tr><td>validates_uniqueness_of</td><td>Validates that an attribute is unique in the database.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Skipping Validations</h2>\n\n\n\n<p>The following Rails methods skip validations and save the object to the database regardless of its validity. They should be used with caution.</p>\n\n\n\n<ul><li>decrement!</li><li>decrement_counter</li><li>increment!</li><li>increment_counter</li><li>toggle!</li><li>touch</li><li>update_all</li><li>update_attribute</li></ul>\n\n\n\n<h3>valid? and invalid?</h3>\n\n\n\n<p>Before saving an Active Record object, a validation is done by Rails. If any error is produced, object is not saved.</p>\n\n\n\n<p>The&nbsp;<strong>valid?</strong>&nbsp;triggers your validations, returns true if no errors are found and false otherwise.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Person &lt; ApplicationRecord  \n??validates :name, presence: true  \nend  \n?  \nPerson.create(name: \"John Cena\").valid? # => true  \nPerson.create(name: nil).valid? # => false </code></pre>\n\n\n\n<p>The&nbsp;<strong>invalid?</strong>&nbsp;is simply the reverse of valid?. It triggers your validations, returns true if invalid and false otherwise.</p>\n","protected":false},"excerpt":{"rendered":"<p>Rails validation defines valid states for each of your Active Record model classes. They are used to ensure that only valid details are entered into your database. Rails make it easy to add validations to your model classes and allows you to create your own validation methods as well. Using built-in validation DSL, you can [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4547"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4547"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4547/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4547"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4547"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4547"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3365,"date":"2020-09-13T06:51:17","date_gmt":"2020-09-13T06:51:17","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3365"},"modified":"2020-09-13T06:51:17","modified_gmt":"2020-09-13T06:51:17","slug":"ruby-on-rails-ajax-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-ajax-2/","title":{"rendered":"Ruby on Rails AJAX"},"content":{"rendered":"\n<h2>AJAX Introduction</h2>\n\n\n\n<p>AJAX stands for Asynchronous Javascript and XML. It is a mixture of several technologies and is an important part of Rails application. It allows client side changes without reloading the page.</p>\n\n\n\n<p>Let us see the working of a normal web server. On typing a web address and clicking on search, the browser makes a request to the server. To assemble the searched page, it fetches all associated assets like JavaScript files, images and stylesheets. On clicking a link, same process is followed. This is called &#8216;request response cycle&#8217;.</p>\n\n\n\n<p>JavaScript makes request to the server, and parse the response. It can update information on the page. On combining these two abilities, a web page can be made with JavaScript that can update just a part of itself, without loading full page from the server. This technique is called AJAX.</p>\n\n\n\n<p>By default Rails ships with CoffeeScript.</p>\n\n\n\n<p>Let us see an example code to make Ajax request using the jQuery library</p>\n\n\n\n<p>The above code fetches data from &#8220;/test&#8221;, then appends the result to the div with an id of results.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Unobtrusive JavaScript</h2>\n\n\n\n<p>To handle attached JavaScript to the DOM, Rails uses &#8220;Unobtrusive JavaScript&#8221; technique. This is considered as the best technique within the frontend community.</p>\n\n\n\n<p>This is called &#8216;Unobtrusive&#8217; JavaScript because we do not mix JavaScript code into HTML. With this, we can easily add behavior to any link by adding data attribute. Lot of benefits add up like the entire JavaScript is served on every page, it means it&#8217;ll get downloaded on the first page load and then can be cached on every page after that.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>Let us see an example of performing Ajax on delete action.</p>\n\n\n\n<p><strong>Step 1</strong> Create an application named <strong>item.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails new item  </code></pre>\n\n\n\n<p><strong>Step 2</strong> Write the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails generate scaffold Itemm state:string country:string  </code></pre>\n\n\n\n<p><strong>Step 3</strong> Write migrate command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate </code></pre>\n\n\n\n<p><strong>Step 4</strong> Update your destroy action in aap/views/itemms/index.html.erb file by writing the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:remote => true, :class => 'delete_itemm'   \n  \n&lt;tbody>   \n    &lt;% @itemms.each do |itemm| %>   \n      &lt;tr>   \n        &lt;td>&lt;%= itemm.state %>&lt;/td>   \n        &lt;td>&lt;%= itemm.capital %>&lt;/td>   \n        &lt;td>&lt;%= link_to 'Show', itemm %>&lt;/td>   \n        &lt;td>&lt;%= link_to 'Edit', edit_itemm_path(itemm) %>&lt;/td>   \n        &lt;td>&lt;%= link_to 'Destroy', itemm, method: :delete, data: { confirm: 'Are you sure?' }, :remote => true, :class => 'delete_itemm' %>&lt;/td>   \n      &lt;/tr>   \n    &lt;% end %>   \n  &lt;/tbody></code></pre>\n\n\n\n<p><strong>Step 5</strong> Create app/views/itemms/destroy.js.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$('.delete_itemm').bind('ajax:success', function() {   \n   $(this).closest('tr').fadeOut();   \n}); </code></pre>\n\n\n\n<p><strong>Step 6</strong> Go to controller file at app/controllers/itemms_controller.rb and write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def destroy   \n   @itemm = Itemm.find(params&#91;:id])   \n   @itemm.destroy   \n     \n   respond_to do |format|   \n      format.html { redirect_to item_url }   \n      format.json { head :no_content }   \n      format.js   { render :layout => false }   \n   end   \n     \nend </code></pre>\n\n\n\n<p><strong>Step 7</strong> Start the Rails server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails s</code></pre>\n\n\n\n<p><strong>Step 8</strong> Run it on localhost.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:3000/itemms  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-ajax1.png\" alt=\"Ruby on rails Ajax 1\"/></figure>\n\n\n\n<p>Create an item as shown in the following snapshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-ajax2.png\" alt=\"Ruby on rails Ajax 2\"/></figure>\n\n\n\n<p>It will create the item as shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-ajax3.png\" alt=\"Ruby on rails Ajax 3\"/></figure>\n\n\n\n<p>Click on Back button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-ajax4.png\" alt=\"Ruby on rails Ajax 4\"/></figure>\n\n\n\n<p>If you will click on Destroy link, a popup will be shown through AJAX. It will destroy this item from the list.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-ajax5.png\" alt=\"Ruby on rails Ajax 5\"/></figure>\n\n\n\n<p>Click OK to delete the item finally.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/rubyonrails/images/ruby-ajax6.png\" alt=\"Ruby on rails Ajax 6\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>AJAX Introduction AJAX stands for Asynchronous Javascript and XML. It is a mixture of several technologies and is an important part of Rails application. It allows client side changes without reloading the page. Let us see the working of a normal web server. On typing a web address and clicking on search, the browser makes [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[68],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3365"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3365"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3365/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3365"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3365"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3365"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]