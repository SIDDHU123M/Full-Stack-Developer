[
  {
    "id": 90,
    "date": "2020-10-16T11:05:48",
    "date_gmt": "2020-10-16T11:05:48",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=90"
    },
    "modified": "2020-10-16T11:05:48",
    "modified_gmt": "2020-10-16T11:05:48",
    "slug": "what-is-swift",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/what-is-swift/",
    "title": {
      "rendered": "What is Swift?"
    },
    "content": {
      "rendered": "\n<p>Swift is a general purpose, multi-paradigm, compiled programming language for developing iOS and OS X tvOS, watchOS applications. It is developed by Apple Inc. It is powerful and intutive language which is easy to learn. Swift code is safe, precise and runs very fast.</p>\n\n\n\n<p>Swift follows Objective-C runtime library which allows C, Objective-C, C++ and Swift code to run within one program. Swift is built with open source LLVM compiler and included in Xcode since version 6.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Swift 4</h2>\n\n\n\n<p>Swift 4 is the latest version of Swift which inbuilt the features of Swift 3 and also enhance the robustness and stability of the language. Swift 4 has improved standard library, extended features like smart key paths and serialization, shortening build times and reducing the size of app binaries.</p>\n\n\n\n<p>Swift4 follows a modern programming pattern to overcome common programming errors:</p>\n\n\n\n<ul><li>In Swift 4, variables are always initialized before use.</li><li>Array indices are checked for out-of-bounds errors.</li><li>Integers are checked for overflow.</li><li>Optionals ensure that nil values are handled explicitly.</li><li>Atomatic memory is management.</li><li>Error handling allows controlled recovery from unexpected failures.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Swift 4 Features</h2>\n\n\n\n<p>Swift 4 adopts the features of C and Objective-C without having the complexity of C language.</p>\n\n\n\n<ul><li>Swift 4 uses a safe programming approach. It is very easy to laern and precise to use.</li><li>Swift 4 provides a enhanced set of modern programming features.</li><li>Swift 4 follows the Objective-C like syntax.</li><li>Swift 4 provides an easy way to write iOS and OS X apps.</li><li>Swift 4 provides seamless access to existing Cocoa frameworks.</li><li>Swift 4 unifies the procedural and object-oriented portions of the language.</li><li>Swift 4 does not need a separate library import to support functionalities like input/output or string handling.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Newly added features in Swift 4</h2>\n\n\n\n<ul><li>Swift 4 is faster, easier to use Strings that provides Unicode correctness. It also adds support for creating, using and managing substrings.</li><li>Provide smart key paths for type-safe, efficient, extensible key value coding for Swift types.</li><li>Enhanced Dictionary and Set types.</li><li>Enforced exclusive access to memory.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift is a general purpose, multi-paradigm, compiled programming language for developing iOS and OS X tvOS, watchOS applications. It is developed by Apple Inc. It is powerful and intutive language which is easy to learn. Swift code is safe, precise and runs very fast. Swift follows Objective-C runtime library which allows C, Objective-C, C++ and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/90"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=90"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/90/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 91,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/90/revisions/91"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=90"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=90"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=90"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 92,
    "date": "2020-10-16T11:06:14",
    "date_gmt": "2020-10-16T11:06:14",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=92"
    },
    "modified": "2020-10-16T11:06:14",
    "modified_gmt": "2020-10-16T11:06:14",
    "slug": "history-of-swift-programming-language",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/history-of-swift-programming-language/",
    "title": {
      "rendered": "History of Swift Programming Language"
    },
    "content": {
      "rendered": "\n<p>Swift was introduced in&nbsp;<strong>2014 at Apples&#8217;s Worldwide Developers Confrence</strong>.</p>\n\n\n\n<p>The development of Swift was started in 2010 by Chris Lattner with other programmers i.e. Doug Gregor, John McCall, Ted Kremenek, and Joe Groff at Apple. The basic idea of Swift was taken from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and many other programming languages.</p>\n\n\n\n<p>Swift first version was 1.0 which undergone a major upgrade to Swift 2 at WWDC 2015. Its upgraded version 2.2 was made&nbsp;<em>open-source software under the Apache License 2.0</em>&nbsp;on December 3, 2015, for Apple&#8217;s platforms and Linux.</p>\n\n\n\n<p>Its third version, Swift 3.0 went through a significant evolution where its syntax was changed. Swift overcame the popularity of Objective C in the first quarter of 2018.</p>\n\n\n\n<p>Swift gone through several changes in Swift 4.0 version where you can update the code written with previous versions of Swift using the migration functionality built into Xcode.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Swift Version History</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Version</th><th>Released Date</th></tr><tr><td>Swift 1.0</td><td>2014-09-09</td></tr><tr><td>Swift 1.1</td><td>2014-10-22</td></tr><tr><td>Swift 1.2</td><td>2015-04-08</td></tr><tr><td>Swift 2.0</td><td>2015-09-21</td></tr><tr><td>Swift 3.0</td><td>2016-09-13</td></tr><tr><td>Swift 4.0</td><td>2017-09-19</td></tr><tr><td>Swift 4.1</td><td>2018-03-29</td></tr><tr><td>Swift 4.2</td><td>2018-09-17</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift was introduced in&nbsp;2014 at Apples&#8217;s Worldwide Developers Confrence. The development of Swift was started in 2010 by Chris Lattner with other programmers i.e. Doug Gregor, John McCall, Ted Kremenek, and Joe Groff at Apple. The basic idea of Swift was taken from Objective-C, Rust, Haskell, Ruby, Python, C#, CLU, and many other programming languages. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/92"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=92"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/92/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 93,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/92/revisions/93"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=92"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=92"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=92"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 94,
    "date": "2020-10-16T11:09:57",
    "date_gmt": "2020-10-16T11:09:57",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=94"
    },
    "modified": "2020-10-16T11:09:57",
    "modified_gmt": "2020-10-16T11:09:57",
    "slug": "swift-syntax",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-syntax/",
    "title": {
      "rendered": "Swift Syntax"
    },
    "content": {
      "rendered": "\n<h2>Comments in Swift</h2>\n\n\n\n<p>Comments are used in programs to make them clearly understandable. They are like helping texts in programs and ignored by compiler. In Swift 4, single line comments are written using // at the beginning of the comment.</p>\n\n\n\n<h3>Single line comment in Swift 4:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>// This is a single line comment.  </code></pre>\n\n\n\n<h3>Multi-line comment is Swift 4:</h3>\n\n\n\n<p>Multi-line comments start with /* and end with the characters */ as shown below &#8211;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/* This is multiline comment */  </code></pre>\n\n\n\n<p>Multi-line comments can be nested in Swift 4. i.e.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>/* This is a multi-line comment. \r\n/* This is the second line. */ */  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Semicolons in Swift</h2>\n\n\n\n<p>In Swift 4, you don&#8217;t need to type a semicolon (;) in your code as a closing statement. Though, it is optional, you can use it without any problem. If you are using multiple statements in the same line, then you have to use a semicolon as a delimiter, otherwise the compiler will raise a syntax error.</p>\n\n\n\n<h3>For example,</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>/* First Swift 4 program */  \r\nvar myString = \"Hello, World!\"; print(myString)</code></pre>\n\n\n\n<h3>Without using semicolon:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>/* First Swift 4 program */  \r\nvar myString = \"Hello, World!\"  \r\nprint(myString)  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Identifiers in Swift</h2>\n\n\n\n<p>In Swift 4, identifiers are used to identify a variable, function, or any other user-defined item. Swift 4 identifiers start with an alphabet A to Z or a to z or an underscore _ followed by zero or more letters, underscores, and digits (0 to 9).</p>\n\n\n\n<p>In Swift 4, we can&#8217;t use special characters such as @, $, and % within identifiers. Swift 4 is a case sensitive programming language, so&nbsp;<strong>Literal</strong>&nbsp;and&nbsp;<strong>literal</strong>&nbsp;are two different identifiers.</p>\n\n\n\n<p>These are some example of acceptable identifiers:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ajeet    sonoo     ak_47  </code></pre>\n\n\n\n<p>If you want to use a reserved word as an identifier you will have to put a backtick (`) before and after that reserved word. For example, class is not a valid identifier, but `class` is valid.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Reserved Keywords in Swift</h2>\n\n\n\n<p>In Swift 4, the reserved keywords can&#8217;t be used as constants or variables or any other identifier names. If you want to use them as identifiers, you will use them within backticks (&#8216;).</p>\n\n\n\n<h3>Keywords used in declarations</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Class</td><td>Func</td><td>Let</td><td>public</td></tr><tr><td>deinit</td><td>Enum</td><td>extension</td><td>import</td></tr><tr><td>Init</td><td>internal</td><td>operator</td><td>private</td></tr><tr><td>protocol</td><td>static</td><td>struct</td><td>subscript</td></tr><tr><td>typealias</td><td>var</td><td></td><td></td></tr></tbody></table></figure>\n\n\n\n<h3>Keywords used in Statements</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>break</td><td>case</td><td>continue</td><td>default</td></tr><tr><td>do</td><td>else</td><td>fallthrough</td><td>for</td></tr><tr><td>if</td><td>in</td><td>return</td><td>switch</td></tr><tr><td>where</td><td>while</td><td></td><td></td></tr></tbody></table></figure>\n\n\n\n<h3>Keywords used in expressions and types</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>as</td><td>dynamicType</td><td>false</td><td>is</td></tr><tr><td>nil</td><td>self</td><td>Self</td><td>super</td></tr><tr><td>true</td><td>_COLUMN_</td><td>_FILE_</td><td>_FUNCTION_</td></tr><tr><td>_LINE_</td><td></td><td></td><td></td></tr></tbody></table></figure>\n\n\n\n<h3>Keywords used in particular contexts</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>associativity</td><td>convenience</td><td>dynamic</td><td>didSet</td></tr><tr><td>final</td><td>get</td><td>infix</td><td>inout</td></tr><tr><td>lazy</td><td>left</td><td>mutating</td><td>none</td></tr><tr><td>nonmutating</td><td>optional</td><td>override</td><td>postfix</td></tr><tr><td>precedence</td><td>prefix</td><td>Protocol</td><td>required</td></tr><tr><td>right</td><td>set</td><td>Type</td><td>unowned</td></tr><tr><td>weak</td><td>willSet</td><td></td><td></td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Whitespaces in Swift</h2>\n\n\n\n<p>In Swift 4, whitespace is used to describe blanks, tabs, newline characters, and comments. It separates one part of the statement from another. It makes the computer to identify that here one element ends and another begins.</p>\n\n\n\n<h3>For example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var age  </code></pre>\n\n\n\n<p>We have to put at least one whitespace character (usually a space) between var and age to make compiler to distinguish them.</p>\n\n\n\n<p>On the other hand, in the following statement &#8211;</p>\n\n\n\n<pre class=\"wp-block-code\"><code>int courses = html + css   //discount on the combined course  </code></pre>\n\n\n\n<p>No whitespace character is necessary between courses and =, or between = and html, although you can include them for better readability.</p>\n\n\n\n<p>You should make the equal space on both side of the operator.</p>\n\n\n\n<h3>For example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>int courses = html + css   //Correct statement   \r\nint courses= html+ css   //Incorrect statement  </code></pre>\n\n\n\n<p>The Swift 4 compiler ignores blank line which contains only whitespace.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Literals in Swift</h2>\n\n\n\n<p>A literal is used to represent the source code of a value of an integer, floating-point number, or string type.</p>\n\n\n\n<h3>For example</h3>\n\n\n\n<p><strong>Integer literal</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>26  </code></pre>\n\n\n\n<p><strong>Floating-point literal</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>3.14159  </code></pre>\n\n\n\n<p>String literal</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"Hello, codemeals\"  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Print Statement in Swift</h2>\n\n\n\n<p>In Swift4, the &#8216;print&#8217; keyword is used to print anything. There are three different properties of print keyword.</p>\n\n\n\n<ol><li><strong>Items:</strong>&nbsp;Items that you want to print.</li><li><strong>Separator:</strong>&nbsp;Used to separate items.</li><li><strong>Terminator:</strong>&nbsp;It specifies the last value where the line ends.</li></ol>\n\n\n\n<h3>For example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>print(\"Items you want to print\", separator: \"Value \" , terminator: \"Value\")  \r\n// E.g. of print statement.  \r\nprint(\"Value one\")  \r\n// prints \"Value one \\n\" Adds, \\n as terminator and \" \" as separator by  \r\ndefault.  \r\nprint(\"Value one\",\"Value two\", separator: \" Next Value\" , terminator: \" End\")  \r\n//prints \"Value one Next Value Value two End\"  </code></pre>\n\n\n\n<p>The first print statement adds \\n , newline Feed as terminator by default, where as in second print statement we&#8217;ve given &#8221; End &#8221; as terminator, hence it&#8217;ll print &#8220;End &#8221; instead of \\n.</p>\n\n\n\n<p>We can use custom separator and terminators according to our requirement.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Comments in Swift Comments are used in programs to make them clearly understandable. They are like helping texts in programs and ignored by compiler. In Swift 4, single line comments are written using // at the beginning of the comment. Single line comment in Swift 4: Multi-line comment is Swift 4: Multi-line comments start with [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/94"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=94"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/94/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 95,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/94/revisions/95"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=94"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=94"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=94"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 96,
    "date": "2020-10-16T11:14:23",
    "date_gmt": "2020-10-16T11:14:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=96"
    },
    "modified": "2020-10-16T11:14:23",
    "modified_gmt": "2020-10-16T11:14:23",
    "slug": "data-types-in-swift",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/data-types-in-swift/",
    "title": {
      "rendered": "Data Types in Swift"
    },
    "content": {
      "rendered": "\n<p>In Swift 4 programming language, data types are used while creating a variable or a constant. In every programming language, we have to use different types of variables to store data. Variables are reserved memory locations for storing values. This means when you a variable, you reserve some space in memory.</p>\n\n\n\n<p>A data type is a type of data (value) a variable can store in it. This data can be a text/string (&#8220;JavaTpoint&#8221;) or a number (12.34) or just bits (0 &amp; 1). We have to define the data type to ensure that only defined type of data is stored.</p>\n\n\n\n<h3>For example,</h3>\n\n\n\n<p>Suppose you have to store data of a student where you need to store his name and marks. The mark is a&nbsp;<strong>number (i.e. 70)</strong>&nbsp;and the name is a&nbsp;<strong>string (i.e. Alex)</strong>&nbsp;so, you need to create two variables or constants to store the data.</p>\n\n\n\n<p>In Swift 4, you can do this by declaring variables and the data type as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var Marks:Int = 70  \r\nvar Name:String = \"Alex\"  </code></pre>\n\n\n\n<p>Here, we declared Marks variable of type Int which stores value 70 and, Name variable of type String which stores value Alex.</p>\n\n\n\n<p><strong>You will get a compile time error if you use the following syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>var Score:Int = \"Alex\"  </code></pre>\n\n\n\n<p>It will show a message stating&nbsp;<em>cannot convert value of type &#8216;String&#8217; to specify type &#8216;Int&#8217;</em>.</p>\n\n\n\n<p>It shows that a number can only be stored in Int data type not in String data type.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Size of a Data Type</h2>\n\n\n\n<p>Size of the data type specifies the size of data that can be stored in a given variable or constant. The data type&#8217;s size is measured in bit and it can store a value up to 2<sup>bits</sup>.</p>\n\n\n\n<p>So, <strong>data type size 1 bit</strong> can store upto 21 =2 values: either 0 or 1.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 -> a or 0   \r\n1 -> b or 1 </code></pre>\n\n\n\n<p><strong>Data type size 2 bit</strong>&nbsp;can store up to 22 = 4 values. Which are: (00,01,10,11). It can be represented as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>00 -> a or 0  \r\n01 -> b or 1  \r\n11 -> c or 2  \r\n10 -> d or 3  </code></pre>\n\n\n\n<p>Same as a data type of n bit system can store up to 2<sup>n</sup>&nbsp;values.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Swift 4 Data types</h2>\n\n\n\n<p>The most common Swift 4 data types are:</p>\n\n\n\n<h2>Bool Data type</h2>\n\n\n\n<ul><li>The Bool data type can store only two values either true or false.</li><li>Its default value is False.</li><li>It is generally used in if-else statement.</li></ul>\n\n\n\n<h3>Boolean Data type example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let result:Bool = true  \r\nprint(result)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n</code></pre>\n\n\n\n<h2>Integer Data type</h2>\n\n\n\n<ul><li>The integer data type can store both positive and negative numbers including zero with no fractional values.</li><li>Its default value is 0.</li><li>Its size depends on the platform type which may be 32 bits or 64 bits.</li><li><strong>Range:</strong>&nbsp;-2,147,483,648 to 2,147,483,647 (32 bit platform)<br>-9223372036854775808 to 9223372036854775807 (64 bit platform</li><li>Integer data type has many other variants such as UInt, Int8, Int16 etc. which can be used if you want to specify storage type specifically.</li></ul>\n\n\n\n<h3>Integer Data type example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var highScore:Int = 50  \r\nprint(highScore)  \r\nhighScore = 40  \r\nprint(highScore) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>50\n40\n</code></pre>\n\n\n\n<p><strong>Explanation:</strong>&nbsp;In the above program, we have declared a variable highScore of Int type and then assign a value of 50 so; it provides an output of 50.</p>\n\n\n\n<p>Later, we changed the value to 40 using assignment operator highScore = 40 so, it provides the output 40.</p>\n\n\n\n<p>There are some more variants of Int data type in Swift.</p>\n\n\n\n<h2>Int8 Data type:</h2>\n\n\n\n<p>Int8 data type can store both positive and negative small numbers. Its default value is 0, size is 8 bit and range varies from -128 to 127.</p>\n\n\n\n<p>It can store 28 values means values from -128 to 127 including 0.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var highScore:Int8 = -128//ok  \r\nhighScore = 127 //ok  \r\nhighScore = 128 // error occurred   \r\nhighScore = -129 //error occurred </code></pre>\n\n\n\n<p>You can check the highest and lowest values Int8 data type can store by using&nbsp;<strong>.min and .max</strong>.</p>\n\n\n\n<h3>Example of .min and .max Int8 data type</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>print(Int8.min)  \r\nprint(Int8.max)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>-128\n127\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>UInt Data type</h2>\n\n\n\n<p>UInt (Unsigned Integer) can only store unsigned numbers (positive and zero). Other remaining properties are same as Integer data type means:</p>\n\n\n\n<ul><li><strong>Default Value:</strong>&nbsp;0</li><li><strong>Size:</strong>&nbsp;32/64 bit depends on the platform type.</li><li><strong>Range:</strong>&nbsp;0 to 4294967295 (32 bit platform)<br>0 to 18446744073709551615 (64 bit platform)</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Float Data type</h2>\n\n\n\n<p>The float data type can store decimal and fractional numbers. Its default value is 0.0, size 32 bit and range varies from 1.2*10-38 to 3.4 * 1038 (~6 digits).</p>\n\n\n\n<h3>Float data type example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let highScore:Float = 3.1416  \r\nprint(highScore)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>3.1416\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Double Data type</h2>\n\n\n\n<p>The Double data type can store decimal or fractional numbers as Float data type but larger decimal points than Float supports.</p>\n\n\n\n<p>Its default value is 0.0, size: 64-bit, range varies from 2.3*10-308 to 1.7*10308 (~15 digits)</p>\n\n\n\n<h3>Double data type example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let highScore:Double = 3.1416  \r\nprint(highScore)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>3.1416\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Character Data type</h2>\n\n\n\n<p>Character data type can store a single character string literal. It is used to add emoji or languages other than English.</p>\n\n\n\n<h3>Character data type example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let playerName:Character = \"J\"  \r\nlet playerNameWithUnicode:Character = \"\\u{134}\"  \r\nprint(playerName)  \r\nprint(playerNameWithUnicode)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>J\nĴ\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>String Data type</h2>\n\n\n\n<p>String data type can store collection of characters. It is Value type and its default value is &#8220;&#8221; (Empty String).</p>\n\n\n\n<p>Swift facilitates you to use a few special escape sequences to use them in string. <strong>For example</strong>,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\\0 (null character),  \r\n\\\\ (a plain backslash \\),  \r\n\\t (a tab character),  \r\n\\v (a vertical tab),  \r\n\\r (carriage return),  \r\n\\\" (double quote),  \r\n\\' (single quote), and  \r\n\\u{n} (unicode code point, n is in hexadecimal).   </code></pre>\n\n\n\n<h3>String Data type example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let playerName = \"Jack\"  \r\nlet playerNameWithQuotes = \"\\\"Jack\\\"\"  \r\nlet playerNameWithUnicode = \"\\u{134}ack\"  \r\nprint(playerName)  \r\nprint(playerNameWithQuotes)  \r\nprint(playerNameWithUnicode)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Jack\n\"Jack\"\nĴack\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Range of data type variables in tabular form</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Type</th><th>Typical Bit Width</th><th>Typical Range</th></tr><tr><td>Int8</td><td>1byte</td><td>-127 to 127</td></tr><tr><td>UInt8</td><td>1byte</td><td>0 to 255</td></tr><tr><td>Int32</td><td>4bytes</td><td>-2147483648 to 2147483647</td></tr><tr><td>UInt32</td><td>4bytes</td><td>0 to 4294967295</td></tr><tr><td>Int64</td><td>8bytes</td><td>-9223372036854775808 to 9223372036854775807</td></tr><tr><td>UInt64</td><td>8bytes</td><td>0 to 18446744073709551615</td></tr><tr><td>Float</td><td>4bytes</td><td>1.2E-38 to 3.4E+38 (~6 digits)</td></tr><tr><td>Double</td><td>8bytes</td><td>2.3E-308 to 1.7E+308 (~15 digits)</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Swift 4 programming language, data types are used while creating a variable or a constant. In every programming language, we have to use different types of variables to store data. Variables are reserved memory locations for storing values. This means when you a variable, you reserve some space in memory. A data type is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/96"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=96"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/96/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 97,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/96/revisions/97"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=96"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=96"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=96"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 98,
    "date": "2020-10-16T11:17:01",
    "date_gmt": "2020-10-16T11:17:01",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=98"
    },
    "modified": "2020-10-16T11:17:01",
    "modified_gmt": "2020-10-16T11:17:01",
    "slug": "swift-variables",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-variables/",
    "title": {
      "rendered": "Swift variables"
    },
    "content": {
      "rendered": "\n<p>Variables are used to store data in memory so that we can use them in program. Variables are like container that can hold data which can be changed later. Every variable has a unique name called identifier.</p>\n\n\n\n<h2>How to declare Swift Variables?</h2>\n\n\n\n<p>In Swift 4, var keyword is used to declare variable.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var siteName:String  \r\nprint(siteName)  </code></pre>\n\n\n\n<p>Here, we have declared a variable named siteName of type String. It can hold only string values. If you execute the above code, it will give a compile time error because we have only declared variable and not assigned any value.</p>\n\n\n\n<p>Let&#8217;s see how to assign values to a Swift variable.</p>\n\n\n\n<h2>How to assign values in Swift variable?</h2>\n\n\n\n<p>Assignement operator (=) is used to assign value in Swift variable.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var siteName:String  \r\nsiteName = \"javatpoint.com\"  \r\nprint(siteName)  \r\n  \r\nOr  \r\n  \r\nvar siteName:String = \"javatpoint.com\"  \r\nprint(siteName)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals.com \n</code></pre>\n\n\n\n<h3>Note: As, Swift is a type inferred language, it automatically knows &#8220;javatpoint.com&#8221; is a String and declare siteName as a String. You can even remove the type (:String) from declaration and it will show the same result.</h3>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var siteName = \"codemeals.com\"  \r\nprint(siteName)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals.com \n</code></pre>\n\n\n\n<h2>How to change the value of Swift Variable?</h2>\n\n\n\n<p>We can change the value of a variable by using assignement operator but without var keyword.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var siteName = \"javatpoint.com\"   \r\n// Assigning a new value to siteName  \r\nsiteName = \"hindi100.com\"  \r\nprint(siteName)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>hindi100.com\n</code></pre>\n\n\n\n<h2>Print Current value of variables</h2>\n\n\n\n<p>We can use the print function to print the current value of variable or constant. Wrap the value in parenthesis with a backslash before the opening parenthesis.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var varA = \"Java\"  \r\nvar varB = 3  \r\nprint(\"The course duration of \\(varA) is \\(varB) months.\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The course duration of Java is 3 months. </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Variables are used to store data in memory so that we can use them in program. Variables are like container that can hold data which can be changed later. Every variable has a unique name called identifier. How to declare Swift Variables? In Swift 4, var keyword is used to declare variable. Example: Here, we [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/98"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=98"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/98/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 99,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/98/revisions/99"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=98"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=98"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=98"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 100,
    "date": "2020-10-16T11:18:46",
    "date_gmt": "2020-10-16T11:18:46",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=100"
    },
    "modified": "2020-10-16T11:18:46",
    "modified_gmt": "2020-10-16T11:18:46",
    "slug": "swift-constants",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-constants/",
    "title": {
      "rendered": "Swift Constants"
    },
    "content": {
      "rendered": "\n<p>As the name shows, constants are the special type of variables whose values can&#8217;t be changed. They are like containers which are stored permanently with some items.</p>\n\n\n\n<h2>How to declare Swift Constants?</h2>\n\n\n\n<p>The&nbsp;<strong>let</strong>&nbsp;keyword is used to declare a variable.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let siteName:String  \r\nprint(siteName)  </code></pre>\n\n\n\n<p>Here, we have declared a constant named siteName of type String. It can hold only string values. If you execute the above code, it will give a compile time error because we have only declared the constant and not assigned any value.</p>\n\n\n\n<p>Let&#8217;s see how to assign values to a Swift constant.</p>\n\n\n\n<h2>How to assign values in Swift constant?</h2>\n\n\n\n<p>We can assign a value in Swift constant by using Assignment operator (=).</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let siteName:String  \r\nsiteName = \"javatpoint.com\"  \r\nprint(siteName) </code></pre>\n\n\n\n<p>Or</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let siteName:String = \"javatpoint.com\"  \r\nprint(siteName)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals.com \n</code></pre>\n\n\n\n<p>As Swift is a type inferred language, you can remove the type (:String) from declaration and even it will show the correct result.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let siteName = \"codemeals.com\"  \r\nprint(siteName)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals.com \n</code></pre>\n\n\n\n<h4>Note: You can&#8217;t change the value of the constant.</h4>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>As the name shows, constants are the special type of variables whose values can&#8217;t be changed. They are like containers which are stored permanently with some items. How to declare Swift Constants? The&nbsp;let&nbsp;keyword is used to declare a variable. Example: Here, we have declared a constant named siteName of type String. It can hold only [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/100"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=100"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/100/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 101,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/100/revisions/101"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=100"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=100"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=100"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 102,
    "date": "2020-10-16T11:48:10",
    "date_gmt": "2020-10-16T11:48:10",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=102"
    },
    "modified": "2020-10-16T11:48:10",
    "modified_gmt": "2020-10-16T11:48:10",
    "slug": "swift-literals",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-literals/",
    "title": {
      "rendered": "Swift Literals"
    },
    "content": {
      "rendered": "\n<p>A Literal is the direct value of variable or constant. It may be a number, character or string. Literals are used to initialize or assign value to variables or constants.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<ol><li><strong>let</strong> siteName = &#8220;codemeals&#8221;  </li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>Here, javatpoint.com is a literal and siteName is a constant.</code></pre>\n\n\n\n<h2>Types of Swift Literals</h2>\n\n\n\n<h3>Integer Literals</h3>\n\n\n\n<ul><li><strong>Binary Literals</strong><ul><li>It is used to represent binary values.</li><li>It begins with 0b.</li></ul></li><li><strong>Octal Literals</strong><ul><li>It is used to represent octal values.</li><li>It begins with 0o.</li></ul></li><li><strong>Hexadecimal Literals</strong><ul><li>It is used to represent hexadecimal value.</li><li>It begins with 0x.</li></ul></li><li><strong>Decimal Literals</strong><ul><li>It is used represent decimal value.</li><li>It begins with nothing. Everything you declare in integer literal is of type decimal.</li></ul></li></ul>\n\n\n\n<h3>Example of Integer Literal:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let binaryNumber = 0b11111111  \r\nprint(binaryNumber)  \r\nprint(1231)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>255\n1231\n</code></pre>\n\n\n\n<p>The above example contains two integer literals 0b11111111 (binary literal) and 1231 (decimal literal). 255 is the decimal value of 11111111 that&#8217;s why the print(binaryNumber) statement outputs 255 in the screen.</p>\n\n\n\n<h2>String &amp; Character Swift literals</h2>\n\n\n\n<p>A sequence of characters covered by double quotes is called&nbsp;<strong>string literal</strong>&nbsp;and a single character covered by double quotes is called&nbsp;<strong>character literal</strong>.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let randomCharacter:Character = \"C\"  \r\nlet randomString:String = \"C is an awesome programming language\"  \r\nprint(randomCharacter)  \r\nprint(randomString)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>C\nC is an awesome programming language\n</code></pre>\n\n\n\n<h2>Floating Point Literals</h2>\n\n\n\n<p>Floating point literals are used for&nbsp;<strong>float</strong>&nbsp;and&nbsp;<strong>double</strong>&nbsp;values. There are two types of floating point literals:</p>\n\n\n\n<h3>Decimal:</h3>\n\n\n\n<p>It can store an optional exponent, indicated by an uppercase or lowercase&nbsp;<strong>e</strong>. For decimal numbers with an exponent of exp, the base number is multiplied by 10exp.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let someFloat = 3.1416  \r\nlet someAnotherFloat = 3.14e2   \r\nprint(someFloat)  \r\nprint(someAnotherFloat)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>3.1416\n314.0\n</code></pre>\n\n\n\n<h3>Hexadecimal:</h3>\n\n\n\n<p>Hexadecimal floats must contain an exponent, indicated by an uppercase or lowercase&nbsp;<strong>p</strong>. For hexadecimal numbers with an exponent of exp, the base number is multiplied by 2exp.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let someFloat = 0xFp10   \r\nlet someAnotherFloat = 0xFp-12  \r\nprint(someFloat)  \r\nprint(someAnotherFloat)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>15360.0\n0.003662109375\n</code></pre>\n\n\n\n<h2>Boolean Literals</h2>\n\n\n\n<p>There are two Boolean literals in Swift:&nbsp;<strong>true</strong>&nbsp;and&nbsp;<strong>false</strong>.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let result1:Bool = false  \r\nlet result2:Bool = true  \r\nprint(result1)  \r\nprint(result2)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\ntrue\n</code></pre>\n\n\n\n<h2>Type Alias</h2>\n\n\n\n<p>The&nbsp;<strong>typealias</strong>&nbsp;is used to create a new name for an existing type.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>typealias newname = type  </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<p>Let&#8217;s take an example where we put &#8220;Raj&#8221; as another name for type Int.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>100\n</code></pre>\n\n\n\n<h2>Type Safety</h2>\n\n\n\n<p>Swift 4 is a type-safe language. If your code requires Int, then you can&#8217;t use String. It performs type-checks when compiling your code and flags any mismatched types as errors.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var varA = 12  \r\nvarA = \"Hello World!\"  \r\nprint(varA)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\nmain.swift:2:8: error: cannot assign value of type 'String' to type 'Int'\r\nvarA = \"Hello World!\"\r\n       ^~~~~~~~~~~~~~\n</code></pre>\n\n\n\n<p>You can see that the above program get a compile time error just because of type safety.</p>\n\n\n\n<h2>Type Inference</h2>\n\n\n\n<p>Swift is a type inference language means when you compile the Swift code, it automatically check the type of value you provide. It automatically choose the appropriate data type for successful execution.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>// varA is inferred to be of type String  \r\nvar varA = \"Love is life\"  \r\nprint(varA)  \r\n  \r\n// varB is inferred to be of type Int  \r\nvar varB = 143  \r\nprint(varB)  \r\n  \r\n// varC is inferred to be of type Double  \r\nvar varC = 3.1416  \r\nprint(varC)  \r\n  \r\n// varD is also inferred to be of type Double  \r\nvar varD = 3 + 0.1416  \r\nprint(varD)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Love is life\r\n143\r\n3.1416\r\n3.1416\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A Literal is the direct value of variable or constant. It may be a number, character or string. Literals are used to initialize or assign value to variables or constants. Example: let siteName = &#8220;codemeals&#8221;   Types of Swift Literals Integer Literals Binary Literals It is used to represent binary values. It begins with 0b. Octal Literals It is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/102"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=102"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/102/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 103,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/102/revisions/103"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=102"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=102"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=102"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 104,
    "date": "2020-10-16T11:48:50",
    "date_gmt": "2020-10-16T11:48:50",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=104"
    },
    "modified": "2020-10-16T11:48:50",
    "modified_gmt": "2020-10-16T11:48:50",
    "slug": "swift-vs-objective-c",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-vs-objective-c/",
    "title": {
      "rendered": "Swift vs. Objective C"
    },
    "content": {
      "rendered": "\n<p>If we talk about iOS development, there are two possibilities:</p>\n\n\n\n<ol><li>Objective-C</li><li>Swift</li></ol>\n\n\n\n<p>Here, we compare both languages and see what are the differences between them? What are the advantages and disadvantages of both and which one is better to deploy your project?</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Objective C</h2>\n\n\n\n<p>Objective C is a programming language created by the Stepstone Company in the early 1980s. It was released to the public in 1988. It was licensed by NeXT Computer, Inc. to develop the NeXTStep frameworks and finally acquired by Apple. It became the standard for many years for iOS apps development.</p>\n\n\n\n<p>Objective C was influenced by two languages i.e. C and Smalltalk and this is the reason why it has a complicated syntax. Objective-C uses dynamic typing and message passing.</p>\n\n\n\n<h3>Advantages (Pros) of Objective C</h3>\n\n\n\n<ul><li>Objective C is well tested language because it has existed from many years. There is a lot of code written in Objective C. It has many well-documented, third-party frameworks.</li><li>Objective C is compatible to C and C++ programming language. As Objective C is a superset of C thus, the code of C and C++ runs smoothly on this.</li><li>Objective C is stable. You don&#8217;t need to spend money on migrating if you have developed your app on Objective C.</li></ul>\n\n\n\n<h3>Disadvantages (Cons) of Objective C</h3>\n\n\n\n<ul><li>Objective C is hard to learn because its syntax is complicated. It is different from many other popular programming languages that&#8217;s way Swift is preferred over it.</li><li>A lower number of developers are interested to learn Swift because it is hard to learn.</li><li>Objective C is not as secure as Swift. An app developed with Objective C is more prone to hack than Swift.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Swift</h2>\n\n\n\n<p>Swift is relatively a new language. Apple started to work on Swift in 2010 and it is first released to public in 2014. It has become open source in 2015. Swift follows the features of modern programming languages so, it is easier to learn.</p>\n\n\n\n<h3>Advantages (Pros) of Swift</h3>\n\n\n\n<ul><li>Swift is safe. Swift has some features like generics, optional, type inference which make its apps less prone to errors.</li><li>Apple is fully focused on Swift development so, it has a bright future.</li><li>Swift is one of the most preferred programming languages while Objective C is a degrading one.</li><li>Apps development in Swift is faster than in Objective C.</li></ul>\n\n\n\n<h3>Disadvantages (Cons) of Swift</h3>\n\n\n\n<ul><li>The only one disadvantage of Swift app development is that it is not stable. You may get its upcoming versions and app changes and migration is not an easy task.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>If we talk about iOS development, there are two possibilities: Objective-C Swift Here, we compare both languages and see what are the differences between them? What are the advantages and disadvantages of both and which one is better to deploy your project? Objective C Objective C is a programming language created by the Stepstone Company [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/104"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=104"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/104/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 105,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/104/revisions/105"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=104"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=104"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=104"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 106,
    "date": "2020-10-16T11:49:57",
    "date_gmt": "2020-10-16T11:49:57",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=106"
    },
    "modified": "2020-10-16T11:49:57",
    "modified_gmt": "2020-10-16T11:49:57",
    "slug": "first-swift-program",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/first-swift-program/",
    "title": {
      "rendered": "First Swift Program"
    },
    "content": {
      "rendered": "\n<p>To run your first Swift program, you must have installed Xcode and Swift on your computer.</p>\n\n\n\n<p>Open the Xcode playground and write down the following code:</p>\n\n\n\n<h2>Program:</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>// This is the first Swift program also called Hello, World! Program  \r\nimport Swift  \r\nprint(\"Hello, World!\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>\"Hello World\"\n</code></pre>\n\n\n\n<h3>Program Explanation</h3>\n\n\n\n<p>&nbsp; &nbsp; &nbsp;&nbsp;<strong>1. // This is the first Swift program also called Hello, World! Program</strong><br>The above line which is started with two slashes (//) is a comment. It is totally ignored by the compiler. Comments are used to make your code understandable by other person.</p>\n\n\n\n<p>&nbsp; &nbsp; &nbsp;&nbsp;<strong>2. import Swift</strong><br>The import Swift keyword is used to access all the symbols defined inside the Swift language. Without using this keyword, you can&#8217;t use print statement to print anything on Xcode.</p>\n\n\n\n<p>&nbsp; &nbsp; &nbsp;&nbsp;<strong>3. print(&#8220;Hello, World!&#8221;)</strong><br>The above line is a print function in Swift. It is used to show the output on the screen.</p>\n\n\n\n<h3>The &#8220;Hello World&#8221; program on Terminal</h3>\n\n\n\n<p><strong>Follow the steps given below:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Open the terminal\r\nType swift and press enter. You will get a welcome message as Welcome to Apple Swift version x.x.x.\r\nType print(\"Hello, World!\")\r\nPress Enter</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello, World!\n</code></pre>\n\n\n\n<h4>Note: Unlike other programming language C, C++, Java, Python etc., Swift doesn&#8217;t need to add a semicolon (;) at the end of the statement. It is optional.<br>You can add multiple lines in a single line by using semicolon (;) at the end of first statement.</h4>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>print(\"Hello World\",\");print(\" Welcome to codemeals\")  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>To run your first Swift program, you must have installed Xcode and Swift on your computer. Open the Xcode playground and write down the following code: Program: Output: Program Explanation &nbsp; &nbsp; &nbsp;&nbsp;1. // This is the first Swift program also called Hello, World! ProgramThe above line which is started with two slashes (//) is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/106"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=106"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/106/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 107,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/106/revisions/107"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=106"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=106"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=106"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 108,
    "date": "2020-10-16T11:50:36",
    "date_gmt": "2020-10-16T11:50:36",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=108"
    },
    "modified": "2020-10-16T11:50:36",
    "modified_gmt": "2020-10-16T11:50:36",
    "slug": "swift-operators",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-operators/",
    "title": {
      "rendered": "Swift Operators"
    },
    "content": {
      "rendered": "\n<p>In Swift 4, an operator is special symbol or phrase which is used to check, change or combine values. It tells the compiler to perform specific mathematical or logical manipulations. For example, the addition operator (+) adds two numbers, the logical AND operator (&amp;&amp;) combines two Boolean values etc.</p>\n\n\n\n<p>Swift 4 supports most of the standard C language operators. It enhances some capabilities to remove some common coding errors.</p>\n\n\n\n<h2>Classification of Operators on Terminology</h2>\n\n\n\n<p>There are three types of operators: unary, binary and ternary.</p>\n\n\n\n<p><strong>Unary operator:</strong>&nbsp;Unary operators are used on a single target (like -a). Unary prefix operators appear immediately before their target (such as !b). Unary postfix operators appear immediately after their target (such as c!).</p>\n\n\n\n<p><strong>Binary Operator:</strong>&nbsp;Binary operators are used when we have to operate on two targets. (like 2 + 3) and are infix because they appear in between their two targets.</p>\n\n\n\n<p><strong>Ternary Operator:</strong>&nbsp;Ternary operators operate on three targets. Like C language, Swift also has only one ternary operator called the ternary conditional operator (a ? b : c).</p>\n\n\n\n<h4>Note: The values associated with operator are operands. For example, in the expression 1 + 2, the + symbol is a binary operator and its two operands are the values 1 and 2.</h4>\n\n\n\n<h2>The most common built-in operators in Swift 4</h2>\n\n\n\n<ul><li>Assignment Operator</li><li>Arithmetic Operators</li><li>Remainder Operator</li><li>Unary Minus Operator</li><li>Unary Plus Operator</li><li>Compound Assignment Operators</li><li>Comparison Operators</li><li>Ternary Conditional Operator</li><li>Range Operators</li><li>Logical Operators</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Swift 4, an operator is special symbol or phrase which is used to check, change or combine values. It tells the compiler to perform specific mathematical or logical manipulations. For example, the addition operator (+) adds two numbers, the logical AND operator (&amp;&amp;) combines two Boolean values etc. Swift 4 supports most of the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/108"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=108"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/108/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 109,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/108/revisions/109"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=108"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=108"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=108"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 110,
    "date": "2020-10-16T11:51:41",
    "date_gmt": "2020-10-16T11:51:41",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=110"
    },
    "modified": "2020-10-16T11:51:41",
    "modified_gmt": "2020-10-16T11:51:41",
    "slug": "swift-switch-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-switch-statement/",
    "title": {
      "rendered": "Swift Switch Statement"
    },
    "content": {
      "rendered": "\n<p>The Switch statement is used as a substitute for long if-else-if statement while matching complex patterns. It provides multiple cases to perform different actions according to different conditions.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>switch variable/expression {  \r\ncase value1:  \r\n    // statements  \r\ncase value2:  \r\n    // statements  \r\ndefault:  \r\n    // statements  \r\n}</code></pre>\n\n\n\n<h2>Working of Switch statement in Swift</h2>\n\n\n\n<ul><li>The switch statement goes top to bottom, takes expressions and compares with each case values.</li><li>If it matches the case, the statement inside the case is executed and the entire switch statement finishes its execution as soon as the first matching switch case is completed.</li><li>If there is no match for the case, it goes to the next case.</li><li>The default keyword is a code which runs if there is no case is matched.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/swift/images/swift-switch-statement.png\" alt=\"Swift Switch Statement\"/></figure>\n\n\n\n<h2>Switch Statement Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>let dayOfWeek = 6  \r\nswitch dayOfWeek {  \r\n    case 1:  \r\n        print(\"It is Sunday today\")      \r\n    case 2:  \r\n        print(\"It is Monday today\")       \r\n    case 3:  \r\n        print(\"It is Tuesday today\")          \r\n    case 4:  \r\n        print(\"It is Wednesday today\")        \r\n    case 5:  \r\n        print(\"It is Thursday today\")         \r\n    case 6:  \r\n        print(\"It is Friday today\")       \r\n    case 7:  \r\n        print(\"It is Saturday today\")         \r\n    default:  \r\n        print(\"Invalid day\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>It is Friday today\n</code></pre>\n\n\n\n<p>In the above program, switch statement starts by matching&nbsp;<strong>dayOfWeek</strong>&nbsp;value with case 1. Since&nbsp;<strong>dayOfWeek</strong>&nbsp;value doesn&#8217;t match the first case value 1, it falls to the next case until it finds the match. It finds the match in case 6, print the declaration and the switch statement terminates.</p>\n\n\n\n<h2>Switch statement with fallthrough in Swift</h2>\n\n\n\n<p>The fallthrough statement is used in switch statement if you want to proceed the control to next case.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let dayOfWeek = 5  \r\nswitch dayOfWeek {  \r\n    case 1 :  \r\n        print(\"It is Sunday today\")      \r\n    case 2:  \r\n        print(\"It is Monday today\")       \r\n    case 3:  \r\n        print(\"It is Tuesday today\")          \r\n    case 4:  \r\n        print(\"It is Wednesday today\")        \r\n    case 5:  \r\n        print(\"It is Thursday today\")  \r\n        fallthrough  \r\n    case 6:  \r\n        print(\"It is Friday today\")       \r\n    case 7:  \r\n        print(\"It is Saturday today\")         \r\n    default:  \r\n        print(\"Invalid day\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>It is Thursday today\nIt is Friday today\n</code></pre>\n\n\n\n<p>In the above example, you can see that case 5 executes the statement print(&#8220;It is Wednesday today&#8221;) and fallthrough keyword proceeds to case6 which prints print(&#8220;It is Thursday today&#8221;).</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Switch statement is used as a substitute for long if-else-if statement while matching complex patterns. It provides multiple cases to perform different actions according to different conditions. Syntax: Working of Switch statement in Swift The switch statement goes top to bottom, takes expressions and compares with each case values. If it matches the case, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/110"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=110"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/110/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 111,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/110/revisions/111"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=110"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=110"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=110"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 112,
    "date": "2020-10-16T11:52:54",
    "date_gmt": "2020-10-16T11:52:54",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=112"
    },
    "modified": "2020-10-16T11:52:54",
    "modified_gmt": "2020-10-16T11:52:54",
    "slug": "swift-if-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-if-statement/",
    "title": {
      "rendered": "Swift If Statement"
    },
    "content": {
      "rendered": "\n<p>The&nbsp;<strong>if</strong>&nbsp;statement is a control flow statement which is used when we want to perform different actions according to some specified conditions which are either true or false.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if expression {  \r\n    // statements  \r\n}</code></pre>\n\n\n\n<p>Here, expression is a Boolean expression which returns either true or false.</p>\n\n\n\n<ul><li>If the expression is evaluated to&nbsp;<strong>true</strong>, statements&nbsp;<strong>inside the code block of if is executed</strong>.</li><li>If the expression is evaluated to&nbsp;<strong>false</strong>, statements&nbsp;<strong>inside the code block of if is skipped without execution</strong>.</li></ul>\n\n\n\n<h3>Example: (if condition is true)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let number = 5  \r\nif number > 0 {  \r\n    print(\"This is a positive number.\")  \r\n}  \r\nprint(\"This will be executed anyways.\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is a positive number.\nThis will be executed anyways.\n</code></pre>\n\n\n\n<p>In the above program, constant&nbsp;<em>number</em>&nbsp;is initialized with a value 5. Here, test expression evaluates&nbsp;<em>true</em>&nbsp;so inside the body of if statement is executed.</p>\n\n\n\n<h3>Example: (if condition is false)</h3>\n\n\n\n<p>If we initialise the value with negative number like -5 and the test condition is same then the test expression will evaluate false. So, the statement inside the code block of if is skipped without execution.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let number = -5  \r\nif number > 0 {  \r\n    print(\"This is a positive number.\")  \r\n}  \r\nprint(\"This will be executed anyways.\") </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>This will be executed anyways.\n</code></pre>\n\n\n\n<p>In the above example, you can see that the statement inside the code block of&nbsp;<strong>if</strong>&nbsp;is not executed.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The&nbsp;if&nbsp;statement is a control flow statement which is used when we want to perform different actions according to some specified conditions which are either true or false. Syntax: Here, expression is a Boolean expression which returns either true or false. If the expression is evaluated to&nbsp;true, statements&nbsp;inside the code block of if is executed. If [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/112"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=112"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/112/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 113,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/112/revisions/113"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=112"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=112"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=112"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 114,
    "date": "2020-10-16T11:54:38",
    "date_gmt": "2020-10-16T11:54:38",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=114"
    },
    "modified": "2020-10-16T11:54:38",
    "modified_gmt": "2020-10-16T11:54:38",
    "slug": "swift-if-else-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-if-else-statement/",
    "title": {
      "rendered": "Swift if-else Statement"
    },
    "content": {
      "rendered": "\n<p>The Swift if-else statement contains two statements: if statement and else statement.</p>\n\n\n\n<p>If the test evaluation is true, the&nbsp;<strong><em>if</em></strong>&nbsp;statement is executed and if the the test evaluation is false, then the&nbsp;<strong><em>else</em></strong>&nbsp;statement is executed.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if expression {  \r\n    // statements  \r\n} else {  \r\n    // statements  \r\n} </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let number = 5  \r\nif number > 0 {  \r\n    print(\"This is a positive number.\")  \r\n} else {  \r\n    print(\"This is not a positive number.\")  \r\n}  \r\nprint(\"This will be executed anyways.\") </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is a positive number.\nThis will be executed anyways.\n</code></pre>\n\n\n\n<p>In the above program, the constant number is positive (5) so, the test case is evaluated true and statement inside the code block of if is executed.</p>\n\n\n\n<p>Let us change the constant number value to negative (-5) and the test condition is same.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let number = -5  \r\nif number > 0 {  \r\n    print(\"This is a positive number.\")  \r\n} else {  \r\n    print(\"This is not a positive number.\")  \r\n}  \r\nprint(\"This will be executed anyways.\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is not a positive number.\nThis will be executed anyways.\n</code></pre>\n\n\n\n<p>You can see that it executes the statement inside the code block of else.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Swift if-else statement contains two statements: if statement and else statement. If the test evaluation is true, the&nbsp;if&nbsp;statement is executed and if the the test evaluation is false, then the&nbsp;else&nbsp;statement is executed. Syntax: Example: Output: In the above program, the constant number is positive (5) so, the test case is evaluated true and statement [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/114"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=114"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/114/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 115,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/114/revisions/115"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=114"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=114"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=114"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 116,
    "date": "2020-10-16T11:55:37",
    "date_gmt": "2020-10-16T11:55:37",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=116"
    },
    "modified": "2020-10-16T11:55:37",
    "modified_gmt": "2020-10-16T11:55:37",
    "slug": "swift-if-else-if-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-if-else-if-statement/",
    "title": {
      "rendered": "Swift if-else-if Statement"
    },
    "content": {
      "rendered": "\n<p>The if-else-if statement is used when you want to execute one block of code among many.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>if expression1 {  \r\n    // statements  \r\n}  \r\nelse if expression2 {  \r\n    // statements  \r\n}  \r\nelse if expression3 {  \r\n    // statements  \r\n}  \r\n.  \r\n.  \r\nelse {  \r\n    // statements  \r\n}  </code></pre>\n\n\n\n<p><strong>As long as the test expressions are true</strong>, the if statements are executed from top to bottom and then the control of program jumps outside if-else-if ladder.</p>\n\n\n\n<p><strong>If the test expression is false</strong>, code inside the else is executed.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let number = 0;  \r\nif number > 0 {  \r\n    print(\"This is a positive number.\")  \r\n}  \r\nelse if (number &lt; 0) {  \r\n    print(\"This is a negative number.\")  \r\n}  \r\nelse {  \r\n    print(\"This number is 0.\")  \r\n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>This number is 0.\n</code></pre>\n\n\n\n<p>You can see that the constant number is initialized with value 0. Since if statements are executed from top to bottom, it checks the expression number &gt; 0 which evaluates to false. It then checks the next expression number &lt; 0 which also evaluates to false.</p>\n\n\n\n<p>Hence, the statement print(&#8220;This number is 0.&#8221;) inside the else statement.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The if-else-if statement is used when you want to execute one block of code among many. Syntax: As long as the test expressions are true, the if statements are executed from top to bottom and then the control of program jumps outside if-else-if ladder. If the test expression is false, code inside the else is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/116"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=116"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/116/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 117,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/116/revisions/117"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=116"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=116"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=116"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 118,
    "date": "2020-10-16T11:56:23",
    "date_gmt": "2020-10-16T11:56:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=118"
    },
    "modified": "2020-10-16T11:56:23",
    "modified_gmt": "2020-10-16T11:56:23",
    "slug": "swift-nested-if-else-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-nested-if-else-statement/",
    "title": {
      "rendered": "Swift Nested if-else Statement"
    },
    "content": {
      "rendered": "\n<p>Swift language facilitates you to use an if-else statement inside an if-else statement. Nested if-else statement can also be used in switch statement in Swift.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let n1 = 10, n2 = 22, n3 = 25  \r\nif n1 >= n2 {  \r\n    if n1 >= n3 {  \r\n        print(\"The largest number is \", n1)  \r\n    }  \r\n    else {  \r\n        print(\"The largest number is \", n3)  \r\n    }  \r\n}  \r\nelse {  \r\n    if n2 >= n3 {  \r\n        print(\"The largest number is \",  n2)  \r\n    }  \r\n    else {  \r\n        print(\"The largest number is \", n3)  \r\n    }  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The largest number is 25</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift language facilitates you to use an if-else statement inside an if-else statement. Nested if-else statement can also be used in switch statement in Swift. Example: Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/118"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=118"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/118/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 119,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/118/revisions/119"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=118"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=118"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=118"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 120,
    "date": "2020-10-16T11:57:22",
    "date_gmt": "2020-10-16T11:57:22",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=120"
    },
    "modified": "2020-10-16T11:57:22",
    "modified_gmt": "2020-10-16T11:57:22",
    "slug": "swift-gaurd-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-gaurd-statement/",
    "title": {
      "rendered": "Swift Gaurd Statement"
    },
    "content": {
      "rendered": "\n<p>Swift Guard statement is used as a substitute of Swift if statement. Guard statement provides benefits over if statement to control the program flow and write simple and clean code.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>guard expression else {  \r\n    //statements  \r\n    //must contain a control statement:return, break, continue or throw.  \r\n}  </code></pre>\n\n\n\n<ul><li>Here, expression is a&nbsp;<strong>Boolean expression</strong>&nbsp;which either evaluated to true or false.</li><li>If the expression is evaluated to false, it will execute the statements inside the guard.</li><li>If the expression is evaluated to true, it will skip the execution of the statements inside the guard.</li></ul>\n\n\n\n<h4>Note: The guard statement must contain a control statement return, break, continue or throw at the end of the code.</h4>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>guard true else {  \r\n    print(\"Condition is not satisfied.\")  \r\n}  \r\nprint(\"Condition is satisfied.\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Condition is satisfied.\n</code></pre>\n\n\n\n<p><strong>Guard statement inside a function</strong></p>\n\n\n\n<h3>Example 2:</h3>\n\n\n\n<p>In Swift, we can also use a guard statement in function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>func Function1() {  \r\n    guard false else {  \r\n        print(\"Condition is not satisfied.\")  \r\n        return  \r\n    }  \r\n    print(\"Condition is satisfied.\")  \r\n}  \r\nFunction1()  \r\nprint(\"Hello after function call\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Condition is not satisfied.\nHello after function call</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift Guard statement is used as a substitute of Swift if statement. Guard statement provides benefits over if statement to control the program flow and write simple and clean code. Syntax: Here, expression is a&nbsp;Boolean expression&nbsp;which either evaluated to true or false. If the expression is evaluated to false, it will execute the statements inside [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/120"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=120"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/120/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 121,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/120/revisions/121"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=120"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=120"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=120"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 122,
    "date": "2020-10-16T11:58:02",
    "date_gmt": "2020-10-16T11:58:02",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=122"
    },
    "modified": "2020-10-16T11:58:02",
    "modified_gmt": "2020-10-16T11:58:02",
    "slug": "break-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/break-statement/",
    "title": {
      "rendered": "Break Statement"
    },
    "content": {
      "rendered": "\n<p>Swift 4 break statement is used in two cases:</p>\n\n\n\n<ol><li>The break statement is used within a loop when you have toimmediately terminatea statement. The program control resumes at the next statement following the loop.</li><li>It is also used to terminate a case in switch statement.</li></ol>\n\n\n\n<p>In the case of nested loops, the break statement terminates the inner most loop andstart executing the next line of the code after the block.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<p>The syntax of Swift 4 break statement is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>break   </code></pre>\n\n\n\n<p><strong>Flow diagram of Swift 4 break Statement</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/swift/images/swift-break-statement.png\" alt=\"Swift Break Statement\"/></figure>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var index = 10  \r\n  \r\nrepeat {  \r\n   index = index + 1  \r\n   if( index == 25 ){  \r\n      break  \r\n   }  \r\n   print( \"Value of index is \\(index)\")  \r\n} while index &lt; 30  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of index is 11\nValue of index is 12\nValue of index is 13\nValue of index is 14\nValue of index is 15\nValue of index is 16\nValue of index is 17\nValue of index is 18\nValue of index is 19\nValue of index is 20\nValue of index is 21\nValue of index is 22\nValue of index is 23\nValue of index is 24</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift 4 break statement is used in two cases: The break statement is used within a loop when you have toimmediately terminatea statement. The program control resumes at the next statement following the loop. It is also used to terminate a case in switch statement. In the case of nested loops, the break statement terminates [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/122"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=122"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/122/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 123,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/122/revisions/123"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=122"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=122"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=122"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 124,
    "date": "2020-10-16T11:58:43",
    "date_gmt": "2020-10-16T11:58:43",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=124"
    },
    "modified": "2020-10-16T11:58:43",
    "modified_gmt": "2020-10-16T11:58:43",
    "slug": "control-statementsin-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/control-statementsin-loop/",
    "title": {
      "rendered": "Control statementsin Loop"
    },
    "content": {
      "rendered": "\n<p>Control statements are used in loop to change execution from its normal sequence. When the execution leaves the scope all the already created objects which are created automatically in that scope are destroyed.</p>\n\n\n\n<p><strong>A list of control statements supported in Swift 4:</strong></p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Continue Statement</h2>\n\n\n\n<p>Swift 4&nbsp;<strong>continue</strong>&nbsp;statement is used to stop currently executing statement and start again at the beginning of the next iteration through the loop. The continue statement is used with for loop, while loop and do&#8230; while loop.</p>\n\n\n\n<p>With&nbsp;<strong>&#8216;for&#8217;</strong>&nbsp;loop, the continue statement tests the conditions and increments the portions of the loop to execute.</p>\n\n\n\n<p>With&nbsp;<strong>&#8216;while&#8217; and &#8216;do&#8230;while&#8217;</strong>&nbsp;loops, the continue statement passes the program control to the conditional tests.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<p>The syntax of the continue statement for the Swift 4 loops is as follow:</p>\n\n\n\n<ol><li><strong>continue</strong>&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Flow diagram of Swift 4 Continue statement</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/swift/images/swift-continue-statement.png\" alt=\"Swift Continue Statement\"/></figure>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var index = 10  \r\n  \r\nrepeat {  \r\n   index = index + 1  \r\n   if( index == 25 ){  \r\n      continue  \r\n   }  \r\n   print( \"Value of index is \\(index)\")  \r\n} while index &lt; 30  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of index is 11\nValue of index is 12\nValue of index is 13\nValue of index is 14\nValue of index is 15\nValue of index is 16\nValue of index is 17\nValue of index is 18\nValue of index is 19\nValue of index is 20\nValue of index is 21\nValue of index is 22\nValue of index is 23\nValue of index is 24\nValue of index is 25\nValue of index is 26\nValue of index is 27\nValue of index is 28\nValue of index is 29\nValue of index is 30</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Control statements are used in loop to change execution from its normal sequence. When the execution leaves the scope all the already created objects which are created automatically in that scope are destroyed. A list of control statements supported in Swift 4: Continue Statement Swift 4&nbsp;continue&nbsp;statement is used to stop currently executing statement and start [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/124"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=124"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/124/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 125,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/124/revisions/125"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=124"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=124"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=124"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 126,
    "date": "2020-10-16T11:59:58",
    "date_gmt": "2020-10-16T11:59:58",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=126"
    },
    "modified": "2020-10-16T11:59:58",
    "modified_gmt": "2020-10-16T11:59:58",
    "slug": "fallthrough-statement",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/fallthrough-statement/",
    "title": {
      "rendered": "Fallthrough Statement"
    },
    "content": {
      "rendered": "\n<p>Swift 4 fallthrough statementis used to simulate the behavior of Swift 4 switch to C/ C++ style switch. In Swift 4, the switch statementcompletes its execution as soon as the first matching case is completed unlike the C and C++ programming languages where falling through the bottom of subsequent cases happen.</p>\n\n\n\n<h3>Syntax of SwitchStatement in C/C++</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>switch(expression){  \r\n   case constant-expression :  \r\n      statement(s);  \r\n      break; /* optional */  \r\n   case constant-expression :  \r\n      statement(s);  \r\n      break; /* optional */  \r\n  \r\n   /* you can have any number of case statements */  \r\n   default : /* Optional */  \r\n      statement(s);  \r\n}  </code></pre>\n\n\n\n<p>In the above code, we need a break statement to come out of a case statement, otherwise the execution control will fall through the subsequent case statements available below the matching case statement.</p>\n\n\n\n<h3>Syntax of Switch Statement in Swift 4</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>switch expression {  \r\n   case expression1 :  \r\n      statement(s)  \r\nfallthrough /* optional */  \r\n   case expression2, expression3 :  \r\n      statement(s)  \r\nfallthrough /* optional */  \r\n  \r\n   default : /* Optional */  \r\n      statement(s);  \r\n} </code></pre>\n\n\n\n<p>In the above code, if we don&#8217;t usefallthrough statement, then the program will come out of the switch statement after executing the matching case statement.</p>\n\n\n\n<p>Let&#8217;s see an example to make it clear.</p>\n\n\n\n<h2>Example: (Swift 4 example with fallthrough statement)</h2>\n\n\n\n<p>Let&#8217;s see how to use a switch statement in Swift 4 without fallthrough statement:</p>\n\n\n\n<h3>Example 1:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var index = 4  \r\n  \r\nswitch index {  \r\n   case 1:  \r\n      print( \"Hello Everyone\")  \r\n   case 2,3 :  \r\n      print( \"This is JavaTpoint\")  \r\n   case 4 :  \r\n      print( \"JavaTpoint is an educational portal\")  \r\n   default :  \r\n      print( \"It is free to everyone\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals is an educational portal\n</code></pre>\n\n\n\n<h3>Example 2:</h3>\n\n\n\n<p>Let&#8217;s see how to use a switch statement in Swift 4 programming with fallthrough statement.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var index = 10  \r\nswitch index {  \r\n   case 100:  \r\n      print( \"Hello Everyone\")  \r\n      fallthrough  \r\n   case 10,15 :  \r\n      print( \"This is JavaTpoint\")  \r\n      fallthrough  \r\n   case 5 :  \r\n      print( \"JavaTpoint is an educational portal\")  \r\n   default :  \r\n      print( \"It is free to everyone\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is JavaTpoint\nJavaTpoint is an educational portal</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift 4 fallthrough statementis used to simulate the behavior of Swift 4 switch to C/ C++ style switch. In Swift 4, the switch statementcompletes its execution as soon as the first matching case is completed unlike the C and C++ programming languages where falling through the bottom of subsequent cases happen. Syntax of SwitchStatement in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/126"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=126"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/126/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 127,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/126/revisions/127"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=126"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=126"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=126"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 128,
    "date": "2020-10-16T12:00:29",
    "date_gmt": "2020-10-16T12:00:29",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=128"
    },
    "modified": "2020-10-16T12:00:29",
    "modified_gmt": "2020-10-16T12:00:29",
    "slug": "swift-4-loops",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-4-loops/",
    "title": {
      "rendered": "Swift 4 Loops"
    },
    "content": {
      "rendered": "\n<p>Loop is used when you want to execute a block of codes several times. It executes the statement sequentially. It means it executes the first statement within the function first, followed by second and third and so on.</p>\n\n\n\n<p>Swift 4 provides several control structures to allow more complicated execution paths.</p>\n\n\n\n<p>In Swift 4 programming language, loops are used to execute a statement or a group of statements when you need to execute them multiple times.</p>\n\n\n\n<p>Every programming language has some general form of loop statement.</p>\n\n\n\n<p><strong>A general structure of loop statement</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/swift/images/swift-4-loops.png\" alt=\"Swift 4 Loops\"/></figure>\n\n\n\n<h3>Loops used in Swift 4 programming language</h3>\n\n\n\n<p>A list of most used loops in Swift 4 programming language:</p>\n\n\n\n<p><strong>for-in loop:</strong>&nbsp;The for-in loop is used to execute a set of statements for each item in a range, selection, collection etc.</p>\n\n\n\n<p><strong>while loop:</strong>&nbsp;The while loop is used to repeat a statement or a set of statements when the given condition is true. It checks the conditions before executing the loop body.</p>\n\n\n\n<p><strong>repeat&#8230; while loop:</strong>&nbsp;It is same as the while loop but it checks the condition at the end of the loop body.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Loop is used when you want to execute a block of codes several times. It executes the statement sequentially. It means it executes the first statement within the function first, followed by second and third and so on. Swift 4 provides several control structures to allow more complicated execution paths. In Swift 4 programming language, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/128"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=128"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/128/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 129,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/128/revisions/129"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=128"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=128"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=128"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 130,
    "date": "2020-10-16T12:02:45",
    "date_gmt": "2020-10-16T12:02:45",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=130"
    },
    "modified": "2020-10-16T12:02:45",
    "modified_gmt": "2020-10-16T12:02:45",
    "slug": "swift-for-in-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-for-in-loop/",
    "title": {
      "rendered": "Swift For-in Loop"
    },
    "content": {
      "rendered": "\n<p>The Swift For-in loop is used to run a set of tasks for a certain number of times. This loop does repetitive process a number of times.</p>\n\n\n\n<h3>For example</h3>\n\n\n\n<p>If you want to write a syntax that prints &#8220;Hello JavaTpoint&#8221;, the simple syntax will be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print(\"codemeals\")   </code></pre>\n\n\n\n<p>What would be if you have to write the same print statement 5 times? The simple solution would be:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print(\"Hello codemeals\")   \r\nprint(\"Hello codemeals\")   \r\nprint(\"Hello codemeals\")   \r\nprint(\"Hello codemeals\")   \r\nprint(\"Hello codemeals\")</code></pre>\n\n\n\n<p>But, there is one solution. You can use for-in loop to print the same statement and make the code shorter.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for i in 1...5 {  \r\n//It will print Hello JavaTpoint for 5 times on the screen  \r\nprint(\"Hello JavaTpoint\")  \r\n}  </code></pre>\n\n\n\n<h3>Example 1:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let names = &#91;\"Ajeet\", \"Aryan\", \"Ayan\", \"Alex\"]  \r\nfor name in names {  \r\n    print(\"Good Morning \\(name)\")  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Good Morning Ajeet\nGood Morning Aryan\nGood Morning Ayan\nGood Morning Alex\n</code></pre>\n\n\n\n<p>A Swift program to print the table of a specific number (Here, it is 5.)</p>\n\n\n\n<pre class=\"wp-block-code\"><code>for index in 1...10 {  \r\n    print(\"\\(index) times 5 is \\(index * 5)\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 times 5 is 5\n2 times 5 is 10\n3 times 5 is 15\n4 times 5 is 20\n5 times 5 is 25\n6 times 5 is 30\n7 times 5 is 35\n8 times 5 is 40\n9 times 5 is 45\n10 times 5 is 50</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Swift For-in loop is used to run a set of tasks for a certain number of times. This loop does repetitive process a number of times. For example If you want to write a syntax that prints &#8220;Hello JavaTpoint&#8221;, the simple syntax will be: What would be if you have to write the same [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/130"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=130"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/130/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 131,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/130/revisions/131"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=130"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=130"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=130"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 132,
    "date": "2020-10-16T12:03:42",
    "date_gmt": "2020-10-16T12:03:42",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=132"
    },
    "modified": "2020-10-16T12:03:42",
    "modified_gmt": "2020-10-16T12:03:42",
    "slug": "swift-while-and-repeat-while-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-while-and-repeat-while-loop/",
    "title": {
      "rendered": "Swift While and Repeat While Loop"
    },
    "content": {
      "rendered": "\n<p>While and Repeat while loops are used as an alternative of for-in loops when the number of iteration is not known. The while loop executes a set of statements until a false condition occur. This loop is generally used when you don&#8217;t know about the number of iterations.</p>\n\n\n\n<p>There are two types of loops in Swift:</p>\n\n\n\n<ol><li><a href=\"https://www.javatpoint.com/swift-while-loop#while-loop\">W</a>hile loop</li><li>Repeat While loop</li></ol>\n\n\n\n<h2 id=\"while-loop\">Swift While Loop</h2>\n\n\n\n<p>The Swift while loop evaluates its condition at the start of each pass.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>while (TestExpression) {  \r\n    // statements  \r\n}  </code></pre>\n\n\n\n<p>Here, TestExpression is a Boolean expression. If it is true,</p>\n\n\n\n<ul><li>Statements inside the while loop are executed.</li><li>And, the TestExpressionis evaluated again.</li></ul>\n\n\n\n<p>This process goes on until the TestExpression evaluates false. When the TestExpression gets the false condition, the while loop is terminated.</p>\n\n\n\n<p><strong>Flow chart of While loop</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/swift/images/swift-while-loop.png\" alt=\"Swift while Statement\"/></figure>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var currentLevel:Int = 0, finalLevel:Int = 6  \r\nlet gameCompleted = true  \r\nwhile (currentLevel &lt;= finalLevel) {  \r\n    //play game  \r\n    if gameCompleted {  \r\n        print(\"You have successfully completed level \\(currentLevel)\")  \r\n        currentLevel += 1  \r\n    }  \r\n}  \r\n//outside of while loop  \r\nprint(\"Terminated! You are out of the game \")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>You have successfully completed level 0\nYou have successfully completed level 1\nYou have successfully completed level 2\nYou have successfully completed level 3\nYou have successfully completed level 4\nYou have successfully completed level 5\nYou have successfully completed level 6\nTerminated! You are out of the game \n</code></pre>\n\n\n\n<p>In the above program, the while loop is executed until the condition is evaluated to false and as soon as it gets the false condition, it terminates.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>While and Repeat while loops are used as an alternative of for-in loops when the number of iteration is not known. The while loop executes a set of statements until a false condition occur. This loop is generally used when you don&#8217;t know about the number of iterations. There are two types of loops in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/132"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=132"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/132/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 133,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/132/revisions/133"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=132"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=132"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=132"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 134,
    "date": "2020-10-16T12:04:21",
    "date_gmt": "2020-10-16T12:04:21",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=134"
    },
    "modified": "2020-10-16T12:04:21",
    "modified_gmt": "2020-10-16T12:04:21",
    "slug": "repeat-while-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/repeat-while-loop/",
    "title": {
      "rendered": "Repeat While loop"
    },
    "content": {
      "rendered": "\n<p>The Repeat While loop is same as while loop but a difference that the body of repeat&#8230;while loop is executed once before the test expression is checked.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>repeat {  \r\n    // statements  \r\n    ...  \r\n} while (testExpression)  </code></pre>\n\n\n\n<p>In this loop, the body of repeat while loop is executed once and after that testExpression is checked.</p>\n\n\n\n<p><strong>Flowchart of Repeat While loop</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/swift/images/swift-repeat-while-loop.png\" alt=\"Swift Repeat while Statement\"/></figure>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var currentLevel:Int = 0, finalLevel:Int = 5  \r\nlet gameCompleted = true  \r\nrepeat {  \r\n    //play game  \r\n    if gameCompleted {  \r\n        print(\"You have successfully completed level \\(currentLevel)\")  \r\n        currentLevel += 1  \r\n    }  \r\n} while (currentLevel &lt;= finalLevel)  \r\nprint(\"Terminated! outside of repeat while loop\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>You have successfully completed level 0\nYou have successfully completed level 1\nYou have successfully completed level 2\nYou have successfully completed level 3\nYou have successfully completed level 4\nYou have successfully completed level 5\nTerminated! outside of repeat while loop</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Repeat While loop is same as while loop but a difference that the body of repeat&#8230;while loop is executed once before the test expression is checked. Syntax: In this loop, the body of repeat while loop is executed once and after that testExpression is checked. Flowchart of Repeat While loop Example: Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/134"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=134"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/134/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 135,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/134/revisions/135"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=134"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=134"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=134"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 136,
    "date": "2020-10-17T10:33:23",
    "date_gmt": "2020-10-17T10:33:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=136"
    },
    "modified": "2020-10-17T10:33:23",
    "modified_gmt": "2020-10-17T10:33:23",
    "slug": "swift-strings",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-strings/",
    "title": {
      "rendered": "Swift Strings"
    },
    "content": {
      "rendered": "\n<p>Swift 4 strings are ordered collection of characters, such as &#8220;Hello, World!&#8221; and they are represented by the Swift 4 data type String, which in turn represents a collection of values of Character type.</p>\n\n\n\n<h2>How to create a string?</h2>\n\n\n\n<p>A string can be created by using a string literal or creating an instance of a String class.</p>\n\n\n\n<p><strong>See this example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>// String creation using String literal  \r\nvar stringA = \"Hello world!\"  \r\nprint( stringA )  \r\n  \r\n// String creation using String instance  \r\nvar stringB = String(\"This is codemeals\")  \r\nprint( stringB )  \r\n  \r\n//Multiple line string  \r\n  \r\nlet stringC = \"\"\"  \r\nThis is an  \r\nexample of multiple line  \r\nstring by codemeals\r\n  \r\n\"\"\"  \r\nprint(stringC)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello world!\nThis is codemeals\nThis is an\nexample of multiple line\nstring by codemeals\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Empty Strings</h2>\n\n\n\n<p>To create empty string, you can use an empty string literal or create an instance of string class.</p>\n\n\n\n<p>To check whether the string is empty or not, you can use the Boolean property isEmpty.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>// Empty string creation using String literal  \r\nvar stringA = \"\"  \r\n  \r\nif stringA.isEmpty {  \r\n   print( \"stringA is empty\" )  \r\n} else {  \r\n   print( \"stringA is not empty\" )  \r\n}  \r\n  \r\n// Empty string creation using String instance  \r\nlet stringB = String()  \r\n  \r\nif stringB.isEmpty {  \r\n   print( \"stringB is empty\" )  \r\n} else {  \r\n   print( \"stringB is not empty\" )  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>stringA is empty\nstringB is empty\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Operations on Strings</h2>\n\n\n\n<p>We can operate a lot of operations on Swift strings.</p>\n\n\n\n<h3>String Concatenation</h3>\n\n\n\n<p>The + operator is used to concatenate two strings or a string and a character, or two characters in Swift.</p>\n\n\n\n<h4>Example:</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>let constA = \"Hello \"  \r\nlet constB = \"codemeals\"  \r\n  \r\nvar stringA = constA + constB  \r\nprint( stringA )</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello codemeals\n</code></pre>\n\n\n\n<h3>String Interpolation</h3>\n\n\n\n<p>String interpolation is used to construct a new string value by mixing the values of constants, variables, literals, and expressions and include them inside a string literal. The values of variables and constants which you insert into string literal is wrapped in a pair of parentheses, prefixed by a backslash.</p>\n\n\n\n<h4>Example:</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>var varA = 10  \r\nlet constA = 1000  \r\nvar varC:Float = 10.0  \r\n  \r\nvar stringA = \"\\(varA) times \\(constA) is equal to \\(varC * 1000)\"  \r\nprint( stringA   </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>10 times 1000 is equal to 10000.0\n</code></pre>\n\n\n\n<h3>String Length</h3>\n\n\n\n<p>String 4 doesn&#8217;t support&nbsp;<strong>length</strong>&nbsp;property, but we can use a global count() function to count the number of characters in a string.</p>\n\n\n\n<h4>Example:</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>var varA = \"Hello codemeals\"  \r\nprint( \"\\(varA), string length is \\((varA.count))\" )  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello codemeals, string length is 16\n</code></pre>\n\n\n\n<h3>String Comparison</h3>\n\n\n\n<p>The == operator is used to compare two strings variables or constants.</p>\n\n\n\n<h4>Example:</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>var varA = \"Hello, codemeals\"  \r\nvar varB = \"Hello, World!\"  \r\n  \r\nif varA == varB {  \r\n   print( \"\\(varA) and \\(varB) are equal\" )  \r\n} else {  \r\n   print( \"\\(varA) and \\(varB) are not equal\" )  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">Hello, codemeals and Hello, World! are not equal\n</pre>\n\n\n\n<h3>String Iteration</h3>\n\n\n\n<p>In Swift 4, strings are the collection of values, so we can iterate over strings using loops:</p>\n\n\n\n<h4>Example:</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>for chars in \"Welcometocodemeals\" {  \r\n   print(chars, terminator: \" \")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>W e l c o m e t o codemeals\n</code></pre>\n\n\n\n<h3>Iteration of Unicode Strings</h3>\n\n\n\n<p>We can access the UTF-8 and UTF-16 representation of the Unicode strings over its utf8 and utf16 properties.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var unicodeString = \"JavaTpoint\"  \r\n  \r\nprint(\"UTF-8 Codes: \")  \r\nfor code in unicodeString.utf8 {  \r\n   print(\"\\(code) \")  \r\n}  \r\n  \r\nprint(\"\\n\")  \r\n  \r\nprint(\"UTF-16 Codes: \")  \r\nfor code in unicodeString.utf16 {  \r\n   print(\"\\(code) \")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>UTF-8 Codes: \n74 \n97 \n118 \n97 \n84 \n112 \n111 \n105 \n110 \n116 \n\n\nUTF-16 Codes: \n74 \n97 \n118 \n97 \n84 \n112 \n111 \n105 \n110 \n116 \n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Swift 4 String Functions and Operators</h2>\n\n\n\n<p>A list of functions and operators related to String in Swift 4:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Index</th><th>Functions/Operators</th><th>Usage</th></tr><tr><td>1)</td><td>isEmpty</td><td>It is used to check whether a string is empty or not. It specifies a Boolean value.</td></tr><tr><td>2)</td><td>hasPrefix(prefix: String)</td><td>It is a function to check whether a given parameter string exists as a prefix of the string or not.</td></tr><tr><td>3)</td><td>hasSuffix(suffix: String)</td><td>It is a function to check whether a given parameter string exists as a suffix of the string or not.</td></tr><tr><td>4)</td><td>toInt()</td><td>It is a function to convert numeric String value into Integer.</td></tr><tr><td>5)</td><td>count()</td><td>It is a global function to count the number of Characters in a string.</td></tr><tr><td>6)</td><td>utf8</td><td>It specifies a property to return a UTF-8 representation of a string.</td></tr><tr><td>7)</td><td>utf16</td><td>It specifies a property to return a UTF-16 representation of a string.</td></tr><tr><td>8)</td><td>unicodeScalars</td><td>It specifies a property to return a Unicode Scalar representation of a string.</td></tr><tr><td>9)</td><td>+</td><td>It is an operator to concatenate two strings, or a string and a character, or two characters.</td></tr><tr><td>10)</td><td>+=</td><td>It is an operator to append a string or character to an existing string.</td></tr><tr><td>11)</td><td>==</td><td>It is an operator to determine the equality of two strings.</td></tr><tr><td>12)</td><td>&lt;</td><td>It is an operator to perform a lexicographical comparison to determine whether one string evaluates as less than another.</td></tr><tr><td>13)</td><td>startIndex</td><td>It is used to get the value at starting index of string.</td></tr><tr><td>14)</td><td>endIndex</td><td>It is used to get the value at ending index of string.</td></tr><tr><td>15)</td><td>Indices</td><td>It is used to access the indices one by one. i.e. all the characters of string one by one.</td></tr><tr><td>16)</td><td>insert(&#8220;Value&#8221;, at: position)</td><td>It is used to insert a value at a position.</td></tr><tr><td>17)</td><td>remove(at: position)<br>removeSubrange(range)</td><td>It is used to remove a value at a position, or to remove a range of values from string.</td></tr><tr><td>18)</td><td>reversed()</td><td>It is used to return the reverse of a string.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift 4 strings are ordered collection of characters, such as &#8220;Hello, World!&#8221; and they are represented by the Swift 4 data type String, which in turn represents a collection of values of Character type. How to create a string? A string can be created by using a string literal or creating an instance of a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/136"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=136"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/136/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 137,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/136/revisions/137"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=136"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=136"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=136"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 138,
    "date": "2020-10-17T10:35:24",
    "date_gmt": "2020-10-17T10:35:24",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=138"
    },
    "modified": "2020-10-17T10:35:24",
    "modified_gmt": "2020-10-17T10:35:24",
    "slug": "swift-functions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-functions/",
    "title": {
      "rendered": "Swift Functions"
    },
    "content": {
      "rendered": "\n<p>Functions are the set of codes which are used to perform a specific task. It Swift 4, a function is used to pass local as well as global parameter values inside the function calls.</p>\n\n\n\n<p>Functions have a specific name which is used to &#8220;call&#8221; the function to perform its task when needed.</p>\n\n\n\n<p>Swift 4 functions contain parameter type and its return types.</p>\n\n\n\n<h2>Types of Functions</h2>\n\n\n\n<p>Types of functions depend on whether a function is predefined or created by programmer. In Swift 4, there are two types of functions:</p>\n\n\n\n<ol><li><strong>Library functions (Built-in Functions)</strong>&nbsp;&#8211; Library functions are the type of functions which are defined already in Swift Framework.</li><li><strong>User-defined functions</strong>&nbsp;&#8211; User defined functions are created by the programmer themselves.</li></ol>\n\n\n\n<h2>Library Functions</h2>\n\n\n\n<p>Library functions are the user-defined functions which are already defined in Swift framework. These functions are used to solve common problems and simple operations in Swift like printing, finding minimum and maximum, etc. so that you don&#8217;t have to solve them yourselves.</p>\n\n\n\n<p>Library functions can be used directly by invoking (calling) it. For example: print() function</p>\n\n\n\n<p>You can see all the functions inside the Swift framework by importing Swift. Open command prompt and click on it. You will see a new page. Search all the statements starting with&nbsp;<strong>func</strong>&nbsp;keyword.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<ol><li>print(&#8220;codemeals&#8221;)  </li></ol>\n\n\n\n<p>When we run the above program, it will show an output&nbsp;<strong>JavaTpoint</strong>. It is just because, we have invoked a print function which is already defined in Swift Framework. The function is used to print output.</p>\n\n\n\n<h2>User-defined Functions</h2>\n\n\n\n<p>Swift 4 facilitates you to define your own functions. User defined functions are mainly used to solve problems or perform tasks not available in Swift Framework. These functions can also be reused to perform similar tasks in the future.</p>\n\n\n\n<h2>Function Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>func function_name(args...) -> ReturnType {  \r\n    //statements  \r\n    return value  \r\n}</code></pre>\n\n\n\n<h2>Parameter Explanation</h2>\n\n\n\n<p><strong>func</strong>&#8211; This is a keyword which you have to write to create a function</p>\n\n\n\n<p><strong>function_name</strong>&#8211; It specifies the name of the function. You can give it any name that defines what a function does.</p>\n\n\n\n<p><strong>args&#8230;</strong>&nbsp;It defines the input a function accepts.</p>\n\n\n\n<p><strong>-&gt;</strong>&nbsp;This operator is used to indicate the return type of a function.</p>\n\n\n\n<p><strong>ReturnType</strong>&#8211; It defines the type of a value you can return from a function. E.g. Int, String etc.</p>\n\n\n\n<p><strong>return</strong>&#8211; It is a keyword used to transfer the control of a program to the function call and also return value from a function. Even if you don&#8217;t specify the return keyword the function returns automatically after execution of last statement.</p>\n\n\n\n<p><strong>value</strong>&#8211; It represents the actual data being returned from the function. The value type must match the ReturnType.</p>\n\n\n\n<h2>How to define function in Swift 4?</h2>\n\n\n\n<p>We can execute a function by calling the function&#8217;s name. When we define a new function, it may take one or many values as input parameters to the functions and it will process the functions in the main body and pass back the values to the functions as output &#8216;return types&#8217;.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func wish(user:String) {  \r\n    print(\"Good Morning \\(user). Have a Good day.\")  \r\n}  </code></pre>\n\n\n\n<h3>Explanation of the above function definition:</h3>\n\n\n\n<ul><li>Keyword&nbsp;<strong>func</strong>&nbsp;specifies the start of function header.</li><li><strong>Wish</strong>&nbsp;specifies the function name to uniquely identify and call function in the program.</li><li><strong>(user:String)</strong>&nbsp;specifies the end of function header and accepts a parameter of type String.</li><li>The function consists of a print statement inside the body which executes after you call the function.</li></ul>\n\n\n\n<h2>How to call function in Swift 4?</h2>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func wish(user:String) {  \r\n    print(\"Good Morning \\(user). Have a Good day.\")  \r\n}  \r\nwish(user: \"Ajeet\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Good Morning Ajeet. Have a Good day.\n</code></pre>\n\n\n\n<p>In the above program, wish(user: &#8220;Ajeet&#8221;) calls the function and passes a String type value Ajeet. It returns &#8220;Good Morning! \\(user). Have a Good day&#8221; statement of type String and transfers the program to the function call. After that print statement executes inside the function.</p>\n\n\n\n<h4>Note:&nbsp;<em>Always use a meaningful name of the function which reflects the purpose of the function. Make a function to do only one task. If a function does more than one task, break the function into multiple functions.</em></h4>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Functions are the set of codes which are used to perform a specific task. It Swift 4, a function is used to pass local as well as global parameter values inside the function calls. Functions have a specific name which is used to &#8220;call&#8221; the function to perform its task when needed. Swift 4 functions [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/138"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=138"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/138/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 139,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/138/revisions/139"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=138"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=138"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=138"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 140,
    "date": "2020-10-17T10:36:43",
    "date_gmt": "2020-10-17T10:36:43",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=140"
    },
    "modified": "2020-10-17T10:36:43",
    "modified_gmt": "2020-10-17T10:36:43",
    "slug": "swift-nested-function",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-nested-function/",
    "title": {
      "rendered": "Swift Nested Function"
    },
    "content": {
      "rendered": "\n<p>A function inside the body of another function is called nested function.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func function1() {  \r\n    //statements of outer function  \r\n    func function2() {  \r\n        //statements of inner function  \r\n    }  \r\n}  </code></pre>\n\n\n\n<h3>Parameter Explanation:</h3>\n\n\n\n<p>Here,&nbsp;<strong>function1</strong>&nbsp;is an outer function because there is another function named&nbsp;<strong>function2</strong>&nbsp;(nested function) inside the&nbsp;<strong>function1</strong>.</p>\n\n\n\n<h4><em>Note: The inner function can only be called and used inside the outer function.</em></h4>\n\n\n\n<h2>Nested Function without Return Values</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>func wish1(_ message: String) {      \r\n    func wish2() {  \r\n        print(\"Good Morning! \\(message)\")  \r\n    }  \r\n    wish2 ()  \r\n}  \r\nwish1(\"Ajeet\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Good Morning! Ajeet\n</code></pre>\n\n\n\n<p>In the above program, the nested function wish2() is being called from the outerfunction wish1().</p>\n\n\n\n<p>The statement wish1(&#8220;Ajeet&#8221;) calls the outer function and the statement wish2 () inside the outer function calls the method which gives the output Good Morning Ajeet.</p>\n\n\n\n<p>You cannot call the function wish2 outside of the function wish1.</p>\n\n\n\n<h2>Nested function with parameters and Return value</h2>\n\n\n\n<p>The nested functions can also contain parameters and return values.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func operate(with symbol:String) -> (Int, Int) -> Int {  \r\n    func add(num1:Int, num2:Int) -> Int {  \r\n        return num1 + num2  \r\n    }  \r\n    func subtract(num1:Int, num2:Int) -> Int {  \r\n        return num1 - num2  \r\n    }  \r\n    let operation = (symbol == \"+\") ?  add : subtract  \r\n    return operation  \r\n}  \r\nlet operation = operate(with: \"+\")  \r\nlet result = operation(10, 20)  \r\nprint(result)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>30\n</code></pre>\n\n\n\n<h3>In the above program,</h3>\n\n\n\n<ul><li>The outer function is operate(), with return value of type Function (Int,Int) -&gt; Int.</li><li>The inner (nested) functions are&nbsp;<strong>add()</strong>&nbsp;and&nbsp;<strong>subtract()</strong>.</li></ul>\n\n\n\n<p>The nested function add() and subtract() in a way are being used outside of the enclosing function operate(). This is possible because the outer function returns one of these functions.</p>\n\n\n\n<p>We&#8217;ve used the inner function outside the enclosing function operate() as operation(10, 20). The program internally calls add(10, 20) which provides an output 30.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A function inside the body of another function is called nested function. Syntax: Parameter Explanation: Here,&nbsp;function1&nbsp;is an outer function because there is another function named&nbsp;function2&nbsp;(nested function) inside the&nbsp;function1. Note: The inner function can only be called and used inside the outer function. Nested Function without Return Values Output: In the above program, the nested function [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/140"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=140"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/140/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 141,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/140/revisions/141"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=140"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=140"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=140"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 142,
    "date": "2020-10-17T10:39:09",
    "date_gmt": "2020-10-17T10:39:09",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=142"
    },
    "modified": "2020-10-17T10:39:09",
    "modified_gmt": "2020-10-17T10:39:09",
    "slug": "swift-function-parameter-and-return-value",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-function-parameter-and-return-value/",
    "title": {
      "rendered": "Swift Function Parameter and Return Value"
    },
    "content": {
      "rendered": "\n<p>The Swift 4 user-defined function can have multiple parameters and different return values.</p>\n\n\n\n<h2>a) Functions with no parameter and no return value</h2>\n\n\n\n<p>The Swift 4 functions with no parameter and no return value do not take any input and return value.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func funcname() {  \r\n    //statements  \r\n}  \r\nOR  \r\nfunc funcname() -> () {  \r\n    //statements  \r\n}  \r\nOR  \r\nfunc funcname() -> Void {  \r\n    //statements  \r\n}  </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code> func greeting() {  \r\n    print(\"Good Morning Everyone\")  \r\n}  \r\ngreeting() </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Good Morning Everyone\n</code></pre>\n\n\n\n<h2>b) Functions with no parameters but having return value</h2>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func greeting() -> String {  \r\n    return \"Good Morning Everyone\"  \r\n}  \r\nlet msg = greeting()  \r\nprint(msg)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Good Morning Everyone\n</code></pre>\n\n\n\n<p>In the above program, the return type is String. Now, the statement must return a string from the statement inside the function, otherwise it will give an error.</p>\n\n\n\n<p>The return keyword transfers control of the program from body of the function to the function call. To return value from the function, we have to add value after the return keyword.</p>\n\n\n\n<h2>c) Function with Parameter but having no return value</h2>\n\n\n\n<p>In Swift 4, some functions have parameters but don?t have return value. Parameters are used to take input in the function.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func funcname(parameterName:Type) {  \r\n    //statements  \r\n}  </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func greeting(msg:String) {  \r\n    print(msg)  \r\n}  \r\ngreeting(msg: \"Good Morning Everyone\"}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Good Morning Everyone\n</code></pre>\n\n\n\n<p>In the above program, the function accepts a single parameter of type&nbsp;<strong>String</strong>. The parameter can only be used inside the function. You can call the function by passing it a string value with the parameter name as&nbsp;<strong>greeting(msg: &#8220;Good Morning Evryone&#8221;)</strong>. The msg parameter name is visible only inside the function&nbsp;<strong>greeting()</strong>.</p>\n\n\n\n<p>After that, the statement print(msg) gives the output Good Morning Everyone.</p>\n\n\n\n<h2>d) Functions with Parameter and Return Value</h2>\n\n\n\n<p>When a function takes parameters and also returns value.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func funcname(parameterName:Type) -> ReturnType {  \r\n    //statements  \r\n}  </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func greeting(name:String) -> String {  \r\n    return \"Welcome to JavaTpoint \" + name  \r\n}  \r\nlet msg = greeting(name: \"Ajeet\")  \r\nprint(msg)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to JavaTpoint Ajeet\n</code></pre>\n\n\n\n<p>You can see that in the above program, the function accepts a single parameter of type&nbsp;<strong>String</strong>&nbsp;and also returns value&nbsp;<strong>Welcome to JavaTpoint Ajeet</strong>&nbsp;of type&nbsp;<strong>String</strong>.</p>\n\n\n\n<h2>e) Function with multiple parameters and multiple return values</h2>\n\n\n\n<p>These functions are used to take multiple parameters separated by comma and return multiple return values. In Swift, tuples are used to return multiple values.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func funcname(parameterName:Type, parameterName2:Type ,...) -> (ReturnType, ReturnType...) {  \r\n    //statements  \r\n}  </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func greeting(name:String, coin:Int) -> (String, Int) {  \r\n      \r\n    let msg = \"Hello Mr./Ms.\" + name  \r\n    var userCoin = coin  \r\n    if coin &lt; 0 {  \r\n            userCoin = 0  \r\n    }  \r\n    return (msg, userCoin)  \r\n}  \r\nlet msg = greeting(name: \"Ajeet\", coin: 20)  \r\nprint(msg.0)  \r\nprint(\"You have \\(msg.1) coins left in your wallet.\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello Mr./Ms.Ajeet\nYou have 20 coins left in your wallet.</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Swift 4 user-defined function can have multiple parameters and different return values. a) Functions with no parameter and no return value The Swift 4 functions with no parameter and no return value do not take any input and return value. Syntax: Example: Output: b) Functions with no parameters but having return value Example: Output: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/142"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=142"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/142/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 143,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/142/revisions/143"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=142"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=142"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=142"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 144,
    "date": "2020-10-17T10:40:29",
    "date_gmt": "2020-10-17T10:40:29",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=144"
    },
    "modified": "2020-10-17T10:40:29",
    "modified_gmt": "2020-10-17T10:40:29",
    "slug": "swift-recursion",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-recursion/",
    "title": {
      "rendered": "Swift Recursion"
    },
    "content": {
      "rendered": "\n<p>A function that calls itself repeatedly is known as recursive function and this technique is called recursion. When you create a recursive function, you must create a condition so that the function does not call itself indefinitely.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func recurse() {  \r\n    //statements  \r\n    recurse()  \r\n}  \r\nrecurse()  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/swift/images/swift-recursion.png\" alt=\"Swift Recursion\"/></figure>\n\n\n\n<p>You can see in the above diagram that recursion is executed indefinitely. To get rid of these type of indefinite recursive, we use control statements.</p>\n\n\n\n<h3>Example: Swift 4 Program to print N positive numbers</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func countDownToZero(num: Int) {  \r\n    print(num)  \r\n    if num > 0 {  \r\n        countDownToZero(num: num - 1)  \r\n    }  \r\n}  \r\nprint(\"Countdown:\")  \r\ncountDownToZero(num:6)</code></pre>\n\n\n\n<div class=\"wp-block-group\"><div class=\"wp-block-group__inner-container\">\n<p>  </p>\n</div></div>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Countdown:\n6\n5\n4\n3\n2\n1\n0\n</code></pre>\n\n\n\n<p>You can see in the above program that the statement print(&#8220;Countdown:&#8221;) gives the output and the statement countDownToZero(num:3) calls the function that takes a parameter Integer.</p>\n\n\n\n<p>The statement inside the function countDownToZero() executes and if the condition num &gt; 0 is fulfilled, the function countDownToZero() is called again as countDownToZero(num: num &#8211; 1).</p>\n\n\n\n<p>When the condition is not fulfilled, the function call is not done and the recursion stops.</p>\n\n\n\n<h3>Execution Steps</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Function call</th><th>Printed</th><th>Is num &gt; 0 ?</th></tr><tr><td>1</td><td>countDownToZero(6)</td><td>6</td><td>Yes</td></tr><tr><td>2</td><td>countDownToZero(5)</td><td>5</td><td>Yes</td></tr><tr><td>3</td><td>countDownToZero(4)</td><td>4</td><td>Yes</td></tr><tr><td>4</td><td>countDownToZero(3)</td><td>3</td><td>Yes</td></tr><tr><td>5</td><td>countDownToZero(2)</td><td>2</td><td>Yes</td></tr><tr><td>6</td><td>countDownToZero(1)</td><td>1</td><td>Yes</td></tr><tr><td>7</td><td>countDownToZero(0)</td><td>0</td><td>No (Recursion Ends)</td></tr></tbody></table></figure>\n\n\n\n<h3>Example2: Swift 4 program to find factorial of a number</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func findFactorial(of num: Int) -> Int {  \r\n    if num == 1 {  \r\n        return 1  \r\n    } else {  \r\n        return num * findFactorial(of:num - 1)  \r\n    }  \r\n}  \r\n  \r\nlet x = 6  \r\nlet result = findFactorial(of: x)  \r\nprint(\"The factorial of \\(x) is \\(result)\")   </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The factorial of 6 is 720\n</code></pre>\n\n\n\n<h3>Execution Steps</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Steps</th><th>Argument passed</th><th>Return statement</th><th>Value</th></tr><tr><td>1</td><td>6</td><td>return 6 * findFactorial(of:5)</td><td>6 * findFactorial(of:5)</td></tr><tr><td>2</td><td>5</td><td>return 5 * findFactorial(of:4)</td><td>6 *5 findFactorial(of:4)</td></tr><tr><td>3</td><td>4</td><td>return 4 * findFactorial(of:3)</td><td>6 *5*4 findFactorial(of:3)</td></tr><tr><td>4</td><td>3</td><td>return 3 * findFactorial(of:2)</td><td>6 *5*4*3 findFactorial(of:2)</td></tr><tr><td>5</td><td>2</td><td>return 2 * findFactorial(of:1)</td><td>6*5*4*3*2 findFactorial(of:1)</td></tr><tr><td>6</td><td>1</td><td>return 1</td><td>6*5*4*3*2*1</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A function that calls itself repeatedly is known as recursive function and this technique is called recursion. When you create a recursive function, you must create a condition so that the function does not call itself indefinitely. Example: You can see in the above diagram that recursion is executed indefinitely. To get rid of these [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/144"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=144"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/144/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 145,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/144/revisions/145"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=144"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=144"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=144"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 146,
    "date": "2020-10-17T10:42:04",
    "date_gmt": "2020-10-17T10:42:04",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=146"
    },
    "modified": "2020-10-17T10:42:04",
    "modified_gmt": "2020-10-17T10:42:04",
    "slug": "swift-function-overloading",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-function-overloading/",
    "title": {
      "rendered": "Swift Function Overloading"
    },
    "content": {
      "rendered": "\n<p>When two are more functions have same name but different arguments then they are known as overloaded functions and this process in known as function overloading.</p>\n\n\n\n<h2>Need of Function Overloading</h2>\n\n\n\n<p>Let&#8217;s suppose a condition. You have to develop a shooter game where the player can attack its enemies using a knife, a grenade and a gun. Let&#8217;s see how your solution for the attack functionality might be defining the actions into functions:</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func attack() {  \r\n    //..  \r\n    print(\"Attacking with Knife\")  \r\n}  \r\nfunc attack() {  \r\n    //..  \r\n    print(\"Attacking with Blade\")  \r\n}  \r\nfunc attack() {  \r\n    //..  \r\n    print(\"Attacking with Gun\")  \r\n}  </code></pre>\n\n\n\n<p>You can see that the above program is confusing for the compiler and you will get a&nbsp;<strong>compile time</strong>&nbsp;error while executing the program in Swift as&nbsp;<strong>&#8216;attack()&#8217;</strong>&nbsp;previously declared here. However, another solution might be defining different function names for the particular functionality as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>struct Knife {  \r\n}  \r\nstruct Grenade {  \r\n}  \r\nstruct Gun {  \r\n}  \r\nfunc attackUsingKnife(weapon:Knife) {  \r\n    //..  \r\n    print(\"Attacking with Knife\")  \r\n}  \r\nfunc attackUsingGrenade(weapon:Grenade) {  \r\n    //..  \r\n    print(\"Attacking with Grenade\")  \r\n}  \r\nfunc attackUsingGun(weapon:Gun) {  \r\n    //..  \r\n    print(\"Attacking with Gun\")  \r\n}  </code></pre>\n\n\n\n<p>In the above example, you have used&nbsp;<strong>struct</strong>&nbsp;to create the physical objects like Knife, Grenade, and Gun. There is also a problem with the above example that we have to remember the different function?s name to call that particular action attack. To overcome with this problem, function overloading is used where the name of the different functions are same but passed parameters are different.</p>\n\n\n\n<h2>Same example with Function Overloading</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>struct Knife {  \r\n}  \r\nstruct Grenade {  \r\n}  \r\nstruct Gun {  \r\n}  \r\nfunc attack(with weapon:Knife) {  \r\n    print(\"Attacking with Knife\")  \r\n}  \r\nfunc attack(with weapon:Grenade) {  \r\n    print(\"Attacking with Grenade\")  \r\n}  \r\nfunc attack(with weapon:Gun) {  \r\n    print(\"Attacking with Gun\")  \r\n}  \r\n  \r\nattack(with: Knife())  \r\nattack(with: Grenade())  \r\nattack(with: Gun()) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Attacking with Knife\nAttacking with Grenade\nAttacking with Gun\n</code></pre>\n\n\n\n<h2>Program explanation</h2>\n\n\n\n<p>In the above program, three different functions are created with a same name ?attack?. It takes different parameter types and by this way, we call this function in different conditions.</p>\n\n\n\n<ul><li>The call attack(with: Gun()) triggers the statement inside the function func attack(with weapon:Gun).</li><li>The call attack(with: Grenade()) triggers the statement inside the function func attack(with weapon:Grenade).</li><li>The call attack(with: Knife()) statement inside the function func attack(with weapon:Knife).</li></ul>\n\n\n\n<h2>Function Overloading with Different Parameter types</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>func output(x:String) {  \r\n    print(\"Welcome to \\(x)\")  \r\n}  \r\nfunc output(x:Int) {  \r\n    print(\" \\(x)\")  \r\n}  \r\noutput(x: \"Special\")  \r\noutput(x: 26) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to Special\n 26\n</code></pre>\n\n\n\n<p>In the above program, both functions have same name&nbsp;<strong>output()</strong>&nbsp;and same number of parameter but the different parameter type. The first output() function takes a string as a parameter, and the second output() function takes an integer as a parameter.</p>\n\n\n\n<ul><li>The call to output(x: &#8220;Special&#8221;) triggers the statement inside the function func output(x:String).</li><li>And the call to output(x: 26) triggers the statement inside the function func output(x:Int).</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>When two are more functions have same name but different arguments then they are known as overloaded functions and this process in known as function overloading. Need of Function Overloading Let&#8217;s suppose a condition. You have to develop a shooter game where the player can attack its enemies using a knife, a grenade and a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/146"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=146"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/146/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 147,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/146/revisions/147"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=146"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=146"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=146"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 148,
    "date": "2020-10-17T10:45:25",
    "date_gmt": "2020-10-17T10:45:25",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=148"
    },
    "modified": "2020-10-17T10:45:25",
    "modified_gmt": "2020-10-17T10:45:25",
    "slug": "swift-arrays",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-arrays/",
    "title": {
      "rendered": "Swift Arrays"
    },
    "content": {
      "rendered": "\n<p>Arrays are used to store multiple values of same data type. An Array is just like a container which holds multiple data/ values of a data type in an ordered list. When you fetch the data, you will get the elements in the same order as you defined in the array.</p>\n\n\n\n<p>An array can store values of any data type e.g. Int, String, class etc.</p>\n\n\n\n<h2>How to declare array in Swift 4?</h2>\n\n\n\n<p>Specify the data type inside the square brackets [] to create an empty array. You have to specify the type inside the square bracket [], otherwise Swift will treat it as a normal data type and you can store only a single value in it.</p>\n\n\n\n<h2>Declare an empty array</h2>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>let emptyIntArr:&#91;Int] = &#91;]  \r\nprint(emptyIntArr)  </code></pre>\n\n\n\n<p>Or.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let emptyIntArr:Array&lt;Int> = Array()  \r\nprint(emptyIntArr)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;]\n</code></pre>\n\n\n\n<p>Here, we have declared a constant&nbsp;<strong>emptyIntArr</strong>&nbsp;that can store array of integer and initialized with 0 values.</p>\n\n\n\n<h2>Create an array directly</h2>\n\n\n\n<p>Swift is a type inference language so, we can also create an array directly without specifying the data type but we have to initialise with some values so that compiler can finds out its type.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let someIntArr = &#91;1, 2, 3, 4, 5]  \r\nprint(someIntArr)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;1, 2, 3, 4, 5]\n</code></pre>\n\n\n\n<p>Here, we have declared a constant&nbsp;<strong>someIntArr</strong>&nbsp;that can store array of Integer without specifying the type explicitly. Also, we have initialized array which gives the output as 1, 2, 3, 4, 5.</p>\n\n\n\n<h2>Declare an array with specified number of single repeated value</h2>\n\n\n\n<p>We can repeat a value to specific number of times to make an array in Swift. It is done by using the array initializer with&nbsp;<strong>repeating</strong>&nbsp;and&nbsp;<strong>count</strong>.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<ol><li><strong>let</strong> arrWithRepeatingValues = Array(repeating: &#8220;codemeals&#8221;, count: 5)  </li><li>print(arrWithRepeatingValues)  </li></ol>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-preformatted\">[\"codemeals\", \"codemeals\", \"codemeals\", \"codemeals\", \"codemeals\"]\n</pre>\n\n\n\n<p>Here, we have defined a constant&nbsp;<strong>arrWithRepeatingValues</strong>&nbsp;that stores an array of string&nbsp;<strong>JavaTpoint</strong>&nbsp;and repeats the same value for 5 times as specified in the count.</p>\n\n\n\n<h4>Note: In Swift 4, we cannot create an array of fixed length size as we can do in other programming languages.</h4>\n\n\n\n<h2>How to store values in Array?</h2>\n\n\n\n<p>Let&#8217;s take a constant IntArray to store some strings:</p>\n\n\n\n<ol><li><strong>let</strong>&nbsp;intArray&nbsp;=&nbsp;[10,&nbsp;11,&nbsp;12,&nbsp;13,&nbsp;14,&nbsp;15]&nbsp;&nbsp;</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/tutorial/swift/images/swift-arrays.png\" alt=\"Swift Arrays\"/></figure>\n\n\n\n<p>The index of an array starts with 0 means the first element is stored in index 0, second element in index (1) and so on.</p>\n\n\n\n<h2>How to access array elements in Swift?</h2>\n\n\n\n<p>You have to use index of the value of that array you want to access within square brackets immediately after the name of the array.</p>\n\n\n\n<p>Suppose, we declared an array intArray as above. The first element is intArray[0], second element is intArray[1] and so on. We use them to access the array&#8217;s values.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let intArr = &#91;10, 11, 12, 13, 14]  \r\nprint(intArr&#91;0])  \r\nprint(intArr&#91;1])  \r\nprint(intArr&#91;2])  \r\nprint(intArr&#91;3])  \r\nprint(intArr&#91;4])  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n11\n12\n13\n14\n</code></pre>\n\n\n\n<h2>How to modify elements in Array?</h2>\n\n\n\n<p>We can modify elements of the array by using assignment operator. We have to add the index of the value we want to update within square brackets after the name of the array followed by the assignment operator and new value.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var intArray = &#91;10, 11, 12, 13, 14]  \r\nintArray&#91;0] = 12  \r\nintArray&#91;1] = 42  \r\nintArray&#91;2] = 45  \r\nintArray&#91;3] = 21  \r\nintArray&#91;3] = 36  \r\nprint(intArray)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;12, 42, 45, 36, 14]\n</code></pre>\n\n\n\n<p><strong>You can also modify the whole array completely.</strong></p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var intArr = &#91;1, 2, 3, 4]  \r\nintArr = &#91;10,20,30, 40]  \r\nprint(intArr)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10, 20, 30, 40]\n</code></pre>\n\n\n\n<p><strong>A list of built in Array functions and their properties:</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Index</th><th>Array function</th><th>Explanation</th></tr><tr><td>1.</td><td>isEmpty</td><td>The isEmpty property is used to determine wheather an array is empty or not. It returns true if the array does not contain any value otherwise, returns false.</td></tr><tr><td>2.</td><td>first</td><td>This property is used to access first element of an array.</td></tr><tr><td>3.</td><td>append</td><td>The append function is used to insert/append element at the end of the array.</td></tr><tr><td>4.</td><td>insert</td><td>This function is used to insert/append element at specific index of the array.</td></tr><tr><td>5.</td><td>remove</td><td>This function removes and returns the value specified at the specific position from the array.</td></tr><tr><td>6.</td><td>reversed</td><td>This function returns the elements of array in reverse order.</td></tr><tr><td>7.</td><td>count</td><td>This property returns the total number of elements in an array.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Arrays are used to store multiple values of same data type. An Array is just like a container which holds multiple data/ values of a data type in an ordered list. When you fetch the data, you will get the elements in the same order as you defined in the array. An array can store [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/148"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=148"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/148/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 149,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/148/revisions/149"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=148"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=148"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=148"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 150,
    "date": "2020-10-17T10:47:37",
    "date_gmt": "2020-10-17T10:47:37",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=150"
    },
    "modified": "2020-10-17T10:47:37",
    "modified_gmt": "2020-10-17T10:47:37",
    "slug": "swift-dictionary",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-dictionary/",
    "title": {
      "rendered": "Swift Dictionary"
    },
    "content": {
      "rendered": "\n<p>A Swift dictionary is a simple container that can contain multiple data as key-value pair in an unordered way.</p>\n\n\n\n<p>Swift dictionary is used instead of array when you want to look up value with some identifier in the collection. Suppose, we have to search the capital city of country. In this case, we will create a dictionary with key country and value capital city. Now, you get the capital city from the collection by searching with the key country. Here, we have paired a country to its capital city.</p>\n\n\n\n<h2>Dictionary declaration in Swift</h2>\n\n\n\n<h3>Declaring an empty dictionary</h3>\n\n\n\n<p>To create an empty dictionary, we specify the key:value Data type inside square brackets [].</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let emptyDictionary:&#91;Int:String] = &#91;:]  \r\nprint(emptyDictionary)  </code></pre>\n\n\n\n<p>Or</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let emptyDictionary:Dictionary&lt;Int, String> = &#91;:]  \r\nprint(emptyDictionary)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;:]\n</code></pre>\n\n\n\n<h3>Declaring a dictionary with some values</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let valDictionary = &#91;\"a\":10, \"b\":20, \"c\":30, \"d\":40, \"e\":50, \"f\":60, \"g\":70, \"h\":80, \"i\":90]  \r\nprint(valDictionary)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;\"c\": 30, \"d\": 40, \"g\": 70, \"b\": 20, \"a\": 10, \"f\": 60, \"h\": 80, \"i\": 90, \"e\": 50]\n</code></pre>\n\n\n\n<p>In the above program, we have not declared the type explicitly but we initialize with some default elements. The element is in key:value pair where key is of type String and value is of Int type.</p>\n\n\n\n<h3>Creating Dictionary from two arrays</h3>\n\n\n\n<p>We can also create dictionary from arrays.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let customKeys = &#91;\"India\", \"Pakistan\", \"United Kingdom\"]  \r\nlet customValues = &#91;\"New Delhi\", \"Islamabad\", \"London\"]  \r\nlet newDictionary = Dictionary(uniqueKeysWithValues: zip(customKeys,customValues))  \r\nprint(newDictionary)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;\"India\": \"New Delhi\", \"United Kingdom\": \"London\", \"Pakistan\": \"Islamabad\"]\n</code></pre>\n\n\n\n<h3>Access Dictionary elements in Swift</h3>\n\n\n\n<p>We can access elements of a Swift dictionary by including key of the value we want to access within square brackets immediately after the name of the dictionary.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let valDictionary = &#91;\"a\":10, \"b\":20, \"c\":30, \"d\":40, \"e\":50, \"f\":60, \"g\":70, \"h\":80, \"i\":90]  \r\nprint(valDictionary&#91;\"c\"])  \r\nprint(valDictionary&#91;\"f\"])  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Optional(30)\nOptional(60)\n</code></pre>\n\n\n\n<h3>Access Dictionary elements in Swift using for-in loop</h3>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let valDictionary = &#91;\"a\":10, \"b\":20, \"c\":30, \"d\":40, \"e\":50, \"f\":60, \"g\":70, \"h\":80, \"i\":90]  \r\nfor (key,value) in valDictionary {  \r\n    print(\"key:\\(key) value:\\(value)\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>key:h value:80\nkey:d value:40\nkey:a value:10\nkey:g value:70\nkey:e value:50\nkey:b value:20\nkey:c value:30\nkey:f value:60\nkey:i value:90\n</code></pre>\n\n\n\n<h3>Modify dictionary elements in Swift</h3>\n\n\n\n<p>We can add a new element in a Swift dictionary by using a new key as index and assign to a new value.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var valDictionary = &#91;\"India\":\"New Delhi\", \"China\":\"Beijing\", \"USA\":\"Washington D.C.\"]  \r\nvalDictionary&#91;\"Germany\"] = \"Berlin\"  \r\nprint(valDictionary)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;\"Germany\": \"Berlin\", \"China\": \"Beijing\", \"USA\": \"Washington D.C.\", \"India\": \"New Delhi\"]\n</code></pre>\n\n\n\n<h3>Changing elements in Dictionary</h3>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var valDictionary = &#91;\"India\":\"New Delhi\", \"China\":\"Beijing\", \"USA\":\"Washington D.C.\"]  \r\nvalDictionary&#91;\"India\"] = \"NEW DELHI\"  \r\nprint(valDictionary)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;\"USA\": \"Washington D.C.\", \"China\": \"Beijing\", \"India\": \"NEW DELHI\"]</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A Swift dictionary is a simple container that can contain multiple data as key-value pair in an unordered way. Swift dictionary is used instead of array when you want to look up value with some identifier in the collection. Suppose, we have to search the capital city of country. In this case, we will create [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/150"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=150"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/150/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 151,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/150/revisions/151"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=150"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=150"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=150"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 152,
    "date": "2020-10-17T10:51:30",
    "date_gmt": "2020-10-17T10:51:30",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=152"
    },
    "modified": "2020-10-17T10:51:30",
    "modified_gmt": "2020-10-17T10:51:30",
    "slug": "what-is-swift-sets",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/what-is-swift-sets/",
    "title": {
      "rendered": "What is Swift Sets?"
    },
    "content": {
      "rendered": "\n<p>Swift set is a simple container which can hold multiple values of a data type in an unordered list. It can&#8217;t store same value twice. Here, the unordered list means you won&#8217;t get the items in the same manner in which you have enter in the set.</p>\n\n\n\n<h2>Swift Sets vs. Swift Arrays</h2>\n\n\n\n<p>The main difference between the Swift set and Swift array is that the Swift set can&#8217;t store the same value twice unlike the Swift array. Swift sets ensure you that an item appears only once and order of items is not important.</p>\n\n\n\n<p>Values stored in a Swift set must be&nbsp;<strong>hashable</strong>. Hashable means, it must provide a hashValue property. HashValue is used to access the elements of the sets because sets are unordered.</p>\n\n\n\n<p>All Swift basic data types (such as String, Int, Double, and Bool) are hashable by default, and can be used as set value types. We can also create our Hashable Type in Swift that can be stored in a set.</p>\n\n\n\n<h2>How to declare a set in Swift?</h2>\n\n\n\n<p>We can declare a set that can store some values.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let someIntSet:Set = &#91;1, 2, 3, 4, 5, 6, 7, 8, 9]  \r\nprint(someIntSet) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;2, 4, 9, 5, 6, 7, 3, 1, 8]\n</code></pre>\n\n\n\n<h3>Declare a set containing duplicate values</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let someIntSet:Set = &#91;1, 2, 3, 4, 8, 8, 8, 5, 5]  \r\nprint(someIntSet)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;2, 4, 5, 3, 1, 8]\n</code></pre>\n\n\n\n<p>In the above program, we have entered the repeated value of 5 and 8. But in output, we can see that the repeated values have been removed.</p>\n\n\n\n<h3>Access set elements in Swift</h3>\n\n\n\n<p>We cannot access elements of set in the same way we access elements of array in Swift because set elements are unordered.</p>\n\n\n\n<p>So, we have to access set elements using its methods and properties or using for-in loops.</p>\n\n\n\n<h3>Access all set elements in Swift</h3>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var someIntSet:Set = &#91;1, 2, 3, 4, 5, 6]  \r\nfor val in someIntSet {  \r\n    print(val)  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n6\n2\n3\n1\n4\n</code></pre>\n\n\n\n<h2>Using remove() method to access selective set elements</h2>\n\n\n\n<p>We can access the selective elements from the set by using remove() method.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var someIntSet:Set = &#91;1, 2, 3, 4, 5, 6]  \r\nlet someVal = someIntSet.remove(5)  \r\nprint(someVal)  \r\nprint(someIntSet)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Optional(5)\n&#91;6, 2, 3, 1, 4]\n</code></pre>\n\n\n\n<p>In the above program, you can see that the remove() method returns an optional string. It is recommended to do optional handling as follows.</p>\n\n\n\n<h3>Optional handling for using remove() method</h3>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var someIntSet:Set = &#91;1, 2, 3, 4, 5, 6]  \r\nif let someVal = someIntSet.remove(5) {  \r\n    print(someVal)  \r\n    print(someIntSet)  \r\n} else {  \r\n    print(\"cannot find element to remove\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n&#91;6, 2, 3, 1, 4]\n</code></pre>\n\n\n\n<h3>Add new elements in a set in Swift</h3>\n\n\n\n<p>The insert() method is used to add new elements in set in Swift.</p>\n\n\n\n<p><strong>To add single element</strong></p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var someIntSet:Set = &#91;1, 2, 3, 4, 5, 6]  \r\nsomeIntSet.insert(7)  \r\nprint(someIntSet) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;2, 4, 5, 6, 7, 3, 1]\n</code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>In the above example, we have added a new element 7 in a predefined set.ADVERTISEMENThttps://delivery.adrecover.com/recover.html#packetId=00000001-2aee504a-9aa6-4d8b-b3b5-3799355fbda8&amp;url=https%3A%2F%2Fwww.javatpoint.com%2Fswift-sets&amp;siteId=37784&amp;pageGroup=POST_ADRECOVER_0&amp;removeStaticAds=false&amp;isByod=false&amp;height=280&amp;width=336&amp;networkProps=&#91;{%22isInIframe%22:true,%22name%22:%22headerBidding%22,%22floorPrice%22:%220.16%22,%22isEnabled%22:true,%22criteo%22:{%22name%22:%22criteo%22,%22zoneId%22:%221416527%22},%22oftmedia%22:{%22name%22:%22oftmedia%22,%22placementId%22:%2214595953%22},%22appnexus%22:{%22name%22:%22appnexus%22,%22placementId%22:%2220042668%22},%22openx%22:{%22name%22:%22openx%22,%22unit%22:%22541209178%22},%22ix%22:{%22name%22:%22ix%22,%22siteId%22:%22371857%22},%22rubicon%22:{%22name%22:%22rubicon%22,%22accountId%22:%2220616%22,%22zoneId%22:%221411718%22,%22siteId%22:%22282370%22},%22pubmatic%22:{%22name%22:%22pubmatic%22,%22publisherId%22:%22158261%22,%22adSlot%22:%222240714%22},%22adyoulike%22:{%22name%22:%22adyoulike%22,%22placement%22:%2285f4264b456063906871fffb60b6d454%22},%22sovrn%22:{%22name%22:%22sovrn%22,%22tagid%22:%22656914%22},%22rhythmone%22:{%22name%22:%22rhythmone%22,%22placementId%22:%22211745%22}},{%22isInIframe%22:true,%22adSlot%22:%225501391891%22,%22name%22:%22vCommission%22,%22pubId%22:%22ca-pub-3191894791526522%22,%22isEnabled%22:true}]&amp;referrer=https%3A%2F%2Fwww.javatpoint.com%2Fswift-dictionary&amp;pubEmailMd5=e224c2b5124a33f1f8d127266731a85e</code></pre>\n\n\n\n<p><strong>To add multiple elements</strong></p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var someIntSet:Set = &#91;1, 2, 3, 4, 5, 6]  \r\nsomeIntSet.insert(7)  \r\nsomeIntSet.insert(8)  \r\nsomeIntSet.insert(9)  \r\nsomeIntSet.insert(10)  \r\nprint(someIntSet)</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10, 2, 4, 9, 5, 6, 7, 3, 1, 8]\n</code></pre>\n\n\n\n<h2>Set operations in Swift</h2>\n\n\n\n<p>Another advantage of using set is that it facilitates you to perform set operations, i.e. union, intersection etc. It is same as set operation in Mathematics.</p>\n\n\n\n<h3>Union Set Operation</h3>\n\n\n\n<p>The union of two sets&nbsp;<strong>a</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;is the set of all elements combined in&nbsp;<strong>set a</strong>&nbsp;and&nbsp;<strong>set b</strong>. It is accessed by using&nbsp;<strong>a.union(b)</strong>.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let a: Set = &#91;1, 3, 5, 7, 9]  \r\nlet b: Set = &#91;0, 2, 4, 6, 8]  \r\nprint(a.union(b)) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;8, 2, 9, 4, 5, 7, 6, 3, 1, 0]\n</code></pre>\n\n\n\n<h3>Intersection Set Operation</h3>\n\n\n\n<p>The intersection of two sets&nbsp;<strong>a</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;is the set of elements which are common in both sets. It is accessed by using&nbsp;<strong>a.intercection(b)</strong>.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let a: Set = &#91;1, 3, 5, 7, 9]  \r\nlet b: Set = &#91;0, 3, 4, 7, 8]  \r\nprint(a.intersection(b))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;7, 3]\n</code></pre>\n\n\n\n<h3>Subtracting Set Operation</h3>\n\n\n\n<p>The subtraction of two sets&nbsp;<strong>a</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;is the set which contains all elements of a but excludes the elements that also belongs to b. It is accessed by using&nbsp;<strong>a.subtracting(b)</strong>.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let a: Set = &#91;1, 3, 5, 7, 9]  \r\nlet b: Set = &#91;0, 3, 4, 7, 8]  \r\nprint(a.subtracting(b))  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;5, 9, 1]\n</code></pre>\n\n\n\n<h3>Symmetric Difference Set Operation</h3>\n\n\n\n<p>The symmetric difference of two sets&nbsp;<strong>a</strong>&nbsp;and&nbsp;<strong>b</strong>&nbsp;is the set which contains all elements which are in either of the sets but not in both of them. It is accessed by using&nbsp;<strong>a.symmetricDifference(b)</strong>.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let a: Set = &#91;1, 3, 5, 7, 9]  \r\nlet b: Set = &#91;1, 3, 7, 6, 8]  \r\nprint(a.symmetricDifference(b))</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;5, 6, 9, 8]\n</code></pre>\n\n\n\n<p><strong>Some Built in functions and properties</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Index</th><td>Built in Set functions</td><td>Explanation</td></tr><tr><td>1.</td><td>isEmpty</td><td>The isEmpty property is used to determine if a set is empty or not. It returns true if a set is empty otherwise, returns false.</td></tr><tr><td>2.</td><td>first</td><td>The first property is used to access first element of a set.</td></tr><tr><td>3.</td><td>insert</td><td>The insert function is used to insert/append element in the set.</td></tr><tr><td>4.</td><td>reversed</td><td>This function returns the elements of a set in reverse order.</td></tr><tr><td>5.</td><td>count</td><td>This property returns the total number of elements in a set.</td></tr><tr><td>6.</td><td>removeFirst</td><td>This function removes and returns the first value from the set</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift set is a simple container which can hold multiple values of a data type in an unordered list. It can&#8217;t store same value twice. Here, the unordered list means you won&#8217;t get the items in the same manner in which you have enter in the set. Swift Sets vs. Swift Arrays The main difference [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/152"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=152"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/152/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 153,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/152/revisions/153"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=152"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=152"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=152"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 154,
    "date": "2020-10-17T10:54:23",
    "date_gmt": "2020-10-17T10:54:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=154"
    },
    "modified": "2020-10-17T10:54:23",
    "modified_gmt": "2020-10-17T10:54:23",
    "slug": "swift-closures",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-closures/",
    "title": {
      "rendered": "Swift Closures"
    },
    "content": {
      "rendered": "\n<p>Swift Closures are other types of Swift functions which can be defined without using keyword func and a function name.</p>\n\n\n\n<p>Like Swift functions, swift closures also can accept parameters and return values. It also contains a set of statements which executes after you call it and can be assigned to a variable/constant as functions.</p>\n\n\n\n<h2>Reason behind using Swift Closures</h2>\n\n\n\n<p>There are mainly two reasons why swift closures are used:</p>\n\n\n\n<h3>Completion blocks</h3>\n\n\n\n<p>Closures are used to provide notification when some task has finished its execution.</p>\n\n\n\n<h3>Higher order functions</h3>\n\n\n\n<p>Closures can be passed as input parameters for higher order functions. A higher order function is just a type of function that accepts function as an input and returns value of type function as output. In this case, closures are used because closure omits the func keyword and function name that makes the code more readable and short.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>{ (parameters) -> return type in  \r\n   statements  \r\n}  </code></pre>\n\n\n\n<p>Here,&nbsp;<strong>in</strong>&nbsp;is a keyword which is used to separate the return Type and statements inside the closure. A closure can accept parameter and return value.</p>\n\n\n\n<p>Let&#8217;s create our own closure:</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<p><strong>Simple Closure</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>let simpleClosure = {     \r\n}  \r\nsimpleClosure()   </code></pre>\n\n\n\n<p>Here, we have declared a simple closure { } that takes no parameters, contains no statements and does not return a value. This closure is assigned to the constant simpleClosure.</p>\n\n\n\n<h2>Closure that contains statements</h2>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let simpleClosure = {  \r\n    print(\"Hello codemeals\")  \r\n}  \r\nsimpleClosure()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello codemeals\n</code></pre>\n\n\n\n<p>In the above program, we have defined a closure named simpleClosure inferred to be of () -&gt; () because it doesn&#8217;t accept any parameter and does not return any value.</p>\n\n\n\n<h2>Closure that contains parameter</h2>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let simpleClosure:(String) -> () = { name in  \r\n    print(name)  \r\n}  \r\nsimpleClosure(\"Hello codemeals\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello codemeals</code></pre>\n\n\n\n<p>In the above program, the type closure (String) -&gt; () takes an input of type string but doesn&#8217;t return value. To use the value passed inside the statements of the closure, we have placed a parameter name name followed by in keyword.</p>\n\n\n\n<p>Here, the closure accepts a String, we need to pass the string while we call the closure as simpleClosure(&#8220;Hello JavaTpoint&#8221;).</p>\n\n\n\n<h2>Closure that returns values</h2>\n\n\n\n<p>Closures can return values like functions. To return a value from closure, we must explicitly add the type to return inside braces () followed by -&gt;.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let simpleClosure:(String) -> (String) = { name in      \r\n    let greeting = \"Hello codemeals\" + \"A platform for all technologies\"  \r\n    return greeting  \r\n}  \r\nlet result = simpleClosure(\"Hello codemeals\")  \r\nprint(result)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello codemeals A platform for all technologies\n</code></pre>\n\n\n\n<p>You can see that in the above program we have defined type as&nbsp;<strong>simpleClosure: (String) -&gt; (String)</strong>&nbsp;because Swift cannot automatically infer the closure that returns a value. The type (String) -&gt; (String) specifies that the closure takes an input of type String and also returns a value of type String.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift Closures are other types of Swift functions which can be defined without using keyword func and a function name. Like Swift functions, swift closures also can accept parameters and return values. It also contains a set of statements which executes after you call it and can be assigned to a variable/constant as functions. Reason [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/154"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=154"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/154/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 155,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/154/revisions/155"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=154"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=154"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=154"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 156,
    "date": "2020-10-17T10:56:15",
    "date_gmt": "2020-10-17T10:56:15",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=156"
    },
    "modified": "2020-10-17T10:56:15",
    "modified_gmt": "2020-10-17T10:56:15",
    "slug": "swift-typealias",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-typealias/",
    "title": {
      "rendered": "Swift TypeAlias"
    },
    "content": {
      "rendered": "\n<p>Swift Typealias is used to provide a new name for an existing data type in the program. Once you create a typealias, you can use the aliased name instead of the exsisting name throughout the program.</p>\n\n\n\n<p>Typealias doesn&#8217;t create a new data type, it simply provides a new name to the existing data type.</p>\n\n\n\n<h2>Purpose of using Typealias</h2>\n\n\n\n<p>The main purpose of using typealias is make our code clearer and human readable.</p>\n\n\n\n<h2>Create a typealias</h2>\n\n\n\n<p>Typealias is declared using the keyword typealias:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>typealias name = existing type   </code></pre>\n\n\n\n<p>Swift facilitates you to use typealias for most of the types:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Built-in types (for.eg: String, Int)\r\nUser-defined types (for.e.g: class, struct, enum)\r\nComplex types (for e.g: closures)</code></pre>\n\n\n\n<h2>Typealias for Built-in Types</h2>\n\n\n\n<p>Typealias can be used for all built-in data types i.e. String, Int, Float etc.</p>\n\n\n\n<h3>For example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>typealias EmployeeName = String </code></pre>\n\n\n\n<p> </p>\n\n\n\n<p>Here, we have declared EmployeeName as typealias of String. So, we can use it later instead of String type.</p>\n\n\n\n<h3>For example:</h3>\n\n\n\n<p>Without using Typealias, the declaration would be:</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>let name:String = \"Alex\"  </code></pre>\n\n\n\n<p>By creating Typealias EmployeeName, we can write the same above declaration as:.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let name:EmployeeName = \"Alex\" </code></pre>\n\n\n\n<p>You can see that both examples create the same constant type string but the later one is more understandable for human.</p>\n\n\n\n<h2>Typealias for user defined types</h2>\n\n\n\n<p>In Swift, you can create your own data type. Suppose you have to create a data type Employee, so you can create it using a class as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Employee {  \r\n  \r\n}  </code></pre>\n\n\n\n<p>Now, you can create a group of employees in an array as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var employees:Array&lt;Employee> = &#91;]  </code></pre>\n\n\n\n<p>Here, you can create your own type for array&nbsp;using Typealias to make the code more readable:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>typealias Employees = Array&lt;Employee>  </code></pre>\n\n\n\n<p>Now, the declaration would look like:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var employees:Employees = &#91;]  </code></pre>\n\n\n\n<p>It is easy to understand in your code.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift Typealias is used to provide a new name for an existing data type in the program. Once you create a typealias, you can use the aliased name instead of the exsisting name throughout the program. Typealias doesn&#8217;t create a new data type, it simply provides a new name to the existing data type. Purpose [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/156"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=156"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/156/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 157,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/156/revisions/157"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=156"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=156"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=156"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 158,
    "date": "2020-10-17T10:57:12",
    "date_gmt": "2020-10-17T10:57:12",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=158"
    },
    "modified": "2020-10-17T10:57:12",
    "modified_gmt": "2020-10-17T10:57:12",
    "slug": "swift-enumerations-swift-enum",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-enumerations-swift-enum/",
    "title": {
      "rendered": "Swift Enumerations / Swift Enum"
    },
    "content": {
      "rendered": "\n<p>Swift Enumeration is also known as Swift Enum. It is a data type which consists of set of related values. It is declared in a class and its values are accessed through the instance members of that class.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>enum enum_name  \r\n{  \r\n// values are described here  \r\n}  </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<p>Let&#8217;s take an example to understand it well. Here, we shall an enum named &#8220;Connection Status&#8221; and see the possible condition using switch statement.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>enum ConnectionStatus  \r\n{  \r\n    case Unknown  \r\n    case Disconnected  \r\n    case Connecting  \r\n    case Connected  \r\n      \r\n}  \r\nvar connectionStatus = ConnectionStatus.Connecting  \r\nconnectionStatus = .Connected  \r\n  \r\nswitch connectionStatus {  \r\n  \r\n    case .Disconnected:  \r\n    print(\"Disconnected\")  \r\n      \r\n    case .Connecting:  \r\n    print(\"Connecting\")  \r\n      \r\n    case .Connected:  \r\n    print(\"Connected\")  \r\n      \r\n    default:  \r\n    print(\"Unknown Status\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Connected \n</code></pre>\n\n\n\n<p>In the above example, there are 4 cases: Unknown, Disconnected, Connecting, and Connected. The output is showing as &#8220;Connected&#8221; as it is set as connected. If you set it &#8220;Disconnected&#8221;, it will show &#8220;Disconnected&#8221; as output.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>enum ConnectionStatus  \r\n{  \r\n    case Unknown  \r\n    case Disconnected  \r\n    case Connecting  \r\n    case Connected  \r\n      \r\n}  \r\nvar connectionStatus = ConnectionStatus.Connecting  \r\nconnectionStatus = .Disconnected  \r\n  \r\nswitch connectionStatus {  \r\n  \r\n    case .Disconnected:  \r\n    print(\"Disconnected\")  \r\n      \r\n    case .Connecting:  \r\n    print(\"Connecting\")  \r\n      \r\n    case .Connected:  \r\n    print(\"Connected\")  \r\n      \r\n    default:  \r\n    print(\"Unknown Status\")  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Disconnected\n</code></pre>\n\n\n\n<p>This is how we use enumeration in Swift.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift Enumeration is also known as Swift Enum. It is a data type which consists of set of related values. It is declared in a class and its values are accessed through the instance members of that class. Syntax: Example: Let&#8217;s take an example to understand it well. Here, we shall an enum named &#8220;Connection [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/158"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=158"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/158/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 159,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/158/revisions/159"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=158"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=158"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=158"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 160,
    "date": "2020-10-17T10:58:47",
    "date_gmt": "2020-10-17T10:58:47",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=160"
    },
    "modified": "2020-10-17T10:58:47",
    "modified_gmt": "2020-10-17T10:58:47",
    "slug": "swift-structures",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-structures/",
    "title": {
      "rendered": "Swift Structures"
    },
    "content": {
      "rendered": "\n<p>Swift structures are the flexible basic building blocks of the programs. The &#8220;struct&#8221; keyword is used to define structures. By using structures, you can define constructs methods and properties.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>Struct StructureName  \r\n{  \r\n// Definition of structure   \r\n} </code></pre>\n\n\n\n<p>You need to make instances of that structure to make use of structure properties. Dot operator is used to access properties of structures.</p>\n\n\n\n<h2>Swift Structures vs C Structure/ Objective-C Structure</h2>\n\n\n\n<p>Unlike the C structures and Object-C structures, the Swift structures don&#8217;t require implementation files and interface. Also, Swift structures allow us to create a single file and to extend its interface automatically to other blocks.</p>\n\n\n\n<h4>Note: In Structure, the variable values are copied and passed in subsequent codes by returning a copy of the old values so we cannot alter the values.</h4>\n\n\n\n<h2>Definition of a structure</h2>\n\n\n\n<p>Suppose, you have to access your bank account having some amount in rupees and paisa here, Here Amount is structure&#8217;s name which is used to initialize a structure with rupees and paisa as datatype &#8216;Int&#8217;</p>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>struct  Amount  \r\n{  \r\n    var rupees: Int  \r\n    var paisa: Int   \r\n}</code></pre>\n\n\n\n<h2>Access the structure and its properties</h2>\n\n\n\n<p>Let&#8217;s see the implementation of the structures in Swift. Here, we shall assign some values in structure and then access them.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct  Amount  \r\n{  \r\n    var rupees: Int  \r\n    var paisa: Int  \r\n}  \r\nvar x = Amount (rupees: 10000, paisa: 50)  \r\nprint(x)  \r\nprint(\"Amount in rupees is \\(x.rupees)\")  \r\nprint(\"Amount in paisa is \\(x.paisa)\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Amount(rupees: 10000, paisa: 50)\nAmount in rupees is 10000\nAmount in paisa is 50 \n</code></pre>\n\n\n\n<p>Here, structure&#8217;s name is &#8220;Amount&#8221; and there are two variables used &#8220;rupees&#8221; and &#8220;paisa&#8221; which are later accessed by using print statement and dot operator.</p>\n\n\n\n<h2>Swift Structure Usage</h2>\n\n\n\n<p>Swift4 language facilitates you to define structures as custom data types for building the function blocks. The instances of structure are passed by its value to the defined blocks for further changes.</p>\n\n\n\n<ul><li>Structures are used to encapsulate simple data values.</li><li>Structures are used to copy the encapsulated data and its associated properties by &#8216;values&#8217; rather than by &#8216;references&#8217;.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift structures are the flexible basic building blocks of the programs. The &#8220;struct&#8221; keyword is used to define structures. By using structures, you can define constructs methods and properties. Syntax:   You need to make instances of that structure to make use of structure properties. Dot operator is used to access properties of structures. Swift [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/160"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=160"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/160/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 161,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/160/revisions/161"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=160"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=160"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=160"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 162,
    "date": "2020-10-17T10:59:51",
    "date_gmt": "2020-10-17T10:59:51",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=162"
    },
    "modified": "2020-10-17T10:59:51",
    "modified_gmt": "2020-10-17T10:59:51",
    "slug": "swift-classes",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-classes/",
    "title": {
      "rendered": "Swift Classes"
    },
    "content": {
      "rendered": "\n<p>Classes in Swift are similar to Structures in Swift. These are building blocks of flexible constructs. You can define class properties and methods like constants, variables and functions are defined. In Swift 4, you don&#8217;t need to create interfaces or implementation files while declaring classes. Swift 4 facilitates you to create classes as a single file and the external interfaces will be created by default when the class is initialized.</p>\n\n\n\n<h2>Benefits of Swift Classes</h2>\n\n\n\n<ul><li>By using classes, you can apply inheritance to acquire properties of one class to another class.</li><li>Type casting enables the user to check class type at run time.</li><li>Deinitializers take care of releasing memory resources.</li><li>Reference counting allows the class instance to have more than one reference.</li></ul>\n\n\n\n<h2>Characteristics of Classes and Structures in Swift</h2>\n\n\n\n<ul><li>In classes, properties are defined to store values.</li><li>Subscripts are defined for providing access to values.</li><li>Methods are initialized to improve functionality.</li><li>Initial states are defined by initializers.</li><li>Functionalities are expanded beyond default values.</li></ul>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Class classname   \r\n{  \r\n// Definition goes here..  \r\n}  </code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In the following program there are two classes Salary and EmpSalary.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Salary{  \r\n   var salary: Int  \r\n   init(salary: Int) {  \r\n      self.salary = salary  \r\n   }  \r\n}  \r\nclass EmpSalary {  \r\n   var salary = 10000  \r\n}  \r\nlet Income = EmpSalary()  \r\nprint(\"Employee salary is \\(Income.salary)\") </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>After running the above program, you will see the following output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Employee salary is 10000\n</code></pre>\n\n\n\n<h4>Note: In the above example, class properties are accessed by the &#8216;.&#8217; syntax. Property name is separated by a &#8216;.&#8217; after the instance name.</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>print(\"Employee salary is \\(Income.salary)\")  </code></pre>\n\n\n\n<h2>Class Identity Operators</h2>\n\n\n\n<p>Swift4 classes refer multiple constants and variables pointing to a single instance. To know about the constants and variables pointing to a particular class, instance identity operators are used. Class instances are always passed by reference. In Classes, NSString, NSArray, and NSDictionary instances are always assigned and passed around as a reference to an existing instance, rather than as a copy.</p>\n\n\n\n<h3>Identical to Operators</h3>\n\n\n\n<ul><li>Operator used is (===).</li><li>Returns true when two constants or variables pointing to a same instance.</li></ul>\n\n\n\n<h3>Not Identical to Operators</h3>\n\n\n\n<ul><li>Operator used is (!==).</li><li>Returns true when two constants or variables pointing to a different instance.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Classes in Swift are similar to Structures in Swift. These are building blocks of flexible constructs. You can define class properties and methods like constants, variables and functions are defined. In Swift 4, you don&#8217;t need to create interfaces or implementation files while declaring classes. Swift 4 facilitates you to create classes as a single [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/162"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=162"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/162/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 163,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/162/revisions/163"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=162"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=162"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=162"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 164,
    "date": "2020-10-17T11:01:59",
    "date_gmt": "2020-10-17T11:01:59",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=164"
    },
    "modified": "2020-10-17T11:01:59",
    "modified_gmt": "2020-10-17T11:01:59",
    "slug": "swift4-properties",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift4-properties/",
    "title": {
      "rendered": "Swift4 Properties"
    },
    "content": {
      "rendered": "\n<p>Swift4 properties are used to associate values for class, enumeration, or structure.</p>\n\n\n\n<p><strong>Swift4 properties can be classified in 2 types:</strong></p>\n\n\n\n<ul><li>Stored Properties</li><li>Computed Properties</li></ul>\n\n\n\n<h3>Difference between Stored Properties and Computed Properties</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Stored Property</th><th>Computed Property</th></tr><tr><td>The stored property stores constant and variable values as instance.</td><td>The computed property is used to calculate a value rather than storing the value.</td></tr><tr><td>The stored property is provided by classes and structures.</td><td>The computed property is provided by classes, enumerations and structures</td></tr></tbody></table></figure>\n\n\n\n<p>Both Stored and Computed properties are associated with instances type. When a property is associated with its type values then it is defined as &#8216;Type Properties&#8217;.</p>\n\n\n\n<p>Stored and computed properties are usually associated with instances of a particular type. Properties can also be associated with the type itself. Such properties are known as type properties.</p>\n\n\n\n<p>Property observers are used to observe the value of the stored properties and also observe the property of inherited subclass derived from superclass.</p>\n\n\n\n<h2>Stored Property</h2>\n\n\n\n<p>In Swift4, stored properties of constants are defined by the &#8216;let&#8217; keyword and stored properties of variables are defined by the &#8216;var&#8217; keyword. Stored property provides &#8216;default value&#8217; during definition and it can be initialized and modified by the user during initialization.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct Number {  \r\n   var digits: Int  \r\n   let pi = 3.1415  \r\n}  \r\nvar n = Number(digits: 123456789)  \r\nn.digits = 910  \r\nprint(\"\\(n.digits)\")  \r\nprint(\"\\(n.pi)\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>910\n3.1415\n</code></pre>\n\n\n\n<p>Here, the variable pi is initialized as a stored property value with the instance pi = 3.1415. So, whenever the instance is referred, it will hold the value 3.1415.</p>\n\n\n\n<h2>Lazy Stored Property</h2>\n\n\n\n<p>Lazy stored property is a flexible property of Swift4. It doesn&#8217;t calculate the initial values when the variable is initialized for the first time. The &#8216;lazy&#8217; modifier is used before the variable declaration to act as a lazy stored property.</p>\n\n\n\n<h3>Lazy Properties are used:</h3>\n\n\n\n<ul><li>To delay object creation.</li><li>When the property is dependent on other parts of a class, that are not known yet.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class sample {  \r\n   lazy var no = number()    // `var` declaration is required.  \r\n}  \r\nclass number {  \r\n   var name = \"JavaTpoint\"  \r\n}  \r\nvar firstsample = sample()  \r\nprint(firstsample.no.name)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>codemeals</code></pre>\n\n\n\n<h2>Instance Variables</h2>\n\n\n\n<p>In Objective-C, stored properties have instance variables for backup and store the value declared in stored property.</p>\n\n\n\n<p>Swift 4 incorporates both these concepts into a single &#8216;stored property&#8217; declaration. Instead of having a corresponding instance variable and back up value, &#8216;stored property&#8217; contains all integrated information defined in a single location about the variables property by variable name, data type and memory management functionalities.</p>\n\n\n\n<h2>Computed Properties</h2>\n\n\n\n<p>Computed properties provide a getter and an optional setter to retrieve and set other properties and values indirectly rather than storing it.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class sample {  \r\n   var no1 = 0.0, no2 = 0.0  \r\n   var length = 200.0, breadth = 100.0  \r\n   var middle: (Double, Double) {  \r\n      get {  \r\n         return (length / 2, breadth / 2)  \r\n      }  \r\n      set(axis){  \r\n         no1 = axis.0 - (length / 2)  \r\n         no2 = axis.1 - (breadth / 2)  \r\n      }  \r\n   }  \r\n}  \r\nvar result = sample()  \r\nprint(result.middle)  \r\nresult.middle = (0.0, 10.0)  \r\nprint(result.no1)  \r\nprint(result.no2)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>(100.0, 50.0)\n-100.0\n-40.0\n</code></pre>\n\n\n\n<h2>Computed properties as Property Observer</h2>\n\n\n\n<p>Swift4 uses property observers to observe and respond to property values. Property observers are called each and every time when property values are set. Except lazy stored properties, we can add property observers to &#8216;inherited&#8217; property by method &#8216;overriding&#8217;.</p>\n\n\n\n<p><strong>You can define Property Observers either:</strong></p>\n\n\n\n<ul><li>Before storing the value &#8211; willset</li><li>After storing the new value &#8211; didset</li><li>When a property is set in an initializer willset and didset observers cannot be called.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Samplepgm {  \r\n   var counter: Int = 0 {  \r\n      willSet(newTotal){  \r\n         print(\"Total Counter is: \\(newTotal)\")   \r\n      }  \r\n      didSet {  \r\n         if counter > oldValue {  \r\n            print(\"Newly Added Counter \\(counter - oldValue)\")  \r\n         }  \r\n      }  \r\n   }  \r\n}  \r\nlet NewCounter = Samplepgm()  \r\nNewCounter.counter = 100  \r\nNewCounter.counter = 500  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Total Counter is: 100\r\nNewly Added Counter 100\r\nTotal Counter is: 500\r\nNewly Added Counter 400</code></pre>\n\n\n\n<h2>Local Variable vs Global Variables</h2>\n\n\n\n<p>Local variables and global variables both are used for computing and observing the properties.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Local Variables</th><th>Global Variables</th></tr><tr><td>Local Variables are defined within a function, method, or closure context.</td><td>Global Variables are defined outside function, method, closure, or type context.</td></tr><tr><td>Local Variables are used to store and retrieve values.</td><td>Global variables are used to store and retrieve values.</td></tr><tr><td>Stored properties are used to get and set the values.</td><td>Stored properties are used to get and set the values.</td></tr><tr><td>In local variables, computed properties are used.</td><td>In global variables, computed properties are also used.</td></tr></tbody></table></figure>\n\n\n\n<h2>Swift4 Type Properties</h2>\n\n\n\n<p>Swift4 properties are defined in the type definition section in curly braces {} and scope of the variables are also defined previously. To define type property of value types, ?static? keyword is used and for class types, ?class? keyword is used.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct Struct_Name {  \r\n   static var storedTypeProperty = \" \"  \r\n   static var computedTypeProperty: Int {  \r\n      // return an Int value here  \r\n   }  \r\n}  \r\nenum Enum_Name {  \r\n   static var storedTypeProperty = \" \"  \r\n   static var computedTypeProperty: Int {  \r\n      // return an Int value here  \r\n   }  \r\n}  \r\nclass Class_Name {  \r\n   class var computedTypeProperty: Int {  \r\n      // return an Int value here  \r\n   }  \r\n}  </code></pre>\n\n\n\n<h2>How to set and query type properties?</h2>\n\n\n\n<p>Swift4 type properties are also set and queried same as instance properties. It uses &#8216;.&#8217; syntax just on the type alone instead of pointing to the instance.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct StudMarks {  \r\n   static let markCount = 85  \r\n   static var totalCount = 0  \r\n   var InternalMarks: Int = 0 {  \r\n      didSet {  \r\n         if InternalMarks > StudMarks.markCount {  \r\n            InternalMarks = StudMarks.markCount  \r\n         }  \r\n         if InternalMarks > StudMarks.totalCount {  \r\n            StudMarks.totalCount = InternalMarks  \r\n         }  \r\n      }  \r\n   }  \r\n}  \r\nvar stud1Mark1 = StudMarks()  \r\nvar stud1Mark2 = StudMarks()  \r\nstud1Mark1.InternalMarks = 80  \r\nprint(stud1Mark1.InternalMarks)  \r\nstud1Mark2.InternalMarks = 90  \r\nprint(stud1Mark2.InternalMarks) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code> 80\n85</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift4 properties are used to associate values for class, enumeration, or structure. Swift4 properties can be classified in 2 types: Stored Properties Computed Properties Difference between Stored Properties and Computed Properties Stored Property Computed Property The stored property stores constant and variable values as instance. The computed property is used to calculate a value rather [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/164"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=164"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/164/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 165,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/164/revisions/165"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=164"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=164"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=164"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 166,
    "date": "2020-10-17T11:03:17",
    "date_gmt": "2020-10-17T11:03:17",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=166"
    },
    "modified": "2020-10-17T11:03:17",
    "modified_gmt": "2020-10-17T11:03:17",
    "slug": "inheritance-in-swift",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/inheritance-in-swift/",
    "title": {
      "rendered": "Inheritance in Swift"
    },
    "content": {
      "rendered": "\n<p>In Swift programming language, a class can inherit properties, methods and other characteristics from another class. Inheriting these properties and attributes from one class to another class is known as inheritance.</p>\n\n\n\n<p><strong>Sub class:</strong>&nbsp;The class which inherits the properties from other class is called child class or sub class.</p>\n\n\n\n<p><strong>Super class:</strong>&nbsp;The main class from where the subclass inherits the properties is known as parent class or super class.</p>\n\n\n\n<p>Swift4 classes consist of superclass which calls and accesses methods, properties, functions and overriding methods. Property observers are used to add a property and modify the stored and computed property methods.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class class_name: Superclass_name   \r\n{  \r\n// Definition of the class  \r\n}  </code></pre>\n\n\n\n<h2>Base Class</h2>\n\n\n\n<p>A Base Class is a class which does not inherit methods, properties or functions from another class.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class StudentDetails {  \r\n   var stname: String!  \r\n   var mark1: Int!  \r\n   var mark2: Int!  \r\n   var mark3: Int!  \r\n   init(stname: String, mark1: Int, mark2: Int, mark3: Int) {  \r\n      self.stname = stname  \r\n      self.mark1 = mark1  \r\n      self.mark2 = mark2  \r\n      self.mark3 = mark3  \r\n   }  \r\n}  \r\nlet stname = \"Aryan\"  \r\nlet mark1 = 70  \r\nlet mark2 = 80  \r\nlet mark3 = 85  \r\nprint(stname)  \r\nprint(mark1)  \r\nprint(mark2)  \r\nprint(mark3)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Aryan\n70\n80\n</code></pre>\n\n\n\n<p>Here, class with classname StudentDetails is defined as a base class which contains student&#8217;s name, and three subjects mark as mark1, mark2 and mark3. The &#8216;let&#8217; keyword is used to initialize the value for the base class and base class value is displayed using &#8216;print&#8217; function.</p>\n\n\n\n<h2>Subclass</h2>\n\n\n\n<p>The subclass inherits properties, methods and functions of its base class. To define a subclass &#8216;:&#8217; is used before the base class name.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Person {  \r\n var firstName: String  \r\n var lastName: String  \r\nlet birthPlace: String  \r\n  \r\ninit(birthPlace: String) {  \r\nself.birthPlace = birthPlace  \r\n}  \r\n}  \r\nclass Student: Person   \r\n{  \r\nvar school: String  \r\n}  \r\nlet student = Student(birthPlace: \"India\")  \r\nstudent.lastName  = \"Head\"  \r\nstudent.firstName  = \"Travis\"  \r\nprint(student.birthPlace)  \r\nprint(student.firstName)  \r\nprint(student.lastName) </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>India\nTravis\nHead\n</code></pre>\n\n\n\n<h2>Overriding</h2>\n\n\n\n<p>Overriding is used to access the super class instance, type methods, instance, type properties and subscripts. It uses a keyword &#8216;override&#8217; to override the methods declared in the superclass.</p>\n\n\n\n<h3>Use of super keyword</h3>\n\n\n\n<p>&#8216;super&#8217; keyword is used as a prefix to access the methods, properties and subscripts declared in the super class.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Overriding</td><td>Access to methods,properties and subscripts</td></tr><tr><td>Methods</td><td>super.somemethod()</td></tr><tr><td>Properties</td><td>super.someProperty()</td></tr><tr><td>Subscripts</td><td>super[someIndex]</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Swift programming language, a class can inherit properties, methods and other characteristics from another class. Inheriting these properties and attributes from one class to another class is known as inheritance. Sub class:&nbsp;The class which inherits the properties from other class is called child class or sub class. Super class:&nbsp;The main class from where the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/166"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=166"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/166/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 167,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/166/revisions/167"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=166"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=166"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=166"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 168,
    "date": "2020-10-17T11:05:13",
    "date_gmt": "2020-10-17T11:05:13",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=168"
    },
    "modified": "2020-10-17T11:05:13",
    "modified_gmt": "2020-10-17T11:05:13",
    "slug": "swift4-methods",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift4-methods/",
    "title": {
      "rendered": "Swift4 Methods"
    },
    "content": {
      "rendered": "\n<p>In Swift4, methods are the functions which are associated with a particular type. In Objective-C, classes are used to define methods whereas in Swift4, we have methods for Classes, Structures and Enumerations.</p>\n\n\n\n<h2>Instance Methods</h2>\n\n\n\n<p>Instance methods are the methods which are associated with instances of class, structure or enum. Instance methods are written inside the body of that type.</p>\n\n\n\n<p>Instance methods provide functionalities related to instance&#8217;s need and also to access and modify instance properties. Instance methods are written inside the curly barces {}. It has implicit access to methods and properties of the type instance. When a specific instance of the type is called, it will get access to that particular instance.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func funcname(Parameters) -> returntype {  \r\n   Statement1  \r\n   Statement2  \r\n   ---  \r\n   Statement N  \r\n   return parameters  \r\n}  </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class calculate {  \r\n   let a: Int  \r\n   let b: Int  \r\n   let res: Int  \r\n   init(a: Int, b: Int) {  \r\n      self.a = a  \r\n      self.b = b  \r\n      res = a + b  \r\n   }  \r\n   func tot(c: Int) -> Int {  \r\n      return res - c  \r\n   }  \r\n   func result() {  \r\n      print(\"Result is: \\(tot(c: 20))\")  \r\n      print(\"Result is: \\(tot(c: 50))\")  \r\n   }  \r\n}  \r\nlet pri = calculate(a: 200, b: 300)  \r\npri.result()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Result is: 480\r\nResult is: 450\r\n</code></pre>\n\n\n\n<p>In the above example, class&nbsp;<strong>calculate</strong>&nbsp;defines two instance methods:</p>\n\n\n\n<ul><li>init() is defined to add two numbers a and b and store it in result &#8216;res&#8217;.</li><li>tot() is used to subtract the &#8216;res&#8217; from passing &#8216;c&#8217; value.</li></ul>\n\n\n\n<h2>Local and External Parameter Names</h2>\n\n\n\n<p>In Swift4, function can describe both local and global declarations for their variables. The characteristics of local and global parameter name declarations are different for functions and methods. The first parameter in Swift 4 is referred by preposition named as &#8216;with&#8217;, &#8216;for&#8217; and &#8216;by&#8217; for easy to access naming conventions.</p>\n\n\n\n<p>In Swift 4, you can declare first parameter name as local parameter and the remaining parameter names as global parameter names.</p>\n\n\n\n<p>Let&#8217;s see an example. Here &#8216;no1&#8217; is declared as local parameter names and &#8216;no2&#8217; is used for global declarations and accessed through out the program.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class divide {  \r\n   var count: Int = 0  \r\n   func incrementBy(no1: Int, no2: Int) {  \r\n      count = no1 / no2  \r\n      print(count)  \r\n   }  \r\n}  \r\nlet counter = divide()  \r\ncounter.incrementBy(no1: 100, no2: 3)  \r\ncounter.incrementBy(no1: 200, no2: 5)  \r\ncounter.incrementBy(no1: 400, no2: 7)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>33\n40\n57\n</code></pre>\n\n\n\n<h2>Self property in Methods</h2>\n\n\n\n<p>Methods have an implicit property called &#8216;self&#8217; for all its defined type instances. &#8216;Self&#8217; property or Self method is provided with methods to access the instance itself.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class calculate {  \r\n   let a: Int  \r\n   let b: Int  \r\n   let res: Int  \r\n   init(a: Int, b: Int) {  \r\n      self.a = a  \r\n      self.b = b  \r\n      res = a + b  \r\n      print(\"Result Inside Self Block: \\(res)\")  \r\n   }  \r\n   func tot(c: Int) -> Int {  \r\n      return res - c  \r\n   }  \r\n   func result() {  \r\n      print(\"Result is: \\(tot(c: 20))\")  \r\n      print(\"Result is: \\(tot(c: 50))\")  \r\n   }  \r\n}  \r\nlet pri = calculate(a: 100, b: 200)  \r\nlet sum = calculate(a: 300, b: 400)  \r\npri.result()  \r\nsum.result()  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Result Inside Self Block: 300\r\nResult Inside Self Block: 700\r\nResult is: 280\r\nResult is: 250\r\nResult is: 680\r\nResult is: 650\n</code></pre>\n\n\n\n<h2>Modify Value Types from Instance Methods</h2>\n\n\n\n<p>In Swift 4, structures and enums belong to value types which cannot be altered by its instance methods but we can modify the value types by &#8216;mutating&#8217; behavior. Mutate will make any changes in the instance methods and will return back to the original form after the execution of the method. Also, by the &#8216;self&#8217; property new instance is created for its implicit function and will replace the existing method after its execution.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct area {  \r\n   var length = 1  \r\n   var breadth = 1  \r\n   func area() -> Int {  \r\n      return length * breadth  \r\n   }  \r\n   mutating func scaleBy(res: Int) {  \r\n      length *= res  \r\n      breadth *= res  \r\n      print(length)  \r\n      print(breadth)  \r\n   }  \r\n}  \r\nvar val = area(length: 3, breadth: 5)  \r\nval.scaleBy(res: 2)  \r\nval.scaleBy(res: 20)  \r\nval.scaleBy(res: 200)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>6\n10\n120\n200\n24000\n40000</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Swift4, methods are the functions which are associated with a particular type. In Objective-C, classes are used to define methods whereas in Swift4, we have methods for Classes, Structures and Enumerations. Instance Methods Instance methods are the methods which are associated with instances of class, structure or enum. Instance methods are written inside the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/168"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=168"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/168/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 169,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/168/revisions/169"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=168"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=168"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=168"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 170,
    "date": "2020-10-17T11:06:34",
    "date_gmt": "2020-10-17T11:06:34",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=170"
    },
    "modified": "2020-10-17T11:06:34",
    "modified_gmt": "2020-10-17T11:06:34",
    "slug": "swift4-subscripts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift4-subscripts/",
    "title": {
      "rendered": "Swift4 Subscripts"
    },
    "content": {
      "rendered": "\n<p>In Swift4, subscripts are the shortcuts which are used to access elements of a list, sequence or a collection. Subscript is used to set or retrieve a value using index instead of writing functions.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Array&#91;Index], Dictionary&#91;Key]   </code></pre>\n\n\n\n<p>Subscript can be a single or multiple type declaration. It also ranges from single dimension to multiple dimensions according to the user&#8217;s requirement for their input data type declaration.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<p>The syntax of subscripts is same as computed properties. For querying type instances, subscripts are written inside a square bracket followed with the instance name.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>subscript(index: Int) ?> Int {  \r\n   get {  \r\n      // Declare subscript value here  \r\n   }  \r\n   set(newValue) {  \r\n      // Write the definitions here  \r\n   }  \r\n} </code></pre>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct subscriptexample {  \r\n   let decrementer: Int  \r\n   subscript(index: Int) -> Int {  \r\n      return decrementer / index  \r\n   }  \r\n}  \r\nlet division = subscriptexample(decrementer: 100)  \r\nprint(\"The number is divisible by \\(division&#91;2]) times\")  \r\nprint(\"The number is divisible by \\(division&#91;3]) times\")  \r\nprint(\"The number is divisible by \\(division&#91;4]) times\")  \r\nprint(\"The number is divisible by \\(division&#91;5]) times\")  \r\nprint(\"The number is divisible by \\(division&#91;6]) times\")   </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The number is divisible by 50 times\nThe number is divisible by 33 times\nThe number is divisible by 25 times\nThe number is divisible by 20 times\nThe number is divisible by 16 times\n</code></pre>\n\n\n\n<h3>Example2:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class daysofaweek {  \r\n   private var days = &#91;\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",  \r\n      \"Thursday\", \"Friday\", \"Saturday\"]  \r\n   subscript(index: Int) -> String {  \r\n      get {  \r\n         return days&#91;index]  \r\n      }  \r\n      set(newValue) {  \r\n         self.days&#91;index] = newValue  \r\n      }  \r\n   }  \r\n}  \r\nvar p = daysofaweek()  \r\nprint(p&#91;0])  \r\nprint(p&#91;1])  \r\nprint(p&#91;2])  \r\nprint(p&#91;3])  \r\nprint(p&#91;4])  \r\nprint(p&#91;5])  \r\nprint(p&#91;6])  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday\n</code></pre>\n\n\n\n<h2>Subscript Overloading</h2>\n\n\n\n<p>In Swift4, subscript can take single to multiple input parameters belong to any data type. Defining multiple subscripts is known as subscript overloading where a class or structure can provide multiple subscript definitions.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Swift4, subscripts are the shortcuts which are used to access elements of a list, sequence or a collection. Subscript is used to set or retrieve a value using index instead of writing functions. For example: Subscript can be a single or multiple type declaration. It also ranges from single dimension to multiple dimensions according [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/170"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=170"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/170/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 171,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/170/revisions/171"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=170"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=170"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=170"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 172,
    "date": "2020-10-17T11:07:36",
    "date_gmt": "2020-10-17T11:07:36",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=172"
    },
    "modified": "2020-10-17T11:07:36",
    "modified_gmt": "2020-10-17T11:07:36",
    "slug": "swift-deinitialization",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-deinitialization/",
    "title": {
      "rendered": "Swift Deinitialization"
    },
    "content": {
      "rendered": "\n<p>Swift Deinitialization is a process where &#8216;deinitializer&#8217; is called to deallocate the memory space before a class instance deallocated. The&#8217;deinit&#8217; keyword is used to deallocate the memory spaces occupied by the system resources. Deinitialization is available only on class types.</p>\n\n\n\n<h2>How Deinitialization Works</h2>\n\n\n\n<p>Swift automatically deallocates instances which are no longer needed, to free up resources. Swift uses Automatic Reference Counting (ARC) to handle the memory management of Instances. Usually, you don?t need to perform manual cleanup when your instances are deallocated. But, when you work with your own resources, you need to perform some additional cleanup.</p>\n\n\n\n<p><strong>For example:</strong>&nbsp;If you create a custom class to open a file and write some data to it, you might need to close the file before the class instance is deallocated.</p>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>deinit {  \r\n// perform the deinitialization  \r\n}  </code></pre>\n\n\n\n<h3>Swift Deinitialization Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var counter = 0; // for reference counting  \r\nclass baseclass {  \r\n   init() {  \r\n      counter++;  \r\n   }  \r\n   deinit {  \r\n      counter--;  \r\n   }  \r\n}  \r\nvar print: baseclass? = baseclass()  \r\n  \r\nprint(counter)  \r\nprint = nil  \r\nprint(counter)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n0\n</code></pre>\n\n\n\n<p>Here,&nbsp;<strong>print = nil</strong>&nbsp;statement values of the counter retains the same since it is not deinitialized.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var counter = 0; // for reference counting  \r\nclass baseclass {  \r\n   init() {  \r\n      counter++;  \r\n   }  \r\n   deinit {  \r\n      counter--;  \r\n   }  \r\n}  \r\nvar print: baseclass? = baseclass()  \r\nprint(counter)  \r\nprint(counter)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n1</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift Deinitialization is a process where &#8216;deinitializer&#8217; is called to deallocate the memory space before a class instance deallocated. The&#8217;deinit&#8217; keyword is used to deallocate the memory spaces occupied by the system resources. Deinitialization is available only on class types. How Deinitialization Works Swift automatically deallocates instances which are no longer needed, to free up [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/172"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=172"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/172/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 173,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/172/revisions/173"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=172"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=172"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=172"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 174,
    "date": "2020-10-17T11:08:59",
    "date_gmt": "2020-10-17T11:08:59",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=174"
    },
    "modified": "2020-10-17T11:08:59",
    "modified_gmt": "2020-10-17T11:08:59",
    "slug": "swift4-initialization",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift4-initialization/",
    "title": {
      "rendered": "Swift4 Initialization"
    },
    "content": {
      "rendered": "\n<p>Swift Classes, structures and enumerations are used for preparing instance of a class once declared in Swift4. Initial value is initialized for stored property. The values are initialized to proceed further. The &#8216;init()&#8217; method is used to create initialization function. Swift 4 initializer is different from Objective-C as it does not return any values. Its function is to check for initialization of newly created instances before its processing. Swift 4 also provides &#8216;deinitialization&#8217; process for performing memory management operations once the instances are deallocated.</p>\n\n\n\n<h2>Initializer for Stored Properties</h2>\n\n\n\n<p>Stored properties have to initialize the instances for their classes and structures before processing the instances. Stored properties use initializer to assign and initialize values without need to call property observers.</p>\n\n\n\n<ul><li>To create an initial value.</li><li>To assign default property value within the property definition.</li><li>To initialize an instance for a particular data type &#8216;init()&#8217; is used. No arguments are passed inside the init() function.</li></ul>\n\n\n\n<h3>Syntax:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>init() {  \r\n   //New Instance initialization goes here  \r\n}  </code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct cube {  \r\n   var length: Double   \r\n   var breadth: Double  \r\n   var height: Double  \r\n   init() {  \r\n      length = 6  \r\n      breadth = 12  \r\n      height = 4  \r\n   }  \r\n}  \r\nvar volume = cube()  \r\nprint(\"volume of cube is \\(volume.length*volume.breadth*volume.height)\") </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>volume of cube is 288.0 \n</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>The structure &#8220;<strong>cube</strong>&#8221; is initialized with member length, breadth and height as &#8220;Double&#8221; datatype.</li><li>Init() method is used to initialize the values for the newly created members.</li><li>Volume of cube is calculated and returned by calling the cube function.</li></ul>\n\n\n\n<h2>Setting Property Values by Default</h2>\n\n\n\n<p>In Swift4 programming language, the init() function is used to initialize the property values by default while declaring the class or structure members. When the property takes the same value alone throughout the program, we can declare it in the declaration section alone rather than initializing it in init(). Setting property values by default enables the user when inheritance is defined for classes or structures.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct cube {  \r\n   var length = 6  \r\n   var breadth = 12  \r\n   var height = 4  \r\n}  \r\n  \r\nvar volume = cube()  \r\nprint(\"volume of the cube is \\(volume.length*volume.breadth*volume.height)\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>volume of cube is 288\n</code></pre>\n\n\n\n<h2>Parameter Initialization</h2>\n\n\n\n<p>In Swift4 language, the user can initialize parameters as part of the initializer&#8217;s definition using init().</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>struct Rectangle {  \r\n   var length: Double  \r\n   var breadth: Double  \r\n   var area: Double  \r\n   init(fromLength length: Double, fromBreadth breadth: Double) {  \r\n      self.length = length  \r\n      self.breadth = breadth  \r\n      area = length * breadth  \r\n   }  \r\n   init(fromL l: Double, fromB b: Double) {  \r\n      self.length = l  \r\n      self.breadth = b  \r\n      area = l * b  \r\n   }  \r\n}  \r\nlet a1 = Rectangle(fromLength: 6, fromBreadth: 12)  \r\nprint(\"area is: \\(a1.area)\")  \r\n  \r\nlet a2 = Rectangle(fromL: 36, fromB: 12)  \r\nprint(\"area is: \\(a2.area)\")</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>area is: 72.0\narea is: 432.0</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift Classes, structures and enumerations are used for preparing instance of a class once declared in Swift4. Initial value is initialized for stored property. The values are initialized to proceed further. The &#8216;init()&#8217; method is used to create initialization function. Swift 4 initializer is different from Objective-C as it does not return any values. Its [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/174"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=174"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/174/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 175,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/174/revisions/175"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=174"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=174"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=174"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 176,
    "date": "2020-10-17T11:09:47",
    "date_gmt": "2020-10-17T11:09:47",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=176"
    },
    "modified": "2020-10-17T11:09:47",
    "modified_gmt": "2020-10-17T11:09:47",
    "slug": "swift4-typecasting",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift4-typecasting/",
    "title": {
      "rendered": "Swift4 Typecasting"
    },
    "content": {
      "rendered": "\n<p>Typecasting is used in Swift4 to validate the type of an instance. It is used to check whether the instance type belongs to a particular super class or subclass or it is defined in its own hierarchy.</p>\n\n\n\n<p>Swift 4 type casting provides two operators:</p>\n\n\n\n<ul><li><strong>&#8216;is&#8217;</strong>: This operator is used to check the type of a value.</li><li><strong>&#8216;as&#8217;</strong>: This operator is used to cast the type value to a different type.</li></ul>\n\n\n\n<h2>To Define a Class Hierarchy</h2>\n\n\n\n<p>Type casting is also used to check whether the instance type follows particular protocol conformance standard or not. It also checks hierarchy of classes, its subclasses and its instances to make it as a same hierarchy.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Subjects {  \r\n   var physics: String  \r\n   init(physics: String) {  \r\n      self.physics = physics  \r\n   }  \r\n}  \r\nclass Chemistry: Subjects {  \r\n   var equations: String  \r\n   init(physics: String, equations: String) {  \r\n      self.equations = equations  \r\n      super.init(physics: physics)  \r\n   }  \r\n}  \r\nclass Maths: Subjects {  \r\n   var formulae: String  \r\n   init(physics: String, formulae: String) {  \r\n      self.formulae = formulae  \r\n      super.init(physics: physics)  \r\n   }  \r\n}  \r\nlet sa = &#91; Chemistry(physics: \"Mechanics\", equations: \"Hertz\"),  \r\n   Maths(physics: \"Fluid Dynamics\", formulae: \"Giga Hertz\")]  \r\nlet samplechem = Chemistry(physics: \"Mechanics\", equations: \"Hertz\")  \r\nprint(\"Instance physics is: \\(samplechem.physics)\")  \r\nprint(\"Instance equation is: \\(samplechem.equations)\")  \r\nlet samplemaths = Maths(physics: \"Fluid Dynamics\", formulae: \"Giga Hertz\")  \r\nprint(\"Instance physics is: \\(samplemaths.physics)\")  \r\nprint(\"Instance formulae is: \\(samplemaths.formulae)\")  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Instance physics is: Mechanics\nInstance equation is: Hertz\nInstance physics is: Fluid Dynamics\nInstance formulae is: Giga Hertz\n</code></pre>\n\n\n\n<h2>How to do Type Checking</h2>\n\n\n\n<p>The &#8220;is&#8221; operator is used to do type checking. It checks whether the instance belongs to particular subclass type and returns &#8216;true&#8217; if it belongs otherwise returns &#8216;false&#8217;.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Typecasting is used in Swift4 to validate the type of an instance. It is used to check whether the instance type belongs to a particular super class or subclass or it is defined in its own hierarchy. Swift 4 type casting provides two operators: &#8216;is&#8217;: This operator is used to check the type of a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/176"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=176"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/176/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 177,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/176/revisions/177"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=176"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=176"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=176"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 178,
    "date": "2020-10-17T11:10:31",
    "date_gmt": "2020-10-17T11:10:31",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=178"
    },
    "modified": "2020-10-17T11:10:31",
    "modified_gmt": "2020-10-17T11:10:31",
    "slug": "difference-between-function-and-method-in-swift",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/difference-between-function-and-method-in-swift/",
    "title": {
      "rendered": "Difference between function and method in Swift"
    },
    "content": {
      "rendered": "\n<p>Some people think functions and methods are same and use the terms interchangeably. But, these two are slightly different. &#8220;Methods belong to classes, structs, and enums, whereas functions do not.&#8221;</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>func thisIsAFunction() {  \r\n}  \r\nstruct Employee {  \r\n    func thisIsAMethod() {  \r\n    }  \r\n} </code></pre>\n\n\n\n<p><strong>Let&#8217;s see some differences between a function and a method:</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Function</th><th>Method</th></tr><tr><td>Functions have independent existence. You can define them outside of the class.</td><td>Methods do not have independent existence. They are always defined within a class, struct, or enum.</td></tr><tr><td>Functions are the properties of structured languages like C, C++, Pascal and object based language like JavaScript.<br><strong>Note:</strong>&nbsp;There is no concept of function in Java.</td><td>Methods are the properties of Object-oriented language like C#, Java, Swift etc.</td></tr><tr><td>Functions don&#8217;t have any reference variables.</td><td>Methods are called using reference variables.</td></tr><tr><td>Functions are a self describing piece of code.</td><td>Methods are used to manipulate instance variable of a class.</td></tr><tr><td>Functions are called independently.</td><td>Methods are called using instance or object.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Some people think functions and methods are same and use the terms interchangeably. But, these two are slightly different. &#8220;Methods belong to classes, structs, and enums, whereas functions do not.&#8221; Example: Let&#8217;s see some differences between a function and a method: Function Method Functions have independent existence. You can define them outside of the class. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/178"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=178"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/178/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 179,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/178/revisions/179"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=178"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=178"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=178"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 180,
    "date": "2020-10-17T11:12:05",
    "date_gmt": "2020-10-17T11:12:05",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=180"
    },
    "modified": "2020-10-17T11:12:05",
    "modified_gmt": "2020-10-17T11:12:05",
    "slug": "timers-in-swift",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/timers-in-swift/",
    "title": {
      "rendered": "Timers in Swift"
    },
    "content": {
      "rendered": "\n<p>In Swift, timers are used to create repeating tasks to schedule a work with a delay. It is a class which is formerly known as NSTimer. Swift&#8217;s timer class provides a flexible way to schedule work to happen in future either once or repeatedly.</p>\n\n\n\n<p>Let&#8217;s see how to create repeating and non-repeating timers, using run loops, keeping track of timers, and how you can reduce their energy and power impact.</p>\n\n\n\n<h2>Creating a Repeating Timer</h2>\n\n\n\n<p>We can create and start a repeating counter by using the following syntax:</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(fireTimer), userInfo: nil, repeats: true)</code></pre>\n\n\n\n<p><strong>Let&#8217;s see an example to demonstrate how to create a repeating counter:</strong></p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(fire), userInfo: nil, repeats: true)  \r\n@objc func fire()   \r\n{  \r\n    print(\"FIRE!!!\")  \r\n}  </code></pre>\n\n\n\n<p>In the above example,</p>\n\n\n\n<ul><li>A timer is created using the&nbsp;<strong>Timer.scheduledTimer(&#8230;)</strong>&nbsp;class method. The return value of this method is assigned to the constant timer. This constant now contains a reference to the timer, which will be used later.</li><li>The parameters of scheduledTimer() are the timer interval of 1 second. It uses a mechanism known as target-action, some userInfo that&#8217;s set to nil, and the parameter repeats set to true.</li><li>We&#8217;ve also coded a function fire(). This is the function that&#8217;s called when the timer fires, i.e. roughly every second. By setting target to self and selector to #selector(fire) you&#8217;re indicating that whenever the timer fires, the function fire() of self needs to be called.</li></ul>\n\n\n\n<h2>Parameter explanation</h2>\n\n\n\n<p>In this example, 5 parameters are used to create a timer.</p>\n\n\n\n<ul><li><strong>timeInterval:</strong>&nbsp;It specifies the interval between timer fires in seconds, type is Double.</li><li><strong>target:</strong>&nbsp;It specifies a class instance that the function for selector should be called on</li><li><strong>selector:</strong>&nbsp;It specifies the function to call when the timer fires, with #selector(&#8230;)</li><li><strong>userInfo:</strong>&nbsp;It specifies a dictionary with data that&#8217;s provided to the selector, or nil.</li><li><strong>repeats:</strong>&nbsp;It specifies whether this timer is repeating or non-repeating.</li></ul>\n\n\n\n<h2>Creating a Nonrepeating Timer</h2>\n\n\n\n<p>To create a nonrepeating timer, you have to just set the&nbsp;<strong>repeats</strong>&nbsp;parameter to&nbsp;<strong>false</strong>. The timer will only fire once and immediately invalidate itself after.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let timer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(fire), userInfo: nil, repeats: false)  \r\n@objc func fire()   \r\n{  \r\n    print(\"FIRE!!!\")  \r\n}  </code></pre>\n\n\n\n<h4>Note: The above code must run in a class context, for example in a view controller class. The fire() function is part of the class, and self refers to the current class instance.</h4>\n\n\n\n<h2>Create a timer using Closure</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>let timer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true, block: { timer in  \r\n    print(\"FIRE!!!\")  \r\n})  </code></pre>\n\n\n\n<p>In the above code, the last parameter block takes a closure. The closure has one parameter timer itself.</p>\n\n\n\n<p>Here, the @objc attribute is used because it makes the fire() function available in Objective-C. The Timer class is part of the Objective-C runtime that is the reason we use that @objc attribute.</p>\n\n\n\n<h2>Difference between Repeating and Nonrepeating Timers</h2>\n\n\n\n<p>You have to specify whether a timer is repeating or nonrepeating at the time of creation. The main difference between repeating and nonrepeating timer is:</p>\n\n\n\n<p>A&nbsp;<strong>nonrepeating timer</strong>&nbsp;fires once and then invalidates itself automatically, so, it prevents the timer from firing again.</p>\n\n\n\n<p>A&nbsp;<strong>repeating timer</strong>&nbsp;fires and then reschedules itself on the same run loop. A repeating timer always schedules itself based on the scheduled firing time, as opposed to the actual firing time.</p>\n\n\n\n<p>For example, if a timer is scheduled to fire at a specific time and every 10 seconds after that, the scheduled firing time will always fall on the original 10-second time intervals, even if the actual firing time gets delayed.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Swift, timers are used to create repeating tasks to schedule a work with a delay. It is a class which is formerly known as NSTimer. Swift&#8217;s timer class provides a flexible way to schedule work to happen in future either once or repeatedly. Let&#8217;s see how to create repeating and non-repeating timers, using run [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/180"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=180"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/180/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 181,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/180/revisions/181"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=180"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=180"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=180"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 182,
    "date": "2020-10-17T11:45:28",
    "date_gmt": "2020-10-17T11:45:28",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=182"
    },
    "modified": "2020-10-17T11:45:28",
    "modified_gmt": "2020-10-17T11:45:28",
    "slug": "swiftyjson",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swiftyjson/",
    "title": {
      "rendered": "SwiftyJSON"
    },
    "content": {
      "rendered": "\n<p>SwiftyJSON is an open-source library that helps developers use JSON in Swift without much difficulty. Swift is very strict about types so, it is very difficult to work with JSON in Swift. SwiftyJSON provides a better way to deal with JSON data in Swift.</p>\n\n\n\n<p>SwiftyJSON is a Swift framework which was built to remove the need for optional chaining in normal JSON serialization.</p>\n\n\n\n<h2>The problem with JSON in Swift</h2>\n\n\n\n<p>Before using SwiftyJSON, let&#8217;s see the mess a user can face while dealing with JSON in Swift. For example, your code would look like this if you find the name of the first book in a JSON object:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if let jsonObject = try NSJSONSerialization.JSONObjectWithData(data, options: .AllowFragments) as? &#91;&#91;String: AnyObject]],  \r\nt bookName = (jsonObject&#91;0]&#91;\"book\"] as? &#91;String: AnyObject])?&#91;\"name\"] as? String {  \r\n  //Now, you can use the book name</code></pre>\n\n\n\n<p>You can see that the above code is complicated and difficult to read.</p>\n\n\n\n<p>By using SwiftyJSON, it will be highly simplified like this:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let json = JSON(data: data)  \r\nif let bookName = json&#91;0]&#91;\"book\"]&#91;\"name\"].string {  \r\n    //Now, you can use the book name  \r\n}  </code></pre>\n\n\n\n<p>SwiftyJSON removes the requirement of checking every field, as it returns nil if any of them are invalid.</p>\n\n\n\n<h2>Download SwiftJSON</h2>\n\n\n\n<p>You can download or clone SwityJSON directly from GitHub:</p>\n\n\n\n<figure class=\"wp-block-embed\"><div class=\"wp-block-embed__wrapper\">\nhttps://github.com/SwiftyJSON/SwiftyJSON\n</div></figure>\n\n\n\n<h2>How to use SwiftyJSON</h2>\n\n\n\n<p>To use SwiftyJSON, you have to download the correct version from the Git repository. Simply, drag the &#8220;SwiftyJSON.swift&#8221; into your project and import into your class:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import SwiftyJSON  </code></pre>\n\n\n\n<p>You can create your own JSON object by using initializers. There are two ways to create your own JSON object:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let jsonObject = JSON(data: dataObject) </code></pre>\n\n\n\n<p>Or</p>\n\n\n\n<pre class=\"wp-block-code\"><code>SwiftyJSON is an open-source library that helps developers use JSON in Swift without much difficulty. Swift is very strict about types so, it is very difficult to work with JSON in Swift. SwiftyJSON provides a better way to deal with JSON data in Swift.\r\n\r\nSwiftyJSON is a Swift framework which was built to remove the need for optional chaining in normal JSON serialization.\r\n\r\nThe problem with JSON in Swift\r\nBefore using SwiftyJSON, let's see the mess a user can face while dealing with JSON in Swift. For example, your code would look like this if you find the name of the first book in a JSON object:\r\n\r\nif let jsonObject = try NSJSONSerialization.JSONObjectWithData(data, options: .AllowFragments) as? &#91;&#91;String: AnyObject]],  \r\nt bookName = (jsonObject&#91;0]&#91;\"book\"] as? &#91;String: AnyObject])?&#91;\"name\"] as? String {  \r\n  //Now, you can use the book name  \r\nYou can see that the above code is complicated and difficult to read.\r\n\r\nBy using SwiftyJSON, it will be highly simplified like this:\r\n\r\nlet json = JSON(data: data)  \r\nif let bookName = json&#91;0]&#91;\"book\"]&#91;\"name\"].string {  \r\n    //Now, you can use the book name  \r\n}  \r\nSwiftyJSON removes the requirement of checking every field, as it returns nil if any of them are invalid.\r\n\r\nDownload SwiftJSON\r\nYou can download or clone SwityJSON directly from GitHub:\r\n\r\nhttps:&#47;&#47;github.com/SwiftyJSON/SwiftyJSON\r\n\r\nHow to use SwiftyJSON\r\nTo use SwiftyJSON, you have to download the correct version from the Git repository. Simply, drag the \"SwiftyJSON.swift\" into your project and import into your class:\r\n\r\nimport SwiftyJSON  \r\nYou can create your own JSON object by using initializers. There are two ways to create your own JSON object:\r\n\r\nlet jsonObject = JSON(data: dataObject)  \r\nOr\r\n\r\nlet jsonObject = JSON(jsonObject) //This could be a string in a JSON format for example  \r\nYou can use subscripts to access your data.\r\n\r\nlet firstObjectInAnArray = jsonObject&#91;0]  \r\nlet nameOfFirstObject = jsonObject&#91;0]&#91;\"name\"]  \r\nYou can parse your value to a certain data type, which will return an optional value:\r\n\r\nlet nameOfFirstObject = jsonObject&#91;0]&#91;\"name\"].string //This will return the name as a string  \r\nlet nameOfFirstObject = jsonObject&#91;0]&#91;\"name\"].double //This will return null  \r\nYou can also compile your paths into a swift Array:\r\n\r\nlet convolutedPath = jsonObject&#91;0]&#91;\"name\"]&#91;2]&#91;\"lastName\"]&#91;\"firstLetter\"].string   \r\nIt is same as:\r\n\r\nlet convolutedPath = jsonObject&#91;0, \"name\", 2, \"lastName\", \"firstLetter\"].string  \r\nSwiftyJSON has the functionality to print its own errors:\r\n\r\nif let name = json&#91;1337].string {  \r\n    //You can use the value - it is valid  \r\n} else {  \r\n    print(json&#91;1337].error) // \"Array&#91;1337] is out of bounds\" - You cant use the value  \r\n}  \r\nIf you need to write to your JSON object, you can use subscripts again:\r\n\r\nvar originalJSON:JSON = &#91;\"name\": \"Jack\", \"age\": 18]  \r\noriginalJSON&#91;\"age\"] = 25 //This changes the age to 25  \r\noriginalJSON&#91;\"surname\"] = \"Smith\" //This creates a new field called \"surname\" and adds the value to it.  \r\nIf you want the original String for the JSON, for example if you need to write it to a file, you can get the raw value.\r\n\r\nif let string = json.rawString() { //This is a String object  \r\n    //Write the string to a file if you like  \r\n}  \r\nif let data = json.rawData() { //This is an NSData object  \r\n    //Send the data to your server if you like  \r\n}  \r\n</code></pre>\n\n\n\n<p>You can use subscripts to access your data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let firstObjectInAnArray = jsonObject&#91;0]  \r\nlet nameOfFirstObject = jsonObject&#91;0]&#91;\"name\"]  </code></pre>\n\n\n\n<p>You can parse your value to a certain data type, which will return an optional value:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let nameOfFirstObject = jsonObject&#91;0]&#91;\"name\"].string //This will return the name as a string  \r\nlet nameOfFirstObject = jsonObject&#91;0]&#91;\"name\"].double //This will return null  </code></pre>\n\n\n\n<p>You can also compile your paths into a swift Array:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let convolutedPath = jsonObject&#91;0]&#91;\"name\"]&#91;2]&#91;\"lastName\"]&#91;\"firstLetter\"].string   </code></pre>\n\n\n\n<p>It is same as:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let convolutedPath = jsonObject&#91;0, \"name\", 2, \"lastName\", \"firstLetter\"].string  </code></pre>\n\n\n\n<p>SwiftyJSON has the functionality to print its own errors:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if let name = json&#91;1337].string {  \r\n    //You can use the value - it is valid  \r\n} else {  \r\n    print(json&#91;1337].error) // \"Array&#91;1337] is out of bounds\" - You cant use the value  \r\n}  </code></pre>\n\n\n\n<p>If you need to write to your JSON object, you can use subscripts again:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var originalJSON:JSON = &#91;\"name\": \"Jack\", \"age\": 18]  \r\noriginalJSON&#91;\"age\"] = 25 //This changes the age to 25  \r\noriginalJSON&#91;\"surname\"] = \"Smith\" //This creates a new field called \"surname\" and adds the value to it.  </code></pre>\n\n\n\n<p>If you want the original String for the JSON, for example if you need to write it to a file, you can get the raw value.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if let string = json.rawString() { //This is a String object  \r\n    //Write the string to a file if you like  \r\n}  \r\nif let data = json.rawData() { //This is an NSData object  \r\n    //Send the data to your server if you like  \r\n}  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>SwiftyJSON is an open-source library that helps developers use JSON in Swift without much difficulty. Swift is very strict about types so, it is very difficult to work with JSON in Swift. SwiftyJSON provides a better way to deal with JSON data in Swift. SwiftyJSON is a Swift framework which was built to remove the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/182"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=182"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/182/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 183,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/182/revisions/183"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=182"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=182"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=182"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 184,
    "date": "2020-10-17T11:48:43",
    "date_gmt": "2020-10-17T11:48:43",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=184"
    },
    "modified": "2020-10-17T11:48:43",
    "modified_gmt": "2020-10-17T11:48:43",
    "slug": "optional-in-swift",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/optional-in-swift/",
    "title": {
      "rendered": "Optional in Swift"
    },
    "content": {
      "rendered": "\n<p>Swift Optional is the fundamental part of the Swift coding. Optional is used to separate the good code from the bad code and prevent crashes. Every programming language has some preventive measures to avoid a crash. Swift is more practical in this case and&nbsp;<strong>optional make your code crash free</strong>.</p>\n\n\n\n<h2>Declaration</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>enum Optional&lt;Wrapped> </code></pre>\n\n\n\n<p><strong>Optional</strong>&nbsp;type is used whenever you use optional values, even if you never typed the word Optional. Swift&#8217;s type system usually shows the wrapped type&#8217;s name along with a question mark (?) instead of showing the full type name.</p>\n\n\n\n<p><strong>For example</strong>, if a variable has the type&nbsp;<strong>Int?</strong>, it is same and just another way of writing Optional. This short form is used just to keep code easy and simple.</p>\n\n\n\n<p>See the following example.</p>\n\n\n\n<p>Here, the types of shortForm and longForm in the following code sample are the same:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>let shortForm: Int? = Int(\"143\")  \r\nOr  \r\nlet longForm: Optional&lt;Int> = Int(\"143\")   \r\n//Both are same   </code></pre>\n\n\n\n<p>Optional either hold no&nbsp;<strong>value</strong>&nbsp;or&nbsp;<strong>some value</strong>. Optional allows storing&nbsp;<strong>nil</strong>&nbsp;as the absence of a value. Optional is a generic enum with two cases:</p>\n\n\n\n<ul><li><strong>Optional.none</strong>: It is equivalent to nil literal.</li><li><strong>Optional.some(Wrapped)</strong>: It stores a wrapped value.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>let number: Int? = Optional.some(143)  \r\nlet noNumber: Int? = Optional.none  \r\nprint(noNumber == nil)  \r\n// Prints \"true\"  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n</code></pre>\n\n\n\n<p>The question mark (?) in the above program denotes that it is an optional variable. If you see a question mark at the end of a variable declaration, it is definitely an optional and it may or may not contain a value in it. So, at some part of your program, you don&#8217;t know if there is a value or not for a variable, then mark it as optional.</p>\n\n\n\n<p><strong>Now, see this example:</strong></p>\n\n\n\n<p>Here we try to print the value of the variable &#8216;numberOfStudents&#8217;.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var numberOfStudents : Int?  \r\nprint(numberOfStudents!)  </code></pre>\n\n\n\n<p>Here, the exclamation point (!) at the end of the variable is used to unwrap the value. But, if will try to execute the code the code will crash. That is because, you just force unwrap an optional variable with no value in it. If there is no value in the variable, the program will be crashed.</p>\n\n\n\n<p><strong>Set a value to the variable</strong></p>\n\n\n\n<p>If you set a value to the variable before you force unwrap the value, the code will not crash but this is not a good coding practice and an abuse of optional variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var numberOfStudents : Int?  \r\nnumberOfStudents = 30  \r\nprint(numberOfStudents!)  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>30\n</code></pre>\n\n\n\n<p>You can do a nil check before you force unwrap an optional.</p>\n\n\n\n<p><strong>For example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>var numberOfStudents : Int?  \r\nif numberOfStudents != nil {  \r\nprint(numberOfStudents!)  \r\n}  </code></pre>\n\n\n\n<p>Now, your program will not crash as you are force unwrapping the optional variable only after a nil check.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var numberOfStudents : Int?  \r\nif let studentCount = numberOfStudents {  \r\nprint(studentCount) // It is same as print(numberOfStudents!)  \r\n}  </code></pre>\n\n\n\n<p>The above method will check if the optional variable &#8216;numberOfStudents&#8217; contains some value or not. If exists, then it will be copied to a constant called studentCount and then only the code block will get executed.</p>\n\n\n\n<h2>Forced Unwrapping</h2>\n\n\n\n<p>When you define a variable as optional then to fetch the value from this variable, you will have to unwrap it. Force unwrapping is the process of putting an exclamation mark at the end of the variable.</p>\n\n\n\n<p>Let&#8217;s check an example to make it clear.</p>\n\n\n\n<h3>Example: (Before applying unwrapping)</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var userString:String?  \r\nuserString = \"Hello World\"  \r\nif userString != nil {  \r\n   print(userString)  \r\n} else {  \r\n   print(\"userString has nil value\")  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong>&nbsp;When you execute the above code, it will give the following output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Optional(\"Hello World\")\n</code></pre>\n\n\n\n<h3>Example: (After applying unwrapping)</h3>\n\n\n\n<p>Now, we apply unwrapping to get the correct value of the variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> var userString:String?  \r\nuserString = \"Hello World\"  \r\nif userString != nil {  \r\n   print(userString!)  \r\n} else {  \r\n   print(\"userString has nil value\")  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World\n</code></pre>\n\n\n\n<h2>Automatic Unwrapping</h2>\n\n\n\n<p>Automatic unwrapping provides a way where the optional variable is declared using exclamation mark instead of a question mark. By this way, variables will be unwrapped automatically and you do not need to use any further exclamation mark at the end of the variable to fetch the assigned value.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var userString:String!  \r\nuserString = \"Hello World\"  \r\nif userString != nil {  \r\n   print(userString)  \r\n} else {  \r\n   print(\"userString has nil value\")  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World\n</code></pre>\n\n\n\n<h2>Swift Optional Binding</h2>\n\n\n\n<p>Optional Binding is used to find out whether an optional contains a value, and if so, to make that value available as a temporary constant or variable. You can use any of the optional binding control structures, including if let, guard let, and etc.</p>\n\n\n\n<p>Let&#8217;s take an example to see the optional binding for the if statement:</p>\n\n\n\n<h3>Example:</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var userString:String?  \r\nuserString = \"Hello world\"  \r\nif let myString = userString {  \r\n   print(\"The value of my string is - \\(myString)\")  \r\n} else {  \r\n   print(\"My string does not have a value\")  \r\n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The value of my string is - Hello world</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Swift Optional is the fundamental part of the Swift coding. Optional is used to separate the good code from the bad code and prevent crashes. Every programming language has some preventive measures to avoid a crash. Swift is more practical in this case and&nbsp;optional make your code crash free. Declaration Optional&nbsp;type is used whenever you [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/184"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=184"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/184/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 185,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/184/revisions/185"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=184"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=184"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=184"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 186,
    "date": "2020-10-17T11:49:45",
    "date_gmt": "2020-10-17T11:49:45",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=186"
    },
    "modified": "2020-10-17T11:49:45",
    "modified_gmt": "2020-10-17T11:49:45",
    "slug": "swift-optional-chaining",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/swift-optional-chaining/",
    "title": {
      "rendered": "Swift Optional Chaining"
    },
    "content": {
      "rendered": "\n<p>Optional Chaining is process which is used to call properties, methods, and subscripts on an optional that might currently be nil. If the optional have a value then the property, method, or subscript call succeeds and if the optional is nil thenthe property, method, or subscript call returns nil.</p>\n\n\n\n<p>You can chain multiple queries together but if any chain in the link is nil, the entire chain will fail.</p>\n\n\n\n<h2>Optional Chaining as Forced Unwrapping Alternative</h2>\n\n\n\n<p>Optional chaining is specified by placing a question mark (?) after the optional value where you call a property, method or subscript if optional is not nil.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Optional Chaining</th><th>Forced Unwrapping</th></tr><tr><td>Optional chaining fails when the optional is nil.</td><td>Forced unwrapping triggers a runtime error when the optional is nil.</td></tr><tr><td>The operator ? is placed after the optional value to call property, method or subscript</td><td>! is placed after the optional value to call property, method or subscript to force unwrapping of value.</td></tr></tbody></table></figure>\n\n\n\n<h2>Optional Chaining example (without declaring value in base class)</h2>\n\n\n\n<p>The result of the optional chaining is the same as the expected return value but wrapped in an optional. It means that a property which generally returns Int will return Int? when accessed through optional chaining.</p>\n\n\n\n<p>Let&#8217;s take an example to see the difference between optional chaining and forced alternative:</p>\n\n\n\n<h3>Program for Optional Chaining with ? Operator</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Exam {  \r\n   var student: Toppers?  \r\n}  \r\nclass Toppers {  \r\n   var name = \"Intelligent\"  \r\n}  \r\nlet stud = Exam()  \r\nif let studname = stud.student?.name {  \r\n   print(\"Student name is \\(studname)\")  \r\n} else {  \r\n   print(\"Student name cannot be retrieved\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Student name cannot be retrieved \n</code></pre>\n\n\n\n<p>Here,&nbsp;<strong>Exam</strong>&nbsp;is a class name and contains&nbsp;<strong>student</strong>&nbsp;as membership function. Subclass is declared as&nbsp;<strong>Toppers</strong>&nbsp;and name is a membership function which is initialized as &#8220;<strong>Intelligent</strong>&#8220;. The call to the superclass is initialized by creating an instance &#8220;stud&#8221; with optional &#8220;?&#8221;.</p>\n\n\n\n<p>Since, the value is not declared in the base class so, nil is stored and displayed by else handler block.</p>\n\n\n\n<h2>Model Class for Optional Chaining &amp; Accessing Properties</h2>\n\n\n\n<p>It is used when you have to declare more than one subclass as a model class. It facilitates you to define complex model and to access the methods, properties, subscripts, sub properties.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class rectangle {  \r\n   var print: circle?  \r\n}  \r\nclass circle {  \r\n   var area = &#91;radius]()  \r\n   var cprint: Int {  \r\n      return area.count  \r\n   }  \r\n   subscript(i: Int) -> radius {  \r\n      get {  \r\n         return area&#91;i]  \r\n      }  \r\n      set {  \r\n         area&#91;i] = newValue  \r\n      }  \r\n   }  \r\n   func circleprint() {  \r\n      print(\"The number of rooms is \\(cprint)\")  \r\n   }  \r\n   var rectarea: circumference?  \r\n}  \r\nclass radius {  \r\n   let radiusname: String  \r\n   init(radiusname: String) { self.radiusname = radiusname }  \r\n}  \r\nclass circumference {  \r\n   var circumName: String?  \r\n   var circumNumber: String?  \r\n   var street: String?  \r\n   func buildingIdentifier() -> String? {  \r\n      if circumName != nil {  \r\n         return circumName  \r\n      } else if circumNumber != nil {  \r\n         return circumNumber  \r\n      } else {  \r\n         return nil  \r\n      }  \r\n   }  \r\n}  \r\nlet rectname = rectangle()  \r\nif let rectarea = rectname.print?.cprint {  \r\n   print(\"Area of rectangle is \\(rectarea)\")  \r\n} else {  \r\n   print(\"Rectangle Area is not specified\")  \r\n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rectangle Area is not specified</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Optional Chaining is process which is used to call properties, methods, and subscripts on an optional that might currently be nil. If the optional have a value then the property, method, or subscript call succeeds and if the optional is nil thenthe property, method, or subscript call returns nil. You can chain multiple queries together [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      5
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/186"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=186"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/186/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 187,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/186/revisions/187"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=186"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=186"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=186"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]