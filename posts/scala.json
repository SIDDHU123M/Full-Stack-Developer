[
  {
    "id": 188,
    "date": "2020-10-17T11:50:29",
    "date_gmt": "2020-10-17T11:50:29",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=188"
    },
    "modified": "2020-10-17T11:50:29",
    "modified_gmt": "2020-10-17T11:50:29",
    "slug": "history-of-scala",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/history-of-scala/",
    "title": {
      "rendered": "History of Scala"
    },
    "content": {
      "rendered": "\n<p>Scala is a general purpose programming language. It was created and developed by Martin Odersky. Martin started working on Scala in 2001 at the Ecole Polytechnique Federale de Lausanne (EPFL). It was officially released on January 20, 2004.</p>\n\n\n\n<p>Scala is not an extension of Java, but it is completely interoperable with it. While compilation, Scala file translates to Java bytecode and runs on JVM (Java Virtual machine).</p>\n\n\n\n<p>Scala was designed to be both object-oriented and functional. It is a pure object-oriented language in the sense that every value is an object and functional language in the sense that every function is a value. The name of scala is derived from word scalable which means it can grow with the demand of users.</p>\n\n\n\n<h2>Versions of Scala</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Version</th><th>Released date</th></tr><tr><td>2.0</td><td>12-Mar-2006</td></tr><tr><td>2.1.8</td><td>23-Aug-2006</td></tr><tr><td>2.3.0</td><td>23-Nov-2006</td></tr><tr><td>2.4.0</td><td>09-Mar-2007</td></tr><tr><td>2.5.0</td><td>02-May-2007</td></tr><tr><td>2.6.0</td><td>27-Jul-2007</td></tr><tr><td>2.7.0</td><td>07-Feb-2008</td></tr><tr><td>2.8.0</td><td>14-Jul-2010</td></tr><tr><td>2.9.0</td><td>12-May-2011</td></tr><tr><td>2.10</td><td>04-Jan-2013</td></tr><tr><td>2.10.2</td><td>06-Jun-2013</td></tr><tr><td>2.10.3</td><td>01-Oct-2013</td></tr><tr><td>2.10.4</td><td>18-Mar-2014</td></tr><tr><td>2.10.5</td><td>05-Mar-2015</td></tr><tr><td>2.11.0</td><td>21-Apr-2014</td></tr><tr><td>2.11.1</td><td>20-May-2014</td></tr><tr><td>2.11.2</td><td>22-Jul-2014</td></tr><tr><td>2.11.4</td><td>31-Oct-2014</td></tr><tr><td>2.11.5</td><td>08-Jan-2015</td></tr><tr><td>2.11.6</td><td>05-Mar-2015</td></tr><tr><td>2.11.7</td><td>23-Jun-2015</td></tr><tr><td>2.11.8</td><td>8-Mar-2016</td></tr><tr><td>2.12.1</td><td>5-December &#8211; 2016</td></tr></tbody></table></figure>\n\n\n\n<h3>Popularity of Scala</h3>\n\n\n\n<ul><li>Twitter have announced that it had switched large portions of its backend from Ruby to Scala and intended to convert the rest.</li><li>Apple Inc. uses Scala in certain teams, along with Java and the Play framework.</li><li>The New York Times revealed in 2014 that its internal content management system Blackbeard is built using Scala, Akka and Play Framework.</li><li>There are teams within Google that use Scala, mostly due to acquisitions such as Firebase and Nest.</li><li>The Walmart Canada Uses Scala for their back end platform.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala is a general purpose programming language. It was created and developed by Martin Odersky. Martin started working on Scala in 2001 at the Ecole Polytechnique Federale de Lausanne (EPFL). It was officially released on January 20, 2004. Scala is not an extension of Java, but it is completely interoperable with it. While compilation, Scala [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/188"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=188"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/188/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 189,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/188/revisions/189"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=188"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=188"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=188"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 190,
    "date": "2020-10-17T11:51:03",
    "date_gmt": "2020-10-17T11:51:03",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=190"
    },
    "modified": "2020-10-17T11:51:03",
    "modified_gmt": "2020-10-17T11:51:03",
    "slug": "features-of-scala",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/features-of-scala/",
    "title": {
      "rendered": "Features of Scala"
    },
    "content": {
      "rendered": "\n<p>There are following features of scala:</p>\n\n\n\n<ul><li>Type inference</li><li>Singleton object</li><li>Immutability</li><li>Lazy computation</li><li>Case classes and Pattern matching</li><li>Concurrency control</li><li>String interpolation</li><li>Higher order function</li><li>Traits</li><li>Rich collection set</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Type Inference</h3>\n\n\n\n<p>In Scala, you don&#8217;t require to mention data type and function return type explicitly. Scala is enough smart to deduce the type of data. The return type of function is determined by the type of last expression present in the function.</p>\n\n\n\n<h3>Singleton object</h3>\n\n\n\n<p>In Scala, there are no static variables or methods. Scala uses singleton object, which is essentially class with only one object in the source file. Singleton object is declared by using object instead of class keyword.</p>\n\n\n\n<h3>Immutability</h3>\n\n\n\n<p>Scala uses immutability concept. Each declared variable is immutable by default. Immutable means you can&#8217;t modify its value. You can also create mutable variables which can be changed.</p>\n\n\n\n<p>Immutable data helps to manage concurrency control which requires managing data.</p>\n\n\n\n<h3>Lazy Computation</h3>\n\n\n\n<p>In Scala, computation is lazy by default. Scala evaluates expressions only when they are required. You can declare a lazy variable by using lazy keyword. It is used to increase performance.</p>\n\n\n\n<h3>Case classes and Pattern matching</h3>\n\n\n\n<p>Scala case classes are just regular classes which are immutable by default and decomposable through pattern matching.</p>\n\n\n\n<p>All the parameters listed in the case class are public and immutable by default.</p>\n\n\n\n<p>Case classes support pattern matching. So, you can write more logical code.</p>\n\n\n\n<h3>Concurrency control</h3>\n\n\n\n<p>Scala provides standard library which includes the actor model. You can write concurrency code by using actor. Scala provides one more platform and tool to deal with concurrency known as Akka. Akka is a separate open source framework that provides actor-based concurrency. Akka actors may be distributed or combined with software transactional memory.</p>\n\n\n\n<h3>String Interpolation</h3>\n\n\n\n<p>Since Scala 2.10.0, Scala offers a new mechanism to create strings from your data. It is called string interpolation. String interpolation allows users to embed variable references directly in processed string literals. Scala provides three string interpolation methods: s, f and raw.</p>\n\n\n\n<h3>Higher Order Functions</h3>\n\n\n\n<p>Higher order function is a function that either takes a function as argument or returns a function. In other words, we can say a function which works with another function is called higher order function.</p>\n\n\n\n<p>Higher order function allows you to create function composition, lambda function or anonymous function etc.</p>\n\n\n\n<h3>Traits</h3>\n\n\n\n<p>A trait is like an interface with a partial implementation. In Scala, trait is a collection of abstract and non-abstract methods. You can create trait that can have all abstract methods or some abstract and some non-abstract methods.</p>\n\n\n\n<p>Traits are compiled into Java interfaces with corresponding implementation classes that hold any methods implemented in the traits.</p>\n\n\n\n<h3>Rich Set of Collection</h3>\n\n\n\n<p>Scala provides rich set of collection library. It contains classes and traits to collect data. These collections can be mutable or immutable. You can use it according to your requirement. Scala.collection.mutable package contains all the mutable collections. You can add, remove and update data while using this package.</p>\n\n\n\n<p>Scala.collection.immutable package contains all the immutable collections. It does not allow you to modify data.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are following features of scala: Type inference Singleton object Immutability Lazy computation Case classes and Pattern matching Concurrency control String interpolation Higher order function Traits Rich collection set Type Inference In Scala, you don&#8217;t require to mention data type and function return type explicitly. Scala is enough smart to deduce the type of data. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/190"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=190"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/190/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 191,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/190/revisions/191"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=190"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=190"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=190"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 192,
    "date": "2020-10-17T11:51:56",
    "date_gmt": "2020-10-17T11:51:56",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=192"
    },
    "modified": "2020-10-17T11:51:56",
    "modified_gmt": "2020-10-17T11:51:56",
    "slug": "simple-program-of-scala",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/simple-program-of-scala/",
    "title": {
      "rendered": "Simple Program of Scala"
    },
    "content": {
      "rendered": "\n<p>In this tutorial, you will learn how to write scala programs. To write scala program you need to install scala on your machine. You must have latest jdk installed on your machine because scala compiler creates .class file which is a byte code. Scala interpreter executes this byte code by using jvm (Java Virtual Machine).</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: Hello Scala</h2>\n\n\n\n<p>The following code example is a simple scala program.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object ScalaExample{  \r\n    def main(args:Array&#91;String]){  \r\n        println \"Hello Scala\"  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>In the above code, we have created an object ScalaExample. It contains a main method and display message using println method.</p>\n\n\n\n<p>This file is saved with the name&nbsp;<strong>ScalaExample.scala.</strong></p>\n\n\n\n<p>Command to compile this code is:&nbsp;<strong>scalac ScalaExample.scala</strong></p>\n\n\n\n<p>Command to execute the compiled code is:&nbsp;<strong>scala ScalaExample</strong></p>\n\n\n\n<p>After executing code it yields the following output.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello Scala\n</code></pre>\n\n\n\n<p>You can also use IDE (Integrated Development Environment) for executing scala code.</p>\n\n\n\n<p>The above example is written using object oriented approach. You can also use functional approach to write code in scala.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Example: Hello Scala</h3>\n\n\n\n<p>Below is the example by using functional approach.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def scalaExample{  \r\n    println(\"Hello Scala\")  \r\n}  \r\nscalaExample            // Calling of function  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello Scala</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this tutorial, you will learn how to write scala programs. To write scala program you need to install scala on your machine. You must have latest jdk installed on your machine because scala compiler creates .class file which is a byte code. Scala interpreter executes this byte code by using jvm (Java Virtual Machine). [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/192"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=192"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/192/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 193,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/192/revisions/193"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=192"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=192"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=192"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 194,
    "date": "2020-10-17T11:52:52",
    "date_gmt": "2020-10-17T11:52:52",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=194"
    },
    "modified": "2020-10-17T11:52:52",
    "modified_gmt": "2020-10-17T11:52:52",
    "slug": "scala-variables-and-data-types",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-variables-and-data-types/",
    "title": {
      "rendered": "Scala Variables and Data Types"
    },
    "content": {
      "rendered": "\n<p>Variable is a name which is used to refer memory location. You can create mutable and immutable variable in scala. Let&#8217;s see how to declare variable.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Mutable Variable</h2>\n\n\n\n<p>You can create mutable variable using&nbsp;<strong>var</strong>&nbsp;keyword. It allows you to change value after declaration of variable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var data = 100  \r\ndata = 101  // It works, No error.  </code></pre>\n\n\n\n<p>In the above code,&nbsp;<strong>var</strong>&nbsp;is a keyword and data is a variable name. It contains an integer value 100. Scala is a type infers language so you don?t need to specify data type explicitly. You can also mention data type of variable explicitly as we have used in below.</p>\n\n\n\n<h3>Another example of variable</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var data:Int = 100  // Here, we have mentioned Int followed by : (colon)  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Immutable Variable</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var data = 100  \r\ndata = 101  // Error: reassignment to val  </code></pre>\n\n\n\n<p>The above code throws an error because we have changed content of immutable variable, which is not allowed. So if you want to change content then it is advisable to use&nbsp;<strong>var</strong>&nbsp;instead of&nbsp;<strong>val</strong>.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Data Types in Scala</h2>\n\n\n\n<p>Data types in scala are much similar to java in terms of their storage, length, except that in scala there is no concept of primitive data types every type is an object and starts with capital letter. A table of data types is given below. You will see their uses further.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Data Type</th><th>Default Value</th><th>Size</th></tr><tr><td>Boolean</td><td>False</td><td>True or false</td></tr><tr><td>Byte</td><td>0</td><td>8 bit signed value (-2<sup>7</sup>&nbsp;to 2<sup>7</sup>-1)</td></tr><tr><td>Short</td><td>0</td><td>16 bit signed value(-2<sup>15</sup>&nbsp;to 2<sup>15</sup>-1)</td></tr><tr><td>Char</td><td>&#8216;\\u0000&#8217;</td><td>16 bit unsigned Unicode character(0 to 2<sup>16</sup>-1)</td></tr><tr><td>Int</td><td>0</td><td>32 bit signed value(-2<sup>31</sup>&nbsp;to 2<sup>31</sup>-1)</td></tr><tr><td>Long</td><td>0L</td><td>64 bit signed value(-2<sup>63</sup>&nbsp;to 2<sup>63</sup>-1)</td></tr><tr><td>Float</td><td>0.0F</td><td>32 bit IEEE 754 single-precision float</td></tr><tr><td>Double</td><td>0.0D</td><td>64 bit IEEE 754 double-precision float</td></tr><tr><td>String</td><td>Null</td><td>A sequence of characters</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Variable is a name which is used to refer memory location. You can create mutable and immutable variable in scala. Let&#8217;s see how to declare variable. Mutable Variable You can create mutable variable using&nbsp;var&nbsp;keyword. It allows you to change value after declaration of variable. In the above code,&nbsp;var&nbsp;is a keyword and data is a variable [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/194"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=194"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/194/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 195,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/194/revisions/195"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=194"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=194"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=194"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 196,
    "date": "2020-10-17T11:54:54",
    "date_gmt": "2020-10-17T11:54:54",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=196"
    },
    "modified": "2020-10-17T11:54:54",
    "modified_gmt": "2020-10-17T11:54:54",
    "slug": "scala-conditional-expressions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-conditional-expressions/",
    "title": {
      "rendered": "Scala Conditional Expressions"
    },
    "content": {
      "rendered": "\n<p>Scala provides if statement to test the conditional expressions. It tests boolean conditional expression which can be either true or false. Scala use various types of if else statements.</p>\n\n\n\n<ul><li>If statement</li><li>If-else statement</li><li>Nested if-else statement</li><li>If-else-if ladder statement</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala if statement</h2>\n\n\n\n<p>The scala if statement is used to test condition in scala. If block executes only when condition is true otherwise execution of if block is skipped.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition){  \r\n    // Statements to be executed  \r\n} </code></pre>\n\n\n\n<h3>Flowchart</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-if-statement1.png\" alt=\"Scala If statement 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: If Statement</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var age:Int = 20;  \r\nif(age > 18){  \r\n    println (\"Age is greate than 18\")  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Age is greate than 18</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala If-Else Statement</h2>\n\n\n\n<p>The scala if-else statement tests the condition. If the condition is true, if block executes otherwise else block executes.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition){  \r\n    // If block statements to be executed  \r\n} else {  \r\n    // Else bock statements to be executed  \r\n}  </code></pre>\n\n\n\n<h3>Flowchart</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-if-statement2.png\" alt=\"Scala If statement 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala if-else example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var number:Int = 21  \r\nif(number%2==0){  \r\n    println(\"Even number\")  \r\n}else{  \r\n    println(\"Odd number\")  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Odd number\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala If-Else-If Ladder Statement</h2>\n\n\n\n<p>The scala if-else-if ladder executes one condition among the multiple conditional statements.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (condition1){    \r\n//Code to be executed if condition1 is true    \r\n} else if (condition2){    \r\n//Code to be executed if condition2 is true    \r\n} else if (condition3){    \r\n//Code to be executed if condition3 is true    \r\n}    \r\n...    \r\nelse {    \r\n//Code to be executed if all the conditions are false    \r\n}    </code></pre>\n\n\n\n<h3>Flowchart</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-if-statement3.png\" alt=\"Scala If statement 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala If-Else-If Ladder Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var number:Int = 85  \r\nif(number>=0 &amp;&amp; number&lt;50){  \r\n    println (\"fail\")  \r\n}  \r\nelse if(number>=50 &amp;&amp; number&lt;60){  \r\n    println(\"D Grade\")  \r\n}  \r\nelse if(number>=60 &amp;&amp; number&lt;70){  \r\n    println(\"C Grade\")  \r\n}  \r\nelse if(number>=70 &amp;&amp; number&lt;80){  \r\n    println(\"B Grade\")  \r\n}  \r\nelse if(number>=80 &amp;&amp; number&lt;90){  \r\n    println(\"A Grade\")  \r\n}  \r\nelse if(number>=90 &amp;&amp; number&lt;=100){  \r\n    println(\"A+ Grade\")  \r\n}  \r\nelse println (\"Invalid\")  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A Grade\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala If Statement as better alternative of Ternary Operators</h2>\n\n\n\n<p>In scala, you can assign if statement result to a function. Scala does not have ternary operator concept like C/C++ but provides more powerful&nbsp;<em>if</em>&nbsp;which can return value. Let&#8217;s see an example</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n      val result = checkIt(-10)  \r\n      println (result)  \r\n   }  \r\n    def checkIt (a:Int)  =  if (a >= 0) 1 else -1    // Passing a if expression value to function  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>-1</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala provides if statement to test the conditional expressions. It tests boolean conditional expression which can be either true or false. Scala use various types of if else statements. If statement If-else statement Nested if-else statement If-else-if ladder statement Scala if statement The scala if statement is used to test condition in scala. If block [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/196"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=196"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/196/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 197,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/196/revisions/197"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=196"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=196"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=196"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 198,
    "date": "2020-10-17T11:56:03",
    "date_gmt": "2020-10-17T11:56:03",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=198"
    },
    "modified": "2020-10-17T11:56:03",
    "modified_gmt": "2020-10-17T11:56:03",
    "slug": "scala-pattern-matching",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-pattern-matching/",
    "title": {
      "rendered": "Scala Pattern Matching"
    },
    "content": {
      "rendered": "\n<p>Pattern matching is a feature of scala. It works same as switch case in other programming languages. It matches best case available in the pattern.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Pattern Matching Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        var a = 1  \r\n        a match{  \r\n            case 1 => println(\"One\")  \r\n            case 2 => println(\"Two\")  \r\n            case _ => println(\"No\")  \r\n        }  \r\n        }  \r\n}  </code></pre>\n\n\n\n<p>In the above example, we have implemented a pattern matching.</p>\n\n\n\n<p>Here, match using a variable named&nbsp;<em>a</em>. This variable matches with best available case and prints output. Underscore (_) is used in the last case for making it default case.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>One\n</code></pre>\n\n\n\n<p>Match expression can return case value also. In next example, we are defining method having a match with cases for any type of data. Any is a class in scala which is a super class of all data types and deals with all type of data. Let&#8217;s see an example.</p>\n\n\n\n<h2>Scala Pattern Matching Example2</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        var result = search (\"Hello\")  \r\n        print(result)  \r\n    }  \r\n    def search (a:Any):Any = a match{  \r\n        case 1  => println(\"One\")  \r\n        case \"Two\" => println(\"Two\")  \r\n        case \"Hello\" => println(\"Hello\")  \r\n        case _ => println(\"No\")  \r\n              \r\n        }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Pattern matching is a feature of scala. It works same as switch case in other programming languages. It matches best case available in the pattern. Let&#8217;s see an example. Scala Pattern Matching Example In the above example, we have implemented a pattern matching. Here, match using a variable named&nbsp;a. This variable matches with best available [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/198"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=198"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/198/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 199,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/198/revisions/199"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=198"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=198"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=198"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 200,
    "date": "2020-10-17T11:57:35",
    "date_gmt": "2020-10-17T11:57:35",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=200"
    },
    "modified": "2020-10-17T11:57:35",
    "modified_gmt": "2020-10-17T11:57:35",
    "slug": "scala-while-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-while-loop/",
    "title": {
      "rendered": "Scala while loop"
    },
    "content": {
      "rendered": "\n<p>In Scala, while loop is used to iterate code till the specified condition. It tests boolean expression and iterates again and again. You are recommended to use while loop if you don&#8217;t know number of iterations prior.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>while(boolean expression){  \r\n    // Statements to be executed  \r\n}</code></pre>\n\n\n\n<h3>Flowchart:</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-while-loop1.png\" alt=\"Scala While loop 1\"/></figure>\n\n\n\n<h2>Scala while loop Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n      var a = 10;                       // Initialization  \r\n      while( a&lt;=20 ){                // Condition  \r\n         println(a);  \r\n         a = a+2                        // Incrementation  \r\n      }  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n12\n14\n16\n18\n20\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Infinite While Loop Example</h2>\n\n\n\n<p>You can also create an infinite while loop. In the below program, we just passed&nbsp;<em>true</em>&nbsp;in while loop. Be careful, while using infinite loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n      var a = 10;           // Initialization  \r\n      while( true ){        // Condition  \r\n         println(a);  \r\n         a = a+2            // Incrementation  \r\n      }  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n12\n14\n16\n...\nCtr+Z\t// To stop execution\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala do-while loop example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        var a = 10;         // Initialization  \r\n        do {  \r\n            println( a );  \r\n            a = a + 2;      // Increment  \r\n        }  \r\n        while( a &lt;= 20 )     // Condition  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n12\n14\n16\n18\n20\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Infinite do-while loop</h2>\n\n\n\n<p>In scala, you can create infinite do-while loop. To create infinite loop just pass&nbsp;<em>true</em>&nbsp;literal in loop condition.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        var a = 10;                         // Initialization  \r\n        do {  \r\n            println( a );  \r\n            a = a + 2;                      // Increment  \r\n        }  \r\n        while( true)                         // Condition  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n12\n14\n16\n...\nCtrl+Z\t// To stop execution of program</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Scala, while loop is used to iterate code till the specified condition. It tests boolean expression and iterates again and again. You are recommended to use while loop if you don&#8217;t know number of iterations prior. Syntax Flowchart: Scala while loop Example Output: Scala Infinite While Loop Example You can also create an infinite [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/200"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=200"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/200/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 201,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/200/revisions/201"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=200"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=200"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=200"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 202,
    "date": "2020-10-17T11:59:43",
    "date_gmt": "2020-10-17T11:59:43",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=202"
    },
    "modified": "2020-10-17T11:59:43",
    "modified_gmt": "2020-10-17T11:59:43",
    "slug": "scala-for-loop",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-for-loop/",
    "title": {
      "rendered": "Scala for loop"
    },
    "content": {
      "rendered": "\n<p>In scala,&nbsp;<em>for loop</em>&nbsp;is known as for-comprehensions. It can be used to iterate, filter and return an iterated collection. The for-comprehension looks a bit like a for-loop in imperative languages, except that it constructs a list of the results of all iterations.</p>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for( i &lt;- range){  \r\n    // statements to be executed  \r\n}  </code></pre>\n\n\n\n<p>In the above syntax, range is a value which has&nbsp;<em>start</em>&nbsp;and&nbsp;<em>end</em>&nbsp;point. You can pass range by using&nbsp;<strong>to</strong>&nbsp;or&nbsp;<strong>until</strong>&nbsp;keyword.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala for-loop example by using&nbsp;<em>to</em>&nbsp;keyword</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        for( a &lt;- 1 to 10 ){  \r\n         println(a);  \r\n      }  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>In the below example,&nbsp;<em>until</em>&nbsp;is used instead of&nbsp;<em>to</em>. The major difference between&nbsp;<em>until</em>&nbsp;and&nbsp;<em>to</em>&nbsp;is,&nbsp;<em>to</em>&nbsp;includes start and end value given in the range, while&nbsp;<em>until</em>&nbsp;excludes last value of the range. So, the below example will print only 1 to 9.</p>\n\n\n\n<h2>Scala for-loop Example by using <em>until</em> keyword</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        for( a &lt;- 1 until 10 ){  \r\n         println(a);  \r\n      }  \r\n   }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n</code></pre>\n\n\n\n<p>It is helpful to apply&nbsp;<em>until</em>&nbsp;keyword when you are iterating string or array, because array range is 0 to n-1.&nbsp;<em>until</em>&nbsp;does not exceed to n-1. So, your code will not complain of upper range.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala for-loop filtering Example</h2>\n\n\n\n<p>You can use&nbsp;<em>for</em>&nbsp;to filter your data. In the below example, we are filtering our data by passing a conditional expression. This program prints only even values in the given range.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        for( a &lt;- 1 to 10 if a%2==0 ){  \r\n         println(a);  \r\n      }  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2\n4\n6\n8\n10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala for-loop Example by using&nbsp;<em>yield</em>&nbsp;keyword</h2>\n\n\n\n<p>In the above example, we have used <em>yield</em> keyword which returns a result after completing of loop iterations. The for use buffer internally to store iterated result and after finishing all iterations it yields the final result from that buffer. It does not work like imperative loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        var result = for( a &lt;- 1 to 10) yield a  \r\n        for(i&lt;-result){  \r\n            println(i)  \r\n        }  \r\n   }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala for-loop in Collection</h2>\n\n\n\n<p>In scala, you can iterate collections like list, sequence etc, either by using for each loop or for-comprehensions.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<h2>Scala for- loop Example for Iterating Collection</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        var list = List(1,2,3,4,5,6,7,8,9)          // Creating a list  \r\n        for( i &lt;- list){                         // Iterating the list  \r\n            println(i)  \r\n        }  \r\n          \r\n   }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala for-each loop Example for Iterating Collection</h2>\n\n\n\n<p>In the below code we have use three approaches of for-each loop. You can implement any of them according to your need.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        var list = List(1,2,3,4,5,6,7,8,9)  // Creating a list  \r\n        list.foreach{  \r\n            println     // Print each element  \r\n        }  \r\n        list.foreach(print)  \r\n        println  \r\n        list.foreach((element:Int)=>print(element+\" \"))      // Explicitly mentioning type of elements  \r\n   }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\n7\n8\n9\n123456789\n1 2 3 4 5 6 7 8 9\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala for-loop Example using&nbsp;<em>by</em>&nbsp;keyword</h2>\n\n\n\n<p>In the above example, we have used <em>by</em> keyword. The <em>by</em> keyword is used to skip the iteration. When you code like: by 2 it means, this loop will skip all even iterations of loop.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        for(i&lt;-1 to 10 by 2){  \r\n            println(i)  \r\n        }  \r\n   }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n3\n5\n7\n9</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In scala,&nbsp;for loop&nbsp;is known as for-comprehensions. It can be used to iterate, filter and return an iterated collection. The for-comprehension looks a bit like a for-loop in imperative languages, except that it constructs a list of the results of all iterations. Syntax In the above syntax, range is a value which has&nbsp;start&nbsp;and&nbsp;end&nbsp;point. You can pass [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/202"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=202"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/202/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 203,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/202/revisions/203"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=202"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=202"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=202"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 204,
    "date": "2020-10-17T12:00:40",
    "date_gmt": "2020-10-17T12:00:40",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=204"
    },
    "modified": "2020-10-17T12:00:40",
    "modified_gmt": "2020-10-17T12:00:40",
    "slug": "scala-break",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-break/",
    "title": {
      "rendered": "Scala Break"
    },
    "content": {
      "rendered": "\n<p>Break is used to break a loop or program execution. It skips the current execution. Inside inner loop it breaks the execution of inner loop.</p>\n\n\n\n<p>In scala, there is no break statement but you can do it by using break method and by importing&nbsp;<em>scala.util.control.Breaks._</em>&nbsp;package. Let&#8217;s see an example.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Break Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.util.control.Breaks._                  // Importing  package  \r\nobject MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        breakable {                                 // Breakable method to avoid exception  \r\n            for(i&lt;-1 to 10 by 2){  \r\n                if(i==7)   \r\n                    break                           // Break used here  \r\n                else  \r\n                    println(i)  \r\n            }  \r\n        }  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n3\n5\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Break Example: Break inner Loop</h2>\n\n\n\n<p>You can use break statement to terminate execution of inner loop in nested loop.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.util.control.Breaks._  \r\nobject MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        for(i &lt;- 1 to 3){  \r\n            breakable {   \r\n                for(j &lt;- 1 to 3){  \r\n                    if(i == 2 &amp; j == 2 )   \r\n                       break  \r\n                    println(i+\" \"+j)  \r\n                }  \r\n            }  \r\n        }  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 1\n1 2\n1 3\n2 1\n3 1\n3 2\n3 3</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Break is used to break a loop or program execution. It skips the current execution. Inside inner loop it breaks the execution of inner loop. In scala, there is no break statement but you can do it by using break method and by importing&nbsp;scala.util.control.Breaks._&nbsp;package. Let&#8217;s see an example. Scala Break Example Output: Scala Break Example: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/204"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=204"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/204/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 205,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/204/revisions/205"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=204"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=204"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=204"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 206,
    "date": "2020-10-17T12:01:55",
    "date_gmt": "2020-10-17T12:01:55",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=206"
    },
    "modified": "2020-10-17T12:01:55",
    "modified_gmt": "2020-10-17T12:01:55",
    "slug": "scala-comments",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-comments/",
    "title": {
      "rendered": "Scala Comments"
    },
    "content": {
      "rendered": "\n<p>The scala comments are statements which are not executed by the compiler or interpreter. The comments can be used to provide information or explanation about the variable, method, class or any statement. It can also be used to hide program code details.</p>\n\n\n\n<p>In scala, there are three types of comments</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Single line comment\r\nMultiline comment\r\nDocumentation comment</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Single Line Comment Example</h2>\n\n\n\n<p>Single line comment is used to comment single line of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Example of single line comment.  \r\nobject MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n       var a = 1           // Here, a is a variable  \r\n       println(a)       \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Multiline Comment</h2>\n\n\n\n<p>Multiline comment is used to comment multiple lines of code in the program.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>// Example of multi line comment.  \r\nobject MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n       var a = 1             \r\n       println(a)       \r\n    }  \r\n    /* \r\n    In the main method, we have created a variable named a \r\n    and printed it \r\n    */  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Documentation Comment Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>// Example of documentation comment.  \r\nobject MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n       var a = 1             \r\n       println(a)       \r\n    }  \r\n    /** \r\n     *  In the main method, we have created a variable named a \r\n     *  and printed it \r\n     *  \r\n     */  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The scala comments are statements which are not executed by the compiler or interpreter. The comments can be used to provide information or explanation about the variable, method, class or any statement. It can also be used to hide program code details. In scala, there are three types of comments Scala Single Line Comment Example [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/206"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=206"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/206/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 207,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/206/revisions/207"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=206"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=206"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=206"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 208,
    "date": "2020-10-17T12:03:54",
    "date_gmt": "2020-10-17T12:03:54",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=208"
    },
    "modified": "2020-10-17T12:03:54",
    "modified_gmt": "2020-10-17T12:03:54",
    "slug": "scala-functions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-functions/",
    "title": {
      "rendered": "Scala Functions"
    },
    "content": {
      "rendered": "\n<p>Scala supports functional programming approach. It provides rich set of built-in functions and allows you to create user defined functions also.</p>\n\n\n\n<p>In scala, functions are first class values. You can store function value, pass function as an argument and return function as a value from other function. You can create function by using&nbsp;<strong>def</strong>&nbsp;keyword. You must mention return type of parameters while defining function and return type of a function is optional. If you don&#8217;t specify return type of a function, default return type is Unit.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Function Declaration Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>def functionName(parameters : typeofparameters) : returntypeoffunction = {  \r\n// statements to be executed  \r\n}  </code></pre>\n\n\n\n<p>In the above syntax, = (equal) operator is looking strange but don&#8217;t worry scala has defined it as:</p>\n\n\n\n<p>You can create function with or without = (equal) operator. If you use it, function will return value. If you don&#8217;t use it, your function will not return anything and will work like subroutine.</p>\n\n\n\n<p>Scala functions don?t use return statement. Return type infers by compiler from the last expression or statement present in the function.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Function Example without using = Operator</h2>\n\n\n\n<p>The function defined below is also known as non parameterized function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        functionExample()           // Calling function  \r\n    }  \r\n    def functionExample()  {        // Defining a function  \r\n          println(\"This is a simple function\")  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is a simple function\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Function Example with = Operator</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) {  \r\n        var result = functionExample()          // Calling function  \r\n        println(result)  \r\n    }  \r\n    def functionExample() = {       // Defining a function  \r\n          var a = 10  \r\n          a  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Parameterized Function Example</h2>\n\n\n\n<p>when using parameterized function you must mention type of parameters explicitly otherwise compiler throws an error and your code fails to compile.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) = {  \r\n        functionExample(10,20)   \r\n    }  \r\n    def functionExample(a:Int, b:Int) = {  \r\n          var c = a+b  \r\n          println(c)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>30\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Recursion Function</h2>\n\n\n\n<p>In the program given below, we are multiplying two numbers by using recursive function.</p>\n\n\n\n<p>In scala, you can create recursive functions also. Be careful while using recursive function. There must be a base condition to terminate program safely.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) = {  \r\n        var result = functionExample(15,2)   \r\n        println(result)  \r\n    }  \r\n    def functionExample(a:Int, b:Int):Int = {  \r\n        if(b == 0)          // Base condition  \r\n         0  \r\n        else  \r\n         a+functionExample(a,b-1)  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>30\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Function Parameter with Default Value</h2>\n\n\n\n<p>Scala provides a feature to assign default values to function parameters. It helps in the scenario when you don&#8217;t pass value during function calling. It uses default values of parameters.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Function Parameter example with default value</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) = {  \r\n        var result1 = functionExample(15,2)     // Calling with two values  \r\n        var result2 = functionExample(15)   // Calling with one value  \r\n        var result3 = functionExample()     // Calling without any value  \r\n        println(result1+\"\\n\"+result2+\"\\n\"+result3)  \r\n    }  \r\n    def functionExample(a:Int = 0, b:Int = 0):Int = {   // Parameters with default values as 0  \r\n        a+b  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>17\n15\n0\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Function Named Parameter Example</h2>\n\n\n\n<p>In scala function, you can specify the names of parameters during calling the function. In the given example, you can notice that parameter names are passing during calling. You can pass named parameters in any order and can also pass values only.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) = {  \r\n        var result1 = functionExample(a = 15, b = 2)    // Parameters names are passed during call  \r\n        var result2 = functionExample(b = 15, a = 2)    // Parameters order have changed during call  \r\n        var result3 = functionExample(15,2)             // Only values are passed during call  \r\n        println(result1+\"\\n\"+result2+\"\\n\"+result3)  \r\n    }  \r\n    def functionExample(a:Int, b:Int):Int = {  \r\n        a+b  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>17\n17\n17</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala supports functional programming approach. It provides rich set of built-in functions and allows you to create user defined functions also. In scala, functions are first class values. You can store function value, pass function as an argument and return function as a value from other function. You can create function by using&nbsp;def&nbsp;keyword. You must [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/208"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=208"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/208/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 209,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/208/revisions/209"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=208"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=208"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=208"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 210,
    "date": "2020-10-17T12:06:21",
    "date_gmt": "2020-10-17T12:06:21",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=210"
    },
    "modified": "2020-10-17T12:06:21",
    "modified_gmt": "2020-10-17T12:06:21",
    "slug": "scala-higher-order-functions",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-higher-order-functions/",
    "title": {
      "rendered": "Scala Higher Order Functions"
    },
    "content": {
      "rendered": "\n<p>Higher order function is a function that either takes a function as argument or returns a function. In other words we can say a function which works with function is called higher order function.</p>\n\n\n\n<p>Higher order function allows you to create function composition, lambda function or anonymous function etc.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: Passing a Function as Parameter in a Function</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) = {  \r\n     functionExample(25, multiplyBy2)                   // Passing a function as parameter  \r\n    }  \r\n    def functionExample(a:Int, f:Int=>AnyVal):Unit = {  \r\n        println(f(a))                                   // Calling that function   \r\n    }  \r\n    def multiplyBy2(a:Int):Int = {  \r\n        a*2  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>60\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: Function Composition</h2>\n\n\n\n<p>In scala, functions can be composed from other functions. It is a process of composing in which a function represents the application of two composed functions.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) = {  \r\n     var result = multiplyBy2(add2(10))      // Function composition  \r\n     println(result)  \r\n    }  \r\n    def add2(a:Int):Int = {  \r\n        a+2  \r\n    }  \r\n      \r\n    def multiplyBy2(a:Int):Int = {  \r\n        a*2  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>24\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Anonymous (lambda) Function</h2>\n\n\n\n<p>Anonymous function is a function that has no name but works as a function. It is good to create an anonymous function when you don&#8217;t want to reuse it latter.</p>\n\n\n\n<p>You can create anonymous function either by using =&gt; (rocket) or _ (underscore) wild card in scala.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Anonymous function Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n   def main(args: Array&#91;String]) = {  \r\n     var result1 = (a:Int, b:Int) => a+b        // Anonymous function by using => (rocket)  \r\n     var result2 = (_:Int)+(_:Int)              // Anonymous function by using _ (underscore) wild card  \r\n     println(result1(10,10))  \r\n     println(result2(10,10))  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20\n20\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Multiline Expression</h2>\n\n\n\n<p>Expressions those are written in multiple lines are called multiline expression. In scala, be carefull while using multiline expressions.</p>\n\n\n\n<p>The following program explains about if we break an expression into multiline, the scala compiler throw a warning message.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Multiline Expression Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>def add1(a:Int, b:Int) = {  \r\n        a  \r\n        +b  \r\n    }  </code></pre>\n\n\n\n<p>The above program does not evaluate complete expression and just return b here. So, be careful while using multiline expressions.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>MainObject.scala:3: warning: a pure expression does nothing in statement \nposition; you may be omitting necessary parentheses\n        a\n        ^\none warning found\n\n10\n</code></pre>\n\n\n\n<p>You can apply following ways to avoid above problem.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example Multiline Expression</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n    def add2(a:Int, b:Int) = {  \r\n        a+  \r\n        b  \r\n    }  \r\n    def add3(a:Int, b:Int) = {  \r\n        (a  \r\n        +b)  \r\n    }  \r\n    def main(args: Array&#91;String]) = {  \r\n        var result2 = add2(10,10)  \r\n        var result3 = add3(10,10)  \r\n        println(result2+\"\\n\"+result3)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20\n20\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Function Currying</h2>\n\n\n\n<p>In scala, method may have multiple parameter lists. When a method is called with a fewer number of parameter lists, then this will yield a function taking the missing parameter lists as its arguments.</p>\n\n\n\n<p>In other words it is a technique of transforming a function that takes multiple arguments into a function that takes a single argument.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Function Currying Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n    def add(a:Int)(b:Int) = {  \r\n        a+b  \r\n    }  \r\n    def main(args: Array&#91;String]) = {  \r\n        var result = add(10)(10)  \r\n        println(\"10 + 10 = \"+result)  \r\n        var addIt = add(10)_  \r\n        var result2 = addIt(3)  \r\n        println(\"10 + 3 = \"+result2)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Nested Functions</h2>\n\n\n\n<p>Scala is a first class function language which means it allows you to passing function, returning function, composing function, nested function etc. An example below explain about how to define and call nested functions.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Nested Functions Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject {  \r\n    def add(a:Int, b:Int, c:Int) = {  \r\n        def add2(x:Int,y:Int) = {  \r\n            x+y  \r\n        }  \r\n        add2(a,add2(b,c))  \r\n    }  \r\n    def main(args: Array&#91;String]) = {  \r\n        var result = add(10,10,10)  \r\n        println(result)  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>30\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Function with Variable Length Parameters</h2>\n\n\n\n<p>In scala, you can define function of variable length parameters. It allows you to pass any number of arguments at the time of calling the function.</p>\n\n\n\n<p>Let&#8217;s see an example.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: Function with Variable Length Parameters</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>def add(args: Int*) = {  \r\n    var sum = 0;  \r\n    for(a &lt;- args) sum+=a  \r\n    sum  \r\n}  \r\nvar sum = add(1,2,3,4,5,6,7,8,9);  \r\nprintln(sum);  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>45</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Higher order function is a function that either takes a function as argument or returns a function. In other words we can say a function which works with function is called higher order function. Higher order function allows you to create function composition, lambda function or anonymous function etc. Let&#8217;s see an example. Scala Example: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/210"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=210"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/210/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 211,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/210/revisions/211"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=210"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=210"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=210"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 214,
    "date": "2020-10-19T10:29:05",
    "date_gmt": "2020-10-19T10:29:05",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=214"
    },
    "modified": "2020-10-19T10:29:05",
    "modified_gmt": "2020-10-19T10:29:05",
    "slug": "scala-object-and-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-object-and-class/",
    "title": {
      "rendered": "Scala Object and Class"
    },
    "content": {
      "rendered": "\n<p>Unlike java, scala is a pure object oriented programming language. It allows us to create object and class so that you can develop object oriented applications.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Object</h2>\n\n\n\n<p>Object is a real world entity. It contains state and behavior. Laptop, car, cell phone are the real world objects. Object typically has two characteristics:</p>\n\n\n\n<p><strong>1) State</strong>: data values of an object are known as its state.</p>\n\n\n\n<p><strong>2) Behavior</strong>: functionality that an object performs is known as its behavior.</p>\n\n\n\n<p>Object in scala is an instance of class. It is also known as runtime entity.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Class</h2>\n\n\n\n<p>Class is a template or a blueprint. It is also known as collection of objects of similar type.</p>\n\n\n\n<p>In scala, a class can contain:</p>\n\n\n\n<ol><li>Data member</li><li>Member method</li><li>Constructor</li><li>Block</li><li>Nested class</li><li>Super class information etc.</li></ol>\n\n\n\n<p>You must initialize all instance variables in the class. There is no default scope. If you don&#8217;t specify access scope, it is public. There must be an object in which main method is defined. It provides starting point for your program. Here, we have created an example of class.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Sample Example of Class</h2>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \r\n    var id:Int = 0;                         // All fields must be initialized  \r\n    var name:String = null;  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new Student()               // Creating an object  \r\n        println(s.id+\" \"+s.name);  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 null\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Sample Example2 of Class</h2>\n\n\n\n<p>In scala, you can create class like this also. Here, constructor is created in class definition. This is called primary constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student(id:Int, name:String){     // Primary constructor  \r\n    def show(){  \r\n        println(id+\" \"+name)  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new Student(100,\"Martin\")   // Passing values to constructor  \r\n        s.show()                // Calling a function by using an object  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>100 Martin\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example of class that maintains the records of students</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student(id:Int, name:String){  \r\n    def getRecord(){  \r\n        println(id+\" \"+name);  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args: Array&#91;String]){  \r\n        var student1 = new Student(101,\"Raju\");  \r\n        var student2 = new Student(102,\"Martin\");  \r\n        student1.getRecord();  \r\n        student2.getRecord();  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Raju\n102 Martin\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Anonymous object</h2>\n\n\n\n<p>In scala, you can create anonymous object. An object which has no reference name is called anonymous object. It is good to create anonymous object when you don&#8217;t want to reuse it further.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Anonymous object Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Arithmetic{  \r\n    def add(a:Int, b:Int){  \r\n        var add = a+b;  \r\n        println(\"sum = \"+add);  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        new Arithmetic().add(10,10);  \r\n  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sum = 20</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Unlike java, scala is a pure object oriented programming language. It allows us to create object and class so that you can develop object oriented applications. Object Object is a real world entity. It contains state and behavior. Laptop, car, cell phone are the real world objects. Object typically has two characteristics: 1) State: data [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/214"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=214"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/214/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 215,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/214/revisions/215"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=214"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=214"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=214"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 216,
    "date": "2020-10-19T10:30:01",
    "date_gmt": "2020-10-19T10:30:01",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=216"
    },
    "modified": "2020-10-19T10:30:01",
    "modified_gmt": "2020-10-19T10:30:01",
    "slug": "scala-singleton-and-companion-object",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-singleton-and-companion-object/",
    "title": {
      "rendered": "Scala Singleton and Companion Object"
    },
    "content": {
      "rendered": "\n<h2>Scala Singleton Object</h2>\n\n\n\n<p>Singleton object is an object which is declared by using object keyword instead by class. No object is required to call methods declared inside singleton object.</p>\n\n\n\n<p>In scala, there is no static concept. So scala creates a singleton object to provide entry point for your program execution.<br>If you don&#8217;t create singleton object, your code will compile successfully but will not produce any output. Methods declared inside Singleton Object are accessible globally. A singleton object can extend classes and traits.</p>\n\n\n\n<h3>Scala Singleton Object Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>object Singleton{  \r\n    def main(args:Array&#91;String]){  \r\n        SingletonObject.hello()         // No need to create object.  \r\n    }  \r\n}  \r\n  \r\n  \r\nobject SingletonObject{  \r\n    def hello(){  \r\n        println(\"Hello, This is Singleton Object\")  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello, This is Singleton Object\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Companion Object</h2>\n\n\n\n<p>In scala, when you have a class with same name as singleton object, it is called companion class and the singleton object is called companion object.</p>\n\n\n\n<p>The companion class and its companion object both must be defined in the same source file.</p>\n\n\n\n<h3>Scala Companion Object Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class ComapanionClass{  \r\n    def hello(){  \r\n        println(\"Hello, this is Companion Class.\")  \r\n    }  \r\n}  \r\nobject CompanoinObject{  \r\n    def main(args:Array&#91;String]){  \r\n        new ComapanionClass().hello()  \r\n        println(\"And this is Companion Object.\")  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello, this is Companion Class.\nAnd this is Companion Object.</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala Singleton Object Singleton object is an object which is declared by using object keyword instead by class. No object is required to call methods declared inside singleton object. In scala, there is no static concept. So scala creates a singleton object to provide entry point for your program execution.If you don&#8217;t create singleton object, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/216"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=216"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/216/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 217,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/216/revisions/217"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=216"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=216"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=216"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 218,
    "date": "2020-10-19T10:30:57",
    "date_gmt": "2020-10-19T10:30:57",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=218"
    },
    "modified": "2020-10-19T10:30:57",
    "modified_gmt": "2020-10-19T10:30:57",
    "slug": "scala-case-classes-and-case-object",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-case-classes-and-case-object/",
    "title": {
      "rendered": "Scala Case Classes and Case Object"
    },
    "content": {
      "rendered": "\n<p>Scala case classes are just regular classes which are immutable by default and decomposable through pattern matching.</p>\n\n\n\n<p>It uses equal method to compare instance structurally. It does not use new keyword to instantiate object.</p>\n\n\n\n<p>All the parameters listed in the case class are public and immutable by default.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<ol><li><strong>case</strong>&nbsp;<strong>class</strong>&nbsp;className(parameters)&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Case Class Example</h3>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>case class CaseClass(a:Int, b:Int)  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var c =  CaseClass(10,10)       // Creating object of case class  \r\n        println(\"a = \"+c.a)               // Accessing elements of case class  \r\n        println(\"b = \"+c.b)  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 10\nb = 10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>Case classes support pattern matching. So, you can use that in patterns. Following is the example of case classes and pattern.</p>\n\n\n\n<h2>Scala Case Class and Pattern Matching Example</h2>\n\n\n\n<p>A case class which has no arguments is declared as case object instead of case class. case object is serializeable by default.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>trait SuperTrait  \r\ncase class CaseClass1(a:Int,b:Int) extends SuperTrait  \r\ncase class CaseClass2(a:Int) extends SuperTrait         // Case class  \r\ncase object CaseObject extends SuperTrait               // Case object  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        callCase(CaseClass1(10,10))  \r\n        callCase(CaseClass2(10))  \r\n        callCase(CaseObject)  \r\n    }  \r\n    def callCase(f:SuperTrait) = f match{  \r\n        case CaseClass1(f,g)=>println(\"a = \"+f+\" b =\"+g)  \r\n        case CaseClass2(f)=>println(\"a = \"+f)  \r\n        case CaseObject=>println(\"No Argument\")  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 10 b =10\na = 10\nNo Argument</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala case classes are just regular classes which are immutable by default and decomposable through pattern matching. It uses equal method to compare instance structurally. It does not use new keyword to instantiate object. All the parameters listed in the case class are public and immutable by default. Syntax case&nbsp;class&nbsp;className(parameters)&nbsp;&nbsp; Scala Case Class Example    [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/218"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=218"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/218/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 219,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/218/revisions/219"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=218"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=218"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=218"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 220,
    "date": "2020-10-19T10:32:17",
    "date_gmt": "2020-10-19T10:32:17",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=220"
    },
    "modified": "2020-10-19T10:32:17",
    "modified_gmt": "2020-10-19T10:32:17",
    "slug": "scala-constructor",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-constructor/",
    "title": {
      "rendered": "Scala Constructor"
    },
    "content": {
      "rendered": "\n<p>In scala, constructor is not special method. Scala provides primary and any number of auxiliary constructors. We have explained each in details in the following example.</p>\n\n\n\n<h2>Scala Default Primary Constructor</h2>\n\n\n\n<p>In scala, if you don&#8217;t specify primary constructor, compiler creates a constructor which is known as primary constructor. All the statements of class body treated as part of constructor. It is also known as default constructor.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Default Primary Constructor Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \r\nprintln(\"Hello from default constructor\");  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello from default constructor\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Primary Constructor</h2>\n\n\n\n<p>Scala provides a concept of primary constructor with the definition of class. You don&#8217;t need to define explicitly constructor if your code has only one constructor. It helps to optimize code. You can create primary constructor with zero or more parameters.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Primary Constructor Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student(id:Int, name:String){  \r\n    def showDetails(){  \r\n        println(id+\" \"+name);  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new Student(101,\"Rama\");  \r\n        s.showDetails()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Rama\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Secondary (auxiliary) Constructor</h2>\n\n\n\n<p>You can create any number of auxiliary constructors in a class. You must call primary constructor from inside the auxiliary constructor. this keyword is used to call constructor from other constructor. When calling other constructor make it first line in your constructor.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Secondary Constructor Example</h2>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student(id:Int, name:String){  \r\n    var age:Int = 0  \r\n    def showDetails(){  \r\n        println(id+\" \"+name+\" \"+age)  \r\n    }  \r\n    def this(id:Int, name:String,age:Int){  \r\n        this(id,name)       // Calling primary constructor, and it is first line  \r\n        this.age = age  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new Student(101,\"Rama\",20);  \r\n        s.showDetails()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Rama 20\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: Constructor Overloading</h2>\n\n\n\n<p>In scala, you can overload constructor. Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student(id:Int){  \r\n    def this(id:Int, name:String)={  \r\n        this(id)  \r\n        println(id+\" \"+name)  \r\n    }  \r\n    println(id)  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        new Student(101)  \r\n        new Student(100,\"India\")  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101\n100\n100 India</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In scala, constructor is not special method. Scala provides primary and any number of auxiliary constructors. We have explained each in details in the following example. Scala Default Primary Constructor In scala, if you don&#8217;t specify primary constructor, compiler creates a constructor which is known as primary constructor. All the statements of class body treated [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/220"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=220"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/220/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 221,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/220/revisions/221"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=220"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=220"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=220"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 222,
    "date": "2020-10-19T10:33:51",
    "date_gmt": "2020-10-19T10:33:51",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=222"
    },
    "modified": "2020-10-19T10:33:51",
    "modified_gmt": "2020-10-19T10:33:51",
    "slug": "scala-method-overloading",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-method-overloading/",
    "title": {
      "rendered": "Scala Method Overloading"
    },
    "content": {
      "rendered": "\n<p>Scala provides method overloading feature which allows us to define methods of same name but having different parameters or data types. It helps to optimize code.</p>\n\n\n\n<h3>Scala Method Overloading Example by using Different Parameters</h3>\n\n\n\n<p>In the following example, we have define two add methods with different number of parameters but having same data type.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Arithmetic{  \r\n    def add(a:Int, b:Int){  \r\n        var sum = a+b  \r\n        println(sum)  \r\n    }  \r\n    def add(a:Int, b:Int, c:Int){  \r\n        var sum = a+b+c  \r\n        println(sum)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a  = new Arithmetic();  \r\n        a.add(10,10);  \r\n        a.add(10,10,10);  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20\n30\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Method Overloading Example by using Different Data Type</h2>\n\n\n\n<p>In the following example, we have created two add method having same number of parameters but different data types.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Arithmetic{  \r\n    def add(a:Int, b:Int){  \r\n        var sum = a+b  \r\n        println(sum)  \r\n    }  \r\n    def add(a:Double, b:Double){  \r\n        var sum = a+b  \r\n        println(sum)  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Arithmetic()  \r\n        b.add(10,10)  \r\n        b.add(10.0,20.0)  \r\n  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>20\n30.0</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala provides method overloading feature which allows us to define methods of same name but having different parameters or data types. It helps to optimize code. Scala Method Overloading Example by using Different Parameters In the following example, we have define two add methods with different number of parameters but having same data type. Output: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/222"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=222"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/222/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 223,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/222/revisions/223"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=222"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=222"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=222"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 224,
    "date": "2020-10-19T10:34:58",
    "date_gmt": "2020-10-19T10:34:58",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=224"
    },
    "modified": "2020-10-19T10:34:58",
    "modified_gmt": "2020-10-19T10:34:58",
    "slug": "scala-this",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-this/",
    "title": {
      "rendered": "Scala this"
    },
    "content": {
      "rendered": "\n<p>In scala, this is a keyword and used to refer current object. You can call instance variables, methods, constructors by using this keyword.</p>\n\n\n\n<h3>Scala this Example</h3>\n\n\n\n<p>In the following example,&nbsp;<em>this</em>&nbsp;is used to call instance variables and primary constructotr.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ThisExample{  \r\n    var id:Int = 0  \r\n    var name: String = \"\"  \r\n    def this(id:Int, name:String){  \r\n        this()  \r\n        this.id = id  \r\n        this.name = name  \r\n    }  \r\n    def show(){  \r\n        println(id+\" \"+name)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var t = new ThisExample(101,\"Martin\")  \r\n        t.show()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Martin\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Constructor Calling by using&nbsp;<em>this</em>&nbsp;keyword</h2>\n\n\n\n<p>In the following example this is used to call constructor. It illustrates how we can call constructor from other constructor. You must make sure that this must be first statement in the constructor while calling to other constructor otherwise compiler throws an error.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student(name:String){  \r\n    def this(name:String, age:Int){  \r\n        this(name)  \r\n        println(name+\" \"+age)  \r\n    }      \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new Student(\"Rama\",100)  \r\n    }  \r\n}   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rama 100</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In scala, this is a keyword and used to refer current object. You can call instance variables, methods, constructors by using this keyword. Scala this Example In the following example,&nbsp;this&nbsp;is used to call instance variables and primary constructotr.   Output: Scala Constructor Calling by using&nbsp;this&nbsp;keyword In the following example this is used to call constructor. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/224"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=224"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/224/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 225,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/224/revisions/225"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=224"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=224"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=224"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 226,
    "date": "2020-10-19T10:37:46",
    "date_gmt": "2020-10-19T10:37:46",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=226"
    },
    "modified": "2020-10-19T10:37:46",
    "modified_gmt": "2020-10-19T10:37:46",
    "slug": "scala-inheritance",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-inheritance/",
    "title": {
      "rendered": "Scala Inheritance"
    },
    "content": {
      "rendered": "\n<p>Inheritance is an object oriented concept which is used to reusability of code. You can achieve inheritance by using extends keyword. To achieve inheritance a class must extend to other class. A class which is extended called super or parent class. a class which extends class is called derived or base class.<strong>Syntax</strong></p>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>class SubClassName extends SuperClassName(){  \r\n/* Write your code  \r\n*  methods and fields etc. \r\n */  \r\n }  </code></pre>\n\n\n\n<h3>Understand the Simple Example of Inheritance</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-inheritance1.png\" alt=\"Scala Inheritance 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Single Inheritance Example</h2>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>class Employee{  \r\n    var salary:Float = 10000  \r\n}  \r\n  \r\nclass Programmer extends Employee{  \r\n    var bonus:Int = 5000  \r\n    println(\"Salary = \"+salary)  \r\n    println(\"Bonus = \"+bonus)  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        new Programmer()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Salary = 10000.0\nBonus = 5000\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Types of Inheritance in Scala</h2>\n\n\n\n<p>Scala supports various types of inheritance including single, multilevel, multiple, and hybrid. You can use single, multilevel and hierarchal in your class. Multiple and hybrid can only be achieved by using traits. Here, we are representing all types of inheritance by using pictorial form.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-inheritance2.png\" alt=\"Scala Inheritance 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Multilevel Inheritance Example</h2>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class A{  \r\n    var salary1 = 10000  \r\n}  \r\n  \r\nclass B extends A{  \r\n    var salary2 = 20000  \r\n}  \r\n  \r\nclass C extends B{  \r\n    def show(){  \r\n        println(\"salary1 = \"+salary1)  \r\n        println(\"salary2 = \"+salary2)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){{    \r\n        var c = new C()  \r\n        c.show()  \r\n      \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>salary1 = 10000\nsalary2 = 20000</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Inheritance is an object oriented concept which is used to reusability of code. You can achieve inheritance by using extends keyword. To achieve inheritance a class must extend to other class. A class which is extended called super or parent class. a class which extends class is called derived or base class.Syntax Understand the Simple [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/226"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=226"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/226/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 227,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/226/revisions/227"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=226"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=226"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=226"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 228,
    "date": "2020-10-19T10:38:39",
    "date_gmt": "2020-10-19T10:38:39",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=228"
    },
    "modified": "2020-10-19T10:38:39",
    "modified_gmt": "2020-10-19T10:38:39",
    "slug": "scala-method-overriding",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-method-overriding/",
    "title": {
      "rendered": "Scala Method Overriding"
    },
    "content": {
      "rendered": "\n<p>When a subclass has the same name method as defined in the parent class, it is known as method overriding. When subclass wants to provide a specific implementation for the method defined in the parent class, it overrides method from parent class.</p>\n\n\n\n<p>In scala, you must use either override keyword or override annotation to override methods from parent class.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Method Overriding Example 1</h2>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>class Vehicle{  \r\n    def run(){  \r\n        println(\"vehicle is running\")  \r\n    }  \r\n}  \r\n  \r\nclass Bike extends Vehicle{  \r\n     override def run(){  \r\n        println(\"Bike is running\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Bike()  \r\n        b.run()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Bike is running\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Real example of method overriding</h2>\n\n\n\n<h3>Flowchart</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-inheritance3.png\" alt=\"Scala Inheritance 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Method Overriding Example 2</h2>\n\n\n\n<p>This example shows how subclasses override the method of parent class.</p>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>class Bank{    \r\n        def getRateOfInterest()={  \r\n            0  \r\n        }    \r\n    }    \r\n        \r\n    class SBI extends Bank{    \r\n        override def getRateOfInterest()={  \r\n         8  \r\n        }    \r\n    }    \r\n        \r\n    class ICICI extends Bank{    \r\n        override def getRateOfInterest()={  \r\n            7  \r\n        }    \r\n    }    \r\n      \r\n    class AXIS extends Bank{    \r\n        override def getRateOfInterest()={  \r\n            9  \r\n        }    \r\n    }    \r\n        \r\n    object MainObject{    \r\n        def main(args:Array&#91;String]){    \r\n            var s=new SBI();    \r\n            var i=new ICICI();    \r\n            var a=new AXIS();    \r\n            println(\"SBI Rate of Interest: \"+s.getRateOfInterest());    \r\n            println(\"ICICI Rate of Interest: \"+i.getRateOfInterest());    \r\n            println(\"AXIS Rate of Interest: \"+a.getRateOfInterest());    \r\n        }    \r\n    }    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>SBI Rate of Interest: 8\nICICI Rate of Interest: 7\nAXIS Rate of Interest: 9</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>When a subclass has the same name method as defined in the parent class, it is known as method overriding. When subclass wants to provide a specific implementation for the method defined in the parent class, it overrides method from parent class. In scala, you must use either override keyword or override annotation to override [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/228"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=228"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/228/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 229,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/228/revisions/229"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=228"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=228"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=228"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 230,
    "date": "2020-10-19T10:39:55",
    "date_gmt": "2020-10-19T10:39:55",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=230"
    },
    "modified": "2020-10-19T10:39:55",
    "modified_gmt": "2020-10-19T10:39:55",
    "slug": "scala-field-overriding",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-field-overriding/",
    "title": {
      "rendered": "Scala Field Overriding"
    },
    "content": {
      "rendered": "\n<p>In scala, you can override fields also but it has some rules that need to be followed. Below are some examples that illustrate how to override fields.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Field Overriding Example1</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>class Vehicle{  \r\n    var speed:Int = 60  \r\n  \r\n}  \r\nclass Bike extends Vehicle{  \r\n   var speed:Int = 100  \r\n    def show(){  \r\n        println(speed)  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Bike()  \r\n        b.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Error - variable speed needs 'override' modifier\n</code></pre>\n\n\n\n<p>In scala, you must use either override keyword or override annotation when you are overriding methods or fields of super class. If you don&#8217;t do this, compiler reports an error and stops execution of program.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Field Overriding Example2</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Vehicle{  \r\n     val speed:Int = 60  \r\n  \r\n}  \r\nclass Bike extends Vehicle{  \r\n   override val speed:Int = 100     // Override keyword  \r\n    def show(){  \r\n        println(speed)  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Bike()  \r\n        b.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>100\n</code></pre>\n\n\n\n<p>In scala, you can override only those variables which are declared by using val keyword in both classes. Below are some interesting examples which demonstrate the whole process.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Field Overriding Example3</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Vehicle{  \r\n     var speed:Int = 60  \r\n}  \r\nclass Bike extends Vehicle{  \r\n   override var speed:Int = 100  \r\n    def show(){  \r\n        println(speed)  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Bike()  \r\n        b.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>variable speed cannot override a mutable variable\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Field Overriding Example4</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Vehicle{  \r\n     val speed:Int = 60  \r\n  \r\n}  \r\n  \r\nclass Bike extends Vehicle{  \r\n   override var speed:Int = 100  \r\n    def show(){  \r\n        println(speed)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Bike()  \r\n        b.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Error - variable speed needs to be a stable, immutable value</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In scala, you can override fields also but it has some rules that need to be followed. Below are some examples that illustrate how to override fields. Scala Field Overriding Example1 Output: In scala, you must use either override keyword or override annotation when you are overriding methods or fields of super class. If you [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/230"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=230"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/230/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 231,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/230/revisions/231"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=230"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=230"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=230"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 232,
    "date": "2020-10-19T10:41:08",
    "date_gmt": "2020-10-19T10:41:08",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=232"
    },
    "modified": "2020-10-19T10:41:08",
    "modified_gmt": "2020-10-19T10:41:08",
    "slug": "scala-final",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-final/",
    "title": {
      "rendered": "Scala Final"
    },
    "content": {
      "rendered": "\n<p>Final is a keyword, which is used to prevent inheritance of super class members into derived class. You can declare final variables, methods and classes also.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Final Variable Example</h2>\n\n\n\n<p>You can&#8217;t override final variables in subclass. Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Vehicle{  \r\n     final val speed:Int = 60  \r\n}  \r\nclass Bike extends Vehicle{  \r\n   override val speed:Int = 100  \r\n    def show(){  \r\n        println(speed)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Bike()  \r\n        b.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Error - value speed cannot override final member \n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Final Method</h2>\n\n\n\n<p>Final method declare in the parent class can&#8217;t be override. You can make any method to final if you don&#8217;t want to get it overridden. Attempt to override final method will cause to a compile time error.</p>\n\n\n\n<h2>Scala Final Method Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class Vehicle{  \r\n     final def show(){  \r\n         println(\"vehicle is running\")  \r\n     }  \r\n}  \r\nclass Bike extends Vehicle{  \r\n   //override val speed:Int = 100  \r\n    override def show(){  \r\n        println(\"bike is running\")  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Bike()  \r\n        b.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>method show cannot override final member\n    override def show(){\n                 ^\none error found\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Final Class Example</h2>\n\n\n\n<p>You can also make final class. Final class can&#8217;t be inherited. If you make a class final, it can&#8217;t be extended further.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>final class Vehicle{  \r\n     def show(){  \r\n         println(\"vehicle is running\")  \r\n     }  \r\n  \r\n}  \r\n  \r\nclass Bike extends Vehicle{  \r\n       override def show(){  \r\n        println(\"bike is running\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var b = new Bike()  \r\n        b.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>error: illegal inheritance from final class Vehicle\nclass Bike extends Vehicle{\n                   ^\none error found</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Final is a keyword, which is used to prevent inheritance of super class members into derived class. You can declare final variables, methods and classes also. Scala Final Variable Example You can&#8217;t override final variables in subclass. Let&#8217;s see an example. Output: Scala Final Method Final method declare in the parent class can&#8217;t be override. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/232"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=232"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/232/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 233,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/232/revisions/233"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=232"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=232"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=232"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 234,
    "date": "2020-10-19T10:42:18",
    "date_gmt": "2020-10-19T10:42:18",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=234"
    },
    "modified": "2020-10-19T10:42:18",
    "modified_gmt": "2020-10-19T10:42:18",
    "slug": "scala-abstract-class",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-abstract-class/",
    "title": {
      "rendered": "Scala Abstract Class"
    },
    "content": {
      "rendered": "\n<p>A class which is declared with abstract keyword is known as abstract class. An abstract class can have abstract methods and non-abstract methods as well. Abstract class is used to achieve abstraction. Abstraction is a process in which we hide complex implementation details and show only functionality to the user.</p>\n\n\n\n<p>In scala, we can achieve abstraction by using abstract class and trait. We have discussed about these in detail here.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Abstract Class Example</h2>\n\n\n\n<p>In this example, we have created a Bike abstract class. It contains an abstract method. A class Hero extends it and provides implementation of its run method.</p>\n\n\n\n<p>A class that extends an abstract class must provide implementation of its all abstract methods. You can&#8217;t create object of an abstract class.</p>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Bike{  \r\n    def run()  \r\n}  \r\n  \r\nclass Hero extends Bike{  \r\n    def run(){  \r\n        println(\"running fine...\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args: Array&#91;String]){  \r\n        var h = new Hero()  \r\n        h.run()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>running fine...\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Abstract Class Example: Having Constructor, Variables and Abstract Methods</h2>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Bike(a:Int){             // Creating constructor  \r\n    var b:Int = 20                      // Creating variables  \r\n    var c:Int = 25  \r\n    def run()                           // Abstract method  \r\n    def performance(){                  // Non-abstract method  \r\n        println(\"Performance awesome\")  \r\n    }  \r\n}  \r\n  \r\nclass Hero(a:Int) extends Bike(a){  \r\n    c = 30  \r\n    def run(){  \r\n        println(\"Running fine...\")  \r\n        println(\"a = \"+a)  \r\n        println(\"b = \"+b)  \r\n        println(\"c = \"+c)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args: Array&#91;String]){  \r\n        var h = new Hero(10)  \r\n        h.run()  \r\n        h.performance()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Running fine...\na = 10\nb = 20\nc = 30\nPerformance awesome\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Abstract Class Example: Abstract Method is not implemented</h2>\n\n\n\n<p>In this example, we didn&#8217;t implement abstract method run(). Compiler reports an error during compilation of this program. Error message is given below in output section.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>abstract class Bike{  \r\n    def run()               // Abstract method  \r\n}  \r\n  \r\nclass Hero extends Bike{        // Not implemented in this class  \r\n    def runHero(){  \r\n        println(\"Running fine...\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args: Array&#91;String]){  \r\n        var h = new Hero()  \r\n        h.runHero()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>error: class Hero needs to be abstract, since method run in class Bike of type ()Unit is not defined\nclass Hero extends Bike{\n      ^\none error found</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A class which is declared with abstract keyword is known as abstract class. An abstract class can have abstract methods and non-abstract methods as well. Abstract class is used to achieve abstraction. Abstraction is a process in which we hide complex implementation details and show only functionality to the user. In scala, we can achieve [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/234"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=234"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/234/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 235,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/234/revisions/235"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=234"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=234"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=234"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 236,
    "date": "2020-10-19T10:43:51",
    "date_gmt": "2020-10-19T10:43:51",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=236"
    },
    "modified": "2020-10-19T10:43:51",
    "modified_gmt": "2020-10-19T10:43:51",
    "slug": "scala-trait",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-trait/",
    "title": {
      "rendered": "Scala Trait"
    },
    "content": {
      "rendered": "\n<p>A trait is like an interface with a partial implementation. In scala, trait is a collection of abstract and non-abstract methods. You can create trait that can have all abstract methods or some abstract and some non-abstract methods.</p>\n\n\n\n<p>A variable that is declared either by using val or var keyword in a trait get internally implemented in the class that implements the trait. Any variable which is declared by using val or var but not initialized is considered abstract.</p>\n\n\n\n<p>Traits are compiled into Java interfaces with corresponding implementation classes that hold any methods implemented in the traits.</p>\n\n\n\n<h2>Scala Trait Example</h2>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>trait Printable{  \r\n    def print()  \r\n}  \r\n  \r\nclass A4 extends Printable{  \r\n    def print(){  \r\n        println(\"Hello\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new A4()  \r\n        a.print()  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<p>If a class extends a trait but does not implement the members declared in that trait, it must be declared abstract. Let&#8217;s see an example.</p>\n\n\n\n<h2>Scala Trait Example</h2>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>trait Printable{  \r\n    def print()  \r\n}  \r\n  \r\nabstract class A4 extends Printable{            // Must declared as abstract class  \r\n   def printA4(){  \r\n       println(\"Hello, this is A4 Sheet\")  \r\n   }  \r\n}  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Trait Example: Implementing Multiple Traits in a Class</h2>\n\n\n\n<p>If a class implements multiple traits, it will extend the first trait, class, abstract class. with keyword is used to extend rest of the traits.</p>\n\n\n\n<p>You can achieve multiple inheritances by using trait.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>trait Printable{  \r\n    def print()  \r\n}  \r\n  \r\ntrait Showable{  \r\n   def show()  \r\n}  \r\n  \r\nclass A6 extends Printable with Showable{  \r\n    def print(){  \r\n        println(\"This is printable\")  \r\n    }  \r\n    def show(){  \r\n        println(\"This is showable\");  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new A6()  \r\n        a.print()  \r\n        a.show()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is printable\nThis is showable\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Trait having abstract and non-abstract methods</h2>\n\n\n\n<p>You can also define method in trait as like in abstract class. I.e. you can treat trait as abstract class also. In scala, trait is almost same as abstract class except that it can&#8217;t have constructor. You can&#8217;t extend multiple abstract classes but can extend multiple traits.</p>\n\n\n\n<h3>Scala Trait Example</h3>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>trait Printable{  \r\n    def print()         // Abstract method  \r\n    def show(){         // Non-abstract method  \r\n        println(\"This is show method\")  \r\n    }  \r\n}  \r\n  \r\nclass A6 extends Printable{  \r\n    def print(){  \r\n        println(\"This is print method\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new A6()  \r\n        a.print()  \r\n        a.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is print method\nThis is show method</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A trait is like an interface with a partial implementation. In scala, trait is a collection of abstract and non-abstract methods. You can create trait that can have all abstract methods or some abstract and some non-abstract methods. A variable that is declared either by using val or var keyword in a trait get internally [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/236"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=236"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/236/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 237,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/236/revisions/237"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=236"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=236"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=236"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 238,
    "date": "2020-10-19T10:45:19",
    "date_gmt": "2020-10-19T10:45:19",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=238"
    },
    "modified": "2020-10-19T10:45:19",
    "modified_gmt": "2020-10-19T10:45:19",
    "slug": "scala-trait-mixins",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-trait-mixins/",
    "title": {
      "rendered": "Scala Trait Mixins"
    },
    "content": {
      "rendered": "\n<p>In scala, trait mixins means you can extend any number of traits with a class or abstract class. You can extend only traits or combination of traits and class or traits and abstract class.</p>\n\n\n\n<p>It is necessary to maintain order of mixins otherwise compiler throws an error.</p>\n\n\n\n<p>You can use mixins in scala like this:</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Trait Example: Mixins Order Not Maintained</h2>\n\n\n\n<p>In this example, we have extended a trait and an abstract class. Let&#8217;s see what happen.</p>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>trait Print{  \r\n    def print()  \r\n}  \r\n  \r\nabstract class PrintA4{  \r\n    def printA4()  \r\n}  \r\n  \r\nclass A6 extends Print with PrintA4{  \r\n    def print(){                // Trait print  \r\n        println(\"print sheet\")  \r\n    }  \r\n    def printA4(){              // Abstract class printA4  \r\n        println(\"Print A4 Sheet\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new A6()  \r\n        a.print()  \r\n        a.printA4()  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>error: class PrintA4 needs to be a trait to be mixed in\nclass A6 extends Print with PrintA4{\n                            ^\none error found\n</code></pre>\n\n\n\n<p>The above program throws a compile time error, because we didn&#8217;t maintain mixins order.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Mixins Order</h2>\n\n\n\n<p>The right mixins order of trait is that any class or abstract class which you want to extend, first extend this. All the traits will be extended after this class or abstract class.</p>\n\n\n\n<h2>Scala Trait Example: Mixins Order Maintained</h2>\n\n\n\n<ol><li>  </li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>trait Print{  \r\n    def print()  \r\n}  \r\n  \r\nabstract class PrintA4{  \r\n    def printA4()  \r\n}  \r\n  \r\nclass A6 extends PrintA4 with Print{            // First one is abstract class second one is trait  \r\n    def print(){                                        // Trait print  \r\n        println(\"print sheet\")  \r\n    }  \r\n    def printA4(){                                      // Abstract class printA4  \r\n        println(\"Print A4 Sheet\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new A6()  \r\n        a.print()  \r\n        a.printA4()  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print sheet\nPrint A4 Sheet\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Another Example of Scala Trait</h2>\n\n\n\n<p>Here, we have used one more approach to extend trait in our program. In this approach, we extend trait during object creation. Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>trait Print{  \r\n    def print()  \r\n}  \r\n  \r\nabstract class PrintA4{  \r\n    def printA4()  \r\n}  \r\n  \r\nclass A6 extends PrintA4 {  \r\n    def print(){                             // Trait print  \r\n        println(\"print sheet\")  \r\n    }  \r\n    def printA4(){                              // Abstract class printA4  \r\n        println(\"Print A4 Sheet\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new A6() with Print             // You can also extend trait during object creation  \r\n        a.print()  \r\n        a.printA4()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>print sheet\nPrint A4 Sheet</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In scala, trait mixins means you can extend any number of traits with a class or abstract class. You can extend only traits or combination of traits and class or traits and abstract class. It is necessary to maintain order of mixins otherwise compiler throws an error. You can use mixins in scala like this: [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/238"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=238"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/238/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 239,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/238/revisions/239"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=238"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=238"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=238"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 240,
    "date": "2020-10-19T10:46:49",
    "date_gmt": "2020-10-19T10:46:49",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=240"
    },
    "modified": "2020-10-19T10:46:49",
    "modified_gmt": "2020-10-19T10:46:49",
    "slug": "scala-access-modifier",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-access-modifier/",
    "title": {
      "rendered": "Scala Access Modifier"
    },
    "content": {
      "rendered": "\n<p>a members, member methods and constructors etc. Scala provides least accessibility to access to all. You can apply any access modifier to your code according to your application requirement.</p>\n\n\n\n<p>Scala provides only three types of access modifiers, which are given below:</p>\n\n\n\n<ol><li>No modifier</li><li>Protected</li><li>Private</li></ol>\n\n\n\n<p>In scala, if you don&#8217;t mention any access modifier, it is treated as no modifier.</p>\n\n\n\n<p>Following table contains information about accessbilty of access modifiers.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Modifier</th><th>Outside package</th><th>Package</th><th>Class</th><th>Subclass</th><th>Companion</th></tr><tr><td>No access modifier</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Protected</td><td>No</td><td>No</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Private</td><td>No</td><td>No</td><td>Yes</td><td>No</td><td>Yes</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: Private Access Modifier</h2>\n\n\n\n<p>In scala, private access modifier is used to make data accessible only within class in which it is declared. It is most restricted and keeps your data in limited scope. Private data members does not inherit into subclasses.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class AccessExample{  \r\n     private var a:Int = 10  \r\n     def show(){  \r\n         println(a)  \r\n     }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var p = new AccessExample()  \r\n        p.a = 12  \r\n        p.show()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>error: variable a in class AccessExample cannot be accessed in AccessExample\n        p.a = 12\n          ^\none error found\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: Protected Access Modifier</h2>\n\n\n\n<p>Protected access modifier is accessible only within class, sub class and companion object. Data members declared as protected are inherited in subclass. Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class AccessExample{  \r\n     protected var a:Int = 10  \r\n}  \r\nclass SubClass extends AccessExample{  \r\n    def display(){  \r\n        println(\"a = \"+a)  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new SubClass()  \r\n        s.display()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 10 \n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example: No-Access-Modifier</h2>\n\n\n\n<p>In scala, when you don&#8217;t mention any access modifier, it is treated as no-access-modifier. It is same as public in java. It is least restricted and can easily accessible from anywhere inside or outside the package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class AccessExample{  \r\n     var a:Int = 10  \r\n     def show(){  \r\n         println(\" a = \"+a)  \r\n     }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new AccessExample()  \r\n        a.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = 10</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>a members, member methods and constructors etc. Scala provides least accessibility to access to all. You can apply any access modifier to your code according to your application requirement. Scala provides only three types of access modifiers, which are given below: No modifier Protected Private In scala, if you don&#8217;t mention any access modifier, it [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/240"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=240"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/240/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 241,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/240/revisions/241"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=240"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=240"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=240"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 242,
    "date": "2020-10-19T10:48:22",
    "date_gmt": "2020-10-19T10:48:22",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=242"
    },
    "modified": "2020-10-19T10:48:22",
    "modified_gmt": "2020-10-19T10:48:22",
    "slug": "scala-array",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-array/",
    "title": {
      "rendered": "Scala Array"
    },
    "content": {
      "rendered": "\n<p>Array is a collection of mutable values. It is an index based data structure which starts from 0 index to n-1 where n is length of array.</p>\n\n\n\n<p>Scala arrays can be generic. It means, you can have an Array[T], where T is a type parameter or abstract type. Scala arrays are compatible with Scala sequences &#8211; you can pass an Array[T] where a Seq[T] is required. It also supports all the sequence operations.</p>\n\n\n\n<p>Following image represents the structure of array where first index is 0, last index is 9 and array length is 10.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-array1.png\" alt=\"Scala Array 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Types of array</h3>\n\n\n\n<ol><li>Single dimensional array</li><li>Multidimensional array</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Single Dimensional Array</h2>\n\n\n\n<p>Single dimensional array is used to store elements in linear order. Array elements are stored in contiguous memory space. So, if you have any index of an array, you can easily traverse all the elements of the array.</p>\n\n\n\n<h4>Syntax for Single Dimensional Array</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>var arrayName : Array&#91;arrayType] = new Array&#91;arrayType](arraySize);   or  \r\nvar arrayName = new Array&#91;arrayType](arraySize)  or  \r\nvar arrayName : Array&#91;arrayType] = new Array(arraySize);   or  \r\nvar arrayName = Array(element1, element2 ... elementN)  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Array Example: Single Dimensional</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class ArrayExample{  \r\n    var arr = Array(1,2,3,4,5)      // Creating single dimensional array  \r\n    def show(){  \r\n        for(a&lt;-arr)                       // Traversing array elements  \r\n            println(a)  \r\n        println(\"Third Element  = \"+ arr(2))        // Accessing elements by using index  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new ArrayExample()  \r\n        a.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\nThird Element  = 3\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Example 2: Single Dimensional</h2>\n\n\n\n<p>In this example, we have created an array by using new keyword which is used to initialize memory for array. The entire array elements are set to default value, you can assign that later in your code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ArrayExample{  \r\n    var arr = new Array&#91;Int](5)         // Creating single dimensional array  \r\n    def show(){  \r\n        for(a&lt;-arr){                      // Traversing array elements  \r\n            println(a)  \r\n        }  \r\n        println(\"Third Element before assignment = \"+ arr(2))        // Accessing elements by using index  \r\n        arr(2) = 10                                                          // Assigning new element at 2 index  \r\n        println(\"Third Element after assignment = \"+ arr(2))  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new ArrayExample()  \r\n        a.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n0\n0\n0\n0\nThird Element before assignment = 0\nThird Element after assignment = 10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Passing Array into Function</h2>\n\n\n\n<p>You can pass array as an argument to function during function call. Following example illustrate the process how we can pass an array to the function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ArrayExample{  \r\n    def show(arr:Array&#91;Int]){  \r\n        for(a&lt;-arr)                // Traversing array elements  \r\n            println(a)  \r\n        println(\"Third Element = \"+ arr(2))        // Accessing elements by using index  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var arr = Array(1,2,3,4,5,6)    // creating single dimensional array  \r\n        var a = new ArrayExample()  \r\n        a.show(arr)                     // passing array as an argument in the function  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5\n6\nThird Element = 3\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Array Example: Iterating By using Foreach Loop</h2>\n\n\n\n<p>You can also iterate array elements by using foreach loop. Let&#8217;s see an example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ArrayExample{  \r\n    var arr = Array(1,2,3,4,5)      // Creating single dimensional array  \r\n    arr.foreach((element:Int)=>println(element))       // Iterating by using foreach loop  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        new ArrayExample()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Array is a collection of mutable values. It is an index based data structure which starts from 0 index to n-1 where n is length of array. Scala arrays can be generic. It means, you can have an Array[T], where T is a type parameter or abstract type. Scala arrays are compatible with Scala sequences [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/242"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=242"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/242/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 243,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/242/revisions/243"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=242"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=242"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=242"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 244,
    "date": "2020-10-19T10:49:46",
    "date_gmt": "2020-10-19T10:49:46",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=244"
    },
    "modified": "2020-10-19T10:49:46",
    "modified_gmt": "2020-10-19T10:49:46",
    "slug": "scala-multidimensional-array",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-multidimensional-array/",
    "title": {
      "rendered": "Scala Multidimensional Array"
    },
    "content": {
      "rendered": "\n<p>Multidimensional array is an array which store data in matrix form. You can create from two dimensional to three, four and many more dimensional array according to your need. Below we have mentioned array syntax. Scala provides an ofDim method to create multidimensional array.</p>\n\n\n\n<h2>Multidimensional Array Syntax</h2>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>var arrayName = Array.ofDim&#91;ArrayType](NoOfRows,NoOfColumns) or  \r\nvar arrayName = Array(Array(element...), Array(element...), ...)  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Multidimensional Array Example by using ofDim</h2>\n\n\n\n<p>In This example, we have created array by using ofDim method.</p>\n\n\n\n<ol><li> </li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>class ArrayExample{  \r\n    var arr = Array.ofDim&#91;Int](2,2)          // Creating multidimensional array  \r\n    arr(1)(0) = 15                          // Assigning value  \r\n    def show(){  \r\n        for(i&lt;- 0 to 1){                       // Traversing elements by using loop  \r\n           for(j&lt;- 0 to 1){  \r\n                print(\" \"+arr(i)(j))  \r\n            }  \r\n            println()  \r\n        }  \r\n        println(\"Third Element = \"+ arr(1)(1))        // Accessing elements by using index  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new ArrayExample()  \r\n        a.show()                       \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 0\n15 0\nThird Element = 0\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Multidimensional Array by using Array of Array</h2>\n\n\n\n<p>Apart from ofDim you can also create multidimensional array by using array of array. In this example, we have created multidimensional array by using array of array.</p>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>class ArrayExample{  \r\n    var arr = Array(Array(1,2,3,4,5), Array(6,7,8,9,10))   // Creating multidimensional array  \r\n    def show(){  \r\n        for(i&lt;- 0 to 1){               // Traversing elements using loop  \r\n           for(j&lt;- 0 to 4){  \r\n                print(\" \"+arr(i)(j))  \r\n            }  \r\n            println()  \r\n        }      \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new ArrayExample()  \r\n        a.show()                       \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 2 3 4 5\n 6 7 8 9 10\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Addition of Two Matrix Example</h2>\n\n\n\n<p>You can manipulate array elements in scala. Here, we are adding two array elements and storing result into third array.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ArrayExample{  \r\n    var arr1 = Array(Array(1,2,3,4,5), Array(6,7,8,9,10))   // Creating multidimensional array  \r\n    var arr2 = Array(Array(1,2,3,4,5), Array(6,7,8,9,10))  \r\n    var arr3 = Array.ofDim&#91;Int](2,5)  \r\n    def show(){  \r\n        for(i&lt;- 0 to 1){               // Traversing elements using loop  \r\n           for(j&lt;- 0 to 4){  \r\n                arr3(i)(j) = arr1(i)(j)+arr2(i)(j)  \r\n                print(\" \"+arr3(i)(j))  \r\n            }  \r\n            println()  \r\n        }      \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var a = new ArrayExample()  \r\n        a.show()                       \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>2 4 6 8 10\n 12 14 16 18 20</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Multidimensional array is an array which store data in matrix form. You can create from two dimensional to three, four and many more dimensional array according to your need. Below we have mentioned array syntax. Scala provides an ofDim method to create multidimensional array. Multidimensional Array Syntax Scala Multidimensional Array Example by using ofDim In [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/244"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=244"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/244/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 245,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/244/revisions/245"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=244"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=244"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=244"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 246,
    "date": "2020-10-19T10:51:08",
    "date_gmt": "2020-10-19T10:51:08",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=246"
    },
    "modified": "2020-10-19T10:51:08",
    "modified_gmt": "2020-10-19T10:51:08",
    "slug": "scala-string",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-string/",
    "title": {
      "rendered": "Scala String"
    },
    "content": {
      "rendered": "\n<p>In scala, string is a combination of characters or we can say it is a sequence of characters. It is index based data structure and use linear approach to store data into memory. String is immutable in scala like java. You can manipulate string and can apply method to get desire result but you can&#8217;t change original string object.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala String Example</h2>\n\n\n\n<p>This is a simple string example in which we have created a string variable.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala string example\"  \r\n    def show(){  \r\n        println(s1)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Scala string example\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Immutable String Example 1</h2>\n\n\n\n<p>In this example, we are creating a string variable and trying to modify string object. Let&#8217;s see what happen.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala string example\"  \r\n    \"This is \"+s1           // Modifying string object  \r\n    def show(){  \r\n        println(s1)           \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Scala string example\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Immutable String Example 2</h2>\n\n\n\n<p>In this example, we are modifying the string and assigning it to a variable so that we can keep reference of modified string. Here, a new string object is created after modification. The s1 variable now refers to new string object. The old string object is still available in the memory but does not have any reference.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala string example\"  \r\n    s1 = \"This is \"+s1          \r\n    def show(){  \r\n        println(s1)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is Scala string example \n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala String Comparison Example</h2>\n\n\n\n<p>In scala, you can compare two string objects by using == (equal) method. The following program describes how to use equal operator. It returns boolean value either true or false.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala string example\"  \r\n    var s2 = \"Hello Scala\"  \r\n    var s3 = \"Hello Scala\"  \r\n    def show(){  \r\n        println(s1 == s2)  \r\n        println(s2 == s3)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\ntrue</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In scala, string is a combination of characters or we can say it is a sequence of characters. It is index based data structure and use linear approach to store data into memory. String is immutable in scala like java. You can manipulate string and can apply method to get desire result but you can&#8217;t [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/246"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=246"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/246/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 247,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/246/revisions/247"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=246"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=246"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=246"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 248,
    "date": "2020-10-19T10:52:53",
    "date_gmt": "2020-10-19T10:52:53",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=248"
    },
    "modified": "2020-10-19T10:52:53",
    "modified_gmt": "2020-10-19T10:52:53",
    "slug": "scala-string-methods",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-string-methods/",
    "title": {
      "rendered": "Scala String Methods"
    },
    "content": {
      "rendered": "\n<h2>Scala String equals() Method Example</h2>\n\n\n\n<p>You can also use equal() method to compare two string objects. It returns true if both string object are equal otherwise returns false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala string example\"  \r\n    var s2 = \"Hello Scala\"  \r\n    var s3 = \"Hello Scala\"  \r\n    def show(){  \r\n        println(s1.equals(s2))  \r\n        println(s2.equals(s3))  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>false\ntrue\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala compareTo() Method Example</h2>\n\n\n\n<p>The compareTo() method compares the given string with current string lexicographically. It returns positive number, negative number or 0.</p>\n\n\n\n<p>If first string is greater than second string, it returns positive number (difference of character value). If first string is less than second string, it returns negative number and if first string is equal to second string, it returns 0.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>s1 > s2 => positive number    \r\ns1 &lt; s2s2 => negative number    \r\ns1 == s2 => 0    </code></pre>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala string example\"  \r\n    var s2 = \"Hello Scala\"  \r\n    var s3 = \"Hello Scala\"  \r\n    def show(){  \r\n        println(s1.compareTo(s2))  \r\n        println(s2.compareTo(s3))  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>11\n0\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Concatenation Example by using + (Plus) Operator</h2>\n\n\n\n<p>In scala, you can concatenate string by using + operator. An example is given below in which two strings are concatenated by using + operator.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"This is \"+\"Scala string example\"  \r\n    def show(){  \r\n        println(s1)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is Scala string example\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala String concat() Method Example</h2>\n\n\n\n<p>Apart from + operator, you can also use concat() method to concatenate two strings. It is a predefined method of string class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"This is \"  \r\n    var s2 = \"Scala string example\"  \r\n    def show(){  \r\n        println(s1.concat(s2))  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is Scala string example\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala substring() Method Example</h2>\n\n\n\n<p>The substring() method is used to get substring from a string. By specifying start and end index as argument you can get substring according to your requirement. It is a predefined method of string class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample3{  \r\n    var s1 = \"Scala string example\"  \r\n    def show(){  \r\n        println(s1.substring(0,5))  \r\n    }    \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample3()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Scala</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala String equals() Method Example You can also use equal() method to compare two string objects. It returns true if both string object are equal otherwise returns false. Output: Scala compareTo() Method Example The compareTo() method compares the given string with current string lexicographically. It returns positive number, negative number or 0. If first string [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/248"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=248"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/248/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 249,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/248/revisions/249"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=248"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=248"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=248"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 250,
    "date": "2020-10-19T10:54:34",
    "date_gmt": "2020-10-19T10:54:34",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=250"
    },
    "modified": "2020-10-19T10:54:34",
    "modified_gmt": "2020-10-19T10:54:34",
    "slug": "scala-string-interpolation",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-string-interpolation/",
    "title": {
      "rendered": "Scala String Interpolation"
    },
    "content": {
      "rendered": "\n<p>Starting in Scala 2.10.0, Scala offers a new mechanism to create strings from your data. It is called string interpolation. String interpolation allows users to embed variable references directly in processed string literals. Scala provides three string interpolation methods: s, f and raw.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Program Example: Without using s Method</h2>\n\n\n\n<p>This is simple example which does not use s method in string.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var pi = 3.14  \r\n    def show(){  \r\n        println(\"value of pi = \"+pi)          \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of pi = 3.14\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala String Interpolation Example</h2>\n\n\n\n<p>This program use string interpolation in print function. You can see the advantage of interpolation. Here, we did not use + operator to concatenate string objects.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var pi = 3.14  \r\n    def show(){  \r\n        println(s\"value of pi = $pi\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>value of pi = 3.14\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala String Interpolation Example By using s Method</h2>\n\n\n\n<p>The s method of string interpolation allows us to pass variable in string object. You don&#8217;t need to use + operator to format your output string. In the following example, a string variable is passed to string in the print function. This variable is evaluated by compiler and variable is replaced by value.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala string example\"  \r\n    def show(){  \r\n        println(s\"This is $s1\")  \r\n    }  \r\n}  \r\n  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is Scala string example\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala String Interpolation Example By using f Method</h2>\n\n\n\n<p>The f method is used to format your string output. It is like printf function of c language which is used to produce formatted output. You can pass your variables of any type in the print function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala string example\"  \r\n    var version = 2.12  \r\n    def show(){  \r\n        println(f\"This is $s1%s, scala version is $version%2.2f\")  \r\n    }  \r\n}  \r\n  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>This is Scala string example, scala version is 2.12\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala String Interpolation Example By using raw Method</h2>\n\n\n\n<p>The raw method of string interpolation is used to produce raw string. It does not interpret special char present in the string. Let&#8217;s see an example.</p>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class StringExample{  \r\n    var s1 = \"Scala \\tstring \\nexample\"      \r\n    var s2 = raw\"Scala \\tstring \\nexample\"      \r\n    def show(){  \r\n        println(s1)  \r\n        println(s2)  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var s = new StringExample()  \r\n        s.show()  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Scala\tstring \nexample\nScala \\nstring \\nexample</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Starting in Scala 2.10.0, Scala offers a new mechanism to create strings from your data. It is called string interpolation. String interpolation allows users to embed variable references directly in processed string literals. Scala provides three string interpolation methods: s, f and raw. Scala Program Example: Without using s Method This is simple example which [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/250"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=250"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/250/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 251,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/250/revisions/251"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=250"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=250"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=250"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 252,
    "date": "2020-10-19T10:58:47",
    "date_gmt": "2020-10-19T10:58:47",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=252"
    },
    "modified": "2020-10-19T10:58:47",
    "modified_gmt": "2020-10-19T10:58:47",
    "slug": "scala-exception-handling",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-exception-handling/",
    "title": {
      "rendered": "Scala Exception Handling"
    },
    "content": {
      "rendered": "\n<p>Exception handling is a mechanism which is used to handle abnormal conditions. You can also avoid termination of your program unexpectedly.</p>\n\n\n\n<p>Scala makes &#8220;checked vs unchecked&#8221; very simple. It doesn&#8217;t have checked exceptions. All exceptions are unchecked in Scala, even SQLException and IOException.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Program Example without Exception Handling</h2>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ExceptionExample{  \r\n    def divide(a:Int, b:Int) = {  \r\n            a/b             // Exception occurred here  \r\n        println(\"Rest of the code is executing...\")  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var e = new ExceptionExample()  \r\n        e.divide(100,0)  \r\n   \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java.lang.ArithmeticException: / by zero</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Exception handling is a mechanism which is used to handle abnormal conditions. You can also avoid termination of your program unexpectedly. Scala makes &#8220;checked vs unchecked&#8221; very simple. It doesn&#8217;t have checked exceptions. All exceptions are unchecked in Scala, even SQLException and IOException. Scala Program Example without Exception Handling   Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/252"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=252"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/252/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 253,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/252/revisions/253"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=252"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=252"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=252"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 254,
    "date": "2020-10-19T10:59:50",
    "date_gmt": "2020-10-19T10:59:50",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=254"
    },
    "modified": "2020-10-19T10:59:50",
    "modified_gmt": "2020-10-19T10:59:50",
    "slug": "scala-try-catch",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-try-catch/",
    "title": {
      "rendered": "Scala Try Catch"
    },
    "content": {
      "rendered": "\n<p>Scala provides try and catch block to handle exception. The try block is used to enclose suspect code. The catch block is used to handle exception occurred in try block. You can have any number of try catch block in your program according to need.</p>\n\n\n\n<h2>Scala Try Catch Example</h2>\n\n\n\n<p>In the following program, we have enclosed our suspect code inside try block. After try block we have used a catch handler to catch exception. If any exception occurs, catch handler will handle it and program will not terminate abnormally.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ExceptionExample{  \r\n    def divide(a:Int, b:Int) = {  \r\n        try{  \r\n            a/b  \r\n        }catch{  \r\n            case e: ArithmeticException => println(e)  \r\n        }  \r\n        println(\"Rest of the code is executing...\")  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var e = new ExceptionExample()  \r\n        e.divide(100,0)  \r\n   \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java.lang.ArithmeticException: / by zero\nRest of the code is executing...\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Try Catch Example 2</h2>\n\n\n\n<p>In this example, we have two cases in our catch handler. First case will handle only arithmetic type exception. Second case has Throwable class which is a super class in exception hierarchy. The second case is able to handle any type of exception in your program. Sometimes when you don&#8217;t know about the type of exception, you can use super class.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ExceptionExample{  \r\n    def divide(a:Int, b:Int) = {  \r\n        try{  \r\n            a/b  \r\n            var arr = Array(1,2)  \r\n            arr(10)  \r\n        }catch{  \r\n            case e: ArithmeticException => println(e)  \r\n            case ex: Throwable =>println(\"found a unknown exception\"+ ex)  \r\n        }  \r\n        println(\"Rest of the code is executing...\")  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var e = new ExceptionExample()  \r\n        e.divide(100,10)  \r\n   \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>found a unknown exceptionjava.lang.ArrayIndexOutOfBoundsException: 10\nRest of the code is executing...</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala provides try and catch block to handle exception. The try block is used to enclose suspect code. The catch block is used to handle exception occurred in try block. You can have any number of try catch block in your program according to need. Scala Try Catch Example In the following program, we have [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/254"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=254"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/254/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 255,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/254/revisions/255"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=254"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=254"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=254"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 256,
    "date": "2020-10-19T11:00:35",
    "date_gmt": "2020-10-19T11:00:35",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=256"
    },
    "modified": "2020-10-19T11:00:35",
    "modified_gmt": "2020-10-19T11:00:35",
    "slug": "scala-finally",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-finally/",
    "title": {
      "rendered": "Scala Finally"
    },
    "content": {
      "rendered": "\n<p>The finally block is used to release resources during exception. Resources may be file, network connection, database connection etc. the finally block executes guaranteed. The following program illustrate the use of finally block.</p>\n\n\n\n<h2>Scala Finally Block Example</h2>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ExceptionExample{  \r\n    def divide(a:Int, b:Int) = {  \r\n        try{  \r\n            a/b  \r\n            var arr = Array(1,2)  \r\n            arr(10)  \r\n        }catch{  \r\n            case e: ArithmeticException => println(e)  \r\n            case ex: Exception =>println(ex)  \r\n            case th: Throwable=>println(\"found a unknown exception\"+th)  \r\n        }  \r\n        finally{  \r\n            println(\"Finaly block always executes\")  \r\n        }  \r\n        println(\"Rest of the code is executing...\")  \r\n    }  \r\n}  \r\n  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var e = new ExceptionExample()  \r\n        e.divide(100,10)  \r\n   \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java.lang.ArrayIndexOutOfBoundsException: 10\nFinally block always executes\nRest of the code is executing...</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The finally block is used to release resources during exception. Resources may be file, network connection, database connection etc. the finally block executes guaranteed. The following program illustrate the use of finally block. Scala Finally Block Example    Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/256"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=256"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/256/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 257,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/256/revisions/257"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=256"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=256"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=256"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 258,
    "date": "2020-10-19T11:01:15",
    "date_gmt": "2020-10-19T11:01:15",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=258"
    },
    "modified": "2020-10-19T11:01:15",
    "modified_gmt": "2020-10-19T11:01:15",
    "slug": "scala-throw-keyword",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-throw-keyword/",
    "title": {
      "rendered": "Scala Throw keyword"
    },
    "content": {
      "rendered": "\n<p>You can throw exception explicitly in you code. Scala provides throw keyword to throw exception. The throw keyword mainly used to throw custom exception. An example is given below of using scala throw exception keyword.</p>\n\n\n\n<h2>Scala Throw Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class ExceptionExample2{  \r\n    def validate(age:Int)={  \r\n        if(age&lt;18)  \r\n            throw new ArithmeticException(\"You are not eligible\")  \r\n        else println(\"You are eligible\")  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var e = new ExceptionExample2()  \r\n        e.validate(10)  \r\n   \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java.lang.ArithmeticException: You are not eligible</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You can throw exception explicitly in you code. Scala provides throw keyword to throw exception. The throw keyword mainly used to throw custom exception. An example is given below of using scala throw exception keyword. Scala Throw Example Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/258"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=258"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/258/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 259,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/258/revisions/259"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=258"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=258"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=258"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 260,
    "date": "2020-10-19T11:02:05",
    "date_gmt": "2020-10-19T11:02:05",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=260"
    },
    "modified": "2020-10-19T11:02:05",
    "modified_gmt": "2020-10-19T11:02:05",
    "slug": "scala-throws-keyword",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-throws-keyword/",
    "title": {
      "rendered": "Scala Throws Keyword"
    },
    "content": {
      "rendered": "\n<p>Scala provides throws keyword to declare exception. You can declare exception with method definition. It provides information to the caller function that this method may throw this exception. It helps to caller function to handle and enclose that code in try-catch block to avoid abnormal termination of program. In scala, you can either use throws keyword or throws annotation to declare exception.</p>\n\n\n\n<h2>Scala Throws Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class ExceptionExample4{  \r\n    @throws(classOf&#91;NumberFormatException])  \r\n    def validate()={  \r\n        \"abc\".toInt  \r\n    }  \r\n}  \r\n  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var e = new ExceptionExample4()  \r\n        try{  \r\n            e.validate()  \r\n        }catch{  \r\n            case ex : NumberFormatException => println(\"Exception handeled here\")  \r\n        }  \r\n        println(\"Rest of the code executing...\")  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception handeled here\nRest of the code executing...</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala provides throws keyword to declare exception. You can declare exception with method definition. It provides information to the caller function that this method may throw this exception. It helps to caller function to handle and enclose that code in try-catch block to avoid abnormal termination of program. In scala, you can either use throws [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/260"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=260"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/260/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 261,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/260/revisions/261"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=260"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=260"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=260"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 262,
    "date": "2020-10-19T11:03:46",
    "date_gmt": "2020-10-19T11:03:46",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=262"
    },
    "modified": "2020-10-19T11:03:46",
    "modified_gmt": "2020-10-19T11:03:46",
    "slug": "scala-custom-exception",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-custom-exception/",
    "title": {
      "rendered": "Scala Custom Exception"
    },
    "content": {
      "rendered": "\n<p>In scala, you can create your own exception. It is also known as custom exceptions. You must extend Exception class while declaring custom exception class. You can create your own exception message in custom class. Let&#8217;s see an example.</p>\n\n\n\n<h2>Scala Custom Exception Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>class InvalidAgeException(s:String) extends Exception(s){}  \r\nclass ExceptionExample{  \r\n    @throws(classOf&#91;InvalidAgeException])  \r\n    def validate(age:Int){  \r\n        if(age&lt;18){  \r\n            throw new InvalidAgeException(\"Not eligible\")  \r\n        }else{  \r\n            println(\"You are eligible\")  \r\n        }  \r\n    }  \r\n}  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var e = new ExceptionExample()  \r\n        try{  \r\n            e.validate(5)  \r\n        }catch{  \r\n            case e : Exception => println(\"Exception Occured : \"+e)  \r\n        }  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Exception Occured : InvalidAgeException: Not eligible</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In scala, you can create your own exception. It is also known as custom exceptions. You must extend Exception class while declaring custom exception class. You can create your own exception message in custom class. Let&#8217;s see an example. Scala Custom Exception Example Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/262"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=262"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/262/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 263,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/262/revisions/263"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=262"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=262"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=262"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 264,
    "date": "2020-10-19T11:04:23",
    "date_gmt": "2020-10-19T11:04:23",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=264"
    },
    "modified": "2020-10-19T11:04:23",
    "modified_gmt": "2020-10-19T11:04:23",
    "slug": "scala-collection",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-collection/",
    "title": {
      "rendered": "Scala Collection"
    },
    "content": {
      "rendered": "\n<p>Scala provides rich set of collection library. It contains classes and traits to collect data. These collections can be mutable or immutable. You can use them according to your requirement.&nbsp;<strong>Scala.collection.mutable</strong>&nbsp;package contains all the mutable collections. You can add, remove and update data while using this package.</p>\n\n\n\n<p><strong>Scala.collection.immutable</strong>&nbsp;contains all the immutable collections. It does not allow you to modify data. Scala imports this package by default. If you want mutable collection, you must import&nbsp;<strong>scala.collection.mutable</strong>&nbsp;package in your code.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Immutable Collections Hierarchy</h2>\n\n\n\n<p>The scala.collection.immutable package contains all the immutable abstract classes and traits for collections.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-collection1.png\" alt=\"Scala Collection 1\"/></figure>\n\n\n\n<h3>Scala Traversable</h3>\n\n\n\n<p>It is a trait and used to traverse collection elements. It is a base trait for all scala collections.</p>\n\n\n\n<p>It implements the methods which are common to all collections.</p>\n\n\n\n<h3>Some Significant Methods of Traversable Trait</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>def head: A</td><td>It returns the first element of collection.</td></tr><tr><td>def init: Traversable[A]</td><td>It returns all elements except last one.</td></tr><tr><td>def isEmpty: Boolean</td><td>It checks whether the collection is empty or not. It returns either true or false.</td></tr><tr><td>def last: A</td><td>It returns the last element of this collection.</td></tr><tr><td>def max: A</td><td>It returns the largest element of this collection.</td></tr><tr><td>def min: A</td><td>It returns smallest element of this collection</td></tr><tr><td>def size: Int</td><td>It is used to get size of this traversable and returns a number of elements present in this traversable.</td></tr><tr><td>def sum: A</td><td>It returns sum of all elements of this collection.</td></tr><tr><td>def tail: Traversable[A]</td><td>It returns all elements except first.</td></tr><tr><td>def toArray: Array[A]</td><td>It converts this collection to an array.</td></tr><tr><td>def toList: List[A]</td><td>It converts this collection to a list.</td></tr><tr><td>def toSeq: Seq[A]</td><td>It converts this collection to a sequence.</td></tr><tr><td>def toSet[B &gt;: A]: immutable.Set[B]</td><td>It converts this collection to a set.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Iterable</h2>\n\n\n\n<p>It is a next trait from the top of the hierarchy and a base trait for iterable collections. It extends traversable trait and provides important methods to concrete classes.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala provides rich set of collection library. It contains classes and traits to collect data. These collections can be mutable or immutable. You can use them according to your requirement.&nbsp;Scala.collection.mutable&nbsp;package contains all the mutable collections. You can add, remove and update data while using this package. Scala.collection.immutable&nbsp;contains all the immutable collections. It does not allow [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/264"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=264"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/264/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 265,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/264/revisions/265"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=264"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=264"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=264"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 266,
    "date": "2020-10-19T11:07:37",
    "date_gmt": "2020-10-19T11:07:37",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=266"
    },
    "modified": "2020-10-19T11:07:37",
    "modified_gmt": "2020-10-19T11:07:37",
    "slug": "scala-set",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-set/",
    "title": {
      "rendered": "Scala Set"
    },
    "content": {
      "rendered": "\n<p>It is used to store unique elements in the set. It does not maintain any order for storing elements. You can apply various operations on them. It is defined in the Scala.collection.immutable package.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Set Syntax</h3>\n\n\n\n<ol><li><strong>val</strong>&nbsp;variableName:Set[Type]&nbsp;=&nbsp;Set(element1,&nbsp;element2,&#8230;&nbsp;elementN)&nbsp;or&nbsp;&nbsp;</li><li class=\"\"><strong>val</strong>&nbsp;variableName&nbsp;=&nbsp;Set(element1,&nbsp;element2,&#8230;&nbsp;elementN)&nbsp;&nbsp;</li></ol>\n\n\n\n<h3>Scala Set Example</h3>\n\n\n\n<p>In this example, we have created a set. You can create an empty set also. Let&#8217;s see how to create a set.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        val set1 = Set()                            // An empty set  \r\n        val games = Set(\"Cricket\",\"Football\",\"Hocky\",\"Golf\")    // Creating a set with elements  \r\n        println(set1)  \r\n        println(games)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Set()\t// an empty set\nSet(Cricket,Football,Hocky,Golf)\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Set Example 2</h3>\n\n\n\n<p>In Scala, Set provides some predefined properties to get information about set. You can get first or last element of Set and many more. Let&#8217;s see an example.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n        def main(args:Array&#91;String]){  \r\n            val games = Set(\"Cricket\",\"Football\",\"Hocky\",\"Golf\")  \r\n            println(games.head)             // Returns first element present in the set  \r\n            println(games.tail)         // Returns all elements except first element.  \r\n            println(games.isEmpty)          // Returns either true or false  \r\n        }  \r\n    } </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cricket\nSet(Football, Hocky, Golf)\nfalse\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Set Example: Merge two Set</h3>\n\n\n\n<p>You can merge two sets into a single set. Scala provides a predefined method to merge sets. In this example, ++ method is used to merge two sets.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n        def main(args:Array&#91;String]){  \r\n            val games = Set(\"Cricket\",\"Football\",\"Hocky\",\"Golf\")  \r\n            val alphabet = Set(\"A\",\"B\",\"C\",\"D\",\"E\")   \r\n            val mergeSet = games ++ alphabet            // Merging two sets  \r\n            println(\"Elements in games set: \"+games.size)   // Return size of collection  \r\n            println(\"Elements in alphabet set: \"+alphabet.size)   \r\n            println(\"Elements in mergeSet: \"+mergeSet.size)  \r\n            println(mergeSet)  \r\n        }  \r\n    }  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Elements in games set: 4\nElements in alphabet set: 5\nElements in mergeSet: 9\nSet(E, Football, Golf, Hocky, A, B, C, Cricket, D)\n</code></pre>\n\n\n\n<p>This example also proves that the merge set does not maintain order to store elements.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Set Example 2</h3>\n\n\n\n<p>You can check whether element is present in the set or not. The following example describe the use of contains() method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n        def main(args:Array&#91;String]){  \r\n            val games = Set(\"Cricket\",\"Football\",\"Hocky\",\"Golf\")  \r\n            println(games)  \r\n            println(\"Elements in set: \"+games.size)  \r\n            println(\"Golf exists in the set : \"+games.contains(\"Golf\"))  \r\n            println(\"Racing exists in the set : \"+games.contains(\"Racing\"))  \r\n              \r\n        }  \r\n    }  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Set(Cricket, Football, Hocky, Golf)\nElements in set: 4\nGolf exists in the set : true\nRacing exists in the set : false\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Set Example: Adding and Removing Elements</h3>\n\n\n\n<p>You can add or remove elements from the set. You can add only when your code is mutable. In this example, we are adding and removing elements of the set.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n        def main(args:Array&#91;String]){  \r\n            var games = Set(\"Cricket\",\"Football\",\"Hocky\",\"Golf\")  \r\n            println(games)  \r\n            games += \"Racing\"               // Adding new element  \r\n            println(games)  \r\n            games += \"Cricket\"              // Adding new element, it does not allow duplicacy.  \r\n            println(games)  \r\n            games -= \"Golf\"             // Removing element  \r\n            println(games)  \r\n        }  \r\n    }  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Set(Cricket, Football, Hocky, Golf)\nSet(Football, Golf, Hocky, Cricket, Racing)\nSet(Football, Golf, Hocky, Cricket, Racing)\nSet(Football, Hocky, Cricket, Racing)\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Set Example: Iterating Set Elements using for loop</h3>\n\n\n\n<p>You can iterate set elements either by using for loop or foreach loop. You can also filter elements during iteration. In this example have used for loop to iterate set elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n        def main(args:Array&#91;String]){  \r\n            var games = Set(\"Cricket\",\"Football\",\"Hocky\",\"Golf\")  \r\n            for(game &lt;- games){  \r\n                println(game)  \r\n            }  \r\n        }  \r\n    }  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cricket\nFootball\nHocky\nGolf\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Set Example Iterating Elements using foreach loop</h3>\n\n\n\n<p>In this example, we are using foreach loop to iterate set elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\n    object MainObject{  \r\n        def main(args:Array&#91;String]){  \r\n            var games = Set(\"Cricket\",\"Football\",\"Hocky\",\"Golf\")  \r\n            games.foreach((element:String)=> println(element))  \r\n        }     \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Cricket\r\nFootball\r\nHocky\r\nGolf\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Set Example: Set Operations</h3>\n\n\n\n<p>In scala Set, you can also use typical math operations like: intersection and union. In the following example we have used predefined methods to perform set operations.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var games = Set(\"Cricket\",\"Football\",\"Hocky\",\"Golf\",\"C\")  \r\n        var alphabet = Set(\"A\",\"B\",\"C\",\"D\",\"E\",\"Golf\")  \r\n        var setIntersection = games.intersect(alphabet)  \r\n        println(\"Intersection by using intersect method: \"+setIntersection)  \r\n        println(\"Intersection by using &amp; operator: \"+(games &amp; alphabet))  \r\n        var setUnion = games.union(alphabet)  \r\n        println(setUnion)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Intersection by using intersect method: Set(Golf, C)\nIntersection by using &amp;amp; operator: Set(Golf, C)\nSet(E, Football, Golf, Hocky, A, B, C, Cricket, D)\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala SortedSet</h3>\n\n\n\n<p>In scala, SortedSet extends Set trait and provides sorted set elements. It is useful when you want sorted elements in the Set collection. You can sort integer values and string as well.</p>\n\n\n\n<p>It is a trait and you can apply all the methods defined in the traversable trait and Set trait.</p>\n\n\n\n<h3>Scala SortedSet Example</h3>\n\n\n\n<p>In the following example, we have used SortedSet to store integer elements. It returns a Set after sorting elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable.SortedSet              \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var numbers: SortedSet&#91;Int] = SortedSet(5,8,1,2,9,6,4,7,2)  \r\n        numbers.foreach((element:Int)=> println(element))  \r\n    }     \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n4\n5\n6\n7\n8\n9</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>It is used to store unique elements in the set. It does not maintain any order for storing elements. You can apply various operations on them. It is defined in the Scala.collection.immutable package. Scala Set Syntax val&nbsp;variableName:Set[Type]&nbsp;=&nbsp;Set(element1,&nbsp;element2,&#8230;&nbsp;elementN)&nbsp;or&nbsp;&nbsp; val&nbsp;variableName&nbsp;=&nbsp;Set(element1,&nbsp;element2,&#8230;&nbsp;elementN)&nbsp;&nbsp; Scala Set Example In this example, we have created a set. You can create an empty set [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/266"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=266"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/266/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 267,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/266/revisions/267"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=266"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=266"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=266"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 268,
    "date": "2020-10-19T11:19:06",
    "date_gmt": "2020-10-19T11:19:06",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=268"
    },
    "modified": "2020-10-19T11:19:06",
    "modified_gmt": "2020-10-19T11:19:06",
    "slug": "scala-hashset",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-hashset/",
    "title": {
      "rendered": "Scala HashSet"
    },
    "content": {
      "rendered": "\n<p>HashSet is a sealed class. It extends AbstractSet and immutable Set trait. It uses hash code to store elements.</p>\n\n\n\n<p>It neither maintains insertion order nor sorts the elements.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala HashSet Example</h2>\n\n\n\n<p>In the following example, we have created a HashSet to store elements. Here, foreach is used to iterate elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable.HashSet  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var hashset = HashSet(4,2,8,0,6,3,45)  \r\n        hashset.foreach((element:Int) => println(element+\" \"))     \r\n   }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 \n6 \n2 \n45 \n3 \n8 \n4\n</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>HashSet is a sealed class. It extends AbstractSet and immutable Set trait. It uses hash code to store elements. It neither maintains insertion order nor sorts the elements. Scala HashSet Example In the following example, we have created a HashSet to store elements. Here, foreach is used to iterate elements. Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/268"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=268"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/268/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 269,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/268/revisions/269"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=268"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=268"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=268"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 270,
    "date": "2020-10-19T11:20:07",
    "date_gmt": "2020-10-19T11:20:07",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=270"
    },
    "modified": "2020-10-19T11:20:07",
    "modified_gmt": "2020-10-19T11:20:07",
    "slug": "scala-bitset",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-bitset/",
    "title": {
      "rendered": "Scala BitSet"
    },
    "content": {
      "rendered": "\n<p>Bitsets are sets of non-negative integers which are represented as variable-size arrays of bits packed into 64-bit words. The memory footprint of a bitset is determined by the largest number stored in it. It extends Set trait.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala BitSet Example</h2>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var numbers = BitSet(1,5,8,6,9,0)  \r\n        numbers.foreach((element:Int) => println(element))  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n1\n5\n6\n8\n9\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala BitSet Example: Adding and Removing Elements</h3>\n\n\n\n<p>You can perform basic operations like adding and deleting in the bitset. In the following example, we have applied these operations.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var numbers = BitSet(1,5,8,6,9,0)  \r\n        numbers.foreach((element:Int) => print(element+\" \"))  \r\n        numbers += 20               // Adding an element  \r\n        print(\"\\nAfter adding 20: \")  \r\n        numbers.foreach((element:Int) => print(element+\" \"))  \r\n        numbers-=0              // Deleting an element  \r\n        print(\"\\nAfter deleting 0: \")  \r\n        numbers.foreach((element:Int) => print(element+\" \"))  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0 1 5 6 8 9 \nAfter adding 20: 0 1 5 6 8 9 20 \nAfter deleting 0: 1 5 6 8 9 20</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Bitsets are sets of non-negative integers which are represented as variable-size arrays of bits packed into 64-bit words. The memory footprint of a bitset is determined by the largest number stored in it. It extends Set trait. Scala BitSet Example Output: Scala BitSet Example: Adding and Removing Elements You can perform basic operations like adding [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/270"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=270"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/270/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 271,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/270/revisions/271"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=270"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=270"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=270"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 272,
    "date": "2020-10-19T11:21:02",
    "date_gmt": "2020-10-19T11:21:02",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=272"
    },
    "modified": "2020-10-19T11:21:02",
    "modified_gmt": "2020-10-19T11:21:02",
    "slug": "scala-listset",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-listset/",
    "title": {
      "rendered": "Scala ListSet"
    },
    "content": {
      "rendered": "\n<p>In scala, ListSet class implements immutable sets using a list-based data structure. Elements are stored internally in reversed insertion order, which means the newest element is at the head of the list. It maintains insertion order.</p>\n\n\n\n<p>This collection is suitable only for a small number of elements. You can create empty ListSet either by calling the constructor or by applying the function ListSet.empty. Its iterate and traversal methods visit elements in the same order in which they were first inserted.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala ListSet Example</h2>\n\n\n\n<ol><li>  </li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var listset = ListSet(4,2,8,0,6,3,45)  \r\n        listset.foreach((element:Int) => println(element+\" \"))  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>4 \r\n2 \r\n8 \r\n0 \r\n6 \r\n3 \r\n45\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala ListSet Example: Creating ListSet and Adding Elements</h3>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var listset:ListSet&#91;String] = new ListSet()                 // Creating empty ListSet by using constructor  \r\n        var listset2:ListSet&#91;String] = ListSet.empty                // Creating an empty listset  \r\n        println(\"listset: \"+listset)  \r\n        println(\"listset2: \"+listset2)  \r\n        println(\"After adding new elements:\")  \r\n        listset+=\"India\"            // Adding new element  \r\n        listset2+=\"Russia\"          // Adding new element  \r\n        println(\"listset: \"+listset)  \r\n        println(\"listset2: \"+listset2)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>listset: ListSet()\nlistset2: ListSet()\nAfter adding new elements:\nlistset: ListSet(India)\nlistset2: ListSet(Russia)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In scala, ListSet class implements immutable sets using a list-based data structure. Elements are stored internally in reversed insertion order, which means the newest element is at the head of the list. It maintains insertion order. This collection is suitable only for a small number of elements. You can create empty ListSet either by calling [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/272"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=272"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/272/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 273,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/272/revisions/273"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=272"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=272"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=272"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 274,
    "date": "2020-10-19T11:22:05",
    "date_gmt": "2020-10-19T11:22:05",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=274"
    },
    "modified": "2020-10-19T11:22:05",
    "modified_gmt": "2020-10-19T11:22:05",
    "slug": "scala-seq",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-seq/",
    "title": {
      "rendered": "Scala Seq"
    },
    "content": {
      "rendered": "\n<p>Seq is a trait which represents indexed sequences that are guaranteed immutable. You can access elements by using their indexes. It maintains insertion order of elements.</p>\n\n\n\n<p>Sequences support a number of methods to find occurrences of elements or subsequences. It returns a list.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Seq Example</h2>\n\n\n\n<p>In the following example, we are creating Seq and accessing elements from Seq.</p>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var seq:Seq&#91;Int] = Seq(52,85,1,8,3,2,7)  \r\n        seq.foreach((element:Int) => print(element+\" \"))  \r\n        println(\"\\nAccessing element by using index\")  \r\n        println(seq(2))  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n52 85 1 8 3 2 7 \r\nAccessing element by using index\r\n1</code></pre>\n\n\n\n<p>You can also access elements in reverse order by using reverse method. Below we have listed some commonly used method and their description.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Commonly used Methods of Seq</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>def contains[A1 &gt;: A](elem: A1): Boolean</td><td>Check whether the given element present in this sequence.</td></tr><tr><td>def copyToArray(xs: Array[A], start: Int, len: Int): Unit</td><td>It copies the seq elements to an array.</td></tr><tr><td>def endsWith[B](that: GenSeq[B]): Boolean</td><td>It tests whether this sequence ends with the given sequence or not.</td></tr><tr><td>def head: A</td><td>It selects the first element of this seq collection.</td></tr><tr><td>def indexOf(elem: A): Int</td><td>It finds index of first occurrence of a value in this immutable sequence.</td></tr><tr><td>def isEmpty: Boolean</td><td>It tests whether this sequence is empty or not.</td></tr><tr><td>def lastIndexOf(elem: A): Int</td><td>It finds index of last occurrence of a value in this immutable sequence.</td></tr><tr><td>def reverse: Seq[A]</td><td>It returns new sequence with elements in reversed order.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Seq Example</h2>\n\n\n\n<p>In this example, we have applied some predefined methods of Seq trait.</p>\n\n\n\n<p>  </p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var seq:Seq&#91;Int] = Seq(52,85,1,8,3,2,7)  \r\n        seq.foreach((element:Int) => print(element+\" \"))  \r\n        println(\"\\nis Empty: \"+seq.isEmpty)  \r\n        println(\"Ends with (2,7): \"+ seq.endsWith(Seq(2,7)))  \r\n        println(\"contains 8: \"+ seq.contains(8))  \r\n        println(\"last index of 3 : \"+seq.lastIndexOf(3))  \r\n        println(\"Reverse order of sequence: \"+seq.reverse)  \r\n    }  \r\n}</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>52 85 1 8 3 2 7 \nis Empty: false\nEnds with (2,7): true\ncontains 8: true\nlast index of 3 : 4\nReverse order of sequence: List(7, 2, 3, 8, 1, 85, 52)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Seq is a trait which represents indexed sequences that are guaranteed immutable. You can access elements by using their indexes. It maintains insertion order of elements. Sequences support a number of methods to find occurrences of elements or subsequences. It returns a list. Scala Seq Example In the following example, we are creating Seq and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/274"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=274"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/274/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 275,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/274/revisions/275"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=274"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=274"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=274"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 276,
    "date": "2020-10-19T11:23:35",
    "date_gmt": "2020-10-19T11:23:35",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=276"
    },
    "modified": "2020-10-19T11:23:35",
    "modified_gmt": "2020-10-19T11:23:35",
    "slug": "scala-vector",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-vector/",
    "title": {
      "rendered": "Scala Vector"
    },
    "content": {
      "rendered": "\n<p>Vector is a general-purpose, immutable data structure. It provides random access of elements. It is good for large collection of elements.</p>\n\n\n\n<p>It extends an abstract class AbstractSeq and IndexedSeq trait.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Vector Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var vector:Vector&#91;Int] = Vector(5,8,3,6,9,4) //Or  \r\n        var vector2 = Vector(5,2,6,3)  \r\n        var vector3 = Vector.empty  \r\n        println(vector)  \r\n        println(vector2)  \r\n        println(vector3)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vector(5, 8, 3, 6, 9, 4)\r\nVector(5, 2, 6, 3)\r\nVector(\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Vector Example</h2>\n\n\n\n<p>In the following example, we have created a vector. You can also add new element and merge two vectors.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var vector = Vector(\"Hocky\",\"Cricket\",\"Golf\")  \r\n        var vector2 = Vector(\"Swimming\")  \r\n        print(\"Vector Elements: \")  \r\n        vector.foreach((element:String) => print(element+\" \"))  \r\n        var newVector  = vector :+ \"Racing\"                             // Adding a new element into vector  \r\n        print(\"\\nVector Elements after adding: \")  \r\n        newVector.foreach((element:String) => print(element+\" \"))  \r\n        var mergeTwoVector = newVector ++ vector2                       // Merging two vector  \r\n        print(\"\\nVector Elements after merging: \")  \r\n        mergeTwoVector.foreach((element:String) => print(element+\" \"))  \r\n        var reverse = mergeTwoVector.reverse                            // Reversing vector elements  \r\n        print(\"\\nVector Elements after reversing: \")  \r\n        reverse.foreach((element:String) => print(element+\" \"))  \r\n        var sortedVector = mergeTwoVector.sorted                        // Sorting vector elements  \r\n        print(\"\\nVector Elements after sorting: \")  \r\n        sortedVector.foreach((element:String) => print(element+\" \"))  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vector Elements: Hocky Cricket Golf \nVector Elements after adding: Hocky Cricket Golf Racing \nVector Elements after merging: Hocky Cricket Golf Racing Swimming \nVector Elements after reversing: Swimming Racing Golf Cricket Hocky \nVector Elements after sorting: Cricket Golf Hocky Racing Swimming</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Vector is a general-purpose, immutable data structure. It provides random access of elements. It is good for large collection of elements. It extends an abstract class AbstractSeq and IndexedSeq trait. Scala Vector Example Output: Scala Vector Example In the following example, we have created a vector. You can also add new element and merge two [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/276"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=276"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/276/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 277,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/276/revisions/277"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=276"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=276"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=276"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 278,
    "date": "2020-10-19T11:24:22",
    "date_gmt": "2020-10-19T11:24:22",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=278"
    },
    "modified": "2020-10-19T11:24:22",
    "modified_gmt": "2020-10-19T11:24:22",
    "slug": "scala-list",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-list/",
    "title": {
      "rendered": "Scala List"
    },
    "content": {
      "rendered": "\n<p>List is used to store ordered elements. It extends LinearSeq trait. It is a class for immutable linked lists. This class is good for last-in-first-out (LIFO), stack-like access patterns.</p>\n\n\n\n<p>It maintains order of elements and can contain duplicates elements also.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala List Example</h2>\n\n\n\n<p>In this example, we have created two lists. Here, both lists have different syntax to create list.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n       var list = List(1,8,5,6,9,58,23,15,4)  \r\n        var list2:List&#91;Int] = List(1,8,5,6,9,58,23,15,4)  \r\n        println(list)  \r\n        println(list2)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>List(1, 8, 5, 6, 9, 58, 23, 15, 4)\nList(1, 8, 5, 6, 9, 58, 23, 15, 4)\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala List Example: Applying Predefined Methods</h2>\n\n\n\n<ol><li><strong>import</strong>&nbsp;scala.collection.immutable._&nbsp;&nbsp;</li><li class=\"\"><strong>object</strong>&nbsp;MainObject{&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<strong>def</strong>&nbsp;main(args:Array[String]){&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>var</strong>&nbsp;list&nbsp;=&nbsp;List(1,8,5,6,9,58,23,15,4)&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>var</strong>&nbsp;list2&nbsp;=&nbsp;List(88,100)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&#8220;Elements:&nbsp;&#8220;)&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list.foreach((element:<strong>Int</strong>)&nbsp;=&gt;&nbsp;print(element+&#8221;&nbsp;&#8220;))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Iterating&nbsp;using&nbsp;foreach&nbsp;loop&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&#8220;\\nElement&nbsp;at&nbsp;2&nbsp;index:&nbsp;&#8220;+list(2))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Accessing&nbsp;element&nbsp;of&nbsp;2&nbsp;index&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>var</strong>&nbsp;list3&nbsp;=&nbsp;list&nbsp;++&nbsp;list2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Merging&nbsp;two&nbsp;list&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&#8220;\\nElement&nbsp;after&nbsp;merging&nbsp;list&nbsp;and&nbsp;list2:&nbsp;&#8220;)&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list3.foreach((element:<strong>Int</strong>)=&gt;print(element+&#8221;&nbsp;&#8220;))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>var</strong>&nbsp;list4&nbsp;=&nbsp;list3.sorted&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Sorting&nbsp;list&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&#8220;\\nElement&nbsp;after&nbsp;sorting&nbsp;list3:&nbsp;&#8220;)&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list4.foreach((element:<strong>Int</strong>)=&gt;print(element+&#8221;&nbsp;&#8220;))&nbsp;&nbsp;&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>var</strong>&nbsp;list5&nbsp;=&nbsp;list3.reverse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Reversing&nbsp;list&nbsp;elements&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&#8220;\\nElements&nbsp;in&nbsp;reverse&nbsp;order&nbsp;of&nbsp;list5:&nbsp;&#8220;)&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list5.foreach((element:<strong>Int</strong>)=&gt;print(element+&#8221;&nbsp;&#8220;))&nbsp;&nbsp;&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</li><li class=\"\">}&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-preformatted\">Elements: 1 8 5 6 9 58 23 15 4 \nElement at 2 index: 5\nElement after merging list and list2: 1 8 5 6 9 58 23 15 4 88 100 \nElement after sorting list3: 1 4 5 6 8 9 15 23 58 88 100 \nElements in reverse order of list5: 100 88 4 15 23 58 9 6 5 8 1</pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>List is used to store ordered elements. It extends LinearSeq trait. It is a class for immutable linked lists. This class is good for last-in-first-out (LIFO), stack-like access patterns. It maintains order of elements and can contain duplicates elements also. Scala List Example In this example, we have created two lists. Here, both lists have [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/278"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=278"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/278/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 279,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/278/revisions/279"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=278"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=278"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=278"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 280,
    "date": "2020-10-19T11:25:15",
    "date_gmt": "2020-10-19T11:25:15",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=280"
    },
    "modified": "2020-10-19T11:25:15",
    "modified_gmt": "2020-10-19T11:25:15",
    "slug": "scala-queue",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-queue/",
    "title": {
      "rendered": "Scala Queue"
    },
    "content": {
      "rendered": "\n<p>Queue implements a data structure that allows inserting and retrieving elements in a first-in-first-out (FIFO) manner.</p>\n\n\n\n<p>In scala, Queue is implemented as a pair of lists. One is used to insert the elements and second to contain deleted elements. Elements are added to the first list and removed from the second list.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Queue Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var queue = Queue(1,5,6,2,3,9,5,2,5)  \r\n        var queue2:Queue&#91;Int] = Queue(1,5,6,2,3,9,5,2,5)  \r\n        println(queue)    \r\n        println(queue2)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Queue(1, 5, 6, 2, 3, 9, 5, 2, 5)\nQueue(1, 5, 6, 2, 3, 9, 5, 2, 5)\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Queue Example 2</h3>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var queue = Queue(1,5,6,2,3,9,5,2,5)  \r\n        print(\"Queue Elements: \")  \r\n        queue.foreach((element:Int)=>print(element+\" \"))    \r\n        var firstElement = queue.front  \r\n        print(\"\\nFirst element in the queue: \"+ firstElement)         \r\n        var enqueueQueue = queue.enqueue(100)  \r\n        print(\"\\nElement added in the queue: \")  \r\n        enqueueQueue.foreach((element:Int)=>print(element+\" \"))  \r\n        var dequeueQueue = queue.dequeue  \r\n        print(\"\\nElement deleted from this queue: \"+ dequeueQueue)  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Queue Elements: 1 5 6 2 3 9 5 2 5 \nFirst element in the queue: 1\nElement added in the queue: 1 5 6 2 3 9 5 2 5 100 \nElement deleted from this queue: (1,Queue(5, 6, 2, 3, 9, 5, 2, 5))</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Queue implements a data structure that allows inserting and retrieving elements in a first-in-first-out (FIFO) manner. In scala, Queue is implemented as a pair of lists. One is used to insert the elements and second to contain deleted elements. Elements are added to the first list and removed from the second list. Scala Queue Example [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/280"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=280"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/280/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 281,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/280/revisions/281"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=280"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=280"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=280"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 282,
    "date": "2020-10-19T11:26:12",
    "date_gmt": "2020-10-19T11:26:12",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=282"
    },
    "modified": "2020-10-19T11:26:12",
    "modified_gmt": "2020-10-19T11:26:12",
    "slug": "scala-stream",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-stream/",
    "title": {
      "rendered": "Scala Stream"
    },
    "content": {
      "rendered": "\n<p>Stream is a lazy list. It evaluates elements only when they are required. This is a feature of scala. Scala supports lazy computation. It increases performance of your program.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Stream Example</h2>\n\n\n\n<p>In the following program, we have created a stream.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        val stream = 100 #:: 200 #:: 85 #:: Stream.empty  \r\n        println(stream)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Stream(100, ?)\n</code></pre>\n\n\n\n<p>In the output, you can see that second element is not evaluated. Here, a question mark is displayed in place of element. Scala does not evaluate list until it is required.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Stream Example: Applying Predefined Methods</h3>\n\n\n\n<p>In the following example, we have used some predefined methods like toStream, which is used to iterate stream elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var stream = 100 #:: 200 #:: 85 #:: Stream.empty  \r\n        println(stream)  \r\n        var stream2 = (1 to 10).toStream  \r\n        println(stream2)  \r\n        var firstElement = stream2.head  \r\n        println(firstElement)  \r\n        println(stream2.take(10))  \r\n        println(stream.map{_*2})  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Stream(100, ?)\nStream(1, ?)\n1\nStream(1, ?)\nStream(200, ?)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Stream is a lazy list. It evaluates elements only when they are required. This is a feature of scala. Scala supports lazy computation. It increases performance of your program. Scala Stream Example In the following program, we have created a stream. Output: In the output, you can see that second element is not evaluated. Here, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/282"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=282"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/282/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 283,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/282/revisions/283"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=282"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=282"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=282"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 284,
    "date": "2020-10-19T11:27:28",
    "date_gmt": "2020-10-19T11:27:28",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=284"
    },
    "modified": "2020-10-19T11:27:28",
    "modified_gmt": "2020-10-19T11:27:28",
    "slug": "scala-maps",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-maps/",
    "title": {
      "rendered": "Scala Maps"
    },
    "content": {
      "rendered": "\n<p>Map is used to store elements. It stores elements in pairs of key and values. In scala, you can create map by using two ways either by using comma separated pairs or by using rocket operator.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala maps Example</h2>\n\n\n\n<p>In the following example, we have both approaches to create map.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var map = Map((\"A\",\"Apple\"),(\"B\",\"Ball\"))  \r\n        var map2 = Map(\"A\"->\"Aple\",\"B\"->\"Ball\")  \r\n        var emptyMap:Map&#91;String,String] = Map.empty&#91;String,String]   \r\n        println(map)  \r\n        println(map2)  \r\n        println(\"Empty Map: \"+emptyMap)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Map(A -&amp;gt; Apple, B -&amp;gt; Ball)\nMap(A -&amp;gt; Aple, B -&amp;gt; Ball)\nEmpty Map: Map()\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Map Example: Adding and Removing Elements</h3>\n\n\n\n<p>You can add and remove new elements in maps. Scala provides you lots of predefined method. You can use them to perform operations on the Maps. In the following example, we have created a new Map.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var map = Map(\"A\"->\"Apple\",\"B\"->\"Ball\")             // Creating map  \r\n        println(map(\"A\"))                            // Accessing value by using key  \r\n        var newMap = map+(\"C\"->\"Cat\")                  // Adding a new element to map  \r\n        println(newMap)  \r\n        var removeElement = newMap - (\"B\")                // Removing an element from map  \r\n        println(removeElement)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Apple\nMap(A -&amp;gt; Apple, B -&amp;gt; Ball, C -&amp;gt; Cat)\nMap(A -&amp;gt; Apple, C -&amp;gt; Cat)</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Map is used to store elements. It stores elements in pairs of key and values. In scala, you can create map by using two ways either by using comma separated pairs or by using rocket operator. Scala maps Example In the following example, we have both approaches to create map. Output: Scala Map Example: Adding [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/284"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=284"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/284/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 285,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/284/revisions/285"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=284"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=284"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=284"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 286,
    "date": "2020-10-19T11:28:31",
    "date_gmt": "2020-10-19T11:28:31",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=286"
    },
    "modified": "2020-10-19T11:28:31",
    "modified_gmt": "2020-10-19T11:28:31",
    "slug": "scala-hashmap",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-hashmap/",
    "title": {
      "rendered": "Scala HashMap"
    },
    "content": {
      "rendered": "\n<p>HashMap is used to store element. It use hash code to store elements and return a map.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>HashMap Example</h2>\n\n\n\n<p>In this example, we have created a HashMap.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var hashMap = new HashMap()  \r\n        var hashMap2 = HashMap(\"A\"->\"Apple\",\"B\"->\"Ball\",\"C\"->\"Cat\")  \r\n        println(hashMap)  \r\n        println(hashMap2)  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Map()\nMap(A -&amp;gt; Apple, B -&amp;gt; Ball, C -&amp;gt; Cat)\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala HashMap Example: Adding and Accessing Elements</h3>\n\n\n\n<p>In the following example, we have created a HashMap. this program add elements and access elements as well.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var hashMap = HashMap(\"A\"->\"Apple\",\"B\"->\"Ball\",\"C\"->\"Cat\")  \r\n        hashMap.foreach {  \r\n            case (key, value) => println (key + \" -> \" + value)       // Iterating elements  \r\n        }  \r\n        println(hashMap(\"B\"))               // Accessing value by using key  \r\n        var newHashMap = hashMap+(\"D\"->\"Doll\")  \r\n        newHashMap.foreach {  \r\n            case (key, value) => println (key + \" -> \" + value)  \r\n        }  \r\n          \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>A -&amp;gt; Apple\nB -&amp;gt; Ball\nC -&amp;gt; Cat\nBall\nA -&amp;gt; Apple\nB -&amp;gt; Ball\nC -&amp;gt; Cat\nD -&amp;gt; Doll</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>HashMap is used to store element. It use hash code to store elements and return a map. HashMap Example In this example, we have created a HashMap. Output: Scala HashMap Example: Adding and Accessing Elements In the following example, we have created a HashMap. this program add elements and access elements as well. Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/286"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=286"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/286/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 287,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/286/revisions/287"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=286"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=286"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=286"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 288,
    "date": "2020-10-19T11:29:43",
    "date_gmt": "2020-10-19T11:29:43",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=288"
    },
    "modified": "2020-10-19T11:29:43",
    "modified_gmt": "2020-10-19T11:29:43",
    "slug": "scala-listmap",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-listmap/",
    "title": {
      "rendered": "Scala ListMap"
    },
    "content": {
      "rendered": "\n<p>This class implements immutable maps by using a list-based data structure. It maintains insertion order and returns ListMap. This collection is suitable for small elements.</p>\n\n\n\n<p>You can create empty ListMap either by calling its constructor or using ListMap.empty method.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala ListMap Example</h2>\n\n\n\n<p>In this example, we have created an empty ListMap and non-empty ListMap as well.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var listMap = ListMap(\"Rice\"->\"100\",\"Wheat\"->\"50\",\"Gram\"->\"500\")    // Creating listmap with elements  \r\n        var emptyListMap = new ListMap()            // Creating an empty list map  \r\n        var emptyListMap2 = ListMap.empty           // Creating an empty list map  \r\n        println(listMap)  \r\n        println(emptyListMap)  \r\n        println(emptyListMap2)  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ListMap(Rice -&amp;gt; 100, Wheat -&amp;gt; 50, Gram -&amp;gt; 500)\nListMap()\nListMap()\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala ListMap Example: Applying Basic Operations</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.collection.immutable._  \r\nobject MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var listMap = ListMap(\"Rice\"->\"100\",\"Wheat\"->\"50\",\"Gram\"->\"500\")    // Creating listmap with elements  \r\n        listMap.foreach{  \r\n            case(key,value)=>println(key+\"->\"+value)  \r\n        }  \r\n        println(listMap(\"Gram\"))  \r\n        var newListMap = listMap+(\"Pulses\"->\"550\")  \r\n        newListMap.foreach {  \r\n            case (key, value) => println (key + \" -> \" + value)  \r\n        }     \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rice-&amp;gt;100\nWheat-&amp;gt;50\nGram-&amp;gt;500\n500\nRice -&amp;gt; 100\nWheat -&amp;gt; 50\nGram -&amp;gt; 500\nPulses -&amp;gt; 550</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This class implements immutable maps by using a list-based data structure. It maintains insertion order and returns ListMap. This collection is suitable for small elements. You can create empty ListMap either by calling its constructor or using ListMap.empty method. Scala ListMap Example In this example, we have created an empty ListMap and non-empty ListMap as [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/288"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=288"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/288/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 289,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/288/revisions/289"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=288"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=288"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=288"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 290,
    "date": "2020-10-19T11:30:44",
    "date_gmt": "2020-10-19T11:30:44",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=290"
    },
    "modified": "2020-10-19T11:30:44",
    "modified_gmt": "2020-10-19T11:30:44",
    "slug": "scala-tuples",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-tuples/",
    "title": {
      "rendered": "Scala Tuples"
    },
    "content": {
      "rendered": "\n<p>A tuple is a collection of elements in ordered form. If there is no element present, it is called empty tuple. You can use tuple to store any type of data. You can store similar type or mix type data also. You can use it to return multiple values from a function</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Tuple Example</h2>\n\n\n\n<p>In the following example, we have created tuple of different types of elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var tuple = (1,5,8,6,4)                     // Tuple of integer values  \r\n        var tuple2 = (\"Apple\",\"Banana\",\"Gavava\")        // Tuple of string values  \r\n        var tuple3 = (2.5,8.4,10.50)                // Tuple of float values  \r\n        var tuple4 = (1,2.5,\"India\")                // Tuple of mix type values  \r\n        println(tuple)  \r\n        println(tuple2)  \r\n        println(tuple3)  \r\n        println(tuple4)  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>(1,5,8,6,4)\n(Apple,Banana,Gavava)\n(2.5,8.4,10.5)\n(1,2.5,India)\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Tuple Example: Accessing Tuple Elements</h3>\n\n\n\n<p>In this example, we are accessing tuple elements by using index. Here, we are using productIterator for iterating tuple elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var tupleValues = (1,2.5,\"India\")  \r\n        println(\"iterating values: \")  \r\n        tupleValues.productIterator.foreach(println)    // Iterating tuple values using productIterator  \r\n        println(\"Accessing values: \")  \r\n        println(tupleValues._1) // Fetching first value  \r\n        println(tupleValues._2) // Fetching second value  \r\n    }  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>iterating values: \n1\n2.5\nIndia\nAccessing values: \n1\n2.5</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A tuple is a collection of elements in ordered form. If there is no element present, it is called empty tuple. You can use tuple to store any type of data. You can store similar type or mix type data also. You can use it to return multiple values from a function Scala Tuple Example [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/290"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=290"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/290/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 291,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/290/revisions/291"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=290"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=290"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=290"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 292,
    "date": "2020-10-19T11:31:38",
    "date_gmt": "2020-10-19T11:31:38",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=292"
    },
    "modified": "2020-10-19T11:31:38",
    "modified_gmt": "2020-10-19T11:31:38",
    "slug": "scala-tuple-example-function-return-multiple-values",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-tuple-example-function-return-multiple-values/",
    "title": {
      "rendered": "Scala Tuple Example: Function Return Multiple Values"
    },
    "content": {
      "rendered": "\n<p>You can return multiple values by using tuple. Function does not return multiple values but you can do this with the help of tuple. In the following example, we are describing this process.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>object MainObject{  \r\n    def main(args:Array&#91;String]){  \r\n        var tupleValues = tupleFunction()  \r\n        println(\"Iterating values: \")  \r\n        tupleValues.productIterator.foreach(println)    // Iterating tuple values using productIterator  \r\n    }  \r\n    def tupleFunction()={  \r\n        var tuple = (1,2.5,\"India\")  \r\n        tuple  \r\n    }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Iterating values: \r\n1\r\n2.5\r\nIndia</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>You can return multiple values by using tuple. Function does not return multiple values but you can do this with the help of tuple. In the following example, we are describing this process. Output:</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/292"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=292"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/292/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 293,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/292/revisions/293"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=292"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=292"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=292"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 294,
    "date": "2020-10-19T11:33:26",
    "date_gmt": "2020-10-19T11:33:26",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=294"
    },
    "modified": "2020-10-19T11:33:26",
    "modified_gmt": "2020-10-19T11:33:26",
    "slug": "scala-file-handling",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-file-handling/",
    "title": {
      "rendered": "Scala File handling"
    },
    "content": {
      "rendered": "\n<p>Scala provides predefined methods to deal with file. You can create, open, write and read file. Scala provides a complete package&nbsp;<strong>scala.io</strong>&nbsp;for file handling.</p>\n\n\n\n<p>In this chapter, we will discuss all these file operations in detail.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Creating a File Example</h2>\n\n\n\n<p>Scala doesn&#8217;t provide file writing methods. So, you have to use the Java PrintWriter or FileWriter methods.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io._  \r\nval fileObject = new File(\"ScalaFile.txt\" )     // Creating a file  \r\nval printWriter = new PrintWriter(fileObject)       // Passing reference of file to the printwriter  \r\nprintWriter.write(\"Hello, This is scala file\")  // Writing to the file  \r\nprintWriter.close()             // Closing printwriter  </code></pre>\n\n\n\n<p>The above code will create a text file ScalaFile.txt. After creating file printwriter is used to write content to this file.</p>\n\n\n\n<h3>Scala Reading File Example: Reading Each Charecter</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.io.Source  \r\n  \r\nobject MainObject{  \r\n  def main(args:Array&#91;String]){  \r\n    val filename = \"ScalaFile.txt\"  \r\n    val fileSource = Source.fromFile(filename)  \r\n    while(fileSource.hasNext){  \r\n      println(fileSource.next)  \r\n    }  \r\n    fileSource.close()  \r\n  }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>H\ne\nl\nl\no\n,\n \nT\nh\ni\ns\n \ni\ns\n \ns\nc\na\nl\na\n \nf\ni\nl\ne\n</code></pre>\n\n\n\n<p>Scala provides file reading methods. In the above code, we have imported scala.io package and Source class is used to access file related methods like fromFile().</p>\n\n\n\n<p>You must close file refernce after reading or writing file by using close() method.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Scala Reading a File Example: Reading Each Line</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import scala.io.Source  \r\nobject MainObject{  \r\n  def main(args:Array&#91;String]){  \r\n    val filename = \"ScalaFile.txt\"  \r\n    val fileSource = Source.fromFile(filename)  \r\n    for(line&lt;-fileSource.getLines){  \r\n      println(line)  \r\n    }  \r\n    fileSource.close()  \r\n  }  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello, This is scala file</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Scala provides predefined methods to deal with file. You can create, open, write and read file. Scala provides a complete package&nbsp;scala.io&nbsp;for file handling. In this chapter, we will discuss all these file operations in detail. Scala Creating a File Example Scala doesn&#8217;t provide file writing methods. So, you have to use the Java PrintWriter or [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/294"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=294"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/294/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 295,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/294/revisions/295"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=294"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=294"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=294"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 296,
    "date": "2020-10-19T11:34:16",
    "date_gmt": "2020-10-19T11:34:16",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=296"
    },
    "modified": "2020-10-19T11:34:16",
    "modified_gmt": "2020-10-19T11:34:16",
    "slug": "scala-multithreading",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-multithreading/",
    "title": {
      "rendered": "Scala Multithreading"
    },
    "content": {
      "rendered": "\n<p>Multithreading is a process of executing multiple threads simultaneously. It allows you to perform multiple operations independently.</p>\n\n\n\n<p>You can achieved multitasking by using Multithreading. Threads are lightweight sub-processes which occupy less memory. Multithreading are used to develop concurrent applications in Scala.</p>\n\n\n\n<p>Scala does not provide any separate library for creating thread. If you are familiar with multithreading concept of Java, you will come to know that it is similar except the syntax of Scala language itself.</p>\n\n\n\n<p>You can create thread either by extending Thread class or Runnable interface. Both provide a run method to provide specific implementation.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Thread Life Cycle</h2>\n\n\n\n<p>Thread life cycle is a span of time in which thread starts and terminates. It has various phases like new, runnable, terminate, block etc. Thread class provides various methods to monitor thread&#8217;s states.</p>\n\n\n\n<p>The Scala thread states are as follows:</p>\n\n\n\n<ol><li>New</li><li>Runnable</li><li>Running</li><li>Non-Runnable (Blocked)</li><li>Terminated</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/scala/images/scala-multithreading1.png\" alt=\"Scala Multithreading 1\"/></figure>\n\n\n\n<h3>1) New</h3>\n\n\n\n<p>This is the first state of thread. It is just before starting of new thread.</p>\n\n\n\n<h3>2) Runnable</h3>\n\n\n\n<p>This is the state when thread has been started but the thread scheduler has not selected it to be the running thread.</p>\n\n\n\n<h3>3) Running</h3>\n\n\n\n<p>The thread is in running state if the thread scheduler has selected it.</p>\n\n\n\n<h3>4) Non-Runnable (Blocked)</h3>\n\n\n\n<p>This is the state when the thread is still alive, but is currently not eligible to run due to waiting for input or resources.</p>\n\n\n\n<h3>5) Terminated</h3>\n\n\n\n<p>A thread is in terminated or dead state when its run() method exits.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Multithreading is a process of executing multiple threads simultaneously. It allows you to perform multiple operations independently. You can achieved multitasking by using Multithreading. Threads are lightweight sub-processes which occupy less memory. Multithreading are used to develop concurrent applications in Scala. Scala does not provide any separate library for creating thread. If you are familiar [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/296"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=296"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/296/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 297,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/296/revisions/297"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=296"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=296"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=296"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 298,
    "date": "2020-10-19T11:35:10",
    "date_gmt": "2020-10-19T11:35:10",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=298"
    },
    "modified": "2020-10-19T11:35:10",
    "modified_gmt": "2020-10-19T11:35:10",
    "slug": "scala-thread",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-thread/",
    "title": {
      "rendered": "Scala Thread"
    },
    "content": {
      "rendered": "\n<p>There are two ways to create a thread:</p>\n\n\n\n<ol><li>By extending Thread class</li><li>By implementing Runnable interface</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Thread Example by Extending Thread Class</h2>\n\n\n\n<p>The following example extends Thread class and overrides run method. The start() method is used to start thread.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ThreadExample extends Thread{  \r\noverride def run(){  \r\nprintln(\"Thread is running...\");  \r\n}  \r\n}  \r\nobject MainObject{  \r\ndef main(args:Array&#91;String]){  \r\nvar t = new ThreadExample()  \r\nt.start()  \r\n}  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Thread is running...\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Thread Example by Extending Runnable Interface</h2>\n\n\n\n<p>The following example implements Runnable interface and overrides run method. The start() method is used to start thread.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ThreadExample extends Runnable{  \r\noverride def run(){  \r\nprintln(\"Thread is running...\")  \r\n}  \r\n}  \r\nobject MainObject{  \r\ndef main(args:Array&#91;String]){  \r\nvar e = new ThreadExample()  \r\nvar t = new Thread(e)  \r\nt.start()  \r\n}  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Thread is running...</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>There are two ways to create a thread: By extending Thread class By implementing Runnable interface Scala Thread Example by Extending Thread Class The following example extends Thread class and overrides run method. The start() method is used to start thread.   Output: Scala Thread Example by Extending Runnable Interface The following example implements Runnable [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/298"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=298"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/298/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 299,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/298/revisions/299"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=298"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=298"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=298"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 300,
    "date": "2020-10-19T11:37:55",
    "date_gmt": "2020-10-19T11:37:55",
    "guid": {
      "rendered": "http://computerprogramming.foobrdigital.com/?p=300"
    },
    "modified": "2020-10-19T11:37:55",
    "modified_gmt": "2020-10-19T11:37:55",
    "slug": "scala-thread-methods",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/scala-thread-methods/",
    "title": {
      "rendered": "Scala Thread Methods"
    },
    "content": {
      "rendered": "\n<p>Thread class provides various methods to deals with thread&#8217;s states. You can use these methods to control the flow of thread.</p>\n\n\n\n<p>The following table contains commonly used methods of Thread class.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>public final String getName()</td><td>It returns thread&#8217;s name.</td></tr><tr><td>public final int getPriority()</td><td>It returns thread&#8217;s priority.</td></tr><tr><td>public Thread.State getState()</td><td>It returns the state of this thread. This method is designed for use in monitoring of the system state, not for synchronization control.</td></tr><tr><td>public final boolean isAlive()</td><td>It tests if this thread is alive. A thread is alive if it has been started and has not yet died.</td></tr><tr><td>public final void join() throws InterruptedException</td><td>It Waits for thread to die.</td></tr><tr><td>public void run()</td><td>If this thread was constructed using a separate Runnable run object, then that Runnable object&#8217;s run method is called; otherwise, this method does nothing and returns.</td></tr><tr><td>public final void setName(String name)</td><td>It is used to set thread name.</td></tr><tr><td>public final void setPriority(int newPriority)</td><td>It is used to set priority of a thread.</td></tr><tr><td>public static void sleep(long millis) throws InterruptedException</td><td>It is used to sleep executing thread for the specified number of milliseconds.</td></tr><tr><td>public static void yield()</td><td>It causes the currently executing thread object to temporarily pause and allow other threads to execute.</td></tr></tbody></table></figure>\n\n\n\n<h2>Scala Thread sleep() Method</h2>\n\n\n\n<p>The sleep() method is used to sleep thread for the specified time. It takes time in milliseconds as an argument.</p>\n\n\n\n<p> </p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ThreadExample extends Thread{  \r\noverride def run(){  \r\nfor(i&lt;- 0 to 5){  \r\nprintln(i)  \r\nThread.sleep(500)  \r\n}  \r\n}  \r\n  \r\n}  \r\n  \r\nobject MainObject{  \r\ndef main(args:Array&#91;String]){  \r\nvar t1 = new ThreadExample()  \r\nvar t2 = new ThreadExample()  \r\nt1.start()  \r\nt2.start()  \r\n}  \r\n} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n0\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Thread join() Method Example</h2>\n\n\n\n<p>The join() method waits for a thread to die. In other words, The join() method is used to hold the execution of currently running thread until the specified thread finished it&#8217;s execution.</p>\n\n\n\n<ol><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>class ThreadExample extends Thread{  \r\noverride def run(){  \r\nfor(i&lt;- 0 to 5){  \r\nprintln(i)  \r\nThread.sleep(500)  \r\n}  \r\n}  \r\n  \r\n}  \r\nobject MainObject{  \r\ndef main(args:Array&#91;String]){  \r\nvar t1 = new ThreadExample()  \r\nvar t2 = new ThreadExample()  \r\nvar t3 = new ThreadExample()  \r\nt1.start()  \r\nt1.join()  \r\nt2.start()  \r\nt3.start()  \r\n}  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n1\n2\n3\n4\n5\n0\n0\n1\n1\n2\n2\n3\n3\n4\n4\n5\n5\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala setName() Method Example</h2>\n\n\n\n<p>In the following example, we are setting and getting names of threads.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ThreadExample() extends Thread{  \r\noverride def run(){  \r\nfor(i&lt;- 0 to 5){  \r\nprintln(this.getName()+\" - \"+i)  \r\nThread.sleep(500)  \r\n}  \r\n}  \r\n}  \r\n  \r\nobject MainObject{  \r\ndef main(args:Array&#91;String]){  \r\nvar t1 = new ThreadExample()  \r\nvar t2 = new ThreadExample()  \r\nvar t3 = new ThreadExample()  \r\nt1.setName(\"First Thread\")  \r\nt2.setName(\"Second Thread\")  \r\nt1.start()  \r\nt2.start()  \r\n}  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>First Thread - 0\nSecond Thread - 0\nSecond Thread - 1\nFirst Thread - 1\nSecond Thread - 2\nFirst Thread - 2\nSecond Thread - 3\nFirst Thread - 3\nSecond Thread - 4\nFirst Thread - 4\nSecond Thread - 5\nFirst Thread - 5\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Thread Priority Example</h2>\n\n\n\n<p>You can set thread priority by using it&#8217;s predefined method. The following example sets priority for the thread.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ThreadExample() extends Thread{  \r\noverride def run(){  \r\nfor(i&lt;- 0 to 5){  \r\nprintln(this.getName())  \r\nprintln(this.getPriority())  \r\nThread.sleep(500)  \r\n}  \r\n}  \r\n}  \r\nobject MainObject{  \r\ndef main(args:Array&#91;String]){  \r\nvar t1 = new ThreadExample()  \r\nvar t2 = new ThreadExample()  \r\nt1.setName(\"First Thread\")  \r\nt2.setName(\"Second Thread\")  \r\nt1.setPriority(Thread.MIN_PRIORITY)  \r\nt2.setPriority(Thread.MAX_PRIORITY)  \r\nt1.start()  \r\nt2.start()  \r\n}  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>First Thread\nSecond Thread\n10\n1\nSecond Thread\n10\nFirst Thread\n1\nSecond Thread\n10\nFirst Thread\n1\nSecond Thread\n10\nFirst Thread\n1\nSecond Thread\n10\nFirst Thread\n1\nSecond Thread\n10\nFirst Thread\n1\n</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Scala Thread Multitasking Example</h2>\n\n\n\n<p>The following example is running multiple tasks by using multiple threads. This example explains that how can we implement multitasking in Scala.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ThreadExample() extends Thread{  \r\noverride def run(){  \r\nfor(i&lt;- 0 to 5){  \r\nprintln(i)              \r\nThread.sleep(500)  \r\n}  \r\n}  \r\ndef task(){  \r\nfor(i&lt;- 0 to 5){  \r\nprintln(i)  \r\nThread.sleep(200)  \r\n}  \r\n}  \r\n}  \r\n  \r\nobject MainObject{  \r\ndef main(args:Array&#91;String]){  \r\nvar t1 = new ThreadExample()  \r\nt1.start()  \r\nt1.task()           \r\n}  \r\n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n0\n1\n2\n1\n3\n4\n2\n5\n3\n4\n5</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Thread class provides various methods to deals with thread&#8217;s states. You can use these methods to control the flow of thread. The following table contains commonly used methods of Thread class. Method Description public final String getName() It returns thread&#8217;s name. public final int getPriority() It returns thread&#8217;s priority. public Thread.State getState() It returns the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 2,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      7
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/300"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/2"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=300"
        }
      ],
      "version-history": [
        {
          "count": 1,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/300/revisions"
        }
      ],
      "predecessor-version": [
        {
          "id": 301,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/300/revisions/301"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=300"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=300"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=300"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]