[
  {
    "id": 4180,
    "date": "2020-06-15T05:55:47",
    "date_gmt": "2020-06-15T05:55:47",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=261"
    },
    "modified": "2020-06-15T05:55:47",
    "modified_gmt": "2020-06-15T05:55:47",
    "slug": "overview-3-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/overview-3-2/",
    "title": {
      "rendered": "Overview"
    },
    "content": {
      "rendered": "\n<p>aravel is an open-source PHP framework, which is robust and easy to understand. It follows a model-view-controller design pattern. Laravel reuses the existing components of different frameworks which helps in creating a web application. The web application thus designed is more structured and pragmatic.</p>\n\n\n\n<p>Laravel offers a rich set of functionalities which incorporates the basic features of PHP frameworks like CodeIgniter, Yii and other programming languages like Ruby on Rails. Laravel has a very rich set of features which will boost the speed of web development.</p>\n\n\n\n<p>If you are familiar with Core PHP and Advanced PHP, Laravel will make your task easier. It saves a lot time if you are planning to develop a website from scratch. Moreover, a website built in Laravel is secure and prevents several web attacks.</p>\n\n\n\n<h2>Advantages of Laravel</h2>\n\n\n\n<p>Laravel offers you the following advantages, when you are designing a web application based on it −</p>\n\n\n\n<ul><li>The web application becomes more scalable, owing to the Laravel framework.</li><li>Considerable time is saved in designing the web application, since Laravel reuses the components from other framework in developing web application.</li><li>It includes namespaces and interfaces, thus helps to organize and manage resources.</li></ul>\n\n\n\n<h3>Composer</h3>\n\n\n\n<p>Composer is a tool which includes all the dependencies and libraries. It allows a user to create a project with respect to the mentioned framework (for example, those used in Laravel installation). Third party libraries can be installed easily with help of composer.</p>\n\n\n\n<p>All the dependencies are noted in&nbsp;<strong>composer.json</strong>&nbsp;file which is placed in the source folder.</p>\n\n\n\n<h3>Artisan</h3>\n\n\n\n<p>Command line interface used in Laravel is called&nbsp;<strong>Artisan</strong>. It includes a set of commands which assists in building a web application. These commands are incorporated from Symphony framework, resulting in add-on features in Laravel 5.1 (latest version of Laravel).</p>\n\n\n\n<h2>Features of Laravel</h2>\n\n\n\n<p>Laravel offers the following key features which makes it an ideal choice for designing web applications −</p>\n\n\n\n<h3>Modularity</h3>\n\n\n\n<p>Laravel provides 20 built in libraries and modules which helps in enhancement of the application. Every module is integrated with Composer dependency manager which eases updates.</p>\n\n\n\n<h3>Testability</h3>\n\n\n\n<p>Laravel includes features and helpers which helps in testing through various test cases. This feature helps in maintaining the code as per the requirements.</p>\n\n\n\n<h3>Routing</h3>\n\n\n\n<p>Laravel provides a flexible approach to the user to define routes in the web application. Routing helps to scale the application in a better way and increases its performance.</p>\n\n\n\n<h3>Configuration Management</h3>\n\n\n\n<p>A web application designed in Laravel will be running on different environments, which means that there will be a constant change in its configuration. Laravel provides a consistent approach to handle the configuration in an efficient way.</p>\n\n\n\n<h3>Query Builder and ORM</h3>\n\n\n\n<p>Laravel incorporates a query builder which helps in querying databases using various simple chain methods. It provides&nbsp;<strong>ORM</strong>&nbsp;(Object Relational Mapper) and&nbsp;<strong>ActiveRecord</strong>&nbsp;implementation called Eloquent.</p>\n\n\n\n<h3>Schema Builder</h3>\n\n\n\n<p>Schema Builder maintains the database definitions and schema in PHP code. It also maintains a track of changes with respect to database migrations.</p>\n\n\n\n<h3>Template Engine</h3>\n\n\n\n<p>Laravel uses the&nbsp;<strong>Blade Template</strong>&nbsp;engine, a lightweight template language used to design hierarchical blocks and layouts with predefined blocks that include dynamic content.</p>\n\n\n\n<h3>E-mail</h3>\n\n\n\n<p>Laravel includes a&nbsp;<strong>mail</strong>&nbsp;class which helps in sending mail with rich content and attachments from the web application.</p>\n\n\n\n<h3>Authentication</h3>\n\n\n\n<p>User authentication is a common feature in web applications. Laravel eases designing authentication as it includes features such as&nbsp;<strong>register, forgot password</strong>&nbsp;and&nbsp;<strong>send password reminders</strong>.</p>\n\n\n\n<h3>Redis</h3>\n\n\n\n<p>Laravel uses&nbsp;<strong>Redis</strong>&nbsp;to connect to an existing session and general-purpose cache. Redis interacts with session directly.</p>\n\n\n\n<h3>Queues</h3>\n\n\n\n<p>Laravel includes queue services like emailing large number of users or a specified&nbsp;<strong>Cron</strong>&nbsp;job. These queues help in completing tasks in an easier manner without waiting for the previous task to be completed.</p>\n\n\n\n<h3>Event and Command Bus</h3>\n\n\n\n<p>Laravel 5.1 includes&nbsp;<strong>Command Bus</strong>&nbsp;which helps in executing commands and dispatch events in a simple way. The commands in Laravel act as per the application’s lifecycle.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>aravel is an open-source PHP framework, which is robust and easy to understand. It follows a model-view-controller design pattern. Laravel reuses the existing components of different frameworks which helps in creating a web application. The web application thus designed is more structured and pragmatic. Laravel offers a rich set of functionalities which incorporates the basic [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4180"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4180"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4180/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4180"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4180"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4180"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4181,
    "date": "2020-06-15T05:58:37",
    "date_gmt": "2020-06-15T05:58:37",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=265"
    },
    "modified": "2020-06-15T05:58:37",
    "modified_gmt": "2020-06-15T05:58:37",
    "slug": "application-structure",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/application-structure/",
    "title": {
      "rendered": "Application Structure"
    },
    "content": {
      "rendered": "\n<p>The application structure in Laravel is basically the structure of folders, sub-folders and files included in a project. Once we create a project in Laravel, we get an overview of the application structure as shown in the image here.</p>\n\n\n\n<p>The snapshot shown here refers to the root folder of Laravel namely&nbsp;<strong>laravel-project</strong>. It includes various sub-folders and files. The analysis of folders and files, along with their functional aspects is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/root_directory.jpg\" alt=\"Root Directory\"/></figure>\n\n\n\n<h2>App</h2>\n\n\n\n<p>It is the application folder and includes the entire source code of the project. It contains events, exceptions and middleware declaration. The app folder comprises various sub folders as explained below −</p>\n\n\n\n<h3>Console</h3>\n\n\n\n<p>Console includes the artisan commands necessary for Laravel. It includes a directory named&nbsp;<strong>Commands</strong>, where all the commands are declared with the appropriate signature. The file&nbsp;<strong>Kernal.php</strong>&nbsp;calls the commands declared in&nbsp;<strong>Inspire.php</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/console.jpg\" alt=\"Console\"/></figure>\n\n\n\n<p>If we need to call a specific command in Laravel, then we should make appropriate changes in this directory.</p>\n\n\n\n<h3>Events</h3>\n\n\n\n<p>This folder includes all the events for the project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/events.jpg\" alt=\"Events\"/></figure>\n\n\n\n<p>Events are used to trigger activities, raise errors or necessary validations and provide greater flexibility. Laravel keeps all the events under one directory. The default file included is&nbsp;<strong>event.php</strong>&nbsp;where all the basic events are declared.</p>\n\n\n\n<h3>Exceptions</h3>\n\n\n\n<p>This folder contains all the methods needed to handle exceptions. It also contains the file&nbsp;<strong>handle.php</strong>&nbsp;that handles all the exceptions.</p>\n\n\n\n<h3>Http</h3>\n\n\n\n<p>The&nbsp;<strong>Http</strong>&nbsp;folder has sub-folders for controllers, middleware and application requests. As Laravel follows the MVC design pattern, this folder includes model, controllers and views defined for the specific directories.</p>\n\n\n\n<p>The&nbsp;<strong>Middleware</strong>&nbsp;sub-folder includes middleware mechanism, comprising the filter mechanism and communication between response and request.</p>\n\n\n\n<p>The&nbsp;<strong>Requests</strong>&nbsp;sub-folder includes all the requests of the application.</p>\n\n\n\n<h3>Jobs</h3>\n\n\n\n<p>The&nbsp;<strong>Jobs</strong>&nbsp;directory maintains the activities queued for Laravel application. The base class is shared among all the Jobs and provides a central location to place them under one roof.</p>\n\n\n\n<h3>Listeners</h3>\n\n\n\n<p>Listeners are event-dependent and they include methods which are used to handle events and exceptions. For example, the&nbsp;<strong>login</strong>&nbsp;event declared includes a&nbsp;<strong>LoginListener</strong>&nbsp;event.</p>\n\n\n\n<h3>Policies</h3>\n\n\n\n<p>Policies are the PHP classes which includes the authorization logic. Laravel includes a feature to create all authorization logic within policy classes inside this sub folder.</p>\n\n\n\n<h3>Providers</h3>\n\n\n\n<p>This folder includes all the service providers required to register events for core servers and to configure a Laravel application.</p>\n\n\n\n<h2>Bootstrap</h2>\n\n\n\n<p>This folder encloses all the application bootstrap scripts. It contains a sub-folder namely&nbsp;<strong>cache</strong>, which includes all the files associated for caching a web application. You can also find the file&nbsp;<strong>app.php</strong>, which initializes the scripts necessary for bootstrap.</p>\n\n\n\n<h2>Config</h2>\n\n\n\n<p>The&nbsp;<strong>config</strong>&nbsp;folder includes various configurations and associated parameters required for the smooth functioning of a Laravel application. Various files included within the config folder are as shown in the image here. The filenames work as per the functionality associated with them.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/configfolder.jpg\" alt=\"Config-folder\"/></figure>\n\n\n\n<h2>Database</h2>\n\n\n\n<p>As the name suggests, this directory includes various parameters for database functionalities. It includes three sub-directories as given below −</p>\n\n\n\n<ul><li><strong>Seeds</strong>&nbsp;− This contains the classes used for unit testing database.</li><li><strong>Migrations</strong>&nbsp;− This folder helps in queries for migrating the database used in the web application.</li><li><strong>Factories</strong>&nbsp;− This folder is used to generate large number of data records.</li></ul>\n\n\n\n<h2>Public</h2>\n\n\n\n<p>It is the root folder which helps in initializing the Laravel application. It includes the following files and folders −</p>\n\n\n\n<ul><li><strong>.htaccess</strong>&nbsp;− This file gives the server configuration.</li><li><strong>javascript and css</strong>&nbsp;− These files are considered as assets.</li><li><strong>index.php</strong>&nbsp;− This file is required for the initialization of a web application.</li></ul>\n\n\n\n<h2>Resources</h2>\n\n\n\n<p>Resources directory contains the files which enhances your web application. The sub-folders included in this directory and their purpose is explained below −</p>\n\n\n\n<ul><li><strong>assets</strong>&nbsp;− The assets folder include files such as LESS and SCSS, that are required for styling the web application.</li><li><strong>lang</strong>&nbsp;− This folder includes configuration for localization or internalization.</li><li><strong>views</strong>&nbsp;− Views are the HTML files or templates which interact with end users and play a primary role in MVC architecture.</li></ul>\n\n\n\n<p>Observe that the resources directory will be flattened instead of having an assets folder. The pictorial representation of same is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/resource_directory_changes.jpg\" alt=\"Resource Directory Changes\"/></figure>\n\n\n\n<h2>Storage</h2>\n\n\n\n<p>This is the folder that stores all the logs and necessary files which are needed frequently when a Laravel project is running. The sub-folders included in this directory and their purpose is given below −</p>\n\n\n\n<ul><li><strong>app</strong>&nbsp;− This folder contains the files that are called in succession.</li><li><strong>framework</strong>&nbsp;− It contains sessions, cache and views which are called frequently.</li><li><strong>Logs</strong>&nbsp;− All exceptions and error logs are tracked in this sub folder.</li></ul>\n\n\n\n<h2>Tests</h2>\n\n\n\n<p>All the unit test cases are included in this directory. The naming convention for naming test case classes is&nbsp;<strong>camel_case</strong>&nbsp;and follows the convention as per the functionality of the class.</p>\n\n\n\n<h2>Vendor</h2>\n\n\n\n<p>Laravel is completely based on Composer dependencies, for example to install Laravel setup or to include third party libraries, etc. The Vendor folder includes all the composer dependencies.</p>\n\n\n\n<p>In addition to the above mentioned files, Laravel also includes some other files which play a primary role in various functionalities such as GitHub configuration, packages and third party libraries.</p>\n\n\n\n<p>The files included in the application structure are shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/files.jpg\" alt=\"Files\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The application structure in Laravel is basically the structure of folders, sub-folders and files included in a project. Once we create a project in Laravel, we get an overview of the application structure as shown in the image here. The snapshot shown here refers to the root folder of Laravel namely&nbsp;laravel-project. It includes various sub-folders [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4181"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4181"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4181/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4181"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4181"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4181"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4182,
    "date": "2020-06-15T06:06:03",
    "date_gmt": "2020-06-15T06:06:03",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=267"
    },
    "modified": "2020-06-15T06:06:03",
    "modified_gmt": "2020-06-15T06:06:03",
    "slug": "configuration-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/configuration-3/",
    "title": {
      "rendered": "Configuration"
    },
    "content": {
      "rendered": "\n<p>In the previous chapter, we have seen that the basic configuration files of Laravel are included in the&nbsp;<strong>config</strong>&nbsp;directory. In this chapter, let us discuss the categories included in the configuration.</p>\n\n\n\n<h2>Environment Configuration</h2>\n\n\n\n<p>Environment variables are those which provide a list of web services to your web application. All the environment variables are declared in the&nbsp;<strong>.env</strong>&nbsp;file which includes the parameters required for initializing the configuration.</p>\n\n\n\n<p>By default, the <strong>.env</strong> file includes following parameters −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>APP_ENV = local\nAPP_DEBUG = true\nAPP_KEY = base64:ZPt2wmKE/X4eEhrzJU6XX4R93rCwYG8E2f8QUA7kGK8 =\nAPP_URL = http://localhost\nDB_CONNECTION = mysql\nDB_HOST = 127.0.0.1\nDB_PORT = 3306\nDB_DATABASE = homestead\nDB_USERNAME = homestead\nDB_PASSWORD = secret\nCACHE_DRIVER = file\nSESSION_DRIVER = file\nQUEUE_DRIVER = sync\nREDIS_HOST = 127.0.0.1\nREDIS_PASSWORD = null\nREDIS_PORT = 6379\nMAIL_DRIVER = smtp\nMAIL_HOST = mailtrap.ioMAIL_PORT = 2525\nMAIL_USERNAME = null\nMAIL_PASSWORD = null\nMAIL_ENCRYPTION = null\n﻿</code></pre>\n\n\n\n<h3>Important Points</h3>\n\n\n\n<p>While working with basic configuration files of Laravel, the following points are to be noted −</p>\n\n\n\n<ul><li>The&nbsp;<strong>.env</strong>&nbsp;file should not be committed to the application source control, since each developer or user has some predefined environment configuration for the web application.</li><li>For backup options, the development team should include the&nbsp;<strong>.env.example</strong>&nbsp;file, which should contain the default configuration.</li></ul>\n\n\n\n<h3>Retrieval of Environment Variables</h3>\n\n\n\n<p>All the environment variables declared in the <strong>.env</strong> file can be accessed by <strong>env-helper</strong> functions which will call the respective parameter. These variables are also listed into <strong>$_ENV</strong> global variable whenever application receives a request from the user end. You can access the environment variable as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>'env' => env('APP_ENV', 'production'),</code></pre>\n\n\n\n<p><strong>env-helper</strong>&nbsp;functions are called in the&nbsp;<strong>app.php</strong>&nbsp;file included in the&nbsp;<strong>config</strong>&nbsp;folder. The above given example is calling for the basic local parameter.</p>\n\n\n\n<h2>Accessing Configuration Values</h2>\n\n\n\n<p>You can easily access the configuration values anywhere in the application using the global config helper function. In case if the configuration values are not initialized, default values are returned.</p>\n\n\n\n<p>For example, to set the default time zone, the following code is used −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>config(&#91;'app.timezone' => 'Asia/Kolkata']);</code></pre>\n\n\n\n<h2>Caching of Configuration</h2>\n\n\n\n<p>To increase the performance and to boost the web application, it is important to cache all the configuration values. The command for caching the configuration values is −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>config:cache</code></pre>\n\n\n\n<p>The following screenshot shows caching in a systematic approach −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/configuration_caching.jpg\" alt=\"Configuration Caching\"/></figure>\n\n\n\n<h2>Maintenance Mode</h2>\n\n\n\n<p>Sometimes you may need to update some configuration values or perform maintenance on your website. In such cases, keeping it in&nbsp;<strong>maintenance mode</strong>, makes it easier for you. Such web applications which are kept in maintenance mode, throw an exception namely&nbsp;<strong>MaintenanceModeException</strong>&nbsp;with a status code of 503.</p>\n\n\n\n<p>You can enable the maintenance mode on your Laravel web application using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan down</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/php_artisian_down.jpg\" alt=\"PHP Artisian Down\"/></figure>\n\n\n\n<p>The following screenshot shows how the web application looks when it is down −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/start_maintenance_mode.jpg\" alt=\"Start Maintenance Mode\"/></figure>\n\n\n\n<p>Once you finish working on updates and other maintenance, you can disable the maintenance mode on your web application using following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan up</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/php_artisian_up.jpg\" alt=\"Start Maintenance Up\"/></figure>\n\n\n\n<p>Now, you can find that the website shows the output with proper functioning and depicting that the maintenance mode is now removed as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/laravel_installed.jpg\" alt=\"Laravel Installed\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the previous chapter, we have seen that the basic configuration files of Laravel are included in the&nbsp;config&nbsp;directory. In this chapter, let us discuss the categories included in the configuration. Environment Configuration Environment variables are those which provide a list of web services to your web application. All the environment variables are declared in the&nbsp;.env&nbsp;file [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4182"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4182"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4182/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4182"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4182"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4182"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4183,
    "date": "2020-06-15T06:09:08",
    "date_gmt": "2020-06-15T06:09:08",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=269"
    },
    "modified": "2020-06-15T06:09:08",
    "modified_gmt": "2020-06-15T06:09:08",
    "slug": "routing-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/routing-3/",
    "title": {
      "rendered": "Routing"
    },
    "content": {
      "rendered": "\n<p>In Laravel, all requests are mapped with the help of routes. Basic routing routes the request to the associated controllers. This chapter discusses routing in Laravel.</p>\n\n\n\n<p>Routing in Laravel includes the following categories −</p>\n\n\n\n<ul><li>Basic Routing</li><li>Route parameters</li><li>Named Routes</li></ul>\n\n\n\n<h2>Basic Routing</h2>\n\n\n\n<p>All the application routes are registered within the&nbsp;<strong>app/routes.php</strong>&nbsp;file. This file tells Laravel for the URIs it should respond to and the associated controller will give it a particular call. The sample route for the welcome page can be seen as shown in the screenshot given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/routes.jpg\" alt=\"Routes\"/><figcaption><br></figcaption></figure>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get ('/', function () {\n   return view('welcome');});</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about Routing −</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\nRoute::get('/', function () {\n   return view('welcome');\n});</code></pre>\n\n\n\n<p><strong>resources/view/welcome.blade.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>Laravel&lt;/title>\n      &lt;link href = \"https://fonts.googleapis.com/css?family=Lato:100\" rel = \"stylesheet\" \n         type = \"text/css\">\n      \n      &lt;style>\n         html, body {\n            height: 100%;\n         }\n         body {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            display: table;\n            font-weight: 100;\n            font-family: 'Lato';\n         }\n         .container {\n            text-align: center;\n            display: table-cell;\n            vertical-align: middle;\n         }\n         .content {\n            text-align: center;\n            display: inline-block;\n         }\n         .title {\n            font-size: 96px;\n         }\n      &lt;/style>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"container\">\n         \n         &lt;div class = \"content\">\n            &lt;div class = \"title\">Laravel 5.1&lt;/div>\n         &lt;/div>\n\t\t\t\n      &lt;/div>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The routing mechanism is shown in the image given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/routing_mechanism.jpg\" alt=\"Routing Mechanism\"/></figure>\n\n\n\n<p>Let us now understand the steps involved in routing mechanism in detail −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Initially, we should execute the root URL of the application.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Now, the executed URL should match with the appropriate method in the&nbsp;<strong>route.php</strong>&nbsp;file. In the present case, it should match the method and the root (‘/’) URL. This will execute the related function.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− The function calls the template file&nbsp;<strong>resources/views/welcome.blade.php.</strong>&nbsp;Next, the function calls the&nbsp;<strong>view()</strong>&nbsp;function with argument&nbsp;<strong>‘welcome’</strong>&nbsp;without using the&nbsp;<strong>blade.php</strong>.</p>\n\n\n\n<p>This will produce the HTML output as shown in the image below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/laravel5.jpg\" alt=\"Laravel5\"/></figure>\n\n\n\n<h2>Route Parameters</h2>\n\n\n\n<p>Sometimes in the web application, you may need to capture the parameters passed with the URL. For this, you should modify the code in&nbsp;<strong>routes.php</strong>&nbsp;file.</p>\n\n\n\n<p>You can capture the parameters in&nbsp;<strong>routes.php</strong>&nbsp;file in two ways as discussed here −</p>\n\n\n\n<h3>Required Parameters</h3>\n\n\n\n<p>These parameters are those which should be mandatorily captured for routing the web application. For example, it is important to capture the user’s identification number from the URL. This can be possible by defining route parameters as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('ID/{id}',function($id) {\n   echo 'ID: '.$id;\n});</code></pre>\n\n\n\n<h3>Optional Parameters</h3>\n\n\n\n<p>Sometimes developers can produce parameters as optional and it is possible with the inclusion of&nbsp;<strong>?</strong>&nbsp;after the parameter name in URL. It is important to keep the default value mentioned as a parameter name. Look at the following example that shows how to define an optional parameter −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('user/{name?}', function ($name = 'codemeals') { return $name;});</code></pre>\n\n\n\n<p>The example above checks if the value matches to <strong>codemeals</strong> and accordingly routes to the defined URL.</p>\n\n\n\n<h2>Named Routes</h2>\n\n\n\n<p>Named routes allow a convenient way of creating routes. The chaining of routes can be specified using name method onto the route definition. The following code shows an example for creating named routes with controller −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('user/profile', 'UserController@showProfile')->name('profile');</code></pre>\n\n\n\n<p>The user controller will call for the function&nbsp;<strong>showProfile</strong>&nbsp;with parameter as&nbsp;<strong>profile</strong>. The parameters use&nbsp;<strong>name</strong>&nbsp;method onto the route definition.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In Laravel, all requests are mapped with the help of routes. Basic routing routes the request to the associated controllers. This chapter discusses routing in Laravel. Routing in Laravel includes the following categories − Basic Routing Route parameters Named Routes Basic Routing All the application routes are registered within the&nbsp;app/routes.php&nbsp;file. This file tells Laravel for [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4183"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4183"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4183/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4183"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4183"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4183"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4184,
    "date": "2020-06-15T06:18:20",
    "date_gmt": "2020-06-15T06:18:20",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=271"
    },
    "modified": "2020-06-15T06:18:20",
    "modified_gmt": "2020-06-15T06:18:20",
    "slug": "middleware",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/middleware/",
    "title": {
      "rendered": "Middleware"
    },
    "content": {
      "rendered": "\n<p>Middleware acts as a bridge between a request and a response. It is a type of filtering mechanism. This chapter explains you the middleware mechanism in Laravel.</p>\n\n\n\n<p>Laravel includes a middleware that verifies whether the user of the application is authenticated or not. If the user is authenticated, it redirects to the home page otherwise, if not, it redirects to the login page.</p>\n\n\n\n<p>Middleware can be created by executing the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:middleware &lt;middleware-name></code></pre>\n\n\n\n<p>Replace the&nbsp;<strong>&lt;middleware-name&gt;</strong>&nbsp;with the name of your middleware. The middleware that you create can be seen at&nbsp;<strong>app/Http/Middleware</strong>&nbsp;directory.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand the middleware mechanism −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Let us now create AgeMiddleware. To create that, we need to execute the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:middleware AgeMiddleware</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution of the command, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/agemiddleware.jpg\" alt=\"AgeMiddleware\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;−&nbsp;<strong>AgeMiddleware</strong>&nbsp;will be created at&nbsp;<strong>app/Http/Middleware</strong>. The newly created file will have the following code already created for you.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\nuse Closure;\n\nclass AgeMiddleware {\n   public function handle($request, Closure $next) {\n      return $next($request);\n   }\n}</code></pre>\n\n\n\n<h2>Registering Middleware</h2>\n\n\n\n<p>We need to register each and every middleware before using it. There are two types of Middleware in Laravel.</p>\n\n\n\n<ul><li>Global Middleware</li><li>Route Middleware</li></ul>\n\n\n\n<p>The&nbsp;<strong>Global Middleware</strong>&nbsp;will run on every HTTP request of the application, whereas the&nbsp;<strong>Route Middleware</strong>&nbsp;will be assigned to a specific route. The middleware can be registered at&nbsp;<strong>app/Http/Kernel.php.</strong>&nbsp;This file contains two properties&nbsp;<strong>$middleware</strong>&nbsp;and&nbsp;<strong>$routeMiddleware</strong>.&nbsp;<strong>$middleware</strong>&nbsp;property is used to register Global Middleware and&nbsp;<strong>$routeMiddleware</strong>&nbsp;property is used to register route specific middleware.</p>\n\n\n\n<p>To register the global middleware, list the class at the end of $middleware property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected $middleware = &#91;\n   \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n   \\App\\Http\\Middleware\\EncryptCookies::class,\n   \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n   \\Illuminate\\Session\\Middleware\\StartSession::class,\n   \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n   \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n];</code></pre>\n\n\n\n<p>To register the route specific middleware, add the key and value to $routeMiddleware property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected $routeMiddleware = &#91;\n   'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n   'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n   'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n];</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>We have created&nbsp;<strong>AgeMiddleware</strong>&nbsp;in the previous example. We can now register it in route specific middleware property. The code for that registration is shown below.</p>\n\n\n\n<p>The following is the code for&nbsp;<strong>app/Http/Kernel.php</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http;\nuse Illuminate\\Foundation\\Http\\Kernel as HttpKernel;\n\nclass Kernel extends HttpKernel {\n   protected $middleware = &#91;\n      \\Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::class,\n      \\App\\Http\\Middleware\\EncryptCookies::class,\n      \\Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::class,\n      \\Illuminate\\Session\\Middleware\\StartSession::class,\n      \\Illuminate\\View\\Middleware\\ShareErrorsFromSession::class,\n      \\App\\Http\\Middleware\\VerifyCsrfToken::class,\n   ];\n  \n   protected $routeMiddleware = &#91;\n      'auth' => \\App\\Http\\Middleware\\Authenticate::class,\n      'auth.basic' => \\Illuminate\\Auth\\Middleware\\AuthenticateWithBasicAuth::class,\n      'guest' => \\App\\Http\\Middleware\\RedirectIfAuthenticated::class,\n      'Age' => \\App\\Http\\Middleware\\AgeMiddleware::class,\n   ];\n}</code></pre>\n\n\n\n<h2>Middleware Parameters</h2>\n\n\n\n<p>We can also pass parameters with the Middleware. For example, if your application has different roles like user, admin, super admin etc. and you want to authenticate the action based on role, this can be achieved by passing parameters with middleware. The middleware that we create contains the following function and we can pass our custom argument after the&nbsp;<strong>$next</strong>&nbsp;argument.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public function handle($request, Closure $next) {\n   return $next($request);\n}</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create RoleMiddleware by executing the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:middleware RoleMiddleware</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/middleware_parameters.jpg\" alt=\"Middleware Parameters\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the following code in the handle method of the newly created RoleMiddlewareat&nbsp;<strong>app/Http/Middleware/RoleMiddleware.php.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\nuse Closure;\n\nclass RoleMiddleware {\n   public function handle($request, Closure $next, $role) {\n      echo \"Role: \".$role;\n      return $next($request);\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Register the RoleMiddleware in&nbsp;<strong>app\\Http\\Kernel.php</strong>&nbsp;file. Add the line highlighted in gray color in that file to register RoleMiddleware.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/rolemiddleware.jpg\" alt=\"RoleMiddleware\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Execute the following command to create&nbsp;<strong>TestController</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller TestController --plain</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− After successful execution of the above step, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/testcontroller.jpg\" alt=\"TestController\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Copy the following lines of code to&nbsp;<strong>app/Http/TestController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/TestController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass TestController extends Controller {\n   public function index() {\n      echo \"&lt;br>Test Controller.\";\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Add the following line of code in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('role',&#91;\n   'middleware' => 'Role:editor',\n   'uses' => 'TestController@index',\n]);\n﻿</code></pre>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Visit the following URL to test the Middleware with parameters</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/role</code></pre>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/role_editor.jpg\" alt=\"Role Editor\"/></figure>\n\n\n\n<h2>Terminable Middleware</h2>\n\n\n\n<p>Terminable middleware performs some task after the response has been sent to the browser. This can be accomplished by creating a middleware with&nbsp;<strong>terminate</strong>&nbsp;method in the middleware. Terminable middleware should be registered with global middleware. The terminate method will receive two arguments&nbsp;<strong>$request</strong>&nbsp;and&nbsp;<strong>$response.</strong>&nbsp;Terminate method can be created as shown in the following code.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create&nbsp;<strong>TerminateMiddleware</strong>&nbsp;by executing the below command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:middleware TerminateMiddleware</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− The above step will produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/terminable_middleware.jpg\" alt=\"Terminable Middleware\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Copy the following code in the newly created&nbsp;<strong>TerminateMiddleware</strong>&nbsp;at&nbsp;<strong>app/Http/Middleware/TerminateMiddleware.php.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\nuse Closure;\n\nclass TerminateMiddleware {\n   public function handle($request, Closure $next) {\n      echo \"Executing statements of handle method of TerminateMiddleware.\";\n      return $next($request);\n   }\n   \n   public function terminate($request, $response) {\n      echo \"&lt;br>Executing statements of terminate method of TerminateMiddleware.\";\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Register the&nbsp;<strong>TerminateMiddleware</strong>&nbsp;in&nbsp;<strong>app\\Http\\Kernel.php</strong>&nbsp;file. Add the line highlighted in gray color in that file to register TerminateMiddleware.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/terminatemiddleware.jpg\" alt=\"TerminateMiddleware\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Execute the following command to create&nbsp;<strong>ABCController</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller ABCController --plain</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− After the successful execution of the URL, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/abccontroller.jpg\" alt=\"ABCController\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Copy the following code to&nbsp;<strong>app/Http/ABCController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/ABCController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass ABCController extends Controller {\n   public function index() {\n      echo \"&lt;br>ABC Controller.\";\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Add the following line of code in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('terminate',&#91;\n   'middleware' => 'terminate',\n   'uses' => 'ABCController@index',\n]);</code></pre>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Visit the following URL to test the Terminable Middleware.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/terminate</code></pre>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/abc_controller.jpg\" alt=\"ABC Controller\"/></figure>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Middleware acts as a bridge between a request and a response. It is a type of filtering mechanism. This chapter explains you the middleware mechanism in Laravel. Laravel includes a middleware that verifies whether the user of the application is authenticated or not. If the user is authenticated, it redirects to the home page otherwise, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4184"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4184"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4184/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4184"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4184"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4184"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4185,
    "date": "2020-06-15T06:20:21",
    "date_gmt": "2020-06-15T06:20:21",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=273"
    },
    "modified": "2020-06-15T06:20:21",
    "modified_gmt": "2020-06-15T06:20:21",
    "slug": "namespaces-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/namespaces-2/",
    "title": {
      "rendered": "Namespaces"
    },
    "content": {
      "rendered": "\n<p>Namespaces can be defined as a class of elements in which each element has a unique name to that associated class. It may be shared with elements in other classes.</p>\n\n\n\n<h2>Declaration of namespace</h2>\n\n\n\n<p>The <strong>use</strong> keyword allows the developers to shorten the namespace.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>use &lt;namespace-name>;</code></pre>\n\n\n\n<p>The default namespace used in Laravel is App, however a user can change the namespace to match with web application. Creating user defined namespace with artisan command is mentioned as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan app:name SocialNet</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/select_git.jpg\" alt=\"Select Git\"/></figure>\n\n\n\n<p>The namespace once created can include various functionalities which can be used in controllers and various classes.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Namespaces can be defined as a class of elements in which each element has a unique name to that associated class. It may be shared with elements in other classes. Declaration of namespace The use keyword allows the developers to shorten the namespace. The default namespace used in Laravel is App, however a user can change the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4185"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4185"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4185/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4185"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4185"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4185"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4186,
    "date": "2020-06-15T06:50:04",
    "date_gmt": "2020-06-15T06:50:04",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=275"
    },
    "modified": "2020-06-15T06:50:04",
    "modified_gmt": "2020-06-15T06:50:04",
    "slug": "controllers-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/controllers-3/",
    "title": {
      "rendered": "Controllers"
    },
    "content": {
      "rendered": "\n<p>In the MVC framework, the letter ‘C’ stands for Controller. It acts as a directing traffic between Views and Models. In this chapter, you will learn about Controllers in Laravel.</p>\n\n\n\n<h2>Creating a Controller</h2>\n\n\n\n<p>Open the command prompt or terminal based on the operating system you are using and type the following command to create controller using the Artisan CLI (Command Line Interface).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller &lt;controller-name> --plain</code></pre>\n\n\n\n<p>Replace the &lt;controller-name&gt; with the name of your controller. This will create a plain constructor as we are passing the argument —&nbsp;<strong>plain</strong>. If you don’t want to create a plain constructor, you can simply ignore the argument. The created constructor can be seen at&nbsp;<strong>app/Http/Controllers</strong>.</p>\n\n\n\n<p>You will see that some basic coding has already been done for you and you can add your custom coding. The created controller can be called from routes.php by the following syntax.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get(‘base URI’,’controller@method’);</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong> − Execute the following command to create <strong>UserController</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller UserController --plain</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution, you will receive the following output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/usercontroller.jpg\" alt=\"UserController\"/></figure>\n\n\n\n<p><strong>Step 3</strong> − You can see the created controller at <strong>app/Http/Controller/UserController.php</strong> with some basic coding already written for you and you can add your own coding based on your need.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass UserController extends Controller {\n   //\n}</code></pre>\n\n\n\n<h2>Controller Middleware</h2>\n\n\n\n<p>We have seen middleware before and it can be used with controller also. Middleware can also be assigned to controller’s route or within your controller’s constructor. You can use the middleware method to assign middleware to the controller. The registered middleware can also be restricted to certain method of the controller.</p>\n\n\n\n<h3>Assigning Middleware to Route</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('profile', &#91;\n   'middleware' => 'auth',\n   'uses' => 'UserController@showProfile'\n]);</code></pre>\n\n\n\n<p>Here we are assigning auth middleware to UserController in profile route.</p>\n\n\n\n<h3>Assigning Middleware within Controller’s constructor</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass UserController extends Controller {\n   public function __construct() {\n      $this->middleware('auth');\n   }\n}</code></pre>\n\n\n\n<p>Here we are assigning&nbsp;<strong>auth</strong>&nbsp;middleware using the middleware method in the&nbsp;<strong>UserController</strong>&nbsp;constructor.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following lines of code to the&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file and save it.</p>\n\n\n\n<p><strong>routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\nRoute::get('/usercontroller/path',&#91;\n   'middleware' => 'First',\n   'uses' => 'UserController@showPath'\n]);</code></pre>\n\n\n\n<p><strong>Step 2</strong> − Create a middleware called <strong>FirstMiddleware</strong> by executing the following line of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:middleware FirstMiddleware</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the following code into the&nbsp;<strong>handle</strong>&nbsp;method of the newly created FirstMiddleware at&nbsp;<strong>app/Http/Middleware</strong>.</p>\n\n\n\n<p><strong>FirstMiddleware.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\nuse Closure;\n\nclass FirstMiddleware {\n   public function handle($request, Closure $next) {\n      echo '&lt;br>First Middleware';\n      return $next($request);\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong> − Create a middleware called <strong>SecondMiddleware</strong> by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:middleware SecondMiddleware</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the following code in the handle method of the newly created SecondMiddleware at&nbsp;<strong>app/Http/Middleware</strong>.</p>\n\n\n\n<p><strong>SecondMiddleware.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Middleware;\nuse Closure;\n\nclass SecondMiddleware {\n   public function handle($request, Closure $next) {\n      echo '&lt;br>Second Middleware';\n      return $next($request);\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 6</strong> − Create a controller called <strong>UserController</strong> by executing the following line.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller UserController --plain</code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− After successful execution of the URL, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/usercontroller1.jpg\" alt=\"UserController1\"/></figure>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Copy the following code to&nbsp;<strong>app/Http/UserController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/UserController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass UserController extends Controller {\n   public function __construct() {\n      $this->middleware('Second');\n   }\n   public function showPath(Request $request) {\n      $uri = $request->path();\n      echo '&lt;br>URI: '.$uri;\n      \n      $url = $request->url();\n      echo '&lt;br>';\n      \n      echo 'URL: '.$url;\n      $method = $request->method();\n      echo '&lt;br>';\n      \n      echo 'Method: '.$method;\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 9</strong> − Now launch the php’s internal web server by executing the following command, if you haven’t executed it yet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan serve</code></pre>\n\n\n\n<p><strong>Step 10</strong> − Visit the following URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/usercontroller/path</code></pre>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/usercontroller2.jpg\" alt=\"UserController2\"/></figure>\n\n\n\n<h2>Restful Resource Controllers</h2>\n\n\n\n<p>Often while making an application we need to perform&nbsp;<strong>CRUD (Create, Read, Update, Delete)</strong>&nbsp;operations. Laravel makes this job easy for us. Just create a controller and Laravel will automatically provide all the methods for the CRUD operations. You can also register a single route for all the methods in routes.php file.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong> − Create a controller called <strong>MyController</strong> by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller MyController</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Add the following code in</p>\n\n\n\n<p><strong>app/Http/Controllers/MyController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/MyController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass MyController extends Controller {\n   public function index() {\n      echo 'index';\n   }\n   public function create() {\n      echo 'create';\n   }\n   public function store(Request $request) {\n      echo 'store';\n   }\n   public function show($id) {\n      echo 'show';\n   }\n   public function edit($id) {\n      echo 'edit';\n   }\n   public function update(Request $request, $id) {\n      echo 'update';\n   }\n   public function destroy($id) {\n      echo 'destroy';\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Add the following line of code in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::resource('my','MyController');</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− We are now registering all the methods of MyController by registering a controller with resource. Below is the table of actions handled by resource controller.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Verb</th><th>Path</th><th>Action</th><th>Route Name</th></tr><tr><td>GET</td><td>/my</td><td>index</td><td>my.index</td></tr><tr><td>GET</td><td>/my/create</td><td>create</td><td>my.create</td></tr><tr><td>POST</td><td>/my</td><td>store</td><td>my.store</td></tr><tr><td>GET</td><td>/my/{my}</td><td>show</td><td>my.show</td></tr><tr><td>GET</td><td>/my/{my}/edit</td><td>edit</td><td>my.edit</td></tr><tr><td>PUT/PATCH</td><td>/my/{my}</td><td>update</td><td>my.update</td></tr><tr><td>DELETE</td><td>/my/{my}</td><td>destroy</td><td>my.destroy</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Try executing the URLs shown in the following table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>URL</th><th>Description</th><th>Output Image</th></tr><tr><td>http://localhost:8000/my</td><td>Executes index method of MyController.php</td><td>index</td></tr><tr><td>http://localhost:8000/my/create</td><td>Executes create method of MyController.php</td><td>create</td></tr><tr><td>http://localhost:8000/my/1</td><td>Executes show method of MyController.php</td><td>show</td></tr><tr><td>http://localhost:8000/my/1/edit</td><td>Executes edit method of MyController.php</td><td>edit</td></tr></tbody></table></figure>\n\n\n\n<h2>Implicit Controllers</h2>\n\n\n\n<p>Implicit Controllers allow you to define a single route to handle every action in the controller. You can define it in route.php file with <strong>Route:controller</strong> method as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::controller(‘base URI’,’&lt;class-name-of-the-controller>’);</code></pre>\n\n\n\n<p>Replace the &lt;class-name-of-the-controller&gt; with the class name that you have given to your controller.</p>\n\n\n\n<p>The method name of the controller should start with HTTP verb like get or post. If you start it with get, it will handle only get request and if it starts with post then it will handle the post request. After the HTTP verb you can, you can give any name to the method but it should follow the title case version of the URI.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong> − Execute the below command to create a controller. We have kept the class name <strong>ImplicitController</strong>. You can give any name of your choice to the class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller ImplicitController --plain</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution of step 1, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/implicitcontroller.jpg\" alt=\"Implicitcontroller\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Copy the following code to</p>\n\n\n\n<p><strong>app/Http/Controllers/ImplicitController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/ImplicitController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass ImplicitController extends Controller {\n   /**\n      * Responds to requests to GET /test\n   */\n   public function getIndex() {\n      echo 'index method';\n   }\n   \n   /**\n      * Responds to requests to GET /test/show/1\n   */\n   public function getShow($id) {\n      echo 'show method';\n   }\n   \n   /**\n      * Responds to requests to GET /test/admin-profile\n   */\n   public function getAdminProfile() {\n      echo 'admin profile method';\n   }\n   \n   /**\n      * Responds to requests to POST /test/profile\n   */\n   public function postProfile() {\n      echo 'profile method';\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong> − Add the following line to <strong>app/Http/routes.php</strong> file to route the requests to specified controller.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::controller('test','ImplicitController');</code></pre>\n\n\n\n<h2>Constructor Injection</h2>\n\n\n\n<p>The Laravel service container is used to resolve all Laravel controllers. As a result, you are able to type-hint any dependencies your controller may need in its constructor. The dependencies will automatically be resolved and injected into the controller instance.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following code to&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyClass{\n   public $foo = 'bar';\n}\nRoute::get('/myclass','ImplicitController@index');</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Add the following code to</p>\n\n\n\n<p><strong>app/Http/Controllers/ImplicitController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/ImplicitController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass ImplicitController extends Controller {\n   private $myclass;\n   \n   public function __construct(\\MyClass $myclass) {\n      $this->myclass = $myclass;\n   }\n   public function index() {\n      dd($this->myclass);\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 3</strong> − Visit the following URL to test the constructor injection.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/myclass</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/constructor_injection.jpg\" alt=\"Myclass\"/></figure>\n\n\n\n<h2>Method Injection</h2>\n\n\n\n<p>In addition to constructor injection, you may also type — hint dependencies on your controller&#8217;s action methods.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following code to&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyClass{\n   public $foo = 'bar';\n}\nRoute::get('/myclass','ImplicitController@index');</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Add the following code to</p>\n\n\n\n<p><strong>app/Http/Controllers/ImplicitController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/ImplicitController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass ImplicitController extends Controller {\n   public function index(\\MyClass $myclass) {\n      dd($myclass);\n   }\n} </code></pre>\n\n\n\n<p><strong>Step 3</strong> − Visit the following URL to test the constructor injection.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/myclass</code></pre>\n\n\n\n<p>It will produce the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/constructor_injection.jpg\" alt=\"Constructor Injection\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the MVC framework, the letter ‘C’ stands for Controller. It acts as a directing traffic between Views and Models. In this chapter, you will learn about Controllers in Laravel. Creating a Controller Open the command prompt or terminal based on the operating system you are using and type the following command to create controller [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4186"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4186"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4186/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4186"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4186"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4186"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4187,
    "date": "2020-06-15T06:54:41",
    "date_gmt": "2020-06-15T06:54:41",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=277"
    },
    "modified": "2020-06-15T06:54:41",
    "modified_gmt": "2020-06-15T06:54:41",
    "slug": "request",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/request/",
    "title": {
      "rendered": "Request"
    },
    "content": {
      "rendered": "\n<p>In this chapter, you will learn in detail about Requests in Laravel.</p>\n\n\n\n<h2>Retrieving the Request URI</h2>\n\n\n\n<p>The&nbsp;<strong>“path”</strong>&nbsp;method is used to retrieve the requested URI. The&nbsp;<strong>is</strong>&nbsp;method is used to retrieve the requested URI which matches the particular pattern specified in the argument of the method. To get the full URL, we can use the&nbsp;<strong>url</strong>&nbsp;method.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong> − Execute the below command to create a new controller called <strong>UriController</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller UriController –plain</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution of the URL, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/uricontroller.jpg\" alt=\"UriController\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− After creating a controller, add the following code in that file.</p>\n\n\n\n<p><strong>app/Http/Controllers/UriController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass UriController extends Controller {\n   \n   public function index(Request $request) {\n      // Usage of path method\n      $path = $request->path();\n      echo 'Path Method: '.$path;\n      echo '&lt;br>';\n     \n      // Usage of is method\n      $pattern = $request->is('foo/*');\n      echo 'is Method: '.$pattern;\n      echo '&lt;br>';\n      \n      // Usage of url method\n      $url = $request->url();\n      echo 'URL method: '.$url;\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Add the following line in the&nbsp;<strong>app/Http/route.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/route.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/foo/bar','UriController@index');</code></pre>\n\n\n\n<p><strong>Step 5</strong> − Visit the following URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/foo/bar</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/path_method.jpg\" alt=\"Path Method\"/></figure>\n\n\n\n<h2>Retrieving Input</h2>\n\n\n\n<p>The input values can be easily retrieved in Laravel. No matter what method was used&nbsp;<strong>“get”</strong>&nbsp;or&nbsp;<strong>“post”</strong>, the Laravel method will retrieve input values for both the methods the same way. There are two ways we can retrieve the input values.</p>\n\n\n\n<ul><li>Using the input() method</li><li>Using the properties of Request instance</li></ul>\n\n\n\n<h3>Using the input() method</h3>\n\n\n\n<p>The <strong>input()</strong> method takes one argument, the name of the field in form. For example, if the form contains username field then we can access it by the following way.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$name = $request->input('username');</code></pre>\n\n\n\n<h3>Using the properties of Request instance</h3>\n\n\n\n<p>Like the <strong>input()</strong> method, we can get the username property directly from the request instance.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$request->username</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about Requests −</p>\n\n\n\n<p><strong>Step 1</strong> − Create a Registration form, where user can register himself and store the form at <strong>resources/views/register.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n\n   &lt;head>\n      &lt;title>Form Example&lt;/title>\n   &lt;/head>\n\n   &lt;body>\n      &lt;form action = \"/user/register\" method = \"post\">\n         &lt;input type = \"hidden\" name = \"_token\" value = \"&lt;?php echo csrf_token() ?>\">\n      \n         &lt;table>\n            &lt;tr>\n               &lt;td>Name&lt;/td>\n               &lt;td>&lt;input type = \"text\" name = \"name\" />&lt;/td>\n            &lt;/tr>\n            &lt;tr>\n               &lt;td>Username&lt;/td>\n               &lt;td>&lt;input type = \"text\" name = \"username\" />&lt;/td>\n            &lt;/tr>\n            &lt;tr>\n               &lt;td>Password&lt;/td>\n               &lt;td>&lt;input type = \"text\" name = \"password\" />&lt;/td>\n            &lt;/tr>\n            &lt;tr>\n               &lt;td colspan = \"2\" align = \"center\">\n                  &lt;input type = \"submit\" value = \"Register\" />\n               &lt;/td>\n            &lt;/tr>\n         &lt;/table>\n      \n      &lt;/form>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 2</strong> − Execute the below command to create a <strong>UserRegistration</strong> controller.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller UserRegistration --plain</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− After successful execution of the above step, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/userregistration.jpg\" alt=\"UserRegistration\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Copy the following code in</p>\n\n\n\n<p><strong>app/Http/Controllers/UserRegistration.php</strong>&nbsp;controller.</p>\n\n\n\n<p><strong>app/Http/Controllers/UserRegistration.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass UserRegistration extends Controller {\n   public function postRegister(Request $request) {\n      //Retrieve the name input field\n      $name = $request->input('name');\n      echo 'Name: '.$name;\n      echo '&lt;br>';\n      \n      //Retrieve the username input field\n      $username = $request->username;\n      echo 'Username: '.$username;\n      echo '&lt;br>';\n      \n      //Retrieve the password input field\n      $password = $request->password;\n      echo 'Password: '.$password;\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the following line in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/register',function() {\n   return view('register');\n});\nRoute::post('/user/register',array('uses'=>'UserRegistration@postRegister'));</code></pre>\n\n\n\n<p><strong>Step 6</strong> − Visit the following URL and you will see the registration form as shown in the below figure. Type the registration details and click Register and you will see on the second page that we have retrieved and displayed the user registration details.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/register</code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− The output will look something like as shown in below the following images.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/registration.jpg\" alt=\"Registration\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, you will learn in detail about Requests in Laravel. Retrieving the Request URI The&nbsp;“path”&nbsp;method is used to retrieve the requested URI. The&nbsp;is&nbsp;method is used to retrieve the requested URI which matches the particular pattern specified in the argument of the method. To get the full URL, we can use the&nbsp;url&nbsp;method. Example Step [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4187"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4187"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4187/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4187"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4187"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4187"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4188,
    "date": "2020-06-15T06:57:44",
    "date_gmt": "2020-06-15T06:57:44",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=279"
    },
    "modified": "2020-06-15T06:57:44",
    "modified_gmt": "2020-06-15T06:57:44",
    "slug": "cookie",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/cookie/",
    "title": {
      "rendered": "Cookie"
    },
    "content": {
      "rendered": "\n<p>Cookies play an important role while dealing a user’s session on a web application. In this chapter, you will learn about working with cookies in Laravel based web applications.</p>\n\n\n\n<h2>Creating a Cookie</h2>\n\n\n\n<p>Cookie can be created by global cookie helper of Laravel. It is an instance of&nbsp;<strong>Symfony\\Component\\HttpFoundation\\Cookie</strong>. The cookie can be attached to the response using the withCookie() method. Create a response instance of&nbsp;<strong>Illuminate\\Http\\Response</strong>&nbsp;class to call the withCookie() method. Cookie generated by the Laravel are encrypted and signed and it can’t be modified or read by the client.</p>\n\n\n\n<p>Here is a sample code with explanation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//Create a response instance\n$response = new Illuminate\\Http\\Response('Hello World');\n\n//Call the withCookie() method with the response method\n$response->withCookie(cookie('name', 'value', $minutes));\n\n//return the response\nreturn $response;</code></pre>\n\n\n\n<p>Cookie() method will take 3 arguments. First argument is the name of the cookie, second argument is the value of the cookie and the third argument is the duration of the cookie after which the cookie will get deleted automatically.</p>\n\n\n\n<p>xCookie can be set forever by using the forever method as shown in the below code.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">$response-&gt;withCookie(cookie()-&gt;forever('name', 'value'));</pre>\n\n\n\n<h2>Retrieving a Cookie</h2>\n\n\n\n<p>Once we set the cookie, we can retrieve the cookie by cookie() method. This cookie() method will take only one argument which will be the name of the cookie. The cookie method can be called by using the instance of&nbsp;<strong>Illuminate\\Http\\Request</strong>.</p>\n\n\n\n<p>Here is a sample code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>//’name’ is the name of the cookie to retrieve the value of\n$value = $request->cookie('name');</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about Cookies −</p>\n\n\n\n<p><strong>Step 1</strong> − Execute the below command to create a controller in which we will manipulate the cookie.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller CookieController --plain</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/cookiecontroller.jpg\" alt=\"CookieController\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Copy the following code in</p>\n\n\n\n<p><strong>app/Http/Controllers/CookieController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/CookieController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass CookieController extends Controller {\n   public function setCookie(Request $request) {\n      $minutes = 1;\n      $response = new Response('Hello World');\n      $response->withCookie(cookie('name', 'virat', $minutes));\n      return $response;\n   }\n   public function getCookie(Request $request) {\n      $value = $request->cookie('name');\n      echo $value;\n   }\n}</code></pre>\n\n\n\n<pre class=\"wp-block-preformatted\"></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Add the following line in&nbsp;<strong>app/Http/routes.php file</strong>.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/cookie/set','CookieController@setCookie');\nRoute::get('/cookie/get','CookieController@getCookie');</code></pre>\n\n\n\n<p><strong>Step 5</strong> − Visit the following URL to set the cookie.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/cookie/set</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− The output will appear as shown below. The window appearing in the screenshot is taken from firefox but depending on your browser, cookie can also be checked from the cookie option.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/hello_world.jpg\" alt=\"Hello World\"/></figure>\n\n\n\n<p><strong>Step 7</strong> − Visit the following URL to get the cookie from the above URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/cookie/get</code></pre>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/virat.jpg\" alt=\"Virat\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Cookies play an important role while dealing a user’s session on a web application. In this chapter, you will learn about working with cookies in Laravel based web applications. Creating a Cookie Cookie can be created by global cookie helper of Laravel. It is an instance of&nbsp;Symfony\\Component\\HttpFoundation\\Cookie. The cookie can be attached to the response [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4188"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4188"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4188/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4188"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4188"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4188"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4189,
    "date": "2020-06-15T07:00:40",
    "date_gmt": "2020-06-15T07:00:40",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=281"
    },
    "modified": "2020-06-15T07:00:40",
    "modified_gmt": "2020-06-15T07:00:40",
    "slug": "response",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/response/",
    "title": {
      "rendered": "Response"
    },
    "content": {
      "rendered": "\n<p>A web application responds to a user’s request in many ways depending on many parameters. This chapter explains you in detail about responses in Laravel web applications.</p>\n\n\n\n<h2>Basic Response</h2>\n\n\n\n<p>Laravel provides several different ways to return response. Response can be sent either from route or from controller. The basic response that can be sent is simple string as shown in the below sample code. This string will be automatically converted to appropriate HTTP response.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following code to&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/basic_response', function () {\n   return 'Hello World';\n});</code></pre>\n\n\n\n<p><strong>Step 2</strong> − <strong>Visit</strong> the following URL to test the basic response.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/basic_response</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/basic_response.jpg\" alt=\"Basic Response\"/></figure>\n\n\n\n<h2>Attaching Headers</h2>\n\n\n\n<p>The response can be attached to headers using the header() method. We can also attach the series of headers as shown in the below sample code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>return response($content,$status)\n   ->header('Content-Type', $type)\n   ->header('X-Header-One', 'Header Value')\n   ->header('X-Header-Two', 'Header Value');</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about Response −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following code to&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/header',function() {\n   return response(\"Hello\", 200)->header('Content-Type', 'text/html');\n});</code></pre>\n\n\n\n<p><strong>Step 2</strong> − Visit the following URL to test the basic response.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/header</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/hello.jpg\" alt=\"Hello\"/></figure>\n\n\n\n<h2>Attaching Cookies</h2>\n\n\n\n<p>The&nbsp;<strong>withcookie()</strong>&nbsp;helper method is used to attach cookies. The cookie generated with this method can be attached by calling&nbsp;<strong>withcookie()</strong>&nbsp;method with response instance. By default, all cookies generated by Laravel are encrypted and signed so that they can&#8217;t be modified or read by the client.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about attaching cookies −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following code to&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/cookie',function() {\n   return response(\"Hello\", 200)->header('Content-Type', 'text/html')\n      ->withcookie('name','Virat Gandhi');\n});</code></pre>\n\n\n\n<p><strong>Step 2</strong> − <strong>Visit</strong> the following URL to test the basic response.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/cookie</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/hello.jpg\" alt=\"Hello\"/></figure>\n\n\n\n<h2>JSON Response</h2>\n\n\n\n<p>JSON response can be sent using the json method. This method will automatically set the Content-Type header to&nbsp;<strong>application/json</strong>. The&nbsp;<strong>json</strong>&nbsp;method will automatically convert the array into appropriate&nbsp;<strong>json</strong>&nbsp;response.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about JSON Response −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following line in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('json',function() {\n   return response()->json(&#91;'name' => 'Virat Gandhi', 'state' => 'Gujarat']);\n});</code></pre>\n\n\n\n<p><strong>Step 2</strong> − Visit the following URL to test the json response.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/json</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/json_response.jpg\" alt=\"Json Response\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A web application responds to a user’s request in many ways depending on many parameters. This chapter explains you in detail about responses in Laravel web applications. Basic Response Laravel provides several different ways to return response. Response can be sent either from route or from controller. The basic response that can be sent is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4189"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4189"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4189/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4189"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4189"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4189"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4190,
    "date": "2020-06-15T07:13:55",
    "date_gmt": "2020-06-15T07:13:55",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=283"
    },
    "modified": "2020-06-15T07:13:55",
    "modified_gmt": "2020-06-15T07:13:55",
    "slug": "views-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/views-3/",
    "title": {
      "rendered": "Views"
    },
    "content": {
      "rendered": "\n<p>In MVC framework, the letter&nbsp;<strong>“V”</strong>&nbsp;stands for&nbsp;<strong>Views</strong>. It separates the application logic and the presentation logic. Views are stored in&nbsp;<strong>resources/views</strong>&nbsp;directory. Generally, the view contains the HTML which will be served by the application.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about Views −</p>\n\n\n\n<p><strong>Step 1</strong> − Copy the following code and save it at <strong>resources/views/test.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;h1>Hello, World&lt;/h1>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Add the following line in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file to set the route for the above view.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/test', function() {\n   return view('test');\n});</code></pre>\n\n\n\n<p><strong>Step 3</strong> − Visit the following URL to see the output of the view.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/test</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/understanding_views.jpg\" alt=\"Understanding Views\"/></figure>\n\n\n\n<h2>Passing Data to Views</h2>\n\n\n\n<p>While building application it may be required to pass data to the views. Pass an array to view helper function. After passing an array, we can use the key to get the value of that key in the HTML file.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about passing data to views −</p>\n\n\n\n<p><strong>Step 1</strong> − Copy the following code and save it at <strong>resources/views/test.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;h1>&lt;?php echo $name; ?>&lt;/h1>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Add the following line in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file to set the route for the above view.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/test', function() {\n   return view('test',&#91;‘name’=>’Virat Gandhi’]);\n});</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− The value of the key name will be passed to test.php file and $name will be replaced by that value.</p>\n\n\n\n<p><strong>Step 4</strong> − Visit the following URL to see the output of the view.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/test</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/virat_gandhi.jpg\" alt=\"Virat Gandhi\"/></figure>\n\n\n\n<h2>Sharing Data with all Views</h2>\n\n\n\n<p>We have seen how we can pass data to views but at times, there is a need to pass data to all the views. Laravel makes this simpler. There is a method called&nbsp;<strong>share()</strong>&nbsp;which can be used for this purpose. The&nbsp;<strong>share()</strong>&nbsp;method will take two arguments, key and value. Typically&nbsp;<strong>share()</strong>&nbsp;method can be called from boot method of service provider. We can use any service provider,&nbsp;<strong>AppServiceProvider</strong>&nbsp;or our own service provider.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about sharing data with all views −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Add the following line in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/test', function() {\n   return view('test');\n});\n\nRoute::get('/test2', function() {\n   return view('test2');\n});</code></pre>\n\n\n\n<p><strong>Step 2</strong> − Create two view files — <strong>test.php</strong> and <strong>test2.php</strong> with the same code. These are the two files which will share data. Copy the following code in both the files. <strong>resources/views/test.php &amp; resources/views/test2.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;h1>&lt;?php echo $name; ?>&lt;/h1>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 3</strong> − Change the code of boot method in the file <strong>app/Providers/AppServiceProvider.php</strong> as shown below. (Here, we have used share method and the data that we have passed will be shared with all the views.) <strong>app/Providers/AppServiceProvider.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Providers;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass AppServiceProvider extends ServiceProvider {\n   \n   /**\n      * Bootstrap any application services.\n      *\n      * @return void\n   */\n\n   public function boot() {\n      view()->share('name', 'Virat Gandhi');\n   }\n\n   /**\n      * Register any application services.\n      *\n      * @return void\n   */\n\n   public function register() {\n      //\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong> − <strong>Visit</strong> the following URLs.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/test\nhttp://localhost:8000/test2</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/virat_gandhi.jpg\" alt=\"Virat Gandhi\"/></figure>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In MVC framework, the letter&nbsp;“V”&nbsp;stands for&nbsp;Views. It separates the application logic and the presentation logic. Views are stored in&nbsp;resources/views&nbsp;directory. Generally, the view contains the HTML which will be served by the application. Example Observe the following example to understand more about Views − Step 1 − Copy the following code and save it at resources/views/test.php Step 2&nbsp;− [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4190"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4190"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4190/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4190"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4190"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4190"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4191,
    "date": "2020-06-16T04:14:40",
    "date_gmt": "2020-06-16T04:14:40",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=342"
    },
    "modified": "2020-06-16T04:14:40",
    "modified_gmt": "2020-06-16T04:14:40",
    "slug": "blade-templates",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/blade-templates/",
    "title": {
      "rendered": "Blade Templates"
    },
    "content": {
      "rendered": "\n<p>Laravel 5.1 introduces the concept of using&nbsp;<strong>Blade</strong>, a templating engine to design a unique layout. The layout thus designed can be used by other views, and includes a consistent design and structure.</p>\n\n\n\n<p>When compared to other templating engines, Blade is unique in the following ways −</p>\n\n\n\n<ul><li>It does not restrict the developer from using plain PHP code in views.</li><li>The blade views thus designed, are compiled and cached until they are modified.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/welcome_blade.jpg\" alt=\"Welcome Blade\"/></figure>\n\n\n\n<p>The complete directory structure of Laravel is shown in the screenshot given here.</p>\n\n\n\n<p>You can observe that all views are stored in the&nbsp;<strong>resources/views</strong>&nbsp;directory and the default view for Laravel framework is&nbsp;<strong>welcome.blade.php</strong>.</p>\n\n\n\n<p>Please note that other blade templates are also created similarly.</p>\n\n\n\n<h2>Steps for Creating a Blade Template Layout</h2>\n\n\n\n<p>You will have to use the following steps to create a blade template layout −</p>\n\n\n\n<h3>Step 1</h3>\n\n\n\n<ul><li>Create a layout folder inside the <strong>resources/views</strong> folder. We are going to use this folder to store all layouts together.</li><li>Create a file name <strong>master.blade.php</strong> which will have the following code associated with it −</li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>DemoLaravel - @yield('title')&lt;/title>\n   &lt;/head>\n   &lt;body>\n      @yield('content')\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Step 2</h3>\n\n\n\n<p>In this step, you should extend the layout. Extending a layout involves defining the child elements. Laravel uses the&nbsp;<strong>Blade @extends</strong>&nbsp;directive for defining the child elements.</p>\n\n\n\n<p>When you are extending a layout, please note the following points −</p>\n\n\n\n<ul><li>Views defined in the Blade Layout injects the container in a unique way.</li><li>Various sections of view are created as child elements.</li><li>Child elements are stored in layouts folder as&nbsp;<strong>child.blade.php</strong></li></ul>\n\n\n\n<p>An example that shows extending the layout created above is shown here −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@extends('layouts.app')\n@section('title', 'Page Title')\n@section('sidebar')\n   @parent\n&lt;p>This refers to the master sidebar.&lt;/p>\n@endsection\n@section('content')\n&lt;p>This is my body content.&lt;/p>\n@endsection</code></pre>\n\n\n\n<h3>Step 3</h3>\n\n\n\n<p>To implement the child elements in views, you should define the layout in the way it is needed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/landing_page.jpg\" alt=\"Landing Page\"/></figure>\n\n\n\n<p>Observe the screenshot shown here. You can find that each of links mentioned in the landing page are hyperlinks. Please note that you can also create them as child elements with the help of blade templates by using the procedure given above.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel 5.1 introduces the concept of using&nbsp;Blade, a templating engine to design a unique layout. The layout thus designed can be used by other views, and includes a consistent design and structure. When compared to other templating engines, Blade is unique in the following ways − It does not restrict the developer from using plain [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4191"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4191"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4191/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4191"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4191"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4191"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4192,
    "date": "2020-06-16T04:19:24",
    "date_gmt": "2020-06-16T04:19:24",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=344"
    },
    "modified": "2020-06-16T04:19:24",
    "modified_gmt": "2020-06-16T04:19:24",
    "slug": "redirections",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/redirections/",
    "title": {
      "rendered": "Redirections"
    },
    "content": {
      "rendered": "\n<p>Named route is used to give specific name to a route. The name can be assigned using the <strong>“as”</strong> array key.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('user/profile', &#91;'as' => 'profile', function () {\n   //\n}]);</code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− Here, we have given the name&nbsp;<strong>profile</strong>&nbsp;to a route&nbsp;<strong>user/profile</strong>.</p>\n\n\n\n<h2>Redirecting to Named Routes</h2>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Observe the following example to understand more about Redirecting to named routes −</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a view called test.php and save it at</p>\n\n\n\n<p><strong>resources/views/test.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;h1>Example of Redirecting to Named Routes&lt;/h1>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− In&nbsp;<strong>routes.php</strong>, we have set up the route for&nbsp;<strong>test.php</strong>&nbsp;file. We have renamed it to&nbsp;<strong>testing</strong>. We have also set up another route&nbsp;<strong>redirect</strong>&nbsp;which will redirect the request to the named route&nbsp;<strong>testing</strong>.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/test', &#91;'as'=>'testing',function() {\n   return view('test2');\n}]);\n\nRoute::get('redirect',function() {\n   return redirect()->route('testing');\n});</code></pre>\n\n\n\n<p><strong>Step 3</strong> − Visit the following URL to test the named route example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/redirect</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− After execution of the above URL, you will be redirected to http://localhost:8000/test as we are redirecting to the named route&nbsp;<strong>testing</strong>.</p>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− After successful execution of the URL, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/virat_gandhi.jpg\" alt=\"Virat Gandhi\"/></figure>\n\n\n\n<h2>Redirecting to Controller Actions</h2>\n\n\n\n<p>Not only named route but we can also redirect to controller actions. We need to simply pass the controller and name of the <strong>action</strong> to the action method as shown in the following example. If you want to pass a parameter, you can pass it as the second argument of the action method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>return redirect()->action(‘NameOfController@methodName’,&#91;parameters]);</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong> − Execute the following command to create a controller called <strong>RedirectController</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller RedirectController --plain</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/redirect_controller.jpg\" alt=\"Redirect Controller\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Copy the following code to file</p>\n\n\n\n<p><strong>app/Http/Controllers/RedirectController.php</strong>.</p>\n\n\n\n<p><strong>app/Http/Controllers/RedirectController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass RedirectController extends Controller {\n   public function index() {\n      echo \"Redirecting to controller's action.\";\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Add the following lines in&nbsp;<strong>app/Http/routes.php</strong>.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('rr','RedirectController@index');\nRoute::get('/redirectcontroller',function() {\n   return redirect()->action('RedirectController@index');\n});\n﻿</code></pre>\n\n\n\n<p><strong>Step 5</strong> − Visit the following URL to test the example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/redirectcontroller</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/redirectcontroller.jpg\" alt=\"RedirectController.jpg\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Named route is used to give specific name to a route. The name can be assigned using the “as” array key. Note&nbsp;− Here, we have given the name&nbsp;profile&nbsp;to a route&nbsp;user/profile. Redirecting to Named Routes Example Observe the following example to understand more about Redirecting to named routes − Step 1&nbsp;− Create a view called test.php and save [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4192"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4192"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4192/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4192"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4192"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4192"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4193,
    "date": "2020-06-16T04:20:46",
    "date_gmt": "2020-06-16T04:20:46",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=346"
    },
    "modified": "2020-06-16T04:20:46",
    "modified_gmt": "2020-06-16T04:20:46",
    "slug": "working-with-database-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/working-with-database-3/",
    "title": {
      "rendered": "Working With Database"
    },
    "content": {
      "rendered": "\n<p>Laravel has made processing with database very easy. Laravel currently supports following 4 databases −</p>\n\n\n\n<ul><li>MySQL</li><li>Postgres</li><li>SQLite</li><li>SQL Server</li></ul>\n\n\n\n<p>The query to the database can be fired using raw SQL, the fluent query builder, and the Eloquent ORM. To understand the all CRUD (Create, Read, Update, Delete) operations with Laravel, we will use simple student management system.</p>\n\n\n\n<h2>Connecting to Database</h2>\n\n\n\n<p>Configure the database in&nbsp;<strong>config/database.php</strong>&nbsp;file and create the college database with structure in MySQL as shown in the following table.</p>\n\n\n\n<p><strong>Database: College</strong></p>\n\n\n\n<p><strong>Table: student</strong></p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Column Name</th><th>Column Datatype</th><th>Extra</th></tr><tr><td>Id</td><td>int(11)</td><td>Primary key | Auto increment</td></tr><tr><td>Name</td><td>varchar(25)</td><td></td></tr></tbody></table></figure>\n\n\n\n<p>We will see how to add, delete, update and retrieve records from database using Laravel in student table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.</th><th>Record &amp; Description</th></tr><tr><td>1</td><td>Insert RecordsWe can insert the record using the DB facade with insert method.</td></tr><tr><td>2</td><td>Retrieve RecordsAfter configuring the database, we can retrieve the records using the DB facade with select method.</td></tr><tr><td>3</td><td>Update RecordsWe can update the records using the DB facade with update method.</td></tr><tr><td>4</td><td>Delete RecordsWe can delete the record using the DB facade with the delete method.</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel has made processing with database very easy. Laravel currently supports following 4 databases − MySQL Postgres SQLite SQL Server The query to the database can be fired using raw SQL, the fluent query builder, and the Eloquent ORM. To understand the all CRUD (Create, Read, Update, Delete) operations with Laravel, we will use simple [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4193"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4193"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4193/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4193"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4193"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4193"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4194,
    "date": "2020-06-16T04:22:30",
    "date_gmt": "2020-06-16T04:22:30",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=348"
    },
    "modified": "2020-06-16T04:22:30",
    "modified_gmt": "2020-06-16T04:22:30",
    "slug": "errors-and-logging",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/errors-and-logging/",
    "title": {
      "rendered": "Errors and Logging"
    },
    "content": {
      "rendered": "\n<p>This chapter deals with errors and logging in Laravel projects and how to work on them.</p>\n\n\n\n<h2>Errors</h2>\n\n\n\n<p>A project while underway, is borne to have a few errors. Errors and exception handling is already configured for you when you start a new Laravel project. Normally, in a local environment we need to see errors for debugging purposes. We need to hide these errors from users in production environment. This can be achieved with the variable&nbsp;<strong>APP_DEBUG</strong>&nbsp;set in the environment file&nbsp;<strong>.env</strong>&nbsp;stored at the root of the application.</p>\n\n\n\n<p>For local environment the value of&nbsp;<strong>APP_DEBUG</strong>&nbsp;should be&nbsp;<strong>true</strong>&nbsp;but for production it needs to be set to&nbsp;<strong>false</strong>&nbsp;to hide errors.</p>\n\n\n\n<p><strong>Note</strong>&nbsp;− After changing the&nbsp;<strong>APP_DEBUG</strong>&nbsp;variable, you should restart the Laravel server.</p>\n\n\n\n<h2>Logging</h2>\n\n\n\n<p>Logging is an important mechanism by which system can log errors that are generated. It is useful to improve the reliability of the system. Laravel supports different logging modes like single, daily, syslog, and errorlog modes. You can set these modes in <strong>config/app.php</strong> file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>'log' => 'daily'</code></pre>\n\n\n\n<p>You can see the generated log entries in&nbsp;<strong>storage/logs/laravel.log</strong>&nbsp;file.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter deals with errors and logging in Laravel projects and how to work on them. Errors A project while underway, is borne to have a few errors. Errors and exception handling is already configured for you when you start a new Laravel project. Normally, in a local environment we need to see errors for [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4194"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4194"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4194/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4194"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4194"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4194"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 350,
    "date": "2020-06-16T04:33:27",
    "date_gmt": "2020-06-16T04:33:27",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=350"
    },
    "modified": "2020-06-16T04:33:27",
    "modified_gmt": "2020-06-16T04:33:27",
    "slug": "forms-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/forms-2/",
    "title": {
      "rendered": "Forms"
    },
    "content": {
      "rendered": "\n<p>Laravel provides various in built tags to handle HTML forms easily and securely. All the major elements of HTML are generated using Laravel. To support this, we need to add HTML package to Laravel using composer.</p>\n\n\n\n<h2>Example 1</h2>\n\n\n\n<p><strong>Step 1</strong> − Execute the following command to proceed with the same.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>composer require illuminate/html</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− This will add HTML package to Laravel as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/html_package.jpg\" alt=\"HTML Package\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Now, we need to add the package shown above to Laravel configuration file which is stored at&nbsp;<strong>config/app.php.</strong>&nbsp;Open this file and you will see a list of Laravel service providers as shown in the following image. Add HTML service provider as indicated in the outlined box in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/laravel_service.jpg\" alt=\"Laravel Service\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Add aliases in the same file for HTML and Form. Notice the two lines indicated in the outlined box in the following image and add those two lines.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/outlined_box.jpg\" alt=\"Outlined Box\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Now everything is setup. Let’s see how we can use various HTML elements using Laravel tags.</p>\n\n\n\n<h3>Opening a Form</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>{{ Form::open(array('url' => 'foo/bar')) }}\n   //\n{{ Form::close() }}</code></pre>\n\n\n\n<h3>Generating a Label Element</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::label('email', 'E-Mail Address');</code></pre>\n\n\n\n<h3>Generating a Text Input</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::text('username');</code></pre>\n\n\n\n<h3>Specifying a Default Value</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::text('email', 'example@gmail.com');</code></pre>\n\n\n\n<h3>Generating a Password Input</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::password('password');</code></pre>\n\n\n\n<h3>Generating a File Input</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::file('image');</code></pre>\n\n\n\n<h3>Generating a Checkbox Or Radio Input</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::checkbox('name', 'value');\necho Form::radio('name', 'value');\n﻿</code></pre>\n\n\n\n<h3>Generating a Checkbox Or Radio Input That Is Checked</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::checkbox('name', 'value', true);\necho Form::radio('name', 'value', true);</code></pre>\n\n\n\n<h3>Generating a Drop-Down List</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::select('size', array('L' => 'Large', 'S' => 'Small'));</code></pre>\n\n\n\n<h3>Generating A Submit Button</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>echo Form::submit('Click Me!');</code></pre>\n\n\n\n<h2>Example 2</h2>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Copy the following code to create a view called</p>\n\n\n\n<p><strong>resources/views/form.php</strong>.</p>\n\n\n\n<p><strong>resources/views/form.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      \n      &lt;?php\n         echo Form::open(array('url' => 'foo/bar'));\n            echo Form::text('username','Username');\n            echo '&lt;br/>';\n            \n            echo Form::text('email', 'example@gmail.com');\n            echo '&lt;br/>';\n     \n            echo Form::password('password');\n            echo '&lt;br/>';\n            \n            echo Form::checkbox('name', 'value');\n            echo '&lt;br/>';\n            \n            echo Form::radio('name', 'value');\n            echo '&lt;br/>';\n            \n            echo Form::file('image');\n            echo '&lt;br/>';\n            \n            echo Form::select('size', array('L' => 'Large', 'S' => 'Small'));\n            echo '&lt;br/>';\n            \n            echo Form::submit('Click Me!');\n         echo Form::close();\n      ?>\n   \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 2</strong> − Add the following li</p>\n\n\n\n<p>ne in <strong>app/Http/routes.php</strong> to add a route for view form.php</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/form',function() {\n   return view('form');\n});</code></pre>\n\n\n\n<p><strong>Step 3</strong> − Visit the following URL to see the form.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/form</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/view_form.jpg\" alt=\"View Form\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel provides various in built tags to handle HTML forms easily and securely. All the major elements of HTML are generated using Laravel. To support this, we need to add HTML package to Laravel using composer. Example 1 Step 1 − Execute the following command to proceed with the same. Step 2&nbsp;− This will add HTML [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/350"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=350"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/350/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=350"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=350"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=350"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4195,
    "date": "2020-06-16T04:36:56",
    "date_gmt": "2020-06-16T04:36:56",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=352"
    },
    "modified": "2020-06-16T04:36:56",
    "modified_gmt": "2020-06-16T04:36:56",
    "slug": "localization",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/localization/",
    "title": {
      "rendered": "Localization"
    },
    "content": {
      "rendered": "\n<p>Localization feature of Laravel supports different language to be used in application. You need to store all the strings of different language in a file and these files are stored at <strong>resources/views</strong> directory. You should create a separate directory for each supported language. All the language files should return an array of keyed strings as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\nreturn &#91;\n   'welcome' => 'Welcome to the application'\n];</code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p><strong>Step 1</strong> − Create 3 files for languages − <strong>English, French</strong>, and <strong>German</strong>. Save English file at <strong>resources/lang/en/lang.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   return &#91;\n      'msg' => 'Laravel Internationalization example.'\n   ];\n?></code></pre>\n\n\n\n<p><strong>Step 2</strong> − Save French file at <strong>resources/lang/fr/lang.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   return &#91;\n      'msg' => 'Exemple Laravel internationalisation.'\n   ];\n?></code></pre>\n\n\n\n<p><strong>Step 3</strong> − Save German file at <strong>resources/lang/de/lang.php</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   return &#91;\n      'msg' => 'Laravel Internationalisierung Beispiel.' \n   ];\n?></code></pre>\n\n\n\n<p><strong>Step 4</strong> − Create a controller called <strong>LocalizationController</strong> by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller LocalizationController --plain</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/localizationcontroller.jpg\" alt=\"LocalizationController\"/></figure>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Copy the following code to file</p>\n\n\n\n<p><strong>app/Http/Controllers/LocalizationController.php</strong></p>\n\n\n\n<p><strong>app/Http/Controllers/LocalizationController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass LocalizationController extends Controller {\n   public function index(Request $request,$locale) {\n      //set’s application’s locale\n      app()->setLocale($locale);\n      \n      //Gets the translated message and displays it\n      echo trans('lang.msg');\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Add a route for LocalizationController in&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file. Notice that we are passing {locale} argument after localization/ which we will use to see output in different language.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('localization/{locale}','LocalizationController@index');</code></pre>\n\n\n\n<p><strong>Step 8</strong> − Now, let us visit the different URLs to see all different languages. Execute the below URL to see output in English language.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/localization/en</code></pre>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/laravel_internationalization.jpg\" alt=\"Laravel Internationalization\"/></figure>\n\n\n\n<p><strong>Step 10</strong> − Execute the below URL to see output in French language.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/localization/fr\n﻿</code></pre>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/french_example.jpg\" alt=\"French Example\"/></figure>\n\n\n\n<p><strong>Step 12</strong> − Execute the below URL to see output in German language</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/localization/de</code></pre>\n\n\n\n<p><strong>Step 13</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/german_example.jpg\" alt=\"German Example\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Localization feature of Laravel supports different language to be used in application. You need to store all the strings of different language in a file and these files are stored at resources/views directory. You should create a separate directory for each supported language. All the language files should return an array of keyed strings as shown below. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4195"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4195"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4195/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4195"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4195"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4195"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4196,
    "date": "2020-06-16T04:40:24",
    "date_gmt": "2020-06-16T04:40:24",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=354"
    },
    "modified": "2020-06-16T04:40:24",
    "modified_gmt": "2020-06-16T04:40:24",
    "slug": "session",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/session/",
    "title": {
      "rendered": "Session"
    },
    "content": {
      "rendered": "\n<p>Sessions are used to store information about the user across the requests. Laravel provides various drivers like&nbsp;<strong>file, cookie, apc, array, Memcached, Redis,</strong>&nbsp;and&nbsp;<strong>database</strong>&nbsp;to handle session data. By default, file driver is used because it is lightweight. Session can be configured in the file stored at&nbsp;<strong>config/session.php</strong>.</p>\n\n\n\n<h2>Accessing Session Data</h2>\n\n\n\n<p>To access the session data, we need an instance of session which can be accessed via HTTP request. After getting the instance, we can use the <strong>get()</strong> method, which will take one argument, <strong>“key”</strong>, to get the session data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$value = $request->session()->get('key');</code></pre>\n\n\n\n<p>You can use&nbsp;<strong>all()</strong>&nbsp;method to get all session data instead of&nbsp;<strong>get()</strong>&nbsp;method.</p>\n\n\n\n<h2>Storing Session Data</h2>\n\n\n\n<p>Data can be stored in session using the <strong>put()</strong> method. The <strong>put()</strong> method will take two arguments, the <strong>“key”</strong> and the <strong>“value”</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$request->session()->put('key', 'value');</code></pre>\n\n\n\n<h2>Deleting Session Data</h2>\n\n\n\n<p>The <strong>forget()</strong> method is used to delete an item from the session. This method will take <strong>“key”</strong> as the argument.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$request->session()->forget('key');</code></pre>\n\n\n\n<p>Use&nbsp;<strong>flush()</strong>&nbsp;method instead of&nbsp;<strong>forget()</strong>&nbsp;method to delete all session data. Use the&nbsp;<strong>pull()</strong>&nbsp;method to retrieve data from session and delete it afterwards. The pull() method will also take&nbsp;<strong>key</strong>&nbsp;as the argument. The difference between the&nbsp;<strong>forget()</strong>&nbsp;and the&nbsp;<strong>pull()</strong>&nbsp;method is that&nbsp;<strong>forget()</strong>&nbsp;method will not return the value of the session and&nbsp;<strong>pull()</strong>&nbsp;method will return it and delete that value from session.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong> − Create a controller called <strong>SessionController</strong> by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller SessionController --plain</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/sessioncontroller.jpg\" alt=\"SessionController\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Copy the following code in a file at</p>\n\n\n\n<p><strong>app/Http/Controllers/SessionController.php.</strong></p>\n\n\n\n<p><strong>app/Http/Controllers/SessionController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass SessionController extends Controller {\n   public function accessSessionData(Request $request) {\n      if($request->session()->has('my_name'))\n         echo $request->session()->get('my_name');\n      else\n         echo 'No data in the session';\n   }\n   public function storeSessionData(Request $request) {\n      $request->session()->put('my_name','Virat Gandhi');\n      echo \"Data has been added to session\";\n   }\n   public function deleteSessionData(Request $request) {\n      $request->session()->forget('my_name');\n      echo \"Data has been removed from session.\";\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Add the following lines at&nbsp;<strong>app/Http/routes.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('session/get','SessionController@accessSessionData');\nRoute::get('session/set','SessionController@storeSessionData');\nRoute::get('session/remove','SessionController@deleteSessionData');\n﻿</code></pre>\n\n\n\n<p><strong>Step 5</strong> − Visit the following URL to <strong>set data in session</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/session/set</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/data_in_session.jpg\" alt=\"Data in Session\"/></figure>\n\n\n\n<p><strong>Step 7</strong> − Visit the following URL to <strong>get data from session</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/session/get</code></pre>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− The output will appear as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/virat_gandhi.jpg\" alt=\"Virat Gandhi\"/></figure>\n\n\n\n<p><strong>Step 9</strong> − Visit the following URL to <strong>remove session data</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/session/remove</code></pre>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− You will see a message as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/session.jpg\" alt=\"Session\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Sessions are used to store information about the user across the requests. Laravel provides various drivers like&nbsp;file, cookie, apc, array, Memcached, Redis,&nbsp;and&nbsp;database&nbsp;to handle session data. By default, file driver is used because it is lightweight. Session can be configured in the file stored at&nbsp;config/session.php. Accessing Session Data To access the session data, we need an [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4196"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4196"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4196/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4196"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4196"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4196"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4197,
    "date": "2020-06-16T04:42:48",
    "date_gmt": "2020-06-16T04:42:48",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=356"
    },
    "modified": "2020-06-16T04:42:48",
    "modified_gmt": "2020-06-16T04:42:48",
    "slug": "validation-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/validation-3/",
    "title": {
      "rendered": "Validation"
    },
    "content": {
      "rendered": "\n<p>Validation is the most important aspect while designing an application. It validates the incoming data. By default, base controller class uses a&nbsp;<strong>ValidatesRequests</strong>&nbsp;trait which provides a convenient method to validate incoming HTTP requests with a variety of powerful validation rules.</p>\n\n\n\n<h2>Available Validation Rules in Laravel</h2>\n\n\n\n<p>Laravel will always check for errors in the session data, and automatically bind them to the view if they are available. So, it is important to note that a&nbsp;<strong>$errors</strong>&nbsp;variable will always be available in all of your views on every request, allowing you to conveniently assume the&nbsp;<strong>$errors</strong>&nbsp;variable is always defined and can be safely used. The following table shows all available validation rules in Laravel.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Available Validation Rules in Laravel</th></tr><tr><td>Accepted</td><td>Active URL</td><td>After (Date)</td></tr><tr><td>Alpha</td><td>Alpha Dash</td><td>Alpha Numeric</td></tr><tr><td>Array</td><td>Before (Date)</td><td>Between</td></tr><tr><td>Boolean</td><td>Confirmed</td><td>Date</td></tr><tr><td>Date Format</td><td>Different</td><td>Digits</td></tr><tr><td>Digits Between</td><td>E-Mail</td><td>Exists (Database)</td></tr><tr><td>Image (File)</td><td>In</td><td>Integer</td></tr><tr><td>IP Address</td><td>JSON</td><td>Max</td></tr><tr><td>MIME Types(File)</td><td>Min</td><td>Not In</td></tr><tr><td>Numeric</td><td>Regular Expression</td><td>Required</td></tr><tr><td>Required If</td><td>Required Unless</td><td>Required With</td></tr><tr><td>Required With All</td><td>Required Without</td><td>Required Without All</td></tr><tr><td>Same</td><td>Size</td><td>String</td></tr><tr><td>Timezone</td><td>Unique (Database)</td><td>URL</td></tr></tbody></table></figure>\n\n\n\n<p>The <strong>$errors</strong> variable will be an instance of <strong>Illuminate\\Support\\MessageBag</strong>. Error message can be displayed in view file by adding the code as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@if (count($errors) > 0)\n   &lt;div class = \"alert alert-danger\">\n      &lt;ul>\n         @foreach ($errors->all() as $error)\n            &lt;li>{{ $error }}&lt;/li>\n         @endforeach\n      &lt;/ul>\n   &lt;/div>\n@endif</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong> − Create a controller called <strong>ValidationController</strong> by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller ValidationController --plain</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/validationcontroller.jpg\" alt=\"ValidationController\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Copy the following code in</p>\n\n\n\n<p><strong>app/Http/Controllers/ValidationController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/ValidationController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass ValidationController extends Controller {\n   public function showform() {\n      return view('login');\n   }\n   public function validateform(Request $request) {\n      print_r($request->all());\n      $this->validate($request,&#91;\n         'username'=>'required|max:8',\n         'password'=>'required'\n      ]);\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a view file called&nbsp;<strong>resources/views/login.blade.php</strong>&nbsp;and copy the following code in that file.</p>\n\n\n\n<p><strong>resources/views/login.blade.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   \n   &lt;head>\n      &lt;title>Login Form&lt;/title>\n   &lt;/head>\n\n   &lt;body>\n      \n      @if (count($errors) > 0)\n         &lt;div class = \"alert alert-danger\">\n            &lt;ul>\n               @foreach ($errors->all() as $error)\n                  &lt;li>{{ $error }}&lt;/li>\n               @endforeach\n            &lt;/ul>\n         &lt;/div>\n      @endif\n      \n      &lt;?php\n         echo Form::open(array('url'=>'/validation'));\n      ?>\n      \n      &lt;table border = '1'>\n         &lt;tr>\n            &lt;td align = 'center' colspan = '2'>Login&lt;/td>\n         &lt;/tr>\n         &lt;tr>\n            &lt;td>Username&lt;/td>\n            &lt;td>&lt;?php echo Form::text('username'); ?>&lt;/td>\n         &lt;/tr>\n         &lt;tr>\n            &lt;td>Password&lt;/td>\n            &lt;td>&lt;?php echo Form::password('password'); ?>&lt;/td>\n         &lt;/tr>\n         &lt;tr>\n            &lt;td align = 'center' colspan = '2'\n               >&lt;?php echo Form::submit('Login'); ?  >&lt;/td>\n         &lt;/tr>\n      &lt;/table>\n      \n      &lt;?php\n         echo Form::close();\n      ?>\n   \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the following lines in&nbsp;<strong>app/Http/routes.php</strong>.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/validation','ValidationController@showform');\nRoute::post('/validation','ValidationController@validateform');</code></pre>\n\n\n\n<p><strong>Step 6</strong> − Visit the following URL to test the validation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/validation</code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Click the&nbsp;<strong>“Login”</strong>&nbsp;button without entering anything in the text field. The output will be as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/login.jpg\" alt=\"Login\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Validation is the most important aspect while designing an application. It validates the incoming data. By default, base controller class uses a&nbsp;ValidatesRequests&nbsp;trait which provides a convenient method to validate incoming HTTP requests with a variety of powerful validation rules. Available Validation Rules in Laravel Laravel will always check for errors in the session data, and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4197"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4197"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4197/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4197"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4197"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4197"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4198,
    "date": "2020-06-16T04:44:56",
    "date_gmt": "2020-06-16T04:44:56",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=358"
    },
    "modified": "2020-06-16T04:44:56",
    "modified_gmt": "2020-06-16T04:44:56",
    "slug": "file-uploading-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/file-uploading-4/",
    "title": {
      "rendered": "File Uploading"
    },
    "content": {
      "rendered": "\n<p>Uploading Files in Laravel is very easy. All we need to do is to create a view file where a user can select a file to be uploaded and a controller where uploaded files will be processed.</p>\n\n\n\n<p>In a view file, we need to generate a file input by adding the following line of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Form::file('file_name');</code></pre>\n\n\n\n<p>In Form::open(), we need to add <strong>‘files’=>’true’</strong> as shown below. This facilitates the form to be uploaded in multiple parts.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Form::open(array('url' => '/uploadfile','files'=>'true'));</code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a view file called&nbsp;<strong>resources/views/uploadfile.php</strong>&nbsp;and copy the following code in that file.</p>\n\n\n\n<p><strong>resources/views/uploadfile.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;body>\n      &lt;?php\n         echo Form::open(array('url' => '/uploadfile','files'=>'true'));\n         echo 'Select the file to upload.';\n         echo Form::file('image');\n         echo Form::submit('Upload File');\n         echo Form::close();\n      ?>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 2</strong> − Create a controller called <strong>UploadFileController</strong> by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller UploadFileController --plain</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/uploadfilecontroller.jpg\" alt=\"UploadFileController\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Copy the following code in</p>\n\n\n\n<p><strong>app/Http/Controllers/UploadFileController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/UploadFileController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass UploadFileController extends Controller {\n   public function index() {\n      return view('uploadfile');\n   }\n   public function showUploadFile(Request $request) {\n      $file = $request->file('image');\n   \n      //Display File Name\n      echo 'File Name: '.$file->getClientOriginalName();\n      echo '&lt;br>';\n   \n      //Display File Extension\n      echo 'File Extension: '.$file->getClientOriginalExtension();\n      echo '&lt;br>';\n   \n      //Display File Real Path\n      echo 'File Real Path: '.$file->getRealPath();\n      echo '&lt;br>';\n   \n      //Display File Size\n      echo 'File Size: '.$file->getSize();\n      echo '&lt;br>';\n   \n      //Display File Mime Type\n      echo 'File Mime Type: '.$file->getMimeType();\n   \n      //Move Uploaded File\n      $destinationPath = 'uploads';\n      $file->move($destinationPath,$file->getClientOriginalName());\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the following lines in&nbsp;<strong>app/Http/routes.php</strong>.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/uploadfile','UploadFileController@index');\nRoute::post('/uploadfile','UploadFileController@showUploadFile');</code></pre>\n\n\n\n<p><strong>Step 6</strong> − Visit the following URL to test the upload file functionality.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/uploadfile</code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− You will receive a prompt as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/browse_file.jpg\" alt=\"Browse File\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Uploading Files in Laravel is very easy. All we need to do is to create a view file where a user can select a file to be uploaded and a controller where uploaded files will be processed. In a view file, we need to generate a file input by adding the following line of code. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4198"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4198"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4198/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4198"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4198"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4198"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4199,
    "date": "2020-06-16T04:50:34",
    "date_gmt": "2020-06-16T04:50:34",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=360"
    },
    "modified": "2020-06-16T04:50:34",
    "modified_gmt": "2020-06-16T04:50:34",
    "slug": "sending-email-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/sending-email-2/",
    "title": {
      "rendered": "Sending Email"
    },
    "content": {
      "rendered": "\n<p>Laravel uses free feature-rich library&nbsp;<strong>SwiftMailer</strong>&nbsp;to send emails. Using the library function, we can easily send emails without too many hassles. The e-mail templates are loaded in the same way as views, which means you can use the Blade syntax and inject data into your templates.</p>\n\n\n\n<p>The following table shows the syntax and attributes of&nbsp;<strong>send</strong>&nbsp;function −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>Syntax</td><td>void send(string|array $view, array $data, Closure|string $callback)</td></tr><tr><td>Parameters</td><td>$view(string|array) − name of the view that contains email message$data(array) − array of data to pass to view$callback − a Closure callback which receives a message instance, allowing you to customize the recipients, subject, and other aspects of the mail message</td></tr><tr><td>Returns</td><td>nothing</td></tr><tr><td>Description</td><td>Sends email.</td></tr></tbody></table></figure>\n\n\n\n<p>In the third argument, the $callback closure received message instance and with that instance we can also call the following functions and alter the message as shown below.</p>\n\n\n\n<ul><li>$message → subject(&#8216;Welcome to the codemeals&#8217;);</li><li>$message → from(&#8217;email@example.com&#8217;, &#8216;Mr. Example&#8217;);</li><li>$message → to(&#8217;email@example.com&#8217;, &#8216;Mr. Example&#8217;);</li></ul>\n\n\n\n<p>Some of the less common methods include −</p>\n\n\n\n<ul><li>$message → sender(&#8217;email@example.com&#8217;, &#8216;Mr. Example&#8217;);</li><li>$message → returnPath(&#8217;email@example.com&#8217;);</li><li>$message → cc(&#8217;email@example.com&#8217;, &#8216;Mr. Example&#8217;);</li><li>$message → bcc(&#8217;email@example.com&#8217;, &#8216;Mr. Example&#8217;);</li><li>$message → replyTo(&#8217;email@example.com&#8217;, &#8216;Mr. Example&#8217;);</li><li>$message → priority(2);</li></ul>\n\n\n\n<p>To attach or embed files, you can use the following methods −</p>\n\n\n\n<ul><li>$message → attach(&#8216;path/to/attachment.txt&#8217;);</li><li>$message → embed(&#8216;path/to/attachment.jpg&#8217;);</li></ul>\n\n\n\n<p>Mail can be sent as HTML or text. You can indicate the type of mail that you want to send in the first argument by passing an array as shown below. The default type is HTML. If you want to send plain text mail then use the following syntax.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Mail::send(&#91;‘text’=>’text.view’], $data, $callback);</code></pre>\n\n\n\n<p>In this syntax, the first argument takes an array. Use&nbsp;<strong>text</strong>&nbsp;as the key name of the view as value of the key.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− We will now send an email from Gmail account and for that you need to configure your Gmail account in Laravel environment file&nbsp;<strong>&#8211; .env</strong>&nbsp;file. Enable 2-step verification in your Gmail account and create an application specific password followed by changing the .env parameters as shown below.</p>\n\n\n\n<h3>.env</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>MAIL_DRIVER = smtp\nMAIL_HOST = smtp.gmail.com\nMAIL_PORT = 587\nMAIL_USERNAME = your-gmail-username\nMAIL_PASSWORD = your-application-specific-password\nMAIL_ENCRYPTION = tls</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After changing the&nbsp;<strong>.env</strong>&nbsp;file execute the below two commands to clear the cache and restart the Laravel server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan config:cache</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Create a controller called&nbsp;<strong>MailController</strong>&nbsp;by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller MailController --plain</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/mailcontroller.jpg\" alt=\"MailController\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Copy the following code in</p>\n\n\n\n<p><strong>app/Http/Controllers/MailController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/MailController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\nuse Illuminate\\Http\\Request;\nuse Mail;\n\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass MailController extends Controller {\n   public function basic_email() {\n      $data = array('name'=>\"Virat Gandhi\");\n   \n      Mail::send(&#91;'text'=>'mail'], $data, function($message) {\n         $message->to('abc@gmail.com', 'codemeals')->subject\n            ('Laravel Basic Testing Mail');\n         $message->from('xyz@gmail.com','Virat Gandhi');\n      });\n      echo \"Basic Email Sent. Check your inbox.\";\n   }\n   public function html_email() {\n      $data = array('name'=>\"Virat Gandhi\");\n      Mail::send('mail', $data, function($message) {\n         $message->to('abc@gmail.com', 'codemeals')->subject\n            ('Laravel HTML Testing Mail');\n         $message->from('xyz@gmail.com','Virat Gandhi');\n      });\n      echo \"HTML Email Sent. Check your inbox.\";\n   }\n   public function attachment_email() {\n      $data = array('name'=>\"Virat Gandhi\");\n      Mail::send('mail', $data, function($message) {\n         $message->to('abc@gmail.com', 'codemeals')->subject\n            ('Laravel Testing Mail with Attachment');\n         $message->attach('C:\\laravel-master\\laravel\\public\\uploads\\image.png');\n         $message->attach('C:\\laravel-master\\laravel\\public\\uploads\\test.txt');\n         $message->from('xyz@gmail.com','Virat Gandhi');\n      });\n      echo \"Email Sent with attachment. Check your inbox.\";\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Copy the following code in&nbsp;<strong>resources/views/mail.blade.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>resources/views/mail.blade.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Hi, {{ $name }}&lt;/h1>\nl&lt;p>Sending Mail from Laravel.&lt;/p></code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Add the following lines in&nbsp;<strong>app/Http/routes.php.</strong></p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('sendbasicemail','MailController@basic_email');\nRoute::get('sendhtmlemail','MailController@html_email');\nRoute::get('sendattachmentemail','MailController@attachment_email');</code></pre>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Visit the following URL to test basic email.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/sendbasicemail</code></pre>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− The output screen will look something like this. Check your inbox to see the basic email output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/basic_email_sent.jpg\" alt=\"Basic Email Sent\"/></figure>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− Visit the following URL to test the HTML email.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/sendhtmlemail</code></pre>\n\n\n\n<p><strong>Step 11</strong>&nbsp;− The output screen will look something like this. Check your inbox to see the html email output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/html_email.jpg\" alt=\"HTML Email\"/></figure>\n\n\n\n<p><strong>Step 12</strong>&nbsp;− Visit the following URL to test the HTML email with attachment.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/sendattachmentemail</code></pre>\n\n\n\n<p><strong>Step 13</strong>&nbsp;− You can see the following output</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/email_sent.jpg\" alt=\"Email Sent\"/></figure>\n\n\n\n<p><strong>Note</strong>&nbsp;− In the&nbsp;<strong>MailController.php</strong>&nbsp;file the email address in the from method should be the email address from which you can send email address. Generally, it should be the email address configured on your server.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel uses free feature-rich library&nbsp;SwiftMailer&nbsp;to send emails. Using the library function, we can easily send emails without too many hassles. The e-mail templates are loaded in the same way as views, which means you can use the Blade syntax and inject data into your templates. The following table shows the syntax and attributes of&nbsp;send&nbsp;function − [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4199"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4199"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4199/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4199"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4199"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4199"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4200,
    "date": "2020-06-16T04:52:52",
    "date_gmt": "2020-06-16T04:52:52",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=362"
    },
    "modified": "2020-06-16T04:52:52",
    "modified_gmt": "2020-06-16T04:52:52",
    "slug": "ajax-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/ajax-2/",
    "title": {
      "rendered": "Ajax"
    },
    "content": {
      "rendered": "\n<p><strong>Ajax (Asynchronous JavaScript and XML)</strong>&nbsp;is a set of web development techniques utilizing many web technologies used on the client-side to create asynchronous Web applications. Import jquery library in your view file to use ajax functions of jquery which will be used to send and receive data using ajax from the server. On the server side you can use the response() function to send response to client and to send response in JSON format you can chain the response function with json() function.</p>\n\n\n\n<h2>json() function syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>json(string|array $data = array(), int $status = 200, array $headers = array(), int $options)</code></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong> − Create a view file called <strong>resources/views/message.php</strong> and copy the following code in that file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>Ajax Example&lt;/title>\n      \n      &lt;script src = \"https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js\">\n      &lt;/script>\n      \n      &lt;script>\n         function getMessage() {\n            $.ajax({\n               type:'POST',\n               url:'/getmsg',\n               data:'_token = &lt;?php echo csrf_token() ?>',\n               success:function(data) {\n                  $(\"#msg\").html(data.msg);\n               }\n            });\n         }\n      &lt;/script>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div id = 'msg'>This message will be replaced using Ajax. \n         Click the button to replace the message.&lt;/div>\n      &lt;?php\n         echo Form::button('Replace Message',&#91;'onClick'=>'getMessage()']);\n      ?>\n   &lt;/body>\n\n&lt;/html></code></pre>\n\n\n\n<p><strong>Step 2</strong> − Create a controller called <strong>AjaxController</strong> by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:controller AjaxController --plain</code></pre>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/ajaxcontroller.jpg\" alt=\"AjaxController\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Copy the following code in</p>\n\n\n\n<p><strong>app/Http/Controllers/AjaxController.php</strong>&nbsp;file.</p>\n\n\n\n<p><strong>app/Http/Controllers/AjaxController.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Requests;\nuse App\\Http\\Controllers\\Controller;\n\nclass AjaxController extends Controller {\n   public function index() {\n      $msg = \"This is a simple message.\";\n      return response()->json(array('msg'=> $msg), 200);\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Add the following lines in&nbsp;<strong>app/Http/routes.php</strong>.</p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('ajax',function() {\n   return view('message');\n});\nRoute::post('/getmsg','AjaxController@index');</code></pre>\n\n\n\n<p><strong>Step 6</strong> − Visit the following URL to test the Ajax functionality.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/ajax</code></pre>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− You will be redirected to a page where you will see a message as shown in the following image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/replace_message.jpg\" alt=\"Replace Message\"/></figure>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− The output will appear as shown in the following image after clicking the button.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/simple_message.jpg\" alt=\"Simple Message\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Ajax (Asynchronous JavaScript and XML)&nbsp;is a set of web development techniques utilizing many web technologies used on the client-side to create asynchronous Web applications. Import jquery library in your view file to use ajax functions of jquery which will be used to send and receive data using ajax from the server. On the server side [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4200"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4200"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4200/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4200"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4200"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4200"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4201,
    "date": "2020-06-16T04:55:07",
    "date_gmt": "2020-06-16T04:55:07",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=365"
    },
    "modified": "2020-06-16T04:55:07",
    "modified_gmt": "2020-06-16T04:55:07",
    "slug": "error-handling-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/error-handling-3/",
    "title": {
      "rendered": "Error Handling"
    },
    "content": {
      "rendered": "\n<p>Most web applications have specific mechanisms for error handling. Using these, they track errors and exceptions, and log them to analyze the performance. In this chapter, you will read about error handling in Laravel applications.</p>\n\n\n\n<h2>Important Points</h2>\n\n\n\n<p>Before proceeding further to learn in detail about error handling in Laravel, please note the following important points −</p>\n\n\n\n<ul><li>For any new project, Laravel logs errors and exceptions in the&nbsp;<strong>App\\Exceptions\\Handler</strong>&nbsp;class, by default. They are then submitted back to the user for analysis.</li><li>When your Laravel application is set in debug mode, detailed error messages with stack traces will be shown on every error that occurs within your web application.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/error_log.jpg\" alt=\"Error Log\"/></figure>\n\n\n\n<ul><li>By default, debug mode is set to&nbsp;<strong>false</strong>&nbsp;and you can change it to&nbsp;<strong>true</strong>. This enables the user to track all errors with stack traces.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/app_debug.jpg\" alt=\"App Debug\"/></figure>\n\n\n\n<ul><li>The configuration of Laravel project includes the&nbsp;<strong>debug</strong>&nbsp;option which determines how much information about an error is to be displayed to the user. By default in a web application, the option is set to the value defined in the environment variables of the&nbsp;<strong>.env</strong>&nbsp;file.<ul><li>The value is set to&nbsp;<strong>true</strong>&nbsp;in a local development environment and is set to&nbsp;<strong>false</strong>&nbsp;in a production environment.</li><li>If the value is set to&nbsp;<strong>true</strong>&nbsp;in a production environment, the risk of sharing sensitive information with the end users is higher.</li></ul></li></ul>\n\n\n\n<h2>Error Log</h2>\n\n\n\n<p>Logging the errors in a web application helps to track them and in planning a strategy for removing them. The log information can be configured in the web application in&nbsp;<strong>config/app.php</strong>&nbsp;file. Please note the following points while dealing with Error Log in Laravel −</p>\n\n\n\n<ul><li>Laravel uses monolog PHP logging library.</li><li>The logging parameters used for error tracking are <strong>single, daily, syslog</strong> and <strong>errorlog</strong>.</li><li>For example, if you wish to log the error messages in log files, you should set the log value in your app configuration to <strong>daily</strong> as shown in the command below −</li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>'log' => env('APP_LOG',’daily’),</code></pre>\n\n\n\n<ul><li>If the <strong>daily</strong> log mode is taken as the parameter, Laravel takes error log for a period of <strong>5 days</strong>, by default. If you wish to change the maximum number of log files, you have to set the parameter of <strong>log_max_files</strong> in the configuration file to a desired value.</li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>‘log_max_files’ => 25;</code></pre>\n\n\n\n<h3>Severity Levels</h3>\n\n\n\n<p>As Laravel uses monolog PHP logging library, there are various parameters used for analyzing severity levels. Various severity levels that are available are <strong>error, critical, alert</strong> and <strong>emergency messages</strong>. You can set the severity level as shown in the command below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>'log_level' => env('APP_LOG_LEVEL', 'error')</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Most web applications have specific mechanisms for error handling. Using these, they track errors and exceptions, and log them to analyze the performance. In this chapter, you will read about error handling in Laravel applications. Important Points Before proceeding further to learn in detail about error handling in Laravel, please note the following important points [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4201"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4201"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4201/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4201"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4201"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4201"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4202,
    "date": "2020-06-16T04:57:03",
    "date_gmt": "2020-06-16T04:57:03",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=367"
    },
    "modified": "2020-06-16T04:57:03",
    "modified_gmt": "2020-06-16T04:57:03",
    "slug": "event-handling",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/event-handling/",
    "title": {
      "rendered": "Event Handling"
    },
    "content": {
      "rendered": "\n<p>Events provide a simple observer implementation which allows a user to subscribe and listen to various events triggered in the web application. All the event classes in Laravel are stored in the&nbsp;<strong>app/Events</strong>&nbsp;folder and the listeners are stored in the&nbsp;<strong>app/Listeners</strong>&nbsp;folder.</p>\n\n\n\n<p>The artisan command for generating events and listeners in your web application is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan event:generate</code></pre>\n\n\n\n<p>This command generates the events and listeners to the respective folders as discussed above.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/event_generator.jpg\" alt=\"Event Generator\"/></figure>\n\n\n\n<p>Events and Listeners serve a great way to decouple a web application, since one event can have multiple listeners which are independent of each other. The events folder created by the artisan command includes the following two files: event.php and SomeEvent.php. They are shown here −</p>\n\n\n\n<h3>Event.php</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\nnamespace App\\Events;\nabstract class Event{\n   //\n}</code></pre>\n\n\n\n<p>As mentioned above,&nbsp;<strong>event.php</strong>&nbsp;includes the basic definition of class&nbsp;<strong>Event</strong>&nbsp;and calls for namespace&nbsp;<strong>App\\Events</strong>. Please note that the user defined or custom events are created in this file.</p>\n\n\n\n<h3>SomeEvent.php</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Events;\n\nuse App\\Events\\Event;\nuse Illuminate\\Queue\\SerializesModels;\nuse Illuminate\\Contracts\\Broadcasting\\ShouldBroadcast;\n\nclass SomeEvent extends Event{\n   use SerializesModels;\n   /**\n      * Create a new event instance.\n      *\n      * @return void\n   */\n   \n   public function __construct() {\n      //\n   }\n   \n   /**\n      * Get the channels the event should be broadcast on.\n      *\n      * @return array\n   */\n   \n   public function broadcastOn() {\n      return &#91;];\n   }\n}</code></pre>\n\n\n\n<p>Observe that this file uses serialization for broadcasting events in a web application and that the necessary parameters are also initialized in this file.</p>\n\n\n\n<p>For example, if we need to initialize order variable in the constructor for registering an event, we can do it in the following way −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public function __construct(Order $order) {\n   $this->order = $order;\n}</code></pre>\n\n\n\n<h3>Listeners</h3>\n\n\n\n<p>Listeners handle all the activities mentioned in an event that is being registered. The artisan command&nbsp;<strong>event:generate</strong>&nbsp;creates all the&nbsp;<strong>listeners</strong>&nbsp;in the&nbsp;<strong>app/listeners</strong>&nbsp;directory. The Listeners folder includes a file&nbsp;<strong>EventListener.php</strong>&nbsp;which has all the methods required for handling listeners.</p>\n\n\n\n<h3>EventListener.php</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Listeners;\n\nuse App\\Events\\SomeEvent;\nuse Illuminate\\Queue\\InteractsWithQueue;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\n\nclass EventListener{\n   /**\n      * Create the event listener.\n      *\n      * @return void\n   */\n   \n   public function __construct() {\n      //\n   }\n\n   /**\n      * Handle the event.\n      *\n      * @param SomeEvent $event\n      * @return void\n   */\n   \n   public function handle(SomeEvent $event) {\n      //\n   }\n}</code></pre>\n\n\n\n<p>As mentioned in the code, it includes&nbsp;<strong>handle</strong>&nbsp;function for managing various events. We can create various independent listeners that target a single event.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Events provide a simple observer implementation which allows a user to subscribe and listen to various events triggered in the web application. All the event classes in Laravel are stored in the&nbsp;app/Events&nbsp;folder and the listeners are stored in the&nbsp;app/Listeners&nbsp;folder. The artisan command for generating events and listeners in your web application is shown below − [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4202"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4202"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4202/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4202"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4202"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4202"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4203,
    "date": "2020-06-16T05:01:26",
    "date_gmt": "2020-06-16T05:01:26",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=369"
    },
    "modified": "2020-06-16T05:01:26",
    "modified_gmt": "2020-06-16T05:01:26",
    "slug": "facades",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/facades/",
    "title": {
      "rendered": "Facades"
    },
    "content": {
      "rendered": "\n<p>Facades provide a&nbsp;<strong>static</strong>&nbsp;interface to classes that are available in the application&#8217;s service container. Laravel&nbsp;<strong>facades</strong>&nbsp;serve as&nbsp;<strong>static proxies</strong>&nbsp;to underlying classes in the service container, providing the benefit of a terse, expressive syntax while maintaining more testability and flexibility than traditional static methods.</p>\n\n\n\n<h2>How to create Facade</h2>\n\n\n\n<p>The following are the steps to create Facade in Laravel −</p>\n\n\n\n<ul><li><strong>Step 1</strong>&nbsp;− Create PHP Class File.</li><li><strong>Step 2</strong>&nbsp;− Bind that class to Service Provider.</li><li><strong>Step 3</strong>&nbsp;− Register that ServiceProvider toConfig\\app.php as providers.</li><li><strong>Step 4</strong>&nbsp;− Create Class which is this class extends tolluminate\\Support\\Facades\\Facade.</li><li><strong>Step 5</strong>&nbsp;− Register point 4 to Config\\app.php as aliases.</li></ul>\n\n\n\n<h2>Facade Class Reference</h2>\n\n\n\n<p>Laravel ships with many Facades. The following table show the in-built Facade class references −</p>\n\n\n\n<pre class=\"wp-block-table\"><table><tbody><tr><th>Facade</th><th>Class</th><th>Service Container Binding</th></tr><tr><td>App</td><td>Illuminate\\Foundation\\Application</td><td>app</td></tr><tr><td>Artisan</td><td>Illuminate\\Contracts\\Console\\Kernel</td><td>artisan</td></tr><tr><td>Auth</td><td>Illuminate\\Auth\\AuthManager</td><td>auth</td></tr><tr><td>Auth (Instance)</td><td>Illuminate\\Auth\\Guard</td><td></td></tr><tr><td>Blade</td><td>Illuminate\\View\\Compilers\\BladeCompiler</td><td>blade.compiler</td></tr><tr><td>Bus</td><td>Illuminate\\Contracts\\Bus\\Dispatcher</td><td></td></tr><tr><td>Cache</td><td>Illuminate\\Cache\\Repository</td><td>cache</td></tr><tr><td>Config</td><td>Illuminate\\Config\\Repository</td><td>config</td></tr><tr><td>Cookie</td><td>Illuminate\\Cookie\\CookieJar</td><td>cookie</td></tr><tr><td>Crypt</td><td>Illuminate\\Encryption\\Encrypter</td><td>encrypter</td></tr><tr><td>DB</td><td>Illuminate\\Database\\DatabaseManager</td><td>db</td></tr><tr><td>DB (Instance)</td><td>Illuminate\\Database\\Connection</td><td></td></tr><tr><td>Event</td><td>Illuminate\\Events\\Dispatcher</td><td>events</td></tr><tr><td>File</td><td>Illuminate\\Filesystem\\Filesystem</td><td>files</td></tr><tr><td>Gate</td><td>Illuminate\\Contracts\\Auth\\Access\\Gate</td><td></td></tr><tr><td>Hash</td><td>Illuminate\\Contracts\\Hashing\\Hasher</td><td>hash</td></tr><tr><td>Input</td><td>Illuminate\\Http\\Request</td><td>request</td></tr><tr><td>Lang</td><td>Illuminate\\Translation\\Translator</td><td>translator</td></tr><tr><td>Log</td><td>Illuminate\\Log\\Writer</td><td>log</td></tr><tr><td>Mail</td><td>Illuminate\\Mail\\Mailer</td><td>mailer</td></tr><tr><td>Password</td><td>Illuminate\\Auth\\Passwords\\PasswordBroker</td><td>auth.password</td></tr><tr><td>Queue</td><td>Illuminate\\Queue\\QueueManager</td><td>queue</td></tr><tr><td>Queue (Instance)</td><td>Illuminate\\Queue\\QueueInterface</td><td></td></tr><tr><td>Queue (Base Class)</td><td>Illuminate\\Queue\\Queue</td><td></td></tr><tr><td>Redirect</td><td>Illuminate\\Routing\\Redirector</td><td>redirect</td></tr><tr><td>Redis</td><td>Illuminate\\Redis\\Database</td><td>redis</td></tr><tr><td>Request</td><td>Illuminate\\Http\\Request</td><td>request</td></tr><tr><td>Response</td><td>Illuminate\\Contracts\\Routing\\ResponseFactory</td><td></td></tr><tr><td>Route</td><td>Illuminate\\Routing\\Router</td><td>router</td></tr><tr><td>Schema</td><td>Illuminate\\Database\\Schema\\Blueprint</td><td></td></tr><tr><td>Session</td><td>Illuminate\\Session\\SessionManager</td><td>session</td></tr><tr><td>Session (Instance)</td><td>Illuminate\\Session\\Store</td><td></td></tr><tr><td>Storage</td><td>Illuminate\\Contracts\\Filesystem\\Factory</td><td>filesystem</td></tr><tr><td>URL</td><td>Illuminate\\Routing\\UrlGenerator</td><td>url</td></tr><tr><td>Validator</td><td>Illuminate\\Validation\\Factory</td><td>validator</td></tr><tr><td>Validator (Instance)</td><td>Illuminate\\Validation\\Validator</td><td></td></tr><tr><td>View</td><td>Illuminate\\View\\Factory</td><td>view</td></tr><tr><td>View (Instance)</td><td>Illuminate\\View\\View</td><td></td></tr></tbody></table></pre>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Create a service provider called&nbsp;<strong>TestFacadesServiceProvider</strong>&nbsp;by executing the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:provider TestFacadesServiceProvider</code></pre>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− After successful execution, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/facadesserviceprovider.jpg\" alt=\"FacadesServiceProvider\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Create a class called&nbsp;<strong>TestFacades.php</strong>&nbsp;at&nbsp;<strong>App/Test</strong>.</p>\n\n\n\n<p><strong>App/Test/TestFacades.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n   namespace App\\Test;\n   class TestFacades{\n      public function testingFacades() {\n         echo \"Testing the Facades in Laravel.\";\n      }\n   }\n?></code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Create a Facade class called&nbsp;<strong>“TestFacades.php”</strong>&nbsp;at&nbsp;<strong>“App/Test/Facades”</strong>.</p>\n\n\n\n<p><strong>App/Test/Facades/TestFacades.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace app\\Test\\Facades;\n\nuse Illuminate\\Support\\Facades\\Facade;\n\nclass TestFacades extends Facade {\n   protected static function getFacadeAccessor() { return 'test'; }\n}</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Create a Facade class called&nbsp;<strong>TestFacadesServiceProviders.php</strong>&nbsp;at&nbsp;<strong>App/Test/Facades.</strong></p>\n\n\n\n<p><strong>App/Providers/TestFacadesServiceProviders.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Providers;\n\nuse App;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass TestFacadesServiceProvider extends ServiceProvider {\n   public function boot() {\n      //\n   }\n   public function register() {\n      App::bind('test',function() {\n         return new \\App\\Test\\TestFacades;\n      });\n   }\n}</code></pre>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Add a service provider in a file&nbsp;<strong>config/app.php</strong>&nbsp;as shown in the below figure.</p>\n\n\n\n<p><strong>config/app.php</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/service_provider.jpg\" alt=\"Service Provider\"/></figure>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Add an alias in a file&nbsp;<strong>config/app.php</strong>&nbsp;as shown in the below figure.</p>\n\n\n\n<p><strong>config/app.php</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/alias.jpg\" alt=\"Alias\"/></figure>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Add the following lines in&nbsp;<strong>app/Http/routes.php.</strong></p>\n\n\n\n<p><strong>app/Http/routes.php</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Route::get('/facadeex', function() {\n   return TestFacades::testingFacades();\n});</code></pre>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Visit the following URL to test the Facade.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:8000/facadeex</code></pre>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− After visiting the URL, you will receive the following output −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/testing_facades.jpg\" alt=\"Testing Facades\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Facades provide a&nbsp;static&nbsp;interface to classes that are available in the application&#8217;s service container. Laravel&nbsp;facades&nbsp;serve as&nbsp;static proxies&nbsp;to underlying classes in the service container, providing the benefit of a terse, expressive syntax while maintaining more testability and flexibility than traditional static methods. How to create Facade The following are the steps to create Facade in Laravel − [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4203"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4203"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4203/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4203"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4203"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4203"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 371,
    "date": "2020-06-16T05:03:02",
    "date_gmt": "2020-06-16T05:03:02",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=371"
    },
    "modified": "2020-06-16T05:03:02",
    "modified_gmt": "2020-06-16T05:03:02",
    "slug": "contracts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/contracts/",
    "title": {
      "rendered": "Contracts"
    },
    "content": {
      "rendered": "\n<p>Laravel contracts are a set of interfaces with various functionalities and core services provided by the framework.</p>\n\n\n\n<p>For example,&nbsp;<strong>Illuminate\\Contracts\\Queue\\Queue</strong>&nbsp;contract uses a method which is needed for queuing jobs and&nbsp;<strong>Illuminate\\Contracts\\Mail\\Mailer</strong>&nbsp;uses the method for sending emails.</p>\n\n\n\n<p>Every contract defined includes corresponding implementation of the framework. All the Laravel contracts are available in the GitHub repository as mentioned below −</p>\n\n\n\n<p>This repository provides a variety of contracts available in the Laravel framework which can be downloaded and used accordingly.</p>\n\n\n\n<h2>Important Points</h2>\n\n\n\n<p>While working with Laravel contracts, please note the following important points −</p>\n\n\n\n<ul><li>It is mandatory to define facades in the constructor of a class.</li><li>Contracts are explicitly defined in the classes and you need not define the contracts in constructors.</li></ul>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Consider the contract used for Authorization in Laravel which is mentioned below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace Illuminate\\Contracts\\Auth\\Access;\n\ninterface Authorizable{\n   /**\n      * Determine if the entity has a given ability.\n      *\n      * @param string $ability\n      * @param array|mixed $arguments\n      * @return bool\n   */\n   public function can($ability, $arguments = &#91;]);\n}</code></pre>\n\n\n\n<p>The contract uses a function can which includes a&nbsp;<strong>parameter</strong>&nbsp;named&nbsp;<strong>ability</strong>&nbsp;and&nbsp;<strong>arguments</strong>&nbsp;which uses the user identification in the form of an&nbsp;<strong>array</strong>.</p>\n\n\n\n<p>You will have to define a contract as shown in the syntax below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface &lt;contract-name>\n﻿</code></pre>\n\n\n\n<p>Contracts are used like facades for creating robust, well-tested Laravel applications. There are various&nbsp;<strong>practical differences</strong>&nbsp;with usage of contracts and facades.</p>\n\n\n\n<p>The following code shows using a contract for caching a repository −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Orders;\nuse Illuminate\\Contracts\\Cache\\Repository as Cache;\n\nclass Repository{\n   /**\n      * The cache instance.\n   */\n   \n   protected $cache;\n   \n   /**\n      * Create a new repository instance.\n      *\n      * @param Cache $cache\n      * @return void\n   */\n   \n   public function __construct(Cache $cache) {\n      $this->cache = $cache;\n   }\n}</code></pre>\n\n\n\n<p>Contract contains no implementation and new dependencies; it is easy to write an alternative implementation of a specified contract, thus a user can replace cache implementation without modifying any code base.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel contracts are a set of interfaces with various functionalities and core services provided by the framework. For example,&nbsp;Illuminate\\Contracts\\Queue\\Queue&nbsp;contract uses a method which is needed for queuing jobs and&nbsp;Illuminate\\Contracts\\Mail\\Mailer&nbsp;uses the method for sending emails. Every contract defined includes corresponding implementation of the framework. All the Laravel contracts are available in the GitHub repository as mentioned [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/371"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=371"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/371/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=371"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=371"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=371"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4204,
    "date": "2020-06-16T05:04:52",
    "date_gmt": "2020-06-16T05:04:52",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=373"
    },
    "modified": "2020-06-16T05:04:52",
    "modified_gmt": "2020-06-16T05:04:52",
    "slug": "csrf-protection",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/csrf-protection/",
    "title": {
      "rendered": "CSRF Protection"
    },
    "content": {
      "rendered": "\n<p>CSRF refers to Cross Site Forgery attacks on web applications. CSRF attacks are the unauthorized activities which the authenticated users of the system perform. As such, many web applications are prone to these attacks.</p>\n\n\n\n<p>Laravel offers CSRF protection in the following way −</p>\n\n\n\n<p>Laravel includes an in built CSRF plug-in, that generates tokens for each active user session. These tokens verify that the operations or requests are sent by the concerned authenticated user.</p>\n\n\n\n<h2>Implementation</h2>\n\n\n\n<p>The implementation of CSRF protection in Laravel is discussed in detail in this section. The following points are notable before proceeding further on CSRF protection −</p>\n\n\n\n<ul><li>CSRF is implemented within HTML forms declared inside the web applications. You have to include a hidden validated CSRF token in the form, so that the CSRF protection middleware of Laravel can validate the request. The syntax is shown below −</li><li></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form method = \"POST\" action=\"/profile\">\n   {{ csrf_field() }}\n   ...\n&lt;/form></code></pre>\n\n\n\n<ul><li>You can conveniently build JavaScript driven applications using JavaScript HTTP library, as this includes CSRF token to every outgoing request.</li><li>The file namely&nbsp;<strong>resources/assets/js/bootstrap.js</strong>&nbsp;registers all the tokens for Laravel applications and includes&nbsp;<strong>meta</strong>&nbsp;tag which stores&nbsp;<strong>csrf-token</strong>&nbsp;with&nbsp;<strong>Axios HTTP library</strong>.</li></ul>\n\n\n\n<h3>Form without CSRF token</h3>\n\n\n\n<p>Consider the following lines of code. They show a form which takes two parameters as input:&nbsp;<strong>email</strong>&nbsp;and&nbsp;<strong>message</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form>\n   &lt;label> Email &lt;/label>\n      &lt;input type = \"text\" name = \"email\"/>\n      &lt;br/>\n   &lt;label> Message &lt;/label> &lt;input type=\"text\" name = \"message\"/>\n   &lt;input type = ”submit” name = ”submitButton” value = ”submit”>\n&lt;/form></code></pre>\n\n\n\n<p>The result of the above code is the form shown below which the end user can view −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/contact_form.jpg\" alt=\"Contact Form\"/></figure>\n\n\n\n<p>The form shown above will accept any input information from an authorized user. This may make the web application prone to various attacks.</p>\n\n\n\n<p>Please note that the submit button includes functionality in the controller section. The&nbsp;<strong>postContact</strong>&nbsp;function is used in controllers for that associated views. It is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>public function postContact(Request $request) {\n   return $request-> all();\n}</code></pre>\n\n\n\n<p>Observe that the form does not include any CSRF tokens so the sensitive information shared as input parameters are prone to various attacks.</p>\n\n\n\n<h3>Form with CSRF token</h3>\n\n\n\n<p>The following lines of code shows you the form re-designed using CSRF tokens −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form method = ”post” >\n   {{ csrf_field() }}\n   &lt;label> Email &lt;/label>\n   &lt;input type = \"text\" name = \"email\"/>\n   &lt;br/>\n   &lt;label> Message &lt;/label>\n   &lt;input type = \"text\" name = \"message\"/>\n   &lt;input type = ”submit” name = ”submitButton” value = ”submit”>\n&lt;/form></code></pre>\n\n\n\n<p>The output achieved will return JSON with a token as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"token\": \"ghfleifxDSUYEW9WE67877CXNVFJKL\",\n   \"name\": \"codemeals\",\n   \"email\": \"contact@codemeals.com\"\n}</code></pre>\n\n\n\n<p>This is the CSRF token created on clicking the submit button.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>CSRF refers to Cross Site Forgery attacks on web applications. CSRF attacks are the unauthorized activities which the authenticated users of the system perform. As such, many web applications are prone to these attacks. Laravel offers CSRF protection in the following way − Laravel includes an in built CSRF plug-in, that generates tokens for each [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4204"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4204"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4204/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4204"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4204"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4204"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4205,
    "date": "2020-06-16T05:07:04",
    "date_gmt": "2020-06-16T05:07:04",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=375"
    },
    "modified": "2020-06-16T05:07:04",
    "modified_gmt": "2020-06-16T05:07:04",
    "slug": "authentication-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/authentication-2/",
    "title": {
      "rendered": "Authentication"
    },
    "content": {
      "rendered": "\n<p>Authentication is the process of identifying the user credentials. In web applications, authentication is managed by sessions which take the input parameters such as email or username and password, for user identification. If these parameters match, the user is said to be authenticated.</p>\n\n\n\n<h2>Command</h2>\n\n\n\n<p>Laravel uses the following command to create forms and the associated controllers to perform authentication −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:auth</code></pre>\n\n\n\n<p>This command helps in creating authentication scaffolding successfully, as shown in the following screenshot −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/authentication.jpg\" alt=\"Authentication\"/></figure>\n\n\n\n<h2>Controller</h2>\n\n\n\n<p>The controller which is used for the authentication process is <strong>HomeController</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Http\\Requests;\nuse Illuminate\\Http\\Request;\n\nclass HomeController extends Controller{\n   /**\n      * Create a new controller instance.\n      *\n      * @return void\n   */\n   \n   public function __construct() {\n      $this->middleware('auth');\n   }\n   \n   /**\n      * Show the application dashboard.\n      *\n      * @return \\Illuminate\\Http\\Response\n   */\n   \n   public function index() {\n      return view('home');\n   }\n}</code></pre>\n\n\n\n<p>As a result, the scaffold application generated creates the login page and the registration page for performing authentication. They are as shown below −</p>\n\n\n\n<h3>Login</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/login_page.jpg\" alt=\"Login Page\"/></figure>\n\n\n\n<h3>Registration</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/register.jpg\" alt=\"Register\"/></figure>\n\n\n\n<h2>Manually Authenticating Users</h2>\n\n\n\n<p>Laravel uses the&nbsp;<strong>Auth</strong>&nbsp;façade which helps in manually authenticating the users. It includes the&nbsp;<strong>attempt</strong>&nbsp;method to verify their email and password.</p>\n\n\n\n<p>Consider the following lines of code for <strong>LoginController</strong> which includes all the functions for authentication −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\n// Authentication mechanism\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass LoginController extends Controller{\n   /**\n      * Handling authentication request\n      *\n      * @return Response\n   */\n   \n   public function authenticate() {\n      if (Auth::attempt(&#91;'email' => $email, 'password' => $password])) {\n      \n         // Authentication passed...\n         return redirect()->intended('dashboard');\n      }\n   }\n}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Authentication is the process of identifying the user credentials. In web applications, authentication is managed by sessions which take the input parameters such as email or username and password, for user identification. If these parameters match, the user is said to be authenticated. Command Laravel uses the following command to create forms and the associated [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4205"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4205"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4205/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4205"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4205"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4205"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4206,
    "date": "2020-06-16T05:08:09",
    "date_gmt": "2020-06-16T05:08:09",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=377"
    },
    "modified": "2020-06-16T05:08:09",
    "modified_gmt": "2020-06-16T05:08:09",
    "slug": "authorization",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/authorization/",
    "title": {
      "rendered": "Authorization"
    },
    "content": {
      "rendered": "\n<p>In the previous chapter, we have studied about authentication process in Laravel. This chapter explains you the authorization process in Laravel.</p>\n\n\n\n<h2>Difference between Authentication and Authorization</h2>\n\n\n\n<p>Before proceeding further into learning about the authorization process in Laravel, let us understand the difference between authentication and authorization.</p>\n\n\n\n<p>In&nbsp;<strong>authentication</strong>, the system or the web application identifies its users through the credentials they provide. If it finds that the credentials are valid, they are authenticated, or else they are not.</p>\n\n\n\n<p>In&nbsp;<strong>authorization</strong>, the system or the web application checks if the authenticated users can access the resources that they are trying to access or make a request for. In other words, it checks their rights and permissions over the requested resources. If it finds that they can access the resources, it means that they are authorized.</p>\n\n\n\n<p>Thus,&nbsp;<strong>authentication</strong>&nbsp;involves checking the validity of the user credentials, and&nbsp;<strong>authorization</strong>&nbsp;involves checking the rights and permissions over the resources that an authenticated user has.</p>\n\n\n\n<h2>Authorization Mechanism in Laravel</h2>\n\n\n\n<p>Laravel provides a simple mechanism for authorization that contains two primary ways, namely&nbsp;<strong>Gates</strong>&nbsp;and&nbsp;<strong>Policies</strong>.</p>\n\n\n\n<h3>Writing Gates and Policies</h3>\n\n\n\n<p>Gates are used to determine if a user is authorized to perform a specified action. They are typically defined in&nbsp;<strong>App/Providers/AuthServiceProvider.php</strong>&nbsp;using Gate facade. Gates are also functions which are declared for performing authorization mechanism.</p>\n\n\n\n<p>Policies are declared within an array and are used within classes and methods which use authorization mechanism.</p>\n\n\n\n<p>The following lines of code explain you how to use Gates and Policies for authorizing a user in a Laravel web application. Note that in this example, the <strong>boot</strong> function is used for authorizing the users.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Providers;\n\nuse Illuminate\\Contracts\\Auth\\Access\\Gate as GateContract;\nuse Illuminate\\Foundation\\Support\\Providers\\AuthServiceProvider as ServiceProvider;\n\nclass AuthServiceProvider extends ServiceProvider{\n   /**\n      * The policy mappings for the application.\n      *\n      * @var array\n   */\n   \n   protected $policies = &#91;\n      'App\\Model' => 'App\\Policies\\ModelPolicy',\n   ];\n   \n   /**\n      * Register any application authentication / authorization services.\n      *\n      * @param \\Illuminate\\Contracts\\Auth\\Access\\Gate $gate\n      * @return void\n   */\n   \n   public function boot(GateContract $gate) {\n      $this->registerPolicies($gate);\n      //\n   }\n}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In the previous chapter, we have studied about authentication process in Laravel. This chapter explains you the authorization process in Laravel. Difference between Authentication and Authorization Before proceeding further into learning about the authorization process in Laravel, let us understand the difference between authentication and authorization. In&nbsp;authentication, the system or the web application identifies its [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4206"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4206"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4206/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4206"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4206"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4206"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 379,
    "date": "2020-06-16T05:10:45",
    "date_gmt": "2020-06-16T05:10:45",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=379"
    },
    "modified": "2020-06-16T05:10:45",
    "modified_gmt": "2020-06-16T05:10:45",
    "slug": "artisan-console",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/artisan-console/",
    "title": {
      "rendered": "Artisan Console"
    },
    "content": {
      "rendered": "\n<p>Laravel framework provides three primary tools for interaction through command-line namely:&nbsp;<strong>Artisan, Ticker</strong>&nbsp;and&nbsp;<strong>REPL</strong>. This chapter explains about Artisan in detail.</p>\n\n\n\n<h2>Introduction to Artisan</h2>\n\n\n\n<p>Artisan is the command line interface frequently used in Laravel and it includes a set of helpful commands for developing a web application.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Here is a list of few commands in Artisan along with their respective functionalities −</p>\n\n\n\n<p><strong>To start Laravel project</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan serve</code></pre>\n\n\n\n<p><strong>To enable caching mechanism</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan route:cache</code></pre>\n\n\n\n<p><strong>To view the list of available commands supported by Artisan</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan list</code></pre>\n\n\n\n<p><strong>To view help about any command and view the available options and arguments</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan help serve</code></pre>\n\n\n\n<p>The following screenshot shows the output of the commands given above −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/artisan_help_serve.jpg\" alt=\"Artisan Help Serve\"/></figure>\n\n\n\n<h2>Writing Commands</h2>\n\n\n\n<p>In addition to the commands listed in Artisan, a user can also create a custom command which can be used in the web application. Please note that commands are stored in&nbsp;<strong>app/console/commands directory</strong>.</p>\n\n\n\n<p>The default command for creating user defined command is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan make:console &lt;name-of-command></code></pre>\n\n\n\n<p>Once you type the above given command, you can see the output as shown in the screenshot given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/default_command.jpg\" alt=\"defaultCommand\"/></figure>\n\n\n\n<p>The file created for <strong>DefaultCommand</strong> is named as <strong>DefaultCommand.php</strong> and is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Console\\Commands;\nuse Illuminate\\Console\\Command;\n\nclass DefaultCommand extends Command{\n   /**\n      * The name and signature of the console command.\n      *\n      * @var string\n   */\n   \n   protected $signature = 'command:name';\n   \n   /**\n      * The console command description.\n      *\n      * @var string\n   */\n   \n   protected $description = 'Command description';\n   \n   /**\n      * Create a new command instance.\n      *\n      * @return void\n   */\n   \n   public function __construct() {\n      parent::__construct();\n   }\n   \n   /**\n      * Execute the console command.\n      *\n      * @return mixed\n   */\n   \n   public function handle() {\n      //\n   }\n}</code></pre>\n\n\n\n<p>This file includes the signature and description for the command that user defined. The public function named&nbsp;<strong>handle</strong>&nbsp;executes the functionalities when the command is executed. These commands are registered in the file&nbsp;<strong>Kernel.php</strong>&nbsp;in the same directory.</p>\n\n\n\n<p>You can also create the schedule of tasks for the user defined command as shown in the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Console;\n\nuse Illuminate\\Console\\Scheduling\\Schedule;\nuse Illuminate\\Foundation\\Console\\Kernel as ConsoleKernel;\n\nclass Kernel extends ConsoleKernel {\n   /**\n      * The Artisan commands provided by your application.\n      *\n      * @var array\n   */\n   \n   protected $commands = &#91;\n      // Commands\\Inspire::class,\n      Commands\\DefaultCommand::class\n   ];\n   \n   /**\n      * Define the application's command schedule.\n      *\n      * @param \\Illuminate\\Console\\Scheduling\\Schedule $schedule\n      * @return void\n   */\n   \n   protected function schedule(Schedule $schedule) {\n      // $schedule->command('inspire')\n      // ->hourly();\n   }\n}</code></pre>\n\n\n\n<p>Note that the schedule of tasks for the given command is defined in the function named&nbsp;<strong>schedule</strong>, which includes a parameter for scheduling the tasks which takes&nbsp;<strong>hourly</strong>&nbsp;parameter.</p>\n\n\n\n<p>The commands are registered in the array of commands, which includes the path and name of the commands.</p>\n\n\n\n<p>Once the command is registered, it is listed in Artisan commands. The values included in the signature and description section will be displayed when you call for the help attribute of the specified command.</p>\n\n\n\n<p>Let us see how to view the attributes of our command <strong>DefaultCommand</strong>. You should use the command as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan help DefaultCommand</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel framework provides three primary tools for interaction through command-line namely:&nbsp;Artisan, Ticker&nbsp;and&nbsp;REPL. This chapter explains about Artisan in detail. Introduction to Artisan Artisan is the command line interface frequently used in Laravel and it includes a set of helpful commands for developing a web application. Example Here is a list of few commands in Artisan [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/379"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=379"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/379/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=379"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=379"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=379"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4207,
    "date": "2020-06-16T05:12:38",
    "date_gmt": "2020-06-16T05:12:38",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=381"
    },
    "modified": "2020-06-16T05:12:38",
    "modified_gmt": "2020-06-16T05:12:38",
    "slug": "encryption",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/encryption/",
    "title": {
      "rendered": "Encryption"
    },
    "content": {
      "rendered": "\n<p>Encryption is a process of converting a plain text to a message using some algorithms such that any third user cannot read the information. This is helpful for transmitting sensitive information because there are fewer chances for an intruder to target the information transferred.</p>\n\n\n\n<p>Encryption is performed using a process called&nbsp;<strong>Cryptography</strong>. The text which is to be encrypted is termed as&nbsp;<strong>Plain Text</strong>&nbsp;and the text or the message obtained after the encryption is called&nbsp;<strong>Cipher Text</strong>. The process of converting cipher text to plain text is called&nbsp;<strong>Decryption</strong>.</p>\n\n\n\n<p>Laravel uses&nbsp;<strong>AES-256</strong>&nbsp;and&nbsp;<strong>AES-128</strong>&nbsp;encrypter, which uses Open SSL for encryption. All the values included in Laravel are signed using the protocol&nbsp;<strong>Message Authentication Code</strong>&nbsp;so that the underlying value cannot be tampered with once it is encrypted.</p>\n\n\n\n<h2>Configuration</h2>\n\n\n\n<p>The command used to generate the <strong>key</strong> in Laravel is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan key:generate</code></pre>\n\n\n\n<p>Please note that this command uses the PHP secure random bytes’ generator and you can see the output as shown in the screenshot given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/artisan_key.jpg\" alt=\"Artisan Key\"/></figure>\n\n\n\n<p>The command given above helps in generating the key which can be used in web application. Observe the screenshot shown below −</p>\n\n\n\n<h3>Note</h3>\n\n\n\n<p>The values for encryption are properly aligned in the&nbsp;<strong>config/app.php</strong>&nbsp;file, which includes two parameters for encryption namely&nbsp;<strong>key</strong>&nbsp;and&nbsp;<strong>cipher</strong>. If the value using this key is not properly aligned, all the values encrypted in Laravel will be insecure.</p>\n\n\n\n<h2>Encryption Process</h2>\n\n\n\n<p>Encryption of a value can be done by using the&nbsp;<strong>encrypt helper</strong>&nbsp;in the controllers of Laravel class. These values are encrypted using OpenSSL and AES-256 cipher. All the encrypted values are signed with Message Authentication code (MAC) to check for any modifications of the encrypted string.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/defaultcommand.jpg\" alt=\"defaultCommand\"/></figure>\n\n\n\n<p>The code shown below is mentioned in a controller and is used to store a secret or a sensitive message.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse App\\Http\\Controllers\\Controller;\n\nclass DemoController extends Controller{\n   **\n      * Store a secret message for the user.\n      *\n      * @param Request $request\n      * @param int $id\n      * @return Response\n   */\n   \n   public function storeSecret(Request $request, $id) {\n      $user = User::findOrFail($id);\n      $user->fill(&#91;\n         'secret' => encrypt($request->secret)\n      ])->save();\n   }\n}</code></pre>\n\n\n\n<h2>Decryption Process</h2>\n\n\n\n<p>Decryption of the values is done with the <strong>decrypt helper</strong>. Observe the following lines of code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>use Illuminate\\Contracts\\Encryption\\DecryptException;\n\n// Exception for decryption thrown in facade\ntry {\n   $decrypted = decrypt($encryptedValue);\n} catch (DecryptException $e) {\n   //\n}</code></pre>\n\n\n\n<p>Please note that if the process of decryption is not successful because of invalid MAC being used, then an appropriate exception is thrown.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Encryption is a process of converting a plain text to a message using some algorithms such that any third user cannot read the information. This is helpful for transmitting sensitive information because there are fewer chances for an intruder to target the information transferred. Encryption is performed using a process called&nbsp;Cryptography. The text which is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4207"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4207"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4207/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4207"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4207"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4207"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4208,
    "date": "2020-06-16T05:14:16",
    "date_gmt": "2020-06-16T05:14:16",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=383"
    },
    "modified": "2020-06-16T05:14:16",
    "modified_gmt": "2020-06-16T05:14:16",
    "slug": "hashing",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/hashing/",
    "title": {
      "rendered": "Hashing"
    },
    "content": {
      "rendered": "\n<p>Hashing is the process of transforming a string of characters into a shorter fixed value or a key that represents the original string. Laravel uses the&nbsp;<strong>Hash</strong>&nbsp;facade which provides a secure way for storing passwords in a hashed manner.</p>\n\n\n\n<h2>Basic Usage</h2>\n\n\n\n<p>The following screenshot shows how to create a controller named&nbsp;<strong>passwordController</strong>&nbsp;which is used for storing and updating passwords −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/password.jpg\" alt=\"Password\"/></figure>\n\n\n\n<p>The following lines of code explain the functionality and usage of the <strong>passwordController</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Http\\Controllers\\Controller\n\nclass passwordController extends Controller{\n   /**\n      * Updating the password for the user.\n      *\n      * @param Request $request\n      * @return Response\n   */\n   \n   public function update(Request $request) {\n      // Validate the new password length...\n      $request->user()->fill(&#91;\n         'password' => Hash::make($request->newPassword) // Hashing passwords\n      ])->save();\n   }\n}</code></pre>\n\n\n\n<p>The hashed passwords are stored using&nbsp;<strong>make</strong>&nbsp;method. This method allows managing the work factor of the&nbsp;<strong>bcrypt</strong>&nbsp;hashing algorithm, which is popularly used in Laravel.</p>\n\n\n\n<h2>Verification of Password against Hash</h2>\n\n\n\n<p>You should verify the password against hash to check the string which was used for conversion. For this you can use the <strong>check</strong> method. This is shown in the code given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (Hash::check('plain-text', $hashedPassword)) {\n   // The passwords match...\n}</code></pre>\n\n\n\n<p>Note that the&nbsp;<strong>check</strong>&nbsp;method compares the plain-text with the&nbsp;<strong>hashedPassword</strong>&nbsp;variable and if the result is true, it returns a true value.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Hashing is the process of transforming a string of characters into a shorter fixed value or a key that represents the original string. Laravel uses the&nbsp;Hash&nbsp;facade which provides a secure way for storing passwords in a hashed manner. Basic Usage The following screenshot shows how to create a controller named&nbsp;passwordController&nbsp;which is used for storing and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4208"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4208"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4208/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4208"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4208"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4208"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4209,
    "date": "2020-06-16T05:14:47",
    "date_gmt": "2020-06-16T05:14:47",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=385"
    },
    "modified": "2020-06-16T05:14:47",
    "modified_gmt": "2020-06-16T05:14:47",
    "slug": "understanding-release-process",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/understanding-release-process/",
    "title": {
      "rendered": "Understanding Release Process"
    },
    "content": {
      "rendered": "\n<p>Every web application framework has its own version history and it is always being updated and maintained. Every latest version brings new functionality and functions which are either changed or deprecated, so it is important that you know which version will be suitable for your projects.</p>\n\n\n\n<p>When it comes to Laravel, there are two active versions as given below −</p>\n\n\n\n<ul><li>Laravel 4- released in May 2013</li><li>Laravel 5.1- released in February 2015</li></ul>\n\n\n\n<p>Laravel 5.1 also includes various releases with the latest version of Laravel 5.1.5 which includes all the robust features for web development. The roadmap of Laravel or the version release is shown in the image below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/laravel_release_process.jpg\" alt=\"Laravel Release Process\"/></figure>\n\n\n\n<p>The following points are worth notable in the context of understanding the release process of Laravel −</p>\n\n\n\n<ul><li>The old directory of&nbsp;<strong>app/models</strong>&nbsp;is removed in Laravel 5.1.</li><li>All the controllers, middleware and requests are grouped within a directory under the app/Http folder.</li><li>A new folder namely&nbsp;<strong>Providers</strong>&nbsp;directory is replaced with the&nbsp;<strong>app/start</strong>&nbsp;files in the previous versions of Laravel 4.x.</li><li>All the language files and views are moved to the&nbsp;<strong>resources</strong>&nbsp;directory.</li><li>New artisan command&nbsp;<strong>route:cache</strong>&nbsp;is used for registration of new routes and is included with the release of Laravel 5.1 and further versions.</li><li>Laravel supports&nbsp;<strong>HTTP middleware</strong>&nbsp;and also includes&nbsp;<strong>CSRF tokens</strong>&nbsp;and authentication model.</li><li>All the authentication models are located under one directory namely&nbsp;<strong>resources/views/auth</strong>. It includes user registration, authentication and password controllers.</li></ul>\n\n\n\n<h2>Laravel Releases</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Version</th><th>Release</th><th>Bug Fixes Until</th><th>Security Fixes Until</th></tr><tr><td>V1</td><td>June 2011</td><td>&#8211;</td><td>&#8211;</td></tr><tr><td>V2</td><td>September 2011</td><td>&#8211;</td><td>&#8211;</td></tr><tr><td>v3</td><td>February 2012</td><td>&#8211;</td><td>&#8211;</td></tr><tr><td>v4</td><td>May 2013</td><td>&#8211;</td><td>&#8211;</td></tr><tr><td>5.0</td><td>Feb 4th, 2015</td><td>Aug 4th, 2015</td><td>Feb 4th, 2016</td></tr><tr><td>5.1 (LTS)</td><td>Jun 9th, 2015</td><td>Jun 9th, 2017</td><td>Jun 9th, 2018</td></tr><tr><td>5.2</td><td>Dec 21st, 2015</td><td>Jun 21st, 2016</td><td>Dec 21st, 2016</td></tr><tr><td>5.3</td><td>Aug 23rd, 2016</td><td>Feb 23rd, 2017</td><td>Aug 23rd, 2017</td></tr><tr><td>5.4</td><td>Jan 24th, 2017</td><td>Jul 24th, 2017</td><td>Jan 24th, 2018</td></tr><tr><td>5.5 (LTS)</td><td>Aug 30th, 2017</td><td>Aug 30th, 2019</td><td>Aug 30th, 2020</td></tr><tr><td>5.6</td><td>Feb 7th, 2018</td><td>Aug 7th, 2018</td><td>Feb 7th, 2019</td></tr><tr><td>5.7</td><td>Sep 4, 2018</td><td>Feb 4th, 2019</td><td>Sep 4th, 2019</td></tr></tbody></table></figure>\n\n\n\n<p>Note that the highlighted version marks the latest release.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Every web application framework has its own version history and it is always being updated and maintained. Every latest version brings new functionality and functions which are either changed or deprecated, so it is important that you know which version will be suitable for your projects. When it comes to Laravel, there are two active [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4209"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4209"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4209/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4209"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4209"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4209"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4210,
    "date": "2020-06-16T05:19:18",
    "date_gmt": "2020-06-16T05:19:18",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=387"
    },
    "modified": "2020-06-16T05:19:18",
    "modified_gmt": "2020-06-16T05:19:18",
    "slug": "guest-user-gates",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/guest-user-gates/",
    "title": {
      "rendered": "Guest User Gates"
    },
    "content": {
      "rendered": "\n<p>The Guest User Gates feature is an add-on to the latest 5.7 version released in September 2018. This feature is used to initiate the authorization process for specific users.</p>\n\n\n\n<p>In Laravel 5.6, there was a procedure where it used to return <strong>false</strong> for unauthenticated users. In Laravel 5.7, we can allow guests to go authorization checks by using the specific <strong>nullable</strong> type hint within the specified controller as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\nGate::define('view-post', function (?User $user) {\n   // Guests\n});</code></pre>\n\n\n\n<h2>Explanation of the Code</h2>\n\n\n\n<p>By using a&nbsp;<strong>nullable</strong>&nbsp;type hint the $user variable will be null when a guest user is passed to the gate. You can then make decisions about authorizing the action. If you allow nullable types and return true, then the guest will have authorization. If you don’t use a nullable type hint, guests will automatically get the 403 response for Laravel 5.7, which is displayed below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/laravel/images/nullable_type_hint\" alt=\"Nullable Type Hint\"/></figure>\n\n\n\n<p>The difference between 403 and 404 error is that 404 is displayed when user tries to access the unknown resource or URL and 403 error as mentioned in the snapshot above is displayed if unauthorized user accesses the website.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Guest User Gates feature is an add-on to the latest 5.7 version released in September 2018. This feature is used to initiate the authorization process for specific users. In Laravel 5.6, there was a procedure where it used to return false for unauthenticated users. In Laravel 5.7, we can allow guests to go authorization checks by [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4210"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4210"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4210/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4210"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4210"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4210"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4211,
    "date": "2020-06-16T05:20:15",
    "date_gmt": "2020-06-16T05:20:15",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=389"
    },
    "modified": "2020-06-16T05:20:15",
    "modified_gmt": "2020-06-16T05:20:15",
    "slug": "artisan-commands",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/artisan-commands/",
    "title": {
      "rendered": "Artisan Commands"
    },
    "content": {
      "rendered": "\n<p>Laravel 5.7 comes with new way of treating and testing new commands. It includes a new feature of testing artisan commands and the demonstration is mentioned below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ArtisanCommandTest extends TestCase{\n   public function testBasicTest() {\n      $this->artisan('nova:create', &#91;\n         'name' => 'My New Admin panel'\n      ])\n      ->expectsQuestion('Please enter your API key', 'apiKeySecret')\n      ->expectsOutput('Authenticating...')\n      ->expectsQuestion('Please select a version', 'v1.0')\n      ->expectsOutput('Installing...')\n      ->expectsQuestion('Do you want to compile the assets?', 'yes')\n      ->expectsOutput('Compiling assets...')\n      ->assertExitCode(0);\n   }\n}</code></pre>\n\n\n\n<h2>Explanation of Code</h2>\n\n\n\n<p>Here a new class named “ArtisanCommandTest” is created under test cases module. It includes a basic function&nbsp;<strong>testBasicTest</strong>&nbsp;which includes various functionalities of assertions.</p>\n\n\n\n<p>The artisan command&nbsp;<strong>expectsQuestion</strong>&nbsp;includes two attributes. One with question and other with an&nbsp;<strong>apiKeySecret</strong>. Here, the artisan validates the apiKeySecret and verifies the input sent by user.</p>\n\n\n\n<p>The same scenario applies for the question “Please select a version” where a user is expected to mention a specific version.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel 5.7 comes with new way of treating and testing new commands. It includes a new feature of testing artisan commands and the demonstration is mentioned below − Explanation of Code Here a new class named “ArtisanCommandTest” is created under test cases module. It includes a basic function&nbsp;testBasicTest&nbsp;which includes various functionalities of assertions. The artisan [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4211"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4211"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4211/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4211"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4211"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4211"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4212,
    "date": "2020-06-16T05:21:47",
    "date_gmt": "2020-06-16T05:21:47",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=391"
    },
    "modified": "2020-06-16T05:21:47",
    "modified_gmt": "2020-06-16T05:21:47",
    "slug": "pagination-customizations",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/pagination-customizations/",
    "title": {
      "rendered": "Pagination Customizations"
    },
    "content": {
      "rendered": "\n<p>Laravel includes a feature of pagination which helps a user or a developer to include a pagination feature. Laravel paginator is integrated with the query builder and Eloquent ORM. The paginate method automatically takes care of setting the required limit and the defined offset. It accepts only one parameter to paginate i.e. the number of items to be displayed in one page.</p>\n\n\n\n<p>Laravel 5.7 includes a new pagination method to customize the number of pages on each side of the paginator. The new method no longer needs a custom pagination view.</p>\n\n\n\n<p>The custom pagination view code demonstration is mentioned below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code></code></pre>\n\n\n\n<p>The new pagination customization as per Laravel standards is mentioned below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\nUser::paginate(10)->onEachSide(5);</code></pre>\n\n\n\n<p>Note that&nbsp;<strong>onEachSide</strong>&nbsp;refers to the subdivision of each pagination records with 10 and subdivision of 5.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel includes a feature of pagination which helps a user or a developer to include a pagination feature. Laravel paginator is integrated with the query builder and Eloquent ORM. The paginate method automatically takes care of setting the required limit and the defined offset. It accepts only one parameter to paginate i.e. the number of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4212"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4212"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4212/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4212"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4212"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4212"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4213,
    "date": "2020-06-16T05:22:30",
    "date_gmt": "2020-06-16T05:22:30",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=393"
    },
    "modified": "2020-06-16T05:22:30",
    "modified_gmt": "2020-06-16T05:22:30",
    "slug": "dump-server",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/dump-server/",
    "title": {
      "rendered": "Dump Server"
    },
    "content": {
      "rendered": "\n<p>Laravel dump server comes with the version of Laravel 5.7. The previous versions do not include any dump server. Dump server will be a development dependency in laravel/laravel composer file.</p>\n\n\n\n<p>With release of version 5.7, you’ll get this command which includes a concept out-of-thebox which allows user to dump data to the console or an HTML file instead of to the browser. The command execution is mentioned below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>php artisan dump-server\n# Or send the output to an HTML file\nphp artisan dump-server --format=html > dump.html</code></pre>\n\n\n\n<h2>Explanation</h2>\n\n\n\n<p>The command runs a server in the background which helps in collection of data sent from the application, that sends the output through the console. When the command is not running in the foreground, the dump() function is expected to work by default.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel dump server comes with the version of Laravel 5.7. The previous versions do not include any dump server. Dump server will be a development dependency in laravel/laravel composer file. With release of version 5.7, you’ll get this command which includes a concept out-of-thebox which allows user to dump data to the console or an [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4213"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4213"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4213/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4213"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4213"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4213"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 4214,
    "date": "2020-06-16T05:23:25",
    "date_gmt": "2020-06-16T05:23:25",
    "guid": {
      "rendered": "http://php.foobrdigital.com/?p=395"
    },
    "modified": "2020-06-16T05:23:25",
    "modified_gmt": "2020-06-16T05:23:25",
    "slug": "action-url",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/action-url/",
    "title": {
      "rendered": "Action URL"
    },
    "content": {
      "rendered": "\n<p>Laravel 5.7 introduces a new feature called “callable action URL”. This feature is similar to the one in Laravel 5.6 which accepts string in action method. The main purpose of the new syntax introduced Laravel 5.7 is to directly enable you access the controller.</p>\n\n\n\n<p>The syntax used in Laravel 5.6 version is as shown −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n$url = action('UserController@profile', &#91;'id' => 1]);</code></pre>\n\n\n\n<p>The similar action called in Laravel 5.7 is mentioned below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n$url = action(&#91;PostsController::class, 'index']);</code></pre>\n\n\n\n<p>One advantage with the new callable array syntax format is the feature of ability to navigate to the controller directly if a developer uses a text editor or IDE that supports code navigation.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Laravel 5.7 introduces a new feature called “callable action URL”. This feature is similar to the one in Laravel 5.6 which accepts string in action method. The main purpose of the new syntax introduced Laravel 5.7 is to directly enable you access the controller. The syntax used in Laravel 5.6 version is as shown − [&hellip;]</p>\n",
      "protected": false
    },
    "author": 1,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      64
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4214"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4214"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4214/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4214"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4214"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4214"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]