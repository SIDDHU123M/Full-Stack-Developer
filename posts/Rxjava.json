[
    {
        "id": 1122,
        "date": "2020-07-23T17:40:17",
        "date_gmt": "2020-07-23T17:40:17",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1122"
        },
        "modified": "2020-07-24T11:01:58",
        "modified_gmt": "2020-07-24T11:01:58",
        "slug": "overview-9",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-9\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>RxJava is a Java based extension of ReactiveX. It provides implementation or ReactiveX project in Java. Following are the key characteristics of RxJava.<\/p>\n\n\n\n<ul><li>Extends the observer pattern.<\/li><li>Support sequences of data\/events.<\/li><li>Provides operators to compose sequences together declaratively.<\/li><li>Handles threading, synchronization, thread-safety and concurrent data structures internally.<\/li><\/ul>\n\n\n\n<h2>What is ReactiveX?<\/h2>\n\n\n\n<p>ReactiveX is a project which aims to provide reactive programming concept to various programming languages. Reactive Programming refers to the scenario where program reacts as and when data appears. It is a event based programming concept and events can propagate to registers observers.<\/p>\n\n\n\n<p>As per the&nbsp;<strong>Reactive<\/strong>, they have combined the best of Observer pattern, Iterator pattern and functional pattern.<\/p>\n\n\n\n<p>The Observer pattern done right. ReactiveX is a combination of the best ideas from the Observer pattern, the Iterator pattern, and functional programming.<\/p>\n\n\n\n<h2>Functional Programming<\/h2>\n\n\n\n<p>Functional programming revolves around building the software using pure functions. A pure function do not depends upon previous state and always returns the same result for the same parameters passed. Pure functions helps avoiding problems associated with shared objects, mutable data and side effects often prevalent in multi-threading environments.<\/p>\n\n\n\n<h2>Reactive Programming<\/h2>\n\n\n\n<p>Reactive programming refers to event driven programming where data streams comes in asynchronous fashion and get processed when they are arrived.<\/p>\n\n\n\n<h2>Functional Reactive Programming<\/h2>\n\n\n\n<p>RxJava implements both the concepts together, where data of streams changes over time and consumer function reacts accordingly.<\/p>\n\n\n\n<h2>The Reactive Manifesto<\/h2>\n\n\n\n<p><a target=\"_blank\" rel=\"noreferrer noopener\" href=\"https:\/\/www.reactivemanifesto.org\/\">Reactive Manifesto<\/a>&nbsp;is an on-line document stating the high standard of application software systems. As per the manifesto, following are the key attributes of a reactive software \u2212<\/p>\n\n\n\n<ul><li><strong>Responsive<\/strong>&nbsp;\u2212 Should always respond in a timely fashion.<\/li><li><strong>Message Driven<\/strong>&nbsp;\u2212 Should use asynchronous message-passing between components so that they maintain loose coupling.<\/li><li><strong>Elastic<\/strong>&nbsp;\u2212 Should stay responsive even under high load.<\/li><li><strong>Resilient<\/strong>&nbsp;\u2212 Should stay responsive even if any component(s) fail.<\/li><\/ul>\n\n\n\n<h2>Key components of RxJava<\/h2>\n\n\n\n<p>RxJava have two key components: Observables and Observer.<\/p>\n\n\n\n<ul><li><strong>Observable<\/strong>&nbsp;\u2212 It represents an object similar to Stream which can emit zero or more data, can send error message, whose speed can be controlled while emitting a set of data, can send finite as well as infinite data.<\/li><li><strong>Observer<\/strong>&nbsp;\u2212 It subscribes to Observable&#8217;s data of sequence and reacts per item of the observables. Observers are notified whenever Observable emits a data. An Observer handles data one by one.<\/li><\/ul>\n\n\n\n<p>An observer is never notified if items are not present or a callback is not returned for a previous item.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>RxJava is a Java based extension of ReactiveX. It provides implementation or ReactiveX project in Java. Following are the key characteristics of RxJava. Extends the observer pattern. Support sequences of data\/events. Provides operators to compose sequences together declaratively. Handles threading, synchronization, thread-safety and concurrent data structures internally. What is ReactiveX? ReactiveX is a project which [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1122"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1122"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1122\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1123,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1122\/revisions\/1123"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1122"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1122"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1122"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1121,
        "date": "2020-07-23T17:41:13",
        "date_gmt": "2020-07-23T17:41:13",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1121"
        },
        "modified": "2020-07-24T11:25:46",
        "modified_gmt": "2020-07-24T11:25:46",
        "slug": "environment-setup-6",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-6\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<h2>Local Environment Setup<\/h2>\n\n\n\n<p>RxJava is a library for Java, so the very first requirement is to have JDK installed in your machine.<\/p>\n\n\n\n<h3>System Requirement<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>JDK<\/th><td>1.5 or above.<\/td><\/tr><tr><th>Memory<\/th><td>No minimum requirement.<\/td><\/tr><tr><th>Disk Space<\/th><td>No minimum requirement.<\/td><\/tr><tr><th>Operating System<\/th><td>No minimum requirement.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 1 &#8211; Verify Java Installation in Your Machine<\/h2>\n\n\n\n<p>First of all, open the console and execute a java command based on the operating system you are working on.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Task<\/th><th>Command<\/th><\/tr><tr><td>Windows<\/td><td>Open Command Console<\/td><td>c:\\&gt; java -version<\/td><\/tr><tr><td>Linux<\/td><td>Open Command Terminal<\/td><td>$ java -version<\/td><\/tr><tr><td>Mac<\/td><td>Open Terminal<\/td><td>machine:&lt; joseph$ java -version<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Let&#8217;s verify the output for all the operating systems \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>java version &#8220;1.8.0_101&#8243;Java(TM) SE Runtime Environment (build 1.8.0_101)<\/td><\/tr><tr><td>Linux<\/td><td>java version &#8220;1.8.0_101&#8243;Java(TM) SE Runtime Environment (build 1.8.0_101)<\/td><\/tr><tr><td>Mac<\/td><td>java version &#8220;1.8.0_101&#8243;Java(TM) SE Runtime Environment (build 1.8.0_101)<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>If you do not have Java installed on your system, then download the Java Software Development Kit (SDK) from the following link&nbsp;https:\/\/www.oracle.com. We are assuming Java 1.8.0_101 as the installed version for this tutorial.<\/p>\n\n\n\n<h2>Step 2 &#8211; Set JAVA Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>JAVA_HOME<\/strong>&nbsp;environment variable to point to the base directory location where Java is installed on your machine. For example.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable JAVA_HOME to C:\\Program Files\\Java\\jdk1.8.0_101<\/td><\/tr><tr><td>Linux<\/td><td>export JAVA_HOME = \/usr\/local\/java-current<\/td><\/tr><tr><td>Mac<\/td><td>export JAVA_HOME = \/Library\/Java\/Home<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Append Java compiler location to the System Path.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Append the string&nbsp;<strong>C:\\Program Files\\Java\\jdk1.8.0_101\\bin<\/strong>&nbsp;at the end of the system variable,&nbsp;<strong>Path<\/strong>.<\/td><\/tr><tr><td>Linux<\/td><td>export PATH = $PATH:$JAVA_HOME\/bin\/<\/td><\/tr><tr><td>Mac<\/td><td>not required<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Verify Java installation using the command&nbsp;<strong>java -version<\/strong>&nbsp;as explained above.<\/p>\n\n\n\n<h2>Step 3 &#8211; Download RxJava2 Archive<\/h2>\n\n\n\n<p>Download the latest version of RxJava jar file from&nbsp;RxJava @ MVNRepository&nbsp;and its dependency&nbsp;Reactive Streams @ MVNRepository&nbsp;. At the time of writing this tutorial, we have downloaded rxjava-2.2.4.jar, reactive-streams-1.0.2.jar and copied it into C:\\&gt;RxJava folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>rxjava-2.2.4.jar, reactive-streams-1.0.2.jar<\/td><\/tr><tr><td>Linux<\/td><td>rxjava-2.2.4.jar, reactive-streams-1.0.2.jar<\/td><\/tr><tr><td>Mac<\/td><td>rxjava-2.2.4.jar, reactive-streams-1.0.2.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 4 &#8211; Set RxJava Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>RX_JAVA<\/strong>&nbsp;environment variable to point to the base directory location where RxJava jar is stored on your machine. Let\u2019s assuming we&#8217;ve stored rxjava-2.2.4.jar and reactive-streams-1.0.2.jar in the RxJava folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>OS &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Set the environment variable RX_JAVA to C:\\RxJava<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>export RX_JAVA = \/usr\/local\/RxJava<\/td><\/tr><tr><td>3<\/td><td><strong>Mac<\/strong>export RX_JAVA = \/Library\/RxJava<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 5 &#8211; Set CLASSPATH Variable<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>CLASSPATH<\/strong>&nbsp;environment variable to point to the RxJava jar location.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No<\/th><th>OS &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Windows<\/strong>Set the environment variable CLASSPATH to %CLASSPATH%;%RX_JAVA%\\rxjava-2.2.4.jar;%RX_JAVA%\\reactive-streams-1.0.2.jar;.;<\/td><\/tr><tr><td>2<\/td><td><strong>Linux<\/strong>export CLASSPATH = $CLASSPATH:$RX_JAVA\/rxjava-2.2.4.jar:reactive-streams-1.0.2.jar:.<\/td><\/tr><tr><td>3<\/td><td><strong>Mac<\/strong>export CLASSPATH = $CLASSPATH:$RX_JAVA\/rxjava-2.2.4.jar:reactive-streams-1.0.2.jar:.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Step 6 &#8211; Test RxJava Setup<\/h2>\n\n\n\n<p>Create a class TestRx.java as shown below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Flowable;\npublic class TestRx {\n   public static void main(String&#91;] args) {\n      Flowable.just(\"Hello World!\").subscribe(System.out::println);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Step 7 &#8211; Verify the Result<\/h2>\n\n\n\n<p>Compile the classes using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac Tester.java\n<\/code><\/pre>\n\n\n\n<p>Verify the output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World!<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Local Environment Setup RxJava is a library for Java, so the very first requirement is to have JDK installed in your machine. System Requirement JDK 1.5 or above. Memory No minimum requirement. Disk Space No minimum requirement. Operating System No minimum requirement. Step 1 &#8211; Verify Java Installation in Your Machine First of all, open [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1121"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1121"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1121\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1162,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1121\/revisions\/1162"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1121"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1121"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1121"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1120,
        "date": "2020-07-23T17:41:33",
        "date_gmt": "2020-07-23T17:41:33",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1120"
        },
        "modified": "2020-07-24T11:22:42",
        "modified_gmt": "2020-07-24T11:22:42",
        "slug": "observable-works",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/observable-works\/",
        "title": {
            "rendered": "Observable works"
        },
        "content": {
            "rendered": "\n<p><strong>Observables<\/strong>&nbsp;represents the sources of data where as&nbsp;<strong>Observers (Subscribers)<\/strong>&nbsp;listen to them. In nutshell, an Observable emits items and a Subscriber then consumes these items.<\/p>\n\n\n\n<h2>Observable<\/h2>\n\n\n\n<ul><li>Observable provides data once subscriber starts listening.<\/li><li>Observable can emit any number of items.<\/li><li>Observable can emit only signal of completion as well with no item.<\/li><li>Observable can terminate successfully.<\/li><li>Observable may never terminate. e.g. a button can be clicked any number of times.<\/li><li>Observable may throw error at any point of time.<\/li><\/ul>\n\n\n\n<h2>Subscriber<\/h2>\n\n\n\n<ul><li>Observable can have multiple subscribers.<\/li><li>When an Observable emits an item, each subscriber onNext() method gets invoked.<\/li><li>When an Observable finished emitting items, each subscriber onComplete() method gets invoked.<\/li><li>If an Observable emits error, each subscriber onError() method gets invoked.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Observables&nbsp;represents the sources of data where as&nbsp;Observers (Subscribers)&nbsp;listen to them. In nutshell, an Observable emits items and a Subscriber then consumes these items. Observable Observable provides data once subscriber starts listening. Observable can emit any number of items. Observable can emit only signal of completion as well with no item. Observable can terminate successfully. Observable [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1120"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1120"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1120\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1125,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1120\/revisions\/1125"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1120"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1120"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1120"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1119,
        "date": "2020-07-23T17:41:46",
        "date_gmt": "2020-07-23T17:41:46",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1119"
        },
        "modified": "2020-07-24T11:01:26",
        "modified_gmt": "2020-07-24T11:01:26",
        "slug": "creating-observables",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/creating-observables\/",
        "title": {
            "rendered": "Creating Observables"
        },
        "content": {
            "rendered": "\n<p>Following are the base classes to create observables.<\/p>\n\n\n\n<ul><li><strong>Flowable<\/strong>&nbsp;\u2212 0..N flows, Emits 0 or n items. Supports Reactive-Streams and back-pressure.<\/li><li><strong>Observable<\/strong>&nbsp;\u2212 0..N flows ,but no back-pressure.<\/li><li><strong>Single<\/strong>&nbsp;\u2212 1 item or error. Can be treated as a reactive version of method call.<\/li><li><strong>Completable<\/strong>&nbsp;\u2212 No item emitted. Used as a signal for completion or error. Can be treated as a reactive version of Runnable.<\/li><li><strong>MayBe<\/strong>&nbsp;\u2212 Either No item or 1 item emitted. Can be treated as a reactive version of Optional.<\/li><\/ul>\n\n\n\n<p>Following are the convenient methods to create observables in Observable class.<\/p>\n\n\n\n<ul><li><strong>just(T item)<\/strong>&nbsp;\u2212 Returns an Observable that signals the given (constant reference) item and then completes.<\/li><li><strong>fromIterable(Iterable source)<\/strong>&nbsp;\u2212 Converts an Iterable sequence into an ObservableSource that emits the items in the sequence.<\/li><li><strong>fromArray(T&#8230; items)<\/strong>&nbsp;\u2212 Converts an Array into an ObservableSource that emits the items in the Array.<\/li><li><strong>fromCallable(Callable supplier)<\/strong>&nbsp;\u2212 Returns an Observable that, when an observer subscribes to it, invokes a function you specify and then emits the value returned from that function.<\/li><li><strong>fromFuture(Future future)<\/strong>&nbsp;\u2212 Converts a Future into an ObservableSource.<\/li><li><strong>interval(long initialDelay, long period, TimeUnit unit)<\/strong>&nbsp;\u2212 Returns an Observable that emits a 0L after the initialDelay and ever increasing numbers after each period of time thereafter.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the base classes to create observables. Flowable&nbsp;\u2212 0..N flows, Emits 0 or n items. Supports Reactive-Streams and back-pressure. Observable&nbsp;\u2212 0..N flows ,but no back-pressure. Single&nbsp;\u2212 1 item or error. Can be treated as a reactive version of method call. Completable&nbsp;\u2212 No item emitted. Used as a signal for completion or error. Can be [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1119"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1119"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1119\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1126,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1119\/revisions\/1126"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1119"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1119"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1119"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1118,
        "date": "2020-07-23T17:42:58",
        "date_gmt": "2020-07-23T17:42:58",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1118"
        },
        "modified": "2020-07-24T11:01:11",
        "modified_gmt": "2020-07-24T11:01:11",
        "slug": "single-observable",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/single-observable\/",
        "title": {
            "rendered": "Single Observable"
        },
        "content": {
            "rendered": "\n<p>The Single class represents the single value response. Single observable can only emit either a single successful value or an error. It does not emit onComplete event.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>io.reactivex.Single&lt;T&gt;<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class Single&lt;T>\n   extends Object\n      implements SingleSource&lt;T><\/code><\/pre>\n\n\n\n<h2>Protocol<\/h2>\n\n\n\n<p>Following is the sequential protocol that Single Observable operates \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>onSubscribe (onSuccess | onError)?\n<\/code><\/pre>\n\n\n\n<h2>Single Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.concurrent.TimeUnit;\n\nimport io.reactivex.Single;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.observers.DisposableSingleObserver;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class ObservableTester  {\n   public static void main(String&#91;] args)  throws InterruptedException {\n      \/\/Create the observable\n      Single&lt;String> testSingle = Single.just(\"Hello World\");\n\n      \/\/Create an observer\n      Disposable disposable = testSingle\n         .delay(2, TimeUnit.SECONDS, Schedulers.io())\n         .subscribeWith(\n         new DisposableSingleObserver&lt;String>() {\n\n         @Override\n         public void onError(Throwable e) { \n            e.printStackTrace();\n         }\n\n         @Override\n         public void onSuccess(String value) {\n            System.out.println(value);\n         }\n      }); \n      Thread.sleep(3000);\n      \/\/start observing\n      disposable.dispose();\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The Single class represents the single value response. Single observable can only emit either a single successful value or an error. It does not emit onComplete event. Class Declaration Following is the declaration for&nbsp;io.reactivex.Single&lt;T&gt;&nbsp;class \u2212 Protocol Following is the sequential protocol that Single Observable operates \u2212 Single Example Create the following Java program using any [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1118"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1118"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1118\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1161,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1118\/revisions\/1161"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1118"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1118"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1118"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1117,
        "date": "2020-07-23T17:44:05",
        "date_gmt": "2020-07-23T17:44:05",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1117"
        },
        "modified": "2020-07-24T11:22:55",
        "modified_gmt": "2020-07-24T11:22:55",
        "slug": "maybe-observable",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/maybe-observable\/",
        "title": {
            "rendered": "MayBe Observable"
        },
        "content": {
            "rendered": "\n<p>The MayBe class represents deferred response. MayBe observable can emit either a single successful value or no value.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>io.reactivex.Single&lt;T&gt;<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class Maybe&lt;T>\n   extends Object\n      implements MaybeSource&lt;T><\/code><\/pre>\n\n\n\n<h2>Protocol<\/h2>\n\n\n\n<p>Following is the sequential protocol that MayBe Observable operates \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>onSubscribe (onSuccess | onError | OnComplete)?\n<\/code><\/pre>\n\n\n\n<h2>MayBe Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.concurrent.TimeUnit;\n\nimport io.reactivex.Maybe;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.observers.DisposableMaybeObserver;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class ObservableTester {\n   public static void main(String&#91;] args) throws InterruptedException {\n      \/\/Create an observer\n      Disposable disposable = Maybe.just(\"Hello World\")\n         .delay(2, TimeUnit.SECONDS, Schedulers.io())\n         .subscribeWith(new DisposableMaybeObserver&lt;String>() {\n         @Override\n         public void onError(Throwable e) { \n            e.printStackTrace();\n         }\n\n         @Override\n         public void onSuccess(String value) {\n            System.out.println(value);\n         }\n\n         @Override\n         public void onComplete() {\n            System.out.println(\"Done!\");\n         }\n      }); \n      Thread.sleep(3000);\n      \/\/start observing\n      disposable.dispose();\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The MayBe class represents deferred response. MayBe observable can emit either a single successful value or no value. Class Declaration Following is the declaration for&nbsp;io.reactivex.Single&lt;T&gt;&nbsp;class \u2212 Protocol Following is the sequential protocol that MayBe Observable operates \u2212 MayBe Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1117"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1117"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1117\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1160,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1117\/revisions\/1160"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1117"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1117"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1117"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1116,
        "date": "2020-07-23T17:45:51",
        "date_gmt": "2020-07-23T17:45:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1116"
        },
        "modified": "2020-07-24T11:23:02",
        "modified_gmt": "2020-07-24T11:23:02",
        "slug": "completable-observable",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/completable-observable\/",
        "title": {
            "rendered": "Completable Observable"
        },
        "content": {
            "rendered": "\n<p>The Completable class represents deferred response. Completable observable can either indicate a successful completion or error.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>io.reactivex.Completable<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public abstract class Completable\nextends Object\nimplements CompletableSource<\/code><\/pre>\n\n\n\n<h2>Protocol<\/h2>\n\n\n\n<p>Following is the sequential protocol that Completable Observable operates \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>onSubscribe (onError | onComplete)?\n<\/code><\/pre>\n\n\n\n<h2>Completable Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.concurrent.TimeUnit;\n\nimport io.reactivex.Completable;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.observers.DisposableCompletableObserver;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class ObservableTester {\n   public static void main(String&#91;] args) throws InterruptedException {\n\n      \/\/Create an observer\n      Disposable disposable = Completable.complete()\n         .delay(2, TimeUnit.SECONDS, Schedulers.io())\n         .subscribeWith(new DisposableCompletableObserver() {\n         @Override\n         public void onError(Throwable e) { \n            e.printStackTrace();\n         }\n         @Override\n         public void onStart() {\n            System.out.println(\"Started!\");\n         }\n         @Override\n         public void onComplete() {\n            System.out.println(\"Done!\");\n         }\n      }); \n      Thread.sleep(3000);\n      \/\/start observing\n      disposable.dispose();\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Started!\nDone!<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The Completable class represents deferred response. Completable observable can either indicate a successful completion or error. Class Declaration Following is the declaration for&nbsp;io.reactivex.Completable&nbsp;class \u2212 Protocol Following is the sequential protocol that Completable Observable operates \u2212 Completable Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1116"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1116"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1116\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1159,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1116\/revisions\/1159"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1116"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1116"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1116"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1115,
        "date": "2020-07-23T17:46:56",
        "date_gmt": "2020-07-23T17:46:56",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1115"
        },
        "modified": "2020-07-24T11:00:30",
        "modified_gmt": "2020-07-24T11:00:30",
        "slug": "compositedisposable",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/compositedisposable\/",
        "title": {
            "rendered": "CompositeDisposable"
        },
        "content": {
            "rendered": "\n<p>The CompositeDisposable class represents a container which can hold multiple disposable and offers O(1) complexity of adding and removing disposables.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for&nbsp;<strong>io.reactivex.disposables.CompositeDisposable<\/strong>&nbsp;class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public final class CompositeDisposable\nextends Object\nimplements Disposable, io.reactivex.internal.disposables.DisposableContainer<\/code><\/pre>\n\n\n\n<h2>CompositeDisposable Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Maybe;\nimport io.reactivex.Single;\nimport io.reactivex.disposables.CompositeDisposable;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.observers.DisposableMaybeObserver;\nimport io.reactivex.observers.DisposableSingleObserver;\nimport io.reactivex.schedulers.Schedulers;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class ObservableTester  {\n   public static void main(String&#91;] args)  throws InterruptedException {    \n      CompositeDisposable compositeDisposable = new CompositeDisposable();\n\n      \/\/Create an Single observer \n      Disposable disposableSingle = Single.just(\"Hello World\")\n      .delay(2, TimeUnit.SECONDS, Schedulers.io())\n      .subscribeWith(\n      new DisposableSingleObserver&lt;String>() {\n         @Override\n         public void onError(Throwable e) {\n            e.printStackTrace();\n         }\n\n         @Override\n         public void onSuccess(String value) {\n            System.out.println(value);\n         }\n      }); \n\n      \/\/Create an observer\n      Disposable disposableMayBe = Maybe.just(\"Hi\")\n      .delay(2, TimeUnit.SECONDS, Schedulers.io())\n      .subscribeWith(new DisposableMaybeObserver&lt;String>() {\n         @Override\n         public void onError(Throwable e) { \n            e.printStackTrace();\n         }\n\n         @Override\n         public void onSuccess(String value) {\n            System.out.println(value);\n         }\n\n         @Override\n         public void onComplete() {\n            System.out.println(\"Done!\");\n         }\n      }); \n\n      Thread.sleep(3000);\n\n      compositeDisposable.add(disposableSingle);\n      compositeDisposable.add(disposableMayBe);\n\n      \/\/start observing\n      compositeDisposable.dispose();\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello World\nHi<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The CompositeDisposable class represents a container which can hold multiple disposable and offers O(1) complexity of adding and removing disposables. Class Declaration Following is the declaration for&nbsp;io.reactivex.disposables.CompositeDisposable&nbsp;class \u2212 CompositeDisposable Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using&nbsp;javac&nbsp;compiler as follows [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1115"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1115"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1115\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1158,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1115\/revisions\/1158"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1115"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1115"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1115"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1139,
        "date": "2020-07-23T17:49:51",
        "date_gmt": "2020-07-23T17:49:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1139"
        },
        "modified": "2020-07-24T11:00:04",
        "modified_gmt": "2020-07-24T11:00:04",
        "slug": "creating-operators",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/creating-operators\/",
        "title": {
            "rendered": "Creating Operators"
        },
        "content": {
            "rendered": "\n<p>Following are the operators which are used to create an Observable.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Operator &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Create<\/strong>Creates an Observable from scratch and allows observer method to call programmatically.<\/td><\/tr><tr><td>2<\/td><td><strong>Defer<\/strong>Do not create an Observable until an observer subscribes. Creates a fresh observable for each observer.<\/td><\/tr><tr><td>3<\/td><td><strong>Empty\/Never\/Throw<\/strong>Creates an Observable with limited behavior.<\/td><\/tr><tr><td>4<\/td><td><strong>From<\/strong>Converts an object\/data structure into an Observable.<\/td><\/tr><tr><td>5<\/td><td><strong>Interval<\/strong>Creates an Observable emitting integers in sequence with a gap of specified time interval.<\/td><\/tr><tr><td>6<\/td><td><strong>Just<\/strong>Converts an object\/data structure into an Observable to emit the same or same type of objects.<\/td><\/tr><tr><td>7<\/td><td><strong>Range<\/strong>Creates an Observable emitting integers in sequence of given range.<\/td><\/tr><tr><td>8<\/td><td><strong>Repeat<\/strong>Creates an Observable emitting integers in sequence repeatedly.<\/td><\/tr><tr><td>9<\/td><td><strong>Start<\/strong>Creates an Observable to emit the return value of a function.<\/td><\/tr><tr><td>10<\/td><td><strong>Timer<\/strong>Creates an Observable to emit a single item after given delay.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Creating Operator Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Observable;\n\/\/Using fromArray operator to create an Observable\npublic class ObservableTester  {\n   public static void main(String&#91;] args) { \n      String&#91;] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n      final StringBuilder result = new StringBuilder();\n      Observable&lt;String> observable = Observable.fromArray(letters);\n      observable\n         .map(String::toUpperCase)\n         .subscribe( letter -> result.append(letter));\n      System.out.println(result);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ABCDEFG<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the operators which are used to create an Observable. Sr.No. Operator &amp; Description 1 CreateCreates an Observable from scratch and allows observer method to call programmatically. 2 DeferDo not create an Observable until an observer subscribes. Creates a fresh observable for each observer. 3 Empty\/Never\/ThrowCreates an Observable with limited behavior. 4 FromConverts an [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1139"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1139"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1139\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1157,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1139\/revisions\/1157"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1139"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1139"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1139"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1141,
        "date": "2020-07-23T17:50:51",
        "date_gmt": "2020-07-23T17:50:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1141"
        },
        "modified": "2020-07-24T10:59:51",
        "modified_gmt": "2020-07-24T10:59:51",
        "slug": "transforming-operators",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/transforming-operators\/",
        "title": {
            "rendered": "Transforming Operators"
        },
        "content": {
            "rendered": "\n<p>Following are the operators which are used to transform an item emitted from an Observable.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Operator &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Buffer<\/strong>Gathers items from Observable into bundles periodically and then emit the bundles rather than items.<\/td><\/tr><tr><td>2<\/td><td><strong>FlatMap<\/strong>Used in nested observables. Transforms items into Observables. Then flatten the items into single Observable.<\/td><\/tr><tr><td>3<\/td><td><strong>GroupBy<\/strong>Divide an Observable into set of Observables organized by key to emit different group of items.<\/td><\/tr><tr><td>4<\/td><td><strong>Map<\/strong>Apply a function to each emitted item to transform it.<\/td><\/tr><tr><td>5<\/td><td><strong>Scan<\/strong>Apply a function to each emitted item, sequentially and then emit the successive value.<\/td><\/tr><tr><td>6<\/td><td><strong>Window<\/strong>Gathers items from Observable into Observable windows periodically and then emit the windows rather than items.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Transforming Operator Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Observable;\n\/\/Using map operator to transform an Observable\npublic class ObservableTester  { \n   public static void main(String&#91;] args) {    \n      String&#91;] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n      final StringBuilder result = new StringBuilder();\n      Observable&lt;String> observable = Observable.fromArray(letters);\n      observable\n         .map(String::toUpperCase)\n         .subscribe( letter -> result.append(letter));\n      System.out.println(result);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ABCDEFG<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the operators which are used to transform an item emitted from an Observable. Sr.No. Operator &amp; Description 1 BufferGathers items from Observable into bundles periodically and then emit the bundles rather than items. 2 FlatMapUsed in nested observables. Transforms items into Observables. Then flatten the items into single Observable. 3 GroupByDivide an Observable [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1141"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1141"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1141\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1156,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1141\/revisions\/1156"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1141"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1141"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1141"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1140,
        "date": "2020-07-23T18:10:20",
        "date_gmt": "2020-07-23T18:10:20",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1140"
        },
        "modified": "2020-07-24T10:59:36",
        "modified_gmt": "2020-07-24T10:59:36",
        "slug": "filtering-operators",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/filtering-operators\/",
        "title": {
            "rendered": "Filtering Operators"
        },
        "content": {
            "rendered": "\n<p>Following are the operators which are used to selectively emit item(s) from an Observable.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Operator &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Debounce<\/strong>Emits items only when timeout occurs without emiting another item.<\/td><\/tr><tr><td>2<\/td><td><strong>Distinct<\/strong>Emits only unique items.<\/td><\/tr><tr><td>3<\/td><td><strong>ElementAt<\/strong>emit only item at n index emitted by an Observable.<\/td><\/tr><tr><td>4<\/td><td><strong>Filter<\/strong>Emits only those items which pass the given predicate function.<\/td><\/tr><tr><td>5<\/td><td><strong>First<\/strong>Emits the first item or first item which passed the given criteria.<\/td><\/tr><tr><td>6<\/td><td><strong>IgnoreElements<\/strong>Do not emits any items from Observable but marks completion.<\/td><\/tr><tr><td>7<\/td><td><strong>Last<\/strong>Emits the last element from Observable.<\/td><\/tr><tr><td>8<\/td><td><strong>Sample<\/strong>Emits the most recent item with given time interval.<\/td><\/tr><tr><td>9<\/td><td><strong>Skip<\/strong>Skips the first n items from an Observable.<\/td><\/tr><tr><td>10<\/td><td><strong>SkipLast<\/strong>Skips the last n items from an Observable.<\/td><\/tr><tr><td>11<\/td><td><strong>Take<\/strong>takes the first n items from an Observable.<\/td><\/tr><tr><td>12<\/td><td><strong>TakeLast<\/strong>takes the last n items from an Observable.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Filtering Operator Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Observable;\n\/\/Using take operator to filter an Observable\npublic class ObservableTester  {\n   public static void main(String&#91;] args) {    \n      String&#91;] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n      final StringBuilder result = new StringBuilder();\n      Observable&lt;String> observable = Observable.fromArray(letters);\n      observable\n         .take(2)\n         .subscribe( letter -> result.append(letter));\n      System.out.println(result);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ab<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the operators which are used to selectively emit item(s) from an Observable. Sr.No. Operator &amp; Description 1 DebounceEmits items only when timeout occurs without emiting another item. 2 DistinctEmits only unique items. 3 ElementAtemit only item at n index emitted by an Observable. 4 FilterEmits only those items which pass the given predicate [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1140"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1140"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1140\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1155,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1140\/revisions\/1155"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1140"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1140"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1140"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1143,
        "date": "2020-07-23T18:11:16",
        "date_gmt": "2020-07-23T18:11:16",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1143"
        },
        "modified": "2020-07-24T10:59:18",
        "modified_gmt": "2020-07-24T10:59:18",
        "slug": "combining-operators",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/combining-operators\/",
        "title": {
            "rendered": "Combining Operators"
        },
        "content": {
            "rendered": "\n<p>Following are the operators which are used to create a single Observable from multiple Observables.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Operator &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>And\/Then\/When<\/strong>Combine item sets using Pattern and Plan intermediaries.<\/td><\/tr><tr><td>2<\/td><td><strong>CombineLatest<\/strong>Combine the latest item emitted by each Observable via a specified function and emit resulted item.<\/td><\/tr><tr><td>3<\/td><td><strong>Join<\/strong>Combine items emitted by two Observables if emitted during time-frame of second Observable emitted item.<\/td><\/tr><tr><td>4<\/td><td><strong>Merge<\/strong>Combines the items emitted of Observables.<\/td><\/tr><tr><td>5<\/td><td><strong>StartWith<\/strong>Emit a specified sequence of items before starting to emit the items from the source Observable<\/td><\/tr><tr><td>6<\/td><td><strong>Switch<\/strong>Emits the most recent items emitted by Observables.<\/td><\/tr><tr><td>7<\/td><td><strong>Zip<\/strong>Combines items of Observables based on function and emits the resulted items.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Combining Operator Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Observable;\n\/\/Using combineLatest operator to combine Observables\npublic class ObservableTester {\n   public static void main(String&#91;] args) {    \n      Integer&#91;] numbers = { 1, 2, 3, 4, 5, 6};\n      String&#91;] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n      final StringBuilder result = new StringBuilder();\n      Observable&lt;String> observable1 = Observable.fromArray(letters);\n      Observable&lt;Integer> observable2 = Observable.fromArray(numbers);\n      Observable.combineLatest(observable1, observable2, (a,b) -> a + b)\n         .subscribe( letter -> result.append(letter));\n      System.out.println(result);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>g1g2g3g4g5g6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the operators which are used to create a single Observable from multiple Observables. Sr.No. Operator &amp; Description 1 And\/Then\/WhenCombine item sets using Pattern and Plan intermediaries. 2 CombineLatestCombine the latest item emitted by each Observable via a specified function and emit resulted item. 3 JoinCombine items emitted by two Observables if emitted during [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1143"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1143"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1143\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1154,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1143\/revisions\/1154"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1143"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1143"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1143"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1142,
        "date": "2020-07-23T18:12:09",
        "date_gmt": "2020-07-23T18:12:09",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1142"
        },
        "modified": "2020-07-24T10:59:09",
        "modified_gmt": "2020-07-24T10:59:09",
        "slug": "utility-operators",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/utility-operators\/",
        "title": {
            "rendered": "Utility Operators"
        },
        "content": {
            "rendered": "\n<p>Following are the operators which are often useful with Observables.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Operator &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Delay<\/strong>Register action to handle Observable life-cycle events.<\/td><\/tr><tr><td>2<\/td><td><strong>Materialize\/Dematerialize<\/strong>Represents item emitted and notification sent.<\/td><\/tr><tr><td>3<\/td><td><strong>ObserveOn<\/strong>Specify the scheduler to be observed.<\/td><\/tr><tr><td>4<\/td><td><strong>Serialize<\/strong>Force Observable to make serialized calls.<\/td><\/tr><tr><td>5<\/td><td><strong>Subscribe<\/strong>Operate upon the emissions of items and notifications like complete from an Observable<\/td><\/tr><tr><td>6<\/td><td><strong>SubscribeOn<\/strong>Specify the scheduler to be used by an Observable when it is subscribed to.<\/td><\/tr><tr><td>7<\/td><td><strong>TimeInterval<\/strong>Convert an Observable to emit indications of the amount of time elapsed between emissions.<\/td><\/tr><tr><td>8<\/td><td><strong>Timeout<\/strong>Issues error notification if specified time occurs without emitting any item.<\/td><\/tr><tr><td>9<\/td><td><strong>Timestamp<\/strong>Attach timestamp to each item emitted.<\/td><\/tr><tr><td>9<\/td><td><strong>Using<\/strong>Creates a disposable resource or same lifespan as that of Observable.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Utility Operator Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Observable;\n\/\/Using subscribe operator to subscribe to an Observable\npublic class ObservableTester  {\n   public static void main(String&#91;] args) {    \n      String&#91;] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n      final StringBuilder result = new StringBuilder();\n      Observable&lt;String> observable = Observable.fromArray(letters);\n      observable.subscribe( letter -> result.append(letter));\n      System.out.println(result);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>abcdefg<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the operators which are often useful with Observables. Sr.No. Operator &amp; Description 1 DelayRegister action to handle Observable life-cycle events. 2 Materialize\/DematerializeRepresents item emitted and notification sent. 3 ObserveOnSpecify the scheduler to be observed. 4 SerializeForce Observable to make serialized calls. 5 SubscribeOperate upon the emissions of items and notifications like complete from [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1142"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1142"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1142\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1153,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1142\/revisions\/1153"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1142"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1142"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1142"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1138,
        "date": "2020-07-23T18:12:57",
        "date_gmt": "2020-07-23T18:12:57",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1138"
        },
        "modified": "2020-07-24T10:59:01",
        "modified_gmt": "2020-07-24T10:59:01",
        "slug": "conditional-operators",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/conditional-operators\/",
        "title": {
            "rendered": "Conditional Operators"
        },
        "content": {
            "rendered": "\n<p>Following are the operators which evaluates one or multiple Observables or items emitted.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Operator &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>All<\/strong>Evaluates all items emitted to meet given criteria.<\/td><\/tr><tr><td>2<\/td><td><strong>Amb<\/strong>Emits all items from the first Observable only given multiple Observables.<\/td><\/tr><tr><td>3<\/td><td><strong>Contains<\/strong>Checks if an Observable emits a particular item or not.<\/td><\/tr><tr><td>4<\/td><td><strong>DefaultIfEmpty<\/strong>Emits default item if Observable do not emit anything.<\/td><\/tr><tr><td>5<\/td><td><strong>SequenceEqual<\/strong>Checks if two Observables emit the same sequence of items.<\/td><\/tr><tr><td>6<\/td><td><strong>SkipUntil<\/strong>Discards items emitted by first Observable until a second Observable emits an item.<\/td><\/tr><tr><td>7<\/td><td><strong>SkipWhile<\/strong>Discard items emitted by an Observable until a given condition becomes false.<\/td><\/tr><tr><td>8<\/td><td><strong>TakeUntil<\/strong>Discards items emitted by an Observable after a second Observable emits an item or terminates.<\/td><\/tr><tr><td>9<\/td><td><strong>TakeWhile<\/strong>Discard items emitted by an Observable after a specified condition becomes false.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Conditional Operator Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Observable;\n\/\/Using defaultIfEmpty operator to operate on an Observable\npublic class ObservableTester  {\n   public static void main(String&#91;] args) {    \n      final StringBuilder result = new StringBuilder();\n      Observable.empty()\n      .defaultIfEmpty(\"No Data\")\n      .subscribe(s -> result.append(s));\n      System.out.println(result);\n      String&#91;] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n      final StringBuilder result1 = new StringBuilder();\n      Observable.fromArray(letters)\n      .firstElement()\n      .defaultIfEmpty(\"No data\")   \n      .subscribe(s -> result1.append(s));\n      System.out.println(result1);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>No Data\na<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the operators which evaluates one or multiple Observables or items emitted. Sr.No. Operator &amp; Description 1 AllEvaluates all items emitted to meet given criteria. 2 AmbEmits all items from the first Observable only given multiple Observables. 3 ContainsChecks if an Observable emits a particular item or not. 4 DefaultIfEmptyEmits default item if Observable [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1138"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1138"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1138\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1152,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1138\/revisions\/1152"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1138"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1138"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1138"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1137,
        "date": "2020-07-23T18:14:29",
        "date_gmt": "2020-07-23T18:14:29",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1137"
        },
        "modified": "2020-07-24T10:58:50",
        "modified_gmt": "2020-07-24T10:58:50",
        "slug": "mathematical-operators",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/mathematical-operators\/",
        "title": {
            "rendered": "Mathematical Operators"
        },
        "content": {
            "rendered": "\n<p>Following are the operators which operates on entire items emitted by an Observable.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Operator &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Average<\/strong>Evaluates averages of all items and emit the result.<\/td><\/tr><tr><td>2<\/td><td><strong>Concat<\/strong>Emits all items from multiple Observable without interleaving.<\/td><\/tr><tr><td>3<\/td><td><strong>Count<\/strong>Counts all items and emit the result.<\/td><\/tr><tr><td>4<\/td><td><strong>Max<\/strong>Evaluates max valued item of all items and emit the result.<\/td><\/tr><tr><td>5<\/td><td><strong>Min<\/strong>Evaluates min valued item of all items and emit the result.<\/td><\/tr><tr><td>6<\/td><td><strong>Reduce<\/strong>Apply a function on each item and return the result.<\/td><\/tr><tr><td>7<\/td><td><strong>Sum<\/strong>Evaluates sum of all items and emit the result.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Mathematical Operator Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Observable;\n\/\/Using concat operator to operate on multiple Observables\npublic class ObservableTester  {\n   public static void main(String&#91;] args)  throws InterruptedException {    \n      Integer&#91;] numbers = { 1, 2, 3, 4, 5, 6};\n      String&#91;] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n      final StringBuilder result = new StringBuilder();\n      Observable&lt;String> observable1 = Observable.fromArray(letters);\n      Observable&lt;Integer> observable2 = Observable.fromArray(numbers);\n      Observable.concat(observable1, observable2)\n         .subscribe( letter -> result.append(letter));\n      System.out.println(result);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>abcdefg123456<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the operators which operates on entire items emitted by an Observable. Sr.No. Operator &amp; Description 1 AverageEvaluates averages of all items and emit the result. 2 ConcatEmits all items from multiple Observable without interleaving. 3 CountCounts all items and emit the result. 4 MaxEvaluates max valued item of all items and emit the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1137"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1137"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1137\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1151,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1137\/revisions\/1151"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1137"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1137"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1137"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1178,
        "date": "2020-07-24T11:07:26",
        "date_gmt": "2020-07-24T11:07:26",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1178"
        },
        "modified": "2020-07-24T11:07:26",
        "modified_gmt": "2020-07-24T11:07:26",
        "slug": "connectable-operators",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/connectable-operators\/",
        "title": {
            "rendered": "Connectable Operators"
        },
        "content": {
            "rendered": "\n<p>Following are the operators which has more precisely control over subscription.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Operator &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Connect<\/strong>Instruct a connectable Observable to emit items to its subscribers.<\/td><\/tr><tr><td>2<\/td><td><strong>Publish<\/strong>Converts an Observable to connectable Observable.<\/td><\/tr><tr><td>3<\/td><td><strong>RefCount<\/strong>Converts a connectable Observable to ordinary Observable.<\/td><\/tr><tr><td>4<\/td><td><strong>Replay<\/strong>Ensure same sequence of emitted items to be seen by each subscriber, even after the Observable has begun emitting items and subscribers subscribe later.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Connectable Operator Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.Observable;\nimport io.reactivex.observables.ConnectableObservable;\n\/\/Using connect operator on a ConnectableObservable\npublic class ObservableTester {\n   public static void main(String&#91;] args) {\n      String&#91;] letters = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"};\n      final StringBuilder result = new StringBuilder();\n      ConnectableObservable&lt;String> connectable = Observable.fromArray(letters).publish();      \n      connectable.subscribe(letter -> result.append(letter));\n      System.out.println(result.length());\n      connectable.connect();\n      System.out.println(result.length());\n      System.out.println(result);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n7\nabcdefg<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following are the operators which has more precisely control over subscription. Sr.No. Operator &amp; Description 1 ConnectInstruct a connectable Observable to emit items to its subscribers. 2 PublishConverts an Observable to connectable Observable. 3 RefCountConverts a connectable Observable to ordinary Observable. 4 ReplayEnsure same sequence of emitted items to be seen by each subscriber, even [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1178"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1178"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1178\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1179,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1178\/revisions\/1179"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1178"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1178"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1178"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1177,
        "date": "2020-07-24T11:07:57",
        "date_gmt": "2020-07-24T11:07:57",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1177"
        },
        "modified": "2020-07-24T11:07:57",
        "modified_gmt": "2020-07-24T11:07:57",
        "slug": "subjects",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/subjects\/",
        "title": {
            "rendered": "Subjects"
        },
        "content": {
            "rendered": "\n<p>As per the\u00a0<strong>Reactive<\/strong>, a Subject can act as both Observable as well as Observer.<\/p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>A Subject is a sort of bridge or proxy that is available in some implementations of ReactiveX that acts both as an observer and as an Observable. Because it is an observer, it can subscribe to one or more Observables, and because it is an Observable, it can pass through the items it observes by reemitting them, and it can also emit new items.<\/p><\/blockquote>\n\n\n\n<p>There are four types of Subjects \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Subject &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Publish Subject<\/strong>Emits only those items which are emitted after time of subscription.<\/td><\/tr><tr><td>2<\/td><td><strong>Replay Subject<\/strong>Emits all the items emitted by source Observable regardless of when it has subscribed the Observable.<\/td><\/tr><tr><td>3<\/td><td><strong>Behavior Subject<\/strong>Upon subscription, emits the most recent item then continue to emit item emitted by the source Observable.<\/td><\/tr><tr><td>4<\/td><td><strong>Async Subject<\/strong>Emits the last item emitted by the source Observable after it&#8217;s completes emission.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>As per the\u00a0Reactive, a Subject can act as both Observable as well as Observer. A Subject is a sort of bridge or proxy that is available in some implementations of ReactiveX that acts both as an observer and as an Observable. Because it is an observer, it can subscribe to one or more Observables, and [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1177"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1177"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1177\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1180,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1177\/revisions\/1180"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1177"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1177"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1177"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1176,
        "date": "2020-07-24T11:09:09",
        "date_gmt": "2020-07-24T11:09:09",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1176"
        },
        "modified": "2020-07-24T11:09:09",
        "modified_gmt": "2020-07-24T11:09:09",
        "slug": "publish-subject",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/publish-subject\/",
        "title": {
            "rendered": "Publish Subject"
        },
        "content": {
            "rendered": "\n<p>PublishSubject emits items to currently subscribed Observers and terminal events to current or late Observers.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>io.reactivex.subjects.PublishSubject&lt;T><\/strong>\u00a0class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public final class PublishSubject&lt;T>\nextends Subject&lt;T><\/code><\/pre>\n\n\n\n<h2>PublishSubject Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.subjects.PublishSubject;\npublic class ObservableTester  {\n   public static void main(String&#91;] args) {   \n      final StringBuilder result1 = new StringBuilder();\n      final StringBuilder result2 = new StringBuilder();         \n\n      PublishSubject&lt;String> subject = PublishSubject.create(); \n      subject.subscribe(value -> result1.append(value) ); \n      subject.onNext(\"a\"); \n      subject.onNext(\"b\"); \n      subject.onNext(\"c\"); \n      subject.subscribe(value -> result2.append(value)); \n      subject.onNext(\"d\"); \n      subject.onComplete();\n\n      \/\/Output will be abcd \n      System.out.println(result1);\n      \/\/Output will be d only\n      \/\/as subscribed after c item emitted.\n      System.out.println(result2);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>abcd\nd<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>PublishSubject emits items to currently subscribed Observers and terminal events to current or late Observers. Class Declaration Following is the declaration for\u00a0io.reactivex.subjects.PublishSubject&lt;T>\u00a0class \u2212 PublishSubject Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using\u00a0javac\u00a0compiler as follows \u2212 Now run the ObservableTester [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1176"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1176"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1176\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1181,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1176\/revisions\/1181"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1176"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1176"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1176"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1175,
        "date": "2020-07-24T11:10:14",
        "date_gmt": "2020-07-24T11:10:14",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1175"
        },
        "modified": "2020-07-24T11:10:14",
        "modified_gmt": "2020-07-24T11:10:14",
        "slug": "behavior-subject",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/behavior-subject\/",
        "title": {
            "rendered": "Behavior Subject"
        },
        "content": {
            "rendered": "\n<p>BehaviorSubject emits the most recent item it has observed and then all subsequent observed items to each subscribed Observer.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>io.reactivex.subjects.BehaviorSubject&lt;T><\/strong>\u00a0class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public final class BehaviorSubject&lt;T>\nextends Subject&lt;T><\/code><\/pre>\n\n\n\n<h2>BehaviorSubject Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.subjects.BehaviorSubject;\npublic class ObservableTester  {\n   public static void main(String&#91;] args) {   \n      final StringBuilder result1 = new StringBuilder();\n      final StringBuilder result2 = new StringBuilder();         \n      BehaviorSubject&lt;String> subject =  BehaviorSubject.create(); \n      subject.subscribe(value -> result1.append(value) ); \n      subject.onNext(\"a\"); \n      subject.onNext(\"b\"); \n      subject.onNext(\"c\"); \n      subject.subscribe(value -> result2.append(value)); \n      subject.onNext(\"d\"); \n      subject.onComplete();\n      \/\/Output will be abcd\n      System.out.println(result1);\n      \/\/Output will be cd being BehaviorSubject \n      \/\/(c is last item emitted before subscribe)\n      System.out.println(result2);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>abcd\ncd<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>BehaviorSubject emits the most recent item it has observed and then all subsequent observed items to each subscribed Observer. Class Declaration Following is the declaration for\u00a0io.reactivex.subjects.BehaviorSubject&lt;T>\u00a0class \u2212 BehaviorSubject Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using\u00a0javac\u00a0compiler as follows \u2212 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1175"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1175"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1175\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1182,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1175\/revisions\/1182"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1175"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1175"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1175"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1174,
        "date": "2020-07-24T11:11:48",
        "date_gmt": "2020-07-24T11:11:48",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1174"
        },
        "modified": "2020-07-24T11:11:48",
        "modified_gmt": "2020-07-24T11:11:48",
        "slug": "replay-subject",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/replay-subject\/",
        "title": {
            "rendered": "Replay Subject"
        },
        "content": {
            "rendered": "\n<p>ReplaySubject replays events\/items to current and late Observers.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>io.reactivex.subjects.ReplaySubject&lt;T><\/strong>\u00a0class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public final class ReplaySubject&lt;T>\nextends Subject&lt;T><\/code><\/pre>\n\n\n\n<h2>ReplaySubject Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.subjects.ReplaySubject;\npublic class ObservableTester  {\n   public static void main(String&#91;] args) {   \n      final StringBuilder result1 = new StringBuilder();\n      final StringBuilder result2 = new StringBuilder();         \n\n      ReplaySubject&lt;String> subject = ReplaySubject.create(); \n      subject.subscribe(value -> result1.append(value) ); \n      subject.onNext(\"a\"); \n      subject.onNext(\"b\"); \n      subject.onNext(\"c\"); \n      subject.subscribe(value -> result2.append(value)); \n      subject.onNext(\"d\"); \n      subject.onComplete();\n\n      \/\/Output will be abcd\n      System.out.println(result1);\n      \/\/Output will be abcd being ReplaySubject\n      \/\/as ReplaySubject emits all the items\n      System.out.println(result2);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>abcd\nabcd<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>ReplaySubject replays events\/items to current and late Observers. Class Declaration Following is the declaration for\u00a0io.reactivex.subjects.ReplaySubject&lt;T>\u00a0class \u2212 ReplaySubject Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using\u00a0javac\u00a0compiler as follows \u2212 Now run the ObservableTester as follows \u2212 It should produce the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1174"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1174"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1174\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1183,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1174\/revisions\/1183"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1174"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1174"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1174"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1173,
        "date": "2020-07-24T11:12:48",
        "date_gmt": "2020-07-24T11:12:48",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1173"
        },
        "modified": "2020-07-24T11:12:48",
        "modified_gmt": "2020-07-24T11:12:48",
        "slug": "async-subject",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/async-subject\/",
        "title": {
            "rendered": "Async Subject"
        },
        "content": {
            "rendered": "\n<p>AsyncSubject emits the only last value followed by a completion event or the received error to Observers.<\/p>\n\n\n\n<h2>Class Declaration<\/h2>\n\n\n\n<p>Following is the declaration for\u00a0<strong>io.reactivex.subjects.AsyncSubject&lt;T><\/strong>\u00a0class \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public final class  AsyncSubject&lt;T>\nextends Subject&lt;T><\/code><\/pre>\n\n\n\n<h2>AsyncSubject Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import io.reactivex.subjects. AsyncSubject;\npublic class ObservableTester  {\n   public static void main(String&#91;] args) {   \n      final StringBuilder result1 = new StringBuilder();\n      final StringBuilder result2 = new StringBuilder();         \n\n      AsyncSubject&lt;String> subject =  AsyncSubject.create(); \n      subject.subscribe(value -> result1.append(value) ); \n      subject.onNext(\"a\"); \n      subject.onNext(\"b\"); \n      subject.onNext(\"c\"); \n      subject.subscribe(value -> result2.append(value)); \n      subject.onNext(\"d\"); \n      subject.onComplete();\n\n      \/\/Output will be d being the last item emitted\n      System.out.println(result1);\n      \/\/Output will be d being the last item emitted     \n      System.out.println(result2);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>d\nd<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>AsyncSubject emits the only last value followed by a completion event or the received error to Observers. Class Declaration Following is the declaration for\u00a0io.reactivex.subjects.AsyncSubject&lt;T>\u00a0class \u2212 AsyncSubject Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using\u00a0javac\u00a0compiler as follows \u2212 Now run [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1173"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1173"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1173\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1184,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1173\/revisions\/1184"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1173"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1173"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1173"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1172,
        "date": "2020-07-24T11:13:08",
        "date_gmt": "2020-07-24T11:13:08",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1172"
        },
        "modified": "2020-07-24T11:13:08",
        "modified_gmt": "2020-07-24T11:13:08",
        "slug": "schedulers",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/schedulers\/",
        "title": {
            "rendered": "Schedulers"
        },
        "content": {
            "rendered": "\n<p>Schedulers are used in multi-threading environment to work with Observable operators.<\/p>\n\n\n\n<p>As per the\u00a0<strong>Reactive<\/strong>,Scheduler are used to schedule how chain of operators will apply to different threads.<\/p>\n\n\n\n<p>By default, an Observable and the chain of operators that you apply to it will do its work, and will notify its observers, on the same thread on which its Subscribe method is called. The SubscribeOn operator changes this behavior by specifying a different Scheduler on which the Observable should operate. The ObserveOn operator specifies a different Scheduler that the Observable will use to send notifications to its observers.<\/p>\n\n\n\n<p>There are following types of Schedulers available in RxJava \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Sr.No.<\/th><th>Scheduler &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Schedulers.computation()<\/strong>Creates and returns a Scheduler intended for computational work. Count of threads to be scheduled depends upon the CPUs present in the system. One thread is allowed per CPU. Best for event-loops or callback operations.<\/td><\/tr><tr><td>2<\/td><td><strong>Schedulers.io()<\/strong>Creates and returns a Scheduler intended for IO-bound work. Thread pool may extend as needed.<\/td><\/tr><tr><td>3<\/td><td><strong>Schedulers.newThread()<\/strong>Creates and returns a Scheduler that creates a new Thread for each unit of work.<\/td><\/tr><tr><td>4<\/td><td><strong>Schedulers.trampoline()<\/strong>Creates and returns a Scheduler that queues work on the current thread to be executed after the current work completes.<\/td><\/tr><tr><td>4<\/td><td><strong>Schedulers.from(java.util.concurrent.Executor executor)<\/strong>Converts an Executor into a new Scheduler instance.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Schedulers are used in multi-threading environment to work with Observable operators. As per the\u00a0Reactive,Scheduler are used to schedule how chain of operators will apply to different threads. By default, an Observable and the chain of operators that you apply to it will do its work, and will notify its observers, on the same thread on [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1172"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1172"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1172\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1185,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1172\/revisions\/1185"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1172"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1172"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1172"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1171,
        "date": "2020-07-24T11:14:10",
        "date_gmt": "2020-07-24T11:14:10",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1171"
        },
        "modified": "2020-07-24T11:14:10",
        "modified_gmt": "2020-07-24T11:14:10",
        "slug": "trampoline-scheduler",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/trampoline-scheduler\/",
        "title": {
            "rendered": "Trampoline Scheduler"
        },
        "content": {
            "rendered": "\n<p>Schedulers.trampoline() method creates and returns a Scheduler that queues work on the current thread to be executed after the current work completes.<\/p>\n\n\n\n<h2>Schedulers.trampoline() Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Random;\n\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class ObservableTester  {\n   public static void main(String&#91;] args) throws InterruptedException {\n      Observable.just(\"A\", \"AB\", \"ABC\")\n         .flatMap(v -> getLengthWithDelay(v)\n         .doOnNext(s -> System.out.println(\"Processing Thread \" \n            + Thread.currentThread().getName()))\n         .subscribeOn(Schedulers.trampoline()))\n         .subscribe(length -> System.out.println(\"Receiver Thread \" \n            + Thread.currentThread().getName() \n            + \", Item length \" + length));\n\n         Thread.sleep(10000);\n   }\n   protected static Observable&lt;Integer> getLengthWithDelay(String v) {\n      Random random = new Random();\n      try {\n         Thread.sleep(random.nextInt(3) * 1000);\n         return Observable.just(v.length());\n      } catch (InterruptedException e) {\n         e.printStackTrace();\n      }\n      return null;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Processing Thread main\nReceiver Thread main, Item length 1\nProcessing Thread main\nReceiver Thread main, Item length 2\nProcessing Thread main\nReceiver Thread main, Item length 3<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Schedulers.trampoline() method creates and returns a Scheduler that queues work on the current thread to be executed after the current work completes. Schedulers.trampoline() Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using\u00a0javac\u00a0compiler as follows \u2212 Now run the ObservableTester as [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1171"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1171"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1171\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1186,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1171\/revisions\/1186"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1171"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1171"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1171"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1170,
        "date": "2020-07-24T11:16:26",
        "date_gmt": "2020-07-24T11:16:26",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1170"
        },
        "modified": "2020-07-24T11:16:26",
        "modified_gmt": "2020-07-24T11:16:26",
        "slug": "newthread-scheduler",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/newthread-scheduler\/",
        "title": {
            "rendered": "NewThread Scheduler"
        },
        "content": {
            "rendered": "\n<p>Schedulers.newThread() method creates and returns a Scheduler that creates a new Thread for each unit of work.<\/p>\n\n\n\n<h2>Schedulers.newThread() Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Random;\n\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class ObservableTester  {\n   public static void main(String&#91;] args) throws InterruptedException {\n      Observable.just(\"A\", \"AB\", \"ABC\")\n         .flatMap(v -> getLengthWithDelay(v)\n         .doOnNext(s -> System.out.println(\"Processing Thread \" \n            + Thread.currentThread().getName()))\n         .subscribeOn(Schedulers.newThread()))\n         .subscribe(length -> System.out.println(\"Receiver Thread \" \n            + Thread.currentThread().getName() \n            + \", Item length \" + length));\n\n         Thread.sleep(10000);\n   }\n   protected static Observable&lt;Integer> getLengthWithDelay(String v) {\n      Random random = new Random();\n      try {\n         Thread.sleep(random.nextInt(3) * 1000);\n         return Observable.just(v.length());\n      } catch (InterruptedException e) {\n         e.printStackTrace();\n      }\n      return null;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Processing Thread RxNewThreadScheduler-1\nReceiver Thread RxNewThreadScheduler-1, Item length 1\nProcessing Thread RxNewThreadScheduler-2\nReceiver Thread RxNewThreadScheduler-2, Item length 2\nProcessing Thread RxNewThreadScheduler-3\nReceiver Thread RxNewThreadScheduler-3, Item length 3<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Schedulers.newThread() method creates and returns a Scheduler that creates a new Thread for each unit of work. Schedulers.newThread() Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using\u00a0javac\u00a0compiler as follows \u2212 Now run the ObservableTester as follows \u2212 It should produce [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1170"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1170"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1170\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1187,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1170\/revisions\/1187"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1170"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1170"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1170"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1169,
        "date": "2020-07-24T11:18:20",
        "date_gmt": "2020-07-24T11:18:20",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1169"
        },
        "modified": "2020-07-24T11:18:20",
        "modified_gmt": "2020-07-24T11:18:20",
        "slug": "computation-scheduler",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/computation-scheduler\/",
        "title": {
            "rendered": "Computation Scheduler"
        },
        "content": {
            "rendered": "\n<p>Schedulers.computation() method creates and returns a Scheduler intended for computational work. Count of threads to be scheduled depends upon the CPUs present in the system. One thread is allowed per CPU. Best for event-loops or callback operations.<\/p>\n\n\n\n<h2>Schedulers.computation() Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Random;\n\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class ObservableTester  {\n   public static void main(String&#91;] args) throws InterruptedException {\n      Observable.just(\"A\", \"AB\", \"ABC\")\n         .flatMap(v -> getLengthWithDelay(v)\n         .doOnNext(s -> System.out.println(\"Processing Thread \" \n            + Thread.currentThread().getName()))\n         .subscribeOn(Schedulers.computation()))\n         .subscribe(length -> System.out.println(\"Receiver Thread \" \n            + Thread.currentThread().getName() \n            + \", Item length \" + length));\n\n         Thread.sleep(10000);\n   }\n   protected static Observable&lt;Integer> getLengthWithDelay(String v) {\n      Random random = new Random();\n      try {\n         Thread.sleep(random.nextInt(3) * 1000);\n         return Observable.just(v.length());\n      } catch (InterruptedException e) {\n         e.printStackTrace();\n      }\n      return null;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Processing Thread RxComputationThreadPool-1\nReceiver Thread RxComputationThreadPool-1, Item length 1\nProcessing Thread RxComputationThreadPool-2\nReceiver Thread RxComputationThreadPool-2, Item length 2\nProcessing Thread RxComputationThreadPool-3\nReceiver Thread RxComputationThreadPool-3, Item length 3<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Schedulers.computation() method creates and returns a Scheduler intended for computational work. Count of threads to be scheduled depends upon the CPUs present in the system. One thread is allowed per CPU. Best for event-loops or callback operations. Schedulers.computation() Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1169"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1169"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1169\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1188,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1169\/revisions\/1188"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1169"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1169"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1169"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1168,
        "date": "2020-07-24T11:19:21",
        "date_gmt": "2020-07-24T11:19:21",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1168"
        },
        "modified": "2020-07-24T11:19:21",
        "modified_gmt": "2020-07-24T11:19:21",
        "slug": "io-scheduler",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/io-scheduler\/",
        "title": {
            "rendered": "IO Scheduler"
        },
        "content": {
            "rendered": "\n<p>Schedulers.io() method creates and returns a Scheduler intended for IO-bound work. Thread pool may extend as needed. Best for I\/O intensive operations.<\/p>\n\n\n\n<h2>Schedulers.io() Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Random;\n\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class ObservableTester  {\n   public static void main(String&#91;] args) throws InterruptedException {\n      Observable.just(\"A\", \"AB\", \"ABC\")\n         .flatMap(v -> getLengthWithDelay(v)\n         .doOnNext(s -> System.out.println(\"Processing Thread \" \n            + Thread.currentThread().getName()))\n         .subscribeOn(Schedulers.io()))\n         .subscribe(length -> System.out.println(\"Receiver Thread \" \n            + Thread.currentThread().getName() \n            + \", Item length \" + length));\n\n         Thread.sleep(10000);\n   }\n   protected static Observable&lt;Integer> getLengthWithDelay(String v) {\n      Random random = new Random();\n      try {\n         Thread.sleep(random.nextInt(3) * 1000);\n         return Observable.just(v.length());\n      } catch (InterruptedException e) {\n         e.printStackTrace();\n      }\n      return null;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Processing Thread RxCachedThreadScheduler-1\nReceiver Thread RxCachedThreadScheduler-1, Item length 1\nProcessing Thread RxCachedThreadScheduler-1\nReceiver Thread RxCachedThreadScheduler-1, Item length 2\nProcessing Thread RxCachedThreadScheduler-1\nReceiver Thread RxCachedThreadScheduler-1, Item length 3<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Schedulers.io() method creates and returns a Scheduler intended for IO-bound work. Thread pool may extend as needed. Best for I\/O intensive operations. Schedulers.io() Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using\u00a0javac\u00a0compiler as follows \u2212 Now run the ObservableTester as [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1168"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1168"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1168\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1189,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1168\/revisions\/1189"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1168"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1168"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1168"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1167,
        "date": "2020-07-24T11:20:23",
        "date_gmt": "2020-07-24T11:20:23",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1167"
        },
        "modified": "2020-07-24T11:20:23",
        "modified_gmt": "2020-07-24T11:20:23",
        "slug": "from-scheduler",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/from-scheduler\/",
        "title": {
            "rendered": "From Scheduler"
        },
        "content": {
            "rendered": "\n<p>Schedulers.from(Executor) method converts an Executor into a new Scheduler instance.<\/p>\n\n\n\n<h2>Schedulers.from(Executor) Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava.<\/p>\n\n\n\n<h3>ObservableTester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Random;\nimport java.util.concurrent.Executors;\n\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class ObservableTester  {\n   public static void main(String&#91;] args) throws InterruptedException {\n      Observable.just(\"A\", \"AB\", \"ABC\")\n         .flatMap(v -> getLengthWithDelay(v)\n         .doOnNext(s -> System.out.println(\"Processing Thread \" \n            + Thread.currentThread().getName()))\n         .subscribeOn(Schedulers.from(Executors.newFixedThreadPool(3))))\n         .subscribe(length -> System.out.println(\"Receiver Thread \" \n            + Thread.currentThread().getName() \n            + \", Item length \" + length));\n\n         Thread.sleep(10000);\n   }\n   protected static Observable&lt;Integer> getLengthWithDelay(String v) {\n      Random random = new Random();\n      try {\n         Thread.sleep(random.nextInt(3) * 1000);\n         return Observable.just(v.length());\n      } catch (InterruptedException e) {\n         e.printStackTrace();\n      }\n      return null;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using\u00a0<strong>javac<\/strong>\u00a0compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>javac ObservableTester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the ObservableTester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\RxJava>java ObservableTester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Processing Thread pool-1-thread-1\nProcessing Thread pool-3-thread-1\nReceiver Thread pool-1-thread-1, Item length 1\nProcessing Thread pool-4-thread-1\nReceiver Thread pool-4-thread-1, Item length 3\nReceiver Thread pool-3-thread-1, Item length 2<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Schedulers.from(Executor) method converts an Executor into a new Scheduler instance. Schedulers.from(Executor) Example Create the following Java program using any editor of your choice in, say, C:\\&gt; RxJava. ObservableTester.java Verify the Result Compile the class using\u00a0javac\u00a0compiler as follows \u2212 Now run the ObservableTester as follows \u2212 It should produce the following output \u2212<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            20
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1167"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1167"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1167\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1190,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1167\/revisions\/1190"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1167"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1167"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1167"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]