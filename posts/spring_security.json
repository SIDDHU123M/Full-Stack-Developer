[
    {
        "id": 1666,
        "date": "2021-03-15T06:46:43",
        "date_gmt": "2021-03-15T06:46:43",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1666"
        },
        "modified": "2021-03-15T06:47:30",
        "modified_gmt": "2021-03-15T06:47:30",
        "slug": "form-log-in-with-database",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/form-log-in-with-database\/",
        "title": {
            "rendered": "Form log in with Database"
        },
        "content": {
            "rendered": "\n<h2>Contents<\/h2>\n\n\n\n<ul><li>Introduction and Overview<\/li><li>Basic components of Spring Security<ul><li>AuthenticationFilter<\/li><li>AuthenticationManager<\/li><li>AuthenticationProvider<\/li><li>UserDetailsService<\/li><li>PasswordEncoder<\/li><li>Spring Security Context<\/li><li>Forum Login<\/li><li>Login with a Database<\/li><li>Login Attempts Limit<\/li><\/ul><\/li><li>Getting Started (Practical Guide)<\/li><\/ul>\n\n\n\n<h2>Introduction and Overview<\/h2>\n\n\n\n<p>In addition to providing various inbuilt authentication and authorization options, Spring Security allows us to customize our authentication process as much as we want. Starting from a custom login page to our very own customized authentication providers and authentication filters, we can pretty much customize every aspect of the authentication process. We can define our own authentication process which can range from basic authentication using a username and a password to a complex one such as two-factor authentication using tokens and OTP\u2019s. Also, we can use various databases \u2013 both relational and non-relational, use various password encoders, lock malicious users out of their accounts, and so on.<\/p>\n\n\n\n<p>Today, we are going to discuss three such customizations, namely \u2013 custom form-login, a database provided authentication, and limiting login attempts. Though these are pretty basic use-cases, yet these still will let us have a closer look into Spring Security\u2019s authentication and authorization process. We are also going to set up a registration page through which the users will be able to register themselves with our application.<\/p>\n\n\n\n<p>First of all, let\u2019s take a look at the architecture of Spring Security. It starts with servlet filters. These filters intercept requests, perform operations on them, and then pass the requests on to next filters in the filter chain or request handlers or block them if they do not meet certain conditions. It is during this process that Spring Security can authenticate requests and perform various authentication checks on the requests. It can also prevent unauthenticated or malicious requests from accessing our protected resources by not allowing them to pass through. Thus our application and resources stay protected.<\/p>\n\n\n\n<h2>Components of Spring Security Architecture<\/h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/components_of_spring_security_architecture.jpg\" alt=\"Components of Spring Security Architecture\"\/><\/figure>\n\n\n\n<p>The basic components of Spring Security, as we can see in the above diagram are given below. We shall discuss them briefly as we go along. We shall also discuss their roles in the authentication and authorization process.<\/p>\n\n\n\n<h3>AuthenticationFilter<\/h3>\n\n\n\n<p>This is the filter that intercepts requests and attempts to authenticate it. In Spring Security, it converts the request to an Authentication Object and delegates the authentication to the AuthenticationManager.<\/p>\n\n\n\n<h3>AuthenticationManager<\/h3>\n\n\n\n<p>It is the main strategy interface for authentication. It uses the lone method authenticate() to authenticate the request. The authenticate() method performs the authentication and returns an Authentication Object on successful authentication or throw an AuthenticationException in case of authentication failure. If the method can\u2019t decide, it will return null. The process of authentication in this process is delegated to the AuthenticationProvider which we will discuss next.<\/p>\n\n\n\n<h3>AuthenticationProvider<\/h3>\n\n\n\n<p>The AuthenticationManager is implemented by the ProviderManager which delegates the process to one or more AuthenticationProvider instances. Any class implementing the AuthenticationProvider interface must implement the two methods \u2013 authenticate() and supports(). First, let us talk about the supports() method. It is used to check if the particular authentication type is supported by our AuthenticationProvider implementation class. If it is supported it returns true or else false. Next, the authenticate() method. Here is where the authentication occurs. If the authentication type is supported, the process of authentication is started. Here is this class can use the loadUserByUsername() method of the&nbsp;<strong>UserDetailsService<\/strong>&nbsp;implementation. If the user is not found, it can throw a UsernameNotFoundException.<\/p>\n\n\n\n<p>On the other hand, if the user is found, then the authentication details of the user are used to authenticate the user. For example, in the basic authentication scenario, the password provided by the user may be checked with the password in the database. If they are found to match with each other, it is a success scenario. Then we can return an Authentication object from this method which will be stored in the Security Context, which we will discuss later.<\/p>\n\n\n\n<h3>UserDetailsService<\/h3>\n\n\n\n<p>It is one of the core interfaces of Spring Security. The authentication of any request mostly depends on the implementation of the UserDetailsService interface. It is most commonly used in database backed authentication to retrieve user data. The data is retrieved with the implementation of the lone loadUserByUsername() method where we can provide our logic to fetch the user details for a user. The method will throw a UsernameNotFoundException if the user is not found.<\/p>\n\n\n\n<h3>PasswordEncoder<\/h3>\n\n\n\n<p>Until Spring Security 4, the use of PasswordEncoder was optional. The user could store plain text passwords using in-memory authentication. But Spring Security 5 has mandated the use of PasswordEncoder to store passwords. This encodes the user\u2019s password using one its many implementations. The most common of its implementations is the BCryptPasswordEncoder. Also, we can use an instance of the NoOpPasswordEncoder for our development purposes. It will allow passwords to be stored in plain text. But it is not supposed to be used for production or real-world applications.<\/p>\n\n\n\n<h3>Spring Security Context<\/h3>\n\n\n\n<p>This is where the details of the currently authenticated user are stored on successful authentication. The authentication object is then available throughout the application for the session. So, if we need the username or any other user details, we need to get the SecurityContext first. This is done with the SecurityContextHolder, a helper class, which provides access to the security context. We can use the setAuthentication() and getAuthentication() methods for storing and retrieving the user details respectively.<\/p>\n\n\n\n<p>Moving on, let\u2019s now discuss the three custom implementations we are going to use for our application.<\/p>\n\n\n\n<h3>Form Login<\/h3>\n\n\n\n<p>When we add Spring Security to an existing Spring application it adds a login form and sets up a dummy user. This is Spring Security in auto-configuration mode. In this mode, it also sets up the default filters, authentication-managers, authentication-providers, and so on. This setup is an in-memory authentication setup. We can override this auto-configuration to set up our own users and authentication process. We can also set up our custom login method like a custom login form. Spring Security only has to made aware of the details of the login form like \u2013 the URI of the login form, the login processing URL, etc.. It will then render our login form for the application and carry out the process of authentication along with the other provided configurations or Spring\u2019s own implementation.<\/p>\n\n\n\n<p>This custom form setup will only have to abide by certain rules to be integrated with Spring Security. We need to have a username parameter and a password parameter and the parameter names should be \u201cusername\u201d and \u201cpassword\u201d since those are the default names. In case, we use our own parameter names for these fields in the custom we have to inform Spring Security of those changes using the usernameParameter() and passwordParameter() methods. Similarly, for every change we do to the login form or the form login method, we will have to inform Spring Security of those changes with appropriate methods so that it can integrate them with the authentication process.<\/p>\n\n\n\n<h3>Login with a Database<\/h3>\n\n\n\n<p>As we discussed, Spring Security automatically provides an in-memory authentication implementation by default. We can override this by authenticating users whose details are stored in a database. In this case, while authenticating a user, we can verify the credentials provided by the user against those in the database for authentication. We can also let new users register in our application and store their credentials in the same database. Also, we can provide methods to change or update their passwords or roles or other data. As a result, this provides us with persistent user data which can be used for longer periods of time.<\/p>\n\n\n\n<h3>Login Attempts Limit<\/h3>\n\n\n\n<p>To limit login attempts in our application we can use Spring Security\u2019s isAccountNonLocked property. Spring Security\u2019s UserDetails provides us with that property. We can set up an authentication method wherein, if any user or someone else provides incorrect credentials for more than a certain number of times, we can lock their account. Spring Security disables authentication for a locked user even if the user provides correct credentials. This is an in-built feature provided by Spring Security. We can store the number of incorrect login attempts in our database. Then against each incorrect authentication attempt, we can update and check with the database table. When the number of such attempts exceeds a given number, we can lock the user out of their account. Consequently, the user will not be able to log in again until their account is unlocked.<\/p>\n\n\n\n<h2>Getting Started (Practical Guide)<\/h2>\n\n\n\n<p>Let\u2019s start with our application now. The tools we will be needing for this application are listed below \u2212<\/p>\n\n\n\n<ul><li><strong>A Java IDE<\/strong>\u00a0\u2212 preferable STS 4, but Eclipse, IntelliJ Idea, or any other IDE will do.<\/li><li>MySql Server Community Edition\u00a0\u2212 We need to download and install MySql Community Server in our system. We can go to the official website by clicking here.<\/li><li>MySql Workbench\u00a0\u2212 It is a GUI tool that we can use to interact with MySql databases.<\/li><\/ul>\n\n\n\n<h3>Database Setup<\/h3>\n\n\n\n<p>Let\u2019s set up the database first. We will use a MySql database instance for this application.\u00a0MySql Server Community Edition\u00a0is available for free download and use. We will use\u00a0MySql Workbench\u00a0to connect with our MySql Server and create a database called \u201cspring\u201d to use with our application.<\/p>\n\n\n\n<p>Then we will create two tables \u2013 users and attempts\u2013 to persist our users and login attempts. As mentioned earlier, the details of the users registering with our application will be stored in the users table. The number of login attempts by any user will be stored in the attempts table against his username. This way we can track the attempts and take necessary action.<\/p>\n\n\n\n<p>Let\u2019s take a the look at the SQL to setup our users table and attempts table.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE users ( \n   username VARCHAR(45) NOT NULL , password VARCHAR(45) NOT NULL , \n   account_non_locked TINYINT NOT NULL DEFAULT 1 , \n   PRIMARY KEY (username)\n); \nCREATE TABLE attempts ( \n   id int(45) NOT NULL AUTO_INCREMENT, \n   username varchar(45) NOT NULL, attempts varchar(45) NOT NULL, PRIMARY KEY (id) \n);<\/code><\/pre>\n\n\n\n<p>We can now add a dummy user to our application.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>INSERT INTO users(username,password,account_non_locked) \nVALUES ('user','12345', true);\n<\/code><\/pre>\n\n\n\n<h3>Project Setup<\/h3>\n\n\n\n<p>As usual, we will use the Spring Initializer to setup our project. We are going to create a Maven project, with Spring Boot version 2.3.2. Let\u2019s name our project formlogin(we can choose any name we want) and group id as com.tutorial.spring.security. Furthermore, we will use Java version 8 for this project.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/project_setup.jpg\" alt=\"Project Setup\"\/><\/figure>\n\n\n\n<h3>Dependencies<\/h3>\n\n\n\n<p>Now, coming to the dependencies, we are going to keep our application as simple as possible for this demo. We will keep our focus on the features we want to explore today. So we will choose the minimum number of dependencies that will help us set up our application and get it up and running quickly. Let\u2019s go through the dependencies \u2212<\/p>\n\n\n\n<ul><li><strong>Spring Web<\/strong>&nbsp;\u2212 It bundles all dependencies related to web development including Spring MVC, REST, and an embedded Tomcat Server.<\/li><li><strong>Spring Security<\/strong>&nbsp;\u2212 For the implementation of security features provided by Spring Security.<\/li><li><strong>Thymeleaf<\/strong>&nbsp;\u2212 A server-side Java template engine for HTML5\/XHTML\/XML.<\/li><li><strong>Spring Data JPA<\/strong>&nbsp;\u2212 In addition to using all features defined by JPA specification, Spring Data JPA adds its own features such as the no-code implementation of the repository pattern and the creation of database queries from the method name.<\/li><li><strong>Mysql Driver<\/strong>&nbsp;\u2212 For the MySQL database driver.<\/li><\/ul>\n\n\n\n<p>With these five dependencies, we can set up our project now. Let\u2019s click on the generate button. This will download our project as a zip file. We can extract it to a folder of our choice. Then we open the project in our IDE. We will be using Spring Tool Suite 4 for this. example.<\/p>\n\n\n\n<p>Let\u2019s load our project into STS. It will take a little time for our IDE to download the dependencies and validating them. Let\u2019s take a look at our pom.xml file.<\/p>\n\n\n\n<p>pom.xml<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt; \n&lt;project xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 \n   https:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\" \n   xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"&gt; \n   &lt;modelVersion&gt;4.0.0&lt;\/modelVersion&gt; \n   &lt;parent&gt; \n      &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n      &lt;artifactId&gt;spring-boot-starter-parent&lt;\/artifactId&gt; \n      &lt;version&gt;2.3.1.RELEASE&lt;\/version&gt; \n      &lt;relativePath\/&gt; \n      &lt;!-- lookup parent from repository --&gt; \n   &lt;\/parent&gt; \n   &lt;groupId&gt;com.tutorial.spring.security&lt;\/groupId&gt; \n   &lt;artifactId&gt;formlogin&lt;\/artifactId&gt; \n   &lt;version&gt;0.0.1-SNAPSHOT&lt;\/version&gt; \n   &lt;name&gt;formlogin&lt;\/name&gt; \n   &lt;description&gt;Demo project for Spring Boot&lt;\/description&gt; \n   &lt;properties&gt; &lt;java.version&gt;1.8&lt;\/java.version&gt; \n   &lt;\/properties&gt;\n   &lt;dependencies&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;\/artifactId&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-security&lt;\/artifactId&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;\/artifactId&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-devtools&lt;\/artifactId&gt; \n         &lt;scope&gt;runtime&lt;scope&gt; &lt;optional&gt;true&lt;\/optional&gt;\n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n      &lt;groupId&gt;mysql&lt;\/groupId&gt;\n      &lt;artifactId&gt;mysql-connector-java&lt;\/artifactId&gt; \n      &lt;scope&gt;runtime&lt;\/scope&gt; &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-test&lt;\/artifactId&gt; \n         &lt;scope&gt;test&lt;\/scope&gt; \n         &lt;exclusions&gt; \n         &lt;exclusion&gt; \n         &lt;groupId&gt;org.junit.vintage&lt;\/groupId&gt; \n         &lt;artifactId&gt;junit-vintage-engine&lt;\/artifactId&gt; \n         &lt;\/exclusion&gt; \n         &lt;\/exclusions&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-test&lt;artifactId&gt; \n         &lt;scope&gt;test&lt;\/scope&gt; \n      &lt;\/dependency&gt;\n   &lt;\/dependencies&gt; \n   &lt;build&gt; \n      &lt;plugins&gt; \n         &lt;plugin&gt; \n            &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;\/artifactId&gt; \n         &lt;\/plugin&gt; \n      &lt;\/plugins&gt; \n   &lt;\/build&gt; \n&lt;\/project&gt;<\/code><\/pre>\n\n\n\n<p>We can see that our project details along with our dependencies are enlisted here.<\/p>\n\n\n\n<h3>Data Source<\/h3>\n\n\n\n<p>We will configure our data source in the application.properties file. As we will be using our local MySQL DB as the data source, so we provide the url, username, and password of our local DB instance here. We have named our database as \u201cspring\u201d.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>spring.datasource.url=jdbc:mysql:\/\/localhost:3306\/spring \nspring.datasource.username=root \nspring.datasource.password=root\n<\/code><\/pre>\n\n\n\n<h3>Entities<\/h3>\n\n\n\n<p>Let\u2019s create our entities now. We start with the User entity which contains three fields \u2013 username, password, and accountNonLocked. This User class also implements the UserDetails interface of Spring Security. This class provides core user information. It is used to store user data which can be later encapsulated into Authentication objects. It is not recommended to implement the interface directly. But for our case, since this is a simple application to demonstrate the login with a database, we have implemented this interface directly here to keep thingssimple. We can implement this interface by using a wrapper class around our User entity.<\/p>\n\n\n\n<p><strong>User.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.model; \n\nimport java.util.Collection; \nimport java.util.List;\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.Table; \nimport org.springframework.security.core.GrantedAuthority; \nimport org.springframework.security.core.userdetails.UserDetails; \n\n@Entity \n@Table(name = \"users\") \npublic class User implements UserDetails { \n\n   \/** \n   * \n   *\/ \n   private static final long serialVersionUID = 1L;\n\n   @Id \n   private String username; \n   private String password; @Column(name = \"account_non_locked\")\n   private boolean accountNonLocked; \n\n   public User() { \n   } \n   public User(String username, String password, boolean accountNonLocked) { \n      this.username = username; \n      this.password = password; \n      this.accountNonLocked = accountNonLocked; \n   } \n   @Override \n   public Collection&lt; extends GrantedAuthority&gt; getAuthorities() { \n      return List.of(() -&gt; \"read\"); \n   }\n   @Override\n   public String getPassword() {    \n      return password; \n   } \n   public void setPassword(String password) { \n      this.password = password; \n   } \n   @Override \n   public String getUsername() { \n      return username; \n   } \n   public void setUsername(String username) { \n      this.username = username; \n   } \n   @Override \n   public boolean isAccountNonExpired() { \n      return true; \n   } \n   @Override\n   public boolean isAccountNonLocked() { \n      return accountNonLocked; \n   } \n   @Override public boolean isCredentialsNonExpired() { \n      return true; \n   } \n   @Override public boolean isEnabled() { \n   return true; \n   } \n   \n   public void setAccountNonLocked(Boolean accountNonLocked) { \n      this.accountNonLocked = accountNonLocked; \n   } \n   public boolean getAccountNonLocked() { \n      return accountNonLocked; \n   } \n}<\/code><\/pre>\n\n\n\n<p>The&nbsp;<strong>accountNonLocked<\/strong>&nbsp;field is to be noted here. Every User in Spring Security has the account unlocked by default. To override that property and to lock the users out of their accounts once they exceed the permissible number of attempts, we shall be using this property. If the user exceeds the number of invalid attempts permissible, we shall use this property to lock him out of his account. Also, during every authentication attempt, we shall be checking this property with the isAccountNonLocked() method along with the credentials to authenticate the user. Any user with a locked account will not be allowed to authenticate into the application.<\/p>\n\n\n\n<p>For the other methods of the UserDetails interface, we can simply provide an implementation that returns true for now as we shall not be exploring these properties for this application.<\/p>\n\n\n\n<p>For the list of authorities for this user, let\u2019s assign him a dummy role for now. We shall not be using this property either for this application.<\/p>\n\n\n\n<p><strong>Attempts.java<\/strong><\/p>\n\n\n\n<p>Moving on, let\u2019s create our Attempts entity to persist our invalid attempts count. As created in the database, we will have the three fields here \u2013 username, an integer named attempts to keep counts of the number of attempts, and an identifier.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.model; \n\nimport javax.persistence.Entity; \nimport javax.persistence.GeneratedValue; \nimport javax.persistence.GenerationType; \nimport javax.persistence.Id; \n\n@Entity \npublic class Attempts { \n   @Id \n   @GeneratedValue(strategy = GenerationType.IDENTITY) \n   private int id;\n   private String username; \n   private int attempts;\n   \n   \/** \n   * @return the id \n   *\/ \n   public int getId() { \n      return id; \n   } \n   \/** \n   * @param id the id to set \n   *\/ \n   public void setId(int id) {         \n      this.id = id; \n   } \n   \/** \n   * @return the username \n   *\/ \n   public String getUsername() { \n      return username; \n   }\n   \/** \n   * @param username the username to set \n   *\/ \n   public void setUsername(String username) { \n      this.username = username; \n   } \n   \/** \n   * @return the attempts \n   *\/ \n   public int getAttempts() { \n      return attempts; \n   } \n   \/** \n   * @param attempts the attempts to set \n   *\/ \n   public void setAttempts(int attempts) { \n      this.attempts = attempts; \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Repositories<\/h3>\n\n\n\n<p>We have created the entities, let\u2019s create the repositories to store and retrieve data. We will have two repositories, one for each entity class. For both the repository interfaces, we will extend the JpaRepository which provides us with in-built implementations to save and retrieve data from the database configured in our application.properties file. We can also add our methods or queries here in addition to the provided ones.<\/p>\n\n\n\n<p><strong>UserRepository.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.repository; \n\nimport java.util.Optional; \nimport org.springframework.data.jpa.repository.JpaRepository; \nimport org.springframework.stereotype.Repository; \nimport com.tutorial.spring.security.formlogin.model.User; \n\n@Repository public interface UserRepository extends JpaRepository&lt;User, String&gt; { \n   Optional&lt;User&gt; findUserByUsername(String username); \n}<\/code><\/pre>\n\n\n\n<p>As discussed, we have added our method to retrieve a user by username here. This will return our user details including username, password and account locked status.<\/p>\n\n\n\n<p><strong>AttemptsRepository.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.repository; \n\nimport java.util.Optional;\nimport org.springframework.data.jpa.repository.JpaRepository; \nimport org.springframework.stereotype.Repository; \nimport com.tutorial.spring.security.formlogin.model.Attempts; \n\n@Repository \npublic interface AttemptsRepository extends JpaRepository&lt;Attempts, Integer&gt; { \n   Optional&lt;Attempts&gt; findAttemptsByUsername(String username); \n}<\/code><\/pre>\n\n\n\n<p>Similarly, for the Attempts, in our AttemptsRepository, we have added a custom method findAttemptsByUsername(String username) to get data about user attempts using the username. This will return us an Attempts object with the username and the number of failed authentication attempts the user has made.<\/p>\n\n\n\n<h3>Configuration<\/h3>\n\n\n\n<p>Since we are going to use a custom login form, we have to override the default configuration of Spring Security. To do this we create our configuration class which extends the WebSecurityConfigurerAdapter class of Spring Security.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.config; \n\nimport org.springframework.context.annotation.Bean; \nimport org.springframework.context.annotation.Configuration; \nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; \nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; \nimport org.springframework.security.crypto.password.PasswordEncoder; \n@Configuration \npublic class ApplicationConfig extends WebSecurityConfigurerAdapter { \n   @Bean \n   public PasswordEncoder passwordEncoder() { \n      return new BCryptPasswordEncoder(); \n   } \n   @Override \n   protected void configure(HttpSecurity http) throws Exception { \n      http \n      .csrf().disable()\n      .authorizeRequests().antMatchers(\"\/register**\")\n      .permitAll() .anyRequest().authenticated() \n      .and() \n      .formLogin() .loginPage(\"\/login\")\n      .permitAll() \n      .and() \n      .logout() .invalidateHttpSession(true) \n      .clearAuthentication(true) .permitAll(); \n   }\n}<\/code><\/pre>\n\n\n\n<p>Here we did two things\u2212<\/p>\n\n\n\n<ul><li>First, we have specified the implementation of the PasswordEncoder interface that we are going to use. We have used an instance of BCryptPasswordEncoder to encode our passwords for this example. The PasswordEncoder interface has many implementations and we can use any of them. We have chosen BCryptPasswordEncoder here as it the most commonly used implementation. It uses the very strong BCrypt hashing algorithm to encode the passwords. It does so by incorporating a salt to protect against rainbow table attacks. In addition to this, bcrypt is an adaptive function: over time, the iteration count can be increased to make it slower, so it remains resistant to brute-force search attacks even with increasing computation power.<\/li><li>Secondly, we have overridden the configure() method to provide our implementation of the login method.<ul><li>Whenever we use a custom form for authentication in place of the one provided by Spring Security, we have to inform Spring Security of it using the formLogin() method.<\/li><li>We then also specify our login URL \u2013 \/login. We will map the URL to our custom login page in our Controller later.<\/li><li>We have also specified that the endpoints starting with \/register, \/login and the logout page need not be protected. We did so using the permitAll() method. This allows everyone to access these endpoints. Other than these endpoints, all endpoints are to be authenticated(). That is to say, users must be logged in to access all the other endpoints.<\/li><li>On logout, we have specified that the session is to be invalidated and authentication stored in the application\u2019s SecurityContext be cleared.<\/li><\/ul><\/li><\/ul>\n\n\n\n<h3>Security Setup<\/h3>\n\n\n\n<p>Now, we will setup our authentication process. We are going to setup authentication using a database and locking of user accounts.<\/p>\n\n\n\n<p>Let\u2019s create our implementation of UserDetailsService first. As we have discussed before, we need to provide our custom implementation for authentication using a database. This is because, Spring Security, as we know, only provides an in-memory authentication implementation by default. Therefore, we need to override that implementation with our database based process. To do so, we need to override the loadUserByUsername() method of UserDetailsService.<\/p>\n\n\n\n<h3>UserDetailsService<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.security; \n\nimport java.util.Optional; \nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.security.core.userdetails.UserDetails; \nimport org.springframework.security.core.userdetails.UserDetailsService; \nimport org.springframework.security.core.userdetails.UsernameNotFoundException; \nimport org.springframework.security.provisioning.UserDetailsManager; \nimport org.springframework.stereotype.Service; \nimport com.tutorial.spring.security.formlogin.model.User; \nimport com.tutorial.spring.security.formlogin.repository.UserRepository; \n\n@Service\npublic class SecurityUserDetailsService implements UserDetailsService { \n   @Autowired \n   private UserRepository userRepository; \n   \n   @Override \n   public UserDetails loadUserByUsername(String username) \n   throws UsernameNotFoundException { \n      User user = userRepository.findUserByUsername(username) \n         .orElseThrow(() -&lt; new UsernameNotFoundException(\"User not present\")); \n         return user; \n   } \n   public void createUser(UserDetails user) { \n      userRepository.save((User) user); \n   } \n}<\/code><\/pre>\n\n\n\n<p>As we can see here, we have implemented the loadUserByUsername() method here. Here we are fetching the user from our database using the UserRepository interface. If the user is not found it throws UsernameNotFoundException.<\/p>\n\n\n\n<p>We also have a createUser() method. We will use this method to add users to our database who have registered in our application using UserRepository.<\/p>\n\n\n\n<h3>Authentication Provider<\/h3>\n\n\n\n<p>We will now implement our custom authentication provider. It will implement the AuthenticationProvider interface. We have two methods here that we have to override and implement.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.security; \n\nimport java.util.Optional; \nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.security.authentication.AuthenticationProvider; \nimport org.springframework.security.authentication.BadCredentialsException; \nimport org.springframework.security.authentication.LockedException; \nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken; \nimport org.springframework.security.core.Authentication; \nimport org.springframework.security.core.AuthenticationException; \nimport org.springframework.security.crypto.password.PasswordEncoder; \nimport org.springframework.stereotype.Component;\n\nimport com.tutorial.spring.security.formlogin.model.Attempts; \nimport com.tutorial.spring.security.formlogin.model.User; \nimport com.tutorial.spring.security.formlogin.repository.AttemptsRepository;\nimport com.tutorial.spring.security.formlogin.repository.UserRepository;\n\n@Component public class AuthProvider implements AuthenticationProvider {\n   private static final int ATTEMPTS_LIMIT = 3; \n   \n   @Autowired \n   private SecurityUserDetailsService userDetailsService; \n   @Autowired private PasswordEncoder passwordEncoder; \n   @Autowired private AttemptsRepository attemptsRepository; \n   @Autowired private UserRepository userRepository; \n   @Override \n   public Authentication authenticate(Authentication authentication) \n   throws AuthenticationException {\n      String username = authentication.getName();\n\nimport com.tutorial.spring.security.formlogin.repository.UserRepository; \n\n@Component public class AuthProvider implements AuthenticationProvider { \n   private static final int ATTEMPTS_LIMIT = 3; \n   @Autowired private SecurityUserDetailsService userDetailsService; \n   @Autowired private PasswordEncoder passwordEncoder; \n   @Autowired private AttemptsRepository attemptsRepository; \n   @Autowired private UserRepository userRepository; \n   @Override \n   public Authentication authenticate(Authentication authentication) \n   throws AuthenticationException { \n      String username = authentication.getName();\n      Optional&lt;Attempts&gt; \n      userAttempts = attemptsRepository.findAttemptsByUsername(username); \n      if (userAttempts.isPresent()) { \n         Attempts attempts = userAttempts.get();\n         attempts.setAttempts(0); attemptsRepository.save(attempts); \n      } \n   } \n   private void processFailedAttempts(String username, User user) { \n      Optional&lt;Attempts&gt; \n      userAttempts = attemptsRepository.findAttemptsByUsername(username); \n      if (userAttempts.isEmpty()) { \n         Attempts attempts = new Attempts(); \n         attempts.setUsername(username); \n         attempts.setAttempts(1); \n         attemptsRepository.save(attempts); \n      } else {\n         Attempts attempts = userAttempts.get(); \n         attempts.setAttempts(attempts.getAttempts() + 1); \n         attemptsRepository.save(attempts);\n      \n         if (attempts.getAttempts() + 1 &gt; \n         ATTEMPTS_LIMIT) {\n            user.setAccountNonLocked(false); \n            userRepository.save(user); \n            throw new LockedException(\"Too many invalid attempts. Account is locked!!\"); \n         } \n      }\n   }\n   @Override public boolean supports(Class&lt;?&gt; authentication) { \n      return true; \n   }\n}<\/code><\/pre>\n\n\n\n<ul><li>authenticate() \u2212 This method returns a fully authenticated object including credentials on successful authentication. This object is then stored in the SecurityContext. To perform authentication we will use the loaduserByUsername() method of the SecurityUserDetailsService class of our Application. Here we perform multiple things \u2212<ul><li>First, we extract the user credentials from the Authentication request object which is passed as a parameter to our function. This authentication object was prepared by the AuthenticationFilter class and passed down the AuthenticationProvider through the AuthenticationManager.<\/li><li>We also fetch the user details from the database using the loadUserByUsername() method.<\/li><li>Now, first, we check if the user account has been locked due to previous failed authentication attempts. If we find that the account is locked, we throw a LockedException, and the user will be unable to authenticate unless the account is unlocked again.<\/li><li>If the account is not locked, we match the provided password along with the one stored against the user in the database. This is done using the matches() method of the PasswordEncoder interface.<\/li><li>If the passwords match, and the account has not been locked by then, we return a fully authenticated object. Here we have used an instance UsernamePasswordAuthenticationToken class (as it is a username-password authentication) that implements Authentication. Meanwhile, we also reset the attempts counter to 0.<\/li><li>On the other hand, if the password doesn\u2019t match, we check for a few conditions \u2212<ul><li>If it is the user\u2019s first attempt, then, probably his name would not be in the database. We check for this using the method findAttemptsByUsername() from the AttemptsRepository.<\/li><li>If not found, we make an entry for the user in the database, with the number of attempts set to one.<\/li><li>If a user is found, then we increase the number of attempts by 1.<\/li><li>We then check against the maximum number of failed attempts allowed, using a constant value we defined earlier.<\/li><li>If the number is more than the allowed number of attempts, then the user is locked our of the application and a LockedException is thrown.<\/li><\/ul><\/li><\/ul><\/li><li>supports() \u2212 We also have the supports method that checks if our authentication type is supported by our AuthenticationProvider implementation class. It returns true, false, or null if it matches, doesn\u2019t match, or if it can\u2019t decide respectively. We have hardcoded it to be true for now.<\/li><\/ul>\n\n\n\n<h3>Controller<\/h3>\n\n\n\n<p>Now let\u2019s create our controller package. It will contain our HelloController class. Using this controller class we will map our views to the endpoints and serve those views when the respective endpoints are hit. We will also autowire the PasswordEncoder and the UserDetailsService classes in this component. These injected dependencies will be used in creating our user. Let\u2019s now create our endpoints.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.controller; \n\nimport java.util.Map;\nimport javax.servlet.http.HttpServletRequest; \nimport javax.servlet.http.HttpSession; \nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.http.MediaType; \nimport org.springframework.security.authentication.BadCredentialsException; \nimport org.springframework.security.authentication.LockedException; \nimport org.springframework.security.crypto.password.PasswordEncoder; \nimport org.springframework.stereotype.Controller; \nimport org.springframework.web.bind.annotation.GetMapping; \nimport org.springframework.web.bind.annotation.PostMapping; \nimport org.springframework.web.bind.annotation.RequestParam; \nimport com.tutorial.spring.security.formlogin.model.User; \nimport com.tutorial.spring.security.formlogin.security.SecurityUserDetailsService; \n@Controller \npublic class HelloController {         \n   @Autowired private SecurityUserDetailsService userDetailsManager; \n   @Autowired\n   private PasswordEncoder passwordEncoder; \n   \n   @GetMapping(\"\/\") \n   public String index() { \n      return \"index\"; \n   }\n   @GetMapping(\"\/login\") \n   public String login(HttpServletRequest request, HttpSession session) { \n      session.setAttribute(\n         \"error\", getErrorMessage(request, \"SPRING_SECURITY_LAST_EXCEPTION\")\n      ); \n      return \"login\"; \n   } \n   @GetMapping(\"\/register\") \n   public String register() {  \n      return \"register\"; \n   } \n   @PostMapping(\n      value = \"\/register\", \n      consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE, produces = { \n      MediaType.APPLICATION_ATOM_XML_VALUE, MediaType.APPLICATION_JSON_VALUE }\n   )\n   public void addUser(@RequestParam Map&lt;String, String&gt; body) {\n      User user = new User(); user.setUsername(body.get(\"username\")); \n      user.setPassword(passwordEncoder.encode(body.get(\"password\"))); \n      user.setAccountNonLocked(true); userDetailsManager.createUser(user); \n   }\n   private String getErrorMessage(HttpServletRequest request, String key) {\n      Exception exception = (Exception) request.getSession().getAttribute(key); \n      String error = \"\"; \n      if (exception instanceof BadCredentialsException) { \n         error = \"Invalid username and password!\"; \n      } else if (exception instanceof LockedException) { \n         error = exception.getMessage(); \n      } else { \n         error = \"Invalid username and password!\"; \n      } \n      return error;\n   }\n}<\/code><\/pre>\n\n\n\n<ul><li>index (&#8220;\/&#8221;) \u2013 This endpoint will serve the index page of our application. As we have configured earlier, we shall be protecting this page and allow only authenticated users will be able to access this page.<\/li><li>login (&#8220;\/login&#8221;) \u2013 This will be used to serve our custom login page, as mentioned earlier. Any unauthenticated user will be redirected to this endpoint for authentication.<\/li><li>register(&#8220;\/register&#8221;) (GET) \u2013 We will have two \u201cregister\u201d endpoints for our application. One will be to serve the registration page. The other one will be to handle the registration process. So, the former one will use an Http GET and the latter will be a POST endpoint.<\/li><li>register(&#8220;\/register&#8221;) (POST) \u2013 We will use this endpoint to handle the user registration process. We will get the user name and password from the parameters. Then we will encode the password using the passwordEncoder that we have @Autowired into this component. We also set user account as unlocked at this point. We will then save this user data in our users table with the createUser() method.<\/li><\/ul>\n\n\n\n<p>In addition to the above, we have the getErrorMessage() method. It is used to determine the last thrown exception to add a message in our login template. This way, we can be aware of authentication errors and display proper messages.<\/p>\n\n\n\n<h3>Resources<\/h3>\n\n\n\n<p>We have created our endpoints, the only thing left is to create our views.<\/p>\n\n\n\n<p>First, we will create our index page. This page will be accessible to users only on successful authentication. This page has access to the Servlet request object using which we can display the user name of the logged in user.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt; \n&lt;html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" xmlns:th=\"https:\/\/www.thymeleaf.org\" xmlns:sec=\"https:\/\/www.thymeleaf.org\/thymeleaf-extras-springsecurity3\"&gt; \n   &lt;head&gt; \n      &lt;title&gt;\n         Hello World!\n      &lt;\/title&gt; \n   &lt;\/head&gt;\n   &lt;body&gt; \n      &lt;h1 th:inline=\"text\"&gt;Hello &#91;&#91;${#httpServletRequest.remoteUser}]]!&lt;\/h1&gt; \n      &lt;form th:action=\"@{\/logout}\" method=\"post\"&gt; \n         &lt;input type=\"submit\" value=\"Sign Out\"\/&gt; \n         &lt;\/form&gt;\n   &lt;\/body&gt; \n&lt;html&gt; <\/code><\/pre>\n\n\n\n<p>Next, we create our login view. This display our custom login form with the username and password fields. This view will also be rendered in case of a logout or failed authentication and will display appropriate messages for each case.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt; \n&lt;html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\"      xmlns:th=\"https:\/\/www.thymeleaf.org\" xmlns:sec=\"https:\/\/www.thymeleaf.org\/thymeleaf-extras-springsecurity3\"&gt; \n   &lt;head&gt; \n      &lt;title&gt;Spring Security Example&lt;\/title&gt; \n   &lt;\/head&gt; \n   &lt;body&gt; \n   &lt;div th:if=\"${param.error}\"&gt; \n      &lt;p th:text=\"${session.error}\" th:unless=\"${session == null}\"&gt;&#91;...]&lt;\/p&gt; \n   &lt;\/div&gt; \n   &lt;div th:if=\"${param.logout}\"&gt;You have been logged out.&lt;\/div&gt; \n   &lt;form th:action=\"@{\/login}\" method=\"post&gt;\n   &lt;div&gt; \n      &lt;label&gt; User Name : &lt;input type=\"text\" name=\"username\" \/&gt; &lt;\/label&gt; \n   &lt;\/div&gt; \n   &lt;div&gt; \n   &lt;label&gt; Password: &lt;input type=\"password\" name=\"password\" \/&gt; &lt;\/label&gt; \n   &lt;\/div&gt; \n   &lt;div&gt; \n      &lt;input type=\"submit\" value=\"Sign In\" \/&gt; &lt;\/div&gt; \n      &lt;\/form&gt; \n   &lt;\/body&gt;\n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p>Moving, we create our required view, the register view. This view will let users register themselves with the application. This user data will be stored in the database which will then be used for authentication.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt; \n&lt;html&gt; \n   &lt;head&gt; \n      &lt;meta charset=\"ISO-8859-1\"&gt; \n      &lt;title&gt;Insert title here&lt;\/title&gt;\n   &lt;\/head&gt; \n   &lt;body&gt; \n      &lt;form action=\"\/register\" method=\"post\"&gt; \n         &lt;div class=\"container\"&gt; \n            &lt;h1&gt;Register&lt;\/h1&gt; \n            &lt;p&gt;Please fill in this form to create an account.&lt;\/p&gt; \n            &lt;hr&gt; \n\n            &lt;label for=\"username\"&gt;\n            &lt;b&gt;Username&lt;\/b&gt;\n            &lt;\/label&gt; \n            &lt;input type=\"text\" placeholder=\"Enter Username\" name=\"username\" id=\"username\" required&gt; \n\n            &lt;label for=\"password\"&gt;&lt;b&gt;Password&lt;\/b&gt;&lt;\/label&gt; \n            &lt;input type=\"password\" placeholder=\"Enter Password\" name=\"password\" id=\"password\" required&gt; \n\n            &lt;button type=\"submit\" class=\"registerbtn\"&gt;Register&lt;\/button&gt; \n         &lt;\/div&gt; \n\n      &lt;\/form&gt; \n   &lt;\/body&gt; \n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<h3>Final Project Structure<\/h3>\n\n\n\n<p>Our final project structure should look something similar to this.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/form_login.jpg\" alt=\"Form Login\"\/><\/figure>\n\n\n\n<p><strong>Running the Application<\/strong><\/p>\n\n\n\n<p>We can then run the application as a SpringBootApp. When we go localhost:8080 on our browser it will redirect us back to the login page.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/running_the_application.jpg\" alt=\"Running the Application\"\/><\/figure>\n\n\n\n<p>On successful authentication it will take us the index view with a greeting.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/hello_users.jpg\" alt=\"Hello Users\"\/><\/figure>\n\n\n\n<p>Since, we have allowed only three failed attempts before the account gets locked, so on the third failed authentication the user get locked and the message is displayed on the screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/third_failed_authentication.jpg\" alt=\"Third Failed Authentication\"\/><\/figure>\n\n\n\n<p>On hitting the \/register endpoint we can also register a new user.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/register.jpg\" alt=\"Register\"\/><\/figure>\n\n\n\n<p><strong>Conclusion<\/strong><\/p>\n\n\n\n<p>From today\u2019s article, we have learned how to use a custom form for login using a database using an annotation-based configuration. We have also learned how to prevent multiple failed login attempts. While doing we have seen how we can implement our own&nbsp;<strong>AuthenticationProvider<\/strong>&nbsp;and&nbsp;<strong>UserDetailsService<\/strong>&nbsp;to authenticate users using our custom authentication process.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Contents Introduction and Overview Basic components of Spring Security AuthenticationFilter AuthenticationManager AuthenticationProvider UserDetailsService PasswordEncoder Spring Security Context Forum Login Login with a Database Login Attempts Limit Getting Started (Practical Guide) Introduction and Overview In addition to providing various inbuilt authentication and authorization options, Spring Security allows us to customize our authentication process as much as [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            70
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1666"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1666"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1666\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1669,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1666\/revisions\/1669"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1666"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1666"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1666"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1670,
        "date": "2021-03-15T06:52:28",
        "date_gmt": "2021-03-15T06:52:28",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1670"
        },
        "modified": "2021-03-15T06:52:28",
        "modified_gmt": "2021-03-15T06:52:28",
        "slug": "form-login-remember-me-and-logout",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/form-login-remember-me-and-logout\/",
        "title": {
            "rendered": "Form Login, Remember Me, and Logout"
        },
        "content": {
            "rendered": "\n<h2>Contents<\/h2>\n\n\n\n<ul><li>Introduction and Overview<\/li><li>Getting Started (Practical Guide)<\/li><\/ul>\n\n\n\n<h2>Introduction and Overview<\/h2>\n\n\n\n<p>Spring Security comes with a ton of built-in features and tools for our convenience. In this example, we are going to discuss three of those interesting and useful features \u2212<\/p>\n\n\n\n<ul><li>Form-login<\/li><li>Remember Me<\/li><li>Logout<\/li><\/ul>\n\n\n\n<h3>Form Login<\/h3>\n\n\n\n<p>Form-based login is one form of Username\/password authentication that Spring Security provides support for. This is provided through an Html form.<\/p>\n\n\n\n<p>Whenever a user requests a protected resource, Spring Security checks for the authentication of the request. If the request is not authenticated\/authorized, the user will be redirected to the login page. The login page must be somehow rendered by the application. Spring Security provides that login form by default.<\/p>\n\n\n\n<p>Moreover, any other configuration, if needed, must be explicitly provided as given below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>protected void configure(HttpSecurity http) throws Exception {\nhttp \n   \/\/ ... \n   .formLogin(\n      form -&gt; form       .loginPage(\"\/login\") \n      .permitAll() \n   ); \n}<\/code><\/pre>\n\n\n\n<p>This code requires a login.html file to be present in the templates folder which would be returned on hitting the \/login. This HTML file should contain a login form. Furthermore, the request should be a post request to \/login. The parameter names should be \u201cusername\u201d and \u201cpassword\u201d for username and password respectively. In addition to this, a CSRF Token also needs to be included with the form.<\/p>\n\n\n\n<p>The above code snippet will be clearer once we are done with code exercise.<\/p>\n\n\n\n<h3>Remember Me<\/h3>\n\n\n\n<p>This type of authentication requires a remember-me cookie to be sent to the browser. This cookie stores user information\/authentication principal and it is stored in the browser. So, the website can remember the identity of the user next time when the session is started. Spring Security has the necessary implementations in place for this operation. One uses hashing to preserve the security of cookie-based tokens while the other uses a database or other persistent storage mechanism to store the generated tokens.<\/p>\n\n\n\n<h3>Logout<\/h3>\n\n\n\n<p>The default URL \/logout logs the user out by\u2212<\/p>\n\n\n\n<ul><li>Invalidating the HTTP Session<\/li><li>Cleaning up any RememberMe authentication that was configured<\/li><li>Clearing the SecurityContextHolder<\/li><li>Redirect to \/login?logout<\/li><\/ul>\n\n\n\n<p><strong>WebSecurityConfigurerAdapter<\/strong>&nbsp;automatically applies logout capabilities to the Spring Boot application.<\/p>\n\n\n\n<p><strong>Getting Started (Practical Guide)<\/strong>&nbsp;As usual, we shall start by going to start.spring.io. Here we choose a maven project. We name the project \u201cformlogin\u201d and choose the desired Java version. I am choosing Java 8 for this example. We also go on to add the following dependencies \u2212<\/p>\n\n\n\n<ul><li>Spring Web<\/li><li>Spring Security<\/li><li>Thymeleaf<\/li><li>Spring Boot DevTools<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/spring_initializr.jpg\" alt=\"Spring Initializr\"\/><\/figure>\n\n\n\n<p>Thymeleaf\u00a0is a templating engine for Java. It allows us to quickly develop static or dynamic web pages for rendering in the browser. It is extremely extensible and allows us to define and customize the processing of our templates in fine detail. In addition to this, we can learn more about Thymeleaf by clicking this\u00a0link.<\/p>\n\n\n\n<p>Let\u2019s move on to generate our project and download it. We then extract it to a folder of our choice and use any IDE to open it. I shall be using\u00a0Spring Tools Suite 4. It is available for free downloading from the\u00a0https:\/\/spring.io\/tools\u00a0website and is optimized for spring applications.<\/p>\n\n\n\n<p>Let\u2019s take a look at our pom.xml file. It should look something similar to this \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; \n&lt;project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\"    xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 https:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\"&gt;\n   &lt;modelVersion&gt;4.0.0&lt;\/modelVersion&gt; \n   &lt;parent&gt; \n      &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n      &lt;artifactId&gt;spring-boot-starter-parent&lt;\/artifactId&gt; \n      &lt;version&gt;2.3.1.RELEASE&lt;\/version&gt; \n      &lt;relativePath \/&gt; \n      &lt;!-- lookup parent from repository --&gt; \n   &lt;\/parent&gt; \n   &lt;groupId&gt;            com.spring.security&lt;\/groupId&gt; \n   &lt;artifactId&gt;formlogin&lt;\/artifactId&gt; \n   &lt;version&gt;0.0.1-SNAPSHOT&lt;\/version&gt; \n   &lt;name&gt;formlogin&lt;\/name&gt; \n   &lt;description&gt;Demo project for Spring Boot&lt;\/description&gt; \n      \n   &lt;properties&gt; \n      &lt;java.version&gt;1.8&lt;\/java.version&gt; \n   &lt;\/properties&gt; \n      \n   &lt;dependencies&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-security&lt;\/artifactId&gt;\n      &lt;\/dependency&gt; \n   &lt;dependency&gt; \n      &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n      &lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt; \n   &lt;\/dependency&gt; \n   &lt;dependency&gt; \n      &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;\/artifactId&gt; \n   &lt;\/dependency&gt; \n   &lt;dependency&gt; \n      &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n      &lt;artifactId&gt;spring-boot-devtools&lt;\/artifactId&gt; \n   &lt;\/dependency&gt; \n   &lt;dependency&gt; \n   &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n   &lt;artifactId&gt;spring-boot-starter-test&lt;\/artifactId&gt; \n   &lt;scope&gt;test&lt;\/scope&gt; \n   &lt;exclusions&gt; \n      &lt;exclusion&gt; \n         &lt;groupId&gt;org.junit.vintage&lt;\/groupId&gt;\n         &lt;artifactId&gt;junit-vintage-engine&lt;\/artifactId&gt; \n      &lt;\/exclusion&gt; \n   &lt;\/exclusions&gt; \n   &lt;\/dependency&gt; \n   &lt;dependency&gt; \n      &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n      &lt;artifactId&gt;spring-security-test&lt;\/artifactId&gt; \n      &lt;scope&gt;test&lt;\/scope&gt; \n   &lt;\/dependency&gt; \n   &lt;\/dependencies&gt; \n\n   &lt;build&gt; \n      &lt;plugins&gt; \n         &lt;plugin&gt; \n            &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n            &lt;artifactId&gt;spring-boot-maven-plugin&lt;\/artifactId&gt; \n         &lt;\/plugin&gt; \n      &lt;\/plugins&gt; \n   &lt;\/build&gt;\n&lt;\/project&gt;<\/code><\/pre>\n\n\n\n<p>Let\u2019s create a package in our folder \/src\/main\/java under the default package. We shall be naming it as config as we would place all our configuration classes here. So, the name should look something similar to this \u2013 com.tutorial.spring.security.formlogin.config.<\/p>\n\n\n\n<h3>The Configuration Class<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.config; \n\nimport java.util.List; \nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.context.annotation.Bean; \nimport org.springframework.context.annotation.Configuration; \nimport org.springframework.security.config.annotation.web.builders.HttpSecurity; \nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; \nimport org.springframework.security.core.userdetails.User; \nimport org.springframework.security.core.userdetails.UserDetails; \nimport org.springframework.security.core.userdetails.UserDetailsService; \nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; \nimport org.springframework.security.crypto.password.NoOpPasswordEncoder; \nimport org.springframework.security.crypto.password.PasswordEncoder; \nimport org.springframework.security.provisioning.InMemoryUserDetailsManager; import org.springframework.security.provisioning.UserDetailsManager;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; \nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher; \n\nimport com.spring.security.formlogin.AuthFilter;\n \n@Configuration \npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter { \n   \n   @Bean \n   protected UserDetailsService userDetailsService() {\n   UserDetailsManager userDetailsManager = new InMemoryUserDetailsManager(); \n   UserDetails user = User.withUsername(\"abby\") \n   .password(passwordEncoder().encode(\"12345\")) \n      .authorities(\"read\") .build(); \n      userDetailsManager.createUser(user); \n      return userDetailsManager; \n      \n   }\n   @Bean \n   public PasswordEncoder passwordEncoder() { \n      return new BCryptPasswordEncoder(); }; \n      @Override \n      protected void configure(HttpSecurity http) throws Exception { \n      http.csrf().disable() .authorizeRequests().anyRequest()\n      .authenticated() .and() \n      .formLogin() \n      .and() \n      .rememberMe() \n      .and() .logout() .logoutUrl(\"\/logout\") \n      .logoutSuccessUrl(\"\/login\") .deleteCookies(\"remember-me\"); \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Code Breakdown<\/h3>\n\n\n\n<p>Inside of our config package, we have created the WebSecurityConfig class. This class extends the WebSecurityConfigurerAdapter of Spring Security. We shall be using this class for our security configurations, so let\u2019s annotate it with an @Configuration annotation. As a result, Spring Security knows to treat this class a configuration class. As we can see, configuring applications have been made very easy by Spring.<\/p>\n\n\n\n<p>Let\u2019s take a look at our configuration class.<\/p>\n\n\n\n<ul><li>First, we shall create a bean of our UserDetailsService class by using the userDetailsService() method. We shall be using this bean for managing our users for this application. Here, to keep things simple, we shall use an InMemoryUserDetailsManager instance to create a user. This user, along with our given username and password, will contain a simple \u201cread\u201d authority.<\/li><li>Now, let\u2019s look at our PasswordEncoder. We shall be using a BCryptPasswordEncoder instance for this example. Hence, while creating the user, we used the passwordEncoder to encode our plaintext password like this<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-preformatted\">.password(passwordEncoder().encode(\"12345\"))\n<\/pre>\n\n\n\n<ul><li>After the above steps, we move on to our next configuration. Here, we override the configure method of WebSecurityConfigurerAdapter class. This method takes HttpSecurity as a parameter. We shall be configuring this to use our form login and logout, as well as a remember-me function.<\/li><\/ul>\n\n\n\n<p>Http Security Configuration<\/p>\n\n\n\n<p>We can observe that all these functionalities are available in Spring Security. Let\u2019s study the below section in detail \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>http.csrf().disable()         \n   .authorizeRequests().anyRequest().authenticated() \n   .and() \n   .formLogin() \n   .and() \n   .rememberMe() \n   .and() \n   .logout()\n   .logoutUrl(\"\/logout\") .logoutSuccessUrl(\"\/login\") .deleteCookies(\"remember-me\");<\/code><\/pre>\n\n\n\n<p>There are a few points to note here \u2212<\/p>\n\n\n\n<ul><li>We have disabled\u00a0csrf\u00a0or\u00a0Cross-Site Request Forgery\u00a0protection As this is a simple application only for demonstration purposes, we can safely disable this for now.<\/li><li>Then we add a configuration that requires all requests to be authenticated. As we shall see later, we will have a single \u201c\/\u201d endpoint for the index page of this application, for simplicity.<\/li><li>After that, we shall be using the form login() functionality of Spring Security as mentioned above. This generates a simple login page.<\/li><li>Then, we use the rememberMe() functionality of Spring Security. This will perform two things.<ul><li>Firstly, it will add a \u201cRemember Me\u201d checkbox to our default login form that we generated using form login().<\/li><li>And, secondly, ticking the checkbox generates the remember-me cookie. The cookie stores the identity of the user and the browser stores it. Spring Security detects the cookie in future sessions to automate the login.<\/li><\/ul><\/li><li>And lastly, we have the logout() functionality. For this too, a default functionality has been provided by Spring security. Here it performs two important functions \u2212<ul><li>Invalidates the HTTP session, and unbinds objects bound to the session.<\/li><li>It clears the remember-me cookie.<\/li><li>Removes the authentication from Spring\u2019s Security context.<\/li><\/ul><\/li><\/ul>\n\n\n\n<h3>The Protected Content (Optional)<\/h3>\n\n\n\n<p>We shall now create a dummy index page now for the user to view when he logs in. It will also contain a logout button.<\/p>\n\n\n\n<p>In our \/src\/main\/resources\/templates, we add a index.html file.Then add some Html content to it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!doctype html&gt; \n&lt;html lang=\"en\"&gt; \n   &lt;head&gt; \n      &lt;!-- Required meta tags --&gt;\n      &lt;meta charset=\"utf-8\"&gt; \n      &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; \n      &lt;!-- Bootstrap CSS --&gt; \n      &lt;link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.5.0\/css\/bootstrap.min.css\" integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\" crossorigin=\"anonymous\"&gt; \n      &lt;title&gt;Hello, world!&lt;\/title&gt; \n   &lt;\/head&gt; \n   &lt;body&gt; \n      &lt;h1&gt;Hello, world!&lt;\/h1&gt; &lt;a href=\"logout\"&gt;logout&lt;\/a&gt; \n      &lt;!-- Optional JavaScript --&gt; \n      &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; \n      &lt;script src=\"https:\/\/code.jquery.com\/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj\/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;\/script&gt; \n      &lt;script src=\"https:\/\/cdn.jsdelivr.net\/npm\/popper.js@1.16.0\/dist\/umd\/popper.min.js\" integrity=\"sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo\" crossorigin=\"anonymous\"&gt;&lt;\/script&gt; \n      &lt;script src=\"https:\/\/stackpath.bootstrapcdn.com\/bootstrap\/4.5.0\/js\/bootstrap.min.js\"\n      integrity=\"sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh\/kR0JKI\" crossorigin=\"anonymous\"&gt;&lt;\/script&gt; \n   &lt;\/body&gt; \n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p>This content is from\u00a0the Bootstrap 4 getting started template.<\/p>\n\n\n\n<p>We also add<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a href=\"logout\"&gt;logout&lt;\/a&gt;\n<\/code><\/pre>\n\n\n\n<p>to our file, so as the user can log out of the application using this link.<\/p>\n\n\n\n<p>The Resource Controller<\/p>\n\n\n\n<p>We have created the protected resource, we now add the controller to serve this resource.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.formlogin.controllers; \nimport org.springframework.stereotype.Controller; \nimport org.springframework.web.bind.annotation.GetMapping; \n@Controller public class AuthController { \n   @GetMapping(\"\/\") public String home() { return \"index\"; }\n}<\/code><\/pre>\n\n\n\n<p>As we can see, it is a very simple controller. It only has a get endpoint which serves our index.html file when the start our application.<\/p>\n\n\n\n<h3>Running the application<\/h3>\n\n\n\n<p>Let\u2019s run the application as a Spring Boot Application. We can go to&nbsp;<strong>http:\/\/localhost:8080<\/strong>&nbsp;on our browser when the application starts. It should ask us for username and password. Additionally, we shall also be able to see the remember-me checkbox.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/sign_in.jpg\" alt=\"Sign In\"\/><\/figure>\n\n\n\n<h3>Login Page<\/h3>\n\n\n\n<p>Now, if we provide the user information as we had configured in our WebSecurity config file, we shall be able to log in. Also, if we tick the remember-me checkbox, we shall be able to see the remember-me cookie in our browser\u2019s developer tools section.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/console_application.jpg\" alt=\"Console Application\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/console_network.jpg\" alt=\"Console Network\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Contents Introduction and Overview Getting Started (Practical Guide) Introduction and Overview Spring Security comes with a ton of built-in features and tools for our convenience. In this example, we are going to discuss three of those interesting and useful features \u2212 Form-login Remember Me Logout Form Login Form-based login is one form of Username\/password authentication [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            70
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1670"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1670"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1670\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1671,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1670\/revisions\/1671"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1670"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1670"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1670"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1672,
        "date": "2021-03-15T06:57:15",
        "date_gmt": "2021-03-15T06:57:15",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1672"
        },
        "modified": "2021-03-15T06:57:15",
        "modified_gmt": "2021-03-15T06:57:15",
        "slug": "taglib",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/taglib\/",
        "title": {
            "rendered": "Taglib"
        },
        "content": {
            "rendered": "\n<h2>Contents<\/h2>\n\n\n\n<ul><li>Introduction and Overview<\/li><li>Spring Security Tags<ul><li>The authorize Tag<\/li><li>The authentication tag<\/li><li>The csrfInput Tag<\/li><li>The csrfMetaTags Tag<\/li><\/ul><\/li><li>Getting Started (Practical Guide)<\/li><\/ul>\n\n\n\n<h2>Introduction and Overview<\/h2>\n\n\n\n<p>In Spring MVC applications using JSP, we can use the Spring Security tags for applying security constraints as well as for accessing security information. Spring Security Tag library provides basic support for such operations. Using such tags, we can control the information displayed to the user based on his roles or permissions. Also, we can include CSRF protection features in our forms.<\/p>\n\n\n\n<p>To use Spring security tags, we must have the security taglib declared in our JSP file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ taglib prefix=\"sec\" uri=\"http:\/\/www.springframework.org\/security\/tags\" %&gt;\n<\/code><\/pre>\n\n\n\n<p>Now, we can use Spring Security tags with the \u201csec\u201d prefix. Let\u2019s now see the usage of the tags.<\/p>\n\n\n\n<p><strong>The authorize Tag<\/strong><\/p>\n\n\n\n<p>The first tag we will be discussing is the authorize tag. Let\u2019s check out some usage examples.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;sec:authorize access=\"!isAuthenticated()\"&gt; Login &lt;\/sec:authorize&gt; \n&lt;sec:authorize access=\"isAuthenticated()\"&gt; Logout &lt;\/sec:authorize&gt; \n&lt;sec:authorize access=\"hasRole('ADMIN')\"&gt; Hello Admin. &lt;\/sec:authorize&gt;\n<\/code><\/pre>\n\n\n\n<p>As we can see, we can use this tag to hide or show sections of information based on access or roles. To evaluate roles or access we also use the following\u00a0Spring Security Expressions\u00a0\u2212<\/p>\n\n\n\n<ul><li><strong>hasRole(\u201cADMIN\u201d)<\/strong>&nbsp;\u2212 evaluates to true if the current user has the admin role.<\/li><li><strong>hasAnyRole(\u2018ADMIN\u2019,\u2019USER\u2019)<\/strong>&nbsp;\u2212 evaluates to true if the current user has any of the listed roles<\/li><li><strong>isAnonymous()<\/strong>&nbsp;\u2212 evaluates to true if the current user is an anonymous user<\/li><li><strong>isRememberMe()<\/strong>&nbsp;\u2212 evaluates to true if the current user is a remember-me user<\/li><li><strong>isFullyAuthenticated()<\/strong>&nbsp;\u2212 evaluates to true if the user is authenticated and is neither anonymous nor a remember-me user<\/li><\/ul>\n\n\n\n<p>As we can see, the access attribute is where the web-security expression is specified. Then, Spring Security evaluates the expression The evaluation is generally delegated to SecurityExpressionHandler&lt;FilterInvocation&gt;, which is defined in the application context. If it returns true, then the user can get access to the information given in that section.<\/p>\n\n\n\n<p>If we use the authorize tag with Spring Security \u2018s Permission Evaluator, we can also check user permissions as given below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;sec:authorize access=\"hasPermission(#domain,'read') or hasPermission(#domain,'write')\"&gt;\n   This content is visible to users who have read or write permission.\n&lt;\/sec:authorize&gt;\n<\/code><\/pre>\n\n\n\n<p>We can also allow or restrict the user from clicking on certain links within our content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;sec:authorize url=\"\/admin\"&gt;\n   This content will only be visible to users who are authorized to send requests to the \"\/admin\" URL. \n&lt;\/sec:authorize&gt;\n<\/code><\/pre>\n\n\n\n<p><strong>The authentication tag<\/strong><\/p>\n\n\n\n<p>When we want access to the current Authentication object stored in the Spring Security Context, we can use the authentication tag. Then we can use it to render properties of the object directly in our JSP page. For example, if we want to render the principal property of the Authentication object in our page, we can do it as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;sec:authentication property=\"principal.username\" \/&gt;\n<\/code><\/pre>\n\n\n\n<p><strong>The csrfInput Tag<\/strong><\/p>\n\n\n\n<p>We can use the csrfInput tag to insert a hidden form field with the correct values for the CSRF protection token when CSRF protection is enabled. If CSRF protection is not enabled, this tag outputs nothing.<\/p>\n\n\n\n<p>We can place the tag within the HTML &lt;form&gt;&lt;\/form&gt; block along with other input fields. However, we must not place the tag within the &lt;form:form&gt;&lt;\/form:form&gt; block as Spring Security automatically inserts a CSRF form field within those tags and also takes care of Spring forms automatically.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form method=\"post\" action=\"\/do\/something\"&gt; \n   &lt;sec:csrfInput \/&gt; \n   Username:&lt;br \/&gt; \n   &lt;input type=\"text\" username=\"username\" \/&gt; \n   ... \n&lt;\/form&gt;\n<\/code><\/pre>\n\n\n\n<p><strong>The csrfMetaTags Tag<\/strong><\/p>\n\n\n\n<p>We can use this tag to insert meta tags which contain the CSRF protection token form field and header names and CSRF protection token value. These meta tags can be useful for employing CSRF protection within Javascript in our application. However, this tag only works when we have enabled CSRF protection in our application, otherwise, this tag outputs nothing.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html&gt; \n   &lt;head&gt; \n      &lt;title&gt;CSRF Protection in Javascript&lt;\/title&gt; \n      &lt;sec:csrfMetaTags \/&gt; \n      &lt;script type=\"text\/javascript\" language=\"javascript\"&gt; \n         var csrfParam = $(\"meta&#91;name='_csrf_param']\").attr(\"content\"); \n         var csrfToken = $(\"meta&#91;name='_csrf']\").attr(\"content\");\n      &lt;\/script&gt; \n   &lt;\/head&gt; \n   &lt;body&gt; \n      ... \n   &lt;\/body&gt; \n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p><strong>Getting Started (Practical Guide)<\/strong><\/p>\n\n\n\n<p>Now that we have discussed the tags, let\u2019s build an application to demonstrate the usage of the tags. We shall be using Spring Tool Suite 4 as our IDE. Additionally, we shall be using the Apache Tomcat server to serve our application. So, let\u2019s get started.<\/p>\n\n\n\n<p><strong>Setting up the Application<\/strong><\/p>\n\n\n\n<p>Let\u2019s create a simple Maven Project in STS. We can name our application as taglibsdemo, and package it as a .war file.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/new_maven_project.jpg\" alt=\"New Maven Project\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/new_maven_project_war.jpg\" alt=\"New Maven Project War\"\/><\/figure>\n\n\n\n<p>When we have finished setting up our application it should have a structure similar to this.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/finished_setup.jpg\" alt=\"Finished Setup\"\/><\/figure>\n\n\n\n<p><strong>The pom.xml file<\/strong><\/p>\n\n\n\n<p>We shall add these following dependencies to our application \u2212<\/p>\n\n\n\n<ul><li>Spring Web MVC<\/li><li>Spring-Security-Web<\/li><li>Spring-Security-Core<\/li><li>Spring-Security-Taglibs<\/li><li>Spring-Security-Config<\/li><li>Javax Servlet Api<\/li><li>JSTL<\/li><\/ul>\n\n\n\n<p>After adding these dependencies, our pom.xml should look similar to this \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 \n   https:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\"&gt; \n   &lt;modelVersion&gt;4.0.0&lt;\/modelVersion&gt; \n   &lt;groupId&gt;com.tutorial.spring.security&lt;\/groupId&gt; \n   &lt;artifactId&gt;taglibsdemo&lt;\/artifactId&gt; \n   &lt;version&gt;0.0.1-SNAPSHOT&lt;\/version&gt; \n   &lt;packaging&gt;war&lt;\/packaging&gt; \n   &lt;properties&gt; \n      &lt;maven.compiler.target&gt;1.8&lt;\/maven.compiler.target&gt; \n      &lt;maven.compiler.source&gt;1.8&lt;\/maven.compiler.source&gt; \n   &lt;\/properties&gt; \n   &lt;dependencies&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-webmvc&lt;\/artifactId&gt;\n         &lt;version&gt;5.0.2.RELEASE&lt;\/version&gt; \n      &lt;\/dependency&gt;\n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-web&lt;\/artifactId&gt; \n         &lt;version&gt;5.0.0.RELEASE&lt;\/version&gt;\n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-core&lt;\/artifactId&gt; \n         &lt;version&gt;5.0.4.RELEASE&lt;\/version&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-taglibs&lt;\/artifactId&gt; \n         &lt;version&gt;5.0.4.RELEASE&lt;\/version&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-config&lt;\/artifactId&gt; \n         &lt;version&gt;5.0.4.RELEASE&lt;\/version&gt; \n      &lt;\/dependency&gt;\n      &lt;dependency&gt; \n         &lt;groupId&gt;javax.servlet&lt;\/groupId&gt; \n         &lt;artifactId&gt;javax.servlet-api&lt;\/artifactId&gt; \n         &lt;version&gt;3.1.0&lt;\/version&gt; \n         &lt;scope&gt;provided&lt;\/scope&gt; \n         &lt;\/dependency&gt; &lt;dependency&gt; \n         &lt;groupId&gt;javax.servlet&lt;\/groupId&gt; \n         &lt;artifactId&gt;jstl&lt;\/artifactId&gt; \n         &lt;version&gt;1.2&lt;\/version&gt; \n      &lt;\/dependency&gt; \n   &lt;\/dependencies&gt; \n   &lt;build&gt; \n      &lt;plugins&gt; \n         &lt;plugin&gt; \n            &lt;groupId&gt;org.apache.maven.plugins&lt;\/groupId&gt; \n            &lt;artifactId&gt;maven-war-plugin&lt;\/artifactId&gt; \n            &lt;version&gt;2.6&lt;\/version&gt; \n            &lt;configuration&gt; \n            &lt;failOnMissingWebXml&gt;false&lt;\/failOnMissingWebXml&gt; \n            &lt;\/configuration&gt;\n         &lt;\/plugin&gt; \n      &lt;\/plugins&gt; \n   &lt;\/build&gt; \n&lt;\/project&gt;<\/code><\/pre>\n\n\n\n<p>Let\u2019s create our base package for the application. We can name it com.taglibsdemo. Within the package, let\u2019s create another package for our configuration files. Since, it will be holding the configuration files, we can name it config.<\/p>\n\n\n\n<p><strong>ApplicationConfig.java<\/strong><\/p>\n\n\n\n<p>Let\u2019s create our first configuration class ApplicationConfig.java.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.taglibsdemo.config; \n\nimport org.springframework.context.annotation.Bean; \nimport org.springframework.context.annotation.ComponentScan; \nimport org.springframework.context.annotation.Configuration; \nimport org.springframework.web.servlet.config.annotation.EnableWebMvc; \nimport org.springframework.web.servlet.view.InternalResourceViewResolver; \nimport org.springframework.web.servlet.view.JstlView; \n\n@EnableWebMvc \n@Configuration @ComponentScan({ \"com.taglibsdemo.controller\"} ) \npublic class ApplicationConfig { \n   @Bean\n   public InternalResourceViewResolver viewResolver() {   \n      InternalResourceViewResolver \n      viewResolver = new InternalResourceViewResolver(); \n      viewResolver.setViewClass(JstlView.class); \n      viewResolver.setPrefix(\"\/WEB-INF\/views\/\"); \n      viewResolver.setSuffix(\".jsp\"); return viewResolver; \n   }\n}<\/code><\/pre>\n\n\n\n<p>Let\u2019s break down the code here \u2212<\/p>\n\n\n\n<ul><li>@EnableWebMvc\u00a0\u2212 We use @EnableWebMvc to enable Spring MVC. So, we add this annotation to an @Configuration class to import the Spring MVC configuration from\u00a0WebMvcConfigurationSupport. WebMvcConfigurationSupport is the main class that provides the configuration for the MVC Java config. Not using this annotation may result in things like content-type and accept header, generally content negotiation not working.\u00a0@EnableWebMvc\u00a0registers a RequestMappingHandlerMapping, a RequestMappingHandlerAdapter, and an ExceptionHandlerExceptionResolver among others in support of processing requests with annotated controller methods using annotations such as @RequestMapping, @ExceptionHandler, and others.<ul><li>@Configuration \u2212 This annotation indicates that the class declares one or more @Bean methods and may be processed by the Spring IoC container to generate bean definitions and service requests for those beans at runtime. A @Configuration class is typically bootstrapped using either AnnotationConfigApplicationContext or its web-capable variant, AnnotationConfigWebApplicationContext.<\/li><\/ul><\/li><li>@ComponentScan \u2212 @ComponentScan annotation is used to tell Spring the packages to scan for annotated components. @ComponentScan also used to specify base packages and base package classes using thebasePackageClasses or base packages attributes of @ComponentScan.<\/li><li>InternalResourceViewResolver \u2212 To resolve the provided URI to the actual URI in the format prefix + view name + suffix.<\/li><li>setViewClass() \u2212 To set the view class that should be used to create views.<\/li><li>setPrefix() \u2212 To set the prefix that gets prepended to view names when building a URL.<\/li><li>setSuffix() \u2212 To set the suffix that gets appended to view names when building a URL.<\/li><\/ul>\n\n\n\n<p><strong>WebSecurityConfig.java<\/strong><\/p>\n\n\n\n<p>Next we shall create our WebSecurityConfig class which will extend the familiar WebSecurityConfigurerAdapter class of Spring Security.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.taglibsdemo.config; \n\nimport org.springframework.context.annotation.Bean; \nimport org.springframework.context.annotation.ComponentScan; \nimport org.springframework.security.config.annotation.web.builders.HttpSecurity; \nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; \nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; \nimport org.springframework.security.core.userdetails.UserDetailsService; \nimport org.springframework.security.provisioning.InMemoryUserDetailsManager; \nimport org.springframework.security.web.util.matcher.AntPathRequestMatcher; \nimport org.springframework.security.core.userdetails.User; \nimport org.springframework.security.core.userdetails.User.UserBuilder;\n@EnableWebSecurity @ComponentScan(\"com.taglibsdemo\")  \npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter { \n   @SuppressWarnings(\"deprecation\") @Bean \n   public UserDetailsService userdetailsService() { \n      UserBuilder users = User.withDefaultPasswordEncoder(); \n      InMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n      manager.createUser(users.username(\"rony\").password(\"rony123\").roles(\"USER\").build()); \n      manager.createUser(users.username(\"admin\").password(\"admin123\").roles(\"ADMIN\").build()); \n      return manager; \n   } \n   @Override protected void configure(HttpSecurity http) throws Exception { \n      http.authorizeRequests() .antMatchers(\"\/index\", \"\/\").permitAll()\n      .antMatchers(\"\/admin\", \"\/user\").authenticated() .and() .formLogin() \n      .and() .logout() .logoutRequestMatcher(\n         new AntPathRequestMatcher(\"\/logout\")\n      ); \n   }\n}<\/code><\/pre>\n\n\n\n<p>Let\u2019s break the code down here \u2212<\/p>\n\n\n\n<ul><li>WebSecurityConfigurerAdapter \u2212 The abstract class that implements WebSecurityConfigurer WebSecurityConfigurer and allows us to override methods for security configuration.<\/li><li>@EnableWebSecurity \u2212 It enables Spring to automatically find and apply the @Configuration class to the global WebSecurity.<\/li><li>We then create a UserDetailsService Bean using the method to create users using the InMemoryUserDetailsManager instance. We create two users \u2013 one with role \u201cUSER\u201d and another with role \u201cADMIN\u201d and add them to Spring Security.<\/li><li>After that, we override the configure method with HttpSecurity as a parameter. We make our home page or index page accessible to all and admin page to be accessible when the user is authenticated. Next, we add Spring Security form login and logout.<\/li><\/ul>\n\n\n\n<p>So, with those steps our security configuration is complete. Now, we are ready to move on to the next step.<\/p>\n\n\n\n<p><strong>SpringSecurityApplicationInitializer.java<\/strong><\/p>\n\n\n\n<p>Moving on, now we shall create the SpringSecurityApplicationInitializer.java class which extends the AbstractSecurityWebApplicationInitializer class of Spring Security.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.taglibsdemo.config;\nimport org.springframework.security.web.context.AbstractSecurityWebApplicationInitializer;\npublic class SpringSecurityApplicationInitializer extends \nAbstractSecurityWebApplicationInitializer { }\n<\/code><\/pre>\n\n\n\n<p>AbstractSecurityWebApplicationInitializer is an abstract class that implements Spring\u2019s WebApplicationInitializer. So, SpringServletContainerInitializer will initialize the concrete implementations of this class if the classpath contains spring-web module.<\/p>\n\n\n\n<p><strong>MvcWebApplicationInitializer.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.taglibsdemo.config; \nimport org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer; \npublic class MvcWebApplicationInitializer extends \nAbstractAnnotationConfigDispatcherServletInitializer { \n   @Override protected Class&lt;\/?&gt;&#91;] getRootConfigClasses() { \n      return new Class&#91;] {WebSecurityConfig.class}; \n   }\n   @Override protected Class&lt;\/?&gt;&#91;] getServletConfigClasses() { \n      return null; \n   } \n   @Override protected String&#91;] getServletMappings() { \n      return new String&#91;] {\"\/\"}; \n   }\n}<\/code><\/pre>\n\n\n\n<ul><li>AbstractAnnotationConfigDispatcherServletInitializer \u2212 This class extends WebApplicationInitializer. We need this class as a base class for initializing a Spring application in Servlet container environment.As a result, the subclass of AbstractAnnotationConfigDispatcherServletInitializer will provide the classes annotated with @Configuration, Servlet config classes and DispatcherServlet mapping pattern.<\/li><li>getRootConfigClasses() \u2212 This method must be implemented by the class extending AbstractAnnotationConfigDispatcherServletInitializer. It provides \u201croot\u201d application context configuration.<\/li><li>getServletConfigClasses() \u2212 This method too, must be implemented to provide DispatcherServlet application context configuration.<\/li><li>getServletMappings() \u2212 This method is used specify the servlet mapping(s) for the DispatcherServlet.<\/li><\/ul>\n\n\n\n<p>We have set up the configuration classes. Now , we shall create our controller to serve the JSP pages.<\/p>\n\n\n\n<p><strong>HelloController.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.taglibsdemo.controller;\nimport org.springframework.stereotype.Controller; \nimport org.springframework.web.bind.annotation.GetMapping; \n@Controller public class HelloController { \n@GetMapping(\"\/\") \n   public String index() { return \"index\"; } \n   @GetMapping(\"\/user\") \n   public String user() { return \"admin\"; } \n   @GetMapping(\"\/admin\") \n   public String admin() { return \"admin\"; } \n}<\/code><\/pre>\n\n\n\n<p>Here, we have created three endpoints \u2013 \u201c\/\u201d, \u201c\/<strong>user<\/strong>\u201d, and \u201c\/<strong>admin<\/strong>\u201d. As specified in our configuration previously, we will allow unauthorized access to the index page<\/p>\n\n\n\n<p>\u201c\/\u201d. On the other hand, the \u201c\/user\u201d and \u201c\/admin\u201d endpoints would be authorized only access.<\/p>\n\n\n\n<p><strong>Secure Content to serve<\/strong><\/p>\n\n\n\n<p>Moving on, we shall now create the JSP pages which are to be served on hitting the specific endpoints.<\/p>\n\n\n\n<p>For this, inside our src\/main folder we create a folder called webapp. Inside this folder, we create our WEB-INF folder and further as in ApplicationConfig.java class we add the views folder. Here, in this folder we shall be adding the views.<\/p>\n\n\n\n<p>Let\u2019s add our home page, i.e., index.jsp first.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page language=\"java\" contentType=\"text\/html;\n   charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%&gt; \n&lt;!DOCTYPE html&gt; \n&lt;html&gt; \n   &lt;head&gt; \n      &lt;meta charset=\"ISO-8859-1\"&gt; \n      &lt;title&gt;Home Page&lt;\/title&gt; \n   &lt;\/head&gt;\n   &lt;body&gt; \n      &lt;a href=\"user\"&gt;User&lt;\/a&gt; \n      &lt;a href=\"admin\"&gt;Admin&lt;\/a&gt; \n      &lt;br&gt; \n      &lt;br&gt; Welcome to the Application! \n   &lt;\/body&gt; \n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p>Then we shall create our&nbsp;<strong>admin.jsp<\/strong>&nbsp;file. Let\u2019s add it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page language=\"java\" contentType=\"text\/html; \n   charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%&gt; \n&lt;%@ taglib uri=\"http:\/\/www.springframework.org\/security\/tags\" prefix=\"security\"%&gt; \n&lt;!DOCTYPE html&gt; \n&lt;html&gt; \n   &lt;head&gt; \n      &lt;meta charset=\"ISO-8859-1\"&gt; \n      &lt;meta http-equiv=\"Content-Type\" content=\"text\/html; charset=UTF-8\"&gt; \n      &lt;title&gt;Insert title here&lt;\/title&gt; \n   &lt;\/head&gt; \n   &lt;body&gt; Welcome to Admin Page! &lt;a href=\"logout\"&gt; Logout &lt;\/a&gt; \n      &lt;br&gt; \n      &lt;br&gt; \n      &lt;security:authorize access=\"hasRole('ADMIN')\"&gt; Hello Admin! \n      &lt;\/security:authorize&gt; \n   &lt;\/body&gt; \n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p>here, we have added &lt;%@ taglib uri=&#8221;http:\/\/www.springframework.org\/security\/tags&#8221; prefix=&#8221;security&#8221;%&gt;. This is going to let us the Spring security tag libs as discussed before. As we can see, we have the added the \u201cauthorize\u201d tag around the content. This content is will be only accessible by our admin. Any other user accessing this page will not be able to view this content.<\/p>\n\n\n\n<p><strong>Running the application<\/strong><\/p>\n\n\n\n<p>We now right click on the project and choose Run On Server. When the server starts and our application is running we can go to localhost:8080\/taglibsdemo\/ on our browser to view the page.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/running_application.jpg\" alt=\"Running Application\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/login_page.jpg\" alt=\"Login Page\"\/><\/figure>\n\n\n\n<p><strong>Login page<\/strong><\/p>\n\n\n\n<p>Now, if we click on the User link in our application, we shall be asked to log in.<\/p>\n\n\n\n<p>Here, as we can see in our controller, we are serving the admin page for bothe the user and admin links. But our user, if he is not an admin cannot view the content which is protected by our \u201cauthorize\u201dtag.<\/p>\n\n\n\n<p>Let\u2019s log in as the user first.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/welcome_to_admin_page.jpg\" alt=\"Welcome to Admin Page\"\/><\/figure>\n\n\n\n<p>We can see that the \u201cHello Admin!\u201d content is not visible to us. This is because the current user doesn\u2019t have the admin role.<\/p>\n\n\n\n<p>Let\u2019s logout and log in as admin now.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/admin_page.png\" alt=\"Admin Page\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Contents Introduction and Overview Spring Security Tags The authorize Tag The authentication tag The csrfInput Tag The csrfMetaTags Tag Getting Started (Practical Guide) Introduction and Overview In Spring MVC applications using JSP, we can use the Spring Security tags for applying security constraints as well as for accessing security information. Spring Security Tag library provides [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            70
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1672"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1672"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1672\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1673,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1672\/revisions\/1673"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1672"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1672"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1672"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1674,
        "date": "2021-03-15T07:01:13",
        "date_gmt": "2021-03-15T07:01:13",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1674"
        },
        "modified": "2021-03-15T07:01:13",
        "modified_gmt": "2021-03-15T07:01:13",
        "slug": "xml-configuration",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-configuration\/",
        "title": {
            "rendered": "XML Configuration"
        },
        "content": {
            "rendered": "\n<h2>Contents<\/h2>\n\n\n\n<ul><li>Fundamentals<\/li><li>Getting started (Practical Guide)<\/li><\/ul>\n\n\n\n<h2>Fundamentals<\/h2>\n\n\n\n<p>In this we are going to discuss how to configure Spring Security with XML configuration. We shall be developing a simple Spring application with Spring Security. While doing so, we will discuss in details about each component that we are using.<\/p>\n\n\n\n<h3>Authentication and Authorization<\/h3>\n\n\n\n<ul><li>Authentication \u2212 Authentication is ensuring the user or the client is who they claim to be. There are many ways in which Spring Security enables us to perform authentication. Spring Security supports Basic Authentication, LDAP authentication, JDBC authentication, etc.<\/li><li>Authorization \u2212 Ensuring if the user has permission for the action. If our application is a complex one, with different kinds of users such as admins, regular users, other less privileged users, we need to maintain access control in our application. For example, a guest user should not be able to access admin content. So, to control access to various resources within our application, we need to check if a user has permission to access that resource.<\/li><\/ul>\n\n\n\n<p>The above topics are the two main components of Spring Security. Spring security provided us with various in-built features to implement authentication and authorization in our application. We can use these features with our changes to secure an application very quickly. In addition to this, Spring Security also allows plenty of customizations to the features mentioned before to implement our own complex authentications and authorizations.<\/p>\n\n\n\n<h3>Getting Started (Practical Guide)<\/h3>\n\n\n\n<p>Let\u2019s look at a basic example using in-built Spring Security features. In this example, we shall be securing our application with options provided out-of-box by Spring security. This is will give us an idea of the various components of Spring Security and how we can use them for our application. We shall be using XML to configure our application\u2019s Security features.<\/p>\n\n\n\n<p>The tools we shall be using for our application will be\u00a0Spring Tool Suite 4\u00a0and\u00a0Apache Tomcat Server 9.0. They are both available for free download and use.<\/p>\n\n\n\n<p>First, let\u2019s start a new simple Maven Project in STS. We can choose group id, artifact id as per our choice. After that, we click on Finish. As a result, we have added our project to our workspace. Let\u2019s give STS some time to build and validate our project.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/simple_maven_project.jpg\" alt=\"Simple Maven Project\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/project_structure.jpg\" alt=\"Project Structure\"\/><\/figure>\n\n\n\n<p>Our project structure would finally look similar to this.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/xml_configuration_demo.jpg\" alt=\"XML Configuration Demo\"\/><\/figure>\n\n\n\n<p>Next, let\u2019s add the dependencies. We are going to choose the following dependencies.<\/p>\n\n\n\n<ul><li>Spring Web MVC<\/li><li>Spring-Security-Web<\/li><li>Spring-Security-Core<\/li><li>Spring-Security-Config<\/li><li>Javax Servlet API<\/li><\/ul>\n\n\n\n<p><strong>pom.xml<\/strong><\/p>\n\n\n\n<p>With these dependencies added, we are ready to configure our project. Let\u2019s take a look at our pom.xml file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 \n   https:&#47;&#47;maven.apache.org\/xsd\/maven-4.0.0.xsd&gt; \n   &lt;modelVersion&gt;4.0.0&lt;\/modelVersion&gt;\n   &lt;groupId&gt;com.tutorial.spring.security&lt;\/groupId&gt; \n      &lt;artifactId&gt;xmlconfigurationdemo&lt;\/artifactId&gt; \n      &lt;version&gt;0.0.1-SNAPSHOT&lt;\/version&gt; \n      &lt;packaging&gt;war&lt;\/packaging&gt; \n      &lt;name&gt;Spring Security with XML configuration&lt;\/name&gt; &lt;description&gt;Spring Security with XML configuration&lt;\/description&gt; \n      &lt;properties&gt; \n      &lt;maven.compiler.target&gt;1.8&lt;\/maven.compiler.target&gt; &lt;maven.compiler.source&gt;1.8&lt;\/maven.compiler.source&gt; &lt;\/properties&gt; \n      &lt;dependencies&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-webmvc&lt;\/artifactId&gt; \n         &lt;version&gt;5.0.2.RELEASE&lt;version&gt; \n         &lt;\/dependency&gt; &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-web&lt;\/artifactId&gt; \n         &lt;version&gt;5.0.0.RELEASE&lt;\/version&gt; \n      &lt;\/dependency&gt;\n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-core&lt;\/artifactId&gt; \n         &lt;version&gt;5.0.0.RELEASE&lt;\/version&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-config&lt;\/artifactId&gt; \n         &lt;version&gt;5.0.0.RELEASE&lt;\/version&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;javax.servlet&lt;\/groupId&gt; \n         &lt;artifactId&gt;javax.servlet-api&lt;\/artifactId&gt; \n         &lt;version&gt;3.1.0&lt;\/version&gt; \n         &lt;scope&gt;provided&lt;\/scope&gt; \n      &lt;\/dependency&gt; \n      &lt;\/dependencies&gt; \n      &lt;build&gt; \n         &lt;plugins&gt; \n            &lt;plugin&gt;\n            &lt;groupId&gt;org.apache.maven.plugins&lt;\/groupId&gt;\n            &lt;artifactId&gt;maven-war-plugin&lt;\/artifactId&gt;\n            &lt;version&gt;2.6&lt;\/version&gt; \n            &lt;configuration&gt;\n               &lt;failOnMissingWebXml&gt;false&lt;\/failOnMissingWebXml&gt; \n            &lt;\/configuration&gt; \n         &lt;\/plugin&gt; \n      &lt;\/plugins&gt; \n   &lt;\/build&gt; \n&lt;\/project&gt;<\/code><\/pre>\n\n\n\n<p><strong>Controller and views<\/strong><\/p>\n\n\n\n<p>First, We are going to create our controller. So, let\u2019s create a package called controller and add our HomeController class to the package.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.xmlconfigurationdemo.controller; \nimport org.springframework.stereotype.Controller; \nimport org.springframework.web.bind.annotation.RequestMapping; \nimport org.springframework.web.bind.annotation.RequestMethod; \n@Controller public class HomeController { @GetMapping(\"\/\")\npublic String index() { return \"index\"; } \n@GetMapping(\"\/admin\") \npublic String admin() { return \"admin\"; } }<\/code><\/pre>\n\n\n\n<p>Here, we have two endpoints \u2013 \u201cindex\u201d and \u201cadmin\u201d. While the index page is will be accessible to all, we will protect our \u201cadmin\u201d page.<\/p>\n\n\n\n<p>Since, we have created the routes, let\u2019s also add the pages.<\/p>\n\n\n\n<p>In our \/src\/main\/webapp folder, let\u2019s create a folder called WEB-INF. Then inside it, we will create a folder called views where we will create our views.<\/p>\n\n\n\n<p>Let\u2019s create our first view\u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page language=\"java\" contentType=\"text\/html; \ncharset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%&gt; \n&lt;!DOCTYPE html&gt; \n&lt;html&gt; \n   &lt;head&gt; \n      &lt;meta charset=\"ISO-8859-1\"&gt; &lt;title&gt;Insert title here&lt;\/title&gt; \n   &lt;\/head&gt; \n   &lt;body&gt; \n      &lt;h2&gt;Welcome to Spring Security!&lt;\/h2&gt;\n   &lt;\/body&gt; \n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p>Then we create our admin view.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page language=\"java\" contentType=\"text\/html; charset=ISO-8859-1\" pageEncoding=\"ISO-8859-1\"%&gt; \n&lt;DOCTYPE html&gt; \n&lt;html&gt; \n   &lt;head&gt; \n      &lt;meta charset=\"ISO-8859-1\"&gt; &lt;title&gt;Insert title here&lt;\/title&gt; \n   &lt;\/head&gt; \n   &lt;body&gt; \n      Hello Admin \n   &lt;\/body&gt; \n&lt;\/html&gt;<\/code><\/pre>\n\n\n\n<p>Moving on, let\u2019s configure our application.<\/p>\n\n\n\n<p>Configurations.<\/p>\n\n\n\n<p>web.xml<\/p>\n\n\n\n<p>Now, let\u2019s add our first xml file \u2013 the web.xml file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; \n&lt;!DOCTYPE xml&gt; \n&lt;web-app xmlns=\"http:\/\/xmlns.jcp.org\/xml\/ns\/javaee\"\n   xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation=\"http:\/\/xmlns.jcp.org\/xml\/ns\/javaee \n   http:\/\/xmlns.jcp.org\/xml\/ns\/javaee\/web-app_3_1.xsd\" version=\"3.1\"&gt; &lt;servlet&gt; \n   &lt;servlet-name&gt;spring&lt;\/servlet-name&gt; \n   &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;\/servlet-class&gt; \n   &lt;init-param&gt; \n      &lt;param-name&gt;contextConfigLocation&lt;\/param-name&gt; \n      &lt;param-value&gt;\/WEB-INF\/app-config.xml&lt;\/param-value&gt; \n   &lt;\/init-param&gt; \n   &lt;load-on-startup&gt;1&lt;\/load-on-startup&gt; \n   &lt;\/servlet&gt; \n   &lt;servlet-mapping&gt; \n   &lt;servlet-name&gt;spring&lt;\/servlet-name&gt; \n   &lt;url-pattern&gt;\/&lt;\/url-pattern&gt; \n   &lt;\/servlet-mapping&gt; \n   &lt;listener&gt; \n      &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;\/listener-class&gt;\n   &lt;\/listener&gt; \n   &lt;context-param&gt; \n      &lt;param-name&gt;contextConfigLocation&lt;\/param-name&gt; \n      &lt;param-value&gt; \/WEB-INF\/security-config.xml &lt;\/param-value&gt; \n   &lt;\/context-param&gt; \n   &lt;filter&gt; \n      &lt;filter-name&gt;springSecurityFilterChain&lt;\/filter-name&gt; \n      &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;\/filter-class&gt; \n   &lt;\/filter&gt; \n   &lt;filter-mapping&gt; \n      &lt;filter-name&gt;springSecurityFilterChain&lt;\/filter-name&gt; \n      &lt;url-pattern&gt;\/*&lt;\/url-pattern&gt; \n   &lt;\/filter-mapping&gt; \n&lt;\/web-app&gt;<\/code><\/pre>\n\n\n\n<p>Code breakdown<\/p>\n\n\n\n<ul><li>Dispatcher Servlet \u2212 The first servlet we have declared here is the Dispatcher servlet. The dispatcher servlet is the entry point of any Spring MVC application and is at the core of the entire Spring MVC framework design. It intercepts all HTTP requests and dispatches them to registered handlers for processing a web request. It also provides convenient mapping and exception handling facilities. The order in which servlets are loaded depends on \u201cload-on-startup\u201d value. Servlets with a lower value of \u201cload-on-startup\u201d are loaded before the ones with a higher value.<\/li><li>contextConfigLocation \u2212 It is a string that indicates where context(s) can be found. This string represents a path to a file where our configurations can be loaded.<\/li><li>servlet-mapping \u2212 We use Servlet Mapping to tell Spring Container which request to route to which servlet. In our case, we are routing all our requests to our \u201cspring\u201d Dispatcher servlet.<\/li><li>listener \u2212 The classes that listen to certain types of events, and trigger an appropriate functionality when that event occurs. Each listener is bound to an event. In our case, we will create a root web-application context for the web-application with the ContextLoaderListener. This is then put in the ServletContext that can be used to load and unload the spring-managed beans.<\/li><li>filter \u2212 Spring uses Filters to process requests before handing them over to the Dispatcher Servlet and also used to process responses after they are dispatched. The DelegatingFilterProxy links the application context to the web.xml file. The requests that are coming to this application will pass through our filter which we named \u201cspring SecurityFilterChain\u201d before they reach their controllers. This is where Spring Security can take over the request and perform operations on it before passing it on to the next set of filters or handlers.<\/li><\/ul>\n\n\n\n<p>security-config.xml<\/p>\n\n\n\n<p>Next we will create our security-config.xml file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; \n&lt;beans:beans xmlns=\"http:\/\/www.springframework.org\/schema\/security\" \nxmlns:beans=\"http:\/\/www.springframework.org\/schema\/beans\" \nxmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \nxsi:schemaLocation=\"http:\/\/www.springframework.org\/schema\/beans \nhttp:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans.xsd \nhttp:\/\/www.springframework.org\/schema\/security \nhttp:\/\/www.springframework.org\/schema\/security\/spring-security.xsd\"&gt; \n&lt;http auto-config=\"true\"&gt; \n&lt;intercept-url pattern=\"\/admin\"\naccess=\"hasRole('ROLE_ADMIN')\" \/&gt; &lt;\/http&gt; \n&lt;authentication-manager&gt; \n&lt;authentication-provider&gt; \n   &lt;user-service&gt; \n   &lt;user name=\"admin\" password=\"{noop}1234\" authorities=\"ROLE_ADMIN\" \/&gt; \n   &lt;\/user-service&gt; \n   &lt;\/authentication-provider&gt; &lt;\/authentication-manager&gt; \n   &lt;beans:bean id =\"passwordEncoder\" \n      class = \"org.springframework.security.crypto.password.NoOpPasswordEncoder\" \n      factory-method = \"getInstance\"&gt;\n   &lt;\/beans:bean&gt; \n&lt;\/beans:beans&gt;<\/code><\/pre>\n\n\n\n<p>Code breakdown<\/p>\n\n\n\n<ul><li>http element \u2212 The parent of all web-related namespace functionality. Here, we can configure which URLs to intercept, what permissions are required, which type of login to use, and all such configuration.<\/li><li>auto-config \u2212 Setting this attribute to true automatically sets up form-login, basic login, and logout functionalities. Spring Security generates them by using standard values and the features enabled.<\/li><li>intercept-url \u2212 It sets the pattern of the URLs that we want to protecte, using the access attribute.<\/li><li>access \u2212 It specifies which users are permitted to access the URL specified by the pattern attribute. It is done on the basis of the roles and permissions of a user. We can use SPEL with this attribute.<\/li><li>authentication-manager \u2212 The &lt;authentication-manager&gt; is used to configure users, their passwords, and roles in the application. These users will be one who can access the protected parts of the application given they have the appropriate roles. A DaoAuthenticationProvider bean will be created by the &lt;authentication-provider&lt; and the &lt;user-service&lt; element will create an InMemoryDaoImpl. All authentication-provider elements will allow the users to be authenticated by providing the user information to the authentication-manager.<\/li><li>password-encoder \u2212 This will register a password encoder bean. To keep things simple here we have used the NoOpPasswordEncoder.<\/li><\/ul>\n\n\n\n<p>Moving on we create out last configuration file \u2013 the app-config file. Here we are going to add our view resolver code and define our base package.<\/p>\n\n\n\n<p>app-config.xml<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; \n&lt;beans xmlns=\"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:mvc=\"http:\/\/www.springframework.org\/schema\/mvc\" \n   xmlns:context=\"http:\/\/www.springframework.org\/schema\/context\" xsi:schemaLocation=\" \n   http:&#47;&#47;www.springframework.org\/schema\/mvc \n   http:\/\/www.springframework.org\/schema\/mvc\/spring-mvc.xsd \n   http:\/\/www.springframework.org\/schema\/beans \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans.xsd \n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context.xsd\"&gt; \n   &lt;mvc:annotation-driven \/&gt; \n   &lt;context:component-scan\n      base-package=\"com.tutorial.spring.security.xmlconfigurationdemo.controller\"&gt; \n   &lt;\/context:component-scan&gt; \n   &lt;context:annotation-config&gt;\n   &lt;\/context:annotation-config&gt; \n   &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt; \n      &lt;property name=\"prefix\" value=\"\/WEB-INF\/views\/\"&gt;&lt;\/property&gt; \n      &lt;property name=\"suffix\" value=\".jsp\"&gt;&lt;\/property&gt; \n   &lt;\/bean&gt; \n&lt;\/beans&gt;<\/code><\/pre>\n\n\n\n<p>Here, as we can see we are registering our views that we created earlier. For this, we are using the InternalResourceViewResolver class which will map the provided URI to the actual URI.<\/p>\n\n\n\n<p>For example, using the above configuration, if we request the URI \u201c\/admin\u201c, DispatcherServlet will forward the request to the<\/p>\n\n\n\n<p>prefix + viewname + suffix = \/WEB-INF\/views\/admin.jsp view.<\/p>\n\n\n\n<p><strong>Running the application<\/strong><\/p>\n\n\n\n<p>With this simple configuration, we have our application ready to be served. We can right-click on the project and choose Run on Server. We can choose our Tomcat server. When the server starts, we can go to localhost:8080\/xmlconfigurationdemo to interact with our application.<\/p>\n\n\n\n<p>If, we enter the correct credentials we shall be able to login and see our desired content.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/hello_admin.jpg\" alt=\"Hello Admin\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Contents Fundamentals Getting started (Practical Guide) Fundamentals In this we are going to discuss how to configure Spring Security with XML configuration. We shall be developing a simple Spring application with Spring Security. While doing so, we will discuss in details about each component that we are using. Authentication and Authorization Authentication \u2212 Authentication is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            70
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1674"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1674"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1674\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1675,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1674\/revisions\/1675"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1674"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1674"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1674"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1676,
        "date": "2021-03-15T07:04:36",
        "date_gmt": "2021-03-15T07:04:36",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1676"
        },
        "modified": "2021-03-15T07:04:36",
        "modified_gmt": "2021-03-15T07:04:36",
        "slug": "oauth2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/oauth2\/",
        "title": {
            "rendered": "OAuth2"
        },
        "content": {
            "rendered": "\n<h2>Contents<\/h2>\n\n\n\n<ul><li>OAuth2.0 Fundamentals<\/li><li>OAuth2.0 Getting started(Practical Guide)<\/li><\/ul>\n\n\n\n<h2>OAuth 2.0 Fundamentals<\/h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/oauth_2_fundamentals.jpg\" alt=\"OAuth 2.0 Fundamentals\"\/><\/figure>\n\n\n\n<p><strong>OAuth 2.0<\/strong>&nbsp;was developed by IETF OAuth Working Group and published in October of 2012. It serves as an open authorization protocol for enabling a third party application to get limited access to an HTTP service on behalf of the resource owner. It can do so while not revealing the identity or the long-term credentials of the user. A third-party application itself can also use it on its behalf. The working principle of OAuth consists of the delegation of user authentication to a service hosting the user account and authorizing the third-party application access to the account of the user.<\/p>\n\n\n\n<p>Let us consider an example. Let us say we want to login to a website \u201cclientsite.com\u201d. We can sign in via Facebook, Github, Google or Microsoft. We select any options of the options given above, and we are redirected to the respective website for login. If login is successful, we are asked if we want to give clientsite.com access to the specific data requested by it. We select our desired option and we are redirected to clientsite.com with an authorization code or error code and our login is successful or not depending on our action in the third-party resource. This is the basic working principle of OAuth 2.<\/p>\n\n\n\n<p>There are five key actors involved in an OAuth system. Let\u2019s list them out \u2212<\/p>\n\n\n\n<ul><li><strong>User \/ Resource Owner<\/strong>&nbsp;\u2212 The end-user, who is responsible for the authentication and for providing consent to share resources with the client.<\/li><li><strong>User-Agent<\/strong>&nbsp;\u2212 The browser used by the User.<\/li><li><strong>Client<\/strong>&nbsp;\u2212 The application requesting an access token.<\/li><li><strong>Authorization Server<\/strong>&nbsp;\u2212 The server that is used to authenticate the user\/client. It issues access tokens and tracks them throughout their lifetime.<\/li><li><strong>Resource Server<\/strong>&nbsp;\u2212 The API that provides access to the requested resource. It validates the access tokens and provides authorization.<\/li><\/ul>\n\n\n\n<h3>Getting Started<\/h3>\n\n\n\n<p>We will be developing a Spring Boot Application with Spring Security and OAuth 2.0 to illustrate the above. We will be developing a basic application with an in-memory database to store user credentials now. The application will make it easy for us to understand the workings of OAuth 2.0 with Spring Security.<\/p>\n\n\n\n<p>Let\u2019s use the Spring initializer to create a maven project in Java 8. Let\u2019s start by going to start.spring.io. We generate an application with the following dependencies\u2212<\/p>\n\n\n\n<ul><li>Spring Web<\/li><li>Spring Security<\/li><li>Cloud OAuth2<\/li><li>Spring Boot Devtools<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/start_spring.jpg\" alt=\"Start Spring\"\/><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/project_metadata.jpg\" alt=\"Project Metadata\"\/><\/figure>\n\n\n\n<p>With the above configuration, we click on the Generate button to generate a project. The project will be downloaded in a zip file. We extract the zip to a folder. We can then open the project in an IDE of our choice. I am using Spring Tools Suite here as it is optimized for spring applications. We can also use Eclipse or IntelliJ Idea as we wish.<\/p>\n\n\n\n<p>So, we open the project in STS, let the dependencies get downloaded. Then we can see the project structure in our package explorer window. It should resemble the screenshot below.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/project_in_sts.jpg\" alt=\"Project in STS\"\/><\/figure>\n\n\n\n<p>If we open the pom.xml file we can view the dependencies and other details related to the project. It should look something like this.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; \n&lt;project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 \n   https:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\"&gt; \n   &lt;modelVersion&gt;4.0.0&lt;\/modelVersion&gt; \n   &lt;parent&gt; \n      &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n      &lt;artifactId&gt;spring-boot-starter-parent&lt;\/artifactId&gt; \n      &lt;version&gt;2.3.1.RELEASE&lt;\/version&gt; \n      &lt;relativePath\/&gt; &lt;!-- lookup parent from repository --&gt;\n   &lt;\/parent&gt; \n   &lt;groupId&gt;com.tutorial&lt;\/groupId&gt; \n   &lt;artifactId&gt;spring.security.oauth2&lt;\/artifactId&gt; \n   &lt;version&gt;0.0.1-SNAPSHOT&lt;\/version&gt; \n   &lt;name&gt;spring.security.oauth2&lt;\/name&gt; \n   &lt;description&gt;Demo project for Spring Boot&lt;\/description&gt; \n   &lt;properties&gt; \n      &lt;java.version&gt;1.8&lt;\/java.version&gt; \n      &lt;spring-cloud.version&gt;Hoxton.SR6&lt;\/spring-cloud.version&gt; \n   &lt;\/properties&gt; \n   &lt;dependencies&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-security&lt;\/artifactId&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-web&lt;\/artifactId&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt;\n         &lt;groupId&gt;org.springframework.cloud&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;\/artifactId&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;groupId&gt; \n         &lt;artifactId&gt;spring-boot-devtools&lt;\/artifactId&gt;\n         &lt;scope&gt;runtime&lt;\/scope&gt; \n         &lt;optional&gt;true&lt;\/optional&gt; \n      &lt;\/dependency&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-boot-starter-test&lt;\/artifactId&gt; \n         &lt;scope&gt;test&lt;\/scope&gt; &lt;exclusions&gt;    &lt;exclusion&gt; \n            &lt;groupId&gt;org.junit.vintage&lt;\/groupId&gt; \n            &lt;artifactId&gt;junit-vintage-engine&lt;\/artifactId&gt; \n            &lt;\/exclusion&gt; \n         &lt;\/exclusions&gt; \n      &lt;dependency&gt; \n      &lt;dependency&gt;\n         &lt;groupId&gt;org.springframework.security&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-security-test&lt;\/artifactId&gt; \n         &lt;scope&gt;test&lt;\/scope&gt; \n      &lt;\/dependency&gt; \n   &lt;\/dependencies&gt; \n      &lt;dependencyManagement&gt; \n   &lt;dependencies&gt; \n      &lt;dependency&gt; \n         &lt;groupId&gt;org.springframework.cloud&lt;\/groupId&gt; \n         &lt;artifactId&gt;spring-cloud-dependencies&lt;\/artifactId&gt; \n         &lt;version&gt;${spring-cloud.version}&lt;\/version&gt; \n         &lt;type&gt;pom&lt;\/type&gt; \n         &lt;scope&gt;import&lt;\/scope&gt; \n      &lt;\/dependency&gt; \n   &lt;\/dependencies&gt; \n   &lt;\/dependencyManagement&gt;&lt;build&gt; \n   &lt;plugins&gt; \n      &lt;plugin&gt;\n         &lt;groupId&gt;org.springframework.boot&lt;\/groupId&gt;\n         &lt;artifactId&gt;spring-boot-maven-plugin&lt;\/artifactId&gt; \n      &lt;\/plugin&gt; \n   &lt;\/plugins&gt; \n   &lt;\/build&gt; \n&lt;\/project&gt;<\/code><\/pre>\n\n\n\n<p>Now, to the base package of our application, i.e.,&nbsp;<strong>com.tutorial.spring.security.oauth2<\/strong>, let\u2019s add a new package named config where we shall add our configuration classes.<\/p>\n\n\n\n<p>Let\u2019s create our first configuration class,&nbsp;<strong>UserConfig<\/strong>&nbsp;which extends the&nbsp;<strong>WebSecurityConfigurerAdapter<\/strong>&nbsp;class of Spring Security to manage the users of the client application. We annotate the class with&nbsp;<strong>@Configuration<\/strong>&nbsp;annotation to tell Spring that it is a configuration class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.oauth2.config; \nimport org.springframework.context.annotation.Bean; \nimport org.springframework.context.annotation.Configuration; \nimport org.springframework.security.authentication.AuthenticationManager; \nimport org.springframework.security.config.annotation.web.builders.HttpSecurity; \nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; \nimport org.springframework.security.core.userdetails.User; \nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService; \nimport org.springframework.security.crypto.password.NoOpPasswordEncoder; \nimport org.springframework.security.crypto.password.PasswordEncoder; \nimport org.springframework.security.provisioning.InMemoryUserDetailsManager; \nimport org.springframework.security.provisioning.UserDetailsManager; \n@Configuration public class UserConfig extends WebSecurityConfigurerAdapter { \n   @Bean \n   public UserDetailsService userDetailsService() {\n      UserDetailsManager userDetailsManager = new InMemoryUserDetailsManager(); \n      UserDetails user = User.withUsername(\"john\") \n         .password(\"12345\") .authorities(\"read\") \n      .build(); userDetailsManager.createUser(user); return userDetailsManager; \n   } \n   @Bean\n   public PasswordEncoder passwordEncoder() { \n      return NoOpPasswordEncoder.getInstance(); \n   } \n   @Override \n   @Bean \n   public AuthenticationManager authenticationManagerBean() throws Exception { \n      return super.authenticationManagerBean(); \n   } \n}<\/code><\/pre>\n\n\n\n<p>We then add a bean of the&nbsp;<strong>UserDetailsService<\/strong>&nbsp;to retrieve the user details for authentication and authorization. To put it in the Spring context we annotate it with @Bean. To keep this tutorial simple and easy to understand, we use an&nbsp;<strong>InMemoryUserDetailsManager<\/strong>&nbsp;instance. For a real-world application, we can use other implementations like&nbsp;<strong>JdbcUserDetailsManager<\/strong>&nbsp;to connect to a database and so on. To be able to create users easily for this example we use the&nbsp;<strong>UserDetailsManager<\/strong>&nbsp;interface which extends the&nbsp;<strong>UserDetailsService<\/strong>&nbsp;and has methods like&nbsp;<strong>createUser()<\/strong>,&nbsp;<strong>updateUser()<\/strong>&nbsp;and so on. Then, we create a user using the builder class. We give him a username, password and a \u201cread\u201d authority for now. Then, using the&nbsp;<strong>createUser()<\/strong>&nbsp;method, we add the newly created user and return the instance of&nbsp;<strong>UserDetailsManager<\/strong>&nbsp;thus putting it in the Spring context.<\/p>\n\n\n\n<p>To be able to use the UserDetailsService defined by us, it is necessary to provide a PasswordEncoder bean in the Spring context. Again, to keep it simple for now we use the NoOpPasswordEncoder. The NoOpPasswordEncoder should not be used otherwise for real-world applications for production as it is not secure. NoOpPasswordEncoder does not encode the password and is only useful for developing or testing scenarios or proof of concepts. We should always use the other highly secure options provided by Spring Security, the most popular of which is the BCryptPasswordEncoder, which we will be using later in our series of tutorials. To put it in the Spring context we annotate the method with @Bean.<\/p>\n\n\n\n<p>We then override the&nbsp;<strong>AuthenticationManager<\/strong>&nbsp;bean method of&nbsp;<strong>WebSecurityConfigurerAdapter<\/strong>, which returns the&nbsp;<strong>authenticationManagerBean<\/strong>&nbsp;to put the authentication manager into the Spring context.<\/p>\n\n\n\n<p>Now, to add the client configurations we add a new configuration class named&nbsp;<strong>AuthorizationServerConfig<\/strong>&nbsp;which extends&nbsp;<strong>AuthorizationServerConfigurerAdapter<\/strong>&nbsp;class of Spring Security. The&nbsp;<strong>AuthorizationServerConfigurerAdapter&nbsp;<\/strong>class is used to configure the authorization server using the spring security oauth2 module. We annotate this class with @Configuration as well. To add the authorization server functionality to this class we need to add the&nbsp;<strong>@EnableAuthorizationServer<\/strong>&nbsp;annotation so that the application can behave as an authorization server.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.oauth2.config; \nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.context.annotation.Configuration; \nimport org.springframework.security.authentication.AuthenticationManager; \nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer; \nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter; \nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer; \nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer; @Configuration @EnableAuthorizationServer \npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter {\n   @Autowired private AuthenticationManager authenticationManager; \n   @Override \n   public void configure(ClientDetailsServiceConfigurer clients) throws Exception { \n      clients.inMemory() .withClient(\"oauthclient1\") .secret(\"oauthsecret1\") .scopes(\"read\") .authorizedGrantTypes(\"password\") } \n   @Override \n   public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { \n      endpoints.authenticationManager(authenticationManager); \n   } \n}<\/code><\/pre>\n\n\n\n<p>For checking oauth tokens, Spring Security oauth exposes two endpoints \u2013&nbsp;<strong>\/oauth\/check_token and \/oauth\/token_key<\/strong>. These endpoints are protected by default behind denyAll().&nbsp;<strong>tokenKeyAccess()<\/strong>&nbsp;and&nbsp;<strong>checkTokenAccess()<\/strong>&nbsp;methods open these endpoints for use.<\/p>\n\n\n\n<p>We autowire the&nbsp;<strong>AuthenticationManager<\/strong>&nbsp;bean we configured in the&nbsp;<strong>UserConfig<\/strong>&nbsp;class as a dependency here which we shall be using later.<\/p>\n\n\n\n<p>We then override two of the&nbsp;<strong>configure()<\/strong>&nbsp;methods of the&nbsp;<strong>AuthorizationServerConfigurerAdapter<\/strong>&nbsp;to provide an in-memory implementation of the client details service. The first method which uses the&nbsp;<strong>ClientDetailsServiceConfigurer<\/strong>&nbsp;as a parameter, as the name suggests, allows us to configure the clients for the authorization server. These clients represent the applications that will be able to use the functionality of this authorization server. Since this is a basic application for learning the implementation of OAuth2, we will keep things simple for now and use an in-memory implementation with the following attributes \u2212<\/p>\n\n\n\n<ul><li><strong>clientId<\/strong>&nbsp;\u2212 the id of the client. Required.<\/li><li><strong>secret<\/strong>&nbsp;\u2212 the client secret, required for trusted clients<\/li><li><strong>scope<\/strong>&nbsp;\u2212 the limiting scope of the client, in other words, client permissions. If left empty or undefined, the client is not limited by any scope.<\/li><li><strong>authorizedGrantTypes<\/strong>&nbsp;\u2212 the grant types that the client is authorized to use. The grant type denotes the way by which the client obtains the token from the authorization server. We will be using the \u201cpassword\u201d grant type as it is the simplest. Later, we shall be using another grant type for another use-case.<\/li><\/ul>\n\n\n\n<p>In \u201cpassword\u201d authorization grant type, the user needs to provide his\/her username, password and scope to our client application, which then uses those credentials along with its credentials for the authorization server we want the tokens from.<\/p>\n\n\n\n<p>The other configure() method that we overrode, uses AuthorizationServerEndpointsConfigurer as a parameter, is used to attach the AuthenticationManager to authorization server configuration.<\/p>\n\n\n\n<p>With these basic configurations, our Authorization server is ready to use. Let\u2019s go ahead and start it and use it. We will be using Postman ( https:\/\/www.postman.com\/downloads\/\u00a0) for making our requests.<\/p>\n\n\n\n<p>When using STS, we can launch our application and start seeing see the logs in our console. When the application starts, we can find the oauth2 endpoints exposed by our application in the console. Of those endpoints, we will be using the following the below token for now \u2212<\/p>\n\n\n\n<p><strong>\/oauth\/token \u2013 for obtaining the token.<\/strong><\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/obtaining_the_token.jpg\" alt=\"Obtaining the Token\"\/><\/figure>\n\n\n\n<p>If we check the postman snapshot here, we can notice a few things. Let\u2019s list them down below.<\/p>\n\n\n\n<ul><li>The URL \u2212 Our Spring Boot Application is running at port 8080 of our local machine, so the request is pointed to http:\/\/localhost:8080. The next part is \/oauth\/token, which we know, is the endpoint exposed by OAuth for generating the token.<\/li><li>The query params\u2212 Since this is a \u201cpassword\u201d authorization grant type, the user needs to provide his\/her username, password and scope to our client application, which then uses those credentials along with its credentials to the authorization server we want the tokens from.<\/li><li>Client Authorization \u2212 The Oauth system requires the client to be authorized to be able to provide the token. Hence, under the Authorization header, we provide the client authentication information, namely username and password that we configured in our application.<\/li><\/ul>\n\n\n\n<p>Let\u2019s take a closer look at the query params and the authorization header \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/authorization_header.jpg\" alt=\"Authorization Header\"\/><\/figure>\n\n\n\n<p>The query params<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/client_credentials.jpg\" alt=\"Client Credentials\"\/><\/figure>\n\n\n\n<p>Client credentials<\/p>\n\n\n\n<p>If everything is correct, we shall be able to see our generated token in the response along with a 200 ok status.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/response.jpg\" alt=\"Response\"\/><\/figure>\n\n\n\n<p>The response<\/p>\n\n\n\n<p>We can test our server, by putting wrong credentials or no credentials, and we will get back an error which would say the request is unauthorized or has bad credentials.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/oauth_authorization_server.jpg\" alt=\"OAuth Authorization Server\"\/><\/figure>\n\n\n\n<p>This is our basic oauth authorization server, that uses the password grant type to generate and provide a password.<\/p>\n\n\n\n<p>Next, let\u2019s implement a more secure, and a more common application of the oauth2 authentication, i.e. with an authorization code grant type. We will update our current application for this purpose.<\/p>\n\n\n\n<p>The authorization grant type is different from the password grant type in the sense that the user doesn\u2019t have to share his credentials with the client application. He shares them with the authorization server only and in return authorization code is sent to the client which it uses to authenticate the client. It is more secure than the password grant type as user credentials are not shared with the client application and hence the user\u2019s information stays safe. The client application doesn\u2019t get access to any important user information unless approved by the user.<\/p>\n\n\n\n<p>In a few simple steps, we can set up a basic oauth server with an authorization grant type in our application. Let\u2019s see how.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.oauth2.config; \nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.context.annotation.Configuration; \nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer; \nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter; \nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer; \nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer; \n@Configuration \n@EnableAuthorizationServer \npublic class AuthorizationServerConfig extends AuthorizationServerConfigurerAdapter { \n   @Autowired private AuthenticationManager authenticationManager; \n   @Override \n   public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n      clients.inMemory()       \n      .withClient(\"oauthclient1\")   \n      .secret(\"oauthsecret1\")\n      .scopes(\"read\") .authorizedGrantTypes(\"password\") \n      .and() .withClient(\"oauthclient2\") .secret(\"oauthsecret2\") \n      .scopes(\"read\") .authorizedGrantTypes(\"authorization_code\") \n      .redirectUris(\"http:\/\/locahost:9090\"); \n   }\n   @Override public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception { \n      endpoints.authenticationManager(authenticationManager); \n   } \n}<\/code><\/pre>\n\n\n\n<p>Let\u2019s add a second client for this operation oauthclient2 for this operation with a new secret and read scope. Here we have changed the grant type to authorization code for this client. We also added a redirect URI so that the authorization server can callback the client. So, basically the redirect URI is the URI of the client.<\/p>\n\n\n\n<p>Now, we have to establish a connection between the user and the authorization server. We have to set an interface for the authorization server where the user can provide the credentials. We use the formLogin() implementation of Spring Security to achieve that functionality while keeping things simple. We also make sure that all requests are authenticated.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorial.spring.security.oauth2.config; \nimport org.springframework.context.annotation.Bean; \nimport org.springframework.context.annotation.Configuration; \nimport org.springframework.security.authentication.AuthenticationManager; \nimport org.springframework.security.config.annotation.web.builders.HttpSecurity; \nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter; \nimport org.springframework.security.core.userdetails.User; \nimport org.springframework.security.core.userdetails.UserDetails; \nimport org.springframework.security.core.userdetails.UserDetailsService; \nimport org.springframework.security.crypto.password.NoOpPasswordEncoder; \nimport org.springframework.security.crypto.password.PasswordEncoder; \nimport org.springframework.security.provisioning.InMemoryUserDetailsManager; \nimport org.springframework.security.provisioning.UserDetailsManager; \n@SuppressWarnings(\"deprecation\") @Configuration \npublic class UserConfig extends WebSecurityConfigurerAdapter {\n   @Bean\n   public UserDetailsService userDetailsService() {\n      UserDetailsManager userDetailsManager = new InMemoryUserDetailsManager(); \n         UserDetails user = User.withUsername(\"john\") \n      .password(\"12345\") .authorities(\"read\") .build(); \n      userDetailsManager.createUser(user); return userDetailsManager; \n   } \n   @Bean public PasswordEncoder passwordEncoder() { \n      return NoOpPasswordEncoder.getInstance(); \n    } \n   @Override \n   @Bean \n   public AuthenticationManager authenticationManagerBean() throws Exception {\n      return super.authenticationManagerBean(); \n   }\n   @Override protected void configure(HttpSecurity http) throws Exception {\n      http.formLogin(); http.authorizeRequests().anyRequest().authenticated(); \n   } \n}<\/code><\/pre>\n\n\n\n<p>This completes our setup for the authorization grant type. Now to test our setup and launch our application. We launch our browser at http:\/\/localhost:8080\/oauth\/authorize?response_type=code&amp;client_id=oauthclient2&amp;scope=read. We will redirected to the default form login page of Spring Security.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/oauth_authorization_server_signin.jpg\" alt=\"OAuth Authorization Server Signin\"\/><\/figure>\n\n\n\n<p>Here, the response type code implies that the authorization server will return an access code which will be used by the client to log in. When we use the user credentials we will be asked if I want to grant the permissions asked by the client, in a similar screen as shown below.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/oauth_approval.jpg\" alt=\"OAuth Approval\"\/><\/figure>\n\n\n\n<p>If we approve and click Authorize we shall see we are redirected to our given redirect url along with the access code. In our case the we are redirected to http:\/\/locahost:9090\/?code=7Hibnw, as we specified in the application. We can use the code now as a client in Postman to login to the authorization server.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_security\/images\/postman_authorization.jpg\" alt=\"Postman Authorization\"\/><\/figure>\n\n\n\n<p>As we can see here, we have used the code received from the authorization server in our URL, and the grant_type as authorization_code and scope as read. We acted as the client and provided the client credentials as configured in our application. When we make this request we get back our access_token which we can use further.<\/p>\n\n\n\n<p>So, we have seen how we can configure Spring Security with OAuth 2.0. The application is pretty simple and easy to understand and helps us understand the process fairly easily. We have used two kinds of authorization grant types and seen how we can use them to acquire access tokens for our client application.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Contents OAuth2.0 Fundamentals OAuth2.0 Getting started(Practical Guide) OAuth 2.0 Fundamentals OAuth 2.0&nbsp;was developed by IETF OAuth Working Group and published in October of 2012. It serves as an open authorization protocol for enabling a third party application to get limited access to an HTTP service on behalf of the resource owner. It can do so [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            70
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1676"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1676"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1676\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1677,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1676\/revisions\/1677"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1676"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1676"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1676"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]