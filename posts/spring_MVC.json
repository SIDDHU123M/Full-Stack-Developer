[
    {
        "id": 742,
        "date": "2020-06-27T09:36:24",
        "date_gmt": "2020-06-27T09:36:24",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=742"
        },
        "modified": "2020-06-27T09:36:24",
        "modified_gmt": "2020-06-27T09:36:24",
        "slug": "environment-setup-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-2\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<p>This chapter will guide us on how to prepare a development environment to start your work with the Spring Framework. This chapter will also teach us how to setup&nbsp;<strong>JDK, Tomcat<\/strong>&nbsp;and&nbsp;<strong>Eclipse<\/strong>&nbsp;on your machine before you setup the Spring Framework \u2212<\/p>\n\n\n\n<h2>Step 1 &#8211; Setup Java Development Kit (JDK)<\/h2>\n\n\n\n<p>You can download the latest version from Oracle&#8217;s Java site \u2212\u00a0Java SE Downloads. You will find instructions for installing JDK in downloaded files, follow the given instructions to install and configure the setup. Once done with the setup, set PATH and JAVA_HOME environment variables to refer to the directory that contains<strong>java<\/strong>\u00a0and\u00a0<strong>javac<\/strong>, typically\u00a0<strong>java_install_dir\/bin<\/strong>\u00a0and\u00a0<strong>java_install_dir<\/strong>\u00a0respectively.<\/p>\n\n\n\n<p>If you are running Windows and installed the JDK in\u00a0<strong>C:\\jdk1.6.0_15<\/strong>, you would have to put the following line in your\u00a0<strong>C:\\autoexec.bat file<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>set PATH = C:\\jdk1.6.0_15\\bin;%PATH%\nset JAVA_HOME = C:\\jdk1.6.0_15<\/code><\/pre>\n\n\n\n<p>Alternatively, on Windows NT\/2000\/XP, you could also right-click on My Computer \u2192 select Properties \u2192 Advanced \u2192 Environment Variables. Then, you would update the PATH value and click on the OK button.<\/p>\n\n\n\n<p>On UNIX (Solaris, Linux, etc.), if the SDK is installed in\u00a0<strong>\/usr\/local\/jdk1.6.0_15<\/strong>\u00a0and you use the C shell, then you should key-in the following command into your\u00a0<strong>.cshrc<\/strong>\u00a0file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>setenv PATH \/usr\/local\/jdk1.6.0_15\/bin:$PATH\nsetenv JAVA_HOME \/usr\/local\/jdk1.6.0_15<\/code><\/pre>\n\n\n\n<p>Alternatively, if you use an Integrated Development Environment (IDE) like&nbsp;<strong>Borland JBuilder, Eclipse, IntelliJ IDEA<\/strong>&nbsp;or&nbsp;<strong>Sun ONE Studio<\/strong>, then compile and run a simple program to confirm that the IDE knows where Java is installed, otherwise do proper setup as given in the documents of IDE.<\/p>\n\n\n\n<h2>Step 2 \u2212 Install Apache Common Logging API<\/h2>\n\n\n\n<p>You can download the latest version of Apache Commons Logging API from\u00a0https:\/\/commons.apache.org\/logging\/. Once you have downloaded the installation, unpack the binary distribution into a convenient location.<\/p>\n\n\n\n<p>For example \u2013 C:\\commons-logging-1.1.1 on windows, or \/usr\/local\/commons-logging1.1.1 on Linux\/Unix. This directory will have the following jar files and other supporting documents, etc.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/common_logging_files.jpg\" alt=\"Common Logging API\"\/><\/figure>\n\n\n\n<p>Make sure you set your CLASSPATH variable on this directory properly, otherwise you will face problem while running your application.<\/p>\n\n\n\n<h2>Step 3 &#8211; Setup Eclipse IDE<\/h2>\n\n\n\n<p>All the examples in this tutorial have been written using the Eclipse IDE. Therefore, it is recommended that we should have the latest version of Eclipse installed on the machine.<\/p>\n\n\n\n<p>To install Eclipse IDE, download the latest Eclipse binaries from the following link\u00a0https:\/\/www.eclipse.org\/downloads\/. Once the installation is downloaded, unpack the binary distribution into a convenient location.<\/p>\n\n\n\n<p>For example in \u2013 C:\\eclipse on windows, or \/usr\/local\/eclipse on Linux\/Unix and finally set PATH variable appropriately.<\/p>\n\n\n\n<p>Eclipse can be started by executing the following commands on a windows machine, or we can simply double click on the eclipse.exe.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> %C:\\eclipse\\eclipse.exe\n<\/code><\/pre>\n\n\n\n<p>Eclipse can be started by executing the following commands on a UNIX (Solaris, Linux, etc.) machine \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>$\/usr\/local\/eclipse\/eclipse\n<\/code><\/pre>\n\n\n\n<p>After a successful startup, if everything is fine, then it should display the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/eclipsehomepage.jpg\" alt=\"Eclipse Home page\"\/><\/figure>\n\n\n\n<h2>Step 4 &#8211; Setup Spring Framework Libraries<\/h2>\n\n\n\n<p>Now if everything is fine, then we can proceed to setup the Spring Framework. Following are the steps to download and install the framework on the machine.<\/p>\n\n\n\n<ul><li>Make a choice whether you want to install Spring on Windows or UNIX and then proceed to the next step to download\u00a0<strong>.zip file<\/strong>\u00a0for windows and\u00a0<strong>.tz<\/strong>\u00a0file for Unix.<\/li><li>Download the latest version of Spring framework binaries from\u00a0https:\/\/repo.spring.io\/release\/org\/springframework\/spring.<\/li><li>We have downloaded the\u00a0<strong>spring-framework-4.3.1.RELEASE-dist.zip<\/strong>\u00a0on the Windows Machine and when we unzip the downloaded file, it will give out the directory structure inside \u2013 E:\\spring as follows.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_directories.jpg\" alt=\"Spring Directories\"\/><\/figure>\n\n\n\n<p>You will find all the Spring libraries in the directory&nbsp;<strong>E:\\spring\\libs<\/strong>. Make sure you set your CLASSPATH variable on this directory properly; otherwise, we will face a problem while running the application. If we use Eclipse, then it is not required to set the CLASSPATH because all the setting will be done through Eclipse.<\/p>\n\n\n\n<p>Once you are done with this last step, you are ready to proceed for your first Spring Example, which you will see in the next chapter.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This chapter will guide us on how to prepare a development environment to start your work with the Spring Framework. This chapter will also teach us how to setup&nbsp;JDK, Tomcat&nbsp;and&nbsp;Eclipse&nbsp;on your machine before you setup the Spring Framework \u2212 Step 1 &#8211; Setup Java Development Kit (JDK) You can download the latest version from Oracle&#8217;s [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/742"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=742"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/742\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 754,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/742\/revisions\/754"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=742"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=742"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=742"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 735,
        "date": "2020-06-27T09:37:56",
        "date_gmt": "2020-06-27T09:37:56",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=735"
        },
        "modified": "2020-06-27T18:43:20",
        "modified_gmt": "2020-06-27T18:43:20",
        "slug": "hello-world-example-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/hello-world-example-2\/",
        "title": {
            "rendered": "Hello World Example"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to write a simple web based&nbsp;<strong>Hello World<\/strong>&nbsp;application using the Spring MVC Framework. To start with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a Dynamic Web Project with a name\u00a0<strong>HelloWeb<\/strong>\u00a0and create a package com.codemeals under the src folder in the created project.<\/td><\/tr><tr><td>2<\/td><td>Drag and drop the following Spring and other libraries into the folder&nbsp;<strong>WebContent\/WEB-INF\/lib<\/strong>..<\/td><\/tr><tr><td>3<\/td><td>Create a Java class\u00a0<strong>HelloController<\/strong>\u00a0under the com.codemeals package.<\/td><\/tr><tr><td>4<\/td><td>Create Spring configuration&nbsp;<strong>files web.xml<\/strong>&nbsp;and&nbsp;<strong>HelloWeb-servlet.xml<\/strong>&nbsp;under the WebContent\/WEB-INF folder.<\/td><\/tr><tr><td>5<\/td><td>Create a sub-folder with a name&nbsp;<strong>jsp<\/strong>&nbsp;under the WebContent\/WEB-INFfolder. Create a view file&nbsp;<strong>hello.jsp<\/strong>&nbsp;under this sub-folder.<\/td><\/tr><tr><td>6<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.ui.ModelMap;\n\n@Controller\n@RequestMapping(\"\/hello\")\npublic class HelloController{\n \n   @RequestMapping(method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n\n      return \"hello\";\n   }\n\n}<\/code><\/pre>\n\n\n\n<h2>web.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;web-app id = \"WebApp_ID\" version = \"2.4\"\n   xmlns = \"http:\/\/java.sun.com\/xml\/ns\/j2ee\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"http:\/\/java.sun.com\/xml\/ns\/j2ee \n   http:\/\/java.sun.com\/xml\/ns\/j2ee\/web-app_2_4.xsd\">\n\n   &lt;display-name>Spring MVC Application&lt;\/display-name>\n\n   &lt;servlet>\n      &lt;servlet-name>HelloWeb&lt;\/servlet-name>\n      &lt;servlet-class>\n         org.springframework.web.servlet.DispatcherServlet\n      &lt;\/servlet-class>\n      &lt;load-on-startup>1&lt;\/load-on-startup>\n   &lt;\/servlet>\n\n   &lt;servlet-mapping>\n      &lt;servlet-name>HelloWeb&lt;\/servlet-name>\n      &lt;url-pattern>\/&lt;\/url-pattern>\n   &lt;\/servlet-mapping>\n \n&lt;\/web-app><\/code><\/pre>\n\n\n\n<h2>HelloWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n      &lt;property name = \"suffix\" value = \".jsp\" \/>\n   &lt;\/bean>\n \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Following is the list of Spring and other libraries to be included in the web application. We can just drag these files and drop them in \u2013&nbsp;<strong>WebContent\/WEB-INF\/lib<\/strong>&nbsp;folder.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>servlet-api-x.y.z.jar\ncommons-logging-x.y.z.jar\nspring-aop-x.y.z.jar\nspring-beans-x.y.z.jar\nspring-context-x.y.z.jar\nspring-core-x.y.z.jar\nspring-expression-x.y.z.jar\nspring-webmvc-x.y.z.jar\nspring-web-x.y.z.jar<\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your&nbsp;<strong>HelloWeb.war<\/strong>&nbsp;file in Tomcat&#8217;s&nbsp;<strong>webapps<\/strong>&nbsp;folder.<\/p>\n\n\n\n<p>Now start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Now, try to access the URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/hello<\/strong>. If everything is fine with the Spring Web Application, we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_web_hello_world.png\" alt=\"Spring Web Hello World\"\/><\/figure>\n\n\n\n<p>You should note that in the given URL,&nbsp;<strong>HelloWeb<\/strong>&nbsp;is the application name and hello is the virtual subfolder, which we have mentioned in our controller using @RequestMapping(&#8220;\/hello&#8221;). You can use direct root while mapping your URL using&nbsp;<strong>@RequestMapping(&#8220;\/&#8221;)<\/strong>, in this case you can access the same page using short URL&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/<\/strong>, but it is advised to have different functionalities under different folders.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to write a simple web based&nbsp;Hello World&nbsp;application using the Spring MVC Framework. To start with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Web Application using the Spring Web Framework. Step Description 1 Create a Dynamic Web Project with a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/735"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=735"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/735\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 803,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/735\/revisions\/803"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=735"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=735"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=735"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 745,
        "date": "2020-06-27T09:40:28",
        "date_gmt": "2020-06-27T09:40:28",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=745"
        },
        "modified": "2020-06-27T18:44:31",
        "modified_gmt": "2020-06-27T18:44:31",
        "slug": "form-handling-example",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/form-handling-example\/",
        "title": {
            "rendered": "Form Handling Example"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to write a simple web based&nbsp;<strong>Hello World<\/strong>&nbsp;application using the Spring MVC Framework. To start with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes Student, StudentController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files student.jsp, result.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Student.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>StudentController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class StudentController {\n\n   @RequestMapping(value = \"\/student\", method = RequestMethod.GET)\n   public ModelAndView student() {\n      return new ModelAndView(\"student\", \"command\", new Student());\n   }\n   \n   @RequestMapping(value = \"\/addStudent\", method = RequestMethod.POST)\n   public String addStudent(@ModelAttribute(\"SpringWeb\")Student student, \n   ModelMap model) {\n      model.addAttribute(\"name\", student.getName());\n      model.addAttribute(\"age\", student.getAge());\n      model.addAttribute(\"id\", student.getId());\n      \n      return \"result\";\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here, the first service method&nbsp;<strong>student()<\/strong>, we have passed a blank Studentobject in the ModelAndView object with name &#8220;command&#8221;. This is done because the spring framework expects an object with name &#8220;command&#8221;, if we use &lt;form:form&gt; tags in the JSP file. So, when the student() method is called, it returns student.jsp view.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>addStudent()<\/strong>&nbsp;will be called against a POST method on the HelloWeb\/addStudent URL. You will prepare your model object based on the submitted information. Finally, a &#8220;result&#8221; view will be returned from the service method, which will result in rendering result.jsp.<\/p>\n\n\n\n<h2>student.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri=\"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;h2>Student Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addStudent\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"name\">Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"name\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"age\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"age\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"id\">id&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"id\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td colspan = \"2\">\n                  &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>result.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Submitted Student Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Name&lt;\/td>\n            &lt;td>${name}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Age&lt;\/td>\n            &lt;td>${age}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>ID&lt;\/td>\n            &lt;td>${id}&lt;\/td>\n         &lt;\/tr>\n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once we are done with creating source and configuration files, export your application. Right click on your application, use Export \u2192 WAR File option and save the&nbsp;<strong>SpringWeb.war<\/strong>&nbsp;file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Now, try a URL\u2013 http:\/\/localhost:8080\/SpringWeb\/student and you should see the following screen if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/student_form.png\" alt=\"Spring Student Form\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with your Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_student_form_result.png\" alt=\"Spring Student Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to write a simple web based&nbsp;Hello World&nbsp;application using the Spring MVC Framework. To start with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Web Application using the Spring Web Framework. Step Description 1 Create a project with a name HelloWeb [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/745"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=745"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/745\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 804,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/745\/revisions\/804"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=745"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=745"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=745"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 744,
        "date": "2020-06-27T09:43:35",
        "date_gmt": "2020-06-27T09:43:35",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=744"
        },
        "modified": "2020-06-27T18:44:56",
        "modified_gmt": "2020-06-27T18:44:56",
        "slug": "page-redirection",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/page-redirection\/",
        "title": {
            "rendered": "Page Redirection"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to write a simple web based application, which makes use of redirect to transfer an http request to another page. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using Spring Web Framework \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java class WebController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files index.jsp, final.jsp under jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>WebController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\npublic class WebController {\n\n   @RequestMapping(value = \"\/index\", method = RequestMethod.GET)\n   public String index() {\n\t   return \"index\";\n   }\n   \n   @RequestMapping(value = \"\/redirect\", method = RequestMethod.GET)\n   public String redirect() {\n     \n      return \"redirect:finalPage\";\n   }\n   \n   @RequestMapping(value = \"\/finalPage\", method = RequestMethod.GET)\n   public String finalPage() {\n     \n      return \"final\";\n   }\n}<\/code><\/pre>\n\n\n\n<p>Following is the content of Spring view file&nbsp;<strong>index.jsp<\/strong>. This will be a landing page, this page will send a request to the access-redirect service method, which will redirect this request to another service method and finally a&nbsp;<strong>final.jsp<\/strong>page will be displayed.<\/p>\n\n\n\n<h2>index.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring Page Redirection&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>Spring Page Redirection&lt;\/h2>\n      &lt;p>Click below button to redirect the result to new page&lt;\/p>\n      &lt;form:form method = \"GET\" action = \"\/HelloWeb\/redirect\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>\n                  &lt;input type = \"submit\" value = \"Redirect Page\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>final.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   \n   &lt;head>\n      &lt;title>Spring Page Redirection&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;h2>Redirected Page&lt;\/h2>\n   &lt;\/body>\n\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use Export \u2192 WAR File option and save your HelloWeb.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL \u2013http:\/\/localhost:8080\/HelloWeb\/index and you should see the following screen if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_redirect_form.jpg\" alt=\"Spring Redirect Form\"\/><\/figure>\n\n\n\n<p>Now click on the &#8220;Redirect Page&#8221; button to submit the form and to get to the final redirected page. We should see the following screen, if everything is fine with our Spring Web Application \u2212<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_redirect_form_result.png\" alt=\"Spring Redirect Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to write a simple web based application, which makes use of redirect to transfer an http request to another page. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using Spring Web Framework \u2212 [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/744"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=744"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/744\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 805,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/744\/revisions\/805"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=744"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=744"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=744"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 737,
        "date": "2020-06-27T09:45:06",
        "date_gmt": "2020-06-27T09:45:06",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=737"
        },
        "modified": "2020-06-27T18:45:37",
        "modified_gmt": "2020-06-27T18:45:37",
        "slug": "static-pages",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/static-pages\/",
        "title": {
            "rendered": "Static Pages"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to write a simple web based application using Spring MVC Framework, which can access static pages along with dynamic pages with the help of a&nbsp;<strong>&lt;mvc:resources&gt;<\/strong>&nbsp;tag.<\/p>\n\n\n\n<p>To begin with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java class WebController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create a static file&nbsp;<strong>final.htm<\/strong>&nbsp;under jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>Update the Spring configuration file HelloWeb-servlet.xml under the WebContent\/WEB-INF folder as shown below.<\/td><\/tr><tr><td>5<\/td><td>The final step is to create the content of the source and configuration files and export the application, which is explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>WebController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n@Controller\npublic class WebController {\n\n   @RequestMapping(value = \"\/index\", method = RequestMethod.GET)\n   public String index() {\n\t   return \"index\";\n   }\n   \n   @RequestMapping(value = \"\/staticPage\", method = RequestMethod.GET)\n   public String redirect() {\n     \n      return \"redirect:\/pages\/final.htm\";\n   }\n}<\/code><\/pre>\n\n\n\n<h2>HelloWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?>\n&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:xsi = \"  http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:mvc = \"http:\/\/www.springframework.org\/schema\/mvc\"\n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans\n   http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-2.5.xsd\n   http:\/\/www.springframework.org\/schema\/mvc\n   http:\/\/www.springframework.org\/schema\/mvc\/spring-mvc-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context\n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n \n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n     \n   &lt;bean id = \"viewResolver\" class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n   \n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n      &lt;property name = \"suffix\" value = \".jsp\" \/>\n   &lt;\/bean>\n   &lt;mvc:resources mapping = \"\/pages\/**\" location = \"\/WEB-INF\/pages\/\" \/>\n   &lt;mvc:annotation-driven\/>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Here, the&nbsp;<strong>&lt;mvc:resources&#8230;.\/&gt;<\/strong>&nbsp;tag is being used to map static pages. The mapping attribute must be an&nbsp;<strong>Ant pattern<\/strong>&nbsp;that specifies the URL pattern of an http requests. The location attribute must specify one or more valid resource directory locations having static pages including images, stylesheets, JavaScript, and other static content. Multiple resource locations may be specified using a comma-separated list of values.<\/p>\n\n\n\n<p>Following is the content of Spring view file&nbsp;<strong>WEB-INF\/jsp\/index.jsp<\/strong>. This will be a landing page; this page will send a request to access the&nbsp;<strong>staticPage service method<\/strong>, which will redirect this request to a static page available in WEB-INF\/pages folder.<\/p>\n\n\n\n<h2>index.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring Landing Page&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>Spring Landing Pag&lt;\/h2>\n      &lt;p>Click below button to get a simple HTML page&lt;\/p>\n      &lt;form:form method = \"GET\" action = \"\/HelloWeb\/staticPage\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>\n                  &lt;input type = \"submit\" value = \"Get HTML Page\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>final.htm<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>Spring Static Page&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>A simple HTML page&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use Export \u2192 WAR File option and save your HelloWeb.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Now try to access the URL \u2013 http:\/\/localhost:8080\/HelloWeb\/index. If everything is fine with the Spring Web Application, we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_static_page.png\" alt=\"Spring static page\"\/><\/figure>\n\n\n\n<p>Click on &#8220;Get HTML Page&#8221; button to access a static page mentioned in the staticPage service method. If everything is fine with your Spring Web Application, we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_static_page_result.png\" alt=\"Spring static page Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to write a simple web based application using Spring MVC Framework, which can access static pages along with dynamic pages with the help of a&nbsp;&lt;mvc:resources&gt;&nbsp;tag. To begin with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/737"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=737"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/737\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 806,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/737\/revisions\/806"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=737"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=737"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=737"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 746,
        "date": "2020-06-27T09:50:48",
        "date_gmt": "2020-06-27T09:50:48",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=746"
        },
        "modified": "2020-06-27T18:46:19",
        "modified_gmt": "2020-06-27T18:46:19",
        "slug": "text-box",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/text-box\/",
        "title": {
            "rendered": "Text Box"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to use Text boxes in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World Example chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java classes Student, StudentController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create a view files student.jsp, result.jsp under jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Student.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>StudentController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class StudentController {\n\n   @RequestMapping(value = \"\/student\", method = RequestMethod.GET)\n   public ModelAndView student() {\n      return new ModelAndView(\"student\", \"command\", new Student());\n   }\n   \n   @RequestMapping(value = \"\/addStudent\", method = RequestMethod.POST)\n   public String addStudent(@ModelAttribute(\"SpringWeb\")Student student, \n      ModelMap model) {\n      model.addAttribute(\"name\", student.getName());\n      model.addAttribute(\"age\", student.getAge());\n      model.addAttribute(\"id\", student.getId());\n      \n      return \"result\";\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here, the first service method&nbsp;<strong>student()<\/strong>, we have passed a blank Studentobject in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using&nbsp;<strong>&lt;form:form&gt;<\/strong>&nbsp;tags in your JSP file. So, when the student() method is called it returns&nbsp;<strong>student.jsp view<\/strong>.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>addStudent()<\/strong>&nbsp;will be called against a POST method on the&nbsp;<strong>HelloWeb\/addStudent<\/strong>&nbsp;URL. You will prepare your model object based on the submitted information. Finally, a &#8220;result&#8221; view will be returned from the service method, which will result in rendering result.jsp<\/p>\n\n\n\n<h2>student.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Student Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addStudent\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"name\">Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"name\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"age\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"age\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"id\">id&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"id\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td colspan = \"2\">\n                  &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using&nbsp;<strong>&lt;form:input \/&gt;<\/strong>&nbsp;tag to render an HTML text box. For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:input path = \"name\" \/><\/code><\/pre>\n\n\n\n<p>It will render following HTML content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input id = \"name\" name = \"name\" type = \"text\" value = \"\"\/>\n<\/code><\/pre>\n\n\n\n<h2>result.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Submitted Student Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Name&lt;\/td>\n            &lt;td>${name}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Age&lt;\/td>\n            &lt;td>${age}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>ID&lt;\/td>\n            &lt;td>${id}&lt;\/td>\n         &lt;\/tr>\n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once we are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>HelloWeb.war<\/strong>&nbsp;file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2013&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/student<\/strong>&nbsp;and we will see the following screen if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/text_box_spring_student_form.png\" alt=\"Textbox Spring Student Form\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. We should see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/text_box_spring_student_form_result.png\" alt=\"Textbox Spring Student Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to use Text boxes in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework \u2212 Step Description 1 Create a project [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/746"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=746"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/746\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 807,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/746\/revisions\/807"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=746"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=746"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=746"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 736,
        "date": "2020-06-27T09:55:53",
        "date_gmt": "2020-06-27T09:55:53",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=736"
        },
        "modified": "2020-06-27T18:46:51",
        "modified_gmt": "2020-06-27T18:46:51",
        "slug": "password-example",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/password-example\/",
        "title": {
            "rendered": "Password Example"
        },
        "content": {
            "rendered": "\n<p>The following example describes how to use Password in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes User, UserController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files user.jsp, users.jsp under jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>User.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class User {\n\t\n   private String username;\n   private String password;\n\n   public String getUsername() {\n      return username;\n   }\n   public void setUsername(String username) {\n      this.username = username;\n   }\n\n   public String getPassword() {\n      return password;\n   }\n   public void setPassword(String password) {\n      this.password = password;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>UserController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class UserController {\n\n   @RequestMapping(value = \"\/user\", method = RequestMethod.GET)\n   public ModelAndView user() {\n      return new ModelAndView(\"user\", \"command\", new User());\n   }\n\n   @RequestMapping(value = \"\/addUser\", method = RequestMethod.POST)\n   public String addUser(@ModelAttribute(\"SpringWeb\")User user, \n      ModelMap model) {\n      model.addAttribute(\"username\", user.getUsername());\n      model.addAttribute(\"password\", user.getPassword());\n\n      return \"users\";\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here, the first service method&nbsp;<strong>user()<\/strong>, we have passed a blank User object in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when the user() method is called it returns user.jsp view.<\/p>\n\n\n\n<p>The Second service method&nbsp;<strong>addUser()<\/strong>&nbsp;will be called against a POST method on the HelloWeb\/addUser URL. You will prepare your model object based on the submitted information. Finally, the &#8220;users&#8221; view will be returned from the service method, which will result in rendering the users.jsp.<\/p>\n\n\n\n<h2>user.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>User Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addUser\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"username\">User Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"username\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"password\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:password path = \"password\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td colspan = \"2\">\n                  &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using the &lt;form:password \/&gt; tag to render an HTML password box. For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:password path = \"password\" \/>\n<\/code><\/pre>\n\n\n\n<p>It will render the following HTML content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input id = \"password\" name = \"password\" type = \"password\" value = \"\"\/><\/code><\/pre>\n\n\n\n<h2>users.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>Submitted User Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Username&lt;\/td>\n            &lt;td>${username}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Password&lt;\/td>\n            &lt;td>${password}&lt;\/td>\n         &lt;\/tr>    \n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once we are done with creating source and configuration files, export the application. Right click on your application, use Export \u2192 WAR File option and save your HelloWeb.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2013http:\/\/localhost:8080\/HelloWeb\/user and we will see the following screen if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_password.png\" alt=\"Spring Password Form\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_password_result.png\" alt=\"Spring Password Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example describes how to use Password in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/736"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=736"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/736\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 808,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/736\/revisions\/808"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=736"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=736"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=736"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 749,
        "date": "2020-06-27T09:58:03",
        "date_gmt": "2020-06-27T09:58:03",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=749"
        },
        "modified": "2020-06-27T18:47:28",
        "modified_gmt": "2020-06-27T18:47:28",
        "slug": "textarea",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/textarea\/",
        "title": {
            "rendered": "TextArea"
        },
        "content": {
            "rendered": "\n<p>The following example explains how to use TextArea in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC \u2212 Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes User, UserController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files user.jsp, users.jsp under jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>User.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class User {\n\t\n   private String username;\n   private String password;\n   private String address;\n\n   public String getUsername() {\n      return username;\n   }\n   public void setUsername(String username) {\n      this.username = username;\n   }\n\n   public String getPassword() {\n      return password;\n   }\n   public void setPassword(String password) {\n      this.password = password;\n   }\n   public String getAddress() {\n      return address;\n   }\n   public void setAddress(String address) {\n      this.address = address;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>UserController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class UserController {\n\n   @RequestMapping(value = \"\/user\", method = RequestMethod.GET)\n   public ModelAndView user() {\n      return new ModelAndView(\"user\", \"command\", new User());\n   }\n\n   @RequestMapping(value = \"\/addUser\", method = RequestMethod.POST)\n   public String addUser(@ModelAttribute(\"SpringWeb\")User user, \n      ModelMap model) {\n      model.addAttribute(\"username\", user.getUsername());\n      model.addAttribute(\"password\", user.getPassword());\n      model.addAttribute(\"address\", user.getAddress());\n\t  \n      return \"users\";\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here, for the first service method user(), we have passed a blank User object in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when the user() method is called, it returns the user.jsp view.<\/p>\n\n\n\n<p>The second service method addUser() will be called against a POST method on the HelloWeb\/addUser URL. You will prepare your model object based on the submitted information. Finally, the &#8220;users&#8221; view will be returned from the service method, which will result in rendering the users.jsp.<\/p>\n\n\n\n<h2>user.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n   &lt;h2>User Information&lt;\/h2>\n   &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addUser\">\n      &lt;table>\n         &lt;tr>\n            &lt;td>&lt;form:label path = \"username\">User Name&lt;\/form:label>&lt;\/td>\n            &lt;td>&lt;form:input path = \"username\" \/>&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>&lt;form:label path = \"password\">Age&lt;\/form:label>&lt;\/td>\n            &lt;td>&lt;form:password path = \"password\" \/>&lt;\/td>\n         &lt;\/tr>  \n         &lt;tr>\n            &lt;td>&lt;form:label path = \"address\">Address&lt;\/form:label>&lt;\/td>\n            &lt;td>&lt;form:textarea path = \"address\" rows = \"5\" cols = \"30\" \/>&lt;\/td>\n         &lt;\/tr>  \n         &lt;tr>\n            &lt;td colspan = \"2\">\n               &lt;input type = \"submit\" value = \"Submit\"\/>\n            &lt;\/td>\n         &lt;\/tr>\n      &lt;\/table>  \n   &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using&nbsp;<strong>&lt;form:textarea \/&gt;<\/strong>&nbsp;tag to render a HTML textarea box. For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:textarea path = \"address\" rows = \"5\" cols = \"30\" \/><\/code><\/pre>\n\n\n\n<p>It will render the following HTML content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;textarea id = \"address\" name = \"address\" rows = \"5\" cols = \"30\">&lt;\/textarea><\/code><\/pre>\n\n\n\n<h2>users.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Submitted User Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Username&lt;\/td>\n            &lt;td>${username}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Password&lt;\/td>\n            &lt;td>${password}&lt;\/td>\n         &lt;\/tr>    \n         &lt;tr>\n            &lt;td>Address&lt;\/td>\n            &lt;td>${address}&lt;\/td>\n         &lt;\/tr>   \n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use Export \u2192 WAR File option and save your HelloWeb.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL \u2013http:\/\/localhost:8080\/HelloWeb\/user and we will see the following screen if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_textarea.png\" alt=\"Spring TextArea Form\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_textarea_result.png\" alt=\"Spring TextArea Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example explains how to use TextArea in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with a name [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/749"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=749"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/749\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 809,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/749\/revisions\/809"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=749"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=749"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=749"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 753,
        "date": "2020-06-27T10:00:20",
        "date_gmt": "2020-06-27T10:00:20",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=753"
        },
        "modified": "2020-06-27T18:23:19",
        "modified_gmt": "2020-06-27T18:23:19",
        "slug": "checkbox",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/checkbox\/",
        "title": {
            "rendered": "Checkbox"
        },
        "content": {
            "rendered": "\n<p>The following example describes how to use a Single Checkbox in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World Example chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes User, UserController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create a view files user.jsp, users.jsp under jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>User.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class User {\n\t\n   private String username;\n   private String password;\n   private String address;\n   private boolean receivePaper;\t\n\n   public String getUsername() {\n      return username;\n   }\n   public void setUsername(String username) {\n      this.username = username;\n   }\n\n   public String getPassword() {\n      return password;\n   }\n   public void setPassword(String password) {\n      this.password = password;\n   }\n   public String getAddress() {\n      return address;\n   }\n   public void setAddress(String address) {\n      this.address = address;\n   }\n   public boolean isReceivePaper() {\n      return receivePaper;\n   }\n   public void setReceivePaper(boolean receivePaper) {\n      this.receivePaper = receivePaper;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>UserController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class UserController {\n\n   @RequestMapping(value = \"\/user\", method = RequestMethod.GET)\n   public ModelAndView user() {\n      return new ModelAndView(\"user\", \"command\", new User());\n   }\n\n   @RequestMapping(value = \"\/addUser\", method = RequestMethod.POST)\n   public String addUser(@ModelAttribute(\"SpringWeb\")User user, \n      ModelMap model) {\n      model.addAttribute(\"username\", user.getUsername());\n      model.addAttribute(\"password\", user.getPassword());\n      model.addAttribute(\"address\", user.getAddress());\n      model.addAttribute(\"receivePaper\", user.isReceivePaper());\n      return \"users\";\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here, for the first service method user(), we have passed a blank User object in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when the user() method is called it returns the user.jsp view.<\/p>\n\n\n\n<p>The second service method addUser() will be called against a POST method on the HelloWeb\/addUser URL. You will prepare your model object based on the submitted information. Finally, the &#8220;users&#8221; view will be returned from the service method, which will result in rendering the users.jsp.<\/p>\n\n\n\n<h2>user.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>User Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addUser\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"username\">User Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"username\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"password\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:password path = \"password\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"address\">Address&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:textarea path = \"address\" rows = \"5\" cols = \"30\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"receivePaper\">Subscribe Newsletter&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:checkbox path = \"receivePaper\" \/>&lt;\/td>\n            &lt;\/tr> \n            &lt;tr>\n               &lt;td colspan = \"2\">\n                  &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using&nbsp;<strong>&lt;form:checkboxes \/&gt;<\/strong>&nbsp;tag to render an HTML checkbox box.<\/p>\n\n\n\n<p>For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:checkbox path=\"receivePaper\" \/><\/code><\/pre>\n\n\n\n<p>It will render following HTML content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input id=\"receivePaper1\" name = \"receivePaper\" type = \"checkbox\" value = \"true\"\/>\n&lt;input type = \"hidden\" name = \"_receivePaper\" value = \"on\"\/><\/code><\/pre>\n\n\n\n<h2>users.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Submitted User Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Username&lt;\/td>\n            &lt;td>${username}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Password&lt;\/td>\n            &lt;td>${password}&lt;\/td>\n         &lt;\/tr>    \n         &lt;tr>\n            &lt;td>Address&lt;\/td>\n            &lt;td>${address}&lt;\/td>\n         &lt;\/tr>  \n         &lt;tr>\n            &lt;td>Subscribed to Newsletter&lt;\/td>\n            &lt;td>${receivePaper}&lt;\/td>\n         &lt;\/tr>    \t  \n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use Export \u2192 WAR File option and save your HelloWeb.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL \u2013 http:\/\/localhost:8080\/HelloWeb\/user and we will see the following screen if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_checkbox.png\" alt=\"Spring Checkbox Form\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_checkbox_result.png\" alt=\"Spring Checkbox Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example describes how to use a Single Checkbox in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/753"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=753"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/753\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 783,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/753\/revisions\/783"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=753"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=753"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=753"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 743,
        "date": "2020-06-27T10:02:45",
        "date_gmt": "2020-06-27T10:02:45",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=743"
        },
        "modified": "2020-06-27T18:23:53",
        "modified_gmt": "2020-06-27T18:23:53",
        "slug": "radiobutton",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/radiobutton\/",
        "title": {
            "rendered": "RadioButton"
        },
        "content": {
            "rendered": "\n<p>The following example show how to use RadioButton in forms using the Spring Web MVC framework. To start with it, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using Spring Web Framework \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes User, UserController under the com.codemealspackage.<\/td><\/tr><tr><td>3<\/td><td>Create view files user.jsp, users.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>User.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class User {\n\t\n   private String username;\n   private String password;\n   private String address;\n   private boolean receivePaper;\n   private String &#91;] favoriteFrameworks;   \n   private String gender;\n   \n   public String getUsername() {\n      return username;\n   }\n   public void setUsername(String username) {\n      this.username = username;\n   }\n\n   public String getPassword() {\n      return password;\n   }\n   public void setPassword(String password) {\n      this.password = password;\n   }\n   public String getAddress() {\n      return address;\n   }\n   public void setAddress(String address) {\n      this.address = address;\n   }\n   public boolean isReceivePaper() {\n      return receivePaper;\n   }\n   public void setReceivePaper(boolean receivePaper) {\n      this.receivePaper = receivePaper;\n   }\n   public String&#91;] getFavoriteFrameworks() {\n      return favoriteFrameworks;\n   }\n   public void setFavoriteFrameworks(String&#91;] favoriteFrameworks) {\n      this.favoriteFrameworks = favoriteFrameworks;\n   }\n   public String getGender() {\n      return gender;\n   }\n   public void setGender(String gender) {\n      this.gender = gender;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>UserController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class UserController {\n\n   @RequestMapping(value = \"\/user\", method = RequestMethod.GET)\n   public ModelAndView user() {\n      User user = new User();\t  \n\t  user.setFavoriteFrameworks((new String &#91;]{\"Spring MVC\",\"Struts 2\"}));\n      user.setGender(\"M\");\n\t  ModelAndView modelAndView = new ModelAndView(\"user\", \"command\", user);\n\t  return modelAndView;\n   }\n\n   @RequestMapping(value = \"\/addUser\", method = RequestMethod.POST)\n   public String addUser(@ModelAttribute(\"SpringWeb\")User user, \n      ModelMap model) {\n      model.addAttribute(\"username\", user.getUsername());\n      model.addAttribute(\"password\", user.getPassword());\n      model.addAttribute(\"address\", user.getAddress());\n      model.addAttribute(\"receivePaper\", user.isReceivePaper());\n\t  model.addAttribute(\"favoriteFrameworks\", user.getFavoriteFrameworks());\n      model.addAttribute(\"gender\", user.getGender());\n      return \"users\";\n   }\n   \n   @ModelAttribute(\"webFrameworkList\")\n   public List&lt;String> getWebFrameworkList()\n   {\n      List&lt;String> webFrameworkList = new ArrayList&lt;String>();\n      webFrameworkList.add(\"Spring MVC\");\n      webFrameworkList.add(\"Struts 1\");\n      webFrameworkList.add(\"Struts 2\");\n      webFrameworkList.add(\"Apache Wicket\");\n      return webFrameworkList;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here, the first service method&nbsp;<strong>user()<\/strong>, we have passed a blank&nbsp;<strong>User<\/strong>&nbsp;object in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when the&nbsp;<strong>user()<\/strong>&nbsp;method is called, it returns the&nbsp;<strong>user.jsp<\/strong>&nbsp;view.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>addUser()<\/strong>&nbsp;will be called against a POST method on the&nbsp;<strong>HelloWeb\/addUser<\/strong>&nbsp;URL. You will prepare your model object based on the submitted information. Finally, the &#8220;users&#8221; view will be returned from the service method, which will result in rendering the users.jsp.<\/p>\n\n\n\n<h2>user.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>User Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addUser\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"username\">User Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"username\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"password\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:password path = \"password\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"address\">Address&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:textarea path = \"address\" rows = \"5\" cols = \"30\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"receivePaper\">Subscribe Newsletter&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:checkbox path = \"receivePaper\" \/>&lt;\/td>\n            &lt;\/tr> \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"favoriteFrameworks\">Favorite Web Frameworks&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:checkboxes items = \"${webFrameworkList}\" path = \"favoriteFrameworks\" \/>&lt;\/td>       \n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"gender\">Gender&lt;\/form:label>&lt;\/td>\n               &lt;td>\n                  &lt;form:radiobutton path = \"gender\" value = \"M\" label = \"Male\" \/>\n                  &lt;form:radiobutton path = \"gender\" value = \"F\" label = \"Female\" \/>\n               &lt;\/td>\n            &lt;\/tr> \t  \n            &lt;tr>\n               &lt;td colspan = \"2\">\n                  &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using&nbsp;<strong>&lt;form:radiobutton \/&gt;<\/strong>&nbsp;tag to render HTML radiobutton.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:radiobutton path = \"gender\" value = \"M\" label = \"Male\" \/>\n&lt;form:radiobutton path = \"gender\" value = \"F\" label = \"Female\" \/><\/code><\/pre>\n\n\n\n<p>It will render following HTML content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input id = \"gender1\" name = \"gender\" type = \"radio\" value = \"M\" checked = \"checked\"\/>&lt;label for = \"gender1\">Male&lt;\/label>\n&lt;input id = \"gender2\" name = \"gender\" type = \"radio\" value = \"F\"\/>&lt;label for = \"gender2\">Female&lt;\/label><\/code><\/pre>\n\n\n\n<h2>users.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri=\"http:\/\/www.springframework.org\/tags\/form\" prefix=\"form\"%>\n&lt;html>\n&lt;head>\n    &lt;title>Spring MVC Form Handling&lt;\/title>\n&lt;\/head>\n   &lt;body>\n\n      &lt;h2>Submitted User Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Username&lt;\/td>\n            &lt;td>${username}&lt;\/td>\n         &lt;\/tr>\n         \n         &lt;tr>\n            &lt;td>Password&lt;\/td>\n            &lt;td>${password}&lt;\/td>\n         &lt;\/tr>    \n         \n         &lt;tr>\n            &lt;td>Address&lt;\/td>\n            &lt;td>${address}&lt;\/td>\n         &lt;\/tr>  \n         \n         &lt;tr>\n            &lt;td>Subscribed to Newsletter&lt;\/td>\n            &lt;td>${receivePaper}&lt;\/td>\n         &lt;\/tr>    \n         \n         &lt;tr>\n            &lt;td>Favorite Web Frameworks&lt;\/td>\n            &lt;td> &lt;% String&#91;] favoriteFrameworks = (String&#91;])request.getAttribute(\"favoriteFrameworks\");\n               for(String framework: favoriteFrameworks) {\n                  out.println(framework);\n               }\n            %>&lt;\/td>\n         &lt;\/tr>     \t \n         \n         &lt;tr>\n            &lt;td>Gender&lt;\/td>\n            &lt;td>${(gender==\"M\"? \"Male\" : \"Female\")}&lt;\/td>\n         &lt;\/tr>    \t  \n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>HelloWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL \u2013&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/user<\/strong>&nbsp;and we will see the following screen, if everything is fine with your Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_radiobutton.png\" alt=\"Spring RadioButton Form\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_radiobutton_result.png\" alt=\"Spring RadioButton Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example show how to use RadioButton in forms using the Spring Web MVC framework. To start with it, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using Spring Web Framework \u2212 Step Description 1 Create a project with [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/743"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=743"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/743\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 784,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/743\/revisions\/784"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=743"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=743"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=743"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 741,
        "date": "2020-06-27T10:04:57",
        "date_gmt": "2020-06-27T10:04:57",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=741"
        },
        "modified": "2020-07-16T17:01:59",
        "modified_gmt": "2020-07-16T17:01:59",
        "slug": "radiobuttons",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/radiobuttons\/",
        "title": {
            "rendered": "RadioButtons"
        },
        "content": {
            "rendered": "\n<p>The following example explains how to use RadioButtons in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes User, UserController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files user.jsp, users.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>User.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class User {\n\t\n   private String username;\n   private String password;\n   private String address;\n   private boolean receivePaper;\n   private String &#91;] favoriteFrameworks;   \n   private String gender;\n   private String favoriteNumber;\n   \n   public String getUsername() {\n      return username;\n   }\n   public void setUsername(String username) {\n      this.username = username;\n   }\n\n   public String getPassword() {\n      return password;\n   }\n   public void setPassword(String password) {\n      this.password = password;\n   }\n   public String getAddress() {\n      return address;\n   }\n   public void setAddress(String address) {\n      this.address = address;\n   }\n   public boolean isReceivePaper() {\n      return receivePaper;\n   }\n   public void setReceivePaper(boolean receivePaper) {\n      this.receivePaper = receivePaper;\n   }\n   public String&#91;] getFavoriteFrameworks() {\n      return favoriteFrameworks;\n   }\n   public void setFavoriteFrameworks(String&#91;] favoriteFrameworks) {\n      this.favoriteFrameworks = favoriteFrameworks;\n   }\n   public String getGender() {\n      return gender;\n   }\n   public void setGender(String gender) {\n      this.gender = gender;\n   }\n   public String getFavoriteNumber() {\n      return favoriteNumber;\n   }\n   public void setFavoriteNumber(String favoriteNumber) {\n      this.favoriteNumber = favoriteNumber;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>UserController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class UserController {\n\n@RequestMapping(value = \"\/user\", method = RequestMethod.GET)\npublic ModelAndView user() {\nUser user = new User();\nuser.setFavoriteFrameworks((new String &#91;]{\"Spring MVC\",\"Struts 2\"}));\nuser.setGender(\"M\");\nModelAndView modelAndView = new ModelAndView(\"user\", \"command\", user);\nreturn modelAndView;\n}\n\n@RequestMapping(value = \"\/addUser\", method = RequestMethod.POST)\npublic String addUser(@ModelAttribute(\"SpringWeb\")User user,\nModelMap model) {\nmodel.addAttribute(\"username\", user.getUsername());\nmodel.addAttribute(\"password\", user.getPassword());\nmodel.addAttribute(\"address\", user.getAddress());\nmodel.addAttribute(\"receivePaper\", user.isReceivePaper());\nmodel.addAttribute(\"favoriteFrameworks\", user.getFavoriteFrameworks());\nmodel.addAttribute(\"gender\", user.getGender());\nmodel.addAttribute(\"favoriteNumber\", user.getFavoriteNumber());\nreturn \"users\";\n}\n\n@ModelAttribute(\"webFrameworkList\")\npublic List&lt;String> getWebFrameworkList() {\nList&lt;String> webFrameworkList = new ArrayList&lt;String>();\nwebFrameworkList.add(\"Spring MVC\");\nwebFrameworkList.add(\"Struts 1\");\nwebFrameworkList.add(\"Struts 2\");\nwebFrameworkList.add(\"Apache Wicket\");\nreturn webFrameworkList;\n}\n\n@ModelAttribute(\"numbersList\")\npublic List&lt;String> getNumbersList() {\nList&lt;String> numbersList = new ArrayList&lt;String>();\nnumbersList.add(\"1\");\nnumbersList.add(\"2\");\nnumbersList.add(\"3\");\nnumbersList.add(\"4\");\nreturn numbersList;\n}\n}<\/code><\/pre>\n\n\n\n<p>Here, for the first service method user(), we have passed a blank User object in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when user() method is called, it returns the user.jsp view.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>addUser()<\/strong>&nbsp;will be called against a POST method on the&nbsp;<strong>HelloWeb\/addUser<\/strong>&nbsp;URL. You will prepare your model object based on the submitted information. Finally, the &#8220;users&#8221; view will be returned from the service method, which will result in rendering the users.jsp.<\/p>\n\n\n\n<h2>user.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>User Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addUser\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"username\">User Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"username\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"password\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:password path = \"password\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"address\">Address&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:textarea path = \"address\" rows = \"5\" cols = \"30\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"receivePaper\">Subscribe Newsletter&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:checkbox path = \"receivePaper\" \/>&lt;\/td>\n            &lt;\/tr> \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"favoriteFrameworks\">Favorite Web Frameworks&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:checkboxes items = \"${webFrameworkList}\" path = \"favoriteFrameworks\" \/>&lt;\/td> \n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"gender\">Gender&lt;\/form:label>&lt;\/td>\n               &lt;td>\n                  &lt;form:radiobutton path = \"gender\" value = \"M\" label = \"Male\" \/>\n                  &lt;form:radiobutton path = \"gender\" value = \"F\" label = \"Female\" \/>\n               &lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"favoriteNumber\">Favorite Number&lt;\/form:label>&lt;\/td>\n               &lt;td>\n                  &lt;form:radiobuttons path = \"favoriteNumber\" items = \"${numbersList}\" \/>        \t\n               &lt;\/td>\n            &lt;\/tr>  \t  \n            &lt;tr>\n               &lt;td colspan = \"2\">\n                  &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using&nbsp;<strong>&lt;form:radiobuttons \/&gt;<\/strong>tag to render the HTML radiobuttons. For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:radiobuttons path = \"favoriteNumber\" items=\"${numbersList}\" \/><\/code><\/pre>\n\n\n\n<p>It will render the following HTML content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span>\n   &lt;input id = \"favoriteNumber1\" name = \"favoriteNumber\" type = \"radio\" value = \"1\"\/>\n   &lt;label for = \"favoriteNumber1\">1&lt;\/label>\n&lt;\/span>\n&lt;span>\n   &lt;input id = \"favoriteNumber2\" name = \"favoriteNumber\" type = \"radio\" value = \"2\"\/>\n   &lt;label for = \"favoriteNumber2\">2&lt;\/label>\n&lt;\/span>\n&lt;span>\n   &lt;input id = \"favoriteNumber3\" name = \"favoriteNumber\" type = \"radio\" value = \"3\"\/>\n   &lt;label for = \"favoriteNumber3\">3&lt;\/label>\n&lt;\/span>\n&lt;span>\n   &lt;input id = \"favoriteNumber4\" name = \"favoriteNumber\" type = \"radio\" value = \"4\"\/>\n   &lt;label for = \"favoriteNumber4\">4&lt;\/label>\n&lt;\/span>   <\/code><\/pre>\n\n\n\n<h2>users.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>Submitted User Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Username&lt;\/td>\n            &lt;td>${username}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Password&lt;\/td>\n            &lt;td>${password}&lt;\/td>\n         &lt;\/tr>    \n         &lt;tr>\n            &lt;td>Address&lt;\/td>\n            &lt;td>${address}&lt;\/td>\n         &lt;\/tr>  \n         &lt;tr>\n            &lt;td>Subscribed to Newsletter&lt;\/td>\n            &lt;td>${receivePaper}&lt;\/td>\n         &lt;\/tr>    \n         &lt;tr>\n            &lt;td>Favorite Web Frameworks&lt;\/td>\n            &lt;td> &lt;% String&#91;] favoriteFrameworks = (String&#91;])request.getAttribute(\"favoriteFrameworks\");\n               for(String framework: favoriteFrameworks) {\n                  out.println(framework);\n               }\n            %>&lt;\/td>\n         &lt;\/tr>     \t \n         &lt;tr>\n            &lt;td>Gender&lt;\/td>\n            &lt;td>${(gender==\"M\"? \"Male\" : \"Female\")}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Favourite Number&lt;\/td>\n            &lt;td>${favoriteNumber}&lt;\/td>\n         &lt;\/tr>     \t  \n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the HelloWeb.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try the following URL \u2013&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/user<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_radiobuttons.png\" alt=\"Spring RadioButtons Form\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with your Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_radiobuttons_result.png\" alt=\"Spring RadioButtons Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example explains how to use RadioButtons in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with a name [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/741"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=741"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/741\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 963,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/741\/revisions\/963"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=741"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=741"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=741"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 747,
        "date": "2020-06-27T10:07:00",
        "date_gmt": "2020-06-27T10:07:00",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=747"
        },
        "modified": "2020-06-27T18:25:28",
        "modified_gmt": "2020-06-27T18:25:28",
        "slug": "dropdown",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/dropdown\/",
        "title": {
            "rendered": "Dropdown"
        },
        "content": {
            "rendered": "\n<p>The following example describes how to use Dropdown in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes User, UserController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files user.jsp, users.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>User.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class User {\n\t\n   private String username;\n   private String password;\n   private String address;\n   private boolean receivePaper;\n   private String &#91;] favoriteFrameworks;   \n   private String gender;\n   private String favoriteNumber;\n   private String country;\n   \n   public String getUsername() {\n      return username;\n   }\n   public void setUsername(String username) {\n      this.username = username;\n   }\n\n   public String getPassword() {\n      return password;\n   }\n   public void setPassword(String password) {\n      this.password = password;\n   }\n   public String getAddress() {\n      return address;\n   }\n   public void setAddress(String address) {\n      this.address = address;\n   }\n   public boolean isReceivePaper() {\n      return receivePaper;\n   }\n   public void setReceivePaper(boolean receivePaper) {\n      this.receivePaper = receivePaper;\n   }\n   public String&#91;] getFavoriteFrameworks() {\n      return favoriteFrameworks;\n   }\n   public void setFavoriteFrameworks(String&#91;] favoriteFrameworks) {\n      this.favoriteFrameworks = favoriteFrameworks;\n   }\n   public String getGender() {\n      return gender;\n   }\n   public void setGender(String gender) {\n      this.gender = gender;\n   }\n   public String getFavoriteNumber() {\n      return favoriteNumber;\n   }\n   public void setFavoriteNumber(String favoriteNumber) {\n      this.favoriteNumber = favoriteNumber;\n   }\n   public String getCountry() {\n      return country;\n   }\n   public void setCountry(String country) {\n      this.country = country;\n   }\n}\n\ufeff<\/code><\/pre>\n\n\n\n<h2>UserController.java<\/h2>\n\n\n\n<p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class UserController {\n\n   @RequestMapping(value = \"\/user\", method = RequestMethod.GET)\n   public ModelAndView user() {\n      User user = new User();\t  \n\t  user.setFavoriteFrameworks((new String &#91;]{\"Spring MVC\",\"Struts 2\"}));\n      user.setGender(\"M\");\n\t  ModelAndView modelAndView = new ModelAndView(\"user\", \"command\", user);\n\t  return modelAndView;\n   }\n\n   @RequestMapping(value = \"\/addUser\", method = RequestMethod.POST)\n   public String addUser(@ModelAttribute(\"SpringWeb\")User user, \n      ModelMap model) {\n      model.addAttribute(\"username\", user.getUsername());\n      model.addAttribute(\"password\", user.getPassword());\n      model.addAttribute(\"address\", user.getAddress());\n      model.addAttribute(\"receivePaper\", user.isReceivePaper());\n\t  model.addAttribute(\"favoriteFrameworks\", user.getFavoriteFrameworks());\n      model.addAttribute(\"gender\", user.getGender());\n      model.addAttribute(\"favoriteNumber\", user.getFavoriteNumber());\n      model.addAttribute(\"country\", user.getCountry());     \n      return \"users\";\n   }\n   \n   @ModelAttribute(\"webFrameworkList\")\n   public List&lt;String> getWebFrameworkList() {\n      List&lt;String> webFrameworkList = new ArrayList&lt;String>();\n      webFrameworkList.add(\"Spring MVC\");\n      webFrameworkList.add(\"Struts 1\");\n      webFrameworkList.add(\"Struts 2\");\n      webFrameworkList.add(\"Apache Wicket\");\n      return webFrameworkList;\n   }\n   \n   @ModelAttribute(\"numbersList\")\n   public List&lt;String> getNumbersList() {\n      List&lt;String> numbersList = new ArrayList&lt;String>();\n      numbersList.add(\"1\");\n      numbersList.add(\"2\");\n      numbersList.add(\"3\");\n      numbersList.add(\"4\");\n      return numbersList;\n   }\n\n   @ModelAttribute(\"countryList\")\n   public Map&lt;String, String> getCountryList() {\n      Map&lt;String, String> countryList = new HashMap&lt;String, String>();\n      countryList.put(\"US\", \"United States\");\n      countryList.put(\"CH\", \"China\");\n      countryList.put(\"SG\", \"Singapore\");\n      countryList.put(\"MY\", \"Malaysia\");\n      return countryList;\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here, for the first service method&nbsp;<strong>user()<\/strong>, we have passed a blank&nbsp;<strong>User<\/strong>&nbsp;object in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So when the&nbsp;<strong>user()<\/strong>&nbsp;method is called, it returns the&nbsp;<strong>user.jsp<\/strong>&nbsp;view.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>addUser()<\/strong>&nbsp;will be called against a POST method on the&nbsp;<strong>HelloWeb\/addUser<\/strong>&nbsp;URL. You will prepare your model object based on the submitted information. Finally, the &#8220;users&#8221; view will be returned from the service method, which will result in rendering the users.jsp.<\/p>\n\n\n\n<h2>user.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n   &lt;h2>User Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addUser\">\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"username\">User Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"username\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"password\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:password path = \"password\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"address\">Address&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:textarea path = \"address\" rows = \"5\" cols = \"30\" \/>&lt;\/td>\n            &lt;\/tr>  \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"receivePaper\">Subscribe Newsletter&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:checkbox path = \"receivePaper\" \/>&lt;\/td>\n            &lt;\/tr> \n            &lt;tr>\n               &lt;td>&lt;form:label path = \"favoriteFrameworks\">Favorite Web Frameworks&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:checkboxes items = \"${webFrameworkList}\" path = \"favoriteFrameworks\" \/>&lt;\/td>       \n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"gender\">Gender&lt;\/form:label>&lt;\/td>\n               &lt;td>\n                  &lt;form:radiobutton path = \"gender\" value = \"M\" label = \"Male\" \/>\n                  &lt;form:radiobutton path = \"gender\" value = \"F\" label = \"Female\" \/>\n               &lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"favoriteNumber\">Favorite Number&lt;\/form:label>&lt;\/td>\n               &lt;td>\n                  &lt;form:radiobuttons path = \"favoriteNumber\" items = \"${numbersList}\" \/>        \t\n               &lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"country\">Country&lt;\/form:label>&lt;\/td>\n               &lt;td>\n                  &lt;form:select path = \"country\">\n                     &lt;form:option value = \"NONE\" label = \"Select\"\/>\n                     &lt;form:options items = \"${countryList}\" \/>\n                  &lt;\/form:select>     \t\n               &lt;\/td>\n            &lt;\/tr>   \t  \n            &lt;tr>\n               &lt;td colspan = \"2\">\n                  &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using&nbsp;<strong>&lt;form:select \/&gt; , &lt;form:option \/&gt;<\/strong>&nbsp;and&nbsp;<strong>&lt;form:options \/&gt;<\/strong>&nbsp;tags to render HTML select. For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:select path = \"country\">\n   &lt;form:option value = \"NONE\" label = \"Select\"\/>\n   &lt;form:options items = \"${countryList}\" \/>\n&lt;\/form:select>  <\/code><\/pre>\n\n\n\n<p>It will render following HTML content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;select id = \"country\" name = \"country\">\n   &lt;option value = \"NONE\">Select&lt;\/option>\n   &lt;option value = \"US\">United States&lt;\/option>\n   &lt;option value = \"CH\">China&lt;\/option>\n   &lt;option value = \"MY\">Malaysia&lt;\/option>\n   &lt;option value = \"SG\">Singapore&lt;\/option>\n&lt;\/select>  <\/code><\/pre>\n\n\n\n<h2>users.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>Submitted User Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Username&lt;\/td>\n            &lt;td>${username}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Password&lt;\/td>\n            &lt;td>${password}&lt;\/td>\n         &lt;\/tr>    \n         &lt;tr>\n            &lt;td>Address&lt;\/td>\n            &lt;td>${address}&lt;\/td>\n         &lt;\/tr>  \n         &lt;tr>\n            &lt;td>Subscribed to Newsletter&lt;\/td>\n            &lt;td>${receivePaper}&lt;\/td>\n         &lt;\/tr>    \n         &lt;tr>\n            &lt;td>Favorite Web Frameworks&lt;\/td>\n            &lt;td> &lt;% String&#91;] favoriteFrameworks = (String&#91;])request.getAttribute(\"favoriteFrameworks\");\n               for(String framework: favoriteFrameworks) {\n                  out.println(framework);\n               }\n            %>&lt;\/td>\n         &lt;\/tr>     \t \n         &lt;tr>\n            &lt;td>Gender&lt;\/td>\n            &lt;td>${(gender==\"M\"? \"Male\" : \"Female\")}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Favourite Number&lt;\/td>\n            &lt;td>${favoriteNumber}&lt;\/td>\n         &lt;\/tr>   \n         &lt;tr>\n            &lt;td>Country&lt;\/td>\n            &lt;td>${country}&lt;\/td>\n         &lt;\/tr>   \t  \n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use the&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your HelloWeb.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL \u2013&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/user<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_dropdown.png\" alt=\"Spring dropdown Form\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with your Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_dropdown_result.png\" alt=\"Spring dropdown Form Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example describes how to use Dropdown in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/747"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=747"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/747\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 786,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/747\/revisions\/786"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=747"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=747"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=747"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 750,
        "date": "2020-06-27T10:09:46",
        "date_gmt": "2020-06-27T10:09:46",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=750"
        },
        "modified": "2020-06-27T18:26:04",
        "modified_gmt": "2020-06-27T18:26:04",
        "slug": "hidden-field",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/hidden-field\/",
        "title": {
            "rendered": "Hidden Field"
        },
        "content": {
            "rendered": "\n<p>The following example describes how to use a Hidden Field in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes Student, StudentController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files student.jsp, result.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Student.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>StudentController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.ui.ModelMap;\n\n@Controller\npublic class StudentController {\n\n   @RequestMapping(value = \"\/student\", method = RequestMethod.GET)\n   public ModelAndView student() {\n      return new ModelAndView(\"student\", \"command\", new Student());\n   }\n   \n   @RequestMapping(value = \"\/addStudent\", method = RequestMethod.POST)\n   public String addStudent(@ModelAttribute(\"SpringWeb\")Student student, \n      ModelMap model) {\n      model.addAttribute(\"name\", student.getName());\n      model.addAttribute(\"age\", student.getAge());\n      model.addAttribute(\"id\", student.getId());\n      \n      return \"result\";\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here, for the first service method&nbsp;<strong>student()<\/strong>, we have passed a blank&nbsp;<strong>Studentobject<\/strong>&nbsp;in the ModelAndView object with the name &#8220;command&#8221;, because the spring framework expects an object with the name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when the&nbsp;<strong>student()<\/strong>&nbsp;method is called, it returns the&nbsp;<strong>student.jsp<\/strong>&nbsp;view.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>addStudent()<\/strong>&nbsp;will be called against a POST method on the&nbsp;<strong>HelloWeb\/addStudent<\/strong>&nbsp;URL. You will prepare your model object based on the submitted information. Finally, a &#8220;result&#8221; view will be returned from the service method, which will result in rendering result.jsp<\/p>\n\n\n\n<h2>student.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Student Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addStudent\">\n         &lt;table>\n            &lt;tr>\n              &lt;td>&lt;form:label path = \"name\">Name&lt;\/form:label>&lt;\/td>\n              &lt;td>&lt;form:input path = \"name\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n              &lt;td>&lt;form:label path = \"age\">Age&lt;\/form:label>&lt;\/td>\n              &lt;td>&lt;form:input path = \"age\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n              &lt;td>&lt; &lt;\/td>\n              &lt;td>&lt;form:hidden path = \"id\" value = \"1\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n              &lt;td colspan = \"2\">\n                  &lt;input type = \"submit\" value = \"Submit\"\/>\n              &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using the&nbsp;<strong>&lt;form:hidden \/&gt;<\/strong>&nbsp;tag to render a HTML hidden field.<\/p>\n\n\n\n<p>For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:hidden path = \"id\" value = \"1\"\/><\/code><\/pre>\n\n\n\n<p>It will render following HTML content.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input id = \"id\" name = \"id\" type = \"hidden\" value = \"1\"\/>\n<\/code><\/pre>\n\n\n\n<h2>result.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Submitted Student Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Name&lt;\/td>\n            &lt;td>${name}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Age&lt;\/td>\n            &lt;td>${age}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>ID&lt;\/td>\n            &lt;td>${id}&lt;\/td>\n         &lt;\/tr>\n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application and use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your&nbsp;<strong>HelloWeb.war<\/strong>&nbsp;file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL \u2013&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/student<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_hidden.png\" alt=\"Spring Hidden Field\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. We will see the following screen, if everything is fine with your Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_hidden_result.png\" alt=\"Spring Hidden Field Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example describes how to use a Hidden Field in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using Spring Web Framework. Step Description 1 Create a project with a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/750"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=750"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/750\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 787,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/750\/revisions\/787"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=750"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=750"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=750"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 738,
        "date": "2020-06-27T10:12:09",
        "date_gmt": "2020-06-27T10:12:09",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=738"
        },
        "modified": "2020-06-27T18:27:08",
        "modified_gmt": "2020-06-27T18:27:08",
        "slug": "error-handling",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/error-handling\/",
        "title": {
            "rendered": "Error Handling"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to use Error Handling and Validators in forms using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes Student, StudentController and StudentValidator under the com. codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files addStudent.jsp, result.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Student.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class Student {\n   private Integer age;\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>StudentValidator.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.validation.Errors;\nimport org.springframework.validation.ValidationUtils;\nimport org.springframework.validation.Validator;\n\npublic class StudentValidator implements Validator {\n\n   @Override\n   public boolean supports(Class&lt;?> clazz) {\n      return Student.class.isAssignableFrom(clazz);\n   }\n\n   @Override\n   public void validate(Object target, Errors errors) {\t\t\n      ValidationUtils.rejectIfEmptyOrWhitespace(errors, \n         \"name\", \"required.name\",\"Field name is required.\");\n   }\n}\n\ufeff<\/code><\/pre>\n\n\n\n<h2>StudentController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.Validator;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.WebDataBinder;\nimport org.springframework.web.bind.annotation.InitBinder;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\npublic class StudentController {\n\n   @Autowired\n   @Qualifier(\"studentValidator\")\n   private Validator validator;\n\n   @InitBinder\n   private void initBinder(WebDataBinder binder) {\n      binder.setValidator(validator);\n   }\n\n   @RequestMapping(value = \"\/addStudent\", method = RequestMethod.GET)\n   public ModelAndView student() {\n      return new ModelAndView(\"addStudent\", \"command\", new Student());\n   }\n\n   @ModelAttribute(\"student\")\n   public Student createStudentModel() {\t\n      return new Student();\n   }\n\n   @RequestMapping(value = \"\/addStudent\", method = RequestMethod.POST)\n   public String addStudent(@ModelAttribute(\"student\") @Validated Student student, \n      BindingResult bindingResult, Model model) {\n\n      if (bindingResult.hasErrors()) {\n         return \"addStudent\";\n      }\n      model.addAttribute(\"name\", student.getName());\n      model.addAttribute(\"age\", student.getAge());\n      model.addAttribute(\"id\", student.getId());\n\n      return \"result\";\n   }\n}\n\ufeff<\/code><\/pre>\n\n\n\n<h2>HelloWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n      &lt;property name = \"suffix\" value = \".jsp\" \/>\n   &lt;\/bean>\n \n   &lt;bean id = \"studentValidator\" class = \"com.codemeals.StudentValidator\" \/>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Here, for the first service method&nbsp;<strong>student()<\/strong>, we have passed a blank Studentobject in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when student() method is called, it returns&nbsp;<strong>addStudent.jsp<\/strong>&nbsp;view.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>addStudent()<\/strong>&nbsp;will be called against a POST method on the&nbsp;<strong>HelloWeb\/addStudent<\/strong>&nbsp;URL. You will prepare your model object based on the submitted information. Finally, a &#8220;result&#8221; view will be returned from the service method, which will result in rendering the result.jsp. In case there are errors generated using validator then same view &#8220;addStudent&#8221; is returned, Spring automatically injects error messages from&nbsp;<strong>BindingResult<\/strong>in view.<\/p>\n\n\n\n<h2>addStudent.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;style>\n      .error {\n         color: #ff0000;\n      }\n\n      .errorblock {\n         color: #000;\n         background-color: #ffEEEE;\n         border: 3px solid #ff0000;\n         padding: 8px;\n         margin: 16px;\n      }\n   &lt;\/style>\n   \n   &lt;body>\n      &lt;h2>Student Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/HelloWeb\/addStudent\" commandName = \"student\">\n      &lt;form:errors path = \"*\" cssClass = \"errorblock\" element = \"div\" \/>\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"name\">Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"name\" \/>&lt;\/td>\n               &lt;td>&lt;form:errors path = \"name\" cssClass = \"error\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"age\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"age\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"id\">id&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"id\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td colspan = \"2\">\n               &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here we are using&nbsp;<strong>&lt;form:errors \/&gt;<\/strong>&nbsp;tag with path=&#8221;*&#8221; to render error messages. For example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:errors path = \"*\" cssClass = \"errorblock\" element = \"div\" \/><\/code><\/pre>\n\n\n\n<p>It will render the error messages for all input validations.<\/p>\n\n\n\n<p>We are using&nbsp;<strong>&lt;form:errors \/&gt;<\/strong>&nbsp;tag with path=&#8221;name&#8221; to render error message for name field. For example<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:errors path = \"name\" cssClass = \"error\" \/><\/code><\/pre>\n\n\n\n<p>It will render error messages for the name field validations.<\/p>\n\n\n\n<h2>result.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Submitted Student Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Name&lt;\/td>\n            &lt;td>${name}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Age&lt;\/td>\n            &lt;td>${age}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n           &lt;td>ID&lt;\/td>\n           &lt;td>${id}&lt;\/td>\n         &lt;\/tr>\n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>HelloWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from webapps folder using a standard browser. Try a URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/addStudent<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_validation.png\" alt=\"Spring Validation\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_validation_result.png\" alt=\"Spring Validation Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to use Error Handling and Validators in forms using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/738"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=738"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/738\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 788,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/738\/revisions\/788"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=738"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=738"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=738"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 740,
        "date": "2020-06-27T10:34:19",
        "date_gmt": "2020-06-27T10:34:19",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=740"
        },
        "modified": "2020-06-27T18:28:12",
        "modified_gmt": "2020-06-27T18:28:12",
        "slug": "file-upload",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/file-upload\/",
        "title": {
            "rendered": "File Upload"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to use File Upload Control in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name HelloWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes FileModel, FileUploadController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files fileUpload.jsp, success.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>Create a folder&nbsp;<strong>temp<\/strong>&nbsp;under the WebContent sub-folder.<\/td><\/tr><tr><td>5<\/td><td>Download Apache Commons FileUpload library&nbsp;commons-fileupload.jar&nbsp;and Apache Commons IO library&nbsp;commons-io.jar. Put them in your CLASSPATH.<\/td><\/tr><tr><td>6<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>FileModel.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.web.multipart.MultipartFile;\n\npublic class FileModel {\n   private MultipartFile file;\n\n   public MultipartFile getFile() {\n      return file;\n   }\n\n   public void setFile(MultipartFile file) {\n      this.file = file;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>FileUploadController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport javax.servlet.ServletContext;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.ModelMap;\nimport org.springframework.util.FileCopyUtils;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.multipart.MultipartFile;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\npublic class FileUploadController {\n\t\n   @Autowired\n   ServletContext context; \n\n   @RequestMapping(value = \"\/fileUploadPage\", method = RequestMethod.GET)\n   public ModelAndView fileUploadPage() {\n      FileModel file = new FileModel();\n      ModelAndView modelAndView = new ModelAndView(\"fileUpload\", \"command\", file);\n      return modelAndView;\n   }\n\n   @RequestMapping(value=\"\/fileUploadPage\", method = RequestMethod.POST)\n   public String fileUpload(@Validated FileModel file, BindingResult result, ModelMap model) throws IOException {\n      if (result.hasErrors()) {\n         System.out.println(\"validation errors\");\n         return \"fileUploadPage\";\n      } else {            \n         System.out.println(\"Fetching file\");\n         MultipartFile multipartFile = file.getFile();\n         String uploadPath = context.getRealPath(\"\") + File.separator + \"temp\" + File.separator;\n         \/\/Now do something with file...\n         FileCopyUtils.copy(file.getFile().getBytes(), new File(uploadPath+file.getFile().getOriginalFilename()));\n         String fileName = multipartFile.getOriginalFilename();\n         model.addAttribute(\"fileName\", fileName);\n         return \"success\";\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>HelloWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n      &lt;property name = \"suffix\" value = \".jsp\" \/>\n   &lt;\/bean>\n \n   &lt;bean id = \"multipartResolver\"\n      class = \"org.springframework.web.multipart.commons.CommonsMultipartResolver\" \/>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Here, for the first service method&nbsp;<strong>fileUploadPage()<\/strong>, we have passed a blank&nbsp;<strong>FileModel<\/strong>object in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when&nbsp;<strong>fileUploadPage()<\/strong>&nbsp;method is called, it returns&nbsp;<strong>fileUpload.jsp<\/strong>&nbsp;view.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>fileUpload()<\/strong>&nbsp;will be called against a POST method on the&nbsp;<strong>HelloWeb\/fileUploadPage<\/strong>&nbsp;URL. You will prepare the file to be uploaded based on the submitted information. Finally, a &#8220;success&#8221; view will be returned from the service method, which will result in rendering success.jsp.<\/p>\n\n\n\n<h2>fileUpload.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType=\"text\/html; charset = UTF-8\" %>\n&lt;%@ taglib prefix = \"form\" uri = \"http:\/\/www.springframework.org\/tags\/form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>File Upload Example&lt;\/title>\n   &lt;\/head>\n   \n   &lt;body>\n      &lt;form:form method = \"POST\" modelAttribute = \"fileUpload\"\n         enctype = \"multipart\/form-data\">\n         Please select a file to upload : \n         &lt;input type = \"file\" name = \"file\" \/>\n         &lt;input type = \"submit\" value = \"upload\" \/>\n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using&nbsp;<strong>modelAttribute<\/strong>&nbsp;attribute with value=&#8221;fileUpload&#8221; to map the file Upload control with the server model.<\/p>\n\n\n\n<h2>success.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>File Upload Example&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      FileName : \n      lt;b> ${fileName} &lt;\/b> - Uploaded Successfully.\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the HelloWeb.war file in the Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL\u2013&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/fileUploadPage<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_file_upload.png\" alt=\"Spring File Upload\"\/><\/figure>\n\n\n\n<p>After submitting the required information, click on the submit button to submit the form. You should see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_upload_result.png\" alt=\"Spring File Upload Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to use File Upload Control in forms using the Spring Web MVC framework. To start with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/740"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=740"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/740\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 789,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/740\/revisions\/789"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=740"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=740"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=740"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 751,
        "date": "2020-06-27T10:36:34",
        "date_gmt": "2020-06-27T10:36:34",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=751"
        },
        "modified": "2020-06-27T18:29:25",
        "modified_gmt": "2020-06-27T18:29:25",
        "slug": "bean-name-url",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/bean-name-url\/",
        "title": {
            "rendered": "Bean Name Url"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to use Bean Name URL Handler Mapping using the Spring Web MVC Framework. The&nbsp;<strong>BeanNameUrlHandlerMapping<\/strong>&nbsp;class is the default handler mapping class, which maps the URL request(s) to the name of the beans mentioned in the configuration.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans>\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\"\/>\n      &lt;property name = \"suffix\" value = \".jsp\"\/>\n   &lt;\/bean>\n\n   &lt;bean class = \"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"\/>\n\n   &lt;bean name = \"\/helloWorld.htm\" \n      class = \"com.codemeals.HelloController\" \/>\n\n   &lt;bean name = \"\/hello*\" \n      class = \"com.codemeals.HelloController\" \/> \n\n   &lt;bean name = \"\/welcome.htm\"\n      class = \"com.codemeals.WelcomeController\"\/>   \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>For example, using the above configuration, if URI<\/p>\n\n\n\n<ul><li>\/helloWorld.htm or \/hello{any letter}.htm is requested, DispatcherServlet will forward the request to the&nbsp;<strong>HelloController<\/strong>.<\/li><li>\/welcome.htm is requested, DispatcherServlet will forward the request to the&nbsp;<strong>WelcomeController<\/strong>.<\/li><li>\/welcome1.htm is requested, DispatcherServlet will not find any controller and server will throw 404 status error.<\/li><\/ul>\n\n\n\n<p>To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes HelloController, WelcomeController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files hello.jsp, welcome.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of all source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.AbstractController;\n\npublic class HelloController extends AbstractController{\n  \n   @Override\n   protected ModelAndView handleRequestInternal(HttpServletRequest request,\n      HttpServletResponse response) throws Exception {\n      ModelAndView model = new ModelAndView(\"hello\");\n      model.addObject(\"message\", \"Hello World!\");\n      return model;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>WelcomeController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.AbstractController;\n\npublic class WelcomeController extends AbstractController{\n  \n   @Override\n   protected ModelAndView handleRequestInternal(HttpServletRequest request,\n      HttpServletResponse response) throws Exception {\n      ModelAndView model = new ModelAndView(\"welcome\");\n      model.addObject(\"message\", \"Welcome!\");\n      return model;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\"\/>\n      &lt;property name = \"suffix\" value = \".jsp\"\/>\n   &lt;\/bean>\n\n   &lt;bean class = \"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping\"\/>\n\n   &lt;bean name = \"\/helloWorld.htm\" \n      class = \"com.codemeals.HelloController\" \/>\n\n   &lt;bean name = \"\/hello*\" \n      class = \"com.codemeals.HelloController\" \/> \n\n   &lt;bean name = \"\/welcome.htm\"\n      class = \"com.codemeals.WelcomeController\"\/>   \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>welcome.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Welcome&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>TestWeb.war<\/strong>file in the Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder by using a standard browser. Try a URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/helloWorld.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping.png\" alt=\"Spring Bean Name Url Handler Mapping 1\"\/><\/figure>\n\n\n\n<p>Try a URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/hello.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping1.png\" alt=\"Spring Bean Name Url Handler Mapping 2\"\/><\/figure>\n\n\n\n<p>Try a URL&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/welcome.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping2.png\" alt=\"Spring Bean Name Url Handler Mapping 3\"\/><\/figure>\n\n\n\n<p>Try a URL&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/welcome1.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping3.png\" alt=\"Spring Bean Name Url Handler Mapping 4\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to use Bean Name URL Handler Mapping using the Spring Web MVC Framework. The&nbsp;BeanNameUrlHandlerMapping&nbsp;class is the default handler mapping class, which maps the URL request(s) to the name of the beans mentioned in the configuration. For example, using the above configuration, if URI \/helloWorld.htm or \/hello{any letter}.htm is requested, DispatcherServlet [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/751"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=751"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/751\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 790,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/751\/revisions\/790"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=751"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=751"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=751"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 739,
        "date": "2020-06-27T10:46:51",
        "date_gmt": "2020-06-27T10:46:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=739"
        },
        "modified": "2020-06-27T18:32:32",
        "modified_gmt": "2020-06-27T18:32:32",
        "slug": "controller-class-name-handler",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/controller-class-name-handler\/",
        "title": {
            "rendered": "Controller Class Name Handler"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to use the Controller Class Name Handler Mapping using the Spring Web MVC framework. The&nbsp;<strong>ControllerClassNameHandlerMapping<\/strong>&nbsp;class is the convention-based handler mapping class, which maps the URL request(s) to the name of the controllers mentioned in the configuration. This class takes the Controller names and converts them to lower case with a leading &#8220;\/&#8221;.<\/p>\n\n\n\n<p>For example \u2212 HelloController maps to &#8220;\/hello*&#8221; URL.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans>\n   &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\"\/>\n      &lt;property name = \"suffix\" value = \".jsp\"\/>\n   &lt;\/bean>\n\n   &lt;bean class = \"org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping\"\/>\n \n   &lt;bean class = \"com.codemeals.HelloController\" \/>\n\n   &lt;bean class = \"com.codemeals.WelcomeController\"\/>   \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>For example, using above configuration, if URI<\/p>\n\n\n\n<ul><li>\/helloWorld.htm or \/hello{any letter}.htm is requested, DispatcherServlet will forward the request to the&nbsp;<strong>HelloController<\/strong>.<\/li><li>\/welcome.htm is requested, DispatcherServlet will forward the request to the&nbsp;<strong>WelcomeController<\/strong>.<\/li><li>\/Welcome.htm is requested where W is capital cased, DispatcherServlet will not find any controller and the server will throw 404 status error.<\/li><\/ul>\n\n\n\n<p>To start with it, let us have a working Eclipse IDE in place and follow the subsequent steps to develop a Dynamic Form based Web Application using Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes HelloController and WelcomeController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files hello.jsp, welcome.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.AbstractController;\n\npublic class HelloController extends AbstractController{\n  \n   @Override\n   protected ModelAndView handleRequestInternal(HttpServletRequest request,\n      HttpServletResponse response) throws Exception {\n      ModelAndView model = new ModelAndView(\"hello\");\n      model.addObject(\"message\", \"Hello World!\");\n      return model;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>WelcomeController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.AbstractController;\n\npublic class WelcomeController extends AbstractController{\n  \n   @Override\n   protected ModelAndView handleRequestInternal(HttpServletRequest request,\n      HttpServletResponse response) throws Exception {\n      ModelAndView model = new ModelAndView(\"welcome\");\n      model.addObject(\"message\", \"Welcome!\");\n      return model;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\"\/>\n      &lt;property name = \"suffix\" value = \".jsp\"\/>\n   &lt;\/bean>\n\n   &lt;bean class = \"org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping\"\/>\n \n   &lt;bean class = \"com.codemeals.HelloController\" \/>\n\n   &lt;bean class = \"com.codemeals.WelcomeController\"\/>  \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType=\"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>welcome.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset=UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Welcome&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on the application, use the&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>TestWeb.war<\/strong>&nbsp;file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/helloWorld.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping.png\" alt=\"Spring Controller Class Name Handler Mapping 1\"\/><\/figure>\n\n\n\n<p>Try a URL&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/hello.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping1.png\" alt=\"Spring Controller Class Name Handler Mapping 2\"\/><\/figure>\n\n\n\n<p>Try a URL&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/welcome.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping2.png\" alt=\"Spring Controller Class Name Handler Mapping 3\"\/><\/figure>\n\n\n\n<p>Try a URL&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/Welcome.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping4.png\" alt=\"Spring Controller Class Name Handler Mapping 4\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to use the Controller Class Name Handler Mapping using the Spring Web MVC framework. The&nbsp;ControllerClassNameHandlerMapping&nbsp;class is the convention-based handler mapping class, which maps the URL request(s) to the name of the controllers mentioned in the configuration. This class takes the Controller names and converts them to lower case with a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/739"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=739"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/739\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 791,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/739\/revisions\/791"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=739"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=739"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=739"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 752,
        "date": "2020-06-27T10:49:32",
        "date_gmt": "2020-06-27T10:49:32",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=752"
        },
        "modified": "2020-06-27T18:33:27",
        "modified_gmt": "2020-06-27T18:33:27",
        "slug": "simple-url-handler-mapping",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/simple-url-handler-mapping\/",
        "title": {
            "rendered": "Simple Url Handler Mapping"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to use Simple URL Handler Mapping using the Spring Web MVC framework. The SimpleUrlHandlerMapping class helps to explicitly-map URLs with their controllers respectively.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans>\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\"\/>\n      &lt;property name = \"suffix\" value = \".jsp\"\/>\n   &lt;\/bean>\n\n   &lt;bean class = \"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n      &lt;property name = \"mappings\">\n         &lt;props>\n            &lt;prop key = \"\/welcome.htm\">welcomeController&lt;\/prop>\t\t   \n            &lt;prop key = \"\/helloWorld.htm\">helloController&lt;\/prop>\n         &lt;\/props>\n      &lt;\/property>\n   &lt;\/bean>\n\n   &lt;bean id = \"helloController\" class = \"com.codemeals.HelloController\" \/>\n\n   &lt;bean id = \"welcomeController\" class = \"com.codemeals.WelcomeController\"\/>  \n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>For example, using above configuration, if URI<\/p>\n\n\n\n<ul><li>\/helloWorld.htm is requested, DispatcherServlet will forward the request to the&nbsp;<strong>HelloController<\/strong>.<\/li><li>\/welcome.htm is requested, DispatcherServlet will forward the request to the&nbsp;<strong>WelcomeController<\/strong>.<\/li><\/ul>\n\n\n\n<p>To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name\u00a0<strong>TestWeb<\/strong>\u00a0under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes HelloController and WelcomeController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files hello.jsp and welcome.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.AbstractController;\n\npublic class HelloController extends AbstractController{\n  \n   @Override\n   protected ModelAndView handleRequestInternal(HttpServletRequest request,\n      HttpServletResponse response) throws Exception {\n      ModelAndView model = new ModelAndView(\"hello\");\n      model.addObject(\"message\", \"Hello World!\");\n      return model;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>WelcomeController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.AbstractController;\n\npublic class WelcomeController extends AbstractController{\n  \n   @Override\n   protected ModelAndView handleRequestInternal(HttpServletRequest request,\n      HttpServletResponse response) throws Exception {\n      ModelAndView model = new ModelAndView(\"welcome\");\n      model.addObject(\"message\", \"Welcome!\");\n      return model;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\"\/>\n      &lt;property name = \"suffix\" value = \".jsp\"\/>\n   &lt;\/bean>\n\n   &lt;bean class = \"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n      &lt;property name = \"mappings\">\n         &lt;props>\n            &lt;prop key = \"\/welcome.htm\">welcomeController&lt;\/prop>\t\t   \n            &lt;prop key = \"\/helloWorld.htm\">helloController&lt;\/prop>\n         &lt;\/props>\n      &lt;\/property>\n   &lt;\/bean>\n\n   &lt;bean id = \"helloController\" class = \"com.codemeals.HelloController\" \/>\n\n   &lt;bean id = \"welcomeController\" class = \"com.codemeals.WelcomeController\"\/>   \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<h2>welcome.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Welcome&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use the&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your&nbsp;<strong>TestWeb.war<\/strong>&nbsp;file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder by using a standard browser. Try a URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/helloWorld.htm<\/strong>&nbsp;and we will see the following screen, if everything is fine with the Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping.png\" alt=\"Spring Controller Class Name Handler Mapping 1\"\/><\/figure>\n\n\n\n<p>Try a URL&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/welcome.htm<\/strong>&nbsp;and you should see the following result if everything is fine with your Spring Web Application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_beanname_urlmapping2.png\" alt=\"Spring Controller Class Name Handler Mapping 2\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to use Simple URL Handler Mapping using the Spring Web MVC framework. The SimpleUrlHandlerMapping class helps to explicitly-map URLs with their controllers respectively. For example, using above configuration, if URI \/helloWorld.htm is requested, DispatcherServlet will forward the request to the&nbsp;HelloController. \/welcome.htm is requested, DispatcherServlet will forward the request to the&nbsp;WelcomeController. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/752"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=752"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/752\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 792,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/752\/revisions\/792"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=752"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=752"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=752"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 748,
        "date": "2020-06-27T10:53:46",
        "date_gmt": "2020-06-27T10:53:46",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=748"
        },
        "modified": "2020-06-27T18:34:23",
        "modified_gmt": "2020-06-27T18:34:23",
        "slug": "internal-resource-view-resolver",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/internal-resource-view-resolver\/",
        "title": {
            "rendered": "Internal Resource View Resolver"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>InternalResourceViewResolver<\/strong>&nbsp;is used to resolve the provided URI to actual URI. The following example shows how to use the InternalResourceViewResolver using the Spring Web MVC Framework. The InternalResourceViewResolver allows mapping webpages with requests.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.ui.ModelMap;\n\n@Controller\n@RequestMapping(\"\/hello\")\npublic class HelloController{\n \n   @RequestMapping(method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n\n      return \"hello\";\n   }\n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n   &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\"\/>\n   &lt;property name = \"suffix\" value = \".jsp\"\/>\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p>For example, using the above configuration, if URI<\/p>\n\n\n\n<ul><li>\/hello is requested, DispatcherServlet will forward the request to the prefix + viewname + suffix = \/WEB-INF\/jsp\/hello.jsp.<\/li><\/ul>\n\n\n\n<p>To start with, let us have a working Eclipse IDE in place and then consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World Example chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java classes HelloController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create a view file hello.jsp under jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.ui.ModelMap;\n\n@Controller\n@RequestMapping(\"\/hello\")\npublic class HelloController{\n \n   @RequestMapping(method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n\n      return \"hello\";\n   }\n\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n      &lt;property name = \"suffix\" value = \".jsp\" \/>\n   &lt;\/bean>\n \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>TestWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try to access the URL \u2013&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/hello<\/strong>&nbsp;and if everything is fine with the Spring Web Application, we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_internalresourceviewresolver.png\" alt=\"Spring Internal Resource View Resolver\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;InternalResourceViewResolver&nbsp;is used to resolve the provided URI to actual URI. The following example shows how to use the InternalResourceViewResolver using the Spring Web MVC Framework. The InternalResourceViewResolver allows mapping webpages with requests. For example, using the above configuration, if URI \/hello is requested, DispatcherServlet will forward the request to the prefix + viewname + suffix [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/748"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=748"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/748\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 793,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/748\/revisions\/793"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=748"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=748"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=748"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 734,
        "date": "2020-06-27T10:56:44",
        "date_gmt": "2020-06-27T10:56:44",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=734"
        },
        "modified": "2020-06-27T18:35:01",
        "modified_gmt": "2020-06-27T18:35:01",
        "slug": "xml-view-resolver",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-view-resolver\/",
        "title": {
            "rendered": "Xml View Resolver"
        },
        "content": {
            "rendered": "\n<p>The XmlViewResolver is used to resolve the view names using view beans defined in xml file. The following example shows how to use the XmlViewResolver using Spring Web MVC framework.<\/p>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean class = \"org.springframework.web.servlet.view.XmlViewResolver\">\n   &lt;property name = \"location\">\n      &lt;value>\/WEB-INF\/views.xml&lt;\/value>\n   &lt;\/property>\n&lt;\/bean><\/code><\/pre>\n\n\n\n<h2>views.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"hello\"\n   class = \"org.springframework.web.servlet.view.JstlView\">\n   &lt;property name = \"url\" value = \"\/WEB-INF\/jsp\/hello.jsp\" \/>\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p>For example, using the above configuration, if URI \u2212<\/p>\n\n\n\n<ul><li>\/hello is requested, DispatcherServlet will forward the request to the hello.jsp defined by bean hello in the view.xml.<\/li><\/ul>\n\n\n\n<p>To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java class HelloController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create a view file hello.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>Download JSTL library&nbsp;jstl.jar. Put it in your CLASSPATH.<\/td><\/tr><tr><td>5<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.ui.ModelMap;\n\n@Controller\n@RequestMapping(\"\/hello\")\npublic class HelloController{\n \n   @RequestMapping(method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n\n      return \"hello\";\n   }\n\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.XmlViewResolver\">\n      &lt;property name = \"location\">\n         &lt;value>\/WEB-INF\/views.xml&lt;\/value>\n      &lt;\/property>\n   &lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>views.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;bean id = \"hello\"\n      class = \"org.springframework.web.servlet.view.JstlView\">\n      &lt;property name = \"url\" value = \"\/WEB-INF\/jsp\/hello.jsp\" \/>\n   &lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>HelloWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try to access the URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/hello<\/strong>&nbsp;and if everything is fine with the Spring Web Application, we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_internalresourceviewresolver.png\" alt=\"Spring Internal Resource View Resolver\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The XmlViewResolver is used to resolve the view names using view beans defined in xml file. The following example shows how to use the XmlViewResolver using Spring Web MVC framework. TestWeb-servlet.xml views.xml For example, using the above configuration, if URI \u2212 \/hello is requested, DispatcherServlet will forward the request to the hello.jsp defined by bean [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/734"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=734"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/734\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 794,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/734\/revisions\/794"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=734"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=734"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=734"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 733,
        "date": "2020-06-27T11:01:41",
        "date_gmt": "2020-06-27T11:01:41",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=733"
        },
        "modified": "2020-07-16T17:01:06",
        "modified_gmt": "2020-07-16T17:01:06",
        "slug": "resource-bundle-view-resolver",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/resource-bundle-view-resolver\/",
        "title": {
            "rendered": "Resource Bundle View Resolver"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>ResourceBundleViewResolver<\/strong>&nbsp;is used to resolve the view names using view beans defined in the properties file. The following example shows how to use the ResourceBundleViewResolver using the Spring Web MVC Framework.<\/p>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean class = \"org.springframework.web.servlet.view.ResourceBundleViewResolver\">\n   &lt;property name = \"basename\" value = \"views\" \/>\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p>Here, the&nbsp;<strong>basename<\/strong>&nbsp;refers to name of the resource bundle, which carries the views. The default name of the resource bundle is&nbsp;<strong>views.properties<\/strong>, which can be overridden using the basename property.<\/p>\n\n\n\n<h2>views.properties<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>hello.(class) = org.springframework.web.servlet.view.JstlView\nhello.url = \/WEB-INF\/jsp\/hello.jsp<\/code><\/pre>\n\n\n\n<p>For example, using the above configuration, if URI \u2212<\/p>\n\n\n\n<ul><li>\/hello is requested, DispatcherServlet will forward the request to the hello.jsp defined by bean hello in the views.properties.<\/li><li>Here, &#8220;hello&#8221; is the view name to be matched. Whereas,&nbsp;<strong>class<\/strong>&nbsp;refers to the view type and URL is the view&#8217;s location.<\/li><\/ul>\n\n\n\n<p>To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java class HelloController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create a view file hello.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>Create a properties file views.properties under the src folder.<\/td><\/tr><tr><td>5<\/td><td>Download JSTL library\u00a0jstl.jar. Put it in your CLASSPATH.<\/td><\/tr><tr><td>6<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.ui.ModelMap;\n\n@Controller\n@RequestMapping(\"\/hello\")\npublic class HelloController{\n \n   @RequestMapping(method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n\n      return \"hello\";\n   }\n\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.ResourceBundleViewResolver\">\n      &lt;property name = \"basename\" value = \"views\" \/>\n   &lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>views.properties<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>hello.(class) = org.springframework.web.servlet.view.JstlView\nhello.url = \/WEB-INF\/jsp\/hello.jsp<\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType=\"text\/html; charset=UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your HelloWeb.war file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try to access the URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/hello<\/strong>&nbsp;and if everything is fine with the Spring Web Application, we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_internalresourceviewresolver.png\" alt=\"Spring Internal Resource View Resolver\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;ResourceBundleViewResolver&nbsp;is used to resolve the view names using view beans defined in the properties file. The following example shows how to use the ResourceBundleViewResolver using the Spring Web MVC Framework. TestWeb-servlet.xml Here, the&nbsp;basename&nbsp;refers to name of the resource bundle, which carries the views. The default name of the resource bundle is&nbsp;views.properties, which can be overridden [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/733"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=733"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/733\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 962,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/733\/revisions\/962"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=733"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=733"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=733"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 732,
        "date": "2020-06-27T11:03:38",
        "date_gmt": "2020-06-27T11:03:38",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=732"
        },
        "modified": "2020-06-27T18:36:21",
        "modified_gmt": "2020-06-27T18:36:21",
        "slug": "multiple-resolver-mapping",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/multiple-resolver-mapping\/",
        "title": {
            "rendered": "Multiple Resolver Mapping"
        },
        "content": {
            "rendered": "\n<p>In case you want to use a Multiple View Resolver in a Spring MVC application then priority order can be set using the order property. The following example shows how to use the&nbsp;<strong>ResourceBundleViewResolver<\/strong>&nbsp;and the&nbsp;<strong>InternalResourceViewResolver<\/strong>&nbsp;in the Spring Web MVC Framework.<\/p>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean class = \"org.springframework.web.servlet.view.ResourceBundleViewResolver\">\n   &lt;property name = \"basename\" value = \"views\" \/>\n   &lt;property name = \"order\" value = \"0\" \/>\n&lt;\/bean>\n&lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n   &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n   &lt;property name = \"suffix\" value = \".jsp\" \/>\n   &lt;property name = \"order\" value = \"1\" \/>\n&lt;\/bean><\/code><\/pre>\n\n\n\n<p>Here, the order property defines the ranking of a view resolver. In this, 0 is the first resolver and 1 is the next resolver and so on.<\/p>\n\n\n\n<h2>views.properties<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>hello.(class) = org.springframework.web.servlet.view.JstlView\nhello.url = \/WEB-INF\/jsp\/hello.jsp<\/code><\/pre>\n\n\n\n<p>For example, using the above configuration, if URI \u2212<\/p>\n\n\n\n<ul><li>\/hello is requested, DispatcherServlet will forward the request to the hello.jsp defined by bean hello in views.properties.<\/li><\/ul>\n\n\n\n<p>To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java class HelloController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create a view file hello.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>Create a properties file views.properties under the SRC folder.<\/td><\/tr><tr><td>5<\/td><td>Download the JSTL library&nbsp;jstl.jar. Put it in your CLASSPATH.<\/td><\/tr><tr><td>6<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.ui.ModelMap;\n\n@Controller\n@RequestMapping(\"\/hello\")\npublic class HelloController{\n \n   @RequestMapping(method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n\n      return \"hello\";\n   }\n\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.ResourceBundleViewResolver\">\n      &lt;property name = \"basename\" value = \"views\" \/>\n      &lt;property name = \"order\" value = \"0\" \/>\n   &lt;\/bean>\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n      &lt;property name = \"suffix\" value = \".jsp\" \/>\n      &lt;property name = \"order\" value = \"1\" \/>\n   &lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>views.properties<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>hello.(class) = org.springframework.web.servlet.view.JstlView\nhello.url = \/WEB-INF\/jsp\/hello.jsp<\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your&nbsp;<strong>HelloWeb.war<\/strong>&nbsp;file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try to access the URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/HelloWeb\/hello<\/strong>, if everything is fine with the Spring Web Application, we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_internalresourceviewresolver.png\" alt=\"Spring Internal Resource View Resolver\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In case you want to use a Multiple View Resolver in a Spring MVC application then priority order can be set using the order property. The following example shows how to use the&nbsp;ResourceBundleViewResolver&nbsp;and the&nbsp;InternalResourceViewResolver&nbsp;in the Spring Web MVC Framework. TestWeb-servlet.xml Here, the order property defines the ranking of a view resolver. In this, 0 is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/732"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=732"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/732\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 796,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/732\/revisions\/796"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=732"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=732"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=732"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 731,
        "date": "2020-06-27T11:09:56",
        "date_gmt": "2020-06-27T11:09:56",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=731"
        },
        "modified": "2020-06-27T18:37:08",
        "modified_gmt": "2020-06-27T18:37:08",
        "slug": "hibernate-validator",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/hibernate-validator\/",
        "title": {
            "rendered": "Hibernate Validator"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to use Error Handling and Validators in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with the name\u00a0<strong>TestWeb<\/strong>\u00a0under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes Student, StudentController and StudentValidator under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Create view files addStudent.jsp and result.jsp under the jsp sub-folder.<\/td><\/tr><tr><td>4<\/td><td>Download Hibernate Validator library\u00a0Hibernate Validator. Extract hibernate-validator-5.3.4.Final.jar and required dependencies present under the required folder of the downloaded zip file. Put them in your CLASSPATH.<\/td><\/tr><tr><td>5<\/td><td>Create a properties file messages.properties under the SRC folder.<\/td><\/tr><tr><td>6<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Student.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.hibernate.validator.constraints.NotEmpty;\nimport org.hibernate.validator.constraints.Range;\n\npublic class Student {\n\n   @Range(min = 1, max = 150) \n   private Integer age;\n   @NotEmpty\n   private String name;\n   private Integer id;\n\n   public void setAge(Integer age) {\n      this.age = age;\n   }\n   public Integer getAge() {\n      return age;\n   }\n\n   public void setName(String name) {\n      this.name = name;\n   }\n   public String getName() {\n      return name;\n   }\n\n   public void setId(Integer id) {\n      this.id = id;\n   }\n   public Integer getId() {\n      return id;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>StudentController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.ModelAttribute;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\npublic class StudentController {\n\n   @RequestMapping(value = \"\/addStudent\", method = RequestMethod.GET)\n   public ModelAndView student() {\n      return new ModelAndView(\"addStudent\", \"command\", new Student());\n   }\n\n   @ModelAttribute(\"student\")\n   public Student createStudentModel() {\t\n      return new Student();\n   }\n\n   @RequestMapping(value = \"\/addStudent\", method = RequestMethod.POST)\n   public String addStudent(@ModelAttribute(\"student\") @Validated Student student, \n      BindingResult bindingResult, Model model) {\n      if (bindingResult.hasErrors()) {\n         return \"addStudent\";\n      }\n      model.addAttribute(\"name\", student.getName());\n      model.addAttribute(\"age\", student.getAge());\n      model.addAttribute(\"id\", student.getId());\n\n      return \"result\";\n   }\n}<\/code><\/pre>\n\n\n\n<h2>messages.properties<\/h2>\n\n\n\n<pre class=\"wp-block-preformatted\">NotEmpty.student.name = Name is required!\nRange.student.age = Age value must be between 1 and 150!<\/pre>\n\n\n\n<p>Here, the key is &lt;Annotation&gt;.&lt;object-name&gt;.&lt;attribute&gt;. Value is the message to be displayed.<\/p>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:mvc = \"http:\/\/www.springframework.org\/schema\/mvc\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/mvc\n   http:\/\/www.springframework.org\/schema\/mvc\/spring-mvc-3.0.xsd\">\n\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n   &lt;mvc:annotation-driven \/>\n   &lt;bean class = \"org.springframework.context.support.ResourceBundleMessageSource\"\n      id = \"messageSource\">\n      &lt;property name = \"basename\" value = \"messages\" \/>\n   &lt;\/bean>\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n      &lt;property name = \"suffix\" value = \".jsp\" \/>      \n   &lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Here, for the first service method&nbsp;<strong>student()<\/strong>, we have passed a blank&nbsp;<strong>Studentobject&gt;<\/strong>&nbsp;in the ModelAndView object with name &#8220;command&#8221;, because the spring framework expects an object with name &#8220;command&#8221;, if you are using &lt;form:form&gt; tags in your JSP file. So, when the&nbsp;<strong>student()<\/strong>&nbsp;method is called, it returns&nbsp;<strong>addStudent.jsp<\/strong>&nbsp;view.<\/p>\n\n\n\n<p>The second service method&nbsp;<strong>addStudent()<\/strong>&nbsp;will be called against a POST method on the&nbsp;<strong>HelloWeb\/addStudent<\/strong>&nbsp;URL. You will prepare your model object based on the submitted information. Finally, a &#8220;result&#8221; view will be returned from the service method, which will result in rendering the result.jsp. In case there are errors generated using validator then same view &#8220;addStudent&#8221; is returned, Spring automatically injects error messages from&nbsp;<strong>BindingResult<\/strong>in view.<\/p>\n\n\n\n<h2>addStudent.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;style>\n      .error {\n         color: #ff0000;\n      }\n\n      .errorblock {\n         color: #000;\n         background-color: #ffEEEE;\n         border: 3px solid #ff0000;\n         padding: 8px;\n         margin: 16px;\n      }\n   &lt;\/style>\n   &lt;body>\n\n      &lt;h2>Student Information&lt;\/h2>\n      &lt;form:form method = \"POST\" action = \"\/TestWeb\/addStudent\" commandName = \"student\">\n      &lt;form:errors path = \"*\" cssClass = \"errorblock\" element = \"div\" \/>\n         &lt;table>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"name\">Name&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"name\" \/>&lt;\/td>\n               &lt;td>&lt;form:errors path = \"name\" cssClass = \"error\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"age\">Age&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"age\" \/>&lt;\/td>\n               &lt;td>&lt;form:errors path = \"age\" cssClass = \"error\" \/>&lt;\/td>\n            &lt;\/tr>\n            &lt;tr>\n               &lt;td>&lt;form:label path = \"id\">id&lt;\/form:label>&lt;\/td>\n               &lt;td>&lt;form:input path = \"id\" \/>&lt;\/td>\n               &lt;\/tr>\n            &lt;tr>\n               &lt;td colspan = \"2\">\n               &lt;input type = \"submit\" value = \"Submit\"\/>\n               &lt;\/td>\n            &lt;\/tr>\n         &lt;\/table>  \n      &lt;\/form:form>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we are using the &lt;form:errors \/&gt; tag with path=&#8221;*&#8221; to render error messages. For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:errors path = \"*\" cssClass = \"errorblock\" element = \"div\" \/><\/code><\/pre>\n\n\n\n<p>It will render error messages for all input validations. We are using &lt;form:errors \/&gt; tag with path = &#8220;name&#8221; to render error message for the name field.<\/p>\n\n\n\n<p>For example \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form:errors path = \"name\" cssClass = \"error\" \/>\n&lt;form:errors path = \"age\" cssClass = \"error\" \/><\/code><\/pre>\n\n\n\n<p>It will render error messages for name and age field validations.<\/p>\n\n\n\n<h2>result.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@taglib uri = \"http:\/\/www.springframework.org\/tags\/form\" prefix = \"form\"%>\n&lt;html>\n   &lt;head>\n      &lt;title>Spring MVC Form Handling&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n\n      &lt;h2>Submitted Student Information&lt;\/h2>\n      &lt;table>\n         &lt;tr>\n            &lt;td>Name&lt;\/td>\n            &lt;td>${name}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>Age&lt;\/td>\n            &lt;td>${age}&lt;\/td>\n         &lt;\/tr>\n         &lt;tr>\n            &lt;td>ID&lt;\/td>\n            &lt;td>${id}&lt;\/td>\n         &lt;\/tr>\n      &lt;\/table>  \n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>HelloWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/addStudent<\/strong>&nbsp;and we will see the following screen, if you have entered invalid values.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_hibernate_validation.png\" alt=\"Spring Validation Result\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to use Error Handling and Validators in forms using the Spring Web MVC framework. To begin with, let us have a working Eclipse IDE in place and adhere to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/731"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=731"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/731\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 797,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/731\/revisions\/797"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=731"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=731"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=731"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 730,
        "date": "2020-06-27T11:12:01",
        "date_gmt": "2020-06-27T11:12:01",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=730"
        },
        "modified": "2020-06-27T18:38:19",
        "modified_gmt": "2020-06-27T18:38:19",
        "slug": "generate-rss-feed",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/generate-rss-feed\/",
        "title": {
            "rendered": "Generate RSS Feed"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to generate RSS Feed using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and then consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with the name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes RSSMessage, RSSFeedViewer and RSSController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Download the Rome library&nbsp;Rome&nbsp;and its dependencies rome-utils, jdom and slf4j from the same maven repository page. Put them in your CLASSPATH.<\/td><\/tr><tr><td>4<\/td><td>Create a properties file messages.properties under the SRC folder.<\/td><\/tr><tr><td>5<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>RSSMessage.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.Date;\n\npublic class RSSMessage {\n   String title;\n   String url;\n   String summary;\n   Date createdDate;\n   public String getTitle() {\n      return title;\n   }\n   public void setTitle(String title) {\n      this.title = title;\n   }\n   public String getUrl() {\n      return url;\n   }\n   public void setUrl(String url) {\n      this.url = url;\n   }\n   public String getSummary() {\n      return summary;\n   }\n   public void setSummary(String summary) {\n      this.summary = summary;\n   }\n   public Date getCreatedDate() {\n      return createdDate;\n   }\n   public void setCreatedDate(Date createdDate) {\n      this.createdDate = createdDate;\n   }\t\n}<\/code><\/pre>\n\n\n\n<h2>RSSFeedViewer.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.view.feed.AbstractRssFeedView;\n\nimport com.rometools.rome.feed.rss.Channel;\nimport com.rometools.rome.feed.rss.Content;\nimport com.rometools.rome.feed.rss.Item;\n\npublic class RSSFeedViewer extends AbstractRssFeedView {\n\n   @Override\n   protected void buildFeedMetadata(Map&lt;String, Object> model, Channel feed,\n      HttpServletRequest request) {\n\n      feed.setTitle(\"codemeals Dot Com\");\n      feed.setDescription(\"Java Tutorials and Examples\");\n      feed.setLink(\"http:\/\/www.codemeals.com\");\n\n      super.buildFeedMetadata(model, feed, request);\n   }\n\n   @Override\n   protected List&lt;Item> buildFeedItems(Map&lt;String, Object> model,\n      HttpServletRequest request, HttpServletResponse response) throws Exception {\n   \n      List&lt;RSSMessage> listContent = (List&lt;RSSMessage>) model.get(\"feedContent\");\n      List&lt;Item> items = new ArrayList&lt;Item>(listContent.size());\n\n      for(RSSMessage tempContent : listContent ){\n\n         Item item = new Item();\n\n         Content content = new Content();\n         content.setValue(tempContent.getSummary());\n         item.setContent(content);\n\n         item.setTitle(tempContent.getTitle());\n         item.setLink(tempContent.getUrl());\n         item.setPubDate(tempContent.getCreatedDate());\n\n         items.add(item);\n      }\n\n      return items;\t\t\n   }\n}<\/code><\/pre>\n\n\n\n<h2>RSSController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Controller\npublic class RSSController {\n   @RequestMapping(value=\"\/rssfeed\", method = RequestMethod.GET)\n   public ModelAndView getFeedInRss() {\n\n      List&lt;RSSMessage> items = new ArrayList&lt;RSSMessage>();\n\n      RSSMessage content  = new RSSMessage();\n      content.setTitle(\"Spring Tutorial\");\n      content.setUrl(\"http:\/\/www.codemeals\/spring\");\n      content.setSummary(\"Spring tutorial summary...\");\n      content.setCreatedDate(new Date());\n      items.add(content);\n\n      RSSMessage content2  = new RSSMessage();\n      content2.setTitle(\"Spring MVC\");\n      content2.setUrl(\"http:\/\/www.codemeals\/springmvc\");\n      content2.setSummary(\"Spring MVC tutorial summary...\");\n      content2.setCreatedDate(new Date());\n      items.add(content2);\n\n      ModelAndView mav = new ModelAndView();\n      mav.setViewName(\"rssViewer\");\n      mav.addObject(\"feedContent\", items);\n\n      return mav;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"   \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.BeanNameViewResolver\" \/>\n\n   &lt;bean id = \"rssViewer\" class = \"com.codemeals.RSSFeedViewer\" \/>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Here, we have created a RSS feed POJO RSSMessage and a RSS Message Viewer, which extends the&nbsp;<strong>AbstractRssFeedView<\/strong>&nbsp;and overrides its method. In RSSController, we have generated a sample RSS Feed.<\/p>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>TestWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start your Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/rssfeed<\/strong>&nbsp;and we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_rss_feed.png\" alt=\"Spring RSS Generation\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to generate RSS Feed using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and then consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with the name [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/730"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=730"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/730\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 798,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/730\/revisions\/798"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=730"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=730"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=730"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 729,
        "date": "2020-06-27T11:13:00",
        "date_gmt": "2020-06-27T11:13:00",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=729"
        },
        "modified": "2020-06-27T18:38:56",
        "modified_gmt": "2020-06-27T18:38:56",
        "slug": "generate-xml",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/generate-xml\/",
        "title": {
            "rendered": "Generate XML"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to generate XML using the Spring Web MVC Framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes User and UserController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>User.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\n\n@XmlRootElement(name = \"user\")\npublic class User {\n   private String name;\n   private int id;\n   public String getName() {\n      return name;\n   }\n   @XmlElement\n   public void setName(String name) {\n      this.name = name;\n   }\n   public int getId() {\n      return id;\n   }\n   @XmlElement\n   public void setId(int id) {\n      this.id = id;\n   }\t\n}<\/code><\/pre>\n\n\n\n<h2>UserController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@RequestMapping(\"\/user\")\npublic class UserController {\n\t\n   @RequestMapping(value=\"{name}\", method = RequestMethod.GET)\n   public @ResponseBody User getUser(@PathVariable String name) {\n\n      User user = new User();\n\n      user.setName(name);\n      user.setId(1);\n      return user;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"   \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xmlns:mvc = \"http:\/\/www.springframework.org\/schema\/mvc\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/mvc\n   http:\/\/www.springframework.org\/schema\/mvc\/spring-mvc-3.0.xsd\">\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n   &lt;mvc:annotation-driven \/>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Here, we have created an XML Mapped POJO User and in the UserController, we have returned the User. Spring automatically handles the XML conversion based on&nbsp;<strong>RequestMapping<\/strong>.<\/p>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your&nbsp;<strong>TestWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2013&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/mahesh<\/strong>&nbsp;and we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_xml_result.png\" alt=\"Spring XML Generation\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to generate XML using the Spring Web MVC Framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with a name TestWeb [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/729"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=729"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/729\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 799,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/729\/revisions\/799"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=729"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=729"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=729"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 728,
        "date": "2020-06-27T11:14:11",
        "date_gmt": "2020-06-27T11:14:11",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=728"
        },
        "modified": "2020-06-27T18:39:47",
        "modified_gmt": "2020-06-27T18:39:47",
        "slug": "generate-json",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/generate-json\/",
        "title": {
            "rendered": "Generate JSON"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to generate JSON using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java classes\u00a0<em>User<\/em>,\u00a0<em>UserController<\/em>\u00a0under the\u00a0<em>com.codemeals<\/em>\u00a0package.<\/td><\/tr><tr><td>3<\/td><td>Download Jackson libraries&nbsp;Jackson Core, Jackson Databind and Jackson Annotations&nbsp;from maven repository page. Put them in your CLASSPATH.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of all the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>User.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\npublic class User {\n   private String name;\n   private int id;\n   public String getName() {\n      return name;\n   }  \n   public void setName(String name) {\n      this.name = name;\n   }\n   public int getId() {\n      return id;\n   }   \n   public void setId(int id) {\n      this.id = id;\n   }\t\n}<\/code><\/pre>\n\n\n\n<h2>UserController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.ResponseBody;\n\n@Controller\n@RequestMapping(\"\/user\")\npublic class UserController {\n\t\n   @RequestMapping(value=\"{name}\", method = RequestMethod.GET)\n   public @ResponseBody User getUser(@PathVariable String name) {\n\n      User user = new User();\n\n      user.setName(name);\n      user.setId(1);\n      return user;\n   }\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = http:\/\/www.springframework.org\/schema\/context\"   \n   xmlns:xsi = http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xmlns:mvc = http:\/\/www.springframework.org\/schema\/mvc\"\n   xsi:schemaLocation = \n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/mvc\n   http:\/\/www.springframework.org\/schema\/mvc\/spring-mvc-3.0.xsd\">\n   &lt;context:component-scan base-package = com.codemeals\" \/>\n   &lt;mvc:annotation-driven \/>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Here, we have created a Simple POJO User and in UserController we have returned the User. Spring automatically handles the JSON conversion based on RequestMapping and Jackson jar present in the classpath.<\/p>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your&nbsp;<strong>TestWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2013&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/mahesh<\/strong>&nbsp;and we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_json_result.png\" alt=\"Spring JSON Generation\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to generate JSON using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and consider the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework \u2212 Step Description 1 Create a project with a name TestWeb [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/728"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=728"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/728\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 800,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/728\/revisions\/800"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=728"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=728"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=728"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 727,
        "date": "2020-06-27T11:15:36",
        "date_gmt": "2020-06-27T11:15:36",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=727"
        },
        "modified": "2020-06-27T18:40:39",
        "modified_gmt": "2020-06-27T18:40:39",
        "slug": "generate-excel",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/generate-excel\/",
        "title": {
            "rendered": "Generate Excel"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to generate Excel using the Spring Web MVC Framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with a name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create Java classes UserExcelView and ExcelController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Download the Apache POI library&nbsp;Apache POI&nbsp;from the maven repository page. Put it in your CLASSPATH.<\/td><\/tr><tr><td>4<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>ExcelController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.springframework.web.servlet.ModelAndView;\nimport org.springframework.web.servlet.mvc.AbstractController;\n\npublic class ExcelController extends AbstractController {\n\n   @Override\n   protected ModelAndView handleRequestInternal(HttpServletRequest request,\n      HttpServletResponse response) throws Exception {\n      \/\/user data\n      Map&lt;String,String> userData = new HashMap&lt;String,String>();\n      userData.put(\"1\", \"Mahesh\");\n      userData.put(\"2\", \"Suresh\");\n      userData.put(\"3\", \"Ramesh\");\n      userData.put(\"4\", \"Naresh\");\n      return new ModelAndView(\"UserSummary\",\"userData\",userData);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>UserExcelView.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport java.util.Map;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.poi.hssf.usermodel.HSSFRow;\nimport org.apache.poi.hssf.usermodel.HSSFSheet;\nimport org.apache.poi.hssf.usermodel.HSSFWorkbook;\nimport org.springframework.web.servlet.view.document.AbstractExcelView;\n\npublic class UserExcelView extends AbstractExcelView {\n\n   @Override\n   protected void buildExcelDocument(Map&lt;String, Object> model,\n      HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response)\n      throws Exception {\n      Map&lt;String,String> userData = (Map&lt;String,String>) model.get(\"userData\");\n      \/\/create a wordsheet\n      HSSFSheet sheet = workbook.createSheet(\"User Report\");\n\n      HSSFRow header = sheet.createRow(0);\n      header.createCell(0).setCellValue(\"Roll No\");\n      header.createCell(1).setCellValue(\"Name\");\n\n      int rowNum = 1;\n      for (Map.Entry&lt;String, String> entry : userData.entrySet()) {\n         \/\/create the row data\n         HSSFRow row = sheet.createRow(rowNum++);\n         row.createCell(0).setCellValue(entry.getKey());\n         row.createCell(1).setCellValue(entry.getValue());\n      }   \n   }\n}<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"   \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xmlns:mvc = \"http:\/\/www.springframework.org\/schema\/mvc\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/mvc\n   http:\/\/www.springframework.org\/schema\/mvc\/spring-mvc-3.0.xsd\">\n   \n   &lt;bean class = \"org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping\" \/>\n\n   &lt;bean class = \"com.codemeals.ExcelController\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.XmlViewResolver\">\n      &lt;property name = \"location\">\n         &lt;value>\/WEB-INF\/views.xml&lt;\/value>\n      &lt;\/property>\n   &lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>views.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"\n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\">\n\n   &lt;bean id = \"UserSummary\" class = \"com.codemeals.UserExcelView\">&lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<p>Here, we have created an ExcelController and an ExcelView. Apache POI library deals with Microsoft Office file formats and will convert the data to an excel document.<\/p>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save the&nbsp;<strong>TestWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2212&nbsp;<strong>http:\/\/localhost:8080\/TestWeb\/excel<\/strong>&nbsp;and we will see the following screen.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_excel_result.png\" alt=\"Spring Excel Generation\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to generate Excel using the Spring Web MVC Framework. To begin with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with a name TestWeb [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/727"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=727"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/727\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 801,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/727\/revisions\/801"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=727"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=727"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=727"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 726,
        "date": "2020-06-27T11:16:46",
        "date_gmt": "2020-06-27T11:16:46",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=726"
        },
        "modified": "2020-06-27T18:41:15",
        "modified_gmt": "2020-06-27T18:41:15",
        "slug": "integrate-log4j",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/integrate-log4j\/",
        "title": {
            "rendered": "Integrate LOG4J"
        },
        "content": {
            "rendered": "\n<p>The following example shows how to integrate LOG4J using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Step<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>Create a project with the name TestWeb under a package com.codemeals as explained in the Spring MVC &#8211; Hello World chapter.<\/td><\/tr><tr><td>2<\/td><td>Create a Java class HelloController under the com.codemeals package.<\/td><\/tr><tr><td>3<\/td><td>Download the log4j library&nbsp;LOG4J&nbsp;from the maven repository page. Put it in your CLASSPATH.<\/td><\/tr><tr><td>4<\/td><td>Create a log4j.properties under the SRC folder.<\/td><\/tr><tr><td>5<\/td><td>The final step is to create the content of the source and configuration files and export the application as explained below.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>HelloController.java<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.codemeals;\n\nimport org.apache.log4j.Logger;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.ui.ModelMap;\n\n@Controller\n@RequestMapping(\"\/hello\")\npublic class HelloController{\n   private static final Logger LOGGER = Logger.getLogger(HelloController.class);\n   @RequestMapping(method = RequestMethod.GET)\n   public String printHello(ModelMap model) {\n      LOGGER.info(\"printHello started.\");\n\n      \/\/logs debug message\n      if(LOGGER.isDebugEnabled()){\n         LOGGER.debug(\"Inside:  printHello\");\n      }\n      \/\/logs exception\n      LOGGER.error(\"Logging a sample exception\", new Exception(\"Testing\"));\n\n      model.addAttribute(\"message\", \"Hello Spring MVC Framework!\");\n      LOGGER.info(\"printHello ended.\");\n      return \"hello\";\n   }\n}<\/code><\/pre>\n\n\n\n<h2>log4j.properties<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code># Root logger option\nlog4j.rootLogger = DEBUG, stdout, file\n\n# Redirect log messages to console\nlog4j.appender.stdout = org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target = System.out\nlog4j.appender.stdout.layout = org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n\n\n# Redirect log messages to a log file\nlog4j.appender.file = org.apache.log4j.RollingFileAppender\n#outputs to Tomcat home\nlog4j.appender.file.File = ${catalina.home}\/logs\/myapp.log\nlog4j.appender.file.MaxFileSize = 5MB\nlog4j.appender.file.MaxBackupIndex = 10\nlog4j.appender.file.layout = org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n<\/code><\/pre>\n\n\n\n<h2>TestWeb-servlet.xml<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\"\n   xmlns:context = \"http:\/\/www.springframework.org\/schema\/context\"   \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\n   xmlns:mvc = \"http:\/\/www.springframework.org\/schema\/mvc\"\n   xsi:schemaLocation = \"\n   http:&#47;&#47;www.springframework.org\/schema\/beans     \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/context \n   http:\/\/www.springframework.org\/schema\/context\/spring-context-3.0.xsd\n   http:\/\/www.springframework.org\/schema\/mvc\n   http:\/\/www.springframework.org\/schema\/mvc\/spring-mvc-3.0.xsd\">\n   &lt;context:component-scan base-package = \"com.codemeals\" \/>\n\n   &lt;bean class = \"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      &lt;property name = \"prefix\" value = \"\/WEB-INF\/jsp\/\" \/>\n      &lt;property name = \"suffix\" value = \".jsp\" \/>\n   &lt;\/bean>\n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>hello.jsp<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;%@ page contentType = \"text\/html; charset = UTF-8\" %>\n&lt;html>\n   &lt;head>\n      &lt;title>Hello World&lt;\/title>\n   &lt;\/head>\n   &lt;body>\n      &lt;h2>${message}&lt;\/h2>\n   &lt;\/body>\n&lt;\/html><\/code><\/pre>\n\n\n\n<p>Here, we have configured the LOG4J to log details on the Tomcat console and in the file present in &amp;t; tomcat home \u2192 logs as myapp.log.<\/p>\n\n\n\n<p>Once you are done with creating source and configuration files, export your application. Right click on your application, use&nbsp;<strong>Export \u2192 WAR File<\/strong>&nbsp;option and save your&nbsp;<strong>TestWeb.war<\/strong>file in Tomcat&#8217;s webapps folder.<\/p>\n\n\n\n<p>Now, start the Tomcat server and make sure you are able to access other webpages from the webapps folder using a standard browser. Try a URL \u2212<strong>http:\/\/localhost:8080\/TestWeb\/hello<\/strong>&nbsp;and we will see the following screen on Tomcat&#8217;s log.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/springmvc\/images\/spring_log4j_result.png\" alt=\"Spring LOG4J Generation\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The following example shows how to integrate LOG4J using the Spring Web MVC Framework. To start with, let us have a working Eclipse IDE in place and stick to the following steps to develop a Dynamic Form based Web Application using the Spring Web Framework. Step Description 1 Create a project with the name TestWeb [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            8
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/726"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=726"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/726\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 802,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/726\/revisions\/802"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=726"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=726"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=726"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]