[{"id":199,"date":"2020-07-21T11:30:55","date_gmt":"2020-07-21T11:30:55","guid":{"rendered":"http://javascript.foobrdigital.com/?p=199"},"modified":"2021-02-11T10:59:58","modified_gmt":"2021-02-11T10:59:58","slug":"overview-5","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/overview-5/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p>BackboneJS is a&nbsp;<strong>lightweight JavaScript library</strong>&nbsp;that allows to develop and structure the client side applications that run in a web browser. It offers MVC framework which abstracts data into models, DOM into views and bind these two using events.</p>\n\n\n\n<p><strong>History</strong>&nbsp;− BackboneJS was developed by Jeremy Ashkenas and was initially released on October 13<sup>th</sup>, 2010.</p>\n\n\n\n<h2>When to use Backbone</h2>\n\n\n\n<ul><li>Consider you are creating an application with numerous lines of code using JavaScript or jQuery. In this application, if you −<ul><li>add or replace DOM elements to the application or</li><li>make some requests or</li><li>show animation in the application or</li><li>add more number of lines to your code,</li></ul>then your application might become complicated.</li><li>If you want a better design with less code, then it is better to use the BackboneJS library that provides good functionality, is well organized and in a structured manner for developing your application.</li><li>BackboneJS communicates via events; this ensures that you do not mess up the application. Your code will be cleaner, nicer and easy to maintain.</li></ul>\n\n\n\n<h2>Features</h2>\n\n\n\n<p>The following are a list of features of BackboneJS −</p>\n\n\n\n<ul><li>BackboneJS allows developing of applications and the frontend in a much easier way by using JavaScript functions.</li><li>BackboneJS provides various building blocks such as models, views, events, routers and collections for assembling the client side web applications.</li><li>When a model changes, it automatically updates the HTML of your application.</li><li>BackboneJS is a simple library that helps in separating business and user interface logic.</li><li>It is free and open source library and contains over 100 available extensions.</li><li>It acts like a backbone for your project and helps to organize your code.</li><li>It manages the data model which includes the user data and displays that data at the server side with the same format written at the client side.</li><li>BackboneJS has a soft dependency with&nbsp;<strong>jQuery</strong>&nbsp;and a hard dependency with&nbsp;<strong>Underscore.js</strong>.</li><li>It allows to create client side web applications or mobile applications in a wellstructured and an organized format.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>BackboneJS is a&nbsp;lightweight JavaScript library&nbsp;that allows to develop and structure the client side applications that run in a web browser. It offers MVC framework which abstracts data into models, DOM into views and bind these two using events. History&nbsp;− BackboneJS was developed by Jeremy Ashkenas and was initially released on October 13th, 2010. When to [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/199"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=199"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/199/revisions"}],"predecessor-version":[{"id":200,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/199/revisions/200"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=199"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=199"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=199"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":198,"date":"2020-07-21T11:32:23","date_gmt":"2020-07-21T11:32:23","guid":{"rendered":"http://javascript.foobrdigital.com/?p=198"},"modified":"2021-02-11T10:59:58","modified_gmt":"2021-02-11T10:59:58","slug":"environment-setup-4","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/environment-setup-4/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>BackboneJS is very easy to setup and work. This chapter will discuss the download and setup of the&nbsp;<strong>BackboneJS Library</strong>.</p>\n\n\n\n<p>BackboneJS can be used in the following two ways −</p>\n\n\n\n<ul><li>Downloading UI library from its official website.</li><li>Downloading UI library from CDNs.</li></ul>\n\n\n\n<h2>Downloading the UI library from its official website</h2>\n\n\n\n<p>When you open the link&nbsp;http://backbonejs.org/, you will get to see a screenshot as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/backbonejs/images/backbonesetup.jpg\" alt=\"Backbone.js Setup\"/></figure>\n\n\n\n<p>As you can see, there are three options for download of this library −</p>\n\n\n\n<ul><li><strong>Development Version</strong>&nbsp;− Right click on this button and save as and you get the full source&nbsp;<strong>JavaScript library</strong>.</li><li><strong>Production Version</strong>&nbsp;− Right click on this button and save as and you get the&nbsp;<strong>Backbone-min.js library</strong>&nbsp;file which is packed and gzipped.</li><li><strong>Edge Version</strong>&nbsp;− Right click on this button and save as and you get an&nbsp;<strong>unreleased version</strong>, i.e., development is going on; hence you need to use it at your own risk.</li></ul>\n\n\n\n<h2>Dependencies</h2>\n\n\n\n<p>BackboneJS depends on the following JavaScript files −</p>\n\n\n\n<ul><li><strong>Underscore.js</strong>&nbsp;− This is the only hard dependency which needs to be included. You can get it from&nbsp;here.</li><li><strong>jQuery.js</strong>&nbsp;− Include this file for RESTful persistence, history support via Backbone.Router and DOM manipulation with Backbone.View. You can get it from&nbsp;here.</li><li><strong>json2.js</strong>&nbsp;− Include this file for older Internet Explorer support. You can get it from&nbsp;here.</li></ul>\n\n\n\n<h2>Download UI Library from CDNs</h2>\n\n\n\n<p>A CDN or&nbsp;<strong>Content Delivery Network</strong>&nbsp;is a network of servers designed to serve files to users. If you use a CDN link in your web page, it moves the responsibility of hosting files from your own servers to a series of external ones. This also offers an advantage that if the visitor to your webpage has already downloaded a copy of BackboneJS from the same CDN, it won&#8217;t have to be re-downloaded.</p>\n\n\n\n<p>As said above, BackboneJS has a dependency of the following JavaScript −</p>\n\n\n\n<ul><li>jQuery</li><li>Underscore</li></ul>\n\n\n\n<p>Hence CDN for all the above is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script type = \"text/javascript\" \n   src = \"https://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js\">&lt;/script>\n&lt;script type = \"text/javascript\"\n   src = \"https://ajax.cdnjs.com/ajax/libs/underscore.js/1.1.4/underscore-min.js\">&lt;/script>\n&lt;script type = \"text/javascript\"\n   src = \"https://ajax.cdnjs.com/ajax/libs/backbone.js/0.3.3/backbone-min.js\">&lt;/script></code></pre>\n\n\n\n<p><strong>Note</strong>&nbsp;− We are using the CDN versions of the library throughout this tutorial.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Let&#8217;s create a simple example using BackboneJS.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;meta charset = \"UTF-8\">\n      &lt;meta http-equiv = \"X-UA-Compatible\" content = \"IE = edge,chrome = 1\">\n      &lt;title>Hello World using Backbone.js&lt;/title>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;!-- ========= -->\n      &lt;!-- Your HTML -->\n      &lt;!-- ========= -->\n      &lt;div id = \"container\">Loading...&lt;/div>\n      &lt;!-- ========= -->\n      &lt;!-- Libraries -->\n      &lt;!-- ========= -->\n      &lt;script src = \"https://code.jquery.com/jquery-2.1.3.min.js\"\n         type = \"text/javascript\">&lt;/script>\n         \n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js\"\n         type = \"text/javascript\">&lt;/script>\n         \n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js\"\n         type = \"text/javascript\">&lt;/script>\n      &lt;!-- =============== -->\n      &lt;!-- Javascript code -->\n      &lt;!-- =============== -->\n      \n      &lt;script type = \"text/javascript\">\n         var AppView = Backbone.View.extend ({\n            // el - stands for element. Every view has an element associated with HTML content, will be rendered. \n            el: '#container',\n            \n            // It's the first function called when this view is instantiated.\n            initialize: function() {\n               this.render(); \n            },\n            \n            // $el - it's a cached jQuery object (el), in which you can use jQuery functions to push content.\n            \n            //Like the Hello Codemeals in this case.\n            render: function() {\n               this.$el.html(\"Hello Codemeals!!!\");\n            }\n         });\n         var appView = new AppView();\n      &lt;/script>\n      \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The code comments are self-explanatory. A few more details are given below −</p>\n\n\n\n<p>There&#8217;s a html code at the start of&nbsp;<em>body</em>&nbsp;tag</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"container\">Loading...&lt;/div>\n</code></pre>\n\n\n\n<p>This prints&nbsp;<strong><em>Loading&#8230;</em></strong></p>\n\n\n\n<p>Next, we have added the following CDNs</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"https://code.jquery.com/jquery-2.1.3.min.js\"\n   type = \"text/javascript\">&lt;/script>\n&lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js\"\n   type = \"text/javascript\">&lt;/script>\n&lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js\"\n   type = \"text/javascript\">&lt;/script></code></pre>\n\n\n\n<p>Next, we have the following script −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var AppView = Backbone.View.extend ({\n   \n   // el - stands for element. Every view has an element associated with HTML content,\n   //will be rendered. \n   el: '#container', \n\n   // It's the first function called when this view is instantiated. \n   initialize: function() { \n      this.render(); \n   }, \n\n   // $el - it's a cached jQuery object (el), in which you can use jQuery functions to push content.\n   \n   //Like the Hello World in this case. \n   render: function() { \n      this.$el.html(\"&lt;h1>Hello Codemeals!!!&lt;/h1>\"); \n   } \n});  \nvar appView = new AppView();</code></pre>\n\n\n\n<p>The comments are self-explanatory. In the last line, we are initializing <strong><em>new AppView()</em></strong>. This will print the &#8220;Hello Codemeals&#8221; in the <strong>div</strong> <strong>with id = &#8220;container&#8221;</strong></p>\n\n\n\n<p>Save this page as&nbsp;<strong>myFirstExample.html</strong>. </p>\n","protected":false},"excerpt":{"rendered":"<p>BackboneJS is very easy to setup and work. This chapter will discuss the download and setup of the&nbsp;BackboneJS Library. BackboneJS can be used in the following two ways − Downloading UI library from its official website. Downloading UI library from CDNs. Downloading the UI library from its official website When you open the link&nbsp;http://backbonejs.org/, you [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/198"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=198"}],"version-history":[{"count":2,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/198/revisions"}],"predecessor-version":[{"id":268,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/198/revisions/268"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=198"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=198"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=198"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":197,"date":"2020-07-21T11:32:43","date_gmt":"2020-07-21T11:32:43","guid":{"rendered":"http://javascript.foobrdigital.com/?p=197"},"modified":"2021-02-11T10:59:58","modified_gmt":"2021-02-11T10:59:58","slug":"applications","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/applications/","title":{"rendered":"Applications"},"content":{"rendered":"\n<p>The BackboneJS gives a structure to the web applications that allows to separate business logic and user interface logic. In this chapter, we are going to discuss the architectural style of the BackboneJS application for implementing user interfaces. The following diagram shows the architecture of BackboneJS −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/backbonejs/images/backbonearch.jpg\" alt=\"Backbone.js Architecture\"/></figure>\n\n\n\n<p>The architecture of BackboneJS contains the following modules −</p>\n\n\n\n<ul><li>HTTP Request</li><li>Router</li><li>View</li><li>Events</li><li>Model</li><li>Collection</li><li>Data Source</li></ul>\n\n\n\n<p>Let us now discuss all the modules in detail.</p>\n\n\n\n<h2>HTTP Request</h2>\n\n\n\n<p>The HTTP client sends a HTTP request to a server in the form of a request message where web browsers, search engines, etc., acts like HTTP clients. The user requests for a file such as documents, images, etc., using the HTTP request protocol. In the above diagram, you could see that the HTTP client uses the router to send the client request.</p>\n\n\n\n<h2>Router</h2>\n\n\n\n<p>It is used for routing the client side applications and connects them to actions and events using URL&#8217;s. It is a URL representation of the application&#8217;s objects. This URL is changed manually by the user. The URL is used by the backbone so that it can understand what application state to be sent or present to the user.</p>\n\n\n\n<p>The router is a mechanism which can copy the URL&#8217;s to reach the view. The Router is required when web applications provide linkable, bookmarkable, and shareable URL&#8217;s for important locations in the app.</p>\n\n\n\n<p>In the above architecture, the router sending an HTTP request to the View. It is a useful feature when an application needs routing capability.</p>\n\n\n\n<h2>View</h2>\n\n\n\n<p>BackboneJS views are responsible for how and what to display from our application and they don&#8217;t contain HTML markup for the application. It specifies an idea behind the presentation of the model&#8217;s data to the user. Views are used to reflect &#8220;what your data model looks like&#8221;.</p>\n\n\n\n<p>The view classes do not know anything about the HTML and CSS and each view can be updated independently when the model changes without reloading the whole page. It represents the logical chunk of the UI in the DOM.</p>\n\n\n\n<p>As shown in the above architecture, the View represents the user interface which is responsible for displaying the response for the user request done by using the Router.</p>\n\n\n\n<h2>Events</h2>\n\n\n\n<p>Events are the main parts of any application. It binds the user&#8217;s custom events to an application. They can be mixed into any object and are capable of binding and triggering custom events. You can bind the custom events by using the desired name of your choice.</p>\n\n\n\n<p>Typically, events are handled synchronously with their program flow. In the above architecture, you could see when an event occurs, it represents the model&#8217;s data by using the View.</p>\n\n\n\n<h2>Model</h2>\n\n\n\n<p>It is the heart of the JavaScript application that retrieves and populates the data. Models contain data of an application, logic of the data and represents the basic data object in the framework.</p>\n\n\n\n<p>Models represents business entities with some business logic and business validations. They are mainly used for data storage and business logic. Models can be retrieved from and saved to data storage. A Model takes the HTTP request from the Events passed by the View using the Router and synchronizes the data from the database and sends the response back to the client.</p>\n\n\n\n<h2>Collection</h2>\n\n\n\n<p>A Collection is a set of models which binds events, when the model has been modified in the collection. The collection contains a list of models that can be processed in the loop and supports sorting and filtering. When creating a collection, we can define what type of model that collection is going to have along with the instance of properties. Any event triggered on a model will also trigger on the collection in the model.</p>\n\n\n\n<p>It also takes the request from the view, bind events and synchronizes the data with the requested data and sends the response back to the HTTP client.</p>\n\n\n\n<h2>Data Source</h2>\n\n\n\n<p>It is the connection set up to a database from a server and contains the information which is requested from the client. The flow of the BackboneJS architecture can be described as shown in the following steps −</p>\n\n\n\n<ul><li>A User requests for the data using the router, which routes the applications to the events using the URL&#8217;s.</li><li>The view represents the model&#8217;s data to the user.</li><li>The model and collection retrieves and populates the data from the database by binding custom events.</li></ul>\n\n\n\n<p>In the next chapter, we will understand the significance of Events in BackboneJS.</p>\n","protected":false},"excerpt":{"rendered":"<p>The BackboneJS gives a structure to the web applications that allows to separate business logic and user interface logic. In this chapter, we are going to discuss the architectural style of the BackboneJS application for implementing user interfaces. The following diagram shows the architecture of BackboneJS − The architecture of BackboneJS contains the following modules [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/197"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=197"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/197/revisions"}],"predecessor-version":[{"id":202,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/197/revisions/202"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=197"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=197"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=197"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":196,"date":"2020-07-21T11:33:13","date_gmt":"2020-07-21T11:33:13","guid":{"rendered":"http://javascript.foobrdigital.com/?p=196"},"modified":"2021-02-11T10:59:58","modified_gmt":"2021-02-11T10:59:58","slug":"events-2","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/events-2/","title":{"rendered":"Events"},"content":{"rendered":"\n<p>Events are capable of binding objects and trigger custom events i.e. you can bind the custom events by using the desired name of our choice.</p>\n\n\n\n<p>The following table lists down all the methods which you can use to manipulate the BackboneJS-Events −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>onIt binds an event to an object and executes the callback whenever an event is fired.</td></tr><tr><td>2</td><td>offIt removes callback functions or all events from an object.</td></tr><tr><td>3</td><td>triggerIt invokes the callback functions for the given events.</td></tr><tr><td>4</td><td>onceIt extends the backbone.Model class while creating your own backbone Model.</td></tr><tr><td>5</td><td>listenToIt informs one object to listen to an event on another object.</td></tr><tr><td>6</td><td>stopListeningIt can be used to stop listening to events on the other objects.</td></tr><tr><td>7</td><td>listenToOnceIt causes the listenTo occur only once before the callback function is being removed.</td></tr></tbody></table></figure>\n\n\n\n<h2>Catalog of Built-in Events</h2>\n\n\n\n<p>BackboneJS allows the use of global events wherever necessary in your application. It contains some of the built-in events with arguments as shown in the following table −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Events &amp; Description</th></tr><tr><td>1</td><td><strong>&#8220;add&#8221;(model, collection, options)</strong>It used when a model is added to the collection.</td></tr><tr><td>2</td><td><strong>&#8220;remove&#8221;(model, collection, options)</strong>It removes a model from the collection.</td></tr><tr><td>3</td><td><strong>&#8220;reset&#8221;(collection, options)</strong>It is used to reset the collection content.</td></tr><tr><td>4</td><td><strong>&#8220;sort&#8221;(collection, options)</strong>It is used when a collection needs to resorted.</td></tr><tr><td>5</td><td><strong>&#8220;change&#8221;(model, options)</strong>It is used when changes are to be made to a model&#8217;s attributes.</td></tr><tr><td>6</td><td><strong>&#8220;change:[attribute]&#8221;(model, value, options)</strong>It is used when there is an update in an attribute.</td></tr><tr><td>7</td><td><strong>&#8220;destroy&#8221;(model, collection, options)</strong>It fires when the model is destroyed.</td></tr><tr><td>8</td><td><strong>&#8220;request&#8221;(model_or_collection, xhr, options)</strong>It is used when a model or a collection starts requesting to the server.</td></tr><tr><td>9</td><td><strong>&#8220;sync&#8221;(model_or_collection, resp, options)</strong>It is used when a model or a collection is synced successfully with the server.</td></tr><tr><td>10</td><td><strong>&#8220;error&#8221;(model_or_collection, resp, options)</strong>It activates when there is an error in requesting to the server.</td></tr><tr><td>11</td><td><strong>&#8220;invalid&#8221;(model, error, options)</strong>When there is a fail in model validation, it returns invalid.</td></tr><tr><td>12</td><td><strong>&#8220;route:[name]&#8221;(params)</strong>When there is a specific route match, this event can be used.</td></tr><tr><td>13</td><td><strong>&#8220;route&#8221;(route,params)</strong>It is used when there is a match with any route.</td></tr><tr><td>14</td><td><strong>&#8220;route&#8221;(router, route, params)</strong>It is used by history when there is a match with any route.</td></tr><tr><td>15</td><td><strong>&#8220;all&#8221;</strong>It fires for all the triggered events by the passing event name as the first argument.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Events are capable of binding objects and trigger custom events i.e. you can bind the custom events by using the desired name of our choice. The following table lists down all the methods which you can use to manipulate the BackboneJS-Events − S.No. Methods &amp; Description 1 onIt binds an event to an object and [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/196"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=196"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/196/revisions"}],"predecessor-version":[{"id":203,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/196/revisions/203"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=196"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=196"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=196"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":195,"date":"2020-07-21T11:34:54","date_gmt":"2020-07-21T11:34:54","guid":{"rendered":"http://javascript.foobrdigital.com/?p=195"},"modified":"2021-02-11T10:59:58","modified_gmt":"2021-02-11T10:59:58","slug":"model","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/model/","title":{"rendered":"Model"},"content":{"rendered":"\n<p>Models contain dynamic data and its logic. Logic such as conversions, validations, computed properties and access control fall under the Model category. As it contains all the application data, a model is also called as the&nbsp;<strong>heart of JavaScript application</strong>.</p>\n\n\n\n<p>The following table lists down all the methods which you can use to manipulate the BackboneJS-Model −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>extendIt extends the <strong>backbone.Model</strong> class while creating your own backbone Model.</td></tr><tr><td>2</td><td>initializeWhen a model instance is created, the class&#8217;s constructor gets called and it is invoked by defining the initialize function when the model is created.</td></tr><tr><td>3</td><td>getIt gets the value of an attribute on the model.</td></tr><tr><td>4</td><td>setIt sets the value of an attribute in the model.</td></tr><tr><td>5</td><td>escapeIt is like the <strong>get</strong> function, but returns the HTML-escaped version of a model&#8217;s attribute.</td></tr><tr><td>6</td><td>hasReturns true, if attribute value defined with non-null value or non-undefined value.</td></tr><tr><td>7</td><td>unsetIt removes an attribute from a backbone model.</td></tr><tr><td>8</td><td>clearRemoves all attributes, including id attribute from a backbone model.</td></tr><tr><td>9</td><td>idIt uniquely identifies the model entity, that might be manually set when a model is created or populated or when a model is saved on the server.</td></tr><tr><td>10</td><td>idAttributeDefines a model&#8217;s unique identifier which contains the name of the member of the class which will be used as id.</td></tr><tr><td>11</td><td>cidIt is an auto generated client id by Backbone which uniquely identifies the model on the client.</td></tr><tr><td>12</td><td>attributesAttributes defines property of a model.</td></tr><tr><td>13</td><td>changedChanges all the attributes that have changed after setting the attributes using the <strong>set()</strong> method.</td></tr><tr><td>14</td><td>defaultsSets a default value to a model, that means if the user doesn&#8217;t specify any data, the model won&#8217;t fall with an empty property.</td></tr><tr><td>15</td><td>toJSONReturns a copy of the attributes as an object for JSON stringification.</td></tr><tr><td>16</td><td>syncIt is used to communicate with the server and to represent the state of a model.</td></tr><tr><td>17</td><td>fetchAccept the data from the server by delegating <strong>sync()</strong> method in the model.</td></tr><tr><td>18</td><td>saveSaves the data of the model by delegating to <strong>sync()</strong> method which reads and saves the model every time when a Backbone calls it.</td></tr><tr><td>19</td><td>destroyDestroys or removes the model from the server by using the <strong>Backbone.sync</strong> method which delegates the HTTP &#8220;delete&#8221; request.</td></tr><tr><td>20</td><td>validateIf the input is invalid, it returns a specified error message or if the input is valid, it doesn&#8217;t specify anything and simply displays the result.</td></tr><tr><td>21</td><td>validationErrorIt displays the validation error, if the validation fails or after the <strong>invalid</strong> event is triggered.</td></tr><tr><td>22</td><td>isValidIt checks the model state by using the <strong>validate()</strong> method and also checks validations for each attribute.</td></tr><tr><td>23</td><td>urlIt is used for the instance of the model and returns the url to where the model&#8217;s resource is located.</td></tr><tr><td>24</td><td>urlRootEnables the url function by using the model id to generate the URL.</td></tr><tr><td>25</td><td>parseReturns the model&#8217;s data by passing through the response object and represents the data in the JSON format.</td></tr><tr><td>26</td><td>cloneIt is used to create a deep copy of a model or to copy one model object to another object.</td></tr><tr><td>27</td><td>hasChangedReturns true, if the attribute gets changed since the last <strong>set</strong>.</td></tr><tr><td>28</td><td>isNewDetermines whether the model is a new or an existing one.</td></tr><tr><td>29</td><td>changedAttributesIt returns the model&#8217;s attributes that have changed since the last <strong>set</strong> or else becomes false, if there are no attributes.</td></tr><tr><td>30</td><td>previousIt determines the previous value of the changed attribute.</td></tr><tr><td>31</td><td>previousAttributesReturns the state of the all the attributes prior to the last change event.</td></tr></tbody></table></figure>\n\n\n\n<h2>Underscore Methods</h2>\n\n\n\n<p>There are six&nbsp;<strong>Underscore.js</strong>&nbsp;methods which provides their functionality to be used on the Backbone.Model.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td><strong>_.keys(object)</strong>It is used to access the object&#8217;s enumerable properties.</td></tr><tr><td>2</td><td><strong>_.values(object)</strong>It is used to get values of object&#8217;s properties.</td></tr><tr><td>3</td><td><strong>_.pairs(object)</strong>It describes the object&#8217;s properties in terms of key value pairs.</td></tr><tr><td>4</td><td><strong>_.invert(object)</strong>It returns the copy of object, in which keys have become the values and vice versa.</td></tr><tr><td>5</td><td><strong>_.pick(object, *keys)</strong>It returns the copy of object and indicates which keys to pick up.</td></tr><tr><td>6</td><td><strong>_.omit(object, *keys)</strong>It returns the copy of object and indicates which keys to omit.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Models contain dynamic data and its logic. Logic such as conversions, validations, computed properties and access control fall under the Model category. As it contains all the application data, a model is also called as the&nbsp;heart of JavaScript application. The following table lists down all the methods which you can use to manipulate the BackboneJS-Model [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/195"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=195"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/195/revisions"}],"predecessor-version":[{"id":204,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/195/revisions/204"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=195"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=195"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=195"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":194,"date":"2020-07-21T11:36:04","date_gmt":"2020-07-21T11:36:04","guid":{"rendered":"http://javascript.foobrdigital.com/?p=194"},"modified":"2021-02-11T10:59:58","modified_gmt":"2021-02-11T10:59:58","slug":"collection","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/collection/","title":{"rendered":"Collection"},"content":{"rendered":"\n<p>Collections are ordered sets of Models. We just need to extend the backbone&#8217;s collection class to create our own collection. Any event that is triggered on a model in a collection will also be triggered on the collection directly. This allows you to listen for changes to specific attributes in any model in a collection.</p>\n\n\n\n<p>The following table lists down all the methods which you can use to manipulate the BackboneJS-Collection −</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>extendExtends the backbone&#8217;s collection class to create a collection.</td></tr><tr><td>2</td><td>modelTo specify the model class, we need to override the model property of the collection class.</td></tr><tr><td>3</td><td>initializeWhen a model instance is created, it is invoked by defining the initialize function when the collection is created.</td></tr><tr><td>4</td><td>modelsArray of models which are created inside the collection.</td></tr><tr><td>5</td><td>toJSONReturns the copy of the attributes of a model using the JSON format in the collection.</td></tr><tr><td>6</td><td>syncIt represents the state of the model and uses the Backbone.sync to display the state of the collection.</td></tr><tr><td>7</td><td>addAdd a model or array of models to the collection.</td></tr><tr><td>8</td><td>removeRemoves a model or array of models from the collection.</td></tr><tr><td>9</td><td>resetIt resets the collection and populates with new array of models or will empty the entire collection.</td></tr><tr><td>10</td><td>setIt is used to update the collection with a set of items in a model. If any new model is found, the items will be added to that model.</td></tr><tr><td>11</td><td>getIt is used to retrieve the model from a collection by using the <strong>idor cid</strong>.</td></tr><tr><td>12</td><td>atRetrieve the model from a collection by using specified index.</td></tr><tr><td>13</td><td>pushIt is similar to the add() method which takes the array of models and pushes the models to the collection.</td></tr><tr><td>14</td><td>popIt is similar to the remove() method which takes the array of models and removes the models from the collection.</td></tr><tr><td>15</td><td>unshiftAdd a specified model at the beginning of a collection.</td></tr><tr><td>16</td><td>shiftIt removes the first item from the collection.</td></tr><tr><td>17</td><td>sliceDisplays the shallow copy of the elements from the collection model.</td></tr><tr><td>18</td><td>lengthCounts the number of models in the collection.</td></tr><tr><td>19</td><td>comparatorIt is used to sort the items in the collection.</td></tr><tr><td>20</td><td>sortSorts the items in the collection and uses comparator property in order to sort the items.</td></tr><tr><td>21</td><td>pluckRetrieves the attributes from the model in the collection.</td></tr><tr><td>22</td><td>whereIt is used to display the model by using the matched attribute in the collection.</td></tr><tr><td>23</td><td>findWhereIt returns the model, that matches the specified attribute in the collection.</td></tr><tr><td>24</td><td>urlIt creates an instance of the collection and returns where resources are located.</td></tr><tr><td>25</td><td>parseReturns the collection&#8217;s data by passing through the response object and represents the data in JSON format.</td></tr><tr><td>26</td><td>cloneIt returns the shallow copy of the specified object.</td></tr><tr><td>27</td><td>fetchIt extracts the data from the model in the collection using the sync method.</td></tr><tr><td>28</td><td>createIt creates a new instance of the model in the collection.</td></tr></tbody></table></figure>\n\n\n\n<h2>Underscore Methods</h2>\n\n\n\n<p>The following table lists down the&nbsp;<strong>Underscore.js</strong>&nbsp;methods which provides their functionality to be used on the&nbsp;<strong>Backbone.Collection</strong>.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td><strong>_.each(list, iteratee, [context])</strong>Iterates each of the elements in the collection using the iteratee function.</td></tr><tr><td>2</td><td><strong>_.map(list, iteratee, [context])</strong>It maps each value and displays them in a new array of values using the&nbsp;<strong>iteratee</strong>&nbsp;function.</td></tr><tr><td>3</td><td><strong>_.reduce(list, iteratee, memo, [context])</strong>It reduces the list of values into a single value and it also known as&nbsp;<strong>inject</strong>&nbsp;and&nbsp;<strong>foldl</strong>.</td></tr><tr><td>4</td><td><strong>_.reduceRight(list, iteratee, memo, [context])</strong>It is the right associative version of&nbsp;<strong>reduce</strong>.</td></tr><tr><td>5</td><td><strong>_.find(list, predicate, [context])</strong>It finds each value and returns the first one which passes the predicate or test.</td></tr><tr><td>6</td><td><strong>_.filter(list, predicate, [context])</strong>It filters each value and returns the array of values which passes the predicate or test.</td></tr><tr><td>7</td><td><strong>_.reject(list, predicate, [context])</strong>It returns the rejected elements in the list which do not pass the predicted values.</td></tr><tr><td>8</td><td><strong>_.every(list, predicate, [context])</strong>It returns true, if elements in the list pass the predicted values.</td></tr><tr><td>9</td><td><strong>_.some(list, predicate, [context])</strong>It returns true, if elements in the list pass the predicted values.</td></tr><tr><td>10</td><td><strong>_.contains(list, value, [fromIndex])</strong>It returns true, if a value is present in the list.</td></tr><tr><td>11</td><td><strong>_.invoke(list, methodName, *arguments)</strong>It invokes the method name using&nbsp;<strong>methodName()</strong>&nbsp;on each value in the list.</td></tr><tr><td>12</td><td><strong>_.max(list, [iteratee], [context])</strong>It specifies the maximum value in the list.</td></tr><tr><td>13</td><td><strong>_.min(list, [iteratee], [context])</strong>It specifies the minimum value in the list.</td></tr><tr><td>14</td><td><strong>_.sortBy(list, [iteratee], [context])</strong>It returns the sorted elements in the ascending order by using iteratee in the list.</td></tr><tr><td>15</td><td><strong>_.groupBy(list, [iteratee], [context])</strong>It divides the collection values into the sets, grouped by using the&nbsp;<strong>iteratee</strong>&nbsp;in the list.</td></tr><tr><td>16</td><td><strong>_.shuffle(list)</strong>It returns the shuffled copy of the list.</td></tr><tr><td>17</td><td><strong>_.toArray(list)</strong>It defines an array of the list.</td></tr><tr><td>18</td><td><strong>_.size(list)</strong>It defines the number of values in the list.</td></tr><tr><td>19</td><td><strong>_.first(array, [n])</strong>It specifies the first element of the array in the list.</td></tr><tr><td>20</td><td><strong>_.initial(array, [n])</strong>It returns everything, but specifies the last entry of the array in the list.</td></tr><tr><td>21</td><td><strong>_.last(array, [n])</strong>It specifies the last element of the array in the list.</td></tr><tr><td>22</td><td><strong>_.rest(array, [index])</strong>It defines the remaining elements in the array.</td></tr><tr><td>23</td><td><strong>_.without(array, *values)</strong>It returns the values of all instances which are removed in the list.</td></tr><tr><td>24</td><td><strong>_.indexOf(array, value, [isSorted])</strong>It returns the value if it is found at a specified index or returns -1, if it is not found.</td></tr><tr><td>25</td><td><strong>_.indexOf(array, value, [fromIndex])</strong>It returns the last occurrence of the value in the array or returns -1, if it is not found.</td></tr><tr><td>26</td><td><strong>_.isEmpty(object)</strong>It returns true if there are no values in the list.</td></tr><tr><td>27</td><td><strong>_.chain(obj)</strong>It returns a wrapped object.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Collections are ordered sets of Models. We just need to extend the backbone&#8217;s collection class to create our own collection. Any event that is triggered on a model in a collection will also be triggered on the collection directly. This allows you to listen for changes to specific attributes in any model in a collection. [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/194"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=194"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/194/revisions"}],"predecessor-version":[{"id":205,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/194/revisions/205"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=194"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=194"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=194"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":193,"date":"2020-07-21T11:36:42","date_gmt":"2020-07-21T11:36:42","guid":{"rendered":"http://javascript.foobrdigital.com/?p=193"},"modified":"2021-02-11T10:59:57","modified_gmt":"2021-02-11T10:59:57","slug":"router","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/router/","title":{"rendered":"Router"},"content":{"rendered":"\n<p>Router is used for routing the client side applications and defines the URL representation of the application&#8217;s object. A router is required when web applications provide linkable, bookmarkable and shareable URL&#8217;s for important locations in the app.</p>\n\n\n\n<p>The following table lists down the methods which can be used to manipulate the&nbsp;<strong>BackboneJS &#8211; Router</strong>&nbsp;−</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>extendIt extends the backbone&#8217;s router class.</td></tr><tr><td>2</td><td>routesIt defines the URL representation of applications objects.</td></tr><tr><td>3</td><td>initializeIt creates a new constructor for the router instantiation.</td></tr><tr><td>4</td><td>routeIt creates a route for the router.</td></tr><tr><td>5</td><td>navigateIt is used to update the URL in the applications.</td></tr><tr><td>6</td><td>executeIt is used when a route matches its corresponding callback.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Router is used for routing the client side applications and defines the URL representation of the application&#8217;s object. A router is required when web applications provide linkable, bookmarkable and shareable URL&#8217;s for important locations in the app. The following table lists down the methods which can be used to manipulate the&nbsp;BackboneJS &#8211; Router&nbsp;− S.No. Methods [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/193"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=193"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/193/revisions"}],"predecessor-version":[{"id":206,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/193/revisions/206"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=193"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=193"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=193"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":192,"date":"2020-07-21T11:38:02","date_gmt":"2020-07-21T11:38:02","guid":{"rendered":"http://javascript.foobrdigital.com/?p=192"},"modified":"2021-02-11T10:59:57","modified_gmt":"2021-02-11T10:59:57","slug":"history","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/history/","title":{"rendered":"History"},"content":{"rendered":"\n<p>It keeps a track of the history, matches the appropriate route, fires callbacks to handle events and enables the routing in the application.</p>\n\n\n\n<h2>start</h2>\n\n\n\n<p>This is the only method which can be used to manipulate the&nbsp;<strong>BackboneJS-History</strong>. It starts listening to routes and manages the history for bookmarkable URL&#8217;s.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Backbone.history.start(options)\n</code></pre>\n\n\n\n<h3>Parameters</h3>\n\n\n\n<p><strong>options</strong>&nbsp;− The options include the parameters such as&nbsp;<strong>pushState</strong>&nbsp;and&nbsp;<strong>hashChange</strong>&nbsp;used with history.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   &lt;head>\n      &lt;title>History Example&lt;/title>\n      &lt;script src = \"https://code.jquery.com/jquery-2.1.3.min.js\"\n         type = \"text/javascript\">&lt;/script>\n      \n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.2/underscore-min.js\"\n         type = \"text/javascript\">&lt;/script>\n      \n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.1.2/backbone-min.js\"\n         type = \"text/javascript\">&lt;/script>\n   &lt;/head>\n   \n   &lt;script type = \"text/javascript\">\n      //'Router' is a name of the router class\n      var Router = Backbone.Router.extend ({\n\n         //The 'routes' maps URLs with parameters to functions on your router\n         routes: {\n            \"myroute\" : \"myFunc\"\n         },\n\n         //'The function 'myFunc' defines the links for the route on the browser\n         myFunc: function (myroute) {\n            document.write(myroute);\n         }\n      });\n\n      //'router' is an instance of the Router\n      var router = new Router();\n\n      //Start listening to the routes and manages the history for bookmarkable URL's\n      Backbone.history.start();\n   &lt;/script>\n   \n   &lt;body>\n      \n      &lt;a href = \"#route1\">Route1 &lt;/a>\n      &lt;a href = \"#route2\">Route2 &lt;/a>\n      &lt;a href = \"#route3\">Route3 &lt;/a>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<p>Let us carry out the following steps to see how the above code works −</p>\n\n\n\n<ul><li>Save the above code in the&nbsp;<strong>start.htm</strong>&nbsp;file.</li><li>Open this HTML file in a browser.</li></ul>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− The above functionality is related to the address bar. So, when you open the above code in the browser, it will show the result as follows.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/backbonejs/images/start.jpg\" alt=\"start example\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>It keeps a track of the history, matches the appropriate route, fires callbacks to handle events and enables the routing in the application. start This is the only method which can be used to manipulate the&nbsp;BackboneJS-History. It starts listening to routes and manages the history for bookmarkable URL&#8217;s. Syntax Parameters options&nbsp;− The options include the [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/192"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=192"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/192/revisions"}],"predecessor-version":[{"id":207,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/192/revisions/207"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=192"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=192"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=192"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":191,"date":"2020-07-21T11:38:34","date_gmt":"2020-07-21T11:38:34","guid":{"rendered":"http://javascript.foobrdigital.com/?p=191"},"modified":"2021-02-11T10:59:57","modified_gmt":"2021-02-11T10:59:57","slug":"sync","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/sync/","title":{"rendered":"Sync"},"content":{"rendered":"\n<p>It is used to persist the state of the model to the server.</p>\n\n\n\n<p>The following table lists down the methods which can be used to manipulate the&nbsp;<strong>BackboneJS-Sync</strong>&nbsp;−</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>Backbone.syncIt persists the state of the model to the server.</td></tr><tr><td>2</td><td><strong>Backbone.ajax</strong>It defines the custom ajax function.</td></tr><tr><td>3</td><td>Backbone.emulateHTTPIf your web server does not support REST or HTTP approach, then turn on the Backbone.emulateHTTP.</td></tr><tr><td>4</td><td>Backbone.emulateJSONIt is used to handle the requests encoded with <strong>application/json</strong> by setting the method to <strong>true</strong>.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>It is used to persist the state of the model to the server. The following table lists down the methods which can be used to manipulate the&nbsp;BackboneJS-Sync&nbsp;− S.No. Methods &amp; Description 1 Backbone.syncIt persists the state of the model to the server. 2 Backbone.ajaxIt defines the custom ajax function. 3 Backbone.emulateHTTPIf your web server does [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/191"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=191"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/191/revisions"}],"predecessor-version":[{"id":208,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/191/revisions/208"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=191"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=191"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=191"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":190,"date":"2020-07-21T11:39:15","date_gmt":"2020-07-21T11:39:15","guid":{"rendered":"http://javascript.foobrdigital.com/?p=190"},"modified":"2021-02-11T10:59:57","modified_gmt":"2021-02-11T10:59:57","slug":"view","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/view/","title":{"rendered":"View"},"content":{"rendered":"\n<p>Views are used to reflect &#8220;how your data model looks like&#8221;. They represent the model&#8217;s data to the user. They provide the idea behind the presentation of the model&#8217;s data to the user. It handles the user input events, binds events and methods, renders model or collection and interacts with the user.</p>\n\n\n\n<p>The following table lists down the methods which can be used to manipulate the&nbsp;<strong>BackboneJS-Views</strong>.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>extendIt extends the <strong>Backbone.View</strong> class to create a custom view class.</td></tr><tr><td>2</td><td>initializeIt instantiates the view by using the new keyword.</td></tr><tr><td>3</td><td>elIt defines which element to be used as the view reference.</td></tr><tr><td>4</td><td>$elIt represents the jQuery object for the view&#8217;s element.</td></tr><tr><td>5</td><td>setElementIt specifies the existing DOM element to a different DOM element.</td></tr><tr><td>6</td><td>attributesThey can be used as DOM element attributes on the view class.</td></tr><tr><td>7</td><td>$(jQuery)It is used as a selector that contains the $ function and runs queries within the view&#8217;s element.</td></tr><tr><td>8</td><td>templateWhile rendering the view, template creates reusable copies of markup and provides access to instance data.</td></tr><tr><td>9</td><td>renderIt contains the logic for rendering a template.</td></tr><tr><td>10</td><td>removeRemoves a view from the DOM.</td></tr><tr><td>11</td><td>delegateEventsBinds elements to the specified DOM elements with callback methods to handle events.</td></tr><tr><td>12</td><td>undelegateEventsIt removes delegate events from the view.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Views are used to reflect &#8220;how your data model looks like&#8221;. They represent the model&#8217;s data to the user. They provide the idea behind the presentation of the model&#8217;s data to the user. It handles the user input events, binds events and methods, renders model or collection and interacts with the user. The following table [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/190"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=190"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/190/revisions"}],"predecessor-version":[{"id":209,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/190/revisions/209"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=190"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=190"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=190"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":189,"date":"2020-07-21T11:39:33","date_gmt":"2020-07-21T11:39:33","guid":{"rendered":"http://javascript.foobrdigital.com/?p=189"},"modified":"2021-02-11T10:59:57","modified_gmt":"2021-02-11T10:59:57","slug":"utility","status":"publish","type":"post","link":"https://javascript.foobrdigital.com/utility/","title":{"rendered":"Utility"},"content":{"rendered":"\n<p>The utility class defines a set of methods used for implementing the backbone utility.</p>\n\n\n\n<p>The following table lists down the methods which you can use to manipulate the&nbsp;<strong>BackboneJS-Utility</strong>&nbsp;−</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No.</th><th>Methods &amp; Description</th></tr><tr><td>1</td><td>Backbone.noConflictIt displays the original value of Backbone object and allows to store reference to a backbone.</td></tr><tr><td>2</td><td>Backbone.$It allows Backbone to use particular object as DOM library.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>The utility class defines a set of methods used for implementing the backbone utility. The following table lists down the methods which you can use to manipulate the&nbsp;BackboneJS-Utility&nbsp;− S.No. Methods &amp; Description 1 Backbone.noConflictIt displays the original value of Backbone object and allows to store reference to a backbone. 2 Backbone.$It allows Backbone to use [&hellip;]</p>\n","protected":false},"author":2,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[14,138],"tags":[],"_links":{"self":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/189"}],"collection":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/users/2"}],"replies":[{"embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/comments?post=189"}],"version-history":[{"count":1,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/189/revisions"}],"predecessor-version":[{"id":210,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/posts/189/revisions/210"}],"wp:attachment":[{"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/media?parent=189"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/categories?post=189"},{"taxonomy":"post_tag","embeddable":true,"href":"https://javascript.foobrdigital.com/wp-json/wp/v2/tags?post=189"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]