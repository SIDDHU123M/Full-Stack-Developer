[
    {
        "id": 1845,
        "date": "2021-03-16T09:35:55",
        "date_gmt": "2021-03-16T09:35:55",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1845"
        },
        "modified": "2021-03-16T09:35:55",
        "modified_gmt": "2021-03-16T09:35:55",
        "slug": "overview-18",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-18\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p>In functional programming paradigm, an application is written mostly using pure functions. Here pure function is a function having no side effects. An example of side effect is modification of instance level variable while returning a value from the function.<\/p>\n\n\n\n<p>Following are the key aspects of functional programming.<\/p>\n\n\n\n<ul><li><strong>Functions<\/strong>&nbsp;\u2212 A function is a block of statements that performs a specific task. Functions accept data, process it, and return a result. Functions are written primarily to support the concept of re usability. Once a function is written, it can be called easily, without having to write the same code again and again.Functional Programming revolves around first class functions, pure functions and high order functions.<ul><li>A&nbsp;<strong>First Class Function<\/strong>&nbsp;is the one that uses first class entities like String, numbers which can be passed as arguments, can be returned or assigned to a variable.<\/li><li>A&nbsp;<strong>High Order Function<\/strong>&nbsp;is the one which can either take a function as an argument and\/or can return a function.<\/li><li>A&nbsp;<strong>Pure Function<\/strong>&nbsp;is the one which has no side effect while its execution.<\/li><\/ul><\/li><li><strong>Functional Composition<\/strong>&nbsp;\u2212 In imperative programming, functions are used to organize an executable code and emphasis is on organization of code. But in functional programming, emphasis is on how functions are organized and combined. Often data and functions are passed together as arguments and returned. This makes programming more capable and expressive.<\/li><li><strong>Fluent Interfaces<\/strong>&nbsp;\u2212 Fluent interfaces helps in composing expressions which are easy to write and understand. These interfaces helps in chaining the method call when each method return type is again reused. For example \u2212<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>LocalDate futureDate = LocalDate.now().plusYears(2).plusDays(3);<\/code><\/pre>\n\n\n\n<ul><li><strong>Eager vs Lazy Evaluation<\/strong>\u00a0\u2212 Eager evaluation means expressions are evaluated as soon as they are encountered whereas lazy evaluation refers to delaying the execution till a certain condition is met. For example, stream methods in Java 8 are evaluated when a terminal method is encountered.<\/li><li>Persistent Data Structures\u2212 A persistent data structure maintains its previous version. Whenever the data structure state is changed, a new copy of the structure is created so the data structure remains effectively immutable. Such immutable collections are thread-safe.<\/li><li>Recursion\u00a0\u2212 A repeated calculation can be done by making a loop or using recursion more elegantly. A function is called a recursive function if it calls itself.<\/li><li>Parallelism\u00a0\u2212 Functions with no side effects can be called in any order and thus are candidates for lazy evaluation. Functional programming in Java supports parallelism using streams where parallel processing is provided.<\/li><li>Optional\u00a0\u2212 Optional is a special class that enforces that a function should never return null. It should return value using the Optional class object. This returned object has a method is present which can be checked to get the value only if present.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In functional programming paradigm, an application is written mostly using pure functions. Here pure function is a function having no side effects. An example of side effect is modification of instance level variable while returning a value from the function. Following are the key aspects of functional programming. Functions&nbsp;\u2212 A function is a block of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1845"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1845"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1845\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1846,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1845\/revisions\/1846"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1845"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1845"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1845"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1847,
        "date": "2021-03-16T09:39:20",
        "date_gmt": "2021-03-16T09:39:20",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1847"
        },
        "modified": "2021-03-16T09:39:20",
        "modified_gmt": "2021-03-16T09:39:20",
        "slug": "functions-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/functions-2\/",
        "title": {
            "rendered": "Functions"
        },
        "content": {
            "rendered": "\n<p>A function is a block of statements that performs a specific task. Functions accept data, process it, and return a result. Functions are written primarily to support the concept of re usability. Once a function is written, it can be called easily, without having to write the same code again and again.<\/p>\n\n\n\n<p>Functional Programming revolves around first class functions, pure functions and high order functions.<\/p>\n\n\n\n<ul><li>A&nbsp;<strong>First Class Function<\/strong>&nbsp;is the one that uses first class entities like String, numbers which can be passed as arguments, can be returned or assigned to a variable.<\/li><li>A&nbsp;<strong>High Order Function<\/strong>&nbsp;is the one which can take a function as an argument and\/or can return a function.<\/li><li>A&nbsp;<strong>Pure Function<\/strong>&nbsp;is the one which has no side effect while its execution.<\/li><\/ul>\n\n\n\n<h2>First Class Function<\/h2>\n\n\n\n<p>A first class function can be treated as a variable. That means it can be passed as a parameter to a function, it can be returned by a function or can be assigned to a variable as well. Java supports first class function using lambda expression. A lambda expression is analogous to an anonymous function. See the example below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FunctionTester {\n   public static void main(String&#91;] args) {\n      int&#91;] array = {1, 2, 3, 4, 5};\n      SquareMaker squareMaker = item -&gt; item * item;\n      for(int i = 0; i &lt; array.length; i++){\n         System.out.println(squareMaker.square(array&#91;i]));\n      }\n   }\n}\ninterface SquareMaker {\n   int square(int item);\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n4\n9\n16\n25\n<\/code><\/pre>\n\n\n\n<p>Here we have created the implementation of square function using a lambda expression and assigned it to variable squareMaker.<\/p>\n\n\n\n<h2>High Order Function<\/h2>\n\n\n\n<p>A high order function either takes a function as a parameter or returns a function. In Java, we can pass or return a lambda expression to achieve such functionality.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.function.Function;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      int&#91;] array = {1, 2, 3, 4, 5};\n\n      Function&lt;Integer, Integer&gt; square = t -&gt; t * t;        \n      Function&lt;Integer, Integer&gt; cube = t -&gt; t * t * t;\n\n      for(int i = 0; i &lt; array.length; i++){\n         print(square, array&#91;i]);\n      }        \n      for(int i = 0; i &lt; array.length; i++){\n         print(cube, array&#91;i]);\n      }\n   }\n\n   private static &lt;T, R&gt; void print(Function&lt;T, R&gt; function, T t ) {\n      System.out.println(function.apply(t));\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n4\n9\n16\n25\n1\n8\n27\n64\n125\n<\/code><\/pre>\n\n\n\n<h2>Pure Function<\/h2>\n\n\n\n<p>A pure function does not modify any global variable or modify any reference passed as a parameter to it. So it has no side-effect. It always returns the same value when invoked with same parameters. Such functions are very useful and are thread safe. In example below, sum is a pure function.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FunctionTester {\n   public static void main(String&#91;] args) {\n      int a, b;\n      a = 1;\n      b = 2;\n      System.out.println(sum(a, b));\n   }\n\n   private static int sum(int a, int b){\n      return a + b;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>3<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A function is a block of statements that performs a specific task. Functions accept data, process it, and return a result. Functions are written primarily to support the concept of re usability. Once a function is written, it can be called easily, without having to write the same code again and again. Functional Programming revolves [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1847"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1847"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1847\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1848,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1847\/revisions\/1848"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1847"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1847"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1847"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1849,
        "date": "2021-03-16T09:41:35",
        "date_gmt": "2021-03-16T09:41:35",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1849"
        },
        "modified": "2021-03-16T09:41:35",
        "modified_gmt": "2021-03-16T09:41:35",
        "slug": "composition",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/composition\/",
        "title": {
            "rendered": "Composition"
        },
        "content": {
            "rendered": "\n<p>Functional composition refers to a technique where multiple functions are combined together to a single function. We can combine lambda expression together. Java provides inbuilt support using Predicate and Function classes. Following example shows how to combine two functions using predicate approach.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.function.Predicate;\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      Predicate&lt;String&gt; hasName = text -&gt; text.contains(\"name\");\n      Predicate&lt;String&gt; hasPassword = text -&gt; text.contains(\"password\");\n      Predicate&lt;String&gt; hasBothNameAndPassword = hasName.and(hasPassword);\n      String queryString = \"name=test;password=test\";\n      System.out.println(hasBothNameAndPassword.test(queryString));\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>true\n<\/code><\/pre>\n\n\n\n<p><strong>Predicate<\/strong>&nbsp;provides and() and or() method to combine functions. Whereas&nbsp;<strong>Function<\/strong>&nbsp;provides compose and andThen methods to combine functions. Following example shows how to combine two functions using Function approach.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.function.Function;\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      Function&lt;Integer, Integer&gt; multiply = t -&gt; t *3;\n      Function&lt;Integer, Integer&gt; add = t -&gt; t  + 3;\n      Function&lt;Integer, Integer&gt; FirstMultiplyThenAdd = multiply.compose(add);\n      Function&lt;Integer, Integer&gt; FirstAddThenMultiply = multiply.andThen(add);\n      System.out.println(FirstMultiplyThenAdd.apply(3));\n      System.out.println(FirstAddThenMultiply.apply(3));\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>18\n12<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Functional composition refers to a technique where multiple functions are combined together to a single function. We can combine lambda expression together. Java provides inbuilt support using Predicate and Function classes. Following example shows how to combine two functions using predicate approach. Output Predicate&nbsp;provides and() and or() method to combine functions. Whereas&nbsp;Function&nbsp;provides compose and andThen [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1849"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1849"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1849\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1850,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1849\/revisions\/1850"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1849"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1849"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1849"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1851,
        "date": "2021-03-16T09:43:55",
        "date_gmt": "2021-03-16T09:43:55",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1851"
        },
        "modified": "2021-03-16T09:43:55",
        "modified_gmt": "2021-03-16T09:43:55",
        "slug": "eager-vs-lazy-evaluation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/eager-vs-lazy-evaluation\/",
        "title": {
            "rendered": "Eager vs Lazy Evaluation"
        },
        "content": {
            "rendered": "\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p>Eager evaluation means the expression is evaluated as soon as it is encountered whereas lazy evaluation refers to the evaluation of an expression when needed. See the following example under the concept.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.function.Supplier;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      String queryString = \"password=test\";\n      System.out.println(checkInEagerWay(hasName(queryString)\n         , hasPassword(queryString)));\n      System.out.println(checkInLazyWay(() -&gt; hasName(queryString)\n         , () -&gt; hasPassword(queryString)));\n   }\n\n   private static boolean hasName(String queryString){\n      System.out.println(\"Checking name: \");\n      return queryString.contains(\"name\");\n   }\n\n   private static boolean hasPassword(String queryString){\n      System.out.println(\"Checking password: \");\n      return queryString.contains(\"password\");\n   } \n\n   private static String checkInEagerWay(boolean result1, boolean result2){\n      return (result1 &amp;&amp; result2) ? \"all conditions passed\": \"failed.\";\n   }\n\n   private static String checkInLazyWay(Supplier&lt;Boolean&gt; result1, Supplier&lt;Boolean&gt; result2){\n      return (result1.get() &amp;&amp; result2.get()) ? \"all conditions passed\": \"failed.\";\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Checking name: \nChecking password: \nfailed.\nChecking name: \nfailed.\n<\/code><\/pre>\n\n\n\n<p>Here checkInEagerWay() function first evaluated the parameters then executes its statement. Whereas checkInLazyWay() executes its statement and evaluates the parameter on a need basis. As &amp;&amp; is a short-circuit operator, checkInLazyWay only evaluated the first parameter which comes as false, and does not evaluate the second parameter at all.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Eager evaluation means the expression is evaluated as soon as it is encountered whereas lazy evaluation refers to the evaluation of an expression when needed. See the following example under the concept. Output Here checkInEagerWay() function first evaluated the parameters then executes its statement. Whereas checkInLazyWay() executes its statement and evaluates the parameter on a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1851"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1851"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1851\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1852,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1851\/revisions\/1852"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1851"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1851"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1851"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1853,
        "date": "2021-03-16T09:45:15",
        "date_gmt": "2021-03-16T09:45:15",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1853"
        },
        "modified": "2021-03-16T09:45:15",
        "modified_gmt": "2021-03-16T09:45:15",
        "slug": "persistent-data-structure",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/persistent-data-structure\/",
        "title": {
            "rendered": "Persistent Data Structure"
        },
        "content": {
            "rendered": "\n<p>A data structure is said to be persistent if it is capable to maintaining its previous updates as separate versions and each version can be accessed and updated accordingly. It makes the data structure immutable and thread safe. For example, String class object in Java is immutable. Whenever we make any change to string, JVM creates another string object, assigned it the new value and preserve the older value as old string object.<\/p>\n\n\n\n<p>A persistent data structure is also called a functional data structure. Consider the following case \u2212<\/p>\n\n\n\n<h2>Non-Persistent way<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public static Person updateAge(Person person, int age){\n   person.setAge(age);\n   return person;\n}<\/code><\/pre>\n\n\n\n<h2>Persistent way<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public static Person updateAge(Person pPerson, int age){\n   Person person = new Person();\n   person.setAge(age);\n   return person;\n}<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A data structure is said to be persistent if it is capable to maintaining its previous updates as separate versions and each version can be accessed and updated accordingly. It makes the data structure immutable and thread safe. For example, String class object in Java is immutable. Whenever we make any change to string, JVM [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1853"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1853"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1853\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1854,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1853\/revisions\/1854"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1853"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1853"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1853"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1855,
        "date": "2021-03-16T09:55:24",
        "date_gmt": "2021-03-16T09:55:24",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1855"
        },
        "modified": "2021-03-16T09:55:24",
        "modified_gmt": "2021-03-16T09:55:24",
        "slug": "recursion-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/recursion-2\/",
        "title": {
            "rendered": "Recursion"
        },
        "content": {
            "rendered": "\n<p>Recursion is calling a same function in a function until certain condition are met. It helps in breaking big problem into smaller ones. Recursion also makes code more readable and expressive.<\/p>\n\n\n\n<h2>Imperative vs Recursive<\/h2>\n\n\n\n<p>Following examples shows the calculation of sum of natural numbers using both the techniques.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FunctionTester {\n   public static void main(String&#91;] args) {\n      System.out.println(\"Sum using imperative way. Sum(5) : \" + sum(5));\n      System.out.println(\"Sum using recursive way. Sum(5) : \" + sumRecursive(5));\n   }\n\n   private static int sum(int n){\n      int result = 0;\n      for(int i = 1; i &lt;= n; i++){\n         result = result + i;\n      }\n      return result;\n   }\n\n   private static int sumRecursive(int n){\n      if(n == 1){\n         return 1;\n      }else{\n         return n + sumRecursive(n-1);\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Sum using imperative way. Sum(5) : 15\nSum using recursive way. Sum(5) : 15\n<\/code><\/pre>\n\n\n\n<p>Using recursion, we are adding the result of sum of n-1 natural numbers with n to get the required result.<\/p>\n\n\n\n<h2>Tail Recursion<\/h2>\n\n\n\n<p>Tail recursion says that recursive method call should be at the end. Following examples shows the printing of a number series using tail recursion.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FunctionTester {\n   public static void main(String&#91;] args) {\n      printUsingTailRecursion(5);\n   }\n\n   public static void printUsingTailRecursion(int n){\n      if(n == 0) \n         return;\n      else\n         System.out.println(n);\n      printUsingTailRecursion(n-1);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n4\n3\n2\n1\n<\/code><\/pre>\n\n\n\n<h2>Head Recursion<\/h2>\n\n\n\n<p>Head recursion says that recursive method call should be in the beginning of the code. Following examples shows the printing of a number series using head recursion.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FunctionTester {\n   public static void main(String&#91;] args) {     \n      printUsingHeadRecursion(5);\n   }\n\n   public static void printUsingHeadRecursion(int n){\n      if(n == 0) \n         return;\n      else\n         printUsingHeadRecursion(n-1); \n      System.out.println(n);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>1\n2\n3\n4\n5<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Recursion is calling a same function in a function until certain condition are met. It helps in breaking big problem into smaller ones. Recursion also makes code more readable and expressive. Imperative vs Recursive Following examples shows the calculation of sum of natural numbers using both the techniques. Output Using recursion, we are adding the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1855"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1855"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1855\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1856,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1855\/revisions\/1856"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1855"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1855"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1855"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1857,
        "date": "2021-03-16T09:57:33",
        "date_gmt": "2021-03-16T09:57:33",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1857"
        },
        "modified": "2021-03-16T09:57:33",
        "modified_gmt": "2021-03-16T09:57:33",
        "slug": "parallelism",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/parallelism\/",
        "title": {
            "rendered": "Parallelism"
        },
        "content": {
            "rendered": "\n<p>Parallelism is a key concept of functional programming where a big task is accomplished by breaking in smaller independent tasks and then these small tasks are completed in a parallel fashion and later combined to give the complete result. With the advent of multi-core processors, this technique helps in faster code execution. Java has Thread based programming support for parallel processing but it is quite tedious to learn and difficult to implement without bugs. Java 8 onwards, stream have parallel method and collections has parallelStream() method to complete tasks in parallel fashion. See the example below:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n\n      Integer&#91;] intArray = {1, 2, 3, 4, 5, 6, 7, 8 };\n      List&lt;Integer&gt; listOfIntegers = new ArrayList&lt;&gt;(Arrays.asList(intArray));\n\n      System.out.println(\"List using Serial Stream:\");\n      listOfIntegers\n         .stream()\n         .forEach(e -&gt; System.out.print(e + \" \"));\n      System.out.println(\"\");\n\n      System.out.println(\"List using Parallel Stream:\");\n      listOfIntegers\n         .parallelStream()\n         .forEach(e -&gt; System.out.print(e + \" \"));\n      System.out.println(\"\");\n\n      System.out.println(\"List using Another Parallel Stream:\");\n      listOfIntegers\n         .stream()\n         .parallel()\n         .forEach(e -&gt; System.out.print(e + \" \"));\n      System.out.println(\"\");\n\n      System.out.println(\"List using Parallel Stream but Ordered:\");\n      listOfIntegers\n         .parallelStream()\n         .forEachOrdered(e -&gt; System.out.print(e + \" \"));\n         System.out.println(\"\"); \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>List using Serial Stream:\n1 2 3 4 5 6 7 8 \nList using Parallel Stream:\n6 5 8 7 3 4 2 1 \nList using Another Parallel Stream:\n6 2 1 7 4 3 8 5 \nList using Parallel Stream but Ordered:\n1 2 3 4 5 6 7 8 <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Parallelism is a key concept of functional programming where a big task is accomplished by breaking in smaller independent tasks and then these small tasks are completed in a parallel fashion and later combined to give the complete result. With the advent of multi-core processors, this technique helps in faster code execution. Java has Thread [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1857"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1857"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1857\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1858,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1857\/revisions\/1858"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1857"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1857"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1857"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1859,
        "date": "2021-03-16T10:00:18",
        "date_gmt": "2021-03-16T10:00:18",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1859"
        },
        "modified": "2021-03-16T10:00:18",
        "modified_gmt": "2021-03-16T10:00:18",
        "slug": "optional-and-monads",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/optional-and-monads\/",
        "title": {
            "rendered": "Optional and Monads"
        },
        "content": {
            "rendered": "\n<p>Monad is a key concept of Functional Programming. A Monad is a design pattern which helps to represent a missing value. It allows to wrap a potential null value, allows to put transformation around it and pull actual value if present. By definition, a monad is a set of following parameters.<\/p>\n\n\n\n<ul><li><strong>A parametrized Type<\/strong>&nbsp;\u2212 M&lt;T&gt;<\/li><li><strong>A unit Function<\/strong>&nbsp;\u2212 T \u2212&gt; M&lt;T&gt;<\/li><li><strong>A bind operation<\/strong>&nbsp;\u2212 M&lt;T&gt; bind T \u2212&gt; M&lt;U&gt; = M&lt;U&gt;<\/li><\/ul>\n\n\n\n<h2>Key Operations<\/h2>\n\n\n\n<ul><li><strong>Left Identity<\/strong>\u00a0\u2212 If a function is a bind on a monad of a particular value then its result will be the same as if the function is applied to the value.<\/li><li>Right Identity\u00a0\u2212 If a monad return method is the same as monad on the original value.<\/li><li><strong>Associativity<\/strong>\u00a0\u2212 Functions can be applied in any order on a monad.<\/li><\/ul>\n\n\n\n<h2>Optional Class<\/h2>\n\n\n\n<p>Java 8 introduced Optional class which is a monad. It provides an operational equivalent to a monad. For example,\u00a0the return\u00a0is an operation that takes a value and returns the monad. Optional.of() takes a parameters and returns the Optional Object. On a similar basis,\u00a0bind\u00a0is an operation that binds a function to a monad to produce a monad. Optional.flatMap() is the method that performs an operation on Optional and returns the result as Optional.<\/p>\n\n\n\n<ul><li><strong>A parametrized Type<\/strong>&nbsp;\u2212 Optional&lt;T&gt;<\/li><li><strong>A unit Function<\/strong>&nbsp;\u2212 Optional.of()<\/li><li><strong>A bind operation<\/strong>&nbsp;\u2212 Optional.flatMap()<\/li><\/ul>\n\n\n\n<h3>Example \u2212 Left Identity<\/h3>\n\n\n\n<p>Following example shows how Optional class obeys Left Identity rule.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Optional;\nimport java.util.function.Function;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      Function&lt;Integer, Optional&lt;Integer&gt;&gt; addOneToX \n         = x \u2212&gt; Optional.of(x + 1);\n      System.out.println(Optional.of(5).flatMap(addOneToX)\n         .equals(addOneToX.apply(5)));\n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-preformatted\">true\n<\/pre>\n\n\n\n<h3>Example \u2212 Right Identity<\/h3>\n\n\n\n<p>Following example shows how Optional class obeys Right Identity rule.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Optional;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      System.out.println(Optional.of(5).flatMap(Optional::of)\n         .equals(Optional.of(5)));\n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-preformatted\">true\n<\/pre>\n\n\n\n<h3>Example &#8211; Associativity<\/h3>\n\n\n\n<p>Following example shows how Optional class obeys Associativity rule.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Optional;\nimport java.util.function.Function;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      Function&lt;Integer, Optional&lt;Integer&gt;&gt; addOneToX \n         = x \u2212&gt; Optional.of(x + 1);\n      Function&lt;Integer, Optional&lt;Integer&gt;&gt; addTwoToX \n         = x \u2212&gt; Optional.of(x + 2);\n      Function&lt;Integer, Optional&lt;Integer&gt;&gt; addThreeToX \n         = x \u2212&gt; addOneToX.apply(x).flatMap(addTwoToX);\n      Optional.of(5).flatMap(addOneToX).flatMap(addTwoToX)\n         .equals(Optional.of(5).flatMap(addThreeToX));\n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>true<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Monad is a key concept of Functional Programming. A Monad is a design pattern which helps to represent a missing value. It allows to wrap a potential null value, allows to put transformation around it and pull actual value if present. By definition, a monad is a set of following parameters. A parametrized Type&nbsp;\u2212 M&lt;T&gt; [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1859"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1859"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1859\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1860,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1859\/revisions\/1860"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1859"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1859"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1859"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1861,
        "date": "2021-03-16T10:02:18",
        "date_gmt": "2021-03-16T10:02:18",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1861"
        },
        "modified": "2021-03-16T10:02:18",
        "modified_gmt": "2021-03-16T10:02:18",
        "slug": "closure",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/closure\/",
        "title": {
            "rendered": "Closure"
        },
        "content": {
            "rendered": "\n<p>A closure is a function which is a combination of function along with its surrounding state. A closure function generally have access to outer function&#8217;s scope. In the example given below, we have created a function getWeekDay(String[] days) which returns a function which can return the text equivalent of a weekday. Here getWeekDay() is a closure which is returning a function surrounding the calling function&#8217;s scope.<\/p>\n\n\n\n<p>Following example shows how Closure works.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.function.Function;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      String&#91;] weekDays = {\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n         \"Friday\", \"Saturday\", \"Sunday\" };\n      Function&lt;Integer, String&gt; getIndianWeekDay = getWeekDay(weekDays);\n      System.out.println(getIndianWeekDay.apply(6));      \n   }\n\n   public static Function&lt;Integer, String&gt; getWeekDay(String&#91;] weekDays){\n      return index -&gt; index &gt;= 0 ? weekDays&#91;index % 7] : null;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Sunday<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A closure is a function which is a combination of function along with its surrounding state. A closure function generally have access to outer function&#8217;s scope. In the example given below, we have created a function getWeekDay(String[] days) which returns a function which can return the text equivalent of a weekday. Here getWeekDay() is a [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1861"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1861"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1861\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1862,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1861\/revisions\/1862"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1861"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1861"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1861"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1863,
        "date": "2021-03-16T10:03:36",
        "date_gmt": "2021-03-16T10:03:36",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1863"
        },
        "modified": "2021-03-16T10:03:36",
        "modified_gmt": "2021-03-16T10:03:36",
        "slug": "currying",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/currying\/",
        "title": {
            "rendered": "Currying"
        },
        "content": {
            "rendered": "\n<p>Currying is a technique where a many arguments function call is replaced with multiple method calls with lesser arguments.<\/p>\n\n\n\n<p>See the below equation.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>(1 + 2 + 3) = 1 + (2 + 3) = 1 + 5 = 6\n<\/code><\/pre>\n\n\n\n<p>In terms of functions:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>f(1,2,3) = g(1) + h(2 + 3) = 1 + 5 = 6\n<\/code><\/pre>\n\n\n\n<p>This cascading of functions is called currying and calls to cascaded functions must gives the same result as by calling the main function.<\/p>\n\n\n\n<p>Following example shows how Currying works.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.function.Function;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      Function&lt;Integer, Function&lt;Integer, Function&lt;Integer, Integer&gt;&gt;&gt; \n         addNumbers = u -&gt; v -&gt; w -&gt; u + v + w;             \n      int result = addNumbers.apply(2).apply(3).apply(4);        \n      System.out.println(result);\n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>9<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Currying is a technique where a many arguments function call is replaced with multiple method calls with lesser arguments. See the below equation. In terms of functions: This cascading of functions is called currying and calls to cascaded functions must gives the same result as by calling the main function. Following example shows how Currying [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1863"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1863"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1863\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1864,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1863\/revisions\/1864"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1863"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1863"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1863"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1865,
        "date": "2021-03-16T10:05:15",
        "date_gmt": "2021-03-16T10:05:15",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1865"
        },
        "modified": "2021-03-16T10:05:15",
        "modified_gmt": "2021-03-16T10:05:15",
        "slug": "reducing",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/reducing\/",
        "title": {
            "rendered": "Reducing"
        },
        "content": {
            "rendered": "\n<p>In functional programming, reducing is a technique to reduce a stream of values to a single result by apply a function on all the values. Java provides reduce() function in a Stream class from Java 8 onwards. A stream has inbuilt reducing methods like sum(), average(), count() as well which works on all elements of the stream and returns the single result.<\/p>\n\n\n\n<p>Following example shows how Reducing works.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.stream.IntStream;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n\n      \/\/1 * 2 * 3 * 4 = 24\n      int product = IntStream.range(1, 5) \n         .reduce((num1, num2) -&gt; num1 * num2)\n         .orElse(-1); \n\n      \/\/1 + 2 + 3 + 4 = 10\n      int sum =  IntStream.range(1, 5).sum();\n\n      System.out.println(product);\n      System.out.println(sum);\n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>24\n10<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In functional programming, reducing is a technique to reduce a stream of values to a single result by apply a function on all the values. Java provides reduce() function in a Stream class from Java 8 onwards. A stream has inbuilt reducing methods like sum(), average(), count() as well which works on all elements of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1865"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1865"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1865\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1866,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1865\/revisions\/1866"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1865"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1865"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1865"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1867,
        "date": "2021-03-16T10:08:28",
        "date_gmt": "2021-03-16T10:08:28",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1867"
        },
        "modified": "2021-03-16T10:08:28",
        "modified_gmt": "2021-03-16T10:08:28",
        "slug": "lambda-expressions",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/lambda-expressions\/",
        "title": {
            "rendered": "Lambda Expressions"
        },
        "content": {
            "rendered": "\n<p>Lambda expressions are introduced in Java 8 and are touted to be the biggest feature of Java 8. Lambda expression facilitates functional programming, and simplifies the development a lot.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<p>A lambda expression is characterized by the following syntax.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>parameter -&gt; expression body\n<\/code><\/pre>\n\n\n\n<p>Following are the important characteristics of a lambda expression.<\/p>\n\n\n\n<ul><li><strong>Optional type declaration<\/strong>&nbsp;\u2212 No need to declare the type of a parameter. The compiler can inference the same from the value of the parameter.<\/li><li><strong>Optional parenthesis around parameter<\/strong>&nbsp;\u2212 No need to declare a single parameter in parenthesis. For multiple parameters, parentheses are required.<\/li><li><strong>Optional curly braces<\/strong>&nbsp;\u2212 No need to use curly braces in expression body if the body contains a single statement.<\/li><li><strong>Optional return keyword<\/strong>&nbsp;\u2212 The compiler automatically returns the value if the body has a single expression to return the value. Curly braces are required to indicate that expression returns a value.<\/li><\/ul>\n\n\n\n<h2>Lambda Expressions Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; JAVA.<\/p>\n\n\n\n<h3>Java8Tester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Java8Tester {\n\n   public static void main(String args&#91;]) {\n      Java8Tester tester = new Java8Tester();\n\t\t\n      \/\/with type declaration\n      MathOperation addition = (int a, int b) -&gt; a + b;\n\t\t\n      \/\/with out type declaration\n      MathOperation subtraction = (a, b) -&gt; a - b;\n\t\t\n      \/\/with return statement along with curly braces\n      MathOperation multiplication = (int a, int b) -&gt; { return a * b; };\n\t\t\n      \/\/without return statement and without curly braces\n      MathOperation division = (int a, int b) -&gt; a \/ b;\n\t\t\n      System.out.println(\"10 + 5 = \" + tester.operate(10, 5, addition));\n      System.out.println(\"10 - 5 = \" + tester.operate(10, 5, subtraction));\n      System.out.println(\"10 x 5 = \" + tester.operate(10, 5, multiplication));\n      System.out.println(\"10 \/ 5 = \" + tester.operate(10, 5, division));\n\t\t\n      \/\/without parenthesis\n      GreetingService greetService1 = message -&gt;\n      System.out.println(\"Hello \" + message);\n\t\t\n      \/\/with parenthesis\n      GreetingService greetService2 = (message) -&gt;\n      System.out.println(\"Hello \" + message);\n\t\t\n      greetService1.sayMessage(\"Mahesh\");\n      greetService2.sayMessage(\"Suresh\");\n   }\n\t\n   interface MathOperation {\n      int operation(int a, int b);\n   }\n\t\n   interface GreetingService {\n      void sayMessage(String message);\n   }\n\t\n   private int operate(int a, int b, MathOperation mathOperation) {\n      return mathOperation.operation(a, b);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JAVA&gt;javac Java8Tester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Java8Tester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JAVA&gt;java Java8Tester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>10 + 5 = 15\n10 - 5 = 5\n10 x 5 = 50\n10 \/ 5 = 2\nHello Mahesh\nHello Suresh\n<\/code><\/pre>\n\n\n\n<p>Following are the important points to be considered in the above example.<\/p>\n\n\n\n<ul><li>Lambda expressions are used primarily to define inline implementation of a functional interface, i.e., an interface with a single method only. In the above example, we&#8217;ve used various types of lambda expressions to define the operation method of MathOperation interface. Then we have defined the implementation of sayMessage of GreetingService.<\/li><li>Lambda expression eliminates the need of anonymous class and gives a very simple yet powerful functional programming capability to Java.<\/li><\/ul>\n\n\n\n<h2>Scope<\/h2>\n\n\n\n<p>Using lambda expression, you can refer to any final variable or effectively final variable (which is assigned only once). Lambda expression throws a compilation error, if a variable is assigned a value the second time.<\/p>\n\n\n\n<h3>Scope Example<\/h3>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; JAVA.<\/p>\n\n\n\n<p><strong>Java8Tester.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Java8Tester {\n\n   final static String salutation = \"Hello! \";\n   \n   public static void main(String args&#91;]) {\n      GreetingService greetService1 = message -&gt; \n      System.out.println(salutation + message);\n      greetService1.sayMessage(\"Mahesh\");\n   }\n\t\n   interface GreetingService {\n      void sayMessage(String message);\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JAVA&gt;javac Java8Tester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Java8Tester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JAVA&gt;java Java8Tester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello! Mahesh<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Lambda expressions are introduced in Java 8 and are touted to be the biggest feature of Java 8. Lambda expression facilitates functional programming, and simplifies the development a lot. Syntax A lambda expression is characterized by the following syntax. Following are the important characteristics of a lambda expression. Optional type declaration&nbsp;\u2212 No need to declare [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1867"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1867"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1867\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1868,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1867\/revisions\/1868"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1867"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1867"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1867"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1869,
        "date": "2021-03-16T10:10:24",
        "date_gmt": "2021-03-16T10:10:24",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1869"
        },
        "modified": "2021-03-16T10:10:24",
        "modified_gmt": "2021-03-16T10:10:24",
        "slug": "default-methods",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/default-methods\/",
        "title": {
            "rendered": "Default Methods"
        },
        "content": {
            "rendered": "\n<p>Java 8 introduces a new concept of default method implementation in interfaces. This capability is added for backward compatibility so that old interfaces can be used to leverage the lambda expression capability of Java 8.<\/p>\n\n\n\n<p>For example, &#8216;List&#8217; or &#8216;Collection&#8217; interfaces do not have &#8216;forEach&#8217; method declaration. Thus, adding such method will simply break the collection framework implementations. Java 8 introduces default method so that List\/Collection interface can have a default implementation of forEach method, and the class implementing these interfaces need not implement the same.<\/p>\n\n\n\n<h2>Syntax<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface vehicle {\n\n   default void print() {\n      System.out.println(\"I am a vehicle!\");\n   }\n}\n<\/code><\/pre>\n\n\n\n<h2>Multiple Defaults<\/h2>\n\n\n\n<p>With default functions in interfaces, there is a possibility that a class is implementing two interfaces with same default methods. The following code explains how this ambiguity can be resolved.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface vehicle {\n\n   default void print() {\n      System.out.println(\"I am a vehicle!\");\n   }\n}\n\npublic interface fourWheeler {\n\n   default void print() {\n      System.out.println(\"I am a four wheeler!\");\n   }\n}<\/code><\/pre>\n\n\n\n<p>First solution is to create an own method that overrides the default implementation.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class car implements vehicle, fourWheeler {\n\n   public void print() {\n      System.out.println(\"I am a four wheeler car vehicle!\");\n   }\n}<\/code><\/pre>\n\n\n\n<p>Second solution is to call the default method of the specified interface using super.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class car implements vehicle, fourWheeler {\n\n   default void print() {\n      vehicle.super.print();\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Static Default Methods<\/h2>\n\n\n\n<p>An interface can also have static helper methods from Java 8 onwards.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface vehicle {\n\n   default void print() {\n      System.out.println(\"I am a vehicle!\");\n   }\n\t\n   static void blowHorn() {\n      System.out.println(\"Blowing horn!!!\");\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Default Method Example<\/h2>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; JAVA.<\/p>\n\n\n\n<h3>Java8Tester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Java8Tester {\n\n   public static void main(String args&#91;]) {\n      Vehicle vehicle = new Car();\n      vehicle.print();\n   }\n}\n\ninterface Vehicle {\n\n   default void print() {\n      System.out.println(\"I am a vehicle!\");\n   }\n\t\n   static void blowHorn() {\n      System.out.println(\"Blowing horn!!!\");\n   }\n}\n\ninterface FourWheeler {\n\n   default void print() {\n      System.out.println(\"I am a four wheeler!\");\n   }\n}\n\nclass Car implements Vehicle, FourWheeler {\n\n   public void print() {\n      Vehicle.super.print();\n      FourWheeler.super.print();\n      Vehicle.blowHorn();\n      System.out.println(\"I am a car!\");\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JAVA&gt;javac Java8Tester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Java8Tester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JAVA&gt;java Java8Tester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>I am a vehicle!\nI am a four wheeler!\nBlowing horn!!!\nI am a car!<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java 8 introduces a new concept of default method implementation in interfaces. This capability is added for backward compatibility so that old interfaces can be used to leverage the lambda expression capability of Java 8. For example, &#8216;List&#8217; or &#8216;Collection&#8217; interfaces do not have &#8216;forEach&#8217; method declaration. Thus, adding such method will simply break the [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1869"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1869"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1869\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1870,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1869\/revisions\/1870"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1869"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1869"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1869"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1871,
        "date": "2021-03-16T10:12:23",
        "date_gmt": "2021-03-16T10:12:23",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1871"
        },
        "modified": "2021-03-16T10:12:23",
        "modified_gmt": "2021-03-16T10:12:23",
        "slug": "functional-interfaces",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/functional-interfaces\/",
        "title": {
            "rendered": "Functional Interfaces"
        },
        "content": {
            "rendered": "\n<p>Functional interfaces have a single functionality to exhibit. For example, a Comparable interface with a single method &#8216;compareTo&#8217; is used for comparison purpose. Java 8 has defined a lot of functional interfaces to be used extensively in lambda expressions. Following is the list of functional interfaces defined in java.util.Function package.Given below is the list of interfaces in Java8.<\/p>\n\n\n\n<h2>Functional Interface Example<\/h2>\n\n\n\n<p>Predicate &lt;T&gt; interface is a functional interface with a method test(Object) to return a Boolean value. This interface signifies that an object is tested to be true or false.<\/p>\n\n\n\n<p>Create the following Java program using any editor of your choice in, say, C:\\&gt; JAVA.<\/p>\n\n\n\n<h3>Java8Tester.java<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Arrays;\nimport java.util.List;\nimport java.util.function.Predicate;\npublic class Java8Tester {\n   public static void main(String args&#91;]) {\n      List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9);\n\t\t\n      \/\/ Predicate&lt;Integer&gt; predicate = n -&gt; true\n      \/\/ n is passed as parameter to test method of Predicate interface\n      \/\/ test method will always return true no matter what value n has.\n\t\t\n      System.out.println(\"Print all numbers:\");\n\t\t\n      \/\/pass n as parameter\n      eval(list, n-&gt;true);\n\t\t\n      \/\/ Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0\n      \/\/ n is passed as parameter to test method of Predicate interface\n      \/\/ test method will return true if n%2 comes to be zero\n\t\t\n      System.out.println(\"Print even numbers:\");\n      eval(list, n-&gt; n%2 == 0 );\n\t\t\n      \/\/ Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3\n      \/\/ n is passed as parameter to test method of Predicate interface\n      \/\/ test method will return true if n is greater than 3.\n\t\t\n      System.out.println(\"Print numbers greater than 3:\");\n      eval(list, n-&gt; n &gt; 3 );\n   }\n\t\n   public static void eval(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate) {\n      for(Integer n: list) {\n         if(predicate.test(n)) {\n            System.out.println(n + \" \");\n         }\n      }\n   }\n}<\/code><\/pre>\n\n\n\n<p>Here we&#8217;ve passed Predicate interface, which takes a single input and returns Boolean.<\/p>\n\n\n\n<h3>Verify the Result<\/h3>\n\n\n\n<p>Compile the class using&nbsp;<strong>javac<\/strong>&nbsp;compiler as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JAVA&gt;javac Java8Tester.java\n<\/code><\/pre>\n\n\n\n<p>Now run the Java8Tester as follows \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\JAVA&gt;java Java8Tester\n<\/code><\/pre>\n\n\n\n<p>It should produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Print all numbers:\n1\n2\n3\n4\n5\n6\n7\n8\n9\nPrint even numbers:\n2\n4\n6\n8\nPrint numbers greater than 3:\n4\n5\n6\n7\n8\n9<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Functional interfaces have a single functionality to exhibit. For example, a Comparable interface with a single method &#8216;compareTo&#8217; is used for comparison purpose. Java 8 has defined a lot of functional interfaces to be used extensively in lambda expressions. Following is the list of functional interfaces defined in java.util.Function package.Given below is the list of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1871"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1871"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1871\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1872,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1871\/revisions\/1872"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1871"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1871"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1871"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1873,
        "date": "2021-03-16T10:14:00",
        "date_gmt": "2021-03-16T10:14:00",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1873"
        },
        "modified": "2021-03-16T10:14:00",
        "modified_gmt": "2021-03-16T10:14:00",
        "slug": "method-references",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/method-references\/",
        "title": {
            "rendered": "Method References"
        },
        "content": {
            "rendered": "\n<p>Method references help to point to methods by their names. A method reference is described using &#8220;::&#8221; symbol. A method reference can be used to point the following types of methods \u2212<\/p>\n\n\n\n<ul><li><strong>Static methods<\/strong>&nbsp;&#8211; static method can be reference using ClassName::Method name notation.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Method Reference - Static way\nFactory vehicle_factory_static = VehicleFactory::prepareVehicleInStaticMode;        \n<\/code><\/pre>\n\n\n\n<ul><li><strong>Instance methods<\/strong>&nbsp;&#8211; instance method can be reference using Object::Method name notation.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Method Reference - Instance way\nFactory vehicle_factory_instance = new VehicleFactory()::prepareVehicle;         \n<\/code><\/pre>\n\n\n\n<p>Following example shows how Method references works in Java 8 onwards.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Factory {\n   Vehicle prepare(String make, String model, int year);\n}\n\nclass Vehicle {\n   private String make;\n   private String model;\n   private int year;\n\n   Vehicle(String make, String model, int year){\n      this.make = make;\n      this.model = model;\n      this.year = year;\n   }\n\n   public String toString(){\n      return \"Vehicle&#91;\" + make +\", \" + model + \", \" + year+ \"]\";\n   }    \n}\n\nclass VehicleFactory {\n   static Vehicle prepareVehicleInStaticMode(String make, String model, int year){\n      return new Vehicle(make, model, year);\n   }\n\n   Vehicle prepareVehicle(String make, String model, int year){\n      return new Vehicle(make, model, year);\n   }\n}\n\npublic class FunctionTester {    \n   public static void main(String&#91;] args) {               \n      \/\/Method Reference - Static way\n      Factory vehicle_factory_static = VehicleFactory::prepareVehicleInStaticMode;        \n      Vehicle carHyundai = vehicle_factory_static.prepare(\"Hyundai\", \"Verna\", 2018);\n      System.out.println(carHyundai);\n\n      \/\/Method Reference - Instance way\n      Factory vehicle_factory_instance = new VehicleFactory()::prepareVehicle;        \n      Vehicle carTata = vehicle_factory_instance.prepare(\"Tata\", \"Harrier\", 2019);\n      System.out.println(carTata); \n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Vehicle&#91;Hyundai, Verna, 2018]\nVehicle&#91;Tata, Harrier, 2019]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Method references help to point to methods by their names. A method reference is described using &#8220;::&#8221; symbol. A method reference can be used to point the following types of methods \u2212 Static methods&nbsp;&#8211; static method can be reference using ClassName::Method name notation. Instance methods&nbsp;&#8211; instance method can be reference using Object::Method name notation. Following [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1873"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1873"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1873\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1874,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1873\/revisions\/1874"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1873"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1873"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1873"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1875,
        "date": "2021-03-16T10:15:33",
        "date_gmt": "2021-03-16T10:15:33",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1875"
        },
        "modified": "2021-03-16T10:15:45",
        "modified_gmt": "2021-03-16T10:15:45",
        "slug": "constructor-references",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/constructor-references\/",
        "title": {
            "rendered": "Constructor References"
        },
        "content": {
            "rendered": "\n<p>Constructor references help to point to Constructor method. A Constructor reference is accessed using &#8220;::new&#8221; symbol.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Constructor reference\nFactory vehicle_factory = Vehicle::new;       \n<\/code><\/pre>\n\n\n\n<p>Following example shows how Constructor references works in Java 8 onwards.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>interface Factory {\n   Vehicle prepare(String make, String model, int year);\n}\n\nclass Vehicle {\n   private String make;\n   private String model;\n   private int year;\n\n   Vehicle(String make, String model, int year){\n      this.make = make;\n      this.model = model;\n      this.year = year;\n   }\n\n   public String toString(){\n      return \"Vehicle&#91;\" + make +\", \" + model + \", \" + year+ \"]\";\n   }    \n}\n\npublic class FunctionTester {\n   static Vehicle factory(Factory factoryObj, String make, String model, int year){\n      return factoryObj.prepare(make, model, year);\n   }\n\n   public static void main(String&#91;] args) {       \n      \/\/Constructor reference\n      Factory vehicle_factory = Vehicle::new;\n      Vehicle carHonda = factory(vehicle_factory, \"Honda\", \"Civic\", 2017);\n      System.out.println(carHonda);\n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Vehicle&#91;Honda, Civic, 2017]<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Constructor references help to point to Constructor method. A Constructor reference is accessed using &#8220;::new&#8221; symbol. Following example shows how Constructor references works in Java 8 onwards. Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1875"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1875"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1875\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1877,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1875\/revisions\/1877"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1875"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1875"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1875"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1878,
        "date": "2021-03-16T10:17:14",
        "date_gmt": "2021-03-16T10:17:14",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1878"
        },
        "modified": "2021-03-16T10:17:14",
        "modified_gmt": "2021-03-16T10:17:14",
        "slug": "collections",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/collections\/",
        "title": {
            "rendered": "Collections"
        },
        "content": {
            "rendered": "\n<p>With Java 8 onwards, streams are introduced in Java and methods are added to collections to get a stream. Once a stream object is retrieved from a collection, we can apply various functional programming aspects like filtering, mapping, reducing etc. on collections. See the example below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionTester {    \n   public static void main(String&#91;] args) {               \n      List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5);\n\n      \/\/Mapping\n      \/\/get list of unique squares\n      List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i)\n         .distinct().collect(Collectors.toList());\n      System.out.println(squaresList);\n\n      \/\/Filering \n      \/\/get list of non-empty strings\n      List&lt;String&gt;strings = Arrays.asList(\"abc\", \"\", \"bc\", \"efg\", \"abcd\",\"\", \"jkl\");\n      List&lt;String&gt; nonEmptyStrings = strings.stream()\n         .filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());\n      System.out.println(nonEmptyStrings);\n\n      \/\/Reducing\n      int sum = numbers.stream().reduce((num1, num2) -&gt; num1 + num2).orElse(-1);\n      System.out.println(sum);\n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;9, 4, 49, 25]\n<\/code><\/pre>\n\n\n<p>[abc, bc, efg, abcd, jkl]<\/p>\n\n\n\n<p>25<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>With Java 8 onwards, streams are introduced in Java and methods are added to collections to get a stream. Once a stream object is retrieved from a collection, we can apply various functional programming aspects like filtering, mapping, reducing etc. on collections. See the example below \u2212 Output 25<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1878"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1878"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1878\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1879,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1878\/revisions\/1879"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1878"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1878"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1878"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1880,
        "date": "2021-03-16T10:18:39",
        "date_gmt": "2021-03-16T10:18:39",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1880"
        },
        "modified": "2021-03-16T10:18:39",
        "modified_gmt": "2021-03-16T10:18:39",
        "slug": "high-order-functions",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/high-order-functions\/",
        "title": {
            "rendered": "High Order Functions"
        },
        "content": {
            "rendered": "\n<p>A function is considered as a High Order function if it fulfils any one of the following conditions.<\/p>\n\n\n\n<ul><li>It takes one or more parameters as functions.<\/li><li>It returns a function after its execution.<\/li><\/ul>\n\n\n\n<p>Java 8 Collections.sort() method is an ideal example of a high order function. It accepts a comparing method as an argument. See the example below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Arrays;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionTester {    \n   public static void main(String&#91;] args) {               \n      List&lt;Integer&gt; numbers = Arrays.asList(3, 4, 6, 7, 9);\n\n      \/\/Passing a function as lambda expression\n      Collections.sort(numbers, (a,b) -&gt;{ return a.compareTo(b); });\n\n      System.out.println(numbers);\n      Comparator&lt;Integer&gt; comparator = (a,b) -&gt;{ return a.compareTo(b); };\n      Comparator&lt;Integer&gt; reverseComparator = comparator.reversed();\n      \n      \/\/Passing a function\n      Collections.sort(numbers, reverseComparator);\n      System.out.println(numbers);\n   } \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;3, 4, 6, 7, 9]\n&#91;9, 7, 6, 4, 3]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A function is considered as a High Order function if it fulfils any one of the following conditions. It takes one or more parameters as functions. It returns a function after its execution. Java 8 Collections.sort() method is an ideal example of a high order function. It accepts a comparing method as an argument. See [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1880"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1880"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1880\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1881,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1880\/revisions\/1881"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1880"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1880"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1880"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1884,
        "date": "2021-03-16T10:23:52",
        "date_gmt": "2021-03-16T10:23:52",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1884"
        },
        "modified": "2021-03-16T10:23:52",
        "modified_gmt": "2021-03-16T10:23:52",
        "slug": "returning-a-function",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/returning-a-function\/",
        "title": {
            "rendered": "Returning a Function"
        },
        "content": {
            "rendered": "\n<p>As a High Order function can return a function but how to implement using Java 8. Java 8 has provided Function interface which can accept a lambda expression. A high order function can return a lamdba expression and thus this high order function can be used to create any number of functions. See the example below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.function.Function;\n\npublic class FunctionTester {    \n   public static void main(String&#91;] args) {               \n      Function&lt;Integer, Integer&gt; addOne = adder(1);\n      Function&lt;Integer, Integer&gt; addTwo = adder(2);\n      Function&lt;Integer, Integer&gt; addThree = adder(3);\n\n      \/\/result = 4 + 1 = 5\n      Integer result = addOne.apply(4);\n      System.out.println(result);\n\n      \/\/result = 4 + 2 = 6\n      result = addTwo.apply(4);\n      System.out.println(result);\n\n      \/\/result = 4 + 3 = 7\n      result = addThree.apply(4);\n      System.out.println(result);\n   }\n\n   \/\/adder - High Order Function\n   \/\/returns a function as lambda expression\n   static Function&lt;Integer, Integer&gt; adder(Integer x){\n      return y -&gt; y + x;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n6\n7<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>As a High Order function can return a function but how to implement using Java 8. Java 8 has provided Function interface which can accept a lambda expression. A high order function can return a lamdba expression and thus this high order function can be used to create any number of functions. See the example [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1884"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1884"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1884\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1885,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1884\/revisions\/1885"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1884"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1884"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1884"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1886,
        "date": "2021-03-16T10:25:21",
        "date_gmt": "2021-03-16T10:25:21",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1886"
        },
        "modified": "2021-03-16T10:25:21",
        "modified_gmt": "2021-03-16T10:25:21",
        "slug": "first-class-function",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/first-class-function\/",
        "title": {
            "rendered": "First Class Function"
        },
        "content": {
            "rendered": "\n<p>A function is called a first class function if it fulfills the following requirements.<\/p>\n\n\n\n<ul><li>It can be passed as a parameter to a function.<\/li><li>It can be returned from a function.<\/li><li>It can be assigned to a variable and then can be used later.<\/li><\/ul>\n\n\n\n<p>Java 8 supports functions as first class object using lambda expressions. A lambda expression is a function definition and can be assigned to a variable, can be passed as an argument and can be returned. See the example below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>@FunctionalInterface\ninterface Calculator&lt;X, Y&gt; {    \n   public X compute(X a, Y b);\n}\n\npublic class FunctionTester {    \n   public static void main(String&#91;] args) {               \n      \/\/Assign a function to a variable\n      Calculator&lt;Integer, Integer&gt; calculator = (a,b) -&gt; a * b;\n\n      \/\/call a function using function variable\n      System.out.println(calculator.compute(2, 3));\n\n      \/\/Pass the function as a parameter\n      printResult(calculator, 2, 3);\n\n      \/\/Get the function as a return result\n      Calculator&lt;Integer, Integer&gt; calculator1 = getCalculator();\n      System.out.println(calculator1.compute(2, 3));\n   }\n\n   \/\/Function as a parameter\n   static void printResult(Calculator&lt;Integer, Integer&gt; calculator, Integer a, Integer b){\n      System.out.println(calculator.compute(a, b));\n   }\n\n   \/\/Function as return value\n   static Calculator&lt;Integer, Integer&gt; getCalculator(){\n      Calculator&lt;Integer, Integer&gt; calculator = (a,b) -&gt; a * b;\n      return calculator;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>6\n6\n6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A function is called a first class function if it fulfills the following requirements. It can be passed as a parameter to a function. It can be returned from a function. It can be assigned to a variable and then can be used later. Java 8 supports functions as first class object using lambda expressions. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1886"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1886"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1886\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1887,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1886\/revisions\/1887"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1886"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1886"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1886"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1888,
        "date": "2021-03-16T10:27:52",
        "date_gmt": "2021-03-16T10:27:52",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1888"
        },
        "modified": "2021-03-16T10:27:52",
        "modified_gmt": "2021-03-16T10:27:52",
        "slug": "pure-function",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/pure-function\/",
        "title": {
            "rendered": "Pure Function"
        },
        "content": {
            "rendered": "\n<p>A function is considered as Pure Function if it fulfils the following two conditions \u2212<\/p>\n\n\n\n<ul><li>It always returns the same result for the given inputs and its results purely depends upon the inputs passed.<\/li><li>It has no side effects means it is not modifying any state of the caller entity.<\/li><\/ul>\n\n\n\n<h2>Example- Pure Function<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FunctionTester {    \n   public static void main(String&#91;] args) {\n      int result = sum(2,3);\n      System.out.println(result);\n  \n      result = sum(2,3);\n      System.out.println(result);\n   }\n   static int sum(int a, int b){\n      return a + b;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>5\n5\n<\/code><\/pre>\n\n\n\n<p>Here&nbsp;<strong>sum()<\/strong>&nbsp;is a pure function as it always return 5 when passed 2 and 3 as parameters at different times and has no side effects.<\/p>\n\n\n\n<h2>Example- Impure Function<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>public class FunctionTester {\n   private static double valueUsed = 0.0; \n   public static void main(String&#91;] args) {\n      double result = randomSum(2.0,3.0);\n      System.out.println(result);\n      result = randomSum(2.0,3.0);\n      System.out.println(result);\n   }\n   \n   static double randomSum(double a, double b){\n      valueUsed = Math.random();       \n      return valueUsed + a + b;\n   }\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>5.919716721877799\n5.4830887819586795\n<\/code><\/pre>\n\n\n\n<p>Here\u00a0<strong>randomSum()<\/strong>\u00a0is an impure function as it returns different results when passed 2 and 3 as parameters at different times and modifies the state of the instance variable as well.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A function is considered as Pure Function if it fulfils the following two conditions \u2212 It always returns the same result for the given inputs and its results purely depends upon the inputs passed. It has no side effects means it is not modifying any state of the caller entity. Example- Pure Function Output Here&nbsp;sum()&nbsp;is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1888"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1888"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1888\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1889,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1888\/revisions\/1889"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1888"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1888"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1888"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1890,
        "date": "2021-03-16T10:30:26",
        "date_gmt": "2021-03-16T10:30:26",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1890"
        },
        "modified": "2021-03-16T10:30:26",
        "modified_gmt": "2021-03-16T10:30:26",
        "slug": "exception-handling-in-lambda-expressions",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/exception-handling-in-lambda-expressions\/",
        "title": {
            "rendered": "Exception Handling in Lambda Expressions"
        },
        "content": {
            "rendered": "\n<p>Lambda expressions are difficult to write when the function throws a checked expression. See the example below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.net.URLEncoder;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      String url = \"www.google.com\";\n      System.out.println(encodedAddress(url));\n   }   \n\n   public static String encodedAddress(String... address) {\n      return Arrays.stream(address)\n         .map(s -&gt; URLEncoder.encode(s, \"UTF-8\"))\n         .collect(Collectors.joining(\",\"));\n   }\n}<\/code><\/pre>\n\n\n\n<p>The above code fails to compile because URLEncode.encode() throws UnsupportedEncodingException and cannot be thrown by encodeAddress() method.<\/p>\n\n\n\n<p>One possible solution is to extract URLEncoder.encode() into a separate method and handle the exception there.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      String url = \"www.google.com\";       \n      System.out.println(encodedAddress(url));\n   }   \n\n   public static String encodedString(String s) {\n      try {\n         URLEncoder.encode(s, \"UTF-8\");\n      }\n      catch (UnsupportedEncodingException e) {        \n         e.printStackTrace();\n      }\n      return s;\n   }\n\n   public static String encodedAddress(String... address) {\n      return Arrays.stream(address)\n         .map(s -&gt; encodedString(s))\n         .collect(Collectors.joining(\",\"));\n   }   \n}<\/code><\/pre>\n\n\n\n<p>But above approach is not good when we have multiple such methods which throws exception. See the following generalized solution using functional interface and a wrapper method.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.net.URLEncoder;\nimport java.util.Arrays;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class FunctionTester {\n   public static void main(String&#91;] args) {\n      String url = \"www.google.com\";       \n      System.out.println(encodedAddress(url));\n   }   \n   public static String encodedAddress(String... address) {\n      return Arrays.stream(address)\n         .map(wrapper(s -&gt; URLEncoder.encode(s, \"UTF-8\")))\n         .collect(Collectors.joining(\",\"));\n   }\n\n   private static &lt;T, R, E extends Exception&gt; Function&lt;T, R&gt; \n   wrapper(FunctionWithThrows&lt;T, R, E&gt; fe) {\n      return arg -&gt; {\n         try {\n            return fe.apply(arg);\n         } catch (Exception e) {\n            throw new RuntimeException(e);\n         }\n      };\n   }\n}\n\n@FunctionalInterface\ninterface FunctionWithThrows&lt;T, R, E extends Exception&gt; {\n   R apply(T t) throws E;\n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>www.google.com<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Lambda expressions are difficult to write when the function throws a checked expression. See the example below \u2212 The above code fails to compile because URLEncode.encode() throws UnsupportedEncodingException and cannot be thrown by encodeAddress() method. One possible solution is to extract URLEncoder.encode() into a separate method and handle the exception there. But above approach is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1890"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1890"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1890\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1891,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1890\/revisions\/1891"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1890"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1890"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1890"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1892,
        "date": "2021-03-16T10:31:59",
        "date_gmt": "2021-03-16T10:31:59",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1892"
        },
        "modified": "2021-03-16T10:31:59",
        "modified_gmt": "2021-03-16T10:31:59",
        "slug": "terminal-methods",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/terminal-methods\/",
        "title": {
            "rendered": "Terminal Methods"
        },
        "content": {
            "rendered": "\n<p>When a terminal method in invoked on a stream, iteration starts on stream and any other chained stream. Once the iteration is over then the result of terminal method is returned. A terminal method does not return a Stream thus once a terminal method is invoked over a stream then its chaining of non-terminal methods or intermediate methods stops\/terminates.<\/p>\n\n\n\n<p>Generally, terminal methods returns a single value and are invoked on each element of the stream. Following are some of the important terminal methods of Stream interface. Each terminal function takes a predicate function, initiates the iterations of elements, apply the predicate on each element.<\/p>\n\n\n\n<ul><li><strong>anyMatch<\/strong>&nbsp;\u2212 If predicate returns true for any of the element, it returns true. If no element matches, false is returned.<\/li><li><strong>allMatch<\/strong>&nbsp;\u2212 If predicate returns false for any of the element, it returns false. If all element matches, true is returned.<\/li><li><strong>noneMatch<\/strong>&nbsp;\u2212 If no element matches, true is returned otherwise false is returned.<\/li><li><strong>collect<\/strong>&nbsp;\u2212 each element is stored into the collection passed.<\/li><li><strong>count<\/strong>&nbsp;\u2212 returns count of elements passed through intermediate methods.<\/li><li><strong>findAny<\/strong>&nbsp;\u2212 returns Optional instance containing any element or empty instance is returned.<\/li><li><strong>findFirst<\/strong>&nbsp;\u2212 returns first element under Optional instance. For empty stream, empty instance is returned.<\/li><li><strong>forEach<\/strong>&nbsp;\u2212 apply the consumer function on each element. Used to print all elements of a stream.<\/li><li><strong>min<\/strong>&nbsp;\u2212 returns the smallest element of the stream. Compares elements based on comparator predicate passed.<\/li><li><strong>max<\/strong>&nbsp;\u2212 returns the largest element of the stream. Compares elements based on comparator predicate passed.<\/li><li><strong>reduce<\/strong>&nbsp;\u2212 reduces all elements to a single element using the predicate passed.<\/li><li><strong>toArray<\/strong>&nbsp;\u2212 returns arrays of elements of stream.<\/li><\/ul>\n\n\n\n<h2>Example &#8211; Terminal Methods<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class FunctionTester {    \n   public static void main(String&#91;] args) {\n      List&lt;String&gt; stringList \n         = Arrays.asList(\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"One\");       \n\n      System.out.println(\"Example - anyMatch\\n\");\n      \/\/anyMatch - check if Two is present?\n      System.out.println(\"Two is present: \" \n         + stringList\n         .stream()\n         .anyMatch(s -&gt; {return s.contains(\"Two\");}));\n\n      System.out.println(\"\\nExample - allMatch\\n\");\n      \/\/allMatch - check if length of each string is greater than 2.\n      System.out.println(\"Length &gt; 2: \" \n         + stringList\n         .stream()\n         .allMatch(s -&gt; {return s.length() &gt; 2;}));\n\n      System.out.println(\"\\nExample - noneMatch\\n\");\n      \/\/noneMatch - check if length of each string is greater than 6.\n      System.out.println(\"Length &gt; 6: \" \n         + stringList\n         .stream()\n         .noneMatch(s -&gt; {return s.length() &gt; 6;}));\n\n      System.out.println(\"\\nExample - collect\\n\");\n      System.out.println(\"List: \" \n         + stringList\n         .stream()\n         .filter(s -&gt; {return s.length() &gt; 3;})\n         .collect(Collectors.toList()));\n\n      System.out.println(\"\\nExample - count\\n\");\n      System.out.println(\"Count: \" \n         + stringList\n         .stream()\n         .filter(s -&gt; {return s.length() &gt; 3;})\n         .count());\n\n      System.out.println(\"\\nExample - findAny\\n\");\n      System.out.println(\"findAny: \" \n         + stringList\n         .stream()      \n         .findAny().get());\n\n      System.out.println(\"\\nExample - findFirst\\n\");\n      System.out.println(\"findFirst: \" \n         + stringList\n         .stream()      \n         .findFirst().get());\n\n      System.out.println(\"\\nExample - forEach\\n\");\n      stringList\n         .stream()      \n         .forEach(System.out::println);\n\n      System.out.println(\"\\nExample - min\\n\");\n      System.out.println(\"min: \" \n         + stringList\n         .stream()      \n         .min((s1, s2) -&gt; { return s1.compareTo(s2);}));\n\n      System.out.println(\"\\nExample - max\\n\");\n      System.out.println(\"min: \" \n         + stringList\n         .stream()      \n         .max((s1, s2) -&gt; { return s1.compareTo(s2);}));\n\n      System.out.println(\"\\nExample - reduce\\n\");\n      System.out.println(\"reduced: \" \n         + stringList\n         .stream()      \n         .reduce((s1, s2) -&gt; { return s1 + \", \"+ s2;})\n         .get());\n   }   \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Example - anyMatch\n\nTwo is present: true\n\nExample - allMatch\n\nLength &gt; 2: true\n\nExample - noneMatch\n\nLength &gt; 6: true\n\nExample - collect\n\nList: &#91;Three, Four, Five]\n\nExample - count\n\nCount: 3\n\nExample - findAny\n\nfindAny: One\n\nExample - findFirst\n\nfindFirst: One\n\nExample - forEach\n\nOne\nTwo\nThree\nFour\nFive\nOne\n\nExample - min\n\nmin: Optional&#91;Five]\n\nExample - max\n\nmin: Optional&#91;Two]\n\nExample - reduce\n\nreduced: One, Two, Three, Four, Five, One<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>When a terminal method in invoked on a stream, iteration starts on stream and any other chained stream. Once the iteration is over then the result of terminal method is returned. A terminal method does not return a Stream thus once a terminal method is invoked over a stream then its chaining of non-terminal methods [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1892"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1892"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1892\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1893,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1892\/revisions\/1893"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1892"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1892"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1892"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1894,
        "date": "2021-03-16T10:33:48",
        "date_gmt": "2021-03-16T10:33:48",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1894"
        },
        "modified": "2021-03-16T10:33:48",
        "modified_gmt": "2021-03-16T10:33:48",
        "slug": "infinite-streams",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/infinite-streams\/",
        "title": {
            "rendered": "Infinite Streams"
        },
        "content": {
            "rendered": "\n<p>Collections are in-memory data structure which have all the elements present in the collection and we have external iteration to iterate through collection whereas Stream is a fixed data structure where elements are computed on demand and a Stream has inbuilt iteration to iterate through each element. Following example shows how to create a Stream from an array.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>int&#91;] numbers = {1, 2, 3, 4};\nIntStream numbersFromArray = Arrays.stream(numbers);\n<\/code><\/pre>\n\n\n\n<p>Above stream is of fixed size being built from an array of four numbers and will not return element after 4th element. But we can create a Stream using Stream.iterate() or Stream.generate() method which can have lamdba expression will pass to a Stream. Using lamdba expression, we can pass a condition which once fulfilled give the required elements. Consider the case, where we need a list of numbers which are multiple of 3.<\/p>\n\n\n\n<h2>Example &#8211; Infinite Stream<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.stream.Stream;\n\npublic class FunctionTester {    \n   public static void main(String&#91;] args) {\n      \/\/create a stream of numbers which are multiple of 3 \n      Stream&lt;Integer&gt; numbers = Stream.iterate(0, n -&gt; n + 3);\n\n      numbers\n         .limit(10)\n         .forEach(System.out::println);\n   }   \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>0\n3\n6\n9\n12\n15\n18\n21\n24\n27<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Collections are in-memory data structure which have all the elements present in the collection and we have external iteration to iterate through collection whereas Stream is a fixed data structure where elements are computed on demand and a Stream has inbuilt iteration to iterate through each element. Following example shows how to create a Stream [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1894"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1894"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1894\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1895,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1894\/revisions\/1895"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1894"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1894"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1894"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1896,
        "date": "2021-03-16T10:35:08",
        "date_gmt": "2021-03-16T10:35:08",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1896"
        },
        "modified": "2021-03-16T10:35:08",
        "modified_gmt": "2021-03-16T10:35:08",
        "slug": "fixed-length-streams",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/fixed-length-streams\/",
        "title": {
            "rendered": "Fixed length Streams"
        },
        "content": {
            "rendered": "\n<p>There are multiple ways using which we can create fix length streams.<\/p>\n\n\n\n<ul><li>Using Stream.of() method<\/li><li>Using Collection.stream() method<\/li><li>Using Stream.builder() method<\/li><\/ul>\n\n\n\n<p>Following example shows all of the above ways to create a fix length stream.<\/p>\n\n\n\n<h2>Example &#8211; Fix Length Stream<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Stream;\n\npublic class FunctionTester {    \n   public static void main(String&#91;] args) {\n\n      System.out.println(\"Stream.of():\");\n      Stream&lt;Integer&gt; stream  = Stream.of(1, 2, 3, 4, 5);       \n      stream.forEach(System.out::println);\n\n      System.out.println(\"Collection.stream():\");\n      Integer&#91;] numbers = {1, 2, 3, 4, 5};     \n      List&lt;Integer&gt; list = Arrays.asList(numbers);\n      list.stream().forEach(System.out::println);\n\n      System.out.println(\"StreamBuilder.build():\");\n      Stream.Builder&lt;Integer&gt; streamBuilder = Stream.builder();\n      streamBuilder.accept(1);\n      streamBuilder.accept(2);\n      streamBuilder.accept(3);\n      streamBuilder.accept(4);\n      streamBuilder.accept(5);\n      streamBuilder.build().forEach(System.out::println);    \n   }   \n}<\/code><\/pre>\n\n\n\n<h3>Output<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Stream.of():\n1\n2\n3\n4\n5\nCollection.stream():\n1\n2\n3\n4\n5\nStreamBuilder.build():\n1\n2\n3\n4\n5<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>There are multiple ways using which we can create fix length streams. Using Stream.of() method Using Collection.stream() method Using Stream.builder() method Following example shows all of the above ways to create a fix length stream. Example &#8211; Fix Length Stream Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            75
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1896"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1896"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1896\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1897,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1896\/revisions\/1897"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1896"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1896"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1896"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]