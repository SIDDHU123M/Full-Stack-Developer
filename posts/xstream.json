[
    {
        "id": 1914,
        "date": "2021-03-16T11:04:31",
        "date_gmt": "2021-03-16T11:04:31",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1914"
        },
        "modified": "2021-03-16T11:04:31",
        "modified_gmt": "2021-03-16T11:04:31",
        "slug": "overview-20",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-20\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p><strong>Passay<\/strong>&nbsp;is a Java based Password generation and validation library. It provides comprehensive features list in order to validate\/generate passwords and is highly configurable.<\/p>\n\n\n\n<h2>Passay Components<\/h2>\n\n\n\n<p>Passay API has 3 core components.<\/p>\n\n\n\n<ul><li><strong>Rule<\/strong>&nbsp;\u2212 one or more rules which define a password policy rule set.<\/li><li><strong>PasswordValidator<\/strong>&nbsp;\u2212 A validator component which validates a password against a given rule set.<\/li><li><strong>PasswordGenerator<\/strong>&nbsp;\u2212 A generator component which produces passwords to satisfy a given rule set.<\/li><\/ul>\n\n\n\n<h2>Rule overview<\/h2>\n\n\n\n<p>Rules are the foundation blocks for both password validation and generation. There are two broad categories of rules:<\/p>\n\n\n\n<ul><li>Positive match require that passwords satisfy a rule.<\/li><li>Negative match reject passwords that satisfy a rule.<\/li><\/ul>\n\n\n\n<h2>Features<\/h2>\n\n\n\n<p>Following are some of the features that Passay library provides.<\/p>\n\n\n\n<ul><li><strong>Password Validation<\/strong>\u00a0\u2212 Pasay library helps in enforcing a password policy by validating passwords against a configurable ruleset. It has a rich set of existing rules for common use-cases. For additional cases, it provides a simple Rule interface to implement the custom rule.<\/li><li>Password Generation\u00a0\u2212 It provides a configurable ruleset that can be used to generate passwords as well.<\/li><li>Command Line Tools\u00a0\u2212 It provides tools to automate password policy enforcement.<\/li><li>convenient\u00a0\u2212 Easy to use.<\/li><li>Extensible\u00a0\u2212 All Pasay components are extensible.<\/li><li>Supports Internalization\u00a0&#8211; Pasay components are internationalization ready.<\/li><li><\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Passay&nbsp;is a Java based Password generation and validation library. It provides comprehensive features list in order to validate\/generate passwords and is highly configurable. Passay Components Passay API has 3 core components. Rule&nbsp;\u2212 one or more rules which define a password policy rule set. PasswordValidator&nbsp;\u2212 A validator component which validates a password against a given rule [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1914"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1914"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1914\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1915,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1914\/revisions\/1915"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1914"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1914"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1914"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1916,
        "date": "2021-03-16T11:06:28",
        "date_gmt": "2021-03-16T11:06:28",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1916"
        },
        "modified": "2021-03-16T11:06:28",
        "modified_gmt": "2021-03-16T11:06:28",
        "slug": "environment-setup-15",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-setup-15\/",
        "title": {
            "rendered": "Environment Setup"
        },
        "content": {
            "rendered": "\n<h2>Local Environment Setup<\/h2>\n\n\n\n<p>If you are still willing to set up your environment for Java programming language, then this section guides you on how to download and set up Java on your machine. Please follow the steps mentioned below to set up the environment.<\/p>\n\n\n\n<p>Java SE is freely available from the link\u00a0Download Java. So you download a version based on your operating system.<\/p>\n\n\n\n<p>Follow the instructions to download Java and run the&nbsp;<strong>.exe<\/strong>&nbsp;to install Java on your machine. Once you have installed Java on your machine, you would need to set environment variables to point to correct installation directories \u2212<\/p>\n\n\n\n<h2>Setting up the Path for Windows 2000\/XP<\/h2>\n\n\n\n<p>We are assuming that you have installed Java in&nbsp;<em>c:\\Program Files\\java\\jdk<\/em>&nbsp;directory \u2212<\/p>\n\n\n\n<ul><li>Right-click on &#8216;My Computer&#8217; and select &#8216;Properties&#8217;.<\/li><li>Click on the &#8216;Environment variables&#8217; button under the &#8216;Advanced&#8217; tab.<\/li><li>Now, alter the &#8216;Path&#8217; variable so that it also contains the path to the Java executable. Example, if the path is currently set to &#8216;C:\\WINDOWS\\SYSTEM32&#8217;, then change your path to read &#8216;C:\\WINDOWS\\SYSTEM32;c:\\Program Files\\java\\jdk\\bin&#8217;.<\/li><\/ul>\n\n\n\n<h2>Setting up the Path for Windows 95\/98\/ME<\/h2>\n\n\n\n<p>We are assuming that you have installed Java in&nbsp;<em>c:\\Program Files\\java\\jdk<\/em>&nbsp;directory \u2212<\/p>\n\n\n\n<ul><li>Edit the &#8216;C:\\autoexec.bat&#8217; file and add the following line at the end \u2212 &#8216;SET PATH=%PATH%;C:\\Program Files\\java\\jdk\\bin&#8217;<\/li><\/ul>\n\n\n\n<h2>Setting up the Path for Linux, UNIX, Solaris, FreeBSD<\/h2>\n\n\n\n<p>Environment variable PATH should be set to point to where the Java binaries have been installed. Refer to your shell documentation if you have trouble doing this.<\/p>\n\n\n\n<p>Example, if you use bash as your shell, then you would add the following line to the end of your &#8216;.bashrc: export PATH=\/path\/to\/java:$PATH&#8217;<\/p>\n\n\n\n<h2>Popular Java Editors<\/h2>\n\n\n\n<p>To write your Java programs, you need a text editor. There are many sophisticated IDEs available in the market. But for now, you can consider one of the following \u2212<\/p>\n\n\n\n<ul><li><strong>Notepad<\/strong>\u00a0\u2212 On a Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad.<\/li><li><strong>Netbeans<\/strong>\u00a0\u2212 It is a Java IDE that is open-source and free which can be downloaded from\u00a0https:\/\/www.netbeans.org\/index.html.<\/li><li><strong>Eclipse<\/strong>\u00a0\u2212 It is also a Java IDE developed by the eclipse open-source community and can be downloaded from\u00a0https:\/\/www.eclipse.org\/.<\/li><\/ul>\n\n\n\n<h2>Download Passay Archive<\/h2>\n\n\n\n<p>Download the latest version of the Pasay jar file from\u00a0Maven Repository -. In this tutorial, assay-1.4.0.jar is downloaded and copied into C:\\> assay folder.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Archive name<\/th><\/tr><tr><td>Windows<\/td><td>passay-1.4.0.jar<\/td><\/tr><tr><td>Linux<\/td><td>passay-1.4.0.jar<\/td><\/tr><tr><td>Mac<\/td><td>passay-1.4.0.jar<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Set Passay Environment<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>PASSAY<\/strong>&nbsp;environment variable to point to the base directory location where Passay jar is stored on your machine. Assuming, we&#8217;ve extracted passay-1.4.0.jar in Passay folder on various Operating Systems as follows.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable PASSAY to C:\\Passay<\/td><\/tr><tr><td>Linux<\/td><td>export PASSAY=\/usr\/local\/Passay<\/td><\/tr><tr><td>Mac<\/td><td>export PASSAY=\/Library\/Passay<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Set CLASSPATH Variable<\/h2>\n\n\n\n<p>Set the&nbsp;<strong>CLASSPATH<\/strong>&nbsp;environment variable to point to the Passay jar location. Assuming, you have stored passay-1.4.0.jar in Passay folder on various Operating Systems as follows.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>OS<\/th><th>Output<\/th><\/tr><tr><td>Windows<\/td><td>Set the environment variable CLASSPATH to %CLASSPATH%;%Passay%\\passay-1.4.0.jar;.;<\/td><\/tr><tr><td>Linux<\/td><td>export CLASSPATH=$CLASSPATH:$PASSAY\/passay-1.4.0.jar:.<\/td><\/tr><tr><td>Mac<\/td><td>export CLASSPATH=$CLASSPATH:$PASSAY\/passay-1.4.0.jar:.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Local Environment Setup If you are still willing to set up your environment for Java programming language, then this section guides you on how to download and set up Java on your machine. Please follow the steps mentioned below to set up the environment. Java SE is freely available from the link\u00a0Download Java. So you [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1916"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1916"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1916\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1917,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1916\/revisions\/1917"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1916"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1916"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1916"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1918,
        "date": "2021-03-16T11:07:53",
        "date_gmt": "2021-03-16T11:07:53",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1918"
        },
        "modified": "2021-03-16T11:07:53",
        "modified_gmt": "2021-03-16T11:07:53",
        "slug": "password-validation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/password-validation\/",
        "title": {
            "rendered": "Password Validation"
        },
        "content": {
            "rendered": "\n<p>A typical Password policy contains a set of rules to check a password if is compliant with organization rules. Consider the following policy:<\/p>\n\n\n\n<ul><li>Length of password should be in between 8 to 16 characters.<\/li><li>A password should not contain any whitespace.<\/li><li>A password should contains each of the following: upper, lower, digit and a symbol.<\/li><\/ul>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\nimport org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.LengthRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n        \n      List&lt;Rule&gt; rules = new ArrayList&lt;&gt;();        \n      \/\/Rule 1: Password length should be in between \n      \/\/8 and 16 characters\n      rules.add(new LengthRule(8, 16));        \n      \/\/Rule 2: No whitespace allowed\n      rules.add(new WhitespaceRule());        \n      \/\/Rule 3.a: At least one Upper-case character\n      rules.add(new CharacterRule(EnglishCharacterData.UpperCase, 1));        \n      \/\/Rule 3.b: At least one Lower-case character\n      rules.add(new CharacterRule(EnglishCharacterData.LowerCase, 1));        \n      \/\/Rule 3.c: At least one digit\n      rules.add(new CharacterRule(EnglishCharacterData.Digit, 1));        \n      \/\/Rule 3.d: At least one special character\n      rules.add(new CharacterRule(EnglishCharacterData.Special, 1));\n        \n      PasswordValidator validator = new PasswordValidator(rules);        \n      PasswordData password = new PasswordData(\"Microsoft@123\");        \n      RuleResult result = validator.validate(password);\n        \n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n        }\n    }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Password validated.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A typical Password policy contains a set of rules to check a password if is compliant with organization rules. Consider the following policy: Length of password should be in between 8 to 16 characters. A password should not contain any whitespace. A password should contains each of the following: upper, lower, digit and a symbol. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1918"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1918"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1918\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1919,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1918\/revisions\/1919"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1918"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1918"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1918"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1920,
        "date": "2021-03-16T11:09:23",
        "date_gmt": "2021-03-16T11:09:23",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1920"
        },
        "modified": "2021-03-16T11:09:23",
        "modified_gmt": "2021-03-16T11:09:23",
        "slug": "customized-messages",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/customized-messages\/",
        "title": {
            "rendered": "Customized Messages"
        },
        "content": {
            "rendered": "\n<p>Pasay library provides a MessageResolver API to override the default messages used by the validator. It can take the path to the custom properties file and use the standard\u00a0keys\u00a0to override the required message.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password and show a custom message using Passay library.<\/p>\n\n\n\n<h3><em>messages.properties<\/em><\/h3>\n\n\n\n<pre class=\"wp-block-preformatted\">INSUFFICIENT_UPPERCASE=Password missing at least %1$s uppercase characters.<\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\nimport org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.LengthRule;\nimport org.passay.MessageResolver;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.PropertiesMessageResolver;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) throws FileNotFoundException, IOException {\n      List&lt;Rule&gt; rules = new ArrayList&lt;&gt;();\n      rules.add(new LengthRule(8, 16));\n      rules.add(new WhitespaceRule());\n      rules.add(new CharacterRule(EnglishCharacterData.UpperCase, 1));\n      rules.add(new CharacterRule(EnglishCharacterData.LowerCase, 1));\n      rules.add(new CharacterRule(EnglishCharacterData.Digit, 1));\n      rules.add(new CharacterRule(EnglishCharacterData.Special, 1));\n\n      Properties props = new Properties();\n      props.load(new FileInputStream(\"E:\/Test\/messages.properties\"));\n      MessageResolver resolver = new PropertiesMessageResolver(props);\n\n      PasswordValidator validator = new PasswordValidator(resolver, rules);\n      PasswordData password = new PasswordData(\"microsoft@123\");\n      RuleResult result = validator.validate(password);\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;Password missing at least 1 uppercase characters.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Pasay library provides a MessageResolver API to override the default messages used by the validator. It can take the path to the custom properties file and use the standard\u00a0keys\u00a0to override the required message. Example The below example shows the validation of a password and show a custom message using Passay library. messages.properties INSUFFICIENT_UPPERCASE=Password missing at [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1920"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1920"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1920\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1921,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1920\/revisions\/1921"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1920"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1920"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1920"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1922,
        "date": "2021-03-16T11:11:02",
        "date_gmt": "2021-03-16T11:11:02",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1922"
        },
        "modified": "2021-03-16T11:11:02",
        "modified_gmt": "2021-03-16T11:11:02",
        "slug": "m-of-n-rules",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/m-of-n-rules\/",
        "title": {
            "rendered": "M of N rules"
        },
        "content": {
            "rendered": "\n<p>Many times a password policy mandated compliance to minimum rules out of given rules such as a password must be compliant with at least M of N rules. Consider the following policy.<\/p>\n\n\n\n<ul><li>Length of password should be in between 8 to 16 characters.<\/li><li>A password should not contain any whitespace.<\/li><li>A password should contains at least three of the following: upper, lower, digit or symbol.<\/li><\/ul>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.FileNotFoundException;\nimport java.io.IOException;\n\nimport org.passay.CharacterCharacteristicsRule;\nimport org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.LengthRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) throws FileNotFoundException, IOException {\n      \/\/Rule 1: Password length should be in between \n      \/\/8 and 16 characters\n      Rule rule1 = new LengthRule(8, 16);        \n      \/\/Rule 2: No whitespace allowed\n      Rule rule2 = new WhitespaceRule();        \n      CharacterCharacteristicsRule rule3 = new CharacterCharacteristicsRule();        \n      \/\/M - Mandatory characters count\n      rule3.setNumberOfCharacteristics(3);        \n      \/\/Rule 3.a: One Upper-case character\n      rule3.getRules().add(new CharacterRule(EnglishCharacterData.UpperCase, 1));        \n      \/\/Rule 3.b: One Lower-case character\n      rule3.getRules().add(new CharacterRule(EnglishCharacterData.LowerCase, 1));        \n      \/\/Rule 3.c: One digit\n      rule3.getRules().add(new CharacterRule(EnglishCharacterData.Digit, 1));        \n      \/\/Rule 3.d: One special character\n      rule3.getRules().add(new CharacterRule(EnglishCharacterData.Special, 1));\n\n      PasswordValidator validator = new PasswordValidator(rule1, rule2, rule3);        \n      PasswordData password = new PasswordData(\"microsoft@123\");        \n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Password validated.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Many times a password policy mandated compliance to minimum rules out of given rules such as a password must be compliant with at least M of N rules. Consider the following policy. Length of password should be in between 8 to 16 characters. A password should not contain any whitespace. A password should contains at [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1922"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1922"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1922\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1923,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1922\/revisions\/1923"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1922"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1922"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1922"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1924,
        "date": "2021-03-16T11:12:47",
        "date_gmt": "2021-03-16T11:12:47",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1924"
        },
        "modified": "2021-03-16T11:12:47",
        "modified_gmt": "2021-03-16T11:12:47",
        "slug": "password-generation",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/password-generation\/",
        "title": {
            "rendered": "Password Generation"
        },
        "content": {
            "rendered": "\n<p><strong>PasswordGenerator<\/strong>&nbsp;helps in generating password using given policy. Consider the following policy:<\/p>\n\n\n\n<ul><li>Length of password should be 8 characters.<\/li><li>A password should contains each of the following: upper, lower, digit and a symbol.<\/li><\/ul>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the generation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.PasswordGenerator;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      CharacterRule alphabets = new CharacterRule(EnglishCharacterData.Alphabetical);\n      CharacterRule digits = new CharacterRule(EnglishCharacterData.Digit);\n      CharacterRule special = new CharacterRule(EnglishCharacterData.Special);\n\n      PasswordGenerator passwordGenerator = new PasswordGenerator();\n      String password = passwordGenerator.generatePassword(8, alphabets, digits, special);\n      System.out.println(password);\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>?\\DE~@c3<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>PasswordGenerator&nbsp;helps in generating password using given policy. Consider the following policy: Length of password should be 8 characters. A password should contains each of the following: upper, lower, digit and a symbol. Example The below example shows the generation of a password against above policy using Passay library. Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1924"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1924"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1924\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1925,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1924\/revisions\/1925"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1924"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1924"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1924"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1926,
        "date": "2021-03-16T11:14:15",
        "date_gmt": "2021-03-16T11:14:15",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1926"
        },
        "modified": "2021-03-16T11:14:15",
        "modified_gmt": "2021-03-16T11:14:15",
        "slug": "allowedcharacterrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/allowedcharacterrule\/",
        "title": {
            "rendered": "AllowedCharacterRule"
        },
        "content": {
            "rendered": "\n<p><strong>AllowedCharacterRule<\/strong>&nbsp;allows to specify the characters which a password can include. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.AllowedCharacterRule;\nimport org.passay.LengthRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      \/\/Rule: Password should contains only a, b and c       \n      Rule rule1 = new AllowedCharacterRule(new char&#91;] {'a', 'b', 'c'});\n      \/\/8 and 16 characters\n      Rule rule2 = new LengthRule(8, 16);    \n\n      PasswordValidator validator = new PasswordValidator(rule1, rule2);\n      PasswordData password = new PasswordData(\"abcabcab1\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;Password contains the illegal character '1'.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>AllowedCharacterRule&nbsp;allows to specify the characters which a password can include. Consider the following example. Example The below example shows the validation of a password against above policy using Passay library. Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1926"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1926"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1926\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1927,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1926\/revisions\/1927"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1926"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1926"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1926"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1928,
        "date": "2021-03-16T11:15:57",
        "date_gmt": "2021-03-16T11:15:57",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1928"
        },
        "modified": "2021-03-16T11:15:57",
        "modified_gmt": "2021-03-16T11:15:57",
        "slug": "allowedregexrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/allowedregexrule\/",
        "title": {
            "rendered": "AllowedRegexRule"
        },
        "content": {
            "rendered": "\n<p><strong>AllowedRegexRule<\/strong>&nbsp;allows to specify the regular pattern which a password should satisfy. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.AllowedRegexRule;\nimport org.passay.LengthRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      \/\/Rule: Password should contains alphabets only\n      Rule rule1 = new AllowedRegexRule(\"^&#91;A-Za-z]+$\");\n      \/\/8 and 16 characters\n      Rule rule2 = new LengthRule(8, 16);    \n\n      PasswordValidator validator = new PasswordValidator(rule1, rule2);\n      PasswordData password = new PasswordData(\"microsoft@123\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;Password must match pattern '^&#91;A-Za-z]+$'.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>AllowedRegexRule&nbsp;allows to specify the regular pattern which a password should satisfy. Consider the following example. Example The below example shows the validation of a password against above policy using Passay library. Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1928"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1928"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1928\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1929,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1928\/revisions\/1929"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1928"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1928"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1928"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1930,
        "date": "2021-03-16T11:18:17",
        "date_gmt": "2021-03-16T11:18:17",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1930"
        },
        "modified": "2021-03-16T11:18:17",
        "modified_gmt": "2021-03-16T11:18:17",
        "slug": "characterrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/characterrule\/",
        "title": {
            "rendered": "CharacterRule"
        },
        "content": {
            "rendered": "\n<p><strong>CharacterRule<\/strong>&nbsp;helps in defining a set of characters and minimum no. of characters required in a password.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\nimport org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.LengthRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n        \n      List&lt;Rule&gt; rules = new ArrayList&lt;&gt;();        \n      \/\/Rule 1: Password length should be in between \n      \/\/8 and 16 characters\n      rules.add(new LengthRule(8, 16));        \n      \/\/Rule 2: No whitespace allowed\n      rules.add(new WhitespaceRule());        \n      \/\/Rule 3.a: At least one Upper-case character\n      rules.add(new CharacterRule(EnglishCharacterData.UpperCase, 1));        \n      \/\/Rule 3.b: At least one Lower-case character\n      rules.add(new CharacterRule(EnglishCharacterData.LowerCase, 1));        \n      \/\/Rule 3.c: At least one digit\n      rules.add(new CharacterRule(EnglishCharacterData.Digit, 1));        \n      \/\/Rule 3.d: At least one special character\n      rules.add(new CharacterRule(EnglishCharacterData.Special, 1));\n\n      PasswordValidator validator = new PasswordValidator(rules);        \n      PasswordData password = new PasswordData(\"Microsoft@123\");        \n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Password validated.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>CharacterRule&nbsp;helps in defining a set of characters and minimum no. of characters required in a password. Example The below example shows the validation of a password against above policy using Passay library. Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1930"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1930"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1930\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1931,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1930\/revisions\/1931"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1930"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1930"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1930"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1932,
        "date": "2021-03-16T11:20:15",
        "date_gmt": "2021-03-16T11:20:15",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1932"
        },
        "modified": "2021-03-16T11:20:15",
        "modified_gmt": "2021-03-16T11:20:15",
        "slug": "lengthrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/lengthrule\/",
        "title": {
            "rendered": "LengthRule"
        },
        "content": {
            "rendered": "\n<p><strong>LengthRule<\/strong>&nbsp;helps in defining the minimum and maximum length of a password.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.ArrayList;\nimport java.util.List;\n\nimport org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.LengthRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n        \n      List&lt;Rule&gt; rules = new ArrayList&lt;&gt;();        \n      \/\/Rule 1: Password length should be in between \n      \/\/8 and 16 characters\n      rules.add(new LengthRule(8, 16));        \n      \/\/Rule 2: No whitespace allowed\n      rules.add(new WhitespaceRule());        \n      \/\/Rule 3.a: At least one Upper-case character\n      rules.add(new CharacterRule(EnglishCharacterData.UpperCase, 1));        \n      \/\/Rule 3.b: At least one Lower-case character\n      rules.add(new CharacterRule(EnglishCharacterData.LowerCase, 1));        \n      \/\/Rule 3.c: At least one digit\n      rules.add(new CharacterRule(EnglishCharacterData.Digit, 1));        \n      \/\/Rule 3.d: At least one special character\n      rules.add(new CharacterRule(EnglishCharacterData.Special, 1));\n        \n      PasswordValidator validator = new PasswordValidator(rules);        \n      PasswordData password = new PasswordData(\"Microsoft@123\");        \n      RuleResult result = validator.validate(password);\n        \n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      }else{\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Password validated.<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>LengthRule&nbsp;helps in defining the minimum and maximum length of a password. Example The below example shows the validation of a password against above policy using Passay library. Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1932"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1932"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1932\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1933,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1932\/revisions\/1933"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1932"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1932"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1932"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1934,
        "date": "2021-03-16T11:22:35",
        "date_gmt": "2021-03-16T11:22:35",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1934"
        },
        "modified": "2021-03-16T11:22:35",
        "modified_gmt": "2021-03-16T11:22:35",
        "slug": "charactercharacteristicsrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/charactercharacteristicsrule\/",
        "title": {
            "rendered": "CharacterCharacteristicsRule"
        },
        "content": {
            "rendered": "\n<p><strong>CharacterCharacteristicsRule<\/strong>&nbsp;helps in defining whether a password satisfy given N defined rules or not.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.FileNotFoundException;\nimport java.io.IOException;\n\nimport org.passay.CharacterCharacteristicsRule;\nimport org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.LengthRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) throws FileNotFoundException, IOException {\n      \/\/Rule 1: Password length should be in between \n      \/\/8 and 16 characters\n      Rule rule1 = new LengthRule(8, 16);        \n      \/\/Rule 2: No whitespace allowed\n      Rule rule2 = new WhitespaceRule();        \n      CharacterCharacteristicsRule rule3 = new CharacterCharacteristicsRule();        \n      \/\/M - Mandatory characters count\n      rule3.setNumberOfCharacteristics(3);        \n      \/\/Rule 3.a: One Upper-case character\n      rule3.getRules().add(new CharacterRule(EnglishCharacterData.UpperCase, 1));        \n      \/\/Rule 3.b: One Lower-case character\n      rule3.getRules().add(new CharacterRule(EnglishCharacterData.LowerCase, 1));        \n      \/\/Rule 3.c: One digit\n      rule3.getRules().add(new CharacterRule(EnglishCharacterData.Digit, 1));        \n      \/\/Rule 3.d: One special character\n      rule3.getRules().add(new CharacterRule(EnglishCharacterData.Special, 1));\n\n      PasswordValidator validator = new PasswordValidator(rule1, rule2, rule3);        \n      PasswordData password = new PasswordData(\"microsoft@123\");        \n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Password validated.<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>CharacterCharacteristicsRule&nbsp;helps in defining whether a password satisfy given N defined rules or not. Example The below example shows the validation of a password against above policy using Passay library. Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1934"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1934"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1934\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1935,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1934\/revisions\/1935"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1934"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1934"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1934"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1936,
        "date": "2021-03-16T11:24:46",
        "date_gmt": "2021-03-16T11:24:46",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1936"
        },
        "modified": "2021-03-16T11:24:46",
        "modified_gmt": "2021-03-16T11:24:46",
        "slug": "lengthcomplexityrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/lengthcomplexityrule\/",
        "title": {
            "rendered": "LengthComplexityRule"
        },
        "content": {
            "rendered": "\n<p><strong>LengthComplexityRule<\/strong>&nbsp;helps in defining the applicable rule on a password based on its length. Consider the following policy.<\/p>\n\n\n\n<ul><li>If length of password is in between 1 to 5 characters, only lower case alphabets are allowed.<\/li><li>If length of password is in between 6 to 8 characters, then only a, b and c are allowed.<\/li><\/ul>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<p>The below example shows the validation of a password against above policy using Passay library.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.AllowedCharacterRule;\nimport org.passay.CharacterRule;\nimport org.passay.EnglishCharacterData;\nimport org.passay.LengthComplexityRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.RuleResult;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      LengthComplexityRule lengthComplexityRule = new LengthComplexityRule();\n      \/\/Rule: Password of 1 to 5 characters should contains lower case alphabets only\n      lengthComplexityRule.addRules(\"&#91;1,5]\", \n         new CharacterRule(EnglishCharacterData.LowerCase, 5));\n      \/\/8 and 16 characters\n      lengthComplexityRule.addRules(\"&#91;6,8]\", \n         new AllowedCharacterRule(new char&#91;] { 'a', 'b', 'c' }));    \n      PasswordValidator validator = new PasswordValidator(lengthComplexityRule);\n      PasswordData password = new PasswordData(\"abcdef\");\n      RuleResult result = validator.validate(password);\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      }else{\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;\nPassword contains the illegal character 'd'., \nPassword contains the illegal character 'e'., \nPassword contains the illegal character 'f'., \nPassword meets 0 complexity rules, but 1 are required.]<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>LengthComplexityRule&nbsp;helps in defining the applicable rule on a password based on its length. Consider the following policy. If length of password is in between 1 to 5 characters, only lower case alphabets are allowed. If length of password is in between 6 to 8 characters, then only a, b and c are allowed. Example The [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1936"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1936"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1936\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1937,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1936\/revisions\/1937"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1936"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1936"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1936"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1938,
        "date": "2021-03-17T05:38:35",
        "date_gmt": "2021-03-17T05:38:35",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1938"
        },
        "modified": "2021-03-17T05:38:35",
        "modified_gmt": "2021-03-17T05:38:35",
        "slug": "illegalcharacterrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/illegalcharacterrule\/",
        "title": {
            "rendered": "IllegalCharacterRule"
        },
        "content": {
            "rendered": "\n<p><strong>IllegalCharacterRule<\/strong>&nbsp;allows to specify the characters which are not allowed in a password. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.IllegalCharacterRule;\nimport org.passay.NumberRangeRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      \/\/Rule: Special characters like &amp;, &lt;, &gt; are not allowed in a password \n      IllegalCharacterRule illegalCharacterRule \n         = new IllegalCharacterRule(new char&#91;] {'&amp;', '&lt;', '&gt;'});\n\n      \/\/Rule: 1 to 5 numbers are not allowed\n      NumberRangeRule numberRangeRule = new NumberRangeRule(1, 5);\n\n      \/\/Rule: White spaces are not allowed\n      WhitespaceRule whitespaceRule = new WhitespaceRule();\n\n      PasswordValidator validator \n         = new PasswordValidator(illegalCharacterRule,numberRangeRule,whitespaceRule);\n      PasswordData password = new PasswordData(\"abc&amp;4d  ef6\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      }else{\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;\nPassword contains the illegal character '&amp;'.,\nPassword contains the number '4'.,\nPassword contains a whitespace character.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>IllegalCharacterRule&nbsp;allows to specify the characters which are not allowed in a password. Consider the following example. Example Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1938"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1938"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1938\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1939,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1938\/revisions\/1939"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1938"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1938"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1938"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1940,
        "date": "2021-03-17T05:39:51",
        "date_gmt": "2021-03-17T05:39:51",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1940"
        },
        "modified": "2021-03-17T05:39:51",
        "modified_gmt": "2021-03-17T05:39:51",
        "slug": "numberrangerule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/numberrangerule\/",
        "title": {
            "rendered": "NumberRangeRule"
        },
        "content": {
            "rendered": "\n<p><strong>NumberRangeRule<\/strong>&nbsp;allows to specify the range of numbers which are not allowed in a password. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.IllegalCharacterRule;\nimport org.passay.NumberRangeRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      \/\/Rule: Special characters like &amp;, &lt;, &gt; are not allowed in a password \n      IllegalCharacterRule illegalCharacterRule \n         = new IllegalCharacterRule(new char&#91;] {'&amp;', '&lt;', '&gt;'});\n\n      \/\/Rule: 1 to 5 numbers are not allowed\n      NumberRangeRule numberRangeRule = new NumberRangeRule(1, 5);\n\n      \/\/Rule: White spaces are not allowed\n      WhitespaceRule whitespaceRule = new WhitespaceRule();\n\n      PasswordValidator validator \n         = new PasswordValidator(illegalCharacterRule,numberRangeRule,whitespaceRule);\n      PasswordData password = new PasswordData(\"abc&amp;4d  ef6\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;\nPassword contains the illegal character '&amp;'.,\nPassword contains the number '4'.,\nPassword contains a whitespace character.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>NumberRangeRule&nbsp;allows to specify the range of numbers which are not allowed in a password. Consider the following example. Example Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1940"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1940"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1940\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1941,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1940\/revisions\/1941"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1940"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1940"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1940"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1942,
        "date": "2021-03-17T05:41:08",
        "date_gmt": "2021-03-17T05:41:08",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1942"
        },
        "modified": "2021-03-17T05:41:08",
        "modified_gmt": "2021-03-17T05:41:08",
        "slug": "whitespacerule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/whitespacerule\/",
        "title": {
            "rendered": "WhitespaceRule"
        },
        "content": {
            "rendered": "\n<p><strong>WhitespaceRule<\/strong>&nbsp;allows to specify that the white spaces are not allowed in a password. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.IllegalCharacterRule;\nimport org.passay.NumberRangeRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.RuleResult;\nimport org.passay.WhitespaceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      \/\/Rule: Special characters like &amp;, &lt;, &gt; are not allowed in a password \n      IllegalCharacterRule illegalCharacterRule \n         = new IllegalCharacterRule(new char&#91;] {'&amp;', '&lt;', '&gt;'});\n\n      \/\/Rule: 1 to 5 numbers are not allowed\n      NumberRangeRule numberRangeRule = new NumberRangeRule(1, 5);\n\n      \/\/Rule: White spaces are not allowed\n      WhitespaceRule whitespaceRule = new WhitespaceRule();\n\n      PasswordValidator validator \n         = new PasswordValidator(illegalCharacterRule,numberRangeRule,whitespaceRule);\n      PasswordData password = new PasswordData(\"abc&amp;4d  ef6\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      } else {\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;\nPassword contains the illegal character '&amp;'.,\nPassword contains the number '4'.,\nPassword contains a whitespace character.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>WhitespaceRule&nbsp;allows to specify that the white spaces are not allowed in a password. Consider the following example. Example Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1942"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1942"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1942\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1943,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1942\/revisions\/1943"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1942"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1942"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1942"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1944,
        "date": "2021-03-17T05:42:36",
        "date_gmt": "2021-03-17T05:42:36",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1944"
        },
        "modified": "2021-03-17T05:42:36",
        "modified_gmt": "2021-03-17T05:42:36",
        "slug": "dictionaryrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/dictionaryrule\/",
        "title": {
            "rendered": "DictionaryRule"
        },
        "content": {
            "rendered": "\n<p><strong>DictionaryRule<\/strong>&nbsp;allows to check if certain words are not specified as password. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.DictionaryRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.RuleResult;\nimport org.passay.dictionary.ArrayWordList;\nimport org.passay.dictionary.WordListDictionary;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      WordListDictionary wordListDictionary = new WordListDictionary(\n         new ArrayWordList(new String&#91;] { \"password\", \"username\" }));\n      DictionaryRule dictionaryRule = new DictionaryRule(wordListDictionary);\n      PasswordValidator validator = new PasswordValidator(dictionaryRule);\n      PasswordData password = new PasswordData(\"password\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      }else{\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;Password contains the dictionary word 'password'.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>DictionaryRule&nbsp;allows to check if certain words are not specified as password. Consider the following example. Example Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1944"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1944"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1944\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1945,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1944\/revisions\/1945"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1944"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1944"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1944"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1946,
        "date": "2021-03-17T05:43:38",
        "date_gmt": "2021-03-17T05:43:38",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1946"
        },
        "modified": "2021-03-17T05:43:38",
        "modified_gmt": "2021-03-17T05:43:38",
        "slug": "dictionarysubstringrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/dictionarysubstringrule\/",
        "title": {
            "rendered": "DictionarySubstringRule"
        },
        "content": {
            "rendered": "\n<p><strong>DictionarySubstringRule<\/strong>&nbsp;allows to check if certain words are not part of a password. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.DictionarySubstringRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.RuleResult;\nimport org.passay.dictionary.ArrayWordList;\nimport org.passay.dictionary.WordListDictionary;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      WordListDictionary wordListDictionary = new WordListDictionary(\n         new ArrayWordList(new String&#91;] { \"password\", \"username\" }));\n      DictionarySubstringRule dictionaryRule = new DictionarySubstringRule(wordListDictionary);\n      PasswordValidator validator = new PasswordValidator(dictionaryRule);\n      PasswordData password = new PasswordData(\"password@123\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      }else{\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;Password contains the dictionary word 'password'.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>DictionarySubstringRule&nbsp;allows to check if certain words are not part of a password. Consider the following example. Example Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1946"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1946"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1946\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1947,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1946\/revisions\/1947"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1946"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1946"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1946"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1948,
        "date": "2021-03-17T05:44:41",
        "date_gmt": "2021-03-17T05:44:41",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1948"
        },
        "modified": "2021-03-17T05:44:41",
        "modified_gmt": "2021-03-17T05:44:41",
        "slug": "historyrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/historyrule\/",
        "title": {
            "rendered": "HistoryRule"
        },
        "content": {
            "rendered": "\n<p><strong>HistoryRule<\/strong>&nbsp;allows to check if given password has not been in use in near past. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.HistoryRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.RuleResult;\nimport org.passay.SourceRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      SourceRule sourceRule = new SourceRule();\n      HistoryRule historyRule = new HistoryRule();\n      PasswordValidator validator = new PasswordValidator(sourceRule, historyRule);\n      PasswordData password = new PasswordData(\"password@123\");\n      password.setPasswordReferences(\n         new PasswordData.SourceReference(\"source\", \"password\"), \n         new PasswordData.HistoricalReference(\"password@123\")\n      );\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      }else{\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;Password matches one of 1 previous passwords.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>HistoryRule&nbsp;allows to check if given password has not been in use in near past. Consider the following example. Example Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1948"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1948"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1948\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1949,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1948\/revisions\/1949"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1948"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1948"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1948"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1950,
        "date": "2021-03-17T05:47:27",
        "date_gmt": "2021-03-17T05:47:27",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1950"
        },
        "modified": "2021-03-17T05:47:27",
        "modified_gmt": "2021-03-17T05:47:27",
        "slug": "repeatcharacterregexrule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/repeatcharacterregexrule\/",
        "title": {
            "rendered": "RepeatCharacterRegexRule"
        },
        "content": {
            "rendered": "\n<p><strong>RepeatCharacterRegexRule<\/strong>\u00a0allows checking if the given password has repeated ASCII characters. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.LengthRule;\nimport org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.RepeatCharacterRegexRule;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      \/\/Rule: Password should not contain repeated entries\n      Rule rule1 = new RepeatCharacterRegexRule(3);\n      \/\/8 and 16 characters\n      Rule rule2 = new LengthRule(8, 16);    \n\n      PasswordValidator validator = new PasswordValidator(rule1, rule2);\n      PasswordData password = new PasswordData(\"aaefhehhhhh\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      }else{\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;Password matches the illegal pattern 'hhh'.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>RepeatCharacterRegexRule\u00a0allows checking if the given password has repeated ASCII characters. Consider the following example. Example Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1950"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1950"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1950\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1951,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1950\/revisions\/1951"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1950"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1950"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1950"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1952,
        "date": "2021-03-17T05:49:13",
        "date_gmt": "2021-03-17T05:49:13",
        "guid": {
            "rendered": "https:\/\/java.foobrdigital.com\/?p=1952"
        },
        "modified": "2021-03-17T05:49:13",
        "modified_gmt": "2021-03-17T05:49:13",
        "slug": "usernamerule",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/usernamerule\/",
        "title": {
            "rendered": "UsernameRule"
        },
        "content": {
            "rendered": "\n<p><strong>UsernameRule<\/strong>\u00a0ensures that the password is not containing the username. Consider the following example.<\/p>\n\n\n\n<h2>Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.passay.PasswordData;\nimport org.passay.PasswordValidator;\nimport org.passay.Rule;\nimport org.passay.RuleResult;\nimport org.passay.UsernameRule;\n\npublic class PassayExample {\n   public static void main(String&#91;] args) {\n      \/\/Rule: Password should not contain user-name\n      Rule rule = new UsernameRule();\n      \n      PasswordValidator validator = new PasswordValidator(rule);\n      PasswordData password = new PasswordData(\"microsoft\");\n      password.setUsername(\"micro\");\n      RuleResult result = validator.validate(password);\n\n      if(result.isValid()){\n         System.out.println(\"Password validated.\");\n      }else{\n         System.out.println(\"Invalid Password: \" + validator.getMessages(result));            \n      }\n   }\n}<\/code><\/pre>\n\n\n\n<h2>Output<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Invalid Password: &#91;Password contains the user id 'micro'.]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>UsernameRule\u00a0ensures that the password is not containing the username. Consider the following example. Example Output<\/p>\n",
            "protected": false
        },
        "author": 3,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            77
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1952"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/3"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1952"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1952\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1953,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1952\/revisions\/1953"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1952"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1952"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1952"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]