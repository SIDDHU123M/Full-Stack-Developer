[{"id":4053,"date":"2020-07-21T05:29:12","date_gmt":"2020-07-21T05:29:12","guid":{"rendered":"http://javascript.foobrdigital.com/?p=120"},"modified":"2020-07-21T05:29:12","modified_gmt":"2020-07-21T05:29:12","slug":"overview-3","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/overview-3/","title":{"rendered":"Overview"},"content":{"rendered":"\n<p><strong>VueJS</strong>&nbsp;is an open source progressive JavaScript framework used to develop interactive web interfaces. It is one of the famous frameworks used to simplify web development. VueJS focusses on the view layer. It can be easily integrated into big projects for front-end development without any issues.</p>\n\n\n\n<p>The installation for VueJS is very easy to start with. Any developer can easily understand and build interactive web interfaces in a matter of time. VueJS is created by Evan You, an ex-employee from Google. The first version of VueJS was released in Feb 2014. It recently has clocked to 64,828 stars on GitHub, making it very popular.</p>\n\n\n\n<h2>Features</h2>\n\n\n\n<p>Following are the features available with VueJS.</p>\n\n\n\n<h3>Virtual DOM</h3>\n\n\n\n<p>VueJS makes the use of virtual DOM, which is also used by other frameworks such as React, Ember, etc. The changes are not made to the DOM, instead a replica of the DOM is created which is present in the form of JavaScript data structures. Whenever any changes are to be made, they are made to the JavaScript data structures and the latter is compared with the original data structure. The final changes are then updated to the real DOM, which the user will see changing. This is good in terms of optimization, it is less expensive and the changes can be made at a faster rate.</p>\n\n\n\n<h3>Data Binding</h3>\n\n\n\n<p>The data binding feature helps manipulate or assign values to HTML attributes, change the style, assign classes with the help of binding directive called&nbsp;<strong>v-bind</strong>&nbsp;available with VueJS.</p>\n\n\n\n<h3>Components</h3>\n\n\n\n<p>Components are one of the important features of VueJS that helps create custom elements, which can be reused in HTML.</p>\n\n\n\n<h3>Event Handling</h3>\n\n\n\n<p><strong>v-on</strong>&nbsp;is the attribute added to the DOM elements to listen to the events in VueJS.</p>\n\n\n\n<h3>Animation/Transition</h3>\n\n\n\n<p>VueJS provides various ways to apply transition to HTML elements when they are added/updated or removed from the DOM. VueJS has a built-in transition component that needs to be wrapped around the element for transition effect. We can easily add third party animation libraries and also add more interactivity to the interface.</p>\n\n\n\n<h3>Computed Properties</h3>\n\n\n\n<p>This is one of the important features of VueJS. It helps to listen to the changes made to the UI elements and performs the necessary calculations. There is no need of additional coding for this.</p>\n\n\n\n<h3>Templates</h3>\n\n\n\n<p>VueJS provides HTML-based templates that bind the DOM with the Vue instance data. Vue compiles the templates into virtual DOM Render functions. We can make use of the template of the render functions and to do so we have to replace the template with the render function.</p>\n\n\n\n<h3>Directives</h3>\n\n\n\n<p>VueJS has built-in directives such as v-if, v-else, v-show, v-on, v-bind, and v-model, which are used to perform various actions on the frontend.</p>\n\n\n\n<h3>Watchers</h3>\n\n\n\n<p>Watchers are applied to data that changes. For example, form input elements. Here, we don’t have to add any additional events. Watcher takes care of handling any data changes making the code simple and fast.</p>\n\n\n\n<h3>Routing</h3>\n\n\n\n<p>Navigation between pages is performed with the help of vue-router.</p>\n\n\n\n<h3>Lightweight</h3>\n\n\n\n<p>VueJS script is very lightweight and the performance is also very fast.</p>\n\n\n\n<h3>Vue-CLI</h3>\n\n\n\n<p>VueJS can be installed at the command line using the vue-cli command line interface. It helps to build and compile the project easily using vue-cli.</p>\n\n\n\n<h2>Comparison with Other Frameworks</h2>\n\n\n\n<p>Now let us compare VueJS with other frameworks such as React, Angular, Ember, Knockout, and Polymer.</p>\n\n\n\n<h3>VueJS v/s React</h3>\n\n\n\n<p><strong>Virtual DOM</strong></p>\n\n\n\n<p>Virtual DOM is a virtual representation of the DOM tree. With virtual DOM, a JavaScript object is created which is the same as the real DOM. Any time a change needs to be made to the DOM, a new JavaScript object is created and the changes are made. Later, both the JavaScript objects are compared and the final changes are updated in the real DOM.</p>\n\n\n\n<p>VueJS and React both use virtual DOM, which makes it faster.</p>\n\n\n\n<p><strong>Template v/s JSX</strong></p>\n\n\n\n<p>VueJS uses html, js and css separately. It is very easy for a beginner to understand and adopt the VueJS style. The template based approach for VueJS is very easy.</p>\n\n\n\n<p>React uses jsx approach. Everything is JavaScript for ReactJS. HTML and CSS are all part of JavaScript.</p>\n\n\n\n<p><strong>Installation Tools</strong></p>\n\n\n\n<p>React uses&nbsp;<strong>create react app</strong>&nbsp;and VueJS uses&nbsp;<strong>vue-cli /CDN/npm</strong>. Both are very easy to use and the project is set up with all the basic requirements. React needs webpack for the build, whereas VueJS does not. We can start with VueJS coding anywhere in jsfiddle or codepen using the cdn library.</p>\n\n\n\n<p><strong>Popularity</strong></p>\n\n\n\n<p>React is popular than VueJS. The job opportunity with React is more than VueJS. There is a big name behind React i.e. Facebook which makes it more popular. Since, React uses the core concept of JavaScript, it uses the best practice of JavaScript. One who works with React will definitely be a very good with all the JavaScript concepts.</p>\n\n\n\n<p>VueJS is a developing framework. Presently, the job opportunities with VueJS are less in comparison to React. According to a survey, many people are adapting to VueJS, which can make it more popular in comparison to React and Angular. There is a good community working on the different features of VueJS. The vue-router is maintained by this community with regular updates.</p>\n\n\n\n<p>VueJS has taken the good parts from Angular and React and has built a powerful library. VueJS is much faster in comparison to React/Angular because of its lightweight library.</p>\n\n\n\n<h3>VueJS v/s Angular</h3>\n\n\n\n<p><strong>Similarities</strong></p>\n\n\n\n<p>VueJS has a lot of similarities with Angular. Directives such as v-if, v-for are almost similar to ngIf, ngFor of Angular. They both have a command line interface for project installation and to build it. VueJS uses Vue-cli and Angular uses angular-cli. Both offer two-way data binding, server side rendering, etc.</p>\n\n\n\n<p><strong>Complexity</strong></p>\n\n\n\n<p>Vuejs is very easy to learn and start with. As discussed earlier, a beginner can take the CDN library of VueJS and get started in codepen and jsfiddle.</p>\n\n\n\n<p>For Angular, we need to go through a series of steps for installation and it is little difficult for beginners to get started with Angular. It uses TypeScript for coding which is difficult for people coming from core JavaScript background. However, it is easier to learn for users belonging to Java and C# background.</p>\n\n\n\n<p><strong>Performance</strong></p>\n\n\n\n<p>To decide the performance, it is up to the users. VueJS file size is much lighter than Angular. A comparison of the framework performance is provided in the following link http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html</p>\n\n\n\n<p><strong>Popularity</strong></p>\n\n\n\n<p>At present, Angular is more popular than VueJS. A lot of organizations use Angular, making it very popular. Job opportunities are also more for candidates experienced in Angular. However, VueJS is taking up the place in the market and can be considered as a good competitor for Angular and React.</p>\n\n\n\n<p><strong>Dependencies</strong></p>\n\n\n\n<p>Angular provides a lot of built-in features. We have to import the required modules and get started with it, for example, @angular/animations, @angular/form.</p>\n\n\n\n<p>VueJS does not have all the built-in features as Angular and needs to depend on third party libraries to work on it.</p>\n\n\n\n<p><strong>Flexibility</strong></p>\n\n\n\n<p>VueJS can be easily merged with any other big project without any issues. Angular will not be that easy to start working with any other existing project.</p>\n\n\n\n<p><strong>Backward Compatibility</strong></p>\n\n\n\n<p>We had AngularJS, Angular2 and now Angular4. AngularJS and Angular2 have vast difference. Project application developed in AngularJS cannot be converted to Angular2 because of the core differences.</p>\n\n\n\n<p>The recent version of VueJS is 2.0 and it is good with backward compatibility. It provides good documentation, which is very easy to understand.</p>\n\n\n\n<p><strong>Typescript</strong></p>\n\n\n\n<p>Angular uses TypeScript for its coding. Users need to have knowledge of Typescript to get started with Angular. However, we can start with VueJS coding anywhere in jsfiddle or codepen using the cdn library. We can work with standard JavaScript, which is very easy to start with.</p>\n\n\n\n<h3>VueJS v/s Ember</h3>\n\n\n\n<p><strong>Similarities</strong></p>\n\n\n\n<p>Ember provides Ember command line tool, i.e. ember-cli for easy installation and compiling for Ember projects.</p>\n\n\n\n<p>VueJS has also a command line tool vue-cli to start and build projects.</p>\n\n\n\n<p>They both have features such as router, template, and components which makes them very rich as the UI framework.</p>\n\n\n\n<p><strong>Performance</strong></p>\n\n\n\n<p>VueJS has better performance in comparison to Ember. Ember has added a glimmer rendering engine with the aim of improving the re-render performance, which is a similar concept as VueJS and React using virtual DOM. However, VueJS has a better performance when compared to Ember.</p>\n\n\n\n<h2>VueJS v/s Knockout</h2>\n\n\n\n<p>Knockout provides a good browser support. It is supported on the lower version of the IE whereas VueJS is not supported on IE8 and below. Knockout development has slowed down over time. There is not much popularity for the same in recent times.</p>\n\n\n\n<p>On the other hand, VueJS has started gaining popularity with the Vue team providing regular updates.</p>\n\n\n\n<h2>VueJS v/s Polymer</h2>\n\n\n\n<p>Polymer library has been developed by Google. It is used in many Google projects such as Google I/O, Google Earth, Google Play Music, etc. It offers data binding and computed properties similar to VueJS.</p>\n\n\n\n<p>Polymer custom element definition comprises plain JavaScript/CSS, element properties, lifecycle callbacks, and JavaScript methods. In comparison, VueJS allows to easily use JavaScript/html and CSS.</p>\n\n\n\n<p>Polymer uses web component features and requires polyfills for browsers, which does not support these features. VueJS does not have such dependencies and works fine in all browsers from IE9+.</p>\n","protected":false},"excerpt":{"rendered":"<p>VueJS&nbsp;is an open source progressive JavaScript framework used to develop interactive web interfaces. It is one of the famous frameworks used to simplify web development. VueJS focusses on the view layer. It can be easily integrated into big projects for front-end development without any issues. The installation for VueJS is very easy to start with. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4053"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4053"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4053/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4053"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4053"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4053"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4054,"date":"2020-07-21T05:33:15","date_gmt":"2020-07-21T05:33:15","guid":{"rendered":"http://javascript.foobrdigital.com/?p=122"},"modified":"2020-07-21T05:33:15","modified_gmt":"2020-07-21T05:33:15","slug":"environment-setup-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/environment-setup-2/","title":{"rendered":"Environment Setup"},"content":{"rendered":"\n<p>There are many ways to install VueJS. Some of the ways on how to carry out the installation are discussed ahead.</p>\n\n\n\n<h2>Using the &lt;script&gt; tag directly in HTML file</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;script type = \"text/javascript\" src = \"vue.min.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>&lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Go to the home site&nbsp;<strong>https://vuejs.org/v2/guide/installation.html</strong>&nbsp;of VueJS and download the vue.js as per need. There are two versions for use &#8211; production version and development version. The development version is not minimized, whereas the production version is minimized as shown in the following screenshot. Development version will help with the warnings and debug mode during the development of the project.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/installation.jpg\" alt=\"Installation\"/></figure>\n\n\n\n<h2>Using CDN</h2>\n\n\n\n<p>We can also start using VueJS file from the CDN library. The link https://unpkg.com/vue will give the latest version of VueJS. VueJS is also available on jsDelivr (https://cdn.jsdelivr.net/npm/vue/dist/vue.js) and cdnjs (https://cdnjs.cloudflare.com/ajax/libs/vue/2.4.0/vue.js).</p>\n\n\n\n<p>We can host the files at our end, if required and get started with VueJS development.</p>\n\n\n\n<h2>Using NPM</h2>\n\n\n\n<p>For large scale applications with VueJS, it is recommended to install using the npm package. It comes with Browserify and Webpack along with other necessary tools, which help with the development. Following is the command to install using npm.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm  install vue\n﻿</code></pre>\n\n\n\n<h2>Using CLI Command Line</h2>\n\n\n\n<p>VueJS also provides CLI to install the vue and get started with the server activation. To install using CLI, we need to have CLI installed which is done using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install --global vue-cli</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/cli_command_line.jpg\" alt=\"CLI Command Line\"/></figure>\n\n\n\n<p>Once done, it shows the CLI version for VueJS. It takes a few minutes for the installation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>+ vue-cli@2.8.2\nadded 965 packages in 355.414s\n﻿</code></pre>\n\n\n\n<p>Following is the command to create the project using Webpack.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>vue init webpack myproject</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/select_command_prompt.jpg\" alt=\"Select Command Prompt\"/></figure>\n\n\n\n<p>To get started, use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cd myproject\nnpm install\nnpm run dev</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/command_prompt.jpg\" alt=\"Command Prompt\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/npm.jpg\" alt=\"NPM\"/></figure>\n\n\n\n<p>Once we execute npm run dev, it starts the server and provides the url for display to be seen in the browser which is as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/welcome_to_vuejs.jpg\" alt=\"Welcome to VueJS\"/></figure>\n\n\n\n<p>The project structure using CLI looks like the following.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/cli.jpg\" alt=\"CLI\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>There are many ways to install VueJS. Some of the ways on how to carry out the installation are discussed ahead. Using the &lt;script&gt; tag directly in HTML file Go to the home site&nbsp;https://vuejs.org/v2/guide/installation.html&nbsp;of VueJS and download the vue.js as per need. There are two versions for use &#8211; production version and development version. The [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4054"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4054"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4054/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4054"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4054"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4054"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4037,"date":"2020-07-21T05:35:26","date_gmt":"2020-07-21T05:35:26","guid":{"rendered":"http://javascript.foobrdigital.com/?p=124"},"modified":"2020-07-21T05:35:26","modified_gmt":"2020-07-21T05:35:26","slug":"introduction","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/introduction/","title":{"rendered":"Introduction"},"content":{"rendered":"\n<p><strong>Vue</strong>&nbsp;is a JavaScript framework for building user interfaces. Its core part is focused mainly on the view layer and it is very easy to understand. The version of Vue that we are going to use in this tutorial is 2.0.</p>\n\n\n\n<p>As Vue is basically built for frontend development, we are going to deal with lot of HTML, JavaScript and CSS files in the upcoming chapters. To understand the details, let us start with a simple example.</p>\n\n\n\n<p>In this example, we are going to use the development verison of vuejs.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Introduction&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"intro\" style = \"text-align:center;\">\n         &lt;h1>{{ message }}&lt;/h1>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vue_det = new Vue({\n            el: '#intro',\n            data: {\n               message: 'My first VueJS Task'\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/first_vuejs.jpg\" alt=\"First VueJS\"/></figure>\n\n\n\n<p>This is the first app we have created using VueJS. As seen in the above code, we have included vue.js at the start of the .html file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script></code></pre>\n\n\n\n<p>There is a div which is added in the body that prints <strong>“My first VueJS Task”</strong> in the browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"intro\" style = \"text-align:center;\">\n   &lt;h1>{{ message }}&lt;/h1>\n&lt;/div></code></pre>\n\n\n\n<p>We have also added a message in a interpolation, i.e. <strong>{{}}</strong>. This interacts with VueJS and prints the data in the browser. To get the value of the message in the DOM, we are creating an instance of vuejs as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var vue_det = new Vue({\n   el: '#intro',\n   data: {\n      message: 'My first VueJS Task'\n   }\n})</code></pre>\n\n\n\n<p>In the above code snippet, we are calling Vue instance, which takes the id of the DOM element i.e. e1:’#intro’, it is the id of the div. There is data with the message which is assigned the value&nbsp;<strong>‘My first VueJS Task’</strong>. VueJS interacts with DOM and changes the value in the DOM {{message}} with&nbsp;<strong>’My first VueJS Task’</strong>.</p>\n\n\n\n<p>If we happen to change the value of the message in the console, the same will be reflected in the browser. For example −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/vuejs_interesting.jpg\" alt=\"VueJS Interesting\"/></figure>\n\n\n\n<h2>Console Details</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/vuejs_is_interesting.jpg\" alt=\"VueJS is Interesting\"/></figure>\n\n\n\n<p>In the above console, we have printed the vue_det object, which is an instance of Vue. We are updating the message with&nbsp;<strong>“VueJs is interesting”</strong>&nbsp;and the same is changed in the browser immediately as seen in the above screenshot.</p>\n\n\n\n<p>This is just a basic example showing the linking of VueJS with DOM, and how we can manipulate it. In the next few chapters, we will learn about directives, components, conditional loops, etc.</p>\n","protected":false},"excerpt":{"rendered":"<p>Vue&nbsp;is a JavaScript framework for building user interfaces. Its core part is focused mainly on the view layer and it is very easy to understand. The version of Vue that we are going to use in this tutorial is 2.0. As Vue is basically built for frontend development, we are going to deal with lot [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4037"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4037"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4037/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4037"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4037"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4037"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4038,"date":"2020-07-21T05:40:15","date_gmt":"2020-07-21T05:40:15","guid":{"rendered":"http://javascript.foobrdigital.com/?p=126"},"modified":"2020-07-21T05:40:15","modified_gmt":"2020-07-21T05:40:15","slug":"instances","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/instances/","title":{"rendered":"Instances"},"content":{"rendered":"\n<p>To start with VueJS, we need to create the instance of Vue, which is called the&nbsp;<strong>root Vue Instance</strong>.</p>\n\n\n\n<h2>Syntax</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var app = new Vue({\n   // options\n})</code></pre>\n\n\n\n<p>Let us look at an example to understand what needs to be part of the Vue constructor.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"vue_det\">\n         &lt;h1>Firstname : {{firstname}}&lt;/h1>\n         &lt;h1>Lastname : {{lastname}}&lt;/h1>\n         &lt;h1>{{mydetails()}}&lt;/h1>\n      &lt;/div>\n      &lt;script type = \"text/javascript\" src = \"js/vue_instance.js\">&lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>vue_instance.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var  vm = new Vue({\n   el: '#vue_det',\n   data: {\n      firstname : \"Ria\",\n      lastname  : \"Singh\",\n      address    : \"Mumbai\"\n   },\n   methods: {\n      mydetails : function() {\n         return \"I am \"+this.firstname +\" \"+ this.lastname;\n      }\n   }\n})</code></pre>\n\n\n\n<p>For Vue, there is a parameter called <strong>el</strong>. It takes the id of the DOM element. In the above example, we have the id <strong>#vue_det</strong>. It is the id of the div element, which is present in .html.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"vue_det\">&lt;/div></code></pre>\n\n\n\n<p>Now, whatever we are going to do will affect the div element and nothing outside it.</p>\n\n\n\n<p>Next, we have defined the data object. It has value firstname, lastname, and address.</p>\n\n\n\n<p>The same is assigned inside the div. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"vue_det\">\n   &lt;h1>Firstname : {{firstname}}&lt;/h1>\n   &lt;h1>Lastname : {{lastname}}&lt;/h1>\n&lt;/div></code></pre>\n\n\n\n<p>The Firstname : {{firstname}} value will be replaced inside the interpolation, i.e. {{}} with the value assigned in the data object, i.e. Ria. The same goes for last name.</p>\n\n\n\n<p>Next, we have methods where we have defined a function mydetails and a returning value. It is assigned inside the div as</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>{{mydetails()}}&lt;/h1></code></pre>\n\n\n\n<p>Hence, inside {{} } the function mydetails is called. The value returned in the Vue instance will be printed inside {{}}. Check the output for reference.</p>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/vue_instance.jpg\" alt=\"Vue Instance\"/></figure>\n\n\n\n<p>Now, we need to pass options to the Vue constructor which is mainly data, template, element to mount on, methods, callbacks, etc.</p>\n\n\n\n<p>Let us take a look at the options to be passed to the Vue.</p>\n\n\n\n<p><strong>#data</strong>&nbsp;− This type of data can be an object or a function. Vue converts its properties to getters/setters to make it reactive.</p>\n\n\n\n<p>Let’s take a look at how the data is passed in the options.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Introduction&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;script type = \"text/javascript\">\n         var _obj = { fname: \"Raj\", lname: \"Singh\"}\n         \n         // direct instance creation\n         var vm = new Vue({\n            data: _obj\n         });\n         console.log(vm.fname);\n         console.log(vm.$data);\n         console.log(vm.$data.fname);\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/filter.jpg\" alt=\"Filter\"/></figure>\n\n\n\n<p><strong>console.log(vm.fname);</strong>&nbsp;// prints Raj</p>\n\n\n\n<p><strong>console.log(vm.$data);</strong>&nbsp;prints the full object as shown above</p>\n\n\n\n<p><strong>console.log(vm.$data.fname);</strong>&nbsp;// prints Raj</p>\n\n\n\n<p>If there is a component, the data object has to be referred from a function as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Introduction&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;script type = \"text/javascript\">\n         var _obj = { fname: \"Raj\", lname: \"Singh\"};\n         \n         // direct instance creation\n         var vm = new Vue({\n            data: _obj\n         });\n         console.log(vm.fname);\n         console.log(vm.$data);\n         console.log(vm.$data.fname);\n         \n         // must use function when in Vue.extend()\n         var Component = Vue.extend({\n            data: function () {\n               return _obj\n            }\n         });\n         var myComponentInstance = new Component();\n         console.log(myComponentInstance.lname);\n         console.log(myComponentInstance.$data);\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In case of a component, the data is a function, which is used with Vue.extend as shown above. The data is a function. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>data: function () {\n   return _obj\n}</code></pre>\n\n\n\n<p>To refer to the data from the component, we need to create an instance of it. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var myComponentInstance = new Component();</code></pre>\n\n\n\n<p>To fetch the details from the data, we need to do the same as we did with the parent component above. For example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>console.log(myComponentInstance.lname);\nconsole.log(myComponentInstance.$data);</code></pre>\n\n\n\n<p>Following are the details displayed in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/console.jpg\" alt=\"Console\"/></figure>\n\n\n\n<p><strong>Props</strong>&nbsp;− Type for props is an array of string or object. It takes an array-based or object-based syntax. They are said to be attributes used to accept data from the parent component.</p>\n\n\n\n<h2>Example 1</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('props-demo-simple', {\n   props: &#91;'size', 'myMessage']\n})</code></pre>\n\n\n\n<h2>Example 2</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('props-demo-advanced', {\n   props: {\n      // just type check\n      height: Number,\n      \n      // type check plus other validations\n      age: {\n         type: Number,\n         default: 0,\n         required: true,\n         validator: function (value) {\n            return value >= 0\n         }\n      }\n   }\n})</code></pre>\n\n\n\n<p><strong>propsData</strong>&nbsp;− This is used for unit testing.</p>\n\n\n\n<p><strong>Type</strong>&nbsp;− array of string. For example, { [key: string]: any }. It needs to be passed during the creation of Vue instance.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>var Comp = Vue.extend({\n   props: &#91;'msg'],\n   template: '&lt;div>{{ msg }}&lt;/div>'\n})\nvar vm = new Comp({\n   propsData: {\n      msg: 'hello'\n   }\n})</code></pre>\n\n\n\n<p><strong>Computed</strong>&nbsp;− Type: { [key: string]: Function | { get: Function, set: Function } }</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Introduction&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            data: { a: 2 },\n            computed: {\n            \n               // get only, just need a function\n               aSum: function () {\n                  return this.a + 2;\n               },\n               \n               // both get and set\n               aSquare: {\n                  get: function () {\n                     return this.a*this.a;\n                  },\n                  set: function (v) {\n                     this.a = v*2;\n                  }\n               }\n            }\n         })\n         console.log(vm.aSquare);  // -> 4\n         vm.aSquare = 3;\n         console.log(vm.a);       // -> 6\n         console.log(vm.aSum); // -> 8\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Computed has two functions&nbsp;<strong>aSum</strong>&nbsp;and&nbsp;<strong>aSquare</strong>.</p>\n\n\n\n<p>Function aSum just returns&nbsp;<strong>this.a+2</strong>. Function aSquare again two functions&nbsp;<strong>get</strong>&nbsp;and&nbsp;<strong>set</strong>.</p>\n\n\n\n<p>Variable vm is an instance of Vue and it calls aSquare and aSum. Also vm.aSquare = 3 calls the set function from aSquare and vm.aSquare calls the get function. We can check the output in the browser which looks like the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/instance_of_vue.jpg\" alt=\"Instance of Vue\"/></figure>\n\n\n\n<p><strong>Methods</strong> − Methods are to be included with the Vue instance as shown in the following code. We can access the function using the Vue object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Introduction&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            data: { a: 5 },\n            methods: {\n               asquare: function () {\n                  this.a *= this.a;\n               }\n            }\n         })\n         vm.asquare();\n         console.log(vm.a); // 25\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Methods are part of the Vue constructor. Let us make a call to the method using the Vue object&nbsp;<strong>vm.asquare ()</strong>, the value of the property&nbsp;<strong>a</strong>&nbsp;is updated in the&nbsp;<strong>asquare</strong>&nbsp;function. The value of a is changed from 1 to 25, and the same is seen reflected in the following browser console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/asquare_function.jpg\" alt=\"asquare function\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>To start with VueJS, we need to create the instance of Vue, which is called the&nbsp;root Vue Instance. Syntax Let us look at an example to understand what needs to be part of the Vue constructor. vue_instance.js For Vue, there is a parameter called el. It takes the id of the DOM element. In the above [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4038"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4038"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4038/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4038"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4038"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4038"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4039,"date":"2020-07-21T05:43:09","date_gmt":"2020-07-21T05:43:09","guid":{"rendered":"http://javascript.foobrdigital.com/?p=128"},"modified":"2020-07-21T05:43:09","modified_gmt":"2020-07-21T05:43:09","slug":"template","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/template/","title":{"rendered":"Template"},"content":{"rendered":"\n<p>We have learnt in the earlier chapters, how to get an output in the form of text content on the screen. In this chapter, we will learn how to get an output in the form of HTML template on the screen.</p>\n\n\n\n<p>To understand this, let us consider an example and see the output in the browser.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"vue_det\">\n         &lt;h1>Firstname : {{firstname}}&lt;/h1>\n         &lt;h1>Lastname : {{lastname}}&lt;/h1>\n         &lt;div>{{htmlcontent}}&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\" src = \"js/vue_template.js\">&lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>vue_template.js</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>var vm = new Vue({\n   el: '#vue_det',\n   data: {\n      firstname : \"Ria\",\n      lastname  : \"Singh\",\n      htmlcontent : \"&lt;div>&lt;h1>Vue Js Template&lt;/h1>&lt;/div>\"\n   }\n})</code></pre>\n\n\n\n<p>Now, suppose we want to show the html content on the page. If we happen to use it with interpolation, i.e. with double curly brackets, this is what we will get in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/content.jpg\" alt=\"Content\"/></figure>\n\n\n\n<p>If we see the html content is displayed the same way we have given in the variable htmlcontent, this is not what we want, we want it to be displayed in a proper HTML content on the browser.</p>\n\n\n\n<p>For this, we will have to use <strong>v-html</strong> directive. The moment we assign v-html directive to the html element, VueJS knows that it has to output it as HTML content. Let’s add v-html directive in the <strong>.html</strong> file and see the difference.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"vue_det\">\n         &lt;h1>Firstname : {{firstname}}&lt;/h1>\n         &lt;h1>Lastname : {{lastname}}&lt;/h1>\n         &lt;div v-html = \"htmlcontent\">&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\" src = \"js/vue_template.js\">&lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Now, we don’t need the double curly brackets to show the HTML content, instead we have used v-html = ”htmlcontent” where htmlcontent is defined inside the <strong>js</strong> file as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var vm = new Vue({\n   el: '#vue_det',\n   data: {\n      firstname : \"Ria\",\n      lastname  : \"Singh\",\n      htmlcontent : \"&lt;div>&lt;h1>Vue Js Template&lt;/h1>&lt;/div>\"\n   }\n})</code></pre>\n\n\n\n<p>The output in the browser is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/htmlcontent.jpg\" alt=\"HTMLContent\"/></figure>\n\n\n\n<p>If we inspect the browser, we will see the content is added in the same way as it is defined in the&nbsp;<strong>.js</strong>&nbsp;file to the variable&nbsp;<strong>htmlcontent : &#8220;&lt;div&gt;&lt;h1&gt;Vue Js Template&lt;/h1&gt;&lt;/div&gt;&#8221;</strong>.</p>\n\n\n\n<p>Let’s take a look at the inspect element in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/template.jpg\" alt=\"Template\"/></figure>\n\n\n\n<p>We have seen how to add HTML template to the DOM. Now, we will see how to add attributes to the exiting HTML elements.</p>\n\n\n\n<p>Consider, we have an image tag in the HTML file and we want to assign src, which is a part of Vue.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"vue_det\">\n         &lt;h1>Firstname : {{firstname}}&lt;/h1>\n         &lt;h1>Lastname : {{lastname}}&lt;/h1>\n         &lt;div v-html = \"htmlcontent\">&lt;/div>\n         &lt;img src = \"\" width = \"300\" height = \"250\" />\n      &lt;/div>\n      &lt;script type = \"text/javascript\" src = \"js/vue_template1.js\">&lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Look at the img tag above, the src is blank. We need to add the src to it from vue js. Let us take a look at how to do it. We will store the img src in the data object in the <strong>.js</strong> file as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var vm = new Vue({\n   el: '#vue_det',\n   data: {\n      firstname : \"Ria\",\n      lastname  : \"Singh\",\n      htmlcontent : \"&lt;div>&lt;h1>Vue Js Template&lt;/h1>&lt;/div>\",\n      imgsrc : \"images/img.jpg\"\n   }\n})</code></pre>\n\n\n\n<p>If we assign the src as follows, the output in the browser will be as shown in the following screenshot.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;img src = \"{{imgsrc}}\" width = \"300\" height = \"250\" /></code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/imgsrc.jpg\" alt=\"Imgsrc\"/></figure>\n\n\n\n<p>We get a broken image. To assign any attribute to HMTL tag, we need to use&nbsp;<strong>v-bind</strong>&nbsp;directive. Let’s add the src to the image with v-bind directive.</p>\n\n\n\n<p>This is how it is assigned in <strong>.html</strong> file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"vue_det\">\n         &lt;h1>Firstname : {{firstname}}&lt;/h1>\n         &lt;h1>Lastname : {{lastname}}&lt;/h1>\n         &lt;div v-html = \"htmlcontent\">&lt;/div>\n         &lt;img v-bind:src = \"imgsrc\" width = \"300\" height = \"250\" />\n      &lt;/div>\n      &lt;script type = \"text/javascript\" src = \"js/vue_template1.js\">&lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>We need to prefix the src with&nbsp;<strong>v-bind:src = ”imgsrc”</strong>&nbsp;and the name of the variable with src.</p>\n\n\n\n<p>Following is the output in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/img_display.jpg\" alt=\"Img Display\"/></figure>\n\n\n\n<p>Let us inspect and check how the src looks like with v-bind.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/inspect.jpg\" alt=\"Inspect\"/></figure>\n\n\n\n<p>As seen in the above screenshot, the src is assigned without any vuejs properties to it.</p>\n","protected":false},"excerpt":{"rendered":"<p>We have learnt in the earlier chapters, how to get an output in the form of text content on the screen. In this chapter, we will learn how to get an output in the form of HTML template on the screen. To understand this, let us consider an example and see the output in the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4039"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4039"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4039/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4039"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4039"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4039"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4040,"date":"2020-07-21T05:46:45","date_gmt":"2020-07-21T05:46:45","guid":{"rendered":"http://javascript.foobrdigital.com/?p=130"},"modified":"2020-07-21T05:46:45","modified_gmt":"2020-07-21T05:46:45","slug":"components","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/components/","title":{"rendered":"Components"},"content":{"rendered":"\n<p><strong>Vue Components</strong>&nbsp;are one of the important features of VueJS that creates custom elements, which can be reused in HTML.</p>\n\n\n\n<p>Let’s work with an example and create a component, that will give a better understanding on how components work with VueJS.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"component_test\">\n         &lt;testcomponent>&lt;/testcomponent>\n      &lt;/div>\n      &lt;div id = \"component_test1\">\n         &lt;testcomponent>&lt;/testcomponent>\n      &lt;/div>\n      &lt;script type = \"text/javascript\" src = \"js/vue_component.js\">&lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>vue_component.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('testcomponent',{\n   template : '&lt;div>&lt;h1>This is coming from component&lt;/h1>&lt;/div>'\n});\nvar vm = new Vue({\n   el: '#component_test'\n});\nvar vm1 = new Vue({\n   el: '#component_test1'\n});</code></pre>\n\n\n\n<p>In the .html file, we have created two div with id&nbsp;<strong>component_test</strong>&nbsp;and&nbsp;<strong>component_test1</strong>. In the&nbsp;<strong>.js</strong>&nbsp;files shown above, two Vue instances are created with the div ids. We have created a common component to be used with both the view instances.</p>\n\n\n\n<p>To create a component, following is the syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('nameofthecomponent',{ // options});</code></pre>\n\n\n\n<p>Once a component is created, the name of the component becomes the custom element and the same can be used in the Vue instance element created, i.e. inside the div with ids&nbsp;<strong>component_test</strong>&nbsp;and&nbsp;<strong>component_test1</strong>.</p>\n\n\n\n<p>In the&nbsp;<strong>.js</strong>&nbsp;file, we have used a test component as the name of the component and the same name is used as the custom element inside the divs.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"component_test\">\n   &lt;testcomponent>&lt;/testcomponent>\n&lt;/div>\n&lt;div id = \"component_test1\">\n   &lt;testcomponent>&lt;/testcomponent>\n&lt;/div></code></pre>\n\n\n\n<p>In the component created in the <strong>.js</strong> file, we have added a template to which we have assigned a HTML code. This is a way of <strong>registering a global component</strong>, which can be made a part of any vue instance as shown in the following script.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('testcomponent',{\n   template : '&lt;div>&lt;h1>This is coming from component&lt;/h1>&lt;/div>'\n});</code></pre>\n\n\n\n<p>On execution, the same will be reflected in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/global_component.jpg\" alt=\"Global Component\"/></figure>\n\n\n\n<p>The components are given the custom element tag, i.e.&nbsp;<strong>&lt;testcomponent&gt;&lt;/testcomponent&gt;</strong>. However, when we inspect the same in the browser, we will not notice the custom tag in plain HTML present in the template as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/testcomponent.jpg\" alt=\"TestComponent\"/></figure>\n\n\n\n<p>We have also directly made the components a part of vue instance as shown in the following script.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var vm = new Vue({\n   el: '#component_test',\n   components:{\n      'testcomponent': {\n         template : '&lt;div>&lt;h1>This is coming from component&lt;/h1>&lt;/div>'\n      }\n   }\n});</code></pre>\n\n\n\n<p>This is called&nbsp;<strong>local registration</strong>&nbsp;and the components will be a part of only the vue instance created.</p>\n\n\n\n<p>So far, we have seen the basic component with the basic options. Now, let’s add some more options such as data and methods to it. Just as Vue instance has data and methods, component also shares the same. Hence, we will extend the code, which we have already seen with data and methods.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"component_test\">\n         &lt;testcomponent>&lt;/testcomponent>\n      &lt;/div>\n      &lt;div id = \"component_test1\">\n         &lt;testcomponent>&lt;/testcomponent>\n      &lt;/div>\n      &lt;script type = \"text/javascript\" src = \"js/vue_component.js\">&lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>vue_component.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('testcomponent',{\n   template : '&lt;div v-on:mouseover = \"changename()\" v-on:mouseout = \"originalname();\">&lt;h1>Custom Component created by &lt;span id = \"name\">{{name}}&lt;/span>&lt;/h1>&lt;/div>',\n   data: function() {\n      return {\n         name : \"Ria\"\n      }\n   },\n   methods:{\n      changename : function() {\n         this.name = \"Ben\";\n      },\n      originalname: function() {\n         this.name = \"Ria\";\n      }\n   }\n});\nvar vm = new Vue({\n   el: '#component_test'\n});\nvar vm1 = new Vue({\n   el: '#component_test1'\n});</code></pre>\n\n\n\n<p>In the <strong>.js</strong> file above, we have added data that is a function, which returns an object. The object has a name property, which is assigned the value ‘Ria’. This is used in the following template.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>template : '&lt;div v-on:mouseover = \"changename()\" v-on:mouseout = \"originalname();\">&lt;h1>Custom Component created by &lt;span id = \"name\">{{name}}&lt;/span>&lt;/h1>&lt;/div>',</code></pre>\n\n\n\n<p>In spite of having data as a function in components, we can use its properties the same way as we use with direct Vue instance. Also, there are two methods added, changename and originalname. In changename, we are changing the name property, and in originalname we are resetting it back to the original name.</p>\n\n\n\n<p>We have also added two events on the div, mouseover and mouseout. The details of the events will be discussed in the Events chapter. So for now, mouseover calls&nbsp;<strong>changename</strong>&nbsp;method and mouseout calls&nbsp;<strong>originalname</strong>&nbsp;method.</p>\n\n\n\n<p>The display of the same is shown in the following browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/originalname.jpg\" alt=\"OriginalName\"/></figure>\n\n\n\n<p>As seen in the above browser, it displays the name assigned in the data property, which is the same name. We have also assigned a mouseover event on the div and also a mouseout. Let’s see what happens when we mouseover and mouseout.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/mouseover.jpg\" alt=\"Mouseover\"/></figure>\n\n\n\n<p>On mouseover, we see the name of the first component is changed to Ben, however, the second one remains as it is. This is because the data component is a function and it returns an object. Thus, when it is changed in one place, the same is not overwritten in other cases.</p>\n\n\n\n<h2>Dynamic Components</h2>\n\n\n\n<p>Dynamic components are created using the keyword&nbsp;<strong>&lt;component&gt;&lt;/component&gt;</strong>&nbsp;and it is bound using a property as shown in the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;component v-bind:is = \"view\">&lt;/component>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               view: 'component1'\n            },\n            components: {\n               'component1': {\n                  template: '&lt;div>&lt;span style = \"font-size:25;color:red;\">Dynamic Component&lt;/span>&lt;/div>'\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/dynamic_component.jpg\" alt=\"Dynamic Component\"/></figure>\n\n\n\n<p>Dynamic component is created using the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;component v-bind:is = \"view\">&lt;/component></code></pre>\n\n\n\n<p>It has v-bind:is = ”view”, and a value view is assigned to it. View is defined in the Vue instance as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var vm = new Vue({\n   el: '#databinding',\n   data: {\n      view: 'component1'\n   },\n   components: {\n      'component1': {\n         template: '&lt;div>&lt;span style = \"font-size:25;color:red;\">Dynamic Component&lt;/span>&lt;/div>'\n      }\n   }\n});</code></pre>\n\n\n\n<p>When executed, the template&nbsp;<strong>Dynamic Component</strong>&nbsp;is displayed in the browser.</p>\n","protected":false},"excerpt":{"rendered":"<p>Vue Components&nbsp;are one of the important features of VueJS that creates custom elements, which can be reused in HTML. Let’s work with an example and create a component, that will give a better understanding on how components work with VueJS. Example vue_component.js In the .html file, we have created two div with id&nbsp;component_test&nbsp;and&nbsp;component_test1. In the&nbsp;.js&nbsp;files [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4040"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4040"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4040/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4040"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4040"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4040"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4041,"date":"2020-07-21T05:51:14","date_gmt":"2020-07-21T05:51:14","guid":{"rendered":"http://javascript.foobrdigital.com/?p=132"},"modified":"2020-07-21T05:51:14","modified_gmt":"2020-07-21T05:51:14","slug":"computed-properties","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/computed-properties/","title":{"rendered":"Computed Properties"},"content":{"rendered":"\n<p>We have already seen methods for Vue instance and for components. Computed properties are like methods but with some difference in comparison to methods, which we will discuss in this chapter.</p>\n\n\n\n<p>At the end of this chapter, we will be able to make a decision on when to use methods and when to use computed properties.</p>\n\n\n\n<p>Let’s understand computed properties using an example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"computed_props\">\n         FirstName : &lt;input type = \"text\" v-model = \"firstname\" /> &lt;br/>&lt;br/>\n         LastName : &lt;input type = \"text\" v-model = \"lastname\"/> &lt;br/>&lt;br/>\n         &lt;h1>My name is {{firstname}} {{lastname}}&lt;/h1>\n         &lt;h1>Using computed method : {{getfullname}}&lt;/h1>\n      &lt;/div>\n      &lt;script type = \"text/javascript\" src = \"js/vue_computedprops.js\">&lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>vue_computeprops.js</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>var vm = new Vue({\n   el: '#computed_props',\n   data: {\n      firstname :\"\",\n      lastname :\"\",\n      birthyear : \"\"\n   },\n   computed :{\n      getfullname : function(){\n         return this.firstname +\" \"+ this.lastname;\n      }\n   }\n})</code></pre>\n\n\n\n<p>Here, we have created&nbsp;<strong>.html</strong>&nbsp;file with firstname and lastname. Firstname and Lastname is a textbox which are bound using properties firstname and lastname.</p>\n\n\n\n<p>We are calling the computed method getfullname, which returns the firstname and the lastname entered.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>computed :{\n   getfullname : function(){\n      return this.firstname +\" \"+ this.lastname;\n   }\n}</code></pre>\n\n\n\n<p>When we type in the textbox the same is returned by the function, when the properties firstname or lastname is changed. Thus, with the help of computed we don’t have to do anything specific, such as remembering to call a function. With computed it gets called by itself, as the properties used inside changes, i.e. firstname and lastname.</p>\n\n\n\n<p>The same is displayed in the following browser. Type in the textbox and the same will get updated using the computed function.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/text_box.jpg\" alt=\"Text Box\"/></figure>\n\n\n\n<p>Now, let’s try to understand the difference between a method and a computed property. Both are objects. There are functions defined inside, which returns a value.</p>\n\n\n\n<p>In case of method, we call it as a function, and for computed as a property. Using the following example, let us understand the difference between method and computed property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"computed_props\">\n         &lt;h1 style = \"background-color:gray;\">Random No from computed property: {{getrandomno}}&lt;/h1>\n         &lt;h1>Random No from method: {{getrandomno1()}}&lt;/h1>\n         &lt;h1>Random No from method : {{getrandomno1()}}&lt;/h1>\n         &lt;h1  style = \"background-color:gray;\">Random No from computed property: {{getrandomno}}&lt;/h1>\n         &lt;h1  style = \"background-color:gray;\">Random No from computed property: {{getrandomno}}&lt;/h1>\n         &lt;h1  style = \"background-color:gray;\">Random No from computed\n            property: {{getrandomno}}&lt;/h1>\n         &lt;h1>Random No from method: {{getrandomno1()}}&lt;/h1>\n         &lt;h1>Random No from method: {{getrandomno1()}}&lt;/h1>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#computed_props',\n            data: {\n               name : \"helloworld\"\n            },\n            methods: {\n               getrandomno1 : function() {\n                  return Math.random();\n               }\n            },\n            computed :{\n               getrandomno : function(){\n                  return Math.random();\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above code, we have created a method called&nbsp;<strong>getrandomno1</strong>&nbsp;and a computed property with a function&nbsp;<strong>getrandomno</strong>. Both are giving back random numbers using Math.random().</p>\n\n\n\n<p>It is displayed in the browser as shown below. The method and computed property are called many times to show the difference.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/getrandomno.jpg\" alt=\"Getrandomno\"/></figure>\n\n\n\n<p>If we look at the values above, we will see that the random numbers returned from the computed property remains the same irrespective of the number of times it is called. This means everytime it is called, the last value is updated for all. Whereas for a method, it’s a function, hence, everytime it is called it returns a different value.</p>\n\n\n\n<h2>Get/Set in Computed Properties</h2>\n\n\n\n<p>In this section, we will learn about get/set functions in computed properties using an example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"computed_props\">\n         &lt;input type = \"text\" v-model = \"fullname\" />\n         &lt;h1>{{firstName}}&lt;/h1>\n         &lt;h1>{{lastName}}&lt;/h1>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#computed_props',\n            data: {\n               firstName : \"Terry\",\n               lastName : \"Ben\"\n            },\n            methods: {\n            },\n            computed :{\n               fullname : {\n                  get : function() {\n                     return this.firstName+\" \"+this.lastName;\n                  }\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>We have defined one input box which is bound to&nbsp;<strong>fullname</strong>, which is a computed property. It returns a function called&nbsp;<strong>get</strong>, which gives the fullname, i.e. the first name and the lastname. Also, we have displayed the firstname and lastname as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>{{firstName}}&lt;/h1>\n&lt;h1>{{lastName}}&lt;/h1></code></pre>\n\n\n\n<p>Let’s check the same in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/get.jpg\" alt=\"Get\"/></figure>\n\n\n\n<p>Now, if we change the name in the textbox, we will see the same is not reflected in the name displayed in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/name_in_textbox.jpg\" alt=\"Name in TextBox\"/></figure>\n\n\n\n<p>Let’s add the setter function in the fullname computed property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"computed_props\">\n         &lt;input type = \"text\" v-model = \"fullname\" />\n         &lt;h1>{{firstName}}&lt;/h1>\n         &lt;h1>{{lastName}}&lt;/h1>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#computed_props',\n            data: {\n               firstName : \"Terry\",\n               lastName : \"Ben\"\n            },\n            methods: {\n            },\n            computed :{\n               fullname : {\n                  get : function() {\n                     return this.firstName+\" \"+this.lastName;\n                  },\n                  set : function(name) {\n                     var fname = name.split(\" \");\n                     this.firstName = fname&#91;0];\n                     this.lastName = fname&#91;1]\n                  }\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>We have added the set function in the fullname computed property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>computed :{\n   fullname : {\n      get : function() {\n         return this.firstName+\" \"+this.lastName;\n      },\n      set : function(name) {\n         var fname = name.split(\" \");\n         this.firstName = fname&#91;0];\n         this.lastName = fname&#91;1]\n      }\n   }\n}</code></pre>\n\n\n\n<p>It has the name as the parameter, which is nothing but the fullname in the textbox. Later, it is split on space and the firstname and the lastname is updated. Now, when we run the code and edit the textbox, the same thing will be displayed in the browser. The firstname and the lastname will be updated because of the set function. The get function returns the firstname and lastname, while the set function updates it, if anything is edited.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/name_in_text_box.jpg\" alt=\"Name in Text Box\"/></figure>\n\n\n\n<p>Now, whatever is typed in the textbox matches with what is displayed as seen in the above screenshot.</p>\n","protected":false},"excerpt":{"rendered":"<p>We have already seen methods for Vue instance and for components. Computed properties are like methods but with some difference in comparison to methods, which we will discuss in this chapter. At the end of this chapter, we will be able to make a decision on when to use methods and when to use computed [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4041"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4041"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4041/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4041"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4041"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4041"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4042,"date":"2020-07-21T05:52:28","date_gmt":"2020-07-21T05:52:28","guid":{"rendered":"http://javascript.foobrdigital.com/?p=134"},"modified":"2020-07-21T05:52:28","modified_gmt":"2020-07-21T05:52:28","slug":"watch-property","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/watch-property/","title":{"rendered":"Watch Property"},"content":{"rendered":"\n<p>In this chapter, we will learn about the Watch property. Using an example, we will see we can use the Watch property in VueJS.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"computed_props\">\n         Kilometers : &lt;input type = \"text\" v-model = \"kilometers\">\n         Meters : &lt;input type = \"text\" v-model = \"meters\">\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#computed_props',\n            data: {\n               kilometers : 0,\n               meters:0\n            },\n            methods: {\n            },\n            computed :{\n            },\n            watch : {\n               kilometers:function(val) {\n                  this.kilometers = val;\n                  this.meters = val * 1000;\n               },\n               meters : function (val) {\n                  this.kilometers = val/ 1000;\n                  this.meters = val;\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above code, we have created two textboxes, one with&nbsp;<strong>kilometers</strong>&nbsp;and another with&nbsp;<strong>meters</strong>. In data property, the kilometers and meters are initialized to 0. There is a watch object created with two functions&nbsp;<strong>kilometers</strong>&nbsp;and&nbsp;<strong>meters</strong>. In both the functions, the conversion from kilometers to meters and from meters to kilometers is done.</p>\n\n\n\n<p>As we enter values inside any of the texboxes, whichever is changed, Watch takes care of updating both the textboxes. We do not have to specially assign any events and wait for it to change and do the extra work of validating. Watch takes care of updating the textboxes with the calculation done in the respective functions.</p>\n\n\n\n<p>Let’s take a look at the output in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/textbox.jpg\" alt=\"TextBox\"/></figure>\n\n\n\n<p>Let’s enter some values in the kilometers textbox and see it changing in the meters textbox and vice-versa.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/textbox_changes.jpg\" alt=\"TextBox Changes\"/></figure>\n\n\n\n<p>Let’s now enter in meters textbox and see it changing in the kilometers textbox. This is the display seen in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/watch.jpg\" alt=\"Watch\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn about the Watch property. Using an example, we will see we can use the Watch property in VueJS. Example In the above code, we have created two textboxes, one with&nbsp;kilometers&nbsp;and another with&nbsp;meters. In data property, the kilometers and meters are initialized to 0. There is a watch object created [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4042"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4042"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4042/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4042"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4042"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4042"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4043,"date":"2020-07-21T06:00:43","date_gmt":"2020-07-21T06:00:43","guid":{"rendered":"http://javascript.foobrdigital.com/?p=136"},"modified":"2020-07-21T06:00:43","modified_gmt":"2020-07-21T06:00:43","slug":"binding","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/binding/","title":{"rendered":"Binding"},"content":{"rendered":"\n<p>In this chapter will learn how to manipulate or assign values to HTML attributes, change the style, and assign classes with the help of binding directive called&nbsp;<strong>v-bind</strong>&nbsp;available with VueJS.</p>\n\n\n\n<p>Let’s consider an example to understand why we need and when to use v-bind directive for data binding.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         {{title}}&lt;br/>\n         &lt;a href = \"hreflink\" target = \"_blank\"> Click Me &lt;/a> &lt;br/>\n         &lt;a href = \"{{hreflink}}\" target = \"_blank\">Click Me &lt;/a>  &lt;br/>\n         &lt;a v-bind:href = \"hreflink\" target = \"_blank\">Click Me &lt;/a>   &lt;br/>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               title : \"DATA BINDING\",\n               hreflink : \"http://www.google.com\"\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In above example, we have displayed a title variable and three anchor links. We have also assigned a value to the href from the data object.</p>\n\n\n\n<p>Now, if we check the output in the browser and inspect, we will see the first two anchor links do not have the href correctly as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/anchor_tag.jpg\" alt=\"Anchor Tag\"/></figure>\n\n\n\n<p>The first clickme shows the href as hreflink, and the second one shows it in {{hreflink}}, while the last one displays the correct url as we require.</p>\n\n\n\n<p>Hence, to assign values to HTML attributes, we need to bind it with the directive v-bind as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a v-bind:href = \"hreflink\" target = \"_blank\">Click Me &lt;/a></code></pre>\n\n\n\n<p>VueJS also provides a shorthand for v-bind as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a :href = \"hreflink\" target = \"_blank\">Click Me &lt;/a></code></pre>\n\n\n\n<p>If we see the inspect element in the browser, the anchor tag does not show the v-bind attribute, however, it displays the plain HTML. None of the VueJS properties are seen when we inpsect the DOM.</p>\n\n\n\n<h2>Binding HTML Classes</h2>\n\n\n\n<p>To bind HTML class, we need to use&nbsp;<strong>v-bind: class</strong>. Let’s consider an example and bind classes in it.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .active {\n            background: red;\n         }\n      &lt;/style>\n      &lt;div id = \"classbinding\">\n         &lt;div v-bind:class = \"{active:isactive}\">&lt;b>{{title}}&lt;/b>&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#classbinding',\n            data: {\n               title : \"CLASS BINDING\",\n               isactive : true\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>There is a div created with v-bind: class=” {active: isactive}”.</p>\n\n\n\n<p>Here,&nbsp;<strong>isactive</strong>&nbsp;is a variable which is based on true or false. It will apply the class active to the div. In the data object, we have assigned the isactive variable as true. There is a class defined in the style&nbsp;<strong>.active</strong>&nbsp;with the background color as red.</p>\n\n\n\n<p>If the variable isactive is true, the color will be applied otherwise not. Following will be the output in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/class_binding.jpg\" alt=\"Class Binding\"/></figure>\n\n\n\n<p>In above display, we can see the background color is red. The class = ”active” is applied to the div.</p>\n\n\n\n<p>Now, let’s change the value of the variable to false and see the output. The variable isactive is changed to false as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .active {\n            background: red;\n         }\n      &lt;/style>\n      &lt;div id = \"classbinding\">\n         &lt;div v-bind:class = \"{active:isactive}\">&lt;b>{{title}}&lt;/b>&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#classbinding',\n            data: {\n               title : \"CLASS BINDING\",\n               isactive : false\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/id_class_binding.jpg\" alt=\"ID Class Binding\"/></figure>\n\n\n\n<p>In the above display, we can see the active class is not applied to the div.</p>\n\n\n\n<p>We can also assign multiple classes to the HTML tags using v-bind attribute.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .info {\n            color: #00529B;\n            background-color: #BDE5F8;\n         }\n         div {\n            margin: 10px 0;\n            padding: 12px;\n         }\n         .active {\n            color: #4F8A10;\n            background-color: #DFF2BF;\n         }\n         .displayError{\n            color: #D8000C;\n            background-color: #FFBABA;\n         }\n      &lt;/style>\n      &lt;div id = \"classbinding\">\n         &lt;div class = \"info\"  v-bind:class = \"{ active: isActive, 'displayError': hasError }\">\n            {{title}}\n         &lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#classbinding',\n            data: {\n               title : \"This is class binding example\",\n               isActive : false,\n               hasError : false\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>For the div in the above code, we have applied a normal class, example class = ”info”. Based on isActive and hasError variable, the other classes will get applied to the div.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/info.jpg\" alt=\"Info\"/></figure>\n\n\n\n<p>This is a normal class applied. Both the variables are false right now. Let’s make&nbsp;<strong>isActive</strong>&nbsp;variable to true and see the output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/isactive.jpg\" alt=\"isActive\"/></figure>\n\n\n\n<p>In the above display, in the DOM we can see two classes assigned to the div, info and active. Let’s make hasError variable true and isActive as false.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/dom.jpg\" alt=\"Dom\"/></figure>\n\n\n\n<p>Now, when we see in the above display, info and displayError class is applied to the div. This is how we can apply multiple classes based on conditions.</p>\n\n\n\n<p>We can also pass class as an array. Let us take an example to understand this.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .info {\n            color: #00529B;\n            background-color: #BDE5F8;\n         }\n         div {\n            margin: 10px 0;\n            padding: 12px;\n            font-size : 25px;\n         }\n         .active {\n            color: #4F8A10;\n            background-color: #DFF2BF;\n         }\n         .displayError{\n            color: #D8000C;\n            background-color: #FFBABA;\n         }\n      &lt;/style>\n      &lt;div id = \"classbinding\">\n         &lt;div v-bind:class = \"&#91;infoclass, errorclass]\">{{title}}&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#classbinding',\n            data: {\n               title : \"This is class binding example\",\n               infoclass : 'info',\n               errorclass : 'displayError'\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/displayerror.jpg\" alt=\"displayError\"/></figure>\n\n\n\n<p>As we can see above, both classes get applied to the div. Let’s use a variable and based on the value of the variable, assign the class.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .info {\n            color: #00529B;\n            background-color: #BDE5F8;\n         }\n         div {\n            margin: 10px 0;\n            padding: 12px;\n            font-size : 25px;\n         }\n         .active {\n            color: #4F8A10;\n            background-color: #DFF2BF;\n         }\n         .displayError{\n            color: #D8000C;\n            background-color: #FFBABA;\n         }\n      &lt;/style>\n      &lt;div id = \"classbinding\">\n         &lt;div v-bind:class = \"&#91;isActive ? infoclass : '', haserror ? errorclass : '']\">{{title}}&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#classbinding',\n            data: {\n               title : \"This is class binding example\",\n               infoclass : 'info',\n               errorclass : 'displayError',\n               isActive : true,\n               haserror : false\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>We have used two variables <strong>isActive</strong> and <strong>haserror</strong> and the same is used for the div while class binding as shown in the following div tag.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div v-bind:class = \"&#91;isActive ? infoclass : '', haserror ? errorclass : '']\">{{title}}&lt;/div></code></pre>\n\n\n\n<p>If isActive is true, then infoclass will be assigned to it. The same goes for haserror, if it is true, then only errorClass will be applied to it.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/Haserror.jpg\" alt=\"haserror\"/></figure>\n\n\n\n<p>Now, let us make haserror variable as true and isActive variable as false.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/isactive_variable.jpg\" alt=\"isActive variable\"/></figure>\n\n\n\n<p>We will now add v-bind for classes in the components. In the following example, we have added a class to the component template and also to the component.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .info {\n            color: #00529B;\n            background-color: #BDE5F8;\n         }\n         div {\n            margin: 10px 0;\n            padding: 12px;\n            font-size : 25px;\n         }\n         .active {\n            color: #4F8A10;\n            background-color: #DFF2BF;\n         }\n         .displayError{\n            color: #D8000C;\n            background-color: #FFBABA;\n         }\n      &lt;/style>\n      &lt;div id = \"classbinding\">\n         &lt;new_component class = \"active\">&lt;/new_component>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#classbinding',\n            data: {\n               title : \"This is class binding example\",\n               infoclass : 'info',\n               errorclass : 'displayError',\n               isActive : false,\n               haserror : true\n            },\n            components:{\n               'new_component' : {\n                  template : '&lt;div class = \"info\">Class Binding for component&lt;/div>'\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Following is the output in the browser. It applies both the classes to final div.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = ”info active”>&lt;/div></code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/final_div.jpg\" alt=\"Final div\"/></figure>\n\n\n\n<p>Add a variable in the component section to display, based on true/false.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .info {\n            color: #00529B;\n            background-color: #BDE5F8;\n         }\n         div {\n            margin: 10px 0;\n            padding: 12px;\n            font-size : 25px;\n         }\n         .active {\n            color: #4F8A10;\n            background-color: #DFF2BF;\n         }\n         .displayError{\n            color: #D8000C;\n            background-color: #FFBABA;\n         }\n      &lt;/style>\n      &lt;div id = \"classbinding\">\n         &lt;new_component v-bind:class = \"{active:isActive}\">&lt;/new_component>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#classbinding',\n            data: {\n               title : \"This is class binding example\",\n               infoclass : 'info',\n               errorclass : 'displayError',\n               isActive : false,\n               haserror : true\n            },\n            components:{\n               'new_component' : {\n                  template : '&lt;div class = \"info\">Class Binding for component&lt;/div>'\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Since the variable is false, the active class is not applied and the info class is applied as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/class_applied.jpg\" alt=\"Class Applied\"/></figure>\n\n\n\n<h2>Binding Inline Styles</h2>\n\n\n\n<h3>Object Syntax</h3>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;div v-bind:style = \"{ color: activeColor, fontSize: fontSize + 'px' }\">{{title}}&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               title : \"Inline style Binding\",\n               activeColor: 'red',\n               fontSize :'30'\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/inline_style_binding.jpg\" alt=\"Inline Style Binding\"/></figure>\n\n\n\n<p>In the above example, for the div, the style is applied and the data is fetched from the data object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div v-bind:style = \"{ color: activeColor, fontSize: fontSize + 'px' }\">{{title}}&lt;/div>\ndata: {\n   title : \"Inline style Binding\",\n   activeColor: 'red',\n   fontSize :'30'\n}</code></pre>\n\n\n\n<p>We can also do the same thing by assigning all the values to a variable and then assigning the variable to the div.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;div v-bind:style = \"styleobj\">{{title}}&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               title : \"Inline style Binding\",\n               styleobj : {\n                  color: 'red',\n                  fontSize :'40px'\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The color and the fontSize is assigned to the object called styleobj and the same is assigned to the div.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div v-bind:style = \"styleobj\">{{title}}&lt;/div></code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/color_inline_style_binding.jpg\" alt=\"Color Inline Style Binding\"/></figure>\n\n\n\n<h2>Form Input Bindings</h2>\n\n\n\n<p>So far in the example we have created, we have seen v-model binding the input text element and the value binded to a variable assigned. Let’s learn more about it in this section.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;h3>TEXTBOX&lt;/h3>\n         &lt;input  v-model = \"name\" placeholder = \"Enter Name\" />\n         &lt;h3>Name entered is : {{name}}&lt;/h3>\n         &lt;hr/>\n         &lt;h3>Textarea&lt;/h3>\n         &lt;textarea v-model = \"textmessage\" placeholder = \"Add Details\">&lt;/textarea>\n         &lt;h1>&lt;p>{{textmessage}}&lt;/p>&lt;/h1>\n         &lt;hr/>\n         &lt;h3>Checkbox&lt;/h3>\n         &lt;input type = \"checkbox\" id = \"checkbox\" v-model = \"checked\"> {{checked}}\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               name:'',\n               textmessage:'',\n               checked : false\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Whatever we type in the texbox is displayed below. v-model is assigned the value name and the name is displayed in {{name}}, which displays whatever is typed in the textbox.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/form_input_binding.jpg\" alt=\"Form Input Binding\"/></figure>\n\n\n\n<p>Let’s checkout out some more examples and how to use it.</p>\n\n\n\n<h3>Radio and Select</h3>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;h3>Radio&lt;/h3>\n         &lt;input type = \"radio\" id = \"black\" value = \"Black\" v-model = \"picked\">Black\n         &lt;input type = \"radio\" id = \"white\" value = \"White\" v-model = \"picked\">White\n         &lt;h3>Radio element clicked : {{picked}} &lt;/h3>\n         &lt;hr/>\n         &lt;h3>Select&lt;/h3>\n         &lt;select v-model = \"languages\">\n            &lt;option disabled value = \"\">Please select one&lt;/option>\n            &lt;option>Java&lt;/option>\n            &lt;option>Javascript&lt;/option>\n            &lt;option>Php&lt;/option>\n            &lt;option>C&lt;/option>\n            &lt;option>C++&lt;/option>\n         &lt;/select>\n         &lt;h3>Languages Selected is : {{ languages }}&lt;/h3>\n         &lt;hr/>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               picked : 'White',\n               languages : \"Java\"\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/radio_button.jpg\" alt=\"Radio Button\"/></figure>\n\n\n\n<h3>Modifiers</h3>\n\n\n\n<p>We have used three modifiers in the example &#8211; trim, number, and lazy.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;span style = \"font-size:25px;\">Enter Age:&lt;/span> &lt;input v-model.number = \"age\" type = \"number\">\n         &lt;br/>\n         &lt;span style = \"font-size:25px;\">Enter Message:&lt;/span> &lt;input v-model.lazy = \"msg\">\n         &lt;h3>Display Message : {{msg}}&lt;/h3>\n         &lt;br/>\n         &lt;span style = \"font-size:25px;\">Enter Message : &lt;/span>&lt;input v-model.trim = \"message\">\n         &lt;h3>Display Message : {{message}}&lt;/h3>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               age : 0,\n               msg: '',\n               message : ''\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/modifier.jpg\" alt=\"Modifier\"/></figure>\n\n\n\n<p><strong>Number modifier</strong> allows to only enter numbers. It will not take any other input besides numbers.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span style = \"font-size:25px;\">Enter Age:&lt;/span> &lt;input v-model.number = \"age\" type = \"number\"></code></pre>\n\n\n\n<p><strong>Lazy modifier</strong> will display the content present in the textbox once it is fully entered and the user leaves the textbox.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span style = \"font-size:25px;\">Enter Message:&lt;/span> &lt;input v-model.lazy = \"msg\"></code></pre>\n\n\n\n<p><strong>Trim modifier</strong> will remove any spaces entered at the start and at the end.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- wp:preformatted -->\n&lt;pre class=\"wp-block-preformatted\">&amp;lt;span style = \"font-size:25px;\">Enter Message : &amp;lt;/span>&amp;lt;input v-model.trim = \"mes&lt;/pre>\n&lt;!-- /wp:preformatted --></code></pre>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter will learn how to manipulate or assign values to HTML attributes, change the style, and assign classes with the help of binding directive called&nbsp;v-bind&nbsp;available with VueJS. Let’s consider an example to understand why we need and when to use v-bind directive for data binding. Example In above example, we have displayed a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4043"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4043"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4043/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4043"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4043"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4043"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4044,"date":"2020-07-21T06:11:39","date_gmt":"2020-07-21T06:11:39","guid":{"rendered":"http://javascript.foobrdigital.com/?p=138"},"modified":"2020-07-21T06:11:39","modified_gmt":"2020-07-21T06:11:39","slug":"events-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/events-2/","title":{"rendered":"Events"},"content":{"rendered":"\n<p><strong>v-on</strong>&nbsp;is the attribute added to the DOM elements to listen to the events in VueJS.</p>\n\n\n\n<h2>Click Event</h2>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;button v-on:click = \"displaynumbers\">Click ME&lt;/button>\n         &lt;h2> Add Number 100 + 200 = {{total}}&lt;/h2>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               num1: 100,\n               num2 : 200,\n               total : ''\n            },\n            methods : {\n               displaynumbers : function(event) {\n                  console.log(event);\n                  return this.total =  this.num1+ this.num2;\n               }\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/event.jpg\" alt=\"Event\"/></figure>\n\n\n\n<p>The following code is used to assign a click event for the DOM element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button v-on:click = \"displaynumbers\">Click ME&lt;/button></code></pre>\n\n\n\n<p>There is a shorthand for v-on, which means we can also call the event as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button @click = \"displaynumbers\">Click ME&lt;/button></code></pre>\n\n\n\n<p>On the click of the button, it will call the method ‘displaynumbers’, which takes in the event and we have consoled the same in the browser as shown above.</p>\n\n\n\n<p>We will now check one more event mouseover mouseout.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;div v-bind:style = \"styleobj\" v-on:mouseover = \"changebgcolor\" v-on:mouseout = \"originalcolor\">&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               num1: 100,\n               num2 : 200,\n               total : '',\n               styleobj : {\n                  width:\"100px\",\n                  height:\"100px\",\n                  backgroundColor:\"red\"\n               }\n            },\n            methods : {\n               changebgcolor : function() {\n                  this.styleobj.backgroundColor = \"green\";\n               },\n               originalcolor : function() {\n                  this.styleobj.backgroundColor = \"red\";\n               }\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above example, we have created a div with width and height as 100px. It has been given a background color red. On mouseover, we are changing the color to green, and on mouseout we are changing the color back to red.</p>\n\n\n\n<p>Hence, during mouseover, a method is called&nbsp;<strong>changebgcolor</strong>&nbsp;and once we move the mouse out of the div, a method is called&nbsp;<strong>originalcolor</strong>.</p>\n\n\n\n<p>This is done as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div v-bind:style = \"styleobj\" v-on:mouseover = \"changebgcolor\" v-on:mouseout = \"originalcolor\">&lt;/div></code></pre>\n\n\n\n<p>Two events &#8211; mouseover and mouseout &#8211; is assigned to the div as shown above. We have created a styleobj variable and given the required style to be assigned to the div. The same variable is binded to the div using v-bind:style = ”styleobj”</p>\n\n\n\n<p>In changebgcolor, we are changing the color to green using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>changebgcolor : function() {\n   this.styleobj.backgroundColor = \"green\";\n}</code></pre>\n\n\n\n<p>Using the stylobj variable, we are changing the color to green.</p>\n\n\n\n<p>Similarly, the following code is used to change it back to the original color.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>originalcolor : function() {\n   this.styleobj.backgroundColor = \"red\";\n}</code></pre>\n\n\n\n<p>This is what we see in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/color_red.jpg\" alt=\"Color Red\"/></figure>\n\n\n\n<p>When we mouseover, the color will change to green as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/color_green.jpg\" alt=\"Color Green\"/></figure>\n\n\n\n<h2>Event Modifiers</h2>\n\n\n\n<p>Vue has event modifiers available on v-on attribute. Following are the modifiers available −</p>\n\n\n\n<h3>.once</h3>\n\n\n\n<p>Allows the event to execute only once.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-preformatted\">&lt;button v-on:click.once = \"buttonclicked\"&gt;Click Once&lt;/button&gt;\n</pre>\n\n\n\n<p>We need to add dot operator while calling the modifiers as shown in the syntax above. Let us use it in an example and understand the working of the once modifier.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;button v-on:click.once = \"buttonclickedonce\" v-bind:style = \"styleobj\">Click Once&lt;/button>\n         Output:{{clicknum}}\n         &lt;br/>&lt;br/>\n         &lt;button v-on:click = \"buttonclicked\"  v-bind:style = \"styleobj\">Click Me&lt;/button>\n         Output:{{clicknum1}}\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               clicknum : 0,\n               clicknum1 :0,\n               styleobj: {\n                  backgroundColor: '#2196F3!important',\n                  cursor: 'pointer',\n                  padding: '8px 16px',\n                  verticalAlign: 'middle',\n               }\n            },\n            methods : {\n               buttonclickedonce : function() {\n                  this.clicknum++;\n               },\n               buttonclicked : function() {\n                  this.clicknum1++;\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/event_modifier.jpg\" alt=\"Event Modifier\"/></figure>\n\n\n\n<p>In the above example, we have created two butttons. The button with Click Once label has added the once modifier and the other button is without any modifier. This is the way the buttons are defined.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button v-on:click.once = \"buttonclickedonce\" v-bind:style = \"styleobj\">Click Once&lt;/button>\n&lt;button v-on:click = \"buttonclicked\"  v-bind:style = \"styleobj\">Click Me&lt;/button></code></pre>\n\n\n\n<p>The first button calls the method “buttonclickedonce” and the second button calls the method “buttonclicked”.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a href = \"http://www.google.com\" v-on:click.prevent = \"clickme\">Click Me&lt;/a></code></pre>\n\n\n\n<p>There are two variables defined in the clicknum and clicknum1. Both are incremented when the button is clicked. Both the variables are initialized to 0 and the display is seen in the output above.</p>\n\n\n\n<p>On the click of the first button, the variable clicknum increments by 1. On the second click, the number is not incremented as the modifier prevents it from executing or performing any action item assigned on the click of the button.</p>\n\n\n\n<p>On the click of the second button, the same action is carried out, i.e. the variable is incremented. On every click, the value is incremented and displayed.</p>\n\n\n\n<p>Following is the output we get in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/prevent.jpg\" alt=\"Prevent\"/></figure>\n\n\n\n<h3>.prevent</h3>\n\n\n\n<p><strong>Syntax</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a href = \"http://www.google.com\" v-on:click.prevent = \"clickme\">Click Me&lt;/a></code></pre>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;a href = \"http://www.google.com\" v-on:click = \"clickme\" target = \"_blank\" v-bind:style = \"styleobj\">Click Me&lt;/a>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               clicknum : 0,\n               clicknum1 :0,\n               styleobj: {\n                  color: '#4CAF50',\n                  marginLeft: '20px',\n                  fontSize: '30px'\n               }\n            },\n            methods : {\n               clickme : function() {\n                  alert(\"Anchor tag is clicked\");\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/click_me.jpg\" alt=\"Click Me\"/></figure>\n\n\n\n<p>If we click the clickme link, it will send an alert as “Anchor tag is clicked” and it will open the link https://www.google.com in a new tab as shown in the following screenshots.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/tag_clicked.jpg\" alt=\"Tag Clicked\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/tag_opened.jpg\" alt=\"Tag Opened\"/></figure>\n\n\n\n<p>Now this works as a normal way, i.e. the link opens up as we want. In case we don’t want the link to open up, we need to add a modifier ‘prevent’ to the event as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;a href = \"http://www.google.com\" v-on:click.prevent = \"clickme\" target = \"_blank\" v-bind:style = \"styleobj\">Click Me&lt;/a></code></pre>\n\n\n\n<p>Once added, if we click on the button, it will send an alert message and will not open the link anymore. The prevent modifier prevents the link from opening and only executes the method assigned to the tag.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;a href = \"http://www.google.com\" v-on:click.prevent = \"clickme\" target = \"_blank\" v-bind:style = \"styleobj\">Click Me&lt;/a>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               clicknum : 0,\n               clicknum1 :0,\n               styleobj: {\n                  color: '#4CAF50',\n                  marginLeft: '20px',\n                  fontSize: '30px'\n               }\n            },\n            methods : {\n               clickme : function() {\n                  alert(\"Anchor tag is clicked\");\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/message.jpg\" alt=\"Message\"/></figure>\n\n\n\n<p>On the click of the link, it will display the alert message and does not open the url anymore.</p>\n\n\n\n<h2>Event &#8211; Key Modifiers</h2>\n\n\n\n<p>VueJS offers key modifiers based on which we can control the event handling. Consider we have a textbox and we want the method to be called only when we press Enter. We can do so by adding key modifiers to the events as follows.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;input type = \"text\"  v-on:keyup.enter = \"showinputvalue\"/>\n﻿</code></pre>\n\n\n\n<p>The key that we want to apply to our event is&nbsp;<strong>V-on.eventname.keyname</strong>&nbsp;(as shown above)</p>\n\n\n\n<p>We can make use of multiple keynames. For example,&nbsp;<strong>V-on.keyup.ctrl.enter</strong></p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;input type = \"text\" v-on:keyup.enter = \"showinputvalue\" v-bind:style = \"styleobj\" placeholder = \"Enter your name\"/>\n         &lt;h3> {{name}}&lt;/h3>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               name:'',\n               styleobj: {\n                  width: \"30%\",\n                  padding: \"12px 20px\",\n                  margin: \"8px 0\",\n                  boxSizing: \"border-box\"\n               }\n            },\n            methods : {\n               showinputvalue : function(event) {\n                  this.name=event.target.value;\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/multiple_keynames.jpg\" alt=\"Multiple Keynames\"/></figure>\n\n\n\n<p>Type something in the textbox and we will see it is displayed only when we press Enter.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/type_text.jpg\" alt=\"Type Text\"/></figure>\n\n\n\n<h2>Custom Events</h2>\n\n\n\n<p>Parent can pass data to its component using the prop attribute, however, we need to tell the parent when there are changes in the child component. For this, we can use custom events.</p>\n\n\n\n<p>The parent component can listen to the child component event using&nbsp;<strong>v-on</strong>&nbsp;attribute.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;div id = \"counter-event-example\">\n            &lt;p style = \"font-size:25px;\">Language displayed : &lt;b>{{ languageclicked }}&lt;/b>&lt;/p>\n            &lt;button-counter\n            v-for = \"(item, index) in languages\"\n            v-bind:item = \"item\"\n            v-bind:index = \"index\"\n            v-on:showlanguage = \"languagedisp\">&lt;/button-counter>\n         &lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         Vue.component('button-counter', {\n            template: '&lt;button v-on:click = \"displayLanguage(item)\">&lt;span style = \"font-size:25px;\">{{ item }}&lt;/span>&lt;/button>',\n            data: function () {\n               return {\n                  counter: 0\n               }\n            },\n            props:&#91;'item'],\n            methods: {\n               displayLanguage: function (lng) {\n                  console.log(lng);\n                  this.$emit('showlanguage', lng);\n               }\n            },\n         });\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               languageclicked: \"\",\n               languages : &#91;\"Java\", \"PHP\", \"C++\", \"C\", \"Javascript\", \"C#\", \"Python\", \"HTML\"]\n            },\n            methods: {\n               languagedisp: function (a) {\n                  this.languageclicked = a;\n               }\n            }\n         })\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/custom_event.jpg\" alt=\"Custom Event\"/></figure>\n\n\n\n<p>The above code shows the data transfer between the parent component and the child component.</p>\n\n\n\n<p>The component is created using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button-counter\n   v-for = \"(item, index) in languages\"\n   v-bind:item = \"item\"\n   v-bind:index = \"index\"\n   v-on:showlanguage = \"languagedisp\">\n&lt;/button-counter></code></pre>\n\n\n\n<p>There is a <strong>v-for</strong> attribute, which will loop with the languages array. The array has a list of languages in it. We need to send the details to the child component. The values of the array are stored in the item and the index.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>v-bind:item = \"item\"\nv-bind:index = \"index\"</code></pre>\n\n\n\n<p>To refer to the values of the array, we need to bind it first to a variable and the varaiable is referred using props property as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('button-counter', {\n   template: '&lt;button v-on:click = \"displayLanguage(item)\">&lt;span style = \"font-size:25px;\">{{ item }}&lt;/span>&lt;/button>',\n   data: function () {\n      return {\n         counter: 0\n      }\n   },\n   props:&#91;'item'],\n   methods: {\n      displayLanguage: function (lng) {\n         console.log(lng);\n         this.$emit('showlanguage', lng);\n      }\n   },\n});</code></pre>\n\n\n\n<p>The props property contains the item in an array form. We can also refer to the index as −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>props:&#91;‘item’, ‘index’]</code></pre>\n\n\n\n<p>There is also an event added to the component as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button-counter\n   v-for = \"(item, index) in languages\"\n   v-bind:item = \"item\"\n   v-bind:index = \"index\"\n   v-on:showlanguage = \"languagedisp\">\n&lt;/button-counter></code></pre>\n\n\n\n<p>The name of the event is&nbsp;<strong>showlanguage</strong>&nbsp;and it calls a method called&nbsp;<strong>languagedisp</strong>&nbsp;which is defined in the Vue instance.</p>\n\n\n\n<p>In the component, the template is defined as follows −.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>template: '&lt;button v-on:click = \"displayLanguage(item)\">&lt;span style = \"font-size:25px;\">{{ item }}&lt;/span>&lt;/button>',</code></pre>\n\n\n\n<p>There is a button created. The button will get created with as many count in the language array. On the click of the button, there is a method called displayLanguage and the button clicked item is passed as a param to the function. Now the component needs to send the clicked element to the parent component for display which is done as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('button-counter', {\n   template: '&lt;button v-on:click = \"displayLanguage(item)\">&lt;span style = \"font-size:25px;\">{{ item }}&lt;/span>&lt;/button>',\n   data: function () {\n      return {\n         counter: 0\n      }\n   },\n   props:&#91;'item'],\n   methods: {\n      displayLanguage: function (lng) {\n         console.log(lng);\n         this.$emit('showlanguage', lng);\n      }\n   },\n});</code></pre>\n\n\n\n<p>The method&nbsp;<strong>displayLanguage</strong>&nbsp;calls&nbsp;<strong>this.$emit(‘showlanguage’, lng);</strong></p>\n\n\n\n<p><strong>$emit</strong> is used to call the parent component method. The method showlanguage is the event name given on the component with v-on.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;button-counter\n   v-for = \"(item, index) in languages\"\n   v-bind:item = \"item\"\n   v-bind:index = \"index\"\n   v-on:showlanguage = \"languagedisp\">\n&lt;/button-counter></code></pre>\n\n\n\n<p>We are passing a parameter, i.e. the name of the language clicked to the method of the main parent Vue instance which is defined as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p style = \"font-size:25px;\">Language displayed : &lt;b>{{ languageclicked }}&lt;/b>&lt;/p></code></pre>\n\n\n\n<p>Here, the emit triggers showlanguage which in turn calls <strong>languagedisp</strong> from the Vue instance methods. It assigns the language clicked value to the variable <strong>languageclicked</strong> and the same is displayed in the browser as shown in the following screenshot.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p style = \"font-size:25px;\">Language displayed : &lt;b>{{ languageclicked }}&lt;/b>&lt;/p></code></pre>\n\n\n\n<p>Following is the output we get in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/language_displayed.jpg\" alt=\"Language displayed\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>v-on&nbsp;is the attribute added to the DOM elements to listen to the events in VueJS. Click Event Example Output The following code is used to assign a click event for the DOM element. There is a shorthand for v-on, which means we can also call the event as follows − On the click of the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4044"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4044"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4044/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4044"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4044"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4044"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4045,"date":"2020-07-21T06:17:17","date_gmt":"2020-07-21T06:17:17","guid":{"rendered":"http://javascript.foobrdigital.com/?p=140"},"modified":"2020-07-21T06:17:17","modified_gmt":"2020-07-21T06:17:17","slug":"rendering","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/rendering/","title":{"rendered":"Rendering"},"content":{"rendered":"\n<p>In this chapter, we will learn about conditional rendering and list rendering. In conditional rendering, we will discuss about using if, if-else, if-else-if, show, etc. In list rendering, we will discuss how to use for loop.</p>\n\n\n\n<h2>Conditional Rendering</h2>\n\n\n\n<p>Let’s get started and work on a example first to explain the details for conditional rendering. With conditional rendering, we want to output only when the condition is met and the conditional check is done with the help of if, if-else, if-else-if, show, etc.</p>\n\n\n\n<h3>v-if</h3>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;button v-on:click = \"showdata\" v-bind:style = \"styleobj\">Click Me&lt;/button>\n         &lt;span style = \"font-size:25px;\">&lt;b>{{show}}&lt;/b>&lt;/span>\n         &lt;h1 v-if = \"show\">This is h1 tag&lt;/h1>\n         &lt;h2>This is h2 tag&lt;/h2>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               show: true,\n               styleobj: {\n                  backgroundColor: '#2196F3!important',\n                  cursor: 'pointer',\n                  padding: '8px 16px',\n                  verticalAlign: 'middle',\n               }\n            },\n            methods : {\n               showdata : function() {\n                  this.show = !this.show;\n               }\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/v_if.jpg\" alt=\"v-if\"/></figure>\n\n\n\n<p>In the above example, we have created a button and two h1 tags with the message.</p>\n\n\n\n<p>A variable called show is declared and initialized to a value true. It is displayed close to the button. On the click of the button, we are calling a method&nbsp;<strong>showdata</strong>, which toggles the value of the variable show. This means on the click of the button, the value of the variable show will change from true to false and false to true.</p>\n\n\n\n<p>We have assigned if to the h1 tag as shown in the following code snippet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!-- wp:preformatted -->\n&lt;pre class=\"wp-block-preformatted\">&amp;lt;button v-on:click = \"showdata\" v-bind:style = \"styleobj\"&amp;gt;Click Me&amp;lt;/button&amp;gt;\n&amp;lt;h1 v-if = \"show\"&amp;gt;This is h1 tag&amp;lt;/h1&amp;gt;&lt;/pre>\n&lt;!-- /wp:preformatted -->\n\n&lt;!-- wp:paragraph -->\n&lt;p>Now what it will do is, it will check the value of the variable show and if its true the h1 tag will be displayed. Click the button and view in the browser, as the value of the show variable changes to false, the h1 tag is not displayed in the browser. It is displayed only when the show variable is true.&lt;/p>\n&lt;!-- /wp:paragraph --></code></pre>\n\n\n\n<p>Following is the display in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/show_tag.jpg\" alt=\"Show Tag\"/></figure>\n\n\n\n<p>If we check in the browser, this is what we get when show is false.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/show_false.jpg\" alt=\"Show False\"/></figure>\n\n\n\n<p>The h1 tag is removed from the DOM when the variable show is set to false.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/h1_tag_removed.jpg\" alt=\"h1 Tag Removed\"/></figure>\n\n\n\n<p>This is what we see when the variable is true. The h1 tag is added back to the DOM when the variable show is set to true.</p>\n\n\n\n<h3>v-else</h3>\n\n\n\n<p>In the following example, we have added v-else to the second h1 tag.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;button v-on:click = \"showdata\" v-bind:style = \"styleobj\">Click Me&lt;/button>\n         &lt;span style = \"font-size:25px;\">&lt;b>{{show}}&lt;/b>&lt;/span>\n         &lt;h1 v-if = \"show\">This is h1 tag&lt;/h1>\n         &lt;h2 v-else>This is h2 tag&lt;/h2>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               show: true,\n               styleobj: {\n                  backgroundColor: '#2196F3!important',\n                  cursor: 'pointer',\n                  padding: '8px 16px',\n                  verticalAlign: 'middle',\n               }\n            },\n            methods : {\n               showdata : function() {\n                  this.show = !this.show;\n               }\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>v-else is added using the following code snippet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1 v-if = \"show\">This is h1 tag&lt;/h1>\n&lt;h2 v-else>This is h2 tag&lt;/h2></code></pre>\n\n\n\n<p>Now, if show is true&nbsp;<strong>“This is h1 tag”</strong>&nbsp;will be displayed, and if false&nbsp;<strong>“This is h2 tag”</strong>&nbsp;will be displayed. This is what we will get in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/vue_if_true.jpg\" alt=\"Vue-If True\"/></figure>\n\n\n\n<p>The above display is when the show variable is true. Since, we have added v-else, the second statement is not present. Now, when we click the button the show variable will become false and the second statement will be displayed as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/vue_if_false.jpg\" alt=\"Vue-If False\"/></figure>\n\n\n\n<h3>v-show</h3>\n\n\n\n<p>v-show behaves same as v-if. It also shows and hides the elements based on the condition assigned to it. The difference between v-if and v-show is that v-if removes the HTML element from the DOM if the condition is false, and adds it back if the condition is true. Whereas v-show hides the element, if the condition is false with display:none. It shows the element back, if the condition is true. Thus, the element is present in the dom always.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;button v-on:click = \"showdata\" v-bind:style = \"styleobj\">Click Me&lt;/button>\n         &lt;span style = \"font-size:25px;\">&lt;b>{{show}}&lt;/b>&lt;/span>\n         &lt;h1 v-if = \"show\">This is h1 tag&lt;/h1>\n         &lt;h2 v-else>This is h2 tag&lt;/h2>\n         &lt;div v-show = \"show\">\n            &lt;b>V-Show:&lt;/b>\n            &lt;img src = \"images/img.jpg\" width = \"100\" height = \"100\" />\n         &lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               show: true,\n               styleobj: {\n                  backgroundColor: '#2196F3!important',\n                  cursor: 'pointer',\n                  padding: '8px 16px',\n                  verticalAlign: 'middle',\n               }\n            },\n            methods : {\n               showdata : function() {\n                  this.show = !this.show;\n               }\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>v-show is assigned to the HTML element using the following code snippet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div v-show = \"show\">&lt;b>V-Show:&lt;/b>&lt;img src = \"images/img.jpg\" width = \"100\" height = \"100\" />&lt;/div></code></pre>\n\n\n\n<p>We have used the same variable show and based on it being true/false, the image is displayed in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/image_true.jpg\" alt=\"Image True\"/></figure>\n\n\n\n<p>Now, since the variable show is true, the image is as displayed in the above screenshot. Let us click the button and see the display.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/button.jpg\" alt=\"Button\"/></figure>\n\n\n\n<p>The variable show is false, hence the image is hidden. If we inspect and see the element, the div along with the image is still a part of the DOM with the style property display: none as seen in the above screenshot.</p>\n\n\n\n<h2>List Rendering</h2>\n\n\n\n<h3>v-for</h3>\n\n\n\n<p>Let us now discuss list rendering with v-for directive.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;input type = \"text\" v-on:keyup.enter = \"showinputvalue\"\n            v-bind:style = \"styleobj\" placeholder = \"Enter Fruits Names\"/>\n         &lt;h1 v-if = \"items.length>0\">Display Fruits Name&lt;/h1>\n         &lt;ul>\n            &lt;li v-for = \"a in items\">{{a}}&lt;/li>\n         &lt;/ul>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               items:&#91;],\n               styleobj: {\n                  width: \"30%\",\n                  padding: \"12px 20px\",\n                  margin: \"8px 0\",\n                  boxSizing: \"border-box\"\n               }\n            },\n            methods : {\n               showinputvalue : function(event) {\n                  this.items.push(event.target.value);\n               }\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>A variable called items is declared as an array. In methods, there is a method called <strong>showinputvalue</strong>, which is assigned to the input box that takes the names of the fruits. In the method, the fruits entered inside the textbox are added to the array using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>showinputvalue : function(event) {\n   this.items.push(event.target.value);\n}</code></pre>\n\n\n\n<p>We have used v-for to display the fruits entered as in the following piece of code. V-for helps to iterate over the values present in the array.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul>\n   &lt;li v-for = \"a in items\">{{a}}&lt;/li>\n&lt;/ul></code></pre>\n\n\n\n<p>To iterate over the array with for loop, we have to use v-for = ”a in items” where a holds the values in the array and will display till all the items are done.</p>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>Following is the output in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/v_for.jpg\" alt=\"V-for\"/></figure>\n\n\n\n<p>On inspecting the items, this is what it shows in the browser. In the DOM, we don’t see any v-for directive to the li element. It displays the DOM without any VueJS directives.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/v_for_directives.jpg\" alt=\"V-for Directives\"/></figure>\n\n\n\n<p>If we wish to display the index of the array, it is done using the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;input type = \"text\" v-on:keyup.enter = \"showinputvalue\"\n            v-bind:style = \"styleobj\" placeholder = \"Enter Fruits Names\"/>\n         &lt;h1 v-if = \"items.length>0\">Display Fruits Name&lt;/h1>\n         &lt;ul>\n            &lt;li v-for = \"(a, index) in items\">{{index}}--{{a}}&lt;/li>\n         &lt;/ul>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               items:&#91;],\n               styleobj: {\n                  width: \"30%\",\n                  padding: \"12px 20px\",\n                  margin: \"8px 0\",\n                  boxSizing: \"border-box\"\n               }\n            },\n            methods : {\n               showinputvalue : function(event) {\n                  this.items.push(event.target.value);\n               }\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>To get the index, we have added one more variable in the bracket as shown in the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;li v-for = \"(a, index) in items\">{{index}}--{{a}}&lt;/li></code></pre>\n\n\n\n<p>In (a, index),&nbsp;<strong>a</strong>&nbsp;is the value and&nbsp;<strong>index</strong>&nbsp;is the key. The browser display will now be as shown in the following screenshot. Thus, with the help of index any specific values can be displayed.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/index.jpg\" alt=\"Index\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will learn about conditional rendering and list rendering. In conditional rendering, we will discuss about using if, if-else, if-else-if, show, etc. In list rendering, we will discuss how to use for loop. Conditional Rendering Let’s get started and work on a example first to explain the details for conditional rendering. With [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4045"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4045"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4045/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4045"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4045"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4045"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4046,"date":"2020-07-21T06:34:41","date_gmt":"2020-07-21T06:34:41","guid":{"rendered":"http://javascript.foobrdigital.com/?p=142"},"modified":"2020-07-21T06:34:41","modified_gmt":"2020-07-21T06:34:41","slug":"transition-and-animation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/transition-and-animation/","title":{"rendered":"Transition and Animation"},"content":{"rendered":"\n<p>In this chapter, we will discuss the transition and animation features available in VueJS.</p>\n\n\n\n<h2>Transition</h2>\n\n\n\n<p>VueJS provides various ways to apply transition to the HTML elements when they are added/updated in the DOM. VueJS has a built-in transition component that needs to be wrapped around the element, which needs transition.</p>\n\n\n\n<p>Let us consider an example to understand the working of transition.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .fade-enter-active, .fade-leave-active {\n            transition: opacity 2s\n         }\n         .fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\n            opacity: 0\n         }\n      &lt;/style>\n      &lt;div id = \"databinding\">\n         &lt;button v-on:click = \"show = !show\">Click Me&lt;/button>\n         &lt;transition name = \"fade\">\n            &lt;p v-show = \"show\" v-bind:style = \"styleobj\">Animation Example&lt;/p>\n         &lt;/transition>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               show:true,\n               styleobj :{\n                  fontSize:'30px',\n                  color:'red'\n               }\n            },\n            methods : {\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>There is button called clickme created using which we can change the value of the variable show to true to false and vice versa. There is a&nbsp;<strong>p tag</strong>&nbsp;which shows the text element only if the variable is true. We have wrapped the p tag with the transition element as shown in the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;transition name = \"fade\">\n   &lt;p v-show = \"show\" v-bind:style = \"styleobj\">Animation Example&lt;/p>\n&lt;/transition></code></pre>\n\n\n\n<p>The name of the transition is&nbsp;<strong>fade</strong>. VueJS provides some standard classes for transition and the classes are prefixed with the name of the transition.</p>\n\n\n\n<p>Following are some standard classes for transition −</p>\n\n\n\n<ul><li><strong>v-enter</strong>&nbsp;− This class is called initially before the element is updated/added. Its the starting state.</li><li><strong>v-enter-active</strong>&nbsp;− This class is used to define the delay, duration, and easing curve for entering in the transition phase. This is the active state for entire and the class is available during the entire entering phase.</li><li><strong>v-leave</strong>&nbsp;− Added when the leaving transition is triggered, removed.</li><li><strong>v-leave-active</strong>&nbsp;− Applied during the leaving phase. It is removed when the transition is done. This class is used to apply the delay, duration, and easing curve during the leaving phase.</li></ul>\n\n\n\n<p>Each of the above classes will be prefixed with the name of the transition. We have given the name of the transition as fade, hence the name of the classes becomes&nbsp;<strong>.fade_enter, .fade_enter_active, .fade_leave, .fade_leave_active</strong>.</p>\n\n\n\n<p>They are defined in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style>\n   .fade-enter-active, .fade-leave-active {\n      transition: opacity 2s\n   }\n   .fade-enter, .fade-leave-to /* .fade-leave-active below version 2.1.8 */ {\n      opacity: 0\n   }\n&lt;/style></code></pre>\n\n\n\n<p>The .fade_enter_active and .fade_leave_active are defined together and it applies a transition at the start and at the leaving stage. The opacity property is changed to 0 in 2 seconds.</p>\n\n\n\n<p>The duration is defined in the .fade_enter_active and .fade_leave_active. The final stage is defined in the .fade_enter, .fade_leave_to.</p>\n\n\n\n<p>The display in the browser is as follows.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/vue_transition.jpg\" alt=\"Vue Transition\"/></figure>\n\n\n\n<p>On the click of the button, the text will fade away in two seconds.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/fade.jpg\" alt=\"Fade\"/></figure>\n\n\n\n<p>After two seconds, the text will disappear completely.</p>\n\n\n\n<p>Let us consider another example, where there is an image and it is shifted on the x-axis when the button is clicked.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .shiftx-enter-active, .shiftx-leave-active {\n            transition: all 2s ease-in-out;\n         }\n         .shiftx-enter, .shiftx-leave-to /* .fade-leave-active below version 2.1.8 */ {\n            transform :  translateX(100px);\n         }\n      &lt;/style>\n      &lt;div id = \"databinding\">\n         &lt;button v-on:click = \"show = !show\">Click Me&lt;/button>\n         &lt;transition name = \"shiftx\">\n            &lt;p v-show = \"show\">\n               &lt;img src = \"images/img.jpg\" style = \"width:100px;height:100px;\" />\n            &lt;/p>\n         &lt;/transition>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               show:true\n            },\n            methods : {\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>The name of the transition is&nbsp;<strong>shiftx</strong>. A transform property is used to shift the image on the x-axis by 100px using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style>\n   .shiftx-enter-active, .shiftx-leave-active {\n      transition: all 2s ease-in-out;\n   }\n   .shiftx-enter, .shiftx-leave-to /* .fade-leave-active below version 2.1.8 */ {\n      transform :  translateX(100px);\n   }\n&lt;/style></code></pre>\n\n\n\n<p>Following is the output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/shiftx.jpg\" alt=\"Shiftx\"/></figure>\n\n\n\n<p>On the click of the button, the image will shift 100px towards the right as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/image_right.jpg\" alt=\"Image Right\"/></figure>\n\n\n\n<h2>Animation</h2>\n\n\n\n<p>Animations are applied the same way as transition is done. Animation also has classes that needs to be declared for the effect to take place.</p>\n\n\n\n<p>Let us consider an example to see how animation works.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         .shiftx-enter-active {\n            animation: shift-in 2s;\n         }\n         .shiftx-leave-active {\n            animation: shift-in 2s reverse;\n         }\n         @keyframes shift-in {\n            0%   {transform:rotateX(0deg);}\n            25%  {transform:rotateX(90deg);}\n            50%  {transform:rotateX(120deg);}\n            75%  {transform:rotateX(180deg);}\n            100% {transform:rotateX(360deg);}\n         }\n      &lt;/style>\n      &lt;div id = \"databinding\">\n         &lt;button v-on:click = \"show = !show\">Click Me&lt;/button>\n         &lt;transition name = \"shiftx\">\n            &lt;p v-show = \"show\">\n               &lt;img src = \"images/img.jpg\" style = \"width:100px;height:100px;\" />\n            &lt;/p>\n         &lt;/transition>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               show:true\n            },\n            methods : {\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>To apply animation, there are classes same as transition. In the above code, we have an image enclosed in p tag as shown in the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;transition name = \"shiftx\">\n   &lt;p v-show = \"show\">&lt;img src = \"images/img.jpg\" style = \"width:100px;height:100px;\" />&lt;/p>\n&lt;/transition></code></pre>\n\n\n\n<p>The name of the transition is&nbsp;<strong>shiftx</strong>. The class applied is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style>\n   .shiftx-enter-active {\n      animation: shift-in 2s;\n   }\n   .shiftx-leave-active {\n      animation: shift-in 2s reverse;\n   }\n   @keyframes shift-in {\n      0%   {transform:rotateX(0deg);}\n      25%  {transform:rotateX(90deg);}\n      50%  {transform:rotateX(120deg);}\n      75%  {transform:rotateX(180deg);}\n      100% {transform:rotateX(360deg);}\n   }\n&lt;/style></code></pre>\n\n\n\n<p>The class is prefixed with the transition name, i.e. shiftx-enter-active and .shiftx-leave-active. The animation is defined with the keyframes from 0% to 100%. There is a transform defined at each of the keyframes is as shown in the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@keyframes shift-in {\n   0%   {transform:rotateX(0deg);}\n   25%  {transform:rotateX(90deg);}\n   50%  {transform:rotateX(120deg);}\n   75%  {transform:rotateX(180deg);}\n   100% {transform:rotateX(360deg);}\n}</code></pre>\n\n\n\n<p>Following is the output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/animation.jpg\" alt=\"Animation\"/></figure>\n\n\n\n<p>On clicking the button, it rotates from 0 to 360 degree and disappears.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/change_degree.jpg\" alt=\"Change Degree\"/></figure>\n\n\n\n<h2>Custom Transition Classes</h2>\n\n\n\n<p>VueJS provides a list of custom classes, which can be added as attributes to the transition element.</p>\n\n\n\n<ul><li>enter-class</li><li>enter-active-class</li><li>leave-class</li><li>leave-active-class</li></ul>\n\n\n\n<p>Custom classes basically come into play when we want to use an external CSS library such as animate.css.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;link href = \"https://cdn.jsdelivr.net/npm/animate.css@3.5.1\" rel = \"stylesheet\" type = \"text/css\">\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"animate\" style = \"text-align:center\">\n         &lt;button @click = \"show = !show\">&lt;span style = \"font-size:25px;\">Animate&lt;/span>&lt;/button>\n         &lt;transition\n            name = \"custom-classes-transition\"\n            enter-active-class = \"animated swing\"\n            leave-active-class = \"animated bounceIn\">\n            &lt;p v-if = \"show\">&lt;span style = \"font-size:25px;\">Example&lt;/span>&lt;/p>\n         &lt;/transition>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm =  new Vue({\n            el: '#animate',\n            data: {\n               show: true\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/custom_classes_transision.jpg\" alt=\"\"/></figure>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/animated_swing.jpg\" alt=\"Animated Swing\"/></figure>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/animated_bouncein.jpg\" alt=\"Animated BounceIn\"/></figure>\n\n\n\n<p>There are two animations applied in the above code. One enter-active-class = “animated swing” and another leave-active-class = ”animated bounceIn”. We are making the use of custom animation classes for the animation to be applied from the third party library.</p>\n\n\n\n<h2>Explicit Transition Duration</h2>\n\n\n\n<p>We can apply transition and animation on the element using VueJS. Vue waits for the transionend and animationend event to detect if the animation or transition is done.</p>\n\n\n\n<p>Sometimes the transition can cause delay. In such cases, we can apply the duration explicitly as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;transition :duration = \"1000\">&lt;/transition>\n&lt;transition :duration = \"{ enter: 500, leave: 800 }\">...&lt;/transition></code></pre>\n\n\n\n<p>We can use the duration property with a : on the transition element as shown above. In case there is a need to specify the duration separately for entering and leaving, it can be done as shown in the above piece of code.</p>\n\n\n\n<h2>JavaScript Hooks</h2>\n\n\n\n<p>The transition classes can be called as methods using JavaScript events. Let us consider an example for better understanding.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;script src = \"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\">&lt;/script>\n      &lt;div id = \"example-4\">\n         &lt;button @click = \"show = !show\">\n            &lt;span style = \"font-size:25px;\">Toggle&lt;/span>\n         &lt;/button>\n         &lt;transition  v-on:before-enter = \"beforeEnter\"\n            v-on:enter = \"enter\"\n            v-on:leave = \"leave\"\n            v-bind:css = \"false\">\n            &lt;p v-if = \"show\" style = \"font-size:25px;\">Animation Example with velocity&lt;/p>\n         &lt;/transition>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#example-4',\n            data: {\n               show: false\n            },\n            methods: {\n               beforeEnter: function (el) {\n                  el.style.opacity = 0\n               },\n               enter: function (el, done) {\n                  Velocity(el, { opacity: 1, fontSize: '25px' }, { duration: 1000 })\n                  Velocity(el, { fontSize: '10px' }, { complete: done })\n               },\n               leave: function (el, done) {\n                  Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 1500 })\n                  Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n                  Velocity(el, {\n                     rotateZ: '45deg',\n                     translateY: '30px',\n                     translateX: '30px',\n                     opacity: 0\n                  }, { complete: done })\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/javascript_hooks.jpg\" alt=\"JavaScript Hooks\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/jshooks.jpg\" alt=\"JsHooks\"/></figure>\n\n\n\n<p>In the above example, we are performing animation using js methods on the transition element.</p>\n\n\n\n<p>The methods on transition are applied as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;transition  v-on:before-enter = \"beforeEnter\"\n   v-on:enter = \"enter\"\n   v-on:leave = \"leave\"\n   v-bind:css = \"false\">\n   &lt;p v-if = \"show\" style = \"font-size:25px;\">Animation Example with velocity&lt;/p>\n&lt;/transition></code></pre>\n\n\n\n<p>There is a prefix added&nbsp;<strong>v-on</strong>&nbsp;and the name of the event to which the method is called. The methods are defined in the Vue instance as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>methods: {\n   beforeEnter: function (el) {\n      el.style.opacity = 0\n   },\n   enter: function (el, done) {\n      Velocity(el, { opacity: 1, fontSize: '25px' }, { duration: 1000 })\n      Velocity(el, { fontSize: '10px' }, { complete: done })\n   },\n   leave: function (el, done) {\n      Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 1500 })\n      Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n      Velocity(el, {\n         rotateZ: '45deg',\n         translateY: '30px',\n         translateX: '30px',\n         opacity: 0\n      }, { complete: done })\n   }\n}</code></pre>\n\n\n\n<p>The required transition is applied in each of these methods. There is an opacity animation applied on the click of the button and also when the animation is done. Third party library is used for animation.</p>\n\n\n\n<p>There is a property added on transition v-bind:css = &#8220;false&#8221;, which is done so that Vue understands it is a JavaScript transition.</p>\n\n\n\n<h2>Transition at the Initial Render</h2>\n\n\n\n<p>In order to add animation at the start, we need to add ‘appear’ property to the transition element.</p>\n\n\n\n<p>Let’s look at an example to understand it better.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;link href = \"https://cdn.jsdelivr.net/npm/animate.css@3.5.1\" rel = \"stylesheet\" type = \"text/css\">\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"animate\" style = \"text-align:center\">\n         &lt;transition\n            appear\n            appear-class = \"custom-appear-class\"\n            appear-active-class = \"animated bounceIn\">\n            &lt;h1>BounceIn - Animation Example&lt;/h1>\n         &lt;/transition>\n         &lt;transition\n            appear\n            appear-class = \"custom-appear-class\"\n            appear-active-class = \"animated swing\">\n            &lt;h1>Swing - Animation Example&lt;/h1>\n         &lt;/transition>\n         &lt;transition\n            appear\n            appear-class = \"custom-appear-class\"\n            appear-active-class = \"animated rubberBand\">\n            &lt;h1>RubberBand - Animation Example&lt;/h1>\n         &lt;/transition>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm =  new Vue({\n            el: '#animate',\n            data: {\n               show: true\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above example, we have used three different animations from animate.css library. We have added appear to the transition element.</p>\n\n\n\n<p>On execution of the above code, following will be the output in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/different_animation.jpg\" alt=\"Different Animation\"/></figure>\n\n\n\n<h2>Animation on Components</h2>\n\n\n\n<p>We can wrap the transition for the components using the following code. We have used dynamic component here.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n      &lt;link href = \"https://cdn.jsdelivr.net/npm/animate.css@3.5.1\" rel = \"stylesheet\" type = \"text/css\">\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\" style = \"text-align:center;\">\n         &lt;transition  appear\n            appear-class = \"custom-appear-class\"\n            appear-active-class = \"animated wobble\">\n            &lt;component v-bind:is = \"view\">&lt;/component>\n         &lt;/transition>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               view: 'component1'\n            },\n            components: {\n               'component1': {\n                  template: '&lt;div>&lt;span style = \"font-\n                  size:25;color:red;\">Animation on Components&lt;/span>&lt;/div>'\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/animation_on_component.jpg\" alt=\"Animation on Component\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will discuss the transition and animation features available in VueJS. Transition VueJS provides various ways to apply transition to the HTML elements when they are added/updated in the DOM. VueJS has a built-in transition component that needs to be wrapped around the element, which needs transition. Let us consider an example [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4046"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4046"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4046/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4046"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4046"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4046"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4047,"date":"2020-07-21T06:38:03","date_gmt":"2020-07-21T06:38:03","guid":{"rendered":"http://javascript.foobrdigital.com/?p=144"},"modified":"2020-07-21T06:38:03","modified_gmt":"2020-07-21T06:38:03","slug":"directives","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/directives/","title":{"rendered":"Directives"},"content":{"rendered":"\n<p>Directives are instruction for VueJS to do things in a certain way. We have already seen directives such as v-if, v-show, v-else, v-for, v-bind , v-model, v-on, etc.</p>\n\n\n\n<p>In this chapter, we will take a look at custom directives. We will create global directives similar to how we did for components.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.directive('nameofthedirective', {\n   bind(e1, binding, vnode) {\n   }\n})</code></pre>\n\n\n\n<p>We need to create a directive using Vue.directive. It takes the name of the directive as shown above. Let us consider an example to show the details of the working of directives.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;div v-changestyle>VueJS Directive&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         Vue.directive(\"changestyle\",{\n            bind(e1,binding, vnode) {\n               console.log(e1);\n               e1.style.color = \"red\";\n               e1.style.fontSize = \"30px\";\n            }\n         });\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n            },\n            methods : {\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In this example, we have created a custom directive <strong>changestyle</strong> as shown in the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code></code></pre>\n\n\n\n<p>We are assigning the following changestyle to a div.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div v-changestyle>VueJS Directive&lt;/div></code></pre>\n\n\n\n<p>If we see in the browser, it will display the text VueJs Directive in red color and the fontsize is increased to 30px.</p>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/fontsize.jpg\" alt=\"FontSize\"/></figure>\n\n\n\n<p>We have used the bind method, which is a part of the directive. It takes three arguments&nbsp;<strong>e1</strong>, the element to which the custom directive needs to be applied. Binding is like arguments passed to the custom directive, e.g. v-changestyle = ”{color:’green’}”, where green will be read in the binding argument and vnode is the element, i.e. nodename.</p>\n\n\n\n<p>In the next example, we have consoled all the arguments and its shows what details each of them give.</p>\n\n\n\n<p>Following is an example with a value passed to the custom directive.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;div v-changestyle = \"{color:'green'}\">VueJS Directive&lt;/div>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         Vue.directive(\"changestyle\",{\n            bind(e1,binding, vnode) {\n               console.log(e1);\n               console.log(binding.value.color);\n               console.log(vnode);\n               e1.style.color=binding.value.color;\n               e1.style.fontSize = \"30px\";\n            }\n         });\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n            },\n            methods : {\n            },\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h3>Output</h3>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/color_change.jpg\" alt=\"Colour Change\"/></figure>\n\n\n\n<p>The color of the text is changed to green. The value is passed using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div v-changestyle = \"{color:'green'}\">VueJS Directive&lt;/div>\nAnd it is accessed using the following piece of code.\nVue.directive(\"changestyle\",{\n   bind(e1,binding, vnode) {\n      console.log(e1);\n      console.log(binding.value.color);\n      console.log(vnode);\n      e1.style.color=binding.value.color;\n      e1.style.fontSize = \"30px\";\n   }\n});</code></pre>\n\n\n\n<h2>Filters</h2>\n\n\n\n<p>VueJS supports filters that help with text formatting. It is used along with v-bind and interpolations ({{}}). We need a pipe symbol at the end of JavaScript expression for filters.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">\n         &lt;input  v-model = \"name\" placeholder = \"Enter Name\" />&lt;br/>\n         &lt;span style = \"font-size:25px;\">&lt;b>Letter count is : {{name | countletters}}&lt;/b>&lt;/span>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               name : \"\"\n            },\n            filters : {\n               countletters : function(value) {\n                  return value.length;\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above example, we have created a simple filter countletters. Countletters filter counts the numbers of characters entered in the textbox. To make use of filters, we need to use the filter property and define the filter used, by the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>filters : {\n   countletters : function(value) {\n      return value.length;\n   }\n}</code></pre>\n\n\n\n<p>We are defining the method&nbsp;<strong>countletters</strong>&nbsp;and returning the length of the string entered.</p>\n\n\n\n<p>To use filter in the display, we have used the pipe operator and the name of the filter, i.e. <strong>countletters</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span style = \"font-size:25px;\">&lt;b>Letter count is : {{name | countletters}}&lt;/b>&lt;/span></code></pre>\n\n\n\n<p>Following is the display in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/countletter.jpg\" alt=\"CountLetter\"/></figure>\n\n\n\n<p>We can also pass arguments to the filter using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span style = \"font-size:25px;\">&lt;b>Letter count is : {{name | countletters('a1', 'a2')}}&lt;/b>&lt;/span></code></pre>\n\n\n\n<p>Now, the&nbsp;<strong>countletters</strong>&nbsp;will have three params, i.e.&nbsp;<strong>message, a1, and a2</strong>.</p>\n\n\n\n<p>We can also pass multiple filters to the interpolation using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;span style = \"font-size:25px;\">&lt;b>Letter count is : {{name | countlettersA, countlettersB}}&lt;/b>&lt;/span></code></pre>\n\n\n\n<p>In the filter property&nbsp;<strong>countlettersA</strong>&nbsp;and&nbsp;<strong>countlettersB</strong>&nbsp;will be the two methods and the&nbsp;<strong>countlettersA</strong>&nbsp;will pass the details to&nbsp;<strong>countlettersB</strong>.</p>\n","protected":false},"excerpt":{"rendered":"<p>Directives are instruction for VueJS to do things in a certain way. We have already seen directives such as v-if, v-show, v-else, v-for, v-bind , v-model, v-on, etc. In this chapter, we will take a look at custom directives. We will create global directives similar to how we did for components. Syntax We need to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4047"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4047"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4047/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4047"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4047"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4047"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4048,"date":"2020-07-21T06:42:40","date_gmt":"2020-07-21T06:42:40","guid":{"rendered":"http://javascript.foobrdigital.com/?p=146"},"modified":"2020-07-21T06:42:40","modified_gmt":"2020-07-21T06:42:40","slug":"routing","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/routing/","title":{"rendered":"Routing"},"content":{"rendered":"\n<p>VueJS does not have a built-in router feauture. We need to follow some additional steps to install it.</p>\n\n\n\n<h3>Direct Download from CDN</h3>\n\n\n\n<p>The latest version of vue-router is available at https://unpkg.com/vue-router/dist/vue-router.js</p>\n\n\n\n<p>Unpkg.com provides npm-based cdn links. The above link is always updated to the recent version. We can download and host it, and use it with a script tag along with vue.js as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script src = \"/path/to/vue.js\">&lt;/script>\n&lt;script src = \"/path/to/vue-router.js\">&lt;/script></code></pre>\n\n\n\n<h3>Using NPM</h3>\n\n\n\n<p>Run the following command to install the vue-router.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>npm  install vue-router</code></pre>\n\n\n\n<h3>Using GitHub</h3>\n\n\n\n<p>We can clone the repository from GitHub as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>git clone https://github.com/vuejs/vue-router.git node_modules/vue-router\ncd node_modules/vue-router\nnpm install\nnpm run build</code></pre>\n\n\n\n<p>Let us start with a simple example using vue-router.js.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n      &lt;script type = \"text/javascript\" src = \"js/vue-router.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"app\">\n         &lt;h1>Routing Example&lt;/h1>\n         &lt;p>\n            &lt;router-link to = \"/route1\">Router Link 1&lt;/router-link>\n            &lt;router-link to = \"/route2\">Router Link 2&lt;/router-link>\n         &lt;/p>\n         &lt;!-- route outlet -->\n         &lt;!-- component matched by the route will render here -->\n         &lt;router-view>&lt;/router-view>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         const Route1 = { template: '&lt;div style = \"border-radius:20px;background-color:cyan;width:200px;height:50px;margin:10px;font-size:25px;padding:10px;\">This is router 1&lt;/div>' }\n         const Route2 = { template: '&lt;div style = \"border-radius:20px;background-color:green;width:200px;height:50px;margin:10px;font-size:25px;padding:10px;\">This is router 2&lt;/div>' }\n         const routes = &#91;\n            { path: '/route1', component: Route1 },\n            { path: '/route2', component: Route2 }\n         ];\n         const router = new VueRouter({\n            routes // short for `routes: routes`\n         });\n         var vm = new Vue({\n            el: '#app',\n            router\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/route1_link.jpg\" alt=\"Route1 Link\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/route2_link.jpg\" alt=\"Route2 Link\"/></figure>\n\n\n\n<p>To start with routing, we need to add the vue-router.js file. Take the code from https://unpkg.com/vue-router/dist/vue-router.js and save it in the file vue-router.js.</p>\n\n\n\n<p>The script is added after vue.js as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n&lt;script type = \"text/javascript\" src = \"js/vue-router.js\">&lt;/script></code></pre>\n\n\n\n<p>In the body section, there is a router link defined as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>\n   &lt;router-link   to = \"/route1\">Router Link 1&lt;/router-link>\n   &lt;router-link    to = \"/route2\">Router Link 2&lt;/router-link>\n&lt;/p></code></pre>\n\n\n\n<p><strong>&lt;router-link&gt;</strong>&nbsp;is a component used to navigate to the HTML content to be displayed to the user. The to property is the destination, i.e the source file where the contents to be displayed will be picked.</p>\n\n\n\n<p>In the above piece of code, we have created two router links.</p>\n\n\n\n<p>Take a look at the script section where the router is initialized. There are two constants created as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const  Route1 = { template: '&lt;div style = \"border-radius:20px;background-color:cyan;width:200px;height:50px;margin:10px;font-size:25px;padding:10px;\">This is router 1&lt;/div>' };\nconst Route2 = { template: '&lt;div style = \"border-radius:20px;background-color:green;width:200px;height:50px;margin:10px;font-size:25px;padding:10px;\">This is router 2&lt;/div>' }</code></pre>\n\n\n\n<p>They have templates, which needs to be shown when the router link is clicked.</p>\n\n\n\n<p>Next, is the routes const, which defines the path to be displayed in the URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const routes = &#91;\n   { path: '/route1', component: Route1 },\n   { path: '/route2', component: Route2 }\n];</code></pre>\n\n\n\n<p>Routes define the path and the component. The path i.e.&nbsp;<strong>/route1</strong>&nbsp;will be displayed in the URL when the user clicks on the router link.</p>\n\n\n\n<p>Component takes the templates names to be displayed. The path from the routes need to match with the router link to the property.</p>\n\n\n\n<p>For example, &lt;router-link&nbsp;<strong>to = ”path here”</strong>&gt;&lt;/router-link&gt;</p>\n\n\n\n<p>Next, the instance is created to VueRouter using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const router = new VueRouter({\n   routes // short for `routes: routes`\n});</code></pre>\n\n\n\n<p>The VueRouter constructor takes the routes as the param. The router object is assigned to the main vue instance using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var vm = new Vue({\n   el: '#app',\n   router\n});</code></pre>\n\n\n\n<p>Execute the example and see the display in the browser. On inspecting and checking the router link, we will find that it adds class to the active element as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/route_link.jpg\" alt=\"Route Link\"/></figure>\n\n\n\n<p>The class added is&nbsp;<strong>class = “router-link-exact-active router-link-active”</strong>. The active link gets the class as shown in the above screenshot. Another thing to notice is, the &lt;router-link&gt; gets rendered as a tag.</p>\n\n\n\n<h2>Props for Router Link</h2>\n\n\n\n<p>Let us see some more properties to be passed to &lt;router-link&gt;.</p>\n\n\n\n<h3>to</h3>\n\n\n\n<p>This is the destination path given to the &lt;router-link>. When clicked, the value of to will be passed to router.push() internally. The value needs to be a string or a location object. When using an object, we need to bind it as shown in e.g. 2.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>e.g. 1:  &lt;router-link to = \"/route1\">Router Link 1&lt;/router-link>\nrenders as\n&lt;a href = ”#/route”>Router Link &lt;/a>\ne.g. 2:  &lt;router-link v-bind:to = \"{path:'/route1'}\">Router Link 1&lt;/router-link>\ne.g. 3: &lt;router-link v-bind:to =\n   \"{path:'/route1', query: { name: 'Tery' }}\">Router Link 1&lt;/router-link>//router link with query string.</code></pre>\n\n\n\n<p>Following is the output of e.g. 3.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/routing_example.jpg\" alt=\"Routing Example\"/></figure>\n\n\n\n<p>In the URL path, name = Tery is a part of the query string. E.g.: http://localhost/vueexamples/vue_router.html#/route1?name = Tery</p>\n\n\n\n<h3>replace</h3>\n\n\n\n<p>Adding replace to the router link will call the&nbsp;<strong>router.replace()</strong>&nbsp;instead of&nbsp;<strong>router.push()</strong>. With replace, the navigation history is not stored.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;router-link v-bind:to = \"{path:'/route1', query: { name: 'Tery' }}\"   replace>Router Link 1&lt;/router-link></code></pre>\n\n\n\n<h3>append</h3>\n\n\n\n<p>Adding append to the &lt;router-link&gt;&lt;router-link&gt; will make the path relative.</p>\n\n\n\n<p>If we want to go from the router link with path /route1 to router link path /route2, it will show the path in the browser as /route1/route2.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;router-link v-bind:to = \"{ path: '/route1'}\" append>Router Link 1&lt;/router-link></code></pre>\n\n\n\n<h3>tag</h3>\n\n\n\n<p>At present &lt;router-link&gt; renders as a tag. In case, we want to render it as some other tag, we need to specifty the same using tag = ”tagname”;</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>\n   &lt;router-link v-bind:to = \"{ path: '/route1'}\" tag = \"span\">Router Link 1&lt;/router-link>\n   &lt;router-link v-bind:to = \"{ path: '/route2'}\" tag = \"span\">Router Link 2&lt;/router-link>\n&lt;/p></code></pre>\n\n\n\n<p>We have specified the tag as span and this is what is displayed in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/tag.jpg\" alt=\"Tag\"/></figure>\n\n\n\n<p>The tag displayed now is a span tag. We will still see the click going as we click on the router link for navigation.</p>\n\n\n\n<h3>active-class</h3>\n\n\n\n<p>By default, the active class added when the router link is active is router-link-active. We can overwrite the class by setting the same as shown in the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;style>\n   ._active{\n      background-color : red;\n   }\n&lt;/style>\n&lt;p>\n   &lt;router-link v-bind:to = \"{ path: '/route1'}\" active-class = \"_active\">Router Link 1&lt;/router-link>\n   &lt;router-link v-bind:to = \"{ path: '/route2'}\" tag = \"span\">Router Link 2&lt;/router-link>\n&lt;/p></code></pre>\n\n\n\n<p>The class used is active_class = ”_active”. This is the output displayed in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/active_class.jpg\" alt=\"Active Class\"/></figure>\n\n\n\n<h3>exact-active-class</h3>\n\n\n\n<p>The default exactactive class applied is router-link-exact-active. We can overwrite it using exact-active-class.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>\n   &lt;router-link v-bind:to = \"{ path: '/route1'}\" exact-active-class = \"_active\">Router Link 1&lt;/router-link>\n   &lt;router-link v-bind:to = \"{ path: '/route2'}\" tag = \"span\">Router Link 2&lt;/router-link>\n&lt;/p></code></pre>\n\n\n\n<p>This is what is displayed in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/exact_active_class.jpg\" alt=\"Exact Active Class\"/></figure>\n\n\n\n<h3>event</h3>\n\n\n\n<p>At present, the default event for router-link is click event. We can change the same using the event property.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;router-link v-bind:to = \"{ path: '/route1'}\" event = \"mouseover\">Router Link 1&lt;/router-link></code></pre>\n\n\n\n<p>Now, when we mouseover the router link, it will navigate as shown in the following browser. Mouseover on the Router link 1 and we will see the navigation changing.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/default_event.jpg\" alt=\"Default Event\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>VueJS does not have a built-in router feauture. We need to follow some additional steps to install it. Direct Download from CDN The latest version of vue-router is available at https://unpkg.com/vue-router/dist/vue-router.js Unpkg.com provides npm-based cdn links. The above link is always updated to the recent version. We can download and host it, and use it with [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4048"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4048"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4048/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4048"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4048"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4048"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4049,"date":"2020-07-21T06:45:48","date_gmt":"2020-07-21T06:45:48","guid":{"rendered":"http://javascript.foobrdigital.com/?p=148"},"modified":"2020-07-21T06:45:48","modified_gmt":"2020-07-21T06:45:48","slug":"mixins","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/mixins/","title":{"rendered":"Mixins"},"content":{"rendered":"\n<p>Mixins are basically to be used with components. They share reusable code among components. When a component uses mixin, all options of mixin become a part of the component options.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">&lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n            },\n            methods : {\n            },\n         });\n         var myMixin = {\n            created: function () {\n               this.startmixin()\n            },\n            methods: {\n               startmixin: function () {\n                  alert(\"Welcome  to mixin example\");\n               }\n            }\n         };\n         var Component = Vue.extend({\n            mixins: &#91;myMixin]\n         })\n         var component = new Component();\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/mixins.jpg\" alt=\"Mixins\"/></figure>\n\n\n\n<p>When a mixin and a component contain overlapping options, they are merged as shown in the following example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">&lt;/div>\n      &lt;script type = \"text/javascript\">\n         var mixin = {\n            created: function () {\n               console.log('mixin called')\n            }\n         }\n         new Vue({\n            mixins: &#91;mixin],\n            created: function () {\n               console.log('component called')\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Now the mixin and the vue instance has the same method created. This is the output we see in the console. As seen, the option of the vue and the mixin will be merged.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/mixin_overlapping.jpg\" alt=\"Mixin Overlapping\"/></figure>\n\n\n\n<p>If we happen to have the same function name in methods, then the main vue instance will take priority.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"databinding\">&lt;/div>\n      &lt;script type = \"text/javascript\">\n         var mixin = {\n            methods: {\n               hellworld: function () {\n                  console.log('In HelloWorld');\n               },\n               samemethod: function () {\n                  console.log('Mixin:Same Method');\n               }\n            }\n         };\n         var vm = new Vue({\n            mixins: &#91;mixin],\n            methods: {\n               start: function () {\n                  console.log('start method');\n               },\n               samemethod: function () {\n                  console.log('Main: same method');\n               }\n            }\n         });\n         vm.hellworld();\n         vm.start();\n         vm.samemethod();\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>We will see mixin has a method property in which helloworld and samemethod functions are defined. Similarly, vue instance has a methods property in which again two methods are defined start and samemethod.</p>\n\n\n\n<p>Each of the following methods are called.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>vm.hellworld(); // In HelloWorld\nvm.start(); // start method\nvm.samemethod(); // Main: same method</code></pre>\n\n\n\n<p>As seen above, we have called helloworld, start, and samemethod function. samemethod is also present in mixin, however, priority will be given to the main instance, as seen in the following console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/mixin_as_method.jpg\" alt=\"Mixin as Method\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Mixins are basically to be used with components. They share reusable code among components. When a component uses mixin, all options of mixin become a part of the component options. Example Output When a mixin and a component contain overlapping options, they are merged as shown in the following example. Now the mixin and the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4049"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4049"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4049/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4049"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4049"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4049"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4050,"date":"2020-07-21T07:02:52","date_gmt":"2020-07-21T07:02:52","guid":{"rendered":"http://javascript.foobrdigital.com/?p=150"},"modified":"2020-07-21T07:02:52","modified_gmt":"2020-07-21T07:02:52","slug":"render-function","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/render-function/","title":{"rendered":"Render Function"},"content":{"rendered":"\n<p>We have seen components and the usage of it. For example, we have a content that needs to be reused across the project. We can convert the same as a component and use it.</p>\n\n\n\n<p>Let’s take a look at an example of a simple component and see what the render function has to do within it.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"component_test\">\n         &lt;testcomponent>&lt;/testcomponent>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         Vue.component('testcomponent',{\n            template : '&lt;h1>Hello World&lt;/h1>',\n            data: function() {\n            },\n            methods:{\n            }\n         });\n         var vm = new Vue({\n            el: '#component_test'\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Consider the above example of a simple component that prints Hello World as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/render_function.jpg\" alt=\"Render Function\"/></figure>\n\n\n\n<p>Now, if we want to reuse the component, we can do so by just printing it again. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"component_test\">\n   &lt;testcomponent>&lt;/testcomponent>\n   &lt;testcomponent>&lt;/testcomponent>\n   &lt;testcomponent>&lt;/testcomponent>\n   &lt;testcomponent>&lt;/testcomponent>\n&lt;/div></code></pre>\n\n\n\n<p>And the output will be the following.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/component_reuse.jpg\" alt=\"Component Reuse\"/></figure>\n\n\n\n<p>However, now we need some changes to the component. We don’t want the same text to be printed. How can we change it? In case, we type something inside the component, will it be take into consideration?</p>\n\n\n\n<p>Let us consider the following example and see what happens.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"component_test\">\n   &lt;testcomponent>Hello Jai&lt;/testcomponent>\n   &lt;testcomponent>Hello Roy&lt;/testcomponent>\n   &lt;testcomponent>Hello Ria&lt;/testcomponent>\n   &lt;testcomponent>Hello Ben&lt;/testcomponent>\n&lt;/div></code></pre>\n\n\n\n<p>The output remains the same as we had seen earlier. It does not change the text as we want.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/component_reuse.jpg\" alt=\"Component Reuse\"/></figure>\n\n\n\n<p>Component does provide something called as&nbsp;<strong>slots</strong>. Let’s make use of it and see if we get the desired results.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"component_test\">\n         &lt;testcomponent>Hello Jai&lt;/testcomponent>\n         &lt;testcomponent>Hello Roy&lt;/testcomponent>\n         &lt;testcomponent>Hello Ria&lt;/testcomponent>\n         &lt;testcomponent>Hello Ben&lt;/testcomponent>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         Vue.component('testcomponent',{\n            template : '&lt;h1>&lt;slot>&lt;/slot>&lt;/h1>',\n            data: function() {\n            },\n            methods:{\n            }\n         });\n         var vm = new Vue({\n            el: '#component_test'\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>As seen in the above code, in the template we have added slot, hence now it takes the value to send inside the component as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/slot_example.jpg\" alt=\"Slot Example\"/></figure>\n\n\n\n<p>Now, let us consider we want to change the color and size. For example, currently we are using h1 tag and we want to change the HTML tag to p tag or div tag for the same component. How can we have the flexibility to carry out so many changes?</p>\n\n\n\n<p>We can do so with the help of the render function. Render function helps make the component dynamic and use the way it is required by keeping it common and helping pass arguments using the same component.</p>\n\n\n\n<h2>Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"component_test\">\n         &lt;testcomponent :elementtype = \"'div,red,25,div1'\">Hello Jai&lt;/testcomponent>\n         &lt;testcomponent :elementtype = \"'h3,green,25,h3tag'\">Hello Roy&lt;/testcomponent>\n         &lt;testcomponent :elementtype = \"'p,blue,25,ptag'\">Hello Ria&lt;/testcomponent>\n         &lt;testcomponent :elementtype = \"'div,green,25,divtag'\">Hello Ben&lt;/testcomponent>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         Vue.component('testcomponent',{\n            render :function(createElement){\n               var a = this.elementtype.split(\",\");\n               return createElement(a&#91;0],{\n                  attrs:{\n                     id:a&#91;3],\n                     style:\"color:\"+a&#91;1]+\";font-size:\"+a&#91;2]+\";\"\n                  }\n               },\n               this.$slots.default\n               )\n            },\n            props:{\n               elementtype:{\n                  attributes:String,\n                  required:true\n               }\n            }\n         });\n         var vm = new Vue({\n            el: '#component_test'\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above code, we have changed the component and added the render function with props property using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.component('testcomponent',{\n   render :function(createElement){\n      var a = this.elementtype.split(\",\");\n      return createElement(a&#91;0],{\n         attrs:{\n            id:a&#91;3],\n            style:\"color:\"+a&#91;1]+\";font-size:\"+a&#91;2]+\";\"\n         }\n      },\n      this.$slots.default\n      )\n   },\n   props:{\n      elementtype:{\n         attributes:String,\n         required:true\n      }\n   }\n});</code></pre>\n\n\n\n<p>The props look like the following.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>props:{\n   elementtype:{\n      attributes:String,\n      required:true\n   }\n}</code></pre>\n\n\n\n<p>We have defined a property called elementtype, which takes attributes field of type string. Another required field, which mentions that the field is mandatory.</p>\n\n\n\n<p>In the render function, we have used the elementtype property as seen in the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>render :function(createElement){\n   var a = this.elementtype.split(\",\");\n   return createElement(a&#91;0],{\n      attrs:{\n         id:a&#91;3],\n         style:\"color:\"+a&#91;1]+\";font-size:\"+a&#91;2]+\";\"\n      }\n   },\n   this.$slots.default\n   )\n}</code></pre>\n\n\n\n<p>Render function takes createElement as the argument and returns the same. CreateElement creates the DOM element the same way as in JavaScript. We have also split the elementtype on comma, using the values in the attrs field.</p>\n\n\n\n<p>CreateElement is taking the first param as the elementtag to be created. It is passed to the component using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;testcomponent  :elementtype = \"'div,red,25,div1'\">Hello Jai&lt;/testcomponent></code></pre>\n\n\n\n<p>The component needs to take the props field as shown above. It starts with : and the name of the props. Here, we are passing the element tag, color, fontsize, and the id of the element.</p>\n\n\n\n<p>In render function, in createElement, we are splitting on comma, so the first element is the elementtag, which is given to the createElemet as shown in the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>return createElement(\n   a&#91;0],{\n      attrs:{\n         id:a&#91;3],\n         style:\"color:\"+a&#91;1]+\";font-size:\"+a&#91;2]+\";\"\n      }\n   },\n   this.$slots.default\n)</code></pre>\n\n\n\n<p><strong>a[0]</strong>&nbsp;is the html element tag. The next parameter is the attributes for the element tag. They are defined in the attr field in the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>attrs:{\n   id:a&#91;3],\n   style:\"color:\"+a&#91;1]+\";font-size:\"+a&#91;2]+\";\"\n}</code></pre>\n\n\n\n<p>We have defined two attributes for the element tag &#8211;&nbsp;<strong>id</strong>&nbsp;and&nbsp;<strong>style</strong>. To id, we are passing a[3], which is the value we have after splitting on comma. Using style, we have defined color and fontsize.</p>\n\n\n\n<p>Last is the slot, that is the message we have given in the componentin the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;testcomponent :elementtype = \"'div,red,25,div1'\">Hello Jai&lt;/testcomponent></code></pre>\n\n\n\n<p>We have defined the text to be printed in the createElement using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>this.$slots.default</code></pre>\n\n\n\n<p>It takes the default assigned in the component field.</p>\n\n\n\n<p>Following is the output we get in the browser.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/component_field.jpg\" alt=\"Component Field\"/></figure>\n\n\n\n<p>The elements also show the structure. These are the components we have defined −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div id = \"component_test\">\n   &lt;testcomponent :elementtype = \"'div,red,25,div1'\">Hello Jai&lt;/testcomponent>\n   &lt;testcomponent :elementtype = \"'h3,green,25,h3tag'\">Hello Roy&lt;/testcomponent>\n   &lt;testcomponent :elementtype = \"'p,blue,25,ptag'\">Hello Ria&lt;/testcomponent>\n   &lt;testcomponent :elementtype = \"'div,green,25,divtag'\">Hello Ben&lt;/testcomponent>\n&lt;/div></code></pre>\n","protected":false},"excerpt":{"rendered":"<p>We have seen components and the usage of it. For example, we have a content that needs to be reused across the project. We can convert the same as a component and use it. Let’s take a look at an example of a simple component and see what the render function has to do within [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4050"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4050"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4050/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4050"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4050"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4050"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4052,"date":"2020-07-21T11:10:07","date_gmt":"2020-07-21T11:10:07","guid":{"rendered":"http://javascript.foobrdigital.com/?p=154"},"modified":"2020-07-21T11:10:07","modified_gmt":"2020-07-21T11:10:07","slug":"reactive-interface","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/reactive-interface/","title":{"rendered":"Reactive Interface"},"content":{"rendered":"\n<p>VueJS provides options to add reactivity to properties, which are added dynamically. Consider that we have already created vue instance and need to add the watch property. It can be done as follows −</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"app\">\n         &lt;p style = \"font-size:25px;\">Counter: {{ counter }}&lt;/p>\n         &lt;button @click = \"counter++\" style = \"font-size:25px;\">Click Me&lt;/button>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#app',\n            data: {\n               counter: 1\n            }\n         });\n         vm.$watch('counter', function(nval, oval) {\n            alert('Counter is incremented :' + oval + ' to ' + nval + '!');\n         });\n         setTimeout(\n            function(){\n               vm.counter = 20;\n            },2000\n         );\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>There is a property counter defined as 1 in data object. The counter is incremented when we click the button.</p>\n\n\n\n<p>Vue instance is already created. To add watch to it, we need to do it as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>vm.$watch('counter', function(nval, oval) {\n   alert('Counter is incremented :' + oval + ' to ' + nval + '!');\n});</code></pre>\n\n\n\n<p>We need to use $watch to add watch outside the vue instance. There is an alert added, which shows the value change for the counter property. There is also a timer function added, i.e. setTimeout, which sets the counter value to 20.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>setTimeout(\n   function(){\n      vm.counter = 20;\n   },2000\n);</code></pre>\n\n\n\n<p>Whenever the counter is changed, the alert from the watch method will get fired as shown in the following screenshot.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/counter.jpg\" alt=\"Counter\"/></figure>\n\n\n\n<p>VueJS cannot detect property addition and deletion. The best way is to always declare the properties, which needs to be reactive upfront in the Vue instance. In case we need to add properties at run time, we can make use of Vue global, Vue.set, and Vue.delete methods.</p>\n\n\n\n<h2>Vue.set</h2>\n\n\n\n<p>This method helps to set a property on an object. It is used to get around the limitation that Vue cannot detect property additions.</p>\n\n\n\n<h3>Syntax</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.set( target, key, value )\n</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<p>target: Can be an object or an array</p>\n\n\n\n<p>key : Can be a string or number</p>\n\n\n\n<p>value: Can be any type</p>\n\n\n\n<p>Let’s take a look at an example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"app\">\n         &lt;p style = \"font-size:25px;\">Counter: {{ products.id }}&lt;/p>\n         &lt;button @click = \"products.id++\" style = \"font-size:25px;\">Click Me&lt;/button>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var myproduct = {\"id\":1, name:\"book\", \"price\":\"20.00\"};\n         var vm = new Vue({\n            el: '#app',\n            data: {\n               counter: 1,\n               products: myproduct\n            }\n         });\n         vm.products.qty = \"1\";\n         console.log(vm);\n         vm.$watch('counter', function(nval, oval) {\n            alert('Counter is incremented :' + oval + ' to ' + nval + '!');\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above example, there is a variable myproduct created at the start using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var myproduct = {\"id\":1, name:\"book\", \"price\":\"20.00\"};</code></pre>\n\n\n\n<p>It is given to the data object in Vue instance as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var vm = new Vue({\n   el: '#app',\n   data: {\n      counter: 1,\n      products: myproduct\n   }\n});</code></pre>\n\n\n\n<p>Consider, we want to add one more property to the myproduct array, after the Vue instance is created. It can be done as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>vm.products.qty = \"1\";</code></pre>\n\n\n\n<p>Let’s see the output in the console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/myproduct_array.jpg\" alt=\"MyProduct Array\"/></figure>\n\n\n\n<p>As seen above, in products the quantity is added. The get/set methods, which basically adds reactivity is available for the id, name, and price, and not available for qty.</p>\n\n\n\n<p>We cannot achieve the reactivity by just adding vue object. VueJS mostly wants all its properties to be created at the start. However, in case we need to add it later, we can use Vue.set. For this, we need to set it using vue global, i.e. Vue.set.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"app\">\n         &lt;p style = \"font-size:25px;\">Counter: {{ products.id }}&lt;/p>\n         &lt;button @click = \"products.id++\" style = \"font-size:25px;\">Click Me&lt;/button>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var myproduct = {\"id\":1, name:\"book\", \"price\":\"20.00\"};\n         var vm = new Vue({\n            el: '#app',\n            data: {\n               counter: 1,\n               products: myproduct\n            }\n         });\n         Vue.set(myproduct, 'qty', 1);\n         console.log(vm);\n         vm.$watch('counter', function(nval, oval) {\n            alert('Counter is incremented :' + oval + ' to ' + nval + '!');\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>We have used Vue.set to add the qty to the array using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.set(myproduct, 'qty', 1);</code></pre>\n\n\n\n<p>We have consoled the vue object and following is the output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/products.jpg\" alt=\"Products\"/></figure>\n\n\n\n<p>Now, we can see the get/set for qty added using Vue.set.</p>\n\n\n\n<h2>Vue.delete</h2>\n\n\n\n<p>This function is used to delete the property dynamically.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.delete( target, key )</code></pre>\n\n\n\n<p>Where,</p>\n\n\n\n<p>target: Can be an object or an array</p>\n\n\n\n<p>key: Can be a string or a number</p>\n\n\n\n<p>To delete any property, we can use Vue.delete as in the following code.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;div id = \"app\">\n         &lt;p style = \"font-size:25px;\">Counter: {{ products.id }}&lt;/p>\n         &lt;button @click = \"products.id++\" style = \"font-size:25px;\">Click Me&lt;/button>\n      &lt;/div>\n      &lt;script type = \"text/javascript\">\n         var myproduct = {\"id\":1, name:\"book\", \"price\":\"20.00\"};\n         var vm = new Vue({\n            el: '#app',\n            data: {\n               counter: 1,\n               products: myproduct\n            }\n         });\n         Vue.delete(myproduct, 'price');\n         console.log(vm);\n         vm.$watch('counter', function(nval, oval) {\n            alert('Counter is incremented :' + oval + ' to ' + nval + '!');\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>In the above example, we have used Vue.delete to delete the price from the array using the following piece of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vue.delete(myproduct, 'price');</code></pre>\n\n\n\n<p>Following is the output, we see in the console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/delete.jpg\" alt=\"Delete\"/></figure>\n\n\n\n<p>After deletion, we can see only the id and name as the price is deleted. We can also notice that the get/set methods are deleted.</p>\n","protected":false},"excerpt":{"rendered":"<p>VueJS provides options to add reactivity to properties, which are added dynamically. Consider that we have already created vue instance and need to add the watch property. It can be done as follows − Example There is a property counter defined as 1 in data object. The counter is incremented when we click the button. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4052"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4052"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4052/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4052"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4052"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4052"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":4051,"date":"2020-07-21T11:11:01","date_gmt":"2020-07-21T11:11:01","guid":{"rendered":"http://javascript.foobrdigital.com/?p=153"},"modified":"2020-07-21T11:11:01","modified_gmt":"2020-07-21T11:11:01","slug":"examples-2","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/examples-2/","title":{"rendered":"Examples"},"content":{"rendered":"\n<h2>Example 1: Currency Converter</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         #databinding{\n            padding: 20px 15px 15px 15px;\n            margin: 0 0 25px 0;\n            width: auto;\n            background-color: #e7e7e7;\n         }\n         span, option, input {\n            font-size:25px;\n         }\n      &lt;/style>\n      \n      &lt;div id = \"databinding\" style = \"\">\n         &lt;h1>Currency Converter&lt;/h1>\n         &lt;span>Enter Amount:&lt;/span>&lt;input type = \"number\" v-model.number = \"amount\" placeholder = \"Enter Amount\" />&lt;br/>&lt;br/>\n         &lt;span>Convert From:&lt;/span>\n         &lt;select v-model = \"convertfrom\" style = \"width:300px;font-size:25px;\">\n            &lt;option v-for = \"(a, index) in currencyfrom\"  v-bind:value = \"a.name\">{{a.desc}}&lt;/option>\n         &lt;/select>\n         &lt;span>Convert To:&lt;/span>\n         &lt;select v-model = \"convertto\" style = \"width:300px;font-size:25px;\">\n            &lt;option v-for = \"(a, index) in currencyfrom\" v-bind:value = \"a.name\">{{a.desc}}&lt;/option>\n         &lt;/select>&lt;br/>&lt;br/>\n         &lt;span> {{amount}} {{convertfrom}} equals {{finalamount}} {{convertto}}&lt;/span>\n      &lt;/div>\n      \n      &lt;script type = \"text/javascript\">\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               name:'',\n               currencyfrom : &#91;\n                  {name : \"USD\", desc:\"US Dollar\"},\n                  {name:\"EUR\", desc:\"Euro\"},\n                  {name:\"INR\", desc:\"Indian Rupee\"},\n                  {name:\"BHD\", desc:\"Bahraini Dinar\"}\n               ],\n               convertfrom: \"INR\",\n               convertto:\"USD\",\n               amount :\"\"\n            },\n            computed :{\n               finalamount:function() {\n                  var to = this.convertto;\n                  var from = this.convertfrom;\n                  var final;\n                  switch(from) {\n                     case \"INR\":\n                     if (to == \"USD\") {\n                        final = this.amount * 0.016;\n                     }\n                     if (to == \"EUR\") {\n                        final = this.amount * 0.013;\n                     }\n                     if (to == \"INR\") {\n                        final = this.amount;\n                     }\n                     if (to == \"BHD\") {\n                        final = this.amount * 0.0059;\n                     }\n                     break;\n                     case \"USD\":\n                     if (to == \"INR\") {\n                        final = this.amount * 63.88;\n                     }\n                     if (to == \"EUR\") {\n                        final = this.amount * 0.84;\n                     }\n                     if (to == \"USD\") {\n                        final = this.amount;\n                     }\n                     if (to == \"BHD\") {\n                        final = this.amount * 0.38;\n                     }\n                     break;\n                     case \"EUR\":\n                     if (to == \"INR\") {\n                        final = this.amount * 76.22;\n                     }\n                     if (to == \"USD\") {\n                        final = this.amount * 1.19;\n                     }\n                     if (to == \"EUR\") {\n                        final = this.amount;\n                     }\n                     if (to == \"BHD\") {\n                        final = this.amount * 0.45;\n                     }\n                     break;\n                     case \"BHD\":\n                     if (to == \"INR\") {\n                        final = this.amount *169.44;\n                     }\n                     if (to == \"USD\") {\n                        final = this.amount * 2.65;\n                     }\n                     if (to == \"EUR\") {\n                        final = this.amount * 2.22;\n                     }\n                     if (to == \"BHD\") {\n                        final = this.amount;\n                     }\n                     break\n                  }\n                  return final;\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h2>Output (Conversion to USD)</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/conversion_to_usd.jpg\" alt=\"Conversion to USD\"/></figure>\n\n\n\n<h2>Output: Conversion to BHD</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/conversion_to_bhd.jpg\" alt=\"Conversion to BHD\"/></figure>\n\n\n\n<p><strong>Explanation</strong>&nbsp;− In the above example, we have created a currency converter that converts one value of currency to the selected value of other currency. We have created two dropdowns of currency. When we enter the amount to convert in the textbox, the same is displayed below after conversion. We are using the computed property to do the necessary calculation for currency conversion.</p>\n\n\n\n<h2>Example 2: Customer Details</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   &lt;head>\n      &lt;title>VueJs Instance&lt;/title>\n      &lt;script type = \"text/javascript\" src = \"js/vue.js\">&lt;/script>\n   &lt;/head>\n   &lt;body>\n      &lt;style>\n         #databinding{\n            padding: 20px 15px 15px 15px;\n            margin: 0 0 25px 0;\n            width: auto;\n         }\n         span, option, input {\n            font-size:20px;\n         }\n         .Table{\n            display: table;\n            width:80%;\n         }\n         .Title{\n            display: table-caption;\n            text-align: center;\n            font-weight: bold;\n            font-size: larger;\n         }\n         .Heading{\n            display: table-row;\n            font-weight: bold;\n            text-align: center;\n         }\n         .Row{\n            display: table-row;\n         }\n         .Cell{\n            display: table-cell;\n            border: solid;\n            border-width: thin;\n            padding-left: 5px;\n            padding-right: 5px;\n            width:30%;\n         }\n      &lt;/style>\n      \n      &lt;div id = \"databinding\" style = \"\">\n         &lt;h1>Customer Details&lt;/h1>\n         &lt;span>First Name&lt;/span>\n         &lt;input type = \"text\" placeholder = \"Enter First Name\" v-model = \"fname\"/>\n         &lt;span>Last Name&lt;/span>\n         &lt;input type = \"text\" placeholder = \"Enter Last Name\" v-model = \"lname\"/>\n         &lt;span>Address&lt;/span>\n         &lt;input type = \"text\" placeholder = \"Enter Address\" v-model = \"addr\"/>\n         &lt;button v-on:click = \"showdata\" v-bind:style = \"styleobj\">Add&lt;/button>\n         &lt;br/>\n         &lt;br/>\n         &lt;customercomponent\n            v-for = \"(item, index) in custdet\"\n            v-bind:item = \"item\"\n            v-bind:index = \"index\"\n            v-bind:itr = \"item\"\n            v-bind:key = \"item.fname\"\n            v-on:removeelement = \"custdet.splice(index, 1)\">\n         &lt;/customercomponent>\n      &lt;/div>\n      \n      &lt;script type = \"text/javascript\">\n         Vue.component('customercomponent',{\n            template : '&lt;div class = \"Table\">&lt;div class = \"Row\"  v-bind:style = \"styleobj\">&lt;div class = \"Cell\">&lt;p>{{itr.fname}}&lt;/p>&lt;/div>&lt;div class = \"Cell\">&lt;p>{{itr.lname}}&lt;/p>&lt;/div>&lt;div class = \"Cell\">&lt;p>{{itr.addr}}&lt;/p>&lt;/div>&lt;div class = \"Cell\">&lt;p>&lt;button v-on:click = \"$emit(\\'removeelement\\')\">X&lt;/button>&lt;/p>&lt;/div>&lt;/div>&lt;/div>',\n            props: &#91;'itr', 'index'],\n            data: function() {\n               return {\n                  styleobj : {\n                     backgroundColor:this.getcolor(),\n                     fontSize : 20\n                  }\n               }\n            },\n            methods:{\n               getcolor : function() {\n                  if (this.index % 2) {\n                     return \"#FFE633\";\n                  } else {\n                     return \"#D4CA87\";\n                  }\n               }\n            }\n         });\n         var vm = new Vue({\n            el: '#databinding',\n            data: {\n               fname:'',\n               lname:'',\n               addr : '',\n               custdet:&#91;],\n               styleobj: {\n                  backgroundColor: '#2196F3!important',\n                  cursor: 'pointer',\n                  padding: '8px 16px',\n                  verticalAlign: 'middle',\n               }\n            },\n            methods :{\n               showdata : function() {\n                  this.custdet.push({\n                     fname: this.fname,\n                     lname: this.lname,\n                     addr : this.addr\n                  });\n                  this.fname = \"\";\n                  this.lname = \"\";\n                  this.addr = \"\";\n               }\n            }\n         });\n      &lt;/script>\n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<h2>Output</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/output.jpg\" alt=\"Output\"/></figure>\n\n\n\n<h2>Output after deletion</h2>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/vuejs/images/output_after_deletion.jpg\" alt=\"Output after Deletion\"/></figure>\n\n\n\n<p><strong>Explanation</strong>&nbsp;− In the above example, we have three texboxes to enter &#8211; the First Name, Last Name and Address. There is an add button, which adds the values entered in the textboxes in a table format with a delete button.</p>\n\n\n\n<p>The table format is created using components. The click button interacts with the parent component using the emit event to delete the elemet from the array. The values entered are stored in the array and the same are shared with the child component using the&nbsp;<strong>prop</strong>&nbsp;property.</p>\n","protected":false},"excerpt":{"rendered":"<p>Example 1: Currency Converter Output (Conversion to USD) Output: Conversion to BHD Explanation&nbsp;− In the above example, we have created a currency converter that converts one value of currency to the selected value of other currency. We have created two dropdowns of currency. When we enter the amount to convert in the textbox, the same [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4051"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=4051"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/4051/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=4051"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=4051"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=4051"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2710,"date":"2020-10-13T11:17:08","date_gmt":"2020-10-13T11:17:08","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2710"},"modified":"2020-10-13T11:17:08","modified_gmt":"2020-10-13T11:17:08","slug":"vue-js-with-graphql-apollo-client-tutorial","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/vue-js-with-graphql-apollo-client-tutorial/","title":{"rendered":"Vue.js with GraphQL &#038; Apollo Client Tutorial"},"content":{"rendered":"\n<ul><li></li></ul>\n\n\n\n<p>Throughout this tutorial, we’ll be learning how to use Vue.js with Apollo client to create a CRUD interface for consuming an API built with Node.js, Express, and GraphQL.</p>\n\n\n\n<p>Vue is a modern progressive UI library for building user interfaces similar to React, the library which has been traditionally used with GraphQL since both technologies originated from Facebook.</p>\n\n\n\n<p>Most tutorials on the web make use of React with its ecosystem for consuming a GraphQL API, so let&#8217;s see how to use Vue instead.</p>\n\n\n\n<p>We&#8217;ll be using the Apollo client for actually interacting with GraphQL instead of traditional clients like Axios.</p>\n\n\n\n<p>Apollo is a complete platform for implementing GraphQL servers and clients and other advanced features required by production apps like caching and state management. Using Apollo, you can easily transfer data between the server and UI of your app built with your favorite libraries such as React or Vue. In this tutorial, we&#8217;ll make use of the Apollo client without the server since we have already created our server using Express.</p>\n\n\n\n<p><a href=\"https://www.apollographql.com/\">Apollo</a>&nbsp;is comprised of many tools to make it easy to work with GraphQL in your apps.</p>\n\n\n\n<p>We&#8217;ll see in this tutorial how we can use the&nbsp;<a href=\"https://www.apollographql.com/client\">client</a>&nbsp;and leave the<a href=\"https://www.apollographql.com/server\">server</a>&nbsp;for another tutorial.</p>\n\n\n\n<p>Apollo is created by the&nbsp;<a href=\"https://www.meteor.io/\">Meteor Development Group</a>.</p>\n\n\n\n<p>We&#8217;ll be consuming a GraphQL API for managing a database of employees available from this&nbsp;<a href=\"https://repl.it/@techiediaries/Node-GraphQL-Example\">online IDE</a>.</p>\n\n\n\n<p>Let&#8217;s get started with the prerequisites!</p>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<p>In order to successfully complete this tutorial, you will need to have a few prerequisites:</p>\n\n\n\n<ul><li>You need to have Node.js and NPM installed on your system either for running the GraphQL server locally or also for Vue CLI. You can simply go to the&nbsp;<a href=\"https://nodejs.org/en/download/\">official website</a>&nbsp;and download the binary for your system.</li><li>Familiarity with modern JavaScript and a working knowledge of Vue are a must.</li></ul>\n\n\n\n<p>For the GraphQL server, you can either follow this tutorial to build your app locally or use the same&nbsp;<a href=\"https://repl.it/@techiediaries/Node-GraphQL-Example\">example from this online IDE</a>.</p>\n\n\n\n<p>Now, let&#8217;s get started!</p>\n\n\n\n<h2>Enabling CORS in GraphQL Server</h2>\n\n\n\n<p>If you are developing locally using two different ports, you need to enable CORS in your GraphQL server.</p>\n\n\n\n<p>First, install the cors module from npm using the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd node-express-graphql-api\n$ npm install cors --save\n</code></pre>\n\n\n\n<p>Next, import the&nbsp;<code>cors</code>&nbsp;module in the&nbsp;<code>index.js</code>&nbsp;file as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const cors = require('cors');\n</code></pre>\n\n\n\n<p>Next, add the&nbsp;<code>cors</code>&nbsp;middleware to the Express.js server as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>const app = express();\napp.use(cors())\n</code></pre>\n\n\n\n<p>You can now start your GraphQL server and send requests from your frontend app:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node index.js\n</code></pre>\n\n\n\n<p>Your GraphQL server will be listening from&nbsp;<code>http://localhost:4000/</code>.</p>\n\n\n\n<h2>Installing the Vue command-line interface</h2>\n\n\n\n<p>Vue CLI is the official tool for initializing and working with Vue.js projects. It&#8217;s based on Node.js and can be installed from npm using the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g @vue/cli\n</code></pre>\n\n\n\n<p>At the time of this writing this Vue and Graphql tutorial, you&#8217;ll have&nbsp;<strong>vue/cli v3.8.2</strong>&nbsp;installed on your development machine.</p>\n\n\n\n<p>That&#8217;s it. We are now ready to build our Vue.js app.</p>\n\n\n\n<h2>Initializing a Vue.js project</h2>\n\n\n\n<p>You can quickly initialize a new Vue.js project using the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ vue create vue-apollo-demo\n</code></pre>\n\n\n\n<p>Select the&nbsp;<strong>default</strong>&nbsp;preset when prompted.</p>\n\n\n\n<p>When your project is generated, navigate to the root folder and start the local development server:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd vue-apollo-demo\n$ npm run serve\n</code></pre>\n\n\n\n<p>Your Vue.js application will be available from the&nbsp;<code>http://localhost:8080/</code>&nbsp;address.</p>\n\n\n\n<p>This is a screenshot of our app at this point of our tutorial:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.techiediaries.com/ezoimgfmt/paper-attachments.dropbox.com/s_3F8A0901FF4D17465CD679CB9A934803C4370F406712E489DB7D6B0C6C97B28B_1558921368584_11225950_509311348_38437953.png?ezimgfmt=rs:710x566/rscb2/ng:webp/ngcb2\" alt=\"Vue.js &amp; GraphQL Example\"/></figure>\n\n\n\n<h2>Installing Apollo client</h2>\n\n\n\n<p>Our GraphQL server is built with Node.js and Express without using the Apollo server but we can use the Apollo client instead of Axios to consume our GraphQL API from our Vue.js interface.</p>\n\n\n\n<p>Let&#8217;s start by installing the Apollo client in our Vue.js project. Open a new command-line interface, navigate to your project and run the following command to install the client from npm:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install --save vue-apollo graphql apollo-boost\n</code></pre>\n\n\n\n<p>We also installed&nbsp;<code>graphql</code>&nbsp;and&nbsp;<code>apollo-boost</code>.</p>\n\n\n\n<p>vue-apollo is a library that integrates apollo with Vue.</p>\n\n\n\n<p>According to the official repository</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Apollo Boost is a zero-config way to start using Apollo Client. It includes some sensible defaults, such as our recommended&nbsp;<code>InMemoryCache</code>&nbsp;and&nbsp;<code>HttpLink</code>, which come configured for you with our recommended settings.</p></blockquote>\n\n\n\n<h2>Linking the Apollo client with the GraphQL server</h2>\n\n\n\n<p>Open the&nbsp;<code>src/main.js</code>&nbsp;file of your Vue application and let&#8217;s start by initializing the Apollo client and linking it with our GraphQL server running at&nbsp;<code>https://repl.it/@techiediaries/Node-GraphQL-Example/graphql</code>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import ApolloClient from \"apollo-boost\"\nimport VueApollo from \"vue-apollo\"\n\nconst apolloClient = new ApolloClient({\n    uri: \"https://repl.it/@techiediaries/Node-GraphQL-Example/graphql\"\n})\n\nVue.use(VueApollo)\n\nconst apolloProvider = new VueApollo({\n    defaultClient: apolloClient,\n})\n</code></pre>\n\n\n\n<p>Here is what we have done:</p>\n\n\n\n<ul><li>We imported the Apollo client and&nbsp;<code>VueApollo</code>&nbsp;plugin from their package.</li><li>Next, we initialized the Apollo client and provided the URL of our GraphQL server.</li><li>Next, we added the&nbsp;<code>VueApollo</code>&nbsp;plugin to our Vue.js application.</li><li>Finally, we created the Apollo provider and linked it with our Apollo client.</li></ul>\n\n\n\n<p>Next, you need to connect the Apollo provider with the Vue app as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>new Vue({\n    render: h => h(App),\n    apolloProvider,\n}).$mount('#app')\n</code></pre>\n\n\n\n<p>The Vue components can now access the Apollo client to send requests to the GraphQL server.</p>\n\n\n\n<h2>Sending API requests to the GraphQL server</h2>\n\n\n\n<p>Now that we have set up GraphQL and Apollo client in our Vue.js app. Let&#8217;s see how we can send API requests to the GraphQL server from our Vue component(s).</p>\n\n\n\n<p>Our GraphQL server exposes a simple API for managing employees in a database. Each employee has a name, phone, email, and address.</p>\n\n\n\n<p>We don&#8217;t need to create many components in our simple example. The&nbsp;<code>App</code>&nbsp;component can be enough so let&#8217;s head to the&nbsp;<code>src/App.vue</code>file and start by declaring some variables for holding the data:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\nexport default {\n  name: 'app',\n  data(){\n    return {\n        id: null,\n        name: '',\n        phone: '',\n        email:'',\n        address: '',\n      }\n  },\n</code></pre>\n\n\n\n<p>We declared the&nbsp;<code>id</code>,&nbsp;<code>name</code>,&nbsp;<code>phone</code>,&nbsp;<code>address</code>&nbsp;and&nbsp;<code>email</code>&nbsp;variables which will be used in the form for creating new employees.</p>\n\n\n\n<h2>Fetching data with GraphQL Queries</h2>\n\n\n\n<p>GraphQL provides a powerful query language for querying data. We simply need to build the right query and send it to the server for requesting data.</p>\n\n\n\n<p>First, we need to use the&nbsp;<code>gql</code>&nbsp;tag from the&nbsp;<a href=\"https://github.com/apollographql/graphql-tag\">graphql-tag</a>&nbsp;module for defining the query and add the&nbsp;<code>apollo</code>&nbsp;object to the component which will hold any queries that we want to send to the GraphQL server. This is an example:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\nimport gql from 'graphql-tag'\nexport default {\n  name: 'app',\n  data(){\n    return {\n      id: null,\n      name: '',\n      email: '',\n      phone: '',\n      address: ''}\n  },\n  apollo: {\n    employees: gql`query {\n      employees {\n        id,\n        name,\n        email,\n        phone,\n        address\n      }\n    }`,\n  },\n</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note</strong>:&nbsp;<code>gql</code>&nbsp;enables the parsing of the GraphQL queries to the GraphQL AST.</p></blockquote>\n\n\n\n<p>The employees attribute in the&nbsp;<code>apollo</code>&nbsp;object will be used to store data returned from the&nbsp;<code>employees</code>&nbsp;query. It can be used like any Vue variable in the template to display the employees&#8217; data.</p>\n\n\n\n<h2>Creating and deleting data with GraphQL mutations</h2>\n\n\n\n<p>Just like we used the Apollo client to send GraphQL queries for fetching data from the API. We can also use Apollo to send mutations which are the GraphQL equivalents to CREATE, UPDATE and DELETE operations in the REST world.</p>\n\n\n\n<p>In your&nbsp;<code>App.vue</code>&nbsp;component, define the&nbsp;<code>createEmpolyee()</code>,&nbsp;<code>updateEmpoylee()</code>&nbsp;and&nbsp;<code>deleteEmployee()</code>&nbsp;methods as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>\n methods: {\n    createEmployee(name, email, phone, address){\n      this.$apollo.mutate({\n          mutation: gql`mutation createEmployee($name: String!, $email: String!, $phone: String!, $address: String!){\n            createEmployee(name: $name, email: $email, phone: $phone, address: $address) {\n              id,\n              name,\n              email,\n              phone,\n              address}\n          }`,\n          variables:{\n            name: name,\n            email: email,\n            phone: phone,\n            address: address\n          }\n        }\n      )\n      location.reload();\n    },\n    updateEmployee(id, name, email, phone, address){\n\n      this.$apollo.mutate({\n          mutation: gql`mutation updateEmployee($id: ID!, $name: String!, $email: String!, $phone: String!, $address: String!){\n            updateEmployee(id: $id, name: $name, email: $email, phone: $phone, address: $address)\n          `,\n          variables:{\n            id: id,\n            name: name,\n            email: email,\n            phone: phone,\n            address: address\n          }\n        }\n      )\n      location.reload();\n    },\n    deleteEmployee(id){\n      this.$apollo.mutate({\n          mutation: gql`mutation deleteEmployee($id: ID!){\n            deleteEmployee(id: $id)\n          }`,\n          variables:{\n            id: id,\n          }\n        }\n      )\n      location.reload();\n    },\n</code></pre>\n\n\n\n<p>In all of our methods, we call the&nbsp;<code>mutate()</code>&nbsp;method of the&nbsp;<code>$apollo</code>&nbsp;object for making GraphQL mutations.</p>\n\n\n\n<p>After defining the mutation methods, let&#8217;s now create two other methods:</p>\n\n\n\n<ul><li>The&nbsp;<code>loadEmployeeIntoForm()</code>&nbsp;method for loading an employee from the HTML table into the form where we can update it,</li><li>The&nbsp;<code>resetForm()</code>&nbsp;method for resetting the form.</li></ul>\n\n\n\n<p>In the methods object of the&nbsp;<code>App.vue</code>&nbsp;component, append the following methods as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    loadEmployeeIntoForm(employee){\n      this.id = employee.id;\n      this.name = employee.name;\n      this.email = employee.email;\n      this.phone = employee.phone;\n      this.address = employee.address;\n    },\n    resetForm(){\n      this.id = null;\n      this.name = '';\n      this.email = '';\n      this.phone = '';\n      this.address = '';\n    }   \n</code></pre>\n\n\n\n<p>After defining these methods, we need to create the template for displaying the list of the fetched employees and a form for updating a selected employee from the table.</p>\n\n\n\n<h2>Creating the Vue UI</h2>\n\n\n\n<p>Our app UI will consist of an HTML table and form which will be bound with the employees variable from the apollo object and the previously defined methods.</p>\n\n\n\n<p>Let&#8217;s start with the HTML table. Head back to the&nbsp;<code>src/App.vue</code>&nbsp;file and replace the existing template with the following:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Employees database&lt;/h1>\n&lt;template>\n  &lt;div id=\"app\">\n  &lt;table border='1' width='100%' style='border-collapse: collapse;'>\n   &lt;tr>\n     &lt;th>Name&lt;/th>\n     &lt;th>Email&lt;/th>\n     &lt;th>Phone&lt;/th>\n     &lt;th>Address&lt;/th>\n     &lt;th>Operations&lt;/th>\n   &lt;/tr>\n\n   &lt;tr v-for='employee in employees'>\n     &lt;td>&lt;/td>\n     &lt;td>&lt;/td>\n     &lt;td>&lt;/td>\n     &lt;td>&lt;/td>\n     &lt;td>\n      &lt;input type=\"button\" @click=\"loadEmployeeIntoForm(employee)\" value=\"Update\">\n      &lt;input type=\"button\" @click=\"deleteEmployee(employee.id)\" value=\"Delete\">\n     &lt;/td> \n   &lt;/tr>\n &lt;/table>\n\n\n&lt;/div>\n&lt;/template>\n</code></pre>\n\n\n\n<p>We simply iterate over the&nbsp;<code>employees</code>&nbsp;attribute of the&nbsp;<code>apollo</code>&nbsp;object using a&nbsp;<code>v-for</code>&nbsp;directive and display the name, email, phone and address of employees inside an HTML table. We also add two buttons for each employee to allow users to update and delete an employee.</p>\n\n\n\n<p>When you click on the&nbsp;<strong>Update</strong>&nbsp;button, the corresponding employee will be loaded into an HTML from below the table that we&#8217;ll create next. We can then modify the employee information and send the actual update mutation.</p>\n\n\n\n<p>Let&#8217;s now add a form to our template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    &lt;form>\n      &lt;label>Employee name&lt;/label>\n      &lt;input type=\"text\" name=\"name\" v-model=\"name\">\n      &lt;/br>\n\n      &lt;label>Employee email&lt;/label>\n      &lt;input type=\"email\" name=\"email\" v-model=\"email\">\n      &lt;/br>\n\n      &lt;label>Employee phone&lt;/label>\n      &lt;input type=\"text\" name=\"phone\" v-model=\"phone\">\n\n      &lt;label>Employee address&lt;/label>\n      &lt;textarea name=\"address\" v-model=\"address\">&lt;/textarea>\n\n      &lt;input v-if=\"!id\" type=\"button\" @click=\"createEmployee(name, email, phone, address)\" value=\"Create employee\">\n      &lt;input v-if=\"id\" type=\"button\" @click=\"updateEmployee(id, email, phone, address)\" value=\"Update employee\">\n      &lt;input type=\"button\" @click=\"restForm()\" value=\"Reset\">\n    &lt;/form>\n\n\n</code></pre>\n\n\n\n<p>The form has four input fields for adding employee information. We can either use the form to create a new employee or update an existing employee loaded from the table.</p>\n","protected":false},"excerpt":{"rendered":"<p>Throughout this tutorial, we’ll be learning how to use Vue.js with Apollo client to create a CRUD interface for consuming an API built with Node.js, Express, and GraphQL. Vue is a modern progressive UI library for building user interfaces similar to React, the library which has been traditionally used with GraphQL since both technologies originated [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2710"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2710"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2710/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2710"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2710"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2710"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2709,"date":"2020-10-13T11:17:56","date_gmt":"2020-10-13T11:17:56","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2709"},"modified":"2020-10-13T11:17:56","modified_gmt":"2020-10-13T11:17:56","slug":"vuex-tutorial","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/vuex-tutorial/","title":{"rendered":"Vuex Tutorial"},"content":{"rendered":"\n<p>In this beginners tutorial, you&#8217;ll be learning about Vuex and how you can use it to deal with complex data requirements in your front-end application.</p>\n\n\n\n<p>In this tutorial, we make the assumption that you don&#8217;t have and previous experience working with Vuex.</p>\n\n\n\n<p>Let&#8217;s get started with this tutorial—so what&#8217;s Vuex?</p>\n\n\n\n<p>Vuex is a a Vue implementation of the Flux state management pattern. It&#8217;s a library for working with data in your Vue applications.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Vuex is the official state management library for Vue.js</p></blockquote>\n\n\n\n<p>Vuex enables developers to make complex data management easier and more efficient by using a global data store that can be accessed from all components of the Vue application for getting or setting data.</p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Vuex allows yo to efficiently share data between the application components.</p></blockquote>\n\n\n\n<p>Vue Components can use different ways to communicate data between each other, such as:</p>\n\n\n\n<ul><li><strong>props</strong>: Props are used to pass state from a parent component to its children,</li><li><strong>events</strong>: Events are used to change the state of a component from its children.</li></ul>\n\n\n\n<p>Props and events can be enough for simple scenarios but once the data requirements for your application becomes complex, you&#8217;ll need to implement other advanced strategies or patterns.</p>\n\n\n\n<p>Among these patterns is the Flux pattern which aims to centralize the state across an application. In a Vue application, you can implement this pattern using Vuex.</p>\n\n\n\n<p>Another popular implementation of the Flux pattern is Redux which more popular among React developers. But Redux is framework-agnostic which means you can also use it with Vue.</p>\n\n\n\n<p>With that said, Vuex is the better option in Vue because it offers a better integration since it&#8217;s the official library for state management in Vue.</p>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<p>In order to compete this tutorial, you need to have a few requirements such as:</p>\n\n\n\n<ul><li>A development environment ready with Node.js 8.9+ and NPM installed,</li><li>A basic knowledge of modern JavaScript,</li><li>A working experience of Vue.js.</li></ul>\n\n\n\n<p>That&#8217;s all what you need. You&#8217;ll install the other requirements throughout this tutorial.</p>\n\n\n\n<h2>Installing the Vue.js CLI v3</h2>\n\n\n\n<p>In this tutorial, we&#8217;ll be using the latest version of Vue.js CLI to generate a new Vue project so first let&#8217;s start by installing the CLI.</p>\n\n\n\n<p>Head back to your terminal and run the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install @vue/cli -g \n</code></pre>\n\n\n\n<p>Since your are installing the CLI globally on you system, make sure you have the required permissions by configuring your npm configuration or simply use sudo before you command.</p>\n\n\n\n<h2>Creating a New Vue.js Project</h2>\n\n\n\n<p>After installing the Vue CLI, let&#8217;s use it to generate a new project by running the following command in your terminal:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ vue create vuex-demo\n</code></pre>\n\n\n\n<p>This will generate a&nbsp;<code>vuex-demo</code>&nbsp;project in your current directory.</p>\n\n\n\n<p>The CLI will be asking for a preset that will be used for your project. You can also manually choose the features needed for your project from a set of official plugins like Babel, TypeScript, PWA, Vue Router and Vuex.</p>\n\n\n\n<p>So go ahead and manually select Babel, Vue Router and Vuex for your project.</p>\n\n\n\n<p>The CLI will also ask you for some other options for configuring the router such as&nbsp;<code>router history</code>&nbsp;and&nbsp;<code>dedicated config files</code>. You can also choose if you want to save the preset or not.</p>\n\n\n\n<p>To make sure everything works as expected, navigate inside your project&#8217;s folder:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd vuex-demo\n</code></pre>\n\n\n\n<p>Next run the development server using:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm run serve\n</code></pre>\n\n\n\n<p>You should be able to go to the&nbsp;<code>localhost;8080</code>&nbsp;address to see you application running:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.techiediaries.com/ezoimgfmt/i.imgur.com/ZuWz5b3.png?ezimgfmt=rs:703x605/rscb2/ng:webp/ngcb2\" alt=\"\"/></figure>\n\n\n\n<p>That&#8217;s it, you are now ready to start learning Vuex by implementing a simple application that manages its state using a central store.</p>\n\n\n\n<h2>Creating the Components</h2>\n\n\n\n<p>Now that we have created our project, let&#8217;s create the components of our application.</p>\n\n\n\n<p>Under the&nbsp;<code>src/components</code>&nbsp;folder, create two&nbsp;<code>ContactList.vue</code>&nbsp;and&nbsp;<code>ContactDetail</code>&nbsp;files:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd src/components\n$ touch ContactList.vue\n$ touch ContactDetail.vue\n</code></pre>\n\n\n\n<p>Next open the&nbsp;<code>src/App.vue</code>&nbsp;file and add a link to&nbsp;<code>ContactList.vue</code>&nbsp;component:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n&lt;div id=\"app\">\n&lt;nav>\n&lt;router-link to=\"/contacts\" exact>Contact List&lt;/router-link>\n&lt;/nav>\n&lt;router-view/>\n&lt;/div>\n&lt;/template>\n</code></pre>\n\n\n\n<p>Next open the&nbsp;<code>src/router.js</code>&nbsp;file and add a new route to the&nbsp;<code>ContactList.vue</code>&nbsp;component:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import ContactList from './components/ContactList.vue'\nimport ContactDetail from './components/ContactDetail.vue'\n\nVue.use(Router)\n\nexport default new Router({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  linkClass: \"nav-link\",\n  linkActiveClass: \"active\",\n  routes: &#91;\n    {\n      path: '/contacts',\n      name: 'list',\n      component: ContactList    },\n    {\n      path: '/contacts/:id',\n      name: 'detail',\n      component: ContactDetail\n    },\n  ]\n})\n</code></pre>\n\n\n\n<p>For now, add the following template inside the&nbsp;<code>src/components/ContactList.vue</code>&nbsp;file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n  &lt;div class=\"contact-list\">\n    &lt;h1>\n        Contact List\n    &lt;/h1>\n  &lt;/div>\n&lt;/template>\n</code></pre>\n\n\n\n<p>Also inside the&nbsp;<code>src/components/ContactDetail.vue</code>&nbsp;file, add the following template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n  &lt;div class=\"contact-detail\">\n    &lt;h1>\n        Contact Details\n    &lt;/h1>\n  &lt;/div>\n&lt;/template>\n</code></pre>\n\n\n\n<p>That&#8217;s all for now about components.</p>\n\n\n\n<h2>The Vuex Basics</h2>\n\n\n\n<p>Before continue building our Vue application, let&#8217;s first understand the Vuex basics.</p>\n\n\n\n<h3>What&#8217;s a Vuex Store</h3>\n\n\n\n<p>A Vuex store is a central object for storing data in your Vue application. It also provides different methods for accessing and mutating global state.</p>\n\n\n\n<p>This is an example of a basic store:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport default new Vuex.Store({})\n</code></pre>\n\n\n\n<p>We use the&nbsp;<code>Vuex.Store</code>&nbsp;method to create a store. It takes different properties, such as:</p>\n\n\n\n<ul><li><code>state</code>; this object contains the actual state of the application i.e any variables and array etc.</li><li><code>mutations</code>: this object contains the methods that will be used to mutate the state,</li><li><code>actions</code>: this object contains methods that call the mutation methods.</li></ul>\n\n\n\n<h3>Mutations</h3>\n\n\n\n<p>Mutations are functions that enable you to mutate and upsate the state in a Vuex store. These function can not be called directly but instead they need to be committed using the&nbsp;<code>.commit('mutation')</code>&nbsp;of the Vuex store.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this beginners tutorial, you&#8217;ll be learning about Vuex and how you can use it to deal with complex data requirements in your front-end application. In this tutorial, we make the assumption that you don&#8217;t have and previous experience working with Vuex. Let&#8217;s get started with this tutorial—so what&#8217;s Vuex? Vuex is a a Vue [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2709"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2709"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2709/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2709"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2709"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2709"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2708,"date":"2020-10-13T11:18:37","date_gmt":"2020-10-13T11:18:37","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2708"},"modified":"2020-10-13T11:18:37","modified_gmt":"2020-10-13T11:18:37","slug":"php-with-vue-js-mysql-rest-api-crud-tutorial","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/php-with-vue-js-mysql-rest-api-crud-tutorial/","title":{"rendered":"PHP with Vue.js &#038; MySQL: REST API CRUD Tutorial"},"content":{"rendered":"\n<p>In this tutorial, we&#8217;ll build a RESTful CRUD application with PHP &amp; MySQL in the backend and Vue.js in the frontend. We&#8217;ll also be using Axios for sending Ajax request to PHP from Vue.</p>\n\n\n\n<p>The Vue.js library, Axios client and Ajax technology allows you to fetch and display data in your application without the need to refresh the whole page each time.</p>\n\n\n\n<p>For database we&#8217;ll be using MySQL, the most popular database used by PHP developers.</p>\n\n\n\n<h2>Creating the MySQL Database</h2>\n\n\n\n<p>In your terminal, start the MySQL client using:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mysql -u root -p\n</code></pre>\n\n\n\n<p>Enter your password when prompted and hit&nbsp;<code>Enter</code>.</p>\n\n\n\n<p>Next, create a database using the following SQL statement:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mysql> create database vuedb;\n</code></pre>\n\n\n\n<p>Next, create the following SQL table in your&nbsp;<code>vuedb</code>&nbsp;database:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mysql> use vuedb;\nmysql> CREATE TABLE `contacts` (\n  `id` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,\n  `name` varchar(100) NOT NULL,\n  `email` varchar(100) NOT NULL,\n  `city` varchar(100),\n  `country` varchar(100),\n  `job` varchar(100)\n) ENGINE=InnoDB DEFAULT CHARSET=latin1;\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.techiediaries.com/ezoimgfmt/i.imgur.com/CCO6seH.png?ezimgfmt=rs:560x237/rscb2/ng:webp/ngcb2\" alt=\"PHP Vue.js MySQL\"/></figure>\n\n\n\n<h2>Create The PHP &amp; MySQL CRUD App</h2>\n\n\n\n<p>Now, let&#8217;s create a PHP and MySQL CRUD application. Open a new terminal, navigate to your working directory then create a folder for your project:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd ~/demos\n$ mkdir php-vuejs-crud\n</code></pre>\n\n\n\n<p>Next, navigate in your project&#8217;s folder and add an&nbsp;<code>index.php</code>&nbsp;file:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd php-vuejs-crud\n$ touch index.php\n</code></pre>\n\n\n\n<p>Open the&nbsp;<code>index.php</code>&nbsp;file and add the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html lang=\"en\">\n&lt;head>\n    &lt;meta charset=\"UTF-8\">\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    &lt;title>PHP| MySQL | Vue.js | Axios Example&lt;/title>\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/vue\">&lt;/script>\n    &lt;script src=\"https://unpkg.com/axios/dist/axios.min.js\">&lt;/script>\n\n&lt;/head>\n&lt;body>\n&lt;/body>\n&lt;/html>\n</code></pre>\n\n\n\n<p>We first include Vue.js and Axios from their CDNs.</p>\n\n\n\n<p>Next, in the body of the document, add a&nbsp;<code>&lt;table&gt;</code>&nbsp;to display fetched data:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Contact Management&lt;/h1>\n&lt;div id='vueapp'>\n\n&lt;table border='1' width='100%' style='border-collapse: collapse;'>\n   &lt;tr>\n     &lt;th>Name&lt;/th>\n     &lt;th>Email&lt;/th>\n     &lt;th>Country&lt;/th>\n     &lt;th>City&lt;/th>\n     &lt;th>Job&lt;/th>\n\n   &lt;/tr>\n\n   &lt;tr v-for='contact in contacts'>\n     &lt;td>{{ contact.name }}&lt;/td>\n     &lt;td>{{ contact.email }}&lt;/td>\n     &lt;td>{{ contact.country }}&lt;/td>\n     &lt;td>{{ contact.city }}&lt;/td>\n     &lt;td>{{ contact.job }}&lt;/td>\n   &lt;/tr>\n &lt;/table>\n</code></pre>\n\n\n\n<p>We use the&nbsp;<code>v-for</code>&nbsp;directive to iterate over the contacts array and display each contact.</p>\n\n\n\n<p>Next, add a&nbsp;<code>&lt;form&gt;</code>&nbsp;tag:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;/br>\n\n    &lt;form>\n      &lt;label>Name&lt;/label>\n      &lt;input type=\"text\" name=\"name\" v-model=\"name\">\n&lt;/br>\n      &lt;label>Email&lt;/label>\n      &lt;input type=\"email\" name=\"email\" v-model=\"email\">\n      &lt;/br>\n      &lt;label>Country&lt;/label>\n      &lt;input type=\"text\" name=\"country\" v-model=\"country\">\n      &lt;/br>\n      &lt;label>City&lt;/label>\n      &lt;input type=\"text\" name=\"city\" v-model=\"city\">\n      &lt;/br>\n      &lt;label>Job&lt;/label>\n      &lt;input type=\"text\" name=\"job\" v-model=\"job\">\n      &lt;/br>\n      &lt;input type=\"button\" @click=\"createContact()\" value=\"Add\">\n    &lt;/form>\n\n&lt;/div>\n</code></pre>\n\n\n\n<p>We use the&nbsp;<code>v-model</code>&nbsp;directive to bind the input fields to their corresponding variables in the Vue instance we&#8217;ll be creating next. And we use the&nbsp;<code>@click</code>&nbsp;event to bind the click event of the button to the&nbsp;<code>createContact()</code>&nbsp;method that will be defined in the Vue instance.</p>\n\n\n\n<p>Next, add a&nbsp;<code>&lt;script&gt;</code>&nbsp;tag and create a Vue app:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\nvar app = new Vue({\n  el: '#vueapp',\n  data: {\n      name: '',\n      email: '',\n      country: '',\n      city: '',\n      job: '',\n      contacts: &#91;]\n  },\n  mounted: function () {\n    console.log('Hello from Vue!')\n    this.getContacts()\n  },\n\n  methods: {\n    getContacts: function(){\n    },\n    createContact: function(){\n    },\n    resetForm: function(){\n    }\n  }\n})    \n&lt;/script>\n&lt;/body>\n&lt;/html>    \n</code></pre>\n\n\n\n<p>We declared three methods, let&#8217;s implement them!</p>\n\n\n\n<p>The&nbsp;<code>getContacts()</code>&nbsp;method gets contacts from the PHP endpoint using Axios:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    getContacts: function(){\n        axios.get('api/contacts.php')\n        .then(function (response) {\n            console.log(response.data);\n            app.contacts = response.data;\n\n        })\n        .catch(function (error) {\n            console.log(error);\n        });\n    }\n</code></pre>\n\n\n\n<p>The&nbsp;<code>createContact()</code>&nbsp;methods creates a new contact in the MySQL database by sending a POST request with Axios and&nbsp;<a href=\"https://www.techiediaries.com/formdata/\">FormData</a>:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    createContact: function(){\n        console.log(\"Create contact!\")\n\n        let formData = new FormData();\n        console.log(\"name:\", this.name)\n        formData.append('name', this.name)\n        formData.append('email', this.email)\n        formData.append('city', this.city)\n        formData.append('country', this.country)\n        formData.append('job', this.job)\n\n        var contact = {};\n        formData.forEach(function(value, key){\n            contact&#91;key] = value;\n        });\n\n        axios({\n            method: 'post',\n            url: 'api/contacts.php',\n            data: formData,\n            config: { headers: {'Content-Type': 'multipart/form-data' }}\n        })\n        .then(function (response) {\n            //handle success\n            console.log(response)\n            app.contacts.push(contact)\n            app.resetForm();\n        })\n        .catch(function (response) {\n            //handle error\n            console.log(response)\n        });\n    }\n</code></pre>\n\n\n\n<p>The&nbsp;<code>resetForm()</code>&nbsp;method resets the form:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    resetForm: function(){\n        this.name = '';\n        this.email = '';\n        this.country = '';\n        this.city = '';\n        this.job = '';\n    }\n</code></pre>\n\n\n\n<h2>Create an API Endpoint</h2>\n\n\n\n<p>Now, let&#8217;s create an endpoint that provides contacts data in a JSON format to our Vue frontend.</p>\n\n\n\n<p>Create an api folder inside your project&#8217;s root folder:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ mkdir api\n</code></pre>\n\n\n\n<p>Navigate inside the&nbsp;<code>api</code>&nbsp;folder and create a&nbsp;<code>contacts.php</code>&nbsp;file and add the following content:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n$host = \"localhost\"; \n$user = \"root\"; \n$password = \"YOUR_MYSQL_DB_PASSWORD\"; \n$dbname = \"vuedb\"; \n$id = '';\n\n$con = mysqli_connect($host, $user, $password,$dbname);\n\n$method = $_SERVER&#91;'REQUEST_METHOD'];\n$request = explode('/', trim($_SERVER&#91;'PATH_INFO'],'/'));\n//$input = json_decode(file_get_contents('php://input'),true);\n\n\nif (!$con) {\n  die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n\nswitch ($method) {\n    case 'GET':\n      $id = $_GET&#91;'id'];\n      $sql = \"select * from contacts\".($id?\" where id=$id\":''); \n      break;\n    case 'POST':\n      $name = $_POST&#91;\"name\"];\n      $email = $_POST&#91;\"email\"];\n      $country = $_POST&#91;\"country\"];\n      $city = $_POST&#91;\"city\"];\n      $job = $_POST&#91;\"job\"];\n\n      $sql = \"insert into contacts (name, email, city, country, job) values ('$name', '$email', '$city', '$country', '$job')\"; \n      break;\n}\n\n// run SQL statement\n$result = mysqli_query($con,$sql);\n\n// die if SQL statement failed\nif (!$result) {\n  http_response_code(404);\n  die(mysqli_error($con));\n}\n\nif ($method == 'GET') {\n    if (!$id) echo '&#91;';\n    for ($i=0 ; $i&lt;mysqli_num_rows($result) ; $i++) {\n      echo ($i>0?',':'').json_encode(mysqli_fetch_object($result));\n    }\n    if (!$id) echo ']';\n  } elseif ($method == 'POST') {\n    echo json_encode($result);\n  } else {\n    echo mysqli_affected_rows($con);\n  }\n\n$con->close();\n</code></pre>\n\n\n\n<p>Finally, you can serve your PHP application using the following command from the root of your project:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ php -S 127.0.0.1:8080\n</code></pre>\n\n\n\n<p>This is a screenshot of the application, after posting some data using the form:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.techiediaries.com/ezoimgfmt/www.diigo.com/file/image/bbccosoazesrbspqabzdqqbaqpb/PHP%7C+MySQL+%7C+Vue.js+%7C+Axios+Example.jpg?ezimgfmt=rs:710x405/rscb2/ng:webp/ngcb2\" alt=\"PHP Vue.js REST API CRUD\"/></figure>\n\n\n\n<p>For the same styling, add the following CSS:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td></td><td>&lt;style&gt;</td></tr><tr><td></td><td>input {</td></tr><tr><td></td><td>width: 100%;</td></tr><tr><td></td><td>padding: 2px 5px;</td></tr><tr><td></td><td>margin: 2px 0;</td></tr><tr><td></td><td>border: 1px solid red;</td></tr><tr><td></td><td>border-radius: 4px;</td></tr><tr><td></td><td>box-sizing: border-box;</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td></td></tr><tr><td></td><td>input[type=button]{</td></tr><tr><td></td><td>background-color: #4CAF50;</td></tr><tr><td></td><td>border: none;</td></tr><tr><td></td><td>color: white;</td></tr><tr><td></td><td>padding: 4px 7px;</td></tr><tr><td></td><td>text-decoration: none;</td></tr><tr><td></td><td>margin: 2px 1px;</td></tr><tr><td></td><td>cursor: pointer;</td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>th, td {</td></tr><tr><td></td><td>padding: 1px;</td></tr><tr><td></td><td>text-align: left;</td></tr><tr><td></td><td>border-bottom: 1px solid #ddd;</td></tr><tr><td></td><td></td></tr><tr><td></td><td>}</td></tr><tr><td></td><td>tr:hover {background-color: #f5f5f5;}</td></tr><tr><td></td><td></td></tr><tr><td></td><td>&lt;/style&gt;</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, we&#8217;ll build a RESTful CRUD application with PHP &amp; MySQL in the backend and Vue.js in the frontend. We&#8217;ll also be using Axios for sending Ajax request to PHP from Vue. The Vue.js library, Axios client and Ajax technology allows you to fetch and display data in your application without the need [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2708"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2708"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2708/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2708"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2708"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2708"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2707,"date":"2020-10-13T11:19:38","date_gmt":"2020-10-13T11:19:38","guid":{"rendered":"http://javascript.foobrdigital.com/?p=2707"},"modified":"2020-10-13T11:19:38","modified_gmt":"2020-10-13T11:19:38","slug":"jwt-auth-with-vue-vuex-and-vue-router-axios-and-guards","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/jwt-auth-with-vue-vuex-and-vue-router-axios-and-guards/","title":{"rendered":"JWT Auth with Vue, Vuex and Vue Router — Axios and Guards"},"content":{"rendered":"\n<p>In this tutorial, you will see how you can use Vue.js with Vuex and Axios to create an application that allows users to register and login via JWT authentication.</p>\n\n\n\n<p>Since Vue.js is only a front-end library we&#8217;ll need a back-end that handles JWT authentication and returns valid JWT access tokens to the client. Here comes the role of Vuex to store the access tokens and attach them with any outgoing requests to access protected resources using Axios.</p>\n\n\n\n<h2>Prerequisites</h2>\n\n\n\n<p>To be able to take follow this tutorial step by step, you need to have:</p>\n\n\n\n<ul><li>A working knowledge of Vue.js,</li><li>A recent version of Node.js and NPM installed on your development machine.</li></ul>\n\n\n\n<p>For the back-end server that implements JWT authentication, you need to follow the Node Express JWT Authentication — jsonwebtoken and bcryptjs tutorial to create it.</p>\n\n\n\n<p>You also need to read Vuex Tutorial for learning the basic of Vuex.</p>\n\n\n\n<p>In this tutorial we&#8217;ll be focusing on the front-end with Vue, Vuex and Axios.</p>\n\n\n\n<h2>Installing Vue CLI 3 and Creating a Project</h2>\n\n\n\n<p>In this tutorial we&#8217;ll be using Vue CLI 3 to create and work with our project. Vue CLI provides various presets that you can use to generate your project but it also allows you to choose the individual libraries that you want to include in your project.</p>\n\n\n\n<p>First, install Vue CLI v3 using the following command:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install @vue/cli -g \n</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note</strong>: You may be needing to add&nbsp;<strong>sudo</strong>&nbsp;before you command in Linux/Ubuntu systems or use an administrator command prompt in Windows to install Vue CLI globally on your system. At the time of this writing&nbsp;<strong>Vue CLI v3.1.3</strong>&nbsp;is installed.</p></blockquote>\n\n\n\n<p>Head to your terminal and run the following command to create a new Vue project:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ vue create vue-vuex-auth\n</code></pre>\n\n\n\n<p>When prompted to select a preset, choose&nbsp;<strong>Manually select features</strong>&nbsp;and press&nbsp;<strong>Enter</strong>. Next, you&#8217;ll be prompted for selecting the features you need in your project, make sure to check&nbsp;<strong>Router</strong>&nbsp;and&nbsp;<strong>Vuex</strong>.</p>\n\n\n\n<p>You&#8217;ll be also asked many other questions, you can simply choose the default options and move on to the next steps.</p>\n\n\n\n<p>The CLI will create a Vue project in a&nbsp;<code>vue-vuex-auth</code>&nbsp;folder, initialize a GIT repository and then install the npm packages and CLI plugins.</p>\n\n\n\n<p>When the project is successfully created, navigate inside the&nbsp;<code>vue-vuex-auth</code>&nbsp;folder and launch your development server:</p>\n\n\n\n<pre class=\"wp-block-code\"><code> $ cd vue-vuex-auth\n $ npm run serve\n</code></pre>\n\n\n\n<p>You&#8217;ll be able to access your Vue application from the&nbsp;<code>http://localhost:8080/</code>&nbsp;address. You&#8217;ll be seeing the following page:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.techiediaries.com/ezoimgfmt/i.imgur.com/2Dafriq.png?ezimgfmt=rs:678x605/rscb2/ng:webp/ngcb2\" alt=\"Vue Vuex Auth\"/></figure>\n\n\n\n<h2>Installing and Setting up Axios</h2>\n\n\n\n<p>We&#8217;ll be using Axios for sending HTTP requests to the Express server so we need to install it in the project via npm:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install axios --save\n</code></pre>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note</strong>: As the time of this writing,&nbsp;<strong>axios v0.18.0</strong>&nbsp;is installed.</p></blockquote>\n\n\n\n<p>Since we&#8217;ll need to use Axios for sending requests from any Vue component, we&#8217;ll need to import in the&nbsp;<code>src/main.js</code>&nbsp;file.</p>\n\n\n\n<p>Open the&nbsp;<code>src/main.js</code>&nbsp;file and update it as follows:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import  Vue  from  'vue'\nimport  App  from  './App.vue'\nimport  router  from  './router'\nimport  store  from  './store'\nimport  Axios  from  'axios'\n\nVue.config.productionTip  =  false\nVue.prototype.$http  =  Axios;\nconst  accessToken  =  localStorage.getItem('access_token')\n\nif (accessToken) {\n    Vue.prototype.$http.defaults.headers.common&#91;'Authorization'] =  accessToken\n}\n\nnew  Vue({\nrouter,\nstore,\nrender:  h  =>  h(App)\n}).$mount('#app')\n</code></pre>\n\n\n\n<p>We first import Axios. Next, we add Axios to the Vue instance as&nbsp;<code>$http</code>. This will make it available any where in our Vue application.</p>\n\n\n\n<p>If an access token is found on the local storage, we attach it to every outgoing Axios request via the&nbsp;<code>Authorization</code>&nbsp;header.</p>\n\n\n\n<h2>Creating the Signup Component</h2>\n\n\n\n<p>Create a&nbsp;<code>src/views/Signup.vue</code>&nbsp;file and add the following template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n  &lt;div>\n    &lt;h2>Signup Page&lt;/h2>\n    &lt;form @submit=\"register\">\n      &lt;div>\n          &lt;input  type=\"text\" placeholder=\"Name\" v-model=\"name\">\n      &lt;/div>\n      &lt;div>\n          &lt;input placeholder=\"Your email\" type=\"email\" v-model=\"email\">\n      &lt;/div>\n      &lt;div>\n          &lt;input placeholder=\"Password\" type=\"password\" v-model=\"password\">\n      &lt;/div>\n      &lt;div>\n          &lt;input placeholder=\"Confirm password\" type=\"password\" v-model=\"password2\">\n      &lt;/div>\n      &lt;div>\n          &lt;button type=\"submit\">Register&lt;/button>\n      &lt;/div>\n    &lt;/form>\n  &lt;/div>\n&lt;/template>\n</code></pre>\n\n\n\n<h3>Creating Data and Methods</h3>\n\n\n\n<p>In the same&nbsp;<code>src/views/Signup.vue</code>&nbsp;file, add the following code below the template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n  export default {\n    data(){\n      return {\n        name : \"\",\n        email : \"\",\n        password : \"\",\n        password2 : \"\"\n      }\n    },\n  }\n&lt;/script>\n</code></pre>\n\n\n\n<p>Next define the&nbsp;<code>signup()</code>&nbsp;method for registering users:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n  export default {\n    // &#91;...]\n    methods: {\n      signup: function () {\n        let info = {\n          name: this.name,\n          email: this.email,\n          password: this.password\n        }\n\n        this.$store.dispatch('signup', info).then(() => this.$router.push('/login'))\n\n      }\n    }\n  }\n&lt;/script>\n</code></pre>\n\n\n\n<h2>Creating the Login Component</h2>\n\n\n\n<p>Create a&nbsp;<code>src/views/Login.vue</code>&nbsp;file and add the following template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n  &lt;div>\n    &lt;h2>Login Page&lt;/h2>\n    &lt;form @submit=\"login\">\n      &lt;div>\n          &lt;input placeholder=\"Your email\" type=\"email\" v-model=\"email\">\n      &lt;/div>\n      &lt;div>\n          &lt;input placeholder=\"Password\" type=\"password\" v-model=\"password\">\n      &lt;/div>\n      &lt;div>\n          &lt;button type=\"submit\">Login&lt;/button>\n      &lt;/div>\n    &lt;/form>\n  &lt;/div>\n&lt;/template>\n</code></pre>\n\n\n\n<h3>Adding Data and Methods</h3>\n\n\n\n<p>In the&nbsp;<code>src/views/Login.vue</code>&nbsp;file, add the following code:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;script>\n  export default {\n    data(){\n      return {\n        email : \"\",\n        password : \"\"\n      }\n    },\n    methods: {\n      login: function () {\n        const email = this.email \n        const password = this.password\n        this.$store.dispatch('login', { email, password }).then(() => this.$router.push('/'))\n      }\n    }\n  }\n&lt;/script>\n</code></pre>\n\n\n\n<p>Next, add the&nbsp;<code>login()</code>&nbsp;method:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>    methods: {\n      login: function () {\n        const email = this.email \n        const password = this.password\n        this.$store.dispatch('login', { email, password }).then(() => this.$router.push('/'))\n      }\n    }\n</code></pre>\n\n\n\n<h2>Adding the Routes</h2>\n\n\n\n<p>Open the&nbsp;<code>src/router.js</code>&nbsp;file and add two routes to the&nbsp;<code>Signup</code>&nbsp;and&nbsp;<code>Login</code>&nbsp;components.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import  Vue  from  'vue'\nimport  Router  from  'vue-router'\nimport  Home  from  './views/Home.vue'\nimport  Signup  from  './views/Signup.vue'\nimport  Login  from  './views/Login.vue'\nVue.use(Router)\n\nexport  default  new  Router({\nmode:  'history',\nbase:  process.env.BASE_URL,\nroutes: &#91;\n{\npath:  '/',\nname:  'home',\ncomponent:  Home\n},\n{\npath:  '/about',\nname:  'about',\n// route level code-splitting\n// this generates a separate chunk (about.&#91;hash].js) for this route\n// which is lazy-loaded when the route is visited.\ncomponent: () =>  import(/* webpackChunkName: \"about\" */  './views/About.vue')\n},\n{\npath:  '/signup',\nname:  'signup',\ncomponent:  Signup\n},\n{\npath:  '/login',\nname:  'login',\ncomponent:  Login\n}\n]\n})\n</code></pre>\n\n\n\n<h2>Adding Navigation</h2>\n\n\n\n<p>Open the&nbsp;<code>src/App.vue</code>&nbsp;component and add the links to the&nbsp;<code>Signup</code>&nbsp;and&nbsp;<code>Login</code>&nbsp;components.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n  &lt;div id=\"app\">\n    &lt;div id=\"nav\">\n      &lt;router-link to=\"/\">Home&lt;/router-link> |\n      &lt;router-link to=\"/about\">About&lt;/router-link> | \n      &lt;router-link to=\"/signup\">Signup&lt;/router-link> |\n      &lt;router-link to=\"/login\">Login&lt;/router-link>      \n    &lt;/div>\n    &lt;router-view/>\n  &lt;/div>\n&lt;/template>\n</code></pre>\n\n\n\n<p>Also open the&nbsp;<code>src/views/Home.vue</code>&nbsp;component and update its template:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;template>\n  &lt;div class=\"home\">\n  &lt;h1>Home&lt;/h1>\n  &lt;/div>\n&lt;/template>\n</code></pre>\n\n\n\n<p>This is a screenshot of the main App component at this point:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.techiediaries.com/ezoimgfmt/i.imgur.com/UyoSD9L.png?ezimgfmt=rs:435x204/rscb2/ng:webp/ngcb2\" alt=\"Vue Vuex Auth\"/></figure>\n\n\n\n<h2>Adding Vuex State</h2>\n\n\n\n<p>Open the&nbsp;<code>src/store.js</code>&nbsp;file and add state for hoding information about the current user and the access token:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import  Vue  from  'vue'\nimport  Vuex  from  'vuex'\nVue.use(Vuex)\n\nexport  default  new  Vuex.Store({\nstate: {\naccessToken:  localStorage.getItem('access_token') ||  '',\ncurrentUser : {}\n},\nmutations: {\n},\nactions: {\n}\n})\n</code></pre>\n\n\n\n<p>You also need to import axios:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import axios from 'axios'\n\n</code></pre>\n\n\n\n<h2>Adding the&nbsp;<code>login()</code>&nbsp;Action</h2>\n\n\n\n<p>In the store object inside the actions object, add a&nbsp;<code>login()</code>&nbsp;method:</p>\n\n\n\n<h2>Adding the&nbsp;<code>signup()</code>&nbsp;Action</h2>\n\n\n\n<h2>Adding the&nbsp;<code>logout()</code>&nbsp;Action</h2>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, you will see how you can use Vue.js with Vuex and Axios to create an application that allows users to register and login via JWT authentication. Since Vue.js is only a front-end library we&#8217;ll need a back-end that handles JWT authentication and returns valid JWT access tokens to the client. Here comes [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[52,51],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2707"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2707"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2707/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2707"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2707"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2707"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]