[
    {
        "id": 1082,
        "date": "2020-07-23T11:26:05",
        "date_gmt": "2020-07-23T11:26:05",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1082"
        },
        "modified": "2020-07-23T11:26:05",
        "modified_gmt": "2020-07-23T11:26:05",
        "slug": "overview-7",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/overview-7\/",
        "title": {
            "rendered": "Overview"
        },
        "content": {
            "rendered": "\n<p><strong>Batch processing<\/strong>&nbsp;is a processing mode which involves execution of series of automated complex jobs without user interaction. A batch process handles bulk data and runs for a long time.<\/p>\n\n\n\n<p>Several Enterprise applications require to process huge data to perform operations involving \u2212<\/p>\n\n\n\n<ul><li>Time-based events such as periodic calculations.<\/li><li>Periodic applications that are processed repetitively over large datasets.<\/li><li>Applications that deals with processing and validation of the data available in a transactional manner.<\/li><\/ul>\n\n\n\n<p>Therefore, batch processing is used in enterprise applications to perform such transactions.<\/p>\n\n\n\n<h2>What is Spring Batch<\/h2>\n\n\n\n<p>Spring batch is a&nbsp;<strong>lightweight framework<\/strong>&nbsp;which is used to develop&nbsp;<strong>Batch Applications<\/strong>&nbsp;that are used in Enterprise Applications.<\/p>\n\n\n\n<p>In addition to bulk processing, this framework provides functions for \u2212<\/p>\n\n\n\n<ul><li>Including logging and tracing<\/li><li>Transaction management<\/li><li>Job processing statistics<\/li><li>Job restart<\/li><li>Skip and Resource management<\/li><\/ul>\n\n\n\n<p>You can also scale spring batch applications using its portioning techniques.<\/p>\n\n\n\n<h2>Features of Spring Batch<\/h2>\n\n\n\n<p>Following are the notable features of Spring Batch \u2212<\/p>\n\n\n\n<ul><li><strong>Flexibility<\/strong>&nbsp;\u2212 Spring Batch applications are flexible. You simply need to change an XML file to alter the order of processing in an application.<\/li><li><strong>Maintainability<\/strong>&nbsp;\u2212 Spring Batch applications are easy to maintain. A Spring Batch job includes steps and each step can be decoupled, tested, and updated, without effecting the other steps.<\/li><li><strong>Scalability<\/strong>&nbsp;\u2212 Using the portioning techniques, you can scale the Spring Batch applications. These techniques allow you to \u2212<ul><li>Execute the steps of a job in parallel.<\/li><li>Execute a single thread in parallel.<\/li><\/ul><\/li><li><strong>Reliability<\/strong>&nbsp;\u2212 In case of any failure, you can restart the job from exactly where it was stopped, by decoupling the steps.<\/li><li><strong>Support for multiple file formats<\/strong>&nbsp;\u2212 Spring Batch provides support for a large set of readers and writers such as XML, Flat file, CSV, MYSQL, Hibernate, JDBC, Mongo, Neo4j, etc.<\/li><li><strong>Multiple ways to launch a job<\/strong>&nbsp;\u2212 You can launch a Spring Batch job using web applications, Java programs, Command Line, etc.<\/li><\/ul>\n\n\n\n<p>In addition to these, Spring Batch applications support \u2212<\/p>\n\n\n\n<ul><li>Automatic retry after failure.<\/li><li>Tracking status and statistics during the batch execution and after completing the batch processing.<\/li><li>To run concurrent jobs.<\/li><li>Services such as logging, resource management, skip, and restarting the processing.<\/li><\/ul>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Batch processing&nbsp;is a processing mode which involves execution of series of automated complex jobs without user interaction. A batch process handles bulk data and runs for a long time. Several Enterprise applications require to process huge data to perform operations involving \u2212 Time-based events such as periodic calculations. Periodic applications that are processed repetitively over [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1082"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1082"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1082\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1083,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1082\/revisions\/1083"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1082"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1082"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1082"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1081,
        "date": "2020-07-23T11:27:01",
        "date_gmt": "2020-07-23T11:27:01",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1081"
        },
        "modified": "2020-07-24T11:54:50",
        "modified_gmt": "2020-07-24T11:54:50",
        "slug": "environment-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/environment-2\/",
        "title": {
            "rendered": "Environment"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will explain how to set Spring Batch environment in Eclipse IDE. Before proceeding with the installation, ensure that you have installed Eclipse in your system. If not, download and install Eclipse in your system.<\/p>\n\n\n\n<p>For more information on Eclipse, please refer our&nbsp;Eclipse Tutorial.<\/p>\n\n\n\n<h2>Setting Spring Batch on Eclipse<\/h2>\n\n\n\n<p>Follow the steps given below to set Spring Batch environment on Eclipse.<\/p>\n\n\n\n<p><strong>Step 1<\/strong>&nbsp;\u2212 Install Eclipse and open a New Project as shown in the following screenshot.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_batch\/images\/new_project.jpg\" alt=\"New Project\"\/><\/figure>\n\n\n\n<p><strong>Step 2<\/strong>&nbsp;\u2212 Create a Sample Spring Batch project as shown below.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_batch\/images\/project_name.jpg\" alt=\"Project Name\"\/><\/figure>\n\n\n\n<p><strong>Step 3<\/strong>&nbsp;\u2212 Right-click on the project and convert it into a Maven project as shown below. Once you convert it into Maven project, it will give you a&nbsp;<strong>Pom.xml<\/strong>&nbsp;where you need to mention the required dependencies. Thereafter, the&nbsp;<strong>jar<\/strong>&nbsp;files of those will be automatically downloaded into your project.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_batch\/images\/configure.jpg\" alt=\"Configure\"\/><\/figure>\n\n\n\n<p><strong>Step 4<\/strong>&nbsp;\u2212 Now, in the&nbsp;<strong>pom.xml<\/strong>&nbsp;of the project, copy and paste the following content (dependencies for spring batch application) and refresh the project.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;project xmlns = \"http:\/\/maven.apache.org\/POM\/4.0.0\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/maven.apache.org\/POM\/4.0.0 \n   http:\/\/maven.apache.org\/maven-v4_0_0.xsd\"> \n   &lt;modelVersion>4.0.0&lt;\/modelVersion> \n   &lt;groupId>com.codemeals&lt;\/groupId> \n   &lt;artifactId>SpringBatchSample&lt;\/artifactId> \n   &lt;packaging>jar&lt;\/packaging> \n   &lt;version>1.0-SNAPSHOT&lt;\/version> \n   &lt;name>SpringBatchExample&lt;\/name>\n   &lt;url>http:\/\/maven.apache.org&lt;\/url>  \n \n   &lt;properties> \n      &lt;jdk.version>1.8&lt;\/jdk.version> \n      &lt;spring.version>4.3.8.RELEASE&lt;\/spring.version> \n      &lt;spring.batch.version>3.0.7.RELEASE&lt;\/spring.batch.version> \n      &lt;mysql.driver.version>5.1.25&lt;\/mysql.driver.version> \n      &lt;junit.version>4.11&lt;\/junit.version> \n   &lt;\/properties>  \n   \n   &lt;dependencies> \n      &lt;!-- Spring Core --> \n      &lt;dependency> \n         &lt;groupId>org.springframework&lt;\/groupId> \n         &lt;artifactId>spring-core&lt;\/artifactId> \n         &lt;version>${spring.version}&lt;\/version> \n      &lt;\/dependency>  \n      \n      &lt;!-- Spring jdbc, for database --> \n      &lt;dependency> \n         &lt;groupId>org.springframework&lt;\/groupId> \n         &lt;artifactId>spring-jdbc&lt;\/artifactId> \n         &lt;version>${spring.version}&lt;\/version> \n      &lt;\/dependency>  \n      \n      &lt;!-- Spring XML to\/back object --> \n      &lt;dependency> \n         &lt;groupId>org.springframework&lt;\/groupId> \n         &lt;artifactId>spring-oxm&lt;\/artifactId> \n         &lt;version>${spring.version}&lt;\/version> \n      &lt;\/dependency>  \n   \n      &lt;!-- MySQL database driver --> \n      &lt;dependency> \n         &lt;groupId>mysql&lt;\/groupId> \n         &lt;artifactId>mysql-connector-java&lt;\/artifactId>\n         &lt;version>${mysql.driver.version}&lt;\/version> \n      &lt;\/dependency>  \n  \n      &lt;!-- Spring Batch dependencies --> \n      &lt;dependency> \n         &lt;groupId>org.springframework.batch&lt;\/groupId> \n         &lt;artifactId>spring-batch-core&lt;\/artifactId> \n         &lt;version>${spring.batch.version}&lt;\/version> \n      &lt;\/dependency> \n  \n      &lt;dependency> \n         &lt;groupId>org.springframework.batch&lt;\/groupId> \n         &lt;artifactId>spring-batch-infrastructure&lt;\/artifactId> \n         &lt;version>${spring.batch.version}&lt;\/version> \n      &lt;\/dependency>  \n  \n      &lt;!-- Spring Batch unit test --> \n      &lt;dependency> \n         &lt;groupId>org.springframework.batch&lt;\/groupId> \n         &lt;artifactId>spring-batch-test&lt;\/artifactId> \n         &lt;version>${spring.batch.version}&lt;\/version> \n      &lt;\/dependency>  \n  \n      &lt;!-- Junit --> \n      &lt;dependency> \n         &lt;groupId>junit&lt;\/groupId> \n         &lt;artifactId>junit&lt;\/artifactId> \n         &lt;version>${junit.version}&lt;\/version> \n         &lt;scope>test&lt;\/scope> \n      &lt;\/dependency> \n   &lt;\/dependencies> \n \n   &lt;build> \n      &lt;finalName>spring-batch&lt;\/finalName> \n      &lt;plugins> \n         &lt;plugin> \n            &lt;groupId>org.apache.maven.plugins&lt;\/groupId> \n            &lt;artifactId>maven-eclipse-plugin&lt;\/artifactId>\n            &lt;version>2.9&lt;\/version> \n            &lt;configuration> \n               &lt;downloadSources>true&lt;\/downloadSources> \n               &lt;downloadJavadocs>false&lt;\/downloadJavadocs> \n            &lt;\/configuration> \n         &lt;\/plugin> \n      \n         &lt;plugin> \n            &lt;groupId>org.apache.maven.plugins&lt;\/groupId> \n            &lt;artifactId>maven-compiler-plugin&lt;\/artifactId> \n            &lt;version>2.3.2&lt;\/version> \n            &lt;configuration> \n               &lt;source>${jdk.version}&lt;\/source> \n               &lt;target>${jdk.version}&lt;\/target> \n            &lt;\/configuration> \n         &lt;\/plugin> \n      &lt;\/plugins> \n   &lt;\/build> \n&lt;\/project>  <\/code><\/pre>\n\n\n\n<p>Finally, if you observe the Maven dependencies, you can observe that all the required&nbsp;<strong>jar<\/strong>&nbsp;files have been downloaded.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_batch\/images\/jar_files.jpg\" alt=\"Jar Files\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will explain how to set Spring Batch environment in Eclipse IDE. Before proceeding with the installation, ensure that you have installed Eclipse in your system. If not, download and install Eclipse in your system. For more information on Eclipse, please refer our&nbsp;Eclipse Tutorial. Setting Spring Batch on Eclipse Follow the steps [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1081"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1081"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1081\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1193,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1081\/revisions\/1193"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1081"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1081"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1081"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1080,
        "date": "2020-07-23T11:29:12",
        "date_gmt": "2020-07-23T11:29:12",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1080"
        },
        "modified": "2020-07-23T11:29:12",
        "modified_gmt": "2020-07-23T11:29:12",
        "slug": "architecture-3",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/architecture-3\/",
        "title": {
            "rendered": "Architecture"
        },
        "content": {
            "rendered": "\n<p>Following is the diagrammatic representation of the architecture of Spring Batch. As depicted in the figure, the architecture contains three main components namely,&nbsp;<strong>Application, Batch Core<\/strong>, and&nbsp;<strong>Batch Infrastructure<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_batch\/images\/architecture.jpg\" alt=\"Architecture\"\/><\/figure>\n\n\n\n<p><strong>Application<\/strong>&nbsp;\u2212 This component contains all the jobs and the code we write using the Spring Batch framework.<\/p>\n\n\n\n<p><strong>Batch Core<\/strong>&nbsp;\u2212 This component contains all the API classes that are needed to control and launch a Batch Job.<\/p>\n\n\n\n<p><strong>Batch Infrastructure<\/strong>&nbsp;\u2212 This component contains the readers, writers, and services used by both application and Batch core components.<\/p>\n\n\n\n<h2>Components of Spring Batch<\/h2>\n\n\n\n<p>The following illustration shows the different components of Spring Batch and how they are connected with each other.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_batch\/images\/components.jpg\" alt=\"Components\"\/><\/figure>\n\n\n\n<h3>Job<\/h3>\n\n\n\n<p>In a Spring Batch application, a job is the batch process that is to be executed. It runs from start to finish without interruption. This job is further divided into steps (or a job contains steps).<\/p>\n\n\n\n<p>We will configure a job in Spring Batch using an XML file or a Java class. Following is the XML configuration of a Job in Spring Batch.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;job id = \"jobid\"> \n   &lt;step id = \"step1\" next = \"step2\"\/> \n   &lt;step id = \"step2\" next = \"step3\"\/> \n   &lt;step id = \"step3\"\/> \n&lt;\/job><\/code><\/pre>\n\n\n\n<p>A Batch job is configured within the tags &lt;job&gt;&lt;\/job&gt;. It has an attribute named&nbsp;<strong>id<\/strong>. Within these tags, we define the definition and ordering of the steps.<\/p>\n\n\n\n<p><strong>Restartable<\/strong>\u00a0\u2212 In general, when a job is running and we try to start it again that is considered as\u00a0<strong>restart<\/strong>\u00a0and it will be started again. To avoid this, you need to set the\u00a0<strong>restartable<\/strong>\u00a0value to\u00a0<strong>false<\/strong>\u00a0as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;job id = \"jobid\" restartable = \"false\" >\n\n&lt;\/job><\/code><\/pre>\n\n\n\n<h3>Step<\/h3>\n\n\n\n<p>A&nbsp;<strong>step<\/strong>&nbsp;is an independent part of a job which contains the necessary information to define and execute the job (its part).<\/p>\n\n\n\n<p>As specified in the diagram, each step is composed of an ItemReader, ItemProcessor (optional) and an ItemWriter.&nbsp;<strong>A job may contain one or more steps<\/strong>.<\/p>\n\n\n\n<h3>Readers, Writers, and Processors<\/h3>\n\n\n\n<p>An&nbsp;<strong>item reader<\/strong>&nbsp;reads data into a Spring Batch application from a particular source, whereas an&nbsp;<strong>item writer<\/strong>&nbsp;writes data from the Spring Batch application to a particular destination.<\/p>\n\n\n\n<p>An&nbsp;<strong>Item processor<\/strong>&nbsp;is a class which contains the processing code which processes the data read into the spring batch. If the application reads&nbsp;<strong>&#8220;n&#8221;<\/strong>&nbsp;records, then the code in the processor will be executed on each record.<\/p>\n\n\n\n<p>When no reader and writer are given, a&nbsp;<strong>tasklet<\/strong>&nbsp;acts as a processor for SpringBatch. It processes only a single task. For example, if we are writing a job with a simple step in it where we read data from MySQL database and process it and write it to a file (flat), then our step uses \u2212<\/p>\n\n\n\n<ul><li>A\u00a0<strong>reader<\/strong>\u00a0which reads from MySQL database.<\/li><li>A\u00a0<strong>writer<\/strong>\u00a0which writes to a flat file.<\/li><li>A\u00a0<strong>custom processor<\/strong>\u00a0which processes the data as per our wish.<\/li><\/ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;job id = \"helloWorldJob\"> \n   &lt;step id = \"step1\"> \n      &lt;tasklet> \n         &lt;chunk reader = \"mysqlReader\" writer = \"fileWriter\" \n            processor = \"CustomitemProcessor\" >&lt;\/chunk> \n      &lt;\/tasklet> \n   &lt;\/step> \n&lt;\/ job><\/code><\/pre>\n\n\n\n<p>Spring Batch provides a long list of&nbsp;<strong>readers<\/strong>&nbsp;and&nbsp;<strong>writers<\/strong>. Using these predefined classes, we can define beans for them. We will discuss&nbsp;<strong>readers<\/strong>&nbsp;and&nbsp;<strong>writers<\/strong>&nbsp;in greater detail in the coming chapters.<\/p>\n\n\n\n<h3>JobRepository<\/h3>\n\n\n\n<p>A Job repository in Spring Batch provides Create, Retrieve, Update, and Delete (CRUD) operations for the JobLauncher, Job, and Step implementations. We will define a job repository in an XML file as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;job-repository id = \"jobRepository\"\/> <\/code><\/pre>\n\n\n\n<p>In addition to\u00a0<strong>id<\/strong>, there are some more options (optional) available. Following is the configuration of job repository with all the options and their default values.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;job-repository id = \"jobRepository\" \n   data-source = \"dataSource\" \n   transaction-manager = \"transactionManager\" \n   isolation-level-for-create = \"SERIALIZABLE\" \n   table-prefix = \"BATCH_\" \n   max-varchar-length = \"1000\"\/><\/code><\/pre>\n\n\n\n<p><strong>In-Memory Repository<\/strong>\u00a0\u2212 In case you don\u2019t want to persist the domain objects of the Spring Batch in the database, you can configure the in-memory version of the jobRepository as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"jobRepository\" \n   class = \"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean \">\n   &lt;property name = \"transactionManager\" ref = \"transactionManager\"\/>\n&lt;\/bean><\/code><\/pre>\n\n\n\n<h3>JobLauncher<\/h3>\n\n\n\n<p>JobLauncher is an interface which launces the Spring Batch job with the\u00a0<strong>given set of parameters<\/strong>.\u00a0<strong>SampleJoblauncher<\/strong>\u00a0is the class which implements the\u00a0<strong>JobLauncher<\/strong>\u00a0interface. Following is the configuration of the JobLauncher.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"jobLauncher\" \n   class = \"org.springframework.batch.core.launch.support.SimpleJobLauncher\"> \n   &lt;property name = \"jobRepository\" ref = \"jobRepository\" \/> \n&lt;\/bean><\/code><\/pre>\n\n\n\n<h3>JobInstance<\/h3>\n\n\n\n<p>A&nbsp;<strong>JobInstance<\/strong>&nbsp;represents the logical run of a job; it is created when we run a job. Each job instance is differentiated by the name of the job and the parameters passed to it while running.<\/p>\n\n\n\n<p>If a JobInstance execution fails, the same JobInstance can be executed again. Hence, each JobInstance can have multiple job executions.<\/p>\n\n\n\n<h3>JobExecution and StepExecution<\/h3>\n\n\n\n<p>JobExecution and StepExecution are the representation of the execution of a job\/step. They contain the run information of the job\/step such as start time (of job\/step), end time (of job\/step).<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Following is the diagrammatic representation of the architecture of Spring Batch. As depicted in the figure, the architecture contains three main components namely,&nbsp;Application, Batch Core, and&nbsp;Batch Infrastructure. Application&nbsp;\u2212 This component contains all the jobs and the code we write using the Spring Batch framework. Batch Core&nbsp;\u2212 This component contains all the API classes that are [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1080"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1080"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1080\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1085,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1080\/revisions\/1085"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1080"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1080"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1080"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1079,
        "date": "2020-07-23T11:29:39",
        "date_gmt": "2020-07-23T11:29:39",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1079"
        },
        "modified": "2020-07-23T11:29:39",
        "modified_gmt": "2020-07-23T11:29:39",
        "slug": "application-2",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/application-2\/",
        "title": {
            "rendered": "Application"
        },
        "content": {
            "rendered": "\n<p>Almost all the examples in this tutorial contain the following files \u2212<\/p>\n\n\n\n<ul><li>Configuration file (XML file)<\/li><li>Tasklet\/processor (Java class)<\/li><li>Java class with setters and getters (Java class (bean))<\/li><li>Mapper class (Java class)<\/li><li>Launcher class (Java class)<\/li><\/ul>\n\n\n\n<h2>Configuration File<\/h2>\n\n\n\n<p>The configuration file (XML) contains the following \u2212<\/p>\n\n\n\n<ul><li>The&nbsp;<strong>job<\/strong>&nbsp;and&nbsp;<strong>step<\/strong>&nbsp;definitions.<\/li><li>Beans defining&nbsp;<strong>readers<\/strong>&nbsp;and&nbsp;<strong>writers<\/strong>.<\/li><li>Definition of components like JobLauncher, JobRepository, Transaction Manager, and Data Source.<\/li><\/ul>\n\n\n\n<p>In our examples, for better understanding, we have divided this in to two files the&nbsp;<strong>job.xml<\/strong>&nbsp;file (defines job, step, reader and writer) and&nbsp;<strong>context.xml<\/strong>&nbsp;file (job launcher, job repository, transaction manager and data source).<\/p>\n\n\n\n<h2>Mapper Class<\/h2>\n\n\n\n<p>The Mapper class, depending upon the reader, implements interfaces such as&nbsp;<strong>row mapper<\/strong>,&nbsp;<strong>field set mapper<\/strong>, etc. It contains the code to get the data from the reader and to set it to a Java class with&nbsp;<strong>setter<\/strong>&nbsp;and&nbsp;<strong>getter<\/strong>&nbsp;methods (Java Bean).<\/p>\n\n\n\n<h2>Java Bean Class<\/h2>\n\n\n\n<p>A Java class with&nbsp;<strong>setters<\/strong>&nbsp;and&nbsp;<strong>getters<\/strong>&nbsp;(Java bean) represents data with multiple values. It acts as a helper class. We will pass the data from one component (reader, writer, processer) to other in the form of object of this class.<\/p>\n\n\n\n<h2>Tasklet\/processor<\/h2>\n\n\n\n<p>The Tasklet\/processor class contains the processing code of the Spring Batch application. A processor is a class which accepts an object that contains the data read, processes it, and returns the processed data (in the form object).<\/p>\n\n\n\n<h2>Launcher class<\/h2>\n\n\n\n<p>This class (App.java) contains the code to launch the Spring Batch application.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_batch\/images\/application.jpg\" alt=\"Application\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Almost all the examples in this tutorial contain the following files \u2212 Configuration file (XML file) Tasklet\/processor (Java class) Java class with setters and getters (Java class (bean)) Mapper class (Java class) Launcher class (Java class) Configuration File The configuration file (XML) contains the following \u2212 The&nbsp;job&nbsp;and&nbsp;step&nbsp;definitions. Beans defining&nbsp;readers&nbsp;and&nbsp;writers. Definition of components like JobLauncher, JobRepository, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1079"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1079"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1079\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1086,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1079\/revisions\/1086"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1079"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1079"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1079"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1078,
        "date": "2020-07-23T11:39:12",
        "date_gmt": "2020-07-23T11:39:12",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1078"
        },
        "modified": "2020-07-23T11:39:12",
        "modified_gmt": "2020-07-23T11:39:12",
        "slug": "configuration",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/configuration\/",
        "title": {
            "rendered": "Configuration"
        },
        "content": {
            "rendered": "\n<p>While writing a Spring Batch application, we will configure the job, step, JobLauncher, JobRepository, Transaction Manager, readers, and writers using the XML tags provided in the Spring Batch namespace. Therefore, you need to include this namespace in your XML file as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:batch = \"http:\/\/www.springframework.org\/schema\/batch\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/batch \n\n   http:&#47;&#47;www.springframework.org\/schema\/batch\/spring-batch-2.2.xsd \n   http:\/\/www.springframework.org\/schema\/bean   \n   http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd\"> <\/code><\/pre>\n\n\n\n<p>In the following sections, we will discuss the various tags, their attributes and examples, available in the Spring Batch namespace.<\/p>\n\n\n\n<h2>Job<\/h2>\n\n\n\n<p>This tag is used to define\/configure the job of the SpringBatch. It contains a set of steps and it can be launched using the JobLauncher.<\/p>\n\n\n\n<p>This tag has 2 attributes as listed below \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Attribute &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Id<\/strong>It is the Id of the job, it is mandatory to specify value to this attribute.<\/td><\/tr><tr><td>2<\/td><td><strong>restartable<\/strong>This is the attribute which is used to specify whether the job is restartable or not. This attribute is optional.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the XML configuration of the job of a SpringBatch.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;job id = \"jobid\" restartable = \"false\" > \n   . . . . . . . .  \n   . . . . . . . .  \n   . . . . . . . . \/\/ Step definitions \n&lt;\/job><\/code><\/pre>\n\n\n\n<h2>Step<\/h2>\n\n\n\n<p>This tag is used to define\/configure the steps of a SpringBatch job. It has the following three attributes \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Attribute &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>Id<\/strong>It is the Id of the job, it is mandatory to specify value to this attribute.<\/td><\/tr><tr><td>2<\/td><td><strong>next<\/strong>It is the shortcut to specify the next step.<\/td><\/tr><tr><td>3<\/td><td><strong>parent<\/strong>It is used to specify the name of the parent bean from which the configuration should inherit.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the XML configuration of the step of a SpringBatch.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;job id = \"jobid\"> \n   &lt;step id = \"step1\" next = \"step2\"\/> \n   &lt;step id = \"step2\" next = \"step3\"\/> \n   &lt;step id = \"step3\"\/> \n&lt;\/job><\/code><\/pre>\n\n\n\n<h2>Chunk<\/h2>\n\n\n\n<p>This tag is used to define\/configure a chunk of a&nbsp;<strong>tasklet<\/strong>. It has the following four attributes \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Attribute &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>reader<\/strong>It represents the name of the item reader bean. It accepts the value of the type&nbsp;<strong>org.springframework.batch.item.ItemReader<\/strong>.<\/td><\/tr><tr><td>2<\/td><td><strong>writer<\/strong>It represents the name of the item reader bean. It accepts the value of the type&nbsp;<strong>org.springframework.batch.item.ItemWriter<\/strong>.<\/td><\/tr><tr><td>3<\/td><td><strong>processor<\/strong>It represents the name of the item reader bean. It accepts the value of the type&nbsp;<strong>org.springframework.batch.item.ItemProcessor<\/strong>.<\/td><\/tr><tr><td>4<\/td><td><strong>commit-interval<\/strong>It is used to specify the number of items to be processed before committing the transaction.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the XML configuration of the chunk of a SpringBatch.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;batch:step id = \"step1\"> \n   &lt;batch:tasklet> \n      &lt;batch:chunk reader = \"xmlItemReader\" \n         writer = \"mysqlItemWriter\" processor = \"itemProcessor\" commit-interval = \"10\"> \n      &lt;\/batch:chunk> \n   &lt;\/batch:tasklet> \n&lt;\/batch:step> <\/code><\/pre>\n\n\n\n<h2>JobRepository<\/h2>\n\n\n\n<p>The JobRepository Bean is used to configure the JobRepository using a relational database. This bean is associated with the class of type&nbsp;<strong>org.springframework.batch.core.repository.JobRepository<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Attribute &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>dataSource<\/strong>It is used to specify the bean name which defines the datasource.<\/td><\/tr><tr><td>2<\/td><td><strong>transactionManager<\/strong>It is used specify the name of the bean which defines the transactionmanager.<\/td><\/tr><tr><td>3<\/td><td><strong>databaseType<\/strong>It specifies the type of the relational database used in the job repository.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the example configuration of the JobRepository.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"jobRepository\" \n   class = \"org.springframework.batch.core.repository.support.JobRepositoryFactoryBean\"> \n   &lt;property name = \"dataSource\" ref = \"dataSource\" \/> \n   &lt;property name = \"transactionManager\" ref=\"transactionManager\" \/> \n   &lt;property name = \"databaseType\" value = \"mysql\" \/> \n&lt;\/bean> <\/code><\/pre>\n\n\n\n<h2>JobLauncher<\/h2>\n\n\n\n<p>The JobLauncher bean is used to configure the JobLauncher. It is associated with the class&nbsp;<strong>org.springframework.batch.core.launch.support.SimpleJobLauncher<\/strong>&nbsp;(in our programs). This bean has one property named&nbsp;<strong>jobrepository<\/strong>, and it is used to specify the name of the bean which defines the&nbsp;<strong>jobrepository<\/strong>.<\/p>\n\n\n\n<p>Following is the example configuration of the jobLauncher.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"jobLauncher\" \n   class = \"org.springframework.batch.core.launch.support.SimpleJobLauncher\"> \n   &lt;property name = \"jobRepository\" ref = \"jobRepository\" \/> \n&lt;\/bean><\/code><\/pre>\n\n\n\n<h2>TransactionManager<\/h2>\n\n\n\n<p>The TransactionManager bean is used to configure the TransactionManager using a relational database. This bean is associated with the class of type\u00a0<strong>org.springframework.transaction.platform.TransactionManager<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"transactionManager\"\n   class = \"org.springframework.batch.support.transaction.ResourcelessTransactionManager\" \/><\/code><\/pre>\n\n\n\n<h2>DataSource<\/h2>\n\n\n\n<p>The datasource bean is used to configure the&nbsp;<strong>Datasource<\/strong>. This bean is associated with the class of type&nbsp;<strong>org.springframework.jdbc.datasource.DriverManagerDataSource<\/strong>.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>S.No<\/th><th>Attribute &amp; Description<\/th><\/tr><tr><td>1<\/td><td><strong>driverClassName<\/strong>This specifies the class name of the driver used to connect with the database.<\/td><\/tr><tr><td>2<\/td><td><strong>url<\/strong>This specifies the URL of the database.<\/td><\/tr><tr><td>3<\/td><td><strong>username<\/strong>This specifies the username to connect with the database.<\/td><\/tr><tr><td>4<\/td><td><strong>password<\/strong>This specifies the password to connect with the database.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>Following is the example configuration of the\u00a0<strong>datasource<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"dataSource\" \n   class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\"> \n   &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\" \/> \n   &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/details\" \/> \n   &lt;property name = \"username\" value = \"myuser\" \/> \n   &lt;property name = \"password\" value = \"password\" \/> \n&lt;\/bean> <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>While writing a Spring Batch application, we will configure the job, step, JobLauncher, JobRepository, Transaction Manager, readers, and writers using the XML tags provided in the Spring Batch namespace. Therefore, you need to include this namespace in your XML file as shown below. In the following sections, we will discuss the various tags, their attributes [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1078"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1078"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1078\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1087,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1078\/revisions\/1087"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1078"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1078"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1078"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1077,
        "date": "2020-07-23T11:42:51",
        "date_gmt": "2020-07-23T11:42:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1077"
        },
        "modified": "2020-07-23T11:42:51",
        "modified_gmt": "2020-07-23T11:42:51",
        "slug": "readers-writers-processors",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/readers-writers-processors\/",
        "title": {
            "rendered": "Readers, Writers &#038; Processors"
        },
        "content": {
            "rendered": "\n<p>An&nbsp;<strong>Item Reader<\/strong>&nbsp;reads data into the spring batch application from a particular source, whereas an&nbsp;<strong>Item Writer<\/strong>&nbsp;writes data from Spring Batch application to a particular destination.<\/p>\n\n\n\n<p>An&nbsp;<strong>Item processor<\/strong>&nbsp;is a class which contains the processing code which processes the data read in to the spring batch. If the application reads n records the code in the processor will be executed on each record.<\/p>\n\n\n\n<p>A\u00a0<strong>chunk<\/strong>\u00a0is a child element of the\u00a0<strong>tasklet<\/strong>. It is used to perform read, write, and processing operations. We can configure reader, writer, and processors using this element, within a step as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;batch:job id = \"helloWorldJob\"> \n   &lt;batch:step id = \"step1\"> \n      &lt;batch:tasklet> \n         &lt;batch:chunk reader = \"cvsFileItemReader\" writer = \"xmlItemWriter\" \n            processor = \"itemProcessor\" commit-interval = \"10\"> \n         &lt;\/batch:chunk> \n      &lt;\/batch:tasklet> \n   &lt;\/batch:step> \n&lt;\/batch:job><\/code><\/pre>\n\n\n\n<p>Spring Batch provides readers and writers to read and write data form various file systems\/databases such as MongoDB, Neo4j, MySQL, XML, flatfile, CSV, etc.<\/p>\n\n\n\n<p>To include a reader in your application, you need to define a bean for that reader, provide values to all the required properties within the bean, and pass the&nbsp;<strong>id<\/strong>&nbsp;of such bean as a value to the attribute of the chunk element&nbsp;<strong>reader<\/strong>&nbsp;(same for&nbsp;<strong>writer<\/strong>).<\/p>\n\n\n\n<h2>ItemReader<\/h2>\n\n\n\n<p>It is the entity of a step (of a batch process) which reads data. An ItemReader reads one item a time. Spring Batch provides an Interface&nbsp;<strong>ItemReader<\/strong>. All the&nbsp;<strong>readers<\/strong>&nbsp;implement this interface.<\/p>\n\n\n\n<p>Following are some of the predefined ItemReader classes provided by Spring Batch to read from various sources.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Reader<\/th><th>Purpose<\/th><\/tr><tr><td>FlatFIleItemReader<\/td><td>To read data from flat files.<\/td><\/tr><tr><td>StaxEventItemReader<\/td><td>To read data from XML files.<\/td><\/tr><tr><td>StoredProcedureItemReader<\/td><td>To read data from the stored procedures of a database.<\/td><\/tr><tr><td>JDBCPagingItemReader<\/td><td>To read data from relational databases database.<\/td><\/tr><tr><td>MongoItemReader<\/td><td>To read data from MongoDB.<\/td><\/tr><tr><td>Neo4jItemReader<\/td><td>To read data from Neo4jItemReader.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>We need to configure the\u00a0<strong>ItemReaders<\/strong>\u00a0by creating the beans. Following is an example of\u00a0<strong>StaxEventItemReader<\/strong>\u00a0which reads data from an XML file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"mysqlItemWriter\" \n   class = \"org.springframework.batch.item.xml.StaxEventItemWriter\"> \n   &lt;property name = \"resource\" value = \"file:xml\/outputs\/userss.xml\" \/> \n   &lt;property name = \"marshaller\" ref = \"reportMarshaller\" \/> \n   &lt;property name = \"rootTagName\" value = \"Tutorial\" \/> \n&lt;\/bean> \n\n&lt;bean id = \"reportMarshaller\" \n   class = \"org.springframework.oxm.jaxb.Jaxb2Marshaller\"> \n   &lt;property name = \"classesToBeBound\"> \n      &lt;list> \n         &lt;value>Tutorial&lt;\/value> \n      &lt;\/list> \n   &lt;\/property> \n&lt;\/bean> <\/code><\/pre>\n\n\n\n<p>As observed, while configuring, we need to specify the respective class name of the required reader and we need to provide values to all the required properties.<\/p>\n\n\n\n<h2>ItemWriter<\/h2>\n\n\n\n<p>It is the element of the&nbsp;<strong>step<\/strong>&nbsp;of a batch process which writes data. An ItemWriter writes one item a time. Spring Batch provides an Interface&nbsp;<strong>ItemWriter<\/strong>. All the writers implement this interface.<\/p>\n\n\n\n<p>Following are some of the predefined ItemWriter classes provided by Spring Batch to read from various sources.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Writer<\/th><th>Purpose<\/th><\/tr><tr><td>FlatFIleItemWriter<\/td><td>To write data into flat files.<\/td><\/tr><tr><td>StaxEventItemWriter<\/td><td>To write data into XML files.<\/td><\/tr><tr><td>StoredProcedureItemWriter<\/td><td>To write data into the stored procedures of a database.<\/td><\/tr><tr><td>JDBCPagingItemWriter<\/td><td>To write data into relational databases database.<\/td><\/tr><tr><td>MongoItemWriter<\/td><td>To write data into MongoDB.<\/td><\/tr><tr><td>Neo4jItemWriter<\/td><td>To write data into Neo4j.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>In same way, we need to configure the ItemWriters by creating the beans. Following is an example of\u00a0<strong>JdbcCursorItemReader<\/strong>\u00a0which writes data to an MySQL database.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;bean id = \"dbItemReader\"\n   class = \"org.springframework.batch.item.database.JdbcCursorItemReader\" scope = \"step\">\n   &lt;property name = \"dataSource\" ref = \"dataSource\" \/>\n   &lt;property name = \"sql\" value = \"select * from tutorialsdata\" \/>\n   &lt;property name = \"rowMapper\">\n      &lt;bean class = \"TutorialRowMapper\" \/> \n   &lt;\/property>\n&lt;\/bean><\/code><\/pre>\n\n\n\n<h2>Item Processor<\/h2>\n\n\n\n<p><strong>ItemProcessor<\/strong>: An ItemProcessor is used to process the data. When the given item is not valid it returns&nbsp;<strong>null<\/strong>, else it processes the given item and returns the processed result. The interface&nbsp;<strong>ItemProcessor&lt;I,O&gt;<\/strong>&nbsp;represents the processor.<\/p>\n\n\n\n<p><strong>Tasklet class<\/strong>&nbsp;\u2212 When no&nbsp;<strong>reader<\/strong>&nbsp;and&nbsp;<strong>writer<\/strong>&nbsp;are given, a Tasklet acts as a processor for SpringBatch. It processes only single task.<\/p>\n\n\n\n<p>We can define a custom item processor by implementing the interface&nbsp;<strong>ItemProcessor<\/strong>&nbsp;of the package&nbsp;<strong>org.springframework.batch.item.ItemProcessor<\/strong>. This ItemProcessor class accepts an object and processes the data and returns the processed data as another object.<\/p>\n\n\n\n<p>In a batch process, if&nbsp;<strong>&#8220;n&#8221;<\/strong>&nbsp;records or data elements are read, then for each record, it will read the data, process it, and writes the data in the writer. To process the data, it relays on the processor passed.<\/p>\n\n\n\n<p>For example, let\u2019s suppose you have written code to load a particular PDF document, create a new page, write the data item on to the PDF in a tabular format. If you execute this application, it reads all the data items from the XML document, stores them in the MySQL database, and prints them in the given PDF document in individual pages.<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>Following is a sample ItemProcessor class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.item.ItemProcessor;  \n\npublic class CustomItemProcessor implements ItemProcessor&lt;Tutorial, Tutorial> {  \n   \n   @Override \n   public Tutorial process(Tutorial item) throws Exception {  \n      System.out.println(\"Processing...\" + item); \n      return item; \n   } \n} <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>An&nbsp;Item Reader&nbsp;reads data into the spring batch application from a particular source, whereas an&nbsp;Item Writer&nbsp;writes data from Spring Batch application to a particular destination. An&nbsp;Item processor&nbsp;is a class which contains the processing code which processes the data read in to the spring batch. If the application reads n records the code in the processor will [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1077"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1077"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1077\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1088,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1077\/revisions\/1088"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1077"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1077"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1077"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1076,
        "date": "2020-07-23T11:45:22",
        "date_gmt": "2020-07-23T11:45:22",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1076"
        },
        "modified": "2020-07-23T11:45:22",
        "modified_gmt": "2020-07-23T11:45:22",
        "slug": "basic-application",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/basic-application\/",
        "title": {
            "rendered": "Basic Application"
        },
        "content": {
            "rendered": "\n<p>This chapter shows you the basic Spring Batch application. It will simply execute a&nbsp;<strong>tasklet<\/strong>&nbsp;to displays a message.<\/p>\n\n\n\n<p>Our Spring Batch application contains the following files \u2212<\/p>\n\n\n\n<ul><li><strong>Configuration file<\/strong>&nbsp;\u2212 This is an XML file where we define the Job and the steps of the job. (If the application involves readers and writers too, then the configuration of&nbsp;<strong>readers<\/strong>&nbsp;and&nbsp;<strong>writers<\/strong>&nbsp;is also included in this file.)<\/li><li><strong>Context.xml<\/strong>&nbsp;\u2212 In this file, we will define the beans like job repository, job launcher and transaction manager.<\/li><li><strong>Tasklet class<\/strong>&nbsp;\u2212 In this class, we will write the processing code job (In this case, it displays a simple message)<\/li><li><strong>Launcher class<\/strong>&nbsp;\u2212 in this class, we will launch the Batch Application by running the Job launcher.<\/li><\/ul>\n\n\n\n<h2>jobConfig.xml<\/h2>\n\n\n\n<p>Following is the configuration file of our sample Spring Batch application.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:batch = \"http:\/\/www.springframework.org\/schema\/batch\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/batch \n      http:&#47;&#47;www.springframework.org\/schema\/batch\/spring-batch-2.2.xsd\n      http:\/\/www.springframework.org\/schema\/beans\n      http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd \"> \n   &lt;import resource=\"context.xml\" \/>      \n   &lt;!-- Defining a bean --> \n   &lt;bean id = \"tasklet\" class = \"a_sample.MyTasklet\" \/>  \n   &lt;!-- Defining a job--> \n   &lt;batch:job id = \"helloWorldJob\">  \n      &lt;!-- Defining a Step --> \n      &lt;batch:step id = \"step1\"> \n         &lt;tasklet ref = \"tasklet\"\/>   \n      &lt;\/batch:step>    \n   &lt;\/batch:job>  \n&lt;\/beans> <\/code><\/pre>\n\n\n\n<h2>Context.xml<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>context.xml<\/strong>\u00a0of our Spring Batch application.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:xsi = http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans \n      http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd\">  \n   \n   &lt;bean id = \"jobRepository\"   \n      class=\"org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean\"> \n      &lt;property name = \"transactionManager\" ref = \"transactionManager\" \/> \n   &lt;\/bean>     \n     \n   &lt;bean id = \"transactionManager\" \n      class = \"org.springframework.batch.support.transaction.ResourcelessTransactionManager\" \/>  \n   &lt;bean id = \"jobLauncher\" \n      class = \"org.springframework.batch.core.launch.support.SimpleJobLauncher\"> \n      &lt;property name = \"jobRepository\" ref = \"jobRepository\" \/> \n   &lt;\/bean> \n&lt;\/beans> <\/code><\/pre>\n\n\n\n<h2>Tasklet.java<\/h2>\n\n\n\n<p>Following is the Tasklet class which displays a simple message.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.core.StepContribution; \nimport org.springframework.batch.core.scope.context.ChunkContext;\nimport org.springframework.batch.core.step.tasklet.Tasklet;\nimport org.springframework.batch.repeat.RepeatStatus;  \n\npublic class MyTasklet implements Tasklet { \n   \n   @Override \n   public RepeatStatus execute(StepContribution arg0, ChunkContext arg1) throws Exception {  \n      System.out.println(\"Hello This is a sample example of spring batch\"); \n      return RepeatStatus.FINISHED; \n   } \n} <\/code><\/pre>\n\n\n\n<h2>App.java<\/h2>\n\n\n\n<p>Following is the code which launces the batch process.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.core.Job; \nimport org.springframework.batch.core.JobExecution; \nimport org.springframework.batch.core.JobParameters; \nimport org.springframework.batch.core.launch.JobLauncher; \nimport org.springframework.context.ApplicationContext; \nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class App { \n   public static void main(String&#91;] args)throws Exception { \n  \n      \/\/ System.out.println(\"hello\"); \n      String&#91;] springConfig  =  {\"a_sample\/job_hello_world.xml\"};  \n      \n      \/\/ Creating the application context object  \n      ApplicationContext context = new ClassPathXmlApplicationContext(springConfig); \n      \n      \/\/ Creating the job launcher \n      JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\"); \n  \n      \/\/ Creating the job \n      Job job = (Job) context.getBean(\"helloWorldJob\"); \n  \n      \/\/ Executing the JOB \n      JobExecution execution = jobLauncher.run(job, new JobParameters()); \n      System.out.println(\"Exit Status : \" + execution.getStatus()); \n   }    \n}<\/code><\/pre>\n\n\n\n<p>On executing, the above SpringBatch program will produce the following output \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Apr 24, 2017 4:40:54 PM org.springframework.context.support.AbstractApplicationContext prepareRefresh \nINFO:Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@2ef1e4fa: startup date &#91;Mon Apr 24 16:40:54 IST 2017]; root of context hierarchy \nApr 24, 2017 4:40:54 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions INFO: Loading XML bean definitions  \nApr 24, 2017 4:40:54 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions  \nINFO: Loading XML bean definitions \nApr 24, 2017 4:40:54 PM org.springframework.beans.factory.support.DefaultListableBeanFactory preInstantiateSingletons \nApr 24, 2017 4:40:55 PM org.springframework.batch.core.launch.support.SimpleJobLauncher afterPropertiesSet \nINFO: No TaskExecutor has been set, defaulting to synchronous executor. \nApr 24, 2017 4:40:55 PM org.springframework.batch.core.launch.support.SimpleJobLauncher$1 run \nINFO: Job: &#91;FlowJob: &#91;name=helloWorldJob]] launched with the following parameters: &#91;{}] \nApr 24, 2017 4:40:55 PM org.springframework.batch.core.job.SimpleStepHandler handleStep INFO: Executing step: &#91;step1] \nHello This is a sample example of spring batch \nApr 24, 2017 4:40:55 PM org.springframework.batch.core.launch.support.SimpleJobLauncher$1 run \nINFO: Job: &#91;FlowJob: &#91;name=helloWorldJob]] completed with the following parameters: &#91;{}] and the following status: &#91;COMPLETED] \nExit Status : COMPLETED<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>This chapter shows you the basic Spring Batch application. It will simply execute a&nbsp;tasklet&nbsp;to displays a message. Our Spring Batch application contains the following files \u2212 Configuration file&nbsp;\u2212 This is an XML file where we define the Job and the steps of the job. (If the application involves readers and writers too, then the configuration [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1076"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1076"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1076\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1089,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1076\/revisions\/1089"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1076"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1076"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1076"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1075,
        "date": "2020-07-23T11:47:43",
        "date_gmt": "2020-07-23T11:47:43",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1075"
        },
        "modified": "2020-07-24T11:53:48",
        "modified_gmt": "2020-07-24T11:53:48",
        "slug": "xml-to-mysql",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/xml-to-mysql\/",
        "title": {
            "rendered": "XML to MySQL"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will create a Spring Batch application which uses an XML Reader and a MySQL Writer.<\/p>\n\n\n\n<p><strong>Reader<\/strong>&nbsp;\u2212 The reader we are using in the application is&nbsp;<strong>StaxEventItemReader<\/strong>&nbsp;to read data from XML documents.<\/p>\n\n\n\n<p>Following is the input XML document we are using in this application. This document holds data records which specify details like tutorial id, tutorial author, tutorial title, submission date, tutorial icon, and tutorial description.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> \n&lt;tutorials> \n   &lt;tutorial>      \n      &lt;tutorial_id>1001&lt;\/tutorial_id> \n      &lt;tutorial_author>Sanjay&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn Java&lt;\/tutorial_title> \n      &lt;submission_date>06-05-2007&lt;\/submission_date> \n      &lt;tutorial_icon>https:\/\/www.codemeals.com\/java\/images\/java-minilogo.jpg&lt;\/tutorial_icon> \n      &lt;tutorial_description>Java is a high-level programming language originally \n         developed by Sun Microsystems and released in 1995. \n         Java runs on a variety of platforms. \n         This tutorial gives a complete understanding of Java.');&lt;\/tutorial_description> \n   &lt;\/tutorial> \n    \n   &lt;tutorial>      \n      &lt;tutorial_id>1002&lt;\/tutorial_id> \n      &lt;tutorial_author>Abdul S&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn MySQL&lt;\/tutorial_title> \n      &lt;submission_date>19-04-2007&lt;\/submission_date> \n      &lt;tutorial_icon>https:\/\/www.codemeals.com\/mysql\/images\/mysql-minilogo.jpg&lt;\/tutorial_icon> \n      &lt;tutorial_description>MySQL is the most popular \n         Open Source Relational SQL database management system. \n         MySQL is one of the best RDBMS being used for developing web-based software applications. \n         This tutorial will give you quick start with MySQL \n         and make you comfortable with MySQL programming.&lt;\/tutorial_description> \n   &lt;\/tutorial> \n    \n   &lt;tutorial>\n      &lt;tutorial_id>1003&lt;\/tutorial_id> \n      &lt;tutorial_author>Krishna Kasyap&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn JavaFX&lt;\/tutorial_title> \n      &lt;submission_date>06-07-2017&lt;\/submission_date> \n      &lt;tutorial_icon>https:\/\/www.codemeals.com\/javafx\/images\/javafx-minilogo.jpg&lt;\/tutorial_icon> \n      &lt;tutorial_description>JavaFX is a Java library used to build Rich Internet Applications. \n         The applications developed using JavaFX can run on various devices \n         such as Desktop Computers, Mobile Phones, TVs, Tablets, etc. \n         This tutorial, discusses all the necessary elements of JavaFX that are required\n         to develop effective Rich Internet Applications&lt;\/tutorial_description> \n   &lt;\/tutorial> \n&lt;\/tutorials><\/code><\/pre>\n\n\n\n<p><strong>Writer<\/strong>&nbsp;\u2212 The&nbsp;<strong>writer<\/strong>&nbsp;we are using in the application is&nbsp;<strong>JdbcBatchItemWriter<\/strong>&nbsp;to write the data to MySQL database. Assume we have created a table in MySQL inside a database called&nbsp;<strong>&#8220;details&#8221;<\/strong>.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE details.TUTORIALS( \n   tutorial_id int(10) NOT NULL, \n   tutorial_author VARCHAR(20), \n   tutorial_title VARCHAR(50), \n   submission_date VARCHAR(20), \n   tutorial_icon VARCHAR(200), \n   tutorial_description VARCHAR(1000) \n);<\/code><\/pre>\n\n\n\n<p><strong>Processor<\/strong>&nbsp;\u2212 The processor we are using in the application is a custom processor which writes the data of each record on the PDF document.<\/p>\n\n\n\n<p>In batch process, if&nbsp;<strong>&#8220;n&#8221;<\/strong>&nbsp;records or data elements were read, then for each record, it will read the data, process it, and write the data in the Writer. To process the data, it relays on the processor passed. In this case, in the custom processor class, we have written code to load a particular PDF document, create a new page, write the data item onto the PDF in a tabular format.<\/p>\n\n\n\n<p>Finally, if you execute this application, it reads all the data items from the XML document, stores them in the MySQL database, and prints them in the given PDF document in individual pages.<\/p>\n\n\n\n<h2>jobConfig.xml<\/h2>\n\n\n\n<p>Following is the configuration file of our sample Spring Batch application. In this file, we will define the Job and the steps. In addition to these, we also define the beans for ItemReader, ItemProcessor, and ItemWriter. (Here, we associate them with their respective classes and pass the values for the required properties to configure them.)<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:batch = \"http:\/\/www.springframework.org\/schema\/batch\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:util = \"http:\/\/www.springframework.org\/schema\/util\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/batch \n    \n      http:&#47;&#47;www.springframework.org\/schema\/batch\/spring-batch-2.2.xsd \n      http:\/\/www.springframework.org\/schema\/beans \n      http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd \n      http:\/\/www.springframework.org\/schema\/util     \n      http:\/\/www.springframework.org\/schema\/util\/spring-util-3.0.xsd \">  \n  \n   &lt;import resource = \"..\/jobs\/context.xml\" \/> \n  \n   &lt;bean id = \"itemProcessor\" class = \"CustomItemProcessor\" \/> \n   &lt;batch:job id = \"helloWorldJob\"> \n      &lt;batch:step id = \"step1\"> \n         &lt;batch:tasklet>           \n            &lt;batch:chunk reader = \"xmlItemReader\" writer = \"mysqlItemWriter\" processor = \"itemProcessor\">\n            &lt;\/batch:chunk> \n         &lt;\/batch:tasklet> \n      &lt;\/batch:step> \n   &lt;\/batch:job> \n                \n   &lt;bean id = \"xmlItemReader\" \n      class = \"org.springframework.batch.item.xml.StaxEventItemReader\"> \n      &lt;property name = \"fragmentRootElementName\" value = \"tutorial\" \/> \n      &lt;property name = \"resource\" value = \"classpath:resources\/tutorial.xml\" \/> \n      &lt;property name = \"unmarshaller\" ref = \"customUnMarshaller\" \/> \n   &lt;\/bean> \n      \n   &lt;bean id = \"customUnMarshaller\" class = \"org.springframework.oxm.xstream.XStreamMarshaller\">\n      &lt;property name = \"aliases\"> \n         &lt;util:map id = \"aliases\"> \n            &lt;entry key = \"tutorial\" value = \"Tutorial\" \/>            \n         &lt;\/util:map> \n      &lt;\/property> \n   &lt;\/bean>  \n   &lt;bean id = \"mysqlItemWriter\" class = \"org.springframework.batch.item.database.JdbcBatchItemWriter\"> \n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/> \n      &lt;property name = \"sql\"> \n         &lt;value> \n            &lt;!&#91;CDATA&#91;insert into details.tutorials (tutorial_id, tutorial_author, tutorial_title, \n               submission_date, tutorial_icon, tutorial_description) \n               values (:tutorial_id, :tutorial_author, :tutorial_title, :submission_date, \n               :tutorial_icon, :tutorial_description);]]>\n         &lt;\/value> \n      &lt;\/property>   \n      \n      &lt;property name = \"itemSqlParameterSourceProvider\"> \n         &lt;bean class = \"org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider\" \/> \n      &lt;\/property> \n   &lt;\/bean> \n&lt;\/beans>   <\/code><\/pre>\n\n\n\n<h2>Context.xml<\/h2>\n\n\n\n<p>Following is the&nbsp;<strong>context.xml<\/strong>&nbsp;of our Spring Batch application. In this file, we will define the beans like job repository, job launcher, and transaction manager.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:jdbc = \"http:\/\/www.springframework.org\/schema\/jdbc\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans \n      http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd \n      http:\/\/www.springframework.org\/schema\/jdbc \n      http:\/\/www.springframework.org\/schema\/jdbc\/spring-jdbc-3.2.xsd\"> \n   \n   &lt;!-- stored job-meta in database -->\n   &lt;bean id = \"jobRepository\" \n      class = \"org.springframework.batch.core.repository.support.JobRepositoryFactoryBean\"> \n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/> \n      &lt;property name = \"transactionManager\" ref = \"transactionManager\" \/> \n      &lt;property name = \"databaseType\" value = \"mysql\" \/> \n   &lt;\/bean>  \n \n   &lt;bean id = \"transactionManager\" \n   class = \"org.springframework.batch.support.transaction.ResourcelessTransactionMana ger\" \/>  \n   &lt;bean id = \"jobLauncher\" \n      class = \"org.springframework.batch.core.launch.support.SimpleJobLauncher\"> \n      &lt;property name = \"jobRepository\" ref = \"jobRepository\" \/> \n   &lt;\/bean> \n  \n   &lt;!-- connect to MySQL database --> \n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\"> \n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\" \/> \n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/details\" \/> \n      &lt;property name = \"username\" value = \"myuser\" \/> \n      &lt;property name = \"password\" value = \"password\" \/> \n   &lt;\/bean>  \n \n   &lt;!-- create job-meta tables automatically --> \n   &lt;jdbc:initialize-database data-source = \"dataSource\">   \n      &lt;jdbc:script location = \"org\/springframework\/batch\/core\/schema-drop-mysql.sql\"\/>   \n      &lt;jdbc:script location = \"org\/springframework\/batch\/core\/schema-mysql.sql\"\/> \n   &lt;\/jdbc:initialize-database> \n&lt;\/beans>  <\/code><\/pre>\n\n\n\n<h2>CustomItemProcessor.java<\/h2>\n\n\n\n<p>Following is the&nbsp;<strong>processor<\/strong>&nbsp;class. In this class, we write the code of processing in the application. Here, we are loading a PDF document, creating a new page, creating a table, and inserting the following values for each record: tutorial id, tutorial name, author, date of submission in the table.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.File; \nimport java.io.IOException;  \n\nimport org.apache.pdfbox.pdmodel.PDDocument; \nimport org.apache.pdfbox.pdmodel.PDPage; \nimport org.apache.pdfbox.pdmodel.PDPageContentStream; \nimport org.apache.pdfbox.pdmodel.font.PDType1Font; \nimport org.springframework.batch.item.ItemProcessor;  \n\npublic class CustomItemProcessor implements ItemProcessor&lt;Tutorial, Tutorial> {  \n   \n   public static void drawTable(PDPage page, PDPageContentStream contentStream, \n      float y, float margin, String&#91;]&#91;] content) throws IOException { \n      final int rows = content.length; \n      final int cols = content&#91;0].length; \n      final float rowHeight = 50; \n      final float tableWidth = page.getMediaBox().getWidth()-(2*margin); \n      final float tableHeight = rowHeight * rows; \n      final float colWidth = tableWidth\/(float)cols; \n      final float cellMargin=5f;  \n      \n      \/\/ draw the rows \n      float nexty = y ; \n      for (int i = 0; i &lt;= rows; i++) {   \n         contentStream.drawLine(margin,nexty,margin+tableWidth,nexty); \n         nexty-= rowHeight; \n      }  \n      \n      \/\/draw the columns \n      float nextx = margin; \n      for (int i = 0; i &lt;= cols; i++) {\n         contentStream.drawLine(nextx,y,nextx,y-tableHeight); \n         nextx += colWidth; \n      }  \n      \n      \/\/ now add the text    \n      contentStream.setFont(PDType1Font.HELVETICA_BOLD,12);  \n      \n      float textx = margin+cellMargin; \n      float texty = y-15; \n      for(int i = 0; i &lt; content.length; i++){ \n         for(int j = 0 ; j &lt; content&#91;i].length; j++){ \n            String text = content&#91;i]&#91;j]; \n            contentStream.beginText(); \n            contentStream.moveTextPositionByAmount(textx,texty); \n            contentStream.drawString(text); \n            contentStream.endText(); \n            textx += colWidth; \n         } \n        \n         texty-=rowHeight; \n         textx = margin+cellMargin; \n      } \n   }  \n   \n   @Override \n   public Tutorial process(Tutorial item) throws Exception { \n      System.out.println(\"Processing...\" + item); \n   \n      \/\/ Creating PDF document object \n      PDDocument doc = PDDocument.load(new File(\"C:\/Examples\/test.pdf\"));     \n      \n      \/\/ Creating a blank page \n      PDPage page = new PDPage(); \n      doc.addPage( page ); \n      PDPageContentStream contentStream =  new PDPageContentStream(doc, page);  \n      \n      String&#91;]&#91;] content = {{\"Id\",\"\"+item.getTutorial_id()},\n      {\"Title\", item.getTutorial_title()}, \n      {\"Authour\", item.getTutorial_author()}, \n      {\"Submission Date\", item.getSubmission_date()}} ;  \n      drawTable(page, contentStream, 700, 100, content);       \n      \n      contentStream.close(); \n      doc.save(\"C:\/Examples\/test.pdf\" ); \n      System.out.println(\"Hello\"); \n      return item; \n   }    \n}  <\/code><\/pre>\n\n\n\n<h2>TutorialFieldSetMapper.java<\/h2>\n\n\n\n<p>Following is the ReportFieldSetMapper class which sets the data to the Tutorial class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.item.file.mapping.FieldSetMapper; \nimport org.springframework.batch.item.file.transform.FieldSet; \nimport org.springframework.validation.BindException;  \n\npublic class TutorialFieldSetMapper implements FieldSetMapper&lt;Tutorial> { \n   \n   @Override \n   public Tutorial mapFieldSet(FieldSet fieldSet) throws BindException {   \n      \/\/ instantiating the Tutorial class \n      Tutorial tutorial = new Tutorial(); \n   \n      \/\/ Setting the fields from XML \n      tutorial.setTutorial_id(fieldSet.readInt(0));   \n      tutorial.setTutorial_title(fieldSet.readString(1)); \n      tutorial.setTutorial_author(fieldSet.readString(2)); \n      tutorial.setTutorial_icon(fieldSet.readString(3)); \n      tutorial.setTutorial_description(fieldSet.readString(4));   \n      return tutorial;  \n   }  \n} <\/code><\/pre>\n\n\n\n<h2>Tutorial.java<\/h2>\n\n\n\n<p>Following is the&nbsp;<strong>Tutorial<\/strong>&nbsp;class. It is a simple class with&nbsp;<strong>setter<\/strong>&nbsp;and&nbsp;<strong>getter<\/strong>&nbsp;methods.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Tutorial { \n   private int tutorial_id; \n   private String tutorial_author; \n   private String tutorial_title; \n   private String submission_date; \n   private String tutorial_icon; \n   private String tutorial_description;   \n   \n   @Override \n   public String toString() { \n      return \" &#91;id=\" + tutorial_id + \", author=\" + tutorial_author  \n         + \", title=\" + tutorial_title + \", date=\" + submission_date + \", icon =\" \n         +tutorial_icon +\", description = \"+tutorial_description+\"]\"; \n   }  \n   \n   public int getTutorial_id() { \n      return tutorial_id; \n   }  \n   \n   public void setTutorial_id(int tutorial_id) { \n      this.tutorial_id = tutorial_id; \n   }  \n   \n   public String getTutorial_author() { \n      return tutorial_author; \n   }  \n   \n   public void setTutorial_author(String tutorial_author) { \n      this.tutorial_author = tutorial_author; \n   }  \n   \n   public String getTutorial_title() { \n      return tutorial_title; \n   } \n   \n   public void setTutorial_title(String tutorial_title) { \n      this.tutorial_title = tutorial_title; \n   }  \n   \n   public String getSubmission_date() { \n      return submission_date; \n   }  \n   \n   public void setSubmission_date(String submission_date) { \n      this.submission_date = submission_date; \n   }  \n   \n   public String getTutorial_icon() { \n      return tutorial_icon; \n   }  \n   \n   public void setTutorial_icon(String tutorial_icon) { \n      this.tutorial_icon = tutorial_icon; \n   }  \n   \n   public String getTutorial_description() { \n      return tutorial_description; \n   }  \n   \n   public void setTutorial_description(String tutorial_description) { \n      this.tutorial_description = tutorial_description; \n   } \n}<\/code><\/pre>\n\n\n\n<h2>App.java<\/h2>\n\n\n\n<p>Following is the code which launces the batch process. In this class, we will launch the Batch Application by running the JobLauncher.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class App { \n   public static void main(String&#91;] args) throws Exception { \n      String&#91;] springConfig  = {    \"jobs\/job_hello_world.xml\" };  \n      \n      \/\/ Creating the application context object  \n      ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);  \n      \n      \/\/ Creating the job launcher \n      JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\"); \n   \n      \/\/ Creating the job \n      Job job = (Job) context.getBean(\"helloWorldJob\"); \n   \n      \/\/ Executing the JOB \n      JobExecution execution = jobLauncher.run(job, new JobParameters()); \n      System.out.println(\"Exit Status : \" + execution.getStatus()); \n   }    \n} <\/code><\/pre>\n\n\n\n<p>On executing this application, it will produce the following output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>May 05, 2017 4:39:22 PM org.springframework.context.support.ClassPathXmlApplicationContext \nprepareRefresh \nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@306a30c7: \nstartup date &#91;Fri May 05 16:39:22 IST 2017]; root of context hierarchy \nMay 05, 2017 4:39:23 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions \nMay 05, 2017 4:39:32 PM org.springframework.batch.core.job.SimpleStepHandler handleStep \nINFO: Executing step: &#91;step1] \nProcessing... &#91;id=1001, author=Sanjay, title=Learn Java, date=06-05-2007, \nicon =https:\/\/www.codemeals.com\/java\/images\/java-mini-logo.jpg, \ndescription = Java is a high-level programming language originally developed by Sun Microsystems \nand released in 1995. Java runs on a variety of platforms. \nThis tutorial gives a complete understanding of Java.');] \nHello \nProcessing.. &#91;id=1002, author=Abdul S, title=Learn MySQL, date=19-04-2007, \nicon =https:\/\/www.codemeals.com\/mysql\/images\/mysql-mini-logo.jpg, \ndescription = MySQL is the most popular Open Source Relational SQL database management system. \nMySQL is one of the best RDBMS being used for developing web-based software applications. \nThis tutorial will give you quick start with MySQL and make you comfortable with MySQL programming.] \nHello \nProcessing... &#91;id=1003, author=Krishna Kasyap, title=Learn JavaFX, date=06-072017, \nicon =https:\/\/www.codemeals.com\/javafx\/images\/javafx-mini-logo.jpg,\ndescription = JavaFX is a Java library used to build Rich Internet Applications. \nThe applications developed using JavaFX can run on various devices \nsuch as Desktop Computers, Mobile Phones, TVs, Tablets, etc. \nThis tutorial, discusses all the necessary elements of JavaFX \nthat are required to develop effective Rich Internet Applications] \nHello \nMay 05, 2017 4:39:36 PM org.springframework.batch.core.launch.support.SimpleJobLauncher run \nINFO: Job: &#91;FlowJob: &#91;name=helloWorldJob]] completed with the following parameters: &#91;{}] \nand the following status: &#91;COMPLETED] \nExit Status : COMPLETED <\/code><\/pre>\n\n\n\n<p>If you verify the&nbsp;<strong>details.tutorial<\/strong>&nbsp;table in the database, it will show you the following output \u2212<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>tutorial _id<\/th><th>tutorial _author<\/th><th>tutorial _title<\/th><th>submission _date<\/th><th>tutorial _icon<\/th><th>tutorial _description<\/th><\/tr><tr><td>1001<\/td><td>Sanjay<\/td><td>Learn Java<\/td><td>06-05-2007<\/td><td>https:\/\/www.codemeals.com \/java\/images\/ java-mini-logo.jpg<\/td><td>Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms. This tutorial gives a complete understanding of Java.<\/td><\/tr><tr><td>1002<\/td><td>Abdul S<\/td><td>Learn MySQL<\/td><td>19-04-2007<\/td><td>https:\/\/www. codemeals.com \/mysql\/images \/mysql-minilogo.jpg<\/td><td>MySQL is the most popular Open Source Relational SQL database management system. MySQL is one of the best RDBMS being used for developing web-based software applications. This tutorial will give you quick start with MySQL and make you comfortable with MySQL programming.<\/td><\/tr><tr><td>1003<\/td><td>Learn JavaFX<\/td><td>Krishna Kasyap<\/td><td>06-07-2017<\/td><td>https:\/\/www. codemeals.com \/javafx\/images\/ javafx-minilogo.jpg<\/td><td>MySQL is the most popular Open Source Relational SQL database management system. MySQL is one of the best RDBMS being used for developing web-based software applications. This tutorial will give you quick start with MySQL and make you comfortable with MySQL programming.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<p>This will generate a PDF with the records on each page as shown below.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/www.tutorialspoint.com\/spring_batch\/images\/page_thumbnails.jpg\" alt=\"Page Thumbnails\"\/><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will create a Spring Batch application which uses an XML Reader and a MySQL Writer. Reader&nbsp;\u2212 The reader we are using in the application is&nbsp;StaxEventItemReader&nbsp;to read data from XML documents. Following is the input XML document we are using in this application. This document holds data records which specify details like [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1075"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1075"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1075\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1192,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1075\/revisions\/1192"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1075"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1075"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1075"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1074,
        "date": "2020-07-23T11:50:08",
        "date_gmt": "2020-07-23T11:50:08",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1074"
        },
        "modified": "2020-07-23T11:50:08",
        "modified_gmt": "2020-07-23T11:50:08",
        "slug": "csv-to-xml",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/csv-to-xml\/",
        "title": {
            "rendered": "CSV to XML"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will create a simple Spring Batch application which uses a CSV Reader and an XML Writer.<\/p>\n\n\n\n<p><strong>Reader<\/strong>&nbsp;\u2212 The&nbsp;<strong>reader<\/strong>&nbsp;we are using in the application is&nbsp;<strong>FlatFileItemReader<\/strong>&nbsp;to read data from the CSV files.<\/p>\n\n\n\n<p>Following is the input CSV file we are using in this application. This document holds data records which specify details like tutorial id, tutorial author, tutorial title, submission date, tutorial icon and tutorial description.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>1001, \"Sanjay\", \"Learn Java\", 06\/05\/2007 \n1002, \"Abdul S\", \"Learn MySQL\", 19\/04\/2007 \n1003, \"Krishna Kasyap\", \"Learn JavaFX\", 06\/07\/2017\n\ufeff<\/code><\/pre>\n\n\n\n<p><strong>Writer<\/strong>&nbsp;\u2212 The Writer we are using in the application is&nbsp;<strong>StaxEventItemWriter<\/strong>&nbsp;to write the data to XML file.<\/p>\n\n\n\n<p><strong>Processor<\/strong>&nbsp;\u2212 The Processor we are using in the application is a custom processor which just prints the records read from the CSV file.<\/p>\n\n\n\n<h2>jobConfig.xml<\/h2>\n\n\n\n<p>Following is the configuration file of our sample Spring Batch application. In this file, we will define the Job and the steps. In addition to these, we also define the beans for ItemReader, ItemProcessor, and ItemWriter. (Here, we associate them with respective classes and pass the values for the required properties to configure them.)<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \" http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:batch = \"http:\/\/www.springframework.org\/schema\/batch\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/batch \n      http:&#47;&#47;www.springframework.org\/schema\/batch\/spring-batch-2.2.xsd \n      http:\/\/www.springframework.org\/schema\/beans \n      http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd\">  \n   \n   &lt;import resource = \"..\/jobs\/context.xml\" \/>  \n   \n   &lt;bean id = \"report\" class = \"Report\" scope = \"prototype\" \/> \n   &lt;bean id = \"itemProcessor\" class = \"CustomItemProcessor\" \/>  \n   \n   &lt;batch:job id = \"helloWorldJob\"> \n   \n      &lt;batch:step id = \"step1\"> \n   \n         &lt;batch:tasklet> \n            &lt;batch:chunk reader = \"cvsFileItemReader\" writer = \"xmlItemWriter\" \n               processor = \"itemProcessor\" commit-interval = \"10\"> \n            &lt;\/batch:chunk> \n         &lt;\/batch:tasklet> \n      &lt;\/batch:step> \n   &lt;\/batch:job>  \n \n   &lt;bean id = \"cvsFileItemReader\" \n      class = \"org.springframework.batch.item.file.FlatFileItemReader\">  \n      &lt;property name = \"resource\" value = \"classpath:resources\/report.csv\" \/> \n      &lt;property name = \"lineMapper\"> \n         &lt;bean \n            class = \"org.springframework.batch.item.file.mapping.DefaultLineMapper\"> \n            &lt;property name = \"lineTokenizer\"> \n               &lt;bean    \n                  class = \"org.springframework.batch.item.file.transform.DelimitedLineTokenizer\"> \n                  &lt;property name = \"names\" value = \"tutorial_id, \n                     tutorial_author, Tutorial_title, submission_date\" \/> \n               &lt;\/bean> \n            &lt;\/property> \n      \n            &lt;property name = \"fieldSetMapper\"> \n               &lt;bean class = \"ReportFieldSetMapper\" \/> \n            &lt;\/property> \n         &lt;\/bean> \n      &lt;\/property> \n   &lt;\/bean>  \n   \n   &lt;bean id = \"xmlItemWriter\" \n      class = \"org.springframework.batch.item.xml.StaxEventItemWriter\"> \n      &lt;property name = \"resource\" value = \"file:xml\/outputs\/tutorials.xml\" \/> \n      &lt;property name = \"marshaller\" ref = \"reportMarshaller\" \/> \n      &lt;property name = \"rootTagName\" value = \"tutorials\" \/> \n   &lt;\/bean>  \n \n   &lt;bean id = \"reportMarshaller\" \n      class = \"org.springframework.oxm.jaxb.Jaxb2Marshaller\">\n      &lt;property name = \"classesToBeBound\"> \n         &lt;list> \n            &lt;value>Tutorial&lt;\/value> \n         &lt;\/list> \n      &lt;\/property> \n   &lt;\/bean> \n&lt;\/beans> <\/code><\/pre>\n\n\n\n<h2>Context.xml<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>context.xml<\/strong>\u00a0of our Spring Batch application. In this file, we will define the beans like job repository, job launcher, and transaction manager.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:jdbc = \"http:\/\/www.springframework.org\/schema\/jdbc\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans \n      http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd \n      http:\/\/www.springframework.org\/schema\/jdbc \n      http:\/\/www.springframework.org\/schema\/jdbc\/spring-jdbc-3.2.xsd\">  \n   &lt;!-- stored job-meta in database --> \n   &lt;bean id = \"jobRepository\" \n      class = \"org.springframework.batch.core.repository.support.JobRepositoryFactoryBean\"> \n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/> \n      &lt;property name = \"transactionManager\" ref = \"transactionManager\" \/> \n      &lt;property name = \"databaseType\" value = \"mysql\" \/> \n   &lt;\/bean>  \n \n   &lt;bean id = \"transactionManager\" \n      class = \"org.springframework.batch.support.transaction.ResourcelessTransactionManager\" \/>  \n   &lt;bean id = \"jobLauncher\" \n      class = \"org.springframework.batch.core.launch.support.SimpleJobLauncher\"> \n      &lt;property name = \"jobRepository\" ref = \"jobRepository\" \/> \n   &lt;\/bean>  \n   \n   &lt;bean id = \"dataSource\" class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\"> \n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\" \/> \n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/details\" \/>\n      &lt;property name = \"username\" value = \"myuser\" \/> \n      &lt;property name = \"password\" value = \"password\" \/> \n   &lt;\/bean> \n  \n   &lt;!-- create job-meta tables automatically --> \n   &lt;jdbc:initialize-database data-source = \"dataSource\">   \n      &lt;jdbc:script location = \"org\/springframework\/batch\/core\/schema-drop-mysql.sql\" \/> \n      &lt;jdbc:script location = \"org\/springframework\/batch\/core\/schema-mysql.sql\" \/> \n   &lt;\/jdbc:initialize-database> \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>CustomItemProcessor.java<\/h2>\n\n\n\n<p>Following is the Processor class. In this class, we write the code of processing in the application. Here, we are printing the contents of each record.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.item.ItemProcessor;  \n\npublic class CustomItemProcessor implements ItemProcessor&lt;Tutorial, Tutorial> {  \n   \n   @Override \n   public Tutorial process(Tutorial item) throws Exception {  \n      System.out.println(\"Processing...\" + item); \n      return item; \n   } \n} <\/code><\/pre>\n\n\n\n<h2>TutorialFieldSetMapper.java<\/h2>\n\n\n\n<p>Following is the TutorialFieldSetMapper class which sets the data to the Tutorial class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.item.file.mapping.FieldSetMapper; \nimport org.springframework.batch.item.file.transform.FieldSet; \nimport org.springframework.validation.BindException;  \n\npublic class TutorialFieldSetMapper implements FieldSetMapper&lt;Tutorial> {  \n\n   @Override \n   public Tutorial mapFieldSet(FieldSet fieldSet) throws BindException {  \n      \n      \/\/Instantiating the report object  \n      Tutorial tutorial = new Tutorial(); \n       \n      \/\/Setting the fields  \n      tutorial.setTutorial_id(fieldSet.readInt(0)); \n      tutorial.setTutorial_author(fieldSet.readString(1)); \n      tutorial.setTutorial_title(fieldSet.readString(2)); \n      tutorial.setSubmission_date(fieldSet.readString(3)); \n       \n      return tutorial; \n   } \n}<\/code><\/pre>\n\n\n\n<h2>Tutorial.java class<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>Tutorial<\/strong>\u00a0class. It is a simple Java class with\u00a0<strong>setter<\/strong>\u00a0and\u00a0<strong>getter<\/strong>\u00a0methods. In this class, we are using annotations to associate the methods of this class with the tags of the XML file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import javax.xml.bind.annotation.XmlAttribute; \nimport javax.xml.bind.annotation.XmlElement; \nimport javax.xml.bind.annotation.XmlRootElement;  \n\n@XmlRootElement(name = \"tutorial\") \npublic class Tutorial {  \n   private int tutorial_id; \n   private String tutorial_author; \n   private String tutorial_title;\n   private String submission_date;  \n \n   @XmlAttribute(name = \"tutorial_id\") \n   public int getTutorial_id() { \n      return tutorial_id; \n   }  \n \n   public void setTutorial_id(int tutorial_id) { \n      this.tutorial_id = tutorial_id; \n   }  \n \n   @XmlElement(name = \"tutorial_author\") \n   public String getTutorial_author() { \n      return tutorial_author; \n   }  \n   public void setTutorial_author(String tutorial_author) { \n      this.tutorial_author = tutorial_author; \n   }  \n      \n   @XmlElement(name = \"tutorial_title\") \n   public String getTutorial_title() { \n      return tutorial_title; \n   }  \n   \n   public void setTutorial_title(String tutorial_title) { \n      this.tutorial_title = tutorial_title; \n   }  \n   \n   @XmlElement(name = \"submission_date\") \n   public String getSubmission_date() { \n      return submission_date; \n   }  \n   \n   public void setSubmission_date(String submission_date) { \n      this.submission_date = submission_date; \n   } \n   \n   @Override \n   public String toString() { \n      return \"  &#91;Tutorial id=\" + tutorial_id + \", \n         Tutorial Author=\" + tutorial_author  + \", \n         Tutorial Title=\" + tutorial_title + \", \n         Submission Date=\" + submission_date + \"]\"; \n   } \n}  <\/code><\/pre>\n\n\n\n<h2>App.java<\/h2>\n\n\n\n<p>Following is the code which launches the batch process. In this class, we will launch the batch application by running the JobLauncher.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.core.Job; \nimport org.springframework.batch.core.JobExecution; \nimport org.springframework.batch.core.JobParameters; \nimport org.springframework.batch.core.launch.JobLauncher; \nimport org.springframework.context.ApplicationContext; \nimport org.springframework.context.support.ClassPathXmlApplicationContext;  \n\npublic class App {  \n   public static void main(String&#91;] args) throws Exception { \n     \n      String&#91;] springConfig  =  { \"jobs\/job_hello_world.xml\" };  \n      \n      \/\/ Creating the application context object        \n      ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);  \n      \n      \/\/ Creating the job launcher \n      JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\"); \n   \n      \/\/ Creating the job \n      Job job = (Job) context.getBean(\"helloWorldJob\"); \n   \n      \/\/ Executing the JOB \n      JobExecution execution = jobLauncher.run(job, new JobParameters());\n      System.out.println(\"Exit Status : \" + execution.getStatus()); \n   } \n}       <\/code><\/pre>\n\n\n\n<p>On executing this application, it will produce the following output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>May 08, 2017 10:10:12 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh \nINFO: Refreshing \norg.springframework.context.support.ClassPathXmlApplicationContext@3d646c37: startup date \n&#91;Mon May 08 10:10:12 IST 2017]; root of context hierarchy \nMay 08, 2017 10:10:12 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions \nMay 08, 2017 10:10:15 AM org.springframework.jdbc.datasource.init.ScriptUtils executeSqlScript \nINFO: Executing step: &#91;step1] \nProcessing...  &#91;Tutorial id=1001, Tutorial Author=Sanjay, \nTutorial Title=Learn Java, Submission Date=06\/05\/2007] \nProcessing...  &#91;Tutorial id=1002, Tutorial Author=Abdul S, \nTutorial Title=Learn MySQL, Submission Date=19\/04\/2007] \nProcessing...  &#91;Tutorial id=1003, Tutorial Author=Krishna Kasyap, \nTutorial Title=Learn JavaFX, Submission Date=06\/07\/2017] \nMay 08, 2017 10:10:21 AM org.springframework.batch.core.launch.support.SimpleJobLauncher run \nINFO: Job: &#91;FlowJob: &#91;name=helloWorldJob]] completed with the following parameters: \n&#91;{}] and the following status: &#91;COMPLETED] \nExit Status : COMPLETED<\/code><\/pre>\n\n\n\n<p>This will generate an XML file with the following contents.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?> \n&lt;tutorials> \n   &lt;tutorial tutorial_id = \"1001\"> \n      &lt;submission_date>06\/05\/2007&lt;\/submission_date> \n      &lt;tutorial_author>Sanjay&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn Java&lt;\/tutorial_title> \n   &lt;\/tutorial> \n   \n   &lt;tutorial tutorial_id = \"1002\"> \n      &lt;submission_date>19\/04\/2007&lt;\/submission_date> \n      &lt;tutorial_author>Abdul S&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn MySQL&lt;\/tutorial_title> \n   &lt;\/tutorial> \n   \n   &lt;tutorial tutorial_id = \"1003\"> \n      &lt;submission_date>06\/07\/2017&lt;\/submission_date>\n      &lt;tutorial_author>Krishna Kasyap&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn JavaFX&lt;\/tutorial_title> \n   &lt;\/tutorial> \n&lt;\/tutorials><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will create a simple Spring Batch application which uses a CSV Reader and an XML Writer. Reader&nbsp;\u2212 The&nbsp;reader&nbsp;we are using in the application is&nbsp;FlatFileItemReader&nbsp;to read data from the CSV files. Following is the input CSV file we are using in this application. This document holds data records which specify details like [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1074"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1074"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1074\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1091,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1074\/revisions\/1091"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1074"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1074"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1074"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1073,
        "date": "2020-07-23T11:52:21",
        "date_gmt": "2020-07-23T11:52:21",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1073"
        },
        "modified": "2020-07-23T11:52:21",
        "modified_gmt": "2020-07-23T11:52:21",
        "slug": "mysql-to-xml",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/mysql-to-xml\/",
        "title": {
            "rendered": "MySQL to XML"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will create a Spring Batch application which uses a MySQL reader and an XML Writer.<\/p>\n\n\n\n<p><strong>Reader<\/strong>&nbsp;\u2212 The reader we are using in the application is&nbsp;<strong>JdbcCursorItemReader<\/strong>&nbsp;to read data from MySQL database.<\/p>\n\n\n\n<p>Assume we have created a table in the MySQL database as shown below \u2212<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE details.xml_mysql( \n   person_id int(10) NOT NULL, \n   sales VARCHAR(20), \n   qty int(3), \n   staffName VARCHAR(20), \n   date VARCHAR(20) \n);<\/code><\/pre>\n\n\n\n<p>Assume we have inserted the following records in to it.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">mysql&gt; select * from tutorialsdata; \n+-------------+-----------------+----------------+-----------------+ \n| tutorial_id | tutorial_author | tutorial_title | submission_date | \n+-------------+-----------------+----------------+-----------------+ \n|         101 | Sanjay          | Learn Java     | 06-05-2007      | \n|         102 | Abdul S         | Learn MySQL    | 19-04-2007      | \n|         103 | Krishna Kasyap  | Learn JavaFX   | 06-07-2017      | \n+-------------+-----------------+----------------+-----------------+ \n3 rows in set (0.00 sec) \n<\/pre>\n\n\n\n<p><strong>Writer<\/strong>&nbsp;\u2212 The Writer we are using in the application is&nbsp;<strong>StaxEventItemWriter<\/strong>&nbsp;to write the data to the XML file.<\/p>\n\n\n\n<p><strong>Processor<\/strong>&nbsp;\u2212 The Processor we are using in the application is a custom processor which just prints the records read from the CSV file.<\/p>\n\n\n\n<h2>jobConfig.xml<\/h2>\n\n\n\n<p>Following is the configuration file of our sample Spring Batch application. In this file, we will define the Job and the Steps. In addition to these, we also define the beans for ItemReader, ItemProcessor, and ItemWriter. (Here, we associate them with their respective classes and pass the values for the required properties to configure them.)<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:batch = \"http:\/\/www.springframework.org\/schema\/batch\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:util = \"http:\/\/www.springframework.org\/schema\/util\" \n   xsi:schemaLocation = \" http:\/\/www.springframework.org\/schema\/batch \n      http:&#47;&#47;www.springframework.org\/schema\/batch\/spring-batch-2.2.xsd \n      http:\/\/www.springframework.org\/schema\/beans \n      http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd\">  \n   \n   &lt;import resource = \"..\/jobs\/context.xml\" \/> \n  \n   &lt;bean id = \"report\" class = \"Report\" scope = \"prototype\" \/> \n   &lt;bean id = \"itemProcessor\" class = \"CustomItemProcessor\" \/>  \n   \n   &lt;batch:job id = \"helloWorldJob\"> \n      &lt;batch:step id = \"step1\"> \n         &lt;batch:tasklet> \n            &lt;batch:chunk reader = \"dbItemReader\" \n               writer = \"mysqlItemWriter\" processor = \"itemProcessor\" commit-interval = \"10\">\n            &lt;\/batch:chunk> \n         &lt;\/batch:tasklet> \n      &lt;\/batch:step> \n   &lt;\/batch:job> \n         \n   &lt;bean id = \"dbItemReader\" \n      class = \"org.springframework.batch.item.database.JdbcCursorItemReader\" scope = \"step\"> \n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/> \n      &lt;property name = \"sql\" value = \"select * from tutorials_data\" \/> \n      &lt;property name = \"rowMapper\"> \n         &lt;bean class = \"TutorialRowMapper\" \/> \n      &lt;\/property> \n   &lt;\/bean>             \n   &lt;bean id = \"mysqlItemWriter\" \n      class = \"org.springframework.batch.item.xml.StaxEventItemWriter\"> \n      &lt;property name = \"resource\" value = \"file:xml\/outputs\/tutorials.xml\" \/> \n      &lt;property name = \"marshaller\" ref = \"reportMarshaller\" \/>\n      &lt;property name = \"rootTagName\" value = \"Tutorial\" \/> \n   &lt;\/bean>  \n   \n   &lt;bean id = \"reportMarshaller\" class = \"org.springframework.oxm.jaxb.Jaxb2Marshaller\"> \n      &lt;property name = \"classesToBeBound\"> \n         &lt;list> \n            &lt;value>Tutorial&lt;\/value> \n         &lt;\/list> \n      &lt;\/property> \n   &lt;\/bean> \n&lt;\/beans><\/code><\/pre>\n\n\n\n<h2>Context.xml<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>context.xml<\/strong>\u00a0of our Spring Batch application. In this file, we will define the beans like job repository, job launcher, and transaction manager.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \" http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:jdbc = \"http:\/\/www.springframework.org\/schema\/jdbc\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans \n      http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd \n      http:\/\/www.springframework.org\/schema\/jdbc \n      http:\/\/www.springframework.org\/schema\/jdbc\/spring-jdbc-3.2.xsd \"> \n   \n   &lt;!-- stored job-meta in database --> \n   &lt;bean id = \"jobRepository\"  \n      class = \"org.springframework.batch.core.repository.support.JobRepositoryFactoryBean\"> \n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/> \n      &lt;property name = \"transactionManager\" ref = \"transactionManager\" \/> \n      &lt;property name = \"databaseType\" value = \"mysql\" \/> \n   &lt;\/bean>  \n   \n   &lt;bean id = \"transactionManager\" \n      class = \"org.springframework.batch.support.transaction.ResourcelessTransactionMana ger\" \/>  \n   &lt;bean id = \"jobLauncher\"\n      class = \"org.springframework.batch.core.launch.support.SimpleJobLauncher\"> \n      &lt;property name = \"jobRepository\" ref = \"jobRepository\" \/> \n   &lt;\/bean> \n  \n   &lt;!-- connect to MySQL database --> \n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\"> \n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\" \/> \n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/details\" \/> \n      &lt;property name = \"username\" value = \"myuser\" \/> \n      &lt;property name = \"password\" value = \"password\" \/> \n   &lt;\/bean> \n  \n   &lt;!-- create job-meta tables automatically --> \n   &lt;jdbc:initialize-database data-source = \"dataSource\">   \n      &lt;jdbc:script location = \"org\/springframework\/batch\/core\/schema-drop-mysql.sql\" \/>   \n      &lt;jdbc:script location = \"org\/springframework\/batch\/core\/schema-mysql.sql\" \/> \n   &lt;\/jdbc:initialize-database> \n&lt;\/beans>  <\/code><\/pre>\n\n\n\n<h2>CustomItemProcessor.java<\/h2>\n\n\n\n<p>Following is the Processor class. In this class, we write the code of processing in the application. Here, we are printing the contents of each record.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.item.ItemProcessor;  \n\npublic class CustomItemProcessor implements ItemProcessor&lt;Tutorial, Tutorial> {  \n\n   @Override \n   public Tutorial process(Tutorial item) throws Exception { \n      System.out.println(\"Processing...\" + item); \n      return item; \n   } \n} <\/code><\/pre>\n\n\n\n<h2>TutorialRowMapper.java<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>TutorialRowMapper<\/strong>\u00a0class which sets the data to the\u00a0<strong>Tutorial<\/strong>\u00a0class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.sql.ResultSet; \nimport java.sql.SQLException; \nimport org.springframework.jdbc.core.RowMapper;  \n\npublic class TutorialRowMapper implements RowMapper&lt;Tutorial> {  \n   \n   @Override \n   public Tutorial mapRow(ResultSet rs, int rowNum) throws SQLException {  \n      \n      Tutorial tutorial = new Tutorial();  \n      tutorial.setTutorial_id(rs.getInt(\"tutorial_id\")); \n      tutorial.setTutorial_author(rs.getString(\"tutorial_author\")); \n      tutorial.setTutorial_title(rs.getString(\"tutorial_title\")); \n      tutorial.setSubmission_date(rs.getString(\"submission_date\"));  \n      return tutorial; \n   } \n}<\/code><\/pre>\n\n\n\n<h2>Tutorial.java<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>Tutorial<\/strong>\u00a0class. It is a simple Java class with\u00a0<strong>setter<\/strong>\u00a0and\u00a0<strong>getter<\/strong>\u00a0methods. In this class, we are using annotations to associate the methods of this class with the tags of the XML file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import javax.xml.bind.annotation.XmlAttribute; \nimport javax.xml.bind.annotation.XmlElement; \nimport javax.xml.bind.annotation.XmlRootElement;  \n\n@XmlRootElement(name = \"details\") \npublic class Tutorial {  \n   \n   int tutorial_id; \n   String tutorial_author;\n   String submission_date; \n  \n   @XmlAttribute(name = \"tutorial_id\") \n   public int getTutorial_id() { \n      return tutorial_id; \n   }  \n   \n   public void setTutorial_id(int tutorial_id) { \n      this.tutorial_id = tutorial_id; \n   }  \n \n   @XmlElement(name = \"tutorial_author\") \n   public String getTutorial_author() { \n      return tutorial_author; \n   }  \n   \n   public void setTutorial_author(String tutorial_author) { \n      this.tutorial_author = tutorial_author; \n   }  \n \n   @XmlElement(name = \"tutorial_title\") \n   public String getTutorial_title() { \n      return tutorial_title; \n   } \n  \n   public void setTutorial_title(String tutorial_title) { \n      this.tutorial_title = tutorial_title; \n   }  \n \n   @XmlElement(name = \"submission_date\") \n   public String getSubmission_date() { \n      return submission_date; \n   }\n\n   public void setSubmission_date(String submission_date) { \n      this.submission_date = submission_date; \n   }  \n\n   public String toString() { \n      return \" &#91;Tutorial Id=\" + tutorial_id + \", \n      Tutorial Author =\" + tutorial_author  + \", \n      Tutorial Title =\" + tutorial_title + \", \n      Submission Date =\" + submission_date + \"]\"; \n   } \n} <\/code><\/pre>\n\n\n\n<h2>App.java<\/h2>\n\n\n\n<p>Following is the code which launces the batch process. In this class, we will launch the Batch Application by running the JobLauncher.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.core.Job; \nimport org.springframework.batch.core.JobExecution; \nimport org.springframework.batch.core.JobParameters; \nimport org.springframework.batch.core.launch.JobLauncher; \nimport org.springframework.context.ApplicationContext; \nimport org.springframework.context.support.ClassPathXmlApplicationContext;  \n\npublic class App {  \n   public static void main(String&#91;] args) throws Exception { \n     \n      String&#91;] springConfig  =  { \"jobs\/job_hello_world.xml\" };  \n      \n      \/\/ Creating the application context object  \n      ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);  \n      \n      \/\/ Creating the job launcher \n      JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\"); \n    \n      \/\/ Creating the job \n      Job job = (Job) context.getBean(\"helloWorldJob\");\n      \n      \/\/ Executing the JOB \n      JobExecution execution = jobLauncher.run(job, new JobParameters()); \n      System.out.println(\"Exit Status : \" + execution.getStatus()); \n   } \n}    <\/code><\/pre>\n\n\n\n<p>On executing this application, it will produce the following output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>May 08, 2017 11:32:06 AM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh \nINFO: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@3d646c37: \nstartup date &#91;Mon May 08 11:32:06 IST 2017]; root of context hierarchy \nMay 08, 2017 11:32:06 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions \nINFO: Loading XML bean definitions from class path resource &#91;jobs\/job_hello_world.xml] \nMay 08, 2017 11:32:07 AM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions   \nMay 08, 2017 11:32:14 AM org.springframework.batch.core.job.SimpleStepHandler handleStep \nINFO: Executing step: &#91;step1] \nProcessing... &#91;Tutorial Id=101, Tutorial Author=Sanjay, \nTutorial Title=Learn Java, Submission Date=06-05-2007] \nProcessing... &#91;Tutorial Id=102, Tutorial Author=Abdul S, \nTutorial Title=Learn MySQL, Submission Date=19-04-2007] \nProcessing... &#91;Tutorial Id=103, Tutorial Author=Krishna Kasyap, \nTutorial Title=Learn JavaFX, Submission Date=06-07-2017] \nMay 08, 2017 11:32:14 AM org.springframework.batch.core.launch.support.SimpleJobLauncher run \nINFO: Job: &#91;FlowJob: &#91;name=helloWorldJob]] completed with the following parameters: \n&#91;{}] and the following status: &#91;COMPLETED] \nExit Status : COMPLETED<\/code><\/pre>\n\n\n\n<p>This will generate an XML file with the following contents.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;?xml version = \"1.0\" encoding = \"UTF-8\"?> \n&lt;Tutorial> \n   &lt;details tutorial_id = \"101\"> \n      &lt;submission_date>06-05-2007&lt;\/submission_date> \n      &lt;tutorial_author>Sanjay&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn Java&lt;\/tutorial_title> \n   &lt;\/details> \n   \n   &lt;details tutorial_id = \"102\"> \n      &lt;submission_date>19-04-2007&lt;\/submission_date> \n      &lt;tutorial_author>Abdul S&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn MySQL&lt;\/tutorial_title> \n   &lt;\/details>  \n   \n   &lt;details tutorial_id = \"103\"> \n      &lt;submission_date>06-07-2017&lt;\/submission_date> \n      &lt;tutorial_author>Krishna Kasyap&lt;\/tutorial_author> \n      &lt;tutorial_title>Learn JavaFX&lt;\/tutorial_title> \n   &lt;\/details> \n&lt;\/Tutorial><\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will create a Spring Batch application which uses a MySQL reader and an XML Writer. Reader&nbsp;\u2212 The reader we are using in the application is&nbsp;JdbcCursorItemReader&nbsp;to read data from MySQL database. Assume we have created a table in the MySQL database as shown below \u2212 Assume we have inserted the following records [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1073"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1073"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1073\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1092,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1073\/revisions\/1092"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1073"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1073"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1073"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 1072,
        "date": "2020-07-23T11:55:38",
        "date_gmt": "2020-07-23T11:55:38",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=1072"
        },
        "modified": "2020-07-23T11:55:38",
        "modified_gmt": "2020-07-23T11:55:38",
        "slug": "mysql-to-flat-file",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/mysql-to-flat-file\/",
        "title": {
            "rendered": "MySQL to Flat File"
        },
        "content": {
            "rendered": "\n<p>In this chapter, we will create a Spring Batch application which uses an MySQL Reader and a&nbsp;<strong>Flatfile<\/strong>&nbsp;Writer (.txt ).<\/p>\n\n\n\n<p><strong>Reader<\/strong>&nbsp;\u2212 The Reader we are using in the application is&nbsp;<strong>JdbcCursorItemReader<\/strong>&nbsp;to read data from MySQL database.<\/p>\n\n\n\n<p>Assume we have created a table in the MySQL database as shown below.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>CREATE TABLE details.xml_mysql( \n   person_id int(10) NOT NULL, \n   sales VARCHAR(20), \n   qty int(3), \n   staffName VARCHAR(20), \n   date VARCHAR(20) \n); <\/code><\/pre>\n\n\n\n<p>Assume we have inserted the following records into it.<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">mysql&gt; select * from tutorialsdata; \n+-------------+-----------------+----------------+-----------------+ \n| tutorial_id | tutorial_author | tutorial_title | submission_date | \n+-------------+-----------------+----------------+-----------------+ \n|         101 | Sanjay          | Learn Java     | 06-05-2007      | \n|         102 | Abdul S         | Learn MySQL    | 19-04-2007      | \n|         103 | Krishna Kasyap  | Learn JavaFX   | 06-07-2017      | \n+-------------+-----------------+----------------+-----------------+ \n3 rows in set (0.00 sec) \n<\/pre>\n\n\n\n<p><strong>Writer<\/strong>&nbsp;\u2212 The Writer we are using in the application is&nbsp;<strong>FlatFileItemWriter<\/strong>&nbsp;to write the data to&nbsp;<strong>flatfile<\/strong>&nbsp;(.txt).<\/p>\n\n\n\n<p><strong>Processor<\/strong>&nbsp;\u2212 The Processor we are using in the application is a custom processor which just prints the records read from the CSV file.<\/p>\n\n\n\n<h2>jobConfig.xml<\/h2>\n\n\n\n<p>Following is the configuration file of our sample Spring Batch application. In this file, we will define the Job and the Steps. In addition to these, we also define the beans for ItemReader, ItemProcessor, and ItemWriter. (Here, we associate them with respective classes and pass the values for the required properties to configure them.)<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:batch = \"http:\/\/www.springframework.org\/schema\/batch\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:util = \"http:\/\/www.springframework.org\/schema\/util\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/batch \n   \n      http:&#47;&#47;www.springframework.org\/schema\/batch\/spring-batch-2.2.xsd \n      http:\/\/www.springframework.org\/schema\/beans \n      http:\/\/www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd\">  \n   \n   &lt;import resource = \"..\/jobs\/context.xml\" \/>  \n   &lt;bean id = \"tutorial\" class = \"Tutorial\" scope = \"prototype\" \/> \n   &lt;bean id = \"itemProcessor\" class = \"CustomItemProcessor\" \/>  \n   \n   &lt;batch:job id = \"helloWorldJob\"> \n      &lt;batch:step id = \"step1\"> \n         &lt;batch:tasklet> \n            &lt;batch:chunk reader = \"mysqlItemReader\" \n               writer = \"flatFileItemWriter\" processor = \"itemProcessor\" \n               commit-interval = \"10\"> \n            &lt;\/batch:chunk> \n         &lt;\/batch:tasklet> \n      &lt;\/batch:step> \n   &lt;\/batch:job> \n         \n   &lt;bean id = \"mysqlItemReader\" \n      class = \"org.springframework.batch.item.database.JdbcCursorItemReader\" > \n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/> \n      &lt;property name = \"sql\" value = \"select * from details.tutorialsdata\" \/> \n      &lt;property name = \"rowMapper\">  \n         &lt;bean class = \"TutorialRowMapper\" \/> \n      &lt;\/property> \n   &lt;\/bean>\n   \n   &lt;bean id = \"flatFileItemWriter\" \n      class = \" org.springframework.batch.item.file.FlatFileItemWriter\">      \n      &lt;property name = \"resource\" value = \"file:target\/outputfiles\/employee_output.txt\"\/> \n      &lt;property name = \"lineAggregator\"> \n         &lt;bean class = \" org.springframework.batch.item.file.transform.PassThroughLineAggregator\"\/> \n      &lt;\/property> \n   &lt;\/bean> \n&lt;\/beans> <\/code><\/pre>\n\n\n\n<h2>Context.xml<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>context.xml<\/strong>\u00a0of our Spring Batch application. In this file, we will define the beans like job repository, job launcher, and transaction manager.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;beans xmlns = \"http:\/\/www.springframework.org\/schema\/beans\" \n   xmlns:xsi = \"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" \n   xmlns:jdbc = \"http:\/\/www.springframework.org\/schema\/jdbc\" \n   xsi:schemaLocation = \"http:\/\/www.springframework.org\/schema\/beans \n      http:&#47;&#47;www.springframework.org\/schema\/beans\/spring-beans-3.2.xsd \n      http:\/\/www.springframework.org\/schema\/jdbc \n      http:\/\/www.springframework.org\/schema\/jdbc\/spring-jdbc-3.2.xsd \"> \n   \n   &lt;!-- stored job-meta in database --> \n   &lt;bean id = \"jobRepository\"  \n      class = \"org.springframework.batch.core.repository.support.JobRepositoryFactoryBean\"> \n      &lt;property name = \"dataSource\" ref = \"dataSource\" \/> \n      &lt;property name = \"transactionManager\" ref = \"transactionManager\" \/> \n      &lt;property name = \"databaseType\" value = \"mysql\" \/> \n   &lt;\/bean>  \n \n   &lt;bean id = \"transactionManager\"  \n      class = \"org.springframework.batch.support.transaction.ResourcelessTransactionManager\" \/>  \n   \n   &lt;bean id = \"dataSource\" \n      class = \"org.springframework.jdbc.datasource.DriverManagerDataSource\"> \n      &lt;property name = \"driverClassName\" value = \"com.mysql.jdbc.Driver\" \/> \n      &lt;property name = \"url\" value = \"jdbc:mysql:\/\/localhost:3306\/details\" \/> \n      &lt;property name = \"username\" value = \"myuser\" \/> \n      &lt;property name = \"password\" value = \"password\" \/> \n   &lt;\/bean> \n    \n   &lt;bean id = \"jobLauncher\"  \n      class = \"org.springframework.batch.core.launch.support.SimpleJobLauncher\"> \n      &lt;property name = \"jobRepository\" ref = \"jobRepository\" \/> \n   &lt;\/bean> \n  \n   &lt;!-- create job-meta tables automatically --> \n   &lt;jdbc:initialize-database data-source = \"dataSource\">   \n      &lt;jdbc:script location = \"org\/springframework\/batch\/core\/schema-drop-mysql.sql\" \/>   \n      &lt;jdbc:script location = \"org\/springframework\/batch\/core\/schema-mysql.sql\" \/> \n   &lt;\/jdbc:initialize-database> \n&lt;\/beans> <\/code><\/pre>\n\n\n\n<h2>CustomItemProcessor.java<\/h2>\n\n\n\n<p>Following is the Processor class. In this class, we write the code of processing in the application. Here, we are printing the contents of each record.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.item.ItemProcessor;  \n\n\/\/ Implementing the ItemProcessor interface \npublic class CustomItemProcessor implements ItemProcessor&lt;Tutorial, Tutorial> {  \n \n   @Override \n   public Tutorial process(Tutorial item) throws Exception { \n      System.out.println(\"Processing...\" + item); \n      return item; \n   } \n}<\/code><\/pre>\n\n\n\n<h2>TutorialRowMapper.java<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>TutorialRowMapper<\/strong>\u00a0class which sets the data to the\u00a0<strong>Tutorial<\/strong>\u00a0class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class TutorialRowMapper implements RowMapper&lt;Tutorial> {  \n   \n   @Override \n   public Tutorial mapRow(ResultSet rs, int rowNum) throws SQLException {  \n  \n      Tutorial tutorial = new Tutorial();  \n  \n      tutorial.setTutorial_id(rs.getInt(\"tutorial_id\")); \n      tutorial.setTutorial_title(rs.getString(\"tutorial_title\")); \n      tutorial.setTutorial_author(rs.getString(\"tutorial_author\")); \n      tutorial.setSubmission_date(rs.getString(\"submission_date\"));  \n      return tutorial; \n   } \n}<\/code><\/pre>\n\n\n\n<h2>Tutorial.java<\/h2>\n\n\n\n<p>Following is the\u00a0<strong>Tutorial<\/strong>\u00a0class. It is a simple Java class with\u00a0<strong>setter<\/strong>\u00a0and\u00a0<strong>getter<\/strong>\u00a0methods. In this class, we are using annotations to associate the methods of this class with the tags of the XML file.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class Tutorial { \n   private int tutorial_id; \n   private String tutorial_title; \n   private String tutorial_author; \n   private String submission_date; \n  \n   public int getTutorial_id() { \n      return tutorial_id; \n   }  \n   \n   public void setTutorial_id(int tutorial_id) { \n      this.tutorial_id = tutorial_id; \n   }\n   \n   public String getTutorial_title() { \n      return tutorial_title; \n   }   \n \n   public void setTutorial_title(String tutorial_title) { \n      this.tutorial_title = tutorial_title; \n   }  \n   \n   public String getTutorial_author() { \n      return tutorial_author; \n   }  \n \n   public void setTutorial_author(String tutorial_author) { \n      this.tutorial_author = tutorial_author; \n   }  \n \n   public String getSubmission_date() { \n      return submission_date; \n   }  \n   public void setSubmission_date(String submission_date) { \n      this.submission_date = submission_date; \n   }  \n \n   @Override \n   public String toString() { \n      return \" &#91;id=\" + tutorial_id + \", title=\" + \n      tutorial_title                      + \", \n      author=\" + tutorial_author + \", date=\" + \n      submission_date + \"]\"; \n   } \n}  <\/code><\/pre>\n\n\n\n<h2>App.java<\/h2>\n\n\n\n<p>Following is the code which launces the batch process. In this class, we will launch the Batch Application by running the JobLauncher.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import org.springframework.batch.core.Job; \nimport org.springframework.batch.core.JobExecution; \nimport org.springframework.batch.core.JobParameters; \nimport org.springframework.batch.core.launch.JobLauncher; \nimport org.springframework.context.ApplicationContext; \nimport org.springframework.context.support.ClassPathXmlApplicationContext;  \n\npublic class App {  \n   \n   public static void main(String&#91;] args) throws Exception { \n     \n      String&#91;] springConfig  =  { \"jobs\/job_hello_world.xml\" };  \n      \n      \/\/ Creating the application context object  \n      ApplicationContext context = new ClassPathXmlApplicationContext(springConfig);  \n      \n      \/\/ Creating the job launcher \n      JobLauncher jobLauncher = (JobLauncher) context.getBean(\"jobLauncher\"); \n    \n      \/\/ Creating the job \n      Job job = (Job) context.getBean(\"helloWorldJob\"); \n    \n      \/\/ Executing the JOB \n      JobExecution execution = jobLauncher.run(job, new JobParameters()); \n      System.out.println(\"Exit Status : \" + execution.getStatus()); \n   } \n}<\/code><\/pre>\n\n\n\n<p>On executing this application, it will produce the following output.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>May 09, 2017 5:44:48 PM org.springframework.context.support.ClassPathXmlApplicationContext prepareRefresh \nINFO: Refreshing org.springframework.context.support.ClassPathXml\nApplicationContext@3d646c37: startup date &#91;Tue May \n09 17:44:48 IST 2017]; root of context hierarchy \nMay 09, 2017 5:44:48 PM org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions  \nMay 09, 2017 5:44:56 PM org.springframework.batch.core.launch.support.SimpleJobLauncher run \nINFO: Job: &#91;FlowJob: &#91;name=helloWorldJob]] launched \nwith the following parameters: &#91;{}] \nMay 09, 2017 5:44:56 PM org.springframework.batch.core.job.SimpleStepHandler handleStep \nINFO: Executing step: &#91;step1] \nProcessing...Report &#91;id=101, title=Learn Java, author=Sanjay, date=06-05-2007] \nProcessing...Report &#91;id=102, title=Learn MySQL, author=Abdul S, date=19-04-2007] \nProcessing...Report &#91;id=103, title=Learn JavaFX, author=Krishna Kasyap, date=0607-2017] \nMay 09, 2017 5:44:57 PM org.springframework.batch.core.launch.support.SimpleJobLauncher run \nINFO: Job: &#91;FlowJob: &#91;name=helloWorldJob]] completed with the following parameters: \n&#91;{}] and the following status: &#91;COMPLETED] \nHello \nExit Status : COMPLETED <\/code><\/pre>\n\n\n\n<p>This will generate a\u00a0<strong>.txt<\/strong>\u00a0file with the following contents.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Report &#91;id=101, title=Learn Java, author=Sanjay, date=06-05-2007] \nReport &#91;id=102, title=Learn MySQL, author=Abdul S, date=19-04-2007] \nReport &#91;id=103, title=Learn JavaFX, author=Krishna Kasyap, date=06-07-2017] <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>In this chapter, we will create a Spring Batch application which uses an MySQL Reader and a&nbsp;Flatfile&nbsp;Writer (.txt ). Reader&nbsp;\u2212 The Reader we are using in the application is&nbsp;JdbcCursorItemReader&nbsp;to read data from MySQL database. Assume we have created a table in the MySQL database as shown below. Assume we have inserted the following records into [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            22
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1072"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=1072"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1072\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 1093,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/1072\/revisions\/1093"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=1072"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=1072"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=1072"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]