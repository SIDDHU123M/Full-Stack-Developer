[
    {
        "id": 309,
        "date": "2020-06-20T08:05:10",
        "date_gmt": "2020-06-20T08:05:10",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=309"
        },
        "modified": "2020-07-13T17:26:11",
        "modified_gmt": "2020-07-13T17:26:11",
        "slug": "arraylist",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/arraylist\/",
        "title": {
            "rendered": "ArrayList"
        },
        "content": {
            "rendered": "\n<p>Java&nbsp;<strong>ArrayList<\/strong>&nbsp;class uses a&nbsp;<em>dynamic&nbsp;array<\/em>&nbsp;for storing the elements. It is like an array, but there is&nbsp;<em>no size limit<\/em>. We can add or remove elements anytime. So, it is much more flexible than the traditional array. It is found in the&nbsp;<em>java.util<\/em>&nbsp;package. It is like the Vector in C++.<\/p>\n\n\n\n<p>The ArrayList in Java can have the duplicate elements also. It implements the List interface so we can use all the methods of List interface here. The ArrayList maintains the insertion order internally.<\/p>\n\n\n\n<p>It inherits the AbstractList class and implements&nbsp;List interface.<\/p>\n\n\n\n<p>The important points about Java ArrayList class are:<\/p>\n\n\n\n<ul><li>Java ArrayList class can contain duplicate elements.<\/li><li>Java ArrayList class maintains insertion order.<\/li><li>Java ArrayList class is non&nbsp;synchronized.<\/li><li>Java ArrayList allows random access because array works at the index basis.<\/li><li>In ArrayList, manipulation is little bit slower than the LinkedList in Java because a lot of shifting needs to occur if any element is removed from the array list.<\/li><\/ul>\n\n\n\n<h3>Hierarchy of ArrayList class<\/h3>\n\n\n\n<p>As shown in the above diagram, Java ArrayList class extends AbstractList class which implements List interface. The List interface extends the&nbsp;Collection&nbsp;and Iterable interfaces in hierarchical order.<\/p>\n\n\n\n<h3>ArrayList class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.ArrayList class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;ArrayList&lt;E&gt;&nbsp;<strong>extends<\/strong>&nbsp;AbstractList&lt;E&gt;&nbsp;<strong>implements<\/strong>&nbsp;List&lt;E&gt;,&nbsp;RandomAccess,&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Constructors of ArrayList<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>ArrayList()<\/td><td>It is used to build an empty array list.<\/td><\/tr><tr><td>ArrayList(Collection&lt;? extends E&gt; c)<\/td><td>It is used to build an array list that is initialized with the elements of the collection c.<\/td><\/tr><tr><td>ArrayList(int capacity)<\/td><td>It is used to build an array list that has the specified initial capacity.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Methods of ArrayList<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void&nbsp;add(int index, E element)<\/td><td>It is used to insert the specified element at the specified position in a list.<\/td><\/tr><tr><td>boolean&nbsp;add(E e)<\/td><td>It is used to append the specified element at the end of a list.<\/td><\/tr><tr><td>boolean&nbsp;addAll(Collection&lt;? extends E&gt; c)<\/td><td>It is used to append all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection&#8217;s iterator.<\/td><\/tr><tr><td>boolean&nbsp;addAll(int index, Collection&lt;? extends E&gt; c)<\/td><td>It is used to append all the elements in the specified collection, starting at the specified position of the list.<\/td><\/tr><tr><td>void&nbsp;clear()<\/td><td>It is used to remove all of the elements from this list.<\/td><\/tr><tr><td>void ensureCapacity(int requiredCapacity)<\/td><td>It is used to enhance the capacity of an ArrayList instance.<\/td><\/tr><tr><td>E get(int index)<\/td><td>It is used to fetch the element from the particular position of the list.<\/td><\/tr><tr><td>boolean isEmpty()<\/td><td>It returns true if the list is empty, otherwise false.<\/td><\/tr><tr><td>Iterator()<\/td><td><\/td><\/tr><tr><td>listIterator()<\/td><td><\/td><\/tr><tr><td>int lastIndexOf(Object o)<\/td><td>It is used to return the index in this list of the last occurrence of the specified element, or -1 if the list does not contain this element.<\/td><\/tr><tr><td>Object[] toArray()<\/td><td>It is used to return an array containing all of the elements in this list in the correct order.<\/td><\/tr><tr><td>&lt;T&gt; T[] toArray(T[] a)<\/td><td>It is used to return an array containing all of the elements in this list in the correct order.<\/td><\/tr><tr><td>Object clone()<\/td><td>It is used to return a shallow copy of an ArrayList.<\/td><\/tr><tr><td>boolean contains(Object o)<\/td><td>It returns true if the list contains the specified element<\/td><\/tr><tr><td>int indexOf(Object o)<\/td><td>It is used to return the index in this list of the first occurrence of the specified element, or -1 if the List does not contain this element.<\/td><\/tr><tr><td>E remove(int index)<\/td><td>It is used to remove the element present at the specified position in the list.<\/td><\/tr><tr><td>boolean&nbsp;remove(Object o)<\/td><td>It is used to remove the first occurrence of the specified element.<\/td><\/tr><tr><td>boolean&nbsp;removeAll(Collection&lt;?&gt; c)<\/td><td>It is used to remove all the elements from the list.<\/td><\/tr><tr><td>boolean removeIf(Predicate&lt;? super E&gt; filter)<\/td><td>It is used to remove all the elements from the list that satisfies the given predicate.<\/td><\/tr><tr><td>protected void&nbsp;removeRange(int fromIndex, int toIndex)<\/td><td>It is used to remove all the elements lies within the given range.<\/td><\/tr><tr><td>void replaceAll(UnaryOperator&lt;E&gt; operator)<\/td><td>It is used to replace all the elements from the list with the specified element.<\/td><\/tr><tr><td>void&nbsp;retainAll(Collection&lt;?&gt; c)<\/td><td>It is used to retain all the elements in the list that are present in the specified collection.<\/td><\/tr><tr><td>E set(int index, E element)<\/td><td>It is used to replace the specified element in the list, present at the specified position.<\/td><\/tr><tr><td>void sort(Comparator&lt;? super E&gt; c)<\/td><td>It is used to sort the elements of the list on the basis of specified comparator.<\/td><\/tr><tr><td>Spliterator&lt;E&gt; spliterator()<\/td><td>It is used to create spliterator over the elements in a list.<\/td><\/tr><tr><td>List&lt;E&gt; subList(int fromIndex, int toIndex)<\/td><td>It is used to fetch all the elements lies within the given range.<\/td><\/tr><tr><td>int size()<\/td><td>It is used to return the number of elements present in the list.<\/td><\/tr><tr><td>void trimToSize()<\/td><td>It is used to trim the capacity of this ArrayList instance to be the list&#8217;s current size.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java Non-generic Vs. Generic Collection<\/h3>\n\n\n\n<p>Java collection framework was non-generic before JDK 1.5. Since 1.5, it is generic.<\/p>\n\n\n\n<p>Java new generic collection allows you to have only one type of object in a collection. Now it is type safe so typecasting is not required at runtime.<\/p>\n\n\n\n<p>Let&#8217;s see the old non-generic example of creating java collection.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ArrayList list=new ArrayList();\/\/creating old non-generic arraylist  <\/code><\/pre>\n\n\n\n<p>Let&#8217;s see the new generic example of creating java collection.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>ArrayList&lt;String> list=new ArrayList&lt;String>();\/\/creating new generic arraylist  <\/code><\/pre>\n\n\n\n<p>In a generic collection, we specify the type in angular braces. Now ArrayList is forced to have the only specified type of objects in it. If you try to add another type of object, it gives&nbsp;<em>compile time error<\/em>.<\/p>\n\n\n\n<p>For more information on Java generics, click here&nbsp;Java Generics Tutorial.<\/p>\n\n\n\n<h3>Java ArrayList Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \n public class ArrayListExample1{  \n public static void main(String args&#91;]){  \n  ArrayList&lt;String> list=new ArrayList&lt;String>();\/\/Creating arraylist    \n      list.add(\"Mango\");\/\/Adding object in arraylist    \n      list.add(\"Apple\");    \n      list.add(\"Banana\");    \n      list.add(\"Grapes\");    \n      \/\/Printing the arraylist object   \n      System.out.println(list);  \n }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;Mango, Apple, Banana, Grapes]\n<\/code><\/pre>\n\n\n\n<h3>Iterating ArrayList using Iterator<\/h3>\n\n\n\n<p>Let&#8217;s see an example to traverse ArrayList elements using the Iterator interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ArrayListExample2{  \n public static void main(String args&#91;]){  \n  ArrayList&lt;String> list=new ArrayList&lt;String>();\/\/Creating arraylist  \n  list.add(\"Mango\");\/\/Adding object in arraylist    \n  list.add(\"Apple\");    \n  list.add(\"Banana\");    \n  list.add(\"Grapes\");    \n  \/\/Traversing list through Iterator  \n  Iterator itr=list.iterator();\/\/getting the Iterator  \n  while(itr.hasNext()){\/\/check if iterator has the elements  \n   System.out.println(itr.next());\/\/printing the element and move to next  \n  }  \n }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Mango\nApple\nBanana\nGrapes<\/code><\/pre>\n\n\n\n<h3>Iterating ArrayList using For-each loop<\/h3>\n\n\n\n<p>Let&#8217;s see an example to traverse the ArrayList elements using the for-each loop<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ArrayListExample3{  \n public static void main(String args&#91;]){  \n  ArrayList&lt;String> list=new ArrayList&lt;String>();\/\/Creating arraylist  \n  list.add(\"Mango\");\/\/Adding object in arraylist    \n  list.add(\"Apple\");    \n  list.add(\"Banana\");    \n  list.add(\"Grapes\");    \n  \/\/Traversing list through for-each loop  \n  for(String fruit:list)    \n    System.out.println(fruit);    \n  \n }  \n} <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Mango\nApple\nBanana\nGrapes<\/code><\/pre>\n\n\n\n<h3>Get and Set ArrayList<\/h3>\n\n\n\n<p>The&nbsp;<em>get() method<\/em>&nbsp;returns the element at the specified index, whereas the&nbsp;<em>set() method<\/em>&nbsp;changes the element.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ArrayListExample4{  \n public static void main(String args&#91;]){  \n  ArrayList&lt;String> al=new ArrayList&lt;String>();  \n  al.add(\"Mango\");  \n  al.add(\"Apple\");  \n  al.add(\"Banana\");  \n  al.add(\"Grapes\");  \n  \/\/accessing the element    \n  System.out.println(\"Returning element: \"+al.get(1));\/\/it will return the 2nd element, because index starts from 0  \n  \/\/changing the element  \n  al.set(1,\"Dates\");  \n  \/\/Traversing list  \n  for(String fruit:al)    \n    System.out.println(fruit);    \n  \n }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Returning element: Apple\nMango\nDates\nBanana\nGrapes<\/code><\/pre>\n\n\n\n<h3>How to Sort ArrayList<\/h3>\n\n\n\n<p>The&nbsp;<em>java.util<\/em>&nbsp;package provides a utility class&nbsp;<strong>Collections<\/strong>&nbsp;which has the static method sort(). Using the&nbsp;<strong>Collections.sort()<\/strong>&nbsp;method, we can easily sort the ArrayList.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass SortArrayList{  \n public static void main(String args&#91;]){  \n  \/\/Creating a list of fruits  \n  List&lt;String> list1=new ArrayList&lt;String>();  \n  list1.add(\"Mango\");  \n  list1.add(\"Apple\");  \n  list1.add(\"Banana\");  \n  list1.add(\"Grapes\");  \n  \/\/Sorting the list  \n  Collections.sort(list1);  \n   \/\/Traversing list through the for-each loop  \n  for(String fruit:list1)  \n    System.out.println(fruit);  \n      \n System.out.println(\"Sorting numbers...\");  \n  \/\/Creating a list of numbers  \n  List&lt;Integer> list2=new ArrayList&lt;Integer>();  \n  list2.add(21);  \n  list2.add(11);  \n  list2.add(51);  \n  list2.add(1);  \n  \/\/Sorting the list  \n  Collections.sort(list2);  \n   \/\/Traversing list through the for-each loop  \n  for(Integer number:list2)  \n    System.out.println(number);  \n }  \n   \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Apple\nBanana\nGrapes\nMango\nSorting numbers...\n1\n11\n21\n51<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Ways to iterate the elements of the collection in Java<\/h3>\n\n\n\n<p>There are various ways to traverse the collection elements:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>By Iterator interface.\nBy for-each loop.\nBy ListIterator interface.\nBy for loop.\nBy forEach() method.\nBy forEachRemaining() method.<\/code><\/pre>\n\n\n\n<h3>Iterating Collection through remaining ways<\/h3>\n\n\n\n<p>Let&#8217;s see an example to traverse the ArrayList elements through other ways<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass ArrayList4{  \n public static void main(String args&#91;]){  \n    ArrayList&lt;String> list=new ArrayList&lt;String>();\/\/Creating arraylist  \n           list.add(\"Ravi\");\/\/Adding object in arraylist  \n           list.add(\"Vijay\");  \n           list.add(\"Ravi\");  \n           list.add(\"Ajay\");  \n            \n           System.out.println(\"Traversing list through List Iterator:\");  \n           \/\/Here, element iterates in reverse order  \n              ListIterator&lt;String> list1=list.listIterator(list.size());  \n              while(list1.hasPrevious())  \n              {  \n                  String str=list1.previous();  \n                  System.out.println(str);  \n              }  \n        System.out.println(\"Traversing list through for loop:\");  \n           for(int i=0;i&lt;list.size();i++)  \n           {  \n            System.out.println(list.get(i));     \n           }  \n              \n        System.out.println(\"Traversing list through forEach() method:\");  \n        \/\/The forEach() method is a new feature, introduced in Java 8.  \n            list.forEach(a->{ \/\/Here, we are using lambda expression  \n                System.out.println(a);  \n              });  \n                \n            System.out.println(\"Traversing list through forEachRemaining() method:\");  \n              Iterator&lt;String> itr=list.iterator();  \n              itr.forEachRemaining(a-> \/\/Here, we are using lambda expression  \n              {  \n            System.out.println(a);  \n              });  \n }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">Traversing list through List Iterator:\nAjay\nRavi\nVijay\nRavi\nTraversing list through for loop:\nRavi\nVijay\nRavi\nAjay\nTraversing list through forEach() method:\nRavi\nVijay\nRavi\nAjay\nTraversing list through forEachRemaining() method:\nRavi\nVijay\nRavi\nAjay\n\n<\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>User-defined class objects in Java ArrayList<\/h3>\n\n\n\n<p>Let&#8217;s see an example where we are storing Student class object in an array list.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \n  int rollno;  \n  String name;  \n  int age;  \n  Student(int rollno,String name,int age){  \n   this.rollno=rollno;  \n   this.name=name;  \n   this.age=age;  \n  }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \n class ArrayList5{  \n public static void main(String args&#91;]){  \n  \/\/Creating user-defined class objects  \n  Student s1=new Student(101,\"Sonoo\",23);  \n  Student s2=new Student(102,\"Ravi\",21);  \n  Student s2=new Student(103,\"Hanumat\",25);  \n  \/\/creating arraylist  \n  ArrayList&lt;Student> al=new ArrayList&lt;Student>();  \n  al.add(s1);\/\/adding Student class object  \n  al.add(s2);  \n  al.add(s3);  \n  \/\/Getting Iterator  \n  Iterator itr=al.iterator();  \n  \/\/traversing elements of ArrayList object  \n  while(itr.hasNext()){  \n    Student st=(Student)itr.next();  \n    System.out.println(st.rollno+\" \"+st.name+\" \"+st.age);  \n  }  \n }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> 101 Sonoo 23\n       102 Ravi 21\n       103 Hanumat 25<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java ArrayList Serialization and Deserialization Example<\/h3>\n\n\n\n<p>Let&#8217;s see an example to serialize an ArrayList object and then deserialize it.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.io.*;  \nimport java.util.*;  \n class ArrayList6 {  \n  \n        public static void main(String &#91;] args)  \n        {  \n          ArrayList&lt;String> al=new ArrayList&lt;String>();  \n          al.add(\"Ravi\");    \n          al.add(\"Vijay\");    \n          al.add(\"Ajay\");    \n            \n          try  \n          {  \n              \/\/Serialization  \n              FileOutputStream fos=new FileOutputStream(\"file\");  \n              ObjectOutputStream oos=new ObjectOutputStream(fos);  \n              oos.writeObject(al);  \n              fos.close();  \n              oos.close();  \n              \/\/Deserialization  \n              FileInputStream fis=new FileInputStream(\"file\");  \n              ObjectInputStream ois=new ObjectInputStream(fis);  \n            ArrayList  list=(ArrayList)ois.readObject();  \n            System.out.println(list);    \n          }catch(Exception e)  \n          {  \n              System.out.println(e);  \n          }  \n       }  \n    } <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>       &#91;Ravi, Vijay, Ajay]\n<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java ArrayList example to add elements<\/h3>\n\n\n\n<p>Here, we see different ways to add an element.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \n class ArrayList7{  \n public static void main(String args&#91;]){  \n  ArrayList&lt;String> al=new ArrayList&lt;String>();  \n           System.out.println(\"Initial list of elements: \"+al);  \n           \/\/Adding elements to the end of the list  \n           al.add(\"Ravi\");  \n           al.add(\"Vijay\");  \n           al.add(\"Ajay\");  \n           System.out.println(\"After invoking add(E e) method: \"+al);  \n           \/\/Adding an element at the specific position  \n           al.add(1, \"Gaurav\");  \n           System.out.println(\"After invoking add(int index, E element) method: \"+al);  \n           ArrayList&lt;String> al2=new ArrayList&lt;String>();  \n           al2.add(\"Sonoo\");  \n           al2.add(\"Hanumat\");  \n           \/\/Adding second list elements to the first list  \n           al.addAll(al2);  \n           System.out.println(\"After invoking addAll(Collection&lt;? extends E> c) method: \"+al);  \n           ArrayList&lt;String> al3=new ArrayList&lt;String>();  \n           al3.add(\"John\");  \n           al3.add(\"Rahul\");  \n           \/\/Adding second list elements to the first list at specific position  \n           al.addAll(1, al3);  \n           System.out.println(\"After invoking addAll(int index, Collection&lt;? extends E> c) method: \"+al);  \n             \n }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \n class ArrayList8 {  \n  \n        public static void main(String &#91;] args)  \n        {  \n          ArrayList&lt;String> al=new ArrayList&lt;String>();  \n          al.add(\"Ravi\");    \n          al.add(\"Vijay\");    \n          al.add(\"Ajay\");   \n          al.add(\"Anuj\");  \n          al.add(\"Gaurav\");  \n          System.out.println(\"An initial list of elements: \"+al);   \n          \/\/Removing specific element from arraylist  \n          al.remove(\"Vijay\");  \n          System.out.println(\"After invoking remove(object) method: \"+al);   \n          \/\/Removing element on the basis of specific position  \n          al.remove(0);  \n          System.out.println(\"After invoking remove(index) method: \"+al);   \n            \n          \/\/Creating another arraylist  \n          ArrayList&lt;String> al2=new ArrayList&lt;String>();    \n          al2.add(\"Ravi\");    \n          al2.add(\"Hanumat\");    \n          \/\/Adding new elements to arraylist  \n          al.addAll(al2);  \n          System.out.println(\"Updated list : \"+al);   \n          \/\/Removing all the new elements from arraylist  \n          al.removeAll(al2);  \n          System.out.println(\"After invoking removeAll() method: \"+al);   \n          \/\/Removing elements on the basis of specified condition  \n          al.removeIf(str -> str.contains(\"Ajay\"));   \/\/Here, we are using Lambda expression   \n          System.out.println(\"After invoking removeIf() method: \"+al);  \n          \/\/Removing all the elements available in the list  \n          al.clear();  \n          System.out.println(\"After invoking clear() method: \"+al);   \n       }  \n    }  <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java ArrayList example to remove elements<\/h3>\n\n\n\n<p>Here, we see different ways to remove an element.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \n class ArrayList8 {  \n  \n        public static void main(String &#91;] args)  \n        {  \n          ArrayList&lt;String> al=new ArrayList&lt;String>();  \n          al.add(\"Ravi\");    \n          al.add(\"Vijay\");    \n          al.add(\"Ajay\");   \n          al.add(\"Anuj\");  \n          al.add(\"Gaurav\");  \n          System.out.println(\"An initial list of elements: \"+al);   \n          \/\/Removing specific element from arraylist  \n          al.remove(\"Vijay\");  \n          System.out.println(\"After invoking remove(object) method: \"+al);   \n          \/\/Removing element on the basis of specific position  \n          al.remove(0);  \n          System.out.println(\"After invoking remove(index) method: \"+al);   \n            \n          \/\/Creating another arraylist  \n          ArrayList&lt;String> al2=new ArrayList&lt;String>();    \n          al2.add(\"Ravi\");    \n          al2.add(\"Hanumat\");    \n          \/\/Adding new elements to arraylist  \n          al.addAll(al2);  \n          System.out.println(\"Updated list : \"+al);   \n          \/\/Removing all the new elements from arraylist  \n          al.removeAll(al2);  \n          System.out.println(\"After invoking removeAll() method: \"+al);   \n          \/\/Removing elements on the basis of specified condition  \n          al.removeIf(str -> str.contains(\"Ajay\"));   \/\/Here, we are using Lambda expression   \n          System.out.println(\"After invoking removeIf() method: \"+al);  \n          \/\/Removing all the elements available in the list  \n          al.clear();  \n          System.out.println(\"After invoking clear() method: \"+al);   \n       }  \n    }  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>An initial list of elements: &#91;Ravi, Vijay, Ajay, Anuj, Gaurav]\nAfter invoking remove(object) method: &#91;Ravi, Ajay, Anuj, Gaurav]\nAfter invoking remove(index) method: &#91;Ajay, Anuj, Gaurav]\nUpdated list : &#91;Ajay, Anuj, Gaurav, Ravi, Hanumat]\nAfter invoking removeAll() method: &#91;Ajay, Anuj, Gaurav]\nAfter invoking removeIf() method: &#91;Anuj, Gaurav]\nAfter invoking clear() method: &#91;]<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java ArrayList example of retainAll() method<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass ArrayList9{  \n public static void main(String args&#91;]){  \n  ArrayList&lt;String> al=new ArrayList&lt;String>();  \n  al.add(\"Ravi\");  \n  al.add(\"Vijay\");  \n  al.add(\"Ajay\");  \n  ArrayList&lt;String> al2=new ArrayList&lt;String>();  \n  al2.add(\"Ravi\");  \n  al2.add(\"Hanumat\");  \n  al.retainAll(al2);  \n  System.out.println(\"iterating the elements after retaining the elements of al2\");  \n  Iterator itr=al.iterator();  \n  while(itr.hasNext()){  \n   System.out.println(itr.next());  \n  }  \n }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code> iterating the elements after retaining the elements of al2\n       Ravi<\/code><\/pre>\n\n\n\n<h3>Java ArrayList example of isEmpty() method<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \n class ArrayList10{  \n  \n        public static void main(String &#91;] args)  \n        {  \n          ArrayList&lt;String> al=new ArrayList&lt;String>();  \n          System.out.println(\"Is ArrayList Empty: \"+al.isEmpty());  \n          al.add(\"Ravi\");    \n          al.add(\"Vijay\");    \n          al.add(\"Ajay\");    \n          System.out.println(\"After Insertion\");  \n          System.out.println(\"Is ArrayList Empty: \"+al.isEmpty());   \n       }  \n    } <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Is ArrayList Empty: true\nAfter Insertion\nIs ArrayList Empty: false<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java ArrayList Example: Book<\/h3>\n\n\n\n<p>Let&#8217;s see an ArrayList example where we are adding books to list and printing all the books.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Book {  \nint id;  \nString name,author,publisher;  \nint quantity;  \npublic Book(int id, String name, String author, String publisher, int quantity) {  \n    this.id = id;  \n    this.name = name;  \n    this.author = author;  \n    this.publisher = publisher;  \n    this.quantity = quantity;  \n}  \n}  \npublic class ArrayListExample20 {  \npublic static void main(String&#91;] args) {  \n    \/\/Creating list of Books  \n    List&lt;Book> list=new ArrayList&lt;Book>();  \n    \/\/Creating Books  \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);  \n    Book b2=new Book(102,\"Data Communications and Networking\",\"Forouzan\",\"Mc Graw Hill\",4);  \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);  \n    \/\/Adding Books to list  \n    list.add(b1);  \n    list.add(b2);  \n    list.add(b3);  \n    \/\/Traversing list  \n    for(Book b:list){  \n        System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);  \n    }  \n}  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-preformatted\">101 Let us C Yashwant Kanetkar BPB 8\n102 Data Communications and Networking Forouzan Mc Graw Hill 4\n103 Operating System Galvin Wiley 6<\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java&nbsp;ArrayList&nbsp;class uses a&nbsp;dynamic&nbsp;array&nbsp;for storing the elements. It is like an array, but there is&nbsp;no size limit. We can add or remove elements anytime. So, it is much more flexible than the traditional array. It is found in the&nbsp;java.util&nbsp;package. It is like the Vector in C++. The ArrayList in Java can have the duplicate elements also. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/309"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=309"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/309\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 844,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/309\/revisions\/844"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=309"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=309"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=309"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 310,
        "date": "2020-06-20T08:08:46",
        "date_gmt": "2020-06-20T08:08:46",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=310"
        },
        "modified": "2020-07-13T17:27:15",
        "modified_gmt": "2020-07-13T17:27:15",
        "slug": "linkedlist-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/linkedlist-class\/",
        "title": {
            "rendered": "LinkedList class"
        },
        "content": {
            "rendered": "\n<p>Java LinkedList class uses a doubly linked list to store the elements. It provides a linked-list data structure. It inherits the AbstractList class and implements List and Deque interfaces.<\/p>\n\n\n\n<p>The important points about Java LinkedList are:<\/p>\n\n\n\n<ul><li>Java LinkedList class can contain duplicate elements.<\/li><li>Java LinkedList class maintains insertion order.<\/li><li>Java LinkedList class is non synchronized.<\/li><li>In Java LinkedList class, manipulation is fast because no shifting needs to occur.<\/li><li>Java LinkedList class can be used as a list, stack or queue.<\/li><\/ul>\n\n\n\n<h3>Hierarchy of LinkedList class<\/h3>\n\n\n\n<p>As shown in the above diagram, Java LinkedList class extends AbstractSequentialList class and implements List and Deque interfaces.<\/p>\n\n\n\n<h3>Doubly Linked List<\/h3>\n\n\n\n<p>In the case of a doubly linked list, we can add or remove elements from both sides.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/doubly-linked-list.png\" alt=\"java LinkedList class using doubly linked list\"\/><\/figure>\n\n\n\n<h3>LinkedList class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.LinkedList class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class LinkedList&lt;E> extends AbstractSequentialList&lt;E> implements List&lt;E>, Deque&lt;E>, Cloneable, Serializable  <\/code><\/pre>\n\n\n\n<h3>Constructors of Java LinkedList<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>LinkedList()<\/td><td>It is used to construct an empty list.<\/td><\/tr><tr><td>LinkedList(Collection&lt;? extends E&gt; c)<\/td><td>It is used to construct a list containing the elements of the specified collection, in the order, they are returned by the collection&#8217;s iterator.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Methods of Java LinkedList<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>boolean add(E e)<\/td><td>It is used to append the specified element to the end of a list.<\/td><\/tr><tr><td>void add(int index, E element)<\/td><td>It is used to insert the specified element at the specified position index in a list.<\/td><\/tr><tr><td>boolean addAll(Collection&lt;? extends E&gt; c)<\/td><td>It is used to append all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection&#8217;s iterator.<\/td><\/tr><tr><td>boolean addAll(Collection&lt;? extends E&gt; c)<\/td><td>It is used to append all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection&#8217;s iterator.<\/td><\/tr><tr><td>boolean addAll(int index, Collection&lt;? extends E&gt; c)<\/td><td>It is used to append all the elements in the specified collection, starting at the specified position of the list.<\/td><\/tr><tr><td>void addFirst(E e)<\/td><td>It is used to insert the given element at the beginning of a list.<\/td><\/tr><tr><td>void addLast(E e)<\/td><td>It is used to append the given element to the end of a list.<\/td><\/tr><tr><td>void clear()<\/td><td>It is used to remove all the elements from a list.<\/td><\/tr><tr><td>Object clone()<\/td><td>It is used to return a shallow copy of an ArrayList.<\/td><\/tr><tr><td>boolean contains(Object o)<\/td><td>It is used to return true if a list contains a specified element.<\/td><\/tr><tr><td>Iterator&lt;E&gt; descendingIterator()<\/td><td>It is used to return an iterator over the elements in a deque in reverse sequential order.<\/td><\/tr><tr><td>E element()<\/td><td>It is used to retrieve the first element of a list.<\/td><\/tr><tr><td>E get(int index)<\/td><td>It is used to return the element at the specified position in a list.<\/td><\/tr><tr><td>E getFirst()<\/td><td>It is used to return the first element in a list.<\/td><\/tr><tr><td>E getLast()<\/td><td>It is used to return the last element in a list.<\/td><\/tr><tr><td>int indexOf(Object o)<\/td><td>It is used to return the index in a list of the first occurrence of the specified element, or -1 if the list does not contain any element.<\/td><\/tr><tr><td>int lastIndexOf(Object o)<\/td><td>It is used to return the index in a list of the last occurrence of the specified element, or -1 if the list does not contain any element.<\/td><\/tr><tr><td>ListIterator&lt;E&gt; listIterator(int index)<\/td><td>It is used to return a list-iterator of the elements in proper sequence, starting at the specified position in the list.<\/td><\/tr><tr><td>boolean offer(E e)<\/td><td>It adds the specified element as the last element of a list.<\/td><\/tr><tr><td>boolean offerFirst(E e)<\/td><td>It inserts the specified element at the front of a list.<\/td><\/tr><tr><td>boolean offerLast(E e)<\/td><td>It inserts the specified element at the end of a list.<\/td><\/tr><tr><td>E peek()<\/td><td>It retrieves the first element of a list<\/td><\/tr><tr><td>E peekFirst()<\/td><td>It retrieves the first element of a list or returns null if a list is empty.<\/td><\/tr><tr><td>E peekLast()<\/td><td>It retrieves the last element of a list or returns null if a list is empty.<\/td><\/tr><tr><td>E poll()<\/td><td>It retrieves and removes the first element of a list.<\/td><\/tr><tr><td>E pollFirst()<\/td><td>It retrieves and removes the first element of a list, or returns null if a list is empty.<\/td><\/tr><tr><td>E pollLast()<\/td><td>It retrieves and removes the last element of a list, or returns null if a list is empty.<\/td><\/tr><tr><td>E pop()<\/td><td>It pops an element from the stack represented by a list.<\/td><\/tr><tr><td>void push(E e)<\/td><td>It pushes an element onto the stack represented by a list.<\/td><\/tr><tr><td>E remove()<\/td><td>It is used to retrieve and removes the first element of a list.<\/td><\/tr><tr><td>E remove(int index)<\/td><td>It is used to remove the element at the specified position in a list.<\/td><\/tr><tr><td>boolean remove(Object o)<\/td><td>It is used to remove the first occurrence of the specified element in a list.<\/td><\/tr><tr><td>E removeFirst()<\/td><td>It removes and returns the first element from a list.<\/td><\/tr><tr><td>boolean removeFirstOccurrence(Object o)<\/td><td>It is used to remove the first occurrence of the specified element in a list (when traversing the list from head to tail).<\/td><\/tr><tr><td>E removeLast()<\/td><td>It removes and returns the last element from a list.<\/td><\/tr><tr><td>boolean removeLastOccurrence(Object o)<\/td><td>It removes the last occurrence of the specified element in a list (when traversing the list from head to tail).<\/td><\/tr><tr><td>E set(int index, E element)<\/td><td>It replaces the element at the specified position in a list with the specified element.<\/td><\/tr><tr><td>Object[] toArray()<\/td><td>It is used to return an array containing all the elements in a list in proper sequence (from first to the last element).<\/td><\/tr><tr><td>&lt;T&gt; T[] toArray(T[] a)<\/td><td>It returns an array containing all the elements in the proper sequence (from first to the last element); the runtime type of the returned array is that of the specified array.<\/td><\/tr><tr><td>int size()<\/td><td>It is used to return the number of elements in a list.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java LinkedList Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class LinkedList1{  \n public static void main(String args&#91;]){  \n  \n  LinkedList&lt;String> al=new LinkedList&lt;String>();  \n  al.add(\"Ravi\");  \n  al.add(\"Vijay\");  \n  al.add(\"Ravi\");  \n  al.add(\"Ajay\");  \n  \n  Iterator&lt;String> itr=al.iterator();  \n  while(itr.hasNext()){  \n   System.out.println(itr.next());  \n  }  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output: Ravi\n       Vijay\n       Ravi\n       Ajay<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java LinkedList example to add elements<\/h3>\n\n\n\n<p>Here, we see different ways to add elements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class LinkedList2{  \n public static void main(String args&#91;]){  \n LinkedList&lt;String> ll=new LinkedList&lt;String>();  \n           System.out.println(\"Initial list of elements: \"+ll);  \n           ll.add(\"Ravi\");  \n           ll.add(\"Vijay\");  \n           ll.add(\"Ajay\");  \n           System.out.println(\"After invoking add(E e) method: \"+ll);  \n           \/\/Adding an element at the specific position  \n           ll.add(1, \"Gaurav\");  \n           System.out.println(\"After invoking add(int index, E element) method: \"+ll);  \n           LinkedList&lt;String> ll2=new LinkedList&lt;String>();  \n           ll2.add(\"Sonoo\");  \n           ll2.add(\"Hanumat\");  \n           \/\/Adding second list elements to the first list  \n           ll.addAll(ll2);  \n           System.out.println(\"After invoking addAll(Collection&lt;? extends E> c) method: \"+ll);  \n           LinkedList&lt;String> ll3=new LinkedList&lt;String>();  \n           ll3.add(\"John\");  \n           ll3.add(\"Rahul\");  \n           \/\/Adding second list elements to the first list at specific position  \n           ll.addAll(1, ll3);  \n           System.out.println(\"After invoking addAll(int index, Collection&lt;? extends E> c) method: \"+ll);  \n           \/\/Adding an element at the first position  \n           ll.addFirst(\"Lokesh\");  \n           System.out.println(\"After invoking addFirst(E e) method: \"+ll);  \n           \/\/Adding an element at the last position  \n           ll.addLast(\"Harsh\");  \n           System.out.println(\"After invoking addLast(E e) method: \"+ll);  \n             \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial list of elements: &#91;]\nAfter invoking add(E e) method: &#91;Ravi, Vijay, Ajay]\nAfter invoking add(int index, E element) method: &#91;Ravi, Gaurav, Vijay, Ajay]\nAfter invoking addAll(Collection&lt;? extends E> c) method: \n&#91;Ravi, Gaurav, Vijay, Ajay, Sonoo, Hanumat]\nAfter invoking addAll(int index, Collection&lt;? extends E> c) method: \n&#91;Ravi, John, Rahul, Gaurav, Vijay, Ajay, Sonoo, Hanumat]\nAfter invoking addFirst(E e) method: \n&#91;Lokesh, Ravi, John, Rahul, Gaurav, Vijay, Ajay, Sonoo, Hanumat]\nAfter invoking addLast(E e) method: \n&#91;Lokesh, Ravi, John, Rahul, Gaurav, Vijay, Ajay, Sonoo, Hanumat, Harsh]<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java LinkedList example to remove elements<\/h3>\n\n\n\n<p>Here, we see different ways to remove an element.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class LinkedList3 {  \n  \n        public static void main(String &#91;] args)  \n        {  \n           LinkedList&lt;String> ll=new LinkedList&lt;String>();  \n           ll.add(\"Ravi\");  \n           ll.add(\"Vijay\");  \n           ll.add(\"Ajay\");  \n           ll.add(\"Anuj\");  \n           ll.add(\"Gaurav\");  \n           ll.add(\"Harsh\");  \n           ll.add(\"Virat\");  \n           ll.add(\"Gaurav\");  \n           ll.add(\"Harsh\");  \n           ll.add(\"Amit\");  \n           System.out.println(\"Initial list of elements: \"+ll);  \n         \/\/Removing specific element from arraylist  \n              ll.remove(\"Vijay\");  \n              System.out.println(\"After invoking remove(object) method: \"+ll);   \n         \/\/Removing element on the basis of specific position  \n              ll.remove(0);  \n              System.out.println(\"After invoking remove(index) method: \"+ll);   \n              LinkedList&lt;String> ll2=new LinkedList&lt;String>();  \n              ll2.add(\"Ravi\");  \n              ll2.add(\"Hanumat\");  \n         \/\/ Adding new elements to arraylist  \n              ll.addAll(ll2);  \n              System.out.println(\"Updated list : \"+ll);   \n         \/\/Removing all the new elements from arraylist  \n              ll.removeAll(ll2);  \n              System.out.println(\"After invoking removeAll() method: \"+ll);   \n         \/\/Removing first element from the list  \n              ll.removeFirst();  \n              System.out.println(\"After invoking removeFirst() method: \"+ll);  \n          \/\/Removing first element from the list  \n              ll.removeLast();  \n              System.out.println(\"After invoking removeLast() method: \"+ll);  \n          \/\/Removing first occurrence of element from the list  \n              ll.removeFirstOccurrence(\"Gaurav\");  \n              System.out.println(\"After invoking removeFirstOccurrence() method: \"+ll);  \n          \/\/Removing last occurrence of element from the list  \n              ll.removeLastOccurrence(\"Harsh\");  \n              System.out.println(\"After invoking removeLastOccurrence() method: \"+ll);  \n  \n              \/\/Removing all the elements available in the list       \n              ll.clear();  \n              System.out.println(\"After invoking clear() method: \"+ll);   \n       }  \n    }  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial list of elements: &#91;Ravi, Vijay, Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]\nAfter invoking remove(object) method: &#91;Ravi, Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]\nAfter invoking remove(index) method: &#91;Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]\nUpdated list : &#91;Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit, Ravi, Hanumat]\nAfter invoking removeAll() method: &#91;Ajay, Anuj, Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]\nAfter invoking removeFirst() method: &#91;Gaurav, Harsh, Virat, Gaurav, Harsh, Amit]\nAfter invoking removeLast() method: &#91;Gaurav, Harsh, Virat, Gaurav, Harsh]\nAfter invoking removeFirstOccurrence() method: &#91;Harsh, Virat, Gaurav, Harsh]\nAfter invoking removeLastOccurrence() method: &#91;Harsh, Virat, Gaurav]\nAfter invoking clear() method: &#91;]<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java LinkedList Example to reverse a list of elements<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class LinkedList4{  \n public static void main(String args&#91;]){  \n  \n  LinkedList&lt;String> ll=new LinkedList&lt;String>();  \n           ll.add(\"Ravi\");  \n           ll.add(\"Vijay\");  \n           ll.add(\"Ajay\");  \n           \/\/Traversing the list of elements in reverse order  \n           Iterator i=ll.descendingIterator();  \n           while(i.hasNext())  \n           {  \n               System.out.println(i.next());  \n           }  \n             \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output: Ajay\nVijay\nRavi<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java LinkedList Example: Book<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Book {  \nint id;  \nString name,author,publisher;  \nint quantity;  \npublic Book(int id, String name, String author, String publisher, int quantity) {  \n    this.id = id;  \n    this.name = name;  \n    this.author = author;  \n    this.publisher = publisher;  \n    this.quantity = quantity;  \n}  \n}  \npublic class LinkedListExample {  \npublic static void main(String&#91;] args) {  \n    \/\/Creating list of Books  \n    List&lt;Book> list=new LinkedList&lt;Book>();  \n    \/\/Creating Books  \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);  \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);  \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);  \n    \/\/Adding Books to list  \n    list.add(b1);  \n    list.add(b2);  \n    list.add(b3);  \n    \/\/Traversing list  \n    for(Book b:list){  \n    System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);  \n    }  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Let us C Yashwant Kanetkar BPB 8\n102 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java LinkedList class uses a doubly linked list to store the elements. It provides a linked-list data structure. It inherits the AbstractList class and implements List and Deque interfaces. The important points about Java LinkedList are: Java LinkedList class can contain duplicate elements. Java LinkedList class maintains insertion order. Java LinkedList class is non synchronized. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/310"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=310"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/310\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 845,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/310\/revisions\/845"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=310"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=310"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=310"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 317,
        "date": "2020-06-20T08:09:37",
        "date_gmt": "2020-06-20T08:09:37",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=317"
        },
        "modified": "2020-06-20T08:09:37",
        "modified_gmt": "2020-06-20T08:09:37",
        "slug": "arraylist-and-linkedlist",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/arraylist-and-linkedlist\/",
        "title": {
            "rendered": "ArrayList and LinkedList"
        },
        "content": {
            "rendered": "\n<p>ArrayList and LinkedList both implements List interface and maintains insertion order. Both are non synchronized classes.<\/p>\n\n\n\n<p>However, there are many differences between ArrayList and LinkedList classes that are given below.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>ArrayList<\/th><th>LinkedList<\/th><\/tr><tr><td>1) ArrayList internally uses a&nbsp;<strong>dynamic array<\/strong>&nbsp;to store the elements.<\/td><td>LinkedList internally uses a&nbsp;<strong>doubly linked list<\/strong>&nbsp;to store the elements.<\/td><\/tr><tr><td>2) Manipulation with ArrayList is&nbsp;<strong>slow<\/strong>&nbsp;because it internally uses an array. If any element is removed from the array, all the bits are shifted in memory.<\/td><td>Manipulation with LinkedList is&nbsp;<strong>faster<\/strong>&nbsp;than ArrayList because it uses a doubly linked list, so no bit shifting is required in memory.<\/td><\/tr><tr><td>3) An ArrayList class can&nbsp;<strong>act as a list<\/strong>&nbsp;only because it implements List only.<\/td><td>LinkedList class can&nbsp;<strong>act as a list and queue<\/strong>&nbsp;both because it implements List and Deque interfaces.<\/td><\/tr><tr><td>4) ArrayList is&nbsp;<strong>better for storing and accessing<\/strong>&nbsp;data.<\/td><td>LinkedList is&nbsp;<strong>better for manipulating<\/strong>&nbsp;data.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Example of ArrayList and LinkedList in Java<\/h3>\n\n\n\n<p>Let&#8217;s see a simple example where we are using ArrayList and LinkedList both.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \nclass TestArrayLinked{    \n public static void main(String args&#91;]){    \n     \n  List&lt;String> al=new ArrayList&lt;String>();\/\/creating arraylist    \n  al.add(\"Ravi\");\/\/adding object in arraylist    \n  al.add(\"Vijay\");    \n  al.add(\"Ravi\");    \n  al.add(\"Ajay\");    \n    \n  List&lt;String> al2=new LinkedList&lt;String>();\/\/creating linkedlist    \n  al2.add(\"James\");\/\/adding object in linkedlist    \n  al2.add(\"Serena\");    \n  al2.add(\"Swati\");    \n  al2.add(\"Junaid\");    \n    \n  System.out.println(\"arraylist: \"+al);  \n  System.out.println(\"linkedlist: \"+al2);  \n }    \n}    <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>arraylist: &#91;Ravi,Vijay,Ravi,Ajay]\nlinkedlist: &#91;James,Serena,Swati,Junaid]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>ArrayList and LinkedList both implements List interface and maintains insertion order. Both are non synchronized classes. However, there are many differences between ArrayList and LinkedList classes that are given below. ArrayList LinkedList 1) ArrayList internally uses a&nbsp;dynamic array&nbsp;to store the elements. LinkedList internally uses a&nbsp;doubly linked list&nbsp;to store the elements. 2) Manipulation with ArrayList is&nbsp;slow&nbsp;because [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/317"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=317"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/317\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 325,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/317\/revisions\/325"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=317"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=317"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=317"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 313,
        "date": "2020-06-20T08:13:50",
        "date_gmt": "2020-06-20T08:13:50",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=313"
        },
        "modified": "2020-07-13T17:28:08",
        "modified_gmt": "2020-07-13T17:28:08",
        "slug": "java-list",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/java-list\/",
        "title": {
            "rendered": "Java List"
        },
        "content": {
            "rendered": "\n<p><strong>List<\/strong>&nbsp;in Java provides the facility to maintain the&nbsp;<em>ordered collection<\/em>. It contains the index-based methods to insert, update, delete and search the elements. It can have the duplicate elements also. We can also store the null elements in the list.<\/p>\n\n\n\n<p>The List interface is found in the&nbsp;java.util&nbsp;package and inherits the Collection interface. It is a factory of ListIterator interface. Through the ListIterator, we can iterate the list in forward and backward directions. The implementation classes of List interface are&nbsp;ArrayList,&nbsp;LinkedList, Stack and Vector. The ArrayList and LinkedList are widely used in Java programming. The Vector class is deprecated since Java 5.<\/p>\n\n\n\n<h3>List Interface declaration<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>public interface List&lt;E> extends Collection&lt;E>  <\/code><\/pre>\n\n\n\n<h3>Java List Methods<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void add(int index, E element)<\/td><td>It is used to insert the specified element at the specified position in a list.<\/td><\/tr><tr><td>boolean add(E e)<\/td><td>It is used to append the specified element at the end of a list.<\/td><\/tr><tr><td>boolean addAll(Collection&lt;? extends E&gt; c)<\/td><td>It is used to append all of the elements in the specified collection to the end of a list.<\/td><\/tr><tr><td>boolean addAll(int index, Collection&lt;? extends E&gt; c)<\/td><td>It is used to append all the elements in the specified collection, starting at the specified position of the list.<\/td><\/tr><tr><td>void clear()<\/td><td>It is used to remove all of the elements from this list.<\/td><\/tr><tr><\/tr><tr><td>boolean equals(Object o)<\/td><td>It is used to compare the specified object with the elements of a list.<\/td><\/tr><tr><td>int hashcode()<\/td><td>It is used to return the hash code value for a list.<\/td><\/tr><tr><td>E get(int index)<\/td><td>It is used to fetch the element from the particular position of the list.<\/td><\/tr><tr><td>boolean isEmpty()<\/td><td>It returns true if the list is empty, otherwise false.<\/td><\/tr><tr><td>int lastIndexOf(Object o)<\/td><td>It is used to return the index in this list of the last occurrence of the specified element, or -1 if the list does not contain this element.<\/td><\/tr><tr><td>Object[] toArray()<\/td><td>It is used to return an array containing all of the elements in this list in the correct order.<\/td><\/tr><tr><td>&lt;T&gt; T[] toArray(T[] a)<\/td><td>It is used to return an array containing all of the elements in this list in the correct order.<\/td><\/tr><tr><td>boolean contains(Object o)<\/td><td>It returns true if the list contains the specified element<\/td><\/tr><tr><td>boolean containsAll(Collection&lt;?&gt; c)<\/td><td>It returns true if the list contains all the specified element<\/td><\/tr><tr><td>int indexOf(Object o)<\/td><td>It is used to return the index in this list of the first occurrence of the specified element, or -1 if the List does not contain this element.<\/td><\/tr><tr><td>E remove(int index)<\/td><td>It is used to remove the element present at the specified position in the list.<\/td><td><\/td><\/tr><tr><td>boolean remove(Object o)<\/td><td>It is used to remove the first occurrence of the specified element.<\/td><td><\/td><\/tr><tr><td>boolean removeAll(Collection&lt;?&gt; c)<\/td><td>It is used to remove all the elements from the list.<\/td><td><\/td><\/tr><tr><td>void replaceAll(UnaryOperator&lt;E&gt; operator)<\/td><td>It is used to replace all the elements from the list with the specified element.<\/td><td><\/td><\/tr><tr><td>void retainAll(Collection&lt;?&gt; c)<\/td><td>It is used to retain all the elements in the list that are present in the specified collection.<\/td><td><\/td><\/tr><tr><td>E set(int index, E element)<\/td><td>It is used to replace the specified element in the list, present at the specified position.<\/td><td><\/td><\/tr><tr><td>void sort(Comparator&lt;? super E&gt; c)<\/td><td>It is used to sort the elements of the list on the basis of specified comparator.<\/td><td><\/td><\/tr><tr><td>Spliterator&lt;E&gt; spliterator()<\/td><td>It is used to create spliterator over the elements in a list.<\/td><td><\/td><\/tr><tr><td>List&lt;E&gt; subList(int fromIndex, int toIndex)<\/td><td>It is used to fetch all the elements lies within the given range.<\/td><td><\/td><\/tr><tr><td>int size()<\/td><td>It is used to return the number of elements present in the list.<\/td><td><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java List vs ArrayList<\/h3>\n\n\n\n<p>List is an interface whereas ArrayList is the implementation class of List.<\/p>\n\n\n\n<h3>How to create List<\/h3>\n\n\n\n<p>The ArrayList and LinkedList classes provide the implementation of List interface. Let&#8217;s see the examples to create the List:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Creating a List of type String using ArrayList  \nList&lt;String> list=new ArrayList&lt;String>();  \n  \n\/\/Creating a List of type Integer using ArrayList  \nList&lt;Integer> list=new ArrayList&lt;Integer>();  \n  \n\/\/Creating a List of type Book using ArrayList  \nList&lt;Book> list=new ArrayList&lt;Book>();  \n  \n\/\/Creating a List of type String using LinkedList  \nList&lt;String> list=new LinkedList&lt;String>();  <\/code><\/pre>\n\n\n\n<p>In short, you can create the List of any type. The ArrayList&lt;T&gt; and LinkedList&lt;T&gt; classes are used to specify the type. Here, T denotes the type.<\/p>\n\n\n\n<h3>Java List Example<\/h3>\n\n\n\n<p>Let&#8217;s see a simple example of List where we are using the ArrayList class as the implementation.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ListExample1{  \npublic static void main(String args&#91;]){  \n \/\/Creating a List  \n List&lt;String> list=new ArrayList&lt;String>();  \n \/\/Adding elements in the List  \n list.add(\"Mango\");  \n list.add(\"Apple\");  \n list.add(\"Banana\");  \n list.add(\"Grapes\");  \n \/\/Iterating the List element using for-each loop  \n for(String fruit:list)  \n  System.out.println(fruit);  \n  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Mango\nApple\nBanana\nGrapes<\/code><\/pre>\n\n\n\n<h3>How to convert Array to List<\/h3>\n\n\n\n<p>We can convert the Array to List by traversing the array and adding the element in list one by one using list.add() method. Let&#8217;s see a simple example to convert array elements into List.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ArrayToListExample{  \npublic static void main(String args&#91;]){  \n\/\/Creating Array  \nString&#91;] array={\"Java\",\"Python\",\"PHP\",\"C++\"};  \nSystem.out.println(\"Printing Array: \"+Arrays.toString(array));  \n\/\/Converting Array to List  \nList&lt;String> list=new ArrayList&lt;String>();  \nfor(String lang:array){  \nlist.add(lang);  \n}  \nSystem.out.println(\"Printing List: \"+list);  \n  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Printing Array: &#91;Java, Python, PHP, C++]\nPrinting List: &#91;Java, Python, PHP, C++]<\/code><\/pre>\n\n\n\n<h3>How to convert List to Array<\/h3>\n\n\n\n<p>We can convert the List to Array by calling the list.toArray() method. Let&#8217;s see a simple example to convert list elements into array.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ListToArrayExample{  \npublic static void main(String args&#91;]){  \n List&lt;String> fruitList = new ArrayList&lt;>();    \n fruitList.add(\"Mango\");    \n fruitList.add(\"Banana\");    \n fruitList.add(\"Apple\");    \n fruitList.add(\"Strawberry\");    \n \/\/Converting ArrayList to Array  \n String&#91;] array = fruitList.toArray(new String&#91;fruitList.size()]);    \n System.out.println(\"Printing Array: \"+Arrays.toString(array));  \n System.out.println(\"Printing List: \"+fruitList);  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Printing Array: &#91;Mango, Banana, Apple, Strawberry]\nPrinting List: &#91;Mango, Banana, Apple, Strawberry]<\/code><\/pre>\n\n\n\n<h3>Get and Set Element in List<\/h3>\n\n\n\n<p>The&nbsp;<em>get() method<\/em>&nbsp;returns the element at the given index, whereas the&nbsp;<em>set() method<\/em>&nbsp;changes or replaces the element.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ListExample2{  \n public static void main(String args&#91;]){  \n \/\/Creating a List  \n List&lt;String> list=new ArrayList&lt;String>();  \n \/\/Adding elements in the List  \n list.add(\"Mango\");  \n list.add(\"Apple\");  \n list.add(\"Banana\");  \n list.add(\"Grapes\");  \n \/\/accessing the element    \n System.out.println(\"Returning element: \"+list.get(1));\/\/it will return the 2nd element, because index starts from 0  \n \/\/changing the element  \n list.set(1,\"Dates\");  \n \/\/Iterating the List element using for-each loop  \n for(String fruit:list)  \n  System.out.println(fruit);  \n  \n }  \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Returning element: Apple\nMango\nDates\nBanana\nGrapes<\/code><\/pre>\n\n\n\n<h3>How to Sort List<\/h3>\n\n\n\n<p>There are various ways to sort the List, here we are going to use Collections.sort() method to sort the list element. The&nbsp;<em>java.util<\/em>package provides a utility class&nbsp;<strong>Collections<\/strong>&nbsp;which has the static method sort(). Using the&nbsp;<strong>Collections.sort()<\/strong>&nbsp;method, we can easily sort any List.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass SortArrayList{  \n public static void main(String args&#91;]){  \n  \/\/Creating a list of fruits  \n  List&lt;String> list1=new ArrayList&lt;String>();  \n  list1.add(\"Mango\");  \n  list1.add(\"Apple\");  \n  list1.add(\"Banana\");  \n  list1.add(\"Grapes\");  \n  \/\/Sorting the list  \n  Collections.sort(list1);  \n   \/\/Traversing list through the for-each loop  \n  for(String fruit:list1)  \n    System.out.println(fruit);  \n      \n System.out.println(\"Sorting numbers...\");  \n  \/\/Creating a list of numbers  \n  List&lt;Integer> list2=new ArrayList&lt;Integer>();  \n  list2.add(21);  \n  list2.add(11);  \n  list2.add(51);  \n  list2.add(1);  \n  \/\/Sorting the list  \n  Collections.sort(list2);  \n   \/\/Traversing list through the for-each loop  \n  for(Integer number:list2)  \n    System.out.println(number);  \n }  \n   \n}  <\/code><\/pre>\n\n\n\n<p><strong>Output:<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Apple\nBanana\nGrapes\nMango\nSorting numbers...\n1\n11\n21\n51<\/code><\/pre>\n\n\n\n<h2>Java ListIterator Interface<\/h2>\n\n\n\n<p>ListIterator Interface is used to traverse the element in a backward and forward direction.<\/p>\n\n\n\n<h3>ListIterator Interface declaration<\/h3>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>interface<\/strong>&nbsp;ListIterator&lt;E&gt;&nbsp;<strong>extends<\/strong>&nbsp;Iterator&lt;E&gt;&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Methods of Java ListIterator Interface:<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void add(E e)<\/td><td>This method inserts the specified element into the list.<\/td><\/tr><tr><td>boolean hasNext()<\/td><td>This method returns true if the list iterator has more elements while traversing the list in the forward direction.<\/td><\/tr><tr><td>E next()<\/td><td>This method returns the next element in the list and advances the cursor position.<\/td><\/tr><tr><td>int nextIndex()<\/td><td>This method returns the index of the element that would be returned by a subsequent call to next()<\/td><\/tr><tr><td>boolean hasPrevious()<\/td><td>This method returns true if this list iterator has more elements while traversing the list in the reverse direction.<\/td><\/tr><tr><td>E previous()<\/td><td>This method returns the previous element in the list and moves the cursor position backward.<\/td><\/tr><tr><td>E previousIndex()<\/td><td>This method returns the index of the element that would be returned by a subsequent call to previous().<\/td><\/tr><tr><td>void remove()<\/td><td>This method removes the last element from the list that was returned by next() or previous() methods<\/td><\/tr><tr><td>void set(E e)<\/td><td>This method replaces the last element returned by next() or previous() methods with the specified element.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Example of ListIterator Interface<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ListIteratorExample1{  \npublic static void main(String args&#91;]){  \nList&lt;String> al=new ArrayList&lt;String>();    \n        al.add(\"Amit\");    \n        al.add(\"Vijay\");    \n        al.add(\"Kumar\");    \n        al.add(1,\"Sachin\");    \n        ListIterator&lt;String> itr=al.listIterator();    \n        System.out.println(\"Traversing elements in forward direction\");    \n        while(itr.hasNext()){    \n              \n        System.out.println(\"index:\"+itr.nextIndex()+\" value:\"+itr.next());    \n        }    \n        System.out.println(\"Traversing elements in backward direction\");    \n        while(itr.hasPrevious()){    \n          \n        System.out.println(\"index:\"+itr.previousIndex()+\" value:\"+itr.previous());    \n        }    \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Traversing elements in forward direction\nindex:0 value:Amit\nindex:1 value:Sachin\nindex:2 value:Vijay\nindex:3 value:Kumar\nTraversing elements in backward direction\nindex:3 value:Kumar\nindex:2 value:Vijay\nindex:1 value:Sachin\nindex:0 value:Amit<\/code><\/pre>\n\n\n\n<h3>Example of List: Book<\/h3>\n\n\n\n<p>Let&#8217;s see an example of List where we are adding the Books.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Book {  \nint id;  \nString name,author,publisher;  \nint quantity;  \npublic Book(int id, String name, String author, String publisher, int quantity) {  \n    this.id = id;  \n    this.name = name;  \n    this.author = author;  \n    this.publisher = publisher;  \n    this.quantity = quantity;  \n}  \n}  \npublic class ListExample5 {  \npublic static void main(String&#91;] args) {  \n    \/\/Creating list of Books  \n    List&lt;Book> list=new ArrayList&lt;Book>();  \n    \/\/Creating Books  \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);  \n    Book b2=new Book(102,\"Data Communications and Networking\",\"Forouzan\",\"Mc Graw Hill\",4);  \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);  \n    \/\/Adding Books to list  \n    list.add(b1);  \n    list.add(b2);  \n    list.add(b3);  \n    \/\/Traversing list  \n    for(Book b:list){  \n    System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);  \n    }  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Let us C Yashwant Kanetkar BPB 8\n102 Data Communications and Networking Forouzan Mc Graw Hill 4\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>List&nbsp;in Java provides the facility to maintain the&nbsp;ordered collection. It contains the index-based methods to insert, update, delete and search the elements. It can have the duplicate elements also. We can also store the null elements in the list. The List interface is found in the&nbsp;java.util&nbsp;package and inherits the Collection interface. It is a factory [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/313"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=313"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/313\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 846,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/313\/revisions\/846"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=313"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=313"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=313"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 314,
        "date": "2020-06-20T08:17:07",
        "date_gmt": "2020-06-20T08:17:07",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=314"
        },
        "modified": "2020-07-13T09:55:23",
        "modified_gmt": "2020-07-13T09:55:23",
        "slug": "hashset",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/hashset\/",
        "title": {
            "rendered": "HashSet"
        },
        "content": {
            "rendered": "\n<p>Java HashSet class is used to create a collection that uses a hash table for storage. It inherits the AbstractSet class and implements Set interface.<\/p>\n\n\n\n<p>The important points about Java HashSet class are:<\/p>\n\n\n\n<ul><li>HashSet stores the elements by using a mechanism called&nbsp;<strong>hashing.<\/strong><\/li><li>HashSet contains unique elements only.<\/li><li>HashSet allows null value.<\/li><li>HashSet class is non synchronized.<\/li><li>HashSet doesn&#8217;t maintain the insertion order. Here, elements are inserted on the basis of their hashcode.<\/li><li>HashSet is the best approach for search operations.<\/li><li>The initial default capacity of HashSet is 16, and the load factor is 0.75.<\/li><\/ul>\n\n\n\n<h2>Difference between List and Set<\/h2>\n\n\n\n<p>A list can contain duplicate elements whereas Set contains unique elements only.<\/p>\n\n\n\n<h3>Hierarchy of HashSet class<\/h3>\n\n\n\n<p>The HashSet class extends AbstractSet class which implements Set interface. The Set interface inherits Collection and Iterable interfaces in hierarchical order.<\/p>\n\n\n\n<h3>HashSet class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.HashSet class.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>public class HashSet&lt;E> extends AbstractSet&lt;E> implements Set&lt;E>, Cloneable, Serializable  <\/code><\/pre>\n\n\n\n<h2>Constructors of Java HashSet class<\/h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN<\/th><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>1)<\/td><td>HashSet()<\/td><td>It is used to construct a default HashSet.<\/td><\/tr><tr><td>2)<\/td><td>HashSet(int capacity)<\/td><td>It is used to initialize the capacity of the hash set to the given integer value capacity. The capacity grows automatically as elements are added to the HashSet.<\/td><\/tr><tr><td>3)<\/td><td>HashSet(int capacity, float loadFactor)<\/td><td>It is used to initialize the capacity of the hash set to the given integer value capacity and the specified load factor.<\/td><\/tr><tr><td>4)<\/td><td>HashSet(Collection&lt;? extends E&gt; c)<\/td><td>It is used to initialize the hash set by using the elements of the collection c.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Methods of Java HashSet class<\/h2>\n\n\n\n<p>Various methods of Java HashSet class are as follows:<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN<\/th><th>Modifier &amp; Type<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>1)<\/td><td>boolean<\/td><td>add(E e)<\/td><td>It is used to add the specified element to this set if it is not already present.<\/td><\/tr><tr><td>2)<\/td><td>void<\/td><td>clear()<\/td><td>It is used to remove all of the elements from the set.<\/td><\/tr><tr><td>3)<\/td><td>object<\/td><td>clone()<\/td><td>It is used to return a shallow copy of this HashSet instance: the elements themselves are not cloned.<\/td><\/tr><tr><td>4)<\/td><td>boolean<\/td><td>contains(Object o)<\/td><td>It is used to return true if this set contains the specified element.<\/td><\/tr><tr><td>5)<\/td><td>boolean<\/td><td>isEmpty()<\/td><td>It is used to return true if this set contains no elements.<\/td><\/tr><tr><td>6)<\/td><td>Iterator&lt;E&gt;<\/td><td>iterator()<\/td><td>It is used to return an iterator over the elements in this set.<\/td><\/tr><tr><td>7)<\/td><td>boolean<\/td><td>remove(Object o)<\/td><td>It is used to remove the specified element from this set if it is present.<\/td><\/tr><tr><td>8)<\/td><td>int<\/td><td>size()<\/td><td>It is used to return the number of elements in the set.<\/td><\/tr><tr><td>9)<\/td><td>Spliterator&lt;E&gt;<\/td><td>spliterator()<\/td><td>It is used to create a late-binding and fail-fast Spliterator over the elements in the set.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java HashSet Example<\/h3>\n\n\n\n<p>Let&#8217;s see a simple example of HashSet. Notice, the elements iterate in an unordered collection.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass HashSet1{  \n public static void main(String args&#91;]){  \n  \/\/Creating HashSet and adding elements  \n    HashSet&lt;String> set=new HashSet();  \n           set.add(\"One\");    \n           set.add(\"Two\");    \n           set.add(\"Three\");   \n           set.add(\"Four\");  \n           set.add(\"Five\");  \n           Iterator&lt;String> i=set.iterator();  \n           while(i.hasNext())  \n           {  \n           System.out.println(i.next());  \n           }  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Five\nOne\nFour\nTwo\nThree<\/code><\/pre>\n\n\n\n<h3>Java HashSet example ignoring duplicate elements<\/h3>\n\n\n\n<p>In this example, we see that HashSet doesn&#8217;t allow duplicate elements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass HashSet2{  \n public static void main(String args&#91;]){  \n  \/\/Creating HashSet and adding elements  \n  HashSet&lt;String> set=new HashSet&lt;String>();  \n  set.add(\"Ravi\");  \n  set.add(\"Vijay\");  \n  set.add(\"Ravi\");  \n  set.add(\"Ajay\");  \n  \/\/Traversing elements  \n  Iterator&lt;String> itr=set.iterator();  \n  while(itr.hasNext()){  \n   System.out.println(itr.next());  \n  }  \n }  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>  Ajay\n       Vijay\n       Ravi<\/code><\/pre>\n\n\n\n<h3>Java HashSet example to remove elements<\/h3>\n\n\n\n<p>Here, we see different ways to remove an element.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass HashSet3{  \n public static void main(String args&#91;]){  \n  HashSet&lt;String> set=new HashSet&lt;String>();  \n           set.add(\"Ravi\");  \n           set.add(\"Vijay\");  \n           set.add(\"Arun\");  \n           set.add(\"Sumit\");  \n           System.out.println(\"An initial list of elements: \"+set);  \n           \/\/Removing specific element from HashSet  \n           set.remove(\"Ravi\");  \n           System.out.println(\"After invoking remove(object) method: \"+set);  \n           HashSet&lt;String> set1=new HashSet&lt;String>();  \n           set1.add(\"Ajay\");  \n           set1.add(\"Gaurav\");  \n           set.addAll(set1);  \n           System.out.println(\"Updated List: \"+set);  \n           \/\/Removing all the new elements from HashSet  \n           set.removeAll(set1);  \n           System.out.println(\"After invoking removeAll() method: \"+set);  \n           \/\/Removing elements on the basis of specified condition  \n           set.removeIf(str->str.contains(\"Vijay\"));    \n           System.out.println(\"After invoking removeIf() method: \"+set);  \n           \/\/Removing all the elements available in the set  \n           set.clear();  \n           System.out.println(\"After invoking clear() method: \"+set);  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>An initial list of elements: &#91;Vijay, Ravi, Arun, Sumit]\nAfter invoking remove(object) method: &#91;Vijay, Arun, Sumit]\nUpdated List: &#91;Vijay, Arun, Gaurav, Sumit, Ajay]\nAfter invoking removeAll() method: &#91;Vijay, Arun, Sumit]\nAfter invoking removeIf() method: &#91;Arun, Sumit]\nAfter invoking clear() method: &#91;]<\/code><\/pre>\n\n\n\n<h3>Java HashSet from another Collection<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass HashSet4{  \n public static void main(String args&#91;]){  \n   ArrayList&lt;String> list=new ArrayList&lt;String>();  \n           list.add(\"Ravi\");  \n           list.add(\"Vijay\");  \n           list.add(\"Ajay\");  \n             \n           HashSet&lt;String> set=new HashSet(list);  \n           set.add(\"Gaurav\");  \n           Iterator&lt;String> i=set.iterator();  \n           while(i.hasNext())  \n           {  \n           System.out.println(i.next());  \n           }  \n }  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Vijay\nRavi\nGaurav\nAjay<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<h3>Java HashSet Example: Book<\/h3>\n\n\n\n<p>Let&#8217;s see a HashSet example where we are adding books to set and printing all the books.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Book {  \nint id;  \nString name,author,publisher;  \nint quantity;  \npublic Book(int id, String name, String author, String publisher, int quantity) {  \n    this.id = id;  \n    this.name = name;  \n    this.author = author;  \n    this.publisher = publisher;  \n    this.quantity = quantity;  \n}  \n}  \npublic class HashSetExample {  \npublic static void main(String&#91;] args) {  \n    HashSet&lt;Book> set=new HashSet&lt;Book>();  \n    \/\/Creating Books  \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);  \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);  \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);  \n    \/\/Adding Books to HashSet  \n    set.add(b1);  \n    set.add(b2);  \n    set.add(b3);  \n    \/\/Traversing HashSet  \n    for(Book b:set){  \n    System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);  \n    }  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Let us C Yashwant Kanetkar BPB 8\n102 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java HashSet class is used to create a collection that uses a hash table for storage. It inherits the AbstractSet class and implements Set interface. The important points about Java HashSet class are: HashSet stores the elements by using a mechanism called&nbsp;hashing. HashSet contains unique elements only. HashSet allows null value. HashSet class is non [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/314"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=314"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/314\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 840,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/314\/revisions\/840"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=314"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=314"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=314"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 308,
        "date": "2020-06-20T08:18:38",
        "date_gmt": "2020-06-20T08:18:38",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=308"
        },
        "modified": "2020-06-20T08:18:38",
        "modified_gmt": "2020-06-20T08:18:38",
        "slug": "linkedhashset",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/linkedhashset\/",
        "title": {
            "rendered": "LinkedHashSet"
        },
        "content": {
            "rendered": "\n<p>Java LinkedHashSet class is a Hashtable and Linked list implementation of the set interface. It inherits HashSet class and implements Set interface.<\/p>\n\n\n\n<p>The important points about Java LinkedHashSet class are:<\/p>\n\n\n\n<ul><li>Java LinkedHashSet class contains unique elements only like HashSet.<\/li><li>Java LinkedHashSet class provides all optional set operation and permits null elements.<\/li><li>Java LinkedHashSet class is non synchronized.<\/li><li>Java LinkedHashSet class maintains insertion order.<\/li><\/ul>\n\n\n\n<h2>Hierarchy of LinkedHashSet class<\/h2>\n\n\n\n<p>The LinkedHashSet class extends HashSet class which implements Set interface. The Set interface inherits Collection and Iterable interfaces in hierarchical order.<\/p>\n\n\n\n<h3>LinkedHashSet class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.LinkedHashSet class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;LinkedHashSet&lt;E&gt;&nbsp;<strong>extends<\/strong>&nbsp;HashSet&lt;E&gt;&nbsp;<strong>implements<\/strong>&nbsp;Set&lt;E&gt;,&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Constructors of Java LinkedHashSet class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>HashSet()<\/td><td>It is used to construct a default HashSet.<\/td><\/tr><tr><td>HashSet(Collection c)<\/td><td>It is used to initialize the hash set by using the elements of the collection c.<\/td><\/tr><tr><td>LinkedHashSet(int capacity)<\/td><td>It is used initialize the capacity of the linked hash set to the given integer value capacity.<\/td><\/tr><tr><td>LinkedHashSet(int capacity, float fillRatio)<\/td><td>It is used to initialize both the capacity and the fill ratio (also called load capacity) of the hash set from its argument.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java LinkedHashSet Example<\/h3>\n\n\n\n<p>Let&#8217;s see a simple example of Java LinkedHashSet class. Here you can notice that the elements iterate in insertion order.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass LinkedHashSet1{  \n public static void main(String args&#91;]){  \n \/\/Creating HashSet and adding elements  \n        LinkedHashSet&lt;String> set=new LinkedHashSet();  \n               set.add(\"One\");    \n               set.add(\"Two\");    \n               set.add(\"Three\");   \n               set.add(\"Four\");  \n               set.add(\"Five\");  \n               Iterator&lt;String> i=set.iterator();  \n               while(i.hasNext())  \n               {  \n               System.out.println(i.next());  \n               }  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>One\nTwo\nThree\nFour\nFive<\/code><\/pre>\n\n\n\n<h3>Java LinkedHashSet example ignoring duplicate Elements<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass LinkedHashSet2{  \n public static void main(String args&#91;]){  \n  LinkedHashSet&lt;String> al=new LinkedHashSet&lt;String>();  \n  al.add(\"Ravi\");  \n  al.add(\"Vijay\");  \n  al.add(\"Ravi\");  \n  al.add(\"Ajay\");  \n  Iterator&lt;String> itr=al.iterator();  \n  while(itr.hasNext()){  \n   System.out.println(itr.next());  \n  }  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Ravi\n       Vijay\n       Ajay<\/code><\/pre>\n\n\n\n<h3>Java LinkedHashSet Example: Book<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Book {  \nint id;  \nString name,author,publisher;  \nint quantity;  \npublic Book(int id, String name, String author, String publisher, int quantity) {  \n    this.id = id;  \n    this.name = name;  \n    this.author = author;  \n    this.publisher = publisher;  \n    this.quantity = quantity;  \n}  \n}  \npublic class LinkedHashSetExample {  \npublic static void main(String&#91;] args) {  \n    LinkedHashSet&lt;Book> hs=new LinkedHashSet&lt;Book>();  \n    \/\/Creating Books  \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);  \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);  \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);  \n    \/\/Adding Books to hash table  \n    hs.add(b1);  \n    hs.add(b2);  \n    hs.add(b3);  \n    \/\/Traversing hash table  \n    for(Book b:hs){  \n    System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);  \n    }  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Let us C Yashwant Kanetkar BPB 8\n102 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java LinkedHashSet class is a Hashtable and Linked list implementation of the set interface. It inherits HashSet class and implements Set interface. The important points about Java LinkedHashSet class are: Java LinkedHashSet class contains unique elements only like HashSet. Java LinkedHashSet class provides all optional set operation and permits null elements. Java LinkedHashSet class is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/308"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=308"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/308\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 328,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/308\/revisions\/328"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=308"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=308"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=308"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 312,
        "date": "2020-06-20T10:19:19",
        "date_gmt": "2020-06-20T10:19:19",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=312"
        },
        "modified": "2020-07-13T09:57:31",
        "modified_gmt": "2020-07-13T09:57:31",
        "slug": "treeset",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/treeset\/",
        "title": {
            "rendered": "TreeSet"
        },
        "content": {
            "rendered": "\n<p>Java TreeSet class implements the Set interface that uses a tree for storage. It inherits AbstractSet class and implements the NavigableSet interface. The objects of the TreeSet class are stored in ascending order.<\/p>\n\n\n\n<p>The important points about Java TreeSet class are:<\/p>\n\n\n\n<ul><li>Java TreeSet class contains unique elements only like HashSet.<\/li><li>Java TreeSet class access and retrieval times are quiet fast.<\/li><li>Java TreeSet class doesn&#8217;t allow null element.<\/li><li>Java TreeSet class is non synchronized.<\/li><li>Java TreeSet class maintains ascending order.<\/li><\/ul>\n\n\n\n<h3>Hierarchy of TreeSet class<\/h3>\n\n\n\n<p>As shown in the above diagram, Java TreeSet class implements the NavigableSet interface. The NavigableSet interface extends SortedSet, Set, Collection and Iterable interfaces in hierarchical order.<\/p>\n\n\n\n<h3>TreeSet class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.TreeSet class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;TreeSet&lt;E&gt;&nbsp;<strong>extends<\/strong>&nbsp;AbstractSet&lt;E&gt;&nbsp;<strong>implements<\/strong>&nbsp;NavigableSet&lt;E&gt;,&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Constructors of Java TreeSet class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>TreeSet()<\/td><td>It is used to construct an empty tree set that will be sorted in ascending order according to the natural order of the tree set.<\/td><\/tr><tr><td>TreeSet(Collection&lt;? extends E&gt; c)<\/td><td>It is used to build a new tree set that contains the elements of the collection c.<\/td><\/tr><tr><td>TreeSet(Comparator&lt;? super E&gt; comparator)<\/td><td>It is used to construct an empty tree set that will be sorted according to given comparator.<\/td><\/tr><tr><td>TreeSet(SortedSet&lt;E&gt; s)<\/td><td>It is used to build a TreeSet that contains the elements of the given SortedSet.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods of Java TreeSet class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>boolean add(E e)<\/td><td>It is used to add the specified element to this set if it is not already present.<\/td><\/tr><tr><td>boolean addAll(Collection&lt;? extends E&gt; c)<\/td><td>It is used to add all of the elements in the specified collection to this set.<\/td><\/tr><tr><td>E ceiling(E e)<\/td><td>It returns the equal or closest greatest element of the specified element from the set, or null there is no such element.<\/td><\/tr><tr><td>Comparator&lt;? super E&gt; comparator()<\/td><td>It returns comparator that arranged elements in order.<\/td><\/tr><tr><td>Iterator&nbsp;descendingIterator()<\/td><td>It is used iterate the elements in descending order.<\/td><\/tr><tr><td>NavigableSet&nbsp;descendingSet()<\/td><td>It returns the elements in reverse order.<\/td><\/tr><tr><td>E floor(E e)<\/td><td>It returns the equal or closest least element of the specified element from the set, or null there is no such element.<\/td><\/tr><tr><td>SortedSet&nbsp;headSet(E toElement)<\/td><td>It returns the group of elements that are less than the specified element.<\/td><\/tr><tr><td>NavigableSet&nbsp;headSet(E toElement, boolean inclusive)<\/td><td>It returns the group of elements that are less than or equal to(if, inclusive is true) the specified element.<\/td><\/tr><tr><td>E higher(E e)<\/td><td>It returns the closest greatest element of the specified element from the set, or null there is no such element.<\/td><\/tr><tr><td>Iterator&nbsp;iterator()<\/td><td>It is used to iterate the elements in ascending order.<\/td><\/tr><tr><td>E lower(E e)<\/td><td>It returns the closest least element of the specified element from the set, or null there is no such element.<\/td><\/tr><tr><td>E pollFirst()<\/td><td>It is used to retrieve and remove the lowest(first) element.<\/td><\/tr><tr><td>E pollLast()<\/td><td>It is used to retrieve and remove the highest(last) element.<\/td><\/tr><tr><td>Spliterator&nbsp;spliterator()<\/td><td>It is used to create a late-binding and fail-fast spliterator over the elements.<\/td><\/tr><tr><td>NavigableSet&nbsp;subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)<\/td><td>It returns a set of elements that lie between the given range.<\/td><\/tr><tr><td>SortedSet&nbsp;subSet(E fromElement, E toElement))<\/td><td>It returns a set of elements that lie between the given range which includes fromElement and excludes toElement.<\/td><\/tr><tr><td>SortedSet&nbsp;tailSet(E fromElement)<\/td><td>It returns a set of elements that are greater than or equal to the specified element.<\/td><\/tr><tr><td>NavigableSet&nbsp;tailSet(E fromElement, boolean inclusive)<\/td><td>It returns a set of elements that are greater than or equal to (if, inclusive is true) the specified element.<\/td><\/tr><tr><td>boolean contains(Object o)<\/td><td>It returns true if this set contains the specified element.<\/td><\/tr><tr><td>boolean isEmpty()<\/td><td>It returns true if this set contains no elements.<\/td><\/tr><tr><td>boolean remove(Object o)<\/td><td>It is used to remove the specified element from this set if it is present.<\/td><\/tr><tr><td>void clear()<\/td><td>It is used to remove all of the elements from this set.<\/td><\/tr><tr><td>Object clone()<\/td><td>It returns a shallow copy of this TreeSet instance.<\/td><\/tr><tr><td>E first()<\/td><td>It returns the first (lowest) element currently in this sorted set.<\/td><\/tr><tr><td>E last()<\/td><td>It returns the last (highest) element currently in this sorted set.<\/td><\/tr><tr><td>int size()<\/td><td>It returns the number of elements in this set.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java TreeSet Examples<\/h3>\n\n\n\n<h3>Java TreeSet Example 1:<\/h3>\n\n\n\n<p>Let&#8217;s see a simple example of Java TreeSet.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeSet1{  \n public static void main(String args&#91;]){  \n  \/\/Creating and adding elements  \n  TreeSet&lt;String> al=new TreeSet&lt;String>();  \n  al.add(\"Ravi\");  \n  al.add(\"Vijay\");  \n  al.add(\"Ravi\");  \n  al.add(\"Ajay\");  \n  \/\/Traversing elements  \n  Iterator&lt;String> itr=al.iterator();  \n  while(itr.hasNext()){  \n   System.out.println(itr.next());  \n  }  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ajay\nRavi\nVijay<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java TreeSet Example 2:<\/h3>\n\n\n\n<p>Let&#8217;s see an example of traversing elements in descending order.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeSet2{  \n public static void main(String args&#91;]){  \n TreeSet&lt;String> set=new TreeSet&lt;String>();  \n         set.add(\"Ravi\");  \n         set.add(\"Vijay\");  \n         set.add(\"Ajay\");  \n         System.out.println(\"Traversing element through Iterator in descending order\");  \n         Iterator i=set.descendingIterator();  \n         while(i.hasNext())  \n         {  \n             System.out.println(i.next());  \n         }  \n           \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeSet3{  \n public static void main(String args&#91;]){  \n TreeSet&lt;Integer> set=new TreeSet&lt;Integer>();  \n         set.add(24);  \n         set.add(66);  \n         set.add(12);  \n         set.add(15);  \n         System.out.println(\"Highest Value: \"+set.pollFirst());  \n         System.out.println(\"Lowest Value: \"+set.pollLast());  \n }  \n} <\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java TreeSet Example 3:<\/h3>\n\n\n\n<p>Let&#8217;s see an example to retrieve and remove the highest and lowest Value.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeSet3{  \n public static void main(String args&#91;]){  \n TreeSet&lt;Integer> set=new TreeSet&lt;Integer>();  \n         set.add(24);  \n         set.add(66);  \n         set.add(12);  \n         set.add(15);  \n         System.out.println(\"Highest Value: \"+set.pollFirst());  \n         System.out.println(\"Lowest Value: \"+set.pollLast());  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Highest Value: 12\nLowest Value: 66<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java TreeSet Example 4:<\/h3>\n\n\n\n<p>In this example, we perform various NavigableSet operations.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeSet4{  \n public static void main(String args&#91;]){  \n  TreeSet&lt;String> set=new TreeSet&lt;String>();  \n         set.add(\"A\");  \n         set.add(\"B\");  \n         set.add(\"C\");  \n         set.add(\"D\");  \n         set.add(\"E\");  \n         System.out.println(\"Initial Set: \"+set);  \n           \n         System.out.println(\"Reverse Set: \"+set.descendingSet());  \n           \n         System.out.println(\"Head Set: \"+set.headSet(\"C\", true));  \n          \n         System.out.println(\"SubSet: \"+set.subSet(\"A\", false, \"E\", true));  \n           \n         System.out.println(\"TailSet: \"+set.tailSet(\"C\", false));  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial Set: &#91;A, B, C, D, E]\nReverse Set: &#91;E, D, C, B, A]\nHead Set: &#91;A, B, C]\nSubSet: &#91;B, C, D, E]\nTailSet: &#91;D, E]<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java TreeSet Example 4:<\/h3>\n\n\n\n<p>In this example, we perform various SortedSetSet operations.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeSet4{  \n public static void main(String args&#91;]){  \n  TreeSet&lt;String> set=new TreeSet&lt;String>();  \n         set.add(\"A\");  \n         set.add(\"B\");  \n         set.add(\"C\");  \n         set.add(\"D\");  \n         set.add(\"E\");  \n           \n         System.out.println(\"Intial Set: \"+set);  \n           \n         System.out.println(\"Head Set: \"+set.headSet(\"C\"));  \n          \n         System.out.println(\"SubSet: \"+set.subSet(\"A\", \"E\"));  \n           \n         System.out.println(\"TailSet: \"+set.tailSet(\"C\"));  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Intial Set: &#91;A, B, C, D, E]\nHead Set: &#91;A, B]\nSubSet: &#91;A, B, C, D]\nTailSet: &#91;C, D, E]<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java TreeSet Example: Book<\/h3>\n\n\n\n<p>Let&#8217;s see a TreeSet example where we are adding books to set and printing all the books. The elements in TreeSet must be of a Comparable type. String and Wrapper classes are Comparable by default. To add user-defined objects in TreeSet, you need to implement the Comparable interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Book implements Comparable&lt;Book>{  \nint id;  \nString name,author,publisher;  \nint quantity;  \npublic Book(int id, String name, String author, String publisher, int quantity) {  \n    this.id = id;  \n    this.name = name;  \n    this.author = author;  \n    this.publisher = publisher;  \n    this.quantity = quantity;  \n}  \npublic int compareTo(Book b) {  \n    if(id>b.id){  \n        return 1;  \n    }else if(id&lt;b.id){  \n        return -1;  \n    }else{  \n    return 0;  \n    }  \n}  \n}  \npublic class TreeSetExample {  \npublic static void main(String&#91;] args) {  \n    Set&lt;Book> set=new TreeSet&lt;Book>();  \n    \/\/Creating Books  \n    Book b1=new Book(121,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);  \n    Book b2=new Book(233,\"Operating System\",\"Galvin\",\"Wiley\",6);  \n    Book b3=new Book(101,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);  \n    \/\/Adding Books to TreeSet  \n    set.add(b1);  \n    set.add(b2);  \n    set.add(b3);  \n    \/\/Traversing TreeSet  \n    for(Book b:set){  \n    System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);  \n    }  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n121 Let us C Yashwant Kanetkar BPB 8\n233 Operating System Galvin Wiley 6<\/code><\/pre>\n\n\n\n<p><\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java TreeSet class implements the Set interface that uses a tree for storage. It inherits AbstractSet class and implements the NavigableSet interface. The objects of the TreeSet class are stored in ascending order. The important points about Java TreeSet class are: Java TreeSet class contains unique elements only like HashSet. Java TreeSet class access and [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/312"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=312"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/312\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 841,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/312\/revisions\/841"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=312"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=312"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=312"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 370,
        "date": "2020-06-20T10:26:09",
        "date_gmt": "2020-06-20T10:26:09",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=370"
        },
        "modified": "2020-06-20T10:26:09",
        "modified_gmt": "2020-06-20T10:26:09",
        "slug": "queue-interface",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/queue-interface\/",
        "title": {
            "rendered": "Queue Interface"
        },
        "content": {
            "rendered": "\n<p>Java Queue interface orders the element in FIFO(First In First Out) manner. In FIFO, first element is removed first and last element is removed at last.<\/p>\n\n\n\n<h3>Queue Interface declaration<\/h3>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>interface<\/strong>&nbsp;Queue&lt;E&gt;&nbsp;<strong>extends<\/strong>&nbsp;Collection&lt;E&gt;&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Methods of Java Queue Interface<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>boolean add(object)<\/td><td>It is used to insert the specified element into this queue and return true upon success.<\/td><\/tr><tr><td>boolean offer(object)<\/td><td>It is used to insert the specified element into this queue.<\/td><\/tr><tr><td>Object remove()<\/td><td>It is used to retrieves and removes the head of this queue.<\/td><\/tr><tr><td>Object poll()<\/td><td>It is used to retrieves and removes the head of this queue, or returns null if this queue is empty.<\/td><\/tr><tr><td>Object element()<\/td><td>It is used to retrieves, but does not remove, the head of this queue.<\/td><\/tr><tr><td>Object peek()<\/td><td>It is used to retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>PriorityQueue class<\/h2>\n\n\n\n<p>The PriorityQueue class provides the facility of using queue. But it does not orders the elements in FIFO manner. It inherits AbstractQueue class.<\/p>\n\n\n\n<h3>PriorityQueue class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.PriorityQueue class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;PriorityQueue&lt;E&gt;&nbsp;<strong>extends<\/strong>&nbsp;AbstractQueue&lt;E&gt;&nbsp;<strong>implements<\/strong>&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Java PriorityQueue Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TestCollection12{  \npublic static void main(String args&#91;]){  \nPriorityQueue&lt;String> queue=new PriorityQueue&lt;String>();  \nqueue.add(\"Amit\");  \nqueue.add(\"Vijay\");  \nqueue.add(\"Karan\");  \nqueue.add(\"Jai\");  \nqueue.add(\"Rahul\");  \nSystem.out.println(\"head:\"+queue.element());  \nSystem.out.println(\"head:\"+queue.peek());  \nSystem.out.println(\"iterating the queue elements:\");  \nIterator itr=queue.iterator();  \nwhile(itr.hasNext()){  \nSystem.out.println(itr.next());  \n}  \nqueue.remove();  \nqueue.poll();  \nSystem.out.println(\"after removing two elements:\");  \nIterator&lt;String> itr2=queue.iterator();  \nwhile(itr2.hasNext()){  \nSystem.out.println(itr2.next());  \n}  \n}  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:head:Amit\n       head:Amit\n       iterating the queue elements:\n       Amit\n       Jai\n       Karan\n       Vijay\n       Rahul\n       after removing two elements:\n       Karan\n       Rahul\n       Vijay<\/code><\/pre>\n\n\n\n<h3>Java PriorityQueue Example: Book<\/h3>\n\n\n\n<p>Let&#8217;s see a PriorityQueue example where we are adding books to queue and printing all the books. The elements in PriorityQueue must be of Comparable type. String and Wrapper classes are Comparable by default. To add user-defined objects in PriorityQueue, you need to implement Comparable interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Book implements Comparable&lt;Book>{  \nint id;  \nString name,author,publisher;  \nint quantity;  \npublic Book(int id, String name, String author, String publisher, int quantity) {  \n    this.id = id;  \n    this.name = name;  \n    this.author = author;  \n    this.publisher = publisher;  \n    this.quantity = quantity;  \n}  \npublic int compareTo(Book b) {  \n    if(id>b.id){  \n        return 1;  \n    }else if(id&lt;b.id){  \n        return -1;  \n    }else{  \n    return 0;  \n    }  \n}  \n}  \npublic class LinkedListExample {  \npublic static void main(String&#91;] args) {  \n    Queue&lt;Book> queue=new PriorityQueue&lt;Book>();  \n    \/\/Creating Books  \n    Book b1=new Book(121,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);  \n    Book b2=new Book(233,\"Operating System\",\"Galvin\",\"Wiley\",6);  \n    Book b3=new Book(101,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);  \n    \/\/Adding Books to the queue  \n    queue.add(b1);  \n    queue.add(b2);  \n    queue.add(b3);  \n    System.out.println(\"Traversing the queue elements:\");  \n    \/\/Traversing queue elements  \n    for(Book b:queue){  \n    System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);  \n    }  \n    queue.remove();  \n    System.out.println(\"After removing one book record:\");  \n    for(Book b:queue){  \n        System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);  \n        }  \n}  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Traversing the queue elements:\n101 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n233 Operating System Galvin Wiley 6\n121 Let us C Yashwant Kanetkar BPB 8\nAfter removing one book record:\n121 Let us C Yashwant Kanetkar BPB 8\n233 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java Queue interface orders the element in FIFO(First In First Out) manner. In FIFO, first element is removed first and last element is removed at last. Queue Interface declaration public&nbsp;interface&nbsp;Queue&lt;E&gt;&nbsp;extends&nbsp;Collection&lt;E&gt;&nbsp;&nbsp; Methods of Java Queue Interface Method Description boolean add(object) It is used to insert the specified element into this queue and return true upon success. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/370"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=370"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/370\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 371,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/370\/revisions\/371"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=370"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=370"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=370"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 369,
        "date": "2020-06-20T10:27:51",
        "date_gmt": "2020-06-20T10:27:51",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=369"
        },
        "modified": "2020-07-13T09:58:19",
        "modified_gmt": "2020-07-13T09:58:19",
        "slug": "deque-interface",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/deque-interface\/",
        "title": {
            "rendered": "Deque Interface"
        },
        "content": {
            "rendered": "\n<p>Java Deque Interface is a linear collection that supports element insertion and removal at both ends. Deque is an acronym for&nbsp;<strong>&#8220;double ended queue&#8221;.<\/strong><\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Deque Interface declaration<\/h2>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>interface<\/strong>&nbsp;Deque&lt;E&gt;&nbsp;<strong>extends<\/strong>&nbsp;Queue&lt;E&gt;&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Methods of Java Deque Interface<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>boolean add(object)<\/td><td>It is used to insert the specified element into this deque and return true upon success.<\/td><\/tr><tr><td>boolean offer(object)<\/td><td>It is used to insert the specified element into this deque.<\/td><\/tr><tr><td>Object remove()<\/td><td>It is used to retrieves and removes the head of this deque.<\/td><\/tr><tr><td>Object poll()<\/td><td>It is used to retrieves and removes the head of this deque, or returns null if this deque is empty.<\/td><\/tr><tr><td>Object element()<\/td><td>It is used to retrieves, but does not remove, the head of this deque.<\/td><\/tr><tr><td>Object peek()<\/td><td>It is used to retrieves, but does not remove, the head of this deque, or returns null if this deque is empty.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>ArrayDeque class<\/h2>\n\n\n\n<p>The ArrayDeque class provides the facility of using deque and resizable-array. It inherits AbstractCollection class and implements the Deque interface.<\/p>\n\n\n\n<p>The important points about ArrayDeque class are:<\/p>\n\n\n\n<ul><li>Unlike Queue, we can add or remove elements from both sides.<\/li><li>Null elements are not allowed in the ArrayDeque.<\/li><li>ArrayDeque is not thread safe, in the absence of external synchronization.<\/li><li>ArrayDeque has no capacity restrictions.<\/li><li>ArrayDeque is faster than LinkedList and Stack.<\/li><\/ul>\n\n\n\n<h3>ArrayDeque Hierarchy<\/h3>\n\n\n\n<p>The hierarchy of ArrayDeque class is given in the figure displayed at the right side of the page.<\/p>\n\n\n\n<h3>ArrayDeque class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.ArrayDeque class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;ArrayDeque&lt;E&gt;&nbsp;<strong>extends<\/strong>&nbsp;AbstractCollection&lt;E&gt;&nbsp;<strong>implements<\/strong>&nbsp;Deque&lt;E&gt;,&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java ArrayDeque Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class ArrayDequeExample {  \n   public static void main(String&#91;] args) {  \n   \/\/Creating Deque and adding elements  \n   Deque&lt;String> deque = new ArrayDeque&lt;String>();  \n   deque.add(\"Ravi\");    \n   deque.add(\"Vijay\");     \n   deque.add(\"Ajay\");    \n   \/\/Traversing elements  \n   for (String str : deque) {  \n   System.out.println(str);  \n   }  \n   }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Ravi\nVijay\nAjay<\/code><\/pre>\n\n\n\n<h2>Java ArrayDeque Example: offerFirst() and pollLast()<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class DequeExample {  \npublic static void main(String&#91;] args) {  \n    Deque&lt;String> deque=new ArrayDeque&lt;String>();  \n    deque.offer(\"arvind\");  \n    deque.offer(\"vimal\");  \n    deque.add(\"mukul\");  \n    deque.offerFirst(\"jai\");  \n    System.out.println(\"After offerFirst Traversal...\");  \n    for(String s:deque){  \n        System.out.println(s);  \n    }  \n    \/\/deque.poll();  \n    \/\/deque.pollFirst();\/\/it is same as poll()  \n    deque.pollLast();  \n    System.out.println(\"After pollLast() Traversal...\");  \n    for(String s:deque){  \n        System.out.println(s);  \n    }  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>After offerFirst Traversal...\njai\narvind\nvimal\nmukul\nAfter pollLast() Traversal...\njai\narvind\nvimal<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java ArrayDeque Example: Book<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \nclass Book {    \nint id;    \nString name,author,publisher;    \nint quantity;    \npublic Book(int id, String name, String author, String publisher, int quantity) {    \n    this.id = id;    \n    this.name = name;    \n    this.author = author;    \n    this.publisher = publisher;    \n    this.quantity = quantity;    \n}    \n}    \npublic class ArrayDequeExample {    \npublic static void main(String&#91;] args) {    \n    Deque&lt;Book> set=new ArrayDeque&lt;Book>();    \n    \/\/Creating Books    \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);    \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);    \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);    \n    \/\/Adding Books to Deque   \n    set.add(b1);    \n    set.add(b2);    \n    set.add(b3);    \n    \/\/Traversing ArrayDeque  \n    for(Book b:set){    \n    System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);    \n    }    \n}    \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Let us C Yashwant Kanetkar BPB 8\n102 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java Deque Interface is a linear collection that supports element insertion and removal at both ends. Deque is an acronym for&nbsp;&#8220;double ended queue&#8221;. Deque Interface declaration public&nbsp;interface&nbsp;Deque&lt;E&gt;&nbsp;extends&nbsp;Queue&lt;E&gt;&nbsp;&nbsp; Methods of Java Deque Interface Method Description boolean add(object) It is used to insert the specified element into this deque and return true upon success. boolean offer(object) It [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/369"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=369"
                }
            ],
            "version-history": [
                {
                    "count": 2,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/369\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 842,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/369\/revisions\/842"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=369"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=369"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=369"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 368,
        "date": "2020-06-20T10:49:37",
        "date_gmt": "2020-06-20T10:49:37",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=368"
        },
        "modified": "2020-06-20T10:49:37",
        "modified_gmt": "2020-06-20T10:49:37",
        "slug": "map-interface",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/map-interface\/",
        "title": {
            "rendered": "Map Interface"
        },
        "content": {
            "rendered": "\n<p>A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry. A Map contains unique keys.<\/p>\n\n\n\n<p>A Map is useful if you have to search, update or delete elements on the basis of a key.<\/p>\n\n\n\n<h2>Java Map Hierarchy<\/h2>\n\n\n\n<p>There are two interfaces for implementing Map in java: Map and SortedMap, and three classes: HashMap, LinkedHashMap, and TreeMap. The hierarchy of Java Map is given below:<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/core\/java-map-hierarchy.png\" alt=\"Java Map Hierarchy\"\/><\/figure>\n\n\n\n<p>A Map doesn&#8217;t allow duplicate keys, but you can have duplicate values. HashMap and LinkedHashMap allow null keys and values, but TreeMap doesn&#8217;t allow any null key or value.<\/p>\n\n\n\n<p>A Map can&#8217;t be traversed, so you need to convert it into Set using&nbsp;<em>keySet()<\/em>&nbsp;or&nbsp;<em>entrySet()<\/em>&nbsp;method.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Class<\/th><th>Description<\/th><\/tr><tr><td>HashMap<\/td><td>HashMap is the implementation of Map, but it doesn&#8217;t maintain any order.<\/td><\/tr><tr><td>LinkedHashMap<\/td><td>LinkedHashMap is the implementation of Map. It inherits HashMap class. It maintains insertion order.<\/td><\/tr><tr><td>TreeMap<\/td><td>TreeMap is the implementation of Map and SortedMap. It maintains ascending order.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Useful methods of Map interface<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>V put(Object key, Object value)<\/td><td>It is used to insert an entry in the map.<\/td><\/tr><tr><td>void putAll(Map map)<\/td><td>It is used to insert the specified map in the map.<\/td><\/tr><tr><td>V putIfAbsent(K key, V value)<\/td><td>It inserts the specified value with the specified key in the map only if it is not already specified.<\/td><\/tr><tr><td>V remove(Object key)<\/td><td>It is used to delete an entry for the specified key.<\/td><\/tr><tr><td>boolean remove(Object key, Object value)<\/td><td>It removes the specified values with the associated specified keys from the map.<\/td><\/tr><tr><td>Set keySet()<\/td><td>It returns the Set view containing all the keys.<\/td><\/tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()<\/td><td>It returns the Set view containing all the keys and values.<\/td><\/tr><tr><td>void clear()<\/td><td>It is used to reset the map.<\/td><\/tr><tr><td>V compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)<\/td><td>It is used to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).<\/td><\/tr><tr><td>V computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)<\/td><td>It is used to compute its value using the given mapping function, if the specified key is not already associated with a value (or is mapped to null), and enters it into this map unless null.<\/td><\/tr><tr><td>V computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)<\/td><td>It is used to compute a new mapping given the key and its current mapped value if the value for the specified key is present and non-null.<\/td><\/tr><tr><td>boolean containsValue(Object value)<\/td><td>This method returns true if some value equal to the value exists within the map, else return false.<\/td><\/tr><tr><td>boolean containsKey(Object key)<\/td><td>This method returns true if some key equal to the key exists within the map, else return false.<\/td><\/tr><tr><td>boolean equals(Object o)<\/td><td>It is used to compare the specified Object with the Map.<\/td><\/tr><tr><td>void forEach(BiConsumer&lt;? super K,? super V&gt; action)<\/td><td>It performs the given action for each entry in the map until all entries have been processed or the action throws an exception.<\/td><\/tr><tr><td>V get(Object key)<\/td><td>This method returns the object that contains the value associated with the key.<\/td><\/tr><tr><td>V getOrDefault(Object key, V defaultValue)<\/td><td>It returns the value to which the specified key is mapped, or defaultValue if the map contains no mapping for the key.<\/td><\/tr><tr><td>int hashCode()<\/td><td>It returns the hash code value for the Map<\/td><\/tr><tr><td>boolean isEmpty()<\/td><td>This method returns true if the map is empty; returns false if it contains at least one key.<\/td><\/tr><tr><td>V merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)<\/td><td>If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.<\/td><\/tr><tr><td>V replace(K key, V value)<\/td><td>It replaces the specified value for a specified key.<\/td><\/tr><tr><td>boolean replace(K key, V oldValue, V newValue)<\/td><td>It replaces the old value with the new value for a specified key.<\/td><\/tr><tr><td>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)<\/td><td>It replaces each entry&#8217;s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.<\/td><\/tr><tr><td>Collection&nbsp;values()<\/td><td>It returns a collection view of the values contained in the map.<\/td><\/tr><tr><td>int size()<\/td><td>This method returns the number of entries in the map.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Map.Entry Interface<\/h2>\n\n\n\n<p>Entry is the subinterface of Map. So we will be accessed it by Map.Entry name. It returns a collection-view of the map, whose elements are of this class. It provides methods to get key and value.<\/p>\n\n\n\n<h3>Methods of Map.Entry interface<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>K getKey()<\/td><td>It is used to obtain a key.<\/td><\/tr><tr><td>V getValue()<\/td><td>It is used to obtain value.<\/td><\/tr><tr><td>int hashCode()<\/td><td>It is used to obtain hashCode.<\/td><\/tr><tr><td>V setValue(V value)<\/td><td>It is used to replace the value corresponding to this entry with the specified value.<\/td><\/tr><tr><td>boolean equals(Object o)<\/td><td>It is used to compare the specified object with the other existing objects.<\/td><\/tr><tr><td>static &lt;K extends Comparable&lt;? super K&gt;,V&gt; Comparator&lt;Map.Entry&lt;K,V&gt;&gt; comparingByKey()<\/td><td>It returns a comparator that compare the objects in natural order on key.<\/td><\/tr><tr><td>static &lt;K,V&gt; Comparator&lt;Map.Entry&lt;K,V&gt;&gt; comparingByKey(Comparator&lt;? super K&gt; cmp)<\/td><td>It returns a comparator that compare the objects by key using the given Comparator.<\/td><\/tr><tr><td>static &lt;K,V extends Comparable&lt;? super V&gt;&gt; Comparator&lt;Map.Entry&lt;K,V&gt;&gt; comparingByValue()<\/td><td>It returns a comparator that compare the objects in natural order on value.<\/td><\/tr><tr><td>static &lt;K,V&gt; Comparator&lt;Map.Entry&lt;K,V&gt;&gt; comparingByValue(Comparator&lt;? super V&gt; cmp)<\/td><td>It returns a comparator that compare the objects by value using the given Comparator.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java Map Example: Non-Generic (Old Style)<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Non-generic  \nimport java.util.*;  \npublic class MapExample1 {  \npublic static void main(String&#91;] args) {  \n    Map map=new HashMap();  \n    \/\/Adding elements to map  \n    map.put(1,\"Amit\");  \n    map.put(5,\"Rahul\");  \n    map.put(2,\"Jai\");  \n    map.put(6,\"Amit\");  \n    \/\/Traversing Map  \n    Set set=map.entrySet();\/\/Converting to Set so that we can traverse  \n    Iterator itr=set.iterator();  \n    while(itr.hasNext()){  \n        \/\/Converting to Map.Entry so that we can get key and value separately  \n        Map.Entry entry=(Map.Entry)itr.next();  \n        System.out.println(entry.getKey()+\" \"+entry.getValue());  \n    }  \n}  \n}<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>1 Amit\n2 Jai\n5 Rahul\n6 Amit<\/code><\/pre>\n\n\n\n<h3>Java Map Example: Generic (New Style)<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass MapExample2{  \n public static void main(String args&#91;]){  \n  Map&lt;Integer,String> map=new HashMap&lt;Integer,String>();  \n  map.put(100,\"Amit\");  \n  map.put(101,\"Vijay\");  \n  map.put(102,\"Rahul\");  \n  \/\/Elements can traverse in any order  \n  for(Map.Entry m:map.entrySet()){  \n   System.out.println(m.getKey()+\" \"+m.getValue());  \n  }  \n }  \n}<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>102 Rahul\n100 Amit\n101 Vijay<\/code><\/pre>\n\n\n\n<h3>Java Map Example: comparingByKey()<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass MapExample3{  \n public static void main(String args&#91;]){  \nMap&lt;Integer,String> map=new HashMap&lt;Integer,String>();          \n      map.put(100,\"Amit\");    \n      map.put(101,\"Vijay\");    \n      map.put(102,\"Rahul\");   \n      \/\/Returns a Set view of the mappings contained in this map        \n      map.entrySet()  \n      \/\/Returns a sequential Stream with this collection as its source  \n      .stream()  \n      \/\/Sorted according to the provided Comparator  \n      .sorted(Map.Entry.comparingByKey())  \n      \/\/Performs an action for each element of this stream  \n      .forEach(System.out::println);  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>100=Amit\n101=Vijay\n102=Rahul<\/code><\/pre>\n\n\n\n<h3>Java Map Example: comparingByKey() in Descending Order<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass MapExample4{  \n public static void main(String args&#91;]){  \nMap&lt;Integer,String> map=new HashMap&lt;Integer,String>();          \n      map.put(100,\"Amit\");    \n      map.put(101,\"Vijay\");    \n      map.put(102,\"Rahul\");    \n      \/\/Returns a Set view of the mappings contained in this map    \n      map.entrySet()  \n      \/\/Returns a sequential Stream with this collection as its source  \n      .stream()  \n      \/\/Sorted according to the provided Comparator  \n      .sorted(Map.Entry.comparingByKey(Comparator.reverseOrder()))  \n      \/\/Performs an action for each element of this stream  \n      .forEach(System.out::println);  \n }  \n}<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>102=Rahul\n101=Vijay\n100=Amit<\/code><\/pre>\n\n\n\n<h3>Java Map Example: comparingByValue()<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass MapExample5{  \n public static void main(String args&#91;]){  \nMap&lt;Integer,String> map=new HashMap&lt;Integer,String>();          \n      map.put(100,\"Amit\");    \n      map.put(101,\"Vijay\");    \n      map.put(102,\"Rahul\");    \n      \/\/Returns a Set view of the mappings contained in this map    \n      map.entrySet()  \n      \/\/Returns a sequential Stream with this collection as its source  \n      .stream()  \n      \/\/Sorted according to the provided Comparator  \n      .sorted(Map.Entry.comparingByValue())  \n      \/\/Performs an action for each element of this stream  \n      .forEach(System.out::println);  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>100=Amit\n102=Rahul\n101=Vijay<\/code><\/pre>\n\n\n\n<h3>Java Map Example: comparingByValue() in Descending Order<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass MapExample6{  \n public static void main(String args&#91;]){  \nMap&lt;Integer,String> map=new HashMap&lt;Integer,String>();          \n      map.put(100,\"Amit\");    \n      map.put(101,\"Vijay\");    \n      map.put(102,\"Rahul\");    \n     \/\/Returns a Set view of the mappings contained in this map    \n     map.entrySet()  \n     \/\/Returns a sequential Stream with this collection as its source  \n     .stream()  \n     \/\/Sorted according to the provided Comparator  \n     .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))  \n     \/\/Performs an action for each element of this stream  \n     .forEach(System.out::println);  \n }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>101=Vijay\n102=\nRahul\n100=Amit<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry. A Map contains unique keys. A Map is useful if you have to search, update or delete elements on the basis of a key. Java Map Hierarchy There are two interfaces [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/368"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=368"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/368\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 373,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/368\/revisions\/373"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=368"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=368"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=368"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 355,
        "date": "2020-06-20T10:53:30",
        "date_gmt": "2020-06-20T10:53:30",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=355"
        },
        "modified": "2020-06-20T10:53:30",
        "modified_gmt": "2020-06-20T10:53:30",
        "slug": "hashmap",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/hashmap\/",
        "title": {
            "rendered": "HashMap"
        },
        "content": {
            "rendered": "\n<p>Java&nbsp;<strong>HashMap<\/strong>&nbsp;class implements the Map interface which allows us&nbsp;<em>to store key and value pair<\/em>, where keys should be unique. If you try to insert the duplicate key, it will replace the element of the corresponding key. It is easy to perform operations using the key index like updation, deletion, etc. HashMap class is found in the&nbsp;java.util&nbsp;package.<\/p>\n\n\n\n<p>HashMap in Java is like the legacy Hashtable class, but it is not synchronized. It allows us to store the null elements as well, but there should be only one null key. Since Java 5, it is denoted as&nbsp;HashMap&lt;K,V&gt;, where K stands for key and V for value. It inherits the AbstractMap class and implements the Map interface.<\/p>\n\n\n\n<h3>Points to remember<\/h3>\n\n\n\n<ul><li>Java HashMap contains values based on the key.<\/li><li>Java HashMap contains only unique keys.<\/li><li>Java HashMap may have one null key and multiple null values.<\/li><li>Java HashMap is non synchronized.<\/li><li>Java HashMap maintains no order.<\/li><li>The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.<\/li><\/ul>\n\n\n\n<h3>Hierarchy of HashMap class<\/h3>\n\n\n\n<p>As shown in the above figure, HashMap class extends AbstractMap class and implements Map interface.<\/p>\n\n\n\n<h3>HashMap class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.HashMap class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;HashMap&lt;K,V&gt;&nbsp;<strong>extends<\/strong>&nbsp;AbstractMap&lt;K,V&gt;&nbsp;<strong>implements<\/strong>&nbsp;Map&lt;K,V&gt;,&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>HashMap class Parameters<\/h3>\n\n\n\n<p>Let&#8217;s see the Parameters for java.util.HashMap class.<\/p>\n\n\n\n<ul><li><strong>K<\/strong>: It is the type of keys maintained by this map.<\/li><li><strong>V<\/strong>: It is the type of mapped values.<\/li><\/ul>\n\n\n\n<h3>Constructors of Java HashMap class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>HashMap()<\/td><td>It is used to construct a default HashMap.<\/td><\/tr><tr><td>HashMap(Map&lt;? extends K,? extends V&gt; m)<\/td><td>It is used to initialize the hash map by using the elements of the given Map object m.<\/td><\/tr><tr><td>HashMap(int capacity)<\/td><td>It is used to initializes the capacity of the hash map to the given integer value, capacity.<\/td><\/tr><tr><td>HashMap(int capacity, float loadFactor)<\/td><td>It is used to initialize both the capacity and load factor of the hash map by using its arguments.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods of Java HashMap class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void clear()<\/td><td>It is used to remove all of the mappings from this map.<\/td><\/tr><tr><td>boolean isEmpty()<\/td><td>It is used to return true if this map contains no key-value mappings.<\/td><\/tr><tr><td>Object clone()<\/td><td>It is used to return a shallow copy of this HashMap instance: the keys and values themselves are not cloned.<\/td><\/tr><tr><td>Set entrySet()<\/td><td>It is used to return a collection view of the mappings contained in this map.<\/td><\/tr><tr><td>Set keySet()<\/td><td>It is used to return a set view of the keys contained in this map.<\/td><\/tr><tr><td>V put(Object key, Object value)<\/td><td>It is used to insert an entry in the map.<\/td><\/tr><tr><td>void putAll(Map map)<\/td><td>It is used to insert the specified map in the map.<\/td><\/tr><tr><td>V putIfAbsent(K key, V value)<\/td><td>It inserts the specified value with the specified key in the map only if it is not already specified.<\/td><\/tr><tr><td>V remove(Object key)<\/td><td>It is used to delete an entry for the specified key.<\/td><\/tr><tr><td>boolean remove(Object key, Object value)<\/td><td>It removes the specified values with the associated specified keys from the map.<\/td><\/tr><tr><td>V compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)<\/td><td>It is used to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).<\/td><\/tr><tr><td>V computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)<\/td><td>It is used to compute its value using the given mapping function, if the specified key is not already associated with a value (or is mapped to null), and enters it into this map unless null.<\/td><\/tr><tr><td>V computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)<\/td><td>It is used to compute a new mapping given the key and its current mapped value if the value for the specified key is present and non-null.<\/td><\/tr><tr><td>boolean containsValue(Object value)<\/td><td>This method returns true if some value equal to the value exists within the map, else return false.<\/td><\/tr><tr><td>boolean containsKey(Object key)<\/td><td>This method returns true if some key equal to the key exists within the map, else return false.<\/td><\/tr><tr><td>boolean equals(Object o)<\/td><td>It is used to compare the specified Object with the Map.<\/td><\/tr><tr><td>void forEach(BiConsumer&lt;? super K,? super V&gt; action)<\/td><td>It performs the given action for each entry in the map until all entries have been processed or the action throws an exception.<\/td><\/tr><tr><td>V get(Object key)<\/td><td>This method returns the object that contains the value associated with the key.<\/td><\/tr><tr><td>V getOrDefault(Object key, V defaultValue)<\/td><td>It returns the value to which the specified key is mapped, or defaultValue if the map contains no mapping for the key.<\/td><\/tr><tr><td>boolean isEmpty()<\/td><td>This method returns true if the map is empty; returns false if it contains at least one key.<\/td><\/tr><tr><td>V merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)<\/td><td>If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.<\/td><\/tr><tr><td>V replace(K key, V value)<\/td><td>It replaces the specified value for a specified key.<\/td><\/tr><tr><td>boolean replace(K key, V oldValue, V newValue)<\/td><td>It replaces the old value with the new value for a specified key.<\/td><\/tr><tr><td>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)<\/td><td>It replaces each entry&#8217;s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.<\/td><\/tr><tr><td>Collection&lt;V&gt; values()<\/td><td>It returns a collection view of the values contained in the map.<\/td><\/tr><tr><td>int size()<\/td><td>This method returns the number of entries in the map.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java HashMap Example<\/h3>\n\n\n\n<p>Let&#8217;s see a simple example of HashMap to store key and value pair.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class HashMapExample1{  \n public static void main(String args&#91;]){  \n   HashMap&lt;Integer,String> map=new HashMap&lt;Integer,String>();\/\/Creating HashMap    \n   map.put(1,\"Mango\");  \/\/Put elements in Map  \n   map.put(2,\"Apple\");    \n   map.put(3,\"Banana\");   \n   map.put(4,\"Grapes\");   \n       \n   System.out.println(\"Iterating Hashmap...\");  \n   for(Map.Entry m : map.entrySet()){    \n    System.out.println(m.getKey()+\" \"+m.getValue());    \n   }  \n}  \n} <\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Iterating Hashmap...\n1 Mango\n2 Apple\n3 Banana\n4 Grapes<\/code><\/pre>\n\n\n\n<p>In this example, we are storing Integer as the key and String as the value, so we are using&nbsp;HashMap&lt;Integer,String&gt;&nbsp;as the type. The&nbsp;put()&nbsp;method inserts the elements in the map.<\/p>\n\n\n\n<p>To get the key and value elements, we should call the getKey() and getValue() methods. The&nbsp;Map.Entry&nbsp;interface contains the&nbsp;<em>getKey()<\/em>&nbsp;and&nbsp;<em>getValue()<\/em>&nbsp;methods. But, we should call the entrySet() method of Map interface to get the instance of Map.Entry.<\/p>\n\n\n\n<h3>No Duplicate Key on HashMap<\/h3>\n\n\n\n<p>You cannot store duplicate keys in HashMap. However, if you try to store duplicate key with another value, it will replace the value.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class HashMapExample2{  \n public static void main(String args&#91;]){  \n   HashMap&lt;Integer,String> map=new HashMap&lt;Integer,String>();\/\/Creating HashMap    \n   map.put(1,\"Mango\");  \/\/Put elements in Map  \n   map.put(2,\"Apple\");    \n   map.put(3,\"Banana\");   \n   map.put(1,\"Grapes\"); \/\/trying duplicate key  \n       \n   System.out.println(\"Iterating Hashmap...\");  \n   for(Map.Entry m : map.entrySet()){    \n    System.out.println(m.getKey()+\" \"+m.getValue());    \n   }  \n}  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Iterating Hashmap...\n1 Grapes\n2 Apple\n3 Banana<\/code><\/pre>\n\n\n\n<h3>Java HashMap example to add() elements<\/h3>\n\n\n\n<p>Here, we see different ways to insert elements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass HashMap1{  \n public static void main(String args&#91;]){  \n   HashMap&lt;Integer,String> hm=new HashMap&lt;Integer,String>();    \n    System.out.println(\"Initial list of elements: \"+hm);  \n      hm.put(100,\"Amit\");    \n      hm.put(101,\"Vijay\");    \n      hm.put(102,\"Rahul\");   \n       \n      System.out.println(\"After invoking put() method \");  \n      for(Map.Entry m:hm.entrySet()){    \n       System.out.println(m.getKey()+\" \"+m.getValue());    \n      }  \n        \n      hm.putIfAbsent(103, \"Gaurav\");  \n      System.out.println(\"After invoking putIfAbsent() method \");  \n      for(Map.Entry m:hm.entrySet()){    \n           System.out.println(m.getKey()+\" \"+m.getValue());    \n          }  \n      HashMap&lt;Integer,String> map=new HashMap&lt;Integer,String>();  \n      map.put(104,\"Ravi\");  \n      map.putAll(hm);  \n      System.out.println(\"After invoking putAll() method \");  \n      for(Map.Entry m:map.entrySet()){    \n           System.out.println(m.getKey()+\" \"+m.getValue());    \n          }  \n }  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial list of elements: {}\nAfter invoking put() method \n100 Amit\n101 Vijay\n102 Rahul\nAfter invoking putIfAbsent() method \n100 Amit\n101 Vijay\n102 Rahul\n103 Gaurav\nAfter invoking putAll() method \n100 Amit\n101 Vijay\n102 Rahul\n103 Gaurav\n104 Ravi<\/code><\/pre>\n\n\n\n<h3>Java HashMap example to remove() elements<\/h3>\n\n\n\n<p>Here, we see different ways to remove elements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class HashMap2 {  \n   public static void main(String args&#91;]) {  \n    HashMap&lt;Integer,String> map=new HashMap&lt;Integer,String>();          \n      map.put(100,\"Amit\");    \n      map.put(101,\"Vijay\");    \n      map.put(102,\"Rahul\");  \n      map.put(103, \"Gaurav\");  \n    System.out.println(\"Initial list of elements: \"+map);  \n    \/\/key-based removal  \n    map.remove(100);  \n    System.out.println(\"Updated list of elements: \"+map);  \n    \/\/value-based removal  \n    map.remove(101);  \n    System.out.println(\"Updated list of elements: \"+map);  \n    \/\/key-value pair based removal  \n    map.remove(102, \"Rahul\");  \n    System.out.println(\"Updated list of elements: \"+map);  \n   }      \n}<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial list of elements: {100=Amit, 101=Vijay, 102=Rahul, 103=Gaurav}\nUpdated list of elements: {101=Vijay, 102=Rahul, 103=Gaurav}\nUpdated list of elements: {102=Rahul, 103=Gaurav}\nUpdated list of elements: {103=Gaurav}<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java HashMap example to replace() elements<\/h3>\n\n\n\n<p>Here, we see different ways to replace elements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass HashMap3{  \n public static void main(String args&#91;]){  \n   HashMap&lt;Integer,String> hm=new HashMap&lt;Integer,String>();    \n      hm.put(100,\"Amit\");    \n      hm.put(101,\"Vijay\");    \n      hm.put(102,\"Rahul\");   \n      System.out.println(\"Initial list of elements:\");  \n     for(Map.Entry m:hm.entrySet())  \n     {  \n        System.out.println(m.getKey()+\" \"+m.getValue());   \n     }  \n     System.out.println(\"Updated list of elements:\");  \n     hm.replace(102, \"Gaurav\");  \n     for(Map.Entry m:hm.entrySet())  \n     {  \n        System.out.println(m.getKey()+\" \"+m.getValue());   \n     }  \n     System.out.println(\"Updated list of elements:\");  \n     hm.replace(101, \"Vijay\", \"Ravi\");  \n     for(Map.Entry m:hm.entrySet())  \n     {  \n        System.out.println(m.getKey()+\" \"+m.getValue());   \n     }   \n     System.out.println(\"Updated list of elements:\");  \n     hm.replaceAll((k,v) -> \"Ajay\");  \n     for(Map.Entry m:hm.entrySet())  \n     {  \n        System.out.println(m.getKey()+\" \"+m.getValue());   \n     }  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial list of elements:\n100 Amit\n101 Vijay\n102 Rahul\nUpdated list of elements:\n100 Amit\n101 Vijay\n102 Gaurav\nUpdated list of elements:\n100 Amit\n101 Ravi\n102 Gaurav\nUpdated list of elements:\n100 Ajay\n101 Ajay\n102 Ajay<\/code><\/pre>\n\n\n\n<h3>Difference between HashSet and HashMap<\/h3>\n\n\n\n<p>HashSet contains only values whereas HashMap contains an entry(key and value).<\/p>\n\n\n\n<h3>Java HashMap Example: Book<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \nclass Book {    \nint id;    \nString name,author,publisher;    \nint quantity;    \npublic Book(int id, String name, String author, String publisher, int quantity) {    \n    this.id = id;    \n    this.name = name;    \n    this.author = author;    \n    this.publisher = publisher;    \n    this.quantity = quantity;    \n}    \n}    \npublic class MapExample {    \npublic static void main(String&#91;] args) {    \n    \/\/Creating map of Books    \n    Map&lt;Integer,Book> map=new HashMap&lt;Integer,Book>();    \n    \/\/Creating Books    \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);    \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);    \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);    \n    \/\/Adding Books to map   \n    map.put(1,b1);  \n    map.put(2,b2);  \n    map.put(3,b3);  \n      \n    \/\/Traversing map  \n    for(Map.Entry&lt;Integer, Book> entry:map.entrySet()){    \n        int key=entry.getKey();  \n        Book b=entry.getValue();  \n        System.out.println(key+\" Details:\");  \n        System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);   \n    }    \n}    \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>1 Details:\n101 Let us C Yashwant Kanetkar BPB 8\n2 Details:\n102 Data Communications and Networking Forouzan Mc Graw Hill 4\n3 Details:\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java&nbsp;HashMap&nbsp;class implements the Map interface which allows us&nbsp;to store key and value pair, where keys should be unique. If you try to insert the duplicate key, it will replace the element of the corresponding key. It is easy to perform operations using the key index like updation, deletion, etc. HashMap class is found in the&nbsp;java.util&nbsp;package. [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/355"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=355"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/355\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 374,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/355\/revisions\/374"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=355"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=355"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=355"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 357,
        "date": "2020-06-20T10:54:58",
        "date_gmt": "2020-06-20T10:54:58",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=357"
        },
        "modified": "2020-06-20T10:54:58",
        "modified_gmt": "2020-06-20T10:54:58",
        "slug": "working-of-hashmap",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/working-of-hashmap\/",
        "title": {
            "rendered": "Working of HashMap"
        },
        "content": {
            "rendered": "\n<h2>What is Hashing<\/h2>\n\n\n\n<p>It is the process of converting an object into an integer value. The integer value helps in indexing and faster searches.<\/p>\n\n\n\n<h2>What is HashMap<\/h2>\n\n\n\n<p>HashMap is a part of the Java collection framework. It uses a technique called Hashing. It implements the map interface. It stores the data in the pair of Key and Value. HashMap contains an array of the nodes, and the node is represented as a class. It uses an array and LinkedList data structure internally for storing Key and Value. There are four fields in HashMap.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/core\/working-of-hashmap-in-java.png\" alt=\"Working of HashMap in Java\"\/><\/figure>\n\n\n\n<p>Before understanding the internal working of HashMap, you must be aware of hashCode() and equals() method.<\/p>\n\n\n\n<ul><li><strong>equals():<\/strong>&nbsp;It checks the equality of two objects. It compares the Key, whether they are equal or not. It is a method of the Object class. It can be overridden. If you override the equals() method, then it is mandatory to override the hashCode() method.<\/li><li><strong>hashCode():<\/strong>&nbsp;This is the method of the object class. It returns the memory reference of the object in integer form. The value received from the method is used as the bucket number. The bucket number is the address of the element inside the map. Hash code of null Key is 0.<\/li><li><strong>Buckets:<\/strong>&nbsp;Array of the node is called buckets. Each node has a data structure like a LinkedList. More than one node can share the same bucket. It may be different in capacity.<\/li><\/ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/core\/working-of-hashmap-in-java2.png\" alt=\"Working of HashMap in Java\"\/><\/figure>\n\n\n\n<h2>Insert Key, Value pair in HashMap<\/h2>\n\n\n\n<p>We use put() method to insert the Key and Value pair in the HashMap. The default size of HashMap is 16 (0 to 15).<\/p>\n\n\n\n<h3>Example<\/h3>\n\n\n\n<p>In the following example, we want to insert three (Key, Value) pair in the HashMap.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>HashMap&lt;String, Integer> map = new HashMap&lt;>();  \nmap.put(\"Aman\", 19);  \nmap.put(\"Sunny\", 29);  \nmap.put(\"Ritesh\", 39); <\/code><\/pre>\n\n\n\n<p>Let&#8217;s see at which index the Key, value pair will be saved into HashMap. When we call the put() method, then it calculates the hash code of the Key &#8220;Aman.&#8221; Suppose the hash code of &#8220;Aman&#8221; is 2657860. To store the Key in memory, we have to calculate the index.<\/p>\n\n\n\n<h3>Calculating Index<\/h3>\n\n\n\n<p>Index minimizes the size of the array. The Formula for calculating the index is:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Index = hashcode(Key) &amp; (n-1)  <\/code><\/pre>\n\n\n\n<p>Where n is the size of the array. Hence the index value for &#8220;Aman&#8221; is:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Index = 2657860 &amp; (16-1) = 4  <\/code><\/pre>\n\n\n\n<p>The value 4 is the computed index value where the Key and value will store in HashMap.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/core\/working-of-hashmap-in-java3.png\" alt=\"Working of HashMap in Java\"\/><\/figure>\n\n\n\n<h2>Hash Collision<\/h2>\n\n\n\n<p>This is the case when the calculated index value is the same for two or more Keys. Let&#8217;s calculate the hash code for another Key &#8220;Sunny.&#8221; Suppose the hash code for &#8220;Sunny&#8221; is 63281940. To store the Key in the memory, we have to calculate index by using the index formula.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Index=63281940 &amp; (16-1) = 4  <\/code><\/pre>\n\n\n\n<p>The value 4 is the computed index value where the Key will be stored in HashMap. In this case, equals() method check that both Keys are equal or not. If Keys are same, replace the value with the current value. Otherwise, connect this node object to the existing node object through the LinkedList. Hence both Keys will be stored at index 4.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/core\/working-of-hashmap-in-java4.png\" alt=\"Working of HashMap in Java\"\/><\/figure>\n\n\n\n<p>Similarly, we will store the Key &#8220;Ritesh.&#8221; Suppose hash code for the Key is 2349873. The index value will be 1. Hence this Key will be stored at index 1.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/core\/working-of-hashmap-in-java5.png\" alt=\"Working of HashMap in Java\"\/><\/figure>\n\n\n\n<h2>get() method in HashMap<\/h2>\n\n\n\n<p>get() method is used to get the value by its Key. It will not fetch the value if you don&#8217;t know the Key. When get(K Key) method is called, it calculates the hash code of the Key.<\/p>\n\n\n\n<p>Suppose we have to fetch the Key &#8220;Aman.&#8221; The following method will be called.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>map.get(new Key(\"Aman\"));  <\/code><\/pre>\n\n\n\n<p>It generates the hash code as 2657860. Now calculate the index value of 2657860 by using index formula. The index value will be 4, as we have calculated above. get() method search for the index value 4. It compares the first element Key with the given Key. If both keys are equal, then it returns the value else check for the next element in the node if it exists. In our scenario, it is found as the first element of the node and return the value 19.<\/p>\n\n\n\n<p>Let&#8217;s fetch another Key &#8220;Sunny.&#8221;<\/p>\n\n\n\n<p>The hash code of the Key &#8220;Sunny&#8221; is 63281940. The calculated index value of 63281940 is 4, as we have calculated for put() method. Go to index 4 of the array and compare the first element&#8217;s Key with the given Key. It also compares Keys. In our scenario, the given Key is the second element, and the next of the node is null. It compares the second element Key with the specified Key and returns the value 29. It returns null if the next of the node is null.<\/p>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>What is Hashing It is the process of converting an object into an integer value. The integer value helps in indexing and faster searches. What is HashMap HashMap is a part of the Java collection framework. It uses a technique called Hashing. It implements the map interface. It stores the data in the pair of [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/357"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=357"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/357\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 375,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/357\/revisions\/375"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=357"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=357"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=357"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 352,
        "date": "2020-06-20T10:57:02",
        "date_gmt": "2020-06-20T10:57:02",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=352"
        },
        "modified": "2020-06-20T10:57:02",
        "modified_gmt": "2020-06-20T10:57:02",
        "slug": "linkedhashmap",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/linkedhashmap\/",
        "title": {
            "rendered": "LinkedHashMap"
        },
        "content": {
            "rendered": "\n<p>Java LinkedHashMap class is Hashtable and Linked list implementation of the Map interface, with predictable iteration order. It inherits HashMap class and implements the Map interface.<\/p>\n\n\n\n<h3>Points to remember<\/h3>\n\n\n\n<ul><li>Java LinkedHashMap contains values based on the key.<\/li><li>Java LinkedHashMap contains unique elements.<\/li><li>Java LinkedHashMap may have one null key and multiple null values.<\/li><li>Java LinkedHashMap is non synchronized.<\/li><li>Java LinkedHashMap maintains insertion order.<\/li><li>The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.<\/li><\/ul>\n\n\n\n<h3>LinkedHashMap class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.LinkedHashMap class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;LinkedHashMap&lt;K,V&gt;&nbsp;<strong>extends<\/strong>&nbsp;HashMap&lt;K,V&gt;&nbsp;<strong>implements<\/strong>&nbsp;Map&lt;K,V&gt;&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>LinkedHashMap class Parameters<\/h3>\n\n\n\n<p>Let&#8217;s see the Parameters for java.util.LinkedHashMap class.<\/p>\n\n\n\n<ul><li><strong>K<\/strong>: It is the type of keys maintained by this map.<\/li><li><strong>V<\/strong>: It is the type of mapped values.<\/li><\/ul>\n\n\n\n<h3>Constructors of Java LinkedHashMap class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>LinkedHashMap()<\/td><td>It is used to construct a default LinkedHashMap.<\/td><\/tr><tr><td>LinkedHashMap(int capacity)<\/td><td>It is used to initialize a LinkedHashMap with the given capacity.<\/td><\/tr><tr><td>LinkedHashMap(int capacity, float loadFactor)<\/td><td>It is used to initialize both the capacity and the load factor.<\/td><\/tr><tr><td>LinkedHashMap(int capacity, float loadFactor, boolean accessOrder)<\/td><td>It is used to initialize both the capacity and the load factor with specified ordering mode.<\/td><\/tr><tr><td>LinkedHashMap(Map&lt;? extends K,? extends V&gt; m)<\/td><td>It is used to initialize the LinkedHashMap with the elements from the given Map class m.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods of Java LinkedHashMap class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>V get(Object key)<\/td><td>It returns the value to which the specified key is mapped.<\/td><\/tr><tr><td>void clear()<\/td><td>It removes all the key-value pairs from a map.<\/td><\/tr><tr><td>boolean containsValue(Object value)<\/td><td>It returns true if the map maps one or more keys to the specified value.<\/td><\/tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()<\/td><td>It returns a Set view of the mappings contained in the map.<\/td><\/tr><tr><td>void forEach(BiConsumer&lt;? super K,? super V&gt; action)<\/td><td>It performs the given action for each entry in the map until all entries have been processed or the action throws an exception.<\/td><\/tr><tr><td>V getOrDefault(Object key, V defaultValue)<\/td><td>It returns the value to which the specified key is mapped or defaultValue if this map contains no mapping for the key.<\/td><\/tr><tr><td>Set&lt;K&gt; keySet()<\/td><td>It returns a Set view of the keys contained in the map<\/td><\/tr><tr><td>protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest)<\/td><td>It returns true on removing its eldest entry.<\/td><\/tr><tr><td>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)<\/td><td>It replaces each entry&#8217;s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.<\/td><\/tr><tr><td>Collection&lt;V&gt; values()<\/td><td>It returns a Collection view of the values contained in this map.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java LinkedHashMap Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass LinkedHashMap1{  \n public static void main(String args&#91;]){  \n   \n  LinkedHashMap&lt;Integer,String> hm=new LinkedHashMap&lt;Integer,String>();  \n  \n  hm.put(100,\"Amit\");  \n  hm.put(101,\"Vijay\");  \n  hm.put(102,\"Rahul\");  \n  \nfor(Map.Entry m:hm.entrySet()){  \n   System.out.println(m.getKey()+\" \"+m.getValue());  \n  }  \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:100 Amit\n       101 Vijay\n       102 Rahul<\/code><\/pre>\n\n\n\n<h3>Java LinkedHashMap Example: Key-Value pair<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass LinkedHashMap2{  \n public static void main(String args&#91;]){  \n   LinkedHashMap&lt;Integer, String> map = new LinkedHashMap&lt;Integer, String>();           \n      map.put(100,\"Amit\");    \n     map.put(101,\"Vijay\");    \n     map.put(102,\"Rahul\");    \n       \/\/Fetching key  \n       System.out.println(\"Keys: \"+map.keySet());  \n       \/\/Fetching value  \n       System.out.println(\"Values: \"+map.values());  \n       \/\/Fetching key-value pair  \n       System.out.println(\"Key-Value pairs: \"+map.entrySet());  \n }  \n} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Keys: &#91;100, 101, 102]\nValues: &#91;Amit, Vijay, Rahul]\nKey-Value pairs: &#91;100=Amit, 101=Vijay, 102=Rahul]<\/code><\/pre>\n\n\n\n<h3>Java LinkedHashMap Example:remove()<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class LinkedHashMap3 {  \n   public static void main(String args&#91;]) {  \n    Map&lt;Integer,String> map=new LinkedHashMap&lt;Integer,String>();        \n     map.put(101,\"Amit\");    \n     map.put(102,\"Vijay\");    \n     map.put(103,\"Rahul\");    \n     System.out.println(\"Before invoking remove() method: \"+map);     \n    map.remove(102);  \n    System.out.println(\"After invoking remove() method: \"+map);    \n   }      \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before invoking remove() method: {101=Amit, 102=Vijay, 103=Rahul}\nAfter invoking remove() method: {101=Amit, 103=Rahul}<\/code><\/pre>\n\n\n\n<h3>Java LinkedHashMap Example: Book<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \nclass Book {    \nint id;    \nString name,author,publisher;    \nint quantity;    \npublic Book(int id, String name, String author, String publisher, int quantity) {    \n    this.id = id;    \n    this.name = name;    \n    this.author = author;    \n    this.publisher = publisher;    \n    this.quantity = quantity;    \n}    \n}    \npublic class MapExample {    \npublic static void main(String&#91;] args) {    \n    \/\/Creating map of Books    \n    Map&lt;Integer,Book> map=new LinkedHashMap&lt;Integer,Book>();    \n    \/\/Creating Books    \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);    \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);    \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);    \n    \/\/Adding Books to map   \n    map.put(2,b2);  \n    map.put(1,b1);  \n    map.put(3,b3);  \n      \n    \/\/Traversing map  \n    for(Map.Entry&lt;Integer, Book> entry:map.entrySet()){    \n        int key=entry.getKey();  \n        Book b=entry.getValue();  \n        System.out.println(key+\" Details:\");  \n        System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);   \n    }    \n}    \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>2 Details:\n102 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n1 Details:\n101 Let us C Yashwant Kanetkar BPB 8\n3 Details:\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java LinkedHashMap class is Hashtable and Linked list implementation of the Map interface, with predictable iteration order. It inherits HashMap class and implements the Map interface. Points to remember Java LinkedHashMap contains values based on the key. Java LinkedHashMap contains unique elements. Java LinkedHashMap may have one null key and multiple null values. Java LinkedHashMap [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/352"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=352"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/352\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 376,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/352\/revisions\/376"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=352"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=352"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=352"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 364,
        "date": "2020-06-20T11:27:55",
        "date_gmt": "2020-06-20T11:27:55",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=364"
        },
        "modified": "2020-06-20T11:27:55",
        "modified_gmt": "2020-06-20T11:27:55",
        "slug": "treemap",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/treemap\/",
        "title": {
            "rendered": "TreeMap"
        },
        "content": {
            "rendered": "\n<p>Java TreeMap class is a red-black tree based implementation. It provides an efficient means of storing key-value pairs in sorted order.<\/p>\n\n\n\n<p>The important points about Java TreeMap class are:<\/p>\n\n\n\n<ul><li>Java TreeMap contains values based on the key. It implements the NavigableMap interface and extends AbstractMap class.<\/li><li>Java TreeMap contains only unique elements.<\/li><li>Java TreeMap cannot have a null key but can have multiple null values.<\/li><li>Java TreeMap is non synchronized.<\/li><li>Java TreeMap maintains ascending order.<\/li><\/ul>\n\n\n\n<h3>TreeMap class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.TreeMap class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;TreeMap&lt;K,V&gt;&nbsp;<strong>extends<\/strong>&nbsp;AbstractMap&lt;K,V&gt;&nbsp;<strong>implements<\/strong>&nbsp;NavigableMap&lt;K,V&gt;,&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>TreeMap class Parameters<\/h3>\n\n\n\n<p>Let&#8217;s see the Parameters for java.util.TreeMap class.<\/p>\n\n\n\n<ul><li><strong>K<\/strong>: It is the type of keys maintained by this map.<\/li><li><strong>V<\/strong>: It is the type of mapped values.<\/li><\/ul>\n\n\n\n<h3>Constructors of Java TreeMap class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>TreeMap()<\/td><td>It is used to construct an empty tree map that will be sorted using the natural order of its key.<\/td><\/tr><tr><td>TreeMap(Comparator&lt;? super K&gt; comparator)<\/td><td>It is used to construct an empty tree-based map that will be sorted using the comparator comp.<\/td><\/tr><tr><td>TreeMap(Map&lt;? extends K,? extends V&gt; m)<\/td><td>It is used to initialize a treemap with the entries from&nbsp;<strong>m<\/strong>, which will be sorted using the natural order of the keys.<\/td><\/tr><tr><td>TreeMap(SortedMap&lt;K,? extends V&gt; m)<\/td><td>It is used to initialize a treemap with the entries from the SortedMap&nbsp;<strong>sm<\/strong>, which will be sorted in the same order as&nbsp;<strong>sm.<\/strong><\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods of Java TreeMap class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>Map.Entry&lt;K,V&gt; ceilingEntry(K key)<\/td><td>It returns the key-value pair having the least key, greater than or equal to the specified key, or null if there is no such key.<\/td><\/tr><tr><td>K ceilingKey(K key)<\/td><td>It returns the least key, greater than the specified key or null if there is no such key.<\/td><\/tr><tr><td>void clear()<\/td><td>It removes all the key-value pairs from a map.<\/td><\/tr><tr><td>Object clone()<\/td><td>It returns a shallow copy of TreeMap instance.<\/td><\/tr><tr><td>Comparator&lt;? super K&gt; comparator()<\/td><td>It returns the comparator that arranges the key in order, or null if the map uses the natural ordering.<\/td><\/tr><tr><td>NavigableSet&lt;K&gt; descendingKeySet()<\/td><td>It returns a reverse order NavigableSet view of the keys contained in the map.<\/td><\/tr><tr><td>NavigableMap&lt;K,V&gt; descendingMap()<\/td><td>It returns the specified key-value pairs in descending order.<\/td><\/tr><tr><td>Map.Entry&nbsp;firstEntry()<\/td><td>It returns the key-value pair having the least key.<\/td><\/tr><tr><td>Map.Entry&lt;K,V&gt; floorEntry(K key)<\/td><td>It returns the greatest key, less than or equal to the specified key, or null if there is no such key.<\/td><\/tr><tr><td>void forEach(BiConsumer&lt;? super K,? super V&gt; action)<\/td><td>It performs the given action for each entry in the map until all entries have been processed or the action throws an exception.<\/td><\/tr><tr><td>SortedMap&lt;K,V&gt; headMap(K toKey)<\/td><td>It returns the key-value pairs whose keys are strictly less than toKey.<\/td><\/tr><tr><td>NavigableMap&lt;K,V&gt; headMap(K toKey, boolean inclusive)<\/td><td>It returns the key-value pairs whose keys are less than (or equal to if inclusive is true) toKey.<\/td><\/tr><tr><td>Map.Entry&lt;K,V&gt; higherEntry(K key)<\/td><td>It returns the least key strictly greater than the given key, or null if there is no such key.<\/td><\/tr><tr><td>K higherKey(K key)<\/td><td>It is used to return true if this map contains a mapping for the specified key.<\/td><\/tr><tr><td>Set&nbsp;keySet()<\/td><td>It returns the collection of keys exist in the map.<\/td><\/tr><tr><td>Map.Entry&lt;K,V&gt; lastEntry()<\/td><td>It returns the key-value pair having the greatest key, or null if there is no such key.<\/td><\/tr><tr><td>Map.Entry&lt;K,V&gt; lowerEntry(K key)<\/td><td>It returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.<\/td><\/tr><tr><td>K lowerKey(K key)<\/td><td>It returns the greatest key strictly less than the given key, or null if there is no such key.<\/td><\/tr><tr><td>NavigableSet&lt;K&gt; navigableKeySet()<\/td><td>It returns a NavigableSet view of the keys contained in this map.<\/td><\/tr><tr><td>Map.Entry&lt;K,V&gt; pollFirstEntry()<\/td><td>It removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.<\/td><\/tr><tr><td>Map.Entry&lt;K,V&gt; pollLastEntry()<\/td><td>It removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.<\/td><\/tr><tr><td>V put(K key, V value)<\/td><td>It inserts the specified value with the specified key in the map.<\/td><\/tr><tr><td>void putAll(Map&lt;? extends K,? extends V&gt; map)<\/td><td>It is used to copy all the key-value pair from one map to another map.<\/td><\/tr><tr><td>V replace(K key, V value)<\/td><td>It replaces the specified value for a specified key.<\/td><\/tr><tr><td>boolean replace(K key, V oldValue, V newValue)<\/td><td>It replaces the old value with the new value for a specified key.<\/td><\/tr><tr><td>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)<\/td><td>It replaces each entry&#8217;s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.<\/td><\/tr><tr><td>NavigableMap&lt;K,V&gt; subMap(K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)<\/td><td>It returns key-value pairs whose keys range from fromKey to toKey.<\/td><\/tr><tr><td>SortedMap&lt;K,V&gt; subMap(K fromKey, K toKey)<\/td><td>It returns key-value pairs whose keys range from fromKey, inclusive, to toKey, exclusive.<\/td><\/tr><tr><td>SortedMap&lt;K,V&gt; tailMap(K fromKey)<\/td><td>It returns key-value pairs whose keys are greater than or equal to fromKey.<\/td><\/tr><tr><td>NavigableMap&lt;K,V&gt; tailMap(K fromKey, boolean inclusive)<\/td><td>It returns key-value pairs whose keys are greater than (or equal to, if inclusive is true) fromKey.<\/td><\/tr><tr><td>boolean containsKey(Object key)<\/td><td>It returns true if the map contains a mapping for the specified key.<\/td><\/tr><tr><td>boolean containsValue(Object value)<\/td><td>It returns true if the map maps one or more keys to the specified value.<\/td><\/tr><tr><td>K firstKey()<\/td><td>It is used to return the first (lowest) key currently in this sorted map.<\/td><\/tr><tr><td>V get(Object key)<\/td><td>It is used to return the value to which the map maps the specified key.<\/td><\/tr><tr><td>K lastKey()<\/td><td>It is used to return the last (highest) key currently in the sorted map.<\/td><\/tr><tr><td>V remove(Object key)<\/td><td>It removes the key-value pair of the specified key from the map.<\/td><\/tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()<\/td><td>It returns a set view of the mappings contained in the map.<\/td><\/tr><tr><td>int size()<\/td><td>It returns the number of key-value pairs exists in the hashtable.<\/td><\/tr><tr><td>Collection&nbsp;values()<\/td><td>It returns a collection view of the values contained in the map.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java TreeMap Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeMap1{  \n public static void main(String args&#91;]){  \n   TreeMap&lt;Integer,String> map=new TreeMap&lt;Integer,String>();    \n      map.put(100,\"Amit\");    \n      map.put(102,\"Ravi\");    \n      map.put(101,\"Vijay\");    \n      map.put(103,\"Rahul\");    \n        \n      for(Map.Entry m:map.entrySet()){    \n       System.out.println(m.getKey()+\" \"+m.getValue());    \n      }    \n }  \n}  <\/code><\/pre>\n\n\n\n<p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:100 Amit\n       101 Vijay\n       102 Ravi\n       103 Rahul<\/code><\/pre>\n\n\n\n<h3>Java TreeMap Example: remove()<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class TreeMap2 {  \n   public static void main(String args&#91;]) {  \n    TreeMap&lt;Integer,String> map=new TreeMap&lt;Integer,String>();    \n      map.put(100,\"Amit\");    \n      map.put(102,\"Ravi\");    \n      map.put(101,\"Vijay\");    \n      map.put(103,\"Rahul\");    \n      System.out.println(\"Before invoking remove() method\");  \n      for(Map.Entry m:map.entrySet())  \n      {  \n          System.out.println(m.getKey()+\" \"+m.getValue());      \n      }  \n      map.remove(102);      \n      System.out.println(\"After invoking remove() method\");  \n      for(Map.Entry m:map.entrySet())  \n      {  \n          System.out.println(m.getKey()+\" \"+m.getValue());      \n      }  \n      }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before invoking remove() method\n100 Amit\n101 Vijay\n102 Ravi\n103 Rahul\nAfter invoking remove() method\n100 Amit\n101 Vijay\n103 Rahul<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Java TreeMap Example: NavigableMap<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeMap3{  \n public static void main(String args&#91;]){  \n   NavigableMap&lt;Integer,String> map=new TreeMap&lt;Integer,String>();    \n      map.put(100,\"Amit\");    \n      map.put(102,\"Ravi\");    \n      map.put(101,\"Vijay\");    \n      map.put(103,\"Rahul\");    \n      \/\/Maintains descending order  \n      System.out.println(\"descendingMap: \"+map.descendingMap());  \n      \/\/Returns key-value pairs whose keys are less than or equal to the specified key.  \n      System.out.println(\"headMap: \"+map.headMap(102,true));  \n      \/\/Returns key-value pairs whose keys are greater than or equal to the specified key.  \n      System.out.println(\"tailMap: \"+map.tailMap(102,true));  \n      \/\/Returns key-value pairs exists in between the specified key.  \n      System.out.println(\"subMap: \"+map.subMap(100, false, 102, true));   \n }  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>descendingMap: {103=Rahul, 102=Ravi, 101=Vijay, 100=Amit}\nheadMap: {100=Amit, 101=Vijay, 102=Ravi}\ntailMap: {102=Ravi, 103=Rahul}\nsubMap: {101=Vijay, 102=Ravi}<\/code><\/pre>\n\n\n\n<h3>Java TreeMap Example: SortedMap<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TreeMap4{  \n public static void main(String args&#91;]){  \n   SortedMap&lt;Integer,String> map=new TreeMap&lt;Integer,String>();    \n      map.put(100,\"Amit\");    \n      map.put(102,\"Ravi\");    \n      map.put(101,\"Vijay\");    \n      map.put(103,\"Rahul\");    \n      \/\/Returns key-value pairs whose keys are less than the specified key.  \n      System.out.println(\"headMap: \"+map.headMap(102));  \n      \/\/Returns key-value pairs whose keys are greater than or equal to the specified key.  \n      System.out.println(\"tailMap: \"+map.tailMap(102));  \n      \/\/Returns key-value pairs exists in between the specified key.  \n      System.out.println(\"subMap: \"+map.subMap(100, 102));    \n }  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>headMap: {100=Amit, 101=Vijay}\ntailMap: {102=Ravi, 103=Rahul}\nsubMap: {100=Amit, 101=Vijay}<\/code><\/pre>\n\n\n\n<h3>What is difference between HashMap and TreeMap?<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>HashMap<\/th><th>TreeMap<\/th><\/tr><tr><td>1) HashMap can contain one null key.<\/td><td>TreeMap cannot contain any null key.<\/td><\/tr><tr><td>2) HashMap maintains no order.<\/td><td>TreeMap maintains ascending order.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java TreeMap Example: Book<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \nclass Book {    \nint id;    \nString name,author,publisher;    \nint quantity;    \npublic Book(int id, String name, String author, String publisher, int quantity) {    \n    this.id = id;    \n    this.name = name;    \n    this.author = author;    \n    this.publisher = publisher;    \n    this.quantity = quantity;    \n}    \n}    \npublic class MapExample {    \npublic static void main(String&#91;] args) {    \n    \/\/Creating map of Books    \n    Map&lt;Integer,Book> map=new TreeMap&lt;Integer,Book>();    \n    \/\/Creating Books    \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);    \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);    \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);    \n    \/\/Adding Books to map   \n    map.put(2,b2);  \n    map.put(1,b1);  \n    map.put(3,b3);  \n      \n    \/\/Traversing map  \n    for(Map.Entry&lt;Integer, Book> entry:map.entrySet()){    \n        int key=entry.getKey();  \n        Book b=entry.getValue();  \n        System.out.println(key+\" Details:\");  \n        System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);   \n    }    \n}    \n}    <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-preformatted\"><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>1 Details:\n101 Let us C Yashwant Kanetkar BPB 8\n2 Details:\n102 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n3 Details:\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java TreeMap class is a red-black tree based implementation. It provides an efficient means of storing key-value pairs in sorted order. The important points about Java TreeMap class are: Java TreeMap contains values based on the key. It implements the NavigableMap interface and extends AbstractMap class. Java TreeMap contains only unique elements. Java TreeMap cannot [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/364"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=364"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/364\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 377,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/364\/revisions\/377"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=364"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=364"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=364"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 354,
        "date": "2020-06-20T11:30:33",
        "date_gmt": "2020-06-20T11:30:33",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=354"
        },
        "modified": "2020-06-20T11:30:33",
        "modified_gmt": "2020-06-20T11:30:33",
        "slug": "hashtable",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/hashtable\/",
        "title": {
            "rendered": "Hashtable"
        },
        "content": {
            "rendered": "\n<p>Java Hashtable class implements a hashtable, which maps keys to values. It inherits Dictionary class and implements the Map interface.<\/p>\n\n\n\n<h3>Points to remember<\/h3>\n\n\n\n<ul><li>A Hashtable is an array of a list. Each list is known as a bucket. The position of the bucket is identified by calling the hashcode() method. A Hashtable contains values based on the key.<\/li><li>Java Hashtable class contains unique elements.<\/li><li>Java Hashtable class doesn&#8217;t allow null key or value.<\/li><li>Java Hashtable class is synchronized.<\/li><li>The initial default capacity of Hashtable class is 11 whereas loadFactor is 0.75.<\/li><\/ul>\n\n\n\n<h3>Hashtable class declaration<\/h3>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.Hashtable class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;Hashtable&lt;K,V&gt;&nbsp;<strong>extends<\/strong>&nbsp;Dictionary&lt;K,V&gt;&nbsp;<strong>implements<\/strong>&nbsp;Map&lt;K,V&gt;,&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Hashtable class Parameters<\/h3>\n\n\n\n<p>Let&#8217;s see the Parameters for java.util.Hashtable class.<\/p>\n\n\n\n<ul><li><strong>K<\/strong>: It is the type of keys maintained by this map.<\/li><li><strong>V<\/strong>: It is the type of mapped values.<\/li><\/ul>\n\n\n\n<h3>Constructors of Java Hashtable class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>Hashtable()<\/td><td>It creates an empty hashtable having the initial default capacity and load factor.<\/td><\/tr><tr><td>Hashtable(int capacity)<\/td><td>It accepts an integer parameter and creates a hash table that contains a specified initial capacity.<\/td><\/tr><tr><td>Hashtable(int capacity, float loadFactor)<\/td><td>It is used to create a hash table having the specified initial capacity and loadFactor.<\/td><\/tr><tr><td>Hashtable(Map&lt;? extends K,? extends V&gt; t)<\/td><td>It creates a new hash table with the same mappings as the given Map.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods of Java Hashtable class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>void clear()<\/td><td>It is used to reset the hash table.<\/td><\/tr><tr><td>Object clone()<\/td><td>It returns a shallow copy of the Hashtable.<\/td><\/tr><tr><td>V compute(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)<\/td><td>It is used to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).<\/td><\/tr><tr><td>V computeIfAbsent(K key, Function&lt;? super K,? extends V&gt; mappingFunction)<\/td><td>It is used to compute its value using the given mapping function, if the specified key is not already associated with a value (or is mapped to null), and enters it into this map unless null.<\/td><\/tr><tr><td>V computeIfPresent(K key, BiFunction&lt;? super K,? super V,? extends V&gt; remappingFunction)<\/td><td>It is used to compute a new mapping given the key and its current mapped value if the value for the specified key is present and non-null.<\/td><\/tr><tr><td>Enumeration&nbsp;elements()<\/td><td>It returns an enumeration of the values in the hash table.<\/td><\/tr><tr><td>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()<\/td><td>It returns a set view of the mappings contained in the map.<\/td><\/tr><tr><td>boolean equals(Object o)<\/td><td>It is used to compare the specified Object with the Map.<\/td><\/tr><tr><td>void forEach(BiConsumer&lt;? super K,? super V&gt; action)<\/td><td>It performs the given action for each entry in the map until all entries have been processed or the action throws an exception.<\/td><\/tr><tr><td>V getOrDefault(Object key, V defaultValue)<\/td><td>It returns the value to which the specified key is mapped, or defaultValue if the map contains no mapping for the key.<\/td><\/tr><tr><td>int hashCode()<\/td><td>It returns the hash code value for the Map<\/td><\/tr><tr><td>Enumeration&lt;K&gt; keys()<\/td><td>It returns an enumeration of the keys in the hashtable.<\/td><\/tr><tr><td>Set&lt;K&gt; keySet()<\/td><td>It returns a Set view of the keys contained in the map.<\/td><\/tr><tr><td>V merge(K key, V value, BiFunction&lt;? super V,? super V,? extends V&gt; remappingFunction)<\/td><td>If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value.<\/td><\/tr><tr><td>V put(K key, V value)<\/td><td>It inserts the specified value with the specified key in the hash table.<\/td><\/tr><tr><td>void putAll(Map&lt;? extends K,? extends V&gt; t))<\/td><td>It is used to copy all the key-value pair from map to hashtable.<\/td><\/tr><tr><td>V putIfAbsent(K key, V value)<\/td><td>If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.<\/td><\/tr><tr><td>boolean remove(Object key, Object value)<\/td><td>It removes the specified values with the associated specified keys from the hashtable.<\/td><\/tr><tr><td>V replace(K key, V value)<\/td><td>It replaces the specified value for a specified key.<\/td><\/tr><tr><td>boolean replace(K key, V oldValue, V newValue)<\/td><td>It replaces the old value with the new value for a specified key.<\/td><\/tr><tr><td>void replaceAll(BiFunction&lt;? super K,? super V,? extends V&gt; function)<\/td><td>It replaces each entry&#8217;s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.<\/td><\/tr><tr><td>String toString()<\/td><td>It returns a string representation of the Hashtable object.<\/td><\/tr><tr><td>Collection&nbsp;values()<\/td><td>It returns a collection view of the values contained in the map.<\/td><\/tr><tr><td>boolean contains(Object value)<\/td><td>This method returns true if some value equal to the value exists within the hash table, else return false.<\/td><\/tr><tr><td>boolean containsValue(Object value)<\/td><td>This method returns true if some value equal to the value exists within the hash table, else return false.<\/td><\/tr><tr><td>boolean containsKey(Object key)<\/td><td>This method return true if some key equal to the key exists within the hash table, else return false.<\/td><\/tr><tr><td>boolean isEmpty()<\/td><td>This method returns true if the hash table is empty; returns false if it contains at least one key.<\/td><\/tr><tr><td>protected void rehash()<\/td><td>It is used to increase the size of the hash table and rehashes all of its keys.<\/td><\/tr><tr><td>V get(Object key)<\/td><td>This method returns the object that contains the value associated with the key.<\/td><\/tr><tr><td>V remove(Object key)<\/td><td>It is used to remove the key and its value. This method returns the value associated with the key.<\/td><\/tr><tr><td>int size()<\/td><td>This method returns the number of entries in the hash table.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Java Hashtable Example<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Hashtable1{  \n public static void main(String args&#91;]){  \n  Hashtable&lt;Integer,String> hm=new Hashtable&lt;Integer,String>();  \n  \n  hm.put(100,\"Amit\");  \n  hm.put(102,\"Ravi\");  \n  hm.put(101,\"Vijay\");  \n  hm.put(103,\"Rahul\");  \n  \n  for(Map.Entry m:hm.entrySet()){  \n   System.out.println(m.getKey()+\" \"+m.getValue());  \n  }  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>103 Rahul\n102 Ravi\n101 Vijay\n100 Amit<\/code><\/pre>\n\n\n\n<h3>Java Hashtable Example: remove()<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class Hashtable2 {  \n   public static void main(String args&#91;]) {  \n  Hashtable&lt;Integer,String> map=new Hashtable&lt;Integer,String>();        \n     map.put(100,\"Amit\");    \n     map.put(102,\"Ravi\");   \n     map.put(101,\"Vijay\");    \n     map.put(103,\"Rahul\");    \n     System.out.println(\"Before remove: \"+ map);    \n       \/\/ Remove value for key 102  \n       map.remove(102);  \n       System.out.println(\"After remove: \"+ map);  \n   }      \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Before remove: {103=Rahul, 102=Ravi, 101=Vijay, 100=Amit}\nAfter remove: {103=Rahul, 101=Vijay, 100=Amit}<\/code><\/pre>\n\n\n\n<h3>Java Hashtable Example: getOrDefault()<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Hashtable3{  \n public static void main(String args&#91;]){  \n    Hashtable&lt;Integer,String> map=new Hashtable&lt;Integer,String>();          \n     map.put(100,\"Amit\");    \n     map.put(102,\"Ravi\");   \n     map.put(101,\"Vijay\");    \n     map.put(103,\"Rahul\");    \n     \/\/Here, we specify the if and else statement as arguments of the method  \n     System.out.println(map.getOrDefault(101, \"Not Found\"));  \n     System.out.println(map.getOrDefault(105, \"Not Found\"));  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Vijay\nNot Found<\/code><\/pre>\n\n\n\n<h3>Java Hashtable Example: putIfAbsent()<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass Hashtable4{  \n public static void main(String args&#91;]){  \n    Hashtable&lt;Integer,String> map=new Hashtable&lt;Integer,String>();          \n     map.put(100,\"Amit\");    \n     map.put(102,\"Ravi\");   \n     map.put(101,\"Vijay\");    \n     map.put(103,\"Rahul\");    \n     System.out.println(\"Initial Map: \"+map);  \n     \/\/Inserts, as the specified pair is unique  \n     map.putIfAbsent(104,\"Gaurav\");  \n     System.out.println(\"Updated Map: \"+map);  \n     \/\/Returns the current value, as the specified pair already exist  \n     map.putIfAbsent(101,\"Vijay\");  \n     System.out.println(\"Updated Map: \"+map);  \n }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial Map: {103=Rahul, 102=Ravi, 101=Vijay, 100=Amit}\nUpdated Map: {104=Gaurav, 103=Rahul, 102=Ravi, 101=Vijay, 100=Amit}\nUpdated Map: {104=Gaurav, 103=Rahul, 102=Ravi, 101=Vijay, 100=Amit}<\/code><\/pre>\n\n\n\n<h3>Java Hashtable Example: Book<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \nclass Book {    \nint id;    \nString name,author,publisher;    \nint quantity;    \npublic Book(int id, String name, String author, String publisher, int quantity) {    \n    this.id = id;    \n    this.name = name;    \n    this.author = author;    \n    this.publisher = publisher;    \n    this.quantity = quantity;    \n}    \n}    \npublic class HashtableExample {    \npublic static void main(String&#91;] args) {    \n    \/\/Creating map of Books    \n    Map&lt;Integer,Book> map=new Hashtable&lt;Integer,Book>();    \n    \/\/Creating Books    \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);    \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);    \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);    \n    \/\/Adding Books to map   \n    map.put(1,b1);  \n    map.put(2,b2);  \n    map.put(3,b3);      \n    \/\/Traversing map  \n    for(Map.Entry&lt;Integer, Book> entry:map.entrySet()){    \n        int key=entry.getKey();  \n        Book b=entry.getValue();  \n        System.out.println(key+\" Details:\");  \n        System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);   \n    }    \n}    \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>3 Details:\n103 Operating System Galvin Wiley 6\n2 Details:\n102 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n1 Details:\n101 Let us C Yashwant Kanetkar BPB 8<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java Hashtable class implements a hashtable, which maps keys to values. It inherits Dictionary class and implements the Map interface. Points to remember A Hashtable is an array of a list. Each list is known as a bucket. The position of the bucket is identified by calling the hashcode() method. A Hashtable contains values based [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/354"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=354"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/354\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 378,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/354\/revisions\/378"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=354"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=354"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=354"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 348,
        "date": "2020-06-20T11:31:02",
        "date_gmt": "2020-06-20T11:31:02",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=348"
        },
        "modified": "2020-06-20T11:31:02",
        "modified_gmt": "2020-06-20T11:31:02",
        "slug": "hashmap-and-hashtable",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/hashmap-and-hashtable\/",
        "title": {
            "rendered": "HashMap and Hashtable"
        },
        "content": {
            "rendered": "\n<p>HashMap and Hashtable both are used to store data in key and value form. Both are using hashing technique to store unique keys.<\/p>\n\n\n\n<p>But there are many differences between HashMap and Hashtable classes that are given below.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>HashMap<\/th><th>Hashtable<\/th><\/tr><tr><td>1) HashMap is&nbsp;<strong>non synchronized<\/strong>. It is not-thread safe and can&#8217;t be shared between many threads without proper synchronization code.<\/td><td>Hashtable is&nbsp;<strong>synchronized<\/strong>. It is thread-safe and can be shared with many threads.<\/td><\/tr><tr><td>2) HashMap&nbsp;<strong>allows one null key and multiple null values<\/strong>.<\/td><td>Hashtable&nbsp;<strong>doesn&#8217;t allow any null key or value<\/strong>.<\/td><\/tr><tr><td>3) HashMap is a&nbsp;<strong>new class introduced in JDK 1.2<\/strong>.<\/td><td>Hashtable is a&nbsp;<strong>legacy class<\/strong>.<\/td><\/tr><tr><td>4) HashMap is&nbsp;<strong>fast<\/strong>.<\/td><td>Hashtable is&nbsp;<strong>slow<\/strong>.<\/td><\/tr><tr><td>5) We can make the HashMap as synchronized by calling this code<br>Map m = Collections.synchronizedMap(hashMap);<\/td><td>Hashtable is internally synchronized and can&#8217;t be unsynchronized.<\/td><\/tr><tr><td>6) HashMap is&nbsp;<strong>traversed by Iterator<\/strong>.<\/td><td>Hashtable is&nbsp;<strong>traversed by Enumerator and Iterator<\/strong>.<\/td><\/tr><tr><td>7) Iterator in HashMap is&nbsp;<strong>fail-fast<\/strong>.<\/td><td>Enumerator in Hashtable is&nbsp;<strong>not fail-fast<\/strong>.<\/td><\/tr><tr><td>8) HashMap inherits&nbsp;<strong>AbstractMap<\/strong>&nbsp;class.<\/td><td>Hashtable inherits&nbsp;<strong>Dictionary<\/strong>&nbsp;class.<\/td><\/tr><\/tbody><\/table><\/figure>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>HashMap and Hashtable both are used to store data in key and value form. Both are using hashing technique to store unique keys. But there are many differences between HashMap and Hashtable classes that are given below. HashMap Hashtable 1) HashMap is&nbsp;non synchronized. It is not-thread safe and can&#8217;t be shared between many threads without [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/348"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=348"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/348\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 379,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/348\/revisions\/379"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=348"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=348"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=348"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 356,
        "date": "2020-06-20T11:32:41",
        "date_gmt": "2020-06-20T11:32:41",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=356"
        },
        "modified": "2020-06-20T11:32:41",
        "modified_gmt": "2020-06-20T11:32:41",
        "slug": "enumset",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/enumset\/",
        "title": {
            "rendered": "EnumSet"
        },
        "content": {
            "rendered": "\n<p>Java EnumSet class is the specialized Set implementation for use with enum types. It inherits AbstractSet class and implements the Set interface.<\/p>\n\n\n\n<h3>EnumSet class hierarchy<\/h3>\n\n\n\n<p>The hierarchy of EnumSet class is given in the figure given below.<\/p>\n\n\n\n<h2>EnumSet class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.EnumSet class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>abstract<\/strong>&nbsp;<strong>class<\/strong>&nbsp;EnumSet&lt;E&nbsp;<strong>extends<\/strong>&nbsp;Enum&lt;E&gt;&gt;&nbsp;<strong>extends<\/strong>&nbsp;AbstractSet&lt;E&gt;&nbsp;<strong>implements<\/strong>&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h3>Methods of Java EnumSet class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; allOf(Class&lt;E&gt; elementType)<\/td><td>It is used to create an enum set containing all of the elements in the specified element type.<\/td><\/tr><tr><td>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; copyOf(Collection&lt;E&gt; c)<\/td><td>It is used to create an enum set initialized from the specified collection.<\/td><\/tr><tr><td>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; noneOf(Class&lt;E&gt; elementType)<\/td><td>It is used to create an empty enum set with the specified element type.<\/td><\/tr><tr><td>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; of(E e)<\/td><td>It is used to create an enum set initially containing the specified element.<\/td><\/tr><tr><td>static &lt;E extends Enum&lt;E&gt;&gt; EnumSet&lt;E&gt; range(E from, E to)<\/td><td>It is used to create an enum set initially containing the specified elements.<\/td><\/tr><tr><td>EnumSet&lt;E&gt; clone()<\/td><td>It is used to return a copy of this set.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Java EnumSet Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nenum days {  \n  SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY  \n}  \npublic class EnumSetExample {  \n  public static void main(String&#91;] args) {  \n    Set&lt;days> set = EnumSet.of(days.TUESDAY, days.WEDNESDAY);  \n    \/\/ Traversing elements  \n    Iterator&lt;days> iter = set.iterator();  \n    while (iter.hasNext())  \n      System.out.println(iter.next());  \n  }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>TUESDAY\nWEDNESDAY\n\ufeff<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java EnumSet Example: allOf() and noneOf()<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nenum days {  \n  SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY  \n}  \npublic class EnumSetExample {  \n  public static void main(String&#91;] args) {  \n    Set&lt;days> set1 = EnumSet.allOf(days.class);  \n      System.out.println(\"Week Days:\"+set1);  \n      Set&lt;days> set2 = EnumSet.noneOf(days.class);  \n      System.out.println(\"Week Days:\"+set2);     \n  }  \n}<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Week Days:&#91;SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY]\nWeek Days:&#91;]<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java EnumSet class is the specialized Set implementation for use with enum types. It inherits AbstractSet class and implements the Set interface. EnumSet class hierarchy The hierarchy of EnumSet class is given in the figure given below. EnumSet class declaration Let&#8217;s see the declaration for java.util.EnumSet class. public&nbsp;abstract&nbsp;class&nbsp;EnumSet&lt;E&nbsp;extends&nbsp;Enum&lt;E&gt;&gt;&nbsp;extends&nbsp;AbstractSet&lt;E&gt;&nbsp;implements&nbsp;Cloneable,&nbsp;Serializable&nbsp;&nbsp; Methods of Java EnumSet class Method Description [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/356"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=356"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/356\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 380,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/356\/revisions\/380"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=356"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=356"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=356"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 362,
        "date": "2020-06-20T11:34:31",
        "date_gmt": "2020-06-20T11:34:31",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=362"
        },
        "modified": "2020-06-20T11:34:31",
        "modified_gmt": "2020-06-20T11:34:31",
        "slug": "enummap",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/enummap\/",
        "title": {
            "rendered": "EnumMap"
        },
        "content": {
            "rendered": "\n<p>Java EnumMap class is the specialized Map implementation for enum keys. It inherits Enum and AbstractMap classes.<\/p>\n\n\n\n<h3>EnumMap class hierarchy<\/h3>\n\n\n\n<p>The hierarchy of EnumMap class is given in the figure given below.<\/p>\n\n\n\n<h2>EnumMap class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.EnumMap class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;EnumMap&lt;K&nbsp;<strong>extends<\/strong>&nbsp;Enum&lt;K&gt;,V&gt;&nbsp;<strong>extends<\/strong>&nbsp;AbstractMap&lt;K,V&gt;&nbsp;<strong>implements<\/strong>&nbsp;Serializable,&nbsp;Cloneable&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<h2>EnumMap class Parameters<\/h2>\n\n\n\n<p>Let&#8217;s see the Parameters for java.util.EnumMap class.<\/p>\n\n\n\n<ul><li><strong>K:<\/strong>&nbsp;It is the type of keys maintained by this map.<\/li><li><strong>V:<\/strong>&nbsp;It is the type of mapped values.<\/li><\/ul>\n\n\n\n<h3>Constructors of Java EnumMap class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Constructor<\/th><th>Description<\/th><\/tr><tr><td>EnumMap(Class&lt;K&gt; keyType)<\/td><td>It is used to create an empty enum map with the specified key type.<\/td><\/tr><tr><td>EnumMap(EnumMap&lt;K,? extends V&gt; m)<\/td><td>It is used to create an enum map with the same key type as the specified enum map.<\/td><\/tr><tr><td>EnumMap(Map&lt;K,? extends V&gt; m)<\/td><td>It is used to create an enum map initialized from the specified map.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Methods of Java EnumMap class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN<\/th><th>Method<\/th><th>Description<\/th><\/tr><tr><td>1<\/td><td>clear()<\/td><td>It is used to clear all the mapping from the map.<\/td><\/tr><tr><td>2<\/td><td>clone()<\/td><td>It is used to copy the mapped value of one map to another map.<\/td><\/tr><tr><td>3<\/td><td>containsKey()<\/td><td>It is used to check whether a specified key is present in this map or not.<\/td><\/tr><tr><td>4<\/td><td>containsValue()<\/td><td>It is used to check whether one or more key is associated with a given value or not.<\/td><\/tr><tr><td>5<\/td><td>entrySet()<\/td><td>It is used to create a set of elements contained in the EnumMap.<\/td><\/tr><tr><td>6<\/td><td>equals()<\/td><td>It is used to compare two maps for equality.<\/td><\/tr><tr><td>7<\/td><td>get()<\/td><td>It is used to get the mapped value of the specified key.<\/td><\/tr><tr><td>8<\/td><td>hashCode()<\/td><td>It is used to get the hashcode value of the EnumMap.<\/td><\/tr><tr><td>9<\/td><td>keySet()<\/td><td>It is used to get the set view of the keys contained in the map.<\/td><\/tr><tr><td>10<\/td><td>size()<\/td><td>It is used to get the size of the EnumMap.<\/td><\/tr><tr><td>11<\/td><td>Values()<\/td><td>It is used to create a collection view of the values contained in this map.<\/td><\/tr><tr><td>12<\/td><td>put()<\/td><td>It is used to associate the given value with the given key in this EnumMap.<\/td><\/tr><tr><td>13<\/td><td>putAll()<\/td><td>It is used to copy all the mappings from one EnumMap to a new EnumMap.<\/td><\/tr><tr><td>14<\/td><td>remove()<\/td><td>It is used to remove the mapping for the given key from EnumMap if the given key is present.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java EnumMap Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class EnumMapExample {  \n   \/\/ create an enum  \n   public enum Days {  \n   Monday, Tuesday, Wednesday, Thursday  \n   };  \n   public static void main(String&#91;] args) {  \n   \/\/create and populate enum map  \n   EnumMap&lt;Days, String> map = new EnumMap&lt;Days, String>(Days.class);  \n   map.put(Days.Monday, \"1\");  \n   map.put(Days.Tuesday, \"2\");  \n   map.put(Days.Wednesday, \"3\");  \n   map.put(Days.Thursday, \"4\");  \n   \/\/ print the map  \n   for(Map.Entry m:map.entrySet()){    \n       System.out.println(m.getKey()+\" \"+m.getValue());    \n      }   \n   }  \n}<\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Monday 1\nTuesday 2\nWednesday 3\nThursday 4<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java EnumMap Example: Book<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \nclass Book {    \nint id;    \nString name,author,publisher;    \nint quantity;    \npublic Book(int id, String name, String author, String publisher, int quantity) {    \n    this.id = id;    \n    this.name = name;    \n    this.author = author;    \n    this.publisher = publisher;    \n    this.quantity = quantity;    \n}    \n}    \npublic class EnumMapExample {   \n\/\/ Creating enum  \n    public enum Key{  \n           One, Two, Three  \n           };  \npublic static void main(String&#91;] args) {    \n    EnumMap&lt;Key, Book> map = new EnumMap&lt;Key, Book>(Key.class);  \n    \/\/ Creating Books    \n    Book b1=new Book(101,\"Let us C\",\"Yashwant Kanetkar\",\"BPB\",8);    \n    Book b2=new Book(102,\"Data Communications &amp; Networking\",\"Forouzan\",\"Mc Graw Hill\",4);    \n    Book b3=new Book(103,\"Operating System\",\"Galvin\",\"Wiley\",6);    \n    \/\/ Adding Books to Map   \n       map.put(Key.One, b1);  \n       map.put(Key.Two, b2);  \n       map.put(Key.Three, b3);  \n    \/\/ Traversing EnumMap  \n       for(Map.Entry&lt;Key, Book> entry:map.entrySet()){      \n            Book b=entry.getValue();    \n            System.out.println(b.id+\" \"+b.name+\" \"+b.author+\" \"+b.publisher+\" \"+b.quantity);     \n        }       \n}    \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>101 Let us C Yashwant Kanetkar BPB 8\n102 Data Communications &amp; Networking Forouzan Mc Graw Hill 4\n103 Operating System Galvin Wiley 6<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java EnumMap class is the specialized Map implementation for enum keys. It inherits Enum and AbstractMap classes. EnumMap class hierarchy The hierarchy of EnumMap class is given in the figure given below. EnumMap class declaration Let&#8217;s see the declaration for java.util.EnumMap class. public&nbsp;class&nbsp;EnumMap&lt;K&nbsp;extends&nbsp;Enum&lt;K&gt;,V&gt;&nbsp;extends&nbsp;AbstractMap&lt;K,V&gt;&nbsp;implements&nbsp;Serializable,&nbsp;Cloneable&nbsp;&nbsp; EnumMap class Parameters Let&#8217;s see the Parameters for java.util.EnumMap class. K:&nbsp;It is [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/362"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=362"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/362\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 381,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/362\/revisions\/381"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=362"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=362"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=362"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 367,
        "date": "2020-06-20T11:42:21",
        "date_gmt": "2020-06-20T11:42:21",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=367"
        },
        "modified": "2020-06-20T11:42:21",
        "modified_gmt": "2020-06-20T11:42:21",
        "slug": "collections-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/collections-class\/",
        "title": {
            "rendered": "Collections class"
        },
        "content": {
            "rendered": "\n<h1>Java Collections class<\/h1>\n\n\n\n<p>Java collection class is used exclusively with static methods that operate on or return collections. It inherits Object class.<\/p>\n\n\n\n<p>The important points about Java Collections class are:<\/p>\n\n\n\n<ul><li>Java Collection class supports the&nbsp;<strong>polymorphic algorithms<\/strong>&nbsp;that operate on collections.<\/li><li>Java Collection class throws a&nbsp;<strong>NullPointerException<\/strong>&nbsp;if the collections or class objects provided to them are null.<\/li><\/ul>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Collections class declaration<\/h2>\n\n\n\n<p>Let&#8217;s see the declaration for java.util.Collections class.<\/p>\n\n\n\n<ol><li><strong>public<\/strong>&nbsp;<strong>class<\/strong>&nbsp;Collections&nbsp;<strong>extends<\/strong>&nbsp;Object&nbsp;&nbsp;<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>SN<\/th><th>Modifier &amp; Type<\/th><th>Methods<\/th><th>Descriptions<\/th><\/tr><tr><td>1)<\/td><td>static &lt;T&gt; boolean<\/td><td>addAll()<\/td><td>It is used to adds all of the specified elements to the specified collection.<\/td><\/tr><tr><td>2)<\/td><td>static &lt;T&gt; Queue&lt;T&gt;<\/td><td>asLifoQueue()<\/td><td>It returns a view of a Deque as a Last-in-first-out (LIFO) Queue.<\/td><\/tr><tr><td>3)<\/td><td>static &lt;T&gt; int<\/td><td>binarySearch()<\/td><td>It searches the list for the specified object and returns their position in a sorted list.<\/td><\/tr><tr><td>4)<\/td><td>static &lt;E&gt; Collection&lt;E&gt;<\/td><td>checkedCollection()<\/td><td>It is used to returns a dynamically typesafe view of the specified collection.<\/td><\/tr><tr><td>5)<\/td><td>static &lt;E&gt; List&lt;E&gt;<\/td><td>checkedList()<\/td><td>It is used to returns a dynamically typesafe view of the specified list.<\/td><\/tr><tr><td>6)<\/td><td>static &lt;K,V&gt; Map&lt;K,V&gt;<\/td><td>checkedMap()<\/td><td>It is used to returns a dynamically typesafe view of the specified map.<\/td><\/tr><tr><td>7)<\/td><td>static &lt;K,V&gt; NavigableMap&lt;K,V&gt;<\/td><td>checkedNavigableMap()<\/td><td>It is used to returns a dynamically typesafe view of the specified navigable map.<\/td><\/tr><tr><td>8)<\/td><td>static &lt;E&gt; NavigableSet&lt;E&gt;<\/td><td>checkedNavigableSet()<\/td><td>It is used to returns a dynamically typesafe view of the specified navigable set.<\/td><\/tr><tr><td>9)<\/td><td>static &lt;E&gt; Queue&lt;E&gt;<\/td><td>checkedQueue()<\/td><td>It is used to returns a dynamically typesafe view of the specified queue.<\/td><\/tr><tr><td>10)<\/td><td>static &lt;E&gt; Set&lt;E&gt;<\/td><td>checkedSet()<\/td><td>It is used to returns a dynamically typesafe view of the specified set.<\/td><\/tr><tr><td>11)<\/td><td>static &lt;K,V&gt; SortedMap&lt;K,V&gt;<\/td><td>checkedSortedMap()<\/td><td>It is used to returns a dynamically typesafe view of the specified sorted map.<\/td><\/tr><tr><td>12)<\/td><td>static &lt;E&gt; SortedSet&lt;E&gt;<\/td><td>checkedSortedSet()<\/td><td>It is used to returns a dynamically typesafe view of the specified sorted set.<\/td><\/tr><tr><td>13)<\/td><td>static &lt;T&gt; void<\/td><td>copy()<\/td><td>It is used to copy all the elements from one list into another list.<\/td><\/tr><tr><td>14)<\/td><td>static boolean<\/td><td>disjoint()<\/td><td>It returns true if the two specified collections have no elements in common.<\/td><\/tr><tr><td>15)<\/td><td>static &lt;T&gt; Enumeration&lt;T&gt;<\/td><td>emptyEnumeration()<\/td><td>It is used to get an enumeration that has no elements.<\/td><\/tr><tr><td>16)<\/td><td>static &lt;T&gt; Iterator&lt;T&gt;<\/td><td>emptyIterator()<\/td><td>It is used to get an Iterator that has no elements.<\/td><\/tr><tr><td>17)<\/td><td>static &lt;T&gt; List&lt;T&gt;<\/td><td>emptyList()<\/td><td>It is used to get a List that has no elements.<\/td><\/tr><tr><td>18)<\/td><td>static &lt;T&gt; ListIterator&lt;T&gt;<\/td><td>emptyListIterator()<\/td><td>It is used to get a List Iterator that has no elements.<\/td><\/tr><tr><td>19)<\/td><td>static &lt;K,V&gt; Map&lt;K,V&gt;<\/td><td>emptyMap()<\/td><td>It returns an empty map which is immutable.<\/td><\/tr><tr><td>20)<\/td><td>static &lt;K,V&gt; NavigableMap&lt;K,V&gt;<\/td><td>emptyNavigableMap()<\/td><td>It returns an empty navigable map which is immutable.<\/td><\/tr><tr><td>21)<\/td><td>static &lt;E&gt; NavigableSet&lt;E&gt;<\/td><td>emptyNavigableSet()<\/td><td>It is used to get an empty navigable set which is immutable in nature.<\/td><\/tr><tr><td>22)<\/td><td>static &lt;T&gt; Set&lt;T&gt;<\/td><td>emptySet()<\/td><td>It is used to get the set that has no elements.<\/td><\/tr><tr><td>23)<\/td><td>static &lt;K,V&gt; SortedMap&lt;K,V&gt;<\/td><td>emptySortedMap()<\/td><td>It returns an empty sorted map which is immutable.<\/td><\/tr><tr><td>24)<\/td><td>static &lt;E&gt; SortedSet&lt;E&gt;<\/td><td>emptySortedSet()<\/td><td>It is used to get the sorted set that has no elements.<\/td><\/tr><tr><td>25)<\/td><td>static &lt;T&gt; Enumeration&lt;T&gt;<\/td><td>enumeration()<\/td><td>It is used to get the enumeration over the specified collection.<\/td><\/tr><tr><td>26)<\/td><td>static &lt;T&gt; void<\/td><td>fill()<\/td><td>It is used to replace all of the elements of the specified list with the specified elements.<\/td><\/tr><tr><td>27)<\/td><td>static int<\/td><td>frequency()<\/td><td>It is used to get the number of elements in the specified collection equal to the specified object.<\/td><\/tr><tr><td>28)<\/td><td>static int<\/td><td>indexOfSubList()<\/td><td>It is used to get the starting position of the first occurrence of the specified target list within the specified source list. It returns -1 if there is no such occurrence in the specified list.<\/td><\/tr><tr><td>29)<\/td><td>static int<\/td><td>lastIndexOfSubList()<\/td><td>It is used to get the starting position of the last occurrence of the specified target list within the specified source list. It returns -1 if there is no such occurrence in the specified list.<\/td><\/tr><tr><td>30)<\/td><td>static &lt;T&gt; ArrayList&lt;T&gt;<\/td><td>list()<\/td><td>It is used to get an array list containing the elements returned by the specified enumeration in the order in which they are returned by the enumeration.<\/td><\/tr><tr><td>31)<\/td><td>static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T<\/td><td>max()<\/td><td>It is used to get the maximum value of the given collection, according to the natural ordering of its elements.<\/td><\/tr><tr><td>32)<\/td><td>static &lt;T extends Object &amp; Comparable&lt;? super T&gt;&gt; T<\/td><td>min()<\/td><td>It is used to get the minimum value of the given collection, according to the natural ordering of its elements.<\/td><\/tr><tr><td>33)<\/td><td>static &lt;T&gt; List&lt;T&gt;<\/td><td>nCopies()<\/td><td>It is used to get an immutable list consisting of&nbsp;<strong>n<\/strong>&nbsp;copies of the specified object.<\/td><\/tr><tr><td>34)<\/td><td>static &lt;E&gt; Set&lt;E&gt;<\/td><td>newSetFromMap()<\/td><td>It is used to return a set backed by the specified map.<\/td><\/tr><tr><td>35)<\/td><td>static &lt;T&gt; boolean<\/td><td>replaceAll()<\/td><td>It is used to replace all occurrences of one specified value in a list with the other specified value.<\/td><\/tr><tr><td>36)<\/td><td>static void<\/td><td>reverse()<\/td><td>It is used to reverse the order of the elements in the specified list.<\/td><\/tr><tr><td>37)<\/td><td>static &lt;T&gt; Comparator&lt;T&gt;<\/td><td>reverseOrder()<\/td><td>It is used to get the comparator that imposes the reverse of the natural ordering on a collection of objects which implement the Comparable interface.<\/td><\/tr><tr><td>38)<\/td><td>static void<\/td><td>rotate()<\/td><td>It is used to rotate the elements in the specified list by a given distance.<\/td><\/tr><tr><td>39)<\/td><td>static void<\/td><td>shuffle()<\/td><td>It is used to randomly reorders the specified list elements using a default randomness.<\/td><\/tr><tr><td>40)<\/td><td>static &lt;T&gt; Set&lt;T&gt;<\/td><td>singleton()<\/td><td>It is used to get an immutable set which contains only the specified object.<\/td><\/tr><tr><td>41)<\/td><td>static &lt;T&gt; List&lt;T&gt;<\/td><td>singletonList()<\/td><td>It is used to get an immutable list which contains only the specified object.<\/td><\/tr><tr><td>42)<\/td><td>static &lt;K,V&gt; Map&lt;K,V&gt;<\/td><td>singletonMap()<\/td><td>It is used to get an immutable map, mapping only the specified key to the specified value.<\/td><\/tr><tr><td>43)<\/td><td>static &lt;T extends Comparable&lt;? super T&gt;&gt;void<\/td><td>sort()<\/td><td>It is used to sort the elements presents in the specified list of collection in ascending order.<\/td><\/tr><tr><td>44)<\/td><td>static void<\/td><td>swap()<\/td><td>It is used to swap the elements at the specified positions in the specified list.<\/td><\/tr><tr><td>45)<\/td><td>static &lt;T&gt; Collection&lt;T&gt;<\/td><td>synchronizedCollection()<\/td><td>It is used to get a synchronized (thread-safe) collection backed by the specified collection.<\/td><\/tr><tr><td>46)<\/td><td>static &lt;T&gt; List&lt;T&gt;<\/td><td>synchronizedList()<\/td><td>It is used to get a synchronized (thread-safe) collection backed by the specified list.<\/td><\/tr><tr><td>47)<\/td><td>static &lt;K,V&gt; Map&lt;K,V&gt;<\/td><td>synchronizedMap()<\/td><td>It is used to get a synchronized (thread-safe) map backed by the specified map.<\/td><\/tr><tr><td>48)<\/td><td>static &lt;K,V&gt; NavigableMap&lt;K,V&gt;<\/td><td>synchronizedNavigableMap()<\/td><td>It is used to get a synchronized (thread-safe) navigable map backed by the specified navigable map.<\/td><\/tr><tr><td>49)<\/td><td>static &lt;T&gt; NavigableSet&lt;T&gt;<\/td><td>synchronizedNavigableSet()<\/td><td>It is used to get a synchronized (thread-safe) navigable set backed by the specified navigable set.<\/td><\/tr><tr><td>50)<\/td><td>static &lt;T&gt; Set&lt;T&gt;<\/td><td>synchronizedSet()<\/td><td>It is used to get a synchronized (thread-safe) set backed by the specified set.<\/td><\/tr><tr><td>51)<\/td><td>static &lt;K,V&gt; SortedMap&lt;K,V&gt;<\/td><td>synchronizedSortedMap()<\/td><td>It is used to get a synchronized (thread-safe) sorted map backed by the specified sorted map.<\/td><\/tr><tr><td>52)<\/td><td>static &lt;T&gt; SortedSet&lt;T&gt;<\/td><td>synchronizedSortedSet()<\/td><td>It is used to get a synchronized (thread-safe) sorted set backed by the specified sorted set.<\/td><\/tr><tr><td>53)<\/td><td>static &lt;T&gt; Collection&lt;T&gt;<\/td><td>unmodifiableCollection()<\/td><td>It is used to get an unmodifiable view of the specified collection.<\/td><\/tr><tr><td>54)<\/td><td>static &lt;T&gt; List&lt;T&gt;<\/td><td>unmodifiableList()<\/td><td>It is used to get an unmodifiable view of the specified list.<\/td><\/tr><tr><td>55)<\/td><td>static &lt;K,V&gt; Map&lt;K,V&gt;<\/td><td>unmodifiableMap()<\/td><td>It is used to get an unmodifiable view of the specified map.<\/td><\/tr><tr><td>56)<\/td><td>static &lt;K,V&gt; NavigableMap&lt;K,V&gt;<\/td><td>unmodifiableNavigableMap()<\/td><td>It is used to get an unmodifiable view of the specified navigable map.<\/td><\/tr><tr><td>57)<\/td><td>static &lt;T&gt; NavigableSet&lt;T&gt;<\/td><td>unmodifiableNavigableSet()<\/td><td>It is used to get an unmodifiable view of the specified navigable set.<\/td><\/tr><tr><td>58)<\/td><td>static &lt;T&gt; Set&lt;T&gt;<\/td><td>unmodifiableSet()<\/td><td>It is used to get an unmodifiable view of the specified set.<\/td><\/tr><tr><td>59)<\/td><td>static &lt;K,V&gt; SortedMap&lt;K,V&gt;<\/td><td>unmodifiableSortedMap()<\/td><td>It is used to get an unmodifiable view of the specified sorted map.<\/td><\/tr><tr><td>60<\/td><td>static &lt;T&gt; SortedSet&lt;T&gt;<\/td><td>unmodifiableSortedSet()<\/td><td>It is used to get an unmodifiable view of the specified sorted set.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Java Collections Example<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class CollectionsExample {  \n    public static void main(String a&#91;]){      \n        List&lt;String> list = new ArrayList&lt;String>();  \n        list.add(\"C\");  \n        list.add(\"Core Java\");  \n        list.add(\"Advance Java\");  \n        System.out.println(\"Initial collection value:\"+list);  \n        Collections.addAll(list, \"Servlet\",\"JSP\");  \n        System.out.println(\"After adding elements collection value:\"+list);  \n        String&#91;] strArr = {\"C#\", \".Net\"};  \n        Collections.addAll(list, strArr);  \n        System.out.println(\"After adding array collection value:\"+list);  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Initial collection value:&#91;C, Core Java, Advance Java]\nAfter adding elements collection value:&#91;C, Core Java, Advance Java, Servlet, JSP]\nAfter adding array collection value:&#91;C, Core Java, Advance Java, Servlet, JSP, C#, .Net]<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java Collections Example: max()<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class CollectionsExample {  \n    public static void main(String a&#91;]){         \n        List&lt;Integer> list = new ArrayList&lt;Integer>();  \n        list.add(46);  \n        list.add(67);  \n        list.add(24);  \n        list.add(16);  \n        list.add(8);  \n        list.add(12);  \n        System.out.println(\"Value of maximum element from the collection: \"+Collections.max(list));  \n    }  \n} <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of maximum element from the collection: 67\n<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java Collections Example: min()<\/h2>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class CollectionsExample {  \n    public static void main(String a&#91;]){         \n        List&lt;Integer> list = new ArrayList&lt;Integer>();  \n        list.add(46);  \n        list.add(67);  \n        list.add(24);  \n        list.add(16);  \n        list.add(8);  \n        list.add(12);  \n        System.out.println(\"Value of minimum element from the collection: \"+Collections.min(list));  \n    }  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Value of minimum element from the collection: 8<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java Collections class Java collection class is used exclusively with static methods that operate on or return collections. It inherits Object class. The important points about Java Collections class are: Java Collection class supports the&nbsp;polymorphic algorithms&nbsp;that operate on collections. Java Collection class throws a&nbsp;NullPointerException&nbsp;if the collections or class objects provided to them are null. Collections [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/367"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=367"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/367\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 382,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/367\/revisions\/382"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=367"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=367"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=367"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 350,
        "date": "2020-06-20T11:44:13",
        "date_gmt": "2020-06-20T11:44:13",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=350"
        },
        "modified": "2020-06-20T11:44:13",
        "modified_gmt": "2020-06-20T11:44:13",
        "slug": "sorting-in-collection",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/sorting-in-collection\/",
        "title": {
            "rendered": "Sorting in Collection"
        },
        "content": {
            "rendered": "\n<p>We can sort the elements of:<\/p>\n\n\n\n<ol><li>String objects<\/li><li>Wrapper class objects<\/li><li>User-defined class objects<\/li><\/ol>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td><strong>Collections<\/strong>&nbsp;class provides static methods for sorting the elements of a collection. If collection elements are of a Set type, we can use TreeSet. However, we cannot sort the elements of List. Collections class provides methods for sorting the elements of List type elements.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Method of Collections class for sorting List elements<\/h3>\n\n\n\n<p><strong>public void sort(List list):<\/strong>&nbsp;is used to sort the elements of List. List elements must be of the Comparable type.<\/p>\n\n\n\n<h4>Note: String class and Wrapper classes implement the Comparable interface. So if you store the objects of string or wrapper classes, it will be Comparable.<\/h4>\n\n\n\n<h3>Example to sort string objects<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TestSort1{  \npublic static void main(String args&#91;]){  \n  \nArrayList&lt;String> al=new ArrayList&lt;String>();  \nal.add(\"Viru\");  \nal.add(\"Saurav\");  \nal.add(\"Mukesh\");  \nal.add(\"Tahir\");  \n  \nCollections.sort(al);  \nIterator itr=al.iterator();  \nwhile(itr.hasNext()){  \nSystem.out.println(itr.next());  \n }  \n}  \n} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Mukesh\nSaurav\nTahir\nViru<\/code><\/pre>\n\n\n\n<h3>Example to sort string objects in reverse order<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TestSort2{  \npublic static void main(String args&#91;]){  \n  \nArrayList&lt;String> al=new ArrayList&lt;String>();  \n        al.add(\"Viru\");    \n        al.add(\"Saurav\");    \n        al.add(\"Mukesh\");    \n        al.add(\"Tahir\");   \n          \n        Collections.sort(al,Collections.reverseOrder());  \n        Iterator i=al.iterator();  \n        while(i.hasNext())  \n        {  \n            System.out.println(i.next());  \n        }  \n}  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Viru\nTahir\nSaurav\nMukesh<\/code><\/pre>\n\n\n\n<h3>Example to sort Wrapper class objects<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass TestSort3{  \npublic static void main(String args&#91;]){  \n  \nArrayList al=new ArrayList();  \nal.add(Integer.valueOf(201));  \nal.add(Integer.valueOf(101));  \nal.add(230);\/\/internally will be converted into objects as Integer.valueOf(230)  \n  \nCollections.sort(al);  \n  \nIterator itr=al.iterator();  \nwhile(itr.hasNext()){  \nSystem.out.println(itr.next());  \n }  \n}  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>101\n201\n230<\/code><\/pre>\n\n\n\n<h3>Example to sort user-defined class objects<\/h3>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \n  \nclass Student implements Comparable&lt;Student> {  \n    public String name;  \n  public Student(String name) {  \n    this.name = name;  \n  }  \n  public int compareTo(Student person) {  \n    return name.compareTo(person.name);  \n      \n  }   \n}  \npublic class TestSort4 {  \n  public static void main(String&#91;] args) {  \n      ArrayList&lt;Student> al=new ArrayList&lt;Student>();  \n      al.add(new Student(\"Viru\"));  \n      al.add(new Student(\"Saurav\"));  \n      al.add(new Student(\"Mukesh\"));  \n      al.add(new Student(\"Tahir\"));  \n      \n    Collections.sort(al);  \n    for (Student s : al) {  \n      System.out.println(s.name);  \n    }  \n  }  \n}<\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Mukesh\nSaurav\nTahir\nViru<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>We can sort the elements of: String objects Wrapper class objects User-defined class objects Collections&nbsp;class provides static methods for sorting the elements of a collection. If collection elements are of a Set type, we can use TreeSet. However, we cannot sort the elements of List. Collections class provides methods for sorting the elements of List [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/350"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=350"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/350\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 383,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/350\/revisions\/383"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=350"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=350"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=350"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 351,
        "date": "2020-06-20T11:45:42",
        "date_gmt": "2020-06-20T11:45:42",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=351"
        },
        "modified": "2020-06-20T11:45:42",
        "modified_gmt": "2020-06-20T11:45:42",
        "slug": "comparable-interface",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/comparable-interface\/",
        "title": {
            "rendered": "Comparable interface"
        },
        "content": {
            "rendered": "\n<p>Java Comparable interface is used to order the objects of the user-defined class. This interface is found in java.lang package and contains only one method named compareTo(Object). It provides a single sorting sequence only, i.e., you can sort the elements on the basis of single data member only. For example, it may be rollno, name, age or anything else.<\/p>\n\n\n\n<h3>compareTo(Object obj) method<\/h3>\n\n\n\n<p><strong>public int compareTo(Object obj):<\/strong>&nbsp;It is used to compare the current object with the specified object. It returns<\/p>\n\n\n\n<ul><li>positive integer, if the current object is greater than the specified object.<\/li><li>negative integer, if the current object is less than the specified object.<\/li><li>zero, if the current object is equal to the specified object.<\/li><\/ul>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<p>We can sort the elements of:<\/p>\n\n\n\n<ol><li>String objects<\/li><li>Wrapper class objects<\/li><li>User-defined class objects<\/li><\/ol>\n\n\n\n<h3>Collections class<\/h3>\n\n\n\n<p><strong>Collections<\/strong>&nbsp;class provides static methods for sorting the elements of collections. If collection elements are of Set or Map, we can use TreeSet or TreeMap. However, we cannot sort the elements of List. Collections class provides methods for sorting the elements of List type elements.<\/p>\n\n\n\n<h3>Method of Collections class for sorting List elements<\/h3>\n\n\n\n<p><strong>public void sort(List list):<\/strong>&nbsp;It is used to sort the elements of List. List elements must be of the Comparable type.<\/p>\n\n\n\n<h4>Note: String class and Wrapper classes implement the Comparable interface by default. So if you store the objects of string or wrapper classes in a list, set or map, it will be Comparable by default.<\/h4>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h2>Java Comparable Example<\/h2>\n\n\n\n<p>Let&#8217;s see the example of the Comparable interface that sorts the list elements on the basis of age.<\/p>\n\n\n\n<p>File: Student.java<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student implements Comparable&lt;Student>{  \nint rollno;  \nString name;  \nint age;  \nStudent(int rollno,String name,int age){  \nthis.rollno=rollno;  \nthis.name=name;  \nthis.age=age;  \n}  \n  \npublic int compareTo(Student st){  \nif(age==st.age)  \nreturn 0;  \nelse if(age>st.age)  \nreturn 1;  \nelse  \nreturn -1;  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>File: TestSort1.java<\/p>\n\n\n\n<p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \npublic class TestSort1{  \npublic static void main(String args&#91;]){  \nArrayList&lt;Student> al=new ArrayList&lt;Student>();  \nal.add(new Student(101,\"Vijay\",23));  \nal.add(new Student(106,\"Ajay\",27));  \nal.add(new Student(105,\"Jai\",21));  \n  \nCollections.sort(al);  \nfor(Student st:al){  \nSystem.out.println(st.rollno+\" \"+st.name+\" \"+st.age);  \n}  \n}  \n}  <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>105 Jai 21\n101 Vijay 23\n106 Ajay 27<\/code><\/pre>\n\n\n\n<h2>Java Comparable Example: reverse order<\/h2>\n\n\n\n<p>Let&#8217;s see the same example of the Comparable interface that sorts the list elements on the basis of age in reverse order.<\/p>\n\n\n\n<p>File: Student.java<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student implements Comparable&lt;Student>{    \n int rollno;    \n String name;    \n int age;    \n Student(int rollno,String name,int age){    \n this.rollno=rollno;    \n this.name=name;    \n this.age=age;    \n }    \n     \n public int compareTo(Student st){    \n if(age==st.age)    \n return 0;    \n else if(age&lt;st.age)    \n return 1;    \n else    \n return -1;    \n }    \n } <\/code><\/pre>\n\n\n\n<p>File: TestSort2.java<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \npublic class TestSort2{    \npublic static void main(String args&#91;]){    \nArrayList&lt;Student> al=new ArrayList&lt;Student>();    \nal.add(new Student(101,\"Vijay\",23));    \nal.add(new Student(106,\"Ajay\",27));    \nal.add(new Student(105,\"Jai\",21));    \n    \nCollections.sort(al);    \nfor(Student st:al){    \nSystem.out.println(st.rollno+\" \"+st.name+\" \"+st.age);    \n}    \n}    \n}   <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>106 Ajay 27\n101 Vijay 23\n105 Jai 21<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Java Comparable interface is used to order the objects of the user-defined class. This interface is found in java.lang package and contains only one method named compareTo(Object). It provides a single sorting sequence only, i.e., you can sort the elements on the basis of single data member only. For example, it may be rollno, name, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/351"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=351"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/351\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 384,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/351\/revisions\/384"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=351"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=351"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=351"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 358,
        "date": "2020-06-20T11:47:56",
        "date_gmt": "2020-06-20T11:47:56",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=358"
        },
        "modified": "2020-06-20T11:47:56",
        "modified_gmt": "2020-06-20T11:47:56",
        "slug": "comparable-and-comparator",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/comparable-and-comparator\/",
        "title": {
            "rendered": "Comparable and Comparator"
        },
        "content": {
            "rendered": "\n<p>Comparable and Comparator both are interfaces and can be used to sort collection elements.<\/p>\n\n\n\n<p>However, there are many differences between Comparable and Comparator interfaces that are given below.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Comparable<\/th><th>Comparator<\/th><\/tr><tr><td>1) Comparable provides a&nbsp;<strong>single sorting sequence<\/strong>. In other words, we can sort the collection on the basis of a single element such as id, name, and price.<\/td><td>The Comparator provides&nbsp;<strong>multiple sorting sequences<\/strong>. In other words, we can sort the collection on the basis of multiple elements such as id, name, and price etc.<\/td><\/tr><tr><td>2) Comparable&nbsp;<strong>affects the original class<\/strong>, i.e., the actual class is modified.<\/td><td>Comparator&nbsp;<strong>doesn&#8217;t affect the original class<\/strong>, i.e., the actual class is not modified.<\/td><\/tr><tr><td>3) Comparable provides&nbsp;<strong>compareTo() method<\/strong>&nbsp;to sort elements.<\/td><td>Comparator provides&nbsp;<strong>compare() method<\/strong>&nbsp;to sort elements.<\/td><\/tr><tr><td>4) Comparable is present in&nbsp;<strong>java.lang<\/strong>&nbsp;package.<\/td><td>A Comparator is present in the&nbsp;<strong>java.util<\/strong>&nbsp;package.<\/td><\/tr><tr><td>5) We can sort the list elements of Comparable type by&nbsp;<strong>Collections.sort(List)<\/strong>&nbsp;method.<\/td><td>We can sort the list elements of Comparator type by&nbsp;<strong>Collections.sort(List, Comparator)<\/strong>&nbsp;method.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h2>Java Comparable Example<\/h2>\n\n\n\n<p>Let&#8217;s see the example of a Comparable interface that sorts the list elements on the basis of age.<\/p>\n\n\n\n<p>File: TestSort3.java<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Java Program to demonstrate the use of Java Comparable.  \n\/\/Creating a class which implements Comparable Interface  \nimport java.util.*;  \nimport java.io.*;  \nclass Student implements Comparable&lt;Student>{  \nint rollno;  \nString name;  \nint age;  \nStudent(int rollno,String name,int age){  \nthis.rollno=rollno;  \nthis.name=name;  \nthis.age=age;  \n}  \npublic int compareTo(Student st){  \nif(age==st.age)  \nreturn 0;  \nelse if(age>st.age)  \nreturn 1;  \nelse  \nreturn -1;  \n}  \n}  \n\/\/Creating a test class to sort the elements  \npublic class TestSort3{  \npublic static void main(String args&#91;]){  \nArrayList&lt;Student> al=new ArrayList&lt;Student>();  \nal.add(new Student(101,\"Vijay\",23));  \nal.add(new Student(106,\"Ajay\",27));  \nal.add(new Student(105,\"Jai\",21));  \n  \nCollections.sort(al);  \nfor(Student st:al){  \nSystem.out.println(st.rollno+\" \"+st.name+\" \"+st.age);  \n}  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>105 Jai 21\n101 Vijay 23\n106 Ajay 27<\/code><\/pre>\n\n\n\n<h2>Java Comparator Example<\/h2>\n\n\n\n<p>Let&#8217;s see an example of the Java Comparator interface where we are sorting the elements of a list using different comparators.<strong>Student.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Student{  \nint rollno;  \nString name;  \nint age;  \nStudent(int rollno,String name,int age){  \nthis.rollno=rollno;  \nthis.name=name;  \nthis.age=age;  \n}  \n}  <\/code><\/pre>\n\n\n\n<p><strong>AgeComparator.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass AgeComparator implements Comparator&lt;Student>{  \npublic int compare(Student s1,Student s2){  \nif(s1.age==s2.age)  \nreturn 0;  \nelse if(s1.age>s2.age)  \nreturn 1;  \nelse  \nreturn -1;  \n}  \n}<\/code><\/pre>\n\n\n\n<p><strong>NameComparator.java<\/strong><\/p>\n\n\n\n<p>This class provides comparison logic based on the name. In such case, we are using the compareTo() method of String class, which internally provides the comparison logic.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nclass NameComparator implements Comparator&lt;Student>{  \npublic int compare(Student s1,Student s2){  \nreturn s1.name.compareTo(s2.name);  \n}  \n}<\/code><\/pre>\n\n\n\n<p><strong>TestComparator.java<\/strong><\/p>\n\n\n\n<p>In this class, we are printing the values of the object by sorting on the basis of name and age.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>\/\/Java Program to demonstrate the use of Java Comparator  \nimport java.util.*;  \nimport java.io.*;  \nclass TestComparator{  \npublic static void main(String args&#91;]){  \n\/\/Creating a list of students  \nArrayList&lt;Student> al=new ArrayList&lt;Student>();  \nal.add(new Student(101,\"Vijay\",23));  \nal.add(new Student(106,\"Ajay\",27));  \nal.add(new Student(105,\"Jai\",21));  \n  \nSystem.out.println(\"Sorting by Name\");  \n\/\/Using NameComparator to sort the elements  \nCollections.sort(al,new NameComparator());  \n\/\/Traversing the elements of list  \nfor(Student st: al){  \nSystem.out.println(st.rollno+\" \"+st.name+\" \"+st.age);  \n}  \n  \nSystem.out.println(\"sorting by Age\");  \n\/\/Using AgeComparator to sort the elements  \nCollections.sort(al,new AgeComparator());  \n\/\/Travering the list again  \nfor(Student st: al){  \nSystem.out.println(st.rollno+\" \"+st.name+\" \"+st.age);  \n}  \n  \n}  \n}  <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sorting by Name\n106 Ajay 27\n105 Jai 21\n101 Vijay 23\n\nSorting by Age       \n105 Jai 21\n101 Vijay 23\n106 Ajay 27<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>Comparable and Comparator both are interfaces and can be used to sort collection elements. However, there are many differences between Comparable and Comparator interfaces that are given below. Comparable Comparator 1) Comparable provides a&nbsp;single sorting sequence. In other words, we can sort the collection on the basis of a single element such as id, name, [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/358"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=358"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/358\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 385,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/358\/revisions\/385"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=358"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=358"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=358"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 361,
        "date": "2020-06-20T11:49:59",
        "date_gmt": "2020-06-20T11:49:59",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=361"
        },
        "modified": "2020-07-13T10:23:00",
        "modified_gmt": "2020-07-13T10:23:00",
        "slug": "properties-class",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/properties-class\/",
        "title": {
            "rendered": "Properties class"
        },
        "content": {
            "rendered": "\n<p>The&nbsp;<strong>properties<\/strong>&nbsp;object contains key and value pair both as a string. The java.util.Properties class is the subclass of Hashtable.<\/p>\n\n\n\n<p>It can be used to get property value based on the property key. The Properties class provides methods to get data from the properties file and store data into the properties file. Moreover, it can be used to get the properties of a system.<\/p>\n\n\n\n<h3>An Advantage of the properties file<\/h3>\n\n\n\n<p><strong>Recompilation is not required if the information is changed from a properties file:<\/strong>&nbsp;If any information is changed from the properties file, you don&#8217;t need to recompile the java class. It is used to store information which is to be changed frequently.<\/p>\n\n\n\n<h3>Constructors of Properties class<\/h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>Properties()<\/td><td>It creates an empty property list with no default values.<\/td><\/tr><tr><td>Properties(Properties defaults)<\/td><td>It creates an empty property list with the specified defaults.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<h3>Methods of Properties class<\/h3>\n\n\n\n<p>The commonly used methods of Properties class are given below.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method<\/th><th>Description<\/th><\/tr><tr><td>public void load(Reader r)<\/td><td>It loads data from the Reader object.<\/td><\/tr><tr><td>public void load(InputStream is)<\/td><td>It loads data from the InputStream object<\/td><\/tr><tr><td>public void loadFromXML(InputStream in)<\/td><td>It is used to load all of the properties represented by the XML document on the specified input stream into this properties table.<\/td><\/tr><tr><td>public String getProperty(String key)<\/td><td>It returns value based on the key.<\/td><\/tr><tr><td>public String getProperty(String key, String defaultValue)<\/td><td>It searches for the property with the specified key.<\/td><\/tr><tr><td>public void setProperty(String key, String value)<\/td><td>It calls the put method of Hashtable.<\/td><\/tr><tr><td>public void list(PrintStream out)<\/td><td>It is used to print the property list out to the specified output stream.<\/td><\/tr><tr><td>public void list(PrintWriter out))<\/td><td>It is used to print the property list out to the specified output stream.<\/td><\/tr><tr><td>public Enumeration&lt;?&gt; propertyNames())<\/td><td>It returns an enumeration of all the keys from the property list.<\/td><\/tr><tr><td>public Set&lt;String&gt; stringPropertyNames()<\/td><td>It returns a set of keys in from property list where the key and its corresponding value are strings.<\/td><\/tr><tr><td>public void store(Writer w, String comment)<\/td><td>It writes the properties in the writer object.<\/td><\/tr><tr><td>public void store(OutputStream os, String comment)<\/td><td>It writes the properties in the OutputStream object.<\/td><\/tr><tr><td>public void storeToXML(OutputStream os, String comment)<\/td><td>It writes the properties in the writer object for generating XML document.<\/td><\/tr><tr><td>public void storeToXML(Writer w, String comment, String encoding)<\/td><td>It writes the properties in the writer object for generating XML document with the specified encoding.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Example of Properties class to get information from the properties file<\/h3>\n\n\n\n<p>To get information from the properties file, create the properties file first.<strong>db.properties<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>user=system  \npassword=oracle  <\/code><\/pre>\n\n\n\n<p>Now, let&#8217;s create the java class to read the data from the properties file.<strong>Test.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nimport java.io.*;  \npublic class Test {  \npublic static void main(String&#91;] args)throws Exception{  \n    FileReader reader=new FileReader(\"db.properties\");  \n      \n    Properties p=new Properties();  \n    p.load(reader);  \n      \n    System.out.println(p.getProperty(\"user\"));  \n    System.out.println(p.getProperty(\"password\"));  \n}  \n} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:system\n       oracle<\/code><\/pre>\n\n\n\n<p>Now if you change the value of the properties file, you don&#8217;t need to recompile the java class. That means no maintenance problem.<\/p>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Example of Properties class to get all the system properties<\/h3>\n\n\n\n<p>By System.getProperties() method we can get all the properties of the system. Let&#8217;s create the class that gets information from the system properties.<strong>Test.java<\/strong><\/p>\n\n\n\n<p><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nimport java.io.*;  \npublic class Test {  \npublic static void main(String&#91;] args)throws Exception{  \n  \nProperties p=System.getProperties();  \nSet set=p.entrySet();  \n  \nIterator itr=set.iterator();  \nwhile(itr.hasNext()){  \nMap.Entry entry=(Map.Entry)itr.next();  \nSystem.out.println(entry.getKey()+\" = \"+entry.getValue());  \n}  \n  \n}  \n} <\/code><\/pre>\n\n\n\n<pre class=\"wp-block-code\"><code>Output:\njava.runtime.name = Java(TM) SE Runtime Environment\nsun.boot.library.path = C:\\Program Files\\Java\\jdk1.7.0_01\\jre\\bin\njava.vm.version = 21.1-b02\njava.vm.vendor = Oracle Corporation\njava.vendor.url = http:\/\/java.oracle.com\/\npath.separator = ;\njava.vm.name = Java HotSpot(TM) Client VM\nfile.encoding.pkg = sun.io\nuser.country = US\nuser.script = \nsun.java.launcher = SUN_STANDARD<\/code><\/pre>\n\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n\n<h3>Example of Properties class to create the properties file<\/h3>\n\n\n\n<p>Now let&#8217;s write the code to create the properties file.<strong>Test.java<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;  \nimport java.io.*;  \npublic class Test {  \npublic static void main(String&#91;] args)throws Exception{  \n  \nProperties p=new Properties();  \np.setProperty(\"name\",\"Sonoo Jaiswal\");  \np.setProperty(\"email\",\"sonoojaiswal@codemeals.com\");  \n  \np.store(new FileWriter(\"info.properties\"),\"codemeals Properties Example\");  \n  \n}  \n} <\/code><\/pre>\n\n\n\n<p>Let&#8217;s see the generated properties file.<strong>info.properties<\/strong><\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>#codemealsProperties Example  \n#Thu Oct 03 22:35:53 IST 2013  \nemail=sonoojaiswal@codemeals.com  \nname=Sonoo Jaiswal  <\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>The&nbsp;properties&nbsp;object contains key and value pair both as a string. The java.util.Properties class is the subclass of Hashtable. It can be used to get property value based on the property key. The Properties class provides methods to get data from the properties file and store data into the properties file. Moreover, it can be used [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/361"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=361"
                }
            ],
            "version-history": [
                {
                    "count": 3,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/361\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 843,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/361\/revisions\/843"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=361"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=361"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=361"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    },
    {
        "id": 363,
        "date": "2020-06-20T11:52:09",
        "date_gmt": "2020-06-20T11:52:09",
        "guid": {
            "rendered": "http:\/\/java.foobrdigital.com\/?p=363"
        },
        "modified": "2020-06-20T11:52:09",
        "modified_gmt": "2020-06-20T11:52:09",
        "slug": "arraylist-and-vector",
        "status": "publish",
        "type": "post",
        "link": "https:\/\/java.foobrdigital.com\/arraylist-and-vector\/",
        "title": {
            "rendered": "ArrayList and Vector"
        },
        "content": {
            "rendered": "\n<p>ArrayList and Vector both implements List interface and maintains insertion order.<\/p>\n\n\n\n<p>However, there are many differences between ArrayList and Vector classes that are given below.<\/p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>ArrayList<\/th><th>Vector<\/th><\/tr><tr><td>1) ArrayList is&nbsp;<strong>not synchronized<\/strong>.<\/td><td>Vector is&nbsp;<strong>synchronized<\/strong>.<\/td><\/tr><tr><td>2) ArrayList&nbsp;<strong>increments 50%<\/strong>&nbsp;of current array size if the number of elements exceeds from its capacity.<\/td><td>Vector&nbsp;<strong>increments 100%<\/strong>&nbsp;means doubles the array size if the total number of elements exceeds than its capacity.<\/td><\/tr><tr><td>3) ArrayList is&nbsp;<strong>not a legacy<\/strong>&nbsp;class. It is introduced in JDK 1.2.<\/td><td>Vector is a&nbsp;<strong>legacy<\/strong>&nbsp;class.<\/td><\/tr><tr><td>4) ArrayList is&nbsp;<strong>fast<\/strong>&nbsp;because it is non-synchronized.<\/td><td>Vector is&nbsp;<strong>slow<\/strong>&nbsp;because it is synchronized, i.e., in a multithreading environment, it holds the other threads in runnable or non-runnable state until current thread releases the lock of the object.<\/td><\/tr><tr><td>5) ArrayList uses the&nbsp;<strong>Iterator<\/strong>&nbsp;interface to traverse the elements.<\/td><td>A Vector can use the&nbsp;<strong>Iterator<\/strong>&nbsp;interface or&nbsp;<strong>Enumeration<\/strong>&nbsp;interface to traverse the elements.<\/td><\/tr><\/tbody><\/table><\/figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/static.javatpoint.com\/images\/arraylist-vs-vector.jpg\" alt=\"ArrayList vs Vector\"\/><\/figure>\n\n\n\n<h3>Example of Java ArrayList<\/h3>\n\n\n\n<p>Let&#8217;s see a simple example where we are using ArrayList to store and traverse the elements.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;    \nclass TestArrayList21{    \n public static void main(String args&#91;]){    \n     \n  List&lt;String> al=new ArrayList&lt;String>();\/\/creating arraylist    \n  al.add(\"Sonoo\");\/\/adding object in arraylist    \n  al.add(\"Michael\");    \n  al.add(\"James\");    \n  al.add(\"Andy\");    \n  \/\/traversing elements using Iterator  \n  Iterator itr=al.iterator();  \n  while(itr.hasNext()){  \n   System.out.println(itr.next());  \n  }    \n }    \n}    <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>Sonoo\nMichael\nJames\nAndy<\/code><\/pre>\n\n\n\n<h3>Example of Java Vector<\/h3>\n\n\n\n<p>Let&#8217;s see a simple example of a Java Vector class that uses the Enumeration interface.<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>import java.util.*;      \nclass TestVector1{      \n public static void main(String args&#91;]){      \n  Vector&lt;String> v=new Vector&lt;String>();\/\/creating vector  \n  v.add(\"umesh\");\/\/method of Collection  \n  v.addElement(\"irfan\");\/\/method of Vector  \n  v.addElement(\"kumar\");  \n  \/\/traversing elements using Enumeration  \n  Enumeration e=v.elements();  \n  while(e.hasMoreElements()){  \n   System.out.println(e.nextElement());  \n  }  \n }      \n}      <\/code><\/pre>\n\n\n\n<p>Output:<\/p>\n\n\n\n<pre class=\"wp-block-code\"><code>umesh\nirfan\nkumar<\/code><\/pre>\n",
            "protected": false
        },
        "excerpt": {
            "rendered": "<p>ArrayList and Vector both implements List interface and maintains insertion order. However, there are many differences between ArrayList and Vector classes that are given below. ArrayList Vector 1) ArrayList is&nbsp;not synchronized. Vector is&nbsp;synchronized. 2) ArrayList&nbsp;increments 50%&nbsp;of current array size if the number of elements exceeds from its capacity. Vector&nbsp;increments 100%&nbsp;means doubles the array size if [&hellip;]<\/p>\n",
            "protected": false
        },
        "author": 2,
        "featured_media": 0,
        "comment_status": "open",
        "ping_status": "open",
        "sticky": false,
        "template": "",
        "format": "standard",
        "meta": [],
        "categories": [
            14
        ],
        "tags": [],
        "_links": {
            "self": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/363"
                }
            ],
            "collection": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts"
                }
            ],
            "about": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/types\/post"
                }
            ],
            "author": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/users\/2"
                }
            ],
            "replies": [
                {
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/comments?post=363"
                }
            ],
            "version-history": [
                {
                    "count": 1,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/363\/revisions"
                }
            ],
            "predecessor-version": [
                {
                    "id": 387,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/posts\/363\/revisions\/387"
                }
            ],
            "wp:attachment": [
                {
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/media?parent=363"
                }
            ],
            "wp:term": [
                {
                    "taxonomy": "category",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/categories?post=363"
                },
                {
                    "taxonomy": "post_tag",
                    "embeddable": true,
                    "href": "https:\/\/java.foobrdigital.com\/wp-json\/wp\/v2\/tags?post=363"
                }
            ],
            "curies": [
                {
                    "name": "wp",
                    "href": "https:\/\/api.w.org\/{rel}",
                    "templated": true
                }
            ]
        }
    }
]