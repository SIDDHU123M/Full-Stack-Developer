[
  {
    "id": 5604,
    "date": "2020-05-13T08:11:31",
    "date_gmt": "2020-05-13T08:11:31",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=873"
    },
    "modified": "2020-05-13T08:11:31",
    "modified_gmt": "2020-05-13T08:11:31",
    "slug": "introduction-7-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-7-2/",
    "title": {
      "rendered": "Introduction"
    },
    "content": {
      "rendered": "\n<h2>What is Ionic Framework?</h2>\n\n\n\n<p>Ionic framework is an open-source UI toolkit for building performant, high-quality&nbsp;<strong>mobile apps</strong>, desktop apps, and progressive&nbsp;<strong>web apps</strong>&nbsp;using web technologies such as HTML, CSS, and JavaScript. It allows developers to build once and run everywhere. It was created by&nbsp;<strong>Max Lynch</strong>,&nbsp;<strong>Ben Sperry</strong>, and&nbsp;<strong>Adam Bradley</strong>&nbsp;of Drifty Co. in 2013. The first beta version of the Ionic framework was released in&nbsp;<strong>March 2014</strong>.</p>\n\n\n\n<p>The Ionic framework mainly focuses on front-end user experience or UI interaction, which handles all the look and feel of your app. It is easy to learn and can integrate with other libraries or frameworks such as&nbsp;<strong>Angular</strong>,&nbsp;<strong>Cordova</strong>, etc. It can also be used as a standalone without a front-end framework using a simple script include.</p>\n\n\n\n<p>Officially, the Ionic framework has integration with&nbsp;<strong>Angular</strong>, but it also provides support for&nbsp;<strong>Vue.js</strong>&nbsp;and&nbsp;<strong>React.js</strong>, which are in development.</p>\n\n\n\n<h2>What are Progressive Web Apps (PWAs)?</h2>\n\n\n\n<p>A progressive web app is a normal web app which looks and feel like native mobile apps. It uses modern web capabilities to deliver an app-like experience to the user. These apps can easily deploy to servers, accessible through URLs, and indexed by search engines. The PWA app optimizes to be:</p>\n\n\n\n<p><strong>Reliable:</strong>&nbsp;Load fast and provide offline functionality.<br><strong>Fast:</strong>&nbsp;It should be fast and respond quickly to user actions.<br><strong>Re-engageable:</strong>&nbsp;It makes re-engagement with the user through push notification, which feels like a native app on the mobile device.</p>\n\n\n\n<h2>Why should you use the Ionic Framework?</h2>\n\n\n\n<p>Ionic is a great choice for creating basic&nbsp;<strong>native functionalities</strong>&nbsp;within an application which can run on multiple devices and operating system. The main advantage of the Ionic framework is that we can build the app once, rather than multiple times for separate devices and can deploy everywhere. It makes the app development&nbsp;<strong>fast</strong>&nbsp;and&nbsp;<strong>cost-efficient</strong>. It also reduces the need for maintenance.</p>\n\n\n\n<h3>Advantages of Ionic Framework</h3>\n\n\n\n<p>The advantages of Ionic application development framework are as following:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/advantages-of-ionic-framework.png\" alt=\"\" class=\"wp-image-875\"/></figure></div>\n\n\n\n<p><strong>1. Easy to learn</strong></p>\n\n\n\n<p>If the developer has a basic knowledge of CSS, HTML, or JavaScript frameworks, then learning and developing apps using the Ionic framework is very easy. It also allows for the development companies to switch to Ionic if their requirements and needs require hybrid application development.</p>\n\n\n\n<p><strong>2. Easy documentation</strong></p>\n\n\n\n<p>Ionic provides very good and well-structured documentation. The official documentation covered most of the things required for the developers.</p>\n\n\n\n<p><strong>3. Cross-platform</strong></p>\n\n\n\n<p>The ionic application can deploy on multiple platforms such as native iOS, Android, Desktop, and the web, all with one codebase. These applications can write once and runs everywhere.</p>\n\n\n\n<p><strong>4. User Interface</strong></p>\n\n\n\n<p>The user interface of Ionic, such as themes and components are highly customizable. The ionic platform allows its components to adapt the platform on which application is running.</p>\n\n\n\n<p><strong>5. Built on AngularJS</strong></p>\n\n\n\n<p>The Ionic framework uses AngularJS which provide many functionalities to the developers. Nowadays, AngularJS is the most widely used framework by designers. AngularJS allows Ionic to provide a robust structure which makes the code more manageable.</p>\n\n\n\n<h3>Disadvantages of Ionic Framework</h3>\n\n\n\n<p>The disadvantages of Ionic application development framework are as following:</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/disadvantages-of-ionic-framework-1.png\" alt=\"\" class=\"wp-image-879\"/></figure></div>\n\n\n\n<p><strong>1. Performance</strong></p>\n\n\n\n<p>The performance of the Ionic application is not as good as compared to native mobile applications. However, the performance gap is not noticeable for most of the average users.</p>\n\n\n\n<p><strong>2. Security</strong></p>\n\n\n\n<p>The app developed with the Ionic framework may not provide as much security as a native application. For example, if you are developing a financial app, e.g., the app for a bank, the Ionic framework is not recommended.</p>\n\n\n\n<p><strong>3. Limited native functionality</strong></p>\n\n\n\n<p>There are some native functions may not be available in the Ionic framework. In such a case, you need to develop the plugin to fulfill that function yourself. However, there are many plugins available to cover most of the native functionalities.</p>\n\n\n\n<p><strong>4. Not good for video game</strong></p>\n\n\n\n<p>Ionic framework is not perfect for high-end graphics-dependent applications or video games.</p>\n\n\n\n<p><strong>5. Need for specialists</strong></p>\n\n\n\n<p>JavaScript can be tricky to learn. So, there is a need for someone who can not only &#8220;do&#8221; JS, but also have deep knowledge of advanced libraries and technologies including Angular, Cordova, Ionic, etc.</p>\n\n\n\n<p><strong>6. Early adopter risk</strong></p>\n\n\n\n<p>Ionic technology is still in development. It regularly keeps changing its support and standard, and its libraries can be completely rewritten at any time.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>What is Ionic Framework? Ionic framework is an open-source UI toolkit for building performant, high-quality&nbsp;mobile apps, desktop apps, and progressive&nbsp;web apps&nbsp;using web technologies such as HTML, CSS, and JavaScript. It allows developers to build once and run everywhere. It was created by&nbsp;Max Lynch,&nbsp;Ben Sperry, and&nbsp;Adam Bradley&nbsp;of Drifty Co. in 2013. The first beta version of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1803,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5604"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5604"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5604/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1803"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5604"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5604"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5604"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5605,
    "date": "2020-05-13T08:19:58",
    "date_gmt": "2020-05-13T08:19:58",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=883"
    },
    "modified": "2020-05-13T08:19:58",
    "modified_gmt": "2020-05-13T08:19:58",
    "slug": "features-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/features-3/",
    "title": {
      "rendered": "Features"
    },
    "content": {
      "rendered": "\n<p>Ionic framework is an open-source AngularJS based framework that allows a developer to use a combination of several web technologies such as HTML5, CSS, and JavaScript. With the help of these technologies, the mobile app developer can design a creative user interface and introduce user-friendly features for their targeted audience. Some of the most important features of the Ionic framework are as follows:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-framework-features.png\" alt=\"\" class=\"wp-image-885\"/></figure>\n\n\n\n<p><strong>Cross-platform</strong></p>\n\n\n\n<p>The app builds on the Ionic framework can deploy across multiple platforms, such as Android, native iOS, Desktop, and the web as a progressive web app and all with one codebase. Thus, Ionic apps can write once and run everywhere.</p>\n\n\n\n<p><strong>Web Standards-based</strong></p>\n\n\n\n<p>Ionic framework is built on reliable, standard web technologies, such as HTML, CSS, and JavaScript, using modern web APIs (like Custom Elements and Shadow DOM). Due to this, Ionic components have a stable API, which allows running Ionic app on multiple platforms.</p>\n\n\n\n<p><strong>Beautiful Design</strong></p>\n\n\n\n<p>The Ionic framework allows us to build a clean, simple, and functional application. It is designed to work and display beautifully across multiple platforms. The Ionic application contains pre-designed components, typography, interactive paradigms, and a gorgeous base theme.</p>\n\n\n\n<p><strong>Simplicity</strong></p>\n\n\n\n<p>The Ionic framework built with simplicity, easy to learn, and can be accessible to anyone with web development skills.</p>\n\n\n\n<p><strong>Cordova Plugin</strong></p>\n\n\n\n<p>It offers the API which needed for using native device functions with JavaScript code.</p>\n\n\n\n<p><strong>License</strong></p>\n\n\n\n<p>Ionic framework is a free and open-source project which released under the MIT license. It means we can use it in personal or commercial projects for free.</p>\n\n\n\n<p><strong>Ionic CLI</strong></p>\n\n\n\n<p>The Ionic CLI, or Command Line Interface, is a tool that provides several helpful commands to Ionic developers. It is a command which is used for starting, building, running, and emulating Ionic applications.</p>\n\n\n\n<p><strong>Framework Compatibility</strong></p>\n\n\n\n<p>The past releases of Ionic were tightly coupled to Angular. But the recent version of Ionic, i.e., v4 was re-engineered to work as a standalone web component library, with integration for the latest JavaScript frameworks. We can also use it in most of the front-end framework, such as React.js and Vue.js.</p>\n\n\n\n<p><strong>JavaScript Components</strong></p>\n\n\n\n<p>It extends the CSS components with JavaScript functionalities to cover all mobile elements which cannot be done only with HTML and CSS.</p>\n\n\n\n<p><strong>Angular</strong></p>\n\n\n\n<p>Angular is responsible for making the Ionic great. While the core components work as a standalone web component library, the angular package makes the integration with angular ecosystem a breeze. The angular package includes all the functionality that angular developers would expect and integrates with Angular core libraries.</p>\n\n\n\n<h2>Ionic framework V4+ features</h2>\n\n\n\n<p>Ionic Framework V4 comes with a major advancement in the underlying technology and capabilities of the project. It has a great focus on performance, compatibility, and overall extensibility. The new features introduced in Ionic 4 are as follows.</p>\n\n\n\n<p><strong>Web Components</strong></p>\n\n\n\n<p>One of the biggest changes Ionic V4 has brought is that they moved to be web components for each component. Web components are a set of web platform APIs. It allows the developer to create customized and reusable HTML tags to use in web pages and web apps. Web components make a significant improvement in the start-up and loading times, and highly essential for building high performing web apps. It is based on four main specifications: Custom elements, HTML imports, HTML Template, and Shadow DOM.</p>\n\n\n\n<p><strong>Capacitor</strong></p>\n\n\n\n<p>It is cross-platform API and a code execution layer which makes it easy to call Native SDKs from web code. It also writes the custom Native plugins that your app might need. It also enables the developer to write one app and deploy it to the app stores and the mobile web.</p>\n\n\n\n<p><strong>Stencil</strong></p>\n\n\n\n<p>It is a new web component compiler created by the ionic team to build the standards which are compliant with the web servers. It also uses the additional API, such as TypeScript, Virtual DOM, JSX, and async, which are best suited for PWA.</p>\n\n\n\n<p><strong>Ion-Backdrop</strong></p>\n\n\n\n<p>They are full-screen components which overlay other components. They are placed on the top of the other content and used to dismiss the other component.</p>\n\n\n\n<p><strong>Ion-picker</strong></p>\n\n\n\n<p>It displays a row of buttons and columns on the top of the application content, and the bottom of the viewport.</p>\n\n\n\n<p><strong>Ion-Ripple Effect</strong></p>\n\n\n\n<p>The ripple effect is a component which adds the Material Design ink ripple interaction effect. It is built to be efficient, non-invasive, and usable without adding any extra DOM to the elements. It works without degrades JavaScript for CSS-Only implementation.</p>\n\n\n\n<p><strong>Ion-Route</strong></p>\n\n\n\n<p>It takes a component, and render it when the Browser URL matches with the URL properties.</p>\n\n\n\n<p><strong>Ion-Searchbar</strong></p>\n\n\n\n<p>It consists of a text field which is used to search through a collection. The Ionic team has added nine different search bar styles in the v4.</p>\n\n\n\n<p><strong>Color changes</strong></p>\n\n\n\n<p>The Ionic team have changed the default color and added some new default color for the Ionic framework.</p>\n\n\n\n<p><strong>CSS Variables</strong></p>\n\n\n\n<p>It is the highlighting features of the Ionic framework. It will modify the entire look and feel of the app by making the tiny changes in some variables without using the build tools.</p>\n\n\n\n<p><strong>Lazy Loading</strong></p>\n\n\n\n<p>It is a design pattern in the Ionic framework used to distinguish the initialization of components until it is needed. It increases performance and decreases the application load time by dividing it into multiple bundles and loading the app on demand.</p>\n\n\n\n<p><strong>Changelogs in Native 5</strong></p>\n\n\n\n<p>It is basically stuffed with three bundles, which are Angular providers, ES6 modules, and AngularJS support. The ES6 and bundle releases feature static classes for plugins.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Ionic framework is an open-source AngularJS based framework that allows a developer to use a combination of several web technologies such as HTML5, CSS, and JavaScript. With the help of these technologies, the mobile app developer can design a creative user interface and introduce user-friendly features for their targeted audience. Some of the most important [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1802,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5605"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5605"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5605/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1802"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5605"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5605"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5605"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5606,
    "date": "2020-05-13T08:38:17",
    "date_gmt": "2020-05-13T08:38:17",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=887"
    },
    "modified": "2020-05-13T08:38:17",
    "modified_gmt": "2020-05-13T08:38:17",
    "slug": "installation-5-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/installation-5-2/",
    "title": {
      "rendered": "Installation"
    },
    "content": {
      "rendered": "\n<p>In this section, we are going to learn how to set up an environment for the successful development of the Ionic application.</p>\n\n\n\n<h2>Pre-requisite for Ionic</h2>\n\n\n\n<ol><li>Node.js and NPM</li><li>Code Editor</li><li>Ionic CLI</li></ol>\n\n\n\n<h2>Install Node.js and NPM</h2>\n\n\n\n<p>Node.js and NPM are the&nbsp;<strong><em>base platforms</em></strong>&nbsp;need to develop the Ionic application. You can install Node.js and NPM package manager by the link given below.</p>\n\n\n\n<p>Install Node.js on&nbsp;<strong>Windows</strong>:&nbsp;<a href=\"https://www.javatpoint.com/install-nodejs\" target=\"_blank\" rel=\"noreferrer noopener\">Click Here</a></p>\n\n\n\n<p>Install Node.js on&nbsp;<strong>Linux</strong>:&nbsp;<a href=\"https://www.javatpoint.com/install-nodejs-on-linux-ubuntu-centos\" target=\"_blank\" rel=\"noreferrer noopener\">Click Here</a></p>\n\n\n\n<p>To verify Node.js and NPM, use the following command as shown in the below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ node -v\n// v10.16.0\n$ npm -v\n// 6.9.0</code></pre>\n\n\n\n<h2>Code Editor</h2>\n\n\n\n<p>VS Code editor is the best code editor to create the Ionic Applications. It is a popular and free text editor made by Microsoft.</p>\n\n\n\n<p>You can download and install the VS Code&nbsp;<a href=\"https://code.visualstudio.com/\" rel=\"noreferrer noopener\" target=\"_blank\">Click Here</a></p>\n\n\n\n<p>There are many other code editors available to create the Ionic application, such as</p>\n\n\n\n<ul><li><strong>Ionic Studio:</strong>&nbsp;It is the fastest and easiest way to create Ionic apps.</li><li><strong>Atom:</strong>&nbsp;It is a hackable text editor developed by the GitHub.</li><li><strong>WebStorm:</strong>&nbsp;It is a powerful non-free editor developed by the JetBrains.</li></ul>\n\n\n\n<h2>Ionic CLI</h2>\n\n\n\n<p>We can create and develop an Ionic application through the&nbsp;<strong>Ionic Command Line Utility</strong>. The Ionic CLI is a preferred method for installing Ionic. It is the main tool for running the app and connect it to other services, such as Ionic AppFlow.</p>\n\n\n\n<p>To install the Ionic CLI globally with the NPM, enter the following command in the terminal window.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ npm install -g ionic</code></pre>\n\n\n\n<h2>Create App</h2>\n\n\n\n<p>After the successful installation, you can build the Ionic app. To create an Ionic app, you need to navigate the location where you want to store the app. Therefore, first, go to the terminal window and execute the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd Desktop\n$ ionic start  </code></pre>\n\n\n\n<p>Whenever you run the above command, it will ask you to write the&nbsp;<strong>Project name</strong>. Now, enter the name of your project and press&nbsp;<strong>enter</strong>. You will get the following screen.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-installation-2-1.png\" alt=\"\" class=\"wp-image-903\"/></figure></div>\n\n\n\n<p>In this screen, you will see the different types of templates. Here, you can choose any template according to your need. We can learn about the different types of the template as follows:</p>\n\n\n\n<p><strong>Tabs App</strong></p>\n\n\n\n<p>If you choose the&nbsp;<strong>tabs template</strong>, the Ionic app contains the tab menu, header, and a couple of useful screens and functionalities. It is the default Ionic template. The following command creates the tabs app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic start myIonicApp tabs</code></pre>\n\n\n\n<p><strong>Side Menu App</strong></p>\n\n\n\n<p>If you choose the side menu template, it just adds the side menu with navigation in the content area of your app. The following command creates the sidemenu app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic start myIonicApp sidemenu</code></pre>\n\n\n\n<p><strong>Blank App</strong></p>\n\n\n\n<p>It is a blank starter project or an&nbsp;<strong>empty project</strong>. The following command creates the blank app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic start myIonicApp blank  </code></pre>\n\n\n\n<h2>First Ionic App</h2>\n\n\n\n<p>Here, we are going to start the project with the blank template. To start the blank Ionic app, execute the following command in the terminal window. It will install all your required dependencies like&nbsp;<strong>Angular</strong>&nbsp;or&nbsp;<strong>Ionic</strong>&nbsp;dependencies.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic start myIonicApp blank  </code></pre>\n\n\n\n<p>Now, you need to navigate to your newly created project and run it with the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd myIonicApp  \n$ ionic serve  </code></pre>\n\n\n\n<p>When you run the above command, your terminal window looks like the below image.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-installation-3-1.jpg\" alt=\"\" class=\"wp-image-908\"/></figure></div>\n\n\n\n<p>After completing all the steps, you will get the output in the browser, which you can see in the below image.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-installation-4.png\" alt=\"\" class=\"wp-image-911\"/></figure></div>\n\n\n\n<p>Now, open the&nbsp;<strong>chrome developer tools</strong>&nbsp;or press&nbsp;<strong>ctrl+shift+I</strong>. In this tool, when you click on the&nbsp;<strong>toggle device toolbar</strong>, you will get the following screen.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-installation-5-1.png\" alt=\"\" class=\"wp-image-913\"/></figure></div>\n\n\n\n<p>Next, if you want to change anything or modifying anything in the app, you need to have a code editor or IDE to write the code. Here, we are going to use Visual Studio Code Editor, which is a free IDE for web development.</p>\n\n\n\n<h2>Open Project in VS Code</h2>\n\n\n\n<p>Open the Visual Studio Code Editor, go to the menu bar and click on&nbsp;<strong>File-&gt;Open Folder</strong>&nbsp;and then select your&nbsp;<strong>project</strong>. Inside Visual Studio Code, the following screen appears.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-installation-6-1.png\" alt=\"\" class=\"wp-image-915\"/></figure></div>\n\n\n\n<p><strong>Install Angular Essential Extension</strong></p>\n\n\n\n<p>To install Angular Essential Extension, Go to&nbsp;<strong>View-&gt;Extensions</strong>&nbsp;or Press&nbsp;<strong>ctrl+shift+x</strong>. Now type the Angular Essential in the search box, you will get the following screen in visual studio editor. Click&nbsp;<strong>Install</strong>.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-installation-7.png\" alt=\"\" class=\"wp-image-916\"/></figure></div>\n\n\n\n<p>After completing the installation, go to the&nbsp;<strong>Project Explorer</strong>, which appears on the left side of the visual studio code editor. Now, open the&nbsp;<strong>home.page.html</strong>&nbsp;file and write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Ionic First App  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\">  \n    &lt;p>{{ text }}&lt;/p>  \n    &lt;ion-button (click)=\"onChangeText()\">Change Text&lt;/ion-button>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p>Next, open the&nbsp;<strong>home.page.ts</strong>&nbsp;file and write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  text = 'Our first Ionic app';  \n  \n  onChangeText() {  \n    this.text = 'changed!';  \n  }  \n}  </code></pre>\n\n\n\n<p>Now,&nbsp;<strong>save</strong>&nbsp;the file and&nbsp;<strong>run</strong>&nbsp;the project in the terminal. You will get the following output in your browser window.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-installation-8-1.png\" alt=\"\" class=\"wp-image-920\"/></figure></div>\n\n\n\n<p>When you click on the&nbsp;<strong>CHANGE TEXT</strong>&nbsp;button, it looks like the below image.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-installation-9-1.png\" alt=\"\" class=\"wp-image-922\"/></figure></div>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this section, we are going to learn how to set up an environment for the successful development of the Ionic application. Pre-requisite for Ionic Node.js and NPM Code Editor Ionic CLI Install Node.js and NPM Node.js and NPM are the&nbsp;base platforms&nbsp;need to develop the Ionic application. You can install Node.js and NPM package manager [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1748,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5606"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5606"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5606/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1748"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5606"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5606"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5606"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5597,
    "date": "2020-05-13T08:44:28",
    "date_gmt": "2020-05-13T08:44:28",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=926"
    },
    "modified": "2020-05-13T08:44:28",
    "modified_gmt": "2020-05-13T08:44:28",
    "slug": "ionic-4-vs-ionic-3",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/ionic-4-vs-ionic-3/",
    "title": {
      "rendered": "Ionic 4 vs Ionic 3"
    },
    "content": {
      "rendered": "\n<p>In this section, we are going to explain the main differences between Ionic 4 and ionic 3. After the release of the Ionic 3, Ionic framework team has released the Ionic 4 version. The new version of Ionic offers significant changes in the project structure, performance, compatibility with multiple frameworks (Such as Angular, React.js, and Vue.js), new documentation, and many other improvements. Now, let us see the comparisons one by one.</p>\n\n\n\n<h3>Changes in Package Name</h3>\n\n\n\n<p>In Ionic 4, the package name starts with @&nbsp;<strong>symbol</strong>&nbsp;like @<strong>ionic/angular</strong>. Whereas, the Ionic 3 package name does not use the @ symbol. We can understand the syntax comparison of Ionic 3 and ionic 4 from the below syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>In Ionic 3: npm install ionic-angular  \nIn Ionic 4: npm install @ionic/angular </code></pre>\n\n\n\n<p>If you are going to migrating an app from Ionic 3 to Ionic 4, you need to update the&nbsp;<strong>imports</strong>&nbsp;from ionic-angular to @ionic/angular.</p>\n\n\n\n<h3>Project Structure</h3>\n\n\n\n<p>The major changes between Ionic 4 and Ionic 3 app are the overall project layout and structure. In Ionic 3, it had a custom convention for how an app should be set up and how the folder structure should look like. Whereas, in Ionic 4, app structure follow the recommended setup of each supported framework.</p>\n\n\n\n<p><strong>For example,</strong>&nbsp;if we built the app with Angular, the project structure will be exactly Angular CLI app structure. We can see the comparison of the project structure in the below image.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-4-vs-ionic-3.png\" alt=\"\" class=\"wp-image-929\"/></figure></div>\n\n\n\n<h3>RxJS Changes</h3>\n\n\n\n<p>The Ionic 4 uses the latest version 6 of RxJS. It changes many of the import paths of operators and core RxJS functions.</p>\n\n\n\n<h3>Web Components</h3>\n\n\n\n<p>Ionic 4 was completely rebuilt to use the Web APIs, and each component is packaged as a Web Components. Web components are set of Web platform APIs which allows the Ionic framework to create custom, reusable, encapsulated HTML tags to use in web pages and web apps.</p>\n\n\n\n<p>Since each component of Ionic 4 is a web component, they created and open-sourced a tool called&nbsp;<strong>Stencil</strong>. The stencil is a web component compiler used for building fast, reusable UI components and Progressive Web Apps.</p>\n\n\n\n<h3>Lifecycle Events</h3>\n\n\n\n<p>The lifecycle events that we had used in Ionic 3 such as ionViewDidLoad, ionViewCanLeave, and ionViewCanEnter have been removed, and their proper alternative is used in the Ionic 4. With Ionic 4, we are able to utilize the typical events provided by Angular.</p>\n\n\n\n<h3>Overlay Components</h3>\n\n\n\n<p>In Ionic 3, the overlay components such as loading, toast, and alert were created synchronously. But, in Ionic 4, they are created asynchronously. Now, the API became&nbsp;<strong>promise-based</strong>. For example,</p>\n\n\n\n<p>In Ionic 3, we created the alert message as like below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>showAlert() {  \n  const alert = this.alertCtrl.create({  \n    message: \"Hello\",  \n    subHeader: \"I'm an alert message\"  \n  });  \n  \n  alert.present();  \n}  </code></pre>\n\n\n\n<p>In Ionic 4, promises are used. We can create the alert message as like below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>showAlert() {  \n  this.alertCtrl.create({  \n    message: \"Hello\",  \n    subHeader: \"I'm an alert message\"  \n  }).then(alert => alert.present());  \n}  \n  \n// Or using async/await  \n  \nasync showAlert() {  \n  const alert = await this.alertCtrl.create({  \n    message: \"Hello\",  \n    subHeader: \"I'm an alert message.\"  \n  });  \n  \n  await alert.present();  \n}  </code></pre>\n\n\n\n<h3>Navigation</h3>\n\n\n\n<p>In Ionic 4, the navigation has received many changes.&nbsp;<strong>For example,</strong>&nbsp;instead of using the Ionic&#8217;s own&nbsp;<strong>navController</strong>, the v4 is able to integrate with the official&nbsp;<strong>Angular Router</strong>. It provides more consistent routing experience into the whole app. The Angular Router is the most important libraries in the Angular application. If it is not available, the app cannot maintain its navigation state on browser reloads. Thus, with the Ionic framework and Angular Router, you can create rich applications which are linkable and have rich animation.</p>\n\n\n\n<p>Ionic version 3 navigation is based on the simple stack where the new pages pushed on top of the stack. And, when we want to navigate backward, simply pop the last page.</p>\n\n\n\n<p>Traditional websites use linear history, where the user navigates to a required page and can press the Back button to navigate back. But, in Ionic Framework, applications can take this by allowing parallel navigation. It means that it has multiple navigation stacks and can exchange them at any time.</p>\n\n\n\n<h3>Lazy loading</h3>\n\n\n\n<p>As we have learned previously that the navigation has changed in Ionic 4, the mechanism for lazy loading has also changed. We can understand how lazy loading setup worked from the below code snippets.</p>\n\n\n\n<h3>In Ionic 3</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>// home.page.ts  \n@IonicPage({  \n  segment: 'home'  \n})  \n@Component({ ... })  \nexport class HomePage {}  \n  \n// home.module.ts  \n@NgModule({  \n  declarations: &#91;HomePage],  \n  imports: &#91;IonicPageModule.forChild(HomePage)]  \n})  \nexport class HomePageModule {}  </code></pre>\n\n\n\n<h2>In Ionic 4</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>    // home.module.ts  \n@NgModule({  \n  imports: &#91;  \n    IonicModule,  \n    RouterModule.forChild(&#91;{ path: '', component: HomePage }])  \n  ],  \n  declarations: &#91;HomePage]  \n})  \nexport class HomePageModule {}  \n  \n// app.module.ts  \n@NgModule({  \n  declarations: &#91;AppComponent],  \n  imports: &#91;  \n    BrowserModule,  \n    IonicModule.forRoot(),  \n    RouterModule.forRoot(&#91;  \n      { path: 'home', loadChildren: './pages/home/home.module#HomePageModule' },  \n      { path: '', redirectTo: 'home', pathMatch: 'full' }  \n    ])  \n  ],  \n  bootstrap: &#91;AppComponent]  \n})  \nexport class AppModule {}  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this section, we are going to explain the main differences between Ionic 4 and ionic 3. After the release of the Ionic 3, Ionic framework team has released the Ionic 4 version. The new version of Ionic offers significant changes in the project structure, performance, compatibility with multiple frameworks (Such as Angular, React.js, and [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1749,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5597"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5597"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5597/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1749"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5597"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5597"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5597"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5598,
    "date": "2020-05-13T08:50:18",
    "date_gmt": "2020-05-13T08:50:18",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=932"
    },
    "modified": "2020-05-13T08:50:18",
    "modified_gmt": "2020-05-13T08:50:18",
    "slug": "action-sheets",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/action-sheets/",
    "title": {
      "rendered": "Action Sheets"
    },
    "content": {
      "rendered": "\n<p>Ionic components are made of high-level building blocks, which is known as components. These components allow us to construct the interface of the app quickly. The Ionic Framework contains many built-in components, which are&nbsp;<strong>buttons, modals, popups, lists, cards,</strong>&nbsp;etc. Here, we are going to learn about how the component looks like and how to use them.</p>\n\n\n\n<p>An&nbsp;<strong>Action Sheet</strong>&nbsp;is a dialog which allows us to choose to&nbsp;<strong>confirm</strong>&nbsp;or&nbsp;<strong>cancel</strong>&nbsp;an action from a set of options. It always appears top of any other components on the page and must be dismissed manually by the user to interact with the app. When the Action Sheets are&nbsp;<strong>triggered</strong>, the rest of the page&nbsp;<strong>darkens</strong>&nbsp;to give more focus to the options of the Action Sheets.</p>\n\n\n\n<p>Sometimes, we use the Action Sheets as an alternative to the menus. However, it should not be used for navigation.</p>\n\n\n\n<p>We can understand the working of Action Sheet Components through the below example.</p>\n\n\n\n<h3>home.page.ts</h3>\n\n\n\n<p>It is the main page of the Ionic app, which is responsible for the&nbsp;<strong>user interface</strong>. Here, we are creating a menu, which contains a destructive, archive, and cancel elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport {ActionSheetController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(  \n    public actionsheetCtrl: ActionSheetController  \n  ) { }  \n  \n  async openMenu() {  \n    const actionSheet = await this.actionsheetCtrl.create({  \n      header: 'Modify your album',  \n      buttons: &#91;  \n        {  \n          text: 'Destructive',  \n          role: 'destructive',  \n          handler: () => {  \n            console.log('Destructive clicked');  \n          }  \n        },{  \n          text: 'Archive',  \n          handler: () => {  \n            console.log('Archive clicked');  \n          }  \n        }, {  \n          text: 'Cancel',  \n          role: 'cancel',  \n          handler: () => {  \n            console.log('Cancel clicked');  \n          }  \n        }  \n      ]  \n    });  \n    await actionSheet.present();  \n  }  \n}  </code></pre>\n\n\n\n<h3>home.page.html</h3>\n\n\n\n<p>This HTML page is responsible for&nbsp;<strong>designing</strong>&nbsp;(look and feel) of your home page. It also contains the&nbsp;<strong>actions</strong>&nbsp;on HTML elements like button elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Action Sheets  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" class=\"action-sheets-home-page\">  \n  &lt;button ion-button block (click)=\"openMenu()\">  \n    Show Action Sheet  \n  &lt;/button>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<h3>home.page.scss</h3>\n\n\n\n<p>It is the CSS file which contains the additional styles on the HTML elements.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.action-sheet-home-page {  \n    .ion-md-share {  \n      color: #ED4248;  \n    }  \n    .ion-md-arrow-dropright-circle {  \n      color: #508AE4;  \n    }  \n    .ion-md-heart-outline {  \n      color: #31D55F;  \n    }  \n    .action-sheet-cancel ion-icon,  \n    .action-sheet-destructive ion-icon {  \n      color: #757575;  \n    }  \n  }  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>Now, execute the application on your terminal through the command given below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic serve</code></pre>\n\n\n\n<p>It gives the output as like below screen. Now, if you use an IDE, and modify or changes anything in the code, then after modification, as soon as you&nbsp;<strong>save</strong>&nbsp;the file, the browser automatically&nbsp;<strong>reloads</strong>&nbsp;your app.</p>\n\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-action-sheets-1.png\" alt=\"\" class=\"wp-image-935\"/></figure></div>\n\n\n\n<p>Now, click on the&nbsp;<strong>Show Action Sheet</strong>&nbsp;button, the below output appears on your screen. When the Action Sheets are triggered, the rest of the page darkens to give more focus to the options of the Action Sheets.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-action-sheets2.png\" alt=\"\" class=\"wp-image-936\"/></figure>\n\n\n\n<p>The&nbsp;<strong>$ionicActionSheet.show()</strong>&nbsp;method also contains several useful&nbsp;<strong>parameters</strong>, which we can see in the following table.</p>\n\n\n\n<table><tbody><tr><th>Properties</th><th>Type</th><th>Descriptions</th></tr><tr><td>buttons</td><td>Object</td><td>It creates the button object with a text field.</td></tr><tr><td>titleText</td><td>String</td><td>It sets the title of the Action Sheet.</td></tr><tr><td>cancelText</td><td>String</td><td>It sets the text for cancel button.</td></tr><tr><td>destructiveText</td><td>String</td><td>It sets the text for destructive button.</td></tr><tr><td>cancel</td><td>Function</td><td>It is called when the cancel button, backdrop or hardware back button is pressed.</td></tr><tr><td>buttonClicked</td><td>Function</td><td>It is called when one of the buttons is tapped. Here, the index is used for keeping track of which button is tapped. If it returns true, the Action Sheet will be closed.</td></tr><tr><td>destructiveButtonClicked</td><td>Function</td><td>It is called when the destructive button is clicked. If it returns true, the Action Sheet will be closed.</td></tr><tr><td>cancelOnStateChange</td><td>boolean</td><td>It is by default true, which cancel the Action Sheet when navigation state is changed.</td></tr></tbody></table>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Ionic components are made of high-level building blocks, which is known as components. These components allow us to construct the interface of the app quickly. The Ionic Framework contains many built-in components, which are&nbsp;buttons, modals, popups, lists, cards,&nbsp;etc. Here, we are going to learn about how the component looks like and how to use them. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1750,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5598"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5598"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5598/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1750"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5598"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5598"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5598"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5599,
    "date": "2020-05-13T09:02:01",
    "date_gmt": "2020-05-13T09:02:01",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=940"
    },
    "modified": "2020-05-13T09:02:01",
    "modified_gmt": "2020-05-13T09:02:01",
    "slug": "alert-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/alert-2/",
    "title": {
      "rendered": "Alert"
    },
    "content": {
      "rendered": "\n<p>An alert is a dialog that notifies the user with important information to make a decision or provide the ability to choose a specific action or list of actions. It appears on top of the app content. It can be dismissed manually by the user before resuming interaction with the app. It can also include a&nbsp;<strong>header, sub-header,</strong>&nbsp;and&nbsp;<strong>message</strong>&nbsp;options.</p>\n\n\n\n<p>An alert can be thought of as a&nbsp;<strong>floating modal</strong>&nbsp;which should be used for a quick response such as password verification, small app notifications, and many more. The alerts are very flexible and can be customized very easily.</p>\n\n\n\n<h2>Alert Controller</h2>\n\n\n\n<p>The alert controller is responsible for&nbsp;<strong>creating</strong>&nbsp;an alert in the Ionic application. It uses&nbsp;<strong>create()</strong>&nbsp;method to create an alert and can be customized by passing alert option in the create() method.</p>\n\n\n\n<p>The alerts can be categorized into multiple types, which are given below.</p>\n\n\n\n<h3>1. Basic Alerts</h3>\n\n\n\n<p>These types of alerts are used to notify the users about new information. The information is of different types, such as a change in the app, about new features, an urgent situation that requires acknowledgment, or as a confirmation notification to the user that an action was successful or not. The following example explains the use of basic alerts.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>In this typescript file, we need first to import the&nbsp;<strong>Alert Controller</strong>. Then, create a&nbsp;<strong>showAlert()</strong>&nbsp;function, which contains the alert options such as header, sub-header, message, and button. After that, we create an&nbsp;<strong>onDidDismiss()</strong>&nbsp;method to resume an interaction with the app.</p>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { AlertController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public alertCtrl: AlertController) { }  \n  \n  async showAlert() {  \n    const alert = await this.alertCtrl.create({  \n      header: 'Alert',  \n      subHeader: 'SubTitle',  \n      message: 'This is an alert message',  \n      buttons: &#91;'OK']  \n    });  \n    await alert.present();  \n    const result = await alert.onDidDismiss();  \n    console.log(result);  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<p>In this file, we are going to create a&nbsp;<strong>button</strong>. When we press the button, it will call the showAlert() function. The implementation of the showAlert() function is defined in the&nbsp;<strong>home.page.ts</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Alert&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;div>  \n    &lt;ion-button (click)=\"showAlert()\">Basic Alert&lt;/ion-button>  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you run the application, it will give the following screen. When you click on the button, immediately, you will get the&nbsp;<strong>alert message</strong>. Now, click on the&nbsp;<strong>OK</strong>&nbsp;button, the alert message will be disappeared.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-alert.png\" alt=\"\" class=\"wp-image-942\"/></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-alert2.png\" alt=\"\" class=\"wp-image-943\"/></figure>\n\n\n\n<h3>2. Multiple Buttons Alerts</h3>\n\n\n\n<p>This type of alert is used to give the multiple alerts buttons. It is similar to the basic alert type, except it contains the multiple buttons instead of a single button. Here, the rightmost button work as a <strong>primary button</strong>.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { AlertController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public alertCtrl: AlertController) { }  \n  async showMultipleAlertButtons() {  \n    const alert = await this.alertCtrl.create({  \n      header: 'MultipleButtonAlert',  \n      subHeader: 'SubTitle',  \n      message: 'This is an multiple button alert message',  \n      buttons: &#91;'Cancel', 'Save', 'Open']  \n    });  \n    await alert.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Alert&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;div>  \n    &lt;ion-button (click)=\"showMultipleAlertButtons()\" expand=\"block\">Multiple Button Alert&lt;/ion-button>  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you run the application, you will get the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-alert3.png\" alt=\"\" class=\"wp-image-945\"/></figure>\n\n\n\n<h3>3. Prompt Alerts</h3>\n\n\n\n<p>The prompt alert is used to&nbsp;<strong>input data or information</strong>. Sometimes, we can use it to ask the password from the user before moving forward in an application. The following example explains it more clearly.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { AlertController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public alertCtrl: AlertController) { }  \n  \n  async showPrompt() {  \n    const prompt = await this.alertCtrl.create({  \n      header: 'Album',  \n      message: 'Enter a name for this new album',  \n      inputs: &#91;  \n        {  \n          name: 'name1',  \n          type: 'text',  \n          placeholder: 'Placeholder 1'  \n        },  \n        {  \n          name: 'name2',  \n          type: 'text',  \n          placeholder: 'Placeholder 2'  \n        },  \n      ],  \n      buttons: &#91;  \n        {  \n          text: 'Cancel',  \n          handler: data => {  \n            console.log('Cancel clicked');  \n          }  \n        },  \n        {  \n          text: 'Save',  \n          handler: data => {  \n            console.log('Saved clicked');  \n          }  \n        }  \n      ]  \n    });  \n    await prompt.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Alert&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;div>  \n    &lt;ion-button (click)=\"showPrompt()\" expand=\"block\">Prompt Alert&lt;/ion-button>  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-alert4.png\" alt=\"\" class=\"wp-image-947\"/></figure>\n\n\n\n<h3>4. Confirmation Alerts</h3>\n\n\n\n<p>These types of alerts are used to&nbsp;<strong>confirm</strong>&nbsp;a particular choice before moving forward in the application. For example, it is required when a user wants to delete or remove a contact from the address book.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { AlertController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public alertCtrl: AlertController) { }  \n  async showConfirm() {  \n    const confirm = await this.alertCtrl.create({  \n      header: 'Confirm!',  \n      message: 'Do you agree to use this Alert option',  \n      buttons: &#91;  \n        {  \n          text: 'Cancel',  \n          role: 'cancel',  \n          handler: () => {  \n            console.log('Confirm Cancel');  \n          }  \n        },  \n        {  \n          text: 'Okay',  \n          handler: () => {  \n            console.log('Confirm Okay.');  \n          }  \n        }  \n      ]  \n    });  \n    await confirm.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Alert&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;div>  \n    &lt;ion-button (click)=\"showConfirm()\" expand=\"block\">Confirmation Alert&lt;/ion-button>  \n  &lt;/div>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-alert5.png\" alt=\"\" class=\"wp-image-949\"/></figure>\n\n\n\n<h3>5. Radio Alerts</h3>\n\n\n\n<p>Radio alerts are similar to confirmation alerts, but it is recommended to use a radio component instead of this. This type of alert provides a set of options to the user, where only one option can be chosen.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { AlertController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public alertCtrl: AlertController) { }  \n  async showRadio() {  \n    const alert = await this.alertCtrl.create({  \n      inputs: &#91;  \n        {  \n          name: 'radio 1',  \n          type: 'radio',  \n          label: 'Green',  \n          value: 'green',  \n          checked: true,  \n        },  \n        {  \n          name: 'radio 2',  \n          type: 'radio',  \n          label: 'Black',  \n          value: 'black',  \n        },  \n        {  \n          name: 'radio 3',  \n          type: 'radio',  \n          label: 'Red',  \n          value: 'red',  \n        },  \n      ],  \n      buttons: &#91;  \n        {  \n          text: 'Cancel',  \n          handler: data => {  \n            console.log('Cancel clicked');  \n          }  \n        },  \n        {  \n          text: 'Save',  \n          handler: data => {  \n            console.log('Saved clicked');  \n          }  \n        }  \n      ]  \n    });  \n    await alert.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Alert&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;div>  \n    &lt;ion-button (click)=\"showRadio()\" expand=\"block\">Radio Alert&lt;/ion-button>  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong>:</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-alert6.png\" alt=\"\" class=\"wp-image-950\"/></figure>\n\n\n\n<h3>6. Checkbox Alerts</h3>\n\n\n\n<p>Checkbox alerts are similar to confirmation alerts, but it is recommended to use the checkbox component instead of this. This type of alert provides a set of multiple choices to the user, where the user can select the option of their choices.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { AlertController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public alertCtrl: AlertController) { }  \n  async showCheckBoxAlert() {  \n    const alert = await this.alertCtrl.create({  \n      header: 'What is your favorite Programming Language?',  \n      inputs: &#91;  \n        {  \n          name: 'checkbox 1',  \n          type: 'checkbox',  \n          label: 'Java',  \n          value: 'Java',  \n          checked: true,  \n        },  \n        {  \n          name: 'checkbox 2',  \n          type: 'checkbox',  \n          label: 'Android',  \n          value: 'Android',  \n        },  \n        {  \n          name: 'checkbox 3',  \n          type: 'checkbox',  \n          label: 'Python',  \n          value: 'Python',  \n        },  \n      ],  \n      buttons: &#91;  \n        {  \n          text: 'Cancel',  \n          handler: data => {  \n            console.log('Cancel clicked');  \n          }  \n        },  \n        {  \n          text: 'Save',  \n          handler: data => {  \n            console.log('Saved clicked');  \n          }  \n        }  \n      ]  \n    });  \n    await alert.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Alert&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;div>  \n    &lt;ion-button (click)=\"showCheckBoxAlert()\" expand=\"block\">CheckBox Alert&lt;/ion-button>  \n  &lt;/div>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-alert7.png\" alt=\"\" class=\"wp-image-952\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>An alert is a dialog that notifies the user with important information to make a decision or provide the ability to choose a specific action or list of actions. It appears on top of the app content. It can be dismissed manually by the user before resuming interaction with the app. It can also include [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1751,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5599"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5599"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5599/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1751"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5599"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5599"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5599"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 976,
    "date": "2020-05-14T04:30:19",
    "date_gmt": "2020-05-14T04:30:19",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=976"
    },
    "modified": "2020-05-14T04:30:19",
    "modified_gmt": "2020-05-14T04:30:19",
    "slug": "buttons-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/buttons-2/",
    "title": {
      "rendered": "Buttons"
    },
    "content": {
      "rendered": "\n<p>The ionic framework contains several types of buttons. These buttons are an essential way to interact with and&nbsp;<strong>navigate</strong>&nbsp;through an app. It should also use to clearly communicate what action will occur when the user clicks on them. It can be used in the forms or anywhere that needs a simple, standard button functionality. The buttons can contain&nbsp;<strong>two things</strong>, which are&nbsp;<strong>text</strong>,&nbsp;<strong>icons</strong>, or&nbsp;<strong>both</strong>. It can also be enhanced with a variety of attributes to look a specific way. We can access buttons by using a standard&nbsp;<strong>&lt;ion-button&gt; &lt;/ion-button&gt;</strong>&nbsp;element.</p>\n\n\n\n<p>The different styles of buttons attributes are listed below.</p>\n\n\n\n<ul><li>Default</li><li>Expand</li><li>Fill</li><li>Shape</li><li>Size</li><li>Icon</li></ul>\n\n\n\n<h3>Default</h3>\n\n\n\n<p>It is the basic usage of the buttons. The syntax of default style is:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button>Default Button&lt;/ion-button>  </code></pre>\n\n\n\n<p>You can sets the color of the button by using&nbsp;<strong>color</strong>&nbsp;property. Ionic includes several default colors which can be easily overridden. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button color=\"light\">Light Button&lt;/ion-button>  </code></pre>\n\n\n\n<h3>Expand</h3>\n\n\n\n<p>This attribute is used to specify the width of your buttons. By default, the buttons are inline blocks. But, by setting these attributes, we can change the button to a full-width block element. We can divide it into two types:</p>\n\n\n\n<p><strong>1. Block Buttons</strong></p>\n\n\n\n<p>Block button will always make the button take 100% width of its parent&#8217;s container with a rounded corner.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button expand=\"block\">Block Button&lt;/ion-button>  </code></pre>\n\n\n\n<p><strong>2. Full Buttons</strong></p>\n\n\n\n<p>The full button will also make the button take 100% width of its parent&#8217;s container. It also removes the button&#8217;s left and right border. The Full button style is useful when the button needs to stretch across the entire width of the display.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button expand=\"full\" >Full Button&lt;/ion-button>  </code></pre>\n\n\n\n<h3>Fill</h3>\n\n\n\n<p>It determines the&nbsp;<strong>background</strong>&nbsp;and&nbsp;<strong>border color</strong>&nbsp;of the buttons. By default, buttons are of a solid background. We can divide these attributes into the following types.</p>\n\n\n\n<p><strong>Clear</strong></p>\n\n\n\n<p>It is used to make the buttons with a transparent background, which resembles a flat button. You can do it by adding the&nbsp;<strong>clear property</strong>&nbsp;in the button as like below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button expand=\"full\"  fill=\"clear\">Full Button&lt;/ion-button></code></pre>\n\n\n\n<p><strong>Outline</strong></p>\n\n\n\n<p>It is used to make the buttons with a transparent background and a visible border. You can do it by adding the&nbsp;<strong>outline property</strong>&nbsp;in the button as like below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button expand=\"full\"  fill=\"outline\">Full Button&lt;/ion-button>  </code></pre>\n\n\n\n<p><strong>Solid</strong></p>\n\n\n\n<p>It is used to make the buttons with a filled background. It is useful for buttons in a toolbar. You can do it by adding the&nbsp;<strong>solid property</strong>&nbsp;in the button as like below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button expand=\"full\" fill=\"solid\" >Full Button&lt;/ion-button> </code></pre>\n\n\n\n<h3>Round Shape Button</h3>\n\n\n\n<p>It is used to create a button with rounded corners. You can do it by adding the&nbsp;<strong>round property</strong>&nbsp;in the button as like below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button shape=\"round\" >Round Button&lt;/ion-button>  </code></pre>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>In the below example, we can clearly understand the usage of all types of button attributes.</p>\n\n\n\n<p><strong>Button.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>Buttons Example&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n  &lt;ion-content>  \n  \n    &lt;!-- Default -->  \n    &lt;ion-button>Default&lt;/ion-button>  \n  \n    &lt;!-- Expand -->  \n    &lt;ion-button expand=\"full\" color=\"primary\">Full Button&lt;/ion-button>  \n    &lt;ion-button expand=\"block\" color=\"secondary\">Block Button&lt;/ion-button>  \n  \n    &lt;!-- Round -->  \n    &lt;ion-button shape=\"round\" color=\"warning\">Round Button&lt;/ion-button>  \n  \n    &lt;!-- Fill -->  \n    &lt;ion-button expand=\"full\" fill=\"outline\" color=\"success\">Outline Button&lt;/ion-button>  \n    &lt;ion-button expand=\"block\" fill=\"clear\" color=\"danger\">Clear Button&lt;/ion-button>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Button.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: button.html',  \n  styleUrls: &#91;button.scss'],  \n})  \nexport class HomePage {}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When we execute this Ionic application in the terminal window, it gives the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-buttons-output1.png\" alt=\"\" class=\"wp-image-977\"/></figure>\n\n\n\n<h3>Button Size</h3>\n\n\n\n<p>The size attribute is used to specify the size of the button. It allows us to change the height and padding of a button. There are mainly three types of these attributes, which we can see in the below table.</p>\n\n\n\n<table><tbody><tr><th>SN</th><th>Size</th><th>Description</th></tr><tr><td>1.</td><td>Default</td><td>It specifies the default height and padding of a button. It is useful for buttons in an item.</td></tr><tr><td>2.</td><td>Small</td><td>It creates buttons with less height and padding.</td></tr><tr><td>3.</td><td>Large</td><td>It creates buttons with more height and padding.</td></tr></tbody></table>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>In the below example, we can clearly understand the differences between all the size of the buttons.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>Buttons Example&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n  &lt;ion-content>  \n    &lt;!-- Sizes -->  \n    &lt;div>&lt;/div>  \n    &lt;div>&lt;ion-button size=\"large\" color=\"secondary\">Large&lt;/ion-button>&lt;/div>  \n    &lt;div>&lt;ion-button>Default&lt;/ion-button>&lt;/div>  \n    &lt;div>&lt;ion-button size=\"small\" color=\"danger\">Small&lt;/ion-button>&lt;/div>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When we execute this Ionic application in the terminal window, it gives the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-buttons-output2.png\" alt=\"\" class=\"wp-image-978\"/></figure>\n\n\n\n<h3>Button Icons</h3>\n\n\n\n<p>If you want to add icons to a button, you need to add an&nbsp;<strong>icon component</strong>&nbsp;inside of the button. You can also set the position of the icon inside the button by using slot attributes. The slot attributes are given in the following table.</p>\n\n\n\n<table><tbody><tr><th>SN</th><th>Slot Attribute</th><th>Description</th></tr><tr><td>1.</td><td>End</td><td>It places the content to the right of the button text.</td></tr><tr><td>2.</td><td>Start</td><td>It places the content to the left of the button text.</td></tr><tr><td>3.</td><td>Icon only</td><td>It is used when the button has no text.</td></tr></tbody></table>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>Buttons Icons &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n  &lt;ion-content>  \n    &lt;!-- Icons -->  \n    &lt;div>&lt;ion-button>  \n        &lt;ion-icon slot=\"start\" name=\"star\" color=\"success\">&lt;/ion-icon>  \n         Left Icon  \n    &lt;/ion-button>&lt;/div>  \n    \n    &lt;div>&lt;ion-button>  \n        Right Icon  \n        &lt;ion-icon slot=\"end\" name=\"star\" color=\"secondary\">&lt;/ion-icon>  \n    &lt;/ion-button>&lt;/div>  \n    \n    &lt;div>&lt;ion-button>  \n        &lt;ion-icon slot=\"icon-only\" name=\"star\" color=\"warning\">&lt;/ion-icon>  \n    &lt;/ion-button>&lt;/div>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-buttons-output3.png\" alt=\"\" class=\"wp-image-979\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The ionic framework contains several types of buttons. These buttons are an essential way to interact with and&nbsp;navigate&nbsp;through an app. It should also use to clearly communicate what action will occur when the user clicks on them. It can be used in the forms or anywhere that needs a simple, standard button functionality. The buttons [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1752,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/976"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=976"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/976/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1752"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=976"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=976"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=976"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 981,
    "date": "2020-05-14T04:42:52",
    "date_gmt": "2020-05-14T04:42:52",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=981"
    },
    "modified": "2020-05-14T04:42:52",
    "modified_gmt": "2020-05-14T04:42:52",
    "slug": "cards",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/cards/",
    "title": {
      "rendered": "Cards"
    },
    "content": {
      "rendered": "\n<p>Cards are a great way to display standard pieces of UI content which serves as an entry point to more detailed information. They are the best elements for displaying information that will feel user-friendly. If there is a need to display more content at once, and often have a small screen, the choice of the card becomes the popular design pattern for many companies like Google, Twitter, Spotify, etc.</p>\n\n\n\n<p>For&nbsp;<strong>mobile experiences</strong>, an Ionic card makes it easy to display the same information across many different screen sizes. They are flexible, allow more control, and can be animated also. Cards can be a&nbsp;<strong>single component</strong>, which often broken up into several other&nbsp;<strong>sub-components</strong>. These sub-components are header, title, subtitle, and content. We can access cards by using a standard&nbsp;<strong>&lt;ion-card&gt;&lt;/ion-card&gt;</strong>&nbsp;element.</p>\n\n\n\n<p>Let us see the sub-components of cards in detail:</p>\n\n\n\n<p><strong>Ion-card-content</strong></p>\n\n\n\n<p>It is the child component of &lt;ion-card&gt; which adds some content padding. It is recommended to add text content for a card which should be placed in an&nbsp;<strong>ion-card-content</strong>&nbsp;element.</p>\n\n\n\n<p><strong>Ion-card-header</strong></p>\n\n\n\n<p>It is a sub-component of &lt;ion-card&gt; which creates a header for the card.</p>\n\n\n\n<p><strong>Ion-card-subtitle</strong></p>\n\n\n\n<p>It is a child component of card which adds subtitles for the card. It displays in the capital form inside your app.</p>\n\n\n\n<p><strong>Ion-card-title</strong></p>\n\n\n\n<p>It is a child component of card which adds titles for the card.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The below example helps to understand how Ionic card and its sub-component works.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>  \n        Card Example  \n      &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n     \n  &lt;ion-content>  \n    &lt;ion-card>  \n      &lt;ion-card-header>  \n        &lt;ion-card-subtitle>Training Institute&lt;/ion-card-subtitle>  \n        &lt;ion-card-title>CodePoint&lt;/ion-card-title>  \n        &lt;/ion-card-header>  \n      &lt;ion-card-content>  \n          Ionic framework is an open-source UI toolkit for building performant, high-quality mobile apps, desktop apps, and progressive web apps using web technologies such as HTML, CSS, and JavaScript.  \n      &lt;/ion-card-content>  \n    &lt;/ion-card>  \n  &lt;/ion-content> </code></pre>\n\n\n\n<p>Execute the app in your terminal, and see the output on the browser.</p>\n\n\n\n<h2>Card Images</h2>\n\n\n\n<p>You can add your app images easily inside the cards. The Ionic card will give a&nbsp;<strong>constant width</strong>&nbsp;and&nbsp;<strong>variable height</strong>&nbsp;to the image. You can also combine the headers, lists, and other card components easily with image cards. To add an image in your card, use the following markup&nbsp;<strong>&lt;img src=&#8221;assets/jtp_logo.png&#8221;/&gt;</strong></p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>The below example helps to understand how an Ionic card works with images.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>  \n        Card Example  \n      &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content>  \n    &lt;div>  \n        &lt;ion-card color=\"light\">  \n          &lt;ion-card-header>  \n            &lt;ion-card-title>Ionic Framework&lt;/ion-card-title>  \n          &lt;/ion-card-header>  \n          &lt;P>  \n            Ionic framework is an open-source UI toolkit for building performant, high-quality mobile apps, desktop apps, and progressive web apps using web technologies such as HTML, CSS, and JavaScript.  \n          &lt;/P>  \n        &lt;/ion-card>  \n    &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p>Execute the app in your terminal, and see the output on the browser.</p>\n\n\n\n<h2>Lists in Cards</h2>\n\n\n\n<p>The Ionic card can also contain a list of items. To display a list inside of the&nbsp;content, you need to add the&nbsp;<strong>&lt;ion-list&gt;</strong>&nbsp;component.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>The below example helps to understand how lists work with Ionic card component.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>  \n        Card List Example  \n      &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n     \n  &lt;ion-content>  \n    &lt;ion-card>  \n      &lt;ion-card-header>  \n        Explore Nearby Places  \n      &lt;/ion-card-header>  \n            \n      &lt;ion-list>  \n        &lt;ion-item>Shopping Mall&lt;/ion-item>        \n        &lt;ion-item>Hospital&lt;/ion-item>          \n        &lt;ion-item>Cafe&lt;/ion-item>         \n        &lt;ion-item>Park&lt;/ion-item>          \n        &lt;ion-item>Pub&lt;/ion-item>          \n        &lt;ion-item>Movie Theater&lt;/ion-item>         \n      &lt;/ion-list>  \n    &lt;/ion-card>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<p>When you execute the app in your terminal, you will get the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-cards-output3.png\" alt=\"\" class=\"wp-image-983\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Cards are a great way to display standard pieces of UI content which serves as an entry point to more detailed information. They are the best elements for displaying information that will feel user-friendly. If there is a need to display more content at once, and often have a small screen, the choice of the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1753,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/981"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=981"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/981/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1753"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=981"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=981"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=981"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5600,
    "date": "2020-05-14T06:56:16",
    "date_gmt": "2020-05-14T06:56:16",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1001"
    },
    "modified": "2020-05-14T06:56:16",
    "modified_gmt": "2020-05-14T06:56:16",
    "slug": "checkbox-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/checkbox-2/",
    "title": {
      "rendered": "Checkbox"
    },
    "content": {
      "rendered": "\n<p>A checkbox is a type of&nbsp;<strong>input</strong>&nbsp;components which holds the&nbsp;<strong>Boolean value</strong>. It is similar to HTML checkbox inputs. The Ionic checkboxes are styled differently on each platform as like other Ionic components. You can use&nbsp;<strong>checked</strong>&nbsp;attribute with the&nbsp;<strong>&lt;ion-checkbox&gt;</strong>&nbsp;element to set the default value, and&nbsp;<strong>disabled</strong>&nbsp;attribute to disable the user from changing the value.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows different types of checkboxes used in an Ionic application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      CheckBox  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n       \n&lt;ion-content class=\"padding\" color=\"light\">  \n  &lt;!-- Default Checkbox -->  \n  &lt;div>  \n    &lt;ion-checkbox>&lt;/ion-checkbox>  \n    &lt;ion-label> Default&lt;/ion-label>  \n  &lt;/div>  \n  &lt;!-- Disabled Checkbox -->  \n  &lt;div>  \n    &lt;ion-checkbox disabled=\"true\">&lt;/ion-checkbox>  \n    &lt;ion-label> Disabled&lt;/ion-label>  \n  &lt;/div>  \n  &lt;!-- Checked Checkbox -->  \n  &lt;div>  \n    &lt;ion-checkbox checked=\"true\">&lt;/ion-checkbox>  \n    &lt;ion-label> Checked&lt;/ion-label>  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When you execute the app in your terminal, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-checkbox.png\" alt=\"\" class=\"wp-image-1002\"/></figure>\n\n\n\n<h2>Styling Checkbox</h2>\n\n\n\n<p>If you want to style your checkbox, use Ionic color attribute with the checkbox prefix. The following example explains the use of the Ionic color property with the checkbox component.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      CheckBox  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n       \n&lt;ion-content class=\"padding\" color=\"light\">  \n  &lt;!-- Checkbox Colors -->  \n  &lt;ul>&lt;li>  \n    &lt;ion-checkbox color=\"primary\" checked=\"false\">&lt;/ion-checkbox>  \n  &lt;/li>&lt;/ul>  \n  &lt;ul>&lt;li>  \n    &lt;ion-checkbox color=\"secondary\" checked=\"true\">&lt;/ion-checkbox>  \n  &lt;/li>&lt;/ul>  \n  &lt;ul>&lt;li>  \n    &lt;ion-checkbox color=\"light\" checked=\"true\">&lt;/ion-checkbox>  \n  &lt;/li>&lt;/ul>  \n  &lt;ul>&lt;li>  \n    &lt;ion-checkbox color=\"dark\" checked=\"false\">&lt;/ion-checkbox>  \n  &lt;/li>&lt;/ul>  \n  &lt;ul>&lt;li>  \n    &lt;ion-checkbox color=\"danger\" checked=\"true\">&lt;/ion-checkbox>  \n  &lt;/li>&lt;/ul>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-checkbox2.png\" alt=\"\" class=\"wp-image-1003\"/></figure>\n\n\n\n<h2>Checkboxes in a List</h2>\n\n\n\n<p>You can also use checkbox with the list. The following example explains how checkbox can be used with the list.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      CheckBox  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n       \n&lt;ion-content class=\"padding\" color=\"light\">  \n &lt;!-- Checkboxes in a List -->  \n &lt;ion-list>  \n    &lt;ion-item *ngFor=\"let entry of form\">  \n      &lt;ion-label>{{entry.val}}&lt;/ion-label>  \n      &lt;ion-checkbox slot=\"start\" &#91;(ngModel)]=\"entry.isChecked\">&lt;/ion-checkbox>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  public form = &#91;   \n    { val: 'Pok?mon Yellow' , isChecked: false},  \n    { val: 'Super Metroid' , isChecked: true},  \n    { val: 'Mega Man X' , isChecked: false},  \n    { val: 'Spider Man' , isChecked: true}  \n  ];  \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-checkbox3.png\" alt=\"\" class=\"wp-image-1004\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A checkbox is a type of&nbsp;input&nbsp;components which holds the&nbsp;Boolean value. It is similar to HTML checkbox inputs. The Ionic checkboxes are styled differently on each platform as like other Ionic components. You can use&nbsp;checked&nbsp;attribute with the&nbsp;&lt;ion-checkbox&gt;&nbsp;element to set the default value, and&nbsp;disabled&nbsp;attribute to disable the user from changing the value. Example The following example shows [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1754,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5600"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5600"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5600/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1754"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5600"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5600"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5600"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5601,
    "date": "2020-05-14T07:02:14",
    "date_gmt": "2020-05-14T07:02:14",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1006"
    },
    "modified": "2020-05-14T07:02:14",
    "modified_gmt": "2020-05-14T07:02:14",
    "slug": "chip",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/chip/",
    "title": {
      "rendered": "Chip"
    },
    "content": {
      "rendered": "\n<p>The Ionic chip represents complex entities in a small box, such as a contact. It is just an element or component which you can use to display information in some text system inside of your applications. It is a pretty&nbsp;<strong>bubble-like</strong>&nbsp;container for holding text and icons. It can contain a number of different Ionic elements like text, avatars, and icons. We can understand it from the following example.</p>\n\n\n\n<h4>Example</h4>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Ionic Chip&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n    \n&lt;ion-content class=\"ion-padding\">  \n  &lt;h1>Chips Example&lt;/h1>  \n  &lt;ion-chip>  \n    &lt;ion-label>Default&lt;/ion-label>  \n  &lt;/ion-chip>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-chip1.png\" alt=\"\" class=\"wp-image-1007\"/></figure>\n\n\n\n<h2>Outline Chip</h2>\n\n\n\n<p>We can also configure the border of an Ionic chip. By default, the shape of the Ionic is&nbsp;<strong>solid</strong>. But, it can be changed by using the&nbsp;<strong>outline</strong>&nbsp;property. The below example explains it more clearly.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Ionic Chip&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n    \n&lt;ion-content class=\"ion-padding\">  \n  &lt;h1>Chips Example&lt;/h1>  \n  &lt;ion-chip>  \n    &lt;ion-label>Default&lt;/ion-label>  \n  &lt;/ion-chip>  \n  &lt;ion-chip outline>Outline Chip&lt;/ion-chip>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the app, it will display the following output. Here, you can see the difference between default and outline chips.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-chip2.png\" alt=\"\" class=\"wp-image-1008\"/></figure>\n\n\n\n<h2>Adding Icons and Avatar</h2>\n\n\n\n<p>The Ionic allows to add icons and avatar media in the chip component. To add an icon and avatar in the &lt;ion-chip&gt;, you need to place&nbsp;<strong>&lt;ion-icon&gt;</strong>&nbsp;and&nbsp;<strong>&lt;ion-avatar&gt;</strong>&nbsp;component inside &lt;ion-chip&gt;. The following example explains how icon and avatar can be added to the chip component.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Ionic Chip&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n    \n&lt;ion-content class=\"ion-padding\">  \n  &lt;h1>Adding icons and Avatar&lt;/h1>  \n  &lt;ion-chip>  \n    &lt;ion-icon name=\"pin\">&lt;/ion-icon>  \n    &lt;ion-label>Default&lt;/ion-label>  \n  &lt;/ion-chip>  \n    \n  &lt;ion-chip>  \n    &lt;ion-label>Button Chip&lt;/ion-label>  \n    &lt;ion-icon name=\"close-circle\">&lt;/ion-icon>  \n  &lt;/ion-chip>  \n    \n  &lt;ion-chip>  \n    &lt;ion-icon name=\"pin\" color=\"primary\">&lt;/ion-icon>  \n    &lt;ion-label>Icon Chip&lt;/ion-label>  \n    &lt;ion-icon name=\"close\">&lt;/ion-icon>  \n  &lt;/ion-chip>  \n    \n  &lt;ion-chip>  \n    &lt;ion-avatar>  \n      &lt;img src=\"assets/avatar.png\">  \n    &lt;/ion-avatar>  \n    &lt;ion-label>Avatar Chip&lt;/ion-label>  \n    &lt;ion-icon name=\"close-circle\">&lt;/ion-icon>  \n  &lt;/ion-chip>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-chip3.png\" alt=\"\" class=\"wp-image-1009\"/></figure>\n\n\n\n<h2>Styling the Chip</h2>\n\n\n\n<p>The chip components can also colorize in different styles. To change the styling of &lt;ion-chip&gt;, use the color attribute. The following example explains the use of&nbsp;<strong>color</strong>&nbsp;attributes inside the chip component.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Ionic Chip&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n    \n&lt;ion-content class=\"ion-padding\">  \n  &lt;h1>Styling Chip&lt;/h1>  \n  &lt;ion-chip>  \n    &lt;ion-label>Default&lt;/ion-label>  \n  &lt;/ion-chip>  \n    \n  &lt;ion-chip>  \n    &lt;ion-label color=\"secondary\">Secondary Label&lt;/ion-label>  \n  &lt;/ion-chip>  \n    \n  &lt;ion-chip color=\"secondary\">  \n    &lt;ion-label color=\"dark\">Secondary w/ Dark label&lt;/ion-label>  \n  &lt;/ion-chip>  \n    \n  &lt;ion-chip color=\"danger\">  \n    &lt;ion-label>Danger&lt;/ion-label>  \n  &lt;/ion-chip>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-chip4.png\" alt=\"\" class=\"wp-image-1010\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic chip represents complex entities in a small box, such as a contact. It is just an element or component which you can use to display information in some text system inside of your applications. It is a pretty&nbsp;bubble-like&nbsp;container for holding text and icons. It can contain a number of different Ionic elements like [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1755,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5601"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5601"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5601/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1755"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5601"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5601"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5601"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5602,
    "date": "2020-05-14T07:05:03",
    "date_gmt": "2020-05-14T07:05:03",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1012"
    },
    "modified": "2020-05-14T07:05:03",
    "modified_gmt": "2020-05-14T07:05:03",
    "slug": "colors-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/colors-2/",
    "title": {
      "rendered": "Colors"
    },
    "content": {
      "rendered": "\n<p>In this section, we are going to learn about how Ionic makes the use of colors for different elements.</p>\n\n\n\n<h2>Ionic Color Classes</h2>\n\n\n\n<p>The Ionic framework contains a set of&nbsp;<strong>nine pre-defined</strong>&nbsp;color classes, which is used to change the color of many components. You can use these colors with your own styling. In Ionic, each color is a collection of multiple properties including&nbsp;<strong>shade</strong>&nbsp;and a&nbsp;<strong>tint</strong>. We can apply color to an Ionic component by using the color attribute. If you have not set any color to the required element, it sets the&nbsp;<strong>primary color</strong>&nbsp;by default.</p>\n\n\n\n<p>We can see the default set of colors provided by Ionic framework in the following table.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Colors</th><th>Description</th></tr><tr><td>Light</td><td>It is used for white color.</td></tr><tr><td>Positive</td><td>It is used for blue color.</td></tr><tr><td>Balanced</td><td>It is used for green color.</td></tr><tr><td>Stable</td><td>It is used for a light grey color.</td></tr><tr><td>Calm</td><td>It is used for a light blue color.</td></tr><tr><td>Energized</td><td>It is used for yellow color.</td></tr><tr><td>Assertive</td><td>It is used for red color.</td></tr><tr><td>Royal</td><td>It is used for violet color.</td></tr><tr><td>dark</td><td>It is used for black color.</td></tr></tbody></table></figure>\n\n\n\n<h2>Adding Colors</h2>\n\n\n\n<p>We can add colors throughout the application by setting the&nbsp;<strong>color property</strong>&nbsp;on an Ionic component, or by styling with CSS.</p>\n\n\n\n<p>If we want to add a new color, first define the CSS variables for all of the variations of the color at the root. For example, to add a new color called a&nbsp;<strong>favorite</strong>, we can define the following variables:</p>\n\n\n\n<p><strong>CSS file</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root {  \n  --ion-color-favorite: #69bb7b;  \n  --ion-color-favorite-rgb: 105,187,123;  \n  --ion-color-favorite-contrast: #ffffff;  \n  --ion-color-favorite-contrast-rgb: 255,255,255;  \n  --ion-color-favorite-shade: #5ca56c;  \n  --ion-color-favorite-tint: #78c288;  \n}  </code></pre>\n\n\n\n<p>Now, create a new class which uses these CSS variables. The class must be in the format of .ion-color-{COLOR} where {COLOR} is the name of the color to add:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>.ion-color-favorite {  \n  --ion-color-base: var(--ion-color-favorite);  \n  --ion-color-base-rgb: var(--ion-color-favorite-rgb);  \n  --ion-color-contrast: var(--ion-color-favorite-contrast);  \n  --ion-color-contrast-rgb: var(--ion-color-favorite-contrast-rgb);  \n  --ion-color-shade: var(--ion-color-favorite-shade);  \n  --ion-color-tint: var(--ion-color-favorite-tint);  \n}  </code></pre>\n\n\n\n<p>After the class is added, it can be used on any Ionic component which supports the color property. For example, we can use the&nbsp;<strong>favorite color</strong>&nbsp;on an Ionic button as below.</p>\n\n\n\n<p><strong>HTML file</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button color=\"favorite\">Favorite&lt;/ion-button>  </code></pre>\n\n\n\n<h2>Ionic Color Usage</h2>\n\n\n\n<p>Ionic uses different classes for each element. For example, the button element has a&nbsp;<strong>button class</strong>, and header element has a&nbsp;<strong>bar class</strong>. Now, if we want to create a blue color button, we will use the&nbsp;<strong>button-primary</strong>&nbsp;class as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;div class = \"button button-primary\">  \n   ...  \n&lt;/div>  </code></pre>\n\n\n\n<p>We can also use the Ionic color class like any other CSS class. The below code helps us to understand the use of the color property.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button ion-button block (click)=\"openMenu()\" color=\"primary\">  \n    Show Action Sheet  \n &lt;/ion-button>  </code></pre>\n\n\n\n<p>When the above code executes, it changes the&nbsp;<strong>Show Action Sheet</strong>&nbsp;button in the&nbsp;<strong>blue</strong>&nbsp;color. We will get the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-colors.png\" alt=\"\" class=\"wp-image-1013\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this section, we are going to learn about how Ionic makes the use of colors for different elements. Ionic Color Classes The Ionic framework contains a set of&nbsp;nine pre-defined&nbsp;color classes, which is used to change the color of many components. You can use these colors with your own styling. In Ionic, each color is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1756,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5602"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5602"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5602/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1756"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5602"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5602"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5602"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5603,
    "date": "2020-05-14T09:04:08",
    "date_gmt": "2020-05-14T09:04:08",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1015"
    },
    "modified": "2020-05-14T09:04:08",
    "modified_gmt": "2020-05-14T09:04:08",
    "slug": "content",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/content/",
    "title": {
      "rendered": "Content"
    },
    "content": {
      "rendered": "\n<p>The Ionic framework provides an &lt;<strong>ion-content</strong>&gt; element that serves as a container which wraps all the other elements that we want to create in the app. The content component allows an easy to use content area that contains some useful methods to control the&nbsp;<strong>scrollable</strong>&nbsp;area. In the Ionic app, there should be only one content component in a single view. Contents which contains many other Ionic components can be customized to modify its padding, margin, etc. by using the global styles provided in the&nbsp;<strong>CSS utilities</strong>. You can also customize it by individual styling using&nbsp;<strong>CSS</strong>&nbsp;and the available&nbsp;<strong>CSS custom properties</strong>.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>  \n        Ion Content  \n      &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n     \n  &lt;ion-content>  \n    &lt;div>  \n      &lt;p>Ionic framework is an open-source UI toolkit for building performant, high-quality mobile apps, desktop apps, and progressive web apps using web technologies such as HTML, CSS, and JavaScript. It allows developers to build once and run everywhere.&lt;/p>  \n    &lt;/div>  \n    &lt;div>  \n        &lt;p>It was created by Max Lynch, Ben Sperry, and Adam Bradley of Drifty Co. in 2013.&lt;/p>  \n      &lt;/div>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-content-1.png\" alt=\"\" class=\"wp-image-1016\"/></figure>\n\n\n\n<h3>Example of Ion-content Scrolling</h3>\n\n\n\n<p>If you want to use ion-content scroll event, you need to&nbsp;<strong>enable scroll events</strong>&nbsp;by setting the [scrollEvents] = &#8220;true.&#8221;</p>\n\n\n\n<p>There are mainly&nbsp;<strong>three</strong>&nbsp;scroll events available for ion-content, which are as follows:</p>\n\n\n\n<ol><li><strong>ionScrollStart:</strong>&nbsp;It is emitted when the scroll has started..</li><li><strong>ionScrollEnd:</strong>&nbsp;It is emitted when the scroll has ended..</li><li><strong>ionScroll:</strong>&nbsp;It is emitted while scrolling. By default, it is disabled.</li></ol>\n\n\n\n<p>We can understand the ion-content scrolling from the following example.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>  \n        Ion Content Scroll  \n      &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n     \n  &lt;ion-content  \n    &#91;scrollEvents]=\"true\"  \n    (ionScrollStart)=\"logScrollStart()\"  \n    (ionScroll)=\"logScrolling($event)\"  \n    (ionScrollEnd)=\"logScrollEnd()\"  \n  >  \n    &lt;ion-button (click)=\"ScrollToBottom()\">  \n      Scroll To Bottom  \n    &lt;/ion-button>  \n     \n    &lt;ion-button (click)=\"ScrollToPoint(300, 120)\">  \n      Scroll To Point Left  \n    &lt;/ion-button>  \n     \n    &lt;ion-list>  \n      &lt;ion-item *ngFor=\"let item of dummyList\">  \n        &lt;ion-label>{{ item.value }}&lt;/ion-label>  \n      &lt;/ion-item>  \n    &lt;/ion-list>  \n     \n    &lt;div style=\"height: 50px;width:600px;\" text-right>  \n      &lt;ion-button (click)=\"ScrollToPoint(-300, -120)\">  \n        Scroll To Point Right  \n      &lt;/ion-button>  \n    &lt;/div>  \n     \n    &lt;ion-button (click)=\"ScrollToTop()\">  \n      Scroll To Top  \n    &lt;/ion-button>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, ViewChild } from '@angular/core';  \nimport { IonContent, } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  @ViewChild(IonContent, {static: false}) content: IonContent;  \n  dummyList: any;  \n  \n  constructor(  \n  ) {  \n    this.dummyList = &#91;  \n      {  \n        value: 'Himanshu',  \n      }, {  \n        value: 'Anubhav',  \n      }, {  \n        value: 'Abhishek',  \n      }, {  \n        value: 'Akshita',  \n      }, {  \n        value: 'Haseena',  \n      }, {  \n        value: 'Anubhav',  \n      }, {  \n        value: 'Harshita',  \n      }, {  \n        value: 'Anisha',  \n      }, {  \n        value: 'Haseena',  \n      }, {  \n        value: 'Anubhav',  \n      }, {  \n        value: 'Abhishek',  \n      }, {  \n        value: 'Anisha',  \n      }, {  \n        value: 'Haseena',  \n      }, {  \n        value: 'Akshita',  \n      }, {  \n        value: 'Abhishek',  \n      }, {  \n        value: 'Akshita',  \n      }, {  \n        value: 'Jyotika',  \n      }, {  \n        value: 'Anubhav',  \n      }, {  \n        value: 'Abhishek',  \n      }, {  \n        value: 'Anisha',  \n      }, {  \n        value: 'Haseena',  \n      }, {  \n        value: 'Anubhav',  \n      }, {  \n        value: 'Abhishek',  \n      }  \n    ];  \n  }  \n  logScrollStart() {  \n    console.log('logScrollStart : When Scroll Starts');  \n  }  \n  \n  logScrolling() {  \n    console.log('logScrolling : When Scrolling');  \n  }  \n  \n  logScrollEnd() {  \n    console.log('logScrollEnd : When Scroll Ends');  \n  }  \n  \n  ScrollToBottom() {  \n    this.content.scrollToBottom(1500);  \n  }  \n  \n  ScrollToTop() {  \n    this.content.scrollToTop(1500);  \n  }  \n  \n  ScrollToPoint(X, Y) {  \n    this.content.scrollToPoint(X, Y, 1500);  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When you execute the above Ionic app, it will give the following screen in your browser.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-content-2.png\" alt=\"\" class=\"wp-image-1061\"/></figure>\n\n\n\n<p>Now, if you click the &#8220;<strong>Scroll to Bottom</strong>&#8221; button, you will go immediately at the bottom of the screen, which you can see in the below screen. Next, when you click the &#8220;<strong>Scroll to Top</strong>&#8221; button, you will again reach on the top of the screen, which we can see in the below image.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-content-3.png\" alt=\"\" class=\"wp-image-1063\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic framework provides an &lt;ion-content&gt; element that serves as a container which wraps all the other elements that we want to create in the app. The content component allows an easy to use content area that contains some useful methods to control the&nbsp;scrollable&nbsp;area. In the Ionic app, there should be only one content component [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1757,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5603"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5603"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5603/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1757"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5603"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5603"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5603"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1069,
    "date": "2020-05-14T09:11:50",
    "date_gmt": "2020-05-14T09:11:50",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1069"
    },
    "modified": "2020-05-14T09:11:50",
    "modified_gmt": "2020-05-14T09:11:50",
    "slug": "datetime",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/datetime/",
    "title": {
      "rendered": "DateTime"
    },
    "content": {
      "rendered": "\n<p>The datetime component is used to present a&nbsp;<strong>picker interface</strong>, which makes it easy for the user to select&nbsp;<strong>date and time</strong>. The picker interface displays the scrollable columns which can be used to select years, months, days, hours, minutes, and second values. The Ionic datetime is similar to native datetime element. However, the Ionic datetime component is very easy to display date and time in a preferred format and helps in managing the datetime values.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>Here, we are going to see an example of&nbsp;<strong>&lt;ion-datetime&gt;</strong>&nbsp;component without any value or properties.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>DateTime&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;ion-list>  \n    &lt;ion-item>  \n      &lt;ion-label>Plain&lt;/ion-label>  \n      &lt;ion-datetime>&lt;/ion-datetime>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above code snippets, it will display the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output1.png\" alt=\"\" class=\"wp-image-1070\"/></figure>\n\n\n\n<p>Next, when you tap in the&nbsp;<strong>plain section</strong>, you will get the following screen. This screen shows your current system date information. As soon as you tap on the&nbsp;<strong>Done</strong>&nbsp;button, it will be placed into the plain section as like below format.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Plain    Sep 29, 2019  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output2.png\" alt=\"\" class=\"wp-image-1072\"/></figure>\n\n\n\n<p>The Ionic datetime uses the following terminologies.</p>\n\n\n\n<h3>Display and Picker Format</h3>\n\n\n\n<p>The datetime component displays the datetime values in two places. The first one is in the &lt;ion-datetime&gt; component, and the second is the picker interface, which is presented from the bottom of the page.</p>\n\n\n\n<h3>Display Format</h3>\n\n\n\n<p>This property specifies how a datetime&#8217;s value should be printed to the user within the datetime component. The &lt;ion-datetime&gt; element always display values relative to the user&#8217;s timezone.</p>\n\n\n\n<h3>Picker Format</h3>\n\n\n\n<p>This property specifies which column will be shown in the&nbsp;<strong>picker format</strong>, the order of the column, and which format should be used within each column. If you didn&#8217;t provide the picker format, it would use the value of&nbsp;<strong>displayFormat</strong>.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In this example, we have added the&nbsp;<strong>displayFormat</strong>&nbsp;and&nbsp;<strong>pickerFormat</strong>&nbsp;property inside the &lt;ion-datetime&gt; component. This property displays the datetime in the&nbsp;<strong>specific format</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>DateTime&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;ion-list>  \n    &lt;ion-item>  \n      &lt;ion-label>Specific Format&lt;/ion-label>  \n      &lt;ion-datetime displayFormat=\"YYYY\" placeholder=\"Select Year\">&lt;/ion-datetime>  \n    &lt;/ion-item>      \n    &lt;ion-item>  \n      &lt;ion-label>Start Time&lt;/ion-label>  \n      &lt;ion-datetime displayFormat=\"h:mm A\" pickerFormat=\"h:mm A\" value=\"1990-02-19T07:43Z\">&lt;/ion-datetime>  \n    &lt;/ion-item>  \n    &lt;ion-item>  \n      &lt;ion-label>Ends&lt;/ion-label>  \n      &lt;ion-datetime value=\"1990-02-20\" placeholder=\"Select Date\">&lt;/ion-datetime>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content></code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above code snippet, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output3.png\" alt=\"\" class=\"wp-image-1073\"/></figure>\n\n\n\n<p>Now, taps the&nbsp;<strong>Specific Format</strong>&nbsp;section, you will get the following screen. Here, you can select your desired year. As soon as you click on the&nbsp;<strong>Done</strong>&nbsp;button, it will be placed into the Specific Format section.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output4.png\" alt=\"\" class=\"wp-image-1074\"/></figure>\n\n\n\n<h3>Datetime data</h3>\n\n\n\n<p>The handling of datetime values within JavaScript and HTML has always been a challenge. But, handling datetime in Ionic allows the developers to format datetime values within the input easily. It gives the simple datetime picker format for great user experience.</p>\n\n\n\n<h3>Max and Min datetimes</h3>\n\n\n\n<p>The dates are infinite in either direction, by default, the&nbsp;<strong>maximum</strong>&nbsp;date is the&nbsp;<strong>end</strong>&nbsp;of the current year, and the&nbsp;<strong>minimum</strong>&nbsp;date is the&nbsp;<strong>beginning</strong>&nbsp;of the year that was 100 years ago. You can customize the maximum and minimum datetime values by using the&nbsp;<strong>max</strong>&nbsp;and&nbsp;<strong>min</strong>&nbsp;properties. For example, if we set the min properties to 2015 and max properties to 2020-12-31, then the datetime component will restrict the selection between the beginning of 2015 and 31st December 2020.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>This example explains the use of&nbsp;<strong>disabled</strong>,&nbsp;<strong>min</strong>, and&nbsp;<strong>max</strong>&nbsp;properties with the &lt;ion-datetime&gt; component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>DateTime&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;ion-list>  \n    &lt;ion-item>  \n      &lt;ion-label>Disable&lt;/ion-label>  \n      &lt;ion-datetime id=\"dynamicDisabled\" displayFormat=\"MM DD YY\" disabled value=\"2010-01-26\">&lt;/ion-datetime>  \n    &lt;/ion-item>   \n    &lt;ion-item>  \n      &lt;ion-label>Max and Min&lt;/ion-label>  \n      &lt;ion-datetime min=\"1990\" max=\"2020\" placeholder=\"Select Year\">&lt;/ion-datetime>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output5.png\" alt=\"\" class=\"wp-image-1075\"/></figure>\n\n\n\n<h3>CustomPickerOptions</h3>\n\n\n\n<p>The custom Picker Options property allows you to create some&nbsp;<strong>custom buttons</strong>. The following example explains how custom picker options work with &lt;ion-datetime&gt; component.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>DateTime&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;ion-list>   \n    &lt;ion-item>  \n      &lt;ion-label>CustomPicker&lt;/ion-label>  \n      &lt;ion-datetime &#91;pickerOptions]=\"customPickerOptions\" placeholder=\"Custom Options\" displayFormat=\"YYYY\">&lt;/ion-datetime>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>In this page, we have created the custom buttons&nbsp;<strong>Save</strong>&nbsp;and&nbsp;<strong>Log</strong>&nbsp;by using custom picker options.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  customPickerOptions: any;  \n  constructor() {  \n    this.customPickerOptions = {  \n      buttons: &#91;{  \n        text: 'Save',  \n        handler: () => console.log ('Clicked Save')  \n    }, {  \n      text: 'Log',  \n      handler: () => {  \n        console.log ('Clicked Log. Do not Dismiss.');  \n        return false;  \n      }  \n    }]  \n  };  \n}  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above code snippets, it will give the following screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output6.png\" alt=\"\" class=\"wp-image-1076\"/></figure>\n\n\n\n<p>Next, click on the Custom Picker section, it will give the following screen. Here, when you click on the&nbsp;<strong>Save button</strong>, the data will be saved, and the screen looks like the above image. Whereas when you click on the&nbsp;<strong>Log button</strong>, the page does not dismiss, and you will get the message:&nbsp;<strong>Clicked Log. Do not dismiss</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output7.png\" alt=\"\" class=\"wp-image-1077\"/></figure>\n\n\n\n<h3>Custom Locale</h3>\n\n\n\n<p>The custom Locale property species the&nbsp;<strong>custom short names</strong>&nbsp;for your month. You can see the following example to understand how custom locale works with &lt;ion-datetime&gt; component.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>DateTime&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;ion-list>   \n    &lt;ion-item>  \n      &lt;ion-label>Custom Locale&lt;/ion-label>  \n      &lt;ion-datetime value=\"1995-04-15\" min=\"1990-02\" max=\"2000\"  \n      &#91;dayShortNames]=\"customDayShortNames\" displayFormat=\"DDD. MMM DD, YY\"  \n      monthShortNames=\"jan, feb, mar, apr, mai, jun, jul, aug, sep, okt, nov, des\">&lt;/ion-datetime>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  customDayShortNames = &#91; 's\\u00f8n', 'man', 'tir', 'ons', 'tos', 'fre', 'l\\u00f84'];  \n}</code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output8.png\" alt=\"\" class=\"wp-image-1082\"/></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output9.png\" alt=\"\" class=\"wp-image-1083\"/></figure>\n\n\n\n<h3>Specific Days/Months/Year</h3>\n\n\n\n<p>The &lt;ion-datetime&gt; component also allows you to select the specific days, months, and years by setting the properties monthValues, dayValues, and yearValues. You can see the following example to understand how it can work with &lt;ion-datetime&gt; component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>DateTime&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;ion-list>   \n    &lt;ion-item>  \n      &lt;ion-label>Specific day/month/year&lt;/ion-label>  \n      &lt;ion-datetime monthValues= \"6,7,8\" yearValues=\"2017,2018\"  \n      dayValues= \"01,02,03,04,05,06,07,08,09,10,11,12,13,14,15\"   \n      displayFormat= \"DD/MM/YYYY\" > &lt;/ion-datetime>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>In the below output, you can scroll the specific columns up and down to select the specific days, months, and years.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-datetime-output10.png\" alt=\"\" class=\"wp-image-1085\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The datetime component is used to present a&nbsp;picker interface, which makes it easy for the user to select&nbsp;date and time. The picker interface displays the scrollable columns which can be used to select years, months, days, hours, minutes, and second values. The Ionic datetime is similar to native datetime element. However, the Ionic datetime component [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1758,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1069"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1069"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1069/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1758"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1069"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1069"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1069"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1087,
    "date": "2020-05-14T09:15:48",
    "date_gmt": "2020-05-14T09:15:48",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1087"
    },
    "modified": "2020-05-14T09:15:48",
    "modified_gmt": "2020-05-14T09:15:48",
    "slug": "fab-button",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/fab-button/",
    "title": {
      "rendered": "FAB Button"
    },
    "content": {
      "rendered": "\n<p>Ionic FAB are&nbsp;<strong><em>Floating Action Buttons</em></strong>&nbsp;that acts as a container element. They are material design components that can contain one or more fab buttons. It should be placed in a&nbsp;<strong>fixed position</strong>&nbsp;so that it does not scroll with the content. The FAB must contain one main&nbsp;<strong>fab-button</strong>. It also includes a fab-lists, which contains related buttons that show when the main fab-button is pressed/clicked. It also allows to contain several fab list elements with different side values. The FAB buttons are shaped like a&nbsp;<strong>circle</strong>. We can access the floating action button by using a standard&nbsp;<strong>&lt;ion-fab&gt;</strong>&nbsp;component.</p>\n\n\n\n<p>The idea behind having a FAB button is used as a call to the promoted action on a page. For example, if you have a list of items and you want to add one more item, then the add button can be used as a Floating Action Button.</p>\n\n\n\n<p>By default, the floating action button is fixed at the right bottom corner. But, we can also configure the FAB buttons to provide the default action within the view. For example, it can be fixed at a specific position, or it can be a scroll with the view, etc.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example explains the working of the FAB button in an Ionic application. Here, we are going to take&nbsp;<strong>three</strong>&nbsp;&lt;ion-fab-button&gt; inside the &lt;ion-fab&gt; component and add the&nbsp;<strong>icons</strong>&nbsp;for all of these buttons.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic FAB&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n   &lt;!-- fab placed to the top end -->  \n   &lt;ion-fab vertical=\"top\" horizontal=\"end\" slot=\"fixed\">  \n    &lt;ion-fab-button>  \n      &lt;ion-icon name=\"add\">&lt;/ion-icon>  \n    &lt;/ion-fab-button>  \n  &lt;/ion-fab>  \n  \n  &lt;!-- fab placed to the bottom end -->  \n  &lt;ion-fab vertical=\"bottom\" horizontal=\"end\" slot=\"fixed\">  \n    &lt;ion-fab-button>  \n      &lt;ion-icon name=\"arrow-dropleft\">&lt;/ion-icon>  \n    &lt;/ion-fab-button>  \n  &lt;/ion-fab>  \n  \n   &lt;!-- fab placed to the (vertical) center and start -->  \n   &lt;ion-fab vertical=\"center\" horizontal=\"start\" slot=\"fixed\">  \n    &lt;ion-fab-button>  \n      &lt;ion-icon name=\"share\">&lt;/ion-icon>  \n    &lt;/ion-fab-button>  \n  &lt;/ion-fab>  \n  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above Ionic app, you will get the following screen. In this screen, you can see that the three FAB buttons are displayed at the&nbsp;<strong>top-end, bottom-end,</strong>&nbsp;and&nbsp;<strong>center-start</strong>&nbsp;positions.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-fab-button.png\" alt=\"\" class=\"wp-image-1088\"/></figure>\n\n\n\n<h2>Ion-fab-list</h2>\n\n\n\n<p>It contains multiple fab buttons. These fab buttons contain the action related to the main fab button and are&nbsp;<strong>flung</strong>&nbsp;out on pressed or click. The button can also specify to appear at the specific position by setting the&nbsp;<strong>side property</strong>&nbsp;start, end, top, and bottom. The below example explains how &lt;ion-fab-list&gt; work with &lt;ion-fab-button&gt;.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In this example, we are going to create a list that contains several FAB buttons. The fab buttons have different icons, such as icons for WhatsApp, Twitter, Facebook, and Instagram. These fab buttons contain the action related to the main fab button and are flung out on pressed or click.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic FAB&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;ion-fab vertical=\"center\" horizontal=\"center\" slot=\"fixed\">  \n    &lt;ion-fab-button>  \n      &lt;ion-icon name=\"share\">&lt;/ion-icon>  \n    &lt;/ion-fab-button>  \n    &lt;ion-fab-list side=\"top\">  \n      &lt;ion-fab-button>&lt;ion-icon name=\"logo-whatsapp\">&lt;/ion-icon>&lt;/ion-fab-button>  \n    &lt;/ion-fab-list>  \n    &lt;ion-fab-list side=\"bottom\">  \n      &lt;ion-fab-button>&lt;ion-icon name=\"logo-instagram\">&lt;/ion-icon>&lt;/ion-fab-button>  \n    &lt;/ion-fab-list>  \n    &lt;ion-fab-list side=\"start\">  \n      &lt;ion-fab-button>&lt;ion-icon name=\"logo-twitter\">&lt;/ion-icon>&lt;/ion-fab-button>  \n    &lt;/ion-fab-list>  \n    &lt;ion-fab-list side=\"end\">  \n      &lt;ion-fab-button>&lt;ion-icon name=\"logo-facebook\">&lt;/ion-icon>&lt;/ion-fab-button>  \n    &lt;/ion-fab-list>  \n  &lt;/ion-fab>  \n  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above Ionic app, it will give the following screen. Here, you will see the&nbsp;<strong>share button icon</strong>, which is flung out on pressed or click.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-fab-button2.png\" alt=\"\" class=\"wp-image-1089\"/></figure>\n\n\n\n<p>When the share button icon flung out on pressed or click, you will get the following screen. Here, you can see the icons for Facebook, Instagram, WhatsApp, and Twitter.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-fab-button3.png\" alt=\"\" class=\"wp-image-1090\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Ionic FAB are&nbsp;Floating Action Buttons&nbsp;that acts as a container element. They are material design components that can contain one or more fab buttons. It should be placed in a&nbsp;fixed position&nbsp;so that it does not scroll with the content. The FAB must contain one main&nbsp;fab-button. It also includes a fab-lists, which contains related buttons that show [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1759,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1087"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1087"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1087/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1759"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1087"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1087"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1087"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1092,
    "date": "2020-05-14T09:21:42",
    "date_gmt": "2020-05-14T09:21:42",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1092"
    },
    "modified": "2020-05-14T09:21:42",
    "modified_gmt": "2020-05-14T09:21:42",
    "slug": "grid",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/grid/",
    "title": {
      "rendered": "Grid"
    },
    "content": {
      "rendered": "\n<p>The Ionic grid system is a powerful&nbsp;<strong>mobile-based flexbox system</strong>&nbsp;for building a custom layout. A flexbox is a CSS feature which is supported by all devices that Ionic supports. The Ionic grid is mainly composed of three units which are a&nbsp;<strong>grid, rows</strong>, and&nbsp;<strong>columns</strong>. It allows you to choose as many rows and columns you want. They can automatically adjust the size to accommodate the available space, although it can be changed according to your needs. The Ionic grid is made up of&nbsp;<strong>12 column</strong>&nbsp;layout with different breakpoints based on the screen size. We can also customize the number of columns by using CSS.</p>\n\n\n\n<h2>Grid Column</h2>\n\n\n\n<p>The grid columns are a&nbsp;<strong>cellular</strong>&nbsp;component that goes inside of a row. All the content of a grid goes inside of a column.</p>\n\n\n\n<h2>Grid Rows</h2>\n\n\n\n<p>The grid rows are&nbsp;<strong>horizontal</strong>&nbsp;components that contain a varying number of columns. It ensures the columns are positioned properly.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>Here, we are creating a simple grid which shows you the use of rows and columns.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Grid Example  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content class=\"padding\" color=\"light\">  \n  &lt;ion-grid>  \n    &lt;ion-row>  \n      &lt;ion-col>ion-col 1&lt;/ion-col>  \n      &lt;ion-col>ion-col 2&lt;/ion-col>  \n      &lt;ion-col>ion-col 3&lt;/ion-col>  \n    &lt;/ion-row>  \n    &lt;ion-row>  \n      &lt;ion-col>ion-col 4&lt;/ion-col>  \n      &lt;ion-col>ion-col 5&lt;/ion-col>  \n    &lt;/ion-row>  \n  &lt;/ion-grid>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When we execute the app, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-grid.png\" alt=\"\" class=\"wp-image-1094\"/></figure>\n\n\n\n<h2>Column Size</h2>\n\n\n\n<p>If you do not want to leave the column sizes adjusted automatically, you can choose the&nbsp;<strong>size attribute</strong>&nbsp;to set the column size according to your need. The following example helps us to understand the use of size attribute accurately.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<blockquote class=\"wp-block-quote\"><p>Note: This example will have borders applied to the column to display it in a way that is easy to understand.</p></blockquote>\n\n\n\n<p>Here, the first row uses the&nbsp;<strong>customized size</strong>, whereas the second row uses the&nbsp;<strong>default</strong>&nbsp;column size.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Grid Example  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content class=\"padding\" color=\"light\">  \n  &lt;ion-grid>  \n    &lt;ion-row>  \n      &lt;ion-col size=\"5\">col 1&lt;/ion-col>  \n      &lt;ion-col >col 2&lt;/ion-col>  \n      &lt;ion-col size=\"3\">col 3&lt;/ion-col>  \n    &lt;/ion-row>  \n    &lt;ion-row>  \n      &lt;ion-col>col 4&lt;/ion-col>  \n      &lt;ion-col>col 5&lt;/ion-col>  \n    &lt;/ion-row>  \n  &lt;/ion-grid>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-grid-1.png\" alt=\"\" class=\"wp-image-1097\"/></figure>\n\n\n\n<h2>Reordering Columns</h2>\n\n\n\n<p>You can reorder the grid columns by using the two attributes, which are as follows.</p>\n\n\n\n<ol><li>Offset</li><li>Push and Pull</li></ol>\n\n\n\n<p><strong>Offset</strong></p>\n\n\n\n<p>This property is used to&nbsp;<strong>move</strong>&nbsp;the column to the&nbsp;<strong>right side</strong>&nbsp;of the specified column number. It increases the left margin of the column by the number of the specified column.</p>\n\n\n\n<p><strong>Push and pop</strong></p>\n\n\n\n<p>The push and pull properties adjust the&nbsp;<strong>left</strong>&nbsp;and&nbsp;<strong>right</strong>&nbsp;of the column by the specified number of columns.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>The following example clearly understands the use of&nbsp;<strong>offset</strong>&nbsp;and&nbsp;<strong>push and pull</strong>&nbsp;properties.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Grid Example  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content class=\"padding\" color=\"light\">  \n  &lt;ion-grid>  \n    &lt;ion-row>  \n      &lt;ion-col size=\"3\">  \n        &lt;div>  \n          1 of 2  \n        &lt;/div>  \n      &lt;/ion-col>  \n      &lt;ion-col size=\"3\" offset=\"4\">  \n        &lt;div>  \n          2 of 2  \n        &lt;/div>  \n      &lt;/ion-col>  \n    &lt;/ion-row>  \n    &lt;ion-row>  \n      &lt;ion-col size=\"9\" push=\"3\">  \n        &lt;div>  \n          1 of 2  \n        &lt;/div>  \n      &lt;/ion-col>  \n      &lt;ion-col size=\"3\" pull=\"9\">  \n        &lt;div>  \n          2 of 2  \n        &lt;/div>  \n      &lt;/ion-col>  \n    &lt;/ion-row>  \n  &lt;/ion-grid>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When you execute the above Ionic app, you will get the following output. Here, the first column uses the offset property, and the second column uses the push and pull property.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-grid-2.png\" alt=\"\" class=\"wp-image-1099\"/></figure>\n\n\n\n<h2>Column Alignment</h2>\n\n\n\n<p>Ionic grid allows you to use two types of column alignments, which are as follows.</p>\n\n\n\n<ol><li>Vertical Alignment</li><li>Horizontal Alignment</li></ol>\n\n\n\n<p><strong>Vertical Alignment</strong></p>\n\n\n\n<p>The grid system allows multiple ways to align content vertically. It aligned columns inside of a row by adding different classes to the row. These different classes are:</p>\n\n\n\n<ul><li>ion-align-items-start</li><li>ion-align-items-center</li><li>ion-align-items-end</li></ul>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Grid Example  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content class=\"padding\" color=\"light\">  \n  &lt;ion-grid>  \n    &lt;ion-row class=\"ion-align-items-start\">  \n      &lt;ion-col>ion-col&lt;/ion-col>  \n      &lt;ion-col>ion-col&lt;/ion-col>  \n      &lt;ion-col>  \n        ion-col  \n        &lt;br>#  \n        &lt;br>#  \n      &lt;/ion-col>  \n    &lt;/ion-row>  \n    &lt;ion-row class=\"ion-align-items-center\">  \n      &lt;ion-col>ion-col&lt;/ion-col>  \n      &lt;ion-col>ion-col&lt;/ion-col>  \n      &lt;ion-col>  \n        ion-col  \n        &lt;br>#  \n        &lt;br>#  \n      &lt;/ion-col>  \n    &lt;/ion-row>  \n    &lt;ion-row class=\"ion-align-items-end\">  \n      &lt;ion-col>ion-col&lt;/ion-col>  \n      &lt;ion-col>ion-col&lt;/ion-col>  \n      &lt;ion-col>  \n        ion-col  \n        &lt;br>#  \n        &lt;br>#  \n      &lt;/ion-col>  \n    &lt;/ion-row>  \n  &lt;/ion-grid>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>In the below output, the first row aligned columns to start, the second row aligned to center and third-row aligned to end.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-grid-3.png\" alt=\"\" class=\"wp-image-1101\"/></figure>\n\n\n\n<p><strong>Horizontal Alignment</strong></p>\n\n\n\n<p>The grid system allows multiple ways to align content horizontally. It aligned columns inside of a row by adding different classes to the row. These different classes are:</p>\n\n\n\n<ul><li>ion-justify-content-start</li><li>ion-justify-content-center</li><li>ion-justify-content-end</li><li>ion-justify-content-around</li><li>ion-justify-content-between</li></ul>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Grid Example  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content class=\"padding\" color=\"light\">  \n    &lt;ion-grid>  \n        &lt;ion-row class=\"ion-justify-content-start\">  \n          &lt;ion-col size=\"3\">  \n            &lt;div>1 of 2&lt;/div>  \n          &lt;/ion-col>  \n          &lt;ion-col size=\"3\">  \n            &lt;div>  \n              2 of 2  \n            &lt;/div>  \n          &lt;/ion-col>  \n        &lt;/ion-row>  \n        \n        &lt;ion-row class=\"ion-justify-content-center\">  \n          &lt;ion-col size=\"3\">  \n            &lt;div>1 of 2&lt;/div>  \n          &lt;/ion-col>  \n          &lt;ion-col size=\"3\">  \n            &lt;div>2 of 2&lt;/div>  \n          &lt;/ion-col>  \n        &lt;/ion-row>  \n        \n        &lt;ion-row class=\"ion-justify-content-end\">  \n          &lt;ion-col size=\"3\">  \n            &lt;div>1 of 2&lt;/div>  \n          &lt;/ion-col>  \n          &lt;ion-col size=\"3\">  \n            &lt;div>2 of 2&lt;/div>  \n          &lt;/ion-col>  \n        &lt;/ion-row>  \n        \n        &lt;ion-row class=\"ion-justify-content-around\">  \n          &lt;ion-col size=\"3\">  \n            &lt;div>1 of 2&lt;/div>  \n          &lt;/ion-col>  \n          &lt;ion-col size=\"3\">  \n            &lt;div>2 of 2&lt;/div>  \n          &lt;/ion-col>  \n        &lt;/ion-row>  \n        \n        &lt;ion-row class=\"ion-justify-content-between\">  \n          &lt;ion-col size=\"3\">  \n            &lt;div>1 of 2&lt;/div>  \n          &lt;/ion-col>  \n          &lt;ion-col size=\"3\">  \n            &lt;div>2 of 2&lt;/div>  \n          &lt;/ion-col>  \n        &lt;/ion-row>  \n      &lt;/ion-grid>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When you run the Ionic app, it gives the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-grid-4.png\" alt=\"\" class=\"wp-image-1103\"/></figure>\n\n\n\n<h2>Grid Size</h2>\n\n\n\n<p>By default, the grid takes&nbsp;<strong>100 % width</strong>&nbsp;of the screen. If you need to set the maximum width based on the screen size, add the&nbsp;<strong>fixed</strong>&nbsp;attribute in the&nbsp;<strong>&lt;ion-grid&gt;</strong>&nbsp;element. The below table shows the different grid sizes.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Name</th><th>Value</th><th>Description</th></tr><tr><td>xs</td><td>100%</td><td>It does not set the grid width for xs screen.</td></tr><tr><td>sm</td><td>540px</td><td>It sets the grid width to 540px when (min-width: 576px).</td></tr><tr><td>md</td><td>720px</td><td>It sets the grid width to 720px when (min-width: 768px).</td></tr><tr><td>lg</td><td>960px</td><td>It sets the grid width to 960px when (min-width: 992px).</td></tr><tr><td>xl</td><td>1140px</td><td>It sets the grid width to 1140px when (min-width: 1200px).</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic grid system is a powerful&nbsp;mobile-based flexbox system&nbsp;for building a custom layout. A flexbox is a CSS feature which is supported by all devices that Ionic supports. The Ionic grid is mainly composed of three units which are a&nbsp;grid, rows, and&nbsp;columns. It allows you to choose as many rows and columns you want. They [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1760,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1092"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1092"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1092/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1760"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1092"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1092"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1092"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1105,
    "date": "2020-05-14T09:24:51",
    "date_gmt": "2020-05-14T09:24:51",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1105"
    },
    "modified": "2020-05-14T09:24:51",
    "modified_gmt": "2020-05-14T09:24:51",
    "slug": "infinite-scroll",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/infinite-scroll/",
    "title": {
      "rendered": "Infinite Scroll"
    },
    "content": {
      "rendered": "\n<p>The infinite scroll component is used to call an action to be performed when the user scrolls a specified&nbsp;<strong>distance</strong>&nbsp;from the&nbsp;<strong>top</strong>&nbsp;or&nbsp;<strong>bottom</strong>&nbsp;of the page. It is very useful when we have to show a large set of data at once.</p>\n\n\n\n<p>Every mobile application needs a way to show the huge set of data in a lesser number of clicks. In that case, the infinite scroll plays an essential role for them. The infinite scroll component works like we load&nbsp;<strong>ten</strong>&nbsp;items on a page. Now, when the user scrolls those items and reaches close to the bottom, it makes a new&nbsp;<strong>data request</strong>. This request gets the next set of records items that will be added to the existing items. This process is&nbsp;<strong>repeating</strong>&nbsp;until the new data is not found in chunks as user scrolls.</p>\n\n\n\n<p>You can understand it more clearly when you scroll the Facebook, Instagram, or Twitter news feed area. The page always loads new posts, and you will see a&nbsp;<strong>loading spinner</strong>&nbsp;on the bottom of the screen.</p>\n\n\n\n<p>You can access the infinite scroll by using the standard&nbsp;<strong>&lt;ion-infinite-scroll&gt;</strong>&nbsp;and&nbsp;<strong>&lt;ion-infinite-scroll-content&gt;</strong>&nbsp;component. The expression&nbsp;<strong>(ionInfinite) = &#8220;loadData($event)&#8221;</strong>&nbsp;assigned in the &lt;ion-infinite-scroll&gt; is called when the user reaches close to the defined distance. When it finished all tasks, it will call the&nbsp;<strong>complete()</strong>&nbsp;method on the infinite scroll instance. The&nbsp;<strong>threshold</strong>&nbsp;properties tell the distance from the bottom of the content to call the infinite output content when scrolled.</p>\n\n\n\n<h2>Infinite Scroll Content</h2>\n\n\n\n<p>It is the child component of the&nbsp;component, which is used to display content. It also changes the look of the scrolling, which depends on the infinite scroll?s state. It contains the options for scrolling like&nbsp;<strong>loadingSpinner</strong>,&nbsp;<strong>loadingText</strong>, etc.</p>\n\n\n\n<p>The following example explains how the Ionic Scroll component works in the application.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<p>This HTML page calls the event to display the infinite scrolling content. Here, the expression&nbsp;<strong>[disabled] = &#8220;numTimesLeft &lt;= 0&#8221;</strong>&nbsp;is used stop the scrolling. We also customize the types of loading spinner and loading message, which shows up when the method is called, and data loading is in process.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Infinite Scroll&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;ion-list>  \n    &lt;ion-item *ngFor=\"let item of items\"> {{item}} &lt;/ion-item>  \n  &lt;/ion-list>  \n  &lt;ion-infinite-scroll threshold=\"100px\" (ionInfinite)=\"loadData($event)\" &#91;disabled]=\"numTimesLeft &lt;= 0\">  \n    &lt;ion-infinite-scroll-content  \n      loadingSpinner=\"bubbles\"  \n      loadingText=\"Loading more data...\">  \n    &lt;/ion-infinite-scroll-content>  \n  &lt;/ion-infinite-scroll>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>In this file, we are going to use&nbsp;<strong>for loop</strong>&nbsp;method to add dummy data on page load. The&nbsp;<strong>loadData()</strong>&nbsp;method is called when the list is reached at the bottom of a page. And last, the complete() method is called that will stop the loader.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component} from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  items = &#91;];  \n  numTimesLeft = 5;  \n  constructor() {  \n    this.addMoreItems();  \n  }  \n  loadData(event) {  \n    setTimeout(() => {  \n      console.log('Done');  \n      this.addMoreItems();  \n      this.numTimesLeft -= 1;  \n      event.target.complete();  \n    }, 500);  \n  }  \n  addMoreItems() {  \n    for (let i = 0; i &lt; 10; i++) {  \n      this.items.push(i);  \n    }  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When you run the application, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-infinite-scroll.png\" alt=\"\" class=\"wp-image-1106\"/></figure>\n\n\n\n<p>Now, when the list reached the bottom of a page, the page is repeating until the new data is not found in chunks as user scrolls.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-infinite-scroll-2.png\" alt=\"\" class=\"wp-image-1107\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The infinite scroll component is used to call an action to be performed when the user scrolls a specified&nbsp;distance&nbsp;from the&nbsp;top&nbsp;or&nbsp;bottom&nbsp;of the page. It is very useful when we have to show a large set of data at once. Every mobile application needs a way to show the huge set of data in a lesser number [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1761,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1105"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1105"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1105/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1761"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1105"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1105"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1105"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1109,
    "date": "2020-05-14T09:29:22",
    "date_gmt": "2020-05-14T09:29:22",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1109"
    },
    "modified": "2020-05-14T09:29:22",
    "modified_gmt": "2020-05-14T09:29:22",
    "slug": "inputs",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/inputs/",
    "title": {
      "rendered": "Inputs"
    },
    "content": {
      "rendered": "\n<p>Ionic inputs are essential components which are used for collecting and handling user input securely. It is a wrapper to the HTML input element which contains custom styling and additional functionality. It works similar to HTML input elements, but works great on desktop devices, and can be integrated with the keyboard on mobile devices.</p>\n\n\n\n<p>The Ionic inputs accepts only&nbsp;<strong>text type</strong>&nbsp;inputs such as &#8220;text&#8221;, &#8220;password&#8221;, &#8220;number&#8221;, &#8220;email&#8221;, &#8220;search&#8221;, &#8220;tel&#8221;, and &#8220;URL&#8221;. It also supports all standard text type input events, including key-up, keypress, key-down, and more.</p>\n\n\n\n<p>There are many attributes available that can be used to style input fields. These are listed below.</p>\n\n\n\n<ul><li>Fixed Inline Labels</li><li>Floating Labels</li><li>Inline Labels</li><li>Placeholder Labels</li><li>Stacked Labels</li></ul>\n\n\n\n<h3>Fixed Inline Labels</h3>\n\n\n\n<p>It is used to place a label to the left of the input element. When the text is entered, the label does not hide. You can also use placeholder text in conjunction with a fixed label. You can add the&nbsp;<strong>fixed</strong>&nbsp;attribute in &lt;ion-label&gt; element by using the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-label position=\"fixed\">Username&lt;/ion-label>  </code></pre>\n\n\n\n<h3>Floating Labels</h3>\n\n\n\n<p>They are the labels which&nbsp;<strong>animate or float up</strong>&nbsp;when the inputs are selected. You can add the floating attribute in &lt;ion-label&gt; element by using the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-label position=\"floating\">Username&lt;/ion-label>  </code></pre>\n\n\n\n<h3>Inline Labels</h3>\n\n\n\n<p>If the &lt;ion-label&gt; does not have any attributes, it is known as an inline label. It does not hide when text is entered. The following syntax explains the inline labels.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-label>Username&lt;/ion-label>  </code></pre>\n\n\n\n<h3>Placeholder Labels</h3>\n\n\n\n<p>A placeholder holds the default place as a&nbsp;<strong>hint or caption</strong>. When you entered the text into the input, the placeholder label is automatically hidden. You can add the placeholder attribute in &lt;ion-label&gt; element by using the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-input type=\"text\" placeholder=\"Username\">&lt;/ion-input>  </code></pre>\n\n\n\n<h3>Stacked Labels</h3>\n\n\n\n<p>This type of label always appears on the top of the input. You can use placeholder text in conjunction with the stacked label. You can add the stacked attribute in &lt;ion-label&gt; element by the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-label position=\"stacked\">Username&lt;/ion-label>  </code></pre>\n\n\n\n<p>The following example shows the different types of inputs used in the Ionic framework.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      IonicInputs  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"padding\" color=\"light\">  \n  &lt;div>  \n    &lt;!-- Default Input -->  \n    &lt;ion-input>&lt;/ion-input>  \n  \n    &lt;!-- Input with value -->  \n    &lt;ion-input value=\"custom\">&lt;/ion-input>  \n  \n    &lt;!-- Input with placeholder -->  \n    &lt;ion-input placeholder=\"Enter Input\">&lt;/ion-input>  \n  \n    &lt;!-- Number type input -->  \n    &lt;ion-input type=\"number\" value=\"1100\">&lt;/ion-input>  \n  \n    &lt;!-- Input with clear button when the value is available -->  \n    &lt;ion-input clearInput value=\"clear me\">&lt;/ion-input>  \n  \n    &lt;!-- Disabled input -->  \n    &lt;ion-input value=\"Disabled\" disabled>&lt;/ion-input>  \n  \n    &lt;!-- Readonly input -->  \n    &lt;ion-input value=\"Readonly\" readonly>&lt;/ion-input>  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-inputs-ouput.png\" alt=\"\" class=\"wp-image-1110\"/></figure>\n\n\n\n<h2>Inputs in List</h2>\n\n\n\n<p>The following example helps to understand how you can use inputs elements with the list component.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      IonicInputs  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"padding\" color=\"light\" fullscreen>  \n  &lt;ion-list>  \n    &lt;ion-item>  \n      &lt;ion-label>Username&lt;/ion-label>  \n      &lt;ion-input type=\"text\">&lt;/ion-input>  \n    &lt;/ion-item>  \n        \n    &lt;ion-item>  \n      &lt;ion-label>Password&lt;/ion-label>  \n      &lt;ion-input type=\"password\">&lt;/ion-input>  \n    &lt;/ion-item>   \n  &lt;/ion-list>  \n        \n  &lt;div padding>  \n    &lt;ion-button color=\"primary\" expand=\"block\">Sign In&lt;/ion-button>  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-inputs-ouput2.png\" alt=\"\" class=\"wp-image-1111\"/></figure>\n\n\n\n<h2>Multiline Text Input</h2>\n\n\n\n<p>If you want to write multiline text input, the&nbsp;<strong>&lt;ion-textarea&gt;</strong>&nbsp;component can be used. This component allows an Ionic to handle the user experience and interactivity of the textarea better. Unlike the native text area element, the&nbsp;<strong>&lt;ion-textarea&gt;</strong>&nbsp;does not support loading its value from the inner content. You can set the textarea value in the&nbsp;<strong>value attribute</strong>.</p>\n\n\n\n<p>The &lt;ion-textarea&gt; component accepts all the native textarea attributes in addition to the Ionic properties.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example shows the use of &lt;ion-textarea&gt; component in the Ionic application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      IonicInputs  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"padding\" color=\"light\" fullscreen>  \n  &lt;!-- Textarea in an item with a placeholder -->  \n  &lt;ion-item>  \n    &lt;ion-textarea placeholder=\"Enter information here...\">&lt;/ion-textarea>  \n  &lt;/ion-item>  \n  \n  &lt;!-- Disabled and readonly textarea in an item with a stacked label -->  \n  &lt;ion-item>  \n    &lt;ion-label position=\"stacked\">Summary&lt;/ion-label>  \n    &lt;ion-textarea disabled readonly value=\"Ionic is a cross-platform mobile apps framework.\">  \n    &lt;/ion-textarea>  \n  &lt;/ion-item>  \n  \n  &lt;!-- Textarea that clears the value on edit -->  \n  &lt;ion-item>  \n    &lt;ion-label>Comment&lt;/ion-label>  \n    &lt;ion-textarea clearOnEdit=\"true\">&lt;/ion-textarea>  \n  &lt;/ion-item>  \n  \n  &lt;!-- Textarea with custom number of rows and cols -->  \n  &lt;ion-item>  \n    &lt;ion-label>Notes&lt;/ion-label>  \n    &lt;ion-textarea rows=\"5\" cols=\"10\" placeholder=\"Enter some notes here...\">&lt;/ion-textarea>  \n  &lt;/ion-item>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-inputs-ouput3.png\" alt=\"\" class=\"wp-image-1112\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Ionic inputs are essential components which are used for collecting and handling user input securely. It is a wrapper to the HTML input element which contains custom styling and additional functionality. It works similar to HTML input elements, but works great on desktop devices, and can be integrated with the keyboard on mobile devices. The [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1762,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1109"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1109"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1109/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1762"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1109"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1109"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1109"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1115,
    "date": "2020-05-14T09:59:51",
    "date_gmt": "2020-05-14T09:59:51",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1115"
    },
    "modified": "2020-05-14T09:59:51",
    "modified_gmt": "2020-05-14T09:59:51",
    "slug": "list-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/list-2/",
    "title": {
      "rendered": "List"
    },
    "content": {
      "rendered": "\n<p>Lists are the most popular elements of any web or mobile application. They are made up of multiple rows of items which includes text, buttons, toggles, icons, thumbnails, and many more. We can use it for displaying various information such as menus, tabs, or to break the monotony of pure text files.</p>\n\n\n\n<p>The Ionic lists usually contain items with similar data content, such as images and text. It supports several interactions, including swiping items, dragging to reorder items within the list, and deleting items. We can access the lists by using a standard&nbsp;<strong>&lt;ion-list&gt;&lt;/ion-list&gt;</strong>&nbsp;element.</p>\n\n\n\n<h2>Creating Lists</h2>\n\n\n\n<p>We can create lists by using the following syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-content>  \n    &lt;ion-list>  \n      &lt;ion-item>&lt;/ion-item>  \n      &lt;ion-item>&lt;/ion-item>  \n      &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p>The Ionic framework provides different types of lists, which are as follows.</p>\n\n\n\n<ul><li>List Headers</li><li>Inset List</li><li>Icon List</li><li>List Dividers</li><li>Avatar List</li><li>Thumbnail List</li><li>Sliding List</li><li>Multi-line List</li></ul>\n\n\n\n<h3>List Header</h3>\n\n\n\n<p>Each list can include a header at the top of the list. We can include a list header by using the &lt;ion-list-header&gt; element.</p>\n\n\n\n<h3>Inset List</h3>\n\n\n\n<p>The Ionic lists don&#8217;t contain an outside margin by default. When you need a list to fill your own container, you can add the inset attribute to the &lt;ion-list&gt; component. The inset attribute adds some margin to it and adjusts the list size to your container.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>In the below example, we can understand how&nbsp;<strong>&lt;list header&gt;</strong>&nbsp;and&nbsp;<strong>inset</strong>&nbsp;works with&nbsp;<strong>&lt;ion-list&gt;</strong>&nbsp;element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>  \n        Lists Example  \n      &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>     \n  &lt;ion-content color=\"light\">  \n    &lt;ion-list inset>  \n      &lt;ion-list-header>Action Game&lt;/ion-list-header>  \n      &lt;ion-item>Pok?mon Yellow&lt;/ion-item>  \n      &lt;ion-item>Super Metroid&lt;/ion-item>  \n      &lt;ion-item>Mega Man X&lt;/ion-item>  \n    &lt;/ion-list>  \n  &lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-list-output1.png\" alt=\"\" class=\"wp-image-1116\"/></figure>\n\n\n\n<h3>List Icon</h3>\n\n\n\n<p>Adding icons to the list provides a&nbsp;<strong>hint</strong>&nbsp;about the content of each item. We can also&nbsp;<strong>set the size</strong>&nbsp;of the icon, either&nbsp;<strong>small</strong>&nbsp;or&nbsp;<strong>large</strong>. By default, the size of the icon is small, but it can be made larger with the large attribute. Finally, there is the&nbsp;<strong>&lt;ion-note&gt;</strong>&nbsp;element which is a text element used as subtitles that provide more information. It is used in an item as a metadata text.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Lists Example  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content color=\"light\">  \n  &lt;ion-list>  \n    &lt;ion-item>  \n      &lt;ion-icon name=\"star\">&lt;/ion-icon>  \n    &lt;/ion-item>         \n    &lt;ion-item>  \n      &lt;ion-icon name=\"home\">&lt;/ion-icon>  \n    &lt;/ion-item>  \n    &lt;ion-item>  \n      &lt;ion-icon name=\"star\" size=\"small\">&lt;/ion-icon>  \n    &lt;/ion-item>  \n    &lt;ion-item>  \n      &lt;ion-icon name=\"home\" size=\"large\">&lt;/ion-icon>  \n    &lt;/ion-item>  \n    &lt;!-- Notes in a List -->  \n    &lt;ion-item>  \n      &lt;ion-label>Note (End)&lt;/ion-label>  \n      &lt;ion-note slot=\"end\">On&lt;/ion-note>  \n    &lt;/ion-item>  \n    &lt;ion-item>  \n      &lt;ion-note slot=\"start\">Off&lt;/ion-note>  \n      &lt;ion-label>Note (Start)&lt;/ion-label>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-list-output2.png\" alt=\"\" class=\"wp-image-1117\"/></figure>\n\n\n\n<h3>Item Divider</h3>\n\n\n\n<p>List divider is used for organizing the elements into&nbsp;<strong>logical groups</strong>. Ionic gives us the&nbsp;<strong>&lt;ion-item-divider&gt;</strong>&nbsp;elements to separate items in a list. They are similar to list headers, but there is no need to place it at the top of a list. It should be placed in between groups of like items.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Lists Divider  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content color=\"light\">       \n  &lt;!-- Item Dividers in a List -->  \n    &lt;ion-list>  \n      &lt;ion-item-divider>  \n        &lt;ion-label>Item Divider A&lt;/ion-label>  \n      &lt;/ion-item-divider>        \n      &lt;ion-item>&lt;ion-label>A1&lt;/ion-label>&lt;/ion-item>  \n      &lt;ion-item>&lt;ion-label>A2&lt;/ion-label>&lt;/ion-item>  \n      &lt;ion-item>&lt;ion-label>A3&lt;/ion-label>&lt;/ion-item>  \n        \n      &lt;ion-item-divider>  \n        &lt;ion-label>Item Divider B&lt;/ion-label>  \n      &lt;/ion-item-divider>  \n      &lt;ion-item>&lt;ion-label>B1&lt;/ion-label>&lt;/ion-item>  \n      &lt;ion-item>&lt;ion-label>B2&lt;/ion-label>&lt;/ion-item>  \n      &lt;ion-item>&lt;ion-label>B3&lt;/ion-label>&lt;/ion-item>  \n    &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-list-output3.png\" alt=\"\" class=\"wp-image-1118\"/></figure>\n\n\n\n<h3>Item Avatars and Thumbnails</h3>\n\n\n\n<p>Avatars and thumbnails both are used for&nbsp;<strong>adding images</strong>. The main difference is that avatars images are larger than an icon but smaller than thumbnails.</p>\n\n\n\n<p>Avatar usually a&nbsp;<strong>circular</strong>&nbsp;component that wraps an image or icon. It can be used to represent a person or an object. We can add an avatar by using a&nbsp;<strong>&lt;ion-avatar&gt;</strong>&nbsp;component inside of an item. If we put avatar inside of an &lt;ion-item&gt;, then it will resize to fit the parent component. We can&nbsp;<strong>position</strong>&nbsp;avatar either left or right side of an item by setting the&nbsp;<strong>slot</strong>&nbsp;to start or end respectively.</p>\n\n\n\n<p>Thumbnail usually a&nbsp;<strong>square</strong>&nbsp;component that wraps an image or icon. It can be used to display a group of larger images or provide a preview of the full-size image. We can add thumbnail by using a &lt;ion-thumbnail&gt; component inside of an item. If we put thumbnail inside of an&nbsp;<strong>&lt;ion-item&gt;</strong>, then it will resize to fit the parent component. We can&nbsp;<strong>position</strong>&nbsp;thumbnail either left or right side of an item by setting the&nbsp;<strong>slot</strong>&nbsp;to start or end respectively.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Avatar Thumbnail  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content color=\"light\">       \n  &lt;!-- Avatar -->  \n    &lt;ion-list>  \n      &lt;ion-list-header>Avatar&lt;/ion-list-header>  \n      &lt;ion-item>  \n        &lt;ion-avatar slot=\"start\">  \n          &lt;img src=\"assets/thumnail1.png\">  \n        &lt;/ion-avatar>  \n        &lt;ion-label>Item Avatar&lt;/ion-label>  \n      &lt;/ion-item>  \n      &lt;ion-list-header>Thumbnail&lt;/ion-list-header>  \n  &lt;!-- Thumbnail -->  \n      &lt;ion-item>  \n        &lt;ion-thumbnail slot=\"start\">  \n          &lt;img src=\"assets/thumnail1.png\">  \n        &lt;/ion-thumbnail>  \n        &lt;ion-label>Item Thumbnail&lt;/ion-label>  \n      &lt;/ion-item>  \n    &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-list-output4.png\" alt=\"\" class=\"wp-image-1119\"/></figure>\n\n\n\n<h3>Sliding List</h3>\n\n\n\n<p>A sliding item contains an item that can be&nbsp;<strong>swiped</strong>&nbsp;to the left or right to reveal a&nbsp;<strong>hidden</strong>&nbsp;set of buttons. We can use a sliding item by adding the&nbsp;<strong>&lt;ion-item-sliding&gt;</strong>&nbsp;component inside of an &lt;ion-list&gt; component. Next, we need to add the&nbsp;<strong>&lt;ion-item-options&gt;</strong>&nbsp;component inside of the sliding item to contain the buttons.</p>\n\n\n\n<p><strong>Swipe Direction:</strong>&nbsp;By default, the buttons are on the right side (end). It means the options are revealed when the sliding item is swiped from right to left (end to start). If you need to swipe the option from left to right (start to end), set the&nbsp;<strong>side</strong>&nbsp;attribute to &#8220;start&#8221; on the &lt;ion-item-options&gt; element.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>Let us see how item- sliding works with Ionic Lists in the following example. This example contains two items which are&nbsp;<strong>Sliding Item 1</strong>&nbsp;and&nbsp;<strong>Sliding Item 2</strong>. The first item slides from&nbsp;<strong>right to left</strong>&nbsp;and the second item slide from&nbsp;<strong>left to right</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Sliding Example  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content color=\"light\">  \n  &lt;div>&lt;/div>  \n  &lt;ion-list>     \n    &lt;!-- Sliding item with icon start options on end side -->  \n    &lt;ion-item-sliding>  \n      &lt;ion-item>  \n        &lt;ion-label>Sliding Item 1&lt;/ion-label>  \n      &lt;/ion-item>  \n      &lt;ion-item-options side=\"end\">  \n        &lt;ion-item-option (click)=\"test()\">Unread&lt;/ion-item-option>  \n        &lt;ion-item-option color=\"success\" (click)=\"test()\">Archive&lt;/ion-item-option>  \n      &lt;/ion-item-options>  \n    &lt;/ion-item-sliding>  \n    &lt;ion-item-sliding>  \n      &lt;ion-item>  \n        &lt;ion-label>Sliding Item 2&lt;/ion-label>  \n      &lt;/ion-item>  \n      &lt;ion-item-options side=\"start\">  \n        &lt;ion-item-option (click)=\"test()\">Unread&lt;/ion-item-option>  \n      &lt;/ion-item-options>  \n    &lt;/ion-item-sliding>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When you execute the above Ionic app, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-list-output5.png\" alt=\"\" class=\"wp-image-1120\"/></figure>\n\n\n\n<p>Next, swipe the sliding item 1 from right to left. The following output appears in your browser.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-list-output5_2.png\" alt=\"\" class=\"wp-image-1121\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Lists are the most popular elements of any web or mobile application. They are made up of multiple rows of items which includes text, buttons, toggles, icons, thumbnails, and many more. We can use it for displaying various information such as menus, tabs, or to break the monotony of pure text files. The Ionic lists [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1763,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1115"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1115"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1115/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1763"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1115"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1115"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1115"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1123,
    "date": "2020-05-14T10:03:19",
    "date_gmt": "2020-05-14T10:03:19",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1123"
    },
    "modified": "2020-05-14T10:03:19",
    "modified_gmt": "2020-05-14T10:03:19",
    "slug": "loading",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/loading/",
    "title": {
      "rendered": "Loading"
    },
    "content": {
      "rendered": "\n<p>Loading creates an overlay that can be used to&nbsp;<strong>block</strong>&nbsp;other user interactions. The loading indicator appears on top of the content area. It can be&nbsp;<strong>dismissed</strong>&nbsp;by the app to resume user interaction with the app. We can show a loader visual indication when some process is going on, such as getting data from server or file copy, paste events, etc. The loader is very useful in the application. It makes the application more convenient from the user&#8217;s point of view.</p>\n\n\n\n<p>The Ionic loader also allows us to use the&nbsp;<strong>message parameter</strong>&nbsp;to show a message which indicates the process is going on. It also includes an optional backdrop, which can be disabled by setting the property&nbsp;<strong>showBackdrop: false</strong>&nbsp;upon creation.</p>\n\n\n\n<p>The Ionic loading has two methods: create and dismiss, which return promises as a callback. Let us understand these methods one by one.</p>\n\n\n\n<h2>Create</h2>\n\n\n\n<p>The visual loading indicator is created by using a&nbsp;<strong>Loading Controller</strong>. We can define various loading options in the loading controller create() method. The custom&nbsp;<strong>spinner name</strong>&nbsp;should be passed in the spinner option of the Ionic loading.</p>\n\n\n\n<h2>Dismiss</h2>\n\n\n\n<p>This method is used to&nbsp;<strong>hide</strong>&nbsp;the loader. It can be dismissed automatically after a specific amount of time by passing in the duration of the loading option. If the time duration option is not added in the create method, then you need to call the dismiss method to hide the loader. It also calls the&nbsp;<strong>onDidDismiss</strong>&nbsp;function for performing an action after the loading indicator is dismissed.</p>\n\n\n\n<p>We can understand these methods in the following example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>showAutoHideLoader() {  \n    this.loadingCtrl.create({  \n      message: 'This Loader Will Auto Hide in five Seconds',  \n      duration: 5000  \n    }).then((res) => {  \n      res.present();  \n   \n    res.onDidDismiss().then((dis) => {  \n      console.log('Loading dismissed! after five Seconds');  \n    });  \n  });  \n}  </code></pre>\n\n\n\n<p>In some situations, we may need to have a separate&nbsp;<strong>show</strong>&nbsp;and&nbsp;<strong>hide</strong>&nbsp;methods like in server API call. We can see these methods in the following example.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>showLoader() {  \n    this.loaderToShow = this.loadingCtrl.create({  \n      message: 'This Loader will Not AutoHide'  \n    }).then((res) => {  \n      res.present();  \n   \n      res.onDidDismiss().then((dis) => {  \n        console.log('Loading dismissed!');  \n      });  \n    });  \n    this.hideLoader();  \n  }  \n   \n  hideLoader() {  \n    setTimeout(() => {  \n      this.loadingCtrl.dismiss();  \n    }, 4000);  \n  }  \n}  </code></pre>\n\n\n\n<p>The Ionic loader has the following options.</p>\n\n\n\n<ul><li><strong>Message:</strong>&nbsp;This option contains the text to show on the loader with a spinner.</li><li><strong>Duration:</strong>&nbsp;This option is used to give the time duration in milliseconds to auto-hide the loader.</li><li><strong>Spinner:</strong>&nbsp;This option is used to change the default spinner style.</li><li><strong>backDropDismiss:</strong>&nbsp;If it is true, the user can dismiss loader by tapping anywhere.</li></ul>\n\n\n\n<p>Let us see how the loading component works in the Ionic application from the following example.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<p>It is the HTML file that is responsible for the user interface. In this file, we are going to create an event for displaying the loading controller. For this, we need to create a&nbsp;<strong>button</strong>&nbsp;inside the&nbsp;<strong>&lt;ion-content&gt;</strong>&nbsp;area so that the user clicks on the button in response to which we will display the loading controller.</p>\n\n\n\n<p>When the user clicks on the button, it will invoke a function. This function contains a code to display the loading controller to the user for five seconds, and after&nbsp;<strong>five seconds</strong>, the loading controller will be dismissed. Now, go to the&nbsp;<strong>home.page.ts</strong>&nbsp;file to create this function.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Loading&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n    &lt;ion-button expand=\"block\" color=\"danger\" (click)=\"showLoading()\">Show Loading&lt;/ion-button>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>If you want to use a loading component, first&nbsp;<strong>import</strong>&nbsp;the loading controller. Then, you need to create a&nbsp;<strong>constructor</strong>&nbsp;inside the class because it is required to inject the loading controller inside the class. Now, create a&nbsp;<strong>showLoading()</strong>&nbsp;function to display the loading controller to the user. Inside the function, we have to pass the JSON object that defines how the loading controller will look like.</p>\n\n\n\n<p>Next, we need to create a&nbsp;<strong>dismiss function</strong>&nbsp;to dismiss the loading controller and set the&nbsp;<strong>timeout function</strong>&nbsp;to the time duration of the dismissing of the loading controller.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { LoadingController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  loaderToShow: any;  \n  constructor(public loadingCtrl: LoadingController) {}  \nshowLoading() {  \n  this.loadingCtrl.create({  \n    message: 'Loading...'  \n    }).then((loading) => {  \n     loading.present();  \n  \n     setTimeout(() => {  \n       loading.dismiss();  \n     }, 5000 );  \n    });  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above Ionic application, it will display the following screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-loading-output1.png\" alt=\"\" class=\"wp-image-1124\"/></figure>\n\n\n\n<p>Now, when you click on the show loading button, it will start showing the loading indication. After five seconds, it will be disappeared.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-loading-output2.png\" alt=\"\" class=\"wp-image-1125\"/></figure>\n\n\n\n<p>We can also write the above function in another way by using the await and async. The following code explains this easily.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>async showLoading() {  \n    const loading = await this.loadingCtrl.create({  \n    message: 'Loading...'  \n    });  \n  \n    loading.present();  \n  \n    setTimeout(() => {  \n      loading.dismiss();  \n    }, 5000 );  \n }  </code></pre>\n\n\n\n<p>We can also add other JSON properties as below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>async showLoading() {  \n    const loading = await this.loadingCtrl.create({  \n    message: 'Loading...',  \n    duration: 5000,  \n    showBackdrop: false,  \n    spinner: 'lines'  \n    });  \n    loading.present();  \n}  </code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Loading creates an overlay that can be used to&nbsp;block&nbsp;other user interactions. The loading indicator appears on top of the content area. It can be&nbsp;dismissed&nbsp;by the app to resume user interaction with the app. We can show a loader visual indication when some process is going on, such as getting data from server or file copy, [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1764,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1123"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1123"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1123/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1764"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1123"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1123"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1123"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1127,
    "date": "2020-05-14T10:07:22",
    "date_gmt": "2020-05-14T10:07:22",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1127"
    },
    "modified": "2020-05-14T10:07:22",
    "modified_gmt": "2020-05-14T10:07:22",
    "slug": "menus-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/menus-2/",
    "title": {
      "rendered": "Menus"
    },
    "content": {
      "rendered": "\n<p>The Menu component is the most used Ionic component. It is a&nbsp;<strong>navigation drawer</strong>&nbsp;which slides left or right from the side of the current view. By default, it slides in the left of the current view, but you can also swipe it in the right direction. The menu can be displayed differently based on the modes. However, it can be changed to any of the available menu types. You can attach any number of menus to the content element.</p>\n\n\n\n<p>The Ionic uses a standard&nbsp;<strong>&lt;ion-menu&gt;</strong>&nbsp;component that enables you to create a side menu for navigation easily. The menu component can be controlled from the&nbsp;<strong>templates</strong>, or programmatically by using the&nbsp;<strong>MenuController</strong>. The menu content will be hidden when the menu is closed.</p>\n\n\n\n<p>The Menu component contains the following elements</p>\n\n\n\n<p><strong>Menu-Button:</strong>&nbsp;It is a component which automatically creates the icon and functionality to open a menu on a page.</p>\n\n\n\n<p><strong>Menu Controller:</strong>&nbsp;It is used to control the menu. It provides the method to display the menu, enable the menu, toggle the menu, and many more. It will take a reference to the menu by the side, or ID. If neither side nor ID passed to it, it would grab the first menu it finds.</p>\n\n\n\n<p><strong>Menu Toggle:</strong>&nbsp;It is used to toggle a menu open or closed. It is visible only when the selected menu is active. The menu is active when it is opened or closed. If the menu is disabled or presented as a split-pane, it is marked as non-active and &lt;ion-menu-toggle&gt; element hides itself.</p>\n\n\n\n<p><strong>Split-pane:</strong>&nbsp;It is useful when you want to create a multi-view layout. It allows UI elements to be displayed as the view-port with the increases width. If the device&#8217;s screen width is small, the split-pane will collapse, and the menu will be hidden. It is ideal for an app that will be served in a browser and deployed through the app store to mobile phones and tablets.</p>\n\n\n\n<h2>Create Menu</h2>\n\n\n\n<p>Let us see how we can create the side menu in the Ionic.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;First, create the blank Ionic project. By default, this project contains only&nbsp;<strong>one page</strong>, which is the&nbsp;<strong>home page</strong>. Now, here we are going to create two other pages, which makes it easy to use a side menu to navigate to other pages. The following commands create pages in your Ionic app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ionic generate page Contacts  \nionic generate page Chat  </code></pre>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Next, go to the root component, which is&nbsp;<strong>app.component.ts</strong>. Then, create a function&nbsp;<strong>sideMenu()</strong>, which contains an array of objects. The array of objects includes the different pages in the project. It also contains the icons and the URL of each page. Now, include the following code snippets.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \nimport { Platform } from '@ionic/angular';  \nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';  \nimport { StatusBar } from '@ionic-native/status-bar/ngx';  \n  \n@Component({  \n  selector: 'app-root',  \n  templateUrl: 'app.component.html',  \n  styleUrls: &#91;'app.component.scss']  \n})  \nexport class AppComponent {  \n  navigate: any;  \n  constructor(  \n    private platform: Platform,  \n    private splashScreen: SplashScreen,  \n    private statusBar: StatusBar  \n  ) {  \n    this.sideMenu();  \n    this.initializeApp();  \n  }  \n  \n  initializeApp() {  \n    this.platform.ready().then(() => {  \n      this.statusBar.styleDefault();  \n      this.splashScreen.hide();  \n    });  \n  }  \n  sideMenu() {  \n    this.navigate =  \n    &#91;  \n      {  \n        title : 'Home',  \n        url   : '/home',  \n        icon  : 'home'  \n      },  \n      {  \n        title : 'Chat',  \n        url   : '/chat',  \n        icon  : 'chatboxes'  \n      },  \n      {  \n        title : 'Contacts',  \n        url   : '/contacts',  \n        icon  : 'contacts'  \n      },  \n    ];  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;Next, we need to add the&nbsp;<strong>&lt;ion-menu&gt;</strong>&nbsp;component in the&nbsp;<strong>app.component.html</strong>&nbsp;file to create a side menu. Add the following code snippets in this HTML file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-app>  \n  &lt;ion-menu side=\"start\" menuId=\"first\" contentId=\"content\">  \n    &lt;ion-header>  \n      &lt;ion-toolbar>  \n        &lt;ion-title>Navigate&lt;/ion-title>  \n      &lt;/ion-toolbar>  \n    &lt;/ion-header>  \n    &lt;ion-content>  \n      &lt;ion-list *ngFor=\"let pages of navigate\">  \n        &lt;ion-menu-toggle auto-hide=\"true\">  \n          &lt;ion-item &#91;routerLink]=\"pages.url\" routerDirection=\"forward\">  \n            &lt;ion-icon &#91;name]=\"pages.icon\" slot=\"start\">&lt;/ion-icon>  \n              {{pages.title}}   \n          &lt;/ion-item>  \n        &lt;/ion-menu-toggle>  \n      &lt;/ion-list>  \n    &lt;/ion-content>  \n  &lt;/ion-menu>  \n  &lt;ion-router-outlet Id=\"content\">&lt;/ion-router-outlet>  \n&lt;/ion-app>  </code></pre>\n\n\n\n<p>In the above code snippets, the&nbsp;<strong>&lt;ion-menu&gt; with side= &#8220;start&#8221;</strong>&nbsp;will create a side menu which starts from left to right. It also contains the contentId attribute, which is the Id of the menu.</p>\n\n\n\n<p>The line&nbsp;<strong>&lt;ion-item [routerLink]=&#8221;pages.url&#8221; routerDirection=&#8221;forward&#8221;&gt;</strong>&nbsp;where routerLink allows the navigation to the specified&nbsp;<strong>url</strong>&nbsp;and&nbsp;<strong>outerDirection</strong>&nbsp;determines the animation that takes place when the page changes.</p>\n\n\n\n<p>The&nbsp;<strong>&lt;ion-menu-toggle&gt;</strong>&nbsp;component is used to open and close the side menu. So when you click on the menu, it will close the side menu automatically.</p>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;After creating the side menu in the root component, we can open or close it in each page. To do that we need to use the&nbsp;<strong>&lt;ion-menu-button&gt;</strong>&nbsp;component in the html of each page, that is able to create an icon and functionality to open a menu on each page</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-buttons slot=\"start\" color=\"primary\">  \n      &lt;ion-menu-button>&lt;/ion-menu-button>  \n    &lt;/ion-buttons>  \n    &lt;ion-title>  \n      Start Menu  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  </code></pre>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;Now, execute the Ionic project in your terminal. It will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-menus.png\" alt=\"\" class=\"wp-image-1128\"/></figure>\n\n\n\n<p>If you click on the&nbsp;<strong>three blue lines</strong>&nbsp;menu button on the top left corner of the screen, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-menus2.png\" alt=\"\" class=\"wp-image-1129\"/></figure>\n\n\n\n<p>The following table shows the important methods used in the Ionic menu component.</p>\n\n\n\n<table><tbody><tr><th>SN</th><th>Method</th><th>Signature</th><th>Description</th></tr><tr><td><strong>1.</strong></td><td>Close()</td><td>close(animated?: boolean) =&gt; Promise&lt;boolean&gt;</td><td>It closes the menu. If the menu is already closed, or it cannot be closed, it returns false.</td></tr><tr><td><strong>2.</strong></td><td>isActive()</td><td>isActive() =&gt; Promise&lt;boolean&gt;</td><td>It returns true, if the menu is active.</td></tr><tr><td><strong>3.</strong></td><td>isOpen()</td><td>isOpen() =&gt; Promise&lt;boolean&gt;</td><td>It returns true, if the menu is open.</td></tr><tr><td><strong>4.</strong></td><td>Open()</td><td>open(animated?: boolean) =&gt; Promise&lt;boolean&gt;</td><td>It opens the menu. If the menu is already open, or it cannot be opened, it returns false.</td></tr><tr><td><strong>5.</strong></td><td>setOpen()</td><td>setOpen(shouldOpen: boolean, animated?: boolean) =&gt; Promise&lt;boolean&gt;</td><td>It is used to open or close the button. It returns false, if the operation is not completed.</td></tr><tr><td><strong>6.</strong></td><td>Toggle(()</td><td>toggle(animated?: boolean) =&gt; Promise&lt;boolean&gt;</td><td>It is used to toggles the menu. It returns false, if the operation is not completed successfully.</td></tr></tbody></table>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Menu component is the most used Ionic component. It is a&nbsp;navigation drawer&nbsp;which slides left or right from the side of the current view. By default, it slides in the left of the current view, but you can also swipe it in the right direction. The menu can be displayed differently based on the modes. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1765,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1127"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1127"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1127/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1765"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1127"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1127"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1127"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1131,
    "date": "2020-05-15T06:56:42",
    "date_gmt": "2020-05-15T06:56:42",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1131"
    },
    "modified": "2020-05-15T06:56:42",
    "modified_gmt": "2020-05-15T06:56:42",
    "slug": "modal-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/modal-2/",
    "title": {
      "rendered": "Modal"
    },
    "content": {
      "rendered": "\n<p>The modal in Ionic is displayed as a&nbsp;<strong>temporary UI</strong>&nbsp;that slides into the screen. It appears on top of the app&#8217;s content and must be dismissed by the app before resuming an interaction. It is mainly useful for login/sign-up page, composing messages, filtering items in a list, or presenting app configuration options.</p>\n\n\n\n<h2>Modal Controller</h2>\n\n\n\n<p>It is responsible for&nbsp;<strong>creating modal</strong>&nbsp;in the Ionic application. It uses&nbsp;<strong>create()</strong>&nbsp;method for creating modal. You can customize the controller by setting&nbsp;<strong>modal options</strong>&nbsp;in the create method.</p>\n\n\n\n<h2>Dismiss Method</h2>\n\n\n\n<p>After creating a modal, you can dismiss it by calling the&nbsp;<strong>dismiss()</strong>&nbsp;method on the modal controller. The&nbsp;<strong>onDidDismiss</strong>&nbsp;function can be called for performing additional actions after the modal is dismissed.</p>\n\n\n\n<p>Let us see step by step to learn how the modal controller works in the Ionic application.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Create a&nbsp;<strong>new project</strong>. You can learn how to create a project in Ionic 4 from&nbsp;<a href=\"https://www.javatpoint.com/ionic-installation\">here</a>.</p>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Create a&nbsp;<strong>new page</strong>&nbsp;for the modal controller. To do this, run the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic g page modal  </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;After creating the modal page, open the following files, and insert the given code. You can modify the code according to your needs.</p>\n\n\n\n<p><strong>Modal.page.html</strong></p>\n\n\n\n<p>Here, we are going to call the dismiss method and add the content which displays in the modal UI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>Modal Content&lt;/ion-title>  \n    &lt;ion-icon name='close-circle' (click)='dismiss()' style='float: right;'>&lt;/ion-icon>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;ion-list>  \n    \n    &lt;ion-item>  \n      &lt;ion-avatar slot=\"start\">  \n        &lt;img src=\"assets/avatar.png\"/>  \n      &lt;/ion-avatar>  \n      &lt;ion-label>  \n        &lt;h2>Frodo&lt;/h2>  \n        &lt;p>Hi! This is a Great Ionic 4 Tutorial.&lt;/p>  \n      &lt;/ion-label>  \n    &lt;/ion-item>  \n    &lt;ion-item>  \n      &lt;ion-avatar slot=\"start\">  \n        &lt;img src=\"assets/avatar.png\"/>  \n      &lt;/ion-avatar>  \n      &lt;ion-label>  \n        &lt;h2>Sam&lt;/h2>  \n        &lt;p>This is an example of Modal Controller.&lt;/p>  \n      &lt;/ion-label>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Modal.page.ts</strong></p>\n\n\n\n<p>In this file, we have to create a dismiss method to dismiss the modal UI.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from '@angular/core';  \nimport { ModalController} from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-modal',  \n  templateUrl: './modal.page.html',  \n  styleUrls: &#91;'./modal.page.scss'],  \n})  \nexport class ModalPage implements OnInit {  \n  \n  constructor(public modalCtrl: ModalController) {}  \n  \n  ngOnInit() {  \n  }  \n  dismiss() {  \n    this.modalCtrl.dismiss();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Modal.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';  \nimport { CommonModule } from '@angular/common';  \nimport { FormsModule } from '@angular/forms';  \nimport { Routes, RouterModule } from '@angular/router';  \n  \nimport { IonicModule } from '@ionic/angular';  \n  \nimport { ModalPage } from './modal.page';  \n  \nconst routes: Routes = &#91;  \n  {  \n    path: '',  \n    component: ModalPage  \n  }  \n];  \n  \n@NgModule({  \n  imports: &#91;  \n    CommonModule,  \n    FormsModule,  \n    IonicModule,  \n    RouterModule.forChild(routes)  \n  ],  \n  declarations: &#91;ModalPage]  \n})  \nexport class ModalPageModule {}  </code></pre>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;Next, configure the&nbsp;<strong>app.module.ts</strong>&nbsp;file. It is responsible for the entry of a modal page in the application. Here, you need to&nbsp;<strong>import</strong>&nbsp;the modal page and then add it inside the&nbsp;<strong>@NgModule</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';  \nimport { BrowserModule } from '@angular/platform-browser';  \nimport { RouteReuseStrategy } from '@angular/router';  \n  \nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';  \nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';  \nimport { StatusBar } from '@ionic-native/status-bar/ngx';  \n  \nimport { AppComponent } from './app.component';  \nimport { AppRoutingModule } from './app-routing.module';  \nimport { ModalPageModule } from './modal/modal.module';  \n  \n@NgModule({  \n  declarations: &#91;AppComponent],  \n  entryComponents: &#91;],  \n  imports: &#91;BrowserModule, IonicModule.forRoot(), AppRoutingModule, ModalPageModule],  \n  providers: &#91;  \n    StatusBar,  \n    SplashScreen,  \n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }  \n  ],  \n  bootstrap: &#91;AppComponent]  \n})  \nexport class AppModule {}  </code></pre>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;Open the&nbsp;<strong>home.page.ts</strong>&nbsp;file and add the following code. In this file, the&nbsp;<strong>showModal()</strong>&nbsp;function is used for creating the modal controller. Here, you can also pass the data by using the&nbsp;<strong>componentProps</strong>&nbsp;option.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { ModalController} from '@ionic/angular';  \nimport { ModalPage } from '../modal/modal.page';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public modalCtrl: ModalController) {}  \n  async showModal() {  \n    const modal = await this.modalCtrl.create({  \n      component: ModalPage  \n    });  \n    return await modal.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 6:</strong>&nbsp;Open the&nbsp;<strong>home.page.html</strong>&nbsp;file and add the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Modal&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;h1>Modal Controller&lt;/h1>  \n  &lt;ion-button color=\"primary\" (click)=\"showModal()\">  \n    Show  \n  &lt;/ion-button>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Step 7:</strong>&nbsp;Now, run the application, and you will get the following screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-modal.png\" alt=\"\" class=\"wp-image-1132\"/></figure>\n\n\n\n<p>In the above screen, click on the&nbsp;<strong>Show button</strong>, the following screen appears in your browser. Here, you can see the modal page content as a temporary UI. It can be closed by clicking on the&nbsp;<strong>close icon</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-modal2.jpg\" alt=\"\" class=\"wp-image-1133\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The modal in Ionic is displayed as a&nbsp;temporary UI&nbsp;that slides into the screen. It appears on top of the app&#8217;s content and must be dismissed by the app before resuming an interaction. It is mainly useful for login/sign-up page, composing messages, filtering items in a list, or presenting app configuration options. Modal Controller It is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1766,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1131"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1131"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1131/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1766"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1131"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1131"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1131"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1135,
    "date": "2020-05-15T06:59:49",
    "date_gmt": "2020-05-15T06:59:49",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1135"
    },
    "modified": "2020-05-15T06:59:49",
    "modified_gmt": "2020-05-15T06:59:49",
    "slug": "popover",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/popover/",
    "title": {
      "rendered": "Popover"
    },
    "content": {
      "rendered": "\n<p>A popover is a&nbsp;<strong>small overlay</strong>&nbsp;that appears on top of the current page to show additional information. You can use it for anything, but it is generally used for additional actions that don&#8217;t fit in the navigation bar. It allows us to present or gather information from the user very easily. It is commonly used in the following situation.</p>\n\n\n\n<ul><li>It shows additional information about the current view.</li><li>You can select a commonly used tool and configuration.</li><li>It gives the list of actions to perform inside of the current view.</li></ul>\n\n\n\n<h2>Popover Controller</h2>\n\n\n\n<p>It is responsible for creating&nbsp;<strong>popover</strong>&nbsp;in the Ionic application. It uses&nbsp;<strong>create()</strong>&nbsp;method for creating popover. You can customize the controller by setting&nbsp;<strong>popover options</strong>&nbsp;in the create method.</p>\n\n\n\n<h3>Present () method</h3>\n\n\n\n<p>The present() method is used to&nbsp;<strong>present</strong>&nbsp;a popover notification on the popover instance. A&nbsp;<strong>click event</strong>&nbsp;needs to be passed in the present() method to position the popover. If you did not pass the event, the popover would be positioned in the&nbsp;<strong>center</strong>&nbsp;of the view.</p>\n\n\n\n<p>Let us see step by step how to pass data from page to popover component.</p>\n\n\n\n<p><strong>Step 1:</strong> Create a <strong>new project</strong></p>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Create a&nbsp;<strong>popover custom component</strong>. There is no need to create a page because the purpose of creating a component is to list the notifications of new messages only. To do this, run the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic g component notifications </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;After creating the notification component, open the following files, and insert the given code. You can change the code according to your needs.</p>\n\n\n\n<p><strong>notifications.component.scss</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>ion-list {  \n    &amp;.list-ios {  \n        margin-bottom: 0;  \n    }  \n}  </code></pre>\n\n\n\n<p><strong>notifications.component.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-list class=\"ion-no-margin ion-no-padding\">  \n    &lt;ion-list-header color=\"dark\" class=\"text-10\">  \n      &lt;ion-label class=\"fw700\">Notifications&lt;/ion-label>  \n    &lt;/ion-list-header>  \n  \n    &lt;ion-item color=\"secondary\" class=\"text-10\">  \n      &lt;ion-icon name=\"mail\" color=\"light\">&lt;/ion-icon>  \n      &lt;ion-label>New Offer 30% OFF&lt;/ion-label>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item color=\"light\" class=\"text-10\">  \n      &lt;ion-icon name=\"mail-open\" color=\"primary\">&lt;/ion-icon>  \n      &lt;ion-label>New Offer 15% OFF by month!&lt;/ion-label>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item color=\"secondary\" class=\"text-10\">  \n      &lt;ion-icon name=\"mail\" color=\"light\">&lt;/ion-icon>  \n      &lt;ion-label>New Offer 45% OFF&lt;/ion-label>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item color=\"light\" class=\"text-10\">  \n      &lt;ion-icon name=\"mail-open\" color=\"primary\">&lt;/ion-icon>  \n      &lt;ion-label>New Offer 25% OFF on Credit Card!&lt;/ion-label>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item color=\"light\" class=\"text-10\">  \n      &lt;ion-icon name=\"mail-open\" color=\"primary\">&lt;/ion-icon>  \n      &lt;ion-label>New Offer 20% OFF by month!&lt;/ion-label>  \n    &lt;/ion-item>  \n&lt;/ion-list>  </code></pre>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;Next, after creating the&nbsp;<strong>notifications component</strong>, configure the&nbsp;<strong>app.module.ts</strong>&nbsp;file. Here, you need to&nbsp;<strong>import</strong>&nbsp;the notifications component and then, add it inside the&nbsp;<strong>@NgModule</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';  \nimport { BrowserModule } from '@angular/platform-browser';  \nimport { RouteReuseStrategy } from '@angular/router';  \n  \nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';  \nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';  \nimport { StatusBar } from '@ionic-native/status-bar/ngx';  \n  \nimport { AppComponent } from './app.component';  \nimport { AppRoutingModule } from './app-routing.module';  \nimport { NotificationsComponent } from './notifications/notifications.component';  \n  \n@NgModule({  \n  declarations: &#91;AppComponent, NotificationsComponent],  \n  entryComponents: &#91;NotificationsComponent],  \n  imports: &#91;BrowserModule, IonicModule.forRoot(), AppRoutingModule],  \n  providers: &#91;  \n    StatusBar,  \n    SplashScreen,  \n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }  \n  ],  \n  bootstrap: &#91;AppComponent]  \n})  \nexport class AppModule {}  </code></pre>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;Open the&nbsp;<strong>home.page.ts</strong>&nbsp;file and add the following code. In this file, we can pass data from the home page to the popover component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { PopoverController } from '@ionic/angular';  \nimport { NotificationsComponent } from '../notifications/notifications.component';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public popoverCtrl: PopoverController) { }  \n  async notifications(ev: any) {  \n    const popover = await this.popoverCtrl.create({  \n        component: NotificationsComponent,  \n        event: ev,  \n        animated: true,  \n        showBackdrop: true  \n    });  \n    return await popover.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 6:</strong>&nbsp;Open the&nbsp;<strong>home.page.html</strong>&nbsp;file and add the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Ionic Popover&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;h1>Popover Notification&lt;/h1>  \n  &lt;ion-button size=\"small\" shape=\"round\" color=\"primary\" (click)=\"notifications()\">  \n    &lt;ion-icon name=\"notifications\">&lt;/ion-icon>Show  \n    &lt;ion-badge color=\"dark\" slot=\"end\">2&lt;/ion-badge>  \n  &lt;/ion-button>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Step 7:</strong>&nbsp;Now, run the application, and you will get the following screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-popover.png\" alt=\"\" class=\"wp-image-1136\"/></figure>\n\n\n\n<p>In the above screen, click on the&nbsp;<strong>Show</strong>&nbsp;notification button, the following screen appears in your browser. Here, you can see the popover notification.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-popover2.png\" alt=\"\" class=\"wp-image-1137\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A popover is a&nbsp;small overlay&nbsp;that appears on top of the current page to show additional information. You can use it for anything, but it is generally used for additional actions that don&#8217;t fit in the navigation bar. It allows us to present or gather information from the user very easily. It is commonly used in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1767,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1135"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1135"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1135/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1767"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1135"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1135"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1135"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1139,
    "date": "2020-05-15T07:04:59",
    "date_gmt": "2020-05-15T07:04:59",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1139"
    },
    "modified": "2020-05-15T07:04:59",
    "modified_gmt": "2020-05-15T07:04:59",
    "slug": "progress-bar-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/progress-bar-2/",
    "title": {
      "rendered": "Progress Bar"
    },
    "content": {
      "rendered": "\n<p>The Ionic progress bar component is a&nbsp;<strong>horizontal</strong>&nbsp;progress bar that is used to visualize the progression of operation and activity. We can access the Ionic progress bar by using a standard&nbsp;<strong>&lt;ion-progress-bar&gt;</strong>&nbsp;component.</p>\n\n\n\n<p>The Ionic progress bar is of two types, which are given below.</p>\n\n\n\n<ol><li>Determinate</li><li>Indeterminate</li></ol>\n\n\n\n<h2>Determinate Progress bar</h2>\n\n\n\n<p>It is a type of progress bar, which can be used when the percentage of an operation is known. The determinate progress bar is a type of default progress bar, and the value property represents the progress.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>The following example explains the determinate progress bar where the value property represents the progress.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Progress Bar&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Default Progress Bar&lt;/p>  \n  &lt;ion-progress-bar>&lt;/ion-progress-bar>  \n  \n  &lt;br>  \n  \n  &lt;p>Default Progress Bar with 50 percent&lt;/p>  \n  &lt;ion-progress-bar value=\"0.5\">&lt;/ion-progress-bar>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When the above Ionic app is executed, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-progress-bar-output1.png\" alt=\"\" class=\"wp-image-1140\"/></figure>\n\n\n\n<h2>Indeterminate Progress Bar</h2>\n\n\n\n<p>It is a type of progress bar, which tells the operation is in progress. It means there is no need to indicate how long it will take. If you add the property&nbsp;<strong>reversed=&#8221;true&#8221;</strong>, you receive a query that is used to indicate pre-loading. The following example explains it more clearly.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Progress Bar&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Indeterminate Progress Bar&lt;/p>  \n  &lt;ion-progress-bar type=\"indeterminate\">&lt;/ion-progress-bar>  \n  &lt;br>  \n  &lt;ion-progress-bar type=\"indeterminate\" reversed=\"true\">&lt;/ion-progress-bar>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you run the above code snippets, it will give the following output. Here, you will see that both the progress bar is animated in the opposite direction.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-progress-bar-output2.png\" alt=\"\" class=\"wp-image-1141\"/></figure>\n\n\n\n<p><strong>Buffer:</strong>&nbsp;It shows&nbsp;<strong>circles</strong>&nbsp;as animation for indicating some activity. If the value of the buffer property is less than one, you can show the additional buffering progress. We can understand the use of buffer attributes from the following example.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Progress Bar&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Default Progress Bar&lt;/p>  \n  &lt;ion-progress-bar value=\"0.25\">&lt;/ion-progress-bar>  \n  &lt;br>  \n  &lt;p>Buffer Progress Bar&lt;/p>  \n  &lt;ion-progress-bar value=\"0.25\" buffer=\"0.5\">&lt;/ion-progress-bar>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-progress-bar-output3.png\" alt=\"\" class=\"wp-image-1142\"/></figure>\n\n\n\n<h2>Colorize Progress Bar</h2>\n\n\n\n<p>The &lt;ion-progress-bar&gt; component can be colorized by using the&nbsp;<strong>color</strong>&nbsp;attributes. It can be explained from the following example.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Progress Bar&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Colorize Progress Bar&lt;/p>  \n  &lt;ion-progress-bar value=\"0.60\" color=\"success\">&lt;/ion-progress-bar>  \n  &lt;br>  \n  &lt;ion-progress-bar value=\"0.50\" color=\"warning\">&lt;/ion-progress-bar>  \n  &lt;br>  \n  &lt;ion-progress-bar value=\"0.70\" color=\"danger\">&lt;/ion-progress-bar>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-progress-bar-output4.png\" alt=\"\" class=\"wp-image-1143\"/></figure>\n\n\n\n<h2>Bind a variable with Progress Bar</h2>\n\n\n\n<p>We can also bind the progress bar with the value. To do this, we need to add the value in&nbsp;<strong>square brackets</strong>, which calls the variable bind to this value attribute. The following example explains it more clearly.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>The&nbsp;<strong>home.page.html</strong>&nbsp;file contains the value attribute that calls the variable bind to this attribute. The corresponding logic is written in the&nbsp;<strong>home.page.ts</strong>&nbsp;file.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Progress Bar&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Bind to Variable&lt;/p>  \n  &lt;br>  \n  &lt;ion-progress-bar &#91;value]=\"progress\">&lt;/ion-progress-bar>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  progress = 0;  \n  constructor() {  \n    setInterval( () => {  \n      this.progress += .1;  \n      }, 1000 );  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above Ionic app, it will give the following output. Here, you will see that as the value exceeds, the progress bar will also exceed.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-progress-bar-output5.png\" alt=\"\" class=\"wp-image-1144\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic progress bar component is a&nbsp;horizontal&nbsp;progress bar that is used to visualize the progression of operation and activity. We can access the Ionic progress bar by using a standard&nbsp;&lt;ion-progress-bar&gt;&nbsp;component. The Ionic progress bar is of two types, which are given below. Determinate Indeterminate Determinate Progress bar It is a type of progress bar, which [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1700,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1139"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1139"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1139/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1700"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1139"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1139"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1139"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1146,
    "date": "2020-05-15T07:07:45",
    "date_gmt": "2020-05-15T07:07:45",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1146"
    },
    "modified": "2020-05-15T07:07:45",
    "modified_gmt": "2020-05-15T07:07:45",
    "slug": "radio-button-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/radio-button-2/",
    "title": {
      "rendered": "Radio Button"
    },
    "content": {
      "rendered": "\n<p>A radio button is a type of&nbsp;<strong>input</strong>&nbsp;components which holds the&nbsp;<strong>Boolean value</strong>. It is similar to HTML radio inputs. The Ionic radio button is styled differently on each platform as like other Ionic components. Radio components are generally used as a set of related options inside of a group, but it can also be used alone. A radio button options can be&nbsp;<strong>checked</strong>&nbsp;by selecting it or checked programmatically by setting the checked property. It also uses a&nbsp;<strong>disabled</strong>&nbsp;attribute to disable the user from changing the value.</p>\n\n\n\n<p>An&nbsp;<strong>&lt;ion-radio-group&gt;</strong>&nbsp;component can be used to group a set of radios. It allows you to select at most one radio button from a set. In other words, when the radio group contains many radio options, then only one radio option will be checked at any time. If we select any radio option inside the group, it&nbsp;<strong>unchecks</strong>&nbsp;the previously selected radio option. If the radio option is not in a group with another radio, then both radio can be checked at the same time.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In the following example, we can see how radio buttons work in the Ionic app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      RadioButton  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n       \n&lt;ion-content class=\"padding\" color=\"light\">  \n &lt;!-- Radio Button in a List -->  \n &lt;ion-list>  \n    &lt;ion-radio-group>  \n      &lt;ion-list-header>  \n        Subject  \n      &lt;/ion-list-header>  \n    \n      &lt;ion-item>  \n        &lt;ion-label>Java&lt;/ion-label>  \n        &lt;ion-radio value=\"java\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n    \n      &lt;ion-item>  \n        &lt;ion-label>Python&lt;/ion-label>  \n        &lt;ion-radio value=\"python\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n    &lt;/ion-radio-group>  \n    &lt;ion-radio-group>  \n      &lt;ion-item>  \n        &lt;ion-label>Android&lt;/ion-label>  \n        &lt;ion-radio value=\"android\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n    \n      &lt;ion-item>  \n        &lt;ion-label>Ionic&lt;/ion-label>  \n        &lt;ion-radio value=\"ionic\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n    \n      &lt;ion-item>  \n        &lt;ion-label>Angular&lt;/ion-label>  \n        &lt;ion-radio value=\"angular\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n    &lt;/ion-radio-group>  \n  &lt;/ion-list>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-radio-button-output1.png\" alt=\"\" class=\"wp-image-1147\"/></figure>\n\n\n\n<h2>Multiple Radio Button group</h2>\n\n\n\n<p>Sometimes you want to create more than one group of radio buttons. Ionic radio button provides <strong>&lt;ion-radio-group></strong> element to create multiple group of radio buttons.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>The following example explains how you can create multiple groups of radio buttons. Here, we are also going to see the uses of the&nbsp;<strong>checked</strong>&nbsp;and&nbsp;<strong>disabled property</strong>&nbsp;of the radio button.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      RadioButton  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n       \n&lt;ion-content class=\"padding\" color=\"light\">  \n &lt;!-- Radio Button in a List -->  \n &lt;ion-list>  \n    &lt;ion-radio-group>  \n      &lt;ion-list-header>  \n        CS Subject  \n      &lt;/ion-list-header>  \n      &lt;ion-item>  \n        &lt;ion-label>Java&lt;/ion-label>  \n        &lt;ion-radio value=\"java\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n      &lt;ion-item>  \n        &lt;ion-label>Python&lt;/ion-label>  \n        &lt;ion-radio checked=\"true\" value=\"python\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n    &lt;/ion-radio-group>  \n    &lt;ion-radio-group>  \n      &lt;ion-item>  \n        &lt;ion-label>Android&lt;/ion-label>  \n        &lt;ion-radio value=\"android\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n    &lt;/ion-radio-group>  \n  \n    &lt;ion-radio-group>  \n      &lt;ion-list-header>  \n        Auto Manufacturers  \n      &lt;/ion-list-header>  \n      &lt;ion-item>  \n        &lt;ion-label>Cord&lt;/ion-label>  \n        &lt;ion-radio value=\"cord\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n      &lt;ion-item>  \n        &lt;ion-label>Duesenberg&lt;/ion-label>  \n        &lt;ion-radio disabled=\"true\" value=\"duesenberg\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n      &lt;ion-item>  \n        &lt;ion-label>Hudson&lt;/ion-label>  \n        &lt;ion-radio checked=\"true\" value=\"hudson\">&lt;/ion-radio>  \n      &lt;/ion-item>  \n    &lt;/ion-radio-group>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When you execute the app, the following screen appears. Here, Group1 is&nbsp;<strong>CS Subject</strong>, where the second item uses&nbsp;<strong>checked property</strong>&nbsp;and Group2 is&nbsp;<strong>Auto Manufactures</strong>&nbsp;where the second option uses the&nbsp;<strong>disabled property</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-radio-button-ouput2.png\" alt=\"\" class=\"wp-image-1148\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A radio button is a type of&nbsp;input&nbsp;components which holds the&nbsp;Boolean value. It is similar to HTML radio inputs. The Ionic radio button is styled differently on each platform as like other Ionic components. Radio components are generally used as a set of related options inside of a group, but it can also be used alone. [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1801,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1146"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1146"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1146/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1801"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1146"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1146"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1146"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1150,
    "date": "2020-05-15T07:10:22",
    "date_gmt": "2020-05-15T07:10:22",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1150"
    },
    "modified": "2020-05-15T07:10:22",
    "modified_gmt": "2020-05-15T07:10:22",
    "slug": "range",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/range/",
    "title": {
      "rendered": "Range"
    },
    "content": {
      "rendered": "\n<p>The Ionic range slider is used to choose and display the level of values by moving the&nbsp;<strong>slider knob</strong>. By default, only one knob controls the value of the range, but it can also accept dual knobs.</p>\n\n\n\n<h3>Range labels</h3>\n\n\n\n<p>The labels can be placed on both side of the range by adding the attribute&nbsp;<strong>slot= &#8220;start&#8221;</strong>&nbsp;and slot=&nbsp;<strong>&#8220;end&#8221;</strong>&nbsp;to the element.</p>\n\n\n\n<h3>Maximum and Minimum values</h3>\n\n\n\n<p>The maximum and minimum values can be passed in the range by using the max and min properties, respectively. By default, the range has set the&nbsp;<strong>min=0</strong>&nbsp;and&nbsp;<strong>max=0</strong>&nbsp;values.</p>\n\n\n\n<h3>Steps and Snaps</h3>\n\n\n\n<p>The steps property is used to specify the value granularity of the range value. It can be useful when the value is not in increments of 1. If you set the&nbsp;<strong>step property</strong>&nbsp;in the range, it will show the&nbsp;<strong>tick marks</strong>&nbsp;on the range for each step. The&nbsp;<strong>snap property</strong>&nbsp;is used to automatically move the knob to the nearest tick mark based on the step property value.</p>\n\n\n\n<h3>Dual knobs</h3>\n\n\n\n<p>If the&nbsp;<strong>dual-knobs</strong>&nbsp;property is set to&nbsp;<strong>true</strong>&nbsp;on the range component, it will enable the two knobs on the range. It means the value will be an object containing two properties:&nbsp;<strong>lower</strong>&nbsp;and&nbsp;<strong>upper</strong>.</p>\n\n\n\n<p>We can understand the Ionic range from the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      RangeExample  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n&lt;ion-content>  \n  &lt;ion-list>  \n    &lt;ion-list-header>  \n      Adjust Display  \n    &lt;/ion-list-header>  \n  \n    &lt;ion-item>  \n      &lt;ion-range id=\"dual-range\" dual-knobs>  \n      &lt;/ion-range>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item>  \n      &lt;ion-range min=\"-200\" max=\"200\" pin=\"true\">  \n      &lt;/ion-range>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-range-output1.png\" alt=\"\" class=\"wp-image-1151\"/></figure>\n\n\n\n<h2>Adding Icons to the range</h2>\n\n\n\n<p>Icons are used to display the data clearly. We can place the icons before and after the range input on both sides of the range element. The following example shows the use of icons in range.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      RangeExample  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n&lt;ion-content>  \n  &lt;ion-list>  \n    &lt;ion-list-header>  \n      Adjust Display  \n    &lt;/ion-list-header>  \n  \n    &lt;ion-item>  \n      &lt;ion-range id=\"dual-range\" dual-knobs>  \n        &lt;ion-icon slot=\"start\" size=\"small\" name=\"volume-high\">&lt;/ion-icon>  \n        &lt;ion-icon slot=\"end\" name=\"volume-high\">&lt;/ion-icon>  \n      &lt;/ion-range>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item>  \n      &lt;ion-range min=\"-200\" max=\"200\" pin=\"true\">  \n        &lt;ion-icon slot=\"start\" size=\"small\" name=\"sunny\">&lt;/ion-icon>  \n        &lt;ion-icon slot=\"end\" name=\"sunny\">&lt;/ion-icon>  \n      &lt;/ion-range>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-range-output2.png\" alt=\"\" class=\"wp-image-1152\"/></figure>\n\n\n\n<h2>Styling Range</h2>\n\n\n\n<p>We can also style the range by using the color property. The following example shows the use of color with ionic range component.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"success\">  \n    &lt;ion-title>  \n      RangeExample  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n&lt;ion-content class=\"padding\" color=\"light\" fullscreen>  \n    &lt;ion-list>  \n      &lt;ion-list-header>  \n        Adjust Display  \n      &lt;/ion-list-header>  \n  \n      &lt;ion-item>  \n        &lt;ion-range value=\"20\">  \n          &lt;ion-icon slot=\"start\" size=\"small\" name=\"contrast\">&lt;/ion-icon>  \n          &lt;ion-icon slot=\"end\" name=\"contrast\">&lt;/ion-icon>  \n        &lt;/ion-range>  \n      &lt;/ion-item>  \n  \n      &lt;ion-item>  \n        &lt;ion-range min=\"-200\" max=\"200\" pin color=\"secondary\">  \n        &lt;/ion-range>  \n      &lt;/ion-item>  \n  \n      &lt;ion-item>  \n        &lt;ion-range id=\"dual-range\" dual-knobs pin color=\"dark\">&lt;/ion-range>  \n      &lt;/ion-item>  \n  \n      &lt;ion-item>  \n        &lt;ion-range min=\"1000\" max=\"2000\" step=\"100\" value=\"1400\" snaps color=\"danger\">  \n          &lt;ion-icon slot=\"start\" size=\"small\" color=\"danger\" name=\"thermometer\">&lt;/ion-icon>  \n          &lt;ion-icon slot=\"end\" color=\"danger\" name=\"thermometer\">&lt;/ion-icon>  \n        &lt;/ion-range>  \n      &lt;/ion-item>  \n    &lt;/ion-list>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-range-output3.png\" alt=\"\" class=\"wp-image-1153\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic range slider is used to choose and display the level of values by moving the&nbsp;slider knob. By default, only one knob controls the value of the range, but it can also accept dual knobs. Range labels The labels can be placed on both side of the range by adding the attribute&nbsp;slot= &#8220;start&#8221;&nbsp;and slot=&nbsp;&#8220;end&#8221;&nbsp;to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1702,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1150"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1150"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1150/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1702"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1150"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1150"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1150"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1155,
    "date": "2020-05-15T07:13:18",
    "date_gmt": "2020-05-15T07:13:18",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1155"
    },
    "modified": "2020-05-15T07:13:18",
    "modified_gmt": "2020-05-15T07:13:18",
    "slug": "refresher",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/refresher/",
    "title": {
      "rendered": "Refresher"
    },
    "content": {
      "rendered": "\n<p>Refreshing means updating of the currently displayed page so that the user can see the latest content. It is also called as&nbsp;<strong>re-loading</strong>&nbsp;in the web terminology.</p>\n\n\n\n<p>In many Android applications, we have seen a user-friendly feature&nbsp;<strong>pull-to-refresh</strong>. This feature allows a user to&nbsp;<strong>pull or drag</strong>&nbsp;a page down to some limit, and then the current page view is automatically got a refresh. The pull-to-refresh pattern eliminates any need to tap or click somewhere.</p>\n\n\n\n<p>Ionic provides the same by using&nbsp;<strong>&lt;ion-refresher&gt;</strong>&nbsp;component to add a pull-down feature. The &lt;ion-refresher&gt; component provides pull-to-refresh functionality on a content component. An Ionic allows a user to use this pattern on a list of data using touch to retrieve more data. The updated data should be modified during the refresher&#8217;s output events. Once, the refreshing of page ends, call the&nbsp;<strong>complete()</strong>&nbsp;function on the refresher.</p>\n\n\n\n<h2>&lt;Ion-refresher-content&gt;</h2>\n\n\n\n<p>It is a sub-component of &lt;ion-refresher&gt; component, which contains text, icon, and refresher to display during a pull-to-refresh. An Ionic provides different pulling icons and refreshing spinner icons for different platforms. This component contains the following properties:</p>\n\n\n\n<ul><li>pullingIcon</li><li>pullingText</li><li>refreshingSpinner</li><li>refreshingText</li></ul>\n\n\n\n<p>The following example explains how refreshing works in the Ionic application.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<p>In this HTML file, we need to add &lt;ion-refresher&gt; component where we call the&nbsp;<strong>Refresh event</strong>. Inside this component, add the &lt;ion-refresher-content&gt; sub-component which contains the custom refresher properties.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Ionic Refresher&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n    \n&lt;ion-content class=\"ion-padding\">  \n  &lt;ion-refresher slot=\"fixed\" disabled=\"false\" (ionRefresh)=\"doRefresh($event)\">  \n    &lt;ion-refresher-content  \n    pullingIcon=\"arrow-dropdown\"  \n    pullingText=\"Pull to refresh\"  \n    refreshingSpinner=\"circles\"  \n    refreshingText=\"Refreshing...\">&lt;/ion-refresher-content>  \n  &lt;/ion-refresher>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>This page is responsible for handling the event, which was used in the&nbsp;component of the HTML file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor() { }  \n  doRefresh(event) {  \n    console.log('Pull Event Triggered!');  \n  }  \n} </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the app, you will get the output. Then, pull down or drag the pointer in the content area, the following screen appears.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-refresher1.png\" alt=\"\" class=\"wp-image-1156\"/></figure>\n\n\n\n<h2>Custom Refresher Properties</h2>\n\n\n\n<p>This example explains the use of custom properties such as&nbsp;<strong>pullFactor, pullMin, and pullMax</strong>. If the pullFactor is less than 1, pull down animation is slow. If it is greater than 1, pull-down speed is&nbsp;<strong>up</strong>. Its default value is 1, which is equal to the cursor speed. The pullMax and pullMin set the maximum and minimum distance of the pull until the refresher will go into the refreshing state.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Ionic Refresher&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n    \n&lt;ion-content class=\"ion-padding\">  \n  &lt;h1>Pull to Refresh&lt;/h1>  \n  &lt;ion-refresher slot=\"fixed\" disabled=\"false\" (ionRefresh)=\"doRefresh($event)\" pullFactor=\"0.5\" pullMin=\"100\" pullMax=\"200\">  \n    &lt;ion-refresher-content  \n    pullingIcon=\"arrow-dropdown\"  \n    pullingText=\"Pull to refresh\"  \n    refreshingSpinner=\"circles\"  \n    refreshingText=\"Refreshing...\">&lt;/ion-refresher-content>  \n  &lt;/ion-refresher>  \n  &lt;ion-list>    \n    &lt;ion-item *ngFor=\"let item of dummyList; let i=index\">    \n      Item {{ i+1 }}  \n    &lt;/ion-item>    \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>This page handles the event that occurs in the refresher component. Here, we are going to set the time for the pull-to-refresh, which disappears the spinner loading icon after the time is completed.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  dummyList: any &#91;] = &#91;];  \n  constructor() {}  \n  doRefresh(event) {  \n    console.log('Pull Event Triggered!');  \n    setTimeout(() => {  \n      this.dummyList = Array(10);  \n      event.target.complete();  \n    }, 2000);  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the app, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-refresher2.png\" alt=\"\" class=\"wp-image-1157\"/></figure>\n\n\n\n<p>Now, pull down or drag the pointer in the content area, the following screen appears. Here, you will find the latest updates of the page view.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-refresher3.png\" alt=\"\" class=\"wp-image-1158\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Refreshing means updating of the currently displayed page so that the user can see the latest content. It is also called as&nbsp;re-loading&nbsp;in the web terminology. In many Android applications, we have seen a user-friendly feature&nbsp;pull-to-refresh. This feature allows a user to&nbsp;pull or drag&nbsp;a page down to some limit, and then the current page view is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1703,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1155"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1155"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1155/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1703"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1155"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1155"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1155"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1160,
    "date": "2020-05-15T07:15:28",
    "date_gmt": "2020-05-15T07:15:28",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1160"
    },
    "modified": "2020-05-15T07:15:28",
    "modified_gmt": "2020-05-15T07:15:28",
    "slug": "reorder",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/reorder/",
    "title": {
      "rendered": "Reorder"
    },
    "content": {
      "rendered": "\n<p>The Ionic provides a &lt;ion-reorder&gt; component for reordering feature. It allows you to&nbsp;<strong>drag</strong>&nbsp;and&nbsp;<strong>drop</strong>&nbsp;the list items, which changes the order of the list elements. The&nbsp;<strong>&lt;ion-reorder&gt;</strong>&nbsp;component needs to be used with the&nbsp;<strong>&lt;ion-reorder-group&gt;</strong>&nbsp;to provide a visual drag and drop interface. The &lt;ion-reorder-group&gt; acts as a wrapper for the list elements inside &lt;ion-reorder&gt;.Once the user drags and drops a list of items to a new position, the&nbsp;<strong>ionItemReorder</strong>&nbsp;event is dispatched. The corresponding handler should be implemented, which calls the&nbsp;<strong>complete()</strong>&nbsp;method. The ionItemReorder event contains several properties that include all relevant information about the reorder information. This information includes&nbsp;<strong>from</strong>&nbsp;an index&nbsp;<strong>to</strong>&nbsp;new indexes.This feature is essential in many places like Song Ques, Todo list items, etc. Let us understand how the reorder component work with the following example.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In this example, we are going to discuss how we can implement a reorder component to allow items to be drag and drop to a new position. Here, we are also going to update the list items by calling the complete() method.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<p>The HTML page contains the lists items inside the &lt;ion-reorder-group&gt; components, which have an iteration of items array using angular&nbsp;<strong>*ngFor directive</strong>. In the &lt;ion-reorder-group&gt;, we have set the&nbsp;<strong>disabled</strong>&nbsp;property&nbsp;<strong>false</strong>, which enables the drag and drop feature. The ionItemReorder is an event which enables to complete the reordering of the items.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>Ionic Reorder&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\">  \n  &lt;ion-list>  \n    &lt;ion-reorder-group (ionItemReorder)=\"onRenderItems($event)\" disabled=\"false\">  \n      &lt;ion-item *ngFor=\"let item of listItems\">  \n        &lt;ion-label>  \n          {{item}}  \n        &lt;/ion-label>  \n        &lt;ion-reorder>&lt;/ion-reorder>  \n      &lt;/ion-item>  \n    &lt;/ion-reorder-group>  \n  &lt;/ion-list>  \n  &lt;ion-list class=\"ion-text-center\">  \n    &lt;ion-button (click)=\"getList()\">Get Updated List&lt;/ion-button>  \n  &lt;/ion-list>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>This page contains the implementation of the&nbsp;<strong>onRenderItems($event)</strong>. It contains the&nbsp;<strong>from</strong>&nbsp;and&nbsp;<strong>to</strong>&nbsp;index of the item dragged. Then, it uses a&nbsp;<strong>splice()</strong>&nbsp;method, which removes the dragged item from an array and assigns it to the variable&nbsp;<strong>draggedItem</strong>. After that, it calls the complete() method to complete the reorder operation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  listItems: any;  \n  \n  constructor() {  \n    this.listItems = &#91;  \n      'Roberts',  \n      'Peter',  \n      'Tiffany Waugh',  \n      'Sheila Bauch',  \n      'Diana Gerhold',  \n      'John Kuhn'  \n    ];  \n  }  \n  \n  onRenderItems(event) {  \n    console.log(`Moving item from ${event.detail.from} to ${event.detail.to}`);  \n    const draggedItem = this.listItems.splice(event.detail.from, 1)&#91;0];  \n    this.listItems.splice(event.detail.to, 0, draggedItem);  \n    // this.listItems = reorderArray(this.listItems, event.detail.from, event.detail.to);  \n    event.detail.complete();  \n  }  \n  \n  getList() {  \n    console.table(this.listItems);  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the app, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-reorder.png\" alt=\"\" class=\"wp-image-1161\"/></figure>\n\n\n\n<p>Next, drag any item from the list and drop it to a new position. For example, we have drag the&nbsp;<strong>Robert item</strong>&nbsp;and dropped it to the&nbsp;<strong>fourth position</strong>&nbsp;as like below image. You will also get a message in the console that&nbsp;<strong>moving items from 0 to 3</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-reorder2.png\" alt=\"\" class=\"wp-image-1162\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic provides a &lt;ion-reorder&gt; component for reordering feature. It allows you to&nbsp;drag&nbsp;and&nbsp;drop&nbsp;the list items, which changes the order of the list elements. The&nbsp;&lt;ion-reorder&gt;&nbsp;component needs to be used with the&nbsp;&lt;ion-reorder-group&gt;&nbsp;to provide a visual drag and drop interface. The &lt;ion-reorder-group&gt; acts as a wrapper for the list elements inside &lt;ion-reorder&gt;.Once the user drags and drops a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1800,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1160"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1160"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1160/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1800"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1160"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1160"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1160"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1164,
    "date": "2020-05-15T07:20:59",
    "date_gmt": "2020-05-15T07:20:59",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1164"
    },
    "modified": "2020-05-15T07:20:59",
    "modified_gmt": "2020-05-15T07:20:59",
    "slug": "segment",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/segment/",
    "title": {
      "rendered": "Segment"
    },
    "content": {
      "rendered": "\n<p>Segments are a collection of related buttons that displayed in a&nbsp;<strong>horizontal row</strong>. It can be placed inside of a&nbsp;<strong>toolbar</strong>&nbsp;or the&nbsp;<strong>main content</strong>. The functionality of the Ionic segment is the same as Ionic tabs, where you select the one tab that will deselect all other tabs.</p>\n\n\n\n<p>The segment component is useful when the user toggle between different views inside of the content. The tab bar should be used instead of a segment when clicking on control should navigate between pages in your app. A Segment can act as a&nbsp;<strong>filter</strong>, which shows or hide the elements based on the segment&#8217;s value. We can access the Ionic Segment by using the standard&nbsp;<strong>&lt;ion-segment&gt;</strong>&nbsp;element.</p>\n\n\n\n<p>The following example provides a detailed explanation about how you can use segments with your Ionic application.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<p>This page is used to display the content for the user view. Here, we are going to use &lt;ion-segment&gt; inside of the &lt;ion-content&gt; element. The option inside the segment, such as&nbsp;<strong>ionChange</strong>, calls the event to change the segment tab, and&nbsp;<strong>ngModel</strong>&nbsp;is an angular directive that binds the value of HTML control to application data.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-buttons slot=\"start\">  \n      &lt;ion-menu-button>&lt;/ion-menu-button>  \n    &lt;/ion-buttons>  \n    &lt;ion-title>Ionic Segment&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\" color=\"light\">  \n  &lt;ion-toolbar>  \n    &lt;ion-segment (ionChange)=\"segmentChanged($event)\" &#91;(ngModel)]=\"segment\" color=\"primary\">  \n      &lt;ion-segment-button value=\"0\">  \n        &lt;ion-label>Contact&lt;/ion-label>  \n        &lt;ion-icon name=\"contact\">&lt;/ion-icon>  \n      &lt;/ion-segment-button>  \n      &lt;ion-segment-button value=\"1\">  \n        &lt;ion-label>Camera&lt;/ion-label>  \n        &lt;ion-icon name=\"camera\">&lt;/ion-icon>  \n      &lt;/ion-segment-button>  \n      &lt;ion-segment-button value=\"2\">  \n        &lt;ion-label>Map&lt;/ion-label>  \n        &lt;ion-icon name=\"pin\">&lt;/ion-icon>  \n      &lt;/ion-segment-button>  \n    &lt;/ion-segment>  \n  &lt;/ion-toolbar>  \n    \n  &lt;ion-slides #slides (ionSlideDidChange)=\"slideChanged()\" scrollbar=\"true\">  \n    &lt;ion-slide>First Segment&lt;/ion-slide>  \n    &lt;ion-slide>Second Segment&lt;/ion-slide>  \n    &lt;ion-slide>Third Segment&lt;/ion-slide>  \n  &lt;/ion-slides>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>This page contains the code for changing the segment tab and slide option.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, ViewChild} from '@angular/core';  \nimport {IonSlides } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  @ViewChild('slides', { static: true }) slider: IonSlides;  \n  segment = 0;  \n  constructor() { }  \n  async segmentChanged(ev: any) {  \n    await this.slider.slideTo(this.segment);  \n  }  \n  async slideChanged() {  \n    this.segment = await this.slider.getActiveIndex();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Home.page.scss</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root {  \n  --ion-safe-area-top: 20px;  \n  --ion-safe-area-bottom: 22px;  \n}  \nion-slide {  \n  height: calc(100vh - 140px);  \n} </code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>When you execute the above Ionic application, it will give the following output. Here, you can see the&nbsp;<strong>three types</strong>&nbsp;of segment&nbsp;<strong>contacts, camera,</strong>&nbsp;and&nbsp;<strong>map</strong>. By default, the first segment is always selected.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-segment1.png\" alt=\"\" class=\"wp-image-1165\"/></figure>\n\n\n\n<p>Now, when you select the&nbsp;<strong>map segment</strong>, the following output appears on the screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-segment2.png\" alt=\"\" class=\"wp-image-1166\"/></figure>\n\n\n\n<p></p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Segments are a collection of related buttons that displayed in a&nbsp;horizontal row. It can be placed inside of a&nbsp;toolbar&nbsp;or the&nbsp;main content. The functionality of the Ionic segment is the same as Ionic tabs, where you select the one tab that will deselect all other tabs. The segment component is useful when the user toggle between [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1705,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1164"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1164"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1164/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1705"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1164"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1164"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1164"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1170,
    "date": "2020-05-17T05:49:04",
    "date_gmt": "2020-05-17T05:49:04",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1170"
    },
    "modified": "2020-05-17T05:49:04",
    "modified_gmt": "2020-05-17T05:49:04",
    "slug": "select-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/select-2/",
    "title": {
      "rendered": "Select"
    },
    "content": {
      "rendered": "\n<p>The Ionic select component provides a select menu with select options for the user to choose among the set of multiple options. Selects are the form controls similar to native <strong>&lt;select></strong> element. When you tap the select, immediately a dialog appears with all of the including options. The select menu will look different for a different platform because its styling is handled by the browser. We can access the Ionic select by using a standard <strong>&lt;ion-select></strong> element.</p>\n\n\n\n<p>A select component always used with child&nbsp;<strong>&lt;ion-select-option&gt;</strong>&nbsp;element. If the &lt;ion-select-option&gt; does not have a value attribute, then its text will be used as the value.</p>\n\n\n\n<p>If the <strong>&lt;ion-select></strong> component has set the value attribute, the selected options will be decided based on that <strong>value</strong>. On the other hand, if the value is not set, the select attribute will be used on the <strong>&lt;ion-select-option></strong>.</p>\n\n\n\n<p>The select component uses the interface&nbsp;<strong>AtertController API</strong>&nbsp;for opening the overlay of options in an alert. It can be changed for using the&nbsp;<strong>ActionSheetController API</strong>&nbsp;or&nbsp;<strong>PopoverController API</strong>&nbsp;by passing&nbsp;<strong>action-sheet</strong>&nbsp;or&nbsp;<strong>popover</strong>&nbsp;to the interface property.</p>\n\n\n\n<p>The select component can be of two types:</p>\n\n\n\n<ol><li>Single-Selection</li><li>Multiple-Selection</li></ol>\n\n\n\n<h3>Single-Selection</h3>\n\n\n\n<p>By default, the select allows you to select only one option. In this selection, the alert interface shows the radio button styled list of options. The select component&#8217;s value receives only the value of the selected option&#8217;s value.</p>\n\n\n\n<p><strong>Select Buttons</strong></p>\n\n\n\n<p>The alert interface supports two buttons which are:&nbsp;<strong>cancel</strong>&nbsp;and&nbsp;<strong>ok</strong>. The button text can be customized by using the&nbsp;<strong>cancelText</strong>&nbsp;and&nbsp;<strong>okText</strong>&nbsp;properties.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>The following example helps to understand the use of a single selection component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      SelectExample  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n&lt;ion-content class=\"padding\" color=\"light\" fullscreen>  \n  &lt;ion-list>  \n    &lt;ion-list-header>Single Selection&lt;/ion-list-header>  \n    \n    &lt;ion-item>  \n      &lt;ion-label>Gender&lt;/ion-label>  \n      &lt;ion-select placeholder=\"Select One\">  \n        &lt;ion-select-option value=\"f\">Female&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"m\">Male&lt;/ion-select-option>  \n      &lt;/ion-select>  \n    &lt;/ion-item>  \n    \n    &lt;ion-item>  \n      &lt;ion-label>Face Color&lt;/ion-label>  \n        &lt;ion-select value=\"brown\" okText=\"Okay\" cancelText=\"Dismiss\">  \n        &lt;ion-select-option value=\"light\">Light&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"fair\">Fair&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"wheatish\">Wheatish&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"dark\">Dark&lt;/ion-select-option>  \n      &lt;/ion-select>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content> </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above code snippet, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-select-output1.png\" alt=\"\" class=\"wp-image-1221\"/></figure>\n\n\n\n<p>If you tap the select, immediately a dialog appears with all of the including options. We will get the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-select-output2.png\" alt=\"\" class=\"wp-image-1222\"/></figure>\n\n\n\n<h3>Multiple-Selection</h3>\n\n\n\n<p>The multiple selections use multiple attributes which allows you to select multiple options from a set of select options. In this selection, the alert interface shows the&nbsp;<strong>checkbox styled</strong>&nbsp;list of options. Here the select component&#8217;s value receives the array of all of the selected option values.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      SelectExample  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n&lt;ion-content class=\"padding\" color=\"light\" fullscreen>  \n  &lt;ion-list>  \n    &lt;ion-list-header>Multiple Selection&lt;/ion-list-header>  \n    &lt;ion-item>  \n      &lt;ion-label>Flowers&lt;/ion-label>  \n      &lt;ion-select multiple=\"true\" cancelText=\"Nah\" okText=\"Okay!\">  \n        &lt;ion-select-option value=\"orchid\">Orchid&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"lily\">Lily&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"rose\">Rose&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"lotus\">Lotus&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"jasmine\">Jasmine&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"marigold \">Marigold&lt;/ion-select-option>  \n      &lt;/ion-select>  \n    &lt;/ion-item>  \n        \n    &lt;ion-item>  \n      &lt;ion-label>Pets&lt;/ion-label>  \n      &lt;ion-select multiple=\"true\">  \n        &lt;ion-select-option value=\"bird\" selected>Bird&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"cat\">Cat&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"dog\">Dog&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"lion\">Lion&lt;/ion-select-option>  \n      &lt;/ion-select>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-select-output3.png\" alt=\"\" class=\"wp-image-1223\"/></figure>\n\n\n\n<p>If you tap the select, immediately a dialog appears with all of the including options. Now, you can choose multiple options as you want.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-select-output4.png\" alt=\"\" class=\"wp-image-1224\"/></figure>\n\n\n\n<h2>Interface Options</h2>\n\n\n\n<p>By default, the select component uses the interface AtertController API. But, we can also change it for using the ActionSheetController API or PopoverController API by passing action-sheet or popover to the interface property. The following example explained it more clearly.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      SelectExample  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n&lt;ion-content class=\"padding\" color=\"light\" fullscreen>  \n  &lt;ion-list>  \n    &lt;ion-list-header>Interface Options&lt;/ion-list-header>        \n    &lt;ion-item>  \n      &lt;ion-label>Alert&lt;/ion-label>  \n      &lt;ion-select &#91;interfaceOptions]=\"customAlertOptions\" interface=\"alert\" multiple=\"true\" placeholder=\"Select One\">  \n        &lt;ion-select-option value=\"bacon\">Bacon&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"olives\">Black Olives&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"xcheese\">Extra Cheese&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"peppers\">Green Peppers&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"mushrooms\">Mushrooms&lt;/ion-select-option>  \n      &lt;/ion-select>  \n    &lt;/ion-item>  \n        \n    &lt;ion-item>  \n      &lt;ion-label>Popover&lt;/ion-label>  \n      &lt;ion-select &#91;interfaceOptions]=\"customPopoverOptions\" interface=\"popover\" placeholder=\"Select One\">  \n        &lt;ion-select-option value=\"lily\">Lily&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"rose\">Rose&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"lotus\">Lotus&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"jasmine\">Jasmine&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"marigold \">Marigold&lt;/ion-select-option>  \n      &lt;/ion-select>  \n    &lt;/ion-item>  \n        \n    &lt;ion-item>  \n      &lt;ion-label>Action Sheet&lt;/ion-label>  \n      &lt;ion-select &#91;interfaceOptions]=\"customActionSheetOptions\" interface=\"action-sheet\" placeholder=\"Select One\">  \n        &lt;ion-select-option value=\"red\">Red&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"yellow\">Yellow&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"orange\">Orange&lt;/ion-select-option>  \n        &lt;ion-select-option value=\"green\">Green&lt;/ion-select-option>  \n      &lt;/ion-select>  \n    &lt;/ion-item>    \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  customAlertOptions: any = {  \n    header: 'Pizza Toppings',  \n    subHeader: 'Select your toppings',  \n    message: '$2.00 per topping',  \n    translucent: true  \n  };  \n  \n  customPopoverOptions: any = {  \n    header: 'Flower Name',  \n    subHeader: 'Select your flower name',  \n    message: 'Only select your favorite flower'  \n  };  \n  \n  customActionSheetOptions: any = {  \n    header: 'Colors',  \n    subHeader: 'Select your favorite color'  \n  };  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above Ionic app, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-select-output5.png\" alt=\"\" class=\"wp-image-1225\"/></figure>\n\n\n\n<p>Now, when you select the&nbsp;<strong>popover</strong>&nbsp;option, the following screen appears. Here, you can also check for other options such as Alert and Action Sheet.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-select-output6.png\" alt=\"\" class=\"wp-image-1226\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic select component provides a select menu with select options for the user to choose among the set of multiple options. Selects are the form controls similar to native &lt;select> element. When you tap the select, immediately a dialog appears with all of the including options. The select menu will look different for a [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1706,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1170"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1170"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1170/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1706"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1170"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1170"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1170"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1228,
    "date": "2020-05-17T08:31:23",
    "date_gmt": "2020-05-17T08:31:23",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1228"
    },
    "modified": "2020-05-17T08:31:23",
    "modified_gmt": "2020-05-17T08:31:23",
    "slug": "slides",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/slides/",
    "title": {
      "rendered": "Slides"
    },
    "content": {
      "rendered": "\n<p>The Slides components contain pages that can be changed by&nbsp;<strong>swiping</strong>&nbsp;or&nbsp;<strong>dragging</strong>&nbsp;the content screen. It is a&nbsp;<strong>multi-section</strong>&nbsp;container. It can include any number of Slide components. It is very useful in creating galleries, tutorials, and page-based layouts.</p>\n\n\n\n<p><strong>Ion-slide:</strong>&nbsp;It is a&nbsp;<strong>child component</strong>&nbsp;of Ionic slides. You can write the templates as&nbsp;<strong>&lt;ion-slide&gt;</strong>. The slide content should be written inside this component which should be used in conjunction with Slides.</p>\n\n\n\n<p>The following example explains how you can use slides components with the Ionic app.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<p>In this example, we have created&nbsp;<strong>four</strong>&nbsp;slider pages. These slider pages are placed inside the sub child &lt;ion-slide&gt; of &lt;ion-slides&gt; components.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Slides&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content fullscreen class=\"ion-padding\" scroll-y=\"false\" color=\"success\">  \n  &lt;ion-slides>  \n\n    &lt;ion-slide>  \n      &lt;img src=\"assets/ionic_logo1.png\"/>  \n      &lt;h2>What is Ionic?&lt;/h2>  \n      &lt;p>&lt;b>Ionic Framework&lt;/b> is an open source SDK that enables developers to build high quality mobile apps with web technologies like HTML, CSS, and JavaScript.&lt;/p>  \n    &lt;/ion-slide>  \n  \n    &lt;ion-slide>  \n      &lt;img src=\"assets/Ionic_logo2.png\"/>  \n      &lt;h2>What is Ionic Pro?&lt;/h2>  \n      &lt;p>&lt;b>Ionic Pro&lt;/b> is a powerful set of services and features built on top of Ionic Framework that brings a totally new level of app development agility to mobile dev teams.&lt;/p>  \n    &lt;/ion-slide>  \n  \n    &lt;ion-slide>  \n      &lt;img src=\"assets/Ionic_logo3.png\"/>  \n      &lt;h2>Ready to Play?&lt;/h2>  \n      &lt;ion-button fill=\"clear\">Continue &lt;ion-icon slot=\"end\" name=\"arrow-forward\">&lt;/ion-icon>&lt;/ion-button>  \n    &lt;/ion-slide>  \n  \n  &lt;/ion-slides>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.scss</strong></p>\n\n\n\n<p>This page contains the styling of elements which you have used in the app.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>:root {  \n  --ion-safe-area-top: 20px;  \n  --ion-safe-area-bottom: 22px;  \n}  \n.swiper-slide {  \n  display: block;  \n}  \nion-slide > h2 {  \n  margin-top: 2.8rem;  \n}  \nion-slide > img {  \n  max-height: 50%;  \n  max-width: 60%;  \n  margin: 36px 0;  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above code snippets, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-slides-output2.png\" alt=\"\" class=\"wp-image-1229\"/></figure>\n\n\n\n<p>if you slide or drag the page, it will give the next page.</p>\n\n\n\n<h2>Custom Animation</h2>\n\n\n\n<p>By default, Ionic Slides components use the&nbsp;<strong>built-in</strong>&nbsp;slide animation effects. But, you can also use the custom animations for your Slides components. It can be done by using the options property, which looks like below syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-slides pager=\"true\" &#91;options]=\"slideOpts\">  </code></pre>\n\n\n\n<p>You can find the different slider parameter options from&nbsp;<a href=\"https://swiperjs.com/api/\" rel=\"noreferrer noopener\" target=\"_blank\">here</a>.</p>\n\n\n\n<p>The following example explains how custom animation effects can be used with the Slides components.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header translucent>  \n  &lt;ion-toolbar color=\"danger\">  \n    &lt;ion-title>Slides&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content fullscreen class=\"ion-padding\" scroll-y=\"false\" color=\"success\">  \n  &lt;ion-slides pager=\"true\" &#91;options]=\"slideOpts\">  \n  \n    &lt;ion-slide>  \n      &lt;img src=\"assets/ionic_logo1.png\"/>  \n      &lt;h2>What is Ionic?&lt;/h2>  \n      &lt;p>&lt;b>Ionic Framework&lt;/b> is an open source SDK that enables developers to build high quality mobile apps with web technologies like HTML, CSS, and JavaScript.&lt;/p>  \n    &lt;/ion-slide>  \n  \n    &lt;ion-slide>  \n      &lt;img src=\"assets/Ionic_logo2.png\"/>  \n      &lt;h2>What is Ionic Pro?&lt;/h2>  \n      &lt;p>&lt;b>Ionic Pro&lt;/b> is a powerful set of services and features built on top of Ionic Framework that brings a totally new level of app development agility to mobile dev teams.&lt;/p>  \n    &lt;/ion-slide>  \n  \n    &lt;ion-slide>  \n      &lt;img src=\"assets/Ionic_logo3.png\"/>  \n      &lt;h2>Ready to Play?&lt;/h2>  \n      &lt;ion-button fill=\"clear\">Continue &lt;ion-icon slot=\"end\" name=\"arrow-forward\">&lt;/ion-icon>&lt;/ion-button>  \n    &lt;/ion-slide>  \n  \n  &lt;/ion-slides>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  slideOpts = {  \n    initialSlide: 1,  \n    speed: 300,  \n    effect: 'flip',  \n  };  \n  constructor() {}  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the Ionic app, it will give the initial sliding page that you have set in the slider options. Now, you can slide other pages from this page.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-slides-output3.png\" alt=\"\" class=\"wp-image-1230\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Slides components contain pages that can be changed by&nbsp;swiping&nbsp;or&nbsp;dragging&nbsp;the content screen. It is a&nbsp;multi-section&nbsp;container. It can include any number of Slide components. It is very useful in creating galleries, tutorials, and page-based layouts. Ion-slide:&nbsp;It is a&nbsp;child component&nbsp;of Ionic slides. You can write the templates as&nbsp;&lt;ion-slide&gt;. The slide content should be written inside this component [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1707,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1228"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1228"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1228/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1707"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1228"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1228"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1228"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1232,
    "date": "2020-05-17T08:38:05",
    "date_gmt": "2020-05-17T08:38:05",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1232"
    },
    "modified": "2020-05-17T08:38:05",
    "modified_gmt": "2020-05-17T08:38:05",
    "slug": "spinner",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/spinner/",
    "title": {
      "rendered": "Spinner"
    },
    "content": {
      "rendered": "\n<p>The Ionic Spinner component provides several&nbsp;<strong>SVG</strong>&nbsp;spinners. The spinners are&nbsp;<strong>visual indicators</strong>&nbsp;that indicate the app is loading content or performing another process so that the user needs to wait on.</p>\n\n\n\n<p>The default spinner is different for different platforms. For example, the&nbsp;<strong>iOS</strong>&nbsp;application has the default Spinner&nbsp;<strong>lines</strong>, whereas, the&nbsp;<strong>android</strong>&nbsp;application has the default Spinner&nbsp;<strong>crescent</strong>. If the platform is not the iOS nor the android, the default Spinner will be crescent. We can access the Ionic Spinner by using a standard&nbsp;<strong>&lt;ion-spinner&gt;</strong>&nbsp;component.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>This example shows the use of default spinner in an Ionic application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Ionic Spinner&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;ion-spinner>&lt;/ion-spinner>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above code snippets, it will give the following output. Here you can see the default spinner loading, which is a line.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-spinner-output1.png\" alt=\"\" class=\"wp-image-1233\"/></figure>\n\n\n\n<blockquote class=\"wp-block-quote\"><p><strong>Note:</strong>&nbsp;We can also change the default Spinner by using the property&nbsp;<strong>name</strong>. The following example explains the different types of Spinner used in the Ionic application.</p></blockquote>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Spinner&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n&lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Lines&lt;/p>  \n  &lt;ion-spinner name=\"lines\">&lt;/ion-spinner>  \n    \n  &lt;p>Line Small&lt;/p>  \n  &lt;ion-spinner name=\"lines-small\">&lt;/ion-spinner>  \n    \n  &lt;p>Dots&lt;/p>  \n  &lt;ion-spinner name=\"dots\">&lt;/ion-spinner>  \n    \n  &lt;p>Bubbles&lt;/p>  \n  &lt;ion-spinner name=\"bubbles\">&lt;/ion-spinner>  \n    \n  &lt;p>Circles&lt;/p>  \n  &lt;ion-spinner name=\"circles\">&lt;/ion-spinner>  \n    \n  &lt;p>Crescent&lt;/p>  \n  &lt;ion-spinner name=\"crescent\">&lt;/ion-spinner>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-spinner-output2.png\" alt=\"\" class=\"wp-image-1234\"/></figure>\n\n\n\n<h2>Pause Spinner</h2>\n\n\n\n<p>The Ionic Spinner also allows us an attribute to pause the animation of the Spinner component. By default, the&nbsp;<strong>paused</strong>&nbsp;attribute is false. If it is true, the Spinner animation will be paused. The following example helps to understand it more clearly.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In this example, we had set the attribute paused in the circle spinner.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Ionic Spinner&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Bubbles&lt;/p>  \n  &lt;ion-spinner name=\"bubbles\">&lt;/ion-spinner>  \n  \n  &lt;p>Circles&lt;/p>  \n  &lt;ion-spinner name=\"circles\" paused>&lt;/ion-spinner>  \n  \n  &lt;p>Crescent&lt;/p>  \n  &lt;ion-spinner name=\"crescent\">&lt;/ion-spinner>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When the above code executes, you will get the following output. Here, you can see that the&nbsp;<strong>circle spinner</strong>&nbsp;will be paused.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-spinner-output3.png\" alt=\"\" class=\"wp-image-1235\"/></figure>\n\n\n\n<h2>Setting Time</h2>\n\n\n\n<p>The Ionic also allows us to set the time duration to the Spinner component. It means when the time which you have set is reached, the visual loading indication of the Spinner component will be disappeared.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Spinner&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Lines&lt;/p>  \n  &lt;ion-spinner *ngIf=\"show\">&lt;/ion-spinner>  \n    \n  &lt;p>Dots&lt;/p>  \n  &lt;ion-spinner name=\"dots\">&lt;/ion-spinner>  \n    \n  &lt;p>Circles&lt;/p>  \n  &lt;ion-spinner name=\"circles\">&lt;/ion-spinner>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>Here, we have set the timeout duration for the Spinner component.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  show = true;  \n  constructor() {  \n    setTimeout (() => {  \n      this.show = false;  \n    }, 3000 );  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above code snippets, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-spinner-output4.png\" alt=\"\" class=\"wp-image-1236\"/></figure>\n\n\n\n<p>Whenever the time limit which you had set is reached, the visual indicator of line spinner loading will be disappeared. We can see it in the below image.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-spinner-output4_2.png\" alt=\"\" class=\"wp-image-1237\"/></figure>\n\n\n\n<h2>Styling the Spinner</h2>\n\n\n\n<p>We can also set the different styling or color for the Spinner component. The following example explains the use of different color styling inside the Spinner component.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Spinner&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;p>Crescent&lt;/p>  \n  &lt;ion-spinner name=\"crescent\" color=\"dark\">&lt;/ion-spinner>  \n    \n  &lt;p>Dots&lt;/p>  \n  &lt;ion-spinner name=\"dots\" color=\"danger\">&lt;/ion-spinner>  \n    \n  &lt;p>Circles&lt;/p>  \n  &lt;ion-spinner name=\"circles\" color=\"success\">&lt;/ion-spinner>  \n    \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you run the Ionic application, it will give the following screen. Here, you can see that each of the Spinner components stylings is different.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-spinner-output5.png\" alt=\"\" class=\"wp-image-1238\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic Spinner component provides several&nbsp;SVG&nbsp;spinners. The spinners are&nbsp;visual indicators&nbsp;that indicate the app is loading content or performing another process so that the user needs to wait on. The default spinner is different for different platforms. For example, the&nbsp;iOS&nbsp;application has the default Spinner&nbsp;lines, whereas, the&nbsp;android&nbsp;application has the default Spinner&nbsp;crescent. If the platform is not the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1708,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1232"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1232"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1232/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1708"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1232"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1232"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1232"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1240,
    "date": "2020-05-17T08:40:32",
    "date_gmt": "2020-05-17T08:40:32",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1240"
    },
    "modified": "2020-05-17T08:40:32",
    "modified_gmt": "2020-05-17T08:40:32",
    "slug": "tabs-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/tabs-2/",
    "title": {
      "rendered": "Tabs"
    },
    "content": {
      "rendered": "\n<p>The Ionic tabs are mainly used for&nbsp;<strong>mobile navigation</strong>. The styling of Ionic tabs is different for different operating systems.&nbsp;<strong>For example,</strong>&nbsp;it is placed at the top of the screen in android devices while it is placed at the bottom in iOS devices. We can access the Ionic tabs by using the standard&nbsp;<strong>&lt;ion-tabs&gt;</strong>&nbsp;component. This component works as a&nbsp;<strong>router outlet</strong>&nbsp;to handle navigation. It does not provide any mechanism to switch between tabs. If you need to do switch between tabs, use&nbsp;<strong>&lt;ion-tab-bar&gt;</strong>&nbsp;as a direct child element of &lt;ion-tabs&gt;.</p>\n\n\n\n<p>You can also use both &lt;ion-tabs&gt; and &lt;ion-tab-bar&gt; as a standalone elements. Both do not depend on each other to work, but it can be used together to implement tab-based navigation that behaves like a native app. The &lt;ion-tab-bar&gt; component needs a slot to be projected to the right place in an &lt;ion-tabs&gt; component.</p>\n\n\n\n<h3>Ion-tab-bar</h3>\n\n\n\n<p>It is a UI component which contains a set of tab buttons. This tab must be provided inside of tabs to communicate with each tab.</p>\n\n\n\n<h3>Ion-tab-button</h3>\n\n\n\n<p>It is a UI component which is placed inside of a tab bar. It specifies the layout of the icon and label and connects to the tab view.</p>\n\n\n\n<h3>Simple Tabs</h3>\n\n\n\n<p>Simple tabs menu can be created by using &lt;ion-tabs&gt; and &lt;ion-tab-bar&gt; component. The following example shows how tabs created in Ionic.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Tabs Example  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n     \n&lt;ion-content class=\"padding\" >  \n  &lt;ion-tabs>  \n    &lt;ion-tab-bar slot=\"top\" color=\"light\">  \n      &lt;ion-tab-button tab=\"speakers\">  \n        &lt;ion-label>Speakers&lt;/ion-label>  \n      &lt;/ion-tab-button>  \n        \n      &lt;ion-tab-button tab=\"map\">  \n        &lt;ion-label>Contact&lt;/ion-label>  \n      &lt;/ion-tab-button>  \n        \n      &lt;ion-tab-button tab=\"about\">  \n        &lt;ion-label>About&lt;/ion-label>  \n      &lt;/ion-tab-button>  \n    &lt;/ion-tab-bar>  \n  &lt;/ion-tabs>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-tabs.png\" alt=\"\" class=\"wp-image-1241\"/></figure>\n\n\n\n<h2>Adding Icons</h2>\n\n\n\n<p>Ionic also provides an &lt;ion-icon&gt; element for adding icons to the tabs. We can understand it with the following example.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>  \n        Tabs Example  \n      &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n       \n  &lt;ion-content class=\"padding\" color=\"light\">  \n    &lt;ion-tabs>  \n      &lt;ion-tab-bar slot=\"top\">  \n        &lt;ion-tab-button tab=\"contact\">  \n          &lt;ion-icon name=\"contacts\">&lt;/ion-icon>  \n          &lt;ion-label>Contact&lt;/ion-label>  \n        &lt;/ion-tab-button>  \n          \n        &lt;ion-tab-button tab=\"map\">  \n          &lt;ion-icon name=\"map\">&lt;/ion-icon>  \n          &lt;ion-label>Map&lt;/ion-label>  \n        &lt;/ion-tab-button>  \n          \n        &lt;ion-tab-button tab=\"about\">  \n          &lt;ion-icon name=\"information-circle\">&lt;/ion-icon>  \n          &lt;ion-label>About&lt;/ion-label>  \n        &lt;/ion-tab-button>  \n      &lt;/ion-tab-bar>  \n    &lt;/ion-tabs>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-tabs2.png\" alt=\"\" class=\"wp-image-1242\"/></figure>\n\n\n\n<h2>Tabs Badges</h2>\n\n\n\n<p>It is an attribute that contains a&nbsp;<strong>number</strong>&nbsp;or any other&nbsp;<strong>characters</strong>. It can be used as a&nbsp;<strong>notification</strong>&nbsp;which tells that there is an additional item associated with an element and indicates how many items are associated.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar>  \n      &lt;ion-title>  \n        Tabs Example  \n      &lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n       \n  &lt;ion-content class=\"padding\">  \n    &lt;ion-tabs>  \n      &lt;ion-tab-bar slot=\"bottom\" color=\"light\">  \n        &lt;ion-tab-button tab=\"contact\">  \n          &lt;ion-icon name=\"contacts\">&lt;/ion-icon>  \n          &lt;ion-label>Contact&lt;/ion-label>  \n          &lt;ion-badge>6&lt;/ion-badge>  \n        &lt;/ion-tab-button>  \n          \n        &lt;ion-tab-button tab=\"map\">  \n          &lt;ion-icon name=\"map\">&lt;/ion-icon>  \n          &lt;ion-label>Map&lt;/ion-label>  \n        &lt;/ion-tab-button>  \n          \n        &lt;ion-tab-button tab=\"mail\">  \n          &lt;ion-icon name=\"mail\">&lt;/ion-icon>  \n          &lt;ion-label>Mail&lt;/ion-label>  \n          &lt;ion-badge>10&lt;/ion-badge>  \n        &lt;/ion-tab-button>  \n      &lt;/ion-tab-bar>  \n    &lt;/ion-tabs>  \n  &lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-tabs3.png\" alt=\"\" class=\"wp-image-1243\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic tabs are mainly used for&nbsp;mobile navigation. The styling of Ionic tabs is different for different operating systems.&nbsp;For example,&nbsp;it is placed at the top of the screen in android devices while it is placed at the bottom in iOS devices. We can access the Ionic tabs by using the standard&nbsp;&lt;ion-tabs&gt;&nbsp;component. This component works as [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1709,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1240"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1240"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1240/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1709"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1240"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1240"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1240"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1245,
    "date": "2020-05-17T08:44:24",
    "date_gmt": "2020-05-17T08:44:24",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1245"
    },
    "modified": "2020-05-17T08:44:24",
    "modified_gmt": "2020-05-17T08:44:24",
    "slug": "toast",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/toast/",
    "title": {
      "rendered": "Toast"
    },
    "content": {
      "rendered": "\n<p>A toast is a type of&nbsp;<strong>notification</strong>&nbsp;that commonly used in modern applications. You can use it to display the system message, or you can use it to provide feedback about an operation. The toast notification appears on top of the app&#8217;s content. It can be&nbsp;<strong>dismissed</strong>&nbsp;by the app to resume user interaction with the app.</p>\n\n\n\n<h2>Toast Controller</h2>\n\n\n\n<p>The toast controller is a component, which is used to create a toast component. The toast controller uses&nbsp;<strong>two methods</strong>&nbsp;to create toast notification. These methods are:</p>\n\n\n\n<ol><li>Create</li><li>Dismiss</li></ol>\n\n\n\n<h3>Create</h3>\n\n\n\n<p>It is used to create a toast overlay. All of the toast options should be passed inside the create method. The message property used to display the&nbsp;<strong>message</strong>. If you want to display the close button on the toast, set the&nbsp;<strong>showCloseButton</strong>&nbsp;option to&nbsp;<strong>true</strong>.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>The following example uses the toast controller method&nbsp;<strong>create()</strong>&nbsp;to show the toast notification. In the HTML file, the button component calls the&nbsp;<strong>openToast()</strong>&nbsp;function to display the toast notification. The logic of the function is created in the&nbsp;<strong>ts file</strong>&nbsp;of the application. The openToast() function also contains the property&#8217;s&nbsp;<strong>message</strong>&nbsp;and&nbsp;<strong>duration</strong>. The message property will display the notification message, and duration property dismissed the notification after a specified time.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n    &lt;ion-toolbar color=\"light\">  \n      &lt;ion-title>Ionic Toast&lt;/ion-title>  \n    &lt;/ion-toolbar>  \n  &lt;/ion-header>  \n    \n&lt;ion-content fullscreen class=\"ion-padding\">  \n  &lt;h1>Toast Notification&lt;/h1>  \n  &lt;br>  \n  &lt;ion-button (click)=\"openToast()\" expand=\"block\">Show Toast&lt;/ion-button>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { ToastController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public toastCtrl: ToastController) { }  \n  \n  async openToast() {  \n    const toast = await this.toastCtrl.create({  \n      message: 'It is a Toast Notification',  \n      duration: 5000  \n    });  \n    toast.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the app, it will give the following output.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toast-output1.png\" alt=\"\" class=\"wp-image-1246\"/></figure>\n\n\n\n<p>Now, click on the&nbsp;<strong>Show Toast</strong>&nbsp;button, you will get the notification message. The notification message dismisses after&nbsp;<strong>five seconds</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toast-output2.png\" alt=\"\" class=\"wp-image-1247\"/></figure>\n\n\n\n<h3>Dismiss</h3>\n\n\n\n<p>The toast notification can be dismissed automatically after a specific amount of time by setting the number of milliseconds to display in the duration of the toast option. If you set the &#8220;<strong>showCloseButton</strong>&#8221; to&nbsp;<strong>true</strong>, the close button will dismiss the toast. If you want to dismiss the toast after creation, call the&nbsp;<strong>dismiss()</strong>&nbsp;method.</p>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<p>In this file, we are going to use the&nbsp;<strong>dismiss</strong>&nbsp;method. The dismiss method disappears the toast notification as soon as you click on the&nbsp;<strong>hide button</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { ToastController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public toastCtrl: ToastController) { }  \n  \n  async openToast() {  \n    const toast = await this.toastCtrl.create({  \n      message: 'It is a Toast Notification',  \n      showCloseButton: true,  \n      closeButtonText: 'hide',  \n    });  \n    toast.present();  \n    toast.onDidDismiss().then((val) => {  \n      console.log('Toast Dismissed');  \n    });  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you execute the above Ionic app, it will give the following output. Now, click on the&nbsp;<strong>Show Toast button</strong>, the notification message appears at the bottom. Click the hide&nbsp;<strong>button</strong>, the toast notification will be disappeared, and the corresponding message displayed in the&nbsp;<strong>console</strong>.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toast-output3.png\" alt=\"\" class=\"wp-image-1248\"/></figure>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toast-output4.png\" alt=\"\" class=\"wp-image-1249\"/></figure>\n\n\n\n<h2>Positioning</h2>\n\n\n\n<p>You can position the toast notification at the top, bottom, middle of the viewport. The value of the&nbsp;<strong>position attributes</strong>&nbsp;can be set inside the create method. The position values are top,&nbsp;<strong>bottom</strong>, and&nbsp;<strong>middle</strong>. By default, the position of the toast notification displays at the bottom of the viewport.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>In the following example, we are going to see the use of position properties. Here, the position of the toast notification is set in the middle.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { ToastController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public toastCtrl: ToastController) { }  \n  \n  async openToast() {  \n    const toast = await this.toastCtrl.create({  \n      message: 'It is a Toast Notification',  \n      animated: false,  \n      showCloseButton: true,  \n      closeButtonText: 'hide',  \n      position: 'middle',  \n    });  \n    toast.present();  \n    toast.onDidDismiss().then((val) => {  \n      console.log('Toast Dismissed');  \n    });  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>When you run the above code snippets, you will get the output. Next, click on the button, you will get the following screen. Here, you can see the toast notification displays in the middle.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toast-output5.png\" alt=\"\" class=\"wp-image-1250\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A toast is a type of&nbsp;notification&nbsp;that commonly used in modern applications. You can use it to display the system message, or you can use it to provide feedback about an operation. The toast notification appears on top of the app&#8217;s content. It can be&nbsp;dismissed&nbsp;by the app to resume user interaction with the app. Toast Controller [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1710,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1245"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1245"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1245/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1710"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1245"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1245"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1245"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1252,
    "date": "2020-05-17T08:46:18",
    "date_gmt": "2020-05-17T08:46:18",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1252"
    },
    "modified": "2020-05-17T08:46:18",
    "modified_gmt": "2020-05-17T08:46:18",
    "slug": "toggle",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/toggle/",
    "title": {
      "rendered": "Toggle"
    },
    "content": {
      "rendered": "\n<p>The Ionic toggle is a type of input component which holds a Boolean value. It changes the state of a single option. It allows the user to switch a setting&nbsp;<strong>on</strong>&nbsp;or&nbsp;<strong>off</strong>&nbsp;by pressing or swiping them. It can also be checked programmatically by using the&nbsp;<strong>checked</strong>&nbsp;property. You can also apply different types of attributes such as&nbsp;<strong>disabled</strong>, and&nbsp;<strong>value</strong>&nbsp;to the toggle to control its behavior.</p>\n\n\n\n<p>The following example shows how you can use the&nbsp;<strong>&lt;ion-toggle&gt;</strong>&nbsp;component in your Ionic app. Here, we can see the default toggle, checked toggle, and the disabled toggle.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      ToggleApp  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"padding\" color=\"light\">  \n  &lt;ion-item>  \n    &lt;!-- Default Toggle -->  \n    &lt;ion-label>Peter&lt;/ion-label>  \n    &lt;ion-toggle>&lt;/ion-toggle>  \n  &lt;/ion-item>  \n  &lt;ion-item>  \n    &lt;!-- Disabled Toggle -->  \n    &lt;ion-label>Robert&lt;/ion-label>  \n    &lt;ion-toggle disabled>&lt;/ion-toggle>  \n  &lt;/ion-item>  \n    &lt;ion-item>  \n      &lt;!-- Checked Toggle -->  \n      &lt;ion-label>Johnny&lt;/ion-label>  \n      &lt;ion-toggle checked>&lt;/ion-toggle>  \n    &lt;/ion-item>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toggle-output1.png\" alt=\"\" class=\"wp-image-1253\"/></figure>\n\n\n\n<h2>Styling the Toggle</h2>\n\n\n\n<p>The styling of toggle elements is very easy. It uses all the colors that are available in the Ionic framework. The following example shows the use of different colors with list and toggle elements.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      ToggleApp  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"padding\" color=\"light\" fullscren>  \n  &lt;!-- Styling Toggles in a List -->  \n  &lt;ion-list>  \n    &lt;ion-item>  \n      &lt;ion-label>Blueberry&lt;/ion-label>  \n      &lt;ion-toggle slot=\"end\" name=\"blueberry\" checked>&lt;/ion-toggle>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item>  \n      &lt;ion-label>Apple&lt;/ion-label>  \n      &lt;ion-toggle slot=\"end\" name=\"apple\" color=\"secondary\">&lt;/ion-toggle>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item>  \n      &lt;ion-label>Kiwi&lt;/ion-label>  \n      &lt;ion-toggle slot=\"end\" name=\"kiwi\" color=\"success\" checked>&lt;/ion-toggle>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item>  \n      &lt;ion-label>Orange&lt;/ion-label>  \n      &lt;ion-toggle slot=\"end\" name=\"banana\" color=\"warning\">&lt;/ion-toggle>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item>  \n      &lt;ion-label>Cantaloupe&lt;/ion-label>  \n      &lt;ion-toggle slot=\"end\" name=\"cantaloupe\" color=\"danger\" checked>&lt;/ion-toggle>  \n    &lt;/ion-item>  \n  \n    &lt;ion-item>  \n      &lt;ion-label>Blackberry&lt;/ion-label>  \n      &lt;ion-toggle slot=\"end\" name=\"blackberry\" color=\"dark\">&lt;/ion-toggle>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toggle-output2.png\" alt=\"\" class=\"wp-image-1254\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The Ionic toggle is a type of input component which holds a Boolean value. It changes the state of a single option. It allows the user to switch a setting&nbsp;on&nbsp;or&nbsp;off&nbsp;by pressing or swiping them. It can also be checked programmatically by using the&nbsp;checked&nbsp;property. You can also apply different types of attributes such as&nbsp;disabled, and&nbsp;value&nbsp;to the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1711,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1252"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1252"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1252/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1711"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1252"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1252"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1252"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1256,
    "date": "2020-05-17T08:48:26",
    "date_gmt": "2020-05-17T08:48:26",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1256"
    },
    "modified": "2020-05-17T08:48:26",
    "modified_gmt": "2020-05-17T08:48:26",
    "slug": "toolbar-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/toolbar-2/",
    "title": {
      "rendered": "Toolbar"
    },
    "content": {
      "rendered": "\n<p>The toolbar is a generic bar which is used in an app as a&nbsp;<strong>header</strong>, sub-header,&nbsp;<strong>footer</strong>, or sub-footer. It is positioned above or below the content. You can add more than one toolbar in your page, and the&nbsp;<strong>&lt;ion-content&gt;</strong>&nbsp;will adjust it accordingly. When the toolbar is placed inside the&nbsp;<strong>&lt;ion-header&gt;</strong>, it will be fixed at the top of the content. On the other hand, when it is placed inside the&nbsp;<strong>&lt;ion-footer&gt;</strong>, it will be fixed at the bottom of the content. If the content is&nbsp;<strong>full-screen</strong>, it will scroll behind a toolbar in a header or footer. If the toolbar is placed within an &lt;ion-content&gt;, it will scroll with the content.</p>\n\n\n\n<p>The Ionic Toolbar contains the following component:</p>\n\n\n\n<h3>Ionic Header</h3>\n\n\n\n<p>It is a parent component which holds the toolbar component. The&nbsp;elements must be one of the top three root elements of a page.</p>\n\n\n\n<h3>Ionic Footer</h3>\n\n\n\n<p>It is a root component which sits at the bottom of the page. The&nbsp;can be the wrapper of the&nbsp;which makes sure that the content area is sized correctly.</p>\n\n\n\n<h3>Ionic Title</h3>\n\n\n\n<p>It is a component which sets the title of the toolbar.</p>\n\n\n\n<h3>Ionic Buttons</h3>\n\n\n\n<p>It is a container element, which can be placed inside of the toolbar using an attribute named slot. The slot can contain start and end properties.</p>\n\n\n\n<h3>Ionic back buttons</h3>\n\n\n\n<p>The back button is used to navigate back in the app&#8217;s history upon click. It is smart in knowing what to render based on the mode and when to show content based on the navigation stack.</p>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>This example shows you the use of header and footer in the toolbar.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Toolbar&lt;/ion-title>  \n    &lt;ion-buttons slot=\"primary\">  \n      &lt;ion-button>  \n        &lt;ion-icon slot=\"icon-only\" name=\"star\">&lt;/ion-icon>  \n      &lt;/ion-button>     \n    &lt;/ion-buttons>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>&lt;/ion-content>  \n  \n&lt;ion-footer>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>Footer&lt;/ion-title>  \n    &lt;ion-buttons slot=\"primary\">  \n      &lt;ion-button>  \n        &lt;ion-icon slot=\"icon-only\" name=\"search\">&lt;/ion-icon>  \n      &lt;/ion-button>  \n    &lt;/ion-buttons>  \n  &lt;/ion-toolbar>  \n&lt;/ion-footer>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toolbar-output1.png\" alt=\"\" class=\"wp-image-1257\"/></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>This example shows you the use of&nbsp;inside&nbsp;element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-title>ToolbarInContent&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content fullscreen>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>Default&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n  \n  &lt;ion-toolbar color=\"primary\">  \n    &lt;ion-title>Primary&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n  \n  &lt;ion-toolbar color=\"secondary\">  \n    &lt;ion-title>Secondary&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n  \n  &lt;ion-toolbar color=\"success\">  \n    &lt;ion-title>Success&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n  \n  &lt;ion-toolbar color=\"warning\">  \n    &lt;ion-title>Warning&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n  \n  &lt;ion-toolbar>  \n    &lt;ion-buttons slot=\"secondary\">  \n      &lt;ion-button>Messages (1)&lt;/ion-button>  \n    &lt;/ion-buttons>  \n  \n    &lt;ion-title>Buttons&lt;/ion-title>  \n  \n    &lt;ion-buttons slot=\"primary\">  \n      &lt;ion-button>Log Out&lt;/ion-button>  \n    &lt;/ion-buttons>  \n  &lt;/ion-toolbar>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toolbar-output2.png\" alt=\"\" class=\"wp-image-1258\"/></figure>\n\n\n\n<h3>Example</h3>\n\n\n\n<p>This example shows you the use of&nbsp;and&nbsp;element with&nbsp;element.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar color=\"light\">  \n    &lt;ion-searchbar (input)=\"getItems($event)\">&lt;/ion-searchbar>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;ion-toolbar>  \n    &lt;ion-segment>  \n      &lt;ion-segment-button value=\"new\">  \n        ON  \n      &lt;/ion-segment-button>  \n      &lt;ion-segment-button value=\"hot\">  \n        OFF  \n      &lt;/ion-segment-button>  \n    &lt;/ion-segment>  \n  &lt;/ion-toolbar>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-toolbar-output3.png\" alt=\"\" class=\"wp-image-1259\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>The toolbar is a generic bar which is used in an app as a&nbsp;header, sub-header,&nbsp;footer, or sub-footer. It is positioned above or below the content. You can add more than one toolbar in your page, and the&nbsp;&lt;ion-content&gt;&nbsp;will adjust it accordingly. When the toolbar is placed inside the&nbsp;&lt;ion-header&gt;, it will be fixed at the top of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1712,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1256"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1256"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1256/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1712"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1256"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1256"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1256"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1261,
    "date": "2020-05-17T09:20:47",
    "date_gmt": "2020-05-17T09:20:47",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1261"
    },
    "modified": "2020-05-17T09:20:47",
    "modified_gmt": "2020-05-17T09:20:47",
    "slug": "navigation-and-routing",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/navigation-and-routing/",
    "title": {
      "rendered": "Navigation and Routing"
    },
    "content": {
      "rendered": "\n<p>Navigation means how a user can move between different pages in the ionic application. In Ionic 4, the navigation has received many changes. For example, instead of using the Ionics own&nbsp;<strong>navController</strong>, the v4 is able to integrate with the official&nbsp;<strong>Angular Router</strong>. It provides more consistent routing experience into the whole app. The Angular Router is the most important library in the Angular application. If it is not available, the app cannot maintain its navigation state on browser reloads. Thus, with the Ionic framework and Angular Router, you can create rich applications that are linkable and have rich animation.</p>\n\n\n\n<p>Traditional websites use linear history, where the user navigates to a required page and can press the&nbsp;<strong>Back button</strong>&nbsp;to navigate back. But, in Ionic Framework, applications can take this by allowing parallel navigation. It means that it has multiple navigation stacks and can exchange them at any time.</p>\n\n\n\n<p>The latest version of Ionic uses a&nbsp;<strong>navigation stack</strong>&nbsp;for implementing navigation between the pages. It can simply work as a stack of pages, where one page id on top of another page. As we know, the stack can access only the top element. Ionic has a similar concept where you can only view the page on top of the navigation stack. If you want to navigate to another page, you need to do one of these two actions:</p>\n\n\n\n<ul><li><strong>Push:</strong>&nbsp;Push the page on the stack. It means putting the element at the top. So, when you navigate to a page, you are pushing the page on top of the stack.</li><li><strong>Pop:</strong>&nbsp;Pop a page until your target page becomes on the top. But, it is necessary to have your page on the navigation stack, which you have navigated to it before. Hence, when you navigate from a page, you are popping the page from the top of the stack.</li></ul>\n\n\n\n<p>Let us see step by step how we can navigate between different pages in the Ionic application.</p>\n\n\n\n<h3>Case 1</h3>\n\n\n\n<p>The following example explains the basic navigation in the application.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Create a&nbsp;<strong>new project</strong>.</p>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Create a&nbsp;<strong>new page</strong>. This page is used for navigation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic g page animals  </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;The newly created page automatically added its path into the&nbsp;<strong>app-routing.module.ts</strong>&nbsp;file as below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{ path: 'animals', loadChildren: './animals/animals.module#AnimalsPageModule' }{ path: 'animals', loadChildren: './animals/animals.module#AnimalsPageModule' }  </code></pre>\n\n\n\n<p>In the&nbsp;<strong>app.component.html</strong>, the&nbsp;<strong>&lt;ion-router-outlet&gt;</strong>&nbsp;component is responsible for rendering the page in the application. It is specifically used for ionic routing, which works the same as a regular angular-router component.</p>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;After creating the page, open the&nbsp;<strong>home.page.html</strong>&nbsp;file and add the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Ionic Navigation  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;div class=\"ion-padding\">  \n    &lt;p>The world is your oyster.&lt;/p>  \n    &lt;ion-button href=\"/animals\">ANIMALS&lt;/ion-button>  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;Now, run the project. The following screen appears.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-navigation-and-routing.png\" alt=\"\" class=\"wp-image-1262\"/></figure>\n\n\n\n<p>When you click on the&nbsp;<strong>Animals button</strong>, you will navigate to the Animals page. It can be shown in the below screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-navigation-and-routing2.png\" alt=\"\" class=\"wp-image-1263\"/></figure>\n\n\n\n<h3>Case 2</h3>\n\n\n\n<p>The user can also navigate between pages in a&nbsp;<strong>programmatic way</strong>, which can be understood form the below example.</p>\n\n\n\n<p><strong>Step-1:</strong>&nbsp;Add the following button in the&nbsp;<strong>home.page.html</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button (click)=\"go()\">Go&lt;/ion-button>  </code></pre>\n\n\n\n<p><strong>Step-2:</strong>&nbsp;Open the&nbsp;<strong>home.page.ts</strong>&nbsp;file and insert the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { Router } from '@angular/router';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(private router: Router) {}  \n  \n  go() {  \n    this.router.navigate(&#91;'animals']);  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;Open the&nbsp;<strong>animals.page.html</strong>&nbsp;and add the following button to navigate on the previous page.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-buttons slot=\"start\" (click)=\"goBack()\">Back&lt;/ion-buttons>  \n</code></pre>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;Open the&nbsp;<strong>animals.page.ts</strong>&nbsp;file and insert the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from '@angular/core';  \nimport { Router } from '@angular/router';  \n  \n@Component({  \n  selector: 'app-animals',  \n  templateUrl: './animals.page.html',  \n  styleUrls: &#91;'./animals.page.scss'],  \n})  \nexport class AnimalsPage implements OnInit {  \n  \n  constructor(private router: Router) { }  \n  \n  ngOnInit() {  \n  }  \n  goBack() {  \n    this.router.navigate(&#91;'home']);  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;Execute the app. The following screen appears.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-navigation-and-routing3.png\" alt=\"\" class=\"wp-image-1264\"/></figure>\n\n\n\n<p>Now, click on the&nbsp;<strong>Go button</strong>, you will navigate to Animals page. On this page, when you click on the&nbsp;<strong>back button</strong>, the page automatically navigated to the home page.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-navigation-and-routing4.png\" alt=\"\" class=\"wp-image-1265\"/></figure>\n\n\n\n<h3>Case 3</h3>\n\n\n\n<p>The navigation can also perform by using the&nbsp;<strong>URL</strong>. You can understand it with the help of the following example.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Create a new&nbsp;<strong>component</strong>&nbsp;inside the&nbsp;<strong>animals page</strong>. To create a component, execute the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic g c animals/profile  </code></pre>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Next, open the&nbsp;<strong>animals.module.ts</strong>&nbsp;file and import the&nbsp;<strong>ProfileComponent</strong>. Then, add the route for the Profile component along with&nbsp;<strong>id</strong>. Add the following code snippet in the&nbsp;<strong>animals.module.ts</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';  \nimport { CommonModule } from '@angular/common';  \nimport { FormsModule } from '@angular/forms';  \nimport { Routes, RouterModule } from '@angular/router';  \n  \nimport { IonicModule } from '@ionic/angular';  \n  \nimport { AnimalsPage } from './animals.page';  \nimport { ProfileComponent } from './profile/profile.component';  \n  \nconst routes: Routes = &#91;  \n  {  \n    path: '',  \n    component: AnimalsPage  \n  },  \n  {  \n    path: ':id',  \n    component: ProfileComponent  \n  }  \n];  \n  \n@NgModule({  \n  imports: &#91;  \n    CommonModule,  \n    FormsModule,  \n    IonicModule,  \n    RouterModule.forChild(routes)  \n  ],  \n  declarations: &#91;AnimalsPage, ProfileComponent]  \n})  \nexport class AnimalsPageModule {}  \n</code></pre>\n\n\n\n<p><strong>Step-3:</strong>&nbsp;Open the&nbsp;<strong>home.page.html</strong>&nbsp;file and add the following button. Here, we are going to pass some&nbsp;<strong>random id</strong>&nbsp;in the path for routing.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-button href=\"/animals/someid\">ANIMALS&lt;/ion-button> </code></pre>\n\n\n\n<p><strong>Step-4:</strong>&nbsp;Open the&nbsp;<strong>home.page.ts</strong>&nbsp;file and insert the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { Router } from '@angular/router';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(private router: Router) {}  \n  \n  go() {  \n    this.router.navigateByUrl('/animals');  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;Now, execute the app, you will get the following screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-navigation-and-routing5.png\" alt=\"\" class=\"wp-image-1266\"/></figure>\n\n\n\n<p>Click on the&nbsp;<strong>Animals button</strong>, and you will navigate on the&nbsp;<strong>profile</strong>&nbsp;components.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-navigation-and-routing6.png\" alt=\"\" class=\"wp-image-1267\"/></figure>\n\n\n\n<h3>Case 4</h3>\n\n\n\n<p>You can also make the above example more dynamic by extracting the id from the&nbsp;<strong>URL</strong>. To do this, we need to use an angular service called&nbsp;<strong>antivatedRoutes</strong>. The following example explains it more clearly.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Open the&nbsp;<strong>profile.component.ts</strong>&nbsp;file and insert the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component, OnInit } from '@angular/core';  \nimport { ActivatedRoute } from '@angular/router';  \n  \n@Component({  \n  selector: 'app-profile',  \n  templateUrl: './profile.component.html',  \n  styleUrls: &#91;'./profile.component.scss'],  \n})  \nexport class ProfileComponent implements OnInit {  \n  id: any;  \n  \n  constructor(private route: ActivatedRoute) { }  \n  \n  ngOnInit() {  \n    this.id = this.route.snapshot.paramMap.get('id');  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Open the&nbsp;<strong>profile.component.html</strong>&nbsp;file and add the following code. Here, we are going to display the id that will always return the new id passing in the URL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;p>  \n  Profile components Routing Works Great! for ID {{ id }}  \n&lt;/p>  </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;Now, execute the app, you will get the following output. Every time you navigate to a different URL, you will get the different id displayed in the UI.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-navigation-and-routing7.png\" alt=\"\" class=\"wp-image-1268\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Navigation means how a user can move between different pages in the ionic application. In Ionic 4, the navigation has received many changes. For example, instead of using the Ionics own&nbsp;navController, the v4 is able to integrate with the official&nbsp;Angular Router. It provides more consistent routing experience into the whole app. The Angular Router is [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1713,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1261"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1261"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1261/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1713"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1261"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1261"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1261"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1270,
    "date": "2020-05-18T03:28:25",
    "date_gmt": "2020-05-18T03:28:25",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1270"
    },
    "modified": "2020-05-18T03:28:25",
    "modified_gmt": "2020-05-18T03:28:25",
    "slug": "camera",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/camera/",
    "title": {
      "rendered": "Camera"
    },
    "content": {
      "rendered": "\n<p>In this section, we are going to see an example to access the native device camera based on Angular.</p>\n\n\n\n<p>To access or integrate the native device features, you need a Cordova plugin. The Ionic Native acts as a wrapper for the Cordova plugin that provides integration with Angular and TypeScript.</p>\n\n\n\n<p>The Ionic native camera plugin allows us to take a picture by using the device camera. Let us see step by step to learn how you can access the camera to take a photo in Ionic.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Create a new project.</p>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Next, navigate to the project and install the following camera plugin using the below command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd myApp  \n$ ionic cordova plugin add cordova-plugin-camera  \n$ npm install @ionic-native/camera  </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;Import the camera plugin in the&nbsp;<strong>app.module.ts</strong>&nbsp;file and also include the plugin in the providers as below.</p>\n\n\n\n<p><strong>App.module.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';  \nimport { BrowserModule } from '@angular/platform-browser';  \nimport { RouteReuseStrategy } from '@angular/router';  \n  \nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';  \nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';  \nimport { StatusBar } from '@ionic-native/status-bar/ngx';  \n  \nimport { AppComponent } from './app.component';  \nimport { AppRoutingModule } from './app-routing.module';  \nimport { Camera } from '@ionic-native/camera/ngx';  \nimport { WebView } from '@ionic-native/ionic-webview/ngx';  \n  \n@NgModule({  \n  declarations: &#91;AppComponent],  \n  entryComponents: &#91;],  \n  imports: &#91;BrowserModule, IonicModule.forRoot(), AppRoutingModule],  \n  providers: &#91;  \n    StatusBar,  \n    SplashScreen,  \n    Camera,  \n    WebView,  \n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }  \n  ],  \n  bootstrap: &#91;AppComponent]  \n})  \nexport class AppModule {}  </code></pre>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;Open the&nbsp;<strong>home.page.ts</strong>&nbsp;file and import the camera plugin, then create an object reference by using the constructor. Now, create a function for capturing the photo. The following code snippet gives you a detailed explanation.</p>\n\n\n\n<p><strong>Home.page.ts</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { Camera, CameraOptions } from '@ionic-native/camera/ngx';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  \n  capturedSnapURL: string;  \n  \n  cameraOptions: CameraOptions = {  \n    quality: 20,  \n    destinationType: this.camera.DestinationType.DATA_URL,  \n    encodingType: this.camera.EncodingType.JPEG,  \n    mediaType: this.camera.MediaType.PICTURE  \n  };  \n  \n  constructor(private camera: Camera) {}  \n  \n  takeSnap() {  \n    this.camera.getPicture(this.cameraOptions).then((imageData) => {  \n      // this.camera.DestinationType.FILE_URI gives file URI saved in local  \n      // this.camera.DestinationType.DATA_URL gives base64 URI  \n  \n      const base64Image = 'data:image/jpeg;base64,' + imageData;  \n      this.capturedSnapURL = base64Image;  \n    }, (err) => {  \n  \n      console.log(err);  \n      // Handle error  \n    });  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;After creating a function, open the&nbsp;<strong>home.page.html</strong>&nbsp;file. In this file, you need to create a&nbsp;<strong>button</strong>&nbsp;and&nbsp;<strong>click event</strong>&nbsp;to use the function defined in the&nbsp;<strong>home.page.ts</strong>&nbsp;file.</p>\n\n\n\n<p><strong>Home.page.html</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>Ionic Camera&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content>  \n  &lt;div class=\"ion-padding\">  \n    &lt;ion-button (click)=\"takeSnap()\">  \n      Click Image  \n    &lt;/ion-button>  \n    &lt;img &#91;src]=\"capturedSnapURL\" />  \n  &lt;/div>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Step 6:</strong>&nbsp;Now, you need to add the target&nbsp;<strong>platform</strong>&nbsp;to deploy the app. You can use your phone to run and test the app. For this, you need to install the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic cordova platform add android  \n$ ionic cordova run android --aot  </code></pre>\n\n\n\n<p>If you want to test your app in the&nbsp;<strong>browser</strong>, run the below command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic cordova run browser  </code></pre>\n\n\n\n<p>You will get the output, click the button, the device camera will be open. Now you can take a photo or picture.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-camera.png\" alt=\"\" class=\"wp-image-1271\"/></figure>\n\n\n\n<h2>Camera Option</h2>\n\n\n\n<p>There are several options available that can be used with the camera. These options are given in the following table.</p>\n\n\n\n<table><tbody><tr><th>Parameter</th><th>Type</th><th>Description</th></tr><tr><td>quality Number</td><td>It</td><td>is used to set the quality of the image in the range of 0-100.</td></tr><tr><td>destinationType</td><td>Number</td><td>It is used to choose the format of the image.</td></tr><tr><td>sourceType</td><td>Number</td><td>It is used to set the source of the image.</td></tr><tr><td>encodingType</td><td>Number</td><td>It is used to choose the encoding type of the image. The value zero will set JPEG, and value one will set the PNG image format.</td></tr><tr><td>allowEdit</td><td>Boolean</td><td>It is used for allowing editing of the image before selection.</td></tr><tr><td>targetHeight</td><td>Number</td><td>It is used for scaling image width in pixels.</td></tr><tr><td>targetWidth</td><td>Number</td><td>It is used for scaling image width in pixels.</td></tr><tr><td>cameraDirection</td><td>Number</td><td>It is used to set the camera to use front or back facing.</td></tr><tr><td>popoverOptions</td><td>String</td><td>IOS-only options that specify popover location on iPad.</td></tr><tr><td>mediaType</td><td>String</td><td>It is used to set the media type.</td></tr><tr><td>correctOrientation</td><td>Boolean</td><td>It is used for correcting the orientation of the device during capturing.</td></tr><tr><td>saveToPhotoAlbum</td><td>Boolean</td><td>It is used for saving images to photo album on the device.</td></tr></tbody></table>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this section, we are going to see an example to access the native device camera based on Angular. To access or integrate the native device features, you need a Cordova plugin. The Ionic Native acts as a wrapper for the Cordova plugin that provides integration with Angular and TypeScript. The Ionic native camera plugin [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1714,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1270"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1270"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1270/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1714"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1270"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1270"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1270"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1273,
    "date": "2020-05-18T03:31:48",
    "date_gmt": "2020-05-18T03:31:48",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1273"
    },
    "modified": "2020-05-18T03:31:48",
    "modified_gmt": "2020-05-18T03:31:48",
    "slug": "geolocation-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/geolocation-2/",
    "title": {
      "rendered": "Geolocation"
    },
    "content": {
      "rendered": "\n<p>Today, location plays a vital role in mobile applications. The geolocation plugin gives information about the device locations, such as&nbsp;<strong>latitude</strong>&nbsp;and&nbsp;<strong>longitude</strong>. Some of the common sources to find the location information are&nbsp;<strong>GPS</strong>&nbsp;(Global Positioning System) and location inferred from&nbsp;<strong>network signals</strong>, such as IP address, Wi-Fi and Bluetooth MAC addresses, RFID, and GSM/CDMA cell IDs.</p>\n\n\n\n<p>The most popular mobile application, such as WhatsApp, Facebook, and Instagram, uses geolocation to share your location instead of explaining the direction. Ola and Uber&#8217;s app provides riding services based on geolocation.</p>\n\n\n\n<p>The geolocation plugin is based on the&nbsp;<strong>W3C Geolocation API Specification</strong>, which only executes on devices that do not provide an implementation. In this tutorial, we are going step by step to get the current location by using the geolocation plugin.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Create a&nbsp;<strong>new project</strong>. </p>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Next, navigate to the project and install the following geolocation plugin using the below command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd myApp  \n$ ionic cordova plugin add cordova-plugin-geolocation  \n$ npm install @ionic-native/geolocation  </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;Import the geolocation plugin in the&nbsp;<strong>app.module.ts</strong>&nbsp;file and also include the plugin in the providers as below. It is a mandatory step. If you skip this step, you will find an error like no provider for geolocation. You can understand it from the following code snippet.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';  \nimport { BrowserModule } from '@angular/platform-browser';  \nimport { RouteReuseStrategy } from '@angular/router';  \n  \nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';  \nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';  \nimport { StatusBar } from '@ionic-native/status-bar/ngx';  \n  \nimport { AppComponent } from './app.component';  \nimport { AppRoutingModule } from './app-routing.module';  \nimport { Geolocation } from '@ionic-native/geolocation/ngx';  \nimport { WebView } from '@ionic-native/ionic-webview/ngx';  \n  \n@NgModule({  \n  declarations: &#91;AppComponent],  \n  entryComponents: &#91;],  \n  imports: &#91;BrowserModule, IonicModule.forRoot(), AppRoutingModule],  \n  providers: &#91;  \n    StatusBar,  \n    SplashScreen,  \n    Geolocation,  \n    WebView,  \n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }  \n  ],  \n  bootstrap: &#91;AppComponent]  \n})  \nexport class AppModule {}  </code></pre>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;Open the&nbsp;<strong>home.page.ts</strong>&nbsp;file and import the geolocation plugin, then create an object reference for the geolocation class by using the constructor. Now, create a function to get the current location. The following code snippet gives you a detailed explanation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { Geolocation } from '@ionic-native/geolocation/ngx';  \nimport { LoadingController } from '@ionic/angular';  \nimport { AlertController } from '@ionic/angular';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  lati: any = '';  \n  longi: any = '';  \n  constructor(private geolocation: Geolocation, public loadingController: LoadingController, public alertController: AlertController) {  \n  \n  }  \n  async getCurrentLocation() {  \n    const loading = await this.loadingController.create({  \n      message: 'Please wait...',  \n      });  \n    await loading.present();  \n  \n    this.geolocation.getCurrentPosition({maximumAge: 1000, timeout: 5000, enableHighAccuracy: true }).then((resp) => {  \n      // resp.coords.latitude  \n      // resp.coords.longitude  \n      loading.dismiss();  \n      this.lati = resp.coords.latitude;  \n      this.longi = resp.coords.longitude;  \n      }, er => {  \n        // alert(\"error getting location\")  \n        loading.dismiss();  \n        this.showLoader('Can not retrieve Location');  \n      }).catch((error) => {  \n      // alert('Error getting location'+JSON.stringify(error));  \n      loading.dismiss();  \n      this.showLoader('Error getting location - ' + JSON.stringify(error));  \n      });  \n  }  \n  \n async showLoader(msg) {  \n    const alert = await this.alertController.create({  \n      message: msg,  \n      buttons: &#91;'OK']  \n    });  \n  \n    await alert.present();  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;After creating a function, open the&nbsp;<strong>home.page.html</strong>&nbsp;file. In this file, you need to create a&nbsp;<strong>button</strong>&nbsp;and&nbsp;<strong>click event</strong>&nbsp;to use the function defined in the&nbsp;<strong>home.page.ts</strong>&nbsp;file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>Ionic Geolocation&lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\">  \n  &lt;ion-button (click)=\"getCurrentLocation()\" expand=\"block\">Get Location&lt;/ion-button>  \n  &lt;ion-list>  \n    &lt;ion-list-header>  \n      &lt;ion-label>Location Information&lt;/ion-label>  \n    &lt;/ion-list-header>  \n    &lt;ion-item>  \n      &lt;ion-label>Latitue&lt;/ion-label>  \n      &lt;ion-badge slot=\"end\">{{lati}}&lt;/ion-badge>  \n    &lt;/ion-item>  \n    &lt;ion-item>  \n      &lt;ion-label>longitude&lt;/ion-label>  \n      &lt;ion-badge slot=\"end\">{{longi}}&lt;/ion-badge>  \n    &lt;/ion-item>  \n  &lt;/ion-list>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Step 6:</strong>&nbsp;Now, you need to add the target&nbsp;<strong>platform</strong>&nbsp;to deploy the app. You can use your phone to run and test the app. For this, you need to install the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic cordova platform add android  \n$ ionic cordova run android --aot  </code></pre>\n\n\n\n<p>If you want to test your app in the&nbsp;<strong>browser</strong>, run the below command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ ionic serve  </code></pre>\n\n\n\n<p><strong>Step 7:</strong>&nbsp;When you execute the app, you will get the output as below image.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-geolocation.png\" alt=\"\" class=\"wp-image-1274\"/></figure>\n\n\n\n<p>Now, click on the&nbsp;<strong>Get Location button</strong>, you will get the current location of your device in the form of latitude and longitude. It can be shown in the below screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-geolocation2.png\" alt=\"\" class=\"wp-image-1275\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Today, location plays a vital role in mobile applications. The geolocation plugin gives information about the device locations, such as&nbsp;latitude&nbsp;and&nbsp;longitude. Some of the common sources to find the location information are&nbsp;GPS&nbsp;(Global Positioning System) and location inferred from&nbsp;network signals, such as IP address, Wi-Fi and Bluetooth MAC addresses, RFID, and GSM/CDMA cell IDs. The most popular [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1715,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1273"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1273"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1273/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1715"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1273"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1273"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1273"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1277,
    "date": "2020-05-18T03:33:28",
    "date_gmt": "2020-05-18T03:33:28",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1277"
    },
    "modified": "2020-05-18T03:33:28",
    "modified_gmt": "2020-05-18T03:33:28",
    "slug": "splash-screen",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/splash-screen/",
    "title": {
      "rendered": "Splash Screen"
    },
    "content": {
      "rendered": "\n<p>A splash screen is similar to a&nbsp;<strong>start screen</strong>&nbsp;or&nbsp;<strong>start-up screen</strong>. It is a graphical control element that consists of a window that contains the image, logo, and current version of the software. It displays while the application or other item is loading. When the loading is complete, the user generally gets another more functional screen. The splash screen is just a display screen that allows users to look something while the hardware is loading to present software to the user. It usually appears when a game or program is launching.</p>\n\n\n\n<p>The common elements of a splash screen contain a&nbsp;<strong>company name</strong>&nbsp;and&nbsp;<strong>logo</strong>&nbsp;or a title that indicates what people will be using. The most excellent example of a splash screen is Microsoft logo on starting a Microsoft operating system.</p>\n\n\n\n<p>Every mobile application must contain an icon and splash screen. Ionic provides an easy solution to add a splash screen that requires minimum work for the developers. In this tutorial, we are going step by step to see the splash screen by using the Cordova splash screen plugin.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Create a&nbsp;<strong>new project</strong>.</p>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Next, navigate to the project and install the following splash screen plugin using the below command. This plugin is responsible for displaying and hiding a splash screen during the application launch.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd myApp  \n$ ionic cordova plugin add cordova-plugin-splashscreen  \n$ npm install @ionic-native/splash-screen  </code></pre>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;If you want to take advantage of Apache Cordova?s Splash Screen plugin, add the following command in your project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cordova plugin add org.apache.cordova.splashscreen  </code></pre>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;Add the following lines to your&nbsp;<strong>config.xml</strong>&nbsp;file. When you add it, your app builds display a splash screen on the application launch for 3000 milliseconds.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;preference name=\"SplashScreen\" value=\"screen\" />  \n&lt;preference name=\"SplashScreenDelay\" value=\"3000\" />  </code></pre>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;Now, you need to add images and icons to the project. You can find the splash screen images in the resource folder of your project.</p>\n\n\n\n<p><strong>Step 6:</strong>&nbsp;When you run the app in your device, you will see a splash screen before the app is started. Here, you will find that a default Ionic Icon is changed.</p>\n\n\n\n<p>The most common splash screen sizes are as follows:</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Platform</th><th>Orientation</th><th>Resolution</th></tr><tr><td>Android</td><td>MDPI Landscape</td><td>480×320</td></tr><tr><td>Android</td><td>MDPI Portrait</td><td>320×480</td></tr><tr><td>Android</td><td>HDPI Landscape</td><td>800×480</td></tr><tr><td>Android</td><td>HDPI Portrait</td><td>480×800</td></tr><tr><td>Android</td><td>XHDPI Landscape</td><td>1280×720</td></tr><tr><td>Android</td><td>XHDPI Portrait</td><td>720×1280</td></tr><tr><td>iPhone</td><td>Retina Portrait</td><td>640×960</td></tr><tr><td>iPhone</td><td>Portrait</td><td>320×480</td></tr><tr><td>iPad</td><td>Retina Portrait</td><td>1536×2048</td></tr><tr><td>iPad</td><td>Portrait</td><td>768×1024</td></tr><tr><td>iPad</td><td>Retina Landscape</td><td>2048×1536</td></tr><tr><td>iPad</td><td>Landscape</td><td>1024×768</td></tr></tbody></table></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>A splash screen is similar to a&nbsp;start screen&nbsp;or&nbsp;start-up screen. It is a graphical control element that consists of a window that contains the image, logo, and current version of the software. It displays while the application or other item is loading. When the loading is complete, the user generally gets another more functional screen. The [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1716,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1277"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1277"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1277/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1716"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1277"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1277"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1277"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1282,
    "date": "2020-05-18T03:41:26",
    "date_gmt": "2020-05-18T03:41:26",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1282"
    },
    "modified": "2020-05-18T03:41:26",
    "modified_gmt": "2020-05-18T03:41:26",
    "slug": "admob",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/admob/",
    "title": {
      "rendered": "AdMob"
    },
    "content": {
      "rendered": "\n<p>AdMob is a Google advertising platform for mobile apps, which makes it easy for developers to earn money from their mobile applications. It provides high-quality monetary ads. It allows developers to promote their apps quickly. It can also maximize the value of every impression by combining global advertiser demand, innovative ad formats, and advanced app monetization technology. It is available for both Android and iOS applications.</p>\n\n\n\n<p>Although the advertisement is not always the best way to earn money, it is the easiest way to earn some money from mobile applications or websites. In this tutorial, we are going to learn how we can add Google AdMob to an Ionic application. Here, we will cover two types of the advertising platform, which are banner ads and interstitial ads.</p>\n\n\n\n<h2>Banner Ads</h2>\n\n\n\n<p>Banner ads display rectangular ads that can be anchored to the top or bottom of the screen. It occupies a portion of an app&#8217;s layout, which can refresh automatically after a specified period of time. It means the users will see a new ad at regular intervals, even they are staying on the same screen in the app.</p>\n\n\n\n<h2>Interstitial Ads</h2>\n\n\n\n<p>Interstitial Ads provide rich interactive full-page ads for users in mobile apps. These types of ads are designed to be placed between the content. It shows static or video ads that can appear at natural breaks or transition points, and creating engaging brand experiences without disrupting the app experience.</p>\n\n\n\n<p>If you want to use advertisements in your app, you need to have an account on Google AdMob. So, if you haven&#8217;t account on the AdMob, first create it on the AdMob. Now, let us see step by step how to use AdMob into the Ionic app.</p>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Create a&nbsp;<strong>new project</strong>. You can skip this step if you already had an Ionic project.</p>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Create a Google AdMob account. To display advertisements in the application, you need to set-up the AdMob account. If you haven&#8217;t created the AdMob account, click here. Now, logged in into the AdMob console. Then, first, you need to add your application as below screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-admob.png\" alt=\"\" class=\"wp-image-1283\"/></figure>\n\n\n\n<p>Once your app is successfully added to Google AdMob, you will get the following screen.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-admob2.png\" alt=\"\" class=\"wp-image-1284\"/></figure>\n\n\n\n<p><strong>Step 3:</strong>&nbsp;Once you create the Ionic App, you have to navigate to your project and install the following AdMob Cordova plugin using the below command. This command will install the Cordova plugin and the Ionic Native package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ cd myIonicApp  \n  \n$ cordova plugin add cordova-plugin-admob-free --save --variable ADMOB_APP_ID=\"&lt;YOUR_ANDROID_ADMOB_APP_ID_AS_FOUND_IN_ADMOB>\"  \n  \n$ npm install @ionic-native/admob-free  </code></pre>\n\n\n\n<p>To find the API id, go to AdMob Console-&gt;App-&gt;your App-&gt; App Setting-&gt;App Info.</p>\n\n\n\n<p><strong>Step 4:</strong>&nbsp;Next, open the&nbsp;<strong>app.module.ts</strong>&nbsp;file and import the AdMob plugin. Also, we need to set up this plugin in the providers as below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { NgModule } from '@angular/core';  \nimport { BrowserModule } from '@angular/platform-browser';  \nimport { RouteReuseStrategy } from '@angular/router';  \n  \nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';  \nimport { SplashScreen } from '@ionic-native/splash-screen/ngx';  \nimport { StatusBar } from '@ionic-native/status-bar/ngx';  \n  \nimport { AppComponent } from './app.component';  \nimport { AppRoutingModule } from './app-routing.module';  \nimport { AdMobFree } from '@ionic-native/admob-free/ngx';  \n  \n@NgModule({  \n  declarations: &#91;AppComponent],  \n  entryComponents: &#91;],  \n  imports: &#91;BrowserModule, IonicModule.forRoot(), AppRoutingModule],  \n  providers: &#91;  \n    StatusBar,  \n    SplashScreen,  \n    AdMobFree,  \n    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy}  \n  ],  \n  bootstrap: &#91;AppComponent]  \n})  \nexport class AppModule {}  </code></pre>\n\n\n\n<p>After adding the AdMob plugin as a provider, we will be able to inject it anywhere that we need in our application.</p>\n\n\n\n<p><strong>Step 5:</strong>&nbsp;Let us create a Banner Advertisement. For this, you need to go to AdMob Console-&gt;yourApp-&gt;AdUnits, then the following screen appears.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-admob3.png\" alt=\"\" class=\"wp-image-1286\"/></figure>\n\n\n\n<p>Now, select Banner and add the following details as like given image.</p>\n\n\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://angular.foobrdigital.com/wp-content/uploads/2020/05/ionic-admob4.png\" alt=\"\" class=\"wp-image-1287\"/></figure>\n\n\n\n<p><strong>Step 6:</strong>&nbsp;Open&nbsp;<strong>home.page.ts</strong>&nbsp;file and add the following code snippets. Once the Banner is created, it will display at the bottom of your application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { AdMobFree, AdMobFreeBannerConfig } from '@ionic-native/admob-free/ngx';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public admob: AdMobFree) {  \n  }  \n  showBanner() {  \n      const bannerConfig: AdMobFreeBannerConfig = {  \n          isTesting: true, // Remove in production  \n          autoShow: true  \n         //id: Your Ad Unit ID goes here  \n          id: 'ca-app-pub-1304665038199161/9978704243'  \n      };  \n      this.admob.banner.config(bannerConfig);  \n      this.admob.banner.prepare().then(() => {  \n          // success  \n      }).catch(e => console.log(e));  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 7:</strong>&nbsp;Next, open&nbsp;<strong>home.page.html</strong>&nbsp;and insert the following code. It is responsible for the user interface.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Ionic AdMob  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\">  \n    &lt;ion-button (click)=\"showBanner()\" expand=\"full\">Show Banner&lt;/ion-button>&lt;br/>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Step 8:</strong>&nbsp;Now, run the app. You will get the ads at the bottom of the application.</p>\n\n\n\n<p><strong>Step 9:</strong>&nbsp;Again, if you want to create ads for the full page, then select Interstitial and add the following code snippets in the&nbsp;<strong>home.page.ts</strong>&nbsp;file. Once the Interstitial is created, it will display on the full screen of your application.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import { Component } from '@angular/core';  \nimport { AdMobFree, AdMobFreeBannerConfig, AdMobFreeInterstitialConfig } from '@ionic-native/admob-free/ngx';  \n  \n@Component({  \n  selector: 'app-home',  \n  templateUrl: 'home.page.html',  \n  styleUrls: &#91;'home.page.scss'],  \n})  \nexport class HomePage {  \n  constructor(public admob: AdMobFree) {  \n  }  \n  showInterstitial() {  \n    const interstitialConfig: AdMobFreeInterstitialConfig = {  \n        isTesting: true, // Remove in production  \n        autoShow: true  \n        //id: Your Ad Unit ID goes here.  \n    };  \n    this.admob.interstitial.config(interstitialConfig);  \n    this.admob.interstitial.prepare().then(() => {  \n        // success  \n    });  \n  }  \n}  </code></pre>\n\n\n\n<p><strong>Step 10:</strong>&nbsp;Next, open&nbsp;<strong>home.page.html</strong>&nbsp;and insert the following code. It is responsible for the user interface.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ion-header>  \n  &lt;ion-toolbar>  \n    &lt;ion-title>  \n      Ionic AdMob  \n    &lt;/ion-title>  \n  &lt;/ion-toolbar>  \n&lt;/ion-header>  \n  \n&lt;ion-content class=\"ion-padding\">  \n    &lt;ion-button (click)=\"showInterstitial()\" expand=\"full\">Show Interstitial&lt;/ion-button>  \n&lt;/ion-content>  </code></pre>\n\n\n\n<p><strong>Step 11:</strong>&nbsp;Now, run the app. You will get the ads on the full screen of the application.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>AdMob is a Google advertising platform for mobile apps, which makes it easy for developers to earn money from their mobile applications. It provides high-quality monetary ads. It allows developers to promote their apps quickly. It can also maximize the value of every impression by combining global advertiser demand, innovative ad formats, and advanced app [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1717,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1282"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1282"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1282/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1717"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1282"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1282"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1282"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1290,
    "date": "2020-05-18T03:43:54",
    "date_gmt": "2020-05-18T03:43:54",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1290"
    },
    "modified": "2020-05-18T03:43:54",
    "modified_gmt": "2020-05-18T03:43:54",
    "slug": "ionic-vs-react-native",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/ionic-vs-react-native/",
    "title": {
      "rendered": "Ionic vs React Native"
    },
    "content": {
      "rendered": "\n<p>Ionic and React Native are the two most common framework to develop mobile apps. Both frameworks have a large community of passionate developers and are used in large enterprises. In this section, we are going to see how Ionic is different from React Native.</p>\n\n\n\n<h2>Ionic</h2>\n\n\n\n<p>Ionic is an open-source UI toolkit for building performant, high-quality&nbsp;<strong>mobile apps, desktop apps,</strong>&nbsp;and progressive&nbsp;<strong>web apps</strong>&nbsp;using web technologies such as HTML, CSS, and JavaScript. It allows developers to build once and run everywhere. It was created by&nbsp;<strong>Max Lynch, Ben Sperry,</strong>&nbsp;and&nbsp;<strong>Adam Bradley</strong>&nbsp;of Drifty Co. in 2013. The first beta version of the Ionic framework was released in&nbsp;<strong>March 2014</strong>.</p>\n\n\n\n<p>The Ionic framework mainly focuses on front-end user experience or UI interaction, which handles all the look and feel of your app. It is easy to learn and can integrate with other libraries or frameworks such as Angular, React, Cordova, etc. Officially, the Ionic framework has integration with&nbsp;<strong>Angular</strong>, but it also provides support for&nbsp;<strong>Vue.js</strong>&nbsp;and&nbsp;<strong>React.js</strong>.</p>\n\n\n\n<p><strong>Advantages of Ionic</strong></p>\n\n\n\n<p>The advantages of the Ionic application are as follows:</p>\n\n\n\n<p><strong>1. Easy to learn</strong></p>\n\n\n\n<p>If the developer has a basic knowledge of CSS, HTML, or JavaScript frameworks, then learning and developing apps using the Ionic framework is very easy.</p>\n\n\n\n<p><strong>2. Easy documentation</strong></p>\n\n\n\n<p>Ionic provides simple, easy, and well-structured documentation. The official documentation covered most of the things required for the developers.</p>\n\n\n\n<p><strong>3. Cross-platform</strong></p>\n\n\n\n<p>The ionic application can deploy on multiple platforms such as iOS, Android, Desktop, and the web, all with one codebase. The ionic applications can write once and runs everywhere.</p>\n\n\n\n<p><strong>4. User Interface</strong></p>\n\n\n\n<p>The user interface of Ionic, such as themes and components are highly customizable. The ionic platform allows its components to adapt to the platform on which the application is running.</p>\n\n\n\n<p><strong>Disadvantages of Ionic</strong></p>\n\n\n\n<p>The disadvantages of Ionic application are as follows:</p>\n\n\n\n<p><strong>1. Performance</strong></p>\n\n\n\n<p>The performance of the Ionic application is not as good as compared to native mobile applications. However, the performance gap is not noticeable for most of the average users.</p>\n\n\n\n<p><strong>2. Security</strong></p>\n\n\n\n<p>The app developed with the Ionic framework may not provide as much security as a native application. For example, if you are developing a financial app, e.g., the app for a bank, the Ionic framework is not recommended.</p>\n\n\n\n<p><strong>3. Limited native functionality</strong></p>\n\n\n\n<p>Some native functions may not be available in the Ionic framework. In such a case, you need to develop the plugin to fulfill that function yourself. However, there are many plugins available to cover most of the native functionalities.</p>\n\n\n\n<p><strong>4. Not good for video game</strong></p>\n\n\n\n<p>Ionic framework is not perfect for high-end graphics-dependent applications or video games.</p>\n\n\n\n<p><strong>5. Early adopter risk</strong></p>\n\n\n\n<p>Ionic technology is still in development. It regularly keeps changing its support and standard, and its libraries can be completely rewritten at any time.</p>\n\n\n\n<h2>React Native</h2>\n\n\n\n<p>React Native is an open-source JavaScript framework used for developing a mobile application for iOS, Android, and Windows. It is used to build a cross-platform mobile app by using JavaScript. React Native is the same as React, but it uses native components instead of using web components as building blocks. It targets mobile platforms rather than the browser.</p>\n\n\n\n<p>The Facebook community develops the React Native in 2013 for its internal project Hackathon. In March 2015, Facebook announced that React Native is open source and available on GitHub.</p>\n\n\n\n<p><strong>Advantages of React Native</strong></p>\n\n\n\n<p>The advantages of React Native for building mobile applications are given below:</p>\n\n\n\n<p><strong>Cross-Platform Usage:</strong>&nbsp;It provides the facility to &#8220;Build once and run everywhere.&#8221; It can develop apps for Android, iOS, and Windows platforms.</p>\n\n\n\n<p><strong>Performance:</strong>&nbsp;The code written in React Native is compiled into native code, which enables it for all operating systems to provide closer native appearance and functions in the same way on all platforms.</p>\n\n\n\n<p><strong>Community:</strong>&nbsp;React Native provides a large community of passionate developers who helps us to find any answer we require.</p>\n\n\n\n<p><strong>Hot Reloading:</strong>&nbsp;Making a few changes in your app&#8217;s code immediately visible during development. If the business logic is changed, its reflection is live reloaded on screen.</p>\n\n\n\n<p><strong>Improving with Time:</strong>&nbsp;Some features of iOS and Android are still not supported, and the community is always inventing the best practices.</p>\n\n\n\n<p><strong>Disadvantages of React Native</strong></p>\n\n\n\n<p>The disadvantages of React Native for building mobile applications are given below:</p>\n\n\n\n<p><strong>React Native is still new and immature:</strong>&nbsp;React Native is a new framework in Android and iOS programming languages. It is still in the development stage, which can have a negative impact on the apps.</p>\n\n\n\n<p><strong>Learning is tough:</strong>&nbsp;React Native is not easy to learn, especially for a fresher in the app development field.</p>\n\n\n\n<p><strong>It Lacks the Security Robustness:</strong>&nbsp;React Native is an open-source framework, which creates a gap in the security robustness. When you are creating banking and financial apps where data is highly confidential, experts advise not to choose React Native.</p>\n\n\n\n<p><strong>It Takes More Time to Initialize:</strong>&nbsp;React Native takes a lot of time for initializing the runtime even if you are using the hi-tech gadgets and devices.</p>\n\n\n\n<p><strong>Existence is Uncertain:</strong>&nbsp;As Facebook develop this framework, its presence is uncertain since it keeps all the rights to kill off the project anytime. As the popularity of React Native rises, it is unlikely to happen.</p>\n\n\n\n<h2>Ionic vs. React Native</h2>\n\n\n\n<table><tbody><tr><th></th><th>Ionic</th><th>React Native</th></tr><tr><td><strong>Purpose</strong></td><td>It provides to write only once and runs everywhere.</td><td>It can learn once and becomes easy to write any platform.</td></tr><tr><td><strong>Developers</strong></td><td>It is developed by Drifty co.</td><td>The Facebook community develops it.</td></tr><tr><td><strong>Languages</strong></td><td>It is based on HTML, CSS, JavaScript, AngularJS, TypeScript.</td><td>It is based on React and JavaScript</td></tr><tr><td><strong>Code Language</strong></td><td>It uses TypeScript, which is a typed superset of JS that compiles to plain JavaScript on any browser.</td><td>It uses JSX, which allows to write JavaScript code that looks like HTML.</td></tr><tr><td><strong>Documentation</strong></td><td>It has very simple, clean, and consistent documentation.</td><td>It has very basic documentation.</td></tr><tr><td><strong>Community Supports</strong></td><td>It has large community supports.</td><td>It has very strong community support.</td></tr><tr><td><strong>App Development</strong></td><td>It builds a Hybrid app.</td><td>It builds a native app.</td></tr><tr><td><strong>Performance</strong></td><td>It is slower than React Native due to WebView.</td><td>It is faster than Ionic as it renders similar to a native app.</td></tr><tr><td><strong>Testing</strong></td><td>It can be tested in any browser.</td><td>It needs a device or an emulator for testing.</td></tr><tr><td><strong>Supported Platforms</strong></td><td>It can be supported on Android, iOS, UWP, and PWA.</td><td>It can be supported on Android, iOS, UWP.</td></tr><tr><td><strong>Reusability</strong></td><td>It provides optimum reusability of code.</td><td>The code needs to be changed for different platforms.</td></tr><tr><td><strong>Phone Hardware Accessibility</strong></td><td>It uses Apache Cordova.</td><td>React Native is capable of itself.</td></tr><tr><td><strong>Tools integration</strong></td><td>Atatus<br>Backand<br>StackBlitz<br>Readymag<br>jScrambler</td><td>iOS<br>React-Vue<br>Bugsnag<br>Shoutem UI<br>React VR</td></tr><tr><td><strong>Company Uses</strong></td><td>Sellsuki<br>Edify<br>Dispatch<br>eTobb<br>Techstars</td><td>Instagram<br>Microsoft<br>Yahoo<br>Hike<br>Intuit</td></tr></tbody></table>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Ionic and React Native are the two most common framework to develop mobile apps. Both frameworks have a large community of passionate developers and are used in large enterprises. In this section, we are going to see how Ionic is different from React Native. Ionic Ionic is an open-source UI toolkit for building performant, high-quality&nbsp;mobile [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1718,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1290"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1290"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1290/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1718"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1290"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1290"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1290"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 1292,
    "date": "2020-05-18T03:45:28",
    "date_gmt": "2020-05-18T03:45:28",
    "guid": {
      "rendered": "http://angular.foobrdigital.com/?p=1292"
    },
    "modified": "2020-05-18T03:45:28",
    "modified_gmt": "2020-05-18T03:45:28",
    "slug": "ionic-vs-xamarin",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/ionic-vs-xamarin/",
    "title": {
      "rendered": "Ionic vs Xamarin"
    },
    "content": {
      "rendered": "\n<p>Ionic and Xamarin are the two most popular framework for developing hybrid apps. For the past few years, it is a point of debate for developers to choose which framework is best. Both frameworks have a large community of passionate developers who provides the solution for all of your doubts. Both technologies are used in large enterprises. In this section, we are going to see how Ionic is different from Xamarin. The difference between Ionic and Xamarin is not limited to performance only, but it also applicable to Application size, UX/UI experience, Code reusability, third-party libraries, etc.</p>\n\n\n\n<h2>Ionic</h2>\n\n\n\n<p>Ionic is an open-source UI toolkit for building performant, high-quality&nbsp;<strong>mobile apps,</strong>&nbsp;desktop apps, and progressive web apps using web technologies such as HTML, CSS, and JavaScript. It allows developers to build once and run everywhere. It was created by&nbsp;<strong>Max Lynch, Ben Sperry,</strong>&nbsp;and&nbsp;<strong>Adam Bradley</strong>&nbsp;of Drifty Co. in 2013. The first beta version of the Ionic framework was released in&nbsp;<strong>March 2014</strong>.</p>\n\n\n\n<p>The Ionic framework mainly focuses on front-end user experience or UI interaction, which handles all the look and feel of your app. It is easy to learn and can integrate with other libraries or frameworks such as Angular, React, Cordova, etc. Officially, the Ionic framework has integration with Angular, but it also provides support for&nbsp;<strong>Vue.js</strong>&nbsp;and&nbsp;<strong>React.js</strong>.</p>\n\n\n\n<p><strong>Pros of Ionic</strong></p>\n\n\n\n<p>The advantages of the Ionic application are as follows:</p>\n\n\n\n<ul><li>If the developer has a basic knowledge of CSS, HTML, or JavaScript frameworks, then learning and developing apps using the Ionic framework is very easy.</li><li>Ionic provides simple, easy, and well-structured documentation. The official documentation covered most of the things required for the developers.</li><li>The ionic application can deploy on multiple platforms such as iOS, Android, Desktop, and the web, all with one codebase. The ionic apps can write once and runs everywhere.</li><li>The user interface of Ionic, such as themes and components are highly customizable. The ionic platform allows its components to adapt to the platform on which the application is running.</li></ul>\n\n\n\n<p><strong>Cons of Ionic</strong></p>\n\n\n\n<p>The disadvantages of Ionic application are as follows:</p>\n\n\n\n<ul><li>The performance of the Ionic app is not as good as compared to native mobile applications. However, the performance gap is not noticeable for most of the average users.</li><li>The app developed with the Ionic framework may not provide as much security as a native application. For example, if you are developing a financial app, e.g., the app for a bank, the Ionic framework is not recommended.</li><li>You cannot access any device-specific feature in Ionic without using Apache Cordova. Apache Cordova allows you to integrate the plugins which can add the functionality to access those features. However, there are many plugins available to cover most of the native functionalities.</li><li>Ionic technology is still in development. It regularly keeps changing its support and standard, and its libraries can be rewritten entirely at any time.</li></ul>\n\n\n\n<h2>Xamarin</h2>\n\n\n\n<p>Xamarin is an open-source, cross-platform development framework, which offers you to build android, iOS, Windows, and Mac apps by using the C# language. It is first launched in May 2011 by Xamarin Company. In 2016, Microsoft had signed an agreement to acquire Xamarin. Microsoft provides a free tool within Microsoft Visual Studio IDE, where users can get Xamarin&#8217;s enterprise features. The visual studio offers support to the apps for building, deploying, and debugging apps on a simulator or a device. We can write the code in Xamarin tool using C# language and can use the same code for all other platforms.</p>\n\n\n\n<p><strong>Pros of Xamarin</strong></p>\n\n\n\n<p>The advantages of the Ionic application are as follows:</p>\n\n\n\n<ul><li>Xamarin is the best Native App Development Platform that allows developers to build native mobile apps. It has an excellent user interface and controls for creating a native app.</li><li>Xamarin allows you to build a cross-platform mobile app for Windows, Android, and iOS apps. You can also share codes over multiple platforms.</li><li>Xamarin has a very less number of bugs in the apps. You can also enhance app performance using the Xamarin Insight, which helps to monitor and keep a record of crashes and exceptions.</li><li>Xamarin does not need to create different API for different mobile platforms because it can use the same API to build iOS, Android, and Windows applications.</li><li>Xamarin allows you to generate high-performing compiled code that can access every native API. It provides a very easy way to create device-specific applications over different mobile platforms.</li><li>Xamarin has huge community support, which can help to solve all your doubts regarding app development.</li><li>Xamarin allows you to reuse the same code multiple times to create native user-interface for Android, iOS, and Windows devices.</li></ul>\n\n\n\n<p><strong>Cons of Xamarin</strong></p>\n\n\n\n<p>The disadvantages of Xamarin technologies are as follows:</p>\n\n\n\n<ul><li>Xamarin is free for individuals and small companies, but it is expensive for enterprises. It is because they need to purchase a license for Microsoft&#8217;s Visual Studio. Every enterprise that uses Xamarin technology requires all the bells and whistles to pay up to $2,999 for an annual subscription to Visual Studio Enterprise. The cost of these licenses depends on the size and needs of the developers.</li><li>Xamarin supports most of the .Net libraries, but it might be complicated to use all open-source libraries. It does not support all of the 3rd-party libraries for Android and iOS without specific wrappers.</li><li>Xamarin is not suitable for apps with heavy graphics, such as video games. If your application has rich UX/UI, then it should be implemented natively.</li><li>Xamarin made the app size bigger as compared to other frameworks. It adds 3 to 5 MB for the release and around 20 MB for debug builds.</li></ul>\n\n\n\n<h2>Ionic vs Xamarin</h2>\n\n\n\n<p>The comparison chart between Ionic and Xamarin are given below.</p>\n\n\n\n<table><tbody><tr><th></th><th>Ionic</th><th>Xamarin</th></tr><tr><td><strong>Definition</strong></td><td>Ionic is a front-end framework for developing a cross-platform app using web technologies such as Vue.js, React.js, and Angular.</td><td>Xamarin is an open-source, cross-platform development framework, which offers you to build apps by using the C# language.</td></tr><tr><td><strong>Created by</strong></td><td>It was created by Max Lynch, Ben Sperry, and Adam Bradley of Drifty Co. in 2013. It was first launched in March 2014.</td><td>It is first launched in May 2011 by Xamarin Company. In 2016, Microsoft had signed an agreement to acquire Xamarin.</td></tr><tr><td><strong>Language</strong></td><td>It uses C# and .Net language.</td><td>It uses TypeScript language.</td></tr><tr><td><strong>Performance</strong></td><td>Ionic has slower performance as compared to Xamarin because it uses the Web-View.</td><td>It has better performance because it is close to the native app.</td></tr><tr><td><strong>Size</strong></td><td>Size of an Ionic application is small.</td><td>The size of the Xamarin application is bigger as compared to other frameworks.</td></tr><tr><td><strong>Pricing</strong></td><td>It is free and open-source. If the organization needs to accelerate the development process, it uses a paid version of an Ionic pro.</td><td>Xamarin is free for individuals and small companies, but it is expensive for enterprises. It is because they need to purchase a license for Microsoft&#8217;s Visual Studio.</td></tr><tr><td><strong>User Experience</strong></td><td>It gives an average user experience. The developers overly upgrade Ionic to continue using and sustain the completion.</td><td>It provides an excellent, fastest, and most authentic user experience.</td></tr><tr><td><strong>Code Reusability</strong></td><td>It has an optimum scope of code reusability.</td><td>It does not provide any specific platform code reusability.</td></tr><tr><td><strong>64-bit support</strong></td><td>In the latest update, Ionic support 64-bit mode only on iOS. Application. Ionic does not support 64-bit mode on Android.</td><td>Xamarin supports 64-bit mode only. It can also be forced to compile on the 32-bit</td></tr><tr><td><strong>Market and Community Support</strong></td><td>Ionic is the second most popular framework which provides large community support to the developers.</td><td>Xamarin has huge community support, which can help to solve all your doubts regarding app development.</td></tr><tr><td><strong>Tools integrate</strong></td><td>Some of the popular tools that integrate with an Ionic are Readymag, JScrambler, WebStorm, and DevExtreme.</td><td>Some of the popular tools that integrate with the Xamarin are OneSignal, KeeWeb, Logify, and Raygun.</td></tr><tr><td><strong>Companies use</strong></td><td>Sellsuki, Edify and eTobb are some of the popular companies that use Ionic.</td><td>Rdio, Olo, and Rumble are some of the popular companies that use Xamarin.</td></tr></tbody></table>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Ionic and Xamarin are the two most popular framework for developing hybrid apps. For the past few years, it is a point of debate for developers to choose which framework is best. Both frameworks have a large community of passionate developers who provides the solution for all of your doubts. Both technologies are used in [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 1799,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      103
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1292"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=1292"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/1292/revisions"
        }
      ],
      "wp:featuredmedia": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media/1799"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=1292"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=1292"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=1292"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]