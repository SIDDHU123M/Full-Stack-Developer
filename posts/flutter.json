[
  {
    "id": 3247,
    "date": "2020-12-16T10:51:30",
    "date_gmt": "2020-12-16T10:51:30",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3247"
    },
    "modified": "2020-12-16T10:51:30",
    "modified_gmt": "2020-12-16T10:51:30",
    "slug": "introduction-4",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-4/",
    "title": {
      "rendered": "Introduction"
    },
    "content": {
      "rendered": "\n<p>In general, developing a mobile application is a complex and challenging task. There are many frameworks available to develop a mobile application. Android provides a native framework based on Java language and iOS provides a native framework based on Objective-C / Swift language.</p>\n\n\n\n<p>However, to develop an application supporting both the OSs, we need to code in two different languages using two different frameworks. To help overcome this complexity, there exists mobile frameworks supporting both OS. These frameworks range from simple HTML based hybrid mobile application framework (which uses HTML for User Interface and JavaScript for application logic) to complex language specific framework (which do the heavy lifting of converting code to native code). Irrespective of their simplicity or complexity, these frameworks always have many disadvantages, one of the main drawback being their slow performance.</p>\n\n\n\n<p>In this scenario, Flutter – a simple and high performance framework based on Dart language, provides high performance by rendering the UI directly in the operating system’s canvas rather than through native framework.</p>\n\n\n\n<p>Flutter also offers many ready to use widgets (UI) to create a modern application. These widgets are optimized for mobile environment and designing the application using widgets is as simple as designing HTML.</p>\n\n\n\n<p>To be specific, Flutter application is itself a widget. Flutter widgets also supports animations and gestures. The application logic is based on reactive programming. Widget may optionally have a state. By changing the state of the widget, Flutter will automatically (reactive programming) compare the widget’s state (old and new) and render the widget with only the necessary changes instead of re-rendering the whole widget.</p>\n\n\n\n<p>We shall discuss the complete architecture in the coming chapters.</p>\n\n\n\n<h2>Features of Flutter</h2>\n\n\n\n<p>Flutter framework offers the following features to developers −</p>\n\n\n\n<ul><li>Modern and reactive framework.</li><li>Uses Dart programming language and it is very easy to learn.</li><li>Fast development.</li><li>Beautiful and fluid user interfaces.</li><li>Huge widget catalog.</li><li>Runs same UI for multiple platforms.</li><li>High performance application.</li></ul>\n\n\n\n<h2>Advantages of Flutter</h2>\n\n\n\n<p>Flutter comes with beautiful and customizable widgets for high performance and outstanding mobile application. It fulfills all the custom needs and requirements. Besides these, Flutter offers many more advantages as mentioned below −</p>\n\n\n\n<ul><li>Dart has a large repository of software packages which lets you to extend the capabilities of your application.</li><li>Developers need to write just a single code base for both applications (both Android and iOS platforms).&nbsp;<em>Flutter</em>&nbsp;may to be extended to other platform as well in the future.</li><li>Flutter needs lesser testing. Because of its single code base, it is sufficient if we write automated tests once for both the platforms.</li><li>Flutter’s simplicity makes it a good candidate for fast development. Its customization capability and extendibility makes it even more powerful.</li><li>With Flutter, developers has full control over the widgets and its layout.</li><li>Flutter offers great developer tools, with amazing hot reload.</li></ul>\n\n\n\n<h2>Disadvantages of Flutter</h2>\n\n\n\n<p>Despite its many advantages, flutter has the following drawbacks in it −</p>\n\n\n\n<ul><li>Since it is coded in Dart language, a developer needs to learn new language (though it is easy to learn).</li><li>Modern framework tries to separate logic and UI as much as possible but, in Flutter, user interface and logic is intermixed. We can overcome this using smart coding and using high level module to separate user interface and logic.</li><li>Flutter is yet another framework to create mobile application. Developers are having a hard time in choosing the right development tools in hugely populated segment.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In general, developing a mobile application is a complex and challenging task. There are many frameworks available to develop a mobile application. Android provides a native framework based on Java language and iOS provides a native framework based on Objective-C / Swift language. However, to develop an application supporting both the OSs, we need to [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3247"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3247"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3247/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3247"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3247"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3247"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3251,
    "date": "2020-12-16T10:53:28",
    "date_gmt": "2020-12-16T10:53:28",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3251"
    },
    "modified": "2020-12-16T10:53:28",
    "modified_gmt": "2020-12-16T10:53:28",
    "slug": "installation-3-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/installation-3-2/",
    "title": {
      "rendered": "Installation"
    },
    "content": {
      "rendered": "\n<p>This chapter will guide you through the installation of Flutter on your local computer in detail.</p>\n\n\n\n<h2>Installation in Windows</h2>\n\n\n\n<p>In this section, let us see how to install&nbsp;<em>Flutter SDK</em>&nbsp;and its requirement in a windows system.</p>\n\n\n\n<p><strong>Step 1</strong> − Go to URL, https://flutter.dev/docs/get-started/install/windows and download the latest Flutter SDK. As of April 2019, the version is 1.2.1 and the file is flutter_windows_v1.2.1-stable.zip.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Unzip the zip archive in a folder, say C:\\flutter\\</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Update the system path to include flutter bin directory.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Flutter provides a tool, flutter doctor to check that all the requirement of flutter development is met.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter doctor\n</code></pre>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Running the above command will analyze the system and show its report as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Doctor summary (to see all details, run flutter doctor -v):\n&#91;√] Flutter (Channel stable, v1.2.1, on Microsoft Windows &#91;Version\n10.0.17134.706], locale en-US)\n&#91;√] Android toolchain - develop for Android devices (Android SDK version\n28.0.3)\n&#91;√] Android Studio (version 3.2)\n&#91;√] VS Code, 64-bit edition (version 1.29.1)\n&#91;!] Connected device\n! No devices available\n! Doctor found issues in 1 category.\n</code></pre>\n\n\n\n<p>The report says that all development tools are available but the device is not connected. We can fix this by connecting an android device through USB or starting an android emulator.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Install the latest Android SDK, if reported by flutter doctor</p>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Install the latest Android Studio, if reported by flutter doctor</p>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Start an android emulator or connect a real android device to the system.</p>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Install Flutter and Dart plugin for Android Studio. It provides startup template to create new Flutter application, an option to run and debug Flutter application in the Android studio itself, etc.,</p>\n\n\n\n<ul><li>Open Android Studio.</li><li>Click File → Settings → Plugins.</li><li>Select the Flutter plugin and click Install.</li><li>Click Yes when prompted to install the Dart plugin.</li><li>Restart Android studio.</li></ul>\n\n\n\n<h2>Installation in MacOS</h2>\n\n\n\n<p>To install Flutter on MacOS, you will have to follow the following steps −</p>\n\n\n\n<p><strong>Step 1</strong> − Go to URL, https://flutter.dev/docs/get-started/install/macos and download latest Flutter SDK. As of April 2019, the version is 1.2.1 and the file is flutter_macos_v1.2.1- stable.zip.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Unzip the zip archive in a folder, say /path/to/flutter</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Update the system path to include flutter bin directory (in ~/.bashrc file).</p>\n\n\n\n<pre class=\"wp-block-code\"><code>> export PATH = \"$PATH:/path/to/flutter/bin\"\n</code></pre>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Enable the updated path in the current session using below command and then verify it as well.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>source ~/.bashrc\nsource $HOME/.bash_profile\necho $PATH\n</code></pre>\n\n\n\n<p>Flutter provides a tool, flutter doctor to check that all the requirement of flutter development is met. It is similar to the Windows counterpart.</p>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Install latest XCode, if reported by flutter doctor</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Install latest Android SDK, if reported by flutter doctor</p>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Install latest Android Studio, if reported by flutter doctor</p>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Start an android emulator or connect a real android device to the system to develop android application.</p>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Open iOS simulator or connect a real iPhone device to the system to develop iOS application.</p>\n\n\n\n<p><strong>Step 10</strong>&nbsp;− Install Flutter and Dart plugin for Android Studio. It provides the startup template to create a new Flutter application, option to run and debug Flutter application in the Android studio itself, etc.,</p>\n\n\n\n<ul><li>Open Android Studio</li><li>Click&nbsp;<strong>Preferences → Plugins</strong></li><li>Select the Flutter plugin and click Install</li><li>Click Yes when prompted to install the Dart plugin.</li><li>Restart Android studio.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter will guide you through the installation of Flutter on your local computer in detail. Installation in Windows In this section, let us see how to install&nbsp;Flutter SDK&nbsp;and its requirement in a windows system. Step 1 − Go to URL, https://flutter.dev/docs/get-started/install/windows and download the latest Flutter SDK. As of April 2019, the version is 1.2.1 and the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3251"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3251"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3251/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3251"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3251"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3251"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3253,
    "date": "2020-12-16T10:54:55",
    "date_gmt": "2020-12-16T10:54:55",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3253"
    },
    "modified": "2020-12-16T10:54:55",
    "modified_gmt": "2020-12-16T10:54:55",
    "slug": "creating-simple-application-in-android-studio",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/creating-simple-application-in-android-studio/",
    "title": {
      "rendered": "Creating Simple Application in Android Studio"
    },
    "content": {
      "rendered": "\n<p>In this chapter, let us create a simple&nbsp;<em>Flutter</em>&nbsp;application to understand the basics of creating a flutter application in the Android Studio.</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;− Open Android Studio</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;− Create Flutter Project. For this, click&nbsp;<strong>File → New → New Flutter Project</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/new_flutter_project.jpg\" alt=\"New Flutter Project\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;− Select Flutter Application. For this, select&nbsp;<strong>Flutter Application</strong>&nbsp;and click&nbsp;<strong>Next</strong>.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/flutter_application_next.jpg\" alt=\"Flutter Application Next\"/></figure>\n\n\n\n<p><strong>Step 4</strong>&nbsp;− Configure the application as below and click&nbsp;<strong>Next</strong>.</p>\n\n\n\n<ul><li>Project name:&nbsp;<strong>hello_app</strong></li><li>Flutter SDK Path:&nbsp;<strong>&lt;path_to_flutter_sdk&gt;</strong></li><li>Project Location:&nbsp;<strong>&lt;path_to_project_folder&gt;</strong></li><li>Description:&nbsp;<strong>Flutter based hello world application</strong></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/project_name.jpg\" alt=\"Project Name\"/></figure>\n\n\n\n<p><strong>Step 5</strong>&nbsp;− Configure Project.</p>\n\n\n\n<p>Set the company domain as&nbsp;<strong>flutterapp.tutorialspoint.com</strong>&nbsp;and click&nbsp;<strong>Finish</strong>.</p>\n\n\n\n<p><strong>Step 6</strong>&nbsp;− Enter Company domain.</p>\n\n\n\n<p>Android Studio creates a fully working flutter application with minimal functionality. Let us check the structure of the application and then, change the code to do our task.</p>\n\n\n\n<p>The structure of the application and its purpose is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/structure_application.jpg\" alt=\"Structure Application\"/></figure>\n\n\n\n<p>Various components of the structure of the application are explained here −</p>\n\n\n\n<ul><li><strong>android</strong>&nbsp;− Auto generated source code to create android application</li><li><strong>ios</strong>&nbsp;− Auto generated source code to create ios application</li><li><strong>lib</strong>&nbsp;− Main folder containing Dart code written using flutter framework</li><li><strong>ib/main.dart</strong>&nbsp;− Entry point of the Flutter application</li><li><strong>test</strong>&nbsp;− Folder containing Dart code to test the flutter application</li><li><strong>test/widget_test.dart</strong>&nbsp;− Sample code</li><li><strong>.gitignore</strong>&nbsp;− Git version control file</li><li><strong>.metadata</strong>&nbsp;− auto generated by the flutter tools</li><li><strong>.packages</strong>&nbsp;− auto generated to track the flutter packages</li><li><strong>.iml</strong>&nbsp;− project file used by Android studio</li><li><strong>pubspec.yaml</strong>&nbsp;− Used by&nbsp;<strong>Pub</strong>, Flutter package manager</li><li><strong>pubspec.lock</strong>&nbsp;− Auto generated by the Flutter package manager,&nbsp;<strong>Pub</strong></li><li><strong>README.md</strong>&nbsp;− Project description file written in Markdown format</li></ul>\n\n\n\n<p><strong>Step 7</strong>&nbsp;− Replace the dart code in the&nbsp;<em>lib/main.dart file</em>&nbsp;with the below code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n   // This widget is the root of your application.\n   @override\n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Hello World Demo Application',\n         theme: ThemeData(\n            primarySwatch: Colors.blue,\n         ),\n         home: MyHomePage(title: 'Home page'),\n      );\n   }\n}\nclass MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key);\n   final String title;\n\n   @override\n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(\n            title: Text(this.title),\n         ),\n         body: Center(\n            child:\n            Text(\n               'Hello World',\n            )\n         ),\n      );\n   }\n}</code></pre>\n\n\n\n<p>Let us understand the dart code line by line.</p>\n\n\n\n<ul><li><strong>Line 1</strong>&nbsp;− imports the flutter package,&nbsp;<em>material</em>. The material is a flutter package to create user interface according to the Material design guidelines specified by Android.</li><li><strong>Line 3</strong>&nbsp;− This is the entry point of the Flutter application. Calls&nbsp;<em>runApp</em>&nbsp;function and pass it an object of&nbsp;<em>MyApp</em>&nbsp;class. The purpose of the&nbsp;<em>runApp</em>&nbsp;function is to attach the given widget to the screen.</li><li><strong>Line 5-17</strong>&nbsp;− Widget is used to create UI in flutter framework.&nbsp;<em>StatelessWidget</em>&nbsp;is a widget, which does not maintain any state of the widget.&nbsp;<em>MyApp</em>&nbsp;extends&nbsp;<em>StatelessWidget</em>&nbsp;and overrides its&nbsp;<em>build method</em>. The purpose of the&nbsp;<em>build</em>&nbsp;method is to create a part of the UI of the application. Here,&nbsp;<em>build</em>&nbsp;method uses&nbsp;<em>MaterialApp</em>, a widget to create the root level UI of the application. It has three properties &#8211;&nbsp;<em>title, theme</em>&nbsp;and&nbsp;<em>home</em>.<ul><li><em>title</em>&nbsp;is the title of the application</li><li><em>theme</em>&nbsp;is the theme of the widget. Here, we set&nbsp;<em>blue</em>&nbsp;as the overall color of the application using&nbsp;<em>ThemeData</em>&nbsp;class and its property,&nbsp;<em>primarySwatch</em>.</li><li>home is the inner UI of the application, which we set another widget,&nbsp;<strong>MyHomePage</strong></li></ul></li><li><strong>Line 19 &#8211; 38</strong>&nbsp;−&nbsp;<em>MyHomePage</em>&nbsp;is same as&nbsp;<em>MyApp</em>&nbsp;except it returns&nbsp;<em>Scaffold</em>&nbsp;Widget.&nbsp;<em>Scaffold</em>&nbsp;is a top level widget next to&nbsp;<em>MaterialApp</em>&nbsp;widget used to create UI conforming material design. It has two important properties,&nbsp;<em>appBar</em>&nbsp;to show the header of the application and body to show the actual content of the application.&nbsp;<em>AppBar</em>&nbsp;is another widget to render the header of the application and we have used it in&nbsp;<em>appBar</em>&nbsp;property. In&nbsp;<em>body</em>&nbsp;property, we have used&nbsp;<em>Center</em>&nbsp;widget, which centers it child widget.&nbsp;<em>Text</em>&nbsp;is the final and inner most widget to show the text and it is displayed in the center of the screen.</li></ul>\n\n\n\n<p><strong>Step 8</strong>&nbsp;− Now, run the application using,&nbsp;<strong>Run → Run main.dart</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/main_dart.jpg\" alt=\"Main Dart\"/></figure>\n\n\n\n<p><strong>Step 9</strong>&nbsp;− Finally, the output of the application is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/home_page.jpg\" alt=\"Home Page\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, let us create a simple&nbsp;Flutter&nbsp;application to understand the basics of creating a flutter application in the Android Studio. Step 1&nbsp;− Open Android Studio Step 2&nbsp;− Create Flutter Project. For this, click&nbsp;File → New → New Flutter Project Step 3&nbsp;− Select Flutter Application. For this, select&nbsp;Flutter Application&nbsp;and click&nbsp;Next. Step 4&nbsp;− Configure the application [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3253"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3253"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3253/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3253"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3253"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3253"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3255,
    "date": "2020-12-16T10:55:36",
    "date_gmt": "2020-12-16T10:55:36",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3255"
    },
    "modified": "2020-12-16T10:55:36",
    "modified_gmt": "2020-12-16T10:55:36",
    "slug": "architecture-application",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/architecture-application/",
    "title": {
      "rendered": "Architecture Application"
    },
    "content": {
      "rendered": "\n<h2>Widgets</h2>\n\n\n\n<p>The core concept of the Flutter framework is&nbsp;<strong>In Flutter, Everything is a widget</strong>. Widgets are basically user interface components used to create the user interface of the application.</p>\n\n\n\n<p>In&nbsp;<em>Flutter</em>, the application is itself a widget. The application is the top- level widget and its UI is build using one or more children (widgets), which again build using its children widgets. This&nbsp;<strong>composability</strong>&nbsp;feature helps us to create a user interface of any complexity.</p>\n\n\n\n<p>For example, the widget hierarchy of the hello world application (created in previous chapter) is as specified in the following diagram −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/hello_world_application.jpg\" alt=\"Hello World Application\"/></figure>\n\n\n\n<p>Here the following points are worth notable −</p>\n\n\n\n<ul><li><em>MyApp</em>&nbsp;is the user created widget and it is build using the Flutter native widget,&nbsp;<em>MaterialApp</em>.</li><li><em>MaterialApp</em>&nbsp;has a home property to specify the user interface of the home page, which is again a user created widget,&nbsp;<em>MyHomePage</em>.</li><li><em>MyHomePage</em>&nbsp;is build using another flutter native widget,&nbsp;<em>Scaffold</em></li><li><em>Scaffold</em>&nbsp;has two properties –&nbsp;<em>body</em>&nbsp;and&nbsp;<em>appBar</em></li><li><em>body</em>&nbsp;is used to specify its main user interface and&nbsp;<em>appBar</em>&nbsp;is used to specify its header user interface</li><li><em>Header UI</em>&nbsp;is build using flutter native widget,&nbsp;<em>AppBar</em>&nbsp;and&nbsp;<em>Body UI</em>&nbsp;is build using&nbsp;<em>Center</em>&nbsp;widget.</li><li>The&nbsp;<em>Center</em>&nbsp;widget has a property,&nbsp;<em>Child</em>, which refers the actual content and it is build using&nbsp;<em>Text</em>&nbsp;widget</li></ul>\n\n\n\n<h2>Gestures</h2>\n\n\n\n<p>Flutter widgets support interaction through a special widget,&nbsp;<em>GestureDetector</em>.&nbsp;<em>GestureDetector</em>&nbsp;is an invisible widget having the ability to capture user interactions such as tapping, dragging, etc., of its child widget. Many native widgets of Flutter support interaction through the use of&nbsp;<em>GestureDetector</em>. We can also incorporate interactive feature into the existing widget by composing it with the&nbsp;<em>GestureDetector</em>&nbsp;widget. We will learn the gestures separately in the upcoming chapters.</p>\n\n\n\n<h2>Concept of State</h2>\n\n\n\n<p>Flutter widgets support&nbsp;<em>State maintenance</em>&nbsp;by providing a special widget,&nbsp;<em>StatefulWidget</em>. Widget needs to be derived from&nbsp;<em>StatefulWidget</em>&nbsp;widget to support state maintenance and all other widget should be derived from&nbsp;<em>StatefulWidget</em>. Flutter widgets are&nbsp;<strong>reactive</strong>&nbsp;in native. This is similar to reactjs and&nbsp;<em>StatefulWidget</em>&nbsp;will be auto re- rendered whenever its internal state is changed. The re-rendering is optimized by finding the difference between old and new widget UI and rendering only the necessary changes</p>\n\n\n\n<h2>Layers</h2>\n\n\n\n<p>The most important concept of Flutter framework is that the framework is grouped into multiple category in terms of complexity and clearly arranged in layers of decreasing complexity. A layer is build using its immediate next level layer. The top most layer is widget specific to&nbsp;<em>Android</em>&nbsp;and&nbsp;<em>iOS</em>. The next layer has all flutter native widgets. The next layer is&nbsp;<em>Rendering layer</em>, which is low level renderer component and renders everything in the flutter app. Layers goes down to core platform specific code</p>\n\n\n\n<p>The general overview of a layer in Flutter is specified in the below diagram −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/overview_of_layer.jpg\" alt=\"Overview Of Layer\"/></figure>\n\n\n\n<p>The following points summarize the architecture of Flutter −</p>\n\n\n\n<ul><li>In Flutter, everything is a widget and a complex widget is composed of already existing widgets.</li><li>Interactive features can be incorporated whenever necessary using&nbsp;<em>GestureDetector</em>&nbsp;widget.</li><li>The state of a widget can be maintained whenever necessary using&nbsp;<em>StatefulWidget</em>&nbsp;widget.</li><li>Flutter offers layered design so that any layer can be programmed depending on the complexity of the task.</li></ul>\n\n\n\n<p>We will discuss all these concepts in detail in the upcoming chapters.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Widgets The core concept of the Flutter framework is&nbsp;In Flutter, Everything is a widget. Widgets are basically user interface components used to create the user interface of the application. In&nbsp;Flutter, the application is itself a widget. The application is the top- level widget and its UI is build using one or more children (widgets), which [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3255"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3255"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3255/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3255"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3255"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3255"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3257,
    "date": "2020-12-16T10:57:22",
    "date_gmt": "2020-12-16T10:57:22",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3257"
    },
    "modified": "2020-12-16T10:57:22",
    "modified_gmt": "2020-12-16T10:57:22",
    "slug": "introduction-to-dart-programming",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-to-dart-programming/",
    "title": {
      "rendered": "Introduction to Dart Programming"
    },
    "content": {
      "rendered": "\n<p>Dart is an open-source general-purpose programming language. It is originally developed by Google. Dart is an object-oriented language with C-style syntax. It supports programming concepts like interfaces, classes, unlike other programming languages Dart doesn’t support arrays. Dart collections can be used to replicate data structures such as arrays, generics, and optional typing.</p>\n\n\n\n<p>The following code shows a simple Dart program −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   print(\"Dart language is easy to learn\");\n}</code></pre>\n\n\n\n<h2>Variables and Data types</h2>\n\n\n\n<p><em>Variable</em>&nbsp;is named storage location and&nbsp;<em>Data types</em>&nbsp;simply refers to the type and size of data associated with variables and functions.</p>\n\n\n\n<p>Dart uses&nbsp;<em>var</em>&nbsp;keyword to declare the variable. The syntax of&nbsp;<em>var</em>&nbsp;is defined below,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var name = 'Dart';\n</code></pre>\n\n\n\n<p>The&nbsp;<em>final</em>&nbsp;and&nbsp;<em>const</em>&nbsp;keyword are used to declare constants. They are defined as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   final a = 12;\n   const pi = 3.14;\n   print(a);\n   print(pi);\n}</code></pre>\n\n\n\n<p>Dart language supports the following data types −</p>\n\n\n\n<ul><li><strong>Numbers</strong>&nbsp;− It is used to represent numeric literals – Integer and Double.</li><li><strong>Strings</strong>&nbsp;− It represents a sequence of characters. String values are specified in either single or double quotes.</li><li><strong>Booleans</strong>&nbsp;− Dart uses the&nbsp;<em>bool</em>&nbsp;keyword to represent Boolean values – true and false.</li><li><strong>Lists and Maps</strong>&nbsp;− It is used to represent a collection of objects. A simple List can be defined as below −.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   var list = &#91;1,2,3,4,5];\n   print(list);\n}</code></pre>\n\n\n\n<p>The list shown above produces [1,2,3,4,5] list.</p>\n\n\n\n<p>Map can be defined as shown here −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   var mapping = {'id': 1,'name':'Dart'};\n   print(mapping);\n}</code></pre>\n\n\n\n<ul><li><strong>Dynamic</strong>&nbsp;− If the variable type is not defined, then its default type is dynamic. The following example illustrates the dynamic type variable −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   dynamic name = \"Dart\";\n   print(name);\n}</code></pre>\n\n\n\n<h2>Decision Making and Loops</h2>\n\n\n\n<p>A decision making block evaluates a condition before the instructions are executed. Dart supports If, If..else and switch statements.</p>\n\n\n\n<p>Loops are used to repeat a block of code until a specific condition is met. Dart supports for, for..in , while and do..while loops.</p>\n\n\n\n<p>Let us understand a simple example about the usage of control statements and loops −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   for( var i = 1 ; i &lt;= 10; i++ ) {\n      if(i%2==0) {\n         print(i);\n      }\n   }\n}</code></pre>\n\n\n\n<p>The above code prints the even numbers from 1 to 10.</p>\n\n\n\n<h2>Functions</h2>\n\n\n\n<p>A function is a group of statements that together performs a specific task. Let us look into a simple function in Dart as shown here −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   add(3,4);\n}\nvoid add(int a,int b) {\n   int c;\n   c = a+b;\n   print(c);\n}</code></pre>\n\n\n\n<p>The above function adds two values and produces 7 as the output.</p>\n\n\n\n<h2>Object Oriented Programming</h2>\n\n\n\n<p>Dart is an object-oriented language. It supports object-oriented programming features like classes, interfaces, etc.</p>\n\n\n\n<p>A class is a blueprint for creating objects. A class definition includes the following −</p>\n\n\n\n<ul><li>Fields</li><li>Getters and setters</li><li>Constructors</li><li>Functions</li></ul>\n\n\n\n<p>Now, let us create a simple class using the above definitions −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Employee {\n   String name;\n   \n   //getter method\n   String get emp_name {\n      return name;\n   }\n   //setter method\n   void set emp_name(String name) {\n      this.name = name;\n   }\n   //function definition\n   void result() {\n      print(name);\n   }\n}\nvoid main() {\n   //object creation\n   Employee emp = new Employee();\n   emp.name = \"employee1\";\n   emp.result(); //function call\n}</code></pre>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Dart is an open-source general-purpose programming language. It is originally developed by Google. Dart is an object-oriented language with C-style syntax. It supports programming concepts like interfaces, classes, unlike other programming languages Dart doesn’t support arrays. Dart collections can be used to replicate data structures such as arrays, generics, and optional typing. The following code [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3257"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3257"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3257/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3257"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3257"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3257"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3259,
    "date": "2020-12-16T10:59:36",
    "date_gmt": "2020-12-16T10:59:36",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3259"
    },
    "modified": "2020-12-16T10:59:36",
    "modified_gmt": "2020-12-16T10:59:36",
    "slug": "introduction-to-widgets",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-to-widgets/",
    "title": {
      "rendered": "Introduction to Widgets"
    },
    "content": {
      "rendered": "\n<p>As we learned in the earlier chapter, widgets are everything in Flutter framework. We have already learned how to create new widgets in previous chapters.</p>\n\n\n\n<p>In this chapter, let us understand the actual concept behind creating the widgets and the different type of widgets available in&nbsp;<em>Flutter</em>&nbsp;framework.</p>\n\n\n\n<p>Let us check the&nbsp;<em>Hello World</em>&nbsp;application’s&nbsp;<em>MyHomePage</em>&nbsp;widget. The code for this purpose is as given below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title}) : super(key: key); \n   \n   final String title; \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold( \n         appBar: AppBar(title: Text(this.title), ), \n         body: Center(child: Text( 'Hello World',)),\n      );\n   }\n}</code></pre>\n\n\n\n<p>Here, we have created a new widget by extending&nbsp;<em>StatelessWidget</em>.</p>\n\n\n\n<p>Note that the&nbsp;<em>StatelessWidget</em>&nbsp;only requires a single method&nbsp;<em>build</em>&nbsp;to be implemented in its derived class. The&nbsp;<em>build</em>&nbsp;method gets the context environment necessary to build the widgets through&nbsp;<em>BuildContext</em>&nbsp;parameter and returns the widget it builds.</p>\n\n\n\n<p>In the code, we have used&nbsp;<em>title</em>&nbsp;as one of the constructor argument and also used&nbsp;<em>Key</em>&nbsp;as another argument. The&nbsp;<em>title</em>&nbsp;is used to display the title and&nbsp;<em>Key</em>&nbsp;is used to identify the widget in the build environment.</p>\n\n\n\n<p>Here, the&nbsp;<em>build</em>&nbsp;method calls the&nbsp;<em>build</em>&nbsp;method of&nbsp;<em>Scaffold</em>, which in turn calls the&nbsp;<em>build</em>&nbsp;method of&nbsp;<em>AppBar</em>&nbsp;and&nbsp;<em>Center</em>&nbsp;to&nbsp;<em>build</em>&nbsp;its user interface.</p>\n\n\n\n<p>Finally,&nbsp;<em>Center</em>&nbsp;build method calls&nbsp;<em>Text</em>&nbsp;build method.</p>\n\n\n\n<p>For a better understanding, the visual representation of the same is given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/visual_representation.jpg\" alt=\"Visual Representation\"/></figure>\n\n\n\n<h2>Widget Build Visualization</h2>\n\n\n\n<p>In&nbsp;<em>Flutter</em>, widgets can be grouped into multiple categories based on their features, as listed below −</p>\n\n\n\n<ul><li>Platform specific widgets</li><li>Layout widgets</li><li>State maintenance widgets</li><li>Platform independent / basic widgets</li></ul>\n\n\n\n<p>Let us discuss each of them in detail now.</p>\n\n\n\n<h3>Platform specific widgets</h3>\n\n\n\n<p>Flutter has widgets specific to a particular platform &#8211; Android or iOS.</p>\n\n\n\n<p>Android specific widgets are designed in accordance with&nbsp;<em>Material design guideline</em>&nbsp;by Android OS. Android specific widgets are called as&nbsp;<em>Material widgets</em>.</p>\n\n\n\n<p>iOS specific widgets are designed in accordance with&nbsp;<em>Human Interface Guidelines</em>&nbsp;by Apple and they are called as&nbsp;<em>Cupertino</em>&nbsp;widgets.</p>\n\n\n\n<p>Some of the most used material widgets are as follows −</p>\n\n\n\n<ul><li>Scaffold</li><li>AppBar</li><li>BottomNavigationBar</li><li>TabBar</li><li>TabBarView</li><li>ListTile</li><li>RaisedButton</li><li>FloatingActionButton</li><li>FlatButton</li><li>IconButton</li><li>DropdownButton</li><li>PopupMenuButton</li><li>ButtonBar</li><li>TextField</li><li>Checkbox</li><li>Radio</li><li>Switch</li><li>Slider</li><li>Date &amp; Time Pickers</li><li>SimpleDialog</li><li>AlertDialog</li></ul>\n\n\n\n<p>Some of the most used&nbsp;<em>Cupertino</em>&nbsp;widgets are as follows −</p>\n\n\n\n<ul><li>CupertinoButton</li><li>CupertinoPicker</li><li>CupertinoDatePicker</li><li>CupertinoTimerPicker</li><li>CupertinoNavigationBar</li><li>CupertinoTabBar</li><li>CupertinoTabScaffold</li><li>CupertinoTabView</li><li>CupertinoTextField</li><li>CupertinoDialog</li><li>CupertinoDialogAction</li><li>CupertinoFullscreenDialogTransition</li><li>CupertinoPageScaffold</li><li>CupertinoPageTransition</li><li>CupertinoActionSheet</li><li>CupertinoActivityIndicator</li><li>CupertinoAlertDialog</li><li>CupertinoPopupSurface</li><li>CupertinoSlider</li></ul>\n\n\n\n<h3>Layout widgets</h3>\n\n\n\n<p>In Flutter, a widget can be created by composing one or more widgets. To compose multiple widgets into a single widget,&nbsp;<em>Flutter</em>&nbsp;provides large number of widgets with layout feature. For example, the child widget can be centered using&nbsp;<em>Center</em>&nbsp;widget.</p>\n\n\n\n<p>Some of the popular layout widgets are as follows −</p>\n\n\n\n<ul><li><strong>Container</strong>&nbsp;− A rectangular box decorated using&nbsp;<em>BoxDecoration</em>&nbsp;widgets with background, border and shadow.</li><li><strong>Center</strong>&nbsp;− Center its child widget.</li><li><strong>Row</strong>&nbsp;− Arrange its children in the horizontal direction.</li><li><strong>Column</strong>&nbsp;− Arrange its children in the vertical direction.</li><li><strong>Stack</strong>&nbsp;− Arrange one above the another.</li></ul>\n\n\n\n<p>We will check the layout widgets in detail in the upcoming&nbsp;<em>Introduction to layout widgets</em>&nbsp;chapter.</p>\n\n\n\n<h3>State maintenance widgets</h3>\n\n\n\n<p>In Flutter, all widgets are either derived from&nbsp;<em>StatelessWidget</em>&nbsp;or&nbsp;<em>StatefulWidget</em>.</p>\n\n\n\n<p>Widget derived from&nbsp;<em>StatelessWidget</em>&nbsp;does not have any state information but it may contain widget derived from&nbsp;<em>StatefulWidget</em>. The dynamic nature of the application is through interactive behavior of the widgets and the state changes during interaction. For example, tapping a counter button will increase / decrease the internal state of the counter by one and reactive nature of the&nbsp;<em>Flutter</em>&nbsp;widget will auto re-render the widget using new state information.</p>\n\n\n\n<p>We will learn the concept of&nbsp;<em>StatefulWidget</em>&nbsp;widgets in detail in the upcoming&nbsp;<em>State management chapter</em>.</p>\n\n\n\n<h3>Platform independent / basic widgets</h3>\n\n\n\n<p><em>Flutter</em>&nbsp;provides large number of basic widgets to create simple as well as complex user interface in a platform independent manner. Let us see some of the basic widgets in this chapter.</p>\n\n\n\n<p><strong>Text</strong></p>\n\n\n\n<p><em>Text</em>&nbsp;widget is used to display a piece of string. The style of the string can be set by using&nbsp;<em>style</em>&nbsp;property and&nbsp;<em>TextStyle</em>&nbsp;class. The sample code for this purpose is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Text('Hello World!', style: TextStyle(fontWeight: FontWeight.bold))\n</code></pre>\n\n\n\n<p><em>Text</em>&nbsp;widget has a special constructor,&nbsp;<em>Text.rich</em>, which accepts the child of type&nbsp;<em>TextSpan</em>&nbsp;to specify the string with different style.&nbsp;<em>TextSpan</em>&nbsp;widget is recursive in nature and it accepts&nbsp;<em>TextSpan</em>&nbsp;as its children. The sample code for this purpose is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Text.rich( \n   TextSpan( \n      children: &lt;TextSpan>&#91; \n         TextSpan(text: \"Hello \", style:  \n         TextStyle(fontStyle: FontStyle.italic)),  \n         TextSpan(text: \"World\", style: \n         TextStyle(fontWeight: FontWeight.bold)),  \n      ], \n   ), \n)</code></pre>\n\n\n\n<p>The most important properties of the&nbsp;<em>Text</em>&nbsp;widget are as follows −</p>\n\n\n\n<ul><li><strong>maxLines, int</strong>&nbsp;− Maximum number of lines to show</li><li><strong>overflow, TextOverFlow</strong>&nbsp;− Specify how visual overflow is handled using&nbsp;<em>TextOverFlow</em>&nbsp;class</li><li><strong>style, TextStyle</strong>&nbsp;− Specify the style of the string using&nbsp;<em>TextStyle</em>&nbsp;class</li><li><strong>textAlign, TextAlign</strong>&nbsp;− Alignment of the text like right, left, justify, etc., using&nbsp;<em>TextAlign</em>&nbsp;class</li><li><strong>textDirection, TextDirection</strong>&nbsp;− Direction of text to flow, either left-to-right or right-to-left</li></ul>\n\n\n\n<p><strong>Image</strong></p>\n\n\n\n<p><em>Image</em>&nbsp;widget is used to display an image in the application.&nbsp;<em>Image</em>&nbsp;widget provides different constructors to load images from multiple sources and they are as follows −</p>\n\n\n\n<ul><li><strong>Image</strong>&nbsp;− Generic image loader using&nbsp;<em>ImageProvider</em></li><li><strong>Image.asset</strong>&nbsp;− Load image from flutter project’s assets</li><li><strong>Image.file</strong>&nbsp;− Load image from system folder</li><li><strong>Image.memory</strong>&nbsp;− Load image from memory</li><li><strong>Image.Network</strong>&nbsp;− Load image from network</li></ul>\n\n\n\n<p>The easiest option to load and display an image in&nbsp;<em>Flutter</em>&nbsp;is by including the image as assets of the application and load it into the widget on demand.</p>\n\n\n\n<ul><li>Create a folder, assets in the project folder and place the necessary images.</li><li>Specify the assets in the pubspec.yaml as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter: \n   assets: \n      - assets/smiley.png\n</code></pre>\n\n\n\n<ul><li>Now, load and display the image in the application.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\nImage.asset('assets/smiley.png')\n</code></pre>\n\n\n\n<ul><li>The complete source code of&nbsp;<em>MyHomePage</em>&nbsp;widget of the hello world application and the result is as shown below −.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n\n   @override \n   Widget build(BuildContext context) {\n      return Scaffold( \n         appBar: AppBar( title: Text(this.title), ), \n         body: Center( child: Image.asset(\"assets/smiley.png\")),\n      ); \n   }\n}</code></pre>\n\n\n\n<p>The loaded image is as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/hello_world_application_output.jpg\" alt=\"Hello World Application Output\"/></figure>\n\n\n\n<p>The most important properties of the&nbsp;<em>Image</em>&nbsp;widget are as follows −</p>\n\n\n\n<ul><li><strong>image, ImageProvider</strong>&nbsp;− Actual image to load</li><li><strong>width, double</strong>&nbsp;− Width of the image</li><li><strong>height, double</strong>&nbsp;− Height of the image</li><li><strong>alignment, AlignmentGeometry</strong>&nbsp;− How to align the image within its bounds</li></ul>\n\n\n\n<p><strong>Icon</strong></p>\n\n\n\n<p><em>Icon</em>&nbsp;widget is used to display a glyph from a font described in&nbsp;<em>IconData</em>&nbsp;class. The code to load a simple email icon is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Icon(Icons.email)\n</code></pre>\n\n\n\n<p>The complete source code to apply it in hello world application is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n\n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title: Text(this.title),),\n         body: Center( child: Icon(Icons.email)),\n      );\n   }\n}</code></pre>\n\n\n\n<p>The loaded icon is as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/homepage.jpg\" alt=\"Homepage\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>As we learned in the earlier chapter, widgets are everything in Flutter framework. We have already learned how to create new widgets in previous chapters. In this chapter, let us understand the actual concept behind creating the widgets and the different type of widgets available in&nbsp;Flutter&nbsp;framework. Let us check the&nbsp;Hello World&nbsp;application’s&nbsp;MyHomePage&nbsp;widget. The code for this [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3259"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3259"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3259/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3259"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3259"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3259"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3261,
    "date": "2020-12-16T11:04:43",
    "date_gmt": "2020-12-16T11:04:43",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3261"
    },
    "modified": "2020-12-16T11:04:43",
    "modified_gmt": "2020-12-16T11:04:43",
    "slug": "introduction-to-layouts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-to-layouts/",
    "title": {
      "rendered": "Introduction to Layouts"
    },
    "content": {
      "rendered": "\n<p>Since the core concept of&nbsp;<em>Flutter</em>&nbsp;is&nbsp;<em>Everything</em>&nbsp;is&nbsp;<em>widget</em>,&nbsp;<em>Flutter</em>&nbsp;incorporates a user interface layout functionality into the widgets itself.&nbsp;<em>Flutter</em>&nbsp;provides quite a lot of specially designed widgets like&nbsp;<em>Container, Center, Align</em>, etc., only for the purpose of laying out the user interface. Widgets build by composing other widgets normally use layout widgets. Let use learn the&nbsp;<em>Flutter</em>&nbsp;layout concept in this chapter.</p>\n\n\n\n<h2>Type of Layout Widgets</h2>\n\n\n\n<p>Layout widgets can be grouped into two distinct category based on its child −</p>\n\n\n\n<ul><li>Widget supporting a single child</li><li>Widget supporting multiple child</li></ul>\n\n\n\n<p>Let us learn both type of widgets and its functionality in the upcoming sections.</p>\n\n\n\n<h2>Single Child Widgets</h2>\n\n\n\n<p>In this category, widgets will have only one widget as its child and every widget will have a special layout functionality.</p>\n\n\n\n<p>For example,&nbsp;<em>Center</em>&nbsp;widget just centers it child widget with respect to its parent widget and&nbsp;<em>Container</em>&nbsp;widget provides complete flexibility to place it child at any given place inside it using different option like padding, decoration, etc.,</p>\n\n\n\n<p>Single child widgets are great options to create high quality widget having single functionality such as button, label, etc.,</p>\n\n\n\n<p>The code to create a simple button using&nbsp;<em>Container</em>&nbsp;widget is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyButton extends StatelessWidget {\n   MyButton({Key key}) : super(key: key); \n\n   @override \n   Widget build(BuildContext context) {\n      return Container(\n         decoration: const BoxDecoration(\n            border: Border(\n               top: BorderSide(width: 1.0, color: Color(0xFFFFFFFFFF)),\n               left: BorderSide(width: 1.0, color: Color(0xFFFFFFFFFF)),\n               right: BorderSide(width: 1.0, color: Color(0xFFFF000000)),\n               bottom: BorderSide(width: 1.0, color: Color(0xFFFF000000)),\n            ),\n         ),\n         child: Container(\n            padding: const\n            EdgeInsets.symmetric(horizontal: 20.0, vertical: 2.0),\n            decoration: const BoxDecoration(\n               border: Border(\n                  top: BorderSide(width: 1.0, color: Color(0xFFFFDFDFDF)),\n                  left: BorderSide(width: 1.0, color: Color(0xFFFFDFDFDF)),\n                  right: BorderSide(width: 1.0, color: Color(0xFFFF7F7F7F)),\n                  bottom: BorderSide(width: 1.0, color: Color(0xFFFF7F7F7F)),\n               ),\n               color: Colors.grey,\n            ),\n            child: const Text(\n               'OK',textAlign: TextAlign.center, style: TextStyle(color: Colors.black)\n            ), \n         ), \n      ); \n   }\n}</code></pre>\n\n\n\n<p>Here, we have used two widgets – a&nbsp;<em>Container</em>&nbsp;widget and a&nbsp;<em>Text</em>&nbsp;widget. The result of the widget is as a custom button as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/ok.jpg\" alt=\"OK\"/></figure>\n\n\n\n<p>Let us check some of the most important single child layout widgets provided by&nbsp;<em>Flutter</em>&nbsp;−</p>\n\n\n\n<ul><li><strong>Padding</strong>&nbsp;− Used to arrange its child widget by the given padding. Here, padding can be provided by&nbsp;<em>EdgeInsets</em>&nbsp;class.</li><li><strong>Align</strong>&nbsp;− Align its child widget within itself using the value of&nbsp;<em>alignment</em>&nbsp;property. The value for&nbsp;<em>alignment</em>&nbsp;property can be provided by&nbsp;<em>FractionalOffset</em>&nbsp;class. The&nbsp;<em>FractionalOffset</em>&nbsp;class specifies the offsets in terms of a distance from the top left.</li></ul>\n\n\n\n<p>Some of the possible values of offsets are as follows −</p>\n\n\n\n<ul><li>FractionalOffset(1.0, 0.0) represents the top right.</li><li>FractionalOffset(0.0, 1.0) represents the bottom left.</li></ul>\n\n\n\n<p>A sample code about offsets is shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Center(\n   child: Container(\n      height: 100.0, \n      width: 100.0, \n      color: Colors.yellow, child: Align(\n         alignment: FractionalOffset(0.2, 0.6),\n         child: Container( height: 40.0, width:\n            40.0, color: Colors.red,\n         ), \n      ), \n   ), \n)</code></pre>\n\n\n\n<ul><li><strong>FittedBox</strong>&nbsp;− It scales the child widget and then positions it according to the specified fit.</li><li><strong>AspectRatio</strong>&nbsp;− It attempts to size the child widget to the specified aspect ratio</li><li>ConstrainedBox</li><li>Baseline</li><li>FractinallySizedBox</li><li>IntrinsicHeight</li><li>IntrinsicWidth</li><li>LiimitedBox</li><li>OffStage</li><li>OverflowBox</li><li>SizedBox</li><li>SizedOverflowBox</li><li>Transform</li><li>CustomSingleChildLayout</li></ul>\n\n\n\n<p>Our hello world application is using material based layout widgets to design the home page. Let us modify our hello world application to build the home page using basic layout widgets as specified below −</p>\n\n\n\n<ul><li><strong>Container</strong>&nbsp;− Generic, single child, box based container widget with alignment, padding, border and margin along with rich styling features.</li><li><strong>Center</strong>&nbsp;− Simple, Single child container widget, which centers its child widget.</li></ul>\n\n\n\n<p>The modified code of the&nbsp;<em>MyHomePage</em>&nbsp;and&nbsp;<em>MyApp</em>&nbsp;widget is as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyApp extends StatelessWidget {\n   @override\n   Widget build(BuildContext context) {\n      return MyHomePage(title: \"Hello World demo app\");\n   }\n}\nclass MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key);\n   final String title;\n   @override\n   Widget build(BuildContext context) {\n      return Container(\n         decoration: BoxDecoration(color: Colors.white,),\n         padding: EdgeInsets.all(25), child: Center(\n            child:Text(\n               'Hello World', style: TextStyle(\n                  color: Colors.black, letterSpacing: 0.5, fontSize: 20,\n               ),\n               textDirection: TextDirection.ltr,\n            ),\n         )\n      );\n   }\n}</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li><em>Container</em>&nbsp;widget is the top level or root widget.&nbsp;<em>Container</em>&nbsp;is configured using&nbsp;<em>decoration</em>&nbsp;and&nbsp;<em>padding</em>&nbsp;property to layout its content.</li><li><em>BoxDecoration</em>&nbsp;has many properties like color, border, etc., to decorate the&nbsp;<em>Container</em>&nbsp;widget and here,&nbsp;<em>color</em>&nbsp;is used to set the color of the container.</li><li><em>padding</em>&nbsp;of the&nbsp;<em>Container</em>&nbsp;widget is set by using&nbsp;<em>dgeInsets</em>&nbsp;class, which provides the option to specify the padding value.</li><li><em>Center</em>&nbsp;is the child widget of the&nbsp;<em>Container</em>&nbsp;widget. Again,&nbsp;<em>Text</em>&nbsp;is the child of the&nbsp;<em>Center</em>&nbsp;widget.&nbsp;<em>Text</em>&nbsp;is used to show message and&nbsp;<em>Center</em>&nbsp;is used to center the text message with respect to the parent widget,&nbsp;<em>Container</em>.</li></ul>\n\n\n\n<p>The final result of the code given above is a layout sample as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/final_result.jpg\" alt=\"Final Result\"/></figure>\n\n\n\n<h2>Multiple Child Widgets</h2>\n\n\n\n<p>In this category, a given widget will have more than one child widgets and the layout of each widget is unique.</p>\n\n\n\n<p>For example,&nbsp;<em>Row</em>&nbsp;widget allows the laying out of its children in horizontal direction, whereas&nbsp;<em>Column</em>&nbsp;widget allows laying out of its children in vertical direction. By composing&nbsp;<em>Row</em>&nbsp;and&nbsp;<em>Column</em>, widget with any level of complexity can be built.</p>\n\n\n\n<p>Let us learn some of the frequently used widgets in this section.</p>\n\n\n\n<ul><li><strong>Row</strong>&nbsp;− Allows to arrange its children in a horizontal manner.</li><li><strong>Column</strong>&nbsp;− Allows to arrange its children in a vertical manner.</li><li><strong>ListView</strong>&nbsp;− Allows to arrange its children as list.</li><li><strong>GridView</strong>&nbsp;− Allows to arrange its children as gallery.</li><li><strong>Expanded</strong>&nbsp;− Used to make the children of Row and Column widget to occupy the maximum possible area.</li><li><strong>Table</strong>&nbsp;− Table based widget.</li><li><strong>Flow</strong>&nbsp;− Flow based widget.</li><li><strong>Stack</strong>&nbsp;− Stack based widget.</li></ul>\n\n\n\n<h2>Advanced Layout Application</h2>\n\n\n\n<p>In this section, let us learn how to create a complex user interface of&nbsp;<em>product listing</em>&nbsp;with custom design using both single and multiple child layout widgets.</p>\n\n\n\n<p>For this purpose, follow the sequence given below −</p>\n\n\n\n<ul><li>Create a new&nbsp;<em>Flutter</em>&nbsp;application in Android studio,&nbsp;<em>product_layout_app</em>.</li><li>Replace the&nbsp;<em>main.dart</em>&nbsp;code with folowing code −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nvoid main() => runApp(MyApp()); \n\nclass MyApp extends StatelessWidget {\n   // This widget is the root of your application.\n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp( \n         title: 'Flutter Demo', theme: ThemeData( \n         primarySwatch: Colors.blue,), \n         home: MyHomePage(title: 'Product layout demo home page'),\n      ); \n   } \n} \nclass MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n      \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title: Text(this.title),), \n         body: Center(child: Text( 'Hello World', )), \n      ); \n   }\n}</code></pre>\n\n\n\n<ul><li>Here,</li><li>We have created&nbsp;<em>MyHomePage</em>&nbsp;widget by extending&nbsp;<em>StatelessWidget</em>&nbsp;instead of default&nbsp;<em>StatefulWidget</em>&nbsp;and then removed the relevant code.</li><li>Now, create a new widget,&nbsp;<em>ProductBox</em>&nbsp;according to the specified design as shown below −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/productbox.jpg\" alt=\"ProductBox\"/></figure>\n\n\n\n<ul><li>The code for the&nbsp;<em>ProductBox</em>&nbsp;is as follows.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class ProductBox extends StatelessWidget {\n   ProductBox({Key key, this.name, this.description, this.price, this.image}) \n      : super(key: key); \n   final String name; \n   final String description; \n   final int price; \n   final String image; \n\n   Widget build(BuildContext context) {\n      return Container(\n         padding: EdgeInsets.all(2), height: 120,  child: Card( \n            child: Row(\n               mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: &lt;Widget>&#91;\n                  Image.asset(\"assets/appimages/\" +image), Expanded(\n                     child: Container(\n                        padding: EdgeInsets.all(5), child: Column(\n                           mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                              children: &lt;Widget>&#91; \n                              \n                              Text(this.name, style: TextStyle(fontWeight: \n                                 FontWeight.bold)), Text(this.description), \n                              Text(\"Price: \" + this.price.toString()), \n                           ], \n                        )\n                     )\n                  )\n               ]\n            )\n         )\n      );\n   }\n}</code></pre>\n\n\n\n<ul><li>Please observe the following in the code −</li></ul>\n\n\n\n<ul><li><em>ProductBox</em>&nbsp;has used four arguments as specified below −<ul><li>name &#8211; Product name</li><li>description &#8211; Product description</li><li>price &#8211; Price of the product</li><li>image &#8211; Image of the product</li></ul></li><li><em>ProductBox</em>&nbsp;uses seven build-in widgets as specified below −<ul><li>Container</li><li>Expanded</li><li>Row</li><li>Column</li><li>Card</li><li>Text</li><li>Image</li></ul></li><li><em>ProductBox</em>&nbsp;is designed using the above mentioned widget. The arrangement or hierarchy of the widget is specified in the diagram shown below −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/hierarchy_of_widget.jpg\" alt=\"Hierarchy of the widget\"/></figure>\n\n\n\n<ul><li>Now, place some dummy image (see below) for product information in the assets folder of the application and configure the assets folder in the pubspec.yaml file as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>assets: \n   - assets/appimages/floppy.png \n   - assets/appimages/iphone.png \n   - assets/appimages/laptop.png \n   - assets/appimages/pendrive.png \n   - assets/appimages/pixel.png \n   - assets/appimages/tablet.png\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/iphone.jpg\" alt=\"iphone\"/></figure>\n\n\n\n<p>iPhone.png</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/pixel.jpg\" alt=\"Pixel\"/></figure>\n\n\n\n<p>Pixel.png</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/laptop.jpg\" alt=\"Laptop\"/></figure>\n\n\n\n<p>Laptop.png</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/tablet.jpg\" alt=\"Tablet\"/></figure>\n\n\n\n<p>Tablet.png</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/pendrive.jpg\" alt=\"Pendrive\"/></figure>\n\n\n\n<p>Pendrive.png</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/floppydisk.jpg\" alt=\"Floppy Disk\"/></figure>\n\n\n\n<p>Floppy.png</p>\n\n\n\n<p>Finally, Use the&nbsp;<em>ProductBox</em>&nbsp;widget in the&nbsp;<em>MyHomePage</em>&nbsp;widget as specified below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n\n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title:Text(\"Product Listing\")), \n         body: ListView(\n            shrinkWrap: true, padding: const EdgeInsets.fromLTRB(2.0, 10.0, 2.0, 10.0), \n            children: &lt;Widget> &#91;\n               ProductBox(\n                  name: \"iPhone\", \n                  description: \"iPhone is the stylist phone ever\", \n                  price: 1000, \n                  image: \"iphone.png\"\n               ), \n               ProductBox(\n                  name: \"Pixel\", \n                  description: \"Pixel is the most featureful phone ever\", \n                  price: 800, \n                  image: \"pixel.png\"\n               ), \n               ProductBox( \n                  name: \"Laptop\", \n                  description: \"Laptop is most productive development tool\", \n                  price: 2000, \n                  image: \"laptop.png\"\n               ), \n               ProductBox( \n                  name: \"Tablet\", \n                  description: \"Tablet is the most useful device ever for meeting\", \n                  price: 1500, \n                  image: \"tablet.png\"\n               ), \n               ProductBox(\n                  name: \"Pendrive\", \n                  description: \"Pendrive is useful storage medium\", \n                  price: 100, \n                  image: \"pendrive.png\"\n               ), \n               ProductBox(\n                  name: \"Floppy Drive\", \n                  description: \"Floppy drive is useful rescue storage medium\", \n                  price: 20, \n                  image: \"floppy.png\"\n               ), \n            ],\n         )\n      );\n   }\n}</code></pre>\n\n\n\n<ul><li>Here,we have used&nbsp;<em>ProductBox</em>&nbsp;as children of&nbsp;<em>ListView</em>&nbsp;widget.</li><li>The complete code&nbsp;<em>(main.dart)</em>&nbsp;of the product layout application&nbsp;<em>(product_layout_app)</em>&nbsp;is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nvoid main() => runApp(MyApp()); \n\nclass MyApp extends StatelessWidget { \n   // This widget is the root of your application. \n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Flutter Demo', theme: ThemeData(\n            primarySwatch: Colors.blue,\n         ), \n         home: MyHomePage(title: 'Product layout demo home page'), \n      );\n   }\n}\nclass MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   \n   @override \n   Widget build(BuildContext context) { \n      return Scaffold( \n         appBar: AppBar(title: Text(\"Product Listing\")), \n         body: ListView(\n            shrinkWrap: true, \n            padding: const EdgeInsets.fromLTRB(2.0, 10.0, 2.0, 10.0), \n            children: &lt;Widget>&#91; \n               ProductBox(\n                  name: \"iPhone\", \n                  description: \"iPhone is the stylist phone ever\", \n                  price: 1000, \n                  image: \"iphone.png\"\n               ), \n               ProductBox( \n                  name: \"Pixel\",    \n                  description: \"Pixel is the most featureful phone ever\", \n                  price: 800, \n                  image: \"pixel.png\"\n               ), \n               ProductBox( \n                  name: \"Laptop\", \n                  description: \"Laptop is most productive development tool\", \n                  price: 2000, \n                  image: \"laptop.png\"\n               ), \n               ProductBox( \n                  name: \"Tablet\", \n                  description: \"Tablet is the most useful device ever for meeting\", \n                  price: 1500, \n                  image: \"tablet.png\"\n               ), \n               ProductBox( \n                  name: \"Pendrive\", \n                  description: \"Pendrive is useful storage medium\", \n                  price: 100, \n                  image: \"pendrive.png\"\n               ), \n               ProductBox(\n                  name: \"Floppy Drive\", \n                  description: \"Floppy drive is useful rescue storage medium\", \n                  price: 20, \n                  image: \"floppy.png\"\n               ), \n            ],\n         )\n      );\n   }\n}\nclass ProductBox extends StatelessWidget {\n   ProductBox({Key key, this.name, this.description, this.price, this.image}) :\n      super(key: key); \n   final String name; \n   final String description; \n   final int price; \n   final String image; \n   \n   Widget build(BuildContext context) {\n      return Container(\n         padding: EdgeInsets.all(2), \n         height: 120, \n         child: Card(\n            child: Row(\n               mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n               children: &lt;Widget>&#91; \n                  Image.asset(\"assets/appimages/\" + image), \n                  Expanded( \n                     child: Container( \n                        padding: EdgeInsets.all(5), \n                        child: Column(    \n                           mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                           children: &lt;Widget>&#91; \n                              Text(\n                                 this.name, style: TextStyle(\n                                    fontWeight: FontWeight.bold\n                                 )\n                              ),\n                              Text(this.description), Text(\n                                 \"Price: \" + this.price.toString()\n                              ), \n                           ], \n                        )\n                     )\n                  )\n               ]\n            )\n         )\n      );\n   }\n}</code></pre>\n\n\n\n<p>The final output of the application is as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/product_listing.jpg\" alt=\"Product Listing\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Since the core concept of&nbsp;Flutter&nbsp;is&nbsp;Everything&nbsp;is&nbsp;widget,&nbsp;Flutter&nbsp;incorporates a user interface layout functionality into the widgets itself.&nbsp;Flutter&nbsp;provides quite a lot of specially designed widgets like&nbsp;Container, Center, Align, etc., only for the purpose of laying out the user interface. Widgets build by composing other widgets normally use layout widgets. Let use learn the&nbsp;Flutter&nbsp;layout concept in this chapter. Type of [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3261"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3261"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3261/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3261"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3261"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3261"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3263,
    "date": "2020-12-16T11:05:45",
    "date_gmt": "2020-12-16T11:05:45",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3263"
    },
    "modified": "2020-12-16T11:05:45",
    "modified_gmt": "2020-12-16T11:05:45",
    "slug": "introduction-to-gestures",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-to-gestures/",
    "title": {
      "rendered": "Introduction to Gestures"
    },
    "content": {
      "rendered": "\n<p><em>Gestures</em>&nbsp;are primarily a way for a user to interact with a mobile (or any touch based device) application. Gestures are generally defined as any physical action / movement of a user in the intention of activating a specific control of the mobile device. Gestures are as simple as tapping the screen of the mobile device to more complex actions used in gaming applications.</p>\n\n\n\n<p>Some of the widely used gestures are mentioned here −</p>\n\n\n\n<ul><li><strong>Tap</strong>&nbsp;− Touching the surface of the device with fingertip for a short period and then releasing the fingertip.</li><li><strong>Double Tap</strong>&nbsp;− Tapping twice in a short time.</li><li><strong>Drag</strong>&nbsp;− Touching the surface of the device with fingertip and then moving the fingertip in a steady manner and then finally releasing the fingertip.</li><li><strong>Flick</strong>&nbsp;− Similar to dragging, but doing it in a speeder way.</li><li><strong>Pinch</strong>&nbsp;− Pinching the surface of the device using two fingers.</li><li><strong>Spread/Zoom</strong>&nbsp;− Opposite of pinching.</li><li><strong>Panning</strong>&nbsp;− Touching the surface of the device with fingertip and moving it in any direction without releasing the fingertip.</li></ul>\n\n\n\n<p>Flutter provides an excellent support for all type of gestures through its exclusive widget,&nbsp;<strong>GestureDetector</strong>. GestureDetector is a non-visual widget primarily used for detecting the user’s gesture. To identify a gesture targeted on a widget, the widget can be placed inside GestureDetector widget. GestureDetector will capture the gesture and dispatch multiple events based on the gesture.</p>\n\n\n\n<p>Some of the gestures and the corresponding events are given below −</p>\n\n\n\n<ul><li>Tap<ul><li>onTapDown</li><li>onTapUp</li><li>onTap</li><li>onTapCancel</li></ul></li><li>Double tap<ul><li>onDoubleTap</li></ul></li><li>Long press<ul><li>onLongPress</li></ul></li><li>Vertical drag<ul><li>onVerticalDragStart</li><li>onVerticalDragUpdate</li><li>onVerticalDragEnd</li></ul></li><li>Horizontal drag<ul><li>onHorizontalDragStart</li><li>onHorizontalDragUpdate</li><li>onHorizontalDragEnd</li></ul></li><li>Pan<ul><li>onPanStart</li><li>onPanUpdate</li><li>onPanEnd</li></ul></li></ul>\n\n\n\n<p>Now, let us modify the hello world application to include gesture detection feature and try to understand the concept.</p>\n\n\n\n<ul><li>Change the body content of the&nbsp;<em>MyHomePage</em>&nbsp;widget as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>body: Center( \n   child: GestureDetector( \n      onTap: () { \n         _showDialog(context); \n      }, \n      child: Text( 'Hello World', ) \n   ) \n),</code></pre>\n\n\n\n<ul><li>Observe that here we have placed the&nbsp;<em>GestureDetector</em>&nbsp;widget above the Text widget in the widget hierarchy, captured the onTap event and then finally shown a dialog window.</li><li>Implement the *_showDialog* function to present a dialog when user tabs the&nbsp;<em>hello world message</em>. It uses the generic&nbsp;<em>showDialog</em>&nbsp;and&nbsp;<em>AlertDialog</em>&nbsp;widget to create a new dialog widget. The code is shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>// user defined function void _showDialog(BuildContext context) { \n   // flutter defined function \n   showDialog( \n      context: context, builder: (BuildContext context) { \n         // return object of type Dialog\n         return AlertDialog( \n            title: new Text(\"Message\"), \n            content: new Text(\"Hello World\"),   \n            actions: &lt;Widget>&#91; \n               new FlatButton( \n                  child: new Text(\"Close\"),  \n                  onPressed: () {   \n                     Navigator.of(context).pop();  \n                  }, \n               ), \n            ], \n         ); \n      }, \n   ); \n}</code></pre>\n\n\n\n<ul><li>The application will reload in the device using Hot Reload feature. Now, simply click the message, Hello World and it will show the dialog as below −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/hot_reload_feature.jpg\" alt=\"Hot Reload Features\"/></figure>\n\n\n\n<ul><li>Now, close the dialog by clicking the&nbsp;<em>close</em>&nbsp;option in the dialog.</li><li>The complete code (main.dart) is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nvoid main() => runApp(MyApp()); \n\nclass MyApp extends StatelessWidget { \n   // This widget is the root of your application.    \n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Hello World Demo Application', \n         theme: ThemeData( primarySwatch: Colors.blue,), \n         home: MyHomePage(title: 'Home page'), \n      ); \n   }\n}\nclass MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   \n   // user defined function \n   void _showDialog(BuildContext context) { \n      // flutter defined function showDialog( \n         context: context, builder: (BuildContext context) { \n            // return object of type Dialog return AlertDialog(\n               title: new Text(\"Message\"), \n               content: new Text(\"Hello World\"),   \n               actions: &lt;Widget>&#91;\n                  new FlatButton(\n                     child: new Text(\"Close\"), \n                     onPressed: () {   \n                        Navigator.of(context).pop();  \n                     }, \n                  ), \n               ],\n            );\n         },\n      );\n   }\n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title: Text(this.title),),\n         body: Center(\n            child: GestureDetector( \n               onTap: () {\n                  _showDialog(context);\n               },\n            child: Text( 'Hello World', )\n            )\n         ),\n      );\n   }\n}</code></pre>\n\n\n\n<p>Finally, Flutter also provides a low-level gesture detection mechanism through&nbsp;<em>Listener</em>&nbsp;widget. It will detect all user interactions and then dispatches the following events −</p>\n\n\n\n<ul><li>PointerDownEvent</li><li>PointerMoveEvent</li><li>PointerUpEvent</li><li>PointerCancelEvent</li></ul>\n\n\n\n<p>Flutter also provides a small set of widgets to do specific as well as advanced gestures. The widgets are listed below −</p>\n\n\n\n<ul><li><strong>Dismissible</strong>&nbsp;− Supports flick gesture to dismiss the widget.</li><li><strong>Draggable</strong>&nbsp;− Supports drag gesture to move the widget.</li><li><strong>LongPressDraggable</strong>&nbsp;− Supports drag gesture to move a widget, when its parent widget is also draggable.</li><li><strong>DragTarget</strong>&nbsp;− Accepts any&nbsp;<em>Draggable</em>&nbsp;widget</li><li><strong>IgnorePointer</strong>&nbsp;− Hides the widget and its children from the gesture detection process.</li><li><strong>AbsorbPointer</strong>&nbsp;− Stops the gesture detection process itself and so any overlapping widget also can not able to participate in the gesture detection process and hence, no event is raised.</li><li><strong>Scrollable</strong>&nbsp;− Support scrolling of the content available inside the widget.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Gestures&nbsp;are primarily a way for a user to interact with a mobile (or any touch based device) application. Gestures are generally defined as any physical action / movement of a user in the intention of activating a specific control of the mobile device. Gestures are as simple as tapping the screen of the mobile device [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3263"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3263"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3263/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3263"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3263"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3263"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3265,
    "date": "2020-12-16T11:09:02",
    "date_gmt": "2020-12-16T11:09:02",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3265"
    },
    "modified": "2020-12-16T11:09:02",
    "modified_gmt": "2020-12-16T11:09:02",
    "slug": "state-management",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/state-management/",
    "title": {
      "rendered": "State Management"
    },
    "content": {
      "rendered": "\n<p>Managing state in an application is one of the most important and necessary process in the life cycle of an application.</p>\n\n\n\n<p>Let us consider a simple shopping cart application.</p>\n\n\n\n<ul><li>User will login using their credentials into the application.</li><li>Once user is logged in, the application should persist the logged in user detail in all the screen.</li><li>Again, when the user selects a product and saved into a cart, the cart information should persist between the pages until the user checked out the cart.</li><li>User and their cart information at any instance is called the state of the application at that instance.</li></ul>\n\n\n\n<p>A state management can be divided into two categories based on the duration the particular state lasts in an application.</p>\n\n\n\n<ul><li><strong>Ephemeral</strong> − Last for a few seconds like the current state of an animation or a single page like current rating of a product. <em>Flutter</em> supports its through StatefulWidget.</li><li><strong>app state</strong> − Last for entire application like logged in user details, cart information, etc., <em>Flutter</em> supports its through scoped_model.</li></ul>\n\n\n\n<h2>Navigation and Routing</h2>\n\n\n\n<p>In any application, navigating from one page / screen to another defines the work flow of the application. The way that the navigation of an application is handled is called Routing. Flutter provides a basic routing class – MaterialPageRoute and two methods &#8211; Navigator.push and Navigator.pop, to define the work flow of an application.</p>\n\n\n\n<h3>MaterialPageRoute</h3>\n\n\n\n<p>MaterialPageRoute is a widget used to render its UI by replacing the entire screen with a platform specific animation.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>MaterialPageRoute(builder: (context) => Widget())\n</code></pre>\n\n\n\n<p>Here, builder will accepts a function to build its content by suppling the current context of the application.</p>\n\n\n\n<h3>Navigation.push</h3>\n\n\n\n<p>Navigation.push is used to navigate to new screen using MaterialPageRoute widget.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Navigator.push( context, MaterialPageRoute(builder: (context) => Widget()), );\n</code></pre>\n\n\n\n<h3>Navigation.pop</h3>\n\n\n\n<p>Navigation.pop is used to navigate to previous screen.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Navigator.push(context);\n</code></pre>\n\n\n\n<p>Let us create a new application to better understand the navigation concept.</p>\n\n\n\n<p>Create a new Flutter application in Android studio, product_nav_app</p>\n\n\n\n<ul><li>Copy the assets folder from product_nav_app to product_state_app and add assets inside the pubspec.yaml file.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter:\n   assets: \n   - assets/appimages/floppy.png \n   - assets/appimages/iphone.png \n   - assets/appimages/laptop.png \n   - assets/appimages/pendrive.png \n   - assets/appimages/pixel.png \n   - assets/appimages/tablet.png\n</code></pre>\n\n\n\n<ul><li>Replace the default startup code (main.dart) with our startup code.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nvoid main() => runApp(MyApp()); \n\nclass MyApp extends StatelessWidget { \n   // This widget is the root of your application. \n   @override \n   Widget build(BuildContext context) { \n      return MaterialApp( \n         title: 'Flutter Demo', \n         theme: ThemeData( \n            primarySwatch: Colors.blue, \n         ), \n         home: MyHomePage(\n            title: 'Product state demo home page'\n         ),\n      );\n   }\n}\nclass MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key);\n   final String title;\n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(\n            title: Text(this.title), \n         ), \n         body: Center(\n            child: Text('Hello World',)\n         ), \n      ); \n   } \n}</code></pre>\n\n\n\n<ul><li>Let us create a Product class to organize the product information.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class Product { \n   final String name; \n   final String description; \n   final int price; \n   final String image; \n   Product(this.name, this.description, this.price, this.image); \n}</code></pre>\n\n\n\n<ul><li>Let us write a method getProducts in the Product class to generate our dummy product records.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>static List&lt;Product> getProducts() {\n   List&lt;Product> items = &lt;Product>&#91;]; \n   \n   items.add(\n      Product( \n         \"Pixel\", \n         \"Pixel is the most feature-full phone ever\", 800, \n         \"pixel.png\"\n      )\n   ); \n   items.add(\n      Product(\n         \"Laptop\", \n         \"Laptop is most productive development tool\", \n         2000, \"\n         laptop.png\"\n      )\n   ); \n   items.add(\n      Product( \n         \"Tablet\", \n         \"Tablet is the most useful device ever for meeting\", \n         1500, \n         \"tablet.png\"\n      )\n   ); \n   items.add(\n      Product( \n         \"Pendrive\", \n         \"Pendrive is useful storage medium\",\n         100, \n         \"pendrive.png\"\n      )\n   ); \n   items.add(\n      Product( \n         \"Floppy Drive\", \n         \"Floppy drive is useful rescue storage medium\", \n         20, \n         \"floppy.png\"\n      )\n   ); \n   return items; \n}\nimport product.dart in main.dart\nimport 'Product.dart';</code></pre>\n\n\n\n<ul><li>Let us include our new widget, RatingBox.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class RatingBox extends StatefulWidget {\n   @override \n   _RatingBoxState createState() =>_RatingBoxState(); \n} \nclass _RatingBoxState extends State&lt;RatingBox> {\n   int _rating = 0; \n   void _setRatingAsOne() {\n      setState(() {\n         _rating = 1; \n      }); \n   } \n   void _setRatingAsTwo() {\n      setState(() {\n         _rating = 2; \n      }); \n   }\n   void _setRatingAsThree() {\n      setState(() {\n         _rating = 3;\n      });\n   }\n   Widget build(BuildContext context) {\n      double _size = 20; \n      print(_rating); \n      return Row(\n         mainAxisAlignment: MainAxisAlignment.end, \n         crossAxisAlignment: CrossAxisAlignment.end, \n         mainAxisSize: MainAxisSize.max, \n         children: &lt;Widget>&#91;\n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton(\n                  icon: (\n                     _rating >= 1? \n                     Icon( \n                        Icons.star, \n                        size: _size, \n                     ) \n                     : Icon(\n                        Icons.star_border, \n                        size: _size, \n                     )\n                  ), \n                  color: Colors.red&#91;500], \n                  onPressed: _setRatingAsOne, \n                  iconSize: _size, \n               ), \n            ), \n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton(\n                  icon: (\n                     _rating >= 2? \n                     Icon(\n                        Icons.star, \n                        size: _size, \n                     ) \n                     : Icon(\n                        Icons.star_border, \n                        size: _size, \n                     )\n                  ), \n                  color: Colors.red&#91;500], \n                  onPressed: _setRatingAsTwo, \n                  iconSize: _size, \n               ), \n            ), \n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton(\n                  icon: (\n                     _rating >= 3 ? \n                     Icon(\n                        Icons.star, \n                        size: _size, \n                     ) \n                     : Icon( \n                        Icons.star_border, \n                        size: _size, \n                     )\n                  ), \n                  color: Colors.red&#91;500], \n                  onPressed: _setRatingAsThree, \n                  iconSize: _size, \n               ), \n            ), \n         ], \n      ); \n   }\n}</code></pre>\n\n\n\n<ul><li>Let us modify our ProductBox widget to work with our new Product class.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class ProductBox extends StatelessWidget {    \n   ProductBox({Key key, this.item}) : super(key: key); \n   final Product item; \n   \n   Widget build(BuildContext context) {\n      return Container(\n         padding: EdgeInsets.all(2), \n         height: 140, \n         child: Card( \n            child: Row(\n               mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n               children: &lt;Widget>&#91; \n                  Image.asset(\"assets/appimages/\" + this.item.image), \n                  Expanded(\n                     child: Container(\n                        padding: EdgeInsets.all(5), \n                        child: Column(\n                           mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                           children: &lt;Widget>&#91;\n                              Text(this.item.name, \n                              style: TextStyle(fontWeight: FontWeight.bold)), \n                              Text(this.item.description), \n                              Text(\"Price: \" + this.item.price.toString()), \n                              RatingBox(), \n                           ], \n                        )\n                     )\n                  )\n               ]\n            ), \n         )\n      ); \n   }\n}</code></pre>\n\n\n\n<p>Let us rewrite our MyHomePage widget to work with Product model and to list all products using ListView.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   final items = Product.getProducts(); \n   \n   @override \n   Widget build(BuildContext context) { \n      return Scaffold( appBar: AppBar(title: Text(\"Product Navigation\")), \n      body: ListView.builder( \n         itemCount: items.length, \n         itemBuilder: (context, index) {\n            return GestureDetector( \n               child: ProductBox(item: items&#91;index]), \n               onTap: () { \n                  Navigator.push( \n                     context, MaterialPageRoute( \n                        builder: (context) => ProductPage(item: items&#91;index]), \n                     ), \n                  ); \n               }, \n            ); \n         }, \n      )); \n   } \n}</code></pre>\n\n\n\n<p>Here, we have used MaterialPageRoute to navigate to product details page.</p>\n\n\n\n<ul><li>Now, let us add ProductPage to show the product details.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class ProductPage extends StatelessWidget { \n   ProductPage({Key key, this.item}) : super(key: key); \n   final Product item; \n   \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar( \n            title: Text(this.item.name), \n         ), \n         body: Center(\n            child: Container(\n               padding: EdgeInsets.all(0), \n               child: Column(\n                  mainAxisAlignment: MainAxisAlignment.start, \n                  crossAxisAlignment: CrossAxisAlignment.start, \n                  children: &lt;Widget>&#91;\n                     Image.asset(\"assets/appimages/\" + this.item.image), \n                     Expanded(\n                        child: Container(\n                           padding: EdgeInsets.all(5), \n                           child: Column(\n                              mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                              children: &lt;Widget>&#91;\n                                 Text(\n                                    this.item.name, style: TextStyle(\n                                       fontWeight: FontWeight.bold\n                                    )\n                                 ), \n                                 Text(this.item.description), \n                                 Text(\"Price: \" + this.item.price.toString()), \n                                 RatingBox(),\n                              ], \n                           )\n                        )\n                     )\n                  ]\n               ), \n            ), \n         ), \n      ); \n   } \n}</code></pre>\n\n\n\n<p>The complete code of the application is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nvoid main() => runApp(MyApp()); \n\nclass Product {\n   final String name; \n   final String description; \n   final int price; \n   final String image; \n   Product(this.name, this.description, this.price, this.image); \n   \n   static List&lt;Product> getProducts() {\n      List&lt;Product> items = &lt;Product>&#91;]; \n      items.add(\n         Product(\n            \"Pixel\", \n            \"Pixel is the most featureful phone ever\", \n            800, \n            \"pixel.png\"\n         )\n      );\n      items.add(\n         Product(\n            \"Laptop\", \n            \"Laptop is most productive development tool\", \n            2000, \n            \"laptop.png\"\n         )\n      ); \n      items.add(\n         Product(\n            \"Tablet\", \n            \"Tablet is the most useful device ever for meeting\", \n            1500, \n            \"tablet.png\"\n         )\n      ); \n      items.add(\n         Product( \n            \"Pendrive\", \n            \"iPhone is the stylist phone ever\", \n            100, \n            \"pendrive.png\"\n         )\n      ); \n      items.add(\n         Product(\n            \"Floppy Drive\", \n            \"iPhone is the stylist phone ever\", \n            20, \n            \"floppy.png\"\n         )\n      ); \n      items.add(\n         Product(\n            \"iPhone\", \n            \"iPhone is the stylist phone ever\", \n            1000, \n            \"iphone.png\"\n         )\n      ); \n      return items; \n   }\n}\nclass MyApp extends StatelessWidget {\n   // This widget is the root of your application. \n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Flutter Demo', \n         theme: ThemeData( \n            primarySwatch: Colors.blue, \n         ), \n         home: MyHomePage(title: 'Product Navigation demo home page'), \n      ); \n   }\n}\nclass MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   final items = Product.getProducts(); \n   \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title: Text(\"Product Navigation\")), \n         body: ListView.builder( \n            itemCount: items.length, \n            itemBuilder: (context, index) { \n               return GestureDetector( \n                  child: ProductBox(item: items&#91;index]), \n                  onTap: () { \n                     Navigator.push( \n                        context, \n                        MaterialPageRoute( \n                           builder: (context) => ProductPage(item: items&#91;index]), \n                        ), \n                     ); \n                  }, \n               ); \n            }, \n         )\n      ); \n   }\n} \nclass ProductPage extends StatelessWidget {\n   ProductPage({Key key, this.item}) : super(key: key); \n   final Product item; \n   \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(\n            title: Text(this.item.name), \n         ), \n         body: Center(\n            child: Container( \n               padding: EdgeInsets.all(0), \n               child: Column( \n                  mainAxisAlignment: MainAxisAlignment.start, \n                  crossAxisAlignment: CrossAxisAlignment.start, \n                  children: &lt;Widget>&#91; \n                     Image.asset(\"assets/appimages/\" + this.item.image), \n                     Expanded( \n                        child: Container( \n                           padding: EdgeInsets.all(5), \n                           child: Column( \n                              mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                              children: &lt;Widget>&#91; \n                                 Text(this.item.name, style: TextStyle(fontWeight: FontWeight.bold)), \n                                 Text(this.item.description), \n                                 Text(\"Price: \" + this.item.price.toString()), \n                                 RatingBox(), \n                              ], \n                           )\n                        )\n                     ) \n                  ]\n               ), \n            ), \n         ), \n      ); \n   } \n}\nclass RatingBox extends StatefulWidget { \n   @override \n   _RatingBoxState createState() => _RatingBoxState(); \n} \nclass _RatingBoxState extends State&lt;RatingBox> { \n   int _rating = 0;\n   void _setRatingAsOne() {\n      setState(() {\n         _rating = 1; \n      }); \n   }\n   void _setRatingAsTwo() {\n      setState(() {\n         _rating = 2; \n      }); \n   } \n   void _setRatingAsThree() { \n      setState(() {\n         _rating = 3; \n      }); \n   }\n   Widget build(BuildContext context) {\n      double _size = 20; \n      print(_rating); \n      return Row(\n         mainAxisAlignment: MainAxisAlignment.end, \n         crossAxisAlignment: CrossAxisAlignment.end, \n         mainAxisSize: MainAxisSize.max, \n         children: &lt;Widget>&#91;\n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton(\n                  icon: (\n                     _rating >= 1 ? Icon( \n                        Icons.star, \n                        size: _size, \n                     ) \n                     : Icon( \n                        Icons.star_border, \n                        size: _size, \n                     )\n                  ), \n                  color: Colors.red&#91;500], \n                  onPressed: _setRatingAsOne, \n                  iconSize: _size, \n               ), \n            ), \n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton( \n                  icon: (\n                     _rating >= 2 ? \n                     Icon( \n                        Icons.star, \n                        size: _size, \n                     ) \n                     : Icon( \n                        Icons.star_border, \n                        size: _size, \n                     )\n                  ), \n                  color: Colors.red&#91;500], \n                  onPressed: _setRatingAsTwo, \n                  iconSize: _size, \n               ), \n            ), \n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton(\n                  icon: (\n                     _rating >= 3 ? \n                     Icon( \n                        Icons.star, \n                        size: _size, \n                     )\n                     : Icon( \n                        Icons.star_border, \n                        size: _size, \n                     )\n                  ), \n                  color: Colors.red&#91;500], \n                  onPressed: _setRatingAsThree, \n                  iconSize: _size, \n               ), \n            ), \n         ], \n      ); \n   } \n} \nclass ProductBox extends StatelessWidget {\n   ProductBox({Key key, this.item}) : super(key: key); \n   final Product item; \n   \n   Widget build(BuildContext context) {\n      return Container(\n         padding: EdgeInsets.all(2), \n         height: 140, \n         child: Card(\n            child: Row(\n               mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n               children: &lt;Widget>&#91; \n                  Image.asset(\"assets/appimages/\" + this.item.image), \n                  Expanded( \n                     child: Container( \n                        padding: EdgeInsets.all(5), \n                        child: Column( \n                           mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                           children: &lt;Widget>&#91; \n                              Text(this.item.name, style: TextStyle(fontWeight: FontWeight.bold)), Text(this.item.description), \n                              Text(\"Price: \" + this.item.price.toString()), \n                              RatingBox(), \n                           ], \n                        )\n                     )\n                  ) \n               ]\n            ), \n         )\n      ); \n   } \n}</code></pre>\n\n\n\n<p>Run the application and click any one of the product item. It will show the relevant details page. We can move to home page by clicking back button. The product list page and product details page of the application are shown as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/product_navigation.jpg\" alt=\"Product Navigation\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/pixel1.jpg\" alt=\"Pixel1\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Managing state in an application is one of the most important and necessary process in the life cycle of an application. Let us consider a simple shopping cart application. User will login using their credentials into the application. Once user is logged in, the application should persist the logged in user detail in all the [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3265"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3265"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3265/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3265"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3265"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3265"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5655,
    "date": "2020-12-16T11:13:38",
    "date_gmt": "2020-12-16T11:13:38",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3268"
    },
    "modified": "2020-12-16T11:13:38",
    "modified_gmt": "2020-12-16T11:13:38",
    "slug": "animation-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/animation-2/",
    "title": {
      "rendered": "Animation"
    },
    "content": {
      "rendered": "\n<p>Animation is a complex procedure in any mobile application. In spite of its complexity, Animation enhances the user experience to a new level and provides a rich user interaction. Due to its richness, animation becomes an integral part of modern mobile application. Flutter framework recognizes the importance of Animation and provides a simple and intuitive framework to develop all types of animations.</p>\n\n\n\n<h2>Introduction</h2>\n\n\n\n<p>Animation is a process of showing a series of images / picture in a particular order within a specific duration to give an illusion of movement. The most important aspects of the animation are as follows −</p>\n\n\n\n<ul><li>Animation have two distinct values: Start value and End value. The animation starts from&nbsp;<em>Start</em>&nbsp;value and goes through a series of intermediate values and finally ends at End values. For example, to animate a widget to fade away, the initial value will be the full opacity and the final value will be the zero opacity.</li><li>The intermediate values may be linear or non-linear (curve) in nature and it can be configured. Understand that the animation works as it is configured. Each configuration provides a different feel to the animation. For example, fading a widget will be linear in nature whereas bouncing of a ball will be non-linear in nature.</li><li>The duration of the animation process affects the speed (slowness or fastness) of the animation.</li><li>The ability to control the animation process like starting the animation, stopping the animation, repeating the animation to set number of times, reversing the process of animation, etc.,</li><li>In Flutter, animation system does not do any real animation. Instead, it provides only the values required at every frame to render the images.</li></ul>\n\n\n\n<h2>Animation Based Classes</h2>\n\n\n\n<p>Flutter animation system is based on Animation objects. The core animation classes and its usage are as follows −</p>\n\n\n\n<h3>Animation</h3>\n\n\n\n<p>Generates interpolated values between two numbers over a certain duration. The most common Animation classes are −</p>\n\n\n\n<ul><li><strong>Animation&lt;double&gt;</strong>&nbsp;− interpolate values between two decimal number</li><li><strong>Animation&lt;Color&gt;</strong>&nbsp;− interpolate colors between two color</li><li><strong>Animation&lt;Size&gt;</strong>&nbsp;− interpolate sizes between two size</li><li><strong>AnimationController</strong>&nbsp;− Special Animation object to control the animation itself. It generates new values whenever the application is ready for a new frame. It supports linear based animation and the value starts from 0.0 to 1.0</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>controller = AnimationController(duration: const Duration(seconds: 2), vsync: this);\n</code></pre>\n\n\n\n<p>Here, controller controls the animation and duration option controls the duration of the animation process. vsync is a special option used to optimize the resource used in the animation.</p>\n\n\n\n<h3>CurvedAnimation</h3>\n\n\n\n<p>Similar to AnimationController but supports non-linear animation. CurvedAnimation can be used along with Animation object as below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>controller = AnimationController(duration: const Duration(seconds: 2), vsync: this); \nanimation = CurvedAnimation(parent: controller, curve: Curves.easeIn)</code></pre>\n\n\n\n<h3>Tween&lt;T&gt;</h3>\n\n\n\n<p>Derived from Animatable&lt;T&gt; and used to generate numbers between any two numbers other than 0 and 1. It can be used along with Animation object by using animate method and passing actual Animation object.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>AnimationController controller = AnimationController( \n   duration: const Duration(milliseconds: 1000), \nvsync: this); Animation&lt;int> customTween = IntTween(\n   begin: 0, end: 255).animate(controller);</code></pre>\n\n\n\n<ul><li>Tween can also used along with CurvedAnimation as below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>AnimationController controller = AnimationController(\n   duration: const Duration(milliseconds: 500), vsync: this); \nfinal Animation curve = CurvedAnimation(parent: controller, curve: Curves.easeOut); \nAnimation&lt;int> customTween = IntTween(begin: 0, end: 255).animate(curve);</code></pre>\n\n\n\n<p>Here, controller is the actual animation controller. curve provides the type of non-linearity and the customTween provides custom range from 0 to 255.</p>\n\n\n\n<h2>Work flow of the Flutter Animation</h2>\n\n\n\n<p>The work flow of the animation is as follows −</p>\n\n\n\n<ul><li>Define and start the animation controller in the initState of the StatefulWidget.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>AnimationController(duration: const Duration(seconds: 2), vsync: this); \nanimation = Tween&lt;double>(begin: 0, end: 300).animate(controller); \ncontroller.forward();</code></pre>\n\n\n\n<ul><li>Add animation based listener, addListener to change the state of the widget.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>animation = Tween&lt;double>(begin: 0, end: 300).animate(controller) ..addListener(() {\n   setState(() { \n      // The state that has changed here is the animation object’s value. \n   }); \n});</code></pre>\n\n\n\n<ul><li>Build-in widgets, AnimatedWidget and AnimatedBuilder can be used to skip this process. Both widget accepts Animation object and get current values required for the animation.</li><li>Get the animation values during the build process of the widget and then apply it for width, height or any relevant property instead of the original value.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>child: Container( \n   height: animation.value, \n   width: animation.value, \n   child: &lt;Widget>, \n)</code></pre>\n\n\n\n<h2>Working Application</h2>\n\n\n\n<p>Let us write a simple animation based application to understand the concept of animation in Flutter framework.</p>\n\n\n\n<ul><li>Create a new&nbsp;<em>Flutter</em>&nbsp;application in Android studio, product_animation_app.</li><li>Copy the assets folder from product_nav_app to product_animation_app and add assets inside the pubspec.yaml file.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter: \n   assets: \n   - assets/appimages/floppy.png \n   - assets/appimages/iphone.png \n   - assets/appimages/laptop.png \n   - assets/appimages/pendrive.png \n   - assets/appimages/pixel.png \n   - assets/appimages/tablet.png</code></pre>\n\n\n\n<ul><li>Remove the default startup code (main.dart).</li><li>Add import and basic main function.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nvoid main() => runApp(MyApp());</code></pre>\n\n\n\n<ul><li>Create the MyApp widget derived from StatefulWidgtet.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyApp extends StatefulWidget { \n   _MyAppState createState() => _MyAppState(); \n}</code></pre>\n\n\n\n<ul><li>Create _MyAppState widget and implement initState and dispose in addition to default build method.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class _MyAppState extends State&lt;MyApp> with SingleTickerProviderStateMixin { \n   Animation&lt;double> animation; \n   AnimationController controller; \n   @override void initState() {\n      super.initState(); \n      controller = AnimationController(\n         duration: const Duration(seconds: 10), vsync: this\n      ); \n      animation = Tween&lt;double>(begin: 0.0, end: 1.0).animate(controller); \n      controller.forward(); \n   } \n   // This widget is the root of your application. \n   @override \n   Widget build(BuildContext context) {\n      controller.forward(); \n      return MaterialApp(\n         title: 'Flutter Demo',\n         theme: ThemeData(primarySwatch: Colors.blue,), \n         home: MyHomePage(title: 'Product layout demo home page', animation: animation,)\n      ); \n   } \n   @override \n   void dispose() {\n      controller.dispose();\n      super.dispose();\n   }\n}</code></pre>\n\n\n\n<p>Here,</p>\n\n\n\n<ul><li>In initState method, we have created an animation controller object (controller), an animation object (animation) and started the animation using controller.forward.</li><li>In dispose method, we have disposed the animation controller object (controller).</li><li>In build method, send animation to MyHomePage widget through constructor. Now, MyHomePage widget can use the animation object to animate its content.</li><li>Now, add ProductBox widget</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class ProductBox extends StatelessWidget {\n   ProductBox({Key key, this.name, this.description, this.price, this.image})\n      : super(key: key);\n   final String name; \n   final String description; \n   final int price; \n   final String image; \n   \n   Widget build(BuildContext context) {\n      return Container(\n         padding: EdgeInsets.all(2), \n         height: 140, \n         child: Card( \n            child: Row( \n               mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n               children: &lt;Widget>&#91; \n                  Image.asset(\"assets/appimages/\" + image), \n                  Expanded( \n                     child: Container( \n                        padding: EdgeInsets.all(5), \n                        child: Column( \n                           mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                           children: &lt;Widget>&#91; \n                              Text(this.name, style: \n                                 TextStyle(fontWeight: FontWeight.bold)), \n                              Text(this.description), \n                                 Text(\"Price: \" + this.price.toString()), \n                           ], \n                        )\n                     )\n                  )\n               ]\n            )\n         )\n      ); \n   }\n}</code></pre>\n\n\n\n<ul><li>Create a new widget, MyAnimatedWidget to do simple fade animation using opacity.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyAnimatedWidget extends StatelessWidget { \n   MyAnimatedWidget({this.child, this.animation}); \n      \n   final Widget child; \n   final Animation&lt;double> animation; \n   \n   Widget build(BuildContext context) => Center( \n   child: AnimatedBuilder(\n      animation: animation, \n      builder: (context, child) => Container( \n         child: Opacity(opacity: animation.value, child: child), \n      ), \n      child: child), \n   ); \n}</code></pre>\n\n\n\n<ul><li>Here, we have used AniatedBuilder to do our animation. AnimatedBuilder is a widget which build its content while doing the animation at the same time. It accepts a animation object to get current animation value. We have used animation value, animation.value to set the opacity of the child widget. In effect, the widget will animate the child widget using opacity concept.</li><li>Finally, create the MyHomePage widget and use the animation object to animate any of its content.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title, this.animation}) : super(key: key); \n   \n   final String title; \n   final Animation&lt;double> \n   animation; \n   \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title: Text(\"Product Listing\")),body: ListView(\n            shrinkWrap: true,\n            padding: const EdgeInsets.fromLTRB(2.0, 10.0, 2.0, 10.0), \n            children: &lt;Widget>&#91;\n               FadeTransition(\n                  child: ProductBox(\n                     name: \"iPhone\", \n                     description: \"iPhone is the stylist phone ever\", \n                     price: 1000, \n                     image: \"iphone.png\"\n                  ), opacity: animation\n               ), \n               MyAnimatedWidget(child: ProductBox(\n                  name: \"Pixel\", \n                  description: \"Pixel is the most featureful phone ever\", \n                  price: 800, \n                  image: \"pixel.png\"\n               ), animation: animation), \n               ProductBox(\n                  name: \"Laptop\", \n                  description: \"Laptop is most productive development tool\", \n                  price: 2000, \n                  image: \"laptop.png\"\n               ), \n               ProductBox(\n                  name: \"Tablet\", \n                  description: \"Tablet is the most useful device ever for meeting\", \n                  price: 1500, \n                  image: \"tablet.png\"\n               ), \n               ProductBox(\n                  name: \"Pendrive\", \n                  description: \"Pendrive is useful storage medium\", \n                  price: 100, \n                  image: \"pendrive.png\"\n               ),\n               ProductBox(\n                  name: \"Floppy Drive\", \n                  description: \"Floppy drive is useful rescue storage medium\", \n                  price: 20, \n                  image: \"floppy.png\"\n               ),\n            ],\n         )\n      );\n   }\n}</code></pre>\n\n\n\n<p>Here, we have used FadeAnimation and MyAnimationWidget to animate the first two items in the list. FadeAnimation is a build-in animation class, which we used to animate its child using opacity concept.</p>\n\n\n\n<ul><li>The complete code is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nvoid main() => runApp(MyApp()); \n\nclass MyApp extends StatefulWidget { \n   _MyAppState createState() => _MyAppState(); \n} \nclass _MyAppState extends State&lt;MyApp> with SingleTickerProviderStateMixin {\n   Animation&lt;double> animation; \n   AnimationController controller; \n   \n   @override \n   void initState() {\n      super.initState(); \n      controller = AnimationController(\n         duration: const Duration(seconds: 10), vsync: this); \n      animation = Tween&lt;double>(begin: 0.0, end: 1.0).animate(controller); \n      controller.forward(); \n   } \n   // This widget is the root of your application. \n   @override \n   Widget build(BuildContext context) {\n      controller.forward(); \n      return MaterialApp( \n         title: 'Flutter Demo', theme: ThemeData(primarySwatch: Colors.blue,), \n         home: MyHomePage(title: 'Product layout demo home page', animation: animation,) \n      ); \n   } \n   @override \n   void dispose() {\n      controller.dispose();\n      super.dispose(); \n   } \n}\nclass MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title, this.animation}): super(key: key);\n   final String title; \n   final Animation&lt;double> animation; \n   \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title: Text(\"Product Listing\")), \n         body: ListView(\n            shrinkWrap: true, \n            padding: const EdgeInsets.fromLTRB(2.0, 10.0, 2.0, 10.0), \n            children: &lt;Widget>&#91;\n               FadeTransition(\n                  child: ProductBox(\n                     name: \"iPhone\", \n                     description: \"iPhone is the stylist phone ever\", \n                     price: 1000, \n                     image: \"iphone.png\"\n                  ), \n                  opacity: animation\n               ), \n               MyAnimatedWidget(\n                  child: ProductBox( \n                     name: \"Pixel\", \n                     description: \"Pixel is the most featureful phone ever\", \n                     price: 800, \n                     image: \"pixel.png\"\n                  ), \n                  animation: animation\n               ), \n               ProductBox( \n                  name: \"Laptop\", \n                  description: \"Laptop is most productive development tool\", \n                  price: 2000, \n                  image: \"laptop.png\"\n               ), \n               ProductBox(\n                  name: \"Tablet\",\n                  description: \"Tablet is the most useful device ever for meeting\",\n                  price: 1500, \n                  image: \"tablet.png\"\n               ), \n               ProductBox(\n                  name: \"Pendrive\", \n                  description: \"Pendrive is useful storage medium\", \n                  price: 100, \n                  image: \"pendrive.png\"\n               ), \n               ProductBox(\n                  name: \"Floppy Drive\", \n                  description: \"Floppy drive is useful rescue storage medium\", \n                  price: 20, \n                  image: \"floppy.png\"\n               ), \n            ], \n         )\n      ); \n   } \n} \nclass ProductBox extends StatelessWidget { \n   ProductBox({Key key, this.name, this.description, this.price, this.image}) :\n      super(key: key);\n   final String name; \n   final String description; \n   final int price; \n   final String image; \n   Widget build(BuildContext context) {\n      return Container(\n         padding: EdgeInsets.all(2), \n         height: 140, \n         child: Card(\n            child: Row(\n               mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n               children: &lt;Widget>&#91; \n                  Image.asset(\"assets/appimages/\" + image), \n                  Expanded(\n                     child: Container( \n                        padding: EdgeInsets.all(5), \n                        child: Column( \n                           mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                           children: &lt;Widget>&#91; \n                              Text(\n                                 this.name, style: TextStyle(\n                                    fontWeight: FontWeight.bold\n                                 )\n                              ), \n                              Text(this.description), Text(\n                                 \"Price: \" + this.price.toString()\n                              ), \n                           ], \n                        )\n                     )\n                  ) \n               ]\n            )\n         )\n      ); \n   } \n}\nclass MyAnimatedWidget extends StatelessWidget { \n   MyAnimatedWidget({this.child, this.animation}); \n   final Widget child; \n   final Animation&lt;double> animation; \n \n   Widget build(BuildContext context) => Center( \n      child: AnimatedBuilder(\n         animation: animation, \n         builder: (context, child) => Container( \n            child: Opacity(opacity: animation.value, child: child), \n         ), \n         child: child\n      ), \n   ); \n}</code></pre>\n\n\n\n<ul><li>Compile and run the application to see the results. The initial and final version of the application is as follows −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/initial_version.jpg\" alt=\"Initial Version\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/final_version.jpg\" alt=\"Final Version\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Animation is a complex procedure in any mobile application. In spite of its complexity, Animation enhances the user experience to a new level and provides a rich user interaction. Due to its richness, animation becomes an integral part of modern mobile application. Flutter framework recognizes the importance of Animation and provides a simple and intuitive [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5655"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5655"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5655/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5655"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5655"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5655"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5656,
    "date": "2020-12-16T11:26:22",
    "date_gmt": "2020-12-16T11:26:22",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3270"
    },
    "modified": "2020-12-16T11:26:22",
    "modified_gmt": "2020-12-16T11:26:22",
    "slug": "writing-android-specific-code",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/writing-android-specific-code/",
    "title": {
      "rendered": "Writing Android Specific Code"
    },
    "content": {
      "rendered": "\n<p>Flutter provides a general framework to access platform specific feature. This enables the developer to extend the functionality of the&nbsp;<em>Flutter</em>&nbsp;framework using platform specific code. Platform specific functionality like camera, battery level, browser, etc., can be accessed easily through the framework.</p>\n\n\n\n<p>The general idea of accessing the platform specific code is through simple messaging protocol. Flutter code, Client and the platform code and Host binds to a common Message Channel. Client sends message to the Host through the Message Channel. Host listens on the Message Channel, receives the message and does the necessary functionality and finally, returns the result to the Client through Message Channel.</p>\n\n\n\n<p>The platform specific code architecture is shown in the block diagram given below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/specific_code_architecture.jpg\" alt=\"Specific Code Architecture\"/></figure>\n\n\n\n<p>The messaging protocol uses a standard message codec (StandardMessageCodec class) that supports binary serialization of JSON-like values such as numbers, strings, boolean, etc., The serialization and de-serialization works transparently between the client and the host.</p>\n\n\n\n<p>Let us write a simple application to open a browser using&nbsp;<em>Android SDK</em>&nbsp;and understand how</p>\n\n\n\n<ul><li>Create a new Flutter application in Android studio,&nbsp;<em>flutter_browser_app</em></li><li>Replace main.dart code with below code −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nvoid main() => runApp(MyApp()); \nclass MyApp extends StatelessWidget { \n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Flutter Demo', \n         theme: ThemeData( \n            primarySwatch: Colors.blue, \n         ), \n         home: MyHomePage(title: 'Flutter Demo Home Page'),\n      );\n   }\n}\nclass MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(\n            title: Text(this.title), \n         ), \n         body: Center(\n            child: RaisedButton( \n               child: Text('Open Browser'), \n               onPressed: null, \n            ), \n         ), \n      ); \n   }\n}</code></pre>\n\n\n\n<ul><li>Here, we have created a new button to open the browser and set its onPressed method as null.</li><li>Now, import the following packages −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:async'; \nimport 'package:flutter/services.dart';\n</code></pre>\n\n\n\n<ul><li>Here, services.dart include the functionality to invoke platform specific code.</li><li>Create a new message channel in the MyHomePage widget.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>static const platform = const \nMethodChannel('flutterapp.tutorialspoint.com/browser');</code></pre>\n\n\n\n<ul><li>Write a method, _openBrowser to invoke platform specific method, openBrowser method through message channel.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;void> _openBrowser() async { \n   try {\n      final int result = await platform.invokeMethod(\n         'openBrowser', &lt;String, String>{ \n            'url': \"https://flutter.dev\" \n         }\n      ); \n   } \n   on PlatformException catch (e) { \n      // Unable to open the browser \n      print(e); \n   }\n}</code></pre>\n\n\n\n<p>Here, we have used platform.invokeMethod to invoke openBrowser (explained in coming steps). openBrowser has an argument, url to open a specific url.</p>\n\n\n\n<ul><li>Change the value of onPressed property of the RaisedButton from null to _openBrowser.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>onPressed: _openBrowser,\n</code></pre>\n\n\n\n<ul><li>Open MainActivity.java (inside the android folder) and import the required library −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import android.app.Activity; \nimport android.content.Intent; \nimport android.net.Uri; \nimport android.os.Bundle; \n\nimport io.flutter.app.FlutterActivity; \nimport io.flutter.plugin.common.MethodCall; \nimport io.flutter.plugin.common.MethodChannel; \nimport io.flutter.plugin.common.MethodChannel.MethodCallHandler; \nimport io.flutter.plugin.common.MethodChannel.Result; \nimport io.flutter.plugins.GeneratedPluginRegistrant;</code></pre>\n\n\n\n<ul><li>Write a method, openBrowser to open a browser</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>private void openBrowser(MethodCall call, Result result, String url) { \n   Activity activity = this; \n   if (activity == null) { \n      result.error(\"ACTIVITY_NOT_AVAILABLE\", \n      \"Browser cannot be opened without foreground \n      activity\", null); \n      return; \n   } \n   Intent intent = new Intent(Intent.ACTION_VIEW); \n   intent.setData(Uri.parse(url)); \n   \n   activity.startActivity(intent); \n   result.success((Object) true); \n}</code></pre>\n\n\n\n<ul><li>Now, set channel name in the MainActivity class −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>private static final String CHANNEL = \"flutterapp.tutorialspoint.com/browser\";\n</code></pre>\n\n\n\n<ul><li>Write android specific code to set message handling in the onCreate method −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>new MethodChannel(getFlutterView(), CHANNEL).setMethodCallHandler( \n   new MethodCallHandler() { \n   @Override \n   public void onMethodCall(MethodCall call, Result result) { \n      String url = call.argument(\"url\"); \n      if (call.method.equals(\"openBrowser\")) {\n         openBrowser(call, result, url); \n      } else { \n         result.notImplemented(); \n      } \n   } \n});</code></pre>\n\n\n\n<p>Here, we have created a message channel using MethodChannel class and used MethodCallHandler class to handle the message. onMethodCall is the actual method responsible for calling the correct platform specific code by the checking the message. onMethodCall method extracts the url from message and then invokes the openBrowser only when the method call is openBrowser. Otherwise, it returns notImplemented method.</p>\n\n\n\n<p>The complete source code of the application is as follows −</p>\n\n\n\n<p><strong>main.dart</strong></p>\n\n\n\n<p><strong>MainActivity.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint.flutterapp.flutter_browser_app; \n\nimport android.app.Activity; \nimport android.content.Intent; \nimport android.net.Uri; \nimport android.os.Bundle; \nimport io.flutter.app.FlutterActivity; \nimport io.flutter.plugin.common.MethodCall; \nimport io.flutter.plugin.common.MethodChannel.Result; \nimport io.flutter.plugins.GeneratedPluginRegistrant; \n\npublic class MainActivity extends FlutterActivity { \n   private static final String CHANNEL = \"flutterapp.tutorialspoint.com/browser\"; \n   @Override \n   protected void onCreate(Bundle savedInstanceState) { \n      super.onCreate(savedInstanceState); \n      GeneratedPluginRegistrant.registerWith(this); \n      new MethodChannel(getFlutterView(), CHANNEL).setMethodCallHandler(\n         new MethodCallHandler() {\n            @Override \n            public void onMethodCall(MethodCall call, Result result) {\n               String url = call.argument(\"url\"); \n               if (call.method.equals(\"openBrowser\")) { \n                  openBrowser(call, result, url); \n               } else { \n                  result.notImplemented(); \n               }\n            }\n         }\n      ); \n   }\n   private void openBrowser(MethodCall call, Result result, String url) {\n      Activity activity = this; if (activity == null) {\n         result.error(\n            \"ACTIVITY_NOT_AVAILABLE\", \"Browser cannot be opened without foreground activity\", null\n         ); \n         return; \n      } \n      Intent intent = new Intent(Intent.ACTION_VIEW); \n      intent.setData(Uri.parse(url)); \n      activity.startActivity(intent); \n      result.success((Object) true); \n   }\n}</code></pre>\n\n\n\n<p><strong>main.dart</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nimport 'dart:async'; \nimport 'package:flutter/services.dart'; \n\nvoid main() => runApp(MyApp()); \nclass MyApp extends StatelessWidget {\n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Flutter Demo', \n         theme: ThemeData( \n            primarySwatch: Colors.blue, \n         ), \n         home: MyHomePage(\n            title: 'Flutter Demo Home Page'\n         ), \n      ); \n   }\n}\nclass MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   static const platform = const MethodChannel('flutterapp.tutorialspoint.com/browser'); \n   Future&lt;void> _openBrowser() async {\n      try {\n         final int result = await platform.invokeMethod('openBrowser', &lt;String, String>{ \n            'url': \"https://flutter.dev\" \n         });\n      }\n      on PlatformException catch (e) { \n         // Unable to open the browser print(e); \n      } \n   }\n   @override \n   Widget build(BuildContext context) {\n      return Scaffold( \n         appBar: AppBar( \n            title: Text(this.title), \n         ), \n         body: Center(\n            child: RaisedButton( \n               child: Text('Open Browser'), \n               onPressed: _openBrowser, \n            ), \n         ),\n      );\n   }\n}</code></pre>\n\n\n\n<p>Run the application and click the Open Browser button and you can see that the browser is launched. The Browser app &#8211; Home page is as shown in the screenshot here −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/flutter_demo_home_page.jpg\" alt=\"Flutter Demo Home Page\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/productively_build_apps.jpg\" alt=\"Productively Build Apps\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Flutter provides a general framework to access platform specific feature. This enables the developer to extend the functionality of the&nbsp;Flutter&nbsp;framework using platform specific code. Platform specific functionality like camera, battery level, browser, etc., can be accessed easily through the framework. The general idea of accessing the platform specific code is through simple messaging protocol. Flutter [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5656"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5656"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5656/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5656"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5656"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5656"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5657,
    "date": "2020-12-16T11:28:39",
    "date_gmt": "2020-12-16T11:28:39",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3272"
    },
    "modified": "2020-12-16T11:28:39",
    "modified_gmt": "2020-12-16T11:28:39",
    "slug": "writing-ios-specific-code",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/writing-ios-specific-code/",
    "title": {
      "rendered": "Writing IOS Specific Code"
    },
    "content": {
      "rendered": "\n<p>Accessing iOS specific code is similar to that on Android platform except that it uses iOS specific languages &#8211; Objective-C or Swift and iOS SDK. Otherwise, the concept is same as that of the Android platform.</p>\n\n\n\n<p>Let us write the same application as in the previous chapter for iOS platform as well.</p>\n\n\n\n<ul><li>Let us create a new application in Android Studio (macOS),&nbsp;<em>flutter_browser_ios_app</em></li><li>Follow steps 2 &#8211; 6 as in previous chapter.</li><li>Start XCode and click&nbsp;<strong>File → Open</strong></li><li>Choose the xcode project under ios directory of our flutter project.</li><li>Open AppDelegate.m under&nbsp;<strong>Runner → Runner path</strong>. It contains the following code −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>#include \"AppDelegate.h\" \n#include \"GeneratedPluginRegistrant.h\" \n@implementation AppDelegate \n\n- (BOOL)application:(UIApplication *)application\n   didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n      // &#91;GeneratedPluginRegistrant registerWithRegistry:self];\n      // Override point for customization after application launch.\n      return &#91;super application:application didFinishLaunchingWithOptions:launchOptions];\n   } \n@end</code></pre>\n\n\n\n<ul><li>We have added a method, openBrowser to open browser with specified url. It accepts single argument, url.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>- (void)openBrowser:(NSString *)urlString { \n   NSURL *url = &#91;NSURL URLWithString:urlString]; \n   UIApplication *application = &#91;UIApplication sharedApplication]; \n   &#91;application openURL:url]; \n}</code></pre>\n\n\n\n<ul><li>In didFinishLaunchingWithOptions method, find the controller and set it in controller variable.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>FlutterViewController* controller = (FlutterViewController*)self.window.rootViewController;\n</code></pre>\n\n\n\n<ul><li>In didFinishLaunchingWithOptions method, set the browser channel as flutterapp.tutorialspoint.com/browse −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>FlutterMethodChannel* browserChannel = &#91;\n   FlutterMethodChannel methodChannelWithName:\n   @\"flutterapp.tutorialspoint.com/browser\" binaryMessenger:controller];</code></pre>\n\n\n\n<ul><li>Create a variable, weakSelf and set current class −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>__weak typeof(self) weakSelf = self;\n</code></pre>\n\n\n\n<ul><li>Now, implement setMethodCallHandler. Call openBrowser by matching call.method. Get url by invoking call.arguments and pass it while calling openBrowser.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;browserChannel setMethodCallHandler:^(FlutterMethodCall* call, FlutterResult result) {\n   if (&#91;@\"openBrowser\" isEqualToString:call.method]) { \n      NSString *url = call.arguments&#91;@\"url\"];   \n      &#91;weakSelf openBrowser:url]; \n   } else { result(FlutterMethodNotImplemented); } \n}];</code></pre>\n\n\n\n<ul><li>The complete code is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>#include \"AppDelegate.h\" \n#include \"GeneratedPluginRegistrant.h\" \n@implementation AppDelegate \n\n- (BOOL)application:(UIApplication *)application \n   didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n   \n   // custom code starts \n   FlutterViewController* controller = (FlutterViewController*)self.window.rootViewController; \n   FlutterMethodChannel* browserChannel = &#91;\n      FlutterMethodChannel methodChannelWithName:\n      @\"flutterapp.tutorialspoint.com /browser\" binaryMessenger:controller]; \n   \n   __weak typeof(self) weakSelf = self; \n   &#91;browserChannel setMethodCallHandler:^(\n      FlutterMethodCall* call, FlutterResult result) { \n      \n      if (&#91;@\"openBrowser\" isEqualToString:call.method]) { \n         NSString *url = call.arguments&#91;@\"url\"];\n         &#91;weakSelf openBrowser:url]; \n      } else { result(FlutterMethodNotImplemented); } \n   }]; \n   // custom code ends \n   &#91;GeneratedPluginRegistrant registerWithRegistry:self]; \n   \n   // Override point for customization after application launch. \n   return &#91;super application:application didFinishLaunchingWithOptions:launchOptions]; \n}\n- (void)openBrowser:(NSString *)urlString { \n   NSURL *url = &#91;NSURL URLWithString:urlString]; \n   UIApplication *application = &#91;UIApplication sharedApplication]; \n   &#91;application openURL:url]; \n} \n@end</code></pre>\n\n\n\n<ul><li>Open project setting.</li><li>Go to&nbsp;<strong>Capabilities</strong>&nbsp;and enable&nbsp;<strong>Background Modes</strong>.</li><li>Add&nbsp;<strong>*Background fetch</strong>&nbsp;and&nbsp;<strong>Remote Notification**</strong>.</li><li>Now, run the application. It works similar to Android version but the Safari browser will be opened instead of chrome.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Accessing iOS specific code is similar to that on Android platform except that it uses iOS specific languages &#8211; Objective-C or Swift and iOS SDK. Otherwise, the concept is same as that of the Android platform. Let us write the same application as in the previous chapter for iOS platform as well. Let us create [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5657"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5657"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5657/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5657"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5657"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5657"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3274,
    "date": "2020-12-16T11:32:26",
    "date_gmt": "2020-12-16T11:32:26",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3274"
    },
    "modified": "2020-12-16T11:32:26",
    "modified_gmt": "2020-12-16T11:32:26",
    "slug": "introduction-to-package",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/introduction-to-package/",
    "title": {
      "rendered": "Introduction to Package"
    },
    "content": {
      "rendered": "\n<p>Dart’s way of organizing and sharing a set of functionality is through Package. Dart Package is simply sharable libraries or modules. In general, the Dart Package is same as that of Dart Application except Dart Package does not have application entry point, main.</p>\n\n\n\n<p>The general structure of Package (consider a demo package, my_demo_package) is as below −</p>\n\n\n\n<ul><li><strong>lib/src/*</strong>&nbsp;− Private Dart code files.</li><li><strong>lib/my_demo_package.dart</strong>&nbsp;− Main Dart code file. It can be imported into an application as −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:my_demo_package/my_demo_package.dart'\n</code></pre>\n\n\n\n<ul><li>Other private code file may be exported into the main code file (my_demo_package.dart), if necessary as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>export src/my_private_code.dart\n</code></pre>\n\n\n\n<ul><li><strong>lib/*</strong>&nbsp;− Any number of Dart code files arranged in any custom folder structure. The code can be accessed as,</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:my_demo_package/custom_folder/custom_file.dart'\n</code></pre>\n\n\n\n<ul><li><strong>pubspec.yaml</strong>&nbsp;− Project specification, same as that of application,</li></ul>\n\n\n\n<p>All Dart code files in the Package are simply Dart classes and it does not have any special requirement for a Dart code to include it in a Package.</p>\n\n\n\n<h2>Types of Packages</h2>\n\n\n\n<p>Since Dart Packages are basically a small collection of similar functionality, it can be categorized based on its functionality.</p>\n\n\n\n<h3>Dart Package</h3>\n\n\n\n<p>Generic Dart code, which can be used in both web and mobile environment. For example, english_words is one such package which contains around 5000 words and has basic utility functions like nouns (list nouns in the English), syllables (specify number of syllables in a word.</p>\n\n\n\n<h3>Flutter Package</h3>\n\n\n\n<p>Generic Dart code, which depends on Flutter framework and can be used only in mobile environment. For example, fluro is a custom router for flutter. It depends on the Flutter framework.</p>\n\n\n\n<h3>Flutter Plugin</h3>\n\n\n\n<p>Generic Dart code, which depends on Flutter framework as well as the underlying platform code (Android SDK or iOS SDK). For example, camera is a plugin to interact with device camera. It depends on the Flutter framework as well as the underlying framework to get access to camera.</p>\n\n\n\n<h2>Using a Dart Package</h2>\n\n\n\n<p>Dart Packages are hosted and published into the live server, https://pub.dartlang.org. Also, Flutter provides simple tool, pub to manage Dart Packages in the application. The steps needed to use as Package is as follows −</p>\n\n\n\n<ul><li>Include the package name and the version needed into the pubspec.yaml as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: english_words: ^3.1.5\n</code></pre>\n\n\n\n<ul><li>The latest version number can be found by checking the online server.</li><li>Install the package into the application by using the following command −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter packages get\n</code></pre>\n\n\n\n<ul><li>While developing in the Android studio, Android Studio detects any change in the pubspec.yaml and displays an Android studio package alert to the developer as shown below −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/package_alert.jpg\" alt=\"Package Alert\"/></figure>\n\n\n\n<ul><li>Dart Packages can be installed or updated in Android Studio using the menu options.</li><li>Import the necessary file using the command shown below and start working −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:english_words/english_words.dart';\n</code></pre>\n\n\n\n<ul><li>Use any method available in the package,</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>nouns.take(50).forEach(print);\n</code></pre>\n\n\n\n<ul><li>Here, we have used nouns function to get and print the top 50 words.</li></ul>\n\n\n\n<h2>Develop a Flutter Plugin Package</h2>\n\n\n\n<p>Developing a Flutter Plugin is similar to developing a Dart application or Dart Package. The only exception is that the plugin is going to use System API (Android or iOS) to get the required platform specific functionality.</p>\n\n\n\n<p>As we have already learned how to access platform code in the previous chapters, let us develop a simple plugin, my_browser to understand the plugin development process. The functionality of the my_browser plugin is to allow the application to open the given website in the platform specific browser.</p>\n\n\n\n<ul><li>Start Android Studio.</li><li>Click&nbsp;<strong>File → New Flutter Project</strong>&nbsp;and select Flutter Plugin option.</li><li>You can see a Flutter plugin selection window as shown here −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/flutter_plugin.jpg\" alt=\"Flutter Plugin\"/></figure>\n\n\n\n<ul><li>Enter my_browser as project name and click Next.</li><li>Enter the plugin name and other details in the window as shown here −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/configure_new_flutter_plugin.jpg\" alt=\"Configure New Flutter Plugin\"/></figure>\n\n\n\n<ul><li>Enter company domain, flutterplugins.tutorialspoint.com in the window shown below and then click on&nbsp;<strong>Finish</strong>. It will generate a startup code to develop our new plugin.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/package_name.jpg\" alt=\"Package Name\"/></figure>\n\n\n\n<ul><li>Open my_browser.dart file and write a method, openBrowser to invoke platform specific openBrowser method.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;void> openBrowser(String urlString) async { \n   try {\n      final int result = await _channel.invokeMethod(\n         'openBrowser', &lt;String, String>{ 'url': urlString }\n      );\n   }\n   on PlatformException catch (e) { \n      // Unable to open the browser print(e); \n   } \n}</code></pre>\n\n\n\n<ul><li>Open MyBrowserPlugin.java file and import the following classes −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import android.app.Activity; \nimport android.content.Intent; \nimport android.net.Uri; \nimport android.os.Bundle;\n</code></pre>\n\n\n\n<ul><li>Here, we have to import library required for opening a browser from Android.</li><li>Add new private variable mRegistrar of type Registrar in MyBrowserPlugin class.</li></ul>\n\n\n\n<pre class=\"wp-block-preformatted\">private final Registrar mRegistrar;\n</pre>\n\n\n\n<ul><li>Here, Registrar is used to get context information of the invoking code.</li><li>Add a constructor to set Registrar in MyBrowserPlugin class.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>private MyBrowserPlugin(Registrar registrar) { \n   this.mRegistrar = registrar; \n}\n</code></pre>\n\n\n\n<ul><li>Change registerWith to include our new constructor in MyBrowserPlugin class.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>public static void registerWith(Registrar registrar) { \n   final MethodChannel channel = new MethodChannel(registrar.messenger(), \"my_browser\"); \n   MyBrowserPlugin instance = new MyBrowserPlugin(registrar); \n   channel.setMethodCallHandler(instance); \n}</code></pre>\n\n\n\n<ul><li>Change the onMethodCall to include openBrowser method in MyBrowserPlugin class.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>@Override \npublic void onMethodCall(MethodCall call, Result result) { \n   String url = call.argument(\"url\");\n   if (call.method.equals(\"getPlatformVersion\")) { \n      result.success(\"Android \" + android.os.Build.VERSION.RELEASE); \n   } \n   else if (call.method.equals(\"openBrowser\")) { \n      openBrowser(call, result, url); \n   } else { \n      result.notImplemented(); \n   } \n}</code></pre>\n\n\n\n<ul><li>Write the platform specific openBrowser method to access browser in MyBrowserPlugin class.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>private void openBrowser(MethodCall call, Result result, String url) { \n   Activity activity = mRegistrar.activity(); \n   if (activity == null) {\n      result.error(\"ACTIVITY_NOT_AVAILABLE\", \n      \"Browser cannot be opened without foreground activity\", null); \n      return; \n   } \n   Intent intent = new Intent(Intent.ACTION_VIEW); \n   intent.setData(Uri.parse(url)); \n   activity.startActivity(intent); \n   result.success((Object) true); \n}</code></pre>\n\n\n\n<ul><li>The complete source code of the my_browser plugin is as follows −</li></ul>\n\n\n\n<p><strong>my_browser.dart</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:async'; \nimport 'package:flutter/services.dart'; \n\nclass MyBrowser {\n   static const MethodChannel _channel = const MethodChannel('my_browser'); \n   static Future&lt;String> get platformVersion async { \n      final String version = await _channel.invokeMethod('getPlatformVersion'); return version; \n   } \n   Future&lt;void> openBrowser(String urlString) async { \n      try {\n         final int result = await _channel.invokeMethod(\n            'openBrowser', &lt;String, String>{'url': urlString}); \n      } \n      on PlatformException catch (e) { \n         // Unable to open the browser print(e); \n      }\n   }\n}</code></pre>\n\n\n\n<p><strong>MyBrowserPlugin.java</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>package com.tutorialspoint.flutterplugins.my_browser; \n\nimport io.flutter.plugin.common.MethodCall; \nimport io.flutter.plugin.common.MethodChannel; \nimport io.flutter.plugin.common.MethodChannel.MethodCallHandler; \nimport io.flutter.plugin.common.MethodChannel.Result; \nimport io.flutter.plugin.common.PluginRegistry.Registrar; \nimport android.app.Activity; \nimport android.content.Intent; \nimport android.net.Uri; \nimport android.os.Bundle; \n\n/** MyBrowserPlugin */ \npublic class MyBrowserPlugin implements MethodCallHandler {\n   private final Registrar mRegistrar; \n   private MyBrowserPlugin(Registrar registrar) { \n      this.mRegistrar = registrar; \n   } \n   /** Plugin registration. */\n   public static void registerWith(Registrar registrar) {\n      final MethodChannel channel = new MethodChannel(\n         registrar.messenger(), \"my_browser\"); \n      MyBrowserPlugin instance = new MyBrowserPlugin(registrar); \n      channel.setMethodCallHandler(instance); \n   } \n   @Override \n   public void onMethodCall(MethodCall call, Result result) { \n      String url = call.argument(\"url\"); \n      if (call.method.equals(\"getPlatformVersion\")) { \n         result.success(\"Android \" + android.os.Build.VERSION.RELEASE); \n      } \n      else if (call.method.equals(\"openBrowser\")) { \n         openBrowser(call, result, url); \n      } else { \n         result.notImplemented(); \n      } \n   } \n   private void openBrowser(MethodCall call, Result result, String url) { \n      Activity activity = mRegistrar.activity(); \n      if (activity == null) {\n         result.error(\"ACTIVITY_NOT_AVAILABLE\",\n            \"Browser cannot be opened without foreground activity\", null); \n         return; \n      }\n      Intent intent = new Intent(Intent.ACTION_VIEW); \n      intent.setData(Uri.parse(url)); \n      activity.startActivity(intent); \n      result.success((Object) true); \n   } \n}</code></pre>\n\n\n\n<ul><li>Create a new project,&nbsp;<em>my_browser_plugin_test</em>&nbsp;to test our newly created plugin.</li><li>Open pubspec.yaml and set my_browser as a plugin dependency.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: \n   flutter: \n      sdk: flutter \n   my_browser: \n      path: ../my_browser</code></pre>\n\n\n\n<ul><li>Android studio will alert that the pubspec.yaml is updated as shown in the Android studio package alert given below −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/android_studio_package_alert.jpg\" alt=\"Android Studio Package Alert\"/></figure>\n\n\n\n<ul><li>Click Get dependencies option. Android studio will get the package from Internet and properly configure it for the application.</li><li>Open main.dart and include my_browser plugin as below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:my_browser/my_browser.dart';\n</code></pre>\n\n\n\n<ul><li>Call the openBrowser function from my_browser plugin as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>onPressed: () => MyBrowser().openBrowser(\"https://flutter.dev\"),\n</code></pre>\n\n\n\n<ul><li>The complete code of the main.dart is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nimport 'package:my_browser/my_browser.dart'; \n\nvoid main() => runApp(MyApp()); \n\nclass MyApp extends StatelessWidget { \n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp( \n         title: 'Flutter Demo', \n         theme: ThemeData( \n            primarySwatch: Colors.blue, \n         ), \n         home: MyHomePage(\n            title: 'Flutter Demo Home Page'\n         ), \n      );,\n   }\n} \nclass MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar( \n            title: Text(this.title), \n         ), \n         body: Center(\n            child: RaisedButton(\n               child: Text('Open Browser'), \n               onPressed: () => MyBrowser().openBrowser(\"https://flutter.dev\"), \n            ),\n         ), \n      ); \n   }\n}</code></pre>\n\n\n\n<ul><li>Run the application and click the Open Browser button and see that the browser is launched. You can see a Browser app &#8211; Home page as shown in the screenshot shown below −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/open_browser.jpg\" alt=\"Open Browser\"/></figure>\n\n\n\n<p>You can see a Browser app – Browser screen as shown in the screenshot shown below −</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Dart’s way of organizing and sharing a set of functionality is through Package. Dart Package is simply sharable libraries or modules. In general, the Dart Package is same as that of Dart Application except Dart Package does not have application entry point, main. The general structure of Package (consider a demo package, my_demo_package) is as [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3274"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3274"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3274/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3274"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3274"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3274"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3276,
    "date": "2020-12-16T11:37:15",
    "date_gmt": "2020-12-16T11:37:15",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3276"
    },
    "modified": "2020-12-16T11:37:15",
    "modified_gmt": "2020-12-16T11:37:15",
    "slug": "accessing-rest-api",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/accessing-rest-api/",
    "title": {
      "rendered": "Accessing REST API"
    },
    "content": {
      "rendered": "\n<p>Flutter provides http package to consume HTTP resources. http is a Future-based library and uses await and async features. It provides many high level methods and simplifies the development of REST based mobile applications.</p>\n\n\n\n<h2>Basic Concepts</h2>\n\n\n\n<p>http package provides a high level class and http to do web requests.</p>\n\n\n\n<ul><li>http class provides functionality to perform all types of HTTP requests.</li><li>http methods accept a url, and additional information through Dart Map (post data, additional headers, etc.,). It requests the server and collects the response back in async/await pattern. For example, the below code reads the data from the specified url and print it in the console.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>print(await http.read('https://flutter.dev/'));\n</code></pre>\n\n\n\n<p>Some of the core methods are as follows −</p>\n\n\n\n<ul><li><strong>read</strong>&nbsp;− Request the specified url through GET method and return back the response as Future&lt;String&gt;</li><li><strong>get</strong>&nbsp;− Request the specified url through GET method and return back the response as Future&lt;Response&gt;. Response is a class holding the response information.</li><li><strong>post</strong>&nbsp;− Request the specified url through POST method by posting the supplied data and return back the response as Future&lt;Response&gt;</li><li><strong>put</strong>&nbsp;− Request the specified url through PUT method and return back the response as Future &lt;Response&gt;</li><li><strong>head</strong>&nbsp;− Request the specified url through HEAD method and return back the response as Future&lt;Response&gt;</li><li><strong>delete</strong>&nbsp;− Request the specified url through DELETE method and return back the response as Future&lt;Response&gt;</li></ul>\n\n\n\n<p>http also provides a more standard HTTP client class, client. client supports persistent connection. It will be useful when a lot of request to be made to a particular server. It needs to be closed properly using close method. Otherwise, it is similar to http class. The sample code is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>var client = new http.Client(); \ntry { \n   print(await client.get('https://flutter.dev/')); \n} \nfinally { \n   client.close(); \n}</code></pre>\n\n\n\n<h2>Accessing Product service API</h2>\n\n\n\n<p>Let us create a simple application to get product data from a web server and then show the products using&nbsp;<em>ListView</em>.</p>\n\n\n\n<ul><li>Create a new&nbsp;<em>Flutter</em>&nbsp;application in Android studio,&nbsp;<em>product_rest_app</em>.</li><li>Replace the default startup code (main.dart) with our&nbsp;<em>product_nav_app</em>&nbsp;code.</li><li>Copy the assets folder from&nbsp;<em>product_nav_app</em>&nbsp;to&nbsp;<em>product_rest_app</em>&nbsp;and add assets inside the pubspec.yaml file.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter: \n   assets: \n      - assets/appimages/floppy.png \n      - assets/appimages/iphone.png \n      - assets/appimages/laptop.png \n      - assets/appimages/pendrive.png \n      - assets/appimages/pixel.png \n      - assets/appimages/tablet.png</code></pre>\n\n\n\n<ul><li>Configure http package in the pubspec.yaml file as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: \n   http: ^0.12.0+2\n</code></pre>\n\n\n\n<ul><li>Here, we will use the latest version of the http package. Android studio will send a package alert that the pubspec.yaml is updated.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/latest_version.jpg\" alt=\"Latest Version\"/></figure>\n\n\n\n<ul><li>Click Get dependencies option. Android studio will get the package from Internet and properly configure it for the application.</li><li>Import http package in the main.dart file −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:async'; \nimport 'dart:convert'; \nimport 'package:http/http.dart' as http;\n</code></pre>\n\n\n\n<ul><li>Create a new JSON file, products.json with product information as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91; \n   { \n      \"name\": \"iPhone\", \n      \"description\": \"iPhone is the stylist phone ever\", \n      \"price\": 1000, \n      \"image\": \"iphone.png\" \n   }, \n   { \n      \"name\": \"Pixel\", \n      \"description\": \"Pixel is the most feature phone ever\", \n      \"price\": 800, \n      \"image\": \"pixel.png\"\n   }, \n   { \n      \"name\": \"Laptop\", \n      \"description\": \"Laptop is most productive development tool\", \n      \"price\": 2000, \n      \"image\": \"laptop.png\" \n   }, \n   { \n      \"name\": \"Tablet\", \n      \"description\": \"Tablet is the most useful device ever for meeting\", \n      \"price\": 1500, \n      \"image\": \"tablet.png\" \n   }, \n   { \n      \"name\": \"Pendrive\", \n      \"description\": \"Pendrive is useful storage medium\", \n      \"price\": 100, \n      \"image\": \"pendrive.png\" \n   }, \n   { \n      \"name\": \"Floppy Drive\", \n      \"description\": \"Floppy drive is useful rescue storage medium\", \n      \"price\": 20, \n      \"image\": \"floppy.png\" \n   } \n]</code></pre>\n\n\n\n<ul><li>Create a new folder, JSONWebServer and place the JSON file, products.json.</li><li>Run any web server with JSONWebServer as its root directory and get its web path. For example, http://192.168.184.1:8000/products.json. We can use any web server like apache, nginx etc.,</li><li>The easiest way is to install node based http-server application. Follow the steps given below to install and run http- server application<ul><li>Install Nodejs application (nodejs.org)</li><li>Go to JSONWebServer folder.</li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>cd /path/to/JSONWebServer\n</code></pre>\n\n\n\n<ul><li>Install http-server package using npm.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>npm install -g http-server\n</code></pre>\n\n\n\n<ul><li>Now, run the server.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>http-server . -p 8000 \n\nStarting up http-server, serving . \nAvailable on: \n   http:&#47;&#47;192.168.99.1:8000\n   http://127.0.0.1:8000 \n   Hit CTRL-C to stop the server\n</code></pre>\n\n\n\n<ul><li>Create a new file, Product.dart in the lib folder and move the Product class into it.</li><li>Write a factory constructor in the Product class, Product.fromMap to convert mapped data Map into the Product object. Normally, JSON file will be converted into Dart Map object and then, converted into relevant object (Product).</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>factory Product.fromJson(Map&lt;String, dynamic> data) {\n   return Product(\n      data&#91;'name'],\n      data&#91;'description'], \n      data&#91;'price'],\n      data&#91;'image'],\n   );\n}</code></pre>\n\n\n\n<ul><li>The complete code of the Product.dart is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class Product {\n   final String name; \n   final String description;\n   final int price;\n   final String image; \n   \n   Product(this.name, this.description, this.price, this.image); \n   factory Product.fromMap(Map&lt;String, dynamic> json) { \n      return Product( \n         json&#91;'name'], \n         json&#91;'description'], \n         json&#91;'price'], \n         json&#91;'image'], \n      );\n   }\n}</code></pre>\n\n\n\n<ul><li>Write two methods − parseProducts and fetchProducts &#8211; in the main class to fetch and load the product information from web server into the List&lt;Product&gt; object.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>List&lt;Product> parseProducts(String responseBody) { \n   final parsed = json.decode(responseBody).cast&lt;Map&lt;String, dynamic>>(); \n   return parsed.map&lt;Product>((json) =>Product.fromJson(json)).toList(); \n} \nFuture&lt;List&lt;Product>> fetchProducts() async { \n   final response = await http.get('http://192.168.1.2:8000/products.json'); \n   if (response.statusCode == 200) { \n      return parseProducts(response.body); \n   } else { \n      throw Exception('Unable to fetch products from the REST API');\n   } \n}</code></pre>\n\n\n\n<ul><li>Note the following points here −<ul><li>Future is used to lazy load the product information. Lazy loading is a concept to defer the execution of the code until it is necessary.</li><li>http.get is used to fetch the data from the Internet.</li><li>json.decode is used to decode the JSON data into the Dart Map object. Once JSON data is decoded, it will be converted into List&lt;Product&gt; using fromMap of the Product class.</li><li>In MyApp class, add new member variable, products of type Future&lt;Product&gt; and include it in constructor.</li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyApp extends StatelessWidget { \n   final Future&lt;List&lt;Product>> products; \n   MyApp({Key key, this.products}) : super(key: key); \n   ...\n</code></pre>\n\n\n\n<ul><li>In MyHomePage class, add new member variable products of type Future&lt;Product&gt; and include it in constructor. Also, remove items variable and its relevant method, getProducts method call. Placing the products variable in constructor. It will allow to fetch the products from Internet only once when the application is first started.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget { \n   final String title; \n   final Future&lt;ListList&lt;Product>> products; \n   MyHomePage({Key key, this.title, this.products}) : super(key: key); \n   ...\n</code></pre>\n\n\n\n<ul><li>Change the home option (MyHomePage) in the build method of MyApp widget to accommodate above changes −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>home: MyHomePage(title: 'Product Navigation demo home page', products: products),\n</code></pre>\n\n\n\n<ul><li>Change the main function to include Future&lt;Product&gt; arguments −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() => runApp(MyApp(fetchProduct()));\n</code></pre>\n\n\n\n<ul><li>Create a new widget, ProductBoxList to build the product list in the home page.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class ProductBoxList extends StatelessWidget { \n   final List&lt;Product> items;\n   ProductBoxList({Key key, this.items}); \n   \n   @override \n   Widget build(BuildContext context) {\n      return ListView.builder(\n         itemCount: items.length,\n         itemBuilder: (context, index) {\n            return GestureDetector(\n               child: ProductBox(item: items&#91;index]), \n               onTap: () {\n                  Navigator.push(\n                     context, MaterialPageRoute(\n                        builder: (context) =gt; ProductPage(item: items&#91;index]), \n                     ), \n                  ); \n               }, \n            ); \n         }, \n      ); \n   } \n}</code></pre>\n\n\n\n<p>Note that we used the same concept used in Navigation application to list the product except it is designed as a separate widget by passing products (object) of type List&lt;Product&gt;.</p>\n\n\n\n<ul><li>Finally, modify the&nbsp;<em>MyHomePage</em>&nbsp;widget’s build method to get the product information using Future option instead of normal method call.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Widget build(BuildContext context) { \n   return Scaffold(\n      appBar: AppBar(title: Text(\"Product Navigation\")),\n      body: Center(\n         child: FutureBuilder&lt;List&lt;Product>>(\n            future: products, builder: (context, snapshot) {\n               if (snapshot.hasError) print(snapshot.error); \n               return snapshot.hasData ? ProductBoxList(items: snapshot.data)\n               \n               // return the ListView widget : \n               Center(child: CircularProgressIndicator()); \n            }, \n         ), \n      )\n   ); \n}</code></pre>\n\n\n\n<ul><li>Here note that we used FutureBuilder widget to render the widget. FutureBuilder will try to fetch the data from it’s future property (of type Future&lt;List&lt;Product&gt;&gt;). If future property returns data, it will render the widget using ProductBoxList, otherwise throws an error.</li><li>The complete code of the main.dart is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nimport 'dart:async'; \nimport 'dart:convert'; \nimport 'package:http/http.dart' as http; \nimport 'Product.dart'; \n\nvoid main() => runApp(MyApp(products: fetchProducts())); \n\nList&lt;Product> parseProducts(String responseBody) { \n   final parsed = json.decode(responseBody).cast&lt;Map&lt;String, dynamic>>(); \n   return parsed.map&lt;Product>((json) => Product.fromMap(json)).toList(); \n} \nFuture&lt;List&lt;Product>> fetchProducts() async { \n   final response = await http.get('http://192.168.1.2:8000/products.json'); \n   if (response.statusCode == 200) { \n      return parseProducts(response.body); \n   } else { \n      throw Exception('Unable to fetch products from the REST API'); \n   } \n}\nclass MyApp extends StatelessWidget {\n   final Future&lt;List&lt;Product>> products; \n   MyApp({Key key, this.products}) : super(key: key); \n   \n   // This widget is the root of your application. \n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Flutter Demo', \n         theme: ThemeData( \n            primarySwatch: Colors.blue, \n         ), \n         home: MyHomePage(title: 'Product Navigation demo home page', products: products), \n      ); \n   }\n}\nclass MyHomePage extends StatelessWidget { \n   final String title; \n   final Future&lt;List&lt;Product>> products; \n   MyHomePage({Key key, this.title, this.products}) : super(key: key); \n   \n   // final items = Product.getProducts();\n   @override \n   Widget build(BuildContext context) { \n      return Scaffold(\n         appBar: AppBar(title: Text(\"Product Navigation\")), \n         body: Center(\n            child: FutureBuilder&lt;List&lt;Product>>(\n               future: products, builder: (context, snapshot) {\n                  if (snapshot.hasError) print(snapshot.error); \n                  return snapshot.hasData ? ProductBoxList(items: snapshot.data) \n                  \n                  // return the ListView widget : \n                  Center(child: CircularProgressIndicator()); \n               },\n            ),\n         )\n      );\n   }\n}\nclass ProductBoxList extends StatelessWidget {\n   final List&lt;Product> items; \n   ProductBoxList({Key key, this.items}); \n   \n   @override \n   Widget build(BuildContext context) {\n      return ListView.builder(\n         itemCount: items.length, \n         itemBuilder: (context, index) { \n            return GestureDetector( \n               child: ProductBox(item: items&#91;index]), \n               onTap: () { \n                  Navigator.push(\n                     context, MaterialPageRoute( \n                        builder: (context) => ProductPage(item: items&#91;index]), \n                     ), \n                  ); \n               }, \n            ); \n         }, \n      ); \n   } \n} \nclass ProductPage extends StatelessWidget { \n   ProductPage({Key key, this.item}) : super(key: key); \n   final Product item; \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title: Text(this.item.name),), \n         body: Center( \n            child: Container(\n               padding: EdgeInsets.all(0), \n               child: Column( \n                  mainAxisAlignment: MainAxisAlignment.start, \n                  crossAxisAlignment: CrossAxisAlignment.start, \n                  children: &lt;Widget>&#91;\n                     Image.asset(\"assets/appimages/\" + this.item.image), \n                     Expanded( \n                        child: Container( \n                           padding: EdgeInsets.all(5), \n                           child: Column( \n                              mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                              children: &lt;Widget>&#91; \n                                 Text(this.item.name, style: \n                                    TextStyle(fontWeight: FontWeight.bold)), \n                                 Text(this.item.description), \n                                 Text(\"Price: \" + this.item.price.toString()), \n                                 RatingBox(), \n                              ], \n                           )\n                        )\n                     ) \n                  ]\n               ), \n            ), \n         ), \n      ); \n   } \n}\nclass RatingBox extends StatefulWidget { \n   @override \n   _RatingBoxState createState() =>_RatingBoxState(); \n} \nclass _RatingBoxState extends State&lt;RatingBox> { \n   int _rating = 0; \n   void _setRatingAsOne() {\n      setState(() { \n         _rating = 1; \n      }); \n   }\n   void _setRatingAsTwo() {\n      setState(() {\n         _rating = 2; \n      }); \n   }\n   void _setRatingAsThree() { \n      setState(() {\n         _rating = 3; \n      }); \n   }\n   Widget build(BuildContext context) {\n      double _size = 20; \n      print(_rating); \n      return Row(\n         mainAxisAlignment: MainAxisAlignment.end, \n         crossAxisAlignment: CrossAxisAlignment.end, \n         mainAxisSize: MainAxisSize.max, \n         \n         children: &lt;Widget>&#91;\n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton( \n                  icon: (\n                     _rating >= 1 \n                     ? Icon(Icons.star, ize: _size,) \n                     : Icon(Icons.star_border, size: _size,)\n                  ), \n                  color: Colors.red&#91;500], onPressed: _setRatingAsOne, iconSize: _size, \n               ), \n            ), \n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton(\n                  icon: (\n                     _rating >= 2 \n                     ? Icon(Icons.star, size: _size,) \n                     : Icon(Icons.star_border, size: _size, )\n                  ), \n                  color: Colors.red&#91;500], \n                  onPressed: _setRatingAsTwo, \n                  iconSize: _size, \n               ), \n            ), \n            Container(\n               padding: EdgeInsets.all(0), \n               child: IconButton(\n                  icon: (\n                     _rating >= 3 ? \n                     Icon(Icons.star, size: _size,)\n                     : Icon(Icons.star_border, size: _size,)\n                  ), \n                  color: Colors.red&#91;500], \n                  onPressed: _setRatingAsThree, \n                  iconSize: _size, \n               ), \n            ), \n         ], \n      ); \n   } \n}\nclass ProductBox extends StatelessWidget {\n   ProductBox({Key key, this.item}) : super(key: key); \n   final Product item; \n   \n   Widget build(BuildContext context) {\n      return Container(\n         padding: EdgeInsets.all(2), height: 140, \n         child: Card(\n            child: Row( \n               mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n               children: &lt;Widget>&#91;\n                  Image.asset(\"assets/appimages/\" + this.item.image), \n                  Expanded( \n                     child: Container( \n                        padding: EdgeInsets.all(5), \n                        child: Column( \n                           mainAxisAlignment: MainAxisAlignment.spaceEvenly, \n                           children: &lt;Widget>&#91; \n                              Text(this.item.name, style:TextStyle(fontWeight: FontWeight.bold)), \n                              Text(this.item.description), \n                              Text(\"Price: \" + this.item.price.toString()), \n                              RatingBox(), \n                           ], \n                        )\n                     )\n                  )\n               ]\n            ), \n         )\n      ); \n   } \n}</code></pre>\n\n\n\n<p>Finally run the application to see the result. It will be same as our&nbsp;<em>Navigation</em>&nbsp;example except the data is from Internet instead of local, static data entered while coding the application.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Flutter provides http package to consume HTTP resources. http is a Future-based library and uses await and async features. It provides many high level methods and simplifies the development of REST based mobile applications. Basic Concepts http package provides a high level class and http to do web requests. http class provides functionality to perform [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3276"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3276"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3276/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3276"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3276"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3276"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5658,
    "date": "2020-12-16T11:46:30",
    "date_gmt": "2020-12-16T11:46:30",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3278"
    },
    "modified": "2020-12-16T11:46:30",
    "modified_gmt": "2020-12-16T11:46:30",
    "slug": "database-concepts",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/database-concepts/",
    "title": {
      "rendered": "Database Concepts"
    },
    "content": {
      "rendered": "\n<p>Flutter provides many advanced packages to work with databases. The most important packages are −</p>\n\n\n\n<ul><li><strong>sqflite</strong>&nbsp;− Used to access and manipulate SQLite database, and</li><li><strong>firebase_database</strong>&nbsp;− Used to access and manipulate cloud hosted NoSQL database from Google.</li></ul>\n\n\n\n<p>In this chapter, let us discuss each of them in detail.</p>\n\n\n\n<h2>SQLite</h2>\n\n\n\n<p>SQLite database is the de-facto and standard SQL based embedded database engine. It is small and time-tested database engine. sqflite package provides a lot of functionality to work efficiently with SQLite database. It provides standard methods to manipulate SQLite database engine. The core functionality provided by sqflite package is as follows −</p>\n\n\n\n<ul><li>Create / Open (openDatabase method) a SQLite database.</li><li>Execute SQL statement (execute method) against SQLite database.</li><li>Advanced query methods (query method) to reduce to code required to query and get information from SQLite database.</li></ul>\n\n\n\n<p>Let us create a product application to store and fetch product information from a standard SQLite database engine using sqflite package and understand the concept behind the SQLite database and sqflite package.</p>\n\n\n\n<ul><li>Create a new Flutter application in Android studio, product_sqlite_app.</li><li>Replace the default startup code (main.dart) with our&nbsp;<em>product_rest_app</em>&nbsp;code.</li><li>Copy the assets folder from&nbsp;<em>product_nav_app</em>&nbsp;to&nbsp;<em>product_rest_app</em>&nbsp;and add assets inside the *pubspec.yaml` file.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter: \n   assets: \n      - assets/appimages/floppy.png \n      - assets/appimages/iphone.png \n      - assets/appimages/laptop.png \n      - assets/appimages/pendrive.png \n      - assets/appimages/pixel.png \n      - assets/appimages/tablet.png</code></pre>\n\n\n\n<ul><li>Configure sqflite package in the pubspec.yaml file as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: sqflite: any\n</code></pre>\n\n\n\n<p>Use the latest version number of sqflite in place of any</p>\n\n\n\n<ul><li>Configure path_provider package in the pubspec.yaml file as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: path_provider: any\n</code></pre>\n\n\n\n<ul><li>Here, path_provider package is used to get temporary folder path of the system and path of the application. Use the latest version number of&nbsp;<em>sqflite</em>&nbsp;in place of&nbsp;<em>any</em>.</li><li>Android studio will alert that the pubspec.yaml is updated.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/updated.jpg\" alt=\"Updated\"/></figure>\n\n\n\n<ul><li>Click Get dependencies option. Android studio will get the package from Internet and properly configure it for the application.</li><li>In database, we need primary key, id as additional field along with Product properties like name, price, etc., So, add id property in the Product class. Also, add a new method, toMap to convert product object into Map object. fromMap and toMap are used to serialize and de- serialize the Product object and it is used in database manipulation methods.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class Product { \n   final int id; \n   final String name; \n   final String description; \n   final int price; \n   final String image; \n   static final columns = &#91;\"id\", \"name\", \"description\", \"price\", \"image\"]; \n   Product(this.id, this.name, this.description, this.price, this.image); \n   factory Product.fromMap(Map&lt;String, dynamic> data) {\n      return Product( \n         data&#91;'id'], \n         data&#91;'name'], \n         data&#91;'description'], \n         data&#91;'price'], \n         data&#91;'image'], \n      ); \n   } \n   Map&lt;String, dynamic> toMap() => {\n      \"id\": id, \n      \"name\": name, \n      \"description\": description, \n      \"price\": price, \n      \"image\": image \n   }; \n}</code></pre>\n\n\n\n<ul><li>Create a new file, Database.dart in the lib folder to write&nbsp;<em>SQLite</em>&nbsp;related functionality.</li><li>Import necessary import statement in Database.dart.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:async'; \nimport 'dart:io'; \nimport 'package:path/path.dart'; \nimport 'package:path_provider/path_provider.dart'; \nimport 'package:sqflite/sqflite.dart'; \nimport 'Product.dart';</code></pre>\n\n\n\n<ul><li>Note the following points here −<ul><li><strong>async</strong>&nbsp;is used to write asynchronous methods.</li><li><strong>io</strong>&nbsp;is used to access files and directories.</li><li><strong>path</strong>&nbsp;is used to access dart core utility function related to file paths.</li><li><strong>path_provider</strong>&nbsp;is used to get temporary and application path.</li><li><strong>sqflite</strong>&nbsp;is used to manipulate SQLite database.</li></ul></li><li>Create a new class&nbsp;<strong>SQLiteDbProvider</strong></li><li>Declare a singleton based, static SQLiteDbProvider object as specified below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class SQLiteDbProvider { \n   SQLiteDbProvider._(); \n   static final SQLiteDbProvider db = SQLiteDbProvider._(); \n   static Database _database; \n}\n</code></pre>\n\n\n\n<ul><li>SQLiteDBProvoider object and its method can be accessed through the static db variable.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>SQLiteDBProvoider.db.&lt;emthod>\n</code></pre>\n\n\n\n<ul><li>Create a method to get database (Future option) of type Future&lt;Database&gt;. Create product table and load initial data during the creation of the database itself.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;Database> get database async { \n   if (_database != null) \n   return _database; \n   _database = await initDB(); \n   return _database; \n}\ninitDB() async { \n   Directory documentsDirectory = await getApplicationDocumentsDirectory(); \n   String path = join(documentsDirectory.path, \"ProductDB.db\"); \n   return await openDatabase(\n      path, \n      version: 1,\n      onOpen: (db) {}, \n      onCreate: (Database db, int version) async {\n         await db.execute(\n            \"CREATE TABLE Product (\"\n            \"id INTEGER PRIMARY KEY,\"\n            \"name TEXT,\"\n            \"description TEXT,\"\n            \"price INTEGER,\" \n            \"image TEXT\" \")\"\n         ); \n         await db.execute(\n            \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n            values (?, ?, ?, ?, ?)\", \n            &#91;1, \"iPhone\", \"iPhone is the stylist phone ever\", 1000, \"iphone.png\"]\n         ); \n         await db.execute(\n            \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n            values (?, ?, ?, ?, ?)\", \n            &#91;2, \"Pixel\", \"Pixel is the most feature phone ever\", 800, \"pixel.png\"]\n         ); \n         await db.execute(\n            \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n            values (?, ?, ?, ?, ?)\", \n            &#91;3, \"Laptop\", \"Laptop is most productive development tool\", 2000, \"laptop.png\"]\\\n         ); \n         await db.execute( \n            \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n            values (?, ?, ?, ?, ?)\", \n            &#91;4, \"Tablet\", \"Laptop is most productive development tool\", 1500, \"tablet.png\"]\n         );\n         await db.execute( \n            \"INSERT INTO Product \n            ('id', 'name', 'description', 'price', 'image') \n            values (?, ?, ?, ?, ?)\", \n            &#91;5, \"Pendrive\", \"Pendrive is useful storage medium\", 100, \"pendrive.png\"]\n         );\n         await db.execute( \n            \"INSERT INTO Product \n            ('id', 'name', 'description', 'price', 'image') \n            values (?, ?, ?, ?, ?)\", \n            &#91;6, \"Floppy Drive\", \"Floppy drive is useful rescue storage medium\", 20, \"floppy.png\"]\n         ); \n      }\n   ); \n}</code></pre>\n\n\n\n<ul><li>Here, we have used the following methods −<ul><li><strong>getApplicationDocumentsDirectory</strong>&nbsp;− Returns application directory path</li><li><strong>join</strong>&nbsp;− Used to create system specific path. We have used it to create database path.</li><li><strong>openDatabase</strong>&nbsp;− Used to open a SQLite database</li><li><strong>onOpen</strong>&nbsp;− Used to write code while opening a database</li><li><strong>onCreate</strong>&nbsp;− Used to write code while a database is created for the first time</li><li><strong>db.execute</strong>&nbsp;− Used to execute SQL queries. It accepts a query. If the query has placeholder (?), then it accepts values as list in the second argument.</li></ul></li><li>Write a method to get all products in the database −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;List&lt;Product>> getAllProducts() async { \n   final db = await database; \n   List&lt;Map> \n   results = await db.query(\"Product\", columns: Product.columns, orderBy: \"id ASC\"); \n   \n   List&lt;Product> products = new List(); \n   results.forEach((result) { \n      Product product = Product.fromMap(result); \n      products.add(product); \n   }); \n   return products; \n}</code></pre>\n\n\n\n<ul><li>Here, we have done the following −<ul><li>Used query method to fetch all the product information. query provides shortcut to query a table information without writing the entire query. query method will generate the proper query itself by using our input like columns, orderBy, etc.,</li><li>Used Product’s fromMap method to get product details by looping the results object, which holds all the rows in the table.</li></ul></li><li>Write a method to get product specific to&nbsp;<strong>id</strong></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;Product> getProductById(int id) async {\n   final db = await database; \n   var result = await db.query(\"Product\", where: \"id = \", whereArgs: &#91;id]); \n   return result.isNotEmpty ? Product.fromMap(result.first) : Null; \n}</code></pre>\n\n\n\n<ul><li>Here, we have used where and whereArgs to apply filters.</li><li>Create three methods &#8211; insert, update and delete method to insert, update and delete product from the database.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>insert(Product product) async { \n   final db = await database; \n   var maxIdResult = await db.rawQuery(\n      \"SELECT MAX(id)+1 as last_inserted_id FROM Product\");\n\n   var id = maxIdResult.first&#91;\"last_inserted_id\"]; \n   var result = await db.rawInsert(\n      \"INSERT Into Product (id, name, description, price, image)\" \n      \" VALUES (?, ?, ?, ?, ?)\", \n      &#91;id, product.name, product.description, product.price, product.image] \n   ); \n   return result; \n}\nupdate(Product product) async { \n   final db = await database; \n   var result = await db.update(\"Product\", product.toMap(), \n   where: \"id = ?\", whereArgs: &#91;product.id]); return result; \n} \ndelete(int id) async { \n   final db = await database; \n   db.delete(\"Product\", where: \"id = ?\", whereArgs: &#91;id]); \n}</code></pre>\n\n\n\n<ul><li>The final code of the Database.dart is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:async'; \nimport 'dart:io'; \nimport 'package:path/path.dart'; \nimport 'package:path_provider/path_provider.dart'; \nimport 'package:sqflite/sqflite.dart'; \nimport 'Product.dart'; \n\nclass SQLiteDbProvider {\n   SQLiteDbProvider._(); \n   static final SQLiteDbProvider db = SQLiteDbProvider._(); \n   static Database _database; \n   \n   Future&lt;Database> get database async {\n      if (_database != null) \n      return _database; \n      _database = await initDB(); \n      return _database; \n   } \n   initDB() async {\n      Directory documentsDirectory = await \n      getApplicationDocumentsDirectory(); \n      String path = join(documentsDirectory.path, \"ProductDB.db\"); \n      return await openDatabase(\n         path, version: 1, \n         onOpen: (db) {}, \n         onCreate: (Database db, int version) async {\n            await db.execute(\n               \"CREATE TABLE Product (\" \n               \"id INTEGER PRIMARY KEY,\" \n               \"name TEXT,\" \n               \"description TEXT,\" \n               \"price INTEGER,\" \n               \"image TEXT\"\")\"\n            ); \n            await db.execute(\n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", \n               &#91;1, \"iPhone\", \"iPhone is the stylist phone ever\", 1000, \"iphone.png\"]\n            ); \n            await db.execute( \n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", \n               &#91;2, \"Pixel\", \"Pixel is the most feature phone ever\", 800, \"pixel.png\"]\n            );\n            await db.execute(\n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", \n               &#91;3, \"Laptop\", \"Laptop is most productive development tool\", 2000, \"laptop.png\"]\n            ); \n            await db.execute( \n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", \n               &#91;4, \"Tablet\", \"Laptop is most productive development tool\", 1500, \"tablet.png\"]\n            ); \n            await db.execute( \n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", \n               &#91;5, \"Pendrive\", \"Pendrive is useful storage medium\", 100, \"pendrive.png\"]\n            );\n            await db.execute( \n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", \n               &#91;6, \"Floppy Drive\", \"Floppy drive is useful rescue storage medium\", 20, \"floppy.png\"]\n            ); \n         }\n      ); \n   }\n   Future&lt;List&lt;Product>> getAllProducts() async {\n      final db = await database; \n      List&lt;Map> results = await db.query(\n         \"Product\", columns: Product.columns, orderBy: \"id ASC\"\n      ); \n      List&lt;Product> products = new List();   \n      results.forEach((result) {\n         Product product = Product.fromMap(result); \n         products.add(product); \n      }); \n      return products; \n   } \n   Future&lt;Product> getProductById(int id) async {\n      final db = await database; \n      var result = await db.query(\"Product\", where: \"id = \", whereArgs: &#91;id]); \n      return result.isNotEmpty ? Product.fromMap(result.first) : Null; \n   } \n   insert(Product product) async { \n      final db = await database; \n      var maxIdResult = await db.rawQuery(\"SELECT MAX(id)+1 as last_inserted_id FROM Product\"); \n      var id = maxIdResult.first&#91;\"last_inserted_id\"]; \n      var result = await db.rawInsert(\n         \"INSERT Into Product (id, name, description, price, image)\" \n         \" VALUES (?, ?, ?, ?, ?)\", \n         &#91;id, product.name, product.description, product.price, product.image] \n      ); \n      return result; \n   } \n   update(Product product) async { \n      final db = await database; \n      var result = await db.update(\n         \"Product\", product.toMap(), where: \"id = ?\", whereArgs: &#91;product.id]\n      ); \n      return result; \n   } \n   delete(int id) async { \n      final db = await database; \n      db.delete(\"Product\", where: \"id = ?\", whereArgs: &#91;id]);\n   } \n}</code></pre>\n\n\n\n<ul><li>Change the main method to get the product information.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() {\n   runApp(MyApp(products: SQLiteDbProvider.db.getAllProducts())); \n}</code></pre>\n\n\n\n<ul><li>Here, we have used the getAllProducts method to fetch all products from the database.</li><li>Run the application and see the results. It will be similar to previous example,&nbsp;<em>Accessing Product service API</em>, except the product information is stored and fetched from the local SQLite database.</li></ul>\n\n\n\n<h2>Cloud Firestore</h2>\n\n\n\n<p>Firebase is a BaaS app development platform. It provides many feature to speed up the mobile application development like authentication service, cloud storage, etc., One of the main feature of Firebase is Cloud Firestore, a cloud based real time NoSQL database.</p>\n\n\n\n<p>Flutter provides a special package, cloud_firestore to program with Cloud Firestore. Let us create an online product store in the Cloud Firestore and create a application to access the product store.</p>\n\n\n\n<ul><li>Create a new Flutter application in Android studio, product_firebase_app.</li><li>Replace the default startup code (main.dart) with our&nbsp;<em>product_rest_app</em>&nbsp;code.</li><li>Copy Product.dart file from product_rest_app into the lib folder.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class Product { \n   final String name; \n   final String description; \n   final int price; \n   final String image; \n   \n   Product(this.name, this.description, this.price, this.image); \n   factory Product.fromMap(Map&lt;String, dynamic> json) {\n      return Product( \n         json&#91;'name'], \n         json&#91;'description'], \n         json&#91;'price'], \n         json&#91;'image'], \n      ); \n   }\n}</code></pre>\n\n\n\n<ul><li>Copy the assets folder from product_rest_app to product_firebase_app and add assets inside the pubspec.yaml file.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter:\n   assets: \n   - assets/appimages/floppy.png \n   - assets/appimages/iphone.png \n   - assets/appimages/laptop.png \n   - assets/appimages/pendrive.png \n   - assets/appimages/pixel.png \n   - assets/appimages/tablet.png</code></pre>\n\n\n\n<ul><li>Configure cloud_firestore package in the pubspec.yaml file as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: cloud_firestore: ^0.9.13+1\n</code></pre>\n\n\n\n<ul><li>Here, use the latest version of the cloud_firestore package.</li><li>Android studio will alert that the pubspec.yaml is updated as shown here −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/cloud_firestore_package.jpg\" alt=\"Cloud Firestore Package\"/></figure>\n\n\n\n<ul><li>Click Get dependencies option. Android studio will get the package from Internet and properly configure it for the application.</li><li>Create a project in the Firebase using the following steps −<ul><li>Create a Firebase account by selecting Free plan at https://firebase.google.com/pricing/.</li><li>Once Firebase account is created, it will redirect to the project overview page. It list all the Firebase based project and provides an option to create a new project.</li><li>Click Add project and it will open a project creation page.</li><li>Enter products app db as project name and click Create project option.</li><li>Go to *Firebase console.</li><li>Click Project overview. It opens the project overview page.</li><li>Click android icon. It will open project setting specific to Android development.</li><li>Enter Android Package name, com.tutorialspoint.flutterapp.product_firebase_app.</li><li>Click Register App. It generates a project configuration file, google_service.json.</li><li>Download google_service.json and then move it into the project’s android/app directory. This file is the connection between our application and Firebase.</li><li>Open android/app/build.gradle and include the following code −</li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>apply plugin: 'com.google.gms.google-services'\n</code></pre>\n\n\n\n<ul><li>Open android/build.gradle and include the following configuration −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>buildscript {\n   repositories { \n      // ... \n   } \n   dependencies { \n      // ... \n      classpath 'com.google.gms:google-services:3.2.1' // new \n   } \n}\n</code></pre>\n\n\n\n<ul><li>Open android/app/build.gradle and include the following code as well.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>android {\n   defaultConfig { \n      ... \n      multiDexEnabled true \n   } \n   ...\n}\ndependencies {\n   ... \n   compile 'com.android.support: multidex:1.0.3' \n}</code></pre>\n\n\n\n<ul><li>Follow the remaining steps in the Firebase Console or just skip it.</li><li>Create a product store in the newly created project using the following steps −<ul><li>Go to Firebase console.</li><li>Open the newly created project.</li><li>Click the Database option in the left menu.</li><li>Click Create database option.</li><li>Click Start in test mode and then Enable.</li><li>Click Add collection. Enter product as collection name and then click Next.</li><li>Enter the sample product information as shown in the image here −</li></ul></li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/sample_product_information.jpg\" alt=\"Sample Product Information\"/></figure>\n\n\n\n<ul><li>Add addition product information using&nbsp;<em>Add document</em>&nbsp;options.</li><li>Open main.dart file and import Cloud Firestore plugin file and remove http package.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\nimport 'package:cloud_firestore/cloud_firestore.dart';\n</code></pre>\n\n\n\n<ul><li>Remove parseProducts and update fetchProducts to fetch products from Cloud Firestore instead of Product service API.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Stream&lt;QuerySnapshot> fetchProducts() { \n   return Firestore.instance.collection('product').snapshots(); }\n</code></pre>\n\n\n\n<ul><li>Here, Firestore.instance.collection method is used to access product collection available in the cloud store. Firestore.instance.collection provides many option to filter the collection to get the necessary documents. But, we have not applied any filter to get all product information.</li><li>Cloud Firestore provides the collection through Dart Stream concept and so modify the products type in MyApp and MyHomePage widget from Future&lt;list&lt;Product&gt;&gt; to Stream&lt;QuerySnapshot&gt;.</li><li>Change the build method of MyHomePage widget to use StreamBuilder instead of FutureBuilder.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>@override \nWidget build(BuildContext context) {\n   return Scaffold(\n      appBar: AppBar(title: Text(\"Product Navigation\")), \n      body: Center(\n         child: StreamBuilder&lt;QuerySnapshot>(\n            stream: products, builder: (context, snapshot) {\n               if (snapshot.hasError) print(snapshot.error); \n               if(snapshot.hasData) {\n                  List&lt;DocumentSnapshot> \n                  documents = snapshot.data.documents; \n                  \n                  List&lt;Product> \n                  items = List&lt;Product>(); \n                  \n                  for(var i = 0; i &lt; documents.length; i++) { \n                     DocumentSnapshot document = documents&#91;i]; \n                     items.add(Product.fromMap(document.data)); \n                  } \n                  return ProductBoxList(items: items);\n               } else { \n                  return Center(child: CircularProgressIndicator()); \n               }\n            }, \n         ), \n      )\n   ); \n}</code></pre>\n\n\n\n<ul><li>Here, we have fetched the product information as List&lt;DocumentSnapshot&gt; type. Since, our widget, ProductBoxList is not compatible with documents, we have converted the documents into List&lt;Product&gt; type and further used it.</li><li>Finally, run the application and see the result. Since, we have used the same product information as that of&nbsp;<em>SQLite application</em>&nbsp;and changed the storage medium only, the resulting application looks identical to&nbsp;<em>SQLite application</em>&nbsp;application.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Flutter provides many advanced packages to work with databases. The most important packages are − sqflite&nbsp;− Used to access and manipulate SQLite database, and firebase_database&nbsp;− Used to access and manipulate cloud hosted NoSQL database from Google. In this chapter, let us discuss each of them in detail. SQLite SQLite database is the de-facto and standard [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5658"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5658"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5658/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5658"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5658"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5658"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 5659,
    "date": "2020-12-16T11:50:34",
    "date_gmt": "2020-12-16T11:50:34",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3280"
    },
    "modified": "2020-12-16T11:50:34",
    "modified_gmt": "2020-12-16T11:50:34",
    "slug": "internationalization",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/internationalization/",
    "title": {
      "rendered": "Internationalization"
    },
    "content": {
      "rendered": "\n<p>Nowadays, mobile applications are used by customers from different countries and as a result, applications are required to display the content in different languages. Enabling an application to work in multiple languages is called Internationalizing the application.</p>\n\n\n\n<p>For an application to work in different languages, it should first find the current locale of the system in which the application is running and then need to show it’s content in that particular locale, and this process is called Localization.</p>\n\n\n\n<p>Flutter framework provides three base classes for localization and extensive utility classes derived from base classes to localize an application.</p>\n\n\n\n<p>The base classes are as follows −</p>\n\n\n\n<ul><li><em>Locale</em>&nbsp;− Locale is a class used to identify the user’s language. For example, en-us identifies the American English and it can be created as.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Locale en_locale = Locale('en', 'US')\n</code></pre>\n\n\n\n<p>Here, the first argument is language code and the second argument is country code. Another example of creating&nbsp;<em>Argentina Spanish (es-ar)</em>&nbsp;locale is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Locale es_locale = Locale('es', 'AR')\n</code></pre>\n\n\n\n<ul><li><em>Localizations</em>&nbsp;− Localizations is a generic widget used to set the Locale and the localized resources of its child.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class CustomLocalizations { \n   CustomLocalizations(this.locale); \n   final Locale locale; \n   static CustomLocalizations of(BuildContext context) { \n      return Localizations.of&lt;CustomLocalizations>(context, CustomLocalizations); \n   } \n   static Map&lt;String, Map&lt;String, String>> _resources = {\n      'en': {\n         'title': 'Demo', \n         'message': 'Hello World' \n      }, \n      'es': {\n         'title': 'Manifestación', \n         'message': 'Hola Mundo', \n      }, \n   }; \n   String get title { \n      return _resources&#91;locale.languageCode]&#91;'title']; \n   }\n   String get message { \n      return _resources&#91;locale.languageCode]&#91;'message']; \n   } \n}</code></pre>\n\n\n\n<ul><li>Here, CustomLocalizations is a new custom class created specifically to get certain localized content (title and message) for the widget. of method uses the Localizations class to return new CustomLocalizations class.</li><li>LocalizationsDelegate&lt;T&gt; − LocalizationsDelegate&lt;T&gt; is a factory class through which Localizations widget is loaded. It has three over-ridable methods −<ul><li>isSupported − Accepts a locale and return whether the specified locale is supported or not.</li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>@override \nbool isSupported(Locale locale) => &#91;'en', 'es'].contains(locale.languageCode);\n</code></pre>\n\n\n\n<ul><li>load − Accepts a locale and start loading the resources for the specified locale.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>@override \nFuture&lt;CustomLocalizations> load(Locale locale) { \n   return SynchronousFuture&lt;CustomLocalizations>(CustomLocalizations(locale)); \n}\n</code></pre>\n\n\n\n<ul><li>shouldReload − Specifies whether reloading of CustomLocalizations is necessary when its Localizations widget is rebuild.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>@override \nbool shouldReload(CustomLocalizationsDelegate old) => false;\n</code></pre>\n\n\n\n<ul><li>The complete code of CustomLocalizationDelegate is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class CustomLocalizationsDelegate extends \nLocalizationsDelegate&lt;CustomLocalizations> { \n   const CustomLocalizationsDelegate(); \n   @override \n   bool isSupported(Locale locale) => &#91;'en', 'es'].contains(locale.languageCode);\n   @override \n   Future&lt;CustomLocalizations> load(Locale locale) { \n      return SynchronousFuture&lt;CustomLocalizations>(CustomLocalizations(locale));\n   } \n   @override bool shouldReload(CustomLocalizationsDelegate old) => false; \n}</code></pre>\n\n\n\n<p>In general, Flutter applications are based on two root level widgets, MaterialApp or WidgetsApp. Flutter provides ready made localization for both widgets and they are MaterialLocalizations and WidgetsLocaliations. Further, Flutter also provides delegates to load MaterialLocalizations and WidgetsLocaliations and they are GlobalMaterialLocalizations.delegate and GlobalWidgetsLocalizations.delegate respectively.</p>\n\n\n\n<p>Let us create a simple internationalization enabled application to test and understand the concept.</p>\n\n\n\n<ul><li>Create a new flutter application, flutter_localization_app.</li><li>Flutter supports the internationalization using exclusive flutter package, flutter_localizations. The idea is to separate the localized content from the main SDK. Open the pubspec.yaml and add below code to enable the internationalization package −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: \n   flutter: \n      sdk: flutter \n   flutter_localizations:\n      sdk: flutter\n</code></pre>\n\n\n\n<ul><li>Android studio will display the following alert that the pubspec.yaml is updated.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/alert.jpg\" alt=\"Alert\"/></figure>\n\n\n\n<ul><li>Click Get dependencies option. Android studio will get the package from Internet and properly configure it for the application.</li><li>Import flutter_localizations package in the main.dart as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter_localizations/flutter_localizations.dart'; \nimport 'package:flutter/foundation.dart' show SynchronousFuture;\n</code></pre>\n\n\n\n<ul><li>Here, the purpose of SynchronousFuture is to load the custom localizations synchronously.</li><li>Create a custom localizations and its corresponding delegate as specified below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class CustomLocalizations { \n   CustomLocalizations(this.locale); \n   final Locale locale; \n   static CustomLocalizations of(BuildContext context) {\n      return Localizations.of&lt;CustomLocalizations>(context, CustomLocalizations); \n   }\n   static Map&lt;String, Map&lt;String, String>> _resources = {\n      'en': {\n         'title': 'Demo', \n         'message': 'Hello World' \n      }, \n      'es': { \n         'title': 'Manifestación', \n         'message': 'Hola Mundo', \n      }, \n   }; \n   String get title { \n      return _resources&#91;locale.languageCode]&#91;'title']; \n   } \n   String get message { \n      return _resources&#91;locale.languageCode]&#91;'message']; \n   } \n}\nclass CustomLocalizationsDelegate extends\nLocalizationsDelegate&lt;CustomLocalizations> {\n   const CustomLocalizationsDelegate();\n   \n   @override \n   bool isSupported(Locale locale) => &#91;'en', 'es'].contains(locale.languageCode); \n   \n   @override \n   Future&lt;CustomLocalizations> load(Locale locale) { \n      return SynchronousFuture&lt;CustomLocalizations>(CustomLocalizations(locale)); \n   } \n   @override bool shouldReload(CustomLocalizationsDelegate old) => false; \n}</code></pre>\n\n\n\n<ul><li>Here, CustomLocalizations is created to support localization for title and message in the application and CustomLocalizationsDelegate is used to load CustomLocalizations.</li><li>Add delegates for MaterialApp, WidgetsApp and CustomLocalization using MaterialApp properties, localizationsDelegates and supportedLocales as specified below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>localizationsDelegates: &#91;\n   const CustomLocalizationsDelegate(),   \n   GlobalMaterialLocalizations.delegate, \n   GlobalWidgetsLocalizations.delegate, \n], \nsupportedLocales: &#91;\n   const Locale('en', ''),\n   const Locale('es', ''), \n],</code></pre>\n\n\n\n<ul><li>Use CustomLocalizations method, of to get the localized value of title and message and use it in appropriate place as specified below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(title: Text(CustomLocalizations .of(context) .title), ), \n         body: Center(\n            child: Column(\n               mainAxisAlignment: MainAxisAlignment.center, \n               children: &lt;Widget>&#91; \n                  Text( CustomLocalizations .of(context) .message, ), \n               ], \n            ), \n         ),\n      );\n   }\n}</code></pre>\n\n\n\n<ul><li>Here, we have modified the MyHomePage class from StatefulWidget to StatelessWidget for simplicity reason and used the CustomLocalizations to get title and message.</li><li>Compile and run the application. The application will show its content in English.</li><li>Close the application. Go to&nbsp;<strong>Settings → System → Languages and Input → Languages*</strong>.</li><li>Click Add a language option and select Spanish. This will install Spanish language and then list it as one of the option.</li><li>Select Spanish and move it above English. This will set as Spanish as first language and everything will be changed to Spanish text.</li><li>Now relaunch the internationalization application and you will see the title and message in Spanish language.</li><li>We can revert the language to English by move the English option above Spanish option in the setting.</li><li>The result of the application (in Spanish) is shown in the screenshot given below −</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/manifestacion.jpg\" alt=\"Manifestacion\"/></figure>\n\n\n\n<h2>Using intl Package</h2>\n\n\n\n<p>Flutter provides intl package to further simplify the development of localized mobile application. intl package provides special methods and tools to semi-auto generate language specific messages.</p>\n\n\n\n<p>Let us create a new localized application by using intl package and understand the concept.</p>\n\n\n\n<ul><li>Create a new flutter application, flutter_intl_app.</li><li>Open pubspec.yaml and add the package details.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: \n   flutter: \n      sdk: flutter \n   flutter_localizations: \n      sdk: flutter \n   intl: ^0.15.7 \n   intl_translation: ^0.17.3</code></pre>\n\n\n\n<ul><li>Android studio will display the alert as shown below informing that the pubspec.yaml is updated.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/informing_updation.jpg\" alt=\"Informing Updation\"/></figure>\n\n\n\n<ul><li>Click Get dependencies option. Android studio will get the package from Internet and properly configure it for the application.</li><li>Copy the main.dart from previous sample, flutter_internationalization_app.</li><li>Import the intl pacakge as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:intl/intl.dart';\n</code></pre>\n\n\n\n<ul><li>Update the CustomLocalization class as shown in the code given below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class CustomLocalizations { \n   static Future&lt;CustomLocalizations> load(Locale locale) {\n      final String name = locale.countryCode.isEmpty ? locale.languageCode : locale.toString(); \n      final String localeName = Intl.canonicalizedLocale(name); \n      \n      return initializeMessages(localeName).then((_) {\n         Intl.defaultLocale = localeName; \n         return CustomLocalizations(); \n      }); \n   } \n   static CustomLocalizations of(BuildContext context) { \n      return Localizations.of&lt;CustomLocalizations>(context, CustomLocalizations); \n   } \n   String get title {\n      return Intl.message( \n         'Demo', \n         name: 'title', \n         desc: 'Title for the Demo application', \n      ); \n   }\n   String get message{\n      return Intl.message(\n         'Hello World', \n         name: 'message', \n         desc: 'Message for the Demo application', \n      ); \n   }\n}\nclass CustomLocalizationsDelegate extends \nLocalizationsDelegate&lt;CustomLocalizations> {\n   const CustomLocalizationsDelegate();\n   \n   @override\n   bool isSupported(Locale locale) => &#91;'en', 'es'].contains(locale.languageCode); \n   @override \n   Future&lt;CustomLocalizations> load(Locale locale) { \n      return CustomLocalizations.load(locale); \n   } \n   @override \n   bool shouldReload(CustomLocalizationsDelegate old) => false; \n}</code></pre>\n\n\n\n<ul><li>Here, we have used three methods from the intl package instead of custom methods. Otherwise, the concepts are same.<ul><li>Intl.canonicalizedLocale − Used to get correct locale name.</li><li>Intl.defaultLocale − Used to set current locale</li><li>Intl.message − Used to define new messages.</li></ul></li><li>import&nbsp;<strong>l10n/messages_all.dart</strong>&nbsp;file. We will generate this file shortly</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'l10n/messages_all.dart';\n</code></pre>\n\n\n\n<ul><li>Now, create a folder, lib/l10n</li><li>Open a command prompt and go to application root directory (where pubspec.yaml is available) and run the following command −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter packages pub run intl_translation:extract_to_arb --output-\n   dir=lib/l10n lib/main.dart\n</code></pre>\n\n\n\n<ul><li>Here, the command will generate, intl_message.arb file, a template to create message in different locale. The content of the file is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"@@last_modified\": \"2019-04-19T02:04:09.627551\", \n   \"title\": \"Demo\", \n   \"@title\": {\n      \"description\": \"Title for the Demo application\", \n      \"type\": \"text\", \n      \"placeholders\": {} \n   }, \n   \"message\": \"Hello World\", \n   \"@message\": {\n      \"description\": \"Message for the Demo \n      application\", \n      \"type\": \"text\", \n      \"placeholders\": {} \n   }\n}</code></pre>\n\n\n\n<ul><li>Copy intl_message.arb and create new file, intl_en.arb.</li><li>Copy intl_message.arb and create new file, intl_es.arb and change the content to Spanish language as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>{\n   \"@@last_modified\": \"2019-04-19T02:04:09.627551\",  \n   \"title\": \"Manifestación\", \n   \"@title\": {\n      \"description\": \"Title for the Demo application\", \n      \"type\": \"text\", \n      \"placeholders\": {} \n   },\n   \"message\": \"Hola Mundo\",\n   \"@message\": {\n      \"description\": \"Message for the Demo application\", \n      \"type\": \"text\", \n      \"placeholders\": {} \n   } \n}</code></pre>\n\n\n\n<ul><li>Now, run the following command to create final message file, messages_all.dart.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter packages pub run intl_translation:generate_from_arb \n--output-dir=lib\\l10n --no-use-deferred-loading \nlib\\main.dart lib\\l10n\\intl_en.arb lib\\l10n\\intl_es.arb\n</code></pre>\n\n\n\n<ul><li>Compile and run the application. It will work similar to above application, flutter_localization_app.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Nowadays, mobile applications are used by customers from different countries and as a result, applications are required to display the content in different languages. Enabling an application to work in multiple languages is called Internationalizing the application. For an application to work in different languages, it should first find the current locale of the system [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5659"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=5659"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/5659/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=5659"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=5659"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=5659"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3282,
    "date": "2020-12-16T11:53:17",
    "date_gmt": "2020-12-16T11:53:17",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3282"
    },
    "modified": "2020-12-16T11:53:17",
    "modified_gmt": "2020-12-16T11:53:17",
    "slug": "testing-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/testing-2/",
    "title": {
      "rendered": "Testing"
    },
    "content": {
      "rendered": "\n<p>Testing is very important phase in the development life cycle of an application. It ensures that the application is of high quality. Testing requires careful planning and execution. It is also the most time consuming phase of the development.</p>\n\n\n\n<p>Dart language and Flutter framework provides extensive support for the automated testing of an application.</p>\n\n\n\n<h2>Types of Testing</h2>\n\n\n\n<p>Generally, three types of testing processes are available to completely test an application. They are as follows −</p>\n\n\n\n<h3>Unit Testing</h3>\n\n\n\n<p>Unit testing is the easiest method to test an application. It is based on ensuring the correctness of a piece of code (a function, in general) o a method of a class. But, it does not reflect the real environment and subsequently, is the least option to find the bugs.</p>\n\n\n\n<h3>Widget Testing</h3>\n\n\n\n<p>Widget testing is based on ensuring the correctness of the widget creation, rendering and interaction with other widgets as expected. It goes one step further and provides near real-time environment to find more bugs.</p>\n\n\n\n<h3>Integration Testing</h3>\n\n\n\n<p>Integration testing involves both unit testing and widget testing along with external component of the application like database, web service, etc., It simulates or mocks the real environment to find nearly all bugs, but it is the most complicated process.</p>\n\n\n\n<p>Flutter provides support for all types of testing. It provides extensive and exclusive support for Widget testing. In this chapter, we will discuss widget testing in detail.</p>\n\n\n\n<h2>Widget Testing</h2>\n\n\n\n<p>Flutter testing framework provides testWidgets method to test widgets. It accepts two arguments −</p>\n\n\n\n<ul><li>Test description</li><li>Test code</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>testWidgets('test description: find a widget', '&lt;test code>');\n</code></pre>\n\n\n\n<h2>Steps Involved</h2>\n\n\n\n<p>Widget Testing involves three distinct steps −</p>\n\n\n\n<ul><li>Render the widget in the testing environment.</li><li>WidgetTester is the class provided by Flutter testing framework to build and renders the widget. pumpWidget method of the WidgetTester class accepts any widget and renders it in the testing environment.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>testWidgets('finds a specific instance', (WidgetTester tester) async { \n   await tester.pumpWidget(MaterialApp( \n      home: Scaffold( \n         body: Text('Hello'), \n      ), \n   )); \n});</code></pre>\n\n\n\n<ul><li>Finding the widget, which we need to test.<ul><li>Flutter framework provides many options to find the widgets rendered in the testing environment and they are generally called Finders. The most frequently used finders are find.text, find.byKey and find.byWidget.<ul><li>find.text finds the widget that contains the specified text.</li></ul></li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>find.text('Hello')\n</code></pre>\n\n\n\n<ul><li>find.byKey find the widget by its specific key.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>find.byKey('home')\n</code></pre>\n\n\n\n<ul><li>find.byWidget find the widget by its instance variable.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>find.byWidget(homeWidget)\n</code></pre>\n\n\n\n<ul><li>Ensuring the widget works as expected.</li><li>Flutter framework provides many options to match the widget with the expected widget and they are normally called&nbsp;<em>Matchers</em>. We can use the expect method provided by the testing framework to match the widget, which we found in the second step with our our expected widget by choosing any of the matchers. Some of the important matchers are as follows.<ul><li>findsOneWidget − verifies a single widget is found.</li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>expect(find.text('Hello'), findsOneWidget);\n</code></pre>\n\n\n\n<ul><li>findsNothing − verifies no widgets are found</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>expect(find.text('Hello World'), findsNothing);\n</code></pre>\n\n\n\n<ul><li>findsWidgets − verifies more than a single widget is found.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>expect(find.text('Save'), findsWidgets);\n</code></pre>\n\n\n\n<ul><li>findsNWidgets − verifies N number of widgets are found.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>expect(find.text('Save'), findsNWidgets(2));\n</code></pre>\n\n\n\n<p>The complete test code is as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>testWidgets('finds hello widget', (WidgetTester tester) async { \n   await tester.pumpWidget(MaterialApp( \n      home: Scaffold( \n         body: Text('Hello'), \n      ), \n   )); \n   expect(find.text('Hello'), findsOneWidget); \n});</code></pre>\n\n\n\n<p>Here, we rendered a MaterialApp widget with text Hello using Text widget in its body. Then, we used find.text to find the widget and then matched it using findsOneWidget.</p>\n\n\n\n<h2>Working Example</h2>\n\n\n\n<p>Let us create a simple flutter application and write a widget test to understand better the steps involved and the concept.</p>\n\n\n\n<ul><li>Create a new flutter application, flutter_test_app in Android studio.</li><li>Open widget_test.dart in test folder. It has a sample testing code as given below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>testWidgets('Counter increments smoke test', (WidgetTester tester) async {\n   // Build our app and trigger a frame. \n   await tester.pumpWidget(MyApp()); \n   \n   // Verify that our counter starts at 0. \n   expect(find.text('0'), findsOneWidget); \n   expect(find.text('1'), findsNothing); \n   \n   // Tap the '+' icon and trigger a frame. \n   await tester.tap(find.byIcon(Icons.add)); \n   await tester.pump(); \n   \n   // Verify that our counter has incremented. \n   expect(find.text('0'), findsNothing); \n   expect(find.text('1'), findsOneWidget); \n});</code></pre>\n\n\n\n<ul><li>Here, the test code does the following functionalities −<ul><li>Renders MyApp widget using tester.pumpWidget.</li><li>Ensures that the counter is initially zero using findsOneWidget and findsNothing matchers.</li><li>Finds the counter increment button using find.byIcon method.</li><li>Taps the counter increment button using tester.tap method.</li><li>Ensures that the counter is increased using findsOneWidget and findsNothing matchers.</li></ul></li><li>Let us again tap the counter increment button and then check whether the counter is increased to two.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>await tester.tap(find.byIcon(Icons.add)); \nawait tester.pump(); \n\nexpect(find.text('2'), findsOneWidget);\n</code></pre>\n\n\n\n<ul><li>Click Run menu.</li><li>Click tests in widget_test.dart option. This will run the test and report the result in the result window.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/flutter_testing.jpg\" alt=\"Flutter Testing\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Testing is very important phase in the development life cycle of an application. It ensures that the application is of high quality. Testing requires careful planning and execution. It is also the most time consuming phase of the development. Dart language and Flutter framework provides extensive support for the automated testing of an application. Types [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3282"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3282"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3282/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3282"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3282"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3282"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3284,
    "date": "2020-12-16T11:54:47",
    "date_gmt": "2020-12-16T11:54:47",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3284"
    },
    "modified": "2020-12-16T11:54:47",
    "modified_gmt": "2020-12-16T11:54:47",
    "slug": "deployment-2-2",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/deployment-2-2/",
    "title": {
      "rendered": "Deployment"
    },
    "content": {
      "rendered": "\n<h2>Android Application</h2>\n\n\n\n<ul><li>Change the application name using android:label entry in android manifest file. Android app manifest file, AndroidManifest.xml is located in &lt;app dir&gt;/android/app/src/main. It contains entire details about an android application. We can set the application name using android:label entry.</li><li>Change launcher icon using android:icon entry in manifest file.</li><li>Sign the app using standard option as necessary.</li><li>Enable Proguard and Obfuscation using standard option, if necessary.</li><li>Create a release APK file by running below command −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>cd /path/to/my/application \nflutter build apk\n</code></pre>\n\n\n\n<ul><li>You can see an output as shown below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Initializing gradle...                                            8.6s \nResolving dependencies...                                        19.9s \nCalling mockable JAR artifact transform to create file: \n/Users/.gradle/caches/transforms-1/files-1.1/android.jar/ \nc30932f130afbf3fd90c131ef9069a0b/android.jar with input \n/Users/Library/Android/sdk/platforms/android-28/android.jar \nRunning Gradle task 'assembleRelease'... \nRunning Gradle task 'assembleRelease'... \nDone                                                             85.7s \nBuilt build/app/outputs/apk/release/app-release.apk (4.8MB).\n</code></pre>\n\n\n\n<ul><li>Install the APK on a device using the following command −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter install\n</code></pre>\n\n\n\n<ul><li>Publish the application into Google Playstore by creating an appbundle and push it into playstore using standard methods.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter build appbundle\n</code></pre>\n\n\n\n<h2>iOS Application</h2>\n\n\n\n<ul><li>Register the iOS application in&nbsp;<em>App Store Connect</em>&nbsp;using standard method. Save the&nbsp;<strong>=Bundle ID</strong>&nbsp;used while registering the application.</li><li>Update Display name in the XCode project setting to set the application name.</li><li>Update Bundle Identifier in the XCode project setting to set the bundle id, which we used in step 1.</li><li>Code sign as necessary using standard method.</li><li>Add a new app icon as necessary using standard method.</li><li>Generate IPA file using the following command −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>\nflutter build ios\n</code></pre>\n\n\n\n<ul><li>Now, you can see the following output −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Building com.example.MyApp for device (ios-release)... \nAutomatically signing iOS for device deployment \nusing specified development team in Xcode project: \nRunning Xcode build...                                   23.5s \n......................\n</code></pre>\n\n\n\n<ul><li>Test the application by pushing the application, IPA file into TestFlight using standard method.</li><li>Finally, push the application into&nbsp;<em>App Store</em>&nbsp;using standard method.</li></ul>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Android Application Change the application name using android:label entry in android manifest file. Android app manifest file, AndroidManifest.xml is located in &lt;app dir&gt;/android/app/src/main. It contains entire details about an android application. We can set the application name using android:label entry. Change launcher icon using android:icon entry in manifest file. Sign the app using standard option [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3284"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3284"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3284/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3284"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3284"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3284"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3286,
    "date": "2020-12-16T11:57:02",
    "date_gmt": "2020-12-16T11:57:02",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3286"
    },
    "modified": "2020-12-16T11:57:02",
    "modified_gmt": "2020-12-16T11:57:02",
    "slug": "development-tools",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/development-tools/",
    "title": {
      "rendered": "Development Tools"
    },
    "content": {
      "rendered": "\n<p>This chapter explains about Flutter development tools in detail. The first stable release of the cross-platform development toolkit was released on December 4th, 2018, Flutter 1.0. Well, Google is continuously working on the improvements and strengthening the Flutter framework with different development tools.</p>\n\n\n\n<h2>Widget Sets</h2>\n\n\n\n<p>Google updated for Material and Cupertino widget sets to provide pixel-perfect quality in the components design. The upcoming version of flutter 1.2 will be designed to support desktop keyboard events and mouse hover support.</p>\n\n\n\n<h2>Flutter Development with Visual Studio Code</h2>\n\n\n\n<p>Visual Studio Code supports flutter development and provides extensive shortcuts for fast and efficient development. Some of the key features provided by Visual Studio Code for flutter development are listed below −</p>\n\n\n\n<ul><li>Code assist &#8211; When you want to check for options, you can use&nbsp;<strong>Ctrl+Space</strong>&nbsp;to get a list of code completion options.</li><li>Quick fix &#8211;&nbsp;<strong>Ctrl+</strong>. is quick fix tool to help in fixing the code.</li><li>Shortcuts while Coding.</li><li>Provides detailed documentation in comments.</li><li>Debugging shortcuts.</li><li>Hot restarts.</li></ul>\n\n\n\n<h2>Dart DevTools</h2>\n\n\n\n<p>We can use Android Studio or Visual Studio Code, or any other IDE to write our code and install plugins. Google’s development team has been working on yet another development tool called Dart DevTools It is a web-based programming suite. It supports both Android and iOS platforms. It is based on time line view so developers can easily analyze their applications.</p>\n\n\n\n<h3>Install DevTools</h3>\n\n\n\n<p>To install DevTools run the following command in your console −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter packages pub global activate devtools\n</code></pre>\n\n\n\n<p>Now you can see the following output −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Resolving dependencies... \n+ args 1.5.1 \n+ async 2.2.0\n+ charcode 1.1.2 \n+ codemirror 0.5.3+5.44.0 \n+ collection 1.14.11 \n+ convert 2.1.1 \n+ devtools 0.0.16 \n+ devtools_server 0.0.2 \n+ http 0.12.0+2 \n+ http_parser 3.1.3 \n+ intl 0.15.8 \n+ js 0.6.1+1 \n+ meta 1.1.7 \n+ mime 0.9.6+2 \n.................. \n.................. \nInstalled executable devtools. \nActivated devtools 0.0.16.\n</code></pre>\n\n\n\n<h3>Run Server</h3>\n\n\n\n<p>You can run the DevTools server using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter packages pub global run devtools\n</code></pre>\n\n\n\n<p>Now, you will get a response similar to this,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Serving DevTools at http://127.0.0.1:9100\n</code></pre>\n\n\n\n<h3>Start Your Application</h3>\n\n\n\n<p>Go to your application, open simulator and run using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter run --observatory-port=9200\n</code></pre>\n\n\n\n<p>Now, you are connected to DevTools.</p>\n\n\n\n<h3>Start DevTools in Browser</h3>\n\n\n\n<p>Now access the below url in the browser, to start DevTools −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:9100/?port=9200\n</code></pre>\n\n\n\n<p>You will get a response as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/dart_dev_tools.jpg\" alt=\"Dart Dev Tools\"/></figure>\n\n\n\n<h2>Flutter SDK</h2>\n\n\n\n<p>To update Flutter SDK, use the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter upgrade\n</code></pre>\n\n\n\n<p>You can see an output as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/flutter_sdk.jpg\" alt=\"Flutter SDK\"/></figure>\n\n\n\n<p>To upgrade Flutter packages, use the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter packages upgrade\n</code></pre>\n\n\n\n<p>You could see the following response,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Running \"flutter packages upgrade\" in my_app... 7.4s\n</code></pre>\n\n\n\n<h3>Flutter Inspector</h3>\n\n\n\n<p>It is used to explore flutter widget trees. To achieve this, run the below command in your console,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>flutter run --track-widget-creation\n</code></pre>\n\n\n\n<p>You can see an output as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Launching lib/main.dart on iPhone X in debug mode... \n─Assembling Flutter resources...                       3.6s \nCompiling, linking and signing...                      6.8s \nXcode build done.                                     14.2s \n2,904ms (!)\nTo hot reload changes while running, press \"r\". To hot restart (and rebuild state), press \"R\". \nAn Observatory debugger and profiler on iPhone X is available at: http://127.0.0.1:50399/ \nFor a more detailed help message, press \"h\". To detach, press \"d\"; to quit, press \"q\".\n</code></pre>\n\n\n\n<p>Now go to the url, http://127.0.0.1:50399/ you could see the following result −</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>This chapter explains about Flutter development tools in detail. The first stable release of the cross-platform development toolkit was released on December 4th, 2018, Flutter 1.0. Well, Google is continuously working on the improvements and strengthening the Flutter framework with different development tools. Widget Sets Google updated for Material and Cupertino widget sets to provide [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3286"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3286"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3286/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3286"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3286"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3286"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3288,
    "date": "2020-12-16T12:04:17",
    "date_gmt": "2020-12-16T12:04:17",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3288"
    },
    "modified": "2020-12-16T12:04:17",
    "modified_gmt": "2020-12-16T12:04:17",
    "slug": "writting-advanced-applications",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/writting-advanced-applications/",
    "title": {
      "rendered": "Writting Advanced Applications"
    },
    "content": {
      "rendered": "\n<p>In this chapter, we are going to learn how to write a full fledged mobile application, expense_calculator. The purpose of the expense_calculator is to store our expense information. The complete feature of the application is as follows −</p>\n\n\n\n<ul><li>Expense list.</li><li>Form to enter new expenses.</li><li>Option to edit / delete the existing expenses.</li><li>Total expenses at any instance.</li></ul>\n\n\n\n<p>We are going to program the expense_calculator application using below mentioned advanced features of Flutter framework.</p>\n\n\n\n<ul><li>Advanced use of ListView to show the expense list.</li><li>Form programming.</li><li>SQLite database programming to store our expenses.</li><li>scoped_model state management to simplify our programming.</li></ul>\n\n\n\n<p>Let us start programming the&nbsp;<strong>expense_calculator</strong>&nbsp;application.</p>\n\n\n\n<ul><li>Create a new Flutter application, expense_calculator in Android studio.</li><li>Open pubspec.yaml and add package dependencies.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>dependencies: \n   flutter: \n      sdk: flutter \n   sqflite: ^1.1.0 \n   path_provider: ^0.5.0+1 \n   scoped_model: ^1.0.1 \n   intl: any\n</code></pre>\n\n\n\n<ul><li>Observe these points here −<ul><li>sqflite is used for SQLite database programming.</li><li>path_provider is used to get system specific application path.</li><li>scoped_model is used for state management.</li><li>intl is used for date formatting.</li></ul></li><li>Android studio will display the following alert that the pubspec.yaml is updated.</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/alert_writing_advanced_applications.jpg\" alt=\"Alert Writing Advanced Applications\"/></figure>\n\n\n\n<ul><li>Click Get dependencies option. Android studio will get the package from Internet and properly configure it for the application.</li><li>Remove the existing code in main.dart.</li><li>Add new file, Expense.dart to create Expense class. Expense class will have the below properties and methods.<ul><li><strong>property: id</strong>&nbsp;− Unique id to represent an expense entry in SQLite database.</li><li><strong>property: amount</strong>&nbsp;− Amount spent.</li><li><strong>property: date</strong>&nbsp;− Date when the amount is spent.</li><li><strong>property: category</strong>&nbsp;− Category represents the area in which the amount is spent. e.g Food, Travel, etc.,</li><li><strong>formattedDate</strong>&nbsp;− Used to format the date property</li><li><strong>fromMap</strong>&nbsp;− Used to map the field from database table to the property in the expense object and to create a new expense object.</li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>factory Expense.fromMap(Map&lt;String, dynamic> data) { \n   return Expense( \n      data&#91;'id'], \n      data&#91;'amount'], \n      DateTime.parse(data&#91;'date']),    \n      data&#91;'category'] \n   ); \n}</code></pre>\n\n\n\n<ul><li><strong>toMap</strong>&nbsp;− Used to convert the expense object to Dart Map, which can be further used in database programming</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Map&lt;String, dynamic> toMap() => { \n   \"id\" : id, \n   \"amount\" : amount, \n   \"date\" : date.toString(), \n   \"category\" : category, \n};</code></pre>\n\n\n\n<ul><li><strong>columns</strong>&nbsp;− Static variable used to represent the database field.</li><li>Enter and save the following code into the Expense.dart file.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:intl/intl.dart'; class Expense {\n   final int id; \n   final double amount; \n   final DateTime date; \n   final String category; \n   String get formattedDate { \n      var formatter = new DateFormat('yyyy-MM-dd'); \n      return formatter.format(this.date); \n   } \n   static final columns = &#91;'id', 'amount', 'date', 'category'];\n   Expense(this.id, this.amount, this.date, this.category); \n   factory Expense.fromMap(Map&lt;String, dynamic> data) { \n      return Expense( \n         data&#91;'id'], \n         data&#91;'amount'], \n         DateTime.parse(data&#91;'date']), data&#91;'category'] \n      ); \n   }\n   Map&lt;String, dynamic> toMap() => {\n      \"id\" : id, \n      \"amount\" : amount, \n      \"date\" : date.toString(), \n      \"category\" : category, \n   }; \n}</code></pre>\n\n\n\n<ul><li>The above code is simple and self explanatory.</li><li>Add new file, Database.dart to create SQLiteDbProvider class. The purpose of the SQLiteDbProvider class is as follows −<ul><li>Get all expenses available in the database using getAllExpenses method. It will be used to list all the user’s expense information.</li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;List&lt;Expense>> getAllExpenses() async { \n   final db = await database; \n   \n   List&lt;Map> results = await db.query(\n      \"Expense\", columns: Expense.columns, orderBy: \"date DESC\"\n   );\n   List&lt;Expense> expenses = new List(); \n   results.forEach((result) {\n      Expense expense = Expense.fromMap(result); \n      expenses.add(expense); \n   }); \n   return expenses; \n}</code></pre>\n\n\n\n<ul><li>Get a specific expense information based on expense identity available in the database using getExpenseById method. It will be used to show the particular expense information to the user.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;Expense> getExpenseById(int id) async {\n   final db = await database;\n   var result = await db.query(\"Expense\", where: \"id = \", whereArgs: &#91;id]);\n   \n   return result.isNotEmpty ? \n   Expense.fromMap(result.first) : Null; \n}</code></pre>\n\n\n\n<ul><li>Get the total expenses of the user using getTotalExpense method. It will be used to show the current total expense to the user.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;double> getTotalExpense() async {\n   final db = await database; \n   List&lt;Map> list = await db.rawQuery(\n      \"Select SUM(amount) as amount from expense\"\n   );\n   return list.isNotEmpty ? list&#91;0]&#91;\"amount\"] : Null; \n}</code></pre>\n\n\n\n<ul><li>Add new expense information into the database using insert method. It will be used to add new expense entry into the application by the user.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Future&lt;Expense> insert(Expense expense) async { \n   final db = await database; \n   var maxIdResult = await db.rawQuery(\n      \"SELECT MAX(id)+1 as last_inserted_id FROM Expense\"\n   );\n   var id = maxIdResult.first&#91;\"last_inserted_id\"]; \n   var result = await db.rawInsert(\n      \"INSERT Into Expense (id, amount, date, category)\" \n      \" VALUES (?, ?, ?, ?)\", &#91;\n         id, expense.amount, expense.date.toString(), expense.category\n      ]\n   ); \n   return Expense(id, expense.amount, expense.date, expense.category); \n}</code></pre>\n\n\n\n<ul><li>Update existing expense information using update method. It will be used to edit and update existing expense entry available in the system by the user.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>update(Expense product) async {\n   final db = await database; \n   \n   var result = await db.update(\"Expense\", product.toMap(), \n   where: \"id = ?\", whereArgs: &#91;product.id]); \n   return result; \n}</code></pre>\n\n\n\n<ul><li>Delete existing expense information using delete method. It will be used remove the existing expense entry available in the system by the user.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>delete(int id) async {\n   final db = await database;\n   db.delete(\"Expense\", where: \"id = ?\", whereArgs: &#91;id]); \n}</code></pre>\n\n\n\n<ul><li>The complete code of the SQLiteDbProvider class is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:async'; \nimport 'dart:io'; \nimport 'package:path/path.dart'; \nimport 'package:path_provider/path_provider.dart'; \nimport 'package:sqflite/sqflite.dart'; \nimport 'Expense.dart'; \n\nclass SQLiteDbProvider {\n   SQLiteDbProvider._(); \n   static final SQLiteDbProvider db = SQLiteDbProvider._(); \n   \n   static Database _database; Future&lt;Database> get database async { \n      if (_database != null) \n         return _database; \n      _database = await initDB(); \n      return _database; \n   } \n   initDB() async {\n      Directory documentsDirectory = await getApplicationDocumentsDirectory(); \n      String path = join(documentsDirectory.path, \"ExpenseDB2.db\"); \n      return await openDatabase(\n         path, version: 1, onOpen:(db){}, onCreate: (Database db, int version) async {\n            await db.execute(\n               \"CREATE TABLE Expense (\n                  \"\"id INTEGER PRIMARY KEY,\" \"amount REAL,\" \"date TEXT,\" \"category TEXT\"\"\n               )\n            \"); \n            await db.execute(\n               \"INSERT INTO Expense ('id', 'amount', 'date', 'category') \n               values (?, ?, ?, ?)\",&#91;1, 1000, '2019-04-01 10:00:00', \"Food\"]\n            );\n            /*await db.execute(\n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", &#91;\n                  2, \"Pixel\", \"Pixel is the most feature phone ever\", 800, \"pixel.png\"\n               ]\n            ); \n            await db.execute(\n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", &#91;\n                  3, \"Laptop\", \"Laptop is most productive development tool\", 2000, \"laptop.png\"\n               ]\n            );\n            await db.execute(\n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", &#91;\n                  4, \"Tablet\", \"Laptop is most productive development tool\", 1500, \"tablet.png\"\n               ]\n            );\n            await db.execute(\n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", &#91;\n                  5, \"Pendrive\", \"iPhone is the stylist phone ever\", 100, \"pendrive.png\"\n               ]\n            ); \n            await db.execute(\n               \"INSERT INTO Product ('id', 'name', 'description', 'price', 'image') \n               values (?, ?, ?, ?, ?)\", &#91;\n                  6, \"Floppy Drive\", \"iPhone is the stylist phone ever\", 20, \"floppy.png\"\n               ]\n            ); */ \n         }\n      );\n   }\n   Future&lt;List&lt;Expense>> getAllExpenses() async {\n      final db = await database; \n      List&lt;Map> \n      results = await db.query(\n         \"Expense\", columns: Expense.columns, orderBy: \"date DESC\"\n      );\n      List&lt;Expense> expenses = new List(); \n      results.forEach((result) {\n         Expense expense = Expense.fromMap(result);\n         expenses.add(expense);\n      }); \n      return expenses; \n   } \n   Future&lt;Expense> getExpenseById(int id) async {\n      final db = await database;\n      var result = await db.query(\"Expense\", where: \"id = \", whereArgs: &#91;id]); \n      return result.isNotEmpty ? Expense.fromMap(result.first) : Null; \n   }\n   Future&lt;double> getTotalExpense() async {\n      final db = await database;\n      List&lt;Map> list = await db.rawQuery(\n         \"Select SUM(amount) as amount from expense\"\n      );\n      return list.isNotEmpty ? list&#91;0]&#91;\"amount\"] : Null; \n   }\n   Future&lt;Expense> insert(Expense expense) async {\n      final db = await database; \n      var maxIdResult = await db.rawQuery(\n         \"SELECT MAX(id)+1 as last_inserted_id FROM Expense\"\n      );\n      var id = maxIdResult.first&#91;\"last_inserted_id\"]; \n      var result = await db.rawInsert(\n         \"INSERT Into Expense (id, amount, date, category)\" \n         \" VALUES (?, ?, ?, ?)\", &#91;\n            id, expense.amount, expense.date.toString(), expense.category\n         ]\n      );\n      return Expense(id, expense.amount, expense.date, expense.category); \n   }\n   update(Expense product) async {\n      final db = await database; \n      var result = await db.update(\n         \"Expense\", product.toMap(), where: \"id = ?\", whereArgs: &#91;product.id]\n      ); \n      return result; \n   }\n   delete(int id) async {\n      final db = await database;\n      db.delete(\"Expense\", where: \"id = ?\", whereArgs: &#91;id]);\n   }\n}</code></pre>\n\n\n\n<ul><li>Here,<ul><li>database is the property to get the SQLiteDbProvider object.</li><li>initDB is a method used to select and open the SQLite database.</li></ul></li><li>Create a new file, ExpenseListModel.dart to create ExpenseListModel. The purpose of the model is to hold the complete information of the user expenses in the memory and updating the user interface of the application whenever user’s expense changes in the memory. It is based on Model class from scoped_model package. It has the following properties and methods −<ul><li>_items − private list of expenses.</li><li>items − getter for _items as UnmodifiableListView&lt;Expense&gt; to prevent unexpected or accidental changes to the list.</li><li>totalExpense − getter for Total expenses based on the items variable.</li></ul></li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>double get totalExpense {\n   double amount = 0.0; \n   for(var i = 0; i &lt; _items.length; i++) { \n      amount = amount + _items&#91;i].amount; \n   } \n   return amount; \n}</code></pre>\n\n\n\n<ul><li>load − Used to load the complete expenses from database and into the _items variable. It also calls notifyListeners to update the UI.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void load() {\n   Future&lt;List&lt;Expense>> \n   list = SQLiteDbProvider.db.getAllExpenses(); \n   list.then( (dbItems) {\n      for(var i = 0; i &lt; dbItems.length; i++) { \n         _items.add(dbItems&#91;i]); \n      } notifyListeners(); \n   });\n}</code></pre>\n\n\n\n<ul><li>byId − Used to get a particular expenses from _items variable.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>Expense byId(int id) { \n   for(var i = 0; i &lt; _items.length; i++) { \n      if(_items&#91;i].id == id) { \n         return _items&#91;i]; \n      } \n   }\n   return null; \n}</code></pre>\n\n\n\n<ul><li>add − Used to add a new expense item into the _items variable as well as into the database. It also calls notifyListeners to update the UI.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void add(Expense item) {\n   SQLiteDbProvider.db.insert(item).then((val) { \n      _items.add(val); notifyListeners(); \n   }); \n}</code></pre>\n\n\n\n<ul><li>Update − Used to Update expense item into the _items variable as well as into the database. It also calls notifyListeners to update the UI.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void update(Expense item) {\n   bool found = false;\n   for(var i = 0; i &lt; _items.length; i++) {\n      if(_items&#91;i].id == item.id) {\n         _items&#91;i] = item; \n         found = true; \n         SQLiteDbProvider.db.update(item); break; \n      } \n   }\n   if(found) notifyListeners(); \n}</code></pre>\n\n\n\n<ul><li>delete − Used to remove an existing expense item in the _items variable as well as from the database. It also calls notifyListeners to update the UI.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void delete(Expense item) { \n   bool found = false; \n   for(var i = 0; i &lt; _items.length; i++) {\n      if(_items&#91;i].id == item.id) {\n         found = true; \n         SQLiteDbProvider.db.delete(item.id); \n         _items.removeAt(i); break; \n      }\n   }\n   if(found) notifyListeners(); \n}</code></pre>\n\n\n\n<ul><li>The complete code of the ExpenseListModel class is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'dart:collection'; \nimport 'package:scoped_model/scoped_model.dart'; \nimport 'Expense.dart'; \nimport 'Database.dart'; \n\nclass ExpenseListModel extends Model { \n   ExpenseListModel() { \n      this.load(); \n   } \n   final List&lt;Expense> _items = &#91;]; \n   UnmodifiableListView&lt;Expense> get items => \n   UnmodifiableListView(_items); \n   \n   /*Future&lt;double> get totalExpense { \n      return SQLiteDbProvider.db.getTotalExpense(); \n   }*/ \n   \n   double get totalExpense {\n      double amount = 0.0;\n      for(var i = 0; i &lt; _items.length; i++) { \n         amount = amount + _items&#91;i].amount; \n      } \n      return amount; \n   }\n   void load() {\n      Future&lt;List&lt;Expense>> list = SQLiteDbProvider.db.getAllExpenses(); \n      list.then( (dbItems) {\n         for(var i = 0; i &lt; dbItems.length; i++) {\n            _items.add(dbItems&#91;i]); \n         } \n         notifyListeners(); \n      }); \n   }\n   Expense byId(int id) {\n      for(var i = 0; i &lt; _items.length; i++) { \n         if(_items&#91;i].id == id) { \n            return _items&#91;i]; \n         } \n      }\n      return null; \n   }\n   void add(Expense item) {\n      SQLiteDbProvider.db.insert(item).then((val) {\n         _items.add(val);\n         notifyListeners();\n      }); \n   }\n   void update(Expense item) {\n      bool found = false; \n      for(var i = 0; i &lt; _items.length; i++) {\n         if(_items&#91;i].id == item.id) {\n            _items&#91;i] = item; \n            found = true; \n            SQLiteDbProvider.db.update(item); \n            break; \n         }\n      }\n      if(found) notifyListeners(); \n   }\n   void deleteimport 'dart:collection'; \nimport 'package:scoped_model/scoped_model.dart'; \nimport 'Expense.dart'; \nimport 'Database.dart'; \n\nclass ExpenseListModel extends Model { \n   ExpenseListModel() { \n      this.load(); \n   } \n   final List&lt;Expense> _items = &#91;]; \n   UnmodifiableListView&lt;Expense> get items => \n   UnmodifiableListView(_items); \n   \n   /*Future&lt;double> get totalExpense { \n      return SQLiteDbProvider.db.getTotalExpense(); \n   }*/ \n   \n   double get totalExpense {\n      double amount = 0.0;\n      for(var i = 0; i &lt; _items.length; i++) { \n         amount = amount + _items&#91;i].amount; \n      } \n      return amount; \n   }\n   void load() {\n      Future&lt;List&lt;Expense>> list = SQLiteDbProvider.db.getAllExpenses(); \n      list.then( (dbItems) {\n         for(var i = 0; i &lt; dbItems.length; i++) {\n            _items.add(dbItems&#91;i]); \n         } \n         notifyListeners(); \n      }); \n   }\n   Expense byId(int id) {\n      for(var i = 0; i &lt; _items.length; i++) { \n         if(_items&#91;i].id == id) { \n            return _items&#91;i]; \n         } \n      }\n      return null; \n   }\n   void add(Expense item) {\n      SQLiteDbProvider.db.insert(item).then((val) {\n         _items.add(val);\n         notifyListeners();\n      }); \n   }\n   void update(Expense item) {\n      bool found = false; \n      for(var i = 0; i &lt; _items.length; i++) {\n         if(_items&#91;i].id == item.id) {\n            _items&#91;i] = item; \n            found = true; \n            SQLiteDbProvider.db.update(item); \n            break; \n         }\n      }\n      if(found) notifyListeners(); \n   }\n   void delete(Expense item) {\n      bool found = false; \n      for(var i = 0; i &lt; _items.length; i++) {\n         if(_items&#91;i].id == item.id) {\n            found = true; \n            SQLiteDbProvider.db.delete(item.id); \n            _items.removeAt(i); break; \n         }\n      }\n      if(found) notifyListeners(); \n   }\n}</code></pre>\n\n\n\n<ul><li>Open main.dart file. Import the classes as specified below −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nimport 'package:scoped_model/scoped_model.dart'; \nimport 'ExpenseListModel.dart'; \nimport 'Expense.dart';\n</code></pre>\n\n\n\n<ul><li>Add main function and call runApp by passing ScopedModel&lt;ExpenseListModel&gt; widget.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>void main() { \n   final expenses = ExpenseListModel(); \n   runApp(\n      ScopedModel&lt;ExpenseListModel>(model: expenses, child: MyApp(),)\n   );\n}</code></pre>\n\n\n\n<ul><li>Here,<ul><li>expenses object loads all the user expenses information from the database. Also, when the application is opened for the first time, it will create the required database with proper tables.</li><li>ScopedModel provides the expense information during the whole life cycle of the application and ensures the maintenance of state of the application at any instance. It enables us to use StatelessWidget instead of StatefulWidget.</li></ul></li><li>Create a simple MyApp using MaterialApp widget.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyApp extends StatelessWidget {\n   // This widget is the root of your application. \n   @override \n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Expense',\n         theme: ThemeData(\n            primarySwatch: Colors.blue, \n         ), \n         home: MyHomePage(title: 'Expense calculator'), \n      );\n   }\n}</code></pre>\n\n\n\n<ul><li>Create MyHomePage widget to display all the user’s expense information along with total expenses at the top. Floating button at the bottom right corner will be used to add new expenses.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class MyHomePage extends StatelessWidget { \n   MyHomePage({Key key, this.title}) : super(key: key); \n   final String title; \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar( \n            title: Text(this.title), \n         ), \n         body: ScopedModelDescendant&lt;ExpenseListModel>(\n            builder: (context, child, expenses) {\n               return ListView.separated(\n                  itemCount: expenses.items == null ? 1 \n                  : expenses.items.length + 1, \n                  itemBuilder: (context, index) { \n                     if (index == 0) { \n                        return ListTile(\n                           title: Text(\"Total expenses: \" \n                           + expenses.totalExpense.toString(), \n                           style: TextStyle(fontSize: 24,\n                           fontWeight: FontWeight.bold),) \n                        );\n                     } else {\n                        index = index - 1; \n                        return Dismissible( \n                           key: Key(expenses.items&#91;index].id.toString()), \n                              onDismissed: (direction) { \n                              expenses.delete(expenses.items&#91;index]); \n                              Scaffold.of(context).showSnackBar(\n                                 SnackBar(\n                                    content: Text(\n                                       \"Item with id, \" \n                                       + expenses.items&#91;index].id.toString() + \n                                       \" is dismissed\"\n                                    )\n                                 )\n                              ); \n                           },\n                           child: ListTile( onTap: () { \n                              Navigator.push(\n                                 context, MaterialPageRoute(\n                                    builder: (context) => FormPage(\n                                       id: expenses.items&#91;index].id,\n                                       expenses: expenses, \n                                    )\n                                 )\n                              );\n                           }, \n                           leading: Icon(Icons.monetization_on), \n                           trailing: Icon(Icons.keyboard_arrow_right), \n                           title: Text(expenses.items&#91;index].category + \": \" + \n                           expenses.items&#91;index].amount.toString() + \n                           \" \\nspent on \" + expenses.items&#91;index].formattedDate, \n                           style: TextStyle(fontSize: 18, fontStyle: FontStyle.italic),))\n                        ); \n                     }\n                  },\n                  separatorBuilder: (context, index) { \n                     return Divider(); \n                  }, \n               );\n            },\n         ),\n         floatingActionButton: ScopedModelDescendant&lt;ExpenseListModel>(\n            builder: (context, child, expenses) {\n               return FloatingActionButton( onPressed: () {\n                  Navigator.push( \n                     context, MaterialPageRoute(\n                        builder: (context) => ScopedModelDescendant&lt;ExpenseListModel>(\n                           builder: (context, child, expenses) { \n                              return FormPage( id: 0, expenses: expenses, ); \n                           }\n                        )\n                     )\n                  ); \n                  // expenses.add(new Expense( \n                     // 2, 1000, DateTime.parse('2019-04-01 11:00:00'), 'Food')\n                  ); \n                  // print(expenses.items.length); \n               },\n               tooltip: 'Increment', child: Icon(Icons.add), ); \n            }\n         )\n      );\n   }\n}</code></pre>\n\n\n\n<ul><li>Here,<ul><li>ScopedModelDescendant is used to pass the expense model into the ListView and FloatingActionButton widget.</li><li>ListView.separated and ListTile widget is used to list the expense information.</li><li>Dismissible widget is used to delete the expense entry using swipe gesture.</li><li>Navigator is used to open edit interface of an expense entry. It can be activated by tapping an expense entry.</li></ul></li><li>Create a FormPage widget. The purpose of the FormPage widget is to add or update an expense entry. It handles expense entry validation as well.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>class FormPage extends StatefulWidget { \n   FormPage({Key key, this.id, this.expenses}) : super(key: key); \n   final int id; \n   final ExpenseListModel expenses; \n   \n   @override _FormPageState createState() => _FormPageState(id: id, expenses: expenses); \n}\nclass _FormPageState extends State&lt;FormPage> {\n   _FormPageState({Key key, this.id, this.expenses}); \n   \n   final int id; \n   final ExpenseListModel expenses; \n   final scaffoldKey = GlobalKey&lt;ScaffoldState>(); \n   final formKey = GlobalKey&lt;FormState>(); \n   \n   double _amount; \n   DateTime _date; \n   String _category; \n   \n   void _submit() {\n      final form = formKey.currentState; \n      if (form.validate()) {\n         form.save(); \n         if (this.id == 0) expenses.add(Expense(0, _amount, _date, _category)); \n            else expenses.update(Expense(this.id, _amount, _date, _category)); \n         Navigator.pop(context); \n      }\n   }\n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         key: scaffoldKey, appBar: AppBar(\n            title: Text('Enter expense details'),\n         ), \n         body: Padding(\n            padding: const EdgeInsets.all(16.0), \n            child: Form(\n               key: formKey, child: Column(\n                  children: &#91;\n                     TextFormField( \n                        style: TextStyle(fontSize: 22), \n                        decoration: const InputDecoration( \n                           icon: const Icon(Icons.monetization_on), \n                           labelText: 'Amount', \n                           labelStyle: TextStyle(fontSize: 18)\n                        ), \n                        validator: (val) {\n                           Pattern pattern = r'^&#91;1-9]\\d*(\\.\\d+)?$'; \n                           RegExp regex = new RegExp(pattern); \n                           if (!regex.hasMatch(val)) \n                           return 'Enter a valid number'; else return null; \n                        }, \n                        initialValue: id == 0 \n                        ? '' : expenses.byId(id).amount.toString(), \n                        onSaved: (val) => _amount = double.parse(val), \n                     ), \n                     TextFormField( \n                        style: TextStyle(fontSize: 22), \n                        decoration: const InputDecoration( \n                           icon: const Icon(Icons.calendar_today),\n                           hintText: 'Enter date', \n                           labelText: 'Date', \n                           labelStyle: TextStyle(fontSize: 18), \n                        ), \n                        validator: (val) {\n                           Pattern pattern = r'^((?:19|20)\\d\\d)&#91;- /.]\n                              (0&#91;1-9]|1&#91;012])&#91;- /.](0&#91;1-9]|&#91;12]&#91;0-9]|3&#91;01])$'; \n                           RegExp regex = new RegExp(pattern); \n                           if (!regex.hasMatch(val)) \n                              return 'Enter a valid date'; \n                           else return null; \n                        },\n                        onSaved: (val) => _date = DateTime.parse(val), \n                        initialValue: id == 0 \n                        ? '' : expenses.byId(id).formattedDate, \n                        keyboardType: TextInputType.datetime, \n                     ),\n                     TextFormField(\n                        style: TextStyle(fontSize: 22), \n                        decoration: const InputDecoration(\n                           icon: const Icon(Icons.category),\n                           labelText: 'Category', \n                           labelStyle: TextStyle(fontSize: 18)\n                        ),\n                        onSaved: (val) => _category = val, \n                        initialValue: id == 0 ? '' \n                        : expenses.byId(id).category.toString(),\n                     ), \n                     RaisedButton( \n                        onPressed: _submit, \n                        child: new Text('Submit'), \n                     ), \n                  ],\n               ),\n            ),\n         ),\n      );\n   }\n}</code></pre>\n\n\n\n<ul><li>Here,<ul><li>TextFormField is used to create form entry.</li><li>validator property of TextFormField is used to validate the form element along with RegEx patterns.</li><li>_submit function is used along with expenses object to add or update the expenses into the database.</li></ul></li><li>The complete code of the main.dart file is as follows −</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>import 'package:flutter/material.dart'; \nimport 'package:scoped_model/scoped_model.dart'; \nimport 'ExpenseListModel.dart'; \nimport 'Expense.dart'; \n\nvoid main() { \n   final expenses = ExpenseListModel(); \n   runApp(\n      ScopedModel&lt;ExpenseListModel>(\n         model: expenses, child: MyApp(), \n      )\n   ); \n}\nclass MyApp extends StatelessWidget {\n   // This widget is the root of your application. \n   @override\n   Widget build(BuildContext context) {\n      return MaterialApp(\n         title: 'Expense',\n         theme: ThemeData(\n            primarySwatch: Colors.blue, \n         ), \n         home: MyHomePage(title: 'Expense calculator'), \n      );\n   }\n}\nclass MyHomePage extends StatelessWidget {\n   MyHomePage({Key key, this.title}) : super(key: key);\n   final String title;\n\n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         appBar: AppBar(\n            title: Text(this.title),\n         ),\n         body: ScopedModelDescendant&lt;ExpenseListModel>(\n            builder: (context, child, expenses) { \n               return ListView.separated(\n                  itemCount: expenses.items == null ? 1 \n                  : expenses.items.length + 1, itemBuilder: (context, index) { \n                     if (index == 0) { \n                        return ListTile( title: Text(\"Total expenses: \" \n                        + expenses.totalExpense.toString(), \n                        style: TextStyle(fontSize: 24,fontWeight: \n                        FontWeight.bold),) ); \n                     } else {\n                        index = index - 1; return Dismissible(\n                           key: Key(expenses.items&#91;index].id.toString()), \n                           onDismissed: (direction) {\n                              expenses.delete(expenses.items&#91;index]); \n                              Scaffold.of(context).showSnackBar(\n                                 SnackBar(\n                                    content: Text(\n                                       \"Item with id, \" + \n                                       expenses.items&#91;index].id.toString() \n                                       + \" is dismissed\"\n                                    )\n                                 )\n                              );\n                           }, \n                           child: ListTile( onTap: () {\n                              Navigator.push( context, MaterialPageRoute(\n                                 builder: (context) => FormPage(\n                                    id: expenses.items&#91;index].id, expenses: expenses, \n                                 )\n                              ));\n                           }, \n                           leading: Icon(Icons.monetization_on), \n                           trailing: Icon(Icons.keyboard_arrow_right), \n                           title: Text(expenses.items&#91;index].category + \": \" + \n                           expenses.items&#91;index].amount.toString() + \" \\nspent on \" + \n                           expenses.items&#91;index].formattedDate, \n                           style: TextStyle(fontSize: 18, fontStyle: FontStyle.italic),))\n                        );\n                     }\n                  }, \n                  separatorBuilder: (context, index) {\n                     return Divider(); \n                  },\n               ); \n            },\n         ),\n         floatingActionButton: ScopedModelDescendant&lt;ExpenseListModel>(\n            builder: (context, child, expenses) {\n               return FloatingActionButton(\n                  onPressed: () {\n                     Navigator.push(\n                        context, MaterialPageRoute(\n                           builder: (context)\n                           => ScopedModelDescendant&lt;ExpenseListModel>(\n                              builder: (context, child, expenses) { \n                                 return FormPage( id: 0, expenses: expenses, ); \n                              }\n                           )\n                        )\n                     );\n                     // expenses.add(\n                        new Expense(\n                           // 2, 1000, DateTime.parse('2019-04-01 11:00:00'), 'Food'\n                        )\n                     );\n                     // print(expenses.items.length); \n                  },\n                  tooltip: 'Increment', child: Icon(Icons.add), \n               );\n            }\n         )\n      );\n   } \n}\nclass FormPage extends StatefulWidget {\n   FormPage({Key key, this.id, this.expenses}) : super(key: key); \n   final int id; \n   final ExpenseListModel expenses; \n   \n   @override \n   _FormPageState createState() => _FormPageState(id: id, expenses: expenses); \n}\nclass _FormPageState extends State&lt;FormPage> {\n   _FormPageState({Key key, this.id, this.expenses}); \n   final int id; \n   final ExpenseListModel expenses; \n   final scaffoldKey = GlobalKey&lt;ScaffoldState>(); \n   final formKey = GlobalKey&lt;FormState>(); \n   double _amount; DateTime _date; \n   String _category;\n   void _submit() {\n      final form = formKey.currentState; \n      if (form.validate()) {\n         form.save(); \n         if (this.id == 0) expenses.add(Expense(0, _amount, _date, _category)); \n         else expenses.update(Expense(this.id, _amount, _date, _category)); \n         Navigator.pop(context); \n      } \n   } \n   @override \n   Widget build(BuildContext context) {\n      return Scaffold(\n         key: scaffoldKey, appBar: AppBar( \n            title: Text('Enter expense details'), \n         ), \n         body: Padding(\n            padding: const EdgeInsets.all(16.0),\n            child: Form(\n               key: formKey, child: Column(\n                  children: &#91;\n                     TextFormField(\n                        style: TextStyle(fontSize: 22), \n                        decoration: const InputDecoration( \n                           icon: const Icon(Icons.monetization_on), \n                           labelText: 'Amount', \n                           labelStyle: TextStyle(fontSize: 18)\n                        ), \n                        validator: (val) {\n                           Pattern pattern = r'^&#91;1-9]\\d*(\\.\\d+)?$'; \n                           RegExp regex = new RegExp(pattern); \n                           if (!regex.hasMatch(val)) return 'Enter a valid number'; \n                           else return null; \n                        },\n                        initialValue: id == 0 ? '' \n                        : expenses.byId(id).amount.toString(), \n                        onSaved: (val) => _amount = double.parse(val), \n                     ),\n                     TextFormField(\n                        style: TextStyle(fontSize: 22), \n                        decoration: const InputDecoration(\n                           icon: const Icon(Icons.calendar_today), \n                           hintText: 'Enter date', \n                           labelText: 'Date', \n                           labelStyle: TextStyle(fontSize: 18), \n                        ),\n                        validator: (val) {\n                           Pattern pattern = r'^((?:19|20)\\d\\d)&#91;- /.]\n                           (0&#91;1-9]|1&#91;012])&#91;- /.](0&#91;1-9]|&#91;12]&#91;0-9]|3&#91;01])$'; \n                           RegExp regex = new RegExp(pattern); \n                           if (!regex.hasMatch(val)) return 'Enter a valid date'; \n                           else return null; \n                        },\n                        onSaved: (val) => _date = DateTime.parse(val), \n                        initialValue: id == 0 ? '' : expenses.byId(id).formattedDate, \n                        keyboardType: TextInputType.datetime, \n                     ),\n                     TextFormField(\n                        style: TextStyle(fontSize: 22), \n                        decoration: const InputDecoration(\n                           icon: const Icon(Icons.category), \n                           labelText: 'Category', \n                           labelStyle: TextStyle(fontSize: 18)\n                        ), \n                        onSaved: (val) => _category = val, \n                        initialValue: id == 0 ? '' : expenses.byId(id).category.toString(), \n                     ),\n                     RaisedButton(\n                        onPressed: _submit, \n                        child: new Text('Submit'), \n                     ),\n                  ],\n               ),\n            ),\n         ),\n      );\n   }\n}</code></pre>\n\n\n\n<ul><li>Now, run the application.</li><li>Add new expenses using floating button.</li><li>Edit existing expenses by tapping the expense entry.</li><li>Delete the existing expenses by swiping the expense entry in either direction.</li></ul>\n\n\n\n<p>Some of the screen shots of the application are as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/expense_calculator.jpg\" alt=\"Expense Calculator\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/enter_expense_details.jpg\" alt=\"Enter Expense Details\"/></figure>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/flutter/images/total_expenses.jpg\" alt=\"Total Expenses\"/></figure>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>In this chapter, we are going to learn how to write a full fledged mobile application, expense_calculator. The purpose of the expense_calculator is to store our expense information. The complete feature of the application is as follows − Expense list. Form to enter new expenses. Option to edit / delete the existing expenses. Total expenses [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3288"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3288"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3288/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3288"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3288"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3288"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  },
  {
    "id": 3290,
    "date": "2020-12-16T12:05:33",
    "date_gmt": "2020-12-16T12:05:33",
    "guid": {
      "rendered": "http://appdev.foobrdigital.com/?p=3290"
    },
    "modified": "2020-12-16T12:05:33",
    "modified_gmt": "2020-12-16T12:05:33",
    "slug": "conclusion",
    "status": "publish",
    "type": "post",
    "link": "https://computerprogramming.foobrdigital.com/conclusion/",
    "title": {
      "rendered": "Conclusion"
    },
    "content": {
      "rendered": "\n<p>Flutter framework does a great job by providing an excellent framework to build mobile applications in a truly platform independent way. By providing simplicity in the development process, high performance in the resulting mobile application, rich and relevant user interface for both Android and iOS platform, Flutter framework will surely enable a lot of new developers to develop high performance and feature-full mobile application in the near future.</p>\n",
      "protected": false
    },
    "excerpt": {
      "rendered": "<p>Flutter framework does a great job by providing an excellent framework to build mobile applications in a truly platform independent way. By providing simplicity in the development process, high performance in the resulting mobile application, rich and relevant user interface for both Android and iOS platform, Flutter framework will surely enable a lot of new [&hellip;]</p>\n",
      "protected": false
    },
    "author": 3,
    "featured_media": 0,
    "comment_status": "open",
    "ping_status": "open",
    "sticky": false,
    "template": "",
    "format": "standard",
    "meta": [],
    "categories": [
      107
    ],
    "tags": [],
    "_links": {
      "self": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3290"
        }
      ],
      "collection": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"
        }
      ],
      "about": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"
        }
      ],
      "author": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/3"
        }
      ],
      "replies": [
        {
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3290"
        }
      ],
      "version-history": [
        {
          "count": 0,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3290/revisions"
        }
      ],
      "wp:attachment": [
        {
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3290"
        }
      ],
      "wp:term": [
        {
          "taxonomy": "category",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3290"
        },
        {
          "taxonomy": "post_tag",
          "embeddable": true,
          "href": "https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3290"
        }
      ],
      "curies": [
        {
          "name": "wp",
          "href": "https://api.w.org/{rel}",
          "templated": true
        }
      ]
    }
  }
]