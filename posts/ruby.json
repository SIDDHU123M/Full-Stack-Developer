[{"id":2996,"date":"2020-08-27T05:34:59","date_gmt":"2020-08-27T05:34:59","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=2996"},"modified":"2020-08-27T05:34:59","modified_gmt":"2020-08-27T05:34:59","slug":"ruby-tutorial","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-tutorial/","title":{"rendered":"Ruby Tutorial"},"content":{"rendered":"\n<p>Ruby tutorial provides basic and advanced concepts of Ruby. Our Ruby programming tutorial is designed for beginners and professionals both.</p>\n\n\n\n<p>Ruby is an open-source and fully object-oriented programming language.</p>\n\n\n\n<p>Our Ruby tutorial includes all topics of Ruby such as installation, example, operators, control statements, loops, comments, arrays, strings, hashes, regular expressions, file handling, exception handling, OOPs, Ranges, Iterators. etc</p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby tutorial provides basic and advanced concepts of Ruby. Our Ruby programming tutorial is designed for beginners and professionals both. Ruby is an open-source and fully object-oriented programming language. Our Ruby tutorial includes all topics of Ruby such as installation, example, operators, control statements, loops, comments, arrays, strings, hashes, regular expressions, file handling, exception handling, [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2996"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2996"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2996/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2996"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2996"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2996"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":2998,"date":"2020-08-27T05:35:33","date_gmt":"2020-08-27T05:35:33","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=2998"},"modified":"2020-08-27T05:35:33","modified_gmt":"2020-08-27T05:35:33","slug":"what-is-ruby","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/what-is-ruby/","title":{"rendered":"What is Ruby"},"content":{"rendered":"\n<p>Ruby is a dynamic, open source, object oriented and reflective programming language. Ruby is considered similar to Perl and Smalltalk programming languages. It runs on all types of platforms like Windows, Mac OS and all versions of UNIX.</p>\n\n\n\n<p>It is fully object oriented programming language. Everything is an object in Ruby. Each and every code has their properties and actions. Here properties refer to variables and actions refer to methods.</p>\n\n\n\n<p>Ruby is considered to follow the principle of POLA (principle of least astonishment). It means that the language behaves in such a way to minimize the confusion for experienced users.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>History of Ruby</h2>\n\n\n\n<p>Ruby is designed and developed by Yukihiro &#8220;Martz&#8221; Matsumoto in mid 1990s in Japan.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Idea of Ruby</h2>\n\n\n\n<p>Perl is a scripting language but comes under the category of Toy language. Python is not fully object oriented language. Ruby developer Yukihiro &#8220;Martz&#8221; Matsumoto wanted a programming language which is completely object oriented and should be easy to use as a scripting language. He searched for this type of language, but couldn&#8217;t find one. Hence, he developed one.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>The name &#8220;Ruby&#8221;</h2>\n\n\n\n<p>The name &#8220;Ruby&#8221; originated during a chat session between Matsumoto and Keiju Ishitsuka. Two names were selected, &#8220;Coral&#8221; and &#8220;Ruby&#8221;. Matsumoto chose the later one as it was the birthstone of one of his colleagues.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Early Years</h2>\n\n\n\n<p>The first public release of Ruby 0.95 was announced on Japanese newspaper on December 21, 1995. Within next two days, three more versions were released.</p>\n\n\n\n<p>Ruby was localized to Japan. To expand it, the Ruby-Talk, first English language Ruby mailing list was created.</p>\n\n\n\n<p>In 2001, first Ruby book &#8220;Programming Ruby&#8221; was published. After its publishment, learners of Ruby throughout the world increased.</p>\n\n\n\n<p>In 2005, they released their first Ruby framework &#8220;Ruby on Rails&#8221;. The framework release was a big success and the Ruby community increased incredibly.</p>\n\n\n\n<p>Ruby 1.8.7 was released in May 2008. At this point, Ruby was at its peak so much that even Mac OS X began their shipping with built-in Ruby.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby in Present</h2>\n\n\n\n<p>The current Ruby version 2.4.0 was released on Christmas in 2016. It has several new features like improvement to hash table, instance variable access, Array#max and Array#min.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Future of Ruby</h2>\n\n\n\n<p>Ruby is a great object oriented scripting programming language. Looking at its past we can say that it has a bright future if its community members continue expanding it beyond the thinking.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Versions</h2>\n\n\n\n<p>There are many Ruby versions that have been released till date. Current stable Ruby version is 2.4</p>\n\n\n\n<ul><li>Version 1.8 (4th Aug, 2003)</li><li>Version 1.9 (25th Dec, 2007)</li><li>Version 2.0 (24th Feb, 2013)</li><li>Version 2.1 (25th Dec, 2013)</li><li>Version 2.2 (25th Dec, 2014)</li><li>Version 2.3 (25th Dec, 2015)</li><li>Version 2.4 (25th Dec, 2016)</li><li>Version 3.0 (Future Release)</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Ruby is a dynamic, open source, object oriented and reflective programming language. Ruby is considered similar to Perl and Smalltalk programming languages. It runs on all types of platforms like Windows, Mac OS and all versions of UNIX. It is fully object oriented programming language. Everything is an object in Ruby. Each and every code [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2998"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=2998"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/2998/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=2998"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=2998"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=2998"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3000,"date":"2020-08-27T05:36:18","date_gmt":"2020-08-27T05:36:18","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3000"},"modified":"2020-08-27T05:36:18","modified_gmt":"2020-08-27T05:36:18","slug":"features-of-ruby","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/features-of-ruby/","title":{"rendered":"Features of Ruby"},"content":{"rendered":"\n<p>Ruby language has many features. Some of them are explained below:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/features-of-ruby.png\" alt=\"Features of Ruby\"/></figure>\n\n\n\n<ul><li>Object-oriented</li><li>Flexibility</li><li>Expressive feature</li><li>Mixins</li><li>Visual appearance</li><li>Dynamic typing and Duck typing</li><li>Exception handling</li><li>Garbage collector</li><li>Portable</li><li>Keywords</li><li>Statement delimiters</li><li>Variable constants</li><li>Naming conventions</li><li>Keyword arguments</li><li>Method names</li><li>Singleton methods</li><li>Missing method</li><li>Case Sensitive</li></ul>\n\n\n\n<h3>Object Oriented</h3>\n\n\n\n<p>Ruby is purely object oriented programming language. Each and every value is an object. Every object has a class and every class has a super class. Every code has their properties and actions. Ruby is influenced with Smalltalk language. Rules applying to objects applies to the entire Ruby.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Flexibility</h3>\n\n\n\n<p>Ruby is a flexible language as you can easily remove, redefine or add existing parts to it. It allows its users to freely alter its parts as they wish.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Mixins</h3>\n\n\n\n<p>Ruby has a feature of single inheritance only. Ruby has classes as well as modules. A module has methods but no instances. Instead, a module can be mixed into a class, which adds the method of that module to the class. It is similar to inheritance but much more flexible.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Visual appearance</h3>\n\n\n\n<p>Ruby generally prefers English keyword and some punctuation is used to decorate Ruby. It doesn&#8217;t need variable declaration.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Dynamic typing and Duck typing</h3>\n\n\n\n<p>Ruby is a dynamic programming language. Ruby programs are not compiled. All class, module and method definition are built by the code when it run.</p>\n\n\n\n<p>Ruby variables are loosely typed language, which means any variable can hold any type of object. When a method is called on an object, Ruby only looks up at the name irrespective of the type of object. This is duck typing. It allows you to make classes that pretend to be other classes.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Variable constants</h3>\n\n\n\n<p>In Ruby, constants are not really constant. If an already initialized constant will be modified in a script, it will simply trigger a warning but will not halt your program.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Naming conventions</h3>\n\n\n\n<p>Ruby defines some naming conventions for its variable, method, constant and class.</p>\n\n\n\n<ul><li><strong>Constant:</strong>&nbsp;Starts with a capital letter.</li><li><strong>Global variable:</strong>&nbsp;Starts with a dollar sign ($).</li><li><strong>Instance variable:</strong>&nbsp;Starts with a (@) sign.</li><li><strong>Class variable:</strong>&nbsp;Starts with a (@@) sign.</li><li><strong>Method name:</strong>&nbsp;Allowed to start with a capital letter.</li></ul>\n\n\n\n<h3>Keyword arguments</h3>\n\n\n\n<p>Like Python, Ruby methods can also be defined using keyword arguments.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Method names</h3>\n\n\n\n<p>Methods are allowed to end with question mark (?) or exclamation mark (!). By convention, methods that answer questions end with question mark and methods that indicates that method can change the state of the object end with exclamation mark.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Singleton methods</h3>\n\n\n\n<p>Ruby singleton methods are per-object methods. They are only available on the object you defined it on.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Missing method</h3>\n\n\n\n<p>If a method is lost, Ruby calls the&nbsp;<strong>method_missing</strong>&nbsp;method with name of the lost method.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Statement delimiters</h3>\n\n\n\n<p>Multiple statements in a single line must contain semi colon in between but not at the end of a line.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Keywords</h3>\n\n\n\n<p>In Ruby there are approximately 42 keywords which can&#8217;t be used for other purposes. They are called reserved words.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Case Sensitive</h3>\n\n\n\n<p>Ruby is a case-sensitive language. Lowercase letters and uppercase letters are different.</p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby language has many features. Some of them are explained below: Object-oriented Flexibility Expressive feature Mixins Visual appearance Dynamic typing and Duck typing Exception handling Garbage collector Portable Keywords Statement delimiters Variable constants Naming conventions Keyword arguments Method names Singleton methods Missing method Case Sensitive Object Oriented Ruby is purely object oriented programming language. Each [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3000"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3000"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3000/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3000"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3000"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3000"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3002,"date":"2020-08-27T05:36:56","date_gmt":"2020-08-27T05:36:56","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3002"},"modified":"2020-08-27T05:36:56","modified_gmt":"2020-08-27T05:36:56","slug":"ruby-vs-python","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-vs-python/","title":{"rendered":"Ruby vs Python"},"content":{"rendered":"\n<p>There are many differences and similarities between Ruby and Python programming language.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Similarities</h2>\n\n\n\n<ul><li>They both are high level language.</li><li>They both are server side scripting language.</li><li>Both are used for web applications.</li><li>Both work on multiple platforms.</li><li>Both have clean syntax and are easily readable.</li><li>Both use an interactive prompt called irb.</li><li>Objects are strongly and dynamically typed.</li><li>Both use embedded doc tools.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Differences</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Terms</th><th>Ruby</th><th>Python</th></tr><tr><td>Definition</td><td>Ruby is an open source web application programming language.</td><td>Python is a high level programming language.</td></tr><tr><td>Object Oriented</td><td>Fully object oriented programming language.</td><td>Not fully object oriented programming language.</td></tr><tr><td>Developer</td><td>Yukihiro Matsumoto in 1990s.</td><td>Guido Van Rossum in 1980s.</td></tr><tr><td>Developing Environment</td><td>EclipseIDE is supported.</td><td>multiple IDEs are supported.</td></tr><tr><td>Libraries</td><td>It has smaller library than Python.</td><td>Has larger range of libraries.</td></tr><tr><td>Mixins</td><td>Mixins are used.</td><td>Mixins can&#8217;t be used.</td></tr><tr><td>Web frameworks</td><td>Ruby on Rails</td><td>Django</td></tr><tr><td>Community</td><td>Mainly focused on web.</td><td>Focussed in academia and Linux.</td></tr><tr><td>Usage</td><td>Apple Github Twitter Groupon Shopify ThemeForest</td><td>Google Instagram Mozilla Firefox The Washington post Yahoo Shopzilla</td></tr><tr><td>Built-in classes</td><td>Built-in classes can be modified</td><td>Built-in classes can&#8217;t be modified</td></tr><tr><td>elseif</td><td>elsif</td><td>elif</td></tr><tr><td>Unset a variable</td><td>Once a variable is set you can&#8217;t unset it back . It will be present in the symbol table as long as it is in scope.</td><td>del statement help you to delete a set variable.</td></tr><tr><td>yield keyword</td><td>It will execute another function that has been passed as the final argument, then immediately resume.</td><td>It returns execution to the scope outside the function&#8217;s invocation. External code is responsible for resuming the function.</td></tr><tr><td>Anonymous functions</td><td>Support blocks, procs and lambdas.</td><td>Support only lambdas.</td></tr><tr><td>Functions</td><td>Doesn&#8217;t have functions.</td><td>It has functions.</td></tr><tr><td>Tuples</td><td>It doesn&#8217;t support tuples.</td><td>It support tuples.</td></tr><tr><td>switch/case statement</td><td>It support switch/case statement.</td><td>It doesn&#8217;t support switch/case statement.</td></tr><tr><td>lambda function</td><td>Its lambda functions are larger.</td><td>It support only single line lambda function.</td></tr><tr><td>Inheritance</td><td>Support single inheritance.</td><td>Support multiple inheritance.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>There are many differences and similarities between Ruby and Python programming language. Similarities They both are high level language. They both are server side scripting language. Both are used for web applications. Both work on multiple platforms. Both have clean syntax and are easily readable. Both use an interactive prompt called irb. Objects are strongly [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3002"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3002"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3002/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3002"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3002"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3002"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3004,"date":"2020-08-27T05:37:26","date_gmt":"2020-08-27T05:37:26","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3004"},"modified":"2020-08-27T05:37:26","modified_gmt":"2020-08-27T05:37:26","slug":"ruby-installation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-installation/","title":{"rendered":"Ruby Installation"},"content":{"rendered":"\n<p>Ruby is a cross platform programming language. It is installed differently on different operating systems.</p>\n\n\n\n<ul><li>For&nbsp;<strong>UNIX</strong>&nbsp;like operating system, use your system&#8217;s&nbsp;<strong>package manager.</strong></li><li>For&nbsp;<strong>Windows</strong>&nbsp;operating system, use&nbsp;<strong>RubyInstaller.</strong></li><li>For&nbsp;<strong>OS X</strong>&nbsp;system, use third party tools (<strong>rbenv and RVM</strong>).</li></ul>\n\n\n\n<p>We will install Ruby on&nbsp;<strong>Linux Ubuntu</strong>&nbsp;using&nbsp;<strong>package manager.</strong></p>\n\n\n\n<p><strong>Step 1</strong> Choose the package management system which you want to install from the link click here</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;Debian GNU/Linux and Ubuntu use the apt package manager. Use the following command:</p>\n\n\n\n<ol><li>sudo&nbsp;apt-get&nbsp;install&nbsp;ruby-full&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Here, by default, the ruby-full package provides Ruby 1.9.3 version which is an old version on Debian and Ubuntu.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-installation1.png\" alt=\"Ruby installation 1\"/></figure>\n\n\n\n<p><strong>Step 3</strong>&nbsp;To know your Ruby version installed in your system, use the command,</p>\n\n\n\n<ol><li>ruby&nbsp;-v&nbsp;&nbsp;</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-installation2.png\" alt=\"Ruby installation 2\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby is a cross platform programming language. It is installed differently on different operating systems. For&nbsp;UNIX&nbsp;like operating system, use your system&#8217;s&nbsp;package manager. For&nbsp;Windows&nbsp;operating system, use&nbsp;RubyInstaller. For&nbsp;OS X&nbsp;system, use third party tools (rbenv and RVM). We will install Ruby on&nbsp;Linux Ubuntu&nbsp;using&nbsp;package manager. Step 1 Choose the package management system which you want to install from the link click [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3004"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3004"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3004/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3004"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3004"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3004"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3007,"date":"2020-08-27T05:38:53","date_gmt":"2020-08-27T05:38:53","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3007"},"modified":"2020-08-27T05:38:53","modified_gmt":"2020-08-27T05:38:53","slug":"hello-ruby-program","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/hello-ruby-program/","title":{"rendered":"Hello Ruby Program"},"content":{"rendered":"\n<p>Now we will write a simple program of Ruby. Before writing Hello World program, we are assuming that you have successfully installed Ruby in your system.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Requirement for Hello Ruby Program</h2>\n\n\n\n<ul><li>Download Ruby and install it.</li><li>Create a file with&nbsp;<strong>.rb</strong>&nbsp;extension.</li><li>Connect Ruby path to the file.</li><li>Run the file.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating Hello Ruby Program</h2>\n\n\n\n<p>1) Use any text editor and create a hello.rb file. Write the following code,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>puts \"Hello Ruby !\"  </code></pre>\n\n\n\n<p>2) Connect Ruby path to the above file. We have created hello.rb file in the Desktop. So first we need to go the Desktop directory through our console.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/hello-ruby-program1.png\" alt=\"Ruby Hello ruby program 1\"/></figure>\n\n\n\n<p>3) Run the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ruby hello.rb  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/hello-ruby-program2.png\" alt=\"Ruby Hello ruby program 2\"/></figure>\n\n\n\n<p>This is final output of our Hello Ruby program.</p>\n","protected":false},"excerpt":{"rendered":"<p>Now we will write a simple program of Ruby. Before writing Hello World program, we are assuming that you have successfully installed Ruby in your system. Requirement for Hello Ruby Program Download Ruby and install it. Create a file with&nbsp;.rb&nbsp;extension. Connect Ruby path to the file. Run the file. Creating Hello Ruby Program 1) Use [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3007"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3007"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3007/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3007"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3007"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3007"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3009,"date":"2020-08-27T05:41:02","date_gmt":"2020-08-27T05:41:02","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3009"},"modified":"2020-08-27T05:41:02","modified_gmt":"2020-08-27T05:41:02","slug":"ruby-operators","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-operators/","title":{"rendered":"Ruby Operators"},"content":{"rendered":"\n<p>Ruby has a built-in modern set of operators. Operators are a symbol which is used to perform different operations. For example, +, -, /, *, etc.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Types of operators:</h2>\n\n\n\n<ul><li>Unary operator</li><li>Airthmetic operator</li><li>Bitwise operator</li><li>Logical operator</li><li>Ternary operator</li><li>Assignment operator</li><li>Comparison operator</li><li>Range operator</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Unary Operator</h2>\n\n\n\n<p>Unary operators expect a single operand to run on.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>!</td><td>Boolean NOT</td></tr><tr><td>~</td><td>Bitwise complement</td></tr><tr><td>+</td><td>Unary plus</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>In file hello.rb, write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n   \n puts(\"Unary operator\")   \n puts(~5)   \n puts(~-5)   \n puts(!true)   \n puts(!false)   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-operators1.png\" alt=\"Ruby operators 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Airthmetic Operator</h2>\n\n\n\n<p>Airthmetic operators take numerical values as operands and return them in a single value.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>+</td><td>Adds values from both sides of the operator.</td></tr><tr><td>&#8211;</td><td>Subtract values from both sides of the operator.</td></tr><tr><td>/</td><td>Divide left side operand with right side operand.</td></tr><tr><td>*</td><td>Multiply values from both sides of the operator.</td></tr><tr><td>**</td><td>Right side operand becomes the exponent of left side operand.</td></tr><tr><td>%</td><td>Divide left side operand with right side operand returning remainder.</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>In file hello.rb, write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n  \n puts(\"add operator\")   \n puts(10 + 20)      \n puts(\"subtract operator\")   \n puts(35 - 15)    \n puts(\"multiply operator\")   \n puts(4 * 8)   \n puts(\"division operator\")   \n puts(25 / 5)   \n puts(\"exponential operator\")   \n puts(5 ** 2)   \n puts(\"modulo operator\")   \n puts(25 % 4)   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-operators2.png\" alt=\"Ruby operators 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Bitwise Operator</h2>\n\n\n\n<p>Bitwise operators work on bits operands.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>&amp;</td><td>AND operator</td></tr><tr><td>|</td><td>OR operator</td></tr><tr><td>&lt;&lt;</td><td>Left shift operator</td></tr><tr><td>&gt;&gt;</td><td>Right shift operator</td></tr><tr><td>^</td><td>XOR operator</td></tr><tr><td>~</td><td>Complement operator</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Logical Operator</h2>\n\n\n\n<p>Logical operators work on bits operands.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>&amp;&amp;</td><td>AND operator</td></tr><tr><td>||</td><td>OR operator</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ternary Operator</h2>\n\n\n\n<p>Ternary operators first check whether given conditions are true or false, then execute the condition.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>?:</td><td>Conditional expression</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>In file hello.rb, write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n   \n puts(\"Ternary operator\")   \n puts(2&lt;5 ? 5:2)   \n puts(5&lt;2 ? 5:2)   \n   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-operators3.png\" alt=\"Ruby operators 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Assignment Operator</h2>\n\n\n\n<p>Assignment operator assign a value to the operands.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>=</td><td>Simple assignment operator</td></tr><tr><td>+=</td><td>Add assignment operator</td></tr><tr><td>-=</td><td>subtract assignment operator</td></tr><tr><td>*=</td><td>Multiply assignment operator</td></tr><tr><td>/=</td><td>Divide assignment operator</td></tr><tr><td>%=</td><td>Modulus assignment operator</td></tr><tr><td>**=</td><td>Exponential assignment operator</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Comparison Operator</h2>\n\n\n\n<p>Comparison operators compare two operands.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>==</td><td>Equal operator</td></tr><tr><td>!=</td><td>Not equal operator</td></tr><tr><td>&gt;</td><td>left operand is greater than right operand</td></tr><tr><td>&lt;</td><td>Right operand is greater than left operand</td></tr><tr><td>&gt;=</td><td>Left operand is greater than or equal to right operand</td></tr><tr><td>&lt;=</td><td>Right operand is greater than or equal to left operand</td></tr><tr><td>&lt;=&gt;</td><td>Combined comparison operator</td></tr><tr><td>.eql?</td><td>Checks for equality and type of the operands</td></tr><tr><td>equal?</td><td>Checks for the object ID</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example</strong></p>\n\n\n\n<p>In file hello.rb, write the following code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n   \n puts(\"Comparison operator\")   \n puts(2 == 5)   \n puts(2 != 5)   \n puts(2 > 5)   \n puts(2 &lt; 5)   \n puts(2 >= 5)   \n puts(2 &lt;= 5)   \n   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-operators4.png\" alt=\"Ruby operators 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Range Operator</h2>\n\n\n\n<p>Range operators create a range of successive values consisting of a start, end and range of values in between.</p>\n\n\n\n<p>The (..) creates a range including the last term and (&#8230;) creates a range excluding the last term.</p>\n\n\n\n<p>For example, for the range of 1..5, output will range from 1 to 5.</p>\n\n\n\n<p>and for the range of 1&#8230;5, output will range from 1 to 4.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Operator</th><th>Description</th></tr><tr><td>..</td><td>Range is inclusive of the last term</td></tr><tr><td>&#8230;</td><td>Range is exclusive of the last term</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby has a built-in modern set of operators. Operators are a symbol which is used to perform different operations. For example, +, -, /, *, etc. Types of operators: Unary operator Airthmetic operator Bitwise operator Logical operator Ternary operator Assignment operator Comparison operator Range operator Unary Operator Unary operators expect a single operand to run [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3009"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3009"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3009/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3009"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3009"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3009"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3011,"date":"2020-08-27T05:42:59","date_gmt":"2020-08-27T05:42:59","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3011"},"modified":"2020-08-27T05:42:59","modified_gmt":"2020-08-27T05:42:59","slug":"ruby-variables","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-variables/","title":{"rendered":"Ruby Variables"},"content":{"rendered":"\n<p>Ruby variables are locations which hold data to be used in the programs. Each variable has a different name. These variable names are based on some naming conventions. Unlike other programming languages, there is no need to declare a variable in Ruby. A prefix is needed to indicate it.</p>\n\n\n\n<p>There are four types of variables in Ruby:</p>\n\n\n\n<ul><li>Local variables</li><li>Class variables</li><li>Instance variables</li><li>Global variables</li></ul>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-variables.png\" alt=\"Ruby Variables\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Local variables</h2>\n\n\n\n<p>A local variable name starts with a lowercase letter or underscore (_). It is only accessible or have its scope within the block of its initialization. Once the code block completes, variable has no scope.</p>\n\n\n\n<p>When uninitialized local variables are called, they are interpreted as call to a method that has no arguments.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Class variables</h2>\n\n\n\n<p>A class variable name starts with @@ sign. They need to be initialized before use. A class variable belongs to the whole class and can be accessible from anywhere inside the class. If the value will be changed at one instance, it will be changed at every instance.</p>\n\n\n\n<p>A class variable is shared by all the descendents of the class. An uninitialized class variable will result in an error.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nclass States   \n   @@no_of_states=0   \n   def initialize(name)   \n      @states_name=name   \n      @@no_of_states += 1   \n   end   \n   def display()   \n     puts \"State name #@state_name\"   \n    end   \n    def total_no_of_states()   \n       puts \"Total number of states written: #@@no_of_states\"   \n    end   \nend   \n  \n# Create Objects   \nfirst=States.new(\"Assam\")   \nsecond=States.new(\"Meghalaya\")   \nthird=States.new(\"Maharashtra\")   \nfourth=States.new(\"Pondicherry\")   \n  \n# Call Methods   \nfirst.total_no_of_states()   \nsecond.total_no_of_states()   \nthird.total_no_of_states()   \nfourth.total_no_of_states()  </code></pre>\n\n\n\n<p>In the above example, @@no_of_states is a class variable.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-variables1.png\" alt=\"Ruby variables 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Instance variables</h2>\n\n\n\n<p>An instance variable name starts with a @ sign. It belongs to one instance of the class and can be accessed from any instance of the class within a method. They only have limited access to a particular instance of a class.</p>\n\n\n\n<p>They don&#8217;t need to be initialize. An uninitialized instance variable will have a nil value.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nclass States   \n   def initialize(name)   \n      @states_name=name   \n   end   \n   def display()   \n      puts \"States name #@states_name\"   \n    end   \nend   \n  \n# Create Objects   \nfirst=States.new(\"Assam\")   \nsecond=States.new(\"Meghalaya\")   \nthird=States.new(\"Maharashtra\")   \nfourth=States.new(\"Pondicherry\")   \n  \n# Call Methods   \nfirst.display()   \nsecond.display()   \nthird.display()   \nfourth.display()  </code></pre>\n\n\n\n<p>In the above example, @states_name is the instance variable.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-variables2.png\" alt=\"Ruby variables 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Global variables</h2>\n\n\n\n<p>A global variable name starts with a $ sign. Its scope is globally, means it can be accessed from any where in a program.</p>\n\n\n\n<p>An uninitialized global variable will have a nil value. It is advised not to use them as they make programs cryptic and complex.</p>\n\n\n\n<p>There are a number of predefined global variables in Ruby.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \n$global_var = \"GLOBAL\"   \nclass One   \n  def display   \n     puts \"Global variable in One is #$global_var\"   \n  end   \nend   \nclass Two   \n  def display   \n     puts \"Global variable in Two is #$global_var\"   \n  end   \nend   \n  \noneobj = One.new   \noneobj.display   \ntwoobj = Two.new   \ntwoobj.display</code></pre>\n\n\n\n<p>In the above example, @states_name is the instance variable.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-variables3.png\" alt=\"Ruby variables 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Summary</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th></th><th>Local</th><th>Global</th><th>Instance</th><th>Class</th></tr><tr><td>Scope</td><td>Limited within the block of initialization.</td><td>Its scope is globally.</td><td>It belongs to one instance of a class.</td><td>Limited to the whole class in which they are created.</td></tr><tr><td>Naming</td><td>Starts with a lowercase letter or underscore (_).</td><td>Starts with a $ sign.</td><td>Starts with an @ sign.</td><td>Starts with an @@ sign.</td></tr><tr><td>Initialization</td><td>No need to initialize. An uninitialized local variable is interpreted as methods with no arguments.</td><td>No need to initialize. An uninitialized global variable will have a nil value.</td><td>No need to initialize. An uninitialized instance variable will have a nil value.</td><td>They need to be initialized before use. An uninitialized global variable results in an error.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby variables are locations which hold data to be used in the programs. Each variable has a different name. These variable names are based on some naming conventions. Unlike other programming languages, there is no need to declare a variable in Ruby. A prefix is needed to indicate it. There are four types of variables [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3011"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3011"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3011/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3011"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3011"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3011"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3013,"date":"2020-08-27T05:45:29","date_gmt":"2020-08-27T05:45:29","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3013"},"modified":"2020-08-27T05:45:29","modified_gmt":"2020-08-27T05:45:29","slug":"ruby-data-types","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-data-types/","title":{"rendered":"Ruby Data types"},"content":{"rendered":"\n<p>Data types represents a type of data such as text, string, numbers, etc. There are different data types in Ruby:</p>\n\n\n\n<ul><li>Numbers</li><li>Strings</li><li>Symbols</li><li>Hashes</li><li>Arrays</li><li>Booleans</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Numbers</h2>\n\n\n\n<p>Integers and floating point numbers come in the category of numbers.</p>\n\n\n\n<p>Integers are held internally in binary form. Integer numbers are numbers without a fraction. According to their size, there are two types of integers. One is Bignum and other is Fixnum.</p>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Class</th><th>Description</th><th>Example</th></tr><tr><td>Fixnum</td><td>They are normal numbers</td><td>1</td></tr><tr><td>Bignum</td><td>They are big numbers</td><td>111111111111</td></tr><tr><td>Float</td><td>Decimal numbers</td><td>3.0</td></tr><tr><td>Complex</td><td>Imaginary numbers</td><td>4 + 3i</td></tr><tr><td>Rational</td><td>They are fractional numbers</td><td>9/4</td></tr><tr><td>BigDecimal</td><td>Precision decimal numbers</td><td>6.0</td></tr></tbody></table></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<ul><li>In a calculation if integers are used, then only integers will be returned back.</li><li>In a calculation if float type is used, then only float will be returned back.</li><li>In case of dvision, following output will appear.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Strings</h2>\n\n\n\n<p>A string is a group of letters that represent a sentence or a word. Strings are defined by enclosing a text within single (&#8216;) or double (&#8220;) quote.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<ul><li>Two strings can be concatenated using&nbsp;<strong>+</strong>&nbsp;sign in between them.</li><li>Multiplying a number string with a number will repeat the string as many times.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Symbols</h2>\n\n\n\n<p>Symbols are like strings. A symbol is preceded by a colon (:). For example,</p>\n\n\n\n<ol><li>:abcd&nbsp;&nbsp;</li></ol>\n\n\n\n<p>They do not contain spaces. Symbols containing multiple words are written with (_). One difference between string and symbol is that, if text is a data then it is a string but if it is a code it is a symbol.</p>\n\n\n\n<p>Symbols are unique identifiers and represent static values, while string represent values that change.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/data-types6.png\" alt=\"Ruby Data types 6\"/></figure>\n\n\n\n<p>In the above snapshot, two different object_id is created for string but for symbol same object_id is created.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Hashes</h2>\n\n\n\n<p>A hash assign its values to its keys. They can be looked up by their keys. Value to a key is assigned by&nbsp;<strong>=&gt;</strong>&nbsp;sign. A key/value pair is separated with a comma between them and all the pairs are enclosed within curly braces. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>{\"Akash\" => \"Physics\", \"Ankit\" => \"Chemistry\", \"Aman\" => \"Maths\"}</code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \ndata = {\"Akash\" => \"Physics\", \"Ankit\" => \"Chemistry\", \"Aman\" => \"Maths\"}   \nputs data&#91;\"Akash\"]   \nputs data&#91;\"Ankit\"]   \nputs data&#91;\"Aman\"]  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/data-types7.png\" alt=\"Ruby Data types 7\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Arrays</h2>\n\n\n\n<p>An array stroes data or list of data. It can contain all types of data. Data in an array are separated by comma in between them and are enclosed by square bracket. For example,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;\"Akash\", \"Ankit\", \"Aman\"]   </code></pre>\n\n\n\n<p>Elements from an array are retrieved by their position. The position of elements in an array starts with 0.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \ndata = &#91;\"Akash\", \"Ankit\", \"Aman\"]   \nputs data&#91;0]   \nputs data&#91;1]   \nputs data&#91;2]#!/usr/bin/ruby   \n  \ndata = &#91;\"Akash\", \"Ankit\", \"Aman\"]   \nputs data&#91;0]   \nputs data&#91;1]   \nputs data&#91;2]</code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/data-types8.png\" alt=\"Ruby Data types 8\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Data types represents a type of data such as text, string, numbers, etc. There are different data types in Ruby: Numbers Strings Symbols Hashes Arrays Booleans Numbers Integers and floating point numbers come in the category of numbers. Integers are held internally in binary form. Integer numbers are numbers without a fraction. According to their [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3013"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3013"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3013/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3013"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3013"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3013"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3015,"date":"2020-08-27T05:48:25","date_gmt":"2020-08-27T05:48:25","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3015"},"modified":"2020-08-27T05:48:25","modified_gmt":"2020-08-27T05:48:25","slug":"ruby-if-else-statement","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-if-else-statement/","title":{"rendered":"Ruby If-else Statement"},"content":{"rendered":"\n<p>The Ruby if else statement is used to test condition. There are various types of if statement in Ruby.</p>\n\n\n\n<ul><li>if statement</li><li>if-else statement</li><li>if-else-if (elsif) statement</li><li>ternay (shortened if statement) statement</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby if statement</h2>\n\n\n\n<p>Ruby if statement tests the condition. The if block statement is executed if condition is true.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if (condition)  \n//code to be executed  \nend  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-if-else1.png\" alt=\"Ruby if else 1\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = gets.chomp.to_i   \nif a >= 18   \n  puts \"You are eligible to vote.\"   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-if-else2.png\" alt=\"Ruby if else 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby if else</h2>\n\n\n\n<p>Ruby if else statement tests the condition. The if block statement is executed if condition is true otherwise else block statement is executed.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition)  \n    //code if condition is true  \nelse  \n//code if condition is false  \nend  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-if-else3.png\" alt=\"Ruby if else 3\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = gets.chomp.to_i   \nif a >= 18   \n  puts \"You are eligible to vote.\"   \nelse   \n  puts \"You are not eligible to vote.\"   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-if-else4.png\" alt=\"Ruby if else 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby if else if (elsif)</h2>\n\n\n\n<p>Ruby if else if statement tests the condition. The if block statement is executed if condition is true otherwise else block statement is executed.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>if(condition1)  \n//code to be executed if condition1is true  \nelsif (condition2)  \n//code to be executed if condition2 is true  \nelse (condition3)  \n//code to be executed if condition3 is true  \nend  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-if-else5.png\" alt=\"Ruby if else 5\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = gets.chomp.to_i   \nif a &lt;50   \n  puts \"Student is fail\"   \nelsif a >= 50 &amp;&amp; a &lt;= 60   \n  puts \"Student gets D grade\"   \nelsif a >= 70 &amp;&amp; a &lt;= 80   \n  puts \"Student gets B grade\"   \nelsif a >= 80 &amp;&amp; a &lt;= 90   \n  puts \"Student gets A grade\"    \nelsif a >= 90 &amp;&amp; a &lt;= 100   \n  puts \"Student gets A+ grade\"    \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-if-else6.png\" alt=\"Ruby if else 6\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby ternary Statement</h2>\n\n\n\n<p>In Ruby ternary statement, the if statement is shortened. First it evaluats an expression for true or false value then execute one of the statements.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>test-expression&nbsp;?&nbsp;<strong>if</strong>&#8211;<strong>true</strong>-expression&nbsp;:&nbsp;<strong>if</strong>&#8211;<strong>false</strong>-expression&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>var = gets.chomp.to_i;   \na = (var > 3 ? true : false);    \nputs a   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-if-else7.png\" alt=\"Ruby if else 7\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Ruby if else statement is used to test condition. There are various types of if statement in Ruby. if statement if-else statement if-else-if (elsif) statement ternay (shortened if statement) statement Ruby if statement Ruby if statement tests the condition. The if block statement is executed if condition is true. Syntax: Example: Output: Ruby if [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3015"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3015"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3015/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3015"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3015"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3015"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3017,"date":"2020-08-27T05:49:41","date_gmt":"2020-08-27T05:49:41","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3017"},"modified":"2020-08-27T05:49:41","modified_gmt":"2020-08-27T05:49:41","slug":"ruby-case-statement","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-case-statement/","title":{"rendered":"Ruby Case Statement"},"content":{"rendered":"\n<p>In Ruby, we use &#8216;case&#8217; instead of &#8216;switch&#8217; and &#8216;when&#8217; instead of &#8216;case&#8217;. The case statement matches one statement with multiple conditions just like a switch statement in other languages.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>case expression  \n&#91;when expression &#91;, expression ...] &#91;then]  \n   code ]...  \n&#91;else  \n   code ]  \nend  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \nprint \"Enter your day: \"   \nday = gets.chomp   \ncase day   \nwhen \"Tuesday\"   \n  puts 'Wear Red or Orange'   \nwhen \"Wednesday\"   \n  puts 'Wear Green'   \nwhen \"Thursday\"   \n  puts 'Wear Yellow'   \n when \"Friday\"   \n  puts 'Wear White'   \n when \"Saturday\"   \n  puts 'Wear Black'   \nelse   \n  puts \"Wear Any color\"   \nend   </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-switch1.png\" alt=\"Ruby switch 1\"/></figure>\n\n\n\n<p>Look at the above output, conditions are case sensitive. Hence, the output for &#8216;Saturday&#8217; and &#8216;saturday&#8217; are different.</p>\n","protected":false},"excerpt":{"rendered":"<p>In Ruby, we use &#8216;case&#8217; instead of &#8216;switch&#8217; and &#8216;when&#8217; instead of &#8216;case&#8217;. The case statement matches one statement with multiple conditions just like a switch statement in other languages. Syntax: Example: Output: Look at the above output, conditions are case sensitive. Hence, the output for &#8216;Saturday&#8217; and &#8216;saturday&#8217; are different.</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3017"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3017"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3017/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3017"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3017"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3017"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3019,"date":"2020-08-27T05:52:24","date_gmt":"2020-08-27T05:52:24","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3019"},"modified":"2020-08-27T05:52:24","modified_gmt":"2020-08-27T05:52:24","slug":"ruby-for-loop","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-for-loop/","title":{"rendered":"Ruby for Loop"},"content":{"rendered":"\n<p>Ruby for loop iterates over a specific range of numbers. Hence, for loop is used if a program has fixed number of iterations.</p>\n\n\n\n<p>Ruby for loop will execute once for each element in expression.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for variable &#91;, variable ...] in expression &#91;do]  \n   code  \nend  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby for loop using range</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>a = gets.chomp.to_i   \nfor i in 1..a do   \n  puts i   \nend   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-for1.png\" alt=\"Ruby for 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby for loop using array</h2>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>x = &#91;\"Blue\", \"Red\", \"Green\", \"Yellow\", \"White\"]   \nfor i in x do   \n  puts i   \nend   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-for2.png\" alt=\"Ruby for 2\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby for loop iterates over a specific range of numbers. Hence, for loop is used if a program has fixed number of iterations. Ruby for loop will execute once for each element in expression. Syntax: Ruby for loop using range Example: Output: Ruby for loop using array Example: Output:</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3019"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3019"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3019/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3019"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3019"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3019"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3021,"date":"2020-08-27T05:53:58","date_gmt":"2020-08-27T05:53:58","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3021"},"modified":"2020-08-27T05:53:58","modified_gmt":"2020-08-27T05:53:58","slug":"ruby-while-loop","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-while-loop/","title":{"rendered":"Ruby while Loop"},"content":{"rendered":"\n<p>The Ruby while loop is used to iterate a program several times. If the number of iterations is not fixed for a program, while loop is used.</p>\n\n\n\n<p>Ruby while loop executes a condition while a condition is true. Once the condition becomes false, while loop stops its execution.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>while conditional &#91;do]  \n   code  \nend  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-while-loop1.png\" alt=\"Ruby while loop 1\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \nx = gets.chomp.to_i   \nwhile x >= 0    \n  puts x   \n  x -=1   \nend   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-while-loop2.png\" alt=\"Ruby while loop 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby do while Loop</h2>\n\n\n\n<p>The Ruby do while loop iterates a part of program several times. It is quite similar to a while loop with the only difference that loop will execute at least once. It is due to the fact that in do while loop, condition is written at the end of the code.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>loop do   \n  #code to be executed  \n  break if booleanExpression  \nend   </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>loop do   \n  puts \"Checking for answer\"   \n  answer = gets.chomp   \n  if answer != '5'   \n    break   \n  end   \nend  </code></pre>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-while-loop3.png\" alt=\"Ruby while loop 3\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Ruby while loop is used to iterate a program several times. If the number of iterations is not fixed for a program, while loop is used. Ruby while loop executes a condition while a condition is true. Once the condition becomes false, while loop stops its execution. Syntax: Example: Output: Ruby do while Loop [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3021"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3021"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3021/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3021"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3021"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3021"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3023,"date":"2020-08-27T05:54:57","date_gmt":"2020-08-27T05:54:57","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3023"},"modified":"2020-08-27T05:54:57","modified_gmt":"2020-08-27T05:54:57","slug":"ruby-until-loop","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-until-loop/","title":{"rendered":"Ruby Until Loop"},"content":{"rendered":"\n<p>The Ruby until loop runs until the given condition evaluates to true. It exits the loop when condition becomes true. It is just opposite of the while loop which runs until the given condition evaluates to false.</p>\n\n\n\n<p>The until loop allows you to write code which is more readable and logical.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>until conditional  \n   code  \nend  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>i = 1   \nuntil i == 10   \n    print i*10, \"\\n\"   \n    i += 1   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-until-loop1.png\" alt=\"Ruby until loop 1\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Ruby until loop runs until the given condition evaluates to true. It exits the loop when condition becomes true. It is just opposite of the while loop which runs until the given condition evaluates to false. The until loop allows you to write code which is more readable and logical. Syntax: Example: Output:</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3023"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3023"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3023/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3023"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3023"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3023"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3025,"date":"2020-08-27T05:55:59","date_gmt":"2020-08-27T05:55:59","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3025"},"modified":"2020-08-27T05:55:59","modified_gmt":"2020-08-27T05:55:59","slug":"ruby-break-statement","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-break-statement/","title":{"rendered":"Ruby Break Statement"},"content":{"rendered":"\n<p>The Ruby break statement is used to terminate a loop. It is mostly used in while loop where value is printed till the condition is true, then break statement terminates the loop.</p>\n\n\n\n<p>The break statement is called from inside the loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li><strong>break</strong>&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>i = 1   \nwhile true   \n    if i*5 >= 25   \n        break   \n    end   \n    puts i*5   \n    i += 1   \nend   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/break1.png\" alt=\"Ruby Break 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Next Statement</h2>\n\n\n\n<p>The Ruby next statement is used to skip loop&#8217;s next iteration. Once the next statement is executed, no further iteration will be performed.</p>\n\n\n\n<p>The next statement in Ruby is equivalent to continue statement in other languages.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li><strong>next</strong>&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>for i in 5...11   \n   if i == 7 then   \n      next   \n   end   \n   puts i   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/break2.png\" alt=\"Ruby Break 2\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>The Ruby break statement is used to terminate a loop. It is mostly used in while loop where value is printed till the condition is true, then break statement terminates the loop. The break statement is called from inside the loop. Syntax: break&nbsp;&nbsp; Example: Output: Ruby Next Statement The Ruby next statement is used to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3025"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3025"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3025/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3025"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3025"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3025"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3027,"date":"2020-08-27T05:57:07","date_gmt":"2020-08-27T05:57:07","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3027"},"modified":"2020-08-27T05:57:07","modified_gmt":"2020-08-27T05:57:07","slug":"ruby-redo-statement","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-redo-statement/","title":{"rendered":"Ruby redo Statement"},"content":{"rendered":"\n<p>Ruby redo statement is used to repeat the current iteration of the loop. The redo statement is executed without evaluating the loop&#8217;s condition.</p>\n\n\n\n<p>The redo statement is used inside a loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li><strong>redo</strong>&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>i = 0   \nwhile(i &lt; 5)   # Prints \"012345\" instead of \"01234\"   \n  puts i   \n  i += 1   \n   redo if i == 5   \nend   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-redo-statement1.png\" alt=\"Ruby redo statement 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby retry Statement</h2>\n\n\n\n<p>Ruby retry statement is used to repeat the whole loop iteration from the start.</p>\n\n\n\n<p>The retry statement is used inside a loop.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>retry  </code></pre>\n","protected":false},"excerpt":{"rendered":"<p>Ruby redo statement is used to repeat the current iteration of the loop. The redo statement is executed without evaluating the loop&#8217;s condition. The redo statement is used inside a loop. Syntax: redo&nbsp;&nbsp; Example: Output: Ruby retry Statement Ruby retry statement is used to repeat the whole loop iteration from the start. The retry statement [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3027"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3027"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3027/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3027"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3027"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3027"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3029,"date":"2020-08-27T05:58:29","date_gmt":"2020-08-27T05:58:29","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3029"},"modified":"2020-08-27T05:58:29","modified_gmt":"2020-08-27T05:58:29","slug":"ruby-comments","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-comments/","title":{"rendered":"Ruby Comments"},"content":{"rendered":"\n<p>Ruby comments are non executable lines in a program. These lines are ignored by the interpreter hence they don&#8217;t execute while execution of a program. They are written by a programmer to explain their code so that others who look at the code will understand it in a better way.</p>\n\n\n\n<p>Types of Ruby comments:</p>\n\n\n\n<ul><li>Single line comment</li><li>multi line comment</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Single Line Comment</h2>\n\n\n\n<p>The Ruby single line comment is used to comment only one line at a time. They are defined with&nbsp;<strong>#</strong>&nbsp;character.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>#This&nbsp;is&nbsp;single&nbsp;line&nbsp;comment.&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>i = 10  #Here i is a variable.   \nputs i  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/comments1.png\" alt=\"Ruby Comments 1\"/></figure>\n\n\n\n<p>The Ruby multi line comment is used to comment multiple lines at a time. They are defined with&nbsp;<strong>=begin</strong>&nbsp;at the starting and&nbsp;<strong>=end</strong>&nbsp;at the end of the line.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>=begin  \n    This  \n    is  \n    multi line  \n    comment  \n=end  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>=begin   \nwe are declaring   \na variable i   \nin this program   \n=end   \ni = 10   \nputs i  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/comments2.png\" alt=\"Ruby Comments 2\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby comments are non executable lines in a program. These lines are ignored by the interpreter hence they don&#8217;t execute while execution of a program. They are written by a programmer to explain their code so that others who look at the code will understand it in a better way. Types of Ruby comments: Single [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3029"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3029"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3029/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3029"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3029"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3029"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3031,"date":"2020-08-27T06:00:00","date_gmt":"2020-08-27T06:00:00","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3031"},"modified":"2020-08-27T06:00:00","modified_gmt":"2020-08-27T06:00:00","slug":"ruby-class-and-object","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-class-and-object/","title":{"rendered":"Ruby Class and Object"},"content":{"rendered":"\n<p>Here, we will learn about Ruby objects and classes. In object-oriented programming language, we design programs using objects and classes.</p>\n\n\n\n<p>Object is a physical as well as logical entity whereas class is a logical entity only.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Object</h2>\n\n\n\n<p>Object is the default root of all Ruby objects. Ruby objects inherit from&nbsp;<strong>BasicObject</strong>&nbsp;(it is the parent class of all classes in Ruby) which allows creating alternate object hierarchies.</p>\n\n\n\n<p>Object mixes in the Kernel module which makes the built-in Kernel functions globally accessible.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating object</h2>\n\n\n\n<p>Objects in Ruby are created by calling&nbsp;<strong>new</strong>&nbsp;method of the class. It is a unique type of method and predefined in the Ruby library.</p>\n\n\n\n<p>Ruby objects are instances of the class.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>objectName = className.new  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>We have a class named <strong>Java</strong>. Now, let&#8217;s create an object <strong>java</strong> and use it with following command,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java = Java.new(\"John\")  </code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-class-and-object1.png\" alt=\"Ruby Class and object 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Class</h2>\n\n\n\n<p>Each Ruby class is an instance of class&nbsp;<strong>Class</strong>. Classes in Ruby are first-class objects.</p>\n\n\n\n<p>Ruby class always starts with the keyword&nbsp;<strong>class</strong>&nbsp;followed by the class name. Conventionally, for class name we use CamelCase. The class name should always start with a capital letter. Defining class is finished with&nbsp;<strong>end</strong>&nbsp;keyword.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ClassName  \n    codes...  \nend  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-class-and-object2.png\" alt=\"Ruby Class and object 2\"/></figure>\n\n\n\n<p>In the above example, we have created a class&nbsp;<strong>Home</strong>&nbsp;using class keyword. The&nbsp;<strong>@love</strong>&nbsp;is an instance variable, and is available to all methods of class Home.</p>\n","protected":false},"excerpt":{"rendered":"<p>Here, we will learn about Ruby objects and classes. In object-oriented programming language, we design programs using objects and classes. Object is a physical as well as logical entity whereas class is a logical entity only. Ruby Object Object is the default root of all Ruby objects. Ruby objects inherit from&nbsp;BasicObject&nbsp;(it is the parent class [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3031"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3031"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3031/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3031"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3031"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3031"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3033,"date":"2020-08-27T06:01:05","date_gmt":"2020-08-27T06:01:05","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3033"},"modified":"2020-08-27T06:01:05","modified_gmt":"2020-08-27T06:01:05","slug":"ruby-methods","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-methods/","title":{"rendered":"Ruby Methods"},"content":{"rendered":"\n<p>Ruby methods prevent us from writing the same code in a program again and again. It is a set of expression that returns a value.</p>\n\n\n\n<p>Ruby methods are similar to the functions in other lnguages. They unite one or more repeatable statements into one single bundle.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Defining Method</h2>\n\n\n\n<p>To use a method, we need to first define it. Ruby method is defined with the&nbsp;<strong>def</strong>&nbsp;keyword followed by method name. At the end we need to use&nbsp;<strong>end</strong>&nbsp;keyword to denote that method has been defined.</p>\n\n\n\n<p>Methods name should always start with a lowercase letter. Otherwise, it may be misunderstood as a constant.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def methodName  \n    code...  \nend  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-method1.png\" alt=\"Ruby method 1\"/></figure>\n\n\n\n<p>Here, we have defined a method&nbsp;<strong>welcome</strong>&nbsp;using def keyword. The last line end keyword says that we are done with the method defining.</p>\n\n\n\n<p>Now let&#8217;s call this method. A method is called by just writing its name.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-method2.png\" alt=\"Ruby method 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Defining Method with Parameter</h2>\n\n\n\n<p>To call a particular person, we can define a method with parameter.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-method3.png\" alt=\"Ruby method 3\"/></figure>\n\n\n\n<p>Here, #{name} is a way in Ruby to insert something into string. The bit inside the braces is turned into a string.</p>\n\n\n\n<p>Let&#8217;s call the method by passing a parameter&nbsp;<strong>Edward.</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-method4.png\" alt=\"Ruby method 4\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby methods prevent us from writing the same code in a program again and again. It is a set of expression that returns a value. Ruby methods are similar to the functions in other lnguages. They unite one or more repeatable statements into one single bundle. Defining Method To use a method, we need to [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3033"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3033"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3033/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3033"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3033"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3033"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3035,"date":"2020-08-27T06:03:57","date_gmt":"2020-08-27T06:03:57","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3035"},"modified":"2020-08-27T06:03:57","modified_gmt":"2020-08-27T06:03:57","slug":"ruby-blocks","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-blocks/","title":{"rendered":"Ruby Blocks"},"content":{"rendered":"\n<p>Ruby code blocks are called closures in other programming languages. It consist of a group of codes which is always enclosed with braces or written between&nbsp;<strong>do..end.</strong>&nbsp;The braces syntax always have the higher precedence over the do..end syntax. Braces have high precedence and do has low precedence.</p>\n\n\n\n<p>A block is written in two ways,</p>\n\n\n\n<ul><li>Multi-line between do and end (multi-line blocks are niot inline)</li><li>Inline between braces {}</li></ul>\n\n\n\n<p>Both are same and have the same functionality.</p>\n\n\n\n<p>To invoke a block, you need to have a function with the same name as the block.</p>\n\n\n\n<p>A block is always invoked with a function. Blocks can have their own arguments.</p>\n\n\n\n<p><strong>syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>block_name{  \n   statement1  \n   statement2  \n   ..........  \n} </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>The below example shows the <strong>multi-line</strong> block.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10, 20, 30].each do |n|   \n puts n   \nend   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-blocks1.png\" alt=\"Ruby Blocks 1\"/></figure>\n\n\n\n<p>Below example shows the <strong>inline</strong> block.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&#91;10, 20, 30].each {|n| puts n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-blocks2.png\" alt=\"Ruby Blocks 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>The yield statement</h2>\n\n\n\n<p>The yield statement is used to call a block within a method with a value.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \ndef met   \n   puts \"This is method\"   \n   yield   \n   puts \"You will be back to method\"   \n   yield   \nend   \nmet {puts \"This is block\"}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-blocks3.png\" alt=\"Ruby Blocks 3\"/></figure>\n\n\n\n<p>While the execution of&nbsp;<strong>met</strong>&nbsp;method, when we reach at yield line, the code inside the block is executed. When block execution finishes, code for met method continues.</p>\n\n\n\n<p><strong>Passing parameters with yield statement</strong></p>\n\n\n\n<p>One or more than one parameter can be passed with the yield statement.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \ndef met   \n   yield 1   \n   puts \"This is method\"   \n   yield 2   \nend   \nmet {|i| puts \"This is block #{i}\"} </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-blocks4.png\" alt=\"Ruby Blocks 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Block Variables</h2>\n\n\n\n<p>We can use same variable outside and inside a block parameter. Let&#8217;s see the following example.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \n    x = \"Outer variable\"    \n    3.times do |x|    \n      puts \"Inside the block: #{x}\"    \n    end    \n    puts \"Outside the block: #{x}\"  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-blocks5.png\" alt=\"Ruby Blocks 5\"/></figure>\n\n\n\n<p>In this example, we are using same variable inside the block as the block parameter x and outside the block as a variable x.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>BEGIN and END block</h2>\n\n\n\n<p>Ruby BEGIN and END block is used to declare that file is being loaded and file has been loaded respectively.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nBEGIN {   \n  puts \"code block is being loaded\"   \n}   \n  \nEND {   \n  puts \"code block has been loaded\"   \n}   \nputs \"This is the code block\"  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-blocks6.png\" alt=\"Ruby Blocks 6\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ampersand parameter (&amp;block)</h2>\n\n\n\n<p>The &amp;block is a way to pass a reference (instead of a local variable) to the block to a method.</p>\n\n\n\n<p>Here, block word after the&nbsp;<strong>&amp;</strong>&nbsp;is just a name for the reference, any other name can be used instead of this.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def met(&amp;block)   \n  puts \"This is method\"   \n  block.call   \nend   \nmet { puts \"This is &amp;block example\" }   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-blocks7.png\" alt=\"Ruby Blocks 7\"/></figure>\n\n\n\n<p>Here, the block variable inside method&nbsp;<strong>met</strong>&nbsp;is a reference to the block. It is executed with the call mehtod. The call method is same as yield method.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Initializing objects with default values</h2>\n\n\n\n<p>Ruby has an initializer called <strong>yield(self)</strong>. Here, <strong>self</strong> is the object being initialized.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Novel   \n  attr_accessor :pages, :category   \n  \n  def initialize   \n    yield(self)   \n  end   \nend   \n  \nnovel = Novel.new do |n|   \n  n.pages = 564   \n  n.category = \"thriller\"   \nend   \n  \nputs \"I am reading a #{novel.category} novel which has #{novel.pages} pages.\"  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-blocks8.png\" alt=\"Ruby Blocks 8\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby code blocks are called closures in other programming languages. It consist of a group of codes which is always enclosed with braces or written between&nbsp;do..end.&nbsp;The braces syntax always have the higher precedence over the do..end syntax. Braces have high precedence and do has low precedence. A block is written in two ways, Multi-line between [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3035"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3035"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3035/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3035"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3035"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3035"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3037,"date":"2020-08-27T06:06:14","date_gmt":"2020-08-27T06:06:14","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3037"},"modified":"2020-08-27T06:06:14","modified_gmt":"2020-08-27T06:06:14","slug":"ruby-modules","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-modules/","title":{"rendered":"Ruby Modules"},"content":{"rendered":"\n<p>Ruby module is a collection of methods and constants. A module method may be instance method or module method.</p>\n\n\n\n<p>Instance methods are methods in a class when module is included.</p>\n\n\n\n<p>Module methods may be called without creating an encapsulating object while instance methods may not.</p>\n\n\n\n<p>They are similar to classes as they hold a collection of methods, class definitions, constants and other modules. They are defined like classes. Objects or subclasses can not be created using modules. There is no module hierarchy of inheritance.</p>\n\n\n\n<p>Modules basically serve two purposes:</p>\n\n\n\n<ul><li>They act as namespace. They prevent the name clashes.</li><li>They allow the mixin facility to share functionality between classes.</li></ul>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>module ModuleName  \n   statement1  \n   statement2  \n   ...........  \nend  </code></pre>\n\n\n\n<p>Module name should start with a capital letter.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Module Namespaces</h2>\n\n\n\n<p>While writing larger files, a lot of reusable codes are generated. These codes are organized into classes, which can be inserted into a file.</p>\n\n\n\n<p>For example, if two persons have the same method name in different files. And both the files need to be included in a third file. Then it may create a problem as the method name in both included files is same.</p>\n\n\n\n<p>Here, module mechanism comes into play. Modules define a namespace in which you can define your methods and constants without over riding by other methods and constants.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Suppose, in file1.rb, we have defined number of different type of library books like fiction, horror, etc.</p>\n\n\n\n<p>In file2.rb, we have defined the number of novels read and left to read including fiction novels.</p>\n\n\n\n<p>In file3.rb, we need to load both the files file1 and file2. Here we will use module mechanism.</p>\n\n\n\n<p><strong>file1.rb</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \n# Module defined in file1.rb file   \n  \nmodule Library   \n   num_of_books = 300   \n   def Library.fiction(120)   \n   # ..   \n   end   \n   def Library.horror(180)   \n   # ..   \n   end   \nend  </code></pre>\n\n\n\n<p><strong>file2.rb</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \n# Module defined in file2.rb file   \n  \nmodule Novel   \n   total = 123   \n   read = 25   \n   def Novel.fiction(left)   \n   # ...   \n   end   \nend</code></pre>\n\n\n\n<p><strong>file3.rb</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>require \"Library\"   \nrequire \"Novel\"   \n  \nx = Library.fiction(Library::num_of_books)   \ny = Novel.fiction(Novel::total)  </code></pre>\n\n\n\n<p>A module method is called by preceding its name with the module&#8217;s name and a period, and you reference a constant using the module name and two colons.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Module Mixins</h2>\n\n\n\n<p>Ruby doesn&#8217;t support multiple inheritance. Modules eliminate the need of multiple inheritance using mixin in Ruby.</p>\n\n\n\n<p>A module doesn&#8217;t have instances because it is not a class. However, a module can be included within a class.</p>\n\n\n\n<p>When you include a module within a class, the class will have access to the methods of the module.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>module Name   \n   def bella   \n   end   \n   def ana   \n   end   \nend   \nmodule Job   \n   def editor   \n   end   \n   def writer   \n   end   \nend   \n  \nclass Combo   \ninclude Name   \ninclude Job   \n   def f   \n   end   \nend   \n  \nfinal=Combo.new   \nfinal.bella   \nfinal.ana   \nfinal.editor   \nfinal.writer   \nfinal.f  </code></pre>\n\n\n\n<p>Here, module Name consists of methods bella and ana. Module Job consists of methods editor and writer. The class Combo includes both the modules due to which class Combo can access all the four methods. Hence, class Combo works as&nbsp;<strong>mixin.</strong></p>\n\n\n\n<p>The methods of a module that are mixed into a class can either be an instance method or a class method. It depends upon how you add mixin to the class.</p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby module is a collection of methods and constants. A module method may be instance method or module method. Instance methods are methods in a class when module is included. Module methods may be called without creating an encapsulating object while instance methods may not. They are similar to classes as they hold a collection [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3037"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3037"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3037/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3037"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3037"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3037"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3039,"date":"2020-08-27T06:08:39","date_gmt":"2020-08-27T06:08:39","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3039"},"modified":"2020-08-27T06:08:39","modified_gmt":"2020-08-27T06:08:39","slug":"ruby-strings","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-strings/","title":{"rendered":"Ruby Strings"},"content":{"rendered":"\n<p>Ruby string object holds and manipulates an arbitary sequence of bytes, typically representing characters. They are created using&nbsp;<strong>String::new</strong>&nbsp;or as literals.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Quotes</h2>\n\n\n\n<p>Ruby string literals are enclosed within single and double quotes.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nputs 'Hello everyone'   \nputs \"Hello everyone\"  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-string1.png\" alt=\"Ruby string 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Accessing string elements</h2>\n\n\n\n<p>You can access Ruby string elements in different parts with the help of square brackets []. Within square brackets write the index or string.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nmsg = \"This tutorial is from JavaTpoint.\"   \n  \nputs msg&#91;\"JavaTpoint\"]   \nputs msg&#91;\"tutorial\"]   \n  \nputs msg&#91;0]   \n  \nputs msg&#91;0, 2]   \nputs msg&#91;0..19]   \nputs msg&#91;0, msg.length]   \nputs msg&#91;-3]  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-string2.png\" alt=\"Ruby string 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Multiline string</h2>\n\n\n\n<p>Writing multiline string is very simple in Ruby language. We will show three ways to print multi line string.</p>\n\n\n\n<ul><li>String can be written within double quotes.</li><li>The % character is used and string is enclosed within / character.</li><li>In heredoc syntax, we use &lt;&lt; and string is enclosed within word STRING.</li></ul>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>puts \"   \nA   \nAB   \nABC   \nABCD\"   \n  \nputs %/   \nA   \nAB   \nABC   \nABCD/   \n  \nputs &lt;&lt;STRING   \nA   \nAB   \nABC   \nABCD   \nSTRING </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-string3.png\" alt=\"Ruby string 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Variable Interpolation</h2>\n\n\n\n<p>Ruby variable interpolation is replacing variables with values inside string literals. The variable name is put between #{ and } characters inside string literal.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \ncountry = \"India\"   \ncapital = \"New Delhi\"   \n  \nputs \"#{capital} is the capital of #{country}.\"  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-string4.png\" alt=\"Ruby string 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Concatenating Strings</h2>\n\n\n\n<p>Ruby concatenating string implies creating one string from multiple strings. You can join more than one string to form a single string by concatenating them.</p>\n\n\n\n<p>There are four ways to concatenate Ruby strings into single string:</p>\n\n\n\n<ul><li>Using plus sign in between strings.</li><li>Using a single space in between strings.</li><li>Using &lt;&lt; sign in between strings.</li><li>Using concat method in between strings.</li></ul>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nstring = \"This is Ruby Tutorial\" + \" from JavaTpoint.\" + \" Wish you all good luck.\"   \nputs string   \n  \nstring = \"This is Ruby Tutorial\" \" from JavaTpoint.\" \" Wish you all good luck.\"   \nputs string   \n  \nstring = \"This is Ruby Tutorial\" &lt;&lt; \" from JavaTpoint.\" &lt;&lt; \" Wish you all good luck.\"   \nputs string   \n  \nstring = \"This is Ruby Tutorial\".concat(\" from JavaTpoint.\").concat(\" Wish you all good luck.\")   \nputs string  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-string5.png\" alt=\"Ruby string 5\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Freezing Strings</h2>\n\n\n\n<p>In most programming languages strings are immutable. It means that an existing string can&#8217;t be modified, only a new string can be created out of them.</p>\n\n\n\n<p>In Ruby, by default strings are not immutable. To make them immutable, freeze method can be used.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nstr = \"Original string\"   \nstr &lt;&lt; \" is modified \"   \nstr &lt;&lt; \"is again modified\"   \n  \nputs str   \n  \nstr.freeze   \n  \n#str &lt;&lt; \"And here modification will be failed after using freeze method\"  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-string6.png\" alt=\"Ruby string 6\"/></figure>\n\n\n\n<p>In the above output, we have made the string immutable by using freeze method. Last line is commented as no string can&#8217;t be modified any further.</p>\n\n\n\n<p>By uncommenting the last line, we&#8217;ll get an error as shown in the below output.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-string7.png\" alt=\"Ruby string 7\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Comparing Strings</h2>\n\n\n\n<p>Ruby strings can be compared with three operators:</p>\n\n\n\n<ul><li>With == operator : Returns true or false</li><li>With eql? Operator : Returns true or false</li><li>With casecmp method : Returns 0 if matched or 1 if not matched</li></ul>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nputs \"abc\" == \"abc\"   \nputs \"as ab\" == \"ab ab\"   \nputs \"23\" == \"32\"   \n  \nputs \"ttt\".eql? \"ttt\"   \nputs \"12\".eql? \"12\"   \n  \nputs \"Java\".casecmp \"Java\"   \nputs \"Java\".casecmp \"java\"   \nputs \"Java\".casecmp \"ja\"  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-string8.png\" alt=\"Ruby string 8\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby string object holds and manipulates an arbitary sequence of bytes, typically representing characters. They are created using&nbsp;String::new&nbsp;or as literals. Quotes Ruby string literals are enclosed within single and double quotes. Example: Output: Accessing string elements You can access Ruby string elements in different parts with the help of square brackets []. Within square brackets [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3039"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3039"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3039/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3039"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3039"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3039"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3041,"date":"2020-08-27T06:15:06","date_gmt":"2020-08-27T06:15:06","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3041"},"modified":"2020-08-27T06:15:06","modified_gmt":"2020-08-27T06:15:06","slug":"ruby-arrays","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-arrays/","title":{"rendered":"Ruby Arrays"},"content":{"rendered":"\n<p>Ruby arrays are ordered collections of objects. They can hold objects like integer, number, hash, string, symbol or any other array.</p>\n\n\n\n<p>Its indexing starts with 0. The negative index starts with -1 from the end of the array. For example, -1 indicates last element of the array and 0 indicates first element of the array.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating Ruby Arrays</h2>\n\n\n\n<p>A Ruby array is created in many ways.</p>\n\n\n\n<ul><li>Using literal constructor []</li><li>Using new class method</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Using literal construct []</h2>\n\n\n\n<p>A Ruby array is constructed using literal constructor []. A single array can contain different type of objects.</p>\n\n\n\n<p>For example, following array contains an integer, floating number and a string.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>exm = &#91;4, 4.0, \"Jose\", ]   \nputs exm   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays1.png\" alt=\"Ruby Arrays 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Using new class method</h2>\n\n\n\n<p>A Ruby array is constructed by calling ::new method with zero, one or more than one arguments.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>arrayName = Array.new  </code></pre>\n\n\n\n<p>To set the size of an array,</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>arrayName = Array.new(10)  </code></pre>\n\n\n\n<p>Here, we have mentioned that array size is of 10 elements.</p>\n\n\n\n<p>To know the size of an array, either size or length method is used.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nexm = Array.new(10)   \nputs exm.size    \nputs exm.length   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays2.png\" alt=\"Ruby Arrays 2\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \nexm = Array(\"a\"...\"z\")   \nputs \"#{exm}\"  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays3.png\" alt=\"Ruby Arrays 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Accessing Array Elements</h2>\n\n\n\n<p>Ruby array elements can be accessed using <strong>#[]</strong> method. You can pass one or more than one arguments or even a range of arguments.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#&#91;] method  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]   \nputs days&#91;0]      \nputs days&#91;10]   \nputs days&#91;-2]     \nputs days&#91;2, 3]   \nputs days&#91;1..7]   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays4.png\" alt=\"Ruby Arrays 4\"/></figure>\n\n\n\n<p><strong>at method</strong></p>\n\n\n\n<p>To access a particular element, at method can also be used.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]   \nputs days.at(0)   \nputs days.at(-1)   \nputs days.at(5)   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays5.png\" alt=\"Ruby Arrays 5\"/></figure>\n\n\n\n<p><strong>slice method</strong></p>\n\n\n\n<p>The slice method works similar to #[] method.</p>\n\n\n\n<p><strong>fetch method</strong></p>\n\n\n\n<p>The fetch method is used to provide a default value error for out of array range indices.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]   \nputs days.fetch(10)  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays6.png\" alt=\"Ruby Arrays 6\"/></figure>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]   \nputs days.fetch(10, \"oops\")  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays7.png\" alt=\"Ruby Arrays 7\"/></figure>\n\n\n\n<p><strong>first and last method</strong></p>\n\n\n\n<p>The first and last method will return first and last element of an array respectively.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]   \nputs days.first   \nputs days.last   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays8.png\" alt=\"Ruby Arrays 8\"/></figure>\n\n\n\n<p><strong>take method</strong></p>\n\n\n\n<p>The take method returns the first n elements of an array.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]   \nputs days.take(1)   \nputs days.take(2)   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays9.png\" alt=\"Ruby Arrays 9\"/></figure>\n\n\n\n<p><strong>drop method</strong></p>\n\n\n\n<p>The drop method is the opposite of take method. It returns elements after n elements have been dropped.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]   \nputs days.drop(5)   \nputs days.drop(6)   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays10.png\" alt=\"Ruby Arrays 10\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Adding Items to Array</h2>\n\n\n\n<p>Ruby array elements can be added in different ways.</p>\n\n\n\n<ul><li>push or &lt;&lt;</li><li>unshift</li><li>insert</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>push or &lt;&lt;</h2>\n\n\n\n<p>Using push or &lt;&lt;, items can be added at the end of an array.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"]   \nputs days.push(\"Today\")   \nputs days &lt;&lt; (\"Tomorrow\")   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays11.png\" alt=\"Ruby Arrays 11\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>unshift</h2>\n\n\n\n<p>Using unshift, a new element can be added at the beginning of an array.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Fri\", \"Sat\", \"Sun\"]   \nputs days.unshift(\"Today\")   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays12.png\" alt=\"Ruby Arrays 12\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>insert</h2>\n\n\n\n<p>Using insert, a new element can be added at any position in an array. Here, first we need to mention the index number at which we want to position the element.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Fri\", \"Sat\", \"Sun\"]   \nputs days.insert(2, \"Thursday\")   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays13.png\" alt=\"Ruby Arrays 13\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Removing Items from Array</h2>\n\n\n\n<p>Ruby array elements can be removed in different ways.</p>\n\n\n\n<ul><li>pop</li><li>shift</li><li>delete</li><li>uniq</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>pop</h2>\n\n\n\n<p>Using pop, items can be removed from the end of an array. It returns the removed item.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Fri\", \"Sat\", \"Sun\"]   \nputs days.pop   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays14.png\" alt=\"Ruby Arrays 14\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>shift</h2>\n\n\n\n<p>Using shift, items can be removed from the start of an array. It returns the removed item.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Fri\", \"Sat\", \"Sun\"]   \nputs days.shift   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays15.png\" alt=\"Ruby Arrays 15\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>delete</h2>\n\n\n\n<p>Using delete, items can be removed from anywhere in an array. It returns the removed item.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Fri\", \"Sat\", \"Sun\"]   \nputs days.delete(\"Sat\")   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays16.png\" alt=\"Ruby Arrays 16\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>uniq</h2>\n\n\n\n<p>Using uniq, duplicate elements can be removed from an array. It returns the remaining array.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>days = &#91;\"Fri\", \"Sat\", \"Sun\", \"Sat\"]   \nputs days.uniq   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-arrays17.png\" alt=\"Ruby Arrays 17\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby arrays are ordered collections of objects. They can hold objects like integer, number, hash, string, symbol or any other array. Its indexing starts with 0. The negative index starts with -1 from the end of the array. For example, -1 indicates last element of the array and 0 indicates first element of the array. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3041"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3041"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3041/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3041"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3041"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3041"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3043,"date":"2020-08-27T06:17:47","date_gmt":"2020-08-27T06:17:47","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3043"},"modified":"2020-08-27T06:17:47","modified_gmt":"2020-08-27T06:17:47","slug":"ruby-hashes","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-hashes/","title":{"rendered":"Ruby Hashes"},"content":{"rendered":"\n<p>A Ruby hash is a collection of unique keys and their values. They are similar to arrays but array use integer as an index and hash use any object type. They are also called associative arrays, dictionaries or maps.</p>\n\n\n\n<p>If a hash is accessed with a key that does not exist, the method will return nil.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>name = {\"key1\" => \"value1\", \"key2\" => \"value2\", \"key3\" => \"value3\"...}  \n                    OR  \nname = {key1:  'value1', key2:  'value2', key3:  'value3'...}  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating Ruby Hash</h2>\n\n\n\n<p>Ruby hash is created by writing key-value pair within {} curly braces.</p>\n\n\n\n<p>To fetch a hash value, write the required key within [] square bracket.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>color = {   \n    \"Rose\" => \"red\",   \n    \"Lily\" => \"purple\",   \n    \"Marigold\" => \"yellow\",   \n    \"Jasmine\" => \"white\"   \n  }   \n  puts color&#91;'Rose']   \n  puts color&#91;'Lily']   \n  puts color&#91;'Marigold']   \n  puts color&#91;'Jasmine']  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-hashes1.png\" alt=\"Ruby hashes 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Modifying Ruby Hash</h2>\n\n\n\n<p>A Ruby hash can be modified by adding or removing a key value pair in an already existing hash.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>color = {   \n    \"Rose\" => \"red\",   \n    \"Lily\" => \"purple\",   \n    \"Marigold\" => \"yellow\",   \n    \"Jasmine\" => \"white\"   \n  }   \n  color&#91;'Tulip'] = \"pink\"   \n  color.each do |key, value|   \n  puts \"#{key} color is #{value}\"   \n end  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-hashes2.png\" alt=\"Ruby hashes 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Hash Methods</h2>\n\n\n\n<p>A Ruby hash has many methods. Some are public class methods and some public instance methods.</p>\n\n\n\n<h3>Public Class Methods</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>Hash[object]</td><td>Create a new hash with given objects.</td></tr><tr><td>new(obj)</td><td>Return a new empty hash.</td></tr><tr><td>try_convert(obj)</td><td>Try to convert obj into hash.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h3>Public Instance Methods</h3>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>hsh==other_hash</td><td>Two hashes are equal if they contain same key and value pair.</td></tr><tr><td>hsh[key]</td><td>Retrieve value from the respective key.</td></tr><tr><td>hsh[key] = value</td><td>Associates new value to the given key.</td></tr><tr><td>assoc(obj)</td><td>Compare obj in the hash.</td></tr><tr><td>clear</td><td>Remove all key value pair from hash.</td></tr><tr><td>compare_by_identity</td><td>Compare hash keys by their identity.</td></tr><tr><td>compare_by_identity?</td><td>Return true if hash compare its keys by their identity.</td></tr><tr><td>default(key=nil)</td><td>Return default value.</td></tr><tr><td>default = obj</td><td>Sets the default value.</td></tr><tr><td>delete(key)</td><td>Delete key value pair.</td></tr><tr><td>each</td><td>Call block once for each key in hash.</td></tr><tr><td>empty?</td><td>Return true if hash contains no key value pair.</td></tr><tr><td>eql&gt;(other)</td><td>Return true if hash and other both have same content</td></tr><tr><td>fetch(key[, default])</td><td>Return value from hash for a given key.</td></tr><tr><td>flatten</td><td>Return a new array that is a one-dimensional flattening of this hash.</td></tr><tr><td>has_key?(key)</td><td>Return true if given key is present in hash.</td></tr><tr><td>has_value?(value)</td><td>Return true if given value is present in hash for a key.</td></tr><tr><td>include?(key)</td><td>Return true if given key is present in hash.</td></tr><tr><td>to_s/ inspect</td><td>Return content of hash as string.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>A Ruby hash is a collection of unique keys and their values. They are similar to arrays but array use integer as an index and hash use any object type. They are also called associative arrays, dictionaries or maps. If a hash is accessed with a key that does not exist, the method will return [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3043"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3043"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3043/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3043"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3043"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3043"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3045,"date":"2020-08-27T06:20:37","date_gmt":"2020-08-27T06:20:37","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3045"},"modified":"2020-08-27T06:20:37","modified_gmt":"2020-08-27T06:20:37","slug":"ruby-date-time","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-date-time/","title":{"rendered":"Ruby Date &#038; Time"},"content":{"rendered":"\n<p>Ruby has Mainly three classes related to date and time in its documentation.</p>\n\n\n\n<ul><li>Date</li><li>DateTime</li><li>Time</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Date</h2>\n\n\n\n<p>Ruby date provides two classes, Date and DateTime.</p>\n\n\n\n<p>To understand the concept of date, first we need to understand some terms.</p>\n\n\n\n<ul><li><strong>Calendar date:</strong>&nbsp;The calendar date is a particular day within a calendar month within a year.</li><li><strong>Ordinal date:</strong>&nbsp;The ordinal date is a particular day of a calendar year identified by its ordinal number.</li><li><strong>Week date:</strong>&nbsp;The week date is a day identified by calendar week and day numbers. The first calendar week of the year is the one which includes first Thursday of that year.</li><li><strong>Julian day number:</strong>&nbsp;The julian day number is in elapsed day since noon on January 1, 4713 BCE.</li><li><strong>Modified julian day number:</strong>&nbsp;The modified julian day number is in elapsed day since midnight on November 17, 1858 CE.</li></ul>\n\n\n\n<p>The Date object is created with ::new, ::parse, ::today, ::jd, ::strptime, etc. All date objects are immutable, hence they can&#8217;t modify themselves.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>require 'date'   \n  \nputs Date.new(2017,4,3)            \nputs Date.jd(2451877)               \nputs Date.ordinal(2017,3)         \nputs Date.commercial(2017,5,6)     \nputs Date.parse('2017-02-03')    \nputs Date.strptime('03-02-2017', '%d-%m-%Y')                           \nputs Time.new(2017,10,8).to_date     </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-date-time1.png\" alt=\"Ruby date time 1\"/></figure>\n\n\n\n<p>The Date object has various methods as shown in the below example.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>require 'date'   \n  \nd = Date.parse('4th Mar 2017')   \n                               \nputs d.year                        \nputs d.mon                         \nputs d.mday                        \nputs  d.wday                        \nputs d += 1                        \nputs d.strftime('%a %d %b %Y')    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-date-time2.png\" alt=\"Ruby date time 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>DateTime</h2>\n\n\n\n<p>Ruby DateTime is a subclass of Date. It easily handles date, hour, minute, second and offset.</p>\n\n\n\n<p>The DateTime object created with DateTime.new, DateTime.ordinal, DateTime.parse, DateTime.jd, DateTime.commercial, DateTime.now, etc.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>require 'date'   \n  \nputs DateTime.new(2017,3,4,5,6,7)   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-date-time3.png\" alt=\"Ruby date time 3\"/></figure>\n\n\n\n<p>The last element of day, minute, second or hour can be fractional.</p>\n\n\n\n<p>The DateTime object has various methods as shown in the below example.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>require 'date'   \n  \nd = DateTime.parse('4th Mar 2017 02:37:05+05:40')   \n                       \nputs d.hour                 \nputs d.min                 \nputs d.sec                  \nputs d.offset               \nputs d.zone                 \nputs d += Rational('1.0')   \n                       \nputs d = d.new_offset('+05:00')   \n                      \nputs d.strftime('%I:%M:%S %p')   \n                     \nputs d > DateTime.new(2000)  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-date-time4.png\" alt=\"Ruby date time 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Time</h2>\n\n\n\n<p>Time class is an abstraction of dates and times. It is stored internally as the number of seconds since Epoch time. The Time class treats GMT (Grenwich Mean Time) and UTC (Coordinated Universal Time) equivalent.</p>\n\n\n\n<p>Times may appear equal but on comparison they may be different as all times may have fraction.</p>\n\n\n\n<p>Time implementation uses a signed 63 bit integer, Bignum or Rational. Time works slower when integer is used.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating a new Time Instance</h2>\n\n\n\n<p>A new Time instance can be created with&nbsp;<strong>::new</strong>. This will use your current system&#8217;s time. Parts of time like year, month, day, hour, minute, etc can also be passed.</p>\n\n\n\n<p>While creating a new time instance, you need to pass at least a year. If only year is passed, then time will default to January 1 of that year at 00:00:00 with current system time zone.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>puts Time.new          \nputs Time.new(2017, 3)       \nputs Time.new(2017, 3, 4)   \nputs Time.new(2017, 3, 4, 6, 5, 5, \"+05:00\")   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-date-time5.png\" alt=\"Ruby date time 5\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Time with gm, utc and local functions</h2>\n\n\n\n<p>Instead of using current system setting, you can also use GMT, local and UTC timezones.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>puts Time.local(2017, 2, 5)    \n  \nputs Time.local(2017, 2, 5, 4, 30)     \n  \nputs Time.utc(2017, 2, 5, 4, 30)    \n  \nputs Time.gm(2017, 2, 5, 4, 30, 36)    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-date-time6.png\" alt=\"Ruby date time 6\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Working with an instance of time</h2>\n\n\n\n<p>After creating an instance of time, we can work on that time in following ways.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>t = Time.new(1991, 07, 5, 9, 15, 33, \"+09:00\")   \nputs t.friday? #=> false   \nputs t.year #=> 1993   \nputs t.dst? #=> false   \nputs t + (60*60*24*365) #=> 1994-02-24 12:00:00 +0900   \nputs t.to_i #=> 730522800   \n  \nt1 = Time.new(2017)   \nt2 = Time.new(2015)   \n  \nputs t1 == t2 #=> false   \nputs t1 == t1 #=> true   \nputs t1 &lt;  t2 #=> true   \nputs t1 >  t2 #=> false   \n  \nputs Time.new(2010,10,31).between?(t1, t2) #=> true  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-date-time7.png\" alt=\"Ruby date time 7\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Timezones and daylight savings time</h2>\n\n\n\n<p>A Time object can be used to get all the information related to timezones. All the information will be displayed respective to current time of our system.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>time = Time.new   \n  \nputs time.zone         \nputs time.utc_offset   \nputs time.zone        \nputs time.isdst       \nputs time.utc?      \nputs time.localtime    \nputs time.gmtime      \nputs time.getlocal    \nputs time.getutc   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-date-time8.png\" alt=\"Ruby date time 8\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby has Mainly three classes related to date and time in its documentation. Date DateTime Time Date Ruby date provides two classes, Date and DateTime. To understand the concept of date, first we need to understand some terms. Calendar date:&nbsp;The calendar date is a particular day within a calendar month within a year. Ordinal date:&nbsp;The [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3045"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3045"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3045/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3045"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3045"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3045"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3047,"date":"2020-08-27T06:23:22","date_gmt":"2020-08-27T06:23:22","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3047"},"modified":"2020-08-27T06:23:22","modified_gmt":"2020-08-27T06:23:22","slug":"ruby-ranges","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-ranges/","title":{"rendered":"Ruby Ranges"},"content":{"rendered":"\n<p>Ruby range represents a set of values with a beginning and an end. They can be constructed using&nbsp;<strong>s..e</strong>&nbsp;and&nbsp;<strong>s&#8230;e</strong>&nbsp;literals or with&nbsp;<strong>::new</strong>.</p>\n\n\n\n<p>The ranges which has .. in them, run from beginning to end inclusively. The ranges which has &#8230; in them, run exclusively the end value.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-ranges1.png\" alt=\"Ruby rangers 1\"/></figure>\n\n\n\n<p>Ruby has a variety of ways to define ranges.</p>\n\n\n\n<ul><li>Ranges as sequences</li><li>Ranges as conditions</li><li>Ranges as intervals</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ranges as Sequences</h2>\n\n\n\n<p>The most natural way to define a range is in sequence. They have a start point and an end point. They are created using either .. or &#8230; operators.</p>\n\n\n\n<p>We are taking a sample range from 0 to 5. The following operations are performed on this range.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-ranges2.png\" alt=\"Ruby rangers 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ranges as Conditions</h2>\n\n\n\n<p>Ranges are also defined as conditional expressions. Different conditions are defined in a set of lines. These conditions are enclosed within start statement and end statement.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-ranges3.png\" alt=\"Ruby rangers 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ranges as Intervals</h2>\n\n\n\n<p>Ranges can also be defined in terms of intervals. Intervals are represented by&nbsp;<strong>===</strong>&nbsp;case equality operator.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-ranges4.png\" alt=\"Ruby rangers 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Reverse Range</h2>\n\n\n\n<p>Ruby reverse range operator does not return any value. If left side value is larger than right side value in a range, no vlaue will be returned.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Nothing will be returned in the output for the above example.</p>\n\n\n\n<p>To print a reverse order, you can use reverse method in a normal range as shown below.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-ranges5.png\" alt=\"Ruby rangers 5\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby range represents a set of values with a beginning and an end. They can be constructed using&nbsp;s..e&nbsp;and&nbsp;s&#8230;e&nbsp;literals or with&nbsp;::new. The ranges which has .. in them, run from beginning to end inclusively. The ranges which has &#8230; in them, run exclusively the end value. Output: Ruby has a variety of ways to define ranges. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3047"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3047"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3047/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3047"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3047"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3047"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3049,"date":"2020-08-27T06:26:52","date_gmt":"2020-08-27T06:26:52","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3049"},"modified":"2020-08-27T06:26:52","modified_gmt":"2020-08-27T06:26:52","slug":"ruby-iterators","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-iterators/","title":{"rendered":"Ruby Iterators"},"content":{"rendered":"\n<p>Iterator is a concept used in object-oriented language. Iteration means doing one thing many times like a loop.</p>\n\n\n\n<p>The loop method is the simplest iterator. They return all the elements from a collection, one after the other. Arrays and hashes come in the category of collection.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Each Iterator</h2>\n\n\n\n<p>The Ruby each iterator returns all the elements from a hash or array.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>collection).each do |variable|  \n  code...  \nend  </code></pre>\n\n\n\n<p>Here collection can be any array, range or hash.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n(1...5).each do |i|   \n   puts i   \nend   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-iterators1.png\" alt=\"Ruby iterators 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Times Iterator</h2>\n\n\n\n<p>A loop is executed specified number of times by the times iterator. Loop will start from zero till one less than specified number.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>x.times do |variable|  \n  code...  \nend  </code></pre>\n\n\n\n<p>Here, at place of x we need to define number to iterate the loop.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n5.times do |n|   \n  puts n   \nend   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-iterators2.png\" alt=\"Ruby iterators 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Upto and Downto Iterators</h2>\n\n\n\n<p>An upto iterator iterates from number x to number y.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>x.upto(y) do |variable|  \n  code  \nend  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n1.upto(5) do |n|   \n  puts n   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-iterators3.png\" alt=\"Ruby iterators 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Step Iterator</h2>\n\n\n\n<p>A step iterator is used to iterate while skipping over a range.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>(controller).step(x) do |variable|  \n  code  \nend  </code></pre>\n\n\n\n<p>Here, x is the range which will be skipped during iteration.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n(10..50).step(5) do |n|   \n  puts n   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-iterators4.png\" alt=\"Ruby iterators 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Each_Line Iterator</h2>\n\n\n\n<p>A each_line iterator is used to iterate over a new line in a string.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n\"All\\nthe\\nwords\\nare\\nprinted\\nin\\na\\nnew\\line.\".each_line do |line|   \nputs line   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-iterators5.png\" alt=\"Ruby iterators 5\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Iterator is a concept used in object-oriented language. Iteration means doing one thing many times like a loop. The loop method is the simplest iterator. They return all the elements from a collection, one after the other. Arrays and hashes come in the category of collection. Ruby Each Iterator The Ruby each iterator returns all [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3049"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3049"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3049/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3049"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3049"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3049"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3051,"date":"2020-08-27T06:31:57","date_gmt":"2020-08-27T06:31:57","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3051"},"modified":"2020-08-27T06:31:57","modified_gmt":"2020-08-27T06:31:57","slug":"ruby-file-i-o","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-file-i-o/","title":{"rendered":"Ruby File I/O"},"content":{"rendered":"\n<p>Ruby I/O is a way to interact with your system. Data is sent in the form of bytes/characters. IO class is the basis for all input and output in Ruby. It may be duplexed, hence may use more than one native operating system stream.</p>\n\n\n\n<p>IO has a subclass as&nbsp;<strong>File</strong>&nbsp;class which allows reading and writing files in Ruby. The two classes are closely associated. IO object represent readable/writable interactions to keyboards and screens.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Common modes in I/O port</h2>\n\n\n\n<ul><li><strong>&#8220;r&#8221;:</strong>&nbsp;read-only mode is the default mode starts at beginning of file.</li><li><strong>&#8220;r+&#8221;:</strong>&nbsp;read-write mode, starts at beginning of file.</li><li><strong>&#8220;w&#8221;:</strong>&nbsp;write-only mode, either creates a new file or truncates an existing file for writing.</li><li><strong>&#8220;w+&#8221;:</strong>&nbsp;read-write mode, either creates a new file or truncates an existing file for reading and writing.</li><li><strong>&#8220;a&#8221;:</strong>&nbsp;write-only mode, if file exists it will append the file othrwise a new file will be created for writing only.</li><li><strong>&#8220;a+&#8221;:</strong>&nbsp;read and write mode, if file exists it will append the file othrwise a new file will be created for writing and reading.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>IO Console</h2>\n\n\n\n<p>The IO console provides different methods to interact with console. The class IO provides following basic methods:</p>\n\n\n\n<ul><li>IO::console</li><li>IO#raw#raw!</li><li>IO#cooked</li><li>IO#cooked!</li><li>IO#getch</li><li>IO#echo=</li><li>IO#echo?</li><li>IO#noecho</li><li>IO#winsize</li><li>IO#winsize=</li><li>IO#iflush</li><li>IO#ioflush</li><li>IO#oflush</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby opening a file</h2>\n\n\n\n<p>A Ruby file can be created using different methods for reading, writing or both.</p>\n\n\n\n<p>There are two methods to open a file in Ruby:</p>\n\n\n\n<ul><li><strong>File.new method :</strong>&nbsp;Using this method a new file can be created for reading, writing or both.</li><li><strong>File.open method :</strong>&nbsp;Using this method a new file object is created. That file object is assigned to a file.</li></ul>\n\n\n\n<p>Difference between both the methods is that File.open method can be associated with a block while File.new method can&#8217;t.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>f&nbsp;=&nbsp;File.new(&#8220;fileName.rb&#8221;)&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Or,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>File.open(\"fileName.rb\", \"mode\") do |f|  </code></pre>\n\n\n\n<p><strong>Example to create a file</strong></p>\n\n\n\n<p>Let&#8217;s create a file in Ruby using File.open method to read or write data from files.</p>\n\n\n\n<p><strong>Step 1)</strong> In file hello.rb, write the code to create a new file as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \nFile.open('about', 'w') do |f|   \n    f.puts \"This is JavaTpoint\"   \n    f.write \"You are reading Ruby tutorial.\\n\"   \n    f &lt;&lt; \"Please visit our website.\\n\"   \nend   </code></pre>\n\n\n\n<p><strong>Step 2)</strong>&nbsp;Type the following two commands in the console to view the created file.</p>\n\n\n\n<ol><li>ruby&nbsp;hello.rb&nbsp;&nbsp;</li><li class=\"\">cat&nbsp;about&nbsp;&nbsp;</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-file-io1.png\" alt=\"Ruby file io 1\"/></figure>\n\n\n\n<p>The new file is created and content is displayed in the terminal as shown above.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby reading a file</h2>\n\n\n\n<p>There are three different methods to read a file.</p>\n\n\n\n<p>To return a single line, following syntax is used.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>f.gets  \n code...  </code></pre>\n\n\n\n<p>To return the whole file after the current position, following syntax is used.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>f.read  \n code...  </code></pre>\n\n\n\n<p>To return file as an array of lines, following syntax is used.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>f.readlines  \n &#91;code...]  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Example to read a file</h2>\n\n\n\n<p>Let&#8217;s create a file in Ruby using File.open method to read or write data from files.</p>\n\n\n\n<p><strong>Step 1)</strong> In file hello.rb, write the code to read an already existing file as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \nwhile line = gets   \n    puts line   \nend   </code></pre>\n\n\n\n<p><strong>Step 2)</strong>&nbsp;Type the following command in the console to read the file.</p>\n\n\n\n<ol><li>ruby&nbsp;hello.rb&nbsp;about&nbsp;&nbsp;</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-file-io2.png\" alt=\"Ruby file io 2\"/></figure>\n\n\n\n<p>Content of about file is displayed in the console.</p>\n\n\n\n<h3>The sysread Method</h3>\n\n\n\n<p>The sysread method is also used to read the content of a file. With the help of this method you can open a file in any mode.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>In file hello.rb, write the code to read an already existing file as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \naFile = File.new(\"about.txt\", \"r\")   \nif aFile   \n   content = aFile.sysread(40)   \n   puts content   \nelse   \n   puts \"Unable to open file!\"   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-file-io3.png\" alt=\"Ruby file io 3\"/></figure>\n\n\n\n<p>The argument 40 will print till 40 characters from the file.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby writing a file</h2>\n\n\n\n<p>With the help of syswrite method, you can write content into a file. File needs to be opened in write mode for this method.</p>\n\n\n\n<p>The new content will over ride the old content in an already existing file.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \naFile = File.new(\"about.txt\", \"r+\")   \nif aFile   \n   aFile.syswrite(\"New content is written in this file.\\n\")   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-file-io4.png\" alt=\"Ruby file io 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby renaming and deleting a file</h2>\n\n\n\n<p>Ruby files are renamed using rename method and deleted using delete mehtod.</p>\n\n\n\n<p>To&nbsp;<strong>rename</strong>&nbsp;a file, following syntax is used.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>File.rename(&#8220;olderName.txt&#8221;,&nbsp;&#8220;newName.txt&#8221;)&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nFile.rename(\"about.txt\", \"new.txt\")   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-file-io5.png\" alt=\"Ruby file io 5\"/></figure>\n\n\n\n<p>In the above output, about.txt file no longer exist as its name has been changed to new.txt file.</p>\n\n\n\n<p>To&nbsp;<strong>delete</strong>&nbsp;a file, following syntax is used.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>File.delete(&#8220;filename.txt&#8221;)&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nFile.delete(\"new.txt\")  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-file-io6.png\" alt=\"Ruby file io 6\"/></figure>\n\n\n\n<p>In the above output, new.txt file no longer exist as it has been deleted.</p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby I/O is a way to interact with your system. Data is sent in the form of bytes/characters. IO class is the basis for all input and output in Ruby. It may be duplexed, hence may use more than one native operating system stream. IO has a subclass as&nbsp;File&nbsp;class which allows reading and writing files [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3051"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3051"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3051/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3051"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3051"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3051"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3053,"date":"2020-08-27T06:33:58","date_gmt":"2020-08-27T06:33:58","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3053"},"modified":"2020-08-27T06:33:58","modified_gmt":"2020-08-27T06:33:58","slug":"ruby-directories","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-directories/","title":{"rendered":"Ruby Directories"},"content":{"rendered":"\n<p>Class Dir has directory streams as objects which represents directories in underlying file system.</p>\n\n\n\n<p>Directories are handled with Dir class.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Creating a Directory</h2>\n\n\n\n<p>To create a directory mkdir command is used. You can give permission to a directory if you want.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>Dir.mkdir&nbsp;&#8220;dirName&#8221;&nbsp;,&nbsp;permission&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Dir.mkdir \"project\"  </code></pre>\n\n\n\n<p>We have created a directory &#8220;project&#8221; in out system.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Checking a Directory exists or not</h2>\n\n\n\n<p>To check whether a directory exists or not exists? Method is used.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>puts Dir.exists? \"dirName\"  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nputs Dir.exists? \"project\"   \nputs Dir.exists? \"pproject\"   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-directories1.png\" alt=\"Ruby directories 1\"/></figure>\n\n\n\n<p>the correct directory name display true and wrong directory name display false.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Current Working Directory</h2>\n\n\n\n<p>To know the current working directory pwd method is used.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>puts Dir.pwd  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>puts Dir.pwd   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-directories2.png\" alt=\"Ruby directories 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Removing Directory</h2>\n\n\n\n<p>To remove a directory, rmdir, unlink or delete methods are used. They perform same function for a Ruby directory.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>Dir.rmdir&nbsp;&#8220;dirName&#8221;&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nDir.rmdir \"project\"   \nputs Dir.exists? \"project\"  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-directories3.png\" alt=\"Ruby directories 3\"/></figure>\n\n\n\n<p>The exists method returns false as this directory is no longer present.</p>\n","protected":false},"excerpt":{"rendered":"<p>Class Dir has directory streams as objects which represents directories in underlying file system. Directories are handled with Dir class. Creating a Directory To create a directory mkdir command is used. You can give permission to a directory if you want. Syntax: Dir.mkdir&nbsp;&#8220;dirName&#8221;&nbsp;,&nbsp;permission&nbsp;&nbsp; Example: We have created a directory &#8220;project&#8221; in out system. Checking a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3053"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3053"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3053/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3053"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3053"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3053"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3055,"date":"2020-08-27T06:38:15","date_gmt":"2020-08-27T06:38:15","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3055"},"modified":"2020-08-27T06:38:15","modified_gmt":"2020-08-27T06:38:15","slug":"ruby-exceptions","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-exceptions/","title":{"rendered":"Ruby Exceptions"},"content":{"rendered":"\n<p>Ruby exception is an object, an instance of the class Exception or descendent of that class. It represents some exceptional condition.</p>\n\n\n\n<p>In a Ruby program, when something goes wrong, it throws an exceptional behavior. By default Ruby program terminates on throwing an exception.</p>\n\n\n\n<p>We can declare some exception handlers within Ruby. An exception handler is a block of code which is executed when exception occurs in some other block of code.</p>\n\n\n\n<p>Exceptions are handled in two ways. Either you can terminate the program or deal with the exception. To deal with an exception, you can provide a rescue clause. By providing this, program control flows to the rescue clause.</p>\n\n\n\n<p>When an exception is raised but not handled, global variable&nbsp;<strong>$!</strong>&nbsp;contains the current exception and&nbsp;<strong>$@</strong>&nbsp;contains the current exception&#8217;s backtrace.</p>\n\n\n\n<p>Ruby predefined classes like Exception and its children helps you to handle errors of your program. In Ruby exception hierarchy, most of the sub classes extend class StandardError. These are the normal exceptions.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Class Exceptions</h2>\n\n\n\n<p>Built-in subclasses of exception are as follows:</p>\n\n\n\n<ul><li>NoMemoryError</li><li>ScriptError</li><li>SecurityError</li><li>SignalException</li><li>StandardError</li><li>SystenExit</li><li>SystemStackError</li><li>fatal &#8211; impossible to rescue</li></ul>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def raise_exception     \n  puts 'I am before the raise.'     \n  raise 'oops! An error has occured'     \n  puts 'I am after the raise'     \nend     \nraise_exception </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-exceptions1.png\" alt=\"Ruby exceptions 1\"/></figure>\n\n\n\n<p>The raise method comes from the Kernel module.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Handling an Exception</h2>\n\n\n\n<p>To handle exception, the code that raises exception is enclosed within&nbsp;<strong>begin-end</strong>&nbsp;block. Using rescue clauses we can state type of exceptions we want to handle.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def raise_and_rescue     \n  begin     \n    puts 'Before the raise.'     \n    raise 'An error occured.'     \n    puts 'After the raise.'     \n  rescue     \n    puts 'Code rescued.'     \n  end     \n  puts 'After the begin block.'     \nend     \nraise_and_rescue    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-exceptions2.png\" alt=\"Ruby exceptions 2\"/></figure>\n\n\n\n<p>In the above example, interrupted code does not run completely. After exception handling code resumes after the begin-end block.</p>\n\n\n\n<p>If no argument is defined in the rescue clause, the parameter defaults to StandardError. Each rescue clause specify multiple exceptions to catch. If raise is used without any parameters, exception may re-raised.</p>\n\n\n\n<p>The rescue clauses are written in a begin/rescue block. Exceptions if not handled by one rescue clause will br handled with the next one.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>   begin  \ncode..  \nrescue OneTypeOfException  \ncode..  \nrescue AnotherTypeOfException  \n code..  \nelse  \n  # Other exceptions  \nend </code></pre>\n\n\n\n<p>In the begin block, each rescue clause with the raised exception will be compared against each of parameters in turn. It will be matched when the type of error thrown and exception named in the rescue clause is either same or is a superclass of that exception. The else clause is executed if body of begin statement is completed without exceptions. If an exception occurs, else clause will not be executed.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Exception Object</h2>\n\n\n\n<p>Exception objects are normal objects. A rescued exception can be hold to a variable within the rescue clause.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>begin   \n  raise 'an exception'   \nrescue ZeroDivisionError => e   \n  puts \"Exception Class: #{ e.class.name }\"   \n  puts \"Exception Message: #{ e.message }\"   \n  puts \"Exception Backtrace: #{ e.backtrace }\"   \nend   </code></pre>\n\n\n\n<p>The&nbsp;<strong>Exception</strong>&nbsp;class defines two methods that return details about the exception. The&nbsp;<strong>message</strong>&nbsp;method returns a string that define the explanation of error. The&nbsp;<strong>backtrace</strong>&nbsp;method returns an array of string that represent the call stack at that point where exception was raised.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Using retry Statement</h2>\n\n\n\n<p>Usaually in a rescue clause, the exception is captured and code resumes after begin block. Using retry statement, the rescue block code can be resumed from begin after capturing an exception.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li><strong>begin</strong>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;code&#8230;.&nbsp;&nbsp;</li><li><strong>rescue</strong>&nbsp;&nbsp;</li><li class=\"\">&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;capture&nbsp;exceptions&nbsp;&nbsp;</li><li>&nbsp;&nbsp;&nbsp;&nbsp;<strong>retry</strong>&nbsp;&nbsp;#&nbsp;program&nbsp;will&nbsp;run&nbsp;from&nbsp;the&nbsp;<strong>begin</strong>&nbsp;block&nbsp;&nbsp;</li><li class=\"\"><strong>end</strong>&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nbegin   \n   x = Dir.mkdir \"alreadyExist\"   \n   if x   \n      puts \"Directory created\"   \n   end   \nrescue   \n   y = \"newDir\"   \n   retry   \nend   </code></pre>\n\n\n\n<p>The above program runs as follows:</p>\n\n\n\n<p><strong>Step 1</strong>&nbsp;In the begin block, code is written to make a directory that already exists.</p>\n\n\n\n<p><strong>Step 2</strong>&nbsp;This will throw an error.</p>\n\n\n\n<p><strong>Step 3</strong>&nbsp;In rescue block, y was reassigned.</p>\n\n\n\n<p><strong>Step 4</strong>&nbsp;The retry statement will go to the begin block.</p>\n\n\n\n<p><strong>Step 5</strong>&nbsp;Directory will be created.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Using raise Statement</h2>\n\n\n\n<p>The raise statement is used to raise an exception.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>raise&nbsp;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>Or,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>raise \"Error Message\"  </code></pre>\n\n\n\n<p>Or,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>raise ExceptionType, \"Error Message\"  </code></pre>\n\n\n\n<p>Or,</p>\n\n\n\n<ol><li>raise&nbsp;ExceptionType,&nbsp;&#8220;Error&nbsp;Message&#8221;&nbsp;condition&nbsp;&nbsp;</li></ol>\n\n\n\n<p>The first one re-raises the current exception. It is used for exception handlers where exception is intercepted before passing it on.</p>\n\n\n\n<p>The second one creates a new RuntimeError exception. This exception is then raised up the call stack.</p>\n\n\n\n<p>The third one uses first argument to create an exception, then sets associated message to the second argument.</p>\n\n\n\n<p>The fourth one similar to third one. In this you can add any conditional statement to raise an exception.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nbegin     \n    puts 'code before raise.'     \n    raise 'exception occurred.'     \n    puts 'code after raise.'     \nrescue     \n    puts 'I am rescued.'     \nend     \nputs 'code after begin block.'    </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-exceptions3.png\" alt=\"Ruby exceptions 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Using ensure Statement</h2>\n\n\n\n<p>There is an&nbsp;<strong>ensure</strong>&nbsp;clause which guarantees some processing at the end of code. The ensure block always run whether an exception is raised or not. It is placed after last rescue clause and will always executed as the block terminates.</p>\n\n\n\n<p>The ensure block will run at any case whether an exception arises, exception is rescued or code is terminated by uncaught exception.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>begin   \n  code..  \n   #..raise exception  \nrescue   \n   #.. exception is rescued  \nensure   \n   #.. This code will always execute.  \nend  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>begin   \n  raise 'Exception'   \nrescue Exception => e   \n  puts e.message   \n  puts e.backtrace.inspect   \nensure   \n  puts \"The ensure code will always run\"   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-exceptions4.png\" alt=\"Ruby exceptions 4\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Using else Statement</h2>\n\n\n\n<p>The else clause is always present after rescue clause and before ensure clause. If no exceptions are raised, then only else block is executed.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>begin   \n   code..   \n   #..raise exception  \nrescue   \n   # .. exception is rescued  \nelse  \n   #.. executes if there is no exception  \nensure   \n   #..  This code will always execute.  \nend  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>begin   \n # raise 'A test exception.'   \n puts \"no exception is raised\"   \nrescue Exception => e   \n  puts e.message   \n  puts e.backtrace.inspect   \nelse   \n   puts \"else code will be executed as no exception is raised.\"   \nensure   \n  puts \"ensure code will run\"   \nend  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-exceptions5.png\" alt=\"Ruby exceptions 5\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Catch and Throw</h2>\n\n\n\n<p>Ruby catch and throw provide a way to jump from the execution early when no further work is needed in a code.</p>\n\n\n\n<p>The catch defines a block that is labeled with a given name. It is used to jump out of nested code. Using catch, the block will be executed normally until throw is encountered.</p>\n\n\n\n<p>The catch and throw method is faster than rescue and raise clauses. Hence, it is more suitable to use.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>throw :lablename  \n#.. this  code will not be executed  \ncatch :lablename do  \n#.. matching catch will be executed after a throw is encountered.  \nend  </code></pre>\n\n\n\n<p>Or,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>throw :lablename condition  \n#.. this code will not be executed  \ncatch :lablename do  \n#.. matching catch will be executed after a throw is encountered.  \nend  </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>def promptAndGet(prompt)   \n   print prompt   \n   res = readline.chomp   \n   throw :quitRequested if res == \"!\"   \n   return res   \nend   \n  \ncatch :quitRequested do   \n   name = promptAndGet(\"Name: \")   \n   age = promptAndGet(\"Occupation: \")   \n   # ..   \n   # process information   \nend   \npromptAndGet(\"Name:\")  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-exceptions6.png\" alt=\"Ruby exceptions 6\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ruby exception is an object, an instance of the class Exception or descendent of that class. It represents some exceptional condition. In a Ruby program, when something goes wrong, it throws an exceptional behavior. By default Ruby program terminates on throwing an exception. We can declare some exception handlers within Ruby. An exception handler is [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3055"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3055"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3055/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3055"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3055"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3055"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3057,"date":"2020-08-27T06:40:39","date_gmt":"2020-08-27T06:40:39","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3057"},"modified":"2020-08-27T06:40:39","modified_gmt":"2020-08-27T06:40:39","slug":"ruby-oops-concept","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-oops-concept/","title":{"rendered":"Ruby OOPs Concept"},"content":{"rendered":"\n<p>Ruby is a true object oriented language which can be embedded into Hypertext Markup Language. Everything in Ruby is an object. All the numbers, strings or even class is an object. The whole Ruby language is basically built on the concepts of object and data.</p>\n\n\n\n<p>OOPs is a programming concept that uses objects and their interactions to design applications and computer programs.</p>\n\n\n\n<p>Following are some basic concepts in OOPs:EncapsulationPolymorphismInheritanceAbstraction</p>\n\n\n\n<p><strong>Encapsulation:</strong>&nbsp;It hides the implementation details of a class from other objects due to which a class is unavailable to the rest of the code. Its main purpose is to protect data from data manipulation.</p>\n\n\n\n<p><strong>Polymorphism:</strong>&nbsp;It is the ability to represent an operator or function in different ways for different data input.</p>\n\n\n\n<p><strong>Inheritance:</strong>&nbsp;It creates new classes from pre defined classes. New class inherit behaviors of its parent class which is referred as superclass. In this way, pre defined classes can be made more reusable and useful.</p>\n\n\n\n<p><strong>Abstraction:</strong>&nbsp;It hides the complexity of a class by modelling classes appropriate to the problem.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Class</h2>\n\n\n\n<p>Ruby class defines blueprint of a data type. It defines what does that class name means.</p>\n\n\n\n<p>A class is defined with a&nbsp;<strong>class</strong>&nbsp;keyword followed by the class name and is ended with&nbsp;<strong>end</strong>&nbsp;keyword.</p>\n\n\n\n<p>Conventionally, class name must begin with a capital letter. Class name with more than one word run together with each word capitalized and no separating characters.</p>\n\n\n\n<h3>Creating Class</h3>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>We will create a class <strong>Java</strong> with following command,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Greeter  </code></pre>\n\n\n\n<p><img src=\"https://static.javatpoint.com/ruby/images/ruby-oops-concept1.png\" alt=\"Ruby Oops concept 1\"></p>\n\n\n\n<p>A new class&nbsp;<strong>Java</strong>&nbsp;is created. The @name is an instance variable available to all the methods of the Java class. It is used by say_welcome and say_bye.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Objects</h2>\n\n\n\n<p>In Ruby, everything is an object. When we create objects, they communicate together through methods. Hence, an object is a combination of data and methods.</p>\n\n\n\n<p>To create an object, first, we define a class. Single class can be used to create many objects. Objects are declared using&nbsp;<strong>new</strong>&nbsp;keyword.</p>\n\n\n\n<h3>Creating Object</h3>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<p>We have a class named <strong>Java</strong>. Now, let&#8217;s create an object <strong>java</strong> and use it with following command,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>java = Java.new(\"John\")  </code></pre>\n\n\n\n<p><img src=\"https://static.javatpoint.com/ruby/images/ruby-oops-concept2.png\" alt=\"Ruby Oops concept 2\"></p>\n\n\n\n<p>Once&nbsp;<strong>java</strong>&nbsp;object is created, it will use John as the name.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Methods</h2>\n\n\n\n<p>Methods are functions which are defined inside the body of a class. Data in Ruby is accessible only via methods. There is a follow path in which Ruby looks when a method is called. To find out the method lookup chain we can use&nbsp;<strong>ancestors</strong>&nbsp;method.</p>\n\n\n\n<h3>Defining Method</h3>\n\n\n\n<p>A method is defined with&nbsp;<strong>def</strong>&nbsp;keyword and ends with&nbsp;<strong>end</strong>&nbsp;keyword.</p>\n\n\n\n<p>We are defining a method&nbsp;<strong>name</strong>&nbsp;which will display the following message.<img src=\"https://static.javatpoint.com/ruby/images/ruby-oops-concept3.png\" alt=\"Ruby Oops concept 3\"></p>\n\n\n\n<p>The def keyword starts the definition of method name. Then we write body of the mehtod. Last line end indicates that method is defined.</p>\n\n\n\n<h3>Instance Methods</h3>\n\n\n\n<p>The instance methods are also defined with def keyword and they can be used using a class instance only.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n  \n# define a class   \nclass Circle   \n   # constructor method   \n   def initialize(r)   \n      @radius = r   \n   end   \n   # instance method   \n   def getArea   \n      3.14 * @radius * @radius   \n   end   \nend   \n  \n# create an object   \ncircle = Circle.new(2)   \n  \n# call instance methods   \na = circle.getArea()   \nputs \"Area of the box is : #{a}\"  </code></pre>\n\n\n\n<p>Output:<img src=\"https://static.javatpoint.com/ruby/images/ruby-oops-concept4.png\" alt=\"Ruby Oops concept 4\"></p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Inheritance</h2>\n\n\n\n<p>In inheritance, we create new classes using pre defined classes. Newly created classes are called derived classes and classes from which they are derived are called base classes. With inheritance, a code can be reused again which reduces the complexity of a program.</p>\n\n\n\n<p>Ruby does not support multiple levels of inheritance. Instead it supports&nbsp;<strong>mixins.</strong></p>\n\n\n\n<p>In Ruby, <strong>&lt;</strong> character is used to create a subclass. The syntax is shown below:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>parentClass &lt; subClass </code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nclass Parent   \n  \n    def initialize   \n        puts \"Parent class created\"   \n    end   \nend   \n  \nclass Child &lt; Parent   \n  \n   def initialize   \n       super   \n       puts \"Child class created\"   \n   end   \nend   \n  \nParent.new   \nChild.new  </code></pre>\n\n\n\n<p>In the above example, two classes are created. One is base&nbsp;<strong>Parent</strong>&nbsp;class and other is derived&nbsp;<strong>Child</strong>&nbsp;class.</p>\n\n\n\n<p>The&nbsp;<strong>super</strong>&nbsp;method calls the constructor of the Parent class.</p>\n\n\n\n<p>From the last two line, we instantiate both the classes.</p>\n\n\n\n<p>Output:<img src=\"https://static.javatpoint.com/ruby/images/ruby-oops-concept5.png\" alt=\"Ruby Oops concept 5\"></p>\n\n\n\n<p>In the output, first the Parent class is created, derived Child class also calls the constructor of its parent class and then Child class is created.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Constructor</h2>\n\n\n\n<p>A constructor is automatically called when an object is created. They do not return any values. In Ruby, they are called&nbsp;<strong>initialize.</strong></p>\n\n\n\n<p>A constructor&#8217;s main purpose is to initiate the state of an object. They can&#8217;t be inherited. The parent object constructor is called with super method.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \n  \nclass Parent   \n  \n    def initialize   \n        puts \"Parent is created\"   \n    end   \n  \nend   \n  \nParent.new   </code></pre>\n\n\n\n<p>Output:<img src=\"https://static.javatpoint.com/ruby/images/ruby-oops-concept6.png\" alt=\"Ruby Oops concept 6\"></p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby is a true object oriented language which can be embedded into Hypertext Markup Language. Everything in Ruby is an object. All the numbers, strings or even class is an object. The whole Ruby language is basically built on the concepts of object and data. OOPs is a programming concept that uses objects and their [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3057"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3057"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3057/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3057"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3057"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3057"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3059,"date":"2020-08-27T06:42:47","date_gmt":"2020-08-27T06:42:47","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3059"},"modified":"2020-08-27T06:42:47","modified_gmt":"2020-08-27T06:42:47","slug":"ruby-regular-expression","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-regular-expression/","title":{"rendered":"Ruby Regular Expression"},"content":{"rendered":"\n<p>A regular expression is also spelled as&nbsp;<strong>regexp</strong>&nbsp;which holds a regular expression, used to match a pattern against strings. In Ruby, a pattern is written between forward slash characters. They describe the content of a string. Ruby regular expression is more similar to Perl regular expression.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>/search string/  </code></pre>\n\n\n\n<p>Ruby 1.9 uses&nbsp;<strong>Oniguruma</strong>&nbsp;regular expressions library but Ruby 2.0 uses&nbsp;<strong>Onigmo</strong>&nbsp;regular expressions library. Onigmo is a fork library of Oniguruma adding some new features.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>=∽ and #match operators</h2>\n\n\n\n<p>The pattern matching is achieved by using =∽ and #match operators.</p>\n\n\n\n<p><strong>=∽</strong></p>\n\n\n\n<p>This is the basic matching pattern. Here two operands are used. One is a regular expression and other is a string. The regular expression is matched with the string.</p>\n\n\n\n<p>If a match is found, the operator returns index of first match otherwise nil.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression1.png\" alt=\"Ruby Regular expression 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>#match</h2>\n\n\n\n<p>This operator returns a MatchData object on matching otherwise nil.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression2.png\" alt=\"Ruby Regular expression 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Metacharacters and Escapes</h2>\n\n\n\n<p>Metacharacters have specific meaning in a pattern. To match a string, they are back slashed (\\\\\\) or escaped. Some meta characters are (,), (.), (?), (+), (-), (*), [,], {,}.</p>\n\n\n\n<p>It returns the specific string when matched otherwise nil.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression3.png\" alt=\"Ruby Regular expression 3\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Characters Classes</h2>\n\n\n\n<p>Metacharacters have specific meaning in a pattern. To match a string, they are back slashed (\\\\\\) or escaped.</p>\n\n\n\n<p>A character class is encircled within square brackets.</p>\n\n\n\n<p><strong>[ab]</strong></p>\n\n\n\n<p>Here, [ab] means a or b. It is the oppoite of /ab/ which means a and b.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression4.png\" alt=\"Ruby Regular expression 4\"/></figure>\n\n\n\n<p><strong>[a-d]</strong></p>\n\n\n\n<p>Here, [a-d] is equivalent to [abcd]. The hyphen (-) character class represents range of characters.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression5.png\" alt=\"Ruby Regular expression 5\"/></figure>\n\n\n\n<p><strong>[^a-d]</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>The ^ sign represents any other character which is not present in the range.</code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression6.png\" alt=\"Ruby Regular expression 6\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Repetition</h2>\n\n\n\n<p>Characters defined till now match a single character. With the help of repetition metacharacter, we can specify how many times they need to occur. These meta characters are called <strong>quantifiers.</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>*: Zero or more times\n+: One or more times\n?: Zero or one times (optional)\n{n}: Exactly n times\n{n, }: n or more times\n{,m}: m or less times\n{n,m}: At least n and at most m times</code></pre>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression7.png\" alt=\"Ruby Regular expression 7\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Grouping</h2>\n\n\n\n<p>Grouping uses parentheses to group the terms together. Grouping the terms together make them one.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression8.png\" alt=\"Ruby Regular expression 8\"/></figure>\n\n\n\n<p>In this example, first pattern matches a vowel followed by two characters.</p>\n\n\n\n<p>In the second pattern, it matches a vowel followed by a word character, twice.</p>\n\n\n\n<p><strong>(?:..)</strong></p>\n\n\n\n<p>This expression provides grouping without capturing. It combines term without creating a backreference.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-regular-expression9.png\" alt=\"Ruby Regular expression 9\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>A regular expression is also spelled as&nbsp;regexp&nbsp;which holds a regular expression, used to match a pattern against strings. In Ruby, a pattern is written between forward slash characters. They describe the content of a string. Ruby regular expression is more similar to Perl regular expression. Syntax: Ruby 1.9 uses&nbsp;Oniguruma&nbsp;regular expressions library but Ruby 2.0 uses&nbsp;Onigmo&nbsp;regular [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3059"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3059"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3059/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3059"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3059"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3059"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3061,"date":"2020-08-27T06:45:17","date_gmt":"2020-08-27T06:45:17","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3061"},"modified":"2020-08-27T06:45:17","modified_gmt":"2020-08-27T06:45:17","slug":"ruby-socket-programming","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-socket-programming/","title":{"rendered":"Ruby Socket Programming"},"content":{"rendered":"\n<p>Sockets are the end points of a network communication channel, where client and server communicate to each other. They can communicate either on same machine or on different machines.</p>\n\n\n\n<p><strong>Types of socket:</strong></p>\n\n\n\n<ul><li>TCP Socket</li><li>UDP Socket</li><li>UNIX Socket</li></ul>\n\n\n\n<p>There are two levels of socket, high and low. Low level access allows you to work on sockets that are supported by your system. It allows the implementation of both connectionless and connection oriented protocols. High level access allows you to work on network protocols like HTTP and FTP.</p>\n\n\n\n<h3>Example1</h3>\n\n\n\n<p><strong>server1.rb</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \nrequire 'socket'   \n  \nserver = TCPServer.open(2017)   \nloop {   \n    client = server.accept   \n    client.puts \"Hello. This is socket programming\"   \n    client.close   \n}   </code></pre>\n\n\n\n<p>In the above code, the pre installed socket module need to be included. We are using 2017 port on our system. You can use any port.</p>\n\n\n\n<p>Start a loop, accept all connections made to port 2017 and send data to the client over socket networking.</p>\n\n\n\n<p>Lastly, close the socket.</p>\n\n\n\n<p><strong>client1.rb</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \nrequire 'socket'   \n  \nhostname = 'localhost'   \nport = 2017   \n  \ns = TCPSocket.open(hostname, port)   \n  \nwhile line = s.gets   \n    puts line.chomp   \nend   \ns.close  </code></pre>\n\n\n\n<p>In the above code, the pre installed socket module need to be included. Create a socket and connect it to port 2017.</p>\n\n\n\n<p>create a while loop to fetch all information sent over the socket.</p>\n\n\n\n<p>Lastly, close the socket.</p>\n\n\n\n<p><strong>Output:</strong></p>\n\n\n\n<p>Go to the terminal, change to the directory to which you have saved the above two files. We have saved it in our Desktop directory.</p>\n\n\n\n<p>Now to execute these files, we need to have the required permission. Run the following command in the terminal,</p>\n\n\n\n<pre class=\"wp-block-code\"><code>chmod a+x *.rb  </code></pre>\n\n\n\n<p>This command will make all the Ruby files executable present in this directory.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-socket-programming1.png\" alt=\"Ruby Socket programming 1\"/></figure>\n\n\n\n<p>Now open two terminals. In the first terminal execute server script and in the second terminal execute client script with the following command.</p>\n\n\n\n<ol><li>ruby&nbsp;filename.rb&nbsp;&nbsp;</li></ol>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-socket-programming2.png\" alt=\"Ruby Socket programming 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Multiple clients socket programming</h2>\n\n\n\n<p>For multiple clients overs a socket programming, a loop and some threads will be needed to accept and respond to multiple clients.</p>\n\n\n\n<h3>Example2</h3>\n\n\n\n<p><strong>server3.rb</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env ruby -w   \nrequire \"socket\"   \nclass Server   \n  def initialize( port, ip )   \n    @server = TCPServer.open( ip, port )   \n    @connections = Hash.new   \n    @rooms = Hash.new   \n    @clients = Hash.new   \n    @connections&#91;:server] = @server   \n    @connections&#91;:rooms] = @rooms   \n    @connections&#91;:clients] = @clients   \n    run   \n  end   \n  \n  def run   \n    loop {   \n      Thread.start(@server.accept) do | client |   \n        nick_name = client.gets.chomp.to_sym   \n        @connections&#91;:clients].each do |other_name, other_client|   \n          if nick_name == other_name || client == other_client   \n            client.puts \"This username already exist\"   \n            Thread.kill self   \n          end   \n        end   \n        puts \"#{nick_name} #{client}\"   \n        @connections&#91;:clients]&#91;nick_name] = client   \n        client.puts \"Connection established...\"   \n        listen_user_messages( nick_name, client )   \n      end   \n    }.join   \n  end   \n  \n  def listen_user_messages( username, client )   \n    loop {   \n      msg = client.gets.chomp   \n      @connections&#91;:clients].each do |other_name, other_client|   \n        unless other_name == username   \n          other_client.puts \"#{username.to_s}: #{msg}\"   \n        end   \n      end   \n    }   \n  end   \nend   \n  \nServer.new( 2019, \"localhost\" )  </code></pre>\n\n\n\n<p>In the above code, server will have the same port as client side to establish connection. Here we need one thread per connected user to handle all the possible users.</p>\n\n\n\n<p>The&nbsp;<strong>run</strong>&nbsp;method verify whether an entered name is unique or not. If username already exists, connection will be killed otherwise connection will be established.</p>\n\n\n\n<p>The&nbsp;<strong>listen_user_messages</strong>&nbsp;method listen to the user messages and send them to all the users.</p>\n\n\n\n<p><strong>client3.rb</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env ruby -w   \nrequire \"socket\"   \nclass Client   \n  def initialize( server )   \n    @server = server   \n    @request = nil   \n    @response = nil   \n    listen   \n    send   \n    @request.join   \n    @response.join   \n  end   \n  \n  def listen   \n    @response = Thread.new do   \n      loop {   \n        msg = @server.gets.chomp   \n        puts \"#{msg}\"   \n      }   \n    end   \n  end   \n  \n  def send   \n    puts \"Enter your name:\"   \n    @request = Thread.new do   \n      loop {   \n        msg = $stdin.gets.chomp   \n        @server.puts( msg )   \n      }   \n    end   \n  end   \nend   \n  \nserver = TCPSocket.open( \"localhost\", 2019 )   \nClient.new( server )  </code></pre>\n\n\n\n<p>In the above code, class&nbsp;<strong>Client</strong>&nbsp;is created to handle users.</p>\n\n\n\n<p>Two threads are created in&nbsp;<strong>send</strong>&nbsp;and&nbsp;<strong>listen</strong>&nbsp;methods so that we can read/write messages at the same time.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<p>Below snapshot shows chatting between two clients.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-socket-programming3.png\" alt=\"Ruby Socket programming 3\"/></figure>\n\n\n\n<p>Output on server terminal is shown below.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-socket-programming4.png\" alt=\"Ruby Socket programming 4\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Sockets are the end points of a network communication channel, where client and server communicate to each other. They can communicate either on same machine or on different machines. Types of socket: TCP Socket UDP Socket UNIX Socket There are two levels of socket, high and low. Low level access allows you to work on [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3061"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3061"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3061/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3061"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3061"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3061"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3063,"date":"2020-08-27T06:47:10","date_gmt":"2020-08-27T06:47:10","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3063"},"modified":"2020-08-27T06:47:10","modified_gmt":"2020-08-27T06:47:10","slug":"ruby-thread","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-thread/","title":{"rendered":"Ruby Thread"},"content":{"rendered":"\n<p>Thread means lightweight sub-process. It is a separate path of execution. In Ruby, different parts of a program can run at the same time by either splitting tasks within a program using multiple threading or splitting tasks between different programs using multiple process.</p>\n\n\n\n<p>Threads are the Ruby implementation for a concurrent programming model.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Multithreading</h2>\n\n\n\n<p>A normal program has single thread of execution. All the statements in the program are executed sequentially.</p>\n\n\n\n<p>A multi thread program has more than one thread of execution in it. It uses less memory space and share same address space. Multithreading is used to perform more than one task at once.</p>\n\n\n\n<p>A new thread is created using&nbsp;<strong>thread.new</strong>&nbsp;call. It is different from the main thread&#8217;s execution.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Thread Initialization</h2>\n\n\n\n<p>To create a new thread Ruby provides three keywords namely,&nbsp;<strong>::new, ::start</strong>&nbsp;and&nbsp;<strong>::fork.</strong></p>\n\n\n\n<p>To start a new thread, associate a block of code with a call to&nbsp;<strong>Thread.new, Thread.start</strong>&nbsp;or&nbsp;<strong>Thread.fork</strong>. Thread will be created. The new thread exits when the block exit.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code># Original thread runs  \nThread.new {  \n  # New thread is created.  \n}  \n# Original thread runs  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Thread Termination</h2>\n\n\n\n<p>There are different ways to terminate a thread in Ruby. To exit a given thread, class&nbsp;<strong>::kill</strong>&nbsp;is used.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>thr = Thread.new { ... }  \nThread.kill(thr)  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby Thread Example</h2>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby   \nth = Thread.new do #Here we start a new thread   \n  Thread.current&#91;'counter']=0   \n  5.times do |i| #loop starts and increases i each time   \n    Thread.current&#91;'counter']=i   \n    sleep 1   \n  end   \n  return nil   \nend   \nwhile th&#91;'counter'].to_i &lt; 4  do   \n=begin   \nth is the long running thread   \nand we can access the same variable   \nfrom inside the thread here   \n=end   \n  puts \"Counter is #{th&#91;'counter']}\"   \n  sleep 0.5   \nend   \nputs \"Long running process finished!\"   </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-thread1.png\" alt=\"Ruby Thread 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Thread Lifecycle</h2>\n\n\n\n<p>Once a thread is created, there is no need to start it. It automatically runs when it gets proper CPU resources. The last expression in a block is the value of the thread. If thread has run completely, value method returns the thread value, otherwise value method blocks it and returns when the thread has completed. A number of methods are defined by thread class while running query and manipulate the thread.</p>\n\n\n\n<p>By calling a thread&#8217;s Thread.join method, you can wait for a particular thread to finish.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Thread Exception Handling</h2>\n\n\n\n<p>Threads may have some exceptions in them. If exception arises in any thread other than main thread, it depends upon abort_on_exception. By default this option is always false. It means unhandled exception will silently terminate the thread. This can be changed by setting either abort_on_exception = true or $DEBUG to true.</p>\n\n\n\n<p>To handle exception, you can use class method&nbsp;<strong>::handle_interrupt</strong>. It will handle exceptions asynchronously with threads.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Thread Variables and Scope</h2>\n\n\n\n<p>Threads are created with blocks. A local variable created within a block is accessible to only thread in which this block is present.</p>\n\n\n\n<p>Ruby thread class allows thread-local variables to be created and accessed by name. Thread object is treated like a hash, writing elements using []= and reading them back using [].</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Thread Scheduling</h2>\n\n\n\n<p>Ruby supports scheduling threads by using&nbsp;<strong>::stop</strong>&nbsp;and&nbsp;<strong>::pass</strong>&nbsp;methods in a program.</p>\n\n\n\n<p>The&nbsp;<strong>::stop</strong>&nbsp;class method put the current running thread to sleep and schedule the execution of another thread. Once the thread is asleep, instance method wakeup is used to mark thread as eligible for scheduling.</p>\n\n\n\n<p>The&nbsp;<strong>::pass</strong>&nbsp;class method tries to pass execution to another thread. It depends upon the operating system whether the running thread will switch or not.</p>\n\n\n\n<p>Thread priority gives a hint to schedule threads according to their priority. The high priority thread is scheduled first. It also depends upon the operating system. A thread can increase or decrease its own priority as the first action it takes.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Thread Exclusion</h2>\n\n\n\n<p>Ruby thread exclusion states that, when two threads share the same data and one of the thread modifies that data, then we need to ensure that no thread should see each others data in an inconsistent state. For example, banking server. Where one thread operates money transfer in accounts and other thread is generating monthly report for the customers.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Public Class Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>abort_on_exception</td><td>It returns the status of global &#8220;abort on exception&#8221; condition. The default is true. When it is set to true, all threads will abort if an exception is raised in any thread.</td></tr><tr><td>abort_on_exception=</td><td>When it is set to true, all threads will abort if an exception is raised. It returns the new state.</td></tr><tr><td>current</td><td>It returns the currently executing thread.</td></tr><tr><td>exclusive{block}</td><td>It wraps the block in a single, returning the value of the block.</td></tr><tr><td>exit</td><td>It terminates the currently running thread and schedules another thread tro run.</td></tr><tr><td>kill(thread)</td><td>It causes the given thread to exit.</td></tr><tr><td>fork([args]*){|args| block}</td><td>It is basically same as ::new method.</td></tr><tr><td>handle_interrupt(hash){&#8230;}</td><td>Changes asynchronous interrupt timing.</td></tr><tr><td>list</td><td>Returns an array of thread objects for all threads that are either runnable or stopped.</td></tr><tr><td>main</td><td>Returns the main thread.</td></tr><tr><td>new{&#8230;}/ new(*args, &amp;proc)/ new(*args){|args|&#8230;}</td><td>It creates a new thread executing the given block.</td></tr><tr><td>pass</td><td>It gives the thread scheduler a hint to pass execution to another thread. A running thread may or may not switch depending upon the OS.</td></tr><tr><td>pending_interrupt?(error = nil)</td><td>It returns whether or not the asynchronous queue is empty.</td></tr><tr><td>start([args]*){|args|block}</td><td>It is basically same as ::new method.</td></tr><tr><td>stop</td><td>It stops execution of the current thread, putting it into &#8216;sleep&#8217; state and schedules execution of another thread.</td></tr></tbody></table></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Public Instance Methods</h2>\n\n\n\n<figure class=\"wp-block-table\"><table><tbody><tr><th>Method</th><th>Description</th></tr><tr><td>thr[sym]</td><td>It returns the value of a fiber-local variable using either a string or symbol name.</td></tr><tr><td>thr[sym]=</td><td>It creates the value of a fiber-local variable using either a string or symbol name.</td></tr><tr><td>abort_on_exception</td><td>It returns status of &#8220;abort on exception&#8221; for thr.</td></tr><tr><td>abort_on_exception=</td><td>When set to true, all threads will abort if an exception is raised in this thr.</td></tr><tr><td>add_trace_func(proc)</td><td>Adds proc as a handler for tracing.</td></tr><tr><td>alive?</td><td>It returns true if thr is running or sleeping.</td></tr><tr><td>backtrace</td><td>It returns current backtrace of target ahead.</td></tr><tr><td>backtrace_locations(*args)</td><td>It returns the execution stack for the target ahead.</td></tr><tr><td>exit/kill/terminate</td><td>It terminates thr and executes another thread to run.</td></tr><tr><td>group</td><td>It returns the ThreadGroup which contains the given thread or returns nil.</td></tr><tr><td>inspect</td><td>It dumps the name, id and status of thr to a string.</td></tr><tr><td>join</td><td>The calling thread will suspend execution and run this thr.</td></tr><tr><td>key?(sym)</td><td>It returns true if the given string exists as a fiber-local variable.</td></tr><tr><td>keys</td><td>It returns an array of the name of the fiber-local variables.</td></tr><tr><td>pending_interrupt?(error=nil)</td><td>Returns whether or not the asynchronous queue is empty for the target thread.</td></tr><tr><td>priority</td><td>It returns the priority of thr.</td></tr><tr><td>priority=</td><td>It sets the priority of thr to integer.</td></tr><tr><td>kill</td><td>It works same as exit.</td></tr><tr><td>raise</td><td>It raises an exception from the given thread.</td></tr><tr><td>run</td><td>It wakes up thr, making it eligible for scheduling.</td></tr><tr><td>safe_level</td><td>It returns the safe level in effect for thr.</td></tr><tr><td>set_trace_func(proc)</td><td>It establishes proc on thr as the handler.</td></tr><tr><td>status</td><td>It returns the status of thr.</td></tr><tr><td>stop?</td><td>It returns true if thr is sleeping or dead.</td></tr><tr><td>terminate</td><td>It terminates thr and schedules another thread to run.</td></tr><tr><td>thread_variable?(key)</td><td>It returns true if the given string exists as a thread local variable.</td></tr><tr><td>thread_variable_get(key)</td><td>It returns the value of a thread local variable that has been set.</td></tr><tr><td>thread_variable_set(key, value)</td><td>Set a thread local with key to value.</td></tr><tr><td>thread_variable</td><td>It returns an array of the thread-local variables.</td></tr><tr><td>value</td><td>It waits for thr to complete, using join and returns its value.</td></tr><tr><td>wakeup</td><td>Makes a given thread eligible for scheduling, although it may still remained block on I/O.</td></tr></tbody></table></figure>\n","protected":false},"excerpt":{"rendered":"<p>Thread means lightweight sub-process. It is a separate path of execution. In Ruby, different parts of a program can run at the same time by either splitting tasks within a program using multiple threading or splitting tasks between different programs using multiple process. Threads are the Ruby implementation for a concurrent programming model. Ruby Multithreading [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3063"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3063"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3063/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3063"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3063"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3063"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3065,"date":"2020-08-27T06:51:01","date_gmt":"2020-08-27T06:51:01","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3065"},"modified":"2020-08-27T06:51:01","modified_gmt":"2020-08-27T06:51:01","slug":"ruby-ldap","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-ldap/","title":{"rendered":"Ruby LDAP"},"content":{"rendered":"\n<p>Net::LDAP for Ruby is also written as net::ldap. It stands for Lightweight Directory Access Protocol. It is an internet standard protocol used to access directory servers. Its basic search unit is the entity, which corresponds to a person or other domain-specific object. A directory which supports LDAP protocol, typically stores information about a number of entities.</p>\n\n\n\n<h2>Ruby LDAP Principals</h2>\n\n\n\n<p>The LDAP servers are generally used to access information about people, but sometimes it is also used for items such as computers, printers and other resources.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby LDAP Distinguished Names</h2>\n\n\n\n<p>In LDAP servers, an entity is uniquely identified by a globally-unique text string called as Distinguished name. It is like a DNS hostname, a DN is a &#8220;flattened&#8221; text representation of a string of tree nodes.</p>\n\n\n\n<p>You can query an LDAP-enabled directory for information about the entity if you know the DN of a person or other entity. Otherwise, you can also see the list of DNs matching a set of criteria that you supply.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby LDAP Attributes</h2>\n\n\n\n<p>In LDAP, information about the entity is stored as a set of Attributes. An attribute is a text string which is associated with zero or more values. Most LDAP-enabled directories contain a well standardized range of attributes and constrain their values according to standard values.</p>\n\n\n\n<p>An example for attribute is&nbsp;<strong>sn</strong>. It stands for &#8220;surname&#8221;. This attribute is generally used to store a person&#8217;s surname. Most of the directories follow standard convention that an entity&nbsp;<strong>sn</strong>&nbsp;attribute will have exactly one value.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby LDAP Tree-Base</h2>\n\n\n\n<p>Just like DNS, LDAP assumes that each directory server contains authoritative attribute data for a set of DNs corresponding to a specific sub-tree of global directory tree. This subtree is configured into directory server when it is created. You can&#8217;t query in most of the servers as they will not allow, unless you specify a correct tree-base.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby LDAP Versions</h2>\n\n\n\n<p>Ruby LDAP veraions are stub, discuss v2 and v3.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby LDAP Operations</h2>\n\n\n\n<p>Ruby LDAP operations are:</p>\n\n\n\n<ul><li><strong>#bind :</strong>&nbsp;The #bind operation provides a user&#8217;s authentication credentials to a server. They can provide different credentials for authentication but most of the directories ask for username and password only.</li><li><strong>#add :</strong>&nbsp;The #add operation specifies a new DN and an innitial set of attribute values. On the success of operation, a new entity with the corresponding DN and attributes is added to directory.</li><li><strong>#delete :</strong>&nbsp;The #delete operation specifies an entity DN. On the success of operation, the entity and all its attributes is removed from directory.</li><li><strong>#rename :</strong>&nbsp;The #rename operation is also called #modify_rdn. In earlier LDAP versions the only way to change DN of an entity was to delete the whole entity and add it again with a different DN. But with the introduction of #rename operation in version 3, you can change the DN without discarding its attribute values.</li><li><strong>#search :</strong>&nbsp;The #search operation is called to identify a directory by specifying a treebase, search filters and list of attribute values. Multiple filters can be joined together with NOT, AND and OR operators.</li><li><strong>#modify :</strong>&nbsp;The #modify operation specifies an entity DN and a list of attribute operations. It is used to change the attribute values stored in directory for a particular entity. It may add or delete attributes or change attributes by adding or deleting from their values. There are three methods to modify attribute values: #add_attribute, #delete_attribute and #replace_attreibute.</li></ul>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Installing Net::LDAP</h2>\n\n\n\n<p>The net::LDAP is a pure Ruby library. It does not require any external library. RubyGems version of Net::LDAP can be installed from usual sources.</p>\n\n\n\n<p><strong>Requirements</strong></p>\n\n\n\n<p>The Net::LDAP requires Ruby 2.0.0 interpreter or better.</p>\n\n\n\n<p>To install RubyGems version of Net::LDAP, write the following command:</p>\n\n\n\n<ol><li>gem&nbsp;install&nbsp;net-ldap&nbsp;&nbsp;</li></ol>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Using Ruby net::LDAP</h2>\n\n\n\n<p>The Net::LDAP functionality start by requiring the library.</p>\n\n\n\n<ol><li>require&nbsp;&#8216;net/ldap&#8217;&nbsp;&nbsp;</li></ol>\n\n\n\n<p>If you have installed Gem version, then you need following library.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>require 'rubygems'  \nrequire 'net/ldap'  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Credentials for LDAP connection</h2>\n\n\n\n<p>The Net::LDAP connection is a two step process.</p>\n\n\n\n<pre class=\"wp-block-code\"><code> Instantiating Net:LDAP object</code></pre>\n\n\n\n<p>Most of the Net:LDAP operations start by instantiating Net:LDAP object. The constructor takes arguments specifying address and port of LDAP server.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>LDAP::Conn.new(host='localhost', port=LDAP_PORT)  </code></pre>\n\n\n\n<p><strong>Step 1 :</strong>&nbsp;Authentication (binding)</p>\n\n\n\n<p>Here we need to specify username and password which we will use for the rest of the session.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>conn.bind(dn=nil, password=nil, method=LDAP::LDAP_AUTH_SIMPLE)do  \n....  \nend  </code></pre>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<p>Now we can perform different operations like search, modify or delete inside block of bind method with proper permissions.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Adding a new LDAP entry</h2>\n\n\n\n<p>The following method adds a new entry to remote LDAP server.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>add(args) => object  </code></pre>\n\n\n\n<p><strong>Step 1:</strong>&nbsp;Creating LDAP::Mod object</p>\n\n\n\n<p>The LDAP::Mod object need to be passed to conn.add method to create an entry.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Mod.new(mod_type, attr, vals)  </code></pre>\n\n\n\n<p><strong>mod_type :</strong>&nbsp;You can add one or more option here like LDAP_MOD_ADD, LDAP_MOD_DELETE, LDAP_MOD_REPLACE.</p>\n\n\n\n<p><strong>attr :</strong>&nbsp;It is the name of the attribute.</p>\n\n\n\n<p><strong>vals :</strong>&nbsp;It is an array of values.</p>\n\n\n\n<p><strong>Step 2:</strong>&nbsp;Calling conn.add Method</p>\n\n\n\n<p>After creating LDAP::Mod object, we need to call conn.add method.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>conn.add(dn,&nbsp;attrs)&nbsp;&nbsp;</li></ol>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#/usr/bin/ruby -w   \n  \nrequire 'rubygems'   \nrequire 'net/ldap'   \n  \n$HOST =    'localhost'   \n$PORT =    LDAP::LDAP_PORT   \n$SSLPORT = LDAP::LDAPS_PORT   \n  \nconn = LDAP::Conn.new($HOST, $PORT)   \nconn.bind('cn=root, dc=localhost, dc=localdomain','secret')   \n  \nconn.perror(\"bind\")   \nentry1 = &#91;   \n  LDAP.mod(LDAP::LDAP_MOD_REPLACE, 'sn', &#91;'Steele']),   \n]   \n  \nbegin   \n  conn.modify(\"cn=Anna williams, dc=localhost, dc=localdomain\", entry1)   \nrescue LDAP::ResultError   \n  conn.perror(\"modify\")   \n  exit   \nend   \nconn.perror(\"modify\")   \nconn.unbind  </code></pre>\n\n\n\n<p>The above example will modify the surname in the previous example.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Deleting an LDAP entry</h2>\n\n\n\n<p>The delete method will delete an entry.</p>\n\n\n\n<p><strong>Syntax:</strong></p>\n\n\n\n<ol><li>conn.delete(dn)  </li><li></li></ol>\n\n\n\n<pre class=\"wp-block-code\"><code>#/usr/bin/ruby -w   \n  \nrequire 'rubygems'   \nrequire 'net/ldap'   \n  \n$HOST =   'localhost'   \n$PORT =   LDAP::LDAP_PORT   \n$SSLPORT = LDAP::LDAPS_PORT   \n  \nconn = LDAP::Conn.new($HOST, $PORT)   \nconn.bind('cn=root, dc=localhost, dc=localdomain','secret')   \n  \nconn.perror(\"bind\")   \nbegin   \n  conn.delete(\"cn=Anna Steele, dc=localhost, dc=localdomain\")   \nrescue LDAP::ResultError   \n  conn.perror(\"delete\")   \n  exit   \nend   \nconn.perror(\"delete\")   \nconn.unbind  </code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Search in LDAP</h2>\n\n\n\n<p>There are three different modes to perform search with search method.</p>\n\n\n\n<ul><li><strong>LDAP_SCORE_BASEM :</strong>&nbsp;It will search only the base mode.</li><li><strong>LDAP_SCOPE_ONLEVEL :</strong>&nbsp;It will search all children of the base mode.</li><li><strong>LDAP_SCOPE_SUBTREE :</strong>&nbsp;It will search whole subtree including the base node.</li></ul>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#/usr/bin/ruby -w   \n  \nrequire 'rubygems'   \nrequire 'net/ldap'   \n  \n$HOST =    'localhost'   \n$PORT =    LDAP::LDAP_PORT   \n$SSLPORT = LDAP::LDAPS_PORT   \n  \nbase = 'dc=localhost,dc=localdomain'   \nscope = LDAP::LDAP_SCOPE_SUBTREE   \nfilter = '(objectclass=java)'   \nattrs = &#91;'sn', 'cn']   \n  \nconn = LDAP::Conn.new($HOST, $PORT)   \nconn.bind('cn=root, dc=localhost, dc=localdomain','secret')   \n  \nconn.perror(\"bind\")   \nbegin   \n  conn.search(base, scope, filter, attrs) { |entry|   \n     # print distinguished name   \n     p entry.dn   \n     # print all attribute names   \n     p entry.attrs   \n     # print values of attribute 'sn'   \n     p entry.vals('sn')   \n     # print entry as Hash   \n     p entry.to_hash   \n  }   \nrescue LDAP::ResultError   \n  conn.perror(\"search\")   \n  exit   \nend   \nconn.perror(\"search\")   \nconn.unbind   </code></pre>\n\n\n\n<p>In this example, we will search the whole subtree of entry.</p>\n\n\n\n<p>In the last parameter of search, you can specify any attributes. If nil is passed, all attributes are returned same as &#8220;SELECT∗&#8221; in relational database.</p>\n","protected":false},"excerpt":{"rendered":"<p>Net::LDAP for Ruby is also written as net::ldap. It stands for Lightweight Directory Access Protocol. It is an internet standard protocol used to access directory servers. Its basic search unit is the entity, which corresponds to a person or other domain-specific object. A directory which supports LDAP protocol, typically stores information about a number of [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3065"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3065"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3065/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3065"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3065"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3065"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3067,"date":"2020-08-27T06:53:31","date_gmt":"2020-08-27T06:53:31","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3067"},"modified":"2020-08-27T06:53:31","modified_gmt":"2020-08-27T06:53:31","slug":"ruby-xml-rexml","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-xml-rexml/","title":{"rendered":"Ruby XML (REXML)"},"content":{"rendered":"\n<p>XML is eXtensible Markup Language like HTML. It allows programmers to develop applications that can be read by other applications irrespective of operating system and developmental language used.</p>\n\n\n\n<p>It keeps track of small to medium amounts of data without any SQL based technique in backend.</p>\n\n\n\n<p>REXML is a pure Ruby XML processor. It represents a full XML document including PIs, doctype, etc. An XML document has a single child that can be accessed by root(). If you want to have an XML declaration for a created document, you must add one. REXML documents do not write a default declaration for you.</p>\n\n\n\n<p>REXML was inspired by Electric XML library for Java. Its API is easy to use, small size and have followed the Ruby methodology for method naming and code flow.</p>\n\n\n\n<p>It supports both tree and stream document parsing. Steam parsing is 1.5 times faster than tree parsing. However, in stream parsing you don&#8217;t get access to some features like XPath.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>REXML features:</h2>\n\n\n\n<ul><li>It is written 100 percent in Ruby.</li><li>It contains less than 2000 lines of code, hence, lighter in weight.</li><li>Its methods and classes are easy to understand.</li><li>It is shipped with Ruby installation. No need to install it separately.</li><li>It is used for both DOM and SAX parsing.</li></ul>\n\n\n\n<h2>Parsing XML and accessing elements</h2>\n\n\n\n<p>Let&#8217;s start with parsing an XML document:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>require \"rexml/document\"  \nfile = File.new( \"trial.xml\" )  \ndoc = REXML::Document.new file  </code></pre>\n\n\n\n<p>In the above code, line 3 parses the supplied file.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>require 'rexml/document'   \n  \ninclude REXML   \n  \nfile = File.new(\"trial.xml\")   \ndoc = Document.new(file)   \nputs docs  </code></pre>\n\n\n\n<p>In the above code, the&nbsp;<strong>require</strong>&nbsp;statement loads the REXML library. Then include REXML indicates that we don&#8217;t have to use names like REXML::Document. We have created trial.xml file. Document is shown on the screen.</p>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-xml1.png\" alt=\"Ruby XML 1\"/></figure>\n\n\n\n<p>The&nbsp;<strong>Document.new</strong>&nbsp;method takes IO, String object or Document as its argument. This argument specifies the source from which XML document has to be read.</p>\n\n\n\n<p>If a Document constructor takes a Document as argument, all its element nodes are cloned to new Document object. If the constructor takes a String argument, string will be expected to contain an XML document.</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>XML with &#8220;Here Document&#8221;</h2>\n\n\n\n<p>A here Document is a way to specify a text block, preserving line breaks, whitespaces or identation with text.</p>\n\n\n\n<p>A here Document is constructed using a command followed by &#8220;&lt;&lt;&#8221; followed by a token string.</p>\n\n\n\n<p>In Ruby, there should be no space between &#8220;&lt;&lt;&#8221; and token string.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/env ruby   \n  \nrequire 'rexml/document'   \ninclude REXML   \n  \ninfo = &lt;&lt;XML   \n&lt;info>   \n &lt;name>Caroline&lt;/name>   \n &lt;street>9820 St.&lt;/street>   \n &lt;city>Seattle&lt;/city>   \n &lt;contact>9854126575&lt;/contact>   \n &lt;country>USA&lt;/country>   \n&lt;/info>   \nXML   \n  \ndocument = Document.new( info )   \nputs document  </code></pre>\n\n\n\n<p>Here, we use here Document info. All the characters including newlines between &lt;&lt;EOF and EOF are part of info.</p>\n\n\n\n<p>For XML parsing examples, we will use following XML file code as input:</p>\n\n\n\n<p><strong>file trial.xml</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n  \nrequire 'rexml/document'   \ninclude REXML   \nxmlfile = File.new(\"trial.xml\")   \nxmldoc = Document.new(xmlfile)   \n  \n# Now get the root element   \nroot = xmldoc.root   \nputs \"Root element : \" + root.attributes&#91;\"shelf\"]   \n  \n# This will output all the cloth titles.   \nxmldoc.elements.each(\"collection/clothing\"){   \n   |e| puts \"cloth Title : \" + e.attributes&#91;\"title\"]   \n}   \n  \n# This will output all the cloth types.   \nxmldoc.elements.each(\"collection/clothing/type\") {   \n   |e| puts \"cloth Type : \" + e.text   \n}   \n  \n# This will output all the cloth description.   \nxmldoc.elements.each(\"collection/clothing/description\") {   \n   |e| puts \"cloth Description : \" + e.text   \n}</code></pre>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby XML DOM-Like Parsing</h2>\n\n\n\n<p>We will parse our XML data in tree fashion. The above file trial.xml code is taken as input.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n  \nrequire 'rexml/document'   \ninclude REXML   \n  \nxmlfile = File.new(\"trial.xml\")   \nxmldoc = Document.new(xmlfile)   \n  \n# Now get the root element   \nroot = xmldoc.root   \nputs \"Root element : \" + root.attributes&#91;\"shelf\"]   \n  \n# This will output all the cloth titles.   \nxmldoc.elements.each(\"collection/clothing\"){   \n   |e| puts \"cloth Title : \" + e.attributes&#91;\"title\"]   \n}   \n  \n# This will output all the cloth types.   \nxmldoc.elements.each(\"collection/clothing/type\") {   \n   |e| puts \"cloth Type : \" + e.text   \n}   \n  \n# This will output all the cloth description.   \nxmldoc.elements.each(\"collection/clothing/description\") {   \n   |e| puts \"cloth Description : \" + e.text   \n}  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-xml2.png\" alt=\"Ruby XML 2\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby XML SAX-Like Parsing</h2>\n\n\n\n<p>We will parse our XML data in stream fashion. The above file trial.xml code is taken as input. Here, we will define a listener class whose methods will be targeted for callbacks from the parser.</p>\n\n\n\n<p>It is advisable that do not use SAX-like parsing for a small file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n  \nrequire 'rexml/document'   \nrequire 'rexml/streamlistener'   \ninclude REXML   \n  \nclass MyListener   \n  include REXML::StreamListener   \n  def tag_start(*args)   \n    puts \"tag_start: #{args.map {|x| x.inspect}.join(', ')}\"   \n  end   \n  \n  def text(data)   \n    return if data =~ /^\\w*$/     # whitespace only   \n    abbrev = data&#91;0..40] + (data.length > 40 ? \"...\" : \"\")   \n    puts \"  text   :   #{abbrev.inspect}\"   \n  end   \nend   \n  \nlist = MyListener.new   \nxmlfile = File.new(\"trial.xml\")   \nDocument.parse_stream(xmlfile, list)  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-xml3.png\" alt=\"Ruby XML 3\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>XML is eXtensible Markup Language like HTML. It allows programmers to develop applications that can be read by other applications irrespective of operating system and developmental language used. It keeps track of small to medium amounts of data without any SQL based technique in backend. REXML is a pure Ruby XML processor. It represents a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3067"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3067"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3067/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3067"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3067"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3067"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3069,"date":"2020-08-27T06:54:39","date_gmt":"2020-08-27T06:54:39","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3069"},"modified":"2020-08-27T06:54:39","modified_gmt":"2020-08-27T06:54:39","slug":"ruby-xpath-and-xslt","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-xpath-and-xslt/","title":{"rendered":"Ruby XPath and XSLT"},"content":{"rendered":"\n<h2>Ruby XPath</h2>\n\n\n\n<p>Ruby XPath is a language to find information in an XML file. It is an alternative to view XML file. It is used to navigate through elements and attributes in an XML document, treating that document as a logical ordered tree.</p>\n\n\n\n<p>Ruby XPath is very useful to get relevant information and attributes from XML file. It takes tree-based parsing.</p>\n\n\n\n<p><strong>Example:</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>#!/usr/bin/ruby -w   \n  \nrequire 'rexml/document'   \ninclude REXML   \n  \nxmlfile = File.new(\"trial.xml\")   \nxmldoc = Document.new(xmlfile)   \n  \n# Info for the first cloth found   \nclothing = XPath.first(xmldoc, \"//clothing\")   \np clothing   \n  \n# Print out all the cloth types   \nXPath.each(xmldoc, \"//type\") { |e| puts e.text }   \n  \n# Get an array of all of the cloth brands.   \nnames = XPath.match(xmldoc, \"//brand\").map {|x| x.text }   \np names  </code></pre>\n\n\n\n<p>Output:</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://static.javatpoint.com/ruby/images/ruby-xpath-and-xslt1.png\" alt=\"Ruby Xpath and xslt 1\"/></figure>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<h2>Ruby XSLT</h2>\n\n\n\n<p>Ruby XSLT is a simple class based on libxml and libxslt. There are two XSLT parsers available for Ruby.</p>\n\n\n\n<ul><li>Ruby-Sablotron</li><li>XSLT4R</li></ul>\n\n\n\n<p>It is freely distributable according to the terms of GNU. This program is distributed without any warranty.</p>\n\n\n\n<p><strong>Ruby-Sablotron</strong></p>\n\n\n\n<p>It is mainly written for Linux operating system and is written by Masayoshi Takahashi.</p>\n\n\n\n<p>It requires the following libraries:</p>\n\n\n\n<ul><li>Sablot</li><li>Iconv</li><li>Expat</li></ul>\n\n\n\n<p><strong>XSLT4R</strong></p>\n\n\n\n<p>It is written by Michael Neumann. It uses a simple command line interface and it can be alternatively used within a third-party application to transform an XML document.</p>\n\n\n\n<p>XSLT4R needs XMLScan to operate, which is included within the XSLT4R archieve. These modules need to be installed using standard Ruby installation method.</p>\n\n\n\n<p>Syntax:</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ruby xslt.rb stylesheet.xsl document.xml &#91;arguments] </code></pre>\n\n\n\n<p>To use XSLT4R within an application, you need to include XSLT and input the parameters you need.</p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby XPath Ruby XPath is a language to find information in an XML file. It is an alternative to view XML file. It is used to navigate through elements and attributes in an XML document, treating that document as a logical ordered tree. Ruby XPath is very useful to get relevant information and attributes from [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3069"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3069"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3069/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3069"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3069"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3069"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3239,"date":"2020-09-01T05:22:23","date_gmt":"2020-09-01T05:22:23","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3239"},"modified":"2020-09-01T05:22:23","modified_gmt":"2020-09-01T05:22:23","slug":"ruby-on-rails-tutorial","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-tutorial/","title":{"rendered":"Ruby on Rails Tutorial"},"content":{"rendered":"\n<p>Ruby on Rails is an extremely productive web application framework written in Ruby by David Heinemeier Hansson. This tutorial gives you a complete understanding on Ruby on Rails.</p>\n\n\n\n<h1>Audience</h1>\n\n\n\n<p>This tutorial has been designed for beginners who would like to use the Ruby framework for developing database-backed web applications.</p>\n\n\n\n<h1>Prerequisites</h1>\n\n\n\n<p>You need to have a basic knowledge of Ruby and object-oriented programming to understand this tutorial. In addition, you need to be familiar with internet and websites programming in general.</p>\n","protected":false},"excerpt":{"rendered":"<p>Ruby on Rails is an extremely productive web application framework written in Ruby by David Heinemeier Hansson. This tutorial gives you a complete understanding on Ruby on Rails. Audience This tutorial has been designed for beginners who would like to use the Ruby framework for developing database-backed web applications. Prerequisites You need to have a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3239"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3239"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3239/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3239"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3239"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3239"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3241,"date":"2020-09-01T05:24:31","date_gmt":"2020-09-01T05:24:31","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3241"},"modified":"2020-09-01T05:24:31","modified_gmt":"2020-09-01T05:24:31","slug":"ruby-on-rails-introduction","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-introduction/","title":{"rendered":"Ruby on Rails &#8211; Introduction"},"content":{"rendered":"\n<h2>What is Ruby?</h2>\n\n\n\n<p>Before we ride on Rails, let us recapitulate a few points of Ruby, which is the base of Rails.</p>\n\n\n\n<p>Ruby is the successful combination of −</p>\n\n\n\n<ul><li>Smalltalk&#8217;s conceptual elegance,</li><li>Python&#8217;s ease of use and learning, and</li><li>Perl&#8217;s pragmatism.</li></ul>\n\n\n\n<p>Ruby is −</p>\n\n\n\n<ul><li>A high-level programming language.</li><li>Interpreted like Perl, Python, Tcl/TK.</li><li>Object-oriented like Smalltalk, Eiffel, Ada, Java.</li></ul>\n\n\n\n<h2>Why Ruby?</h2>\n\n\n\n<p>Ruby originated in Japan and now it is gaining popularity in US and Europe as well. The following factors contribute towards its popularity −</p>\n\n\n\n<ul><li>Easy to learn</li><li>Open source (very liberal license)</li><li>Rich libraries</li><li>Very easy to extend</li><li>Truly object-oriented</li><li>Less coding with fewer bugs</li><li>Helpful community</li></ul>\n\n\n\n<p>Although we have many reasons to use Ruby, there are a few drawbacks as well that you may have to consider before implementing Ruby −</p>\n\n\n\n<ul><li><strong>Performance Issues</strong>&nbsp;− Although it rivals Perl and Python, it is still an interpreted language and we cannot compare it with high-level programming languages like C or C++.</li><li><strong>Threading model</strong>&nbsp;− Ruby does not use native threads. Ruby threads are simulated in the VM rather than running as native OS threads.</li></ul>\n\n\n\n<h2>Sample Ruby Code</h2>\n\n\n\n<p>Here is a sample Ruby code to print &#8220;Hello Ruby&#8221;</p>\n\n\n\n<pre class=\"wp-block-code\"><code># The Hello Class\nclass Hello\n   \n   def initialize( name )\n      @name = name.capitalize\n   end\n\n   def salute\n      puts \"Hello #{@name}!\"\n   end\n   \nend\n\n# Create a new object\nh = Hello.new(\"Ruby\")\n\n# Output \"Hello Ruby!\"\nh.salute</code></pre>\n\n\n\n<p><strong>Output</strong>&nbsp;− This will produce the following result −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Hello Ruby!\n</code></pre>\n\n\n\n<h2>Embedded Ruby</h2>\n\n\n\n<p>Ruby provides a program called ERB (Embedded Ruby), written by&nbsp;<em>Seki Masatoshi</em>. ERB allows you to put Ruby codes inside an HTML file. ERB reads along, word for word, and then at a certain point, when it encounters a Ruby code embedded in the document, it starts executing the Ruby code.</p>\n\n\n\n<p>You need to know only two things to prepare an ERB document −</p>\n\n\n\n<ul><li>If you want some Ruby code executed, enclose it between&nbsp;<strong>&lt;%</strong>&nbsp;and&nbsp;<strong>%&gt;.</strong></li><li>If you want the result of the code execution to be printed out, as a part of the output, enclose the code between&nbsp;<strong>&lt;%=</strong>&nbsp;and&nbsp;<strong>%&gt;</strong>.</li></ul>\n\n\n\n<p>Here&#8217;s an example. Save the code in erbdemo.rb file. Note that a Ruby file will have an extension <strong>.rb</strong> −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;% page_title = \"Demonstration of ERB\" %>\n&lt;% salutation = \"Dear programmer,\" %>\n\n&lt;html>\n\n   &lt;head>\n      &lt;title>&lt;%= page_title %>&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;p>&lt;%= salutation %>&lt;/p>\n      &lt;p>This is an example of how ERB fills out a template.&lt;/p>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<p>Now, run the program using the command-line utility&nbsp;<strong>erb</strong>.</p>\n\n\n\n<pre class=\"wp-block-preformatted\">tp&gt; erb erbdemo.rb\n</pre>\n\n\n\n<p>This will produce the following result −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n\n   &lt;head>\n      &lt;title>Demonstration of ERb&lt;/title>\n   &lt;/head>\n\t\n   &lt;body>\n      &lt;p>Dear programmer,&lt;/p>\n      &lt;p>This is an example  of how ERb fills out a template.&lt;/p>\n   &lt;/body>\n\t\n&lt;/html></code></pre>\n\n\n\n<h2>What is Rails?</h2>\n\n\n\n<ul><li>An extremely productive web-application framework.</li><li>Written in Ruby by David Heinemeier Hansson.</li><li>You could develop a web application at least ten times faster with Rails than you could with a typical Java framework.</li><li>An open source Ruby framework for developing database-backed web applications.</li><li>Configure your code with Database Schema.</li><li>No compilation phase required.</li></ul>\n\n\n\n<h2>Full Stack Framework</h2>\n\n\n\n<ul><li>Includes everything needed to create a database-driven web application, using the Model-View-Controller pattern.</li><li>Being a full-stack framework means all the layers are built to work seamlessly together with less code.</li><li>Requires fewer lines of code than other frameworks.</li></ul>\n\n\n\n<h2>Convention over Configuration</h2>\n\n\n\n<ul><li>Rails shuns configuration files in favor of conventions, reflection, and dynamic runtime extensions.</li><li>Your application code and your running database already contain everything that Rails needs to know!</li></ul>\n\n\n\n<h2>Rails Strengths</h2>\n\n\n\n<p>Rails is packed with features that make you more productive, with many of the following features building on one other.</p>\n\n\n\n<h3>Metaprogramming</h3>\n\n\n\n<p>Where other frameworks use extensive code generation from scratch, Rail framework uses Metaprogramming techniques to write programs. Ruby is one of the best languages for Metaprogramming, and Rails uses this capability well. Rails also uses code generation but relies much more on Metaprogramming for the heavy lifting.</p>\n\n\n\n<h3>Active Record</h3>\n\n\n\n<p>Rails introduces the Active Record framework, which saves objects into the database. The Rails version of the Active Record discovers the columns in a database schema and automatically attaches them to your domain objects using metaprogramming.</p>\n\n\n\n<h3>Convention over configuration</h3>\n\n\n\n<p>Most web development frameworks for .NET or Java force you to write pages of configuration code. If you follow the suggested naming conventions, Rails doesn&#8217;t need much configuration.</p>\n\n\n\n<h3>Scaffolding</h3>\n\n\n\n<p>You often create temporary code in the early stages of development to help get an application up quickly and see how major components work together. Rails automatically creates much of the scaffolding you&#8217;ll need.</p>\n\n\n\n<h3>Built-in testing</h3>\n\n\n\n<p>Rails creates simple automated tests you can then extend. Rails also provides supporting code called harnesses and fixtures that make test cases easier to write and run. Ruby can then execute all your automated tests with the rake utility.</p>\n\n\n\n<h3>Three environments</h3>\n\n\n\n<p>Rails gives you three default environments: development, testing, and production. Each behaves slightly differently, making your entire software development cycle easier. For example, Rails creates a fresh copy of the Test database for each test run.</p>\n","protected":false},"excerpt":{"rendered":"<p>What is Ruby? Before we ride on Rails, let us recapitulate a few points of Ruby, which is the base of Rails. Ruby is the successful combination of − Smalltalk&#8217;s conceptual elegance, Python&#8217;s ease of use and learning, and Perl&#8217;s pragmatism. Ruby is − A high-level programming language. Interpreted like Perl, Python, Tcl/TK. Object-oriented like [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3241"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3241"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3241/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3241"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3241"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3241"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3244,"date":"2020-09-01T05:31:59","date_gmt":"2020-09-01T05:31:59","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3244"},"modified":"2020-09-01T05:31:59","modified_gmt":"2020-09-01T05:31:59","slug":"ruby-on-rails-installation","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-installation/","title":{"rendered":"Ruby on Rails &#8211; Installation"},"content":{"rendered":"\n<p>To develop a web application using Ruby on Rails Framework, you need to install the following software −</p>\n\n\n\n<ul><li>Ruby</li><li>The Rails Framework</li><li>A Web Server</li><li>A Database System</li></ul>\n\n\n\n<p>We assume that you already have installed a Web Server and a Database System on your computer. You can use the WEBrick Web Server, which comes with Ruby. Most websites however use Apache or lightTPD web servers in production.</p>\n\n\n\n<p>Rails works with many database systems, including MySQL, PostgreSQL, SQLite, Oracle, DB2 and SQL Server. Please refer to a corresponding Database System Setup manual to set up your database.</p>\n\n\n\n<p>Let&#8217;s look at the installation instructions for Rails on Windows and Linux.</p>\n\n\n\n<h2>Rails Installation on Windows</h2>\n\n\n\n<p>Follow the steps given below for installing Ruby on Rails.</p>\n\n\n\n<h3>Step 1: Check Ruby Version</h3>\n\n\n\n<p>First, check if you already have Ruby installed. Open the command prompt and type&nbsp;<strong>ruby -v</strong>. If Ruby responds, and if it shows a version number at or above 2.2.2, then type&nbsp;<strong>gem &#8211;version</strong>. If you don&#8217;t get an error, skip&nbsp;<strong>Install Ruby</strong>&nbsp;step. Otherwise, we&#8217;ll install a fresh Ruby.</p>\n\n\n\n<h3>Step 2: Install Ruby</h3>\n\n\n\n<p>If Ruby is not installed, then download an installation package from&nbsp;<a target=\"_blank\" rel=\"noreferrer noopener\" href=\"http://rubyinstaller.org/\">rubyinstaller.org</a>. Follow the&nbsp;<strong>download</strong>&nbsp;link, and run the resulting installer. This is an exe file&nbsp;<strong>rubyinstaller-2.2.2.x.exe</strong>&nbsp;and will be installed in a single click. It&#8217;s a very small package, and you&#8217;ll get RubyGems as well along with this package. Please check the&nbsp;<strong>Release Notes</strong>&nbsp;for more detail.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ruby_home.jpg\" alt=\"Ruby Home\"/></figure>\n\n\n\n<h3>Step 3: Install Rails</h3>\n\n\n\n<p><strong>Install Rails</strong>&nbsp;− With Rubygems loaded, you can install all of Rails and its dependencies using the following command through the command line −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\> gem install rails\n</code></pre>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/gem_install.jpg\" alt=\"GEM Install\"/></figure>\n\n\n\n<p><strong>Note</strong>&nbsp;− The above command may take some time to install all dependencies. Make sure you are connected to the internet while installing gems dependencies.</p>\n\n\n\n<h3>Step 4: Check Rails Version</h3>\n\n\n\n<p>Use the following command to check the rails version.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>C:\\> rails -v\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rails 4.2.4\n</code></pre>\n\n\n\n<p>Congratulations! You are now on Rails over Windows.</p>\n\n\n\n<h2>Rails Installation on Linux</h2>\n\n\n\n<p>We are installing Ruby On Rails on Linux using&nbsp;<strong>rbenv</strong>. It is a lightweight Ruby Version Management Tool. The&nbsp;<strong>rbenv</strong>&nbsp;provides an easy installation procedure to manage various versions of Ruby, and a solid environment for developing Ruby on Rails applications.</p>\n\n\n\n<p>Follow the steps given below to install Ruby on Rails using rbenv tool.</p>\n\n\n\n<h3>Step 1: Install Prerequisite Dependencies</h3>\n\n\n\n<p>First of all, we have to install&nbsp;<strong>git &#8211; core</strong>&nbsp;and some ruby dependences that help to install Ruby on Rails. Use the following command for installing Rails dependencies using&nbsp;<strong>yum</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> sudo yum install -y git-core zlib zlib-devel gcc-c++ patch readline readline-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison curl sqlite-devel\n</code></pre>\n\n\n\n<h3>Step 2: Install rbenv</h3>\n\n\n\n<p>Now we will install rbenv and set the appropriate environment variables. Use the following set of commands to get rbenv for git repository.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> git clone git://github.com/sstephenson/rbenv.git .rbenv\ntp> echo 'export PATH = \"$HOME/.rbenv/bin:$PATH\"' >> ~/.bash_profile\ntp> echo 'eval \"$(rbenv init -)\"' >> ~/.bash_profile\ntp> exec $SHELL\n\ntp> git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build\ntp> echo 'export PATH = \"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' &lt;&lt; ~/.bash_profile\ntp> exec $SHELL\n</code></pre>\n\n\n\n<h3>Step 3: Install Ruby</h3>\n\n\n\n<p>Before installing Ruby, determine which version of Ruby you want to install. We will install Ruby 2.2.3. Use the following command for installing Ruby.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rbenv install -v 2.2.3\n</code></pre>\n\n\n\n<p>Use the following command for setting up the current Ruby version as default.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rbenv global 2.2.3\n</code></pre>\n\n\n\n<p>Use the following command to verify the Ruby version.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> ruby -v\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>ruby 2.2.3p173 (2015-08-18 revivion 51636) &#91;X86_64-linux]\n</code></pre>\n\n\n\n<p>Ruby provides a keyword&nbsp;<strong>gem</strong>&nbsp;for installing the supported dependencies; we call them&nbsp;<strong>gems</strong>. If you don&#8217;t want to install the documentation for Ruby-gems, then use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> echo \"gem: --no-document\" > ~/.gemrc\n</code></pre>\n\n\n\n<p>Thereafter, it is better to install the Bundler gem, because it helps to manage your application dependencies. Use the following command to install bundler gem.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> gem install bundler\n</code></pre>\n\n\n\n<h3>Step 4: Install Rails</h3>\n\n\n\n<p>Use the following command for installing Rails version 4.2.4.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> install rails -v 4.2.4\n</code></pre>\n\n\n\n<p>Use the following command to make Rails executable available.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rbenv rehash\n</code></pre>\n\n\n\n<p>Use the following command for checking the rails version.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rails -v\n</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> Rails 4.2.4\n</code></pre>\n\n\n\n<p>Ruby on Rails framework requires JavaScript Runtime Environment (Node.js) to manage the features of Rails. Next, we will see how we can use Node.js to manage Asset Pipeline which is a Rails feature.</p>\n\n\n\n<h3>Step 5: Install JavaScript Runtime</h3>\n\n\n\n<p>Let us install Node.js from the Yum repository. We will take Node.js from EPEL yum repository. Use the following command to add the EPEL package to the yum repository.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> sudo yum -y install epel-release</code></pre>\n\n\n\n<p>Use the following command for installing the Node.js package.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> sudo yum install nodejs\n</code></pre>\n\n\n\n<p>Congratulations! You are now on Rails over Linux.</p>\n\n\n\n<h3>Step 6: Install Database</h3>\n\n\n\n<p>By default, Rails uses sqlite3, but you may want to install MySQL, PostgreSQL, or other RDBMS. This is optional; if you have the database installed, then you may skip this step and it is not mandatory that you have a database installed to start the rails server. For this tutorial, we are using PostgreSQL database. Therefore use the following commands to install PostgreSQL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> sudo yum install postgresql-server postgresql-contrib</code></pre>\n\n\n\n<p>Accept the prompt, by responding with a <strong>y</strong>. Use the following command to create a PostgreSQl database cluster.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> sudo postgresql-setup initdb</code></pre>\n\n\n\n<p>Use the following command to start and enable PostgreSQL.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> sudo systemctl start postgresql\ntp> sudo systemctl enable postgresql\n</code></pre>\n\n\n\n<h2>Keeping Rails Up-to-Date</h2>\n\n\n\n<p>Assuming you have installed Rails using RubyGems, keeping it up-to-date is relatively easy. We can use the same command in both Windows and Linux platform. Use the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> gem update rails</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<p>The following screenshot shows a Windows command prompt. The Linux terminal also provides the same output.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/gem_update.png\" alt=\"GEM Update\"/></figure>\n\n\n\n<p>This will automatically update your Rails installation. The next time you restart your application, it will pick up this latest version of Rails. While using this command, make sure you are connected to the internet.</p>\n\n\n\n<h2>Installation Verification</h2>\n\n\n\n<p>You can verify if everything is set up according to your requirements or not. Use the following command to create a demo project.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rails new demo</code></pre>\n\n\n\n<p><strong>Output</strong></p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/rails_new_demo.jpg\" alt=\"Rails New Demo\"/></figure>\n\n\n\n<p>It will generate a demo rail project; we will discuss about it later. Currently we have to check if the environment is set up or not. Next, use the following command to run WEBrick web server on your machine.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> cd demo\ntp> rails server\n</code></pre>\n\n\n\n<p>It will generate auto-code to start the server</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/rails_server.jpg\" alt=\"Rails Server\"/></figure>\n\n\n\n<p>Now open your browser and type the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>http:&#47;&#47;localhost:3000</code></pre>\n\n\n\n<p>It should display a message, something like, &#8220;Welcome aboard&#8221; or &#8220;Congratulations&#8221;.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/rails_welcome.jpg\" alt=\"Rails Welcome\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>To develop a web application using Ruby on Rails Framework, you need to install the following software − Ruby The Rails Framework A Web Server A Database System We assume that you already have installed a Web Server and a Database System on your computer. You can use the WEBrick Web Server, which comes with [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3244"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3244"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3244/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3244"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3244"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3244"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3246,"date":"2020-09-01T05:36:19","date_gmt":"2020-09-01T05:36:19","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3246"},"modified":"2020-09-01T05:36:19","modified_gmt":"2020-09-01T05:36:19","slug":"ruby-on-rails-framework","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-framework/","title":{"rendered":"Ruby on Rails &#8211; Framework"},"content":{"rendered":"\n<p>A framework is a program, set of programs, and/or code library that writes most of your application for you. When you use a framework, your job is to write the parts of the application that make it do the specific things you want.</p>\n\n\n\n<p>When you set out to write a Rails application, leaving aside the configuration and other housekeeping chores, you have to perform three primary tasks −</p>\n\n\n\n<ul><li><strong>Describe and model your application&#8217;s domain</strong>&nbsp;− The domain is the universe of your application. The domain may be a music store, a university, a dating service, an address book, or a hardware inventory. So here you have to figure out what&#8217;s in it, what entities exist in this universe and how the items in it relate to each other. This is equivalent to modeling a database structure to keep the entities and their relationship.</li><li><strong>Specify what can happen in this domain</strong>&nbsp;− The domain model is static; you have to make it dynamic. Addresses can be added to an address book. Musical scores can be purchased from music stores. Users can log in to a dating service. Students can register for classes at a university. You need to identify all the possible scenarios or actions that the elements of your domain can participate in.</li><li><strong>Choose and design the publicly available views of the domain</strong>&nbsp;− At this point, you can start thinking in Web-browser terms. Once you&#8217;ve decided that your domain has students, and that they can register for classes, you can envision a welcome page, a registration page, and a confirmation page, etc. Each of these pages, or views, shows the user how things stand at a certain point.</li></ul>\n\n\n\n<p>Based on the above three tasks, Ruby on Rails deals with a Model/View/Controller (MVC) framework.</p>\n\n\n\n<h2>Ruby on Rails MVC Framework</h2>\n\n\n\n<p>The&nbsp;<strong><u>M</u></strong>odel&nbsp;<strong><u>V</u></strong>iew&nbsp;<strong><u>C</u></strong>ontroller principle divides the work of an application into three separate but closely cooperative subsystems.</p>\n\n\n\n<h3>Model (ActiveRecord )</h3>\n\n\n\n<p>It maintains the relationship between the objects and the database and handles validation, association, transactions, and more.</p>\n\n\n\n<p>This subsystem is implemented in ActiveRecord library, which provides an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are automatically generated from the field names of database tables.</p>\n\n\n\n<h3>View ( ActionView )</h3>\n\n\n\n<p>It is a presentation of data in a particular format, triggered by a controller&#8217;s decision to present the data. They are script-based template systems like JSP, ASP, PHP, and very easy to integrate with AJAX technology.</p>\n\n\n\n<p>This subsystem is implemented in ActionView library, which is an Embedded Ruby (ERb) based system for defining presentation templates for data presentation. Every Web connection to a Rails application results in the displaying of a view.</p>\n\n\n\n<h3>Controller ( ActionController )</h3>\n\n\n\n<p>The facility within the application that directs traffic, on the one hand, querying the models for specific data, and on the other hand, organizing that data (searching, sorting, messaging it) into a form that fits the needs of a given view.</p>\n\n\n\n<p>This subsystem is implemented in ActionController, which is a data broker sitting between ActiveRecord (the database interface) and ActionView (the presentation engine).</p>\n\n\n\n<h2>Pictorial Representation of MVC Framework</h2>\n\n\n\n<p>Given below is a pictorial representation of Ruby on Rails Framework −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/rails-framework.gif\" alt=\"Rails Framework\"/></figure>\n\n\n\n<h2>Directory Representation of MVC Framework</h2>\n\n\n\n<p>Assuming a standard, default installation over Linux, you can find them like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> cd /usr/local/lib/ruby/gems/2.2.0/gems\ntp> ls\n</code></pre>\n\n\n\n<p>You will see subdirectories including (but not limited to) the following −</p>\n\n\n\n<ul><li>actionpack-x.y.z</li><li>activerecord-x.y.z</li><li>rails-x.y.z</li></ul>\n\n\n\n<p>Over a windows installation, you can find them like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp>cd ruby\\lib\\ruby\\gems\\2.2.0\\gems\nruby\\lib\\ruby\\gems\\2.2.0\\gems\\>dir\n</code></pre>\n\n\n\n<p>You will see subdirectories including (but not limited to) the following −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/mvc.jpg\" alt=\"MVC\"/></figure>\n\n\n\n<p>ActionView and ActionController are bundled together under ActionPack.</p>\n\n\n\n<p>ActiveRecord provides a range of programming techniques and shortcuts for manipulating data from an SQL database. ActionController and ActionView provides facilities for manipulating and displaying that data. Rails ties it all together.</p>\n\n\n\n<p>A framework is a program, set of programs, and/or code library that writes most of your application for you. When you use a framework, your job is to write the parts of the application that make it do the specific things you want.</p>\n\n\n\n<p>When you set out to write a Rails application, leaving aside the configuration and other housekeeping chores, you have to perform three primary tasks −</p>\n\n\n\n<ul><li><strong>Describe and model your application&#8217;s domain</strong>&nbsp;− The domain is the universe of your application. The domain may be a music store, a university, a dating service, an address book, or a hardware inventory. So here you have to figure out what&#8217;s in it, what entities exist in this universe and how the items in it relate to each other. This is equivalent to modeling a database structure to keep the entities and their relationship.</li><li><strong>Specify what can happen in this domain</strong>&nbsp;− The domain model is static; you have to make it dynamic. Addresses can be added to an address book. Musical scores can be purchased from music stores. Users can log in to a dating service. Students can register for classes at a university. You need to identify all the possible scenarios or actions that the elements of your domain can participate in.</li><li><strong>Choose and design the publicly available views of the domain</strong>&nbsp;− At this point, you can start thinking in Web-browser terms. Once you&#8217;ve decided that your domain has students, and that they can register for classes, you can envision a welcome page, a registration page, and a confirmation page, etc. Each of these pages, or views, shows the user how things stand at a certain point.</li></ul>\n\n\n\n<p>Based on the above three tasks, Ruby on Rails deals with a Model/View/Controller (MVC) framework.</p>\n\n\n\n<h2>Ruby on Rails MVC Framework</h2>\n\n\n\n<p>The&nbsp;<strong><u>M</u></strong>odel&nbsp;<strong><u>V</u></strong>iew&nbsp;<strong><u>C</u></strong>ontroller principle divides the work of an application into three separate but closely cooperative subsystems.</p>\n\n\n\n<h3>Model (ActiveRecord )</h3>\n\n\n\n<p>It maintains the relationship between the objects and the database and handles validation, association, transactions, and more.</p>\n\n\n\n<p>This subsystem is implemented in ActiveRecord library, which provides an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are automatically generated from the field names of database tables.</p>\n\n\n\n<h3>View ( ActionView )</h3>\n\n\n\n<p>It is a presentation of data in a particular format, triggered by a controller&#8217;s decision to present the data. They are script-based template systems like JSP, ASP, PHP, and very easy to integrate with AJAX technology.</p>\n\n\n\n<p>This subsystem is implemented in ActionView library, which is an Embedded Ruby (ERb) based system for defining presentation templates for data presentation. Every Web connection to a Rails application results in the displaying of a view.</p>\n\n\n\n<h3>Controller ( ActionController )</h3>\n\n\n\n<p>The facility within the application that directs traffic, on the one hand, querying the models for specific data, and on the other hand, organizing that data (searching, sorting, messaging it) into a form that fits the needs of a given view.</p>\n\n\n\n<p>This subsystem is implemented in ActionController, which is a data broker sitting between ActiveRecord (the database interface) and ActionView (the presentation engine).</p>\n\n\n\n<h2>Pictorial Representation of MVC Framework</h2>\n\n\n\n<p>Given below is a pictorial representation of Ruby on Rails Framework −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/rails-framework.gif\" alt=\"Rails Framework\"/></figure>\n\n\n\n<h2>Directory Representation of MVC Framework</h2>\n\n\n\n<p>Assuming a standard, default installation over Linux, you can find them like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> cd /usr/local/lib/ruby/gems/2.2.0/gems\ntp> ls\n</code></pre>\n\n\n\n<p>You will see subdirectories including (but not limited to) the following −</p>\n\n\n\n<ul><li>actionpack-x.y.z</li><li>activerecord-x.y.z</li><li>rails-x.y.z</li></ul>\n\n\n\n<p>Over a windows installation, you can find them like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp>cd ruby\\lib\\ruby\\gems\\2.2.0\\gems\nruby\\lib\\ruby\\gems\\2.2.0\\gems\\>dir\n</code></pre>\n\n\n\n<p>You will see subdirectories including (but not limited to) the following −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/mvc.jpg\" alt=\"MVC\"/></figure>\n\n\n\n<p>ActionView and ActionController are bundled together under ActionPack.</p>\n\n\n\n<p>ActiveRecord provides a range of programming techniques and shortcuts for manipulating data from an SQL database. ActionController and ActionView provides facilities for manipulating and displaying that data. Rails ties it all together.</p>\n\n\n\n<p>ActiveRecord provides a range of programming techniques and shortcuts for manipulating data from an SQL database. ActionController and ActionView provides facilities for manipulating and displaying that data. Rails ties it all together.</p>\n","protected":false},"excerpt":{"rendered":"<p>A framework is a program, set of programs, and/or code library that writes most of your application for you. When you use a framework, your job is to write the parts of the application that make it do the specific things you want. When you set out to write a Rails application, leaving aside the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3246"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3246"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3246/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3246"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3246"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3246"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3248,"date":"2020-09-01T05:37:47","date_gmt":"2020-09-01T05:37:47","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3248"},"modified":"2020-09-01T05:37:47","modified_gmt":"2020-09-01T05:37:47","slug":"ruby-on-rails-directory-structure","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-directory-structure/","title":{"rendered":"Ruby on Rails &#8211; Directory Structure"},"content":{"rendered":"\n<p>When you use the Rails helper script to create your application, it creates the entire directory structure for the application. Rails knows where to find things it needs within this structure, so you don&#8217;t have to provide any input.</p>\n\n\n\n<p>Here is a top-level view of a directory tree created by the helper script at the time of application creation. Except for minor changes between releases, every Rails project will have the same structure, with the same naming conventions. This consistency gives you a tremendous advantage; you can quickly move between Rails projects without relearning the project&#8217;s organization.</p>\n\n\n\n<p>To understand this directory structure, let&#8217;s use the&nbsp;<strong>demo</strong>&nbsp;application created in the Installation chapter. It can be created using a simple helper command&nbsp;<strong>rails demo</strong>.</p>\n\n\n\n<p>Now, go into the demo application root directory as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> cd demo\ndemo> dir\n</code></pre>\n\n\n\n<p>You will find a directory structure in Windows as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/dir.jpg\" alt=\"Directory\"/></figure>\n\n\n\n<p>Now let&#8217;s explain the purpose of each directory</p>\n\n\n\n<ul><li><strong>app</strong>&nbsp;− It organizes your application components. It&#8217;s got subdirectories that hold the view (views and helpers), controller (controllers), and the backend business logic (models).</li><li><strong>app/controllers</strong>&nbsp;− The controllers subdirectory is where Rails looks to find the controller classes. A controller handles a web request from the user.</li><li><strong>app/helpers</strong>&nbsp;− The helpers subdirectory holds any helper classes used to assist the model, view, and controller classes. This helps to keep the model, view, and controller code small, focused, and uncluttered.</li><li><strong>app/models</strong>&nbsp;− The models subdirectory holds the classes that model and wrap the data stored in our application&#8217;s database. In most frameworks, this part of the application can grow pretty messy, tedious, verbose, and error-prone. Rails makes it dead simple!</li><li><strong>app/view</strong>&nbsp;− The views subdirectory holds the display templates to fill in with data from our application, convert to HTML, and return to the user&#8217;s browser.</li><li><strong>app/view/layouts</strong>&nbsp;− Holds the template files for layouts to be used with views. This models the common header/footer method of wrapping views. In your views, define a layout using the &lt;tt&gt;layout:default&lt;/tt&gt; and create a file named default.html.erb. Inside default.html.erb, call &lt;% yield %&gt; to render the view using this layout.</li><li><strong>components</strong>&nbsp;− This directory holds components, tiny self-contained applications that bundle model, view, and controller.</li><li><strong>config</strong>&nbsp;− This directory contains the small amount of configuration code that your application will need, including your database configuration (in database.yml), your Rails environment structure (environment.rb), and routing of incoming web requests (routes.rb). You can also tailor the behavior of the three Rails environments for test, development, and deployment with files found in the environments directory.</li><li><strong>db</strong>&nbsp;− Usually, your Rails application will have model objects that access relational database tables. You can manage the relational database with scripts you create and place in this directory.</li><li><strong>doc</strong>&nbsp;− Ruby has a framework, called RubyDoc, that can automatically generate documentation for code you create. You can assist RubyDoc with comments in your code. This directory holds all the RubyDoc-generated Rails and application documentation.</li><li><strong>lib</strong>&nbsp;− You&#8217;ll put libraries here, unless they explicitly belong elsewhere (such as vendor libraries).</li><li><strong>log</strong>&nbsp;− Error logs go here. Rails creates scripts that help you manage various error logs. You&#8217;ll find separate logs for the server (server.log) and each Rails environment (development.log, test.log, and production.log).</li><li><strong>public</strong>&nbsp;− Like the public directory for a web server, this directory has web files that don&#8217;t change, such as JavaScript files (public/javascripts), graphics (public/images), stylesheets (public/stylesheets), and HTML files (public).</li><li><strong>script</strong>&nbsp;− This directory holds scripts to launch and manage the various tools that you&#8217;ll use with Rails. For example, there are scripts to generate code (generate) and launch the web server (server).</li><li><strong>test</strong>&nbsp;− The tests you write and those that Rails creates for you, all goes here. You&#8217;ll see a subdirectory for mocks (mocks), unit tests (unit), fixtures (fixtures), and functional tests (functional).</li><li><strong>tmp</strong>&nbsp;− Rails uses this directory to hold temporary files for intermediate processing.</li><li><strong>vendor</strong>&nbsp;− Libraries provided by third-party vendors (such as security libraries or database utilities beyond the basic Rails distribution) go here.</li></ul>\n\n\n\n<p>Apart from these directories, there will be two files available in demo directory.</p>\n\n\n\n<ul><li><strong>README</strong>&nbsp;− This file contains a basic detail about Rail Application and description of the directory structure explained above.</li><li><strong>Rakefile</strong>&nbsp;− This file is similar to Unix Makefile, which helps with building, packaging and testing the Rails code. This will be used by rake utility supplied along with the Ruby installation.</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>When you use the Rails helper script to create your application, it creates the entire directory structure for the application. Rails knows where to find things it needs within this structure, so you don&#8217;t have to provide any input. Here is a top-level view of a directory tree created by the helper script at the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3248"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3248"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3248/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3248"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3248"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3248"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3250,"date":"2020-09-01T05:38:33","date_gmt":"2020-09-01T05:38:33","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3250"},"modified":"2020-09-01T05:38:33","modified_gmt":"2020-09-01T05:38:33","slug":"ruby-on-rails-examples","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-examples/","title":{"rendered":"Ruby on Rails &#8211; Examples"},"content":{"rendered":"\n<p>In this chapter, we will create a simple but operational online library system for holding and managing the books.</p>\n\n\n\n<p>This application has a basic architecture and will be built using two ActiveRecord models to describe the types of data that is stored −</p>\n\n\n\n<ul><li>Books, which describes an actual listing.</li><li>Subject, which is used to group books together.</li></ul>\n\n\n\n<h2>Workflow for Creating Rails Applications</h2>\n\n\n\n<p>A recommended work flow for creating Rails Application is as follows −</p>\n\n\n\n<ul><li>Use the rails command to create the basic skeleton of the application.</li><li>Create a database on the PostgreSQL server to hold your data.</li><li>Configure the application to know where your database is located and the login credentials for it.</li><li>Create Rails Active Records (Models), because they are the business objects you&#8217;ll be working with in your controllers.</li><li>Generate Migrations that simplify the creating and maintaining of database tables and columns.</li><li>Write Controller Code to put a life in your application.</li><li>Create Views to present your data through User Interface.</li></ul>\n\n\n\n<p>So, let us start with creating our library application.</p>\n\n\n\n<h2>Creating an Empty Rails Web Application</h2>\n\n\n\n<p>Rails is both a runtime web application framework and a set of helper scripts that automate many of the things you do when developing a web application. In this step, we will use one such helper script to create the entire directory structure and the initial set of files to start our Library System application.</p>\n\n\n\n<ul><li>Go into ruby installation directory to create your application.</li><li>Run the following command to create a skeleton for library application. It will create the directory structure in the current directory.</li></ul>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rails new library\n</code></pre>\n\n\n\n<p>This will create a subdirectory for the library application containing a complete directory tree of folders and files for an empty Rails application. Check a complete directory structure of the application. Check&nbsp;<a href=\"https://www.tutorialspoint.com/ruby-on-rails/rails-directory-structure.htm\">Rails Directory Structure</a>&nbsp;for more detail.</p>\n\n\n\n<p>Most of our development work will be creating and editing files in the&nbsp;<strong>library/app</strong>&nbsp;subdirectories. Here&#8217;s a quick run down of how to use them −</p>\n\n\n\n<ul><li>The&nbsp;<em>controllers</em>&nbsp;subdirectory is where Rails looks to find controller classes. A controller handles a web request from the user.</li><li>The&nbsp;<em>views</em>&nbsp;subdirectory holds the display templates to fill in with data from our application, convert to HTML, and return to the user&#8217;s browser.</li><li>The&nbsp;<em>models</em>&nbsp;subdirectory holds the classes that model and wrap the data stored in our application&#8217;s database. In most frameworks, this part of the application can grow pretty messy, tedious, verbose, and error-prone. Rails makes it dead simple.</li><li>The&nbsp;<em>helpers</em>&nbsp;subdirectory holds any helper classes used to assist the model, view, and controller classes. This helps to keep the model, view, and controller code small, focused, and uncluttered.</li></ul>\n\n\n\n<h2>Starting Web Server</h2>\n\n\n\n<p>Rails web application can run under virtually any web server, but the most convenient way to develop a Rails web application is to use the built-in WEBrick web server. Let&#8217;s start this web server and then browse to our empty library application −</p>\n\n\n\n<p>This server will be started from the application directory as follows. It runs on port number 3000.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> cd ruby\\library \ntp\\ruby\\library\\> Rails server\n</code></pre>\n\n\n\n<p>It generates the auto code to start the server as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/rails_server.jpg\" alt=\"Rails Server\"/></figure>\n\n\n\n<p>This will start your WEBrick web server.</p>\n\n\n\n<p>Now open your browser and browse to&nbsp;<strong>http://127.0.0.1:3000</strong>. If everything is gone fine, then you should see a greeting message from WEBrick, otherwise there is something wrong with your setting. If everything goes well it will generate the output as follows.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/web_server.jpg\" alt=\"Web Server\"/></figure>\n\n\n\n<h2>What is next?</h2>\n\n\n\n<p>The next chapter explains how to create databases for your application and what is the configuration required to access these created databases.</p>\n\n\n\n<p>Further, we will see what Rails Migration is and how it is used to maintain database tables.</p>\n","protected":false},"excerpt":{"rendered":"<p>In this chapter, we will create a simple but operational online library system for holding and managing the books. This application has a basic architecture and will be built using two ActiveRecord models to describe the types of data that is stored − Books, which describes an actual listing. Subject, which is used to group [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3250"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3250"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3250/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3250"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3250"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3250"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3252,"date":"2020-09-01T05:40:52","date_gmt":"2020-09-01T05:40:52","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3252"},"modified":"2020-09-01T05:40:52","modified_gmt":"2020-09-01T05:40:52","slug":"ruby-on-rails-database-setup","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-database-setup/","title":{"rendered":"Ruby on Rails &#8211; Database Setup"},"content":{"rendered":"\n<p>Before starting with this chapter, make sure your database server is up and running. Ruby on Rails recommends to create three databases &#8211; a database each for development, testing, and production environment. According to convention, their names should be −</p>\n\n\n\n<ul><li>library_development</li><li>library_production</li><li>library_test</li></ul>\n\n\n\n<p>You should initialize all three of them and create a user and password for them with full read and write privileges. We are using the&nbsp;<strong>root</strong>&nbsp;user ID for our application.</p>\n\n\n\n<h2>Database Setup for MySQL</h2>\n\n\n\n<p>In MySQL, we are using the&nbsp;<strong>root</strong>&nbsp;user ID for our application. The MySQL console session in which you do this looks something like −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mysql> create database library_development;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> grant all privileges on library_development.*\nto 'root'@'localhost' identified by 'password';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n\n\n\n<p>You can do the same thing for two more databases&nbsp;<strong>library_production</strong>&nbsp;and&nbsp;<strong>library_test</strong>.</p>\n\n\n\n<h2>Configuring database.yml</h2>\n\n\n\n<p>At this point, you need to let Rails know about the user name and password for the databases. You do this in the file&nbsp;<strong>database.yml</strong>, available in the&nbsp;<strong>library\\config</strong>&nbsp;subdirectory of Rails Application you created. This file has live configuration sections for MySQL databases. In each of the sections you use, you need to change the username and password lines to reflect the permissions on the databases you&#8217;ve created.</p>\n\n\n\n<p>When you finish, it should look something like −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>development:\n   adapter: mysql\n   database: library_development\n   username: root\n   password: &#91;password]\n   host: localhost\n\t\ntest:\n   adapter: mysql\n   database: library_test\n   username: root\n   password: &#91;password]\n   host: localhost\n   \nproduction:\n   adapter: mysql\n   database: library_production\n   username: root\n   password: &#91;password]\n   host: localhost\n</code></pre>\n\n\n\n<h2>Database Setup for PostgreSQL</h2>\n\n\n\n<p>By default, PostgreSQL does not provide any users. We have to create new users. Use the following command to create a user with the name&nbsp;<strong>rubyuser</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> sudo -u postgres createuser rubyuser -s\n</code></pre>\n\n\n\n<p>If you want to create a password for the new user, then use the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> sudo -u postgres psql\n\npostgres=# \\password rubyuser\n</code></pre>\n\n\n\n<p>Use the following command for creating a database&nbsp;<strong>library_development</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>postgres=# CREATE DATABASE library_development OWNER rubyuser; \n\nCREATE DATABASE\n</code></pre>\n\n\n\n<p>Use the following command for creating a database&nbsp;<strong>library_production</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>postgres=# CREATE DATABASE library_production OWNER rubyuser; \n\nCREATE DATABASE\n</code></pre>\n\n\n\n<p>Use the following command for creating a database&nbsp;<strong>library_test</strong>.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>postgres=# CREATE DATABASE library_test OWNER rubyuser; \n\nCREATE DATABASE\n</code></pre>\n\n\n\n<p>Press&nbsp;<strong>Ctrl+D</strong>&nbsp;to terminate PosgreSQL.</p>\n\n\n\n<h2>Configuring database.yml</h2>\n\n\n\n<p>At this point, you need to let Rails know the username and password for the databases. You do this in the file&nbsp;<strong>database.yml</strong>, available in the&nbsp;<strong>library\\config</strong>&nbsp;subdirectory of Rails Application you created. This file has live configuration sections for PostgreSQL databases. In each of the sections, you need to change the username and password lines to reflect the permissions on the databases you&#8217;ve created.</p>\n\n\n\n<p>When you finish, it should look as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>default: &amp;default\n   adapter: postgresql\n   encoding: unicode\n  \ndevelopment:\n   adapter: postgresql\n   encoding: unicode\n   database: library_development\n   username: rubyuser\n   password: &lt;Password for rubyuser>\n\ntest:\n   adapter: postgresql\n   encoding: unicode\n   database: library_test\n   username: rubyuser\n   password: &lt;Password for rubyuser>\n \nproduction:\n   adapter: postgresql\n   encoding: unicode\n   database: library_production\n   username: rubyuser\n   password: &lt;Password for rubyuser>\n</code></pre>\n\n\n\n<h2>What is Next?</h2>\n\n\n\n<p>The next two chapters explain how to model your database tables and how to manage those using Rails Migrations.vv</p>\n","protected":false},"excerpt":{"rendered":"<p>Before starting with this chapter, make sure your database server is up and running. Ruby on Rails recommends to create three databases &#8211; a database each for development, testing, and production environment. According to convention, their names should be − library_development library_production library_test You should initialize all three of them and create a user and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3252"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3252"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3252/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3252"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3252"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3252"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3254,"date":"2020-09-01T05:42:04","date_gmt":"2020-09-01T05:42:04","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3254"},"modified":"2020-09-01T05:42:04","modified_gmt":"2020-09-01T05:42:04","slug":"ruby-on-rails-active-records","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-active-records/","title":{"rendered":"Ruby on Rails &#8211; Active Records"},"content":{"rendered":"\n<p>Rails Active Record is the Object/Relational Mapping (ORM) layer supplied with Rails. It closely follows the standard ORM model, which is as follows −</p>\n\n\n\n<ul><li>tables map to classes,</li><li>rows map to objects and</li><li>columns map to object attributes.</li></ul>\n\n\n\n<p>Rails Active Records provide an interface and binding between the tables in a relational database and the Ruby program code that manipulates database records. Ruby method names are automatically generated from the field names of database tables.</p>\n\n\n\n<p>Each Active Record object has CRUD (<strong><u>C</u></strong>reate,&nbsp;<strong><u>R</u></strong>ead,&nbsp;<strong><u>U</u></strong>pdate, and&nbsp;<strong><u>D</u></strong>elete) methods for database access. This strategy allows simple designs and straight forward mappings between database tables and application objects.</p>\n\n\n\n<h2>Translating a Domain Model into SQL</h2>\n\n\n\n<p>Translating a domain model into SQL is generally straight forward, as long as you remember that you have to write Rails-friendly SQL. In practical terms, you have to follow certain rules −</p>\n\n\n\n<ul><li>Each entity (such as book) gets a table in the database named after it, but in the plural (books).</li><li>Each such entity-matching table has a field called&nbsp;<em>id</em>, which contains a unique integer for each record inserted into the table.</li><li>Given entity x and entity y, if entity y belongs to entity x, then table y has a field called x_id.</li><li>The bulk of the fields in any table store the values for that entity&#8217;s simple properties (anything that&#8217;s a number or a string).</li></ul>\n\n\n\n<h2>Creating Active Record Files (Models)</h2>\n\n\n\n<p>To create the Active Record files for our entities for library application, introduced in the previous chapter, issue the following command from the top level of the application directory.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library\\> rails script/generate model Book\nlibrary\\> rails script/generate model Subject\n</code></pre>\n\n\n\n<p>Above&nbsp;<strong>rails generate model book</strong>&nbsp;commands generates the auto code as below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/book_generate.jpg\" alt=\"Book Generate\"/></figure>\n\n\n\n<p>You&#8217;re telling the generator to create models called Book and Subject to store instances of books and subjects. Notice that you are capitalizing Book and Subject and using the singular form. This is a Rails paradigm that you should follow each time you create a model.</p>\n\n\n\n<p>When you use the generate tool, Rails creates the actual model file that holds all the methods unique to the model and the business rules you define, a unit test file for performing test-driven development, a sample data file (called fixtures) to use with the unit tests, and a Rails migration that makes creating database tables and columns easy.</p>\n\n\n\n<p>Apart from creating many other files and directories, this will create files named&nbsp;<strong>book.rb</strong>&nbsp;and&nbsp;<strong>subject.rb</strong>&nbsp;containing a skeleton definition in the&nbsp;<strong>app/models</strong>&nbsp;directory.</p>\n\n\n\n<p>Content available in book.rb −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Book &lt; ActiveRecord::Base\nend\n</code></pre>\n\n\n\n<p>Content available in subject.rb −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Subject &lt; ActiveRecord::Base\nend\n</code></pre>\n\n\n\n<h2>Creating Associations between Models</h2>\n\n\n\n<p>When you have more than one model in your rails application, you would need to create connection between those models. You can do this via associations. Active Record supports three types of associations −</p>\n\n\n\n<ul><li><strong>one-to-one</strong>&nbsp;− A one-to-one relationship exists when one item has exactly one of another item. For example, a person has exactly one birthday or a dog has exactly one owner.</li><li><strong>one-to-many</strong>&nbsp;− A one-to-many relationship exists when a single object can be a member of many other objects. For instance, one subject can have many books.</li><li><strong>many-to-many</strong>&nbsp;− A many-to-many relationship exists when the first object is related to one or more of a second object, and the second object is related to one or many of the first object.</li></ul>\n\n\n\n<p>You indicate these associations by adding declarations to your models: has_one, has_many, belongs_to, and has_and_belongs_to_many.</p>\n\n\n\n<p>Now, you need to tell Rails what relationships you want to establish within the library data system. To do so, modify book.rb and subject.rb to look like this −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Book &lt; ActiveRecord::Base\n   belongs_to :subject\nend</code></pre>\n\n\n\n<p>We have used a singular subject in the above example, because one Book can belong to a single Subject.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Subject &lt; ActiveRecord::Base\n   has_many :books\nend</code></pre>\n\n\n\n<p>We have used plural books here, because one subject can have multiple books.</p>\n\n\n\n<h2>Implementing Validations on Models</h2>\n\n\n\n<p>The implementation of validations is done in a Rails model. The data you are entering into the database is defined in the actual Rails model, so it only makes sense to define what valid data entails in the same location.</p>\n\n\n\n<p>The validations are −</p>\n\n\n\n<ul><li>The value of title field should not be NULL.</li><li>The value of price field should be numeric.</li></ul>\n\n\n\n<p>Open&nbsp;<strong>book.rb</strong>&nbsp;in the&nbsp;<strong>app\\model</strong>&nbsp;subdiractory and put the following validations −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Book &lt; ActiveRecord::Base\n   belongs_to :subject\n   validates_presence_of :title\n   validates_numericality_of :price, :message=>\"Error Message\"\nend\n</code></pre>\n\n\n\n<ul><li><strong>validates_presence_of</strong>&nbsp;− protects &#8220;NOT NULL&#8221; fields against missing user input.</li><li><strong>validates_numericality_of</strong>&nbsp;− prevents the user, entering non numeric data.</li></ul>\n\n\n\n<p>Besides the validations mentioned above, there are other common validations. Check&nbsp;<a href=\"https://www.tutorialspoint.com/ruby-on-rails/rails-quick-guide.htm\">Rails Quick Guide</a>.</p>\n\n\n\n<h2>What is Next?</h2>\n\n\n\n<p>In the next chapter, we will learn Rails Migration, which allows you to use Ruby to define changes to your database schema, making it possible to use a version control system to keep things synchronized with the actual code.</p>\n","protected":false},"excerpt":{"rendered":"<p>Rails Active Record is the Object/Relational Mapping (ORM) layer supplied with Rails. It closely follows the standard ORM model, which is as follows − tables map to classes, rows map to objects and columns map to object attributes. Rails Active Records provide an interface and binding between the tables in a relational database and the [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3254"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3254"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3254/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3254"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3254"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3254"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3256,"date":"2020-09-01T05:43:47","date_gmt":"2020-09-01T05:43:47","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3256"},"modified":"2020-09-01T05:43:47","modified_gmt":"2020-09-01T05:43:47","slug":"ruby-on-rails-migrations","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-migrations/","title":{"rendered":"Ruby on Rails &#8211; Migrations"},"content":{"rendered":"\n<p>Rails Migration allows you to use Ruby to define changes to your database schema, making it possible to use a version control system to keep things synchronized with the actual code.</p>\n\n\n\n<p>This has many uses, including −</p>\n\n\n\n<ul><li><strong>Teams of developers</strong>&nbsp;− If one person makes a schema change, the other developers just need to update, and run &#8220;rake migrate&#8221;.</li><li><strong>Production servers</strong>&nbsp;− Run &#8220;rake migrate&#8221; when you roll out a new release to bring the database up to date as well.</li><li><strong>Multiple machines</strong>&nbsp;− If you develop on both a desktop and a laptop, or in more than one location, migrations can help you keep them all synchronized.</li></ul>\n\n\n\n<h2>What Can Rails Migration Do?</h2>\n\n\n\n<ul><li>create_table(name, options)</li><li>drop_table(name)</li><li>rename_table(old_name, new_name)</li><li>add_column(table_name, column_name, type, options)</li><li>rename_column(table_name, column_name, new_column_name)</li><li>change_column(table_name, column_name, type, options)</li><li>remove_column(table_name, column_name)</li><li>add_index(table_name, column_name, index_type)</li><li>remove_index(table_name, column_name)</li></ul>\n\n\n\n<p><strong>Migrations support all the basic data types</strong>&nbsp;− The following is the list of data types that migration supports −</p>\n\n\n\n<ul><li><strong>string</strong>&nbsp;− for small data types such as a title.</li><li><strong>text</strong>&nbsp;− for longer pieces of textual data, such as the description.</li><li><strong>integer</strong>&nbsp;− for whole numbers.</li><li><strong>float</strong>&nbsp;− for decimals.</li><li><strong>datetime and timestamp</strong>&nbsp;− store the date and time into a column.</li><li><strong>date and time</strong>&nbsp;− store either the date only or time only.</li><li><strong>binary</strong>&nbsp;− for storing data such as images, audio, or movies.</li><li><strong>Boolean</strong>&nbsp;− for storing true or false values.</li></ul>\n\n\n\n<p><strong>Valid column options are</strong>&nbsp;− The following is the list of valid column options.</p>\n\n\n\n<ul><li><strong>limit</strong>&nbsp;( :limit =&gt; “50” )</li><li><strong>default</strong>&nbsp;(:default =&gt; “blah” )</li><li><strong>null</strong>&nbsp;(:null =&gt; false implies&nbsp;NOT NULL)</li></ul>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− The activities done by Rails Migration can be done using any front-end GUI or directly on SQL prompt, but Rails Migration makes all those activities very easy.</p>\n\n\n\n<p>See the Rails API for details on these.</p>\n\n\n\n<h2>Create the Migrations</h2>\n\n\n\n<p>Here is the generic syntax for creating a migration −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>application_dir> rails generate migration table_name\n</code></pre>\n\n\n\n<p>This will create the file db/migrate/001_table_name.rb. A migration file contains the basic Ruby syntax that describes the data structure of a database table.</p>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− Before running the migration generator, it is recommended to clean the existing migrations generated by model generators.</p>\n\n\n\n<p>We will create two migrations corresponding to our three tables −&nbsp;<strong><em>books and subjects</em></strong>.</p>\n\n\n\n<p>Books migration should be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> cd library\nlibrary> rails generate migration books\n</code></pre>\n\n\n\n<p>Above command generates the following code.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/genarate4.jpg\" alt=\"Generate\"/></figure>\n\n\n\n<p>subject migration should be as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> cd library\nlibrary> rails generate migration subjects\n</code></pre>\n\n\n\n<p>Above command generates the following code.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/genarate4.jpg\" alt=\"Generate\"/></figure>\n\n\n\n<p>Notice that you are using lower case for book and subject and plural form while creating migrations. This is a Rails paradigm that you should follow each time you create a Migration.</p>\n\n\n\n<h2>Edit the Code</h2>\n\n\n\n<p>Go to db/migrate subdirectory of your application and edit each file one by one using any simple text editor.</p>\n\n\n\n<p>Modify 001_books.rb as follows −</p>\n\n\n\n<p>The ID column will be created automatically, so don&#8217;t do it here as well.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Books &lt; ActiveRecord::Migration\n   \n   def self.up\n      create_table :books do |t|\n         t.column :title, :string, :limit => 32, :null => false\n         t.column :price, :float\n         t.column :subject_id, :integer\n         t.column :description, :text\n         t.column :created_at, :timestamp\n      end\n   end\n\n   def self.down\n      drop_table :books\n   end\nend\n</code></pre>\n\n\n\n<p>The method&nbsp;<strong>self.up</strong>&nbsp;is used when migrating to a new version,&nbsp;<strong>self.down</strong>&nbsp;is used to roll back any changes if needed. At this moment, the above script will be used to create&nbsp;<strong><em>books</em></strong>&nbsp;table.</p>\n\n\n\n<p>Modify 002_subjects.rb as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Subjects &lt; ActiveRecord::Migration\n   def self.up\n      \n      create_table :subjects do |t|\n         t.column :name, :string\n      end\n\t\n      Subject.create :name => \"Physics\"\n      Subject.create :name => \"Mathematics\"\n      Subject.create :name => \"Chemistry\"\n      Subject.create :name => \"Psychology\"\n      Subject.create :name => \"Geography\"\n   end\n\n   def self.down\n      drop_table :subjects\n   end\nend\n</code></pre>\n\n\n\n<p>The above script will be used to create&nbsp;<strong><em>subjects</em></strong>&nbsp;table and will create five records in the subjects table.</p>\n\n\n\n<h2>Run the Migration</h2>\n\n\n\n<p>Now that you have created all the required migration files. It is time to execute them against the database. To do this, go to a command prompt and go to the library directory in which the application is located, and then type&nbsp;<strong>rake migrate</strong>&nbsp;as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library> rake db:migrate\n</code></pre>\n\n\n\n<p>This will create a &#8220;schema_info&#8221; table if it doesn&#8217;t exist, which tracks the current version of the database &#8211; each new migration will be a new version, and any new migrations will be run until your database is at the current version.</p>\n\n\n\n<p><strong>Rake</strong>&nbsp;is a Ruby build program similar to Unix&nbsp;<em>make</em>&nbsp;program that Rails takes advantage of, to simplify the execution of complex tasks such as updating a database&#8217;s structure etc.</p>\n\n\n\n<h2>Running Migrations for Production and Test Databases</h2>\n\n\n\n<p>If you would like to specify what Rails environment to use for the migration, use the RAILS_ENV shell variable.</p>\n\n\n\n<p>For example −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library> export RAILS_ENV = production\nlibrary> rake db:migrate\nlibrary> export RAILS_ENV = test\nlibrary> rake db:migrate\nlibrary> export RAILS_ENV = development\nlibrary> rake db:migrate\n</code></pre>\n\n\n\n<p><strong>NOTE</strong>&nbsp;− In Windows, use &#8220;set RAILS_ENV = production&#8221; instead of&nbsp;<em>export</em>&nbsp;command.</p>\n\n\n\n<h2>What is Next?</h2>\n\n\n\n<p>Now we have our database and the required tables available. In the two subsequent chapters, we will explore two important components called Controller (ActionController) and View (ActionView).</p>\n\n\n\n<ul><li>Creating Controllers (Action Controller).</li><li>Creating Views (Action View).</li></ul>\n","protected":false},"excerpt":{"rendered":"<p>Rails Migration allows you to use Ruby to define changes to your database schema, making it possible to use a version control system to keep things synchronized with the actual code. This has many uses, including − Teams of developers&nbsp;− If one person makes a schema change, the other developers just need to update, and [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3256"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3256"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3256/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3256"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3256"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3256"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3258,"date":"2020-09-01T05:46:56","date_gmt":"2020-09-01T05:46:56","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3258"},"modified":"2020-09-01T05:46:56","modified_gmt":"2020-09-01T05:46:56","slug":"ruby-on-rails-controller","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-controller/","title":{"rendered":"Ruby on Rails &#8211; Controller"},"content":{"rendered":"\n<p>The Rails controller is the logical center of your application. It coordinates the interaction between the user, the views, and the model. The controller is also a home to a number of important ancillary services.</p>\n\n\n\n<ul><li>It is responsible for routing external requests to internal actions. It handles people-friendly URLs extremely well.</li><li>It manages caching, which can give applications orders-of-magnitude performance boosts.</li><li>It manages helper modules, which extend the capabilities of the view templates without bulking up their code.</li><li>It manages sessions, giving users the impression of an ongoing interaction with our applications.</li></ul>\n\n\n\n<p>The process for creating a controller is very easy, and it&#8217;s similar to the process we&#8217;ve already used for creating a model. We will create just one controller here −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library\\> rails generate controller Book\n</code></pre>\n\n\n\n<p>Notice that you are capitalizing Book and using the singular form. This is a Rails paradigm that you should follow each time you create a controller.</p>\n\n\n\n<p>This command accomplishes several tasks, of which the following are relevant here −</p>\n\n\n\n<ul><li>It creates a file called&nbsp;<strong>app/controllers/book_controller.rb</strong></li></ul>\n\n\n\n<p>If you look at book_controller.rb, you will find it as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">class BookController &lt; ApplicationController\nend\n</pre>\n\n\n\n<p>Controller classes inherit from&nbsp;<em>ApplicationController,</em>&nbsp;which is the other file in the controllers folder:&nbsp;<strong>application.rb</strong>.</p>\n\n\n\n<p>The&nbsp;<em>ApplicationController</em>&nbsp;contains code that can be run in all your controllers and it inherits from Rails&nbsp;<em>ActionController::Base</em>&nbsp;class.</p>\n\n\n\n<p>You don&#8217;t need to worry with the&nbsp;<em>ApplicationController</em>&nbsp;as of yet, so let&#8217;s just define a few method stubs in&nbsp;<strong>book_controller.rb</strong>. Based on your requirement, you could define any number of functions in this file.</p>\n\n\n\n<p>Modify the file to look like the following and save your changes. Note that it is upto you what name you want to give to these methods, but better to give relevant names.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class BookController &lt; ApplicationController\n   def list\n   end\n   \n   def show\n   end\n   \n   def new\n   end\n   \n   def create\n   end\n   \n   def edit\n   end\n   \n   def update\n   end\n   \n   def delete\n   end\n   \nend</code></pre>\n\n\n\n<p>Now let us implement all the methods one by one.</p>\n\n\n\n<h2>Implementing the list Method</h2>\n\n\n\n<p>The list method gives you a list of all the books in the database. This functionality will be achieved by the following lines of code. Edit the following lines in book_controller.rb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def list\n   @books = Book.all\nend</code></pre>\n\n\n\n<p>The&nbsp;<em>@books = Book.all</em>&nbsp;line in the list method tells Rails to search the books table and store each row it finds in the @books instance object.</p>\n\n\n\n<h2>Implementing the show Method</h2>\n\n\n\n<p>The show method displays only further details on a single book. This functionality will be achieved by the following lines of code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def show\n   @book = Book.find(params&#91;:id])\nend\n</code></pre>\n\n\n\n<p>The show method&#8217;s&nbsp;<em>@book = Book.find(params[:id])</em>&nbsp;line tells Rails to find only the book that has the id defined in params[:id].</p>\n\n\n\n<p>The params object is a container that enables you to pass values between method calls. For example, when you&#8217;re on the page called by the list method, you can click a link for a specific book, and it passes the id of that book via the params object so that show can find the specific book.</p>\n\n\n\n<h2>Implementing the new Method</h2>\n\n\n\n<p>The new method lets Rails know that you will create a new object. So just add the following code in this method.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def new\n   @book = Book.new\n   @subjects = Subject.all\nend</code></pre>\n\n\n\n<p>The above method will be called when you will display a page to the user to take user input. Here second line grabs all the subjects from the database and puts them in an array called @subjects.</p>\n\n\n\n<h2>Implementing the create Method</h2>\n\n\n\n<p>Once you take user input using HTML form, it is time to create a record into the database. To achieve this, edit the create method in the book_controller.rb to match the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def create\n   @book = Book.new(book_params)\n\t\n   if @book.save\n      redirect_to :action => 'list'\n   else\n      @subjects = Subject.all\n      render :action => 'new'\n   end\n   \nend\n\ndef book_params\n   params.require(:books).permit(:title, :price, :subject_id, :description)\nend</code></pre>\n\n\n\n<p>The first line creates a new instance variable called @book that holds a Book object built from the data, the user submitted. The&nbsp;<strong>book_params</strong>&nbsp;method is used to collect all the fields from object&nbsp;<strong>:books</strong>. The data was passed from the new method to create using the params object.</p>\n\n\n\n<p>The next line is a conditional statement that redirects the user to the&nbsp;<strong>list</strong>&nbsp;method if the object saves correctly to the database. If it doesn&#8217;t save, the user is sent back to the new method. The redirect_to method is similar to performing a meta refresh on a web page: it automatically forwards you to your destination without any user interaction.</p>\n\n\n\n<p>Then&nbsp;<em>@subjects = Subject.all</em>&nbsp;is required in case it does not save data successfully and it becomes similar case as with new option.</p>\n\n\n\n<h2>Implementing the edit Method</h2>\n\n\n\n<p>The edit method looks nearly identical to the show method. Both methods are used to retrieve a single object based on its id and display it on a page. The only difference is that the show method is not editable.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def edit\n   @book = Book.find(params&#91;:id])\n   @subjects = Subject.all\nend</code></pre>\n\n\n\n<p>This method will be called to display data on the screen to be modified by the user. The second line grabs all the subjects from the database and puts them in an array called @subjects.</p>\n\n\n\n<h2>Implementing the update Method</h2>\n\n\n\n<p>This method will be called after the edit method, when the user modifies a data and wants to update the changes into the database. The update method is similar to the create method and will be used to update existing books in the database.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def update\n   @book = Book.find(params&#91;:id])\n\t\n   if @book.update_attributes(book_param)\n      redirect_to :action => 'show', :id => @book\n   else\n      @subjects = Subject.all\n      render :action => 'edit'\n   end\n   \nend\n\ndef book_param\n   params.require(:book).permit(:title, :price, :subject_id, :description)\nend</code></pre>\n\n\n\n<p>The update_attributes method is similar to the save method used by create but instead of creating a new row in the database, it overwrites the attributes of the existing row.</p>\n\n\n\n<p>Then&nbsp;<em>@subjects = Subject.all</em>&nbsp;line is required in case it does not save the data successfully, then it becomes similar to edit option.</p>\n\n\n\n<h2>Implementing the delete Method</h2>\n\n\n\n<p>If you want to delete a record from the database then you will use this method. Implement this method as follows.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def delete\n   Book.find(params&#91;:id]).destroy\n   redirect_to :action => 'list'\nend</code></pre>\n\n\n\n<p>The first line finds the classified based on the parameter passed via the params object and then deletes it using the destroy method. The second line redirects the user to the list method using a redirect_to call.</p>\n\n\n\n<h2>Additional Methods to Display Subjects</h2>\n\n\n\n<p>Assume you want to give a facility to your users to browse all the books based on a given subject. So, you can create a method inside book_controller.rb to display all the subjects. Assume the method name is&nbsp;<strong>show_subjects</strong>&nbsp;−</p>\n\n\n\n<pre class=\"wp-block-code\"><code>def show_subjects\n   @subject = Subject.find(params&#91;:id])\nend</code></pre>\n\n\n\n<p>Finally your&nbsp;<strong>book_controller.rb</strong>&nbsp;file will look as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class BooksController &lt; ApplicationController\n\n   def list\n      @books = Book.all\n   end\n\n   def show\n      @book = Book.find(params&#91;:id])\n   end\n  \n   def new\n      @book = Book.new\n      @subjects = Subject.all\n   end\n\n   def book_params\n      params.require(:books).permit(:title, :price, :subject_id, :description)\n   end\n\n   def create\n      @book = Book.new(book_params)\n\n      if @book.save\n         redirect_to :action => 'list'\n      else\n         @subjects = Subject.all\n         render :action => 'new'\n      end\n   end\n   \n   def edit\n      @book = Book.find(params&#91;:id])\n      @subjects = Subject.all\n   end\n   \n   def book_param\n      params.require(:book).permit(:title, :price, :subject_id, :description)\n   end\n   \n   def update\n      @book = Book.find(params&#91;:id])\n      \n      if @book.update_attributes(book_param)\n         redirect_to :action => 'show', :id => @book\n      else\n         @subjects = Subject.all\n         render :action => 'edit'\n      end\n   end\n   \n   def delete\n      Book.find(params&#91;:id]).destroy\n      redirect_to :action => 'list'\n   end\n   \n   def show_subjects\n      @subject = Subject.find(params&#91;:id])\n   end\n\nend</code></pre>\n\n\n\n<p>Now save your controller file.</p>\n\n\n\n<h2>What is Next?</h2>\n\n\n\n<p>You have created almost all the methods, which will work on backend. Next we will define routes (URLs) for actions.</p>\n","protected":false},"excerpt":{"rendered":"<p>The Rails controller is the logical center of your application. It coordinates the interaction between the user, the views, and the model. The controller is also a home to a number of important ancillary services. It is responsible for routing external requests to internal actions. It handles people-friendly URLs extremely well. It manages caching, which [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3258"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3258"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3258/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3258"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3258"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3258"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3260,"date":"2020-09-01T05:47:54","date_gmt":"2020-09-01T05:47:54","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3260"},"modified":"2020-09-01T05:47:54","modified_gmt":"2020-09-01T05:47:54","slug":"ruby-on-rails-routes","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-routes/","title":{"rendered":"Ruby on Rails &#8211; Routes"},"content":{"rendered":"\n<p>The routing module provides URL rewriting in native Ruby. It&#8217;s a way to redirect incoming requests to controllers and actions. It replaces the mod_rewrite rules. Best of all, Rails&#8217; Routing works with any web server. Routes are defined in app/config/routes.rb.</p>\n\n\n\n<p>Think of creating routes as drawing a map for your requests. The map tells them where to go based on some predefined pattern −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rails.application.routes.draw do\n   Pattern 1 tells some request to go to one place\n   Pattern 2 tell them to go to another\n   ...\nend\n</code></pre>\n\n\n\n<h2>Example</h2>\n\n\n\n<p>Let us consider our library management application contains a controller called BookController. We have to define the routes for those actions which are defined as methods in the BookController class.</p>\n\n\n\n<p>Open routes.rb file in library/config/ directory and edit it with the following content.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Rails.application.routes.draw do\n   get 'book/list'\n   get 'book/new'\n   post 'book/create'\n   patch 'book/update'\n   get 'book/list'\n   get 'book/show'\n   get 'book/edit'\n   get 'book/delete'\n   get 'book/update'\n   get 'book/show_subjects'\nend\n</code></pre>\n\n\n\n<p>The routes.rb file defines the actions available in the applications and the type of action such as get, post, and patch.</p>\n\n\n\n<p>Use the following command to list all your defined routes, which are useful for tracking down routing problems in your application, or giving you a good overview of the URLs in an application you&#8217;re trying to get familiar with.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>library> rake routes\n</code></pre>\n\n\n\n<h2>What is Next?</h2>\n\n\n\n<p>Next, we will create the code to generate screens to display data and to take input from the user.</p>\n","protected":false},"excerpt":{"rendered":"<p>The routing module provides URL rewriting in native Ruby. It&#8217;s a way to redirect incoming requests to controllers and actions. It replaces the mod_rewrite rules. Best of all, Rails&#8217; Routing works with any web server. Routes are defined in app/config/routes.rb. Think of creating routes as drawing a map for your requests. The map tells them [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3260"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3260"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3260/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3260"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3260"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3260"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3262,"date":"2020-09-01T05:50:30","date_gmt":"2020-09-01T05:50:30","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3262"},"modified":"2020-09-01T05:50:30","modified_gmt":"2020-09-01T05:50:30","slug":"ruby-on-rails-views","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-views/","title":{"rendered":"Ruby on Rails &#8211; Views"},"content":{"rendered":"\n<p>A Rails View is an ERb program that shares data with controllers through mutually accessible variables.</p>\n\n\n\n<p>If you look in the app/views directory of the library application, you will see one subdirectory for each of the controllers, we have created: book. Each of these subdirectories was created automatically when the same-named controller was created with the generate script.</p>\n\n\n\n<p>Rails let&#8217;s you know that you need to create the view file for each new method. Each method you define in the controller needs to have a corresponding&nbsp;<strong>erb</strong>&nbsp;file, with the same name as the method, to display the data that the method is collecting.</p>\n\n\n\n<p>So let&#8217;s create view files for all the methods we have defined in the book_controller.rb. While executing these views, simultaneously check these actions are applicable into the database or not.</p>\n\n\n\n<h2>Creating View File for list Method</h2>\n\n\n\n<p>Create a file called&nbsp;<strong>list.html.erb</strong>&nbsp;using your favourite text editor and save it to app/views/book. After creating and saving the file, refresh your web browser. You should see a blank page; if you don&#8217;t, check the spelling of your file and make sure that it is exactly the same as your controller&#8217;s method.</p>\n\n\n\n<p>Now, display the actual content. Let us put the following code into list.html.erb.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;% if @books.blank? %>\n&lt;p>There are not any books currently in the system.&lt;/p>\n&lt;% else %>\n&lt;p>These are the current books in our system&lt;/p>\n\n&lt;ul id = \"books\">\n   &lt;% @books.each do |c| %>\n   &lt;li>&lt;%= link_to c.title, {:action => 'show', :id => c.id} -%>&lt;/li>\n   &lt;% end %>\n&lt;/ul>\n\n&lt;% end %>\n&lt;p>&lt;%= link_to \"Add new Book\", {:action => 'new' }%>&lt;/p></code></pre>\n\n\n\n<p>The code to be executed is to check whether the @books array has any objects in it. The&nbsp;<strong>.blank?</strong>&nbsp;method returns true if the array is empty, and false if it contains any objects. This @books object was created in controller inside the list method.</p>\n\n\n\n<p>The code between the &lt;%= %&gt; tags is a&nbsp;<strong>link_to</strong>&nbsp;method call. The first parameter of link_to is the text to be displayed between the &lt;a&gt; tags. The second parameter is what action is called when the link is clicked. In this case, it is the show method. The final parameter is the id of the book that is passed via the params object.</p>\n\n\n\n<p>Now, try refreshing your browser and you should get the following screen because we don&#8217;t have any book in our library.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/no-book-message.gif\" alt=\"No Book Message\"/></figure>\n\n\n\n<h2>Creating View File for new Method</h2>\n\n\n\n<p>Till now, we don&#8217;t have any book in our library. We have to create few books in the system. So, let us design a view corresponding to the&nbsp;<strong>new</strong>&nbsp;method defined in the book_controller.rb.</p>\n\n\n\n<p>Create a file called new.html.erb using your favorite text editor and save it to app/views/book. Add the following code to the new.html.erb file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Add new book&lt;/h1>\n\n&lt;%= form_tag :action => 'create' do %>\n&lt;p>&lt;label for = \"book_title\">Title&lt;/label>:\n\n&lt;%= text_field 'books', 'title' %>&lt;/p>\n&lt;p>&lt;label for = \"book_price\">Price&lt;/label>:\n\n&lt;%= text_field 'books', 'price' %>&lt;/p>\n&lt;p>&lt;label for = \"book_subject_id\">Subject&lt;/label>:\n\n&lt;%= collection_select(:books, :subject_id, @subjects, :id, :name, prompt: true) %>&lt;/p>\n&lt;p>&lt;label for = \"book_description\">Description&lt;/label>&lt;br/>\n\n&lt;%= text_area 'books', 'description' %>&lt;/p>\n&lt;%= submit_tag \"Create\" %>\n\n&lt;% end -%>\n&lt;%= link_to 'Back', {:action => 'list'} %></code></pre>\n\n\n\n<p>Here&nbsp;<strong>form_tag</strong>&nbsp;method interprets the Ruby code into a regular HTML &lt;form&gt; tag using all the information supplied to it. This tag, for example, outputs the following HTML −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;form action = \"/book/create\" method = \"post\">\n</code></pre>\n\n\n\n<p>Next method is&nbsp;<strong>text_field</strong>&nbsp;that outputs an &lt;input&gt; text field. The parameters for text_field are object and field name. In this case, the object is&nbsp;<em>book</em>&nbsp;and the name is&nbsp;<em>title</em>.</p>\n\n\n\n<p>Rails method called&nbsp;<strong>collection_select</strong>, creates an HTML select menu built from an array, such as the @books one. There are five parameters, which are as follows −</p>\n\n\n\n<ul><li><strong>:book</strong>&nbsp;− The object you are manipulating. In this case, it&#8217;s a book object.</li><li><strong>:subject_id</strong>&nbsp;− The field that is populated when the book is saved.</li><li><strong>@books</strong>&nbsp;− The array you are working with.</li><li><strong>:id</strong>&nbsp;− The value that is stored in the database. In terms of HTML, this is the &lt;option&gt; tag&#8217;s value parameter.</li><li><strong>:name</strong>&nbsp;− The output that the user sees in the pull-down menu. This is the value between the &lt;option&gt; tags.</li></ul>\n\n\n\n<p>The next used is&nbsp;<strong>submit_tag</strong>, which outputs an &lt;input&gt; button that submits the form. Finally, there is the&nbsp;<strong>end</strong>&nbsp;method that simply translates into &lt;/form&gt;.</p>\n\n\n\n<p>Go to your browser and visit&nbsp;<strong>http://localhost:3000/book/new.</strong>&nbsp;This will give you the following screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/new-book.gif\" alt=\"New Book\"/></figure>\n\n\n\n<p>Enter some data in this form and then click the Create button. Here i have added the following details into the fields −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Title: Advance Physics\nPrice: 390\nSubject: Physics\nDescription: This is test to create new book\n</code></pre>\n\n\n\n<p>When you click the&nbsp;<strong>Create</strong>&nbsp;button, it will call the&nbsp;<strong>create</strong>&nbsp;method, which does not need any view because this method is using either&nbsp;<strong>list</strong>&nbsp;or&nbsp;<strong>new</strong>&nbsp;methods to view the results. So, when you click the Create button, the data should submit successfully and redirect you to the list page, in which you now have a single item listed as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/create-book.gif\" alt=\"Create Book\"/></figure>\n\n\n\n<p>If you click the link, you should see another Template is missing error, since you haven&#8217;t created the template file for show method yet.</p>\n\n\n\n<h2>Creating View File for show Method</h2>\n\n\n\n<p>This method will display the complete detail about any book available in the library. Create a show.html.erb file under app/views/book and populate it with the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>&lt;%= @book.title %>&lt;/h1>\n\n&lt;p>\n   &lt;strong>Price: &lt;/strong> $&lt;%= @book.price %>&lt;br />\n   &lt;strong>Subject :&lt;/strong> &lt;%= @book.subject.name %>&lt;br />\n   &lt;strong>Created Date:&lt;/strong> &lt;%= @book.created_at %>&lt;br />\n&lt;/p>\n\n&lt;p>&lt;%= @book.description %>&lt;/p>\n\n&lt;hr />\n\n&lt;%= link_to 'Back', {:action => 'list'} %></code></pre>\n\n\n\n<p>This is the first time you have taken the full advantage of associations, which enable you to easily pull data from related objects.</p>\n\n\n\n<p>The format used is&nbsp;<strong>@variable.relatedObject.column</strong>. In this instance, you can pull the subject&#8217;s name value through the @book variable using the&nbsp;<strong>belongs_to</strong>&nbsp;associations. If click on any listed record then it will show you the following screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/show-book.gif\" alt=\"Show Book\"/></figure>\n\n\n\n<h2>Creating View File for edit Method</h2>\n\n\n\n<p>Create a new file called edit.html.erb and save it in app/views/book. Populate it with the following code −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>Edit Book Detail&lt;/h1>\n\n&lt;%= form_for @book, :url =>{:action => \"update\", :id =>@book} do |f| %>\n\n&lt;p>Title: &lt;%= f.text_field 'title' %>&lt;/p>\n&lt;p>Price: &lt;%= f.text_field  'price' %>&lt;/p>\n&lt;p>Subject: &lt;%= f.collection_select :subject_id, Subject.all, :id, :name %>&lt;/p>\n&lt;p>Description&lt;br/>\n\n&lt;%= f.text_area 'description' %>&lt;/p>\n&lt;%= f.submit \"Save changes\" %>\n&lt;% end %>\n\n&lt;%= link_to 'Back', {:action => 'list' } %></code></pre>\n\n\n\n<p>This code is very similar to the&nbsp;<strong>new</strong>&nbsp;method except action to be updated instead of creating and defining an id.</p>\n\n\n\n<p>In this scenario, we used&nbsp;<strong>form_for</strong>&nbsp;tag for the form action. It will perform better than&nbsp;<strong>form_tag</strong>. Why because it will create interaction with the Model easily. Therefore it is better to use form_for tag whenever you need interaction between the model and the form fields.</p>\n\n\n\n<p>At this point, we need some modification in the&nbsp;<strong>list method&#8217;s</strong>&nbsp;view file. Go to the &lt;li&gt;&lt;/li&gt; element and modify it to look like the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;li>\n   &lt;%= link_to c.title, {:action => \"show\", :id => c.id} -%>\n   &lt;b> &lt;%= link_to 'Edit', {:action => \"edit\",\n   :id => c.id} %>&lt;/b>\n&lt;/li></code></pre>\n\n\n\n<p>Now, try to browse books using the&nbsp;<strong>http://localhost:3000/book/list.</strong>&nbsp;It will give you the listing of all the books along with&nbsp;<strong>Edit</strong>&nbsp;option. When you click the Edit option, then you will have next screen as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/edit-book.gif\" alt=\"Edit Book\"/></figure>\n\n\n\n<p>Now, you edit this information and then click the&nbsp;<em>Save Changes</em>&nbsp;button. This will result in a call to&nbsp;<strong>update</strong>&nbsp;method available in the controller file and it will update all the changed attribute. Notice that the&nbsp;<strong>update</strong>&nbsp;method does not need any view file because it&#8217;s using either&nbsp;<strong>show</strong>&nbsp;or&nbsp;<strong>edit</strong>&nbsp;methods to show its results.</p>\n\n\n\n<h2>Creating View File for delete Method</h2>\n\n\n\n<p>Removing information from a database using Ruby on Rails is almost too easy. You do not need to write any view code for the delete method because this method is using&nbsp;<strong>list</strong>&nbsp;method to display the result. So, let&#8217;s just modify list.html.erb again and add a delete link.</p>\n\n\n\n<p>Go to the &lt;li&gt;&lt;/li&gt; element and modify it to look like the following −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;li>\n   &lt;%= link_to c.title, {:action => 'show', :id => c.id} -%>\n   &lt;b> &lt;%= link_to 'Edit', {:action => 'edit', :id => c.id} %>&lt;/b>\n   &lt;b> &lt;%= link_to \"Delete\", {:action => 'delete', :id => c.id},\n      :confirm => \"Are you sure you want to delete this item?\" %>&lt;/b>\n&lt;/li></code></pre>\n\n\n\n<p>The&nbsp;<strong>:confirm</strong>&nbsp;parameter presents a JavaScript confirmation box asking if you really want to perform the action. If the user clicks OK, the action proceeds, and the item is deleted.</p>\n\n\n\n<p>Now, try browsing books using&nbsp;<strong>http://localhost:3000/book/list.</strong>&nbsp;It will give you listing of all the books along with&nbsp;<strong>Edit</strong>&nbsp;and&nbsp;<strong>Delete</strong>&nbsp;options as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/delete-book.gif\" alt=\"Delete Book\"/></figure>\n\n\n\n<p>Now using the Delete option, you can delete any listed record.</p>\n\n\n\n<h2>Creating View File for show_subjects Method</h2>\n\n\n\n<p>Create a new file, show_subjects.html.erb, in the app/views/book directory and add the following code to it −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;h1>&lt;%= @subject.name -%>&lt;/h1>\n\n&lt;ul>\n   &lt;% @subject.books.each do |c| %>\n   &lt;li>&lt;%= link_to c.title, :action => \"show\", :id => c.id -%>&lt;/li>\n   &lt;% end %>\n&lt;/ul></code></pre>\n\n\n\n<p>You are taking advantage of associations by iterating through a single subject&#8217;s many books listings.</p>\n\n\n\n<p>Now modify the Subject: line of show.html.erb so that the subject listing shows a link.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;strong>Subject: &lt;/strong> &lt;%= link_to @book.subject.name,\n:action => \"show_subjects\", :id => @book.subject.id %>&lt;br /></code></pre>\n\n\n\n<p>This will output a list of subject on the index page, so that users can access them directly.</p>\n\n\n\n<p>Modify&nbsp;<strong>list.html.erb</strong>&nbsp;to add the following to the top of the file −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;ul id = \"subjects\">\n   &lt;% Subject.find(:all).each do |c| %>\n   &lt;li>&lt;%= link_to c.name, :action => \"show_subjects\", :id => c.id %>&lt;/li>\n   &lt;% end %>\n&lt;/ul></code></pre>\n\n\n\n<p>Now try browsing books using http://localhost:3000/book/list. It will display all subjects with links so that you can browse all the books related to that subject.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/list-subjects.gif\" alt=\"List Subjects\"/></figure>\n\n\n\n<h2>What is Next?</h2>\n\n\n\n<p>Hope now you are feeling comfortable with all the operations of Rails.</p>\n\n\n\n<p>The next chapter explains how to use&nbsp;<strong>Layouts</strong>&nbsp;to put your data in a better way. We will show you how to use CSS in your Rails applications.</p>\n","protected":false},"excerpt":{"rendered":"<p>A Rails View is an ERb program that shares data with controllers through mutually accessible variables. If you look in the app/views directory of the library application, you will see one subdirectory for each of the controllers, we have created: book. Each of these subdirectories was created automatically when the same-named controller was created with [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3262"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3262"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3262/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3262"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3262"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3262"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3264,"date":"2020-09-01T05:52:39","date_gmt":"2020-09-01T05:52:39","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3264"},"modified":"2020-09-01T05:52:39","modified_gmt":"2020-09-01T05:52:39","slug":"ruby-on-rails-layouts","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-layouts/","title":{"rendered":"Ruby on Rails &#8211; Layouts"},"content":{"rendered":"\n<p>A layout defines the surroundings of an HTML page. It&#8217;s the place to define a common look and feel of your final output. Layout files reside in app/views/layouts.</p>\n\n\n\n<p>The process involves defining a layout template and then letting the controller know that it exists and to use it. First, let&#8217;s create the template.</p>\n\n\n\n<p>Add a new file called standard.html.erb to app/views/layouts. You let the controllers know what template to use by the name of the file, so following a same naming scheme is advised.</p>\n\n\n\n<p>Add the following code to the new standard.html.erb file and save your changes −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n\n&lt;html xmlns = \"http://www.w3.org/1999/xhtml\">\n\n   &lt;head>\n      &lt;meta http-equiv = \"Content-Type\" content = \"text/html; charset = iso-8859-1\" />\n      &lt;meta http-equiv = \"Content-Language\" content = \"en-us\" />\n      &lt;title>Library Info System&lt;/title>\n      &lt;%= stylesheet_link_tag \"style\" %>\n   &lt;/head>\n\n   &lt;body id = \"library\">\n      &lt;div id = \"container\">\n         \n         &lt;div id = \"header\">\n            &lt;h1>Library Info System&lt;/h1>\n            &lt;h3>Library powered by Ruby on Rails&lt;/h3>\n         &lt;/div>\n\n         &lt;div id = \"content\">\n            &lt;%= yield -%>\n         &lt;/div>\n\n         &lt;div id = \"sidebar\">&lt;/div>\n         \n      &lt;/div>\n   &lt;/body>\n   \n&lt;/html></code></pre>\n\n\n\n<p>Everything you just added were standard HTML elements except two lines. The&nbsp;<strong>stylesheet_link_tag</strong>&nbsp;helper method outputs a stylesheet &lt;link&gt;. In this instance, we are linking style.css style sheet. The&nbsp;<strong>yield</strong>&nbsp;command lets Rails know that it should put the html.erb for the method called here.</p>\n\n\n\n<p>Now open&nbsp;<strong>book_controller.rb</strong>&nbsp;and add the following line just below the first line −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class BookController &lt; ApplicationController\nlayout 'standard'\ndef list\n@books = Book.all\nend\n...................\n</code></pre>\n\n\n\n<p>It instructs the controller that we want to use a layout available in the standard.html.erb file. Now try browsing books that will produce the following screen.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/layout-example1.gif\" alt=\"Layout Example\"/></figure>\n\n\n\n<h2>Adding Style Sheet</h2>\n\n\n\n<p>Till now, we have not created any style sheet, so Rails is using the default style sheet. Now let&#8217;s create a new file called style.css and save it in /public/stylesheets. Add the following code to this file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>body {\n   font-family: Helvetica, Geneva, Arial, sans-serif;\n   font-size: small;\n   font-color: #000;\n   background-color: #fff;\n}\n\na:link, a:active, a:visited {\n   color: #CD0000;\n}\n\ninput { \n   margin-bottom: 5px;\n}\n\np { \n   line-height: 150%;\n}\n\ndiv#container {\n   width: 760px;\n   margin: 0 auto;\n}\n\ndiv#header {\n   text-align: center;\n   padding-bottom: 15px;\n}\n\ndiv#content {\n   float: left;\n   width: 450px;\n   padding: 10px;\n}\n\ndiv#content h3 {\n   margin-top: 15px;\n}\n\nul#books {\n   list-style-type: none;\n}\n\nul#books li {\n   line-height: 140%;\n}\n\ndiv#sidebar {\n   width: 200px;\n   margin-left: 480px;\n}\n\nul#subjects {\n   width: 700px;\n   text-align: center;\n   padding: 5px;\n   background-color: #ececec;\n   border: 1px solid #ccc;\n   margin-bottom: 20px;\n}\n\nul#subjects li {\n   display: inline;\n   padding-left: 5px;\n}</code></pre>\n\n\n\n<p>Now refresh your browser and see the difference −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/layout-example2.gif\" alt=\"Layout Example\"/></figure>\n\n\n\n<h2>What is Next?</h2>\n\n\n\n<p>The next chapter explains how to develop applications using Rails Scaffolding to give user access to add, delete, and modify the records in any database.</p>\n","protected":false},"excerpt":{"rendered":"<p>A layout defines the surroundings of an HTML page. It&#8217;s the place to define a common look and feel of your final output. Layout files reside in app/views/layouts. The process involves defining a layout template and then letting the controller know that it exists and to use it. First, let&#8217;s create the template. Add a [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3264"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3264"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3264/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3264"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3264"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3264"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3266,"date":"2020-09-01T05:55:26","date_gmt":"2020-09-01T05:55:26","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3266"},"modified":"2020-09-01T05:55:26","modified_gmt":"2020-09-01T05:55:26","slug":"ruby-on-rails-scaffolding","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-scaffolding/","title":{"rendered":"Ruby on Rails &#8211; Scaffolding"},"content":{"rendered":"\n<p>While you&#8217;re developing Rails applications, especially those which are mainly providing you with a simple interface to data in a database, it can often be useful to use the scaffold method.</p>\n\n\n\n<p>Scaffolding provides more than cheap demo thrills. Here are some benefits −</p>\n\n\n\n<ul><li>You can quickly get code in front of your users for feedback.</li><li>You are motivated by faster success.</li><li>You can learn how Rails works by looking at the generated code.</li><li>You can use scaffolding as a foundation to jump start your development.</li></ul>\n\n\n\n<h2>Scaffolding Example</h2>\n\n\n\n<p>To understand&nbsp;<em>scaffolding,</em>&nbsp;let&#8217;s create a database called&nbsp;<strong>cookbook</strong>&nbsp;and a table called&nbsp;<strong>recipes</strong>.</p>\n\n\n\n<h2>Creating an Empty Rails Web Application</h2>\n\n\n\n<p>Open a command window and navigate to where you want to create this&nbsp;<strong>cookbook</strong>&nbsp;web application. So, run the following command to create a complete directory structure.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rails new cookbook\n</code></pre>\n\n\n\n<h2>Setting up the Database</h2>\n\n\n\n<p>Here is the way to create a database −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>mysql> create database cookbook;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql> grant all privileges on cookbook.*\nto 'root'@'localhost' identified by 'password';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> FLUSH PRIVILEGES;\nQuery OK, 0 rows affected (0.00 sec)\n</code></pre>\n\n\n\n<p>To instruct Rails how to find the database, edit the configuration file cookbook\\config\\database.yml and change the database name to cookbook. Leave the password empty. When you finish, it should look as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>development:\n   adapter: mysql\n   database: cookbook\n   username: root\n   password: &#91;password]\n   host: localhost\n\t\ntest:\n   adapter: mysql\n   database: cookbook\n   username: root\n   password: &#91;password]\n   host: localhost\n\t\nproduction:\n   adapter: mysql\n   database: cookbook\n   username: root\n   password: &#91;password]\n   host: localhost\n</code></pre>\n\n\n\n<p>Rails lets you run in the development mode, test mode, or production mode, using different databases. This application uses the same database for each.</p>\n\n\n\n<h2>The Generated Scaffold Code</h2>\n\n\n\n<p>With the scaffold action, Rails generates all the code it needs dynamically. By running&nbsp;<em>scaffold</em>&nbsp;as a script, we can get all the code written to disk, where we can investigate it and then start tailoring it to our requirements.</p>\n\n\n\n<p>So now, let&#8217;s start once again to generate Scaffold code manually by using the scaffold helper script −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cookbook> rails generate scaffold recipe\n</code></pre>\n\n\n\n<p>It generates auto-files as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/scoffold.jpg\" alt=\"Scaffold\"/></figure>\n\n\n\n<h2>The Controller</h2>\n\n\n\n<p>Let&#8217;s look at the code behind the controller. This code is generated by the&nbsp;<strong>scaffold</strong>&nbsp;generator. If you open app/controllers/recipes_controller.rb, then you will find something as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class RecipesController &lt; ApplicationController\n   before_action :set_recipe, only: &#91;:show, :edit, :update, :destroy]\n   \n   # GET /recipes\n   # GET /recipes.json\n   def index\n      @recipes = Recipe.all\n   end\n   \n   # GET /recipes/1\n   # GET /recipes/1.json\n   def show\n   end\n   \n   # GET /recipes/new\n   def new\n      @recipe = Recipe.new\n   end\n   \n   # GET /recipes/1/edit\n   def edit\n   end\n   \n   # POST /recipes\n   # POST /recipes.json\n   def create\n      @recipe = Recipe.new(recipe_params)\n      \n      respond_to do |format|\n         if @recipe.save\n            format.html { redirect_to @recipe, notice: 'Recipe was successfully created.' }\n            format.json { render :show, status: :created, location: @recipe }\n         else\n            format.html { render :new }\n            format.json { render json: @recipe.errors, status: :unprocessable_entity }\n         end\n      end\n      \n   end\n   \n   # PATCH/PUT /recipes/1\n   # PATCH/PUT /recipes/1.json\n   def update\n      respond_to do |format|\n         if @recipe.update(recipe_params)\n            format.html { redirect_to @recipe, notice: 'Recipe was successfully updated.' }\n            format.json { render :show, status: :ok, location: @recipe }\n         else\n            format.html { render :edit }\n            format.json { render json: @recipe.errors, status: :unprocessable_entity }\n         end\n      end\n      \n   end\n   \n   # DELETE /recipes/1\n   # DELETE /recipes/1.json\n   def destroy\n      @recipe.destroy\n         respond_to do |format|\n         format.html { redirect_to recipes_url, notice: 'Recipe was successfully destroyed.' }\n         format.json { head :no_content }\n      end\n   end\n   \n   private\n   \n   # Use callbacks to share common setup or constraints between actions.\n   def set_recipe\n      @recipe = Recipe.find(params&#91;:id])\n   end\n   \n   # Never trust parameters from the scary internet, only allow the white list through.\n   def recipe_params\n      params.require(:recipe).permit(:tittle, :instructions)\n   end\nend</code></pre>\n\n\n\n<p>When the user of a Rails application selects an action, e.g. &#8220;Show&#8221; &#8211; the controller will execute any code in the appropriate section &#8211; &#8220;def show&#8221; &#8211; and then by default will render a template of the same name &#8211; &#8220;show.html.erb&#8221;. This default behavior can be overwritten.</p>\n\n\n\n<p>The controller uses ActiveRecord methods such as&nbsp;<em>find, find_all, new, save, update_attributes, and destroy</em>&nbsp;to move data to and from the database tables. Note that you do not have to write any SQL statements, rails will take care of it automatically.</p>\n\n\n\n<p>This single line of code will bring the database table to life. It will provide with a simple interface to your data, and ways of −</p>\n\n\n\n<ul><li>Creating new entries</li><li>Editing current entries</li><li>Viewing current entries</li><li>Destroying current entries</li></ul>\n\n\n\n<p>When creating or editing an entry, scaffold will do all the hard work like form generation and handling for you, and will even provide clever form generation, supporting the following types of inputs −</p>\n\n\n\n<ul><li>Simple text strings</li><li>Text areas (or large blocks of text)</li><li>Date selectors</li><li>Date-time selectors</li></ul>\n\n\n\n<p>You can use Rails Migrations to create and maintain tables.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate RAILS_ENV=development\n</code></pre>\n\n\n\n<p>Now, go to the cookbook directory and run the Web Server using the following command −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>cookbook> rails server\n</code></pre>\n\n\n\n<p>Now, open a browser and navigate to&nbsp;<strong>http://127.0.0.1:3000/recipe/new.</strong>&nbsp;This will provide you a screen to create new entries in the recipes table. A screenshot is shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/create-recipe.gif\" alt=\"Create Recipe\"/></figure>\n\n\n\n<p>Once you press the&nbsp;<strong>Create</strong>&nbsp;button to create a new recipe, your record is added into the recipes table and it shows the following result −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/added-recipe.gif\" alt=\"Create Recipe\"/></figure>\n\n\n\n<p>You can see the option to edit, show, and destroy the records. So, play around with these options.</p>\n\n\n\n<p>You can also list down all the recipes available in the recipes table using the URL http://127.0.0.1:3000/recipe/list.</p>\n\n\n\n<h2>Enhancing the Model</h2>\n\n\n\n<p>Rails gives you a lot of error handling for free. To understand this, add some validation rules to the empty recipe model −</p>\n\n\n\n<p>Modify app/models/recipe.rb as follows and then test your application −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Recipe &lt; ActiveRecord::Base\n   validates_length_of :title, :within => 1..20\n   validates_uniqueness_of :title, :message => \"already exists\"\nend\n</code></pre>\n\n\n\n<p>These entries will give automatic checking.</p>\n\n\n\n<ul><li><strong>validates_length_of</strong>&nbsp;− the field is not blank and not too long.</li><li><strong>validates_uniqueness_of</strong>&nbsp;− duplicate values are trapped. Instead of the default Rails error message, we have given a custom message here.</li></ul>\n\n\n\n<h2>Alternative Way to Create Scaffolding</h2>\n\n\n\n<p>Create an application as shown above and&nbsp;<strong>The Generated Scaffold Code</strong>&nbsp;as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g scaffold Recipe tittle:string instructions:text\n</code></pre>\n\n\n\n<p>Above code generates the auto files with data base by using with sqlite3 with tittle and instruction column as shown below an image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/scoffold.jpg\" alt=\"Scaffold\"/></figure>\n\n\n\n<p>we need to migrate the data base by using below syntax.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ rake db:migrate RAILS_ENV=development\n</code></pre>\n\n\n\n<p>Finally run the application by using the following command line −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails server\n</code></pre>\n\n\n\n<p>It will generate the result as shown above output images.</p>\n\n\n\n<h2>The Views</h2>\n\n\n\n<p>All the views and corresponding all the controller methods are created by&nbsp;<strong>scaffold</strong>&nbsp;command and they are available in the app/views/recipes directory.</p>\n\n\n\n<h2>How Scaffolding is Different?</h2>\n\n\n\n<p>If you have gone through the previous chapters, then you must have seen that we had created methods to list, show, delete and create data etc., but scaffolding does that job automatically.</p>\n","protected":false},"excerpt":{"rendered":"<p>While you&#8217;re developing Rails applications, especially those which are mainly providing you with a simple interface to data in a database, it can often be useful to use the scaffold method. Scaffolding provides more than cheap demo thrills. Here are some benefits − You can quickly get code in front of your users for feedback. [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3266"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3266"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3266/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3266"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3266"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3266"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3268,"date":"2020-09-01T05:57:02","date_gmt":"2020-09-01T05:57:02","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3268"},"modified":"2020-09-01T05:57:02","modified_gmt":"2020-09-01T05:57:02","slug":"ruby-on-rails-ajax","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-ajax/","title":{"rendered":"Ruby on Rails &#8211; AJAX"},"content":{"rendered":"\n<p>Ajax stands for&nbsp;<strong>A</strong>synchronous&nbsp;<strong>J</strong>avaScript and&nbsp;<strong>X</strong>ML. Ajax is not a single technology; it is a suite of several technologies. Ajax incorporates the following −</p>\n\n\n\n<ul><li>XHTML for the markup of web pages</li><li>CSS for the styling</li><li>Dynamic display and interaction using the DOM</li><li>Data manipulation and interchange using XML</li><li>Data retrieval using XMLHttpRequest</li><li>JavaScript as the glue that meshes all this together</li></ul>\n\n\n\n<p>Ajax enables you to retrieve data for a web page without having to refresh the contents of the entire page. In the basic web architecture, the user clicks a link or submits a form. The form is submitted to the server, which then sends back a response. The response is then displayed for the user on a new page.</p>\n\n\n\n<p>When you interact with an Ajax-powered web page, it loads an Ajax engine in the background. The engine is written in JavaScript and its responsibility is to both communicate with the web server and display the results to the user. When you submit data using an Ajax-powered form, the server returns an HTML fragment that contains the server&#8217;s response and displays only the data that is new or changed as opposed to refreshing the entire page.</p>\n\n\n\n<p>For a complete detail on AJAX you can go through our&nbsp;<a href=\"https://www.tutorialspoint.com/ajax/index.htm\">AJAX Tutorial</a></p>\n\n\n\n<h2>How Rails Implements Ajax</h2>\n\n\n\n<p>Rails has a simple, consistent model for how it implements Ajax operations. Once the browser has rendered and displayed the initial web page, different user actions cause it to display a new web page (like any traditional web application) or trigger an Ajax operation −</p>\n\n\n\n<ul><li><strong>Some trigger fires</strong>&nbsp;− This trigger could be the user clicking on a button or link, the user making changes to the data on a form or in a field, or just a periodic trigger (based on a timer).</li><li><strong>The web client calls the server</strong>&nbsp;− A JavaScript method,&nbsp;<em>XMLHttpRequest</em>, sends data associated with the trigger to an action handler on the server. The data might be the ID of a checkbox, the text in an entry field, or a whole form.</li><li><strong>The server does processing</strong>&nbsp;− The server-side action handler ( Rails controller action )&#8211; does something with the data and returns an HTML fragment to the web client.</li><li><strong>The client receives the response</strong>&nbsp;− The client-side JavaScript, which Rails creates automatically, receives the HTML fragment and uses it to update a specified part of the current page&#8217;s HTML, often the content of a &lt;div&gt; tag.</li></ul>\n\n\n\n<p>These steps are the simplest way to use Ajax in a Rails application, but with a little extra work, you can have the server return any kind of data in response to an Ajax request, and you can create custom JavaScript in the browser to perform more involved interactions.</p>\n\n\n\n<h2>AJAX Example</h2>\n\n\n\n<p>This example works based on scaffold, Destroy concept works based on ajax.</p>\n\n\n\n<p>In this example, we will provide, list, show and create operations on ponies table. If you did not understand the scaffold technology then we would suggest you to go through the previous chapters first and then continue with AJAX on Rails.</p>\n\n\n\n<h2>Creating An Application</h2>\n\n\n\n<p>Let us start with the creation of an application It will be done as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails new ponies\n</code></pre>\n\n\n\n<p>The above command creates an application, now we need to call the app directory using with cd command. It will enter in to an application directory then we need to call a scaffold command. It will be done as follows −</p>\n\n\n\n<pre class=\"wp-block-preformatted\">rails generate scaffold Pony name:string profession:string\n</pre>\n\n\n\n<p>Above command generates the scaffold with name and profession column. We need to migrate the data base as follows command</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate\n</code></pre>\n\n\n\n<p>Now Run the Rails application as follows command</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails s\n</code></pre>\n\n\n\n<p>Now open the web browser and call a url as http://localhost:3000/ponies/new, The output will be as follows</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax.jpg\" alt=\"Ajax\"/></figure>\n\n\n\n<h2>Creating an Ajax</h2>\n\n\n\n<p>Now open app/views/ponies/index.html.erb with suitable text editors. Update your destroy line with :remote =&gt; true, :class =&gt; &#8216;delete_pony&#8217;.At finally, it looks like as follows.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax1.jpg\" alt=\"Ajax\"/></figure>\n\n\n\n<p>Create a file, destroy.js.erb, put it next to your other .erb files (under app/views/ponies). It should look like this −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax2.jpg\" alt=\"Ajax\"/></figure>\n\n\n\n<p>Now enter the code as shown below in destroy.js.erb</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$('.delete_pony').bind('ajax:success', function() {\n   $(this).closest('tr').fadeOut();\n});</code></pre>\n\n\n\n<p>Now Open your controller file which is placed at app/controllers/ponies_controller.rb and add the following code in destroy method as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code># DELETE /ponies/1\n# DELETE /ponies/1.json\ndef destroy\n   @pony = Pony.find(params&#91;:id])\n   @pony.destroy\n   \n   respond_to do |format|\n      format.html { redirect_to ponies_url }\n      format.json { head :no_content }\n      format.js   { render :layout => false }\n   end\n   \nend</code></pre>\n\n\n\n<p>At finally controller page is as shown image.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax3.jpg\" alt=\"Ajax\"/></figure>\n\n\n\n<p>Now run an application, Output called from http://localhost:3000/ponies/new, it will looks like as following image</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax4.jpg\" alt=\"Ajax\"/></figure>\n\n\n\n<p>Press on create pony button, it will generate the result as follows</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax5.jpg\" alt=\"Ajax\"/></figure>\n\n\n\n<p>Now click on back button, it will show all pony created information as shown image</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax6.jpg\" alt=\"Ajax\"/></figure>\n\n\n\n<p>Till now, we are working on scaffold, now click on destroy button, it will call a pop-up as shown below image, the pop-up works based on Ajax.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax7.jpg\" alt=\"Ajax\"/></figure>\n\n\n\n<p>If Click on ok button, it will delete the record from pony. Here I have clicked ok button. Final output will be as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/ajax8.jpg\" alt=\"Ajax\"/></figure>\n","protected":false},"excerpt":{"rendered":"<p>Ajax stands for&nbsp;Asynchronous&nbsp;JavaScript and&nbsp;XML. Ajax is not a single technology; it is a suite of several technologies. Ajax incorporates the following − XHTML for the markup of web pages CSS for the styling Dynamic display and interaction using the DOM Data manipulation and interchange using XML Data retrieval using XMLHttpRequest JavaScript as the glue that [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3268"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3268"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3268/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3268"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3268"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3268"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3270,"date":"2020-09-01T05:59:48","date_gmt":"2020-09-01T05:59:48","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3270"},"modified":"2020-09-01T05:59:48","modified_gmt":"2020-09-01T05:59:48","slug":"ruby-on-rails-file-uploading","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-file-uploading/","title":{"rendered":"Ruby on Rails &#8211; File Uploading"},"content":{"rendered":"\n<p>You may have a requirement in which you want your site visitors to upload a file on your server. Rails makes it very easy to handle this requirement. Now we will proceed with a simple and small Rails project.</p>\n\n\n\n<p>As usual, let&#8217;s start off with a new Rails application called&nbsp;<strong>testfile</strong>. Let&#8217;s create the basic structure of the application by using simple rails command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rails new testfile\n</code></pre>\n\n\n\n<p>Before starting application development, we should install gem files as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>gem install carrierwave\ngem install bootstrap-sass\n</code></pre>\n\n\n\n<p>Open up your gemfile and add the following two gems at the bottom as shown in the following image −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/gem.jpg\" alt=\"GEM\"/></figure>\n\n\n\n<p>After adding gems in the gem file, we need to run the following command on the console −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>bundle install\n</code></pre>\n\n\n\n<h2>Creating the Model</h2>\n\n\n\n<p>We need to create a model with two strings as name and attachment as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g model Resume name:string attachment:string\n</code></pre>\n\n\n\n<p>We need to create the database migration as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rake db:migrate\n</code></pre>\n\n\n\n<p>We need to generate the controller as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g controller Resumes index new create destroy\n</code></pre>\n\n\n\n<p>Great! Now we have the basic structure set up. Now we need to create an uploader. An Uploader came from carrierwave gem and it tells to carrierwave how to handle the files. In short, it contained all file processing functionalities. Run the command to create an uploader as shown below</p>\n\n\n\n<pre class=\"wp-block-code\"><code>rails g uploader attachment\n</code></pre>\n\n\n\n<p>Now open the resume model and call the uploader as shown below. Resume model has placed at app/models/resume.rb −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Resume &lt; ActiveRecord::Base\n   mount_uploader :attachment, AttachmentUploader # Tells rails to use this uploader for this model.\n   validates :name, presence: true # Make sure the owner's name is present.\nend</code></pre>\n\n\n\n<p>Before working on controller, we need to modify our config/routes.db as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>CarrierWaveExample::Application.routes.draw do\n   resources :resumes, only: &#91;:index, :new, :create, :destroy]\n   root \"resumes#index\"\nend</code></pre>\n\n\n\n<p>Lets us edit the controller as shown below.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class ResumesController &lt; ApplicationController\n   def index\n      @resumes = Resume.all\n   end\n   \n   def new\n      @resume = Resume.new\n   end\n   \n   def create\n      @resume = Resume.new(resume_params)\n      \n      if @resume.save\n         redirect_to resumes_path, notice: \"The resume #{@resume.name} has been uploaded.\"\n      else\n         render \"new\"\n      end\n      \n   end\n   \n   def destroy\n      @resume = Resume.find(params&#91;:id])\n      @resume.destroy\n      redirect_to resumes_path, notice:  \"The resume #{@resume.name} has been deleted.\"\n   end\n   \n   private\n      def resume_params\n      params.require(:resume).permit(:name, :attachment)\n   end\n   \nend</code></pre>\n\n\n\n<p>Let&#8217;s add bootstrap implementation in css file.css file could be in app/assets/stylesheets/resumes.css.scss</p>\n\n\n\n<pre class=\"wp-block-code\"><code>@import \"bootstrap\";\n</code></pre>\n\n\n\n<p>Now open up app/views/layouts/application.html.erb and add codes as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html>\n&lt;html>\n   \n   &lt;head>\n      &lt;title>Tutorialspoint&lt;/title>\n      &lt;%= stylesheet_link_tag \"application\", media: \"all\", \"data-turbolinks-track\" => true %>\n      &lt;%= javascript_include_tag \"application\", \"data-turbolinks-track\" => true %>\n      &lt;%= csrf_meta_tags %>\n   &lt;/head>\n   \n   &lt;body>\n      &lt;div class = \"container\" style = \"padding-top:20px;\">\n         &lt;%= yield %>\n      &lt;/div>\n   &lt;/body>\n\n&lt;/html></code></pre>\n\n\n\n<p>Now we need to set up index views as shown below −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;% if !flash&#91;:notice].blank? %>\n   &lt;div class = \"alert alert-info\">\n      &lt;%= flash&#91;:notice] %>\n   &lt;/div>\n&lt;% end %>\n\n&lt;br />\n\n&lt;%= link_to \"New Resume\", new_resume_path, class: \"btn btn-primary\" %>\n&lt;br />\n&lt;br />\n\n&lt;table class = \"table table-bordered table-striped\">\n   &lt;thead>.\n      &lt;tr>\n         &lt;th>Name&lt;/th>\n         &lt;th>Download Link&lt;/th>\n         &lt;th> &lt;/th>\n      &lt;/tr>\n   &lt;/thead>\n   \n   &lt;tbody>\n      &lt;% @resumes.each do |resume| %>\n         \n         &lt;tr>\n            &lt;td>&lt;%= resume.name %>&lt;/td>\n            &lt;td>&lt;%= link_to \"Download Resume\", resume.attachment_url %>&lt;/td>\n            &lt;td>&lt;%= button_to \"Delete\",  resume, method: :delete, class: \"btn btn-danger\", confirm: \"Are you sure that you wish to delete #{resume.name}?\" %>&lt;/td>\n         &lt;/tr>\n         \n      &lt;% end %>\n   &lt;/tbody>\n   \n&lt;/table></code></pre>\n\n\n\n<p>Now, lets edit new.html.erb and add our form code.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;% if !@resume.errors.empty? %>\n   &lt;div class = \"alert alert-error\">\n      \n      &lt;ul>\n         &lt;% @resume.errors.full_messages.each do |msg| %>\n            &lt;li>&lt;%= msg %>&lt;/li>\n         &lt;% end %>\n      &lt;/ul>\n      \n   &lt;/div>\n&lt;% end %>\n\n&lt;div class = \"well\">\n   &lt;%= form_for @resume, html: { multipart: true } do |f| %>\n      &lt;%= f.label :name %>\n      &lt;%= f.text_field :name %>\n      &lt;%= f.label :attachment %>\n      &lt;%= f.file_field :attachment %>\n      &lt;%= f.submit \"Save\", class: \"btn btn-primary\" %>\n   &lt;% end %>\n&lt;/div></code></pre>\n\n\n\n<p>Now start the server and visit http://localhost:3000. It will produce a screen similar to as follows −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/output.jpg\" alt=\"Output\"/></figure>\n\n\n\n<p>One last thing we need to do is filter the list of allowed filetypes. For that we need add simple code as shown below at app/uploaders/attachment_uploader.rb</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class AttachmentUploader &lt; CarrierWave::Uploader::Base\n   storage :file\n   \n   def store_dir\n      \"uploads/#{model.class.to_s.underscore}/#{mounted_as}/#{model.id}\"\n   end\n   \n   def extension_white_list\n      %w(pdf doc htm html docx)\n   end\nend</code></pre>\n\n\n\n<p>Now start the server and visit http://localhost:3000. Now input a wrong format; it will generate a wrong message as shown below −</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/output_wrong.jpg\" alt=\"Output Wrong\"/></figure>\n\n\n\n<p>For a complete detail on&nbsp;<strong>File</strong>&nbsp;object, you need to go through the&nbsp;<strong>Ruby Reference Manual</strong>.</p>\n","protected":false},"excerpt":{"rendered":"<p>You may have a requirement in which you want your site visitors to upload a file on your server. Rails makes it very easy to handle this requirement. Now we will proceed with a simple and small Rails project. As usual, let&#8217;s start off with a new Rails application called&nbsp;testfile. Let&#8217;s create the basic structure [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3270"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3270"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3270/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3270"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3270"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3270"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}},{"id":3272,"date":"2020-09-01T06:02:40","date_gmt":"2020-09-01T06:02:40","guid":{"rendered":"http://learnwebdev.foobrdigital.com/?p=3272"},"modified":"2020-09-01T06:02:40","modified_gmt":"2020-09-01T06:02:40","slug":"ruby-on-rails-send-emails","status":"publish","type":"post","link":"https://computerprogramming.foobrdigital.com/ruby-on-rails-send-emails/","title":{"rendered":"Ruby on Rails &#8211; Send Emails"},"content":{"rendered":"\n<p><strong>Action Mailer</strong>&nbsp;is the Rails component that enables applications to send and receive emails. In this chapter, we will see how to send an email using Rails. Let’s start creating an&nbsp;<strong>emails</strong>&nbsp;project using the following command.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> rails new mailtest\n</code></pre>\n\n\n\n<p>This will create the required framework to proceed. Now, we will start with configuring the ActionMailer.</p>\n\n\n\n<h2>Action Mailer &#8211; Configuration</h2>\n\n\n\n<p>Following are the steps you have to follow to complete your configuration before proceeding with the actual work −</p>\n\n\n\n<p>Go to the config folder of your emails project and open environment.rb file and add the following line at the bottom of this file.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>config.action_mailer.delivery_method = :smtp\n</code></pre>\n\n\n\n<p>It tells ActionMailer that you want to use the SMTP server. You can also set it to be :sendmail if you are using a Unix-based operating system such as Mac OS X or Linux.</p>\n\n\n\n<p>Add the following lines of code at the bottom of your environment.rb as well.</p>\n\n\n\n<pre class=\"wp-block-code\"><code>config.action_mailer.smtp_settings = {\n   address:              'smtp.gmail.com',\n   port:                 587,\n   domain:               'example.com',\n   user_name:            '&lt;username>',\n   password:             '&lt;password>',\n   authentication:       'plain',\n   enable_starttls_auto: true  \n}</code></pre>\n\n\n\n<p>Replace each hash value with proper settings for your Simple Mail Transfer Protocol (SMTP) server. You can take this information from your Internet Service Provider if you already don&#8217;t know. You don&#8217;t need to change port number 25 and authentication type if you are using a standard SMTP server.</p>\n\n\n\n<p>You may also change the default email message format. If you prefer to send email in HTML instead of plain text format, add the following line to config/environment.rb as well −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>ActionMailer::Base.default_content_type = \"text/html\"\n</code></pre>\n\n\n\n<p>ActionMailer::Base.default_content_type could be set to &#8220;text/plain&#8221;, &#8220;text/html&#8221;, and &#8220;text/enriched&#8221;. The default value is &#8220;text/plain&#8221;.</p>\n\n\n\n<p>The next step will be to create a mailer</p>\n\n\n\n<h2>Generate a Mailer</h2>\n\n\n\n<p>Use the following command to generate a mailer as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>tp> cd emails\nemails> rails generate mailer Usermailer\n</code></pre>\n\n\n\n<p>This will create a file user_mailer.rb in the app\\mailer directory. Check the content of this file as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class Emailer &lt; ActionMailer::Base\nend\n</code></pre>\n\n\n\n<p>Let&#8217;s create one method as follows −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class UserMailer &lt; ApplicationMailer\n   default from: 'notifications@example.com'\n   \n   def welcome_email(user)\n      @user = user\n      @url  = 'http://www.gmail.com'\n      mail(to: @user.email, subject: 'Welcome to My Awesome Site')\n   end\n   \nend\n</code></pre>\n\n\n\n<ul><li><strong>default Hash</strong>&nbsp;− This is a hash of default values for any email you send from this mailer. In this case we are setting the :from header to a value for all messages in this class. This can be overridden on a per-email basis</li><li><strong>mail</strong>&nbsp;− The actual email message, we are passing the :to and :subject headers in.</li></ul>\n\n\n\n<p>Create a file called welcome_email.html.erb in app/views/user_mailer/. This will be the template used for the email, formatted in HTML −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>&lt;html>\n   \n   &lt;head>\n      &lt;meta content = 'text/html; charset = UTF-8' http-equiv = 'Content-Type' />\n   &lt;/head>\n   \n   &lt;body>\n      &lt;h1>Welcome to example.com, &lt;%= @user.name %>&lt;/h1>\n      \n      &lt;p>\n         You have successfully signed up to example.com,your username is: \n         &lt;%= @user.login %>.&lt;br>\n      &lt;/p>\n      \n      &lt;p>\n         To login to the site, just follow this link: \n         &lt;%= @url %>.\n      &lt;/p>\n      \n      &lt;p>Thanks for joining and have a great day!&lt;/p>\n      \n   &lt;/body>\n&lt;/html></code></pre>\n\n\n\n<p>Next we will create a text part for this application as follow −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>Welcome to example.com, &lt;%= @user.name %>\n===============================================\n \nYou have successfully signed up to example.com,\nyour username is: &lt;%= @user.login %>.\n \nTo login to the site, just follow this link: &lt;%= @url %>.\n \nThanks for joining and have a great day!\n</code></pre>\n\n\n\n<h2>Calling the Mailer</h2>\n\n\n\n<p>First, let&#8217;s create a simple User scaffold</p>\n\n\n\n<pre class=\"wp-block-code\"><code>$ bin/rails generate scaffold user name email login\n$ bin/rake db:migrate\n</code></pre>\n\n\n\n<p>Action Mailer is nicely integrated with Active Job so you can send emails outside of the request-response cycle, so the user doesn&#8217;t have to wait on it −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>class UsersController &lt; ApplicationController\n   # POST /users\n   # POST /users.json\n   def create\n   @user = User.new(params&#91;:user])\n   \n      respond_to do |format|\n         if @user.save\n            # Tell the UserMailer to send a welcome email after save\n            UserMailer.welcome_email(@user).deliver_later\n            \n            format.html { redirect_to(@user, notice: 'User was successfully created.') }\n            format.json { render json: @user, status: :created, location: @user }\n         else\n            format.html { render action: 'new' }\n            format.json { render json: @user.errors, status: :unprocessable_entity }\n         end\n         \n      end\n      \n   end\nend</code></pre>\n\n\n\n<p>Now, test your application by using http://127.0.0.1:3000/users/new. It displays the following screen and by using this screen, you will be able to send your message to anybody.</p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"https://www.tutorialspoint.com/ruby-on-rails/images/send-email.gif\" alt=\"Send Email\"/></figure>\n\n\n\n<p>This will send your message and will display the text message &#8220;Message sent successfully&#8221; and output as follow −</p>\n\n\n\n<pre class=\"wp-block-code\"><code>sent mail to kittuprasad700@gmail.com (2023.Sms)\n&#91;ActiveJob] &#91;ActionMailler::DeliveryJob] &#91;2cfde3c-260e-4a33-1a6ada13a9b] Date: Thu, 09 Jul 2015 11:44:05 +0530\nFrom: notification@example.com\nTo: kittuprasad700@gmail.com\nMessage-Id: &lt;559e112d63c57_f1031e7f23467@kiranPro.mail>\nSubject: Welcome to My Awesome Site\nMime-Version: 1.0\nContent-Type: multipart/alternative;\nboundary=\"--mimepart_559e112d601c8_f1031e7f20233f5\";\ncharset=UTF-8\nContent-Transfer-Encoding:7bit\n</code></pre>\n\n\n\n<p>For more information on how to send emails using Rails, please go through&nbsp;<a href=\"http://en.wikibooks.org/wiki/Ruby_on_Rails/ActionMailer\" rel=\"noreferrer noopener\" target=\"_blank\">ActionMailer</a>.</p>\n","protected":false},"excerpt":{"rendered":"<p>Action Mailer&nbsp;is the Rails component that enables applications to send and receive emails. In this chapter, we will see how to send an email using Rails. Let’s start creating an&nbsp;emails&nbsp;project using the following command. This will create the required framework to proceed. Now, we will start with configuring the ActionMailer. Action Mailer &#8211; Configuration Following [&hellip;]</p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[25],"tags":[],"_links":{"self":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3272"}],"collection":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts"}],"about":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/types/post"}],"author":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/users/1"}],"replies":[{"embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/comments?post=3272"}],"version-history":[{"count":0,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/posts/3272/revisions"}],"wp:attachment":[{"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/media?parent=3272"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/categories?post=3272"},{"taxonomy":"post_tag","embeddable":true,"href":"https://computerprogramming.foobrdigital.com/wp-json/wp/v2/tags?post=3272"}],"curies":[{"name":"wp","href":"https://api.w.org/{rel}","templated":true}]}}]